/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "gto_d2_kit/d2_ee_pppd_AC.hpp"
#include <cmath>
/*

*/
#pragma GCC optimize("O0")
namespace {
    const double Pi = M_PI;
}
//
void second_derivative_ee_1112_13(const double ae,
                                  const double xA,
                                  const double yA,
                                  const double zA,
                                  const double be,
                                  const double xB,
                                  const double yB,
                                  const double zB,
                                  const double ce,
                                  const double xC,
                                  const double yC,
                                  const double zC,
                                  const double de,
                                  const double xD,
                                  const double yD,
                                  const double zD,
                                  const double* const bs,
                                  double* const d2eexx,
                                  double* const d2eexy,
                                  double* const d2eexz,
                                  double* const d2eeyx,
                                  double* const d2eeyy,
                                  double* const d2eeyz,
                                  double* const d2eezx,
                                  double* const d2eezy,
                                  double* const d2eezz)
{
    const double p = ae + be;
    const double q = ce + de;
    const double xP = (ae * xA + be * xB) / p;
    const double yP = (ae * yA + be * yB) / p;
    const double zP = (ae * zA + be * zB) / p;
    const double xQ = (ce * xC + de * xD) / q;
    const double yQ = (ce * yC + de * yD) / q;
    const double zQ = (ce * zC + de * zD) / q;
    const double C137061 = ae * be;
    const double C137060 = ae + be;
    const double C137059 = 0 * be;
    const double C137058 = xA - xB;
    const double C137085 = 0 * ce;
    const double C137084 = ce * de;
    const double C137083 = 0 * de;
    const double C137082 = ce + de;
    const double C137081 = 0 * de;
    const double C137080 = xC - xD;
    const double C137136 = 0 * de;
    const double C137135 = yC - yD;
    const double C137151 = 0 * de;
    const double C137150 = zC - zD;
    const double C137194 = 0 * ce;
    const double C137190 = 0 * de;
    const double C137240 = 0 * ce;
    const double C137236 = 0 * de;
    const double C137276 = yA - yB;
    const double C137283 = zA - zB;
    const double C137301 = 0 * be;
    const double C137317 = 0 * be;
    const double C137327 = p + q;
    const double C137326 = p * q;
    const double C137332 = xP - xQ;
    const double C137331 = bs[2];
    const double C137341 = ae * ce;
    const double C137337 = bs[3];
    const double C137350 = bs[4];
    const double C137371 = bs[5];
    const double C137413 = bs[6];
    const double C137474 = yP - yQ;
    const double C137532 = zP - zQ;
    const double C107 = bs[0];
    const double C137062 = std::pow(C137060, 2);
    const double C139291 = 2 * C137060;
    const double C137063 = C137061 * C137058;
    const double C139282 = std::pow(C137058, 2);
    const double C139548 = C137058 * be;
    const double C139547 = C137058 * ae;
    const double C137090 = C137085 / C137082;
    const double C137087 = 2 * C137082;
    const double C137086 = std::pow(C137082, 2);
    const double C137333 = C137082 * C137060;
    const double C137089 = C137084 * C137080;
    const double C137088 = C137080 * C137083;
    const double C139296 = C137080 * de;
    const double C139295 = C137080 * ce;
    const double C139294 = std::pow(C137080, 2);
    const double C137137 = C137084 * C137135;
    const double C137191 = C137135 * C137136;
    const double C139324 = std::pow(C137135, 2);
    const double C139373 = C137135 * de;
    const double C139372 = C137135 * ce;
    const double C137152 = C137084 * C137150;
    const double C137237 = C137150 * C137151;
    const double C139335 = std::pow(C137150, 2);
    const double C139399 = C137150 * de;
    const double C139398 = C137150 * ce;
    const double C137199 = C137194 / C137082;
    const double C137245 = C137240 / C137082;
    const double C137302 = C137061 * C137276;
    const double C139438 = std::pow(C137276, 2);
    const double C139572 = C137276 * be;
    const double C139570 = C137276 * ae;
    const double C137318 = C137061 * C137283;
    const double C139453 = std::pow(C137283, 2);
    const double C139573 = C137283 * be;
    const double C139571 = C137283 * ae;
    const double C137328 = 2 * C137326;
    const double C137342 = C137332 * ae;
    const double C137340 = std::pow(C137332, 2);
    const double C137338 = C137332 * ce;
    const double C137477 = C137332 * C137474;
    const double C137476 = C137474 * ce;
    const double C137592 = C137474 * C137332;
    const double C137591 = C137474 * ae;
    const double C137646 = std::pow(C137474, 2);
    const double C137535 = C137332 * C137532;
    const double C137534 = C137532 * ce;
    const double C137671 = C137474 * C137532;
    const double C137693 = C137532 * C137332;
    const double C137692 = C137532 * ae;
    const double C137747 = C137532 * C137474;
    const double C137768 = std::pow(C137532, 2);
    const double C137064 = 2 * C137062;
    const double C139549 = std::pow(C139291, -1);
    const double C139283 = C139282 * C137061;
    const double C139304 = std::pow(C137087, -1);
    const double C139558 = std::pow(C137087, -2);
    const double C137091 = 2 * C137086;
    const double C139556 = 4 * C137086;
    const double C137092 = C137088 / C137082;
    const double C139297 = C139294 * C137084;
    const double C137196 = C137191 / C137082;
    const double C139325 = C139324 * C137084;
    const double C137242 = C137237 / C137082;
    const double C139336 = C139335 * C137084;
    const double C139439 = C139438 * C137061;
    const double C139454 = C139453 * C137061;
    const double C137330 = C137328 / C137327;
    const double C125 =
        (-((std::pow(xP - xQ, 2) * bs[2] * std::pow(C137328 / C137327, 2) -
            (bs[1] * C137328) / C137327) *
           ae * ce) /
         C137082) /
        C137060;
    const double C108 = -(C137332 * bs[1] * C137328) / C137327;
    const double C831 = -(C137474 * bs[1] * C137328) / C137327;
    const double C1767 = -(C137532 * bs[1] * C137328) / C137327;
    const double C137345 = C137337 * C137342;
    const double C137356 = C137350 * C137342;
    const double C137380 = C137371 * C137342;
    const double C137428 = C137413 * C137342;
    const double C113 = (-(bs[1] * C137342 * C137328) / C137327) / C137060;
    const double C137352 = C137340 * C137350;
    const double C137375 = C137340 * C137371;
    const double C137422 = C137340 * C137413;
    const double C137344 = C137337 * C137338;
    const double C137353 = C137350 * C137338;
    const double C137376 = C137371 * C137338;
    const double C137424 = C137413 * C137338;
    const double C116 = (bs[1] * C137338 * C137328) / (C137327 * C137082);
    const double C137479 = C137477 * ae;
    const double C137478 = C137337 * C137476;
    const double C137484 = C137350 * C137476;
    const double C137491 = C137371 * C137476;
    const double C137507 = C137413 * C137476;
    const double C182 = (bs[1] * C137476 * C137328) / (C137327 * C137082);
    const double C137594 = C137592 * ae;
    const double C137593 = C137337 * C137591;
    const double C137599 = C137350 * C137591;
    const double C137606 = C137371 * C137591;
    const double C137622 = C137413 * C137591;
    const double C308 = (-(bs[1] * C137591 * C137328) / C137327) / C137060;
    const double C137648 = C137646 * C137350;
    const double C137653 = C137646 * C137371;
    const double C137658 = C137646 * C137413;
    const double C137537 = C137535 * ae;
    const double C137536 = C137337 * C137534;
    const double C137542 = C137350 * C137534;
    const double C137549 = C137371 * C137534;
    const double C137565 = C137413 * C137534;
    const double C245 = (bs[1] * C137534 * C137328) / (C137327 * C137082);
    const double C137672 = C137671 * ae;
    const double C137695 = C137693 * ae;
    const double C137694 = C137337 * C137692;
    const double C137700 = C137350 * C137692;
    const double C137707 = C137371 * C137692;
    const double C137723 = C137413 * C137692;
    const double C555 = (-(bs[1] * C137692 * C137328) / C137327) / C137060;
    const double C137748 = C137747 * ae;
    const double C137770 = C137768 * C137350;
    const double C137775 = C137768 * C137371;
    const double C137780 = C137768 * C137413;
    const double C139284 = C139283 / C137060;
    const double C137097 = C137083 / C137091;
    const double C137095 = C137081 / C137091;
    const double C137193 = C137136 / C137091;
    const double C137197 = C137190 / C137091;
    const double C137239 = C137151 / C137091;
    const double C137243 = C137236 / C137091;
    const double C137094 = 0 - C137092;
    const double C139298 = C139297 / C137082;
    const double C137200 = 0 - C137196;
    const double C139326 = C139325 / C137082;
    const double C137246 = 0 - C137242;
    const double C139337 = C139336 / C137082;
    const double C139440 = C139439 / C137060;
    const double C139455 = C139454 / C137060;
    const double C137334 = std::pow(C137330, 2);
    const double C137336 = -C137330;
    const double C137351 = std::pow(C137330, 4);
    const double C137414 = std::pow(C137330, 6);
    const double C137481 = C137479 * ce;
    const double C137596 = C137594 * ce;
    const double C137539 = C137537 * ce;
    const double C137673 = C137672 * ce;
    const double C137697 = C137695 * ce;
    const double C137749 = C137748 * ce;
    const double C139285 = -C139284;
    const double C137099 = C137094 * ce;
    const double C139299 = -C139298;
    const double C137203 = C137200 * ce;
    const double C139327 = -C139326;
    const double C137249 = C137246 * ce;
    const double C139338 = -C139337;
    const double C139441 = -C139440;
    const double C139456 = -C139455;
    const double C137339 = C137331 * C137334;
    const double C126 =
        (-(C137334 * C137331 * C137332 * ae * ce) / C137082) / C137060 -
        (ae * C137334 * C137331 * C137332 * ce) / C137333 -
        (C137332 *
         (C137331 * C137334 +
          std::pow(C137332, 2) * bs[3] * std::pow(-C137330, 3)) *
         ae * ce) /
            C137333;
    const double C188 =
        (-(C137334 * C137331 * C137332 * (yP - yQ) * ae * ce) / C137082) /
        C137060;
    const double C251 =
        (-(C137334 * C137331 * C137332 * (zP - zQ) * ae * ce) / C137082) /
        C137060;
    const double C314 =
        (-(C137334 * C137331 * C137474 * C137332 * ae * ce) / C137082) /
        C137060;
    const double C394 = (-((std::pow(C137474, 2) * C137331 * C137334 -
                            (bs[1] * C137328) / C137327) *
                           C137341) /
                         C137082) /
                        C137060;
    const double C474 =
        (-(C137334 * C137331 * C137474 * C137532 * ae * ce) / C137082) /
        C137060;
    const double C561 =
        (-(C137334 * C137331 * C137532 * C137332 * ae * ce) / C137082) /
        C137060;
    const double C641 =
        (-(C137334 * C137331 * C137532 * C137474 * ae * ce) / C137082) /
        C137060;
    const double C719 = (-((std::pow(C137532, 2) * C137331 * C137334 -
                            (bs[1] * C137328) / C137327) *
                           C137341) /
                         C137082) /
                        C137060;
    const double C114 = (C137332 * C137334 * C137331 * C137342) / C137060 -
                        (ae * bs[1] * C137328) / (C137327 * C137060);
    const double C117 = (ce * bs[1] * C137328) / (C137327 * C137082) -
                        (C137332 * C137334 * C137331 * C137338) / C137082;
    const double C183 = -(C137332 * C137334 * C137331 * C137476) / C137082;
    const double C246 = -(C137332 * C137334 * C137331 * C137534) / C137082;
    const double C309 = (C137332 * C137334 * C137331 * C137591) / C137060;
    const double C556 = (C137332 * C137334 * C137331 * C137692) / C137060;
    const double C841 = -(C137474 * C137334 * C137331 * C137338) / C137082;
    const double C842 = (C137474 * C137334 * C137331 * C137342) / C137060;
    const double C939 = (ce * bs[1] * C137328) / (C137327 * C137082) -
                        (C137474 * C137334 * C137331 * C137476) / C137082;
    const double C1029 = -(C137474 * C137334 * C137331 * C137534) / C137082;
    const double C1118 = (C137474 * C137334 * C137331 * C137591) / C137060 -
                         (ae * bs[1] * C137328) / (C137327 * C137060);
    const double C1440 = (C137474 * C137334 * C137331 * C137692) / C137060;
    const double C1777 = -(C137532 * C137334 * C137331 * C137338) / C137082;
    const double C1778 = (C137532 * C137334 * C137331 * C137342) / C137060;
    const double C1873 = -(C137532 * C137334 * C137331 * C137476) / C137082;
    const double C1965 = (ce * bs[1] * C137328) / (C137327 * C137082) -
                         (C137532 * C137334 * C137331 * C137534) / C137082;
    const double C2054 = (C137532 * C137334 * C137331 * C137591) / C137060;
    const double C2376 = (C137532 * C137334 * C137331 * C137692) / C137060 -
                         (ae * bs[1] * C137328) / (C137327 * C137060);
    const double C137343 = std::pow(C137336, 3);
    const double C137372 = std::pow(C137336, 5);
    const double C137360 = C137351 * C137356;
    const double C137359 = C137351 * C137353;
    const double C137358 = C137352 * C137351;
    const double C137370 = C137350 * C137351;
    const double C137486 = C137351 * C137484;
    const double C137544 = C137351 * C137542;
    const double C137601 = C137351 * C137599;
    const double C137649 = C137648 * C137351;
    const double C137702 = C137351 * C137700;
    const double C137771 = C137770 * C137351;
    const double C137436 = C137414 * C137428;
    const double C137433 = C137414 * C137424;
    const double C137432 = C137422 * C137414;
    const double C137512 = C137414 * C137507;
    const double C137570 = C137414 * C137565;
    const double C137627 = C137414 * C137622;
    const double C137660 = C137658 * C137414;
    const double C137728 = C137414 * C137723;
    const double C137782 = C137780 * C137414;
    const double C137483 = C137350 * C137481;
    const double C137489 = C137371 * C137481;
    const double C137505 = C137413 * C137481;
    const double C137598 = C137350 * C137596;
    const double C137604 = C137371 * C137596;
    const double C137620 = C137413 * C137596;
    const double C137541 = C137350 * C137539;
    const double C137547 = C137371 * C137539;
    const double C137563 = C137413 * C137539;
    const double C137675 = C137350 * C137673;
    const double C137678 = C137371 * C137673;
    const double C137681 = C137413 * C137673;
    const double C137699 = C137350 * C137697;
    const double C137705 = C137371 * C137697;
    const double C137721 = C137413 * C137697;
    const double C137751 = C137350 * C137749;
    const double C137754 = C137371 * C137749;
    const double C137757 = C137413 * C137749;
    const double C139286 = std::exp(C139285);
    const double C137102 = C137099 / C137082;
    const double C139300 = std::exp(C139299);
    const double C137205 = C137203 / C137082;
    const double C139328 = std::exp(C139327);
    const double C137251 = C137249 / C137082;
    const double C139339 = std::exp(C139338);
    const double C139442 = std::exp(C139441);
    const double C139457 = std::exp(C139456);
    const double C109 = C137339 * C137340 - (bs[1] * C137328) / C137327;
    const double C828 = C137474 * C137332 * C137339;
    const double C832 = C137339 * C137646 - (bs[1] * C137328) / C137327;
    const double C1764 = C137532 * C137332 * C137339;
    const double C1768 = C137339 * C137768 - (bs[1] * C137328) / C137327;
    const double C4223 = C137532 * C137474 * C137339;
    const double C137347 = C137343 * C137345;
    const double C137346 = C137343 * C137344;
    const double C137349 = C137337 * C137343;
    const double C137480 = C137343 * C137478;
    const double C137538 = C137343 * C137536;
    const double C137595 = C137343 * C137593;
    const double C137696 = C137343 * C137694;
    const double C189 =
        (-(C137332 * C137343 * C137337 * C137332 * C137474 * ae * ce) /
         C137082) /
            C137060 -
        (ae * C137334 * C137331 * C137474 * ce) / C137333;
    const double C252 =
        (-(C137332 * C137343 * C137337 * C137332 * C137532 * ae * ce) /
         C137082) /
            C137060 -
        (ae * C137334 * C137331 * C137532 * ce) / C137333;
    const double C315 =
        (-(C137332 * C137343 * C137337 * C137474 * C137332 * ae * ce) /
         C137082) /
            C137060 -
        (C137334 * C137331 * C137474 * ae * ce) / C137333;
    const double C395 =
        (-(C137332 * (C137339 + std::pow(C137474, 2) * C137337 * C137343) *
           C137341) /
         C137082) /
        C137060;
    const double C475 =
        (-(C137332 * C137343 * C137337 * C137474 * C137532 * ae * ce) /
         C137082) /
        C137060;
    const double C476 =
        (-(C137351 * C137350 * C137673 * C137340) / C137082) / C137060 -
        (C137343 * C137337 * C137673) / C137333;
    const double C562 =
        (-(C137332 * C137343 * C137337 * C137532 * C137332 * ae * ce) /
         C137082) /
            C137060 -
        (C137334 * C137331 * C137532 * ae * ce) / C137333;
    const double C642 =
        (-(C137332 * C137343 * C137337 * C137532 * C137474 * ae * ce) /
         C137082) /
        C137060;
    const double C643 =
        (-(C137351 * C137350 * C137749 * C137340) / C137082) / C137060 -
        (C137343 * C137337 * C137749) / C137333;
    const double C720 =
        (-(C137332 * (C137339 + std::pow(C137532, 2) * C137337 * C137343) *
           C137341) /
         C137082) /
        C137060;
    const double C854 =
        (-(C137474 * (C137339 + C137340 * C137337 * C137343) * C137341) /
         C137082) /
        C137060;
    const double C947 =
        (-(C137474 * C137343 * C137337 * C137481) / C137082) / C137060 -
        (C137334 * C137331 * C137342 * ce) / C137333;
    const double C1037 =
        (-(C137474 * C137343 * C137337 * C137539) / C137082) / C137060;
    const double C1125 =
        (-(C137474 * C137343 * C137337 * C137596) / C137082) / C137060 -
        (ae * C137334 * C137331 * C137338) / C137333;
    const double C1231 =
        (-(C137334 * C137331 * C137591 * ce) / C137082) / C137060 -
        (ae * C137334 * C137331 * C137476) / C137333 -
        (C137474 * (C137339 + C137646 * C137337 * C137343) * C137341) / C137333;
    const double C1339 =
        (-(C137474 * C137343 * C137337 * C137673) / C137082) / C137060 -
        (ae * C137334 * C137331 * C137534) / C137333;
    const double C1447 =
        (-(C137474 * C137343 * C137337 * C137697) / C137082) / C137060;
    const double C1553 =
        (-(C137474 * C137343 * C137337 * C137749) / C137082) / C137060 -
        (C137334 * C137331 * C137692 * ce) / C137333;
    const double C1661 =
        (-(C137474 * (C137339 + C137768 * C137337 * C137343) * C137341) /
         C137082) /
        C137060;
    const double C1790 =
        (-(C137532 * (C137339 + C137340 * C137337 * C137343) * C137341) /
         C137082) /
        C137060;
    const double C1881 =
        (-(C137532 * C137343 * C137337 * C137481) / C137082) / C137060;
    const double C1973 =
        (-(C137532 * C137343 * C137337 * C137539) / C137082) / C137060 -
        (C137334 * C137331 * C137342 * ce) / C137333;
    const double C2061 =
        (-(C137532 * C137343 * C137337 * C137596) / C137082) / C137060;
    const double C2170 =
        (-(C137532 * (C137339 + C137646 * C137337 * C137343) * C137341) /
         C137082) /
        C137060;
    const double C2269 =
        (-(C137532 * C137343 * C137337 * C137673) / C137082) / C137060 -
        (C137334 * C137331 * C137591 * ce) / C137333;
    const double C2383 =
        (-(C137532 * C137343 * C137337 * C137697) / C137082) / C137060 -
        (ae * C137334 * C137331 * C137338) / C137333;
    const double C2492 =
        (-(C137532 * C137343 * C137337 * C137749) / C137082) / C137060 -
        (ae * C137334 * C137331 * C137476) / C137333;
    const double C2591 =
        (-(C137334 * C137331 * C137692 * ce) / C137082) / C137060 -
        (ae * C137334 * C137331 * C137534) / C137333 -
        (C137532 * (C137339 + C137768 * C137337 * C137343) * C137341) / C137333;
    const double C137387 = C137372 * C137380;
    const double C137384 = C137372 * C137376;
    const double C137383 = C137375 * C137372;
    const double C137412 = C137371 * C137372;
    const double C137494 = C137372 * C137491;
    const double C137552 = C137372 * C137549;
    const double C137609 = C137372 * C137606;
    const double C137654 = C137653 * C137372;
    const double C137710 = C137372 * C137707;
    const double C137776 = C137775 * C137372;
    const double C137363 = C137332 * C137360;
    const double C137368 = C137360 * ce;
    const double C138084 = C137474 * C137360;
    const double C138405 = C137532 * C137360;
    const double C137362 = C137332 * C137359;
    const double C137369 = ae * C137359;
    const double C138099 = C137474 * C137359;
    const double C138432 = C137532 * C137359;
    const double C137381 = C137370 * ae;
    const double C137379 = C137370 * C137340;
    const double C137378 = C137332 * C137370;
    const double C137377 = C137370 * ce;
    const double C138218 = C137370 * C137646;
    const double C138217 = C137474 * C137370;
    const double C138463 = C137370 * C137768;
    const double C138462 = C137532 * C137370;
    const double C137490 = ae * C137486;
    const double C137488 = C137332 * C137486;
    const double C138040 = C137474 * C137486;
    const double C138450 = C137532 * C137486;
    const double C137548 = ae * C137544;
    const double C137546 = C137332 * C137544;
    const double C138104 = C137474 * C137544;
    const double C138164 = C137532 * C137544;
    const double C137605 = C137601 * ce;
    const double C137603 = C137332 * C137601;
    const double C138042 = C137474 * C137601;
    const double C138418 = C137532 * C137601;
    const double C137706 = C137702 * ce;
    const double C137704 = C137332 * C137702;
    const double C138105 = C137474 * C137702;
    const double C138166 = C137532 * C137702;
    const double C137444 = C137332 * C137436;
    const double C138507 = C137436 * C137646;
    const double C138720 = C137474 * C137436;
    const double C138788 = C137436 * C137768;
    const double C137441 = C137332 * C137433;
    const double C138527 = C137433 * C137646;
    const double C138738 = C137474 * C137433;
    const double C138808 = C137433 * C137768;
    const double C137516 = C137512 * C137340;
    const double C138239 = C137332 * C137512;
    const double C138548 = C137474 * C137512;
    const double C138827 = C137512 * C137768;
    const double C137574 = C137570 * C137340;
    const double C138263 = C137332 * C137570;
    const double C138595 = C137570 * C137646;
    const double C138756 = C137474 * C137570;
    const double C138848 = C137532 * C137570;
    const double C137630 = C137627 * C137340;
    const double C138242 = C137332 * C137627;
    const double C138553 = C137474 * C137627;
    const double C138732 = C137627 * C137768;
    const double C137731 = C137728 * C137340;
    const double C138292 = C137332 * C137728;
    const double C138621 = C137728 * C137646;
    const double C138759 = C137474 * C137728;
    const double C138854 = C137532 * C137728;
    const double C137485 = C137351 * C137483;
    const double C137492 = C137372 * C137489;
    const double C137509 = C137414 * C137505;
    const double C137600 = C137351 * C137598;
    const double C137607 = C137372 * C137604;
    const double C137624 = C137414 * C137620;
    const double C137543 = C137351 * C137541;
    const double C137550 = C137372 * C137547;
    const double C137567 = C137414 * C137563;
    const double C137676 = C137351 * C137675;
    const double C137679 = C137372 * C137678;
    const double C137683 = C137414 * C137681;
    const double C137701 = C137351 * C137699;
    const double C137708 = C137372 * C137705;
    const double C137725 = C137414 * C137721;
    const double C137752 = C137351 * C137751;
    const double C137755 = C137372 * C137754;
    const double C137759 = C137414 * C137757;
    const double C63861 = C139286 * C842;
    const double C77512 = C139286 * C1778;
    const double C137065 = C137063 * C139286;
    const double C139575 = C139549 * C139286;
    const double C139574 = C139286 * C139547;
    const double C13591 = -(C139286 * C139548) / C137060;
    const double C137104 = C137102 - C137095;
    const double C137093 = C137089 * C139300;
    const double C139301 = C139300 * C139295;
    const double C139305 = C139304 * C139300;
    const double C139553 = C139300 * C139296;
    const double C139550 = C139300 / C137087;
    const double C5227 = C139558 * C139300;
    const double C137207 = C137205 - C137197;
    const double C137138 = C137137 * C139328;
    const double C181 = -(2 * C137084 * (yC - yD) * C139328) / C137082;
    const double C139374 = C139328 * C139372;
    const double C139377 = C139304 * C139328;
    const double C139562 = C139328 * C139373;
    const double C139557 = C139328 / C137087;
    const double C825 = C139558 * C139328;
    const double C137253 = C137251 - C137243;
    const double C137153 = C137152 * C139339;
    const double C244 = -(2 * C137084 * (zC - zD) * C139339) / C137082;
    const double C139400 = C139339 * C139398;
    const double C139403 = C139304 * C139339;
    const double C139566 = C139339 * C139399;
    const double C139559 = C139339 / C137087;
    const double C1763 = C139558 * C139339;
    const double C322 = C139442 * C309;
    const double C32460 = C139442 * C2054;
    const double C137303 = C137302 * C139442;
    const double C307 = -(2 * C137061 * (yA - yB) * C139442) / C137060;
    const double C13795 =
        ((C139442 - (C137276 * 2 * C137061 * C137276 * C139442) / C137060) *
         ae) /
            C137060 -
        (0 * be) / C137064;
    const double C13796 =
        (0 * ae) / C137060 - (C137061 * C137276 * C139442) / C137062;
    const double C47233 =
        (-(0 * be) / C137060) / (2 * C137060) -
        ((C139442 - (C137276 * 2 * C137061 * C137276 * C139442) / C137060) *
         be) /
            C137060;
    const double C47234 =
        (-(2 * C137061 * C137276 * C139442) / C137060) / (2 * C137060) -
        (0 * be) / C137060;
    const double C139586 = C139549 * C139442;
    const double C139585 = C139442 * C139570;
    const double C47031 = -(C139442 * C139572) / C137060;
    const double C569 = C139457 * C556;
    const double C15037 = C139457 * C1440;
    const double C137319 = C137318 * C139457;
    const double C554 = -(2 * C137061 * (zA - zB) * C139457) / C137060;
    const double C30812 =
        ((C139457 - (C137283 * 2 * C137061 * C137283 * C139457) / C137060) *
         ae) /
            C137060 -
        (0 * be) / C137064;
    const double C30813 =
        (0 * ae) / C137060 - (C137061 * C137283 * C139457) / C137062;
    const double C92849 =
        (-(0 * be) / C137060) / (2 * C137060) -
        ((C139457 - (C137283 * 2 * C137061 * C137283 * C139457) / C137060) *
         be) /
            C137060;
    const double C92850 =
        (-(2 * C137061 * C137283 * C139457) / C137060) / (2 * C137060) -
        (0 * be) / C137060;
    const double C139588 = C139549 * C139457;
    const double C139587 = C139457 * C139571;
    const double C92451 = -(C139457 * C139573) / C137060;
    const double C115 = (C137334 * C137331 * C137342 +
                         C137332 * (C137332 * C137347 + C137339 * ae) +
                         C137332 * C137339 * ae) /
                        C137060;
    const double C836 =
        (C137474 * (C137332 * C137347 + C137339 * ae)) / C137060;
    const double C844 =
        (C137334 * C137331 * C137342 + C137347 * C137646) / C137060;
    const double C1772 =
        (C137532 * (C137332 * C137347 + C137339 * ae)) / C137060;
    const double C1780 =
        (C137334 * C137331 * C137342 + C137347 * C137768) / C137060;
    const double C4227 = (C137532 * C137474 * C137347) / C137060;
    const double C5922 =
        (2 * C137474 * C137347 + C137474 * (C137347 + C137360 * C137646)) /
        C137060;
    const double C8760 = (C137532 * (C137347 + C137360 * C137646)) / C137060;
    const double C10821 =
        (2 * C137532 * C137347 + C137532 * (C137347 + C137360 * C137768)) /
        C137060;
    const double C127 =
        (-(ae * (C137332 * C137346 + C137339 * ce)) / C137082) / C137060 -
        ((C137339 + C137340 * C137337 * C137343) * C137341) / C137333 -
        ((C137332 * C137347 + C137339 * ae) * ce) / C137333 +
        C137332 *
            ((-(C137347 * ce) / C137082) / C137060 - (ae * C137346) / C137333 -
             (C137332 *
              (C137337 * C137343 + C137340 * bs[4] * std::pow(C137330, 4)) *
              C137341) /
                 C137333);
    const double C118 =
        -(C137332 * (C137332 * C137346 + C137339 * ce) +
          C137334 * C137331 * C137338 + C137332 * C137339 * ce) /
        C137082;
    const double C840 =
        -(C137474 * (C137332 * C137346 + C137339 * ce)) / C137082;
    const double C847 =
        -(C137346 * C137646 + C137334 * C137331 * C137338) / C137082;
    const double C1776 =
        -(C137532 * (C137332 * C137346 + C137339 * ce)) / C137082;
    const double C1783 =
        -(C137346 * C137768 + C137334 * C137331 * C137338) / C137082;
    const double C4230 = -(C137532 * C137474 * C137346) / C137082;
    const double C5919 = (-2 * C137474 * C137346) / C137082 -
                         (C137474 * (C137359 * C137646 + C137346)) / C137082;
    const double C8757 = -(C137532 * (C137359 * C137646 + C137346)) / C137082;
    const double C10818 = (-2 * C137532 * C137346) / C137082 -
                          (C137532 * (C137359 * C137768 + C137346)) / C137082;
    const double C137357 = C137349 * ae;
    const double C137355 = C137332 * C137349;
    const double C137354 = C137349 * ce;
    const double C137361 = C137349 + C137358;
    const double C137650 = C137349 + C137649;
    const double C137772 = C137349 + C137771;
    const double C138041 = C137474 * C137349;
    const double C138165 = C137532 * C137349;
    const double C396 =
        (-((C137349 + C137646 * C137350 * C137351) * C137341 * C137340) /
         C137082) /
            C137060 -
        ((C137339 + C137646 * C137337 * C137343) * C137341) / C137333;
    const double C721 =
        (-((C137349 + C137768 * C137350 * C137351) * C137341 * C137340) /
         C137082) /
            C137060 -
        ((C137339 + C137768 * C137337 * C137343) * C137341) / C137333;
    const double C110 =
        2 * C137332 * C137339 + C137332 * (C137339 + C137349 * C137340);
    const double C829 = C137474 * (C137339 + C137349 * C137340);
    const double C1765 = C137532 * (C137339 + C137349 * C137340);
    const double C5916 =
        2 * C137474 * C137339 + C137474 * (C137339 + C137349 * C137646);
    const double C8754 = C137532 * (C137339 + C137349 * C137646);
    const double C10815 =
        2 * C137532 * C137339 + C137532 * (C137339 + C137349 * C137768);
    const double C190 =
        (-(ae * C137332 * C137480) / C137082) / C137060 -
        (C137343 * C137337 * C137481) / C137333 +
        C137332 *
            ((-(C137332 * C137351 * C137350 * C137481) / C137082) / C137060 -
             (ae * C137480) / C137333);
    const double C184 =
        -(C137480 * C137340 + C137334 * C137331 * C137476) / C137082;
    const double C185 = (-2 * C137332 * C137480) / C137082 -
                        (C137332 * (C137486 * C137340 + C137480)) / C137082;
    const double C937 = -(C137474 * (C137486 * C137340 + C137480) +
                          (C137339 + C137349 * C137340) * ce) /
                        C137082;
    const double C938 =
        -(C137474 * C137332 * C137480 + C137332 * C137339 * ce) / C137082;
    const double C940 =
        -(C137474 * (C137474 * C137480 + C137339 * ce) +
          C137334 * C137331 * C137476 + C137474 * C137339 * ce) /
        C137082;
    const double C1870 = -(C137532 * C137332 * C137480) / C137082;
    const double C1871 = -(C137532 * (C137486 * C137340 + C137480)) / C137082;
    const double C1874 =
        -(C137480 * C137768 + C137334 * C137331 * C137476) / C137082;
    const double C4337 =
        -(C137532 * (C137474 * C137480 + C137339 * ce)) / C137082;
    const double C10877 = (-2 * C137532 * C137480) / C137082 -
                          (C137532 * (C137486 * C137768 + C137480)) / C137082;
    const double C253 =
        (-(ae * C137332 * C137538) / C137082) / C137060 -
        (C137343 * C137337 * C137539) / C137333 +
        C137332 *
            ((-(C137332 * C137351 * C137350 * C137539) / C137082) / C137060 -
             (ae * C137538) / C137333);
    const double C247 =
        -(C137538 * C137340 + C137334 * C137331 * C137534) / C137082;
    const double C248 = (-2 * C137332 * C137538) / C137082 -
                        (C137332 * (C137544 * C137340 + C137538)) / C137082;
    const double C1027 = -(C137474 * (C137544 * C137340 + C137538)) / C137082;
    const double C1028 = -(C137474 * C137332 * C137538) / C137082;
    const double C1030 =
        -(C137538 * C137646 + C137334 * C137331 * C137534) / C137082;
    const double C1963 = -(C137532 * (C137544 * C137340 + C137538) +
                           (C137339 + C137349 * C137340) * ce) /
                         C137082;
    const double C1964 =
        -(C137532 * C137332 * C137538 + C137332 * C137339 * ce) / C137082;
    const double C1966 =
        -(C137532 * (C137532 * C137538 + C137339 * ce) +
          C137334 * C137331 * C137534 + C137532 * C137339 * ce) /
        C137082;
    const double C4443 =
        -(C137532 * C137474 * C137538 + C137474 * C137339 * ce) / C137082;
    const double C6038 = (-2 * C137474 * C137538) / C137082 -
                         (C137474 * (C137544 * C137646 + C137538)) / C137082;
    const double C8920 = -(C137532 * (C137544 * C137646 + C137538) +
                           (C137339 + C137349 * C137646) * ce) /
                         C137082;
    const double C316 =
        (-(C137332 * C137595 * ce) / C137082) / C137060 -
        (C137343 * C137337 * C137596) / C137333 +
        C137332 *
            ((-(C137332 * C137351 * C137350 * C137596) / C137082) / C137060 -
             (C137595 * ce) / C137333);
    const double C310 =
        (C137334 * C137331 * C137591 + C137595 * C137340) / C137060;
    const double C311 =
        (2 * C137332 * C137595 + C137332 * (C137595 + C137601 * C137340)) /
        C137060;
    const double C1117 =
        (C137474 * C137332 * C137595 + C137332 * C137339 * ae) / C137060;
    const double C1119 = (C137474 * (C137595 + C137601 * C137340) +
                          (C137339 + C137349 * C137340) * ae) /
                         C137060;
    const double C1121 = (C137334 * C137331 * C137591 +
                          C137474 * (C137474 * C137595 + C137339 * ae) +
                          C137474 * C137339 * ae) /
                         C137060;
    const double C2053 = (C137532 * C137332 * C137595) / C137060;
    const double C2055 = (C137532 * (C137595 + C137601 * C137340)) / C137060;
    const double C2057 =
        (C137334 * C137331 * C137591 + C137595 * C137768) / C137060;
    const double C4549 =
        (C137532 * (C137474 * C137595 + C137339 * ae)) / C137060;
    const double C10993 =
        (2 * C137532 * C137595 + C137532 * (C137595 + C137601 * C137768)) /
        C137060;
    const double C563 =
        (-(C137332 * C137696 * ce) / C137082) / C137060 -
        (C137343 * C137337 * C137697) / C137333 +
        C137332 *
            ((-(C137332 * C137351 * C137350 * C137697) / C137082) / C137060 -
             (C137696 * ce) / C137333);
    const double C557 =
        (C137334 * C137331 * C137692 + C137696 * C137340) / C137060;
    const double C558 =
        (2 * C137332 * C137696 + C137332 * (C137696 + C137702 * C137340)) /
        C137060;
    const double C1439 = (C137474 * C137332 * C137696) / C137060;
    const double C1441 = (C137474 * (C137696 + C137702 * C137340)) / C137060;
    const double C1443 =
        (C137334 * C137331 * C137692 + C137696 * C137646) / C137060;
    const double C2375 =
        (C137532 * C137332 * C137696 + C137332 * C137339 * ae) / C137060;
    const double C2377 = (C137532 * (C137696 + C137702 * C137340) +
                          (C137339 + C137349 * C137340) * ae) /
                         C137060;
    const double C2379 = (C137334 * C137331 * C137692 +
                          C137532 * (C137532 * C137696 + C137339 * ae) +
                          C137532 * C137339 * ae) /
                         C137060;
    const double C4899 =
        (C137532 * C137474 * C137696 + C137474 * C137339 * ae) / C137060;
    const double C6256 =
        (2 * C137474 * C137696 + C137474 * (C137696 + C137702 * C137646)) /
        C137060;
    const double C9234 = (C137532 * (C137696 + C137702 * C137646) +
                          (C137339 + C137349 * C137646) * ae) /
                         C137060;
    const double C324 = C139442 * C315;
    const double C403 = C139442 * C395;
    const double C483 = C139442 * C475;
    const double C486 = C139442 * C476;
    const double C571 = C139457 * C562;
    const double C650 = C139457 * C642;
    const double C653 = C139457 * C643;
    const double C728 = C139457 * C720;
    const double C63863 = C139286 * C854;
    const double C63986 = C139286 * C947;
    const double C64079 = C139286 * C1037;
    const double C15039 = C139457 * C1447;
    const double C15169 = C139457 * C1553;
    const double C15283 = C139457 * C1661;
    const double C77514 = C139286 * C1790;
    const double C77653 = C139286 * C1881;
    const double C77781 = C139286 * C1973;
    const double C32462 = C139442 * C2061;
    const double C32593 = C139442 * C2170;
    const double C32709 = C139442 * C2269;
    const double C137392 = C137332 * C137387;
    const double C137410 = C137387 * ce;
    const double C137947 = C137474 * C137387;
    const double C137969 = C137532 * C137387;
    const double C138191 = C137387 * C137646;
    const double C138407 = C137387 * C137768;
    const double C137391 = C137332 * C137384;
    const double C137411 = ae * C137384;
    const double C137948 = C137474 * C137384;
    const double C137970 = C137532 * C137384;
    const double C138207 = C137384 * C137646;
    const double C138434 = C137384 * C137768;
    const double C137390 = C137370 + C137383;
    const double C137429 = C137412 * ae;
    const double C137427 = C137412 * C137340;
    const double C137426 = C137332 * C137412;
    const double C137425 = C137412 * ce;
    const double C137440 = C137412 + C137432;
    const double C137661 = C137412 + C137660;
    const double C137783 = C137412 + C137782;
    const double C138550 = C137412 * C137646;
    const double C138549 = C137474 * C137412;
    const double C138731 = C137412 * C137768;
    const double C138849 = C137532 * C137412;
    const double C137496 = C137494 * C137340;
    const double C137506 = ae * C137494;
    const double C137503 = C137332 * C137494;
    const double C138216 = C137474 * C137494;
    const double C138452 = C137494 * C137768;
    const double C138684 = C137532 * C137494;
    const double C137554 = C137552 * C137340;
    const double C137564 = ae * C137552;
    const double C137561 = C137332 * C137552;
    const double C138273 = C137552 * C137646;
    const double C138378 = C137474 * C137552;
    const double C138461 = C137532 * C137552;
    const double C137611 = C137609 * C137340;
    const double C137621 = C137609 * ce;
    const double C137618 = C137332 * C137609;
    const double C138219 = C137474 * C137609;
    const double C138419 = C137609 * C137768;
    const double C138657 = C137532 * C137609;
    const double C137655 = C137370 + C137654;
    const double C137712 = C137710 * C137340;
    const double C137722 = C137710 * ce;
    const double C137719 = C137332 * C137710;
    const double C138283 = C137710 * C137646;
    const double C138380 = C137474 * C137710;
    const double C138464 = C137532 * C137710;
    const double C137777 = C137370 + C137776;
    const double C137373 = C137368 / C137082;
    const double C138190 = C137368 / C137333;
    const double C6448 = (C137474 * C137347 + C138084 * C137768) / C137060;
    const double C137374 = C137369 / C137333;
    const double C6445 = -(C138099 * C137768 + C137474 * C137346) / C137082;
    const double C137386 = C137349 + C137379;
    const double C137388 = C137378 * ae;
    const double C137385 = C137378 * ce;
    const double C137416 = 2 * C137378;
    const double C138048 = C137474 * C137378;
    const double C138171 = C137532 * C137378;
    const double C138224 = C137349 + C138218;
    const double C138226 = C138217 * ae;
    const double C138223 = C138217 * ce;
    const double C138379 = C137532 * C138217;
    const double C138551 = 2 * C138217;
    const double C138469 = C137349 + C138463;
    const double C138471 = C138462 * ae;
    const double C138468 = C138462 * ce;
    const double C138851 = 2 * C138462;
    const double C137493 = C137490 / C137333;
    const double C1875 = -(C137488 * C137768 + C137332 * C137480) / C137082;
    const double C137551 = C137548 / C137333;
    const double C1031 = -(C137546 * C137646 + C137332 * C137538) / C137082;
    const double C137608 = C137605 / C137333;
    const double C138214 = C137605 / C137082;
    const double C2058 = (C137332 * C137595 + C137603 * C137768) / C137060;
    const double C137709 = C137706 / C137333;
    const double C138459 = C137706 / C137082;
    const double C1444 = (C137332 * C137696 + C137704 * C137646) / C137060;
    const double C138509 = C137387 + C138507;
    const double C138722 = C138720 * C137768;
    const double C138790 = C137387 + C138788;
    const double C138531 = C138527 + C137384;
    const double C138740 = C138738 * C137768;
    const double C138812 = C138808 + C137384;
    const double C137519 = C137516 + C137494;
    const double C138245 = C137474 * C138239;
    const double C138443 = C138239 * C137768;
    const double C138831 = C138827 + C137494;
    const double C137577 = C137574 + C137552;
    const double C138265 = C138263 * C137646;
    const double C138387 = C137474 * C138263;
    const double C138484 = C137532 * C138263;
    const double C138599 = C138595 + C137552;
    const double C138762 = C137532 * C138756;
    const double C137633 = C137609 + C137630;
    const double C138248 = C137474 * C138242;
    const double C138423 = C138242 * C137768;
    const double C138734 = C137609 + C138732;
    const double C137734 = C137710 + C137731;
    const double C138294 = C138292 * C137646;
    const double C138389 = C137474 * C138292;
    const double C138487 = C137532 * C138292;
    const double C138624 = C137710 + C138621;
    const double C138765 = C137532 * C138759;
    const double C191 =
        2 * ((-(C137332 * C137485) / C137082) / C137060 -
             (ae * C137480) / C137333) -
        (ae * (C137486 * C137340 + C137480)) / C137333 +
        C137332 *
            ((-(ae * C137332 * C137486) / C137082) / C137060 -
             C137485 / C137333 +
             C137332 * ((-(C137332 * C137372 * C137371 * C137481) / C137082) /
                            C137060 -
                        (ae * C137486) / C137333));
    const double C946 = C137474 * ((-(C137332 * C137485) / C137082) / C137060 -
                                   (ae * C137480) / C137333) -
                        ((C137332 * C137347 + C137339 * ae) * ce) / C137333;
    const double C948 = (-(C137474 * C137347 * ce) / C137082) / C137060 -
                        (C137343 * C137337 * C137481) / C137333 +
                        C137474 * ((-(C137474 * C137485) / C137082) / C137060 -
                                   (C137347 * ce) / C137333);
    const double C1878 = C137532 * ((-(C137332 * C137485) / C137082) / C137060 -
                                    (ae * C137480) / C137333);
    const double C1882 = (-(C137485 * C137768) / C137082) / C137060 -
                         (C137343 * C137337 * C137481) / C137333;
    const double C4341 = C137532 * ((-(C137474 * C137485) / C137082) / C137060 -
                                    (C137347 * ce) / C137333);
    const double C137495 = C137332 * C137492;
    const double C137504 = C137492 / C137333;
    const double C138189 = C137474 * C137492;
    const double C5985 =
        2 * ((-(C137474 * C137485) / C137082) / C137060 -
             (C137347 * ce) / C137333) -
        ((C137347 + C137360 * C137646) * ce) / C137333 +
        C137474 * ((-(C137474 * C137360 * ce) / C137082) / C137060 -
                   C137485 / C137333 +
                   C137474 * ((-(C137474 * C137492) / C137082) / C137060 -
                              C137368 / C137333));
    const double C6531 =
        (-(C137474 * C137485) / C137082) / C137060 - (C137347 * ce) / C137333 +
        ((-(C137474 * C137492) / C137082) / C137060 - C137368 / C137333) *
            C137768;
    const double C8843 =
        C137532 * ((-(C138084 * ce) / C137082) / C137060 - C137485 / C137333 +
                   C137474 * ((-(C137474 * C137492) / C137082) / C137060 -
                              C137368 / C137333));
    const double C10880 =
        (-2 * C137532 * C137485) / C137333 +
        C137532 *
            ((-(C137492 * C137768) / C137082) / C137060 - C137485 / C137333);
    const double C137514 = C137332 * C137509;
    const double C138504 = C137474 * C137509;
    const double C138779 = C137509 * C137768;
    const double C317 =
        2 * ((-(C137332 * C137600) / C137082) / C137060 -
             (C137595 * ce) / C137333) -
        ((C137595 + C137601 * C137340) * ce) / C137333 +
        C137332 *
            ((-(C137332 * C137601 * ce) / C137082) / C137060 -
             C137600 / C137333 +
             C137332 * ((-(C137332 * C137372 * C137371 * C137596) / C137082) /
                            C137060 -
                        (C137601 * ce) / C137333));
    const double C1126 = C137474 * ((-(C137332 * C137600) / C137082) / C137060 -
                                    (C137595 * ce) / C137333) -
                         (ae * (C137332 * C137346 + C137339 * ce)) / C137333;
    const double C1129 = (-(ae * C137474 * C137346) / C137082) / C137060 -
                         (C137343 * C137337 * C137596) / C137333 +
                         C137474 * ((-(C137474 * C137600) / C137082) / C137060 -
                                    (ae * C137346) / C137333);
    const double C2062 = C137532 * ((-(C137332 * C137600) / C137082) / C137060 -
                                    (C137595 * ce) / C137333);
    const double C2065 = (-(C137600 * C137768) / C137082) / C137060 -
                         (C137343 * C137337 * C137596) / C137333;
    const double C4553 = (-(C137474 * C137532 * C137600) / C137082) / C137060 -
                         (ae * C137532 * C137346) / C137333;
    const double C137610 = C137332 * C137607;
    const double C137619 = C137607 / C137333;
    const double C138206 = C137474 * C137607;
    const double C138330 = C137532 * C137607;
    const double C6691 = C137474 * ((-(C137607 * C137768) / C137082) / C137060 -
                                    C137600 / C137333) -
                         (ae * (C137359 * C137768 + C137346)) / C137333;
    const double C9003 =
        (-(ae * C137532 * C138099) / C137082) / C137060 -
        (C137532 * C137600) / C137333 +
        C137474 * ((-(C137474 * C137532 * C137607) / C137082) / C137060 -
                   (ae * C137532 * C137359) / C137333);
    const double C10996 =
        (-2 * C137532 * C137600) / C137333 +
        C137532 *
            ((-(C137607 * C137768) / C137082) / C137060 - C137600 / C137333);
    const double C137629 = C137332 * C137624;
    const double C138525 = C137474 * C137624;
    const double C138645 = C137624 * C137768;
    const double C138677 = C137532 * C137624;
    const double C254 =
        2 * ((-(C137332 * C137543) / C137082) / C137060 -
             (ae * C137538) / C137333) -
        (ae * (C137544 * C137340 + C137538)) / C137333 +
        C137332 *
            ((-(ae * C137332 * C137544) / C137082) / C137060 -
             C137543 / C137333 +
             C137332 * ((-(C137332 * C137372 * C137371 * C137539) / C137082) /
                            C137060 -
                        (ae * C137544) / C137333));
    const double C1036 = C137474 * ((-(C137332 * C137543) / C137082) / C137060 -
                                    (ae * C137538) / C137333);
    const double C1038 = (-(C137543 * C137646) / C137082) / C137060 -
                         (C137343 * C137337 * C137539) / C137333;
    const double C1972 = C137532 * ((-(C137332 * C137543) / C137082) / C137060 -
                                    (ae * C137538) / C137333) -
                         ((C137332 * C137347 + C137339 * ae) * ce) / C137333;
    const double C1974 = (-(C137532 * C137347 * ce) / C137082) / C137060 -
                         (C137343 * C137337 * C137539) / C137333 +
                         C137532 * ((-(C137532 * C137543) / C137082) / C137060 -
                                    (C137347 * ce) / C137333);
    const double C4447 = (-(C137532 * C137474 * C137543) / C137082) / C137060 -
                         (C137474 * C137347 * ce) / C137333;
    const double C137553 = C137332 * C137550;
    const double C137562 = C137550 / C137333;
    const double C138362 = C137474 * C137550;
    const double C138406 = C137532 * C137550;
    const double C6041 = (-2 * C137474 * C137543) / C137333 +
                         C137474 * ((-(C137550 * C137646) / C137082) / C137060 -
                                    C137543 / C137333);
    const double C6611 =
        (-(C137532 * C138084 * ce) / C137082) / C137060 -
        (C137474 * C137543) / C137333 +
        C137532 * ((-(C137532 * C137474 * C137550) / C137082) / C137060 -
                   (C138084 * ce) / C137333);
    const double C8923 = C137532 * ((-(C137550 * C137646) / C137082) / C137060 -
                                    C137543 / C137333) -
                         ((C137347 + C137360 * C137646) * ce) / C137333;
    const double C10940 =
        2 * ((-(C137532 * C137543) / C137082) / C137060 -
             (C137347 * ce) / C137333) -
        ((C137347 + C137360 * C137768) * ce) / C137333 +
        C137532 * ((-(C137532 * C137360 * ce) / C137082) / C137060 -
                   C137543 / C137333 +
                   C137532 * ((-(C137532 * C137550) / C137082) / C137060 -
                              C137368 / C137333));
    const double C137572 = C137332 * C137567;
    const double C138518 = C137567 * C137646;
    const double C138718 = C137474 * C137567;
    const double C138786 = C137532 * C137567;
    const double C477 =
        (-2 * C137332 * C137676) / C137333 +
        C137332 *
            ((-(C137372 * C137371 * C137673 * C137340) / C137082) / C137060 -
             C137676 / C137333);
    const double C1338 = (-(C137474 * C137332 * C137676) / C137082) / C137060 -
                         (ae * C137332 * C137538) / C137333;
    const double C1340 = (-(ae * C137474 * C137538) / C137082) / C137060 -
                         (C137343 * C137337 * C137673) / C137333 +
                         C137474 * ((-(C137474 * C137676) / C137082) / C137060 -
                                    (ae * C137538) / C137333);
    const double C2270 = (-(C137532 * C137595 * ce) / C137082) / C137060 -
                         (C137343 * C137337 * C137673) / C137333 +
                         C137532 * ((-(C137532 * C137676) / C137082) / C137060 -
                                    (C137595 * ce) / C137333);
    const double C2271 = (-(C137532 * C137332 * C137676) / C137082) / C137060 -
                         (C137332 * C137595 * ce) / C137333;
    const double C4783 = C137474 * ((-(C137532 * C137676) / C137082) / C137060 -
                                    (C137595 * ce) / C137333) -
                         (ae * (C137532 * C137538 + C137339 * ce)) / C137333;
    const double C137682 = C137679 / C137333;
    const double C138060 = C137332 * C137679;
    const double C138272 = C137474 * C137679;
    const double C138336 = C137532 * C137679;
    const double C478 =
        3 * ((-(C137679 * C137340) / C137082) / C137060 - C137676 / C137333) +
        C137332 *
            ((-2 * C137332 * C137679) / C137333 +
             C137332 * ((-(C137414 * C137413 * C137673 * C137340) / C137082) /
                            C137060 -
                        C137679 / C137333));
    const double C1337 = C137474 * ((-(C137679 * C137340) / C137082) / C137060 -
                                    C137676 / C137333) -
                         (ae * (C137544 * C137340 + C137538)) / C137333;
    const double C1341 =
        (-(ae * C137474 * C137546) / C137082) / C137060 -
        (C137332 * C137676) / C137333 +
        C137474 * ((-(C137474 * C137332 * C137679) / C137082) / C137060 -
                   (ae * C137546) / C137333);
    const double C2272 =
        (-(C137532 * C137603 * ce) / C137082) / C137060 -
        (C137332 * C137676) / C137333 +
        C137532 * ((-(C137532 * C137332 * C137679) / C137082) / C137060 -
                   (C137603 * ce) / C137333);
    const double C2273 = C137532 * ((-(C137679 * C137340) / C137082) / C137060 -
                                    C137676 / C137333) -
                         ((C137595 + C137601 * C137340) * ce) / C137333;
    const double C137684 = C137683 * C137340;
    const double C138261 = C137332 * C137683;
    const double C138593 = C137474 * C137683;
    const double C138658 = C137532 * C137683;
    const double C564 =
        2 * ((-(C137332 * C137701) / C137082) / C137060 -
             (C137696 * ce) / C137333) -
        ((C137696 + C137702 * C137340) * ce) / C137333 +
        C137332 *
            ((-(C137332 * C137702 * ce) / C137082) / C137060 -
             C137701 / C137333 +
             C137332 * ((-(C137332 * C137372 * C137371 * C137697) / C137082) /
                            C137060 -
                        (C137702 * ce) / C137333));
    const double C1448 = C137474 * ((-(C137332 * C137701) / C137082) / C137060 -
                                    (C137696 * ce) / C137333);
    const double C1451 = (-(C137701 * C137646) / C137082) / C137060 -
                         (C137343 * C137337 * C137697) / C137333;
    const double C2384 = C137532 * ((-(C137332 * C137701) / C137082) / C137060 -
                                    (C137696 * ce) / C137333) -
                         (ae * (C137332 * C137346 + C137339 * ce)) / C137333;
    const double C2387 = (-(ae * C137532 * C137346) / C137082) / C137060 -
                         (C137343 * C137337 * C137697) / C137333 +
                         C137532 * ((-(C137532 * C137701) / C137082) / C137060 -
                                    (ae * C137346) / C137333);
    const double C4903 = (-(C137532 * C137474 * C137701) / C137082) / C137060 -
                         (ae * C137474 * C137346) / C137333;
    const double C137711 = C137332 * C137708;
    const double C137720 = C137708 / C137333;
    const double C138373 = C137474 * C137708;
    const double C138433 = C137532 * C137708;
    const double C6259 = (-2 * C137474 * C137701) / C137333 +
                         C137474 * ((-(C137708 * C137646) / C137082) / C137060 -
                                    C137701 / C137333);
    const double C6925 =
        (-(ae * C137532 * C138099) / C137082) / C137060 -
        (C137474 * C137701) / C137333 +
        C137532 * ((-(C137532 * C137474 * C137708) / C137082) / C137060 -
                   (ae * C138099) / C137333);
    const double C9237 = C137532 * ((-(C137708 * C137646) / C137082) / C137060 -
                                    C137701 / C137333) -
                         (ae * (C137359 * C137646 + C137346)) / C137333;
    const double C137730 = C137332 * C137725;
    const double C138612 = C137725 * C137646;
    const double C138737 = C137474 * C137725;
    const double C138806 = C137532 * C137725;
    const double C644 =
        (-2 * C137332 * C137752) / C137333 +
        C137332 *
            ((-(C137372 * C137371 * C137749 * C137340) / C137082) / C137060 -
             C137752 / C137333);
    const double C1554 = (-(C137474 * C137696 * ce) / C137082) / C137060 -
                         (C137343 * C137337 * C137749) / C137333 +
                         C137474 * ((-(C137474 * C137752) / C137082) / C137060 -
                                    (C137696 * ce) / C137333);
    const double C1555 = (-(C137474 * C137332 * C137752) / C137082) / C137060 -
                         (C137332 * C137696 * ce) / C137333;
    const double C2489 = (-(C137532 * C137332 * C137752) / C137082) / C137060 -
                         (ae * C137332 * C137480) / C137333;
    const double C2493 = (-(ae * C137532 * C137480) / C137082) / C137060 -
                         (C137343 * C137337 * C137749) / C137333 +
                         C137532 * ((-(C137532 * C137752) / C137082) / C137060 -
                                    (ae * C137480) / C137333);
    const double C5017 = C137532 * ((-(C137474 * C137752) / C137082) / C137060 -
                                    (C137696 * ce) / C137333) -
                         (ae * (C137474 * C137480 + C137339 * ce)) / C137333;
    const double C137758 = C137755 / C137333;
    const double C138067 = C137332 * C137755;
    const double C138282 = C137474 * C137755;
    const double C138451 = C137532 * C137755;
    const double C645 =
        3 * ((-(C137755 * C137340) / C137082) / C137060 - C137752 / C137333) +
        C137332 *
            ((-2 * C137332 * C137755) / C137333 +
             C137332 * ((-(C137414 * C137413 * C137749 * C137340) / C137082) /
                            C137060 -
                        C137755 / C137333));
    const double C1556 =
        (-(C137474 * C137704 * ce) / C137082) / C137060 -
        (C137332 * C137752) / C137333 +
        C137474 * ((-(C137474 * C137332 * C137755) / C137082) / C137060 -
                   (C137704 * ce) / C137333);
    const double C1557 = C137474 * ((-(C137755 * C137340) / C137082) / C137060 -
                                    C137752 / C137333) -
                         ((C137696 + C137702 * C137340) * ce) / C137333;
    const double C2490 = C137532 * ((-(C137755 * C137340) / C137082) / C137060 -
                                    C137752 / C137333) -
                         (ae * (C137486 * C137340 + C137480)) / C137333;
    const double C2494 =
        (-(ae * C137532 * C137488) / C137082) / C137060 -
        (C137332 * C137752) / C137333 +
        C137532 * ((-(C137532 * C137332 * C137755) / C137082) / C137060 -
                   (ae * C137488) / C137333);
    const double C137760 = C137759 * C137340;
    const double C138290 = C137332 * C137759;
    const double C138619 = C137474 * C137759;
    const double C138825 = C137532 * C137759;
    const double C102 =
        ((0 * ae) / C137060 - C137065 / C137062) / (2 * C137060) -
        (0 * be) / C137060;
    const double C13595 =
        (-C137059 / C137060) / (2 * C137060) -
        ((C139286 - (C137058 * 2 * C137065) / C137060) * be) / C137060;
    const double C13596 =
        (-(2 * C137065) / C137060) / (2 * C137060) - (0 * be) / C137060;
    const double C47033 =
        ((C139286 - (C137058 * 2 * C137065) / C137060) * ae) / C137060 -
        C137059 / C137064;
    const double C47034 = (0 * ae) / C137060 - C137065 / C137062;
    const double C63381 = -(2 * C137065) / C137060;
    const double C101 =
        (((C139286 - (C137058 * 2 * C137065) / C137060) * ae) / C137060 -
         C137059 / C137064) /
            (2 * C137060) -
        ((C137058 * ((0 * ae) / C137060 - C137065 / C137062) + C139575) * be) /
            C137060;
    const double C91 = C139575 / C139291;
    const double C89 = C139286 / C139291 - (C139574 * C139548) / C137062;
    const double C90 = C139574 / C137064 - (C139575 * C139548) / C137060;
    const double C47029 = C139574 / C137060;
    const double C14309 = C13591 * C854;
    const double C14305 = C13591 * C842;
    const double C14453 = C13591 * C947;
    const double C14573 = C13591 * C1037;
    const double C32074 = C13591 * C1790;
    const double C32070 = C13591 * C1778;
    const double C32216 = C13591 * C1881;
    const double C32340 = C13591 * C1973;
    const double C137098 = C137093 / C137086;
    const double C137096 = 2 * C137093;
    const double C139554 = C139301 / C137091;
    const double C139552 = C139301 / C137082;
    const double C139551 = C139301 * C139296;
    const double C5226 = (2 * C139304 * C139301) / C137082;
    const double C139555 = C139305 * C139296;
    const double C95 = C139305 / C139556;
    const double C2699 = C139305 / C137087;
    const double C139577 = C139553 / C137082;
    const double C5225 = (C139300 * std::pow(C139295, 2)) / C137086 + C139550;
    const double C137195 = C137138 / C137086;
    const double C137192 = 2 * C137138;
    const double C936 =
        ((0 * ce) / C137082 - C137138 / C137086) / C137087 + (0 * ce) / C137082;
    const double C2783 =
        ((C139328 - (C137135 * 2 * C137138) / C137082) * ce) / C137082 -
        C137136 / C137091;
    const double C2784 = (0 * ce) / C137082 - C137138 / C137086;
    const double C5307 =
        (-C137136 / C137082) / C137087 -
        ((C139328 - (C137135 * 2 * C137138) / C137082) * de) / C137082;
    const double C5308 =
        (-(2 * C137138) / C137082) / C137087 - (0 * de) / C137082;
    const double C139564 = C139374 / C137091;
    const double C139563 = C139374 * C139373;
    const double C139560 = C139374 / C137082;
    const double C824 = (2 * C139304 * C139374) / C137082;
    const double C935 =
        (((C139328 - (C137135 * 2 * C137138) / C137082) * ce) / C137082 -
         C137136 / C137091) /
            C137087 +
        ((C137135 * ((0 * ce) / C137082 - C137138 / C137086) + C139377) * ce) /
            C137082;
    const double C139565 = C139377 * C139373;
    const double C5912 = C139377 / C139556;
    const double C7158 = C139377 / C137087;
    const double C139579 = C139562 / C137082;
    const double C823 = (C139328 * std::pow(C139372, 2)) / C137086 + C139557;
    const double C137241 = C137153 / C137086;
    const double C137238 = 2 * C137153;
    const double C1962 =
        ((0 * ce) / C137082 - C137153 / C137086) / C137087 + (0 * ce) / C137082;
    const double C3607 =
        ((C139339 - (C137150 * 2 * C137153) / C137082) * ce) / C137082 -
        C137151 / C137091;
    const double C3608 = (0 * ce) / C137082 - C137153 / C137086;
    const double C9616 =
        (-C137151 / C137082) / C137087 -
        ((C139339 - (C137150 * 2 * C137153) / C137082) * de) / C137082;
    const double C9617 =
        (-(2 * C137153) / C137082) / C137087 - (0 * de) / C137082;
    const double C139568 = C139400 / C137091;
    const double C139567 = C139400 * C139399;
    const double C139561 = C139400 / C137082;
    const double C1762 = (2 * C139304 * C139400) / C137082;
    const double C1961 =
        (((C139339 - (C137150 * 2 * C137153) / C137082) * ce) / C137082 -
         C137151 / C137091) /
            C137087 +
        ((C137150 * ((0 * ce) / C137082 - C137153 / C137086) + C139403) * ce) /
            C137082;
    const double C139569 = C139403 * C139399;
    const double C10812 = C139403 / C139556;
    const double C12239 = C139403 / C137087;
    const double C139582 = C139566 / C137082;
    const double C1761 = (C139339 * std::pow(C139398, 2)) / C137086 + C139559;
    const double C63534 =
        ((0 * ae) / C137060 - C137303 / C137062) / (2 * C137060) -
        (0 * be) / C137060;
    const double C325 = C307 * C109;
    const double C323 = C307 * C117;
    const double C321 = C307 * C108;
    const double C402 = C307 * C183;
    const double C482 = C307 * C246;
    const double C1134 = C307 * C828;
    const double C2070 = C307 * C1764;
    const double C32472 = C307 * C1768;
    const double C32461 = C307 * C1777;
    const double C32459 = C307 * C1767;
    const double C32592 = C307 * C1873;
    const double C32708 = C307 * C1965;
    const double C35447 = C307 * C4223;
    const double C13806 = C13795 * C109;
    const double C13804 = C13795 * C117;
    const double C13800 = C13795 * C108;
    const double C13900 = C13795 * C183;
    const double C13984 = C13795 * C246;
    const double C14694 = C13795 * C828;
    const double C15692 = C13795 * C1764;
    const double C110580 = C13795 * C1768;
    const double C110570 = C13795 * C1777;
    const double C110566 = C13795 * C1767;
    const double C110688 = C13795 * C1873;
    const double C110800 = C13795 * C1965;
    const double C113394 = C13795 * C4223;
    const double C13798 = C13796 * C828;
    const double C110568 = C13796 * C4223;
    const double C47244 = C47233 * C109;
    const double C47242 = C47233 * C117;
    const double C47238 = C47233 * C108;
    const double C47338 = C47233 * C183;
    const double C47422 = C47233 * C246;
    const double C48126 = C47233 * C828;
    const double C49056 = C47233 * C1764;
    const double C77907 = C47233 * C1768;
    const double C77897 = C47233 * C1777;
    const double C77893 = C47233 * C1767;
    const double C78015 = C47233 * C1873;
    const double C78127 = C47233 * C1965;
    const double C80793 = C47233 * C4223;
    const double C47236 = C47234 * C828;
    const double C77895 = C47234 * C4223;
    const double C63533 =
        (((C139442 - (C137276 * 2 * C137303) / C137060) * ae) / C137060 -
         C137301 / C137064) /
            (2 * C137060) -
        ((C137276 * ((0 * ae) / C137060 - C137303 / C137062) + C139586) * be) /
            C137060;
    const double C63380 = C139586 / C139291;
    const double C13593 = C139585 / C137060;
    const double C63378 = C139442 / C139291 - (C139585 * C139572) / C137062;
    const double C63379 = C139585 / C137064 - (C139586 * C139572) / C137060;
    const double C47243 = C47031 * C315;
    const double C47239 = C47031 * C309;
    const double C47339 = C47031 * C395;
    const double C47429 = C47031 * C476;
    const double C47423 = C47031 * C475;
    const double C77898 = C47031 * C2061;
    const double C77894 = C47031 * C2054;
    const double C78016 = C47031 * C2170;
    const double C78128 = C47031 * C2269;
    const double C125168 =
        ((0 * ae) / C137060 - C137319 / C137062) / (2 * C137060) -
        (0 * be) / C137060;
    const double C572 = C554 * C109;
    const double C570 = C554 * C117;
    const double C568 = C554 * C108;
    const double C649 = C554 * C183;
    const double C727 = C554 * C246;
    const double C1456 = C554 * C828;
    const double C2392 = C554 * C1764;
    const double C15049 = C554 * C832;
    const double C15038 = C554 * C841;
    const double C15036 = C554 * C831;
    const double C15168 = C554 * C939;
    const double C15282 = C554 * C1029;
    const double C19096 = C554 * C4223;
    const double C30823 = C30812 * C109;
    const double C30821 = C30812 * C117;
    const double C30817 = C30812 * C108;
    const double C30917 = C30812 * C183;
    const double C31001 = C30812 * C246;
    const double C31727 = C30812 * C828;
    const double C32821 = C30812 * C1764;
    const double C77183 = C30812 * C832;
    const double C77173 = C30812 * C841;
    const double C77169 = C30812 * C831;
    const double C77293 = C30812 * C939;
    const double C77401 = C30812 * C1029;
    const double C81207 = C30812 * C4223;
    const double C30815 = C30813 * C1764;
    const double C77171 = C30813 * C4223;
    const double C92860 = C92849 * C109;
    const double C92858 = C92849 * C117;
    const double C92854 = C92849 * C108;
    const double C92954 = C92849 * C183;
    const double C93038 = C92849 * C246;
    const double C93742 = C92849 * C828;
    const double C94768 = C92849 * C1764;
    const double C109944 = C92849 * C832;
    const double C109934 = C92849 * C841;
    const double C109930 = C92849 * C831;
    const double C110054 = C92849 * C939;
    const double C110162 = C92849 * C1029;
    const double C113808 = C92849 * C4223;
    const double C92852 = C92850 * C1764;
    const double C109932 = C92850 * C4223;
    const double C125167 =
        (((C139457 - (C137283 * 2 * C137319) / C137060) * ae) / C137060 -
         C137317 / C137064) /
            (2 * C137060) -
        ((C137283 * ((0 * ae) / C137060 - C137319 / C137062) + C139588) * be) /
            C137060;
    const double C124865 = C139588 / C139291;
    const double C30408 = C139587 / C137060;
    const double C124863 = C139457 / C139291 - (C139587 * C139573) / C137062;
    const double C124864 = C139587 / C137064 - (C139588 * C139573) / C137060;
    const double C92859 = C92451 * C562;
    const double C92855 = C92451 * C556;
    const double C92961 = C92451 * C643;
    const double C92955 = C92451 * C642;
    const double C93039 = C92451 * C720;
    const double C109935 = C92451 * C1447;
    const double C109931 = C92451 * C1440;
    const double C110055 = C92451 * C1553;
    const double C110163 = C92451 * C1661;
    const double C14315 = C13591 * C836;
    const double C14307 = C139575 * C836;
    const double C47739 = C139575 * C836;
    const double C63865 = C139286 * C836;
    const double C14331 = C13591 * C844;
    const double C63869 = C139286 * C844;
    const double C32080 = C13591 * C1772;
    const double C32072 = C139575 * C1772;
    const double C77516 = C139286 * C1772;
    const double C94087 = C139575 * C1772;
    const double C32096 = C13591 * C1780;
    const double C77524 = C139286 * C1780;
    const double C18252 = C13591 * C4227;
    const double C66711 = C139286 * C4227;
    const double C20380 = C13591 * C5922;
    const double C63881 = C139286 * C5922;
    const double C24138 = C13591 * C8760;
    const double C66719 = C139286 * C8760;
    const double C43415 = C13591 * C10821;
    const double C88849 = C139286 * C10821;
    const double C327 = C307 * C118;
    const double C574 = C554 * C118;
    const double C13810 = C13795 * C118;
    const double C30827 = C30812 * C118;
    const double C47248 = C47233 * C118;
    const double C92864 = C92849 * C118;
    const double C1136 = C307 * C840;
    const double C1458 = C554 * C840;
    const double C13802 = C13796 * C840;
    const double C14698 = C13795 * C840;
    const double C31731 = C30812 * C840;
    const double C47240 = C47234 * C840;
    const double C48130 = C47233 * C840;
    const double C93746 = C92849 * C840;
    const double C15047 = C554 * C847;
    const double C77179 = C30812 * C847;
    const double C109940 = C92849 * C847;
    const double C2072 = C307 * C1776;
    const double C2394 = C554 * C1776;
    const double C15696 = C13795 * C1776;
    const double C30819 = C30813 * C1776;
    const double C32825 = C30812 * C1776;
    const double C49060 = C47233 * C1776;
    const double C92856 = C92850 * C1776;
    const double C94772 = C92849 * C1776;
    const double C32470 = C307 * C1783;
    const double C77903 = C47233 * C1783;
    const double C110576 = C13795 * C1783;
    const double C19094 = C554 * C4230;
    const double C35445 = C307 * C4230;
    const double C77175 = C30813 * C4230;
    const double C77899 = C47234 * C4230;
    const double C80789 = C47233 * C4230;
    const double C81203 = C30812 * C4230;
    const double C109936 = C92850 * C4230;
    const double C110572 = C13796 * C4230;
    const double C113390 = C13795 * C4230;
    const double C113804 = C92849 * C4230;
    const double C20829 = C554 * C5919;
    const double C82841 = C30812 * C5919;
    const double C115434 = C92849 * C5919;
    const double C24771 = C554 * C8757;
    const double C41040 = C307 * C8757;
    const double C77177 = C30813 * C8757;
    const double C80787 = C47234 * C8757;
    const double C86454 = C47233 * C8757;
    const double C86772 = C30812 * C8757;
    const double C109938 = C92850 * C8757;
    const double C113388 = C13796 * C8757;
    const double C118964 = C13795 * C8757;
    const double C119282 = C92849 * C8757;
    const double C43650 = C307 * C10818;
    const double C89074 = C47233 * C10818;
    const double C121530 = C13795 * C10818;
    const double C137366 = C137363 + C137357;
    const double C138044 = C138042 + C137357;
    const double C138168 = C138166 + C137357;
    const double C4784 =
        C137474 * ((-(C137532 * C137332 * C137679) / C137082) / C137060 -
                   (C137603 * ce) / C137333) -
        (ae * (C137532 * C137546 + C137355 * ce)) / C137333;
    const double C5018 =
        C137532 * ((-(C137474 * C137332 * C137755) / C137082) / C137060 -
                   (C137704 * ce) / C137333) -
        (ae * (C137474 * C137488 + C137355 * ce)) / C137333;
    const double C941 = -(C137474 * (C137474 * C137488 + C137355 * ce) +
                          C137332 * C137480 + C137474 * C137355 * ce) /
                        C137082;
    const double C1122 =
        (C137332 * C137595 + C137474 * (C137474 * C137603 + C137355 * ae) +
         C137474 * C137355 * ae) /
        C137060;
    const double C1967 = -(C137532 * (C137532 * C137546 + C137355 * ce) +
                           C137332 * C137538 + C137532 * C137355 * ce) /
                         C137082;
    const double C2380 =
        (C137332 * C137696 + C137532 * (C137532 * C137704 + C137355 * ae) +
         C137532 * C137355 * ae) /
        C137060;
    const double C4338 =
        -(C137532 * (C137474 * C137488 + C137355 * ce)) / C137082;
    const double C4444 =
        -(C137532 * C137474 * C137546 + C137474 * C137355 * ce) / C137082;
    const double C4550 =
        (C137532 * (C137474 * C137603 + C137355 * ae)) / C137060;
    const double C4900 =
        (C137532 * C137474 * C137704 + C137474 * C137355 * ae) / C137060;
    const double C833 = C137332 * C137339 + C137355 * C137646;
    const double C1769 = C137332 * C137339 + C137355 * C137768;
    const double C4224 = C137532 * C137474 * C137355;
    const double C5915 =
        2 * C137474 * C137355 + C137474 * (C137355 + C137378 * C137646);
    const double C8753 = C137532 * (C137355 + C137378 * C137646);
    const double C10814 =
        2 * C137532 * C137355 + C137532 * (C137355 + C137378 * C137768);
    const double C137365 = C137362 + C137354;
    const double C138043 = C138040 + C137354;
    const double C138167 = C138164 + C137354;
    const double C137364 = C137361 * C137341;
    const double C137651 = C137650 * C137341;
    const double C137773 = C137772 * C137341;
    const double C6608 = -(C137532 * (C137532 * C138104 + C138041 * ce) +
                           C137474 * C137538 + C137532 * C138041 * ce) /
                         C137082;
    const double C6922 =
        (C137474 * C137696 + C137532 * (C137532 * C138105 + C138041 * ae) +
         C137532 * C138041 * ae) /
        C137060;
    const double C6442 = C137474 * C137339 + C138041 * C137768;
    const double C26831 =
        2 * C137532 * C138041 + C137532 * (C138041 + C138217 * C137768);
    const double C406 = C139442 * C396;
    const double C47345 = C47031 * C396;
    const double C731 = C139457 * C721;
    const double C93045 = C92451 * C721;
    const double C329 = C307 * C110;
    const double C576 = C554 * C110;
    const double C13816 = C13795 * C110;
    const double C30833 = C30812 * C110;
    const double C47254 = C47233 * C110;
    const double C92870 = C92849 * C110;
    const double C1138 = C307 * C829;
    const double C1460 = C554 * C829;
    const double C13808 = C13796 * C829;
    const double C16670 = C13795 * C829;
    const double C33755 = C30812 * C829;
    const double C47246 = C47234 * C829;
    const double C50012 = C47233 * C829;
    const double C95700 = C92849 * C829;
    const double C2074 = C307 * C1765;
    const double C2396 = C554 * C1765;
    const double C17597 = C13795 * C1765;
    const double C30825 = C30813 * C1765;
    const double C34706 = C30812 * C1765;
    const double C50918 = C47233 * C1765;
    const double C92862 = C92850 * C1765;
    const double C96630 = C92849 * C1765;
    const double C20827 = C554 * C5916;
    const double C82837 = C30812 * C5916;
    const double C115430 = C92849 * C5916;
    const double C24769 = C554 * C8754;
    const double C41038 = C307 * C8754;
    const double C77181 = C30813 * C8754;
    const double C80791 = C47234 * C8754;
    const double C86450 = C47233 * C8754;
    const double C86768 = C30812 * C8754;
    const double C109942 = C92850 * C8754;
    const double C113392 = C13796 * C8754;
    const double C118960 = C13795 * C8754;
    const double C119278 = C92849 * C8754;
    const double C43648 = C307 * C10815;
    const double C89070 = C47233 * C10815;
    const double C121526 = C13795 * C10815;
    const double C405 = C307 * C184;
    const double C652 = C554 * C184;
    const double C13906 = C13795 * C184;
    const double C30923 = C30812 * C184;
    const double C47344 = C47233 * C184;
    const double C92960 = C92849 * C184;
    const double C407 = C307 * C185;
    const double C654 = C554 * C185;
    const double C13908 = C13795 * C185;
    const double C30925 = C30812 * C185;
    const double C47346 = C47233 * C185;
    const double C92962 = C92849 * C185;
    const double C1251 = C307 * C937;
    const double C1573 = C554 * C937;
    const double C13904 = C13796 * C937;
    const double C16778 = C13795 * C937;
    const double C33863 = C30812 * C937;
    const double C47342 = C47234 * C937;
    const double C50120 = C47233 * C937;
    const double C95808 = C92849 * C937;
    const double C1243 = C307 * C938;
    const double C1565 = C554 * C938;
    const double C13902 = C13796 * C938;
    const double C14818 = C13795 * C938;
    const double C31851 = C30812 * C938;
    const double C47340 = C47234 * C938;
    const double C48250 = C47233 * C938;
    const double C93866 = C92849 * C938;
    const double C15170 = C554 * C940;
    const double C77295 = C30812 * C940;
    const double C110056 = C92849 * C940;
    const double C2177 = C307 * C1870;
    const double C2499 = C554 * C1870;
    const double C15814 = C13795 * C1870;
    const double C30919 = C30813 * C1870;
    const double C32943 = C30812 * C1870;
    const double C49178 = C47233 * C1870;
    const double C92956 = C92850 * C1870;
    const double C94890 = C92849 * C1870;
    const double C2180 = C307 * C1871;
    const double C2502 = C554 * C1871;
    const double C17705 = C13795 * C1871;
    const double C30921 = C30813 * C1871;
    const double C34814 = C30812 * C1871;
    const double C51026 = C47233 * C1871;
    const double C92958 = C92850 * C1871;
    const double C96738 = C92849 * C1871;
    const double C32598 = C307 * C1874;
    const double C78021 = C47233 * C1874;
    const double C110694 = C13795 * C1874;
    const double C19243 = C554 * C4337;
    const double C35597 = C307 * C4337;
    const double C77291 = C30813 * C4337;
    const double C78017 = C47234 * C4337;
    const double C80931 = C47233 * C4337;
    const double C81343 = C30812 * C4337;
    const double C110052 = C92850 * C4337;
    const double C110690 = C13796 * C4337;
    const double C113532 = C13795 * C4337;
    const double C113944 = C92849 * C4337;
    const double C43727 = C307 * C10877;
    const double C89149 = C47233 * C10877;
    const double C121604 = C13795 * C10877;
    const double C485 = C307 * C247;
    const double C730 = C554 * C247;
    const double C13990 = C13795 * C247;
    const double C31007 = C30812 * C247;
    const double C47428 = C47233 * C247;
    const double C93044 = C92849 * C247;
    const double C487 = C307 * C248;
    const double C732 = C554 * C248;
    const double C13992 = C13795 * C248;
    const double C31009 = C30812 * C248;
    const double C47430 = C47233 * C248;
    const double C93046 = C92849 * C248;
    const double C1346 = C307 * C1027;
    const double C1668 = C554 * C1027;
    const double C13988 = C13796 * C1027;
    const double C16882 = C13795 * C1027;
    const double C33967 = C30812 * C1027;
    const double C47426 = C47234 * C1027;
    const double C50224 = C47233 * C1027;
    const double C95912 = C92849 * C1027;
    const double C1349 = C307 * C1028;
    const double C1671 = C554 * C1028;
    const double C13986 = C13796 * C1028;
    const double C14928 = C13795 * C1028;
    const double C31961 = C30812 * C1028;
    const double C47424 = C47234 * C1028;
    const double C48360 = C47233 * C1028;
    const double C93976 = C92849 * C1028;
    const double C15286 = C554 * C1030;
    const double C77407 = C30812 * C1030;
    const double C110168 = C92849 * C1030;
    const double C2289 = C307 * C1963;
    const double C2611 = C554 * C1963;
    const double C17809 = C13795 * C1963;
    const double C31005 = C30813 * C1963;
    const double C34918 = C30812 * C1963;
    const double C51130 = C47233 * C1963;
    const double C93042 = C92850 * C1963;
    const double C96842 = C92849 * C1963;
    const double C2281 = C307 * C1964;
    const double C2603 = C554 * C1964;
    const double C15926 = C13795 * C1964;
    const double C31003 = C30813 * C1964;
    const double C33055 = C30812 * C1964;
    const double C49290 = C47233 * C1964;
    const double C93040 = C92850 * C1964;
    const double C95002 = C92849 * C1964;
    const double C32710 = C307 * C1966;
    const double C78129 = C47233 * C1966;
    const double C110802 = C13795 * C1966;
    const double C19386 = C554 * C4443;
    const double C35744 = C307 * C4443;
    const double C77403 = C30813 * C4443;
    const double C78125 = C47234 * C4443;
    const double C81065 = C47233 * C4443;
    const double C81481 = C30812 * C4443;
    const double C110164 = C92850 * C4443;
    const double C110798 = C13796 * C4443;
    const double C113666 = C13795 * C4443;
    const double C114082 = C92849 * C4443;
    const double C20977 = C554 * C6038;
    const double C82987 = C30812 * C6038;
    const double C115580 = C92849 * C6038;
    const double C24985 = C554 * C8920;
    const double C41253 = C307 * C8920;
    const double C77405 = C30813 * C8920;
    const double C81067 = C47234 * C8920;
    const double C86666 = C47233 * C8920;
    const double C86982 = C30812 * C8920;
    const double C110166 = C92850 * C8920;
    const double C113668 = C13796 * C8920;
    const double C119176 = C13795 * C8920;
    const double C119492 = C92849 * C8920;
    const double C328 = C139442 * C316;
    const double C47249 = C47031 * C316;
    const double C326 = C139442 * C310;
    const double C47245 = C47031 * C310;
    const double C330 = C139442 * C311;
    const double C47255 = C47031 * C311;
    const double C1135 = C139442 * C1117;
    const double C13799 = C139586 * C1117;
    const double C47237 = C139586 * C1117;
    const double C48127 = C47031 * C1117;
    const double C1139 = C139442 * C1119;
    const double C13809 = C139586 * C1119;
    const double C47247 = C139586 * C1119;
    const double C50013 = C47031 * C1119;
    const double C2071 = C139442 * C2053;
    const double C49057 = C47031 * C2053;
    const double C2075 = C139442 * C2055;
    const double C50919 = C47031 * C2055;
    const double C32473 = C139442 * C2057;
    const double C77908 = C47031 * C2057;
    const double C35448 = C139442 * C4549;
    const double C77896 = C139586 * C4549;
    const double C80794 = C47031 * C4549;
    const double C110569 = C139586 * C4549;
    const double C43649 = C139442 * C10993;
    const double C89071 = C47031 * C10993;
    const double C575 = C139457 * C563;
    const double C92865 = C92451 * C563;
    const double C573 = C139457 * C557;
    const double C92861 = C92451 * C557;
    const double C577 = C139457 * C558;
    const double C92871 = C92451 * C558;
    const double C1457 = C139457 * C1439;
    const double C93743 = C92451 * C1439;
    const double C1461 = C139457 * C1441;
    const double C95701 = C92451 * C1441;
    const double C15050 = C139457 * C1443;
    const double C109945 = C92451 * C1443;
    const double C2393 = C139457 * C2375;
    const double C30816 = C139588 * C2375;
    const double C92853 = C139588 * C2375;
    const double C94769 = C92451 * C2375;
    const double C2397 = C139457 * C2377;
    const double C30826 = C139588 * C2377;
    const double C92863 = C139588 * C2377;
    const double C96631 = C92451 * C2377;
    const double C19097 = C139457 * C4899;
    const double C77172 = C139588 * C4899;
    const double C109933 = C139588 * C4899;
    const double C113809 = C92451 * C4899;
    const double C20828 = C139457 * C6256;
    const double C115431 = C92451 * C6256;
    const double C24770 = C139457 * C9234;
    const double C77182 = C139588 * C9234;
    const double C109943 = C139588 * C9234;
    const double C119279 = C92451 * C9234;
    const double C137396 = C137392 + C137381;
    const double C137420 = C137410 / C137082;
    const double C138505 = C137410 / C137333;
    const double C137950 = C137947 * ce;
    const double C138506 = 2 * C137947;
    const double C138717 = C137532 * C137947;
    const double C26835 =
        (2 * C137532 * C138084 + C137532 * (C138084 + C137947 * C137768)) /
        C137060;
    const double C137972 = C137969 * ce;
    const double C138787 = 2 * C137969;
    const double C138193 = C137360 + C138191;
    const double C138409 = C137360 + C138407;
    const double C137395 = C137391 + C137377;
    const double C137421 = C137411 / C137333;
    const double C137951 = ae * C137948;
    const double C138526 = -2 * C137948;
    const double C138736 = C137532 * C137948;
    const double C26833 = (-2 * C137532 * C138099) / C137082 -
                          (C137532 * (C137948 * C137768 + C138099)) / C137082;
    const double C137973 = ae * C137970;
    const double C138807 = -2 * C137970;
    const double C138209 = C138207 + C137359;
    const double C138436 = C138434 + C137359;
    const double C137394 = C137390 * C137341;
    const double C137452 = C137444 + C137429;
    const double C138562 = C138553 + C137429;
    const double C138865 = C138854 + C137429;
    const double C137435 = C137370 + C137427;
    const double C137437 = C137426 * ae;
    const double C137434 = C137426 * ce;
    const double C138241 = C137426 * C137646;
    const double C138240 = C137474 * C137426;
    const double C138486 = C137426 * C137768;
    const double C138485 = C137532 * C137426;
    const double C137449 = C137441 + C137425;
    const double C138559 = C138548 + C137425;
    const double C138861 = C138848 + C137425;
    const double C137448 = C137440 * C137341;
    const double C137662 = C137661 * C137341;
    const double C137784 = C137783 * C137341;
    const double C138561 = C137370 + C138550;
    const double C138563 = C138549 * ae;
    const double C138560 = C138549 * ce;
    const double C138758 = C138549 * C137768;
    const double C138757 = C137532 * C138549;
    const double C138733 = C137370 + C138731;
    const double C138866 = C138849 * ae;
    const double C138862 = C138849 * ce;
    const double C137498 = C137496 + C137486;
    const double C137510 = C137506 / C137333;
    const double C137511 = -2 * C137503;
    const double C137508 = ae * C137503;
    const double C138047 = C137474 * C137503;
    const double C138441 = C137532 * C137503;
    const double C10876 = (-2 * C137532 * C137488) / C137082 -
                          (C137532 * (C137503 * C137768 + C137488)) / C137082;
    const double C138222 = C138216 + C137377;
    const double C138454 = C138452 + C137486;
    const double C138686 = ae * C138684;
    const double C138826 = -2 * C138684;
    const double C137556 = C137554 + C137544;
    const double C137568 = C137564 / C137333;
    const double C137569 = -2 * C137561;
    const double C137566 = ae * C137561;
    const double C138107 = C137474 * C137561;
    const double C138170 = C137532 * C137561;
    const double C6037 = (-2 * C137474 * C137546) / C137082 -
                         (C137474 * (C137561 * C137646 + C137546)) / C137082;
    const double C8919 = -(C137532 * (C137561 * C137646 + C137546) +
                           (C137355 + C137378 * C137646) * ce) /
                         C137082;
    const double C138275 = C138273 + C137544;
    const double C138381 = C137532 * C138378;
    const double C138594 = -2 * C138378;
    const double C138592 = ae * C138378;
    const double C138467 = C138461 + C137377;
    const double C137613 = C137601 + C137611;
    const double C137625 = C137621 / C137333;
    const double C138545 = C137621 / C137082;
    const double C137626 = 2 * C137618;
    const double C137623 = C137618 * ce;
    const double C138049 = C137474 * C137618;
    const double C138422 = C137532 * C137618;
    const double C10992 =
        (2 * C137532 * C137603 + C137532 * (C137603 + C137618 * C137768)) /
        C137060;
    const double C138225 = C138219 + C137381;
    const double C138420 = C137601 + C138419;
    const double C138659 = C138657 * ce;
    const double C138801 = 2 * C138657;
    const double C137656 = C137655 * C137341;
    const double C137714 = C137702 + C137712;
    const double C137726 = C137722 / C137333;
    const double C138845 = C137722 / C137082;
    const double C137727 = 2 * C137719;
    const double C137724 = C137719 * ce;
    const double C138108 = C137474 * C137719;
    const double C138172 = C137532 * C137719;
    const double C6255 =
        (2 * C137474 * C137704 + C137474 * (C137704 + C137719 * C137646)) /
        C137060;
    const double C9233 = (C137532 * (C137704 + C137719 * C137646) +
                          (C137355 + C137378 * C137646) * ae) /
                         C137060;
    const double C138285 = C137702 + C138283;
    const double C138382 = C137532 * C138380;
    const double C138620 = 2 * C138380;
    const double C138618 = C138380 * ce;
    const double C138470 = C138464 + C137381;
    const double C137778 = C137777 * C137341;
    const double C137382 = -C137373;
    const double C21088 = C13591 * C6448;
    const double C68846 = C139286 * C6448;
    const double C6097 =
        2 * ((-(C137474 * C137600) / C137082) / C137060 -
             (ae * C137346) / C137333) -
        (ae * (C137359 * C137646 + C137346)) / C137333 +
        C137474 *
            ((-(ae * C137474 * C137359) / C137082) / C137060 -
             C137600 / C137333 +
             C137474 * ((-(C137474 * C137607) / C137082) / C137060 - C137374));
    const double C11158 =
        2 * ((-(C137532 * C137701) / C137082) / C137060 -
             (ae * C137346) / C137333) -
        (ae * (C137359 * C137768 + C137346)) / C137333 +
        C137532 *
            ((-(ae * C137532 * C137359) / C137082) / C137060 -
             C137701 / C137333 +
             C137532 * ((-(C137532 * C137708) / C137082) / C137060 - C137374));
    const double C21725 = C554 * C6445;
    const double C38048 = C307 * C6445;
    const double C77901 = C47234 * C6445;
    const double C81201 = C30813 * C6445;
    const double C83433 = C47233 * C6445;
    const double C83751 = C30812 * C6445;
    const double C110574 = C13796 * C6445;
    const double C113802 = C92850 * C6445;
    const double C115982 = C13795 * C6445;
    const double C116300 = C92849 * C6445;
    const double C111 = 3 * (C137339 + C137349 * C137340) +
                        C137332 * (2 * C137355 + C137332 * C137386);
    const double C830 = C137474 * (2 * C137355 + C137332 * C137386);
    const double C834 = C137339 + C137349 * C137340 + C137386 * C137646;
    const double C1766 = C137532 * (2 * C137355 + C137332 * C137386);
    const double C1770 = C137339 + C137349 * C137340 + C137386 * C137768;
    const double C4225 = C137532 * C137474 * C137386;
    const double C6441 = C137474 * C137355 + C138048 * C137768;
    const double C20371 = 3 * (C137339 + C137349 * C137646) +
                          C137474 * (2 * C138041 + C137474 * C138224);
    const double C21079 = C137339 + C137349 * C137646 + C138224 * C137768;
    const double C24129 = C137532 * (2 * C138041 + C137474 * C138224);
    const double C43406 = 3 * (C137339 + C137349 * C137768) +
                          C137532 * (2 * C138165 + C137532 * C138469);
    const double C11211 =
        2 * ((-(C137532 * C137752) / C137082) / C137060 -
             (ae * C137480) / C137333) -
        (ae * (C137486 * C137768 + C137480)) / C137333 +
        C137532 *
            ((-(ae * C137532 * C137486) / C137082) / C137060 -
             C137752 / C137333 +
             C137532 * ((-(C137532 * C137755) / C137082) / C137060 - C137493));
    const double C2183 = C307 * C1875;
    const double C2505 = C554 * C1875;
    const double C15818 = C13795 * C1875;
    const double C32947 = C30812 * C1875;
    const double C32945 = C30813 * C1875;
    const double C49182 = C47233 * C1875;
    const double C94894 = C92849 * C1875;
    const double C94892 = C92850 * C1875;
    const double C6203 =
        2 * ((-(C137474 * C137676) / C137082) / C137060 -
             (ae * C137538) / C137333) -
        (ae * (C137544 * C137646 + C137538)) / C137333 +
        C137474 *
            ((-(ae * C137474 * C137544) / C137082) / C137060 -
             C137676 / C137333 +
             C137474 * ((-(C137474 * C137679) / C137082) / C137060 - C137551));
    const double C1353 = C307 * C1031;
    const double C1675 = C554 * C1031;
    const double C14930 = C13795 * C1031;
    const double C14926 = C13796 * C1031;
    const double C31963 = C30812 * C1031;
    const double C48362 = C47233 * C1031;
    const double C48358 = C47234 * C1031;
    const double C93978 = C92849 * C1031;
    const double C6843 =
        C137474 *
            ((-(C137532 * C137601 * ce) / C137082) / C137060 -
             C137676 / C137333 +
             C137532 * ((-(C137532 * C137679) / C137082) / C137060 - C137608)) -
        (ae * (C137532 * (C137532 * C137544 + C137354) + C137538 +
               C137532 * C137349 * ce)) /
            C137333;
    const double C9155 =
        (-(C137532 * C137676) / C137082) / C137060 - (C137595 * ce) / C137333 -
        (ae * (C137532 * C138104 + C138041 * ce)) / C137333 +
        C137474 *
            (C137474 * ((-(C137532 * C137679) / C137082) / C137060 - C137608) -
             (ae * (C137532 * C137544 + C137354)) / C137333);
    const double C11100 =
        2 * ((-(C137532 * C137676) / C137082) / C137060 -
             (C137595 * ce) / C137333) -
        ((C137595 + C137601 * C137768) * ce) / C137333 +
        C137532 *
            ((-(C137532 * C137601 * ce) / C137082) / C137060 -
             C137676 / C137333 +
             C137532 * ((-(C137532 * C137679) / C137082) / C137060 - C137608));
    const double C138220 = -C138214;
    const double C2079 = C139442 * C2058;
    const double C49067 = C47031 * C2058;
    const double C6310 =
        2 * ((-(C137474 * C137752) / C137082) / C137060 -
             (C137696 * ce) / C137333) -
        ((C137696 + C137702 * C137646) * ce) / C137333 +
        C137474 *
            ((-(C137474 * C137702 * ce) / C137082) / C137060 -
             C137752 / C137333 +
             C137474 * ((-(C137474 * C137755) / C137082) / C137060 - C137709));
    const double C138465 = -C138459;
    const double C1465 = C139457 * C1444;
    const double C93753 = C92451 * C1444;
    const double C138511 = C137474 * C138509;
    const double C138724 = C137947 + C138722;
    const double C138792 = C137532 * C138790;
    const double C138534 = C137474 * C138531;
    const double C138742 = C138740 + C137948;
    const double C138815 = C137532 * C138812;
    const double C137522 = C137332 * C137519;
    const double C138053 = C137474 * C137519;
    const double C138445 = C138443 + C137503;
    const double C138834 = C137532 * C138831;
    const double C137580 = C137332 * C137577;
    const double C138110 = C137474 * C137577;
    const double C138176 = C137532 * C137577;
    const double C138267 = C138265 + C137561;
    const double C138390 = C137532 * C138387;
    const double C138602 = C137474 * C138599;
    const double C138709 = C137532 * C138599;
    const double C137636 = C137332 * C137633;
    const double C138055 = C137474 * C137633;
    const double C138424 = C137618 + C138423;
    const double C138802 = C137532 * C138734;
    const double C137737 = C137332 * C137734;
    const double C138111 = C137474 * C137734;
    const double C138178 = C137532 * C137734;
    const double C138296 = C137719 + C138294;
    const double C138391 = C137532 * C138389;
    const double C138627 = C137474 * C138624;
    const double C138711 = C137532 * C138624;
    const double C14459 = C13591 * C946;
    const double C14451 = C139575 * C946;
    const double C47883 = C139575 * C946;
    const double C63992 = C139286 * C946;
    const double C14455 = C13591 * C948;
    const double C63988 = C139286 * C948;
    const double C32222 = C13591 * C1878;
    const double C32218 = C139575 * C1878;
    const double C77659 = C139286 * C1878;
    const double C94233 = C139575 * C1878;
    const double C32230 = C13591 * C1882;
    const double C77670 = C139286 * C1882;
    const double C18396 = C13591 * C4341;
    const double C66837 = C139286 * C4341;
    const double C137497 = C137495 / C137082;
    const double C43494 =
        3 * ((-(C137492 * C137768) / C137082) / C137060 - C137485 / C137333) +
        C137532 *
            ((-2 * C137532 * C137492) / C137333 +
             C137532 * ((-(C137509 * C137768) / C137082) / C137060 - C137504));
    const double C138192 = C138189 / C137082;
    const double C20464 = C13591 * C5985;
    const double C63990 = C139286 * C5985;
    const double C21204 = C13591 * C6531;
    const double C68938 = C139286 * C6531;
    const double C24254 = C13591 * C8843;
    const double C66839 = C139286 * C8843;
    const double C43497 = C13591 * C10880;
    const double C88926 = C139286 * C10880;
    const double C137518 = C137514 / C137082;
    const double C138508 = C138504 / C137082;
    const double C138780 = C138779 / C137082;
    const double C332 = C139442 * C317;
    const double C47259 = C47031 * C317;
    const double C1137 = C139442 * C1126;
    const double C13803 = C139586 * C1126;
    const double C47241 = C139586 * C1126;
    const double C48131 = C47031 * C1126;
    const double C2073 = C139442 * C2062;
    const double C49061 = C47031 * C2062;
    const double C32471 = C139442 * C2065;
    const double C77904 = C47031 * C2065;
    const double C35446 = C139442 * C4553;
    const double C77900 = C139586 * C4553;
    const double C80790 = C47031 * C4553;
    const double C110573 = C139586 * C4553;
    const double C137612 = C137610 / C137082;
    const double C21415 =
        (-(C137607 * C137768) / C137082) / C137060 - C137600 / C137333 -
        (ae * (C137948 * C137768 + C138099)) / C137333 +
        C137474 *
            (C137474 * ((-(C137624 * C137768) / C137082) / C137060 - C137619) -
             (ae * (C137384 * C137768 + C137359)) / C137333);
    const double C138208 = C138206 / C137082;
    const double C27047 =
        (((-2 * C137532 * C137359) / C137082 -
          (C137532 * (C137384 * C137768 + C137359)) / C137082) *
         ae) /
            C137060 +
        C137474 *
            ((-2 * C138330) / C137333 +
             C137532 * ((-(C137624 * C137768) / C137082) / C137060 - C137619));
    const double C43646 =
        3 * ((-(C137607 * C137768) / C137082) / C137060 - C137600 / C137333) +
        C137532 *
            ((-2 * C138330) / C137333 +
             C137532 * ((-(C137624 * C137768) / C137082) / C137060 - C137619));
    const double C38049 = C139442 * C6691;
    const double C77902 = C139586 * C6691;
    const double C83434 = C47031 * C6691;
    const double C110575 = C139586 * C6691;
    const double C41041 = C139442 * C9003;
    const double C80788 = C139586 * C9003;
    const double C86455 = C47031 * C9003;
    const double C113389 = C139586 * C9003;
    const double C43651 = C139442 * C10996;
    const double C89075 = C47031 * C10996;
    const double C137632 = C137629 / C137082;
    const double C138529 = C138525 / C137082;
    const double C138646 = C138645 / C137082;
    const double C138678 = C137474 * C138677;
    const double C14581 = C13591 * C1036;
    const double C14575 = C139575 * C1036;
    const double C48007 = C139575 * C1036;
    const double C64088 = C139286 * C1036;
    const double C14579 = C13591 * C1038;
    const double C64082 = C139286 * C1038;
    const double C32346 = C13591 * C1972;
    const double C32338 = C139575 * C1972;
    const double C77785 = C139286 * C1972;
    const double C94353 = C139575 * C1972;
    const double C32342 = C13591 * C1974;
    const double C77783 = C139286 * C1974;
    const double C18540 = C13591 * C4447;
    const double C66950 = C139286 * C4447;
    const double C137555 = C137553 / C137082;
    const double C20535 =
        3 * ((-(C137550 * C137646) / C137082) / C137060 - C137543 / C137333) +
        C137474 *
            ((-2 * C137474 * C137550) / C137333 +
             C137474 * ((-(C137567 * C137646) / C137082) / C137060 - C137562));
    const double C138408 = C138406 / C137082;
    const double C20538 = C13591 * C6041;
    const double C64084 = C139286 * C6041;
    const double C21310 = C13591 * C6611;
    const double C69025 = C139286 * C6611;
    const double C24360 = C13591 * C8923;
    const double C66955 = C139286 * C8923;
    const double C43575 = C13591 * C10940;
    const double C89000 = C139286 * C10940;
    const double C137576 = C137572 / C137082;
    const double C138519 = C138518 / C137082;
    const double C138721 = C137532 * C138718;
    const double C138789 = C138786 / C137082;
    const double C488 = C139442 * C477;
    const double C47431 = C47031 * C477;
    const double C1350 = C139442 * C1338;
    const double C13987 = C139586 * C1338;
    const double C47425 = C139586 * C1338;
    const double C48361 = C47031 * C1338;
    const double C32711 = C139442 * C2270;
    const double C78130 = C47031 * C2270;
    const double C2282 = C139442 * C2271;
    const double C49291 = C47031 * C2271;
    const double C35745 = C139442 * C4783;
    const double C78126 = C139586 * C4783;
    const double C81066 = C47031 * C4783;
    const double C110799 = C139586 * C4783;
    const double C138274 = C138272 / C137082;
    const double C138337 = C138336 / C137082;
    const double C492 = C139442 * C478;
    const double C1347 = C139442 * C1337;
    const double C13989 = C139586 * C1337;
    const double C47427 = C139586 * C1337;
    const double C50225 = C47031 * C1337;
    const double C1354 = C139442 * C1341;
    const double C14927 = C139586 * C1341;
    const double C48363 = C47031 * C1341;
    const double C48359 = C139586 * C1341;
    const double C2285 = C139442 * C2272;
    const double C49293 = C47031 * C2272;
    const double C2290 = C139442 * C2273;
    const double C51131 = C47031 * C2273;
    const double C137685 = C137684 / C137082;
    const double C138264 = C137474 * C138261;
    const double C138342 = C137532 * C138261;
    const double C138597 = C138593 / C137082;
    const double C138660 = C138658 / C137082;
    const double C579 = C139457 * C564;
    const double C92875 = C92451 * C564;
    const double C1459 = C139457 * C1448;
    const double C93747 = C92451 * C1448;
    const double C15048 = C139457 * C1451;
    const double C109941 = C92451 * C1451;
    const double C2395 = C139457 * C2384;
    const double C30820 = C139588 * C2384;
    const double C92857 = C139588 * C2384;
    const double C94773 = C92451 * C2384;
    const double C19095 = C139457 * C4903;
    const double C77176 = C139588 * C4903;
    const double C109937 = C139588 * C4903;
    const double C113805 = C92451 * C4903;
    const double C137713 = C137711 / C137082;
    const double C20817 =
        3 * ((-(C137708 * C137646) / C137082) / C137060 - C137701 / C137333) +
        C137474 *
            ((-2 * C137474 * C137708) / C137333 +
             C137474 * ((-(C137725 * C137646) / C137082) / C137060 - C137720));
    const double C138435 = C138433 / C137082;
    const double C20830 = C139457 * C6259;
    const double C115435 = C92451 * C6259;
    const double C21726 = C139457 * C6925;
    const double C81202 = C139588 * C6925;
    const double C113803 = C139588 * C6925;
    const double C116301 = C92451 * C6925;
    const double C24772 = C139457 * C9237;
    const double C77178 = C139588 * C9237;
    const double C109939 = C139588 * C9237;
    const double C119283 = C92451 * C9237;
    const double C137733 = C137730 / C137082;
    const double C138613 = C138612 / C137082;
    const double C138739 = C137532 * C138737;
    const double C138810 = C138806 / C137082;
    const double C655 = C139457 * C644;
    const double C92963 = C92451 * C644;
    const double C15171 = C139457 * C1554;
    const double C110057 = C92451 * C1554;
    const double C1566 = C139457 * C1555;
    const double C93867 = C92451 * C1555;
    const double C2500 = C139457 * C2489;
    const double C30920 = C139588 * C2489;
    const double C92957 = C139588 * C2489;
    const double C94891 = C92451 * C2489;
    const double C19244 = C139457 * C5017;
    const double C77292 = C139588 * C5017;
    const double C110053 = C139588 * C5017;
    const double C113945 = C92451 * C5017;
    const double C138284 = C138282 / C137082;
    const double C138453 = C138451 / C137082;
    const double C659 = C139457 * C645;
    const double C1569 = C139457 * C1556;
    const double C93869 = C92451 * C1556;
    const double C1574 = C139457 * C1557;
    const double C95809 = C92451 * C1557;
    const double C2503 = C139457 * C2490;
    const double C30922 = C139588 * C2490;
    const double C92959 = C139588 * C2490;
    const double C96739 = C92451 * C2490;
    const double C2506 = C139457 * C2494;
    const double C32946 = C139588 * C2494;
    const double C94895 = C92451 * C2494;
    const double C94893 = C139588 * C2494;
    const double C137761 = C137760 / C137082;
    const double C138293 = C137474 * C138290;
    const double C138442 = C137532 * C138290;
    const double C138623 = C138619 / C137082;
    const double C138829 = C138825 / C137082;
    const double C14330 = C13595 * C832;
    const double C14326 = C13595 * C847;
    const double C14318 = C13595 * C840;
    const double C14314 = C13595 * C828;
    const double C14308 = C13595 * C841;
    const double C14304 = C13595 * C831;
    const double C14458 = C13595 * C938;
    const double C14454 = C13595 * C940;
    const double C14452 = C13595 * C939;
    const double C14584 = C13595 * C1031;
    const double C14580 = C13595 * C1028;
    const double C14578 = C13595 * C1030;
    const double C14572 = C13595 * C1029;
    const double C16350 = C13595 * C829;
    const double C16462 = C13595 * C937;
    const double C16564 = C13595 * C1027;
    const double C18251 = C13595 * C4223;
    const double C18247 = C13595 * C4230;
    const double C18395 = C13595 * C4337;
    const double C18539 = C13595 * C4443;
    const double C20383 = C13595 * C5919;
    const double C20379 = C13595 * C5916;
    const double C20537 = C13595 * C6038;
    const double C21091 = C13595 * C6445;
    const double C24141 = C13595 * C8757;
    const double C24137 = C13595 * C8754;
    const double C24359 = C13595 * C8920;
    const double C32095 = C13595 * C1768;
    const double C32091 = C13595 * C1783;
    const double C32083 = C13595 * C1776;
    const double C32079 = C13595 * C1764;
    const double C32073 = C13595 * C1777;
    const double C32069 = C13595 * C1767;
    const double C32229 = C13595 * C1874;
    const double C32223 = C13595 * C1875;
    const double C32221 = C13595 * C1870;
    const double C32215 = C13595 * C1873;
    const double C32345 = C13595 * C1964;
    const double C32341 = C13595 * C1966;
    const double C32339 = C13595 * C1965;
    const double C34071 = C13595 * C1765;
    const double C34181 = C13595 * C1871;
    const double C34287 = C13595 * C1963;
    const double C43418 = C13595 * C10818;
    const double C43414 = C13595 * C10815;
    const double C43496 = C13595 * C10877;
    const double C14312 = C13596 * C829;
    const double C14310 = C13596 * C840;
    const double C14306 = C13596 * C828;
    const double C14460 = C13596 * C937;
    const double C14450 = C13596 * C938;
    const double C14582 = C13596 * C1027;
    const double C14576 = C13596 * C1031;
    const double C14574 = C13596 * C1028;
    const double C32077 = C13596 * C1765;
    const double C32075 = C13596 * C1776;
    const double C32071 = C13596 * C1764;
    const double C32227 = C13596 * C1875;
    const double C32219 = C13596 * C1871;
    const double C32217 = C13596 * C1870;
    const double C32347 = C13596 * C1963;
    const double C32337 = C13596 * C1964;
    const double C47762 = C47033 * C832;
    const double C47758 = C47033 * C847;
    const double C47750 = C47033 * C840;
    const double C47746 = C47033 * C828;
    const double C47740 = C47033 * C841;
    const double C47736 = C47033 * C831;
    const double C47890 = C47033 * C938;
    const double C47886 = C47033 * C940;
    const double C47884 = C47033 * C939;
    const double C48016 = C47033 * C1031;
    const double C48012 = C47033 * C1028;
    const double C48010 = C47033 * C1030;
    const double C48004 = C47033 * C1029;
    const double C49692 = C47033 * C829;
    const double C49804 = C47033 * C937;
    const double C49906 = C47033 * C1027;
    const double C51570 = C47033 * C4223;
    const double C51566 = C47033 * C4230;
    const double C51714 = C47033 * C4337;
    const double C51858 = C47033 * C4443;
    const double C53624 = C47033 * C5919;
    const double C53620 = C47033 * C5916;
    const double C53770 = C47033 * C6038;
    const double C54274 = C47033 * C6445;
    const double C57232 = C47033 * C8757;
    const double C57228 = C47033 * C8754;
    const double C57442 = C47033 * C8920;
    const double C94110 = C47033 * C1768;
    const double C94106 = C47033 * C1783;
    const double C94098 = C47033 * C1776;
    const double C94094 = C47033 * C1764;
    const double C94088 = C47033 * C1777;
    const double C94084 = C47033 * C1767;
    const double C94244 = C47033 * C1874;
    const double C94238 = C47033 * C1875;
    const double C94236 = C47033 * C1870;
    const double C94230 = C47033 * C1873;
    const double C94360 = C47033 * C1964;
    const double C94356 = C47033 * C1966;
    const double C94354 = C47033 * C1965;
    const double C96016 = C47033 * C1765;
    const double C96126 = C47033 * C1871;
    const double C96232 = C47033 * C1963;
    const double C105168 = C47033 * C10818;
    const double C105164 = C47033 * C10815;
    const double C105242 = C47033 * C10877;
    const double C47744 = C47034 * C829;
    const double C47742 = C47034 * C840;
    const double C47738 = C47034 * C828;
    const double C47892 = C47034 * C937;
    const double C47882 = C47034 * C938;
    const double C48014 = C47034 * C1027;
    const double C48008 = C47034 * C1031;
    const double C48006 = C47034 * C1028;
    const double C94092 = C47034 * C1765;
    const double C94090 = C47034 * C1776;
    const double C94086 = C47034 * C1764;
    const double C94242 = C47034 * C1875;
    const double C94234 = C47034 * C1871;
    const double C94232 = C47034 * C1870;
    const double C94362 = C47034 * C1963;
    const double C94352 = C47034 * C1964;
    const double C63880 = C63381 * C5916;
    const double C63878 = C63381 * C5919;
    const double C63870 = C63381 * C847;
    const double C63868 = C63381 * C832;
    const double C63866 = C63381 * C840;
    const double C63864 = C63381 * C828;
    const double C63862 = C63381 * C841;
    const double C63860 = C63381 * C831;
    const double C63991 = C63381 * C938;
    const double C63987 = C63381 * C940;
    const double C63985 = C63381 * C939;
    const double C64090 = C63381 * C1031;
    const double C64087 = C63381 * C1028;
    const double C64083 = C63381 * C6038;
    const double C64081 = C63381 * C1030;
    const double C64078 = C63381 * C1029;
    const double C65308 = C63381 * C829;
    const double C65402 = C63381 * C937;
    const double C65483 = C63381 * C1027;
    const double C66718 = C63381 * C8754;
    const double C66716 = C63381 * C8757;
    const double C66710 = C63381 * C4223;
    const double C66708 = C63381 * C4230;
    const double C66836 = C63381 * C4337;
    const double C66954 = C63381 * C8920;
    const double C66949 = C63381 * C4443;
    const double C68847 = C63381 * C6445;
    const double C77523 = C63381 * C1768;
    const double C77521 = C63381 * C1783;
    const double C77517 = C63381 * C1776;
    const double C77515 = C63381 * C1764;
    const double C77513 = C63381 * C1777;
    const double C77511 = C63381 * C1767;
    const double C77669 = C63381 * C1874;
    const double C77662 = C63381 * C1875;
    const double C77658 = C63381 * C1870;
    const double C77652 = C63381 * C1873;
    const double C77784 = C63381 * C1964;
    const double C77782 = C63381 * C1966;
    const double C77780 = C63381 * C1965;
    const double C79435 = C63381 * C1765;
    const double C79542 = C63381 * C1871;
    const double C79646 = C63381 * C1963;
    const double C88850 = C63381 * C10818;
    const double C88848 = C63381 * C10815;
    const double C88925 = C63381 * C10877;
    const double C47763 = C47029 * C844;
    const double C47747 = C47029 * C836;
    const double C47741 = C47029 * C854;
    const double C47737 = C47029 * C842;
    const double C47891 = C47029 * C946;
    const double C47887 = C47029 * C948;
    const double C47885 = C47029 * C947;
    const double C48013 = C47029 * C1036;
    const double C48011 = C47029 * C1038;
    const double C48005 = C47029 * C1037;
    const double C51571 = C47029 * C4227;
    const double C51715 = C47029 * C4341;
    const double C51859 = C47029 * C4447;
    const double C53621 = C47029 * C5922;
    const double C53701 = C47029 * C5985;
    const double C53771 = C47029 * C6041;
    const double C54271 = C47029 * C6448;
    const double C54383 = C47029 * C6531;
    const double C54485 = C47029 * C6611;
    const double C57229 = C47029 * C8760;
    const double C57341 = C47029 * C8843;
    const double C57443 = C47029 * C8923;
    const double C94111 = C47029 * C1780;
    const double C94095 = C47029 * C1772;
    const double C94089 = C47029 * C1790;
    const double C94085 = C47029 * C1778;
    const double C94245 = C47029 * C1882;
    const double C94237 = C47029 * C1878;
    const double C94231 = C47029 * C1881;
    const double C94361 = C47029 * C1972;
    const double C94357 = C47029 * C1974;
    const double C94355 = C47029 * C1973;
    const double C105165 = C47029 * C10821;
    const double C105243 = C47029 * C10880;
    const double C105317 = C47029 * C10940;
    const double C100 =
        (((0 - (C137058 * C137059) / C137060) * ae) / C137060 -
         (0 * be) / C137064) /
            (2 * C137060) -
        ((C137058 *
              (((C139286 - (C137058 * 2 * C137065) / C137060) * ae) / C137060 -
               C137059 / C137064) +
          C47029) *
         be) /
            C137060 +
        (0 * ae) / C137060 - C137065 / C137062;
    const double C137101 = C137090 - C137098;
    const double C137100 = C137080 * C137096;
    const double C827 = (-C137096 / C137082) / C137087 - (0 * de) / C137082;
    const double C5913 = -C137096 / C137082;
    const double C139576 = C139551 / C137086;
    const double C139578 = C139555 / C137082;
    const double C821 = -C139577;
    const double C137202 = C137199 - C137195;
    const double C137198 = C137135 * C137192;
    const double C139580 = C139563 / C137086;
    const double C934 =
        (((0 - (C137135 * C137136) / C137082) * ce) / C137082 -
         (0 * de) / C137091) /
            C137087 +
        ((C137135 *
              (((C139328 - (C137135 * 2 * C137138) / C137082) * ce) / C137082 -
               C137136 / C137091) +
          C139560) *
         ce) /
            C137082 +
        (0 * ce) / C137082 - C137138 / C137086;
    const double C139581 = C139565 / C137082;
    const double C5228 = -C139579;
    const double C137248 = C137245 - C137241;
    const double C137244 = C137150 * C137238;
    const double C139583 = C139567 / C137086;
    const double C1960 =
        (((0 - (C137150 * C137151) / C137082) * ce) / C137082 -
         (0 * de) / C137091) /
            C137087 +
        ((C137150 *
              (((C139339 - (C137150 * 2 * C137153) / C137082) * ce) / C137082 -
               C137151 / C137091) +
          C139561) *
         ce) /
            C137082 +
        (0 * ce) / C137082 - C137153 / C137086;
    const double C139584 = C139569 / C137082;
    const double C9466 = -C139582;
    const double C338 = C323 + C324;
    const double C337 = C321 + C322;
    const double C413 = C402 + C403;
    const double C493 = C482 + C483;
    const double C32484 = C32461 + C32462;
    const double C32483 = C32459 + C32460;
    const double C32604 = C32592 + C32593;
    const double C32719 = C32708 + C32709;
    const double C13821 = C13593 * C317;
    const double C13817 = C13593 * C311;
    const double C13811 = C13593 * C316;
    const double C13807 = C13593 * C310;
    const double C13805 = C13593 * C315;
    const double C13801 = C13593 * C309;
    const double C13907 = C13593 * C396;
    const double C13901 = C13593 * C395;
    const double C13993 = C13593 * C477;
    const double C13991 = C13593 * C476;
    const double C13985 = C13593 * C475;
    const double C14699 = C13593 * C1126;
    const double C14695 = C13593 * C1117;
    const double C14931 = C13593 * C1341;
    const double C14929 = C13593 * C1338;
    const double C15703 = C13593 * C2058;
    const double C15697 = C13593 * C2062;
    const double C15693 = C13593 * C2053;
    const double C15929 = C13593 * C2272;
    const double C15927 = C13593 * C2271;
    const double C16671 = C13593 * C1119;
    const double C16883 = C13593 * C1337;
    const double C17598 = C13593 * C2055;
    const double C17810 = C13593 * C2273;
    const double C110581 = C13593 * C2057;
    const double C110577 = C13593 * C2065;
    const double C110571 = C13593 * C2061;
    const double C110567 = C13593 * C2054;
    const double C110689 = C13593 * C2170;
    const double C110803 = C13593 * C2270;
    const double C110801 = C13593 * C2269;
    const double C113395 = C13593 * C4549;
    const double C113391 = C13593 * C4553;
    const double C113667 = C13593 * C4783;
    const double C115983 = C13593 * C6691;
    const double C118965 = C13593 * C9003;
    const double C121531 = C13593 * C10996;
    const double C121527 = C13593 * C10993;
    const double C63532 =
        (((0 - (C137276 * C137301) / C137060) * ae) / C137060 -
         (0 * be) / C137064) /
            (2 * C137060) -
        ((C137276 *
              (((C139442 - (C137276 * 2 * C137303) / C137060) * ae) / C137060 -
               C137301 / C137064) +
          C13593) *
         be) /
            C137060 +
        (0 * ae) / C137060 - C137303 / C137062;
    const double C47263 = C47242 + C47243;
    const double C47261 = C47238 + C47239;
    const double C47350 = C47338 + C47339;
    const double C47434 = C47422 + C47423;
    const double C77911 = C77897 + C77898;
    const double C77909 = C77893 + C77894;
    const double C78023 = C78015 + C78016;
    const double C78134 = C78127 + C78128;
    const double C585 = C570 + C571;
    const double C584 = C568 + C569;
    const double C660 = C649 + C650;
    const double C738 = C727 + C728;
    const double C15061 = C15038 + C15039;
    const double C15060 = C15036 + C15037;
    const double C15179 = C15168 + C15169;
    const double C15294 = C15282 + C15283;
    const double C30838 = C30408 * C564;
    const double C30834 = C30408 * C558;
    const double C30828 = C30408 * C563;
    const double C30824 = C30408 * C557;
    const double C30822 = C30408 * C562;
    const double C30818 = C30408 * C556;
    const double C30926 = C30408 * C644;
    const double C30924 = C30408 * C643;
    const double C30918 = C30408 * C642;
    const double C31008 = C30408 * C721;
    const double C31002 = C30408 * C720;
    const double C31738 = C30408 * C1444;
    const double C31732 = C30408 * C1448;
    const double C31728 = C30408 * C1439;
    const double C31854 = C30408 * C1556;
    const double C31852 = C30408 * C1555;
    const double C32826 = C30408 * C2384;
    const double C32822 = C30408 * C2375;
    const double C32948 = C30408 * C2494;
    const double C32944 = C30408 * C2489;
    const double C33756 = C30408 * C1441;
    const double C33864 = C30408 * C1557;
    const double C34707 = C30408 * C2377;
    const double C34815 = C30408 * C2490;
    const double C77184 = C30408 * C1443;
    const double C77180 = C30408 * C1451;
    const double C77174 = C30408 * C1447;
    const double C77170 = C30408 * C1440;
    const double C77296 = C30408 * C1554;
    const double C77294 = C30408 * C1553;
    const double C77402 = C30408 * C1661;
    const double C81208 = C30408 * C4899;
    const double C81204 = C30408 * C4903;
    const double C81344 = C30408 * C5017;
    const double C82842 = C30408 * C6259;
    const double C82838 = C30408 * C6256;
    const double C83752 = C30408 * C6925;
    const double C86773 = C30408 * C9237;
    const double C86769 = C30408 * C9234;
    const double C125166 =
        (((0 - (C137283 * C137317) / C137060) * ae) / C137060 -
         (0 * be) / C137064) /
            (2 * C137060) -
        ((C137283 *
              (((C139457 - (C137283 * 2 * C137319) / C137060) * ae) / C137060 -
               C137317 / C137064) +
          C30408) *
         be) /
            C137060 +
        (0 * ae) / C137060 - C137319 / C137062;
    const double C92879 = C92858 + C92859;
    const double C92877 = C92854 + C92855;
    const double C92966 = C92954 + C92955;
    const double C93050 = C93038 + C93039;
    const double C109948 = C109934 + C109935;
    const double C109946 = C109930 + C109931;
    const double C110061 = C110054 + C110055;
    const double C110170 = C110162 + C110163;
    const double C119 =
        (2 * (C137332 * C137347 + C137339 * ae) +
         C137332 * (C137347 + C137332 * C137366 + C137355 * ae) +
         (C137339 + C137349 * C137340) * ae) /
        C137060;
    const double C837 =
        (C137474 * (C137347 + C137332 * C137366 + C137355 * ae)) / C137060;
    const double C845 =
        (C137332 * C137347 + C137339 * ae + C137366 * C137646) / C137060;
    const double C1773 =
        (C137532 * (C137347 + C137332 * C137366 + C137355 * ae)) / C137060;
    const double C1781 =
        (C137332 * C137347 + C137339 * ae + C137366 * C137768) / C137060;
    const double C4228 = (C137532 * C137474 * C137366) / C137060;
    const double C6094 =
        (2 * (C137474 * C137595 + C137339 * ae) +
         C137474 * (C137595 + C137474 * C138044 + C138041 * ae) +
         (C137339 + C137349 * C137646) * ae) /
        C137060;
    const double C6688 =
        (C137474 * C137595 + C137339 * ae + C138044 * C137768) / C137060;
    const double C9000 =
        (C137532 * (C137595 + C137474 * C138044 + C138041 * ae)) / C137060;
    const double C11155 =
        (2 * (C137532 * C137696 + C137339 * ae) +
         C137532 * (C137696 + C137532 * C138168 + C138165 * ae) +
         (C137339 + C137349 * C137768) * ae) /
        C137060;
    const double C4792 = C139442 * C4784;
    const double C15925 = C139586 * C4784;
    const double C18958 = C13593 * C4784;
    const double C49289 = C139586 * C4784;
    const double C52277 = C47031 * C4784;
    const double C5026 = C139457 * C5018;
    const double C31850 = C139588 * C5018;
    const double C36027 = C30408 * C5018;
    const double C93865 = C139588 * C5018;
    const double C97901 = C92451 * C5018;
    const double C1246 = C307 * C941;
    const double C1568 = C554 * C941;
    const double C14464 = C13595 * C941;
    const double C14456 = C13596 * C941;
    const double C14820 = C13795 * C941;
    const double C14816 = C13796 * C941;
    const double C31853 = C30812 * C941;
    const double C47896 = C47033 * C941;
    const double C47888 = C47034 * C941;
    const double C48252 = C47233 * C941;
    const double C48248 = C47234 * C941;
    const double C63993 = C63381 * C941;
    const double C93868 = C92849 * C941;
    const double C1143 = C139442 * C1122;
    const double C14705 = C13593 * C1122;
    const double C14697 = C139586 * C1122;
    const double C48137 = C47031 * C1122;
    const double C48129 = C139586 * C1122;
    const double C2284 = C307 * C1967;
    const double C2606 = C554 * C1967;
    const double C15928 = C13795 * C1967;
    const double C32351 = C13595 * C1967;
    const double C32343 = C13596 * C1967;
    const double C33057 = C30812 * C1967;
    const double C33053 = C30813 * C1967;
    const double C49292 = C47233 * C1967;
    const double C77786 = C63381 * C1967;
    const double C94366 = C47033 * C1967;
    const double C94358 = C47034 * C1967;
    const double C95004 = C92849 * C1967;
    const double C95000 = C92850 * C1967;
    const double C2401 = C139457 * C2380;
    const double C32832 = C30408 * C2380;
    const double C32824 = C139588 * C2380;
    const double C94779 = C92451 * C2380;
    const double C94771 = C139588 * C2380;
    const double C4675 = C307 * C4338;
    const double C5025 = C554 * C4338;
    const double C15816 = C13796 * C4338;
    const double C18401 = C13595 * C4338;
    const double C18397 = C13596 * C4338;
    const double C18821 = C13795 * C4338;
    const double C31849 = C30813 * C4338;
    const double C36026 = C30812 * C4338;
    const double C49180 = C47234 * C4338;
    const double C51720 = C47033 * C4338;
    const double C51716 = C47034 * C4338;
    const double C52140 = C47233 * C4338;
    const double C66840 = C63381 * C4338;
    const double C93864 = C92850 * C4338;
    const double C97900 = C92849 * C4338;
    const double C4791 = C307 * C4444;
    const double C5141 = C554 * C4444;
    const double C15924 = C13796 * C4444;
    const double C18541 = C13595 * C4444;
    const double C18537 = C13596 * C4444;
    const double C18957 = C13795 * C4444;
    const double C31959 = C30813 * C4444;
    const double C36162 = C30812 * C4444;
    const double C49288 = C47234 * C4444;
    const double C51860 = C47033 * C4444;
    const double C51856 = C47034 * C4444;
    const double C52276 = C47233 * C4444;
    const double C66959 = C63381 * C4444;
    const double C93974 = C92850 * C4444;
    const double C98036 = C92849 * C4444;
    const double C4559 = C139442 * C4550;
    const double C15695 = C139586 * C4550;
    const double C18682 = C13593 * C4550;
    const double C49059 = C139586 * C4550;
    const double C52001 = C47031 * C4550;
    const double C4909 = C139457 * C4900;
    const double C31730 = C139588 * C4900;
    const double C35887 = C30408 * C4900;
    const double C93745 = C139588 * C4900;
    const double C97761 = C92451 * C4900;
    const double C1142 = C307 * C833;
    const double C1464 = C554 * C833;
    const double C14328 = C13596 * C833;
    const double C14320 = C13595 * C833;
    const double C14704 = C13795 * C833;
    const double C14696 = C13796 * C833;
    const double C31737 = C30812 * C833;
    const double C47760 = C47034 * C833;
    const double C47752 = C47033 * C833;
    const double C48136 = C47233 * C833;
    const double C48128 = C47234 * C833;
    const double C63872 = C63381 * C833;
    const double C93752 = C92849 * C833;
    const double C2078 = C307 * C1769;
    const double C2400 = C554 * C1769;
    const double C15702 = C13795 * C1769;
    const double C32093 = C13596 * C1769;
    const double C32085 = C13595 * C1769;
    const double C32831 = C30812 * C1769;
    const double C32823 = C30813 * C1769;
    const double C49066 = C47233 * C1769;
    const double C77519 = C63381 * C1769;
    const double C94108 = C47034 * C1769;
    const double C94100 = C47033 * C1769;
    const double C94778 = C92849 * C1769;
    const double C94770 = C92850 * C1769;
    const double C4558 = C307 * C4224;
    const double C4908 = C554 * C4224;
    const double C15694 = C13796 * C4224;
    const double C18249 = C13596 * C4224;
    const double C18241 = C13595 * C4224;
    const double C18681 = C13795 * C4224;
    const double C31729 = C30813 * C4224;
    const double C35886 = C30812 * C4224;
    const double C49058 = C47234 * C4224;
    const double C51568 = C47034 * C4224;
    const double C51560 = C47033 * C4224;
    const double C52000 = C47233 * C4224;
    const double C66706 = C63381 * C4224;
    const double C93744 = C92850 * C4224;
    const double C97760 = C92849 * C4224;
    const double C14702 = C13796 * C5915;
    const double C15056 = C554 * C5915;
    const double C20381 = C13596 * C5915;
    const double C48134 = C47234 * C5915;
    const double C53622 = C47034 * C5915;
    const double C63876 = C63381 * C5915;
    const double C18679 = C13796 * C8753;
    const double C19103 = C554 * C8753;
    const double C24139 = C13596 * C8753;
    const double C31411 = C307 * C8753;
    const double C31735 = C30813 * C8753;
    const double C51998 = C47234 * C8753;
    const double C57230 = C47034 * C8753;
    const double C66714 = C63381 * C8753;
    const double C93750 = C92850 * C8753;
    const double C32479 = C307 * C10814;
    const double C32829 = C30813 * C10814;
    const double C43416 = C13596 * C10814;
    const double C94776 = C92850 * C10814;
    const double C105166 = C47034 * C10814;
    const double C126011 = C63381 * C10814;
    const double C120 =
        (-2 * (C137332 * C137346 + C137339 * ce)) / C137082 -
        (C137332 * (C137332 * C137365 + C137346 + C137355 * ce)) / C137082 -
        ((C137339 + C137349 * C137340) * ce) / C137082;
    const double C839 =
        -(C137474 * (C137332 * C137365 + C137346 + C137355 * ce)) / C137082;
    const double C848 =
        -(C137365 * C137646 + C137332 * C137346 + C137339 * ce) / C137082;
    const double C1775 =
        -(C137532 * (C137332 * C137365 + C137346 + C137355 * ce)) / C137082;
    const double C1784 =
        -(C137365 * C137768 + C137332 * C137346 + C137339 * ce) / C137082;
    const double C4231 = -(C137532 * C137474 * C137365) / C137082;
    const double C7000 =
        (-(C137474 * C137752) / C137082) / C137060 - (C137696 * ce) / C137333 -
        (ae * C137532 * C138043) / C137333 +
        C137532 *
            (C137532 * ((-(C137474 * C137755) / C137082) / C137060 - C137709) -
             (ae * C138043) / C137333);
    const double C9312 =
        C137532 *
            ((-(C138105 * ce) / C137082) / C137060 - C137752 / C137333 +
             C137474 * ((-(C137474 * C137755) / C137082) / C137060 - C137709)) -
        (ae * (C137474 * C138043 + C137480 + C138041 * ce)) / C137333;
    const double C5982 =
        (-2 * (C137474 * C137480 + C137339 * ce)) / C137082 -
        (C137474 * (C137474 * C138043 + C137480 + C138041 * ce)) / C137082 -
        ((C137339 + C137349 * C137646) * ce) / C137082;
    const double C6528 =
        -(C138043 * C137768 + C137474 * C137480 + C137339 * ce) / C137082;
    const double C8840 =
        -(C137532 * (C137474 * C138043 + C137480 + C138041 * ce)) / C137082;
    const double C10937 =
        (-2 * (C137532 * C137538 + C137339 * ce)) / C137082 -
        (C137532 * (C137532 * C138167 + C137538 + C138165 * ce)) / C137082 -
        ((C137339 + C137349 * C137768) * ce) / C137082;
    const double C128 =
        2 * ((-(C137347 * ce) / C137082) / C137060 - (ae * C137346) / C137333 -
             (C137332 * C137364) / C137333) -
        (ae * (C137332 * C137365 + C137346 + C137355 * ce)) / C137333 -
        ((C137347 + C137332 * C137366 + C137355 * ae) * ce) / C137333 +
        C137332 * ((-(ae * C137365) / C137082) / C137060 - C137364 / C137333 -
                   (C137366 * ce) / C137333 +
                   C137332 * ((-(C137360 * ce) / C137082) / C137060 -
                              (ae * C137359) / C137333 -
                              (C137332 *
                               (C137350 * C137351 +
                                C137340 * bs[5] * std::pow(C137336, 5)) *
                               C137341) /
                                  C137333));
    const double C853 = (-(C137474 * C137347 * ce) / C137082) / C137060 -
                        (ae * C137474 * C137346) / C137333 -
                        (C137332 * C137474 * C137364) / C137333;
    const double C856 =
        (-(C137364 * C137646) / C137082) / C137060 -
        ((C137339 + C137340 * C137337 * C137343) * C137341) / C137333;
    const double C1789 = (-(C137532 * C137347 * ce) / C137082) / C137060 -
                         (ae * C137532 * C137346) / C137333 -
                         (C137332 * C137532 * C137364) / C137333;
    const double C1792 =
        (-(C137364 * C137768) / C137082) / C137060 -
        ((C137339 + C137340 * C137337 * C137343) * C137341) / C137333;
    const double C4235 = (-(C137532 * C137474 * C137364) / C137082) / C137060;
    const double C397 =
        (-2 * C137332 * C137651) / C137333 +
        C137332 *
            ((-((C137370 + C137646 * C137371 * C137372) * C137341 * C137340) /
              C137082) /
                 C137060 -
             C137651 / C137333);
    const double C1232 =
        (-(ae * (C137474 * C137480 + C137339 * ce)) / C137082) / C137060 -
        ((C137339 + C137646 * C137337 * C137343) * C137341) / C137333 -
        ((C137474 * C137595 + C137339 * ae) * ce) / C137333 +
        C137474 * ((-(C137595 * ce) / C137082) / C137060 -
                   (ae * C137480) / C137333 - (C137474 * C137651) / C137333);
    const double C1233 = (-(C137332 * C137595 * ce) / C137082) / C137060 -
                         (ae * C137332 * C137480) / C137333 -
                         (C137474 * C137332 * C137651) / C137333;
    const double C2167 = (-(C137532 * C137332 * C137651) / C137082) / C137060;
    const double C2171 =
        (-(C137651 * C137768) / C137082) / C137060 -
        ((C137339 + C137646 * C137337 * C137343) * C137341) / C137333;
    const double C4667 = (-(C137532 * C137595 * ce) / C137082) / C137060 -
                         (ae * C137532 * C137480) / C137333 -
                         (C137474 * C137532 * C137651) / C137333;
    const double C722 =
        (-2 * C137332 * C137773) / C137333 +
        C137332 *
            ((-((C137370 + C137768 * C137371 * C137372) * C137341 * C137340) /
              C137082) /
                 C137060 -
             C137773 / C137333);
    const double C1660 = (-(C137474 * C137332 * C137773) / C137082) / C137060;
    const double C1662 =
        (-(C137773 * C137646) / C137082) / C137060 -
        ((C137339 + C137768 * C137337 * C137343) * C137341) / C137333;
    const double C2592 =
        (-(ae * (C137532 * C137538 + C137339 * ce)) / C137082) / C137060 -
        ((C137339 + C137768 * C137337 * C137343) * C137341) / C137333 -
        ((C137532 * C137696 + C137339 * ae) * ce) / C137333 +
        C137532 * ((-(C137696 * ce) / C137082) / C137060 -
                   (ae * C137538) / C137333 - (C137532 * C137773) / C137333);
    const double C2593 = (-(C137332 * C137696 * ce) / C137082) / C137060 -
                         (ae * C137332 * C137538) / C137333 -
                         (C137532 * C137332 * C137773) / C137333;
    const double C5133 = (-(C137474 * C137696 * ce) / C137082) / C137060 -
                         (ae * C137474 * C137538) / C137333 -
                         (C137532 * C137474 * C137773) / C137333;
    const double C21309 = C13595 * C6608;
    const double C21941 = C554 * C6608;
    const double C38269 = C307 * C6608;
    const double C54484 = C47033 * C6608;
    const double C69024 = C63381 * C6608;
    const double C78131 = C47234 * C6608;
    const double C81479 = C30813 * C6608;
    const double C83645 = C47233 * C6608;
    const double C83961 = C30812 * C6608;
    const double C110804 = C13796 * C6608;
    const double C114080 = C92850 * C6608;
    const double C116194 = C13795 * C6608;
    const double C116510 = C92849 * C6608;
    const double C21724 = C139457 * C6922;
    const double C81206 = C139588 * C6922;
    const double C83748 = C30408 * C6922;
    const double C113807 = C139588 * C6922;
    const double C116297 = C92451 * C6922;
    const double C21087 = C13595 * C6442;
    const double C21723 = C554 * C6442;
    const double C38046 = C307 * C6442;
    const double C54270 = C47033 * C6442;
    const double C68845 = C63381 * C6442;
    const double C77905 = C47234 * C6442;
    const double C81205 = C30813 * C6442;
    const double C83429 = C47233 * C6442;
    const double C83747 = C30812 * C6442;
    const double C110578 = C13796 * C6442;
    const double C113806 = C92850 * C6442;
    const double C115978 = C13795 * C6442;
    const double C116296 = C92849 * C6442;
    const double C83099 = C63381 * C26831;
    const double C83749 = C30813 * C26831;
    const double C89072 = C47234 * C26831;
    const double C116298 = C92850 * C26831;
    const double C121528 = C13796 * C26831;
    const double C130308 = C307 * C26831;
    const double C414 = C405 + C406;
    const double C661 = C652 + C653;
    const double C47353 = C47344 + C47345;
    const double C92969 = C92960 + C92961;
    const double C494 = C485 + C486;
    const double C739 = C730 + C731;
    const double C47437 = C47428 + C47429;
    const double C93053 = C93044 + C93045;
    const double C340 = C327 + C328;
    const double C47266 = C47248 + C47249;
    const double C339 = C325 + C326;
    const double C47264 = C47244 + C47245;
    const double C341 = C329 + C330;
    const double C47269 = C47254 + C47255;
    const double C1150 = C1134 + C1135;
    const double C13822 = C13798 + C13799;
    const double C47260 = C47236 + C47237;
    const double C48142 = C48126 + C48127;
    const double C1152 = C1138 + C1139;
    const double C13827 = C13808 + C13809;
    const double C47265 = C47246 + C47247;
    const double C50019 = C50012 + C50013;
    const double C2086 = C2070 + C2071;
    const double C49072 = C49056 + C49057;
    const double C2088 = C2074 + C2075;
    const double C50925 = C50918 + C50919;
    const double C32486 = C32472 + C32473;
    const double C77916 = C77907 + C77908;
    const double C35459 = C35447 + C35448;
    const double C77910 = C77895 + C77896;
    const double C80798 = C80793 + C80794;
    const double C110583 = C110568 + C110569;
    const double C43654 = C43648 + C43649;
    const double C89078 = C89070 + C89071;
    const double C587 = C574 + C575;
    const double C92882 = C92864 + C92865;
    const double C586 = C572 + C573;
    const double C92880 = C92860 + C92861;
    const double C588 = C576 + C577;
    const double C92885 = C92870 + C92871;
    const double C1472 = C1456 + C1457;
    const double C93758 = C93742 + C93743;
    const double C1474 = C1460 + C1461;
    const double C95707 = C95700 + C95701;
    const double C15063 = C15049 + C15050;
    const double C109953 = C109944 + C109945;
    const double C2408 = C2392 + C2393;
    const double C30839 = C30815 + C30816;
    const double C92876 = C92852 + C92853;
    const double C94784 = C94768 + C94769;
    const double C2410 = C2396 + C2397;
    const double C30844 = C30825 + C30826;
    const double C92881 = C92862 + C92863;
    const double C96637 = C96630 + C96631;
    const double C19108 = C19096 + C19097;
    const double C77186 = C77171 + C77172;
    const double C109947 = C109932 + C109933;
    const double C113813 = C113808 + C113809;
    const double C20833 = C20827 + C20828;
    const double C115438 = C115430 + C115431;
    const double C24775 = C24769 + C24770;
    const double C77191 = C77181 + C77182;
    const double C109952 = C109942 + C109943;
    const double C119286 = C119278 + C119279;
    const double C137399 = C137332 * C137396;
    const double C137417 = 2 * C137396;
    const double C137409 = C137396 * ce;
    const double C138082 = C137474 * C137396;
    const double C138399 = C137532 * C137396;
    const double C5921 =
        (2 * C137474 * C137366 + C137474 * (C137366 + C137396 * C137646)) /
        C137060;
    const double C8759 = (C137532 * (C137366 + C137396 * C137646)) / C137060;
    const double C10820 =
        (2 * C137532 * C137366 + C137532 * (C137366 + C137396 * C137768)) /
        C137060;
    const double C137431 = -C137420;
    const double C137953 = C137950 / C137082;
    const double C138719 = C137950 / C137333;
    const double C26977 =
        2 * ((-(C137532 * C138362) / C137082) / C137060 -
             (C138084 * ce) / C137333) -
        ((C138084 + C137947 * C137768) * ce) / C137333 +
        C137532 *
            ((-(C137532 * C137947 * ce) / C137082) / C137060 -
             C138362 / C137333 +
             C137532 * ((-(C137532 * C137474 * C137567) / C137082) / C137060 -
                        C137950 / C137333));
    const double C83100 = C139286 * C26835;
    const double C137975 = C137972 / C137082;
    const double C21307 =
        (-(C137550 * C137646) / C137082) / C137060 - C137543 / C137333 -
        (C137532 * C138193 * ce) / C137333 +
        C137532 *
            (C137532 * ((-(C137567 * C137646) / C137082) / C137060 - C137562) -
             (C138193 * ce) / C137333);
    const double C24357 =
        C137532 *
            ((-2 * C137474 * C137550) / C137333 +
             C137474 * ((-(C137567 * C137646) / C137082) / C137060 - C137562)) -
        ((2 * C138084 + C137474 * C138193) * ce) / C137333;
    const double C20375 = (3 * (C137347 + C137360 * C137646) +
                           C137474 * (2 * C138084 + C137474 * C138193)) /
                          C137060;
    const double C21083 =
        (C137347 + C137360 * C137646 + C138193 * C137768) / C137060;
    const double C24133 =
        (C137532 * (2 * C138084 + C137474 * C138193)) / C137060;
    const double C73226 =
        (2 * C137532 * C138193 + C137532 * (C138193 + C138509 * C137768)) /
        C137060;
    const double C43410 = (3 * (C137347 + C137360 * C137768) +
                           C137532 * (2 * C138405 + C137532 * C138409)) /
                          C137060;
    const double C137398 = C137332 * C137395;
    const double C137415 = -2 * C137395;
    const double C137407 = ae * C137395;
    const double C138097 = C137474 * C137395;
    const double C138426 = C137532 * C137395;
    const double C5918 = (-2 * C137474 * C137365) / C137082 -
                         (C137474 * (C137395 * C137646 + C137365)) / C137082;
    const double C8756 = -(C137532 * (C137395 * C137646 + C137365)) / C137082;
    const double C10817 = (-2 * C137532 * C137365) / C137082 -
                          (C137532 * (C137395 * C137768 + C137365)) / C137082;
    const double C137954 = C137951 / C137333;
    const double C138524 = C137951 / C137082;
    const double C138530 = C138526 / C137082;
    const double C83101 = C63381 * C26833;
    const double C83753 = C30813 * C26833;
    const double C89076 = C47234 * C26833;
    const double C116302 = C92850 * C26833;
    const double C121532 = C13796 * C26833;
    const double C130310 = C307 * C26833;
    const double C137976 = C137973 / C137333;
    const double C138805 = C137973 / C137082;
    const double C138811 = C138807 / C137082;
    const double C21717 =
        (-(C137708 * C137646) / C137082) / C137060 - C137701 / C137333 -
        (ae * C137532 * C138209) / C137333 +
        C137532 *
            (C137532 * ((-(C137725 * C137646) / C137082) / C137060 - C137720) -
             (ae * C138209) / C137333);
    const double C24767 =
        (((-2 * C138099) / C137082 - (C137474 * C138209) / C137082) * ae) /
            C137060 +
        C137532 *
            ((-2 * C137474 * C137708) / C137333 +
             C137474 * ((-(C137725 * C137646) / C137082) / C137060 - C137720));
    const double C20373 =
        (-3 * (C137359 * C137646 + C137346)) / C137082 +
        C137474 * ((-2 * C138099) / C137082 - (C137474 * C138209) / C137082);
    const double C21081 =
        -(C138209 * C137768 + C137359 * C137646 + C137346) / C137082;
    const double C24131 =
        C137532 * ((-2 * C138099) / C137082 - (C137474 * C138209) / C137082);
    const double C73225 = (-2 * C137532 * C138209) / C137082 -
                          (C137532 * (C138531 * C137768 + C138209)) / C137082;
    const double C43408 =
        (-3 * (C137359 * C137768 + C137346)) / C137082 +
        C137532 * ((-2 * C138432) / C137082 - (C137532 * C138436) / C137082);
    const double C137397 = C137332 * C137394;
    const double C137408 = C137394 / C137333;
    const double C137794 = C137474 * C137394;
    const double C137872 = C137532 * C137394;
    const double C852 =
        (-(ae * C137474 * C137365) / C137082) / C137060 -
        (C137474 * C137364) / C137333 - (C137474 * C137366 * ce) / C137333 +
        C137332 * ((-(C137474 * C137360 * ce) / C137082) / C137060 -
                   (ae * C137474 * C137359) / C137333 -
                   (C137332 * C137474 * C137394) / C137333);
    const double C857 =
        (-((C137347 + C137360 * C137646) * ce) / C137082) / C137060 -
        (ae * (C137359 * C137646 + C137346)) / C137333 +
        C137332 *
            ((-(C137394 * C137646) / C137082) / C137060 - C137364 / C137333);
    const double C1788 =
        (-(ae * C137532 * C137365) / C137082) / C137060 -
        (C137532 * C137364) / C137333 - (C137532 * C137366 * ce) / C137333 +
        C137332 * ((-(C137532 * C137360 * ce) / C137082) / C137060 -
                   (ae * C137532 * C137359) / C137333 -
                   (C137332 * C137532 * C137394) / C137333);
    const double C1793 =
        (-((C137347 + C137360 * C137768) * ce) / C137082) / C137060 -
        (ae * (C137359 * C137768 + C137346)) / C137333 +
        C137332 *
            ((-(C137394 * C137768) / C137082) / C137060 - C137364 / C137333);
    const double C5925 = (-2 * C137474 * C137364) / C137333 +
                         C137474 * ((-(C137394 * C137646) / C137082) / C137060 -
                                    C137364 / C137333);
    const double C8763 = C137532 * ((-(C137394 * C137646) / C137082) / C137060 -
                                    C137364 / C137333);
    const double C10824 =
        (-2 * C137532 * C137364) / C137333 +
        C137532 *
            ((-(C137394 * C137768) / C137082) / C137060 - C137364 / C137333);
    const double C137456 = C137332 * C137452;
    const double C138185 = C137452 * C137646;
    const double C138360 = C137474 * C137452;
    const double C138401 = C137452 * C137768;
    const double C138569 = C137474 * C138562;
    const double C138870 = C137532 * C138865;
    const double C137445 = C137435 * ae;
    const double C137443 = C137332 * C137435;
    const double C137442 = C137435 * ce;
    const double C138054 = C137474 * C137435;
    const double C138177 = C137532 * C137435;
    const double C5914 =
        2 * C137474 * C137386 + C137474 * (C137386 + C137435 * C137646);
    const double C8752 = C137532 * (C137386 + C137435 * C137646);
    const double C10813 =
        2 * C137532 * C137386 + C137532 * (C137386 + C137435 * C137768);
    const double C138252 = C138248 + C137437;
    const double C138492 = C138487 + C137437;
    const double C138251 = C138245 + C137434;
    const double C138489 = C138484 + C137434;
    const double C138247 = C137378 + C138241;
    const double C138249 = C138240 * ae;
    const double C138246 = C138240 * ce;
    const double C138388 = C137532 * C138240;
    const double C26830 =
        2 * C137532 * C138048 + C137532 * (C138048 + C138240 * C137768);
    const double C138491 = C137378 + C138486;
    const double C138493 = C138485 * ae;
    const double C138490 = C138485 * ce;
    const double C137455 = C137332 * C137449;
    const double C138202 = C137449 * C137646;
    const double C138371 = C137474 * C137449;
    const double C138428 = C137449 * C137768;
    const double C138566 = C137474 * C138559;
    const double C138750 = C138559 * C137768;
    const double C138869 = C137532 * C138861;
    const double C137454 = C137332 * C137448;
    const double C137799 = C137448 * C137646;
    const double C137877 = C137448 * C137768;
    const double C137949 = C137474 * C137448;
    const double C137971 = C137532 * C137448;
    const double C137663 = C137662 * C137340;
    const double C138238 = C137332 * C137662;
    const double C138546 = C137474 * C137662;
    const double C138651 = C137662 * C137768;
    const double C138685 = C137532 * C137662;
    const double C137785 = C137784 * C137340;
    const double C138301 = C137332 * C137784;
    const double C138636 = C137784 * C137646;
    const double C138755 = C137474 * C137784;
    const double C138846 = C137532 * C137784;
    const double C138570 = C138561 * ae;
    const double C138568 = C137474 * C138561;
    const double C138567 = C138561 * ce;
    const double C138710 = C137532 * C138561;
    const double C73224 =
        2 * C137532 * C138224 + C137532 * (C138224 + C138561 * C137768);
    const double C138769 = C138765 + C138563;
    const double C138768 = C138762 + C138560;
    const double C138764 = C138217 + C138758;
    const double C138766 = C138757 * ae;
    const double C138763 = C138757 * ce;
    const double C138855 = C138733 * ae;
    const double C138852 = C137532 * C138733;
    const double C138850 = C138733 * ce;
    const double C186 =
        (-3 * (C137486 * C137340 + C137480)) / C137082 +
        C137332 * ((-2 * C137488) / C137082 - (C137332 * C137498) / C137082);
    const double C942 =
        -(C137474 * (C137474 * C137498 + C137386 * ce) + C137486 * C137340 +
          C137480 + C137474 * C137386 * ce) /
        C137082;
    const double C943 =
        C137474 * ((-2 * C137488) / C137082 - (C137332 * C137498) / C137082) -
        ((2 * C137355 + C137332 * C137386) * ce) / C137082;
    const double C1872 =
        C137532 * ((-2 * C137488) / C137082 - (C137332 * C137498) / C137082);
    const double C1876 =
        -(C137498 * C137768 + C137486 * C137340 + C137480) / C137082;
    const double C4339 =
        -(C137532 * (C137474 * C137498 + C137386 * ce)) / C137082;
    const double C10875 = (-2 * C137532 * C137498) / C137082 -
                          (C137532 * (C137519 * C137768 + C137498)) / C137082;
    const double C137515 = C137511 / C137082;
    const double C137513 = C137508 / C137082;
    const double C138237 = C137508 / C137333;
    const double C11210 =
        2 * ((-(C137532 * C138067) / C137082) / C137060 -
             (ae * C137488) / C137333) -
        (ae * (C137503 * C137768 + C137488)) / C137333 +
        C137532 *
            ((-(ae * C137532 * C137503) / C137082) / C137060 -
             C138067 / C137333 +
             C137532 * ((-(C137532 * C137332 * C137759) / C137082) / C137060 -
                        C137508 / C137333));
    const double C138050 = C138047 + C137385;
    const double C32602 = C307 * C10876;
    const double C32949 = C30813 * C10876;
    const double C43498 = C13596 * C10876;
    const double C94896 = C92850 * C10876;
    const double C105244 = C47034 * C10876;
    const double C126101 = C63381 * C10876;
    const double C138228 = C137474 * C138222;
    const double C138547 = -2 * C138222;
    const double C138543 = ae * C138222;
    const double C138747 = C137532 * C138222;
    const double C26905 = (-2 * C137532 * C138043) / C137082 -
                          (C137532 * (C138222 * C137768 + C138043)) / C137082;
    const double C43492 =
        (-3 * (C137486 * C137768 + C137480)) / C137082 +
        C137532 * ((-2 * C138450) / C137082 - (C137532 * C138454) / C137082);
    const double C138688 = C138686 / C137333;
    const double C138824 = C138686 / C137082;
    const double C138830 = C138826 / C137082;
    const double C249 =
        (-3 * (C137544 * C137340 + C137538)) / C137082 +
        C137332 * ((-2 * C137546) / C137082 - (C137332 * C137556) / C137082);
    const double C1032 =
        -(C137556 * C137646 + C137544 * C137340 + C137538) / C137082;
    const double C1033 =
        C137474 * ((-2 * C137546) / C137082 - (C137332 * C137556) / C137082);
    const double C1968 =
        -(C137532 * (C137532 * C137556 + C137386 * ce) + C137544 * C137340 +
          C137538 + C137532 * C137386 * ce) /
        C137082;
    const double C1969 =
        C137532 * ((-2 * C137546) / C137082 - (C137332 * C137556) / C137082) -
        ((2 * C137355 + C137332 * C137386) * ce) / C137082;
    const double C4445 =
        -(C137532 * C137474 * C137556 + C137474 * C137386 * ce) / C137082;
    const double C6036 = (-2 * C137474 * C137556) / C137082 -
                         (C137474 * (C137577 * C137646 + C137556)) / C137082;
    const double C8918 = -(C137532 * (C137577 * C137646 + C137556) +
                           (C137386 + C137435 * C137646) * ce) /
                         C137082;
    const double C137573 = C137569 / C137082;
    const double C137571 = C137566 / C137082;
    const double C138262 = C137566 / C137333;
    const double C6202 =
        2 * ((-(C137474 * C138060) / C137082) / C137060 -
             (ae * C137546) / C137333) -
        (ae * (C137561 * C137646 + C137546)) / C137333 +
        C137474 *
            ((-(ae * C137474 * C137561) / C137082) / C137060 -
             C138060 / C137333 +
             C137474 * ((-(C137474 * C137332 * C137683) / C137082) / C137060 -
                        C137566 / C137333));
    const double C6607 = -(C137532 * (C137532 * C138107 + C138048 * ce) +
                           C137474 * C137546 + C137532 * C138048 * ce) /
                         C137082;
    const double C138173 = C138170 + C137385;
    const double C14932 = C13796 * C6037;
    const double C15292 = C554 * C6037;
    const double C20539 = C13596 * C6037;
    const double C48364 = C47234 * C6037;
    const double C53772 = C47034 * C6037;
    const double C64093 = C63381 * C6037;
    const double C18959 = C13796 * C8919;
    const double C19393 = C554 * C8919;
    const double C24361 = C13596 * C8919;
    const double C31625 = C307 * C8919;
    const double C31965 = C30813 * C8919;
    const double C52278 = C47234 * C8919;
    const double C57444 = C47034 * C8919;
    const double C66964 = C63381 * C8919;
    const double C93980 = C92850 * C8919;
    const double C20533 =
        (-3 * (C137544 * C137646 + C137538)) / C137082 +
        C137474 * ((-2 * C138104) / C137082 - (C137474 * C138275) / C137082);
    const double C21305 =
        -(C137532 * (C137532 * C138275 + C138224 * ce) + C137544 * C137646 +
          C137538 + C137532 * C138224 * ce) /
        C137082;
    const double C24355 =
        C137532 * ((-2 * C138104) / C137082 - (C137474 * C138275) / C137082) -
        ((2 * C138041 + C137474 * C138224) * ce) / C137082;
    const double C138383 = C138381 + C138223;
    const double C138598 = C138594 / C137082;
    const double C138596 = C138592 / C137082;
    const double C138754 = C138592 / C137333;
    const double C138473 = C137532 * C138467;
    const double C138694 = ae * C138467;
    const double C138847 = -2 * C138467;
    const double C312 = (3 * (C137595 + C137601 * C137340) +
                         C137332 * (2 * C137603 + C137332 * C137613)) /
                        C137060;
    const double C1120 = (C137474 * (2 * C137603 + C137332 * C137613) +
                          (2 * C137355 + C137332 * C137386) * ae) /
                         C137060;
    const double C1123 = (C137595 + C137601 * C137340 +
                          C137474 * (C137474 * C137613 + C137386 * ae) +
                          C137474 * C137386 * ae) /
                         C137060;
    const double C2056 =
        (C137532 * (2 * C137603 + C137332 * C137613)) / C137060;
    const double C2059 =
        (C137595 + C137601 * C137340 + C137613 * C137768) / C137060;
    const double C4551 =
        (C137532 * (C137474 * C137613 + C137386 * ae)) / C137060;
    const double C10991 =
        (2 * C137532 * C137613 + C137532 * (C137613 + C137633 * C137768)) /
        C137060;
    const double C21614 =
        (-(C137532 * C137601 * ce) / C137082) / C137060 - C137676 / C137333 +
        C137532 * ((-(C137532 * C137679) / C137082) / C137060 - C137608) -
        (ae * (C137532 * (C137532 * C137474 * C137552 + C138223) + C138104 +
               C137532 * C138217 * ce)) /
            C137333 +
        C137474 *
            (C137474 *
                 ((-(C137532 * C137609 * ce) / C137082) / C137060 - C137682 +
                  C137532 *
                      ((-(C137532 * C137683) / C137082) / C137060 - C137625)) -
             (ae * (C137532 * (C137532 * C137552 + C137377) + C137544 +
                    C137532 * C137370 * ce)) /
                 C137333);
    const double C138556 = -C138545;
    const double C137628 = C137623 / C137082;
    const double C138343 = C137623 / C137333;
    const double C6844 =
        C137474 *
            ((-(C137532 * C137618 * ce) / C137082) / C137060 -
             C138060 / C137333 +
             C137532 * ((-(C137532 * C137332 * C137683) / C137082) / C137060 -
                        C137623 / C137333)) -
        (ae * (C137532 * (C137532 * C137561 + C137385) + C137546 +
               C137532 * C137378 * ce)) /
            C137333;
    const double C9156 =
        (-(C137532 * C138060) / C137082) / C137060 - (C137603 * ce) / C137333 -
        (ae * (C137532 * C138107 + C138048 * ce)) / C137333 +
        C137474 *
            (C137474 * ((-(C137532 * C137332 * C137683) / C137082) / C137060 -
                        C137623 / C137333) -
             (ae * (C137532 * C137561 + C137385)) / C137333);
    const double C11101 =
        2 * ((-(C137532 * C138060) / C137082) / C137060 -
             (C137603 * ce) / C137333) -
        ((C137603 + C137618 * C137768) * ce) / C137333 +
        C137532 *
            ((-(C137532 * C137618 * ce) / C137082) / C137060 -
             C138060 / C137333 +
             C137532 * ((-(C137532 * C137332 * C137683) / C137082) / C137060 -
                        C137623 / C137333));
    const double C138051 = C138049 + C137388;
    const double C32480 = C139442 * C10992;
    const double C138229 = C137474 * C138225;
    const double C138552 = 2 * C138225;
    const double C138544 = C138225 * ce;
    const double C27045 =
        (2 * C137532 * C138044 + C137532 * (C138044 + C138225 * C137768)) /
        C137060;
    const double C89067 =
        (3 * (C138044 + C138225 * C137768) +
         C137532 * (2 * C137532 * C138225 +
                    C137532 * (C138225 + C138562 * C137768))) /
        C137060;
    const double C43644 = (3 * (C137595 + C137601 * C137768) +
                           C137532 * (2 * C138418 + C137532 * C138420)) /
                          C137060;
    const double C138661 = C138659 / C137082;
    const double C137659 = C137656 / C137333;
    const double C138046 = C137332 * C137656;
    const double C138215 = C137474 * C137656;
    const double C138332 = C137532 * C137656;
    const double C398 =
        3 * ((-(C137656 * C137340) / C137082) / C137060 - C137651 / C137333) +
        C137332 * ((-2 * C137332 * C137656) / C137333 +
                   C137332 * ((-((C137412 + C137646 * C137413 * C137414) *
                                 C137341 * C137340) /
                               C137082) /
                                  C137060 -
                              C137656 / C137333));
    const double C1234 =
        (-(ae * (C137474 * C137488 + C137355 * ce)) / C137082) / C137060 -
        (C137332 * C137651) / C137333 -
        ((C137474 * C137603 + C137355 * ae) * ce) / C137333 +
        C137474 *
            ((-(C137603 * ce) / C137082) / C137060 - (ae * C137488) / C137333 -
             (C137474 * C137332 * C137656) / C137333);
    const double C1235 =
        (-((C137595 + C137601 * C137340) * ce) / C137082) / C137060 -
        (ae * (C137486 * C137340 + C137480)) / C137333 +
        C137474 *
            ((-(C137656 * C137340) / C137082) / C137060 - C137651 / C137333);
    const double C2168 = C137532 * ((-(C137656 * C137340) / C137082) / C137060 -
                                    C137651 / C137333);
    const double C2172 = (-(C137332 * C137656 * C137768) / C137082) / C137060 -
                         (C137332 * C137651) / C137333;
    const double C4668 = (-(C137532 * C137603 * ce) / C137082) / C137060 -
                         (ae * C137532 * C137488) / C137333 -
                         (C137474 * C137532 * C137332 * C137656) / C137333;
    const double C6148 =
        2 * ((-(C137595 * ce) / C137082) / C137060 - (ae * C137480) / C137333 -
             (C137474 * C137651) / C137333) -
        (ae * (C137474 * C138043 + C137480 + C138041 * ce)) / C137333 -
        ((C137595 + C137474 * C138044 + C138041 * ae) * ce) / C137333 +
        C137474 * ((-(ae * C138043) / C137082) / C137060 - C137651 / C137333 -
                   (C138044 * ce) / C137333 +
                   C137474 * ((-C137605 / C137082) / C137060 - C137493 -
                              (C137474 * C137656) / C137333));
    const double C6766 =
        (-((C137595 + C137601 * C137768) * ce) / C137082) / C137060 -
        (ae * (C137486 * C137768 + C137480)) / C137333 +
        C137474 *
            ((-(C137656 * C137768) / C137082) / C137060 - C137651 / C137333);
    const double C9078 =
        (-(ae * C137532 * C138043) / C137082) / C137060 -
        (C137532 * C137651) / C137333 - (C137532 * C138044 * ce) / C137333 +
        C137474 * ((-(C137532 * C137601 * ce) / C137082) / C137060 -
                   (ae * C137532 * C137486) / C137333 -
                   (C137474 * C137532 * C137656) / C137333);
    const double C11049 =
        (-2 * C137532 * C137651) / C137333 +
        C137532 *
            ((-(C137656 * C137768) / C137082) / C137060 - C137651 / C137333);
    const double C559 = (3 * (C137696 + C137702 * C137340) +
                         C137332 * (2 * C137704 + C137332 * C137714)) /
                        C137060;
    const double C1442 =
        (C137474 * (2 * C137704 + C137332 * C137714)) / C137060;
    const double C1445 =
        (C137696 + C137702 * C137340 + C137714 * C137646) / C137060;
    const double C2378 = (C137532 * (2 * C137704 + C137332 * C137714) +
                          (2 * C137355 + C137332 * C137386) * ae) /
                         C137060;
    const double C2381 = (C137696 + C137702 * C137340 +
                          C137532 * (C137532 * C137714 + C137386 * ae) +
                          C137532 * C137386 * ae) /
                         C137060;
    const double C4901 =
        (C137532 * C137474 * C137714 + C137474 * C137386 * ae) / C137060;
    const double C6254 =
        (2 * C137474 * C137714 + C137474 * (C137714 + C137734 * C137646)) /
        C137060;
    const double C9232 = (C137532 * (C137714 + C137734 * C137646) +
                          (C137386 + C137435 * C137646) * ae) /
                         C137060;
    const double C138858 = -C138845;
    const double C137729 = C137724 / C137082;
    const double C138291 = C137724 / C137333;
    const double C6311 =
        2 * ((-(C137474 * C138067) / C137082) / C137060 -
             (C137704 * ce) / C137333) -
        ((C137704 + C137719 * C137646) * ce) / C137333 +
        C137474 *
            ((-(C137474 * C137719 * ce) / C137082) / C137060 -
             C138067 / C137333 +
             C137474 * ((-(C137474 * C137332 * C137759) / C137082) / C137060 -
                        C137724 / C137333));
    const double C6921 =
        (C137474 * C137704 + C137532 * (C137532 * C138108 + C138048 * ae) +
         C137532 * C138048 * ae) /
        C137060;
    const double C138174 = C138172 + C137388;
    const double C15057 = C139457 * C6255;
    const double C19104 = C139457 * C9233;
    const double C31736 = C139588 * C9233;
    const double C93751 = C139588 * C9233;
    const double C20815 = (3 * (C137696 + C137702 * C137646) +
                           C137474 * (2 * C138105 + C137474 * C138285)) /
                          C137060;
    const double C21715 = (C137696 + C137702 * C137646 +
                           C137532 * (C137532 * C138285 + C138224 * ae) +
                           C137532 * C138224 * ae) /
                          C137060;
    const double C24765 = (C137532 * (2 * C138105 + C137474 * C138285) +
                           (2 * C138041 + C137474 * C138224) * ae) /
                          C137060;
    const double C138384 = C138382 + C138226;
    const double C138622 = C138618 / C137082;
    const double C138474 = C137532 * C138470;
    const double C138853 = 2 * C138470;
    const double C138844 = C138470 * ce;
    const double C137781 = C137778 / C137333;
    const double C138071 = C137332 * C137778;
    const double C138377 = C137474 * C137778;
    const double C138460 = C137532 * C137778;
    const double C723 =
        3 * ((-(C137778 * C137340) / C137082) / C137060 - C137773 / C137333) +
        C137332 * ((-2 * C137332 * C137778) / C137333 +
                   C137332 * ((-((C137412 + C137768 * C137413 * C137414) *
                                 C137341 * C137340) /
                               C137082) /
                                  C137060 -
                              C137778 / C137333));
    const double C1659 = C137474 * ((-(C137778 * C137340) / C137082) / C137060 -
                                    C137773 / C137333);
    const double C1663 = (-(C137332 * C137778 * C137646) / C137082) / C137060 -
                         (C137332 * C137773) / C137333;
    const double C2594 =
        (-(ae * (C137532 * C137546 + C137355 * ce)) / C137082) / C137060 -
        (C137332 * C137773) / C137333 -
        ((C137532 * C137704 + C137355 * ae) * ce) / C137333 +
        C137532 *
            ((-(C137704 * ce) / C137082) / C137060 - (ae * C137546) / C137333 -
             (C137532 * C137332 * C137778) / C137333);
    const double C2595 =
        (-((C137696 + C137702 * C137340) * ce) / C137082) / C137060 -
        (ae * (C137544 * C137340 + C137538)) / C137333 +
        C137532 *
            ((-(C137778 * C137340) / C137082) / C137060 - C137773 / C137333);
    const double C5134 = (-(C137474 * C137704 * ce) / C137082) / C137060 -
                         (ae * C137474 * C137546) / C137333 -
                         (C137532 * C137474 * C137332 * C137778) / C137333;
    const double C6365 = (-2 * C137474 * C137773) / C137333 +
                         C137474 * ((-(C137778 * C137646) / C137082) / C137060 -
                                    C137773 / C137333);
    const double C7077 =
        (-(ae * (C137532 * C138104 + C138041 * ce)) / C137082) / C137060 -
        (C137474 * C137773) / C137333 -
        ((C137532 * C138105 + C138041 * ae) * ce) / C137333 +
        C137532 *
            ((-(C138105 * ce) / C137082) / C137060 - (ae * C138104) / C137333 -
             (C137532 * C137474 * C137778) / C137333);
    const double C9389 =
        (-((C137696 + C137702 * C137646) * ce) / C137082) / C137060 -
        (ae * (C137544 * C137646 + C137538)) / C137333 +
        C137532 *
            ((-(C137778 * C137646) / C137082) / C137060 - C137773 / C137333);
    const double C11262 =
        2 * ((-(C137696 * ce) / C137082) / C137060 - (ae * C137538) / C137333 -
             (C137532 * C137773) / C137333) -
        (ae * (C137532 * C138167 + C137538 + C138165 * ce)) / C137333 -
        ((C137696 + C137532 * C138168 + C138165 * ae) * ce) / C137333 +
        C137532 * ((-(ae * C138167) / C137082) / C137060 - C137773 / C137333 -
                   (C138168 * ce) / C137333 +
                   C137532 * ((-C137706 / C137082) / C137060 - C137551 -
                              (C137532 * C137778) / C137333));
    const double C137389 = C137382 / C137060;
    const double C333 = C307 * C111;
    const double C580 = C554 * C111;
    const double C2940 = C307 * C830;
    const double C3198 = C554 * C830;
    const double C13814 = C13796 * C830;
    const double C16352 = C13596 * C830;
    const double C47252 = C47234 * C830;
    const double C49694 = C47034 * C830;
    const double C1146 = C307 * C834;
    const double C1468 = C554 * C834;
    const double C14322 = C13596 * C834;
    const double C16668 = C13796 * C834;
    const double C47754 = C47034 * C834;
    const double C50010 = C47234 * C834;
    const double C65316 = C63381 * C834;
    const double C3688 = C307 * C1766;
    const double C3946 = C554 * C1766;
    const double C30831 = C30813 * C1766;
    const double C34073 = C13596 * C1766;
    const double C92868 = C92850 * C1766;
    const double C96018 = C47034 * C1766;
    const double C2082 = C307 * C1770;
    const double C2404 = C554 * C1770;
    const double C32087 = C13596 * C1770;
    const double C34704 = C30813 * C1770;
    const double C94102 = C47034 * C1770;
    const double C96628 = C92850 * C1770;
    const double C127380 = C63381 * C1770;
    const double C4562 = C307 * C4225;
    const double C4912 = C554 * C4225;
    const double C17595 = C13796 * C4225;
    const double C18243 = C13596 * C4225;
    const double C33753 = C30813 * C4225;
    const double C50916 = C47234 * C4225;
    const double C51562 = C47034 * C4225;
    const double C78533 = C63381 * C4225;
    const double C95698 = C92850 * C4225;
    const double C15700 = C13796 * C6441;
    const double C16034 = C554 * C6441;
    const double C21089 = C13596 * C6441;
    const double C35454 = C307 * C6441;
    const double C35884 = C30813 * C6441;
    const double C49064 = C47234 * C6441;
    const double C54272 = C47034 * C6441;
    const double C77527 = C63381 * C6441;
    const double C97758 = C92850 * C6441;
    const double C68310 = C63381 * C20371;
    const double C68641 = C554 * C20371;
    const double C68849 = C63381 * C21079;
    const double C69339 = C554 * C21079;
    const double C83431 = C47234 * C21079;
    const double C86770 = C30813 * C21079;
    const double C115980 = C13796 * C21079;
    const double C119280 = C92850 * C21079;
    const double C132558 = C307 * C21079;
    const double C71171 = C63381 * C24129;
    const double C71647 = C554 * C24129;
    const double C82839 = C30813 * C24129;
    const double C86452 = C47234 * C24129;
    const double C115432 = C92850 * C24129;
    const double C118962 = C13796 * C24129;
    const double C134359 = C63381 * C43406;
    const double C134535 = C307 * C43406;
    const double C38270 = C139442 * C6843;
    const double C78132 = C139586 * C6843;
    const double C83646 = C47031 * C6843;
    const double C110805 = C139586 * C6843;
    const double C116195 = C13593 * C6843;
    const double C41254 = C139442 * C9155;
    const double C81068 = C139586 * C9155;
    const double C86667 = C47031 * C9155;
    const double C113669 = C139586 * C9155;
    const double C119177 = C13593 * C9155;
    const double C43800 = C139442 * C11100;
    const double C89225 = C47031 * C11100;
    const double C121679 = C13593 * C11100;
    const double C138227 = C138220 / C137060;
    const double C20906 = C139457 * C6310;
    const double C82918 = C30408 * C6310;
    const double C115511 = C92451 * C6310;
    const double C138472 = C138465 / C137060;
    const double C138513 = C138506 + C138511;
    const double C88845 = (3 * (C138084 + C137947 * C137768) +
                           C137532 * (2 * C138717 + C137532 * C138724)) /
                          C137060;
    const double C138794 = C138787 + C138792;
    const double C138537 = C138534 / C137082;
    const double C88844 =
        (-3 * (C137948 * C137768 + C138099)) / C137082 +
        C137532 * ((-2 * C138736) / C137082 - (C137532 * C138742) / C137082);
    const double C138818 = C138815 / C137082;
    const double C137525 = C137522 / C137082;
    const double C43491 =
        (-3 * (C137503 * C137768 + C137488)) / C137082 +
        C137532 * ((-2 * C138441) / C137082 - (C137532 * C138445) / C137082);
    const double C138837 = C138834 / C137082;
    const double C137583 = C137580 / C137082;
    const double C20532 =
        (-3 * (C137561 * C137646 + C137546)) / C137082 +
        C137474 * ((-2 * C138107) / C137082 - (C137474 * C138267) / C137082);
    const double C138605 = C138602 / C137082;
    const double C137639 = C137626 + C137636;
    const double C43643 = (3 * (C137603 + C137618 * C137768) +
                           C137532 * (2 * C138422 + C137532 * C138424)) /
                          C137060;
    const double C138803 = C138801 + C138802;
    const double C137740 = C137727 + C137737;
    const double C20814 = (3 * (C137704 + C137719 * C137646) +
                           C137474 * (2 * C138108 + C137474 * C138296)) /
                          C137060;
    const double C138630 = C138620 + C138627;
    const double C137499 = -C137497;
    const double C134423 = C139286 * C43494;
    const double C138194 = -C138192;
    const double C137521 = -C137518;
    const double C138510 = -C138508;
    const double C138781 = -C138780;
    const double C1151 = C1136 + C1137;
    const double C13824 = C13802 + C13803;
    const double C47262 = C47240 + C47241;
    const double C48144 = C48130 + C48131;
    const double C2087 = C2072 + C2073;
    const double C49074 = C49060 + C49061;
    const double C32485 = C32470 + C32471;
    const double C77914 = C77903 + C77904;
    const double C35458 = C35445 + C35446;
    const double C77912 = C77899 + C77900;
    const double C80796 = C80789 + C80790;
    const double C110585 = C110572 + C110573;
    const double C137614 = -C137612;
    const double C83436 = C139586 * C21415;
    const double C115985 = C139586 * C21415;
    const double C132561 = C139442 * C21415;
    const double C138210 = -C138208;
    const double C89077 = C139586 * C27047;
    const double C121533 = C139586 * C27047;
    const double C130311 = C139442 * C27047;
    const double C134538 = C139442 * C43646;
    const double C38055 = C38048 + C38049;
    const double C77913 = C77901 + C77902;
    const double C83439 = C83433 + C83434;
    const double C110586 = C110574 + C110575;
    const double C41045 = C41040 + C41041;
    const double C80795 = C80787 + C80788;
    const double C86460 = C86454 + C86455;
    const double C113396 = C113388 + C113389;
    const double C43655 = C43650 + C43651;
    const double C89080 = C89074 + C89075;
    const double C137635 = -C137632;
    const double C138533 = -C138529;
    const double C138647 = -C138646;
    const double C138679 = C138678 / C137082;
    const double C137557 = -C137555;
    const double C68430 = C139286 * C20535;
    const double C138410 = -C138408;
    const double C137579 = -C137576;
    const double C138520 = -C138519;
    const double C138723 = C138721 / C137082;
    const double C138791 = -C138789;
    const double C495 = C487 + C488;
    const double C47438 = C47430 + C47431;
    const double C1359 = C1349 + C1350;
    const double C13997 = C13986 + C13987;
    const double C47435 = C47424 + C47425;
    const double C48367 = C48360 + C48361;
    const double C32720 = C32710 + C32711;
    const double C78135 = C78129 + C78130;
    const double C2294 = C2281 + C2282;
    const double C49297 = C49290 + C49291;
    const double C35751 = C35744 + C35745;
    const double C78133 = C78125 + C78126;
    const double C81069 = C81065 + C81066;
    const double C110806 = C110798 + C110799;
    const double C138276 = -C138274;
    const double C138338 = -C138337;
    const double C1358 = C1346 + C1347;
    const double C13998 = C13988 + C13989;
    const double C47436 = C47426 + C47427;
    const double C50228 = C50224 + C50225;
    const double C1360 = C1353 + C1354;
    const double C14934 = C14926 + C14927;
    const double C48368 = C48362 + C48363;
    const double C48366 = C48358 + C48359;
    const double C2296 = C2289 + C2290;
    const double C51134 = C51130 + C51131;
    const double C137686 = -C137685;
    const double C138266 = C138264 / C137082;
    const double C138344 = C138342 / C137082;
    const double C138601 = -C138597;
    const double C138662 = -C138660;
    const double C1473 = C1458 + C1459;
    const double C93760 = C93746 + C93747;
    const double C15062 = C15047 + C15048;
    const double C109951 = C109940 + C109941;
    const double C2409 = C2394 + C2395;
    const double C30841 = C30819 + C30820;
    const double C92878 = C92856 + C92857;
    const double C94786 = C94772 + C94773;
    const double C19107 = C19094 + C19095;
    const double C77188 = C77175 + C77176;
    const double C109949 = C109936 + C109937;
    const double C113811 = C113804 + C113805;
    const double C137715 = -C137713;
    const double C68644 = C139457 * C20817;
    const double C138437 = -C138435;
    const double C20834 = C20829 + C20830;
    const double C115440 = C115434 + C115435;
    const double C21730 = C21725 + C21726;
    const double C81209 = C81201 + C81202;
    const double C113810 = C113802 + C113803;
    const double C116306 = C116300 + C116301;
    const double C24776 = C24771 + C24772;
    const double C77189 = C77177 + C77178;
    const double C109950 = C109938 + C109939;
    const double C119288 = C119282 + C119283;
    const double C137736 = -C137733;
    const double C138614 = -C138613;
    const double C138741 = C138739 / C137082;
    const double C138814 = -C138810;
    const double C662 = C654 + C655;
    const double C92970 = C92962 + C92963;
    const double C15180 = C15170 + C15171;
    const double C110062 = C110056 + C110057;
    const double C1578 = C1565 + C1566;
    const double C93873 = C93866 + C93867;
    const double C2510 = C2499 + C2500;
    const double C30930 = C30919 + C30920;
    const double C92967 = C92956 + C92957;
    const double C94898 = C94890 + C94891;
    const double C19250 = C19243 + C19244;
    const double C77299 = C77291 + C77292;
    const double C110060 = C110052 + C110053;
    const double C113948 = C113944 + C113945;
    const double C138286 = -C138284;
    const double C138455 = -C138453;
    const double C1580 = C1573 + C1574;
    const double C95812 = C95808 + C95809;
    const double C2511 = C2502 + C2503;
    const double C30931 = C30921 + C30922;
    const double C92968 = C92958 + C92959;
    const double C96742 = C96738 + C96739;
    const double C2512 = C2505 + C2506;
    const double C32952 = C32945 + C32946;
    const double C94900 = C94894 + C94895;
    const double C94899 = C94892 + C94893;
    const double C137762 = -C137761;
    const double C138295 = C138293 / C137082;
    const double C138444 = C138442 / C137082;
    const double C138626 = -C138623;
    const double C138833 = -C138829;
    const double C14349 = C14330 + C14331;
    const double C14341 = C14314 + C14315;
    const double C14338 = C14308 + C14309;
    const double C14336 = C14304 + C14305;
    const double C14470 = C14458 + C14459;
    const double C14468 = C14454 + C14455;
    const double C14467 = C14452 + C14453;
    const double C14592 = C14580 + C14581;
    const double C14591 = C14578 + C14579;
    const double C14588 = C14572 + C14573;
    const double C18262 = C18251 + C18252;
    const double C18403 = C18395 + C18396;
    const double C18546 = C18539 + C18540;
    const double C20387 = C20379 + C20380;
    const double C20541 = C20537 + C20538;
    const double C24145 = C24137 + C24138;
    const double C24363 = C24359 + C24360;
    const double C32114 = C32095 + C32096;
    const double C32106 = C32079 + C32080;
    const double C32103 = C32073 + C32074;
    const double C32101 = C32069 + C32070;
    const double C32238 = C32229 + C32230;
    const double C32234 = C32221 + C32222;
    const double C32231 = C32215 + C32216;
    const double C32357 = C32345 + C32346;
    const double C32355 = C32341 + C32342;
    const double C32354 = C32339 + C32340;
    const double C43422 = C43414 + C43415;
    const double C43500 = C43496 + C43497;
    const double C14337 = C14306 + C14307;
    const double C14466 = C14450 + C14451;
    const double C14589 = C14574 + C14575;
    const double C32102 = C32071 + C32072;
    const double C32232 = C32217 + C32218;
    const double C32353 = C32337 + C32338;
    const double C47769 = C47738 + C47739;
    const double C47898 = C47882 + C47883;
    const double C48021 = C48006 + C48007;
    const double C94117 = C94086 + C94087;
    const double C94247 = C94232 + C94233;
    const double C94368 = C94352 + C94353;
    const double C63894 = C63880 + C63881;
    const double C63888 = C63868 + C63869;
    const double C63886 = C63864 + C63865;
    const double C63885 = C63862 + C63863;
    const double C63884 = C63860 + C63861;
    const double C64000 = C63991 + C63992;
    const double C63998 = C63987 + C63988;
    const double C63997 = C63985 + C63986;
    const double C64098 = C64087 + C64088;
    const double C64097 = C64083 + C64084;
    const double C64096 = C64081 + C64082;
    const double C64095 = C64078 + C64079;
    const double C66728 = C66718 + C66719;
    const double C66724 = C66710 + C66711;
    const double C66844 = C66836 + C66837;
    const double C66967 = C66954 + C66955;
    const double C66966 = C66949 + C66950;
    const double C77539 = C77523 + C77524;
    const double C77535 = C77515 + C77516;
    const double C77534 = C77513 + C77514;
    const double C77533 = C77511 + C77512;
    const double C77676 = C77669 + C77670;
    const double C77673 = C77658 + C77659;
    const double C77672 = C77652 + C77653;
    const double C77792 = C77784 + C77785;
    const double C77791 = C77782 + C77783;
    const double C77790 = C77780 + C77781;
    const double C88852 = C88848 + C88849;
    const double C88929 = C88925 + C88926;
    const double C47781 = C47762 + C47763;
    const double C47773 = C47746 + C47747;
    const double C47770 = C47740 + C47741;
    const double C47768 = C47736 + C47737;
    const double C47902 = C47890 + C47891;
    const double C47900 = C47886 + C47887;
    const double C47899 = C47884 + C47885;
    const double C48024 = C48012 + C48013;
    const double C48023 = C48010 + C48011;
    const double C48020 = C48004 + C48005;
    const double C51581 = C51570 + C51571;
    const double C51722 = C51714 + C51715;
    const double C51865 = C51858 + C51859;
    const double C53628 = C53620 + C53621;
    const double C53774 = C53770 + C53771;
    const double C57236 = C57228 + C57229;
    const double C57446 = C57442 + C57443;
    const double C94129 = C94110 + C94111;
    const double C94121 = C94094 + C94095;
    const double C94118 = C94088 + C94089;
    const double C94116 = C94084 + C94085;
    const double C94253 = C94244 + C94245;
    const double C94249 = C94236 + C94237;
    const double C94246 = C94230 + C94231;
    const double C94372 = C94360 + C94361;
    const double C94370 = C94356 + C94357;
    const double C94369 = C94354 + C94355;
    const double C105172 = C105164 + C105165;
    const double C105246 = C105242 + C105243;
    const double C106 =
        (C137101 / C137087 - (0 * de) / C137082) / C137087 + (0 * ce) / C137082;
    const double C2704 = C137101 / C137087 - (0 * de) / C137082;
    const double C5232 = C137101 / C137087 + (0 * ce) / C137082;
    const double C137103 = C137100 / C137082;
    const double C139589 = C139550 - C139576;
    const double C139590 = C139554 - C139578;
    const double C5979 =
        (C137202 / C137087 - (0 * de) / C137082) / C137087 + (0 * ce) / C137082;
    const double C7237 = C137202 / C137087 - (0 * de) / C137082;
    const double C137201 = C137198 / C137082;
    const double C139591 = C139557 - C139580;
    const double C139592 = C139564 - C139581;
    const double C10934 =
        (C137248 / C137087 - (0 * de) / C137082) / C137087 + (0 * ce) / C137082;
    const double C12390 = C137248 / C137087 - (0 * de) / C137082;
    const double C137247 = C137244 / C137082;
    const double C139593 = C139559 - C139583;
    const double C139594 = C139568 - C139584;
    const double C401 = C337 * C181;
    const double C481 = C337 * C244;
    const double C1240 = C337 * C934;
    const double C2278 = C337 * C1960;
    const double C3021 = C337 * C2783;
    const double C3851 = C337 * C3607;
    const double C5532 = C337 * C5307;
    const double C9841 = C337 * C9616;
    const double C417 = C413 * C139328;
    const double C1241 = C413 * C823;
    const double C3022 = C413 * C139560;
    const double C5533 = C413 * C5228;
    const double C497 = C493 * C139339;
    const double C2279 = C493 * C1761;
    const double C3852 = C493 * C139561;
    const double C9842 = C493 * C9466;
    const double C32490 = C32484 * C821;
    const double C38037 = C32484 * C139300;
    const double C39975 = C32484 * C139552;
    const double C41943 = C32484 * C5225;
    const double C32591 = C32483 * C181;
    const double C35594 = C32483 * C2783;
    const double C38036 = C32483 * C5913;
    const double C38156 = C32483 * C5307;
    const double C42942 = C32483 * C934;
    const double C32607 = C32604 * C139328;
    const double C35595 = C32604 * C139560;
    const double C38157 = C32604 * C5228;
    const double C42943 = C32604 * C823;
    const double C13831 = C13816 + C13817;
    const double C13828 = C13810 + C13811;
    const double C13826 = C13806 + C13807;
    const double C13825 = C13804 + C13805;
    const double C13823 = C13800 + C13801;
    const double C13915 = C13906 + C13907;
    const double C13912 = C13900 + C13901;
    const double C14000 = C13992 + C13993;
    const double C13999 = C13990 + C13991;
    const double C13996 = C13984 + C13985;
    const double C14712 = C14698 + C14699;
    const double C14710 = C14694 + C14695;
    const double C14936 = C14930 + C14931;
    const double C14935 = C14928 + C14929;
    const double C15710 = C15696 + C15697;
    const double C15708 = C15692 + C15693;
    const double C15933 = C15926 + C15927;
    const double C16677 = C16670 + C16671;
    const double C16886 = C16882 + C16883;
    const double C17604 = C17597 + C17598;
    const double C17813 = C17809 + C17810;
    const double C110589 = C110580 + C110581;
    const double C110587 = C110576 + C110577;
    const double C110584 = C110570 + C110571;
    const double C110582 = C110566 + C110567;
    const double C110696 = C110688 + C110689;
    const double C110808 = C110802 + C110803;
    const double C110807 = C110800 + C110801;
    const double C113399 = C113394 + C113395;
    const double C113397 = C113390 + C113391;
    const double C113670 = C113666 + C113667;
    const double C115988 = C115982 + C115983;
    const double C118970 = C118964 + C118965;
    const double C121536 = C121530 + C121531;
    const double C121534 = C121526 + C121527;
    const double C648 = C584 * C181;
    const double C726 = C584 * C244;
    const double C1562 = C584 * C934;
    const double C2600 = C584 * C1960;
    const double C3279 = C584 * C2783;
    const double C4108 = C584 * C3607;
    const double C5770 = C584 * C5307;
    const double C10079 = C584 * C9616;
    const double C664 = C660 * C139328;
    const double C1563 = C660 * C823;
    const double C3280 = C660 * C139560;
    const double C5771 = C660 * C5228;
    const double C742 = C738 * C139339;
    const double C2601 = C738 * C1761;
    const double C4109 = C738 * C139561;
    const double C10080 = C738 * C9466;
    const double C15067 = C15061 * C821;
    const double C20090 = C15061 * C5225;
    const double C20820 = C15061 * C139300;
    const double C22632 = C15061 * C139552;
    const double C15281 = C15060 * C244;
    const double C19383 = C15060 * C3607;
    const double C20819 = C15060 * C5913;
    const double C21936 = C15060 * C1960;
    const double C26753 = C15060 * C9616;
    const double C15297 = C15294 * C139339;
    const double C19384 = C15294 * C139561;
    const double C21937 = C15294 * C1761;
    const double C26754 = C15294 * C9466;
    const double C30848 = C30833 + C30834;
    const double C30845 = C30827 + C30828;
    const double C30843 = C30823 + C30824;
    const double C30842 = C30821 + C30822;
    const double C30840 = C30817 + C30818;
    const double C30933 = C30925 + C30926;
    const double C30932 = C30923 + C30924;
    const double C30929 = C30917 + C30918;
    const double C31016 = C31007 + C31008;
    const double C31013 = C31001 + C31002;
    const double C31745 = C31731 + C31732;
    const double C31743 = C31727 + C31728;
    const double C31858 = C31851 + C31852;
    const double C32839 = C32825 + C32826;
    const double C32837 = C32821 + C32822;
    const double C32953 = C32947 + C32948;
    const double C32951 = C32943 + C32944;
    const double C33762 = C33755 + C33756;
    const double C33867 = C33863 + C33864;
    const double C34713 = C34706 + C34707;
    const double C34818 = C34814 + C34815;
    const double C77192 = C77183 + C77184;
    const double C77190 = C77179 + C77180;
    const double C77187 = C77173 + C77174;
    const double C77185 = C77169 + C77170;
    const double C77301 = C77295 + C77296;
    const double C77300 = C77293 + C77294;
    const double C77409 = C77401 + C77402;
    const double C81212 = C81207 + C81208;
    const double C81210 = C81203 + C81204;
    const double C81347 = C81343 + C81344;
    const double C82847 = C82841 + C82842;
    const double C82845 = C82837 + C82838;
    const double C83757 = C83751 + C83752;
    const double C86778 = C86772 + C86773;
    const double C86776 = C86768 + C86769;
    const double C14313 = C139575 * C837;
    const double C16351 = C13591 * C837;
    const double C47745 = C139575 * C837;
    const double C49693 = C47029 * C837;
    const double C65309 = C139286 * C837;
    const double C14329 = C139575 * C845;
    const double C14321 = C13591 * C845;
    const double C47761 = C139575 * C845;
    const double C47753 = C47029 * C845;
    const double C63873 = C139286 * C845;
    const double C32078 = C139575 * C1773;
    const double C34072 = C13591 * C1773;
    const double C79436 = C139286 * C1773;
    const double C94093 = C139575 * C1773;
    const double C96017 = C47029 * C1773;
    const double C32094 = C139575 * C1781;
    const double C32086 = C13591 * C1781;
    const double C77520 = C139286 * C1781;
    const double C94109 = C139575 * C1781;
    const double C94101 = C47029 * C1781;
    const double C18250 = C139575 * C4228;
    const double C18242 = C13591 * C4228;
    const double C51569 = C139575 * C4228;
    const double C51561 = C47029 * C4228;
    const double C66707 = C139286 * C4228;
    const double C38047 = C139442 * C6688;
    const double C77906 = C139586 * C6688;
    const double C83430 = C47031 * C6688;
    const double C110579 = C139586 * C6688;
    const double C115979 = C13593 * C6688;
    const double C41039 = C139442 * C9000;
    const double C80792 = C139586 * C9000;
    const double C86451 = C47031 * C9000;
    const double C113393 = C139586 * C9000;
    const double C118961 = C13593 * C9000;
    const double C1579 = C1568 + C1569;
    const double C31859 = C31853 + C31854;
    const double C93874 = C93868 + C93869;
    const double C2295 = C2284 + C2285;
    const double C15934 = C15928 + C15929;
    const double C49298 = C49292 + C49293;
    const double C5032 = C5025 + C5026;
    const double C31857 = C31849 + C31850;
    const double C36030 = C36026 + C36027;
    const double C93872 = C93864 + C93865;
    const double C97904 = C97900 + C97901;
    const double C4798 = C4791 + C4792;
    const double C15932 = C15924 + C15925;
    const double C18961 = C18957 + C18958;
    const double C49296 = C49288 + C49289;
    const double C52280 = C52276 + C52277;
    const double C1154 = C1142 + C1143;
    const double C1476 = C1464 + C1465;
    const double C14715 = C14704 + C14705;
    const double C14711 = C14696 + C14697;
    const double C31748 = C31737 + C31738;
    const double C48147 = C48136 + C48137;
    const double C48143 = C48128 + C48129;
    const double C93763 = C93752 + C93753;
    const double C2090 = C2078 + C2079;
    const double C2412 = C2400 + C2401;
    const double C15713 = C15702 + C15703;
    const double C32842 = C32831 + C32832;
    const double C32838 = C32823 + C32824;
    const double C49077 = C49066 + C49067;
    const double C94789 = C94778 + C94779;
    const double C94785 = C94770 + C94771;
    const double C4566 = C4558 + C4559;
    const double C4916 = C4908 + C4909;
    const double C15709 = C15694 + C15695;
    const double C18688 = C18681 + C18682;
    const double C31744 = C31729 + C31730;
    const double C35893 = C35886 + C35887;
    const double C49073 = C49058 + C49059;
    const double C52007 = C52000 + C52001;
    const double C93759 = C93744 + C93745;
    const double C97767 = C97760 + C97761;
    const double C331 = C307 * C120;
    const double C578 = C554 * C120;
    const double C13820 = C13795 * C120;
    const double C30837 = C30812 * C120;
    const double C47258 = C47233 * C120;
    const double C92874 = C92849 * C120;
    const double C1140 = C307 * C839;
    const double C1462 = C554 * C839;
    const double C13812 = C13796 * C839;
    const double C14316 = C13596 * C839;
    const double C16354 = C13595 * C839;
    const double C16674 = C13795 * C839;
    const double C33759 = C30812 * C839;
    const double C47250 = C47234 * C839;
    const double C47748 = C47034 * C839;
    const double C49696 = C47033 * C839;
    const double C50016 = C47233 * C839;
    const double C65310 = C63381 * C839;
    const double C95704 = C92849 * C839;
    const double C1144 = C307 * C848;
    const double C1466 = C554 * C848;
    const double C14332 = C13595 * C848;
    const double C14324 = C13596 * C848;
    const double C14708 = C13795 * C848;
    const double C14700 = C13796 * C848;
    const double C31741 = C30812 * C848;
    const double C47764 = C47033 * C848;
    const double C47756 = C47034 * C848;
    const double C48140 = C47233 * C848;
    const double C48132 = C47234 * C848;
    const double C63874 = C63381 * C848;
    const double C93756 = C92849 * C848;
    const double C2076 = C307 * C1775;
    const double C2398 = C554 * C1775;
    const double C17601 = C13795 * C1775;
    const double C30829 = C30813 * C1775;
    const double C32081 = C13596 * C1775;
    const double C34075 = C13595 * C1775;
    const double C34710 = C30812 * C1775;
    const double C50922 = C47233 * C1775;
    const double C79437 = C63381 * C1775;
    const double C92866 = C92850 * C1775;
    const double C94096 = C47034 * C1775;
    const double C96020 = C47033 * C1775;
    const double C96634 = C92849 * C1775;
    const double C2080 = C307 * C1784;
    const double C2402 = C554 * C1784;
    const double C15706 = C13795 * C1784;
    const double C32097 = C13595 * C1784;
    const double C32089 = C13596 * C1784;
    const double C32835 = C30812 * C1784;
    const double C32827 = C30813 * C1784;
    const double C49070 = C47233 * C1784;
    const double C77525 = C63381 * C1784;
    const double C94112 = C47033 * C1784;
    const double C94104 = C47034 * C1784;
    const double C94782 = C92849 * C1784;
    const double C94774 = C92850 * C1784;
    const double C4560 = C307 * C4231;
    const double C4910 = C554 * C4231;
    const double C15698 = C13796 * C4231;
    const double C18253 = C13595 * C4231;
    const double C18245 = C13596 * C4231;
    const double C18685 = C13795 * C4231;
    const double C31733 = C30813 * C4231;
    const double C35890 = C30812 * C4231;
    const double C49062 = C47234 * C4231;
    const double C51572 = C47033 * C4231;
    const double C51564 = C47034 * C4231;
    const double C52004 = C47233 * C4231;
    const double C66712 = C63381 * C4231;
    const double C93748 = C92850 * C4231;
    const double C97764 = C92849 * C4231;
    const double C21834 = C139457 * C7000;
    const double C81346 = C139588 * C7000;
    const double C83860 = C30408 * C7000;
    const double C113947 = C139588 * C7000;
    const double C116409 = C92451 * C7000;
    const double C24880 = C139457 * C9312;
    const double C77298 = C139588 * C9312;
    const double C86881 = C30408 * C9312;
    const double C110059 = C139588 * C9312;
    const double C119391 = C92451 * C9312;
    const double C20463 = C13595 * C5982;
    const double C20905 = C554 * C5982;
    const double C53700 = C47033 * C5982;
    const double C63989 = C63381 * C5982;
    const double C82917 = C30812 * C5982;
    const double C115510 = C92849 * C5982;
    const double C21203 = C13595 * C6528;
    const double C21833 = C554 * C6528;
    const double C38163 = C307 * C6528;
    const double C54382 = C47033 * C6528;
    const double C68937 = C63381 * C6528;
    const double C78019 = C47234 * C6528;
    const double C81345 = C30813 * C6528;
    const double C83539 = C47233 * C6528;
    const double C83859 = C30812 * C6528;
    const double C110692 = C13796 * C6528;
    const double C113946 = C92850 * C6528;
    const double C116088 = C13795 * C6528;
    const double C116408 = C92849 * C6528;
    const double C24253 = C13595 * C8840;
    const double C24879 = C554 * C8840;
    const double C41151 = C307 * C8840;
    const double C57340 = C47033 * C8840;
    const double C66838 = C63381 * C8840;
    const double C77297 = C30813 * C8840;
    const double C80929 = C47234 * C8840;
    const double C86560 = C47233 * C8840;
    const double C86880 = C30812 * C8840;
    const double C110058 = C92850 * C8840;
    const double C113530 = C13796 * C8840;
    const double C119070 = C13795 * C8840;
    const double C119390 = C92849 * C8840;
    const double C43574 = C13595 * C10937;
    const double C43799 = C307 * C10937;
    const double C88999 = C63381 * C10937;
    const double C89224 = C47233 * C10937;
    const double C105316 = C47033 * C10937;
    const double C121678 = C13795 * C10937;
    const double C14319 = C13591 * C853;
    const double C14311 = C139575 * C853;
    const double C47751 = C47029 * C853;
    const double C47743 = C139575 * C853;
    const double C63867 = C139286 * C853;
    const double C14327 = C13591 * C856;
    const double C47759 = C47029 * C856;
    const double C63871 = C139286 * C856;
    const double C32084 = C13591 * C1789;
    const double C32076 = C139575 * C1789;
    const double C77518 = C139286 * C1789;
    const double C94099 = C47029 * C1789;
    const double C94091 = C139575 * C1789;
    const double C32092 = C13591 * C1792;
    const double C77522 = C139286 * C1792;
    const double C94107 = C47029 * C1792;
    const double C18248 = C13591 * C4235;
    const double C51567 = C47029 * C4235;
    const double C66709 = C139286 * C4235;
    const double C408 = C139442 * C397;
    const double C13909 = C13593 * C397;
    const double C47347 = C47031 * C397;
    const double C1244 = C139442 * C1233;
    const double C13903 = C139586 * C1233;
    const double C14819 = C13593 * C1233;
    const double C47341 = C139586 * C1233;
    const double C48251 = C47031 * C1233;
    const double C2178 = C139442 * C2167;
    const double C15815 = C13593 * C2167;
    const double C49179 = C47031 * C2167;
    const double C32599 = C139442 * C2171;
    const double C78022 = C47031 * C2171;
    const double C110695 = C13593 * C2171;
    const double C35598 = C139442 * C4667;
    const double C78018 = C139586 * C4667;
    const double C80932 = C47031 * C4667;
    const double C110691 = C139586 * C4667;
    const double C113533 = C13593 * C4667;
    const double C733 = C139457 * C722;
    const double C31010 = C30408 * C722;
    const double C93047 = C92451 * C722;
    const double C1672 = C139457 * C1660;
    const double C31962 = C30408 * C1660;
    const double C93977 = C92451 * C1660;
    const double C15287 = C139457 * C1662;
    const double C77408 = C30408 * C1662;
    const double C110169 = C92451 * C1662;
    const double C2604 = C139457 * C2593;
    const double C31004 = C139588 * C2593;
    const double C33056 = C30408 * C2593;
    const double C93041 = C139588 * C2593;
    const double C95003 = C92451 * C2593;
    const double C19387 = C139457 * C5133;
    const double C77404 = C139588 * C5133;
    const double C81482 = C30408 * C5133;
    const double C110165 = C139588 * C5133;
    const double C114083 = C92451 * C5133;
    const double C21313 = C21309 + C21310;
    const double C54488 = C54484 + C54485;
    const double C69033 = C69024 + C69025;
    const double C21095 = C21087 + C21088;
    const double C21729 = C21723 + C21724;
    const double C54278 = C54270 + C54271;
    const double C68853 = C68845 + C68846;
    const double C81211 = C81205 + C81206;
    const double C83755 = C83747 + C83748;
    const double C113812 = C113806 + C113807;
    const double C116304 = C116296 + C116297;
    const double C418 = C414 * C139328;
    const double C1249 = C414 * C823;
    const double C3026 = C414 * C139560;
    const double C5537 = C414 * C5228;
    const double C665 = C661 * C139328;
    const double C1571 = C661 * C823;
    const double C3284 = C661 * C139560;
    const double C5775 = C661 * C5228;
    const double C498 = C494 * C139339;
    const double C2287 = C494 * C1761;
    const double C3856 = C494 * C139561;
    const double C9846 = C494 * C9466;
    const double C743 = C739 * C139339;
    const double C2609 = C739 * C1761;
    const double C4113 = C739 * C139561;
    const double C10084 = C739 * C9466;
    const double C404 = C339 * C181;
    const double C484 = C339 * C244;
    const double C1248 = C339 * C934;
    const double C2286 = C339 * C1960;
    const double C3025 = C339 * C2783;
    const double C3855 = C339 * C3607;
    const double C5536 = C339 * C5307;
    const double C9845 = C339 * C9616;
    const double C409 = C341 * C181;
    const double C489 = C341 * C244;
    const double C3031 = C341 * C2783;
    const double C3861 = C341 * C3607;
    const double C5542 = C341 * C5307;
    const double C9851 = C341 * C9616;
    const double C1242 = C1150 * C935;
    const double C1351 = C1150 * C244;
    const double C3023 = C1150 * C2784;
    const double C4790 = C1150 * C3607;
    const double C5534 = C1150 * C5308;
    const double C11856 = C1150 * C9616;
    const double C1250 = C1152 * C935;
    const double C1348 = C1152 * C244;
    const double C3027 = C1152 * C2784;
    const double C4795 = C1152 * C3607;
    const double C5538 = C1152 * C5308;
    const double C11860 = C1152 * C9616;
    const double C2176 = C2086 * C181;
    const double C2280 = C2086 * C1961;
    const double C3853 = C2086 * C3608;
    const double C4674 = C2086 * C2783;
    const double C8273 = C2086 * C5307;
    const double C9843 = C2086 * C9617;
    const double C30741 = C2086 * C244;
    const double C31515 = C2086 * C934;
    const double C32463 = C2086 * C827;
    const double C32712 = C2086 * C1960;
    const double C34598 = C2086 * C3607;
    const double C38038 = C2086 * C5913;
    const double C39976 = C2086 * C137101;
    const double C42150 = C2086 * C9616;
    const double C2179 = C2088 * C181;
    const double C2288 = C2088 * C1961;
    const double C3857 = C2088 * C3608;
    const double C4679 = C2088 * C2783;
    const double C8277 = C2088 * C5307;
    const double C9847 = C2088 * C9617;
    const double C30744 = C2088 * C244;
    const double C32467 = C2088 * C827;
    const double C34604 = C2088 * C3607;
    const double C39980 = C2088 * C137101;
    const double C42156 = C2088 * C9616;
    const double C32600 = C32486 * C181;
    const double C38043 = C32486 * C5913;
    const double C38162 = C32486 * C5307;
    const double C46570 = C32486 * C2783;
    const double C134002 = C32486 * C934;
    const double C35596 = C35459 * C2784;
    const double C38044 = C35459 * C5913;
    const double C38158 = C35459 * C5308;
    const double C42944 = C35459 * C935;
    const double C43656 = C43654 * C5913;
    const double C43726 = C43654 * C181;
    const double C130394 = C43654 * C5307;
    const double C136752 = C43654 * C2783;
    const double C651 = C586 * C181;
    const double C729 = C586 * C244;
    const double C1570 = C586 * C934;
    const double C2608 = C586 * C1960;
    const double C3283 = C586 * C2783;
    const double C4112 = C586 * C3607;
    const double C5774 = C586 * C5307;
    const double C10083 = C586 * C9616;
    const double C656 = C588 * C181;
    const double C734 = C588 * C244;
    const double C3289 = C588 * C2783;
    const double C4118 = C588 * C3607;
    const double C5780 = C588 * C5307;
    const double C10089 = C588 * C9616;
    const double C1564 = C1472 * C935;
    const double C1673 = C1472 * C244;
    const double C3281 = C1472 * C2784;
    const double C5140 = C1472 * C3607;
    const double C5772 = C1472 * C5308;
    const double C12158 = C1472 * C9616;
    const double C14134 = C1472 * C181;
    const double C15040 = C1472 * C827;
    const double C15172 = C1472 * C934;
    const double C16243 = C1472 * C1960;
    const double C17096 = C1472 * C2783;
    const double C20199 = C1472 * C5307;
    const double C20821 = C1472 * C5913;
    const double C22633 = C1472 * C137101;
    const double C1572 = C1474 * C935;
    const double C1670 = C1474 * C244;
    const double C3285 = C1474 * C2784;
    const double C5145 = C1474 * C3607;
    const double C5776 = C1474 * C5308;
    const double C12162 = C1474 * C9616;
    const double C14137 = C1474 * C181;
    const double C15044 = C1474 * C827;
    const double C17102 = C1474 * C2783;
    const double C20205 = C1474 * C5307;
    const double C22637 = C1474 * C137101;
    const double C15288 = C15063 * C244;
    const double C20826 = C15063 * C5913;
    const double C24984 = C15063 * C3607;
    const double C26759 = C15063 * C9616;
    const double C69500 = C15063 * C1960;
    const double C2498 = C2408 * C181;
    const double C2602 = C2408 * C1961;
    const double C4110 = C2408 * C3608;
    const double C5024 = C2408 * C2783;
    const double C8575 = C2408 * C5307;
    const double C10081 = C2408 * C9617;
    const double C2501 = C2410 * C181;
    const double C2610 = C2410 * C1961;
    const double C4114 = C2410 * C3608;
    const double C5029 = C2410 * C2783;
    const double C8579 = C2410 * C5307;
    const double C10085 = C2410 * C9617;
    const double C19385 = C19108 * C3608;
    const double C21722 = C19108 * C5913;
    const double C21938 = C19108 * C1961;
    const double C26755 = C19108 * C9617;
    const double C20835 = C20833 * C5913;
    const double C20976 = C20833 * C244;
    const double C71812 = C20833 * C3607;
    const double C73170 = C20833 * C9616;
    const double C24777 = C24775 * C5913;
    const double C24982 = C24775 * C3608;
    const double C26757 = C24775 * C9617;
    const double C69502 = C24775 * C1961;
    const double C137402 = C137360 + C137399;
    const double C137419 = C137409 / C137333;
    const double C6447 = (C137474 * C137366 + C138082 * C137768) / C137060;
    const double C20382 = C139575 * C5921;
    const double C53623 = C139575 * C5921;
    const double C63877 = C139286 * C5921;
    const double C24140 = C139575 * C8759;
    const double C57231 = C139575 * C8759;
    const double C66715 = C139286 * C8759;
    const double C43417 = C139575 * C10820;
    const double C105167 = C139575 * C10820;
    const double C126012 = C139286 * C10820;
    const double C137439 = C137431 / C137060;
    const double C137956 = -C137953;
    const double C83328 = C139286 * C26977;
    const double C83103 = C83099 + C83100;
    const double C137978 = -C137975;
    const double C69032 = C139286 * C21307;
    const double C71339 = C139286 * C24357;
    const double C68311 = C139286 * C20375;
    const double C68850 = C139286 * C21083;
    const double C71172 = C139286 * C24133;
    const double C134360 = C139286 * C43410;
    const double C137401 = C137398 + C137359;
    const double C137423 = C137415 / C137082;
    const double C137418 = C137407 / C137082;
    const double C138201 = C137407 / C137333;
    const double C6444 = -(C138097 * C137768 + C137474 * C137365) / C137082;
    const double C14706 = C13796 * C5918;
    const double C15058 = C554 * C5918;
    const double C20385 = C13596 * C5918;
    const double C48138 = C47234 * C5918;
    const double C53626 = C47034 * C5918;
    const double C63882 = C63381 * C5918;
    const double C18683 = C13796 * C8756;
    const double C19105 = C554 * C8756;
    const double C24143 = C13596 * C8756;
    const double C31413 = C307 * C8756;
    const double C31739 = C30813 * C8756;
    const double C52002 = C47234 * C8756;
    const double C57234 = C47034 * C8756;
    const double C66720 = C63381 * C8756;
    const double C93754 = C92850 * C8756;
    const double C32481 = C307 * C10817;
    const double C32833 = C30813 * C10817;
    const double C43420 = C13596 * C10817;
    const double C94780 = C92850 * C10817;
    const double C105170 = C47034 * C10817;
    const double C126015 = C63381 * C10817;
    const double C27253 =
        2 * ((-(C137532 * C138373) / C137082) / C137060 -
             (ae * C138099) / C137333) -
        (ae * (C137948 * C137768 + C138099)) / C137333 +
        C137532 *
            ((-(ae * C137532 * C137948) / C137082) / C137060 -
             C138373 / C137333 +
             C137532 * ((-(C137532 * C137474 * C137725) / C137082) / C137060 -
                        C137954));
    const double C138528 = -C138524;
    const double C24465 =
        2 * ((-(C137474 * C138330) / C137082) / C137060 -
             (ae * C137532 * C137359) / C137333) -
        (ae * C137532 * C138209) / C137333 +
        C137474 *
            ((-(ae * C137532 * C137948) / C137082) / C137060 -
             C138330 / C137333 +
             C137474 * ((-(C137474 * C137532 * C137624) / C137082) / C137060 -
                        C137976));
    const double C138809 = -C138805;
    const double C69342 = C139457 * C21717;
    const double C86775 = C139588 * C21717;
    const double C119285 = C139588 * C21717;
    const double C71650 = C139457 * C24767;
    const double C82844 = C139588 * C24767;
    const double C115437 = C139588 * C24767;
    const double C68312 = C63381 * C20373;
    const double C68643 = C554 * C20373;
    const double C68851 = C63381 * C21081;
    const double C69341 = C554 * C21081;
    const double C83435 = C47234 * C21081;
    const double C86774 = C30813 * C21081;
    const double C115984 = C13796 * C21081;
    const double C119284 = C92850 * C21081;
    const double C132560 = C307 * C21081;
    const double C71173 = C63381 * C24131;
    const double C71649 = C554 * C24131;
    const double C82843 = C30813 * C24131;
    const double C86456 = C47234 * C24131;
    const double C115436 = C92850 * C24131;
    const double C118966 = C13796 * C24131;
    const double C134361 = C63381 * C43408;
    const double C134537 = C307 * C43408;
    const double C137400 = C137397 / C137333;
    const double C858 =
        (-(C137394 * C137646) / C137082) / C137060 - C137364 / C137333 -
        (ae * (C137395 * C137646 + C137365)) / C137333 -
        ((C137366 + C137396 * C137646) * ce) / C137333 +
        C137332 *
            ((-((C137360 + C137387 * C137646) * ce) / C137082) / C137060 -
             (ae * (C137384 * C137646 + C137359)) / C137333 +
             C137332 * ((-(C137448 * C137646) / C137082) / C137060 - C137408));
    const double C1794 =
        (-(C137394 * C137768) / C137082) / C137060 - C137364 / C137333 -
        (ae * (C137395 * C137768 + C137365)) / C137333 -
        ((C137366 + C137396 * C137768) * ce) / C137333 +
        C137332 *
            ((-((C137360 + C137387 * C137768) * ce) / C137082) / C137060 -
             (ae * (C137384 * C137768 + C137359)) / C137333 +
             C137332 * ((-(C137448 * C137768) / C137082) / C137060 - C137408));
    const double C4236 =
        (-(C137532 * C137474 * C137360 * ce) / C137082) / C137060 -
        (ae * C137532 * C137474 * C137359) / C137333 -
        (C137332 * C137532 * C137794) / C137333;
    const double C6451 = (-(C137794 * C137768) / C137082) / C137060 -
                         (C137474 * C137364) / C137333;
    const double C14317 = C139575 * C852;
    const double C16355 = C13591 * C852;
    const double C47749 = C139575 * C852;
    const double C49697 = C47029 * C852;
    const double C65311 = C139286 * C852;
    const double C14333 = C13591 * C857;
    const double C14325 = C139575 * C857;
    const double C47765 = C47029 * C857;
    const double C47757 = C139575 * C857;
    const double C63875 = C139286 * C857;
    const double C32082 = C139575 * C1788;
    const double C34076 = C13591 * C1788;
    const double C79438 = C139286 * C1788;
    const double C94097 = C139575 * C1788;
    const double C96021 = C47029 * C1788;
    const double C32098 = C13591 * C1793;
    const double C32090 = C139575 * C1793;
    const double C77526 = C139286 * C1793;
    const double C94113 = C47029 * C1793;
    const double C94105 = C139575 * C1793;
    const double C20384 = C13591 * C5925;
    const double C53625 = C47029 * C5925;
    const double C63879 = C139286 * C5925;
    const double C24142 = C13591 * C8763;
    const double C57233 = C47029 * C8763;
    const double C66717 = C139286 * C8763;
    const double C43419 = C13591 * C10824;
    const double C88851 = C139286 * C10824;
    const double C105169 = C47029 * C10824;
    const double C137459 = C137387 + C137456;
    const double C138187 = C137396 + C138185;
    const double C26834 =
        (2 * C137532 * C138082 + C137532 * (C138082 + C138360 * C137768)) /
        C137060;
    const double C138403 = C137396 + C138401;
    const double C138576 = C137609 + C138569;
    const double C138874 = C137710 + C138870;
    const double C138057 = C138055 + C137445;
    const double C138180 = C138178 + C137445;
    const double C137451 = C137416 + C137443;
    const double C137450 = C137442 / C137082;
    const double C138056 = C138053 + C137442;
    const double C138179 = C138176 + C137442;
    const double C6606 = -(C137532 * (C137532 * C138110 + C138054 * ce) +
                           C137474 * C137556 + C137532 * C138054 * ce) /
                         C137082;
    const double C6920 =
        (C137474 * C137714 + C137532 * (C137532 * C138111 + C138054 * ae) +
         C137532 * C138054 * ae) /
        C137060;
    const double C6440 = C137474 * C137386 + C138054 * C137768;
    const double C138255 = C137474 * C138252;
    const double C138496 = C137532 * C138492;
    const double C138254 = C137474 * C138251;
    const double C138495 = C137532 * C138489;
    const double C21304 =
        -(C137532 * (C137532 * C138267 + C138247 * ce) + C137561 * C137646 +
          C137546 + C137532 * C138247 * ce) /
        C137082;
    const double C21714 = (C137704 + C137719 * C137646 +
                           C137532 * (C137532 * C138296 + C138247 * ae) +
                           C137532 * C138247 * ae) /
                          C137060;
    const double C24354 =
        C137532 * ((-2 * C138107) / C137082 - (C137474 * C138267) / C137082) -
        ((2 * C138048 + C137474 * C138247) * ce) / C137082;
    const double C24764 = (C137532 * (2 * C138108 + C137474 * C138296) +
                           (2 * C138048 + C137474 * C138247) * ae) /
                          C137060;
    const double C20370 = 3 * (C137355 + C137378 * C137646) +
                          C137474 * (2 * C138048 + C137474 * C138247);
    const double C21078 = C137355 + C137378 * C137646 + C138247 * C137768;
    const double C24128 = C137532 * (2 * C138048 + C137474 * C138247);
    const double C138393 = C138391 + C138249;
    const double C138392 = C138390 + C138246;
    const double C21615 =
        (-(C137532 * C137618 * ce) / C137082) / C137060 - C138060 / C137333 +
        C137532 *
            ((-(C137532 * C138261) / C137082) / C137060 - C137623 / C137333) -
        (ae * (C137532 * (C137532 * C137474 * C138263 + C138246) + C138107 +
               C137532 * C138240 * ce)) /
            C137333 +
        C137474 *
            (C137474 * ((-(C137532 * C138242 * ce) / C137082) / C137060 -
                        C138261 / C137333 +
                        C137532 * ((-(C137532 * C137332 * std::pow(C137336, 7) *
                                      bs[7] * C137673) /
                                    C137082) /
                                       C137060 -
                                   (C138242 * ce) / C137333)) -
             (ae * (C137532 * (C137532 * C138263 + C137434) + C137561 +
                    C137532 * C137426 * ce)) /
                 C137333);
    const double C43405 = 3 * (C137355 + C137378 * C137768) +
                          C137532 * (2 * C138171 + C137532 * C138491);
    const double C137458 = C137455 + C137384;
    const double C138204 = C138202 + C137395;
    const double C26832 = (-2 * C137532 * C138097) / C137082 -
                          (C137532 * (C138371 * C137768 + C138097)) / C137082;
    const double C138430 = C138428 + C137395;
    const double C138573 = C138566 + C137494;
    const double C138752 = C138750 + C138222;
    const double C138873 = C138869 + C137552;
    const double C137457 = C137454 / C137333;
    const double C137800 = C137799 / C137082;
    const double C137878 = C137877 / C137082;
    const double C137952 = C137332 * C137949;
    const double C137994 = C137532 * C137949;
    const double C4237 =
        (-(ae * C137532 * C137474 * C137395) / C137082) / C137060 -
        (C137532 * C137794) / C137333 -
        (C137532 * C137474 * C137396 * ce) / C137333 +
        C137332 * ((-(C137532 * C137947 * ce) / C137082) / C137060 -
                   (ae * C137532 * C137948) / C137333 -
                   (C137332 * C137532 * C137949) / C137333);
    const double C6449 =
        (-(C137949 * C137768) / C137082) / C137060 - C137794 / C137333 -
        (ae * (C137474 * C137449 * C137768 + C137474 * C137395)) / C137333 -
        ((C137474 * C137396 + C137474 * C137452 * C137768) * ce) / C137333 +
        C137332 * ((-((C137947 + C137474 * C137436 * C137768) * ce) / C137082) /
                       C137060 -
                   (ae * (C137474 * C137433 * C137768 + C137948)) / C137333 +
                   C137332 * ((-(C137474 *
                                 (C137413 * C137414 +
                                  C137340 * bs[7] * std::pow(C137336, 7)) *
                                 C137341 * C137768) /
                               C137082) /
                                  C137060 -
                              C137949 / C137333));
    const double C6450 =
        (-((C137474 * C137360 + C137947 * C137768) * ce) / C137082) / C137060 -
        (ae * (C137948 * C137768 + C137474 * C137359)) / C137333 +
        C137332 *
            ((-(C137949 * C137768) / C137082) / C137060 - C137794 / C137333);
    const double C24134 =
        (C137532 *
         ((-2 * C137948) / C137082 -
          (C137474 * (C137433 * C137646 + C137384)) / C137082) *
         ae) /
            C137060 -
        (C137532 * (2 * C137947 + C137474 * (C137387 + C137436 * C137646)) *
         ce) /
            C137333 +
        C137332 * C137532 *
            ((-2 * C137949) / C137333 +
             C137474 * ((-((C137413 * C137414 +
                            C137340 * bs[7] * std::pow(C137336, 7)) *
                           C137341 * C137646) /
                         C137082) /
                            C137060 -
                        C137448 / C137333));
    const double C26837 =
        (-2 * C137532 * C137794) / C137333 +
        C137532 *
            ((-(C137949 * C137768) / C137082) / C137060 - C137794 / C137333);
    const double C137974 = C137332 * C137971;
    const double C137664 = C137663 / C137082;
    const double C138244 = C137474 * C138238;
    const double C138334 = C137532 * C138238;
    const double C138557 = C138546 / C137333;
    const double C138652 = C138651 / C137082;
    const double C138687 = C137474 * C138685;
    const double C137786 = C137785 / C137082;
    const double C138386 = C137474 * C138301;
    const double C138483 = C137532 * C138301;
    const double C24980 =
        (((-2 * C138107) / C137082 - (C137474 * C138267) / C137082) * ae) /
            C137060 -
        ((2 * C138108 + C137474 * C138296) * ce) / C137333 +
        C137532 * ((-2 * C137474 * C138301) / C137333 +
                   C137474 * ((-(C137332 *
                                 (C137413 * C137414 +
                                  C137768 * bs[7] * std::pow(C137336, 7)) *
                                 C137341 * C137646) /
                               C137082) /
                                  C137060 -
                              C138301 / C137333));
    const double C138637 = C138636 / C137082;
    const double C138761 = C137532 * C138755;
    const double C138859 = C138846 / C137333;
    const double C138713 = C138711 + C138570;
    const double C138575 = C138551 + C138568;
    const double C138574 = C138567 / C137082;
    const double C138712 = C138709 + C138567;
    const double C138772 = C137532 * C138769;
    const double C138771 = C137532 * C138768;
    const double C88843 = 3 * (C138041 + C138217 * C137768) +
                          C137532 * (2 * C138379 + C137532 * C138764);
    const double C138864 = C138851 + C138852;
    const double C138863 = C138850 / C137082;
    const double C411 = C307 * C186;
    const double C658 = C554 * C186;
    const double C1254 = C307 * C942;
    const double C1576 = C554 * C942;
    const double C14462 = C13596 * C942;
    const double C16780 = C13796 * C942;
    const double C47894 = C47034 * C942;
    const double C50122 = C47234 * C942;
    const double C65404 = C63381 * C942;
    const double C3032 = C307 * C943;
    const double C3290 = C554 * C943;
    const double C13910 = C13796 * C943;
    const double C16460 = C13596 * C943;
    const double C47348 = C47234 * C943;
    const double C49802 = C47034 * C943;
    const double C3770 = C307 * C1872;
    const double C4028 = C554 * C1872;
    const double C30927 = C30813 * C1872;
    const double C34183 = C13596 * C1872;
    const double C92964 = C92850 * C1872;
    const double C96128 = C47034 * C1872;
    const double C2186 = C307 * C1876;
    const double C2508 = C554 * C1876;
    const double C32225 = C13596 * C1876;
    const double C34816 = C30813 * C1876;
    const double C94240 = C47034 * C1876;
    const double C96740 = C92850 * C1876;
    const double C127463 = C63381 * C1876;
    const double C4680 = C307 * C4339;
    const double C5030 = C554 * C4339;
    const double C17707 = C13796 * C4339;
    const double C18399 = C13596 * C4339;
    const double C33865 = C30813 * C4339;
    const double C51028 = C47234 * C4339;
    const double C51718 = C47034 * C4339;
    const double C78639 = C63381 * C4339;
    const double C95810 = C92850 * C4339;
    const double C137517 = -C137513;
    const double C32950 = C139588 * C11210;
    const double C94897 = C139588 * C11210;
    const double C7001 =
        (-(C137474 * C138067) / C137082) / C137060 - (C137704 * ce) / C137333 -
        (ae * C137532 * C138050) / C137333 +
        C137532 *
            (C137532 * ((-(C137474 * C137332 * C137759) / C137082) / C137060 -
                        C137724 / C137333) -
             (ae * C138050) / C137333);
    const double C9313 =
        C137532 *
            ((-(C138108 * ce) / C137082) / C137060 - C138067 / C137333 +
             C137474 * ((-(C137474 * C137332 * C137759) / C137082) / C137060 -
                        C137724 / C137333)) -
        (ae * (C137474 * C138050 + C137488 + C138048 * ce)) / C137333;
    const double C5981 =
        (-2 * (C137474 * C137488 + C137355 * ce)) / C137082 -
        (C137474 * (C137474 * C138050 + C137488 + C138048 * ce)) / C137082 -
        ((C137355 + C137378 * C137646) * ce) / C137082;
    const double C6527 =
        -(C138050 * C137768 + C137474 * C137488 + C137355 * ce) / C137082;
    const double C8839 =
        -(C137532 * (C137474 * C138050 + C137488 + C138048 * ce)) / C137082;
    const double C26904 = (-2 * C137532 * C138050) / C137082 -
                          (C137532 * (C138251 * C137768 + C138050)) / C137082;
    const double C138231 = C138228 + C137486;
    const double C138558 = C138547 / C137082;
    const double C138554 = C138543 / C137082;
    const double C138749 = C138543 / C137333;
    const double C83221 = C63381 * C26905;
    const double C83857 = C30813 * C26905;
    const double C89151 = C47234 * C26905;
    const double C116406 = C92850 * C26905;
    const double C121606 = C13796 * C26905;
    const double C130395 = C307 * C26905;
    const double C134422 = C63381 * C43492;
    const double C134596 = C307 * C43492;
    const double C138828 = -C138824;
    const double C491 = C307 * C249;
    const double C736 = C554 * C249;
    const double C1356 = C307 * C1032;
    const double C1678 = C554 * C1032;
    const double C14586 = C13596 * C1032;
    const double C16884 = C13796 * C1032;
    const double C48018 = C47034 * C1032;
    const double C50226 = C47234 * C1032;
    const double C65486 = C63381 * C1032;
    const double C3117 = C307 * C1033;
    const double C3374 = C554 * C1033;
    const double C13994 = C13796 * C1033;
    const double C16566 = C13596 * C1033;
    const double C47432 = C47234 * C1033;
    const double C49908 = C47034 * C1033;
    const double C2292 = C307 * C1968;
    const double C2614 = C554 * C1968;
    const double C32349 = C13596 * C1968;
    const double C34920 = C30813 * C1968;
    const double C94364 = C47034 * C1968;
    const double C96844 = C92850 * C1968;
    const double C127541 = C63381 * C1968;
    const double C3862 = C307 * C1969;
    const double C4119 = C554 * C1969;
    const double C31011 = C30813 * C1969;
    const double C34285 = C13596 * C1969;
    const double C93048 = C92850 * C1969;
    const double C96230 = C47034 * C1969;
    const double C4796 = C307 * C4445;
    const double C5146 = C554 * C4445;
    const double C17811 = C13796 * C4445;
    const double C18543 = C13596 * C4445;
    const double C33969 = C30813 * C4445;
    const double C51132 = C47234 * C4445;
    const double C51862 = C47034 * C4445;
    const double C78741 = C63381 * C4445;
    const double C95914 = C92850 * C4445;
    const double C137575 = -C137571;
    const double C14933 = C139586 * C6202;
    const double C48365 = C139586 * C6202;
    const double C15930 = C13796 * C6607;
    const double C16248 = C554 * C6607;
    const double C21311 = C13596 * C6607;
    const double C35749 = C307 * C6607;
    const double C36164 = C30813 * C6607;
    const double C49294 = C47234 * C6607;
    const double C54486 = C47034 * C6607;
    const double C77788 = C63381 * C6607;
    const double C98038 = C92850 * C6607;
    const double C10936 =
        (-2 * (C137532 * C137546 + C137355 * ce)) / C137082 -
        (C137532 * (C137532 * C138173 + C137546 + C138171 * ce)) / C137082 -
        ((C137355 + C137378 * C137768) * ce) / C137082;
    const double C68429 = C63381 * C20533;
    const double C68758 = C554 * C20533;
    const double C69031 = C63381 * C21305;
    const double C69505 = C554 * C21305;
    const double C83643 = C47234 * C21305;
    const double C86984 = C30813 * C21305;
    const double C116192 = C13796 * C21305;
    const double C119494 = C92850 * C21305;
    const double C132723 = C307 * C21305;
    const double C71338 = C63381 * C24355;
    const double C71813 = C554 * C24355;
    const double C82989 = C30813 * C24355;
    const double C86664 = C47234 * C24355;
    const double C115582 = C92850 * C24355;
    const double C119174 = C13796 * C24355;
    const double C26975 =
        (-2 * (C137532 * C138104 + C138041 * ce)) / C137082 -
        (C137532 * (C137532 * C138383 + C138104 + C138379 * ce)) / C137082 -
        ((C138041 + C138217 * C137768) * ce) / C137082;
    const double C138600 = -C138596;
    const double C138476 = C138473 + C137544;
    const double C138695 = C138694 / C137333;
    const double C138843 = C138694 / C137082;
    const double C138860 = C138847 / C137082;
    const double C334 = C139442 * C312;
    const double C2941 = C139442 * C1120;
    const double C13815 = C139586 * C1120;
    const double C47253 = C139586 * C1120;
    const double C1147 = C139442 * C1123;
    const double C16669 = C139586 * C1123;
    const double C50011 = C139586 * C1123;
    const double C3689 = C139442 * C2056;
    const double C2083 = C139442 * C2059;
    const double C4563 = C139442 * C4551;
    const double C17596 = C139586 * C4551;
    const double C50917 = C139586 * C4551;
    const double C83644 = C139586 * C21614;
    const double C116193 = C139586 * C21614;
    const double C132724 = C139442 * C21614;
    const double C138565 = C138556 / C137060;
    const double C137631 = -C137628;
    const double C15931 = C139586 * C6844;
    const double C35750 = C139442 * C6844;
    const double C49295 = C139586 * C6844;
    const double C18960 = C139586 * C9156;
    const double C31626 = C139442 * C9156;
    const double C52279 = C139586 * C9156;
    const double C32718 = C139442 * C11101;
    const double C6093 =
        (2 * (C137474 * C137603 + C137355 * ae) +
         C137474 * (C137603 + C137474 * C138051 + C138048 * ae) +
         (C137355 + C137378 * C137646) * ae) /
        C137060;
    const double C6687 =
        (C137474 * C137603 + C137355 * ae + C138051 * C137768) / C137060;
    const double C8999 =
        (C137532 * (C137603 + C137474 * C138051 + C138048 * ae)) / C137060;
    const double C27044 =
        (2 * C137532 * C138051 + C137532 * (C138051 + C138252 * C137768)) /
        C137060;
    const double C32487 = C32479 + C32480;
    const double C138232 = C137601 + C138229;
    const double C138555 = C138544 / C137333;
    const double C89073 = C139586 * C27045;
    const double C121529 = C139586 * C27045;
    const double C130309 = C139442 * C27045;
    const double C134536 = C139442 * C43644;
    const double C138663 = -C138661;
    const double C21514 =
        (-(C137656 * C137768) / C137082) / C137060 - C137651 / C137333 -
        (ae * (C138222 * C137768 + C138043)) / C137333 -
        ((C138044 + C138225 * C137768) * ce) / C137333 +
        C137474 *
            ((-((C137601 + C137609 * C137768) * ce) / C137082) / C137060 -
             (ae * (C137494 * C137768 + C137486)) / C137333 +
             C137474 * ((-(C137662 * C137768) / C137082) / C137060 - C137659));
    const double C6767 =
        (-((C137603 + C137618 * C137768) * ce) / C137082) / C137060 -
        (ae * (C137503 * C137768 + C137488)) / C137333 +
        C137474 * ((-(C137332 * C137662 * C137768) / C137082) / C137060 -
                   C138046 / C137333);
    const double C9079 =
        (-(ae * C137532 * C138050) / C137082) / C137060 -
        (C137532 * C138046) / C137333 - (C137532 * C138051 * ce) / C137333 +
        C137474 * ((-(C137532 * C137618 * ce) / C137082) / C137060 -
                   (ae * C137532 * C137503) / C137333 -
                   (C137474 * C137532 * C137332 * C137662) / C137333);
    const double C11048 =
        (-2 * C137532 * C138046) / C137333 +
        C137532 * ((-(C137332 * C137662 * C137768) / C137082) / C137060 -
                   C138046 / C137333);
    const double C21515 =
        (-(C138238 * C137768) / C137082) / C137060 - C138046 / C137333 -
        (ae * (C138251 * C137768 + C138050)) / C137333 -
        ((C138051 + C138252 * C137768) * ce) / C137333 +
        C137474 * ((-((C137618 + C138242 * C137768) * ce) / C137082) / C137060 -
                   (ae * (C138239 * C137768 + C137503)) / C137333 +
                   C137474 * ((-(C137332 *
                                 (C137413 * C137414 +
                                  C137646 * bs[7] * std::pow(C137336, 7)) *
                                 C137341 * C137768) /
                               C137082) /
                                  C137060 -
                              C138238 / C137333));
    const double C138221 = C138215 / C137333;
    const double C27115 =
        (((-2 * C137532 * C137486) / C137082 -
          (C137532 * (C137494 * C137768 + C137486)) / C137082) *
         ae) /
            C137060 -
        ((2 * C137532 * C137601 + C137532 * (C137601 + C137609 * C137768)) *
         ce) /
            C137333 +
        C137474 *
            ((-2 * C138332) / C137333 +
             C137532 * ((-(C137662 * C137768) / C137082) / C137060 - C137659));
    const double C43724 =
        3 * ((-(C137656 * C137768) / C137082) / C137060 - C137651 / C137333) +
        C137532 *
            ((-2 * C138332) / C137333 +
             C137532 * ((-(C137662 * C137768) / C137082) / C137060 - C137659));
    const double C412 = C139442 * C398;
    const double C1247 = C139442 * C1234;
    const double C14821 = C13593 * C1234;
    const double C14817 = C139586 * C1234;
    const double C48253 = C47031 * C1234;
    const double C48249 = C139586 * C1234;
    const double C1252 = C139442 * C1235;
    const double C13905 = C139586 * C1235;
    const double C16779 = C13593 * C1235;
    const double C47343 = C139586 * C1235;
    const double C50121 = C47031 * C1235;
    const double C2181 = C139442 * C2168;
    const double C17706 = C13593 * C2168;
    const double C51027 = C47031 * C2168;
    const double C2184 = C139442 * C2172;
    const double C15819 = C13593 * C2172;
    const double C49183 = C47031 * C2172;
    const double C4676 = C139442 * C4668;
    const double C15817 = C139586 * C4668;
    const double C18822 = C13593 * C4668;
    const double C49181 = C139586 * C4668;
    const double C52141 = C47031 * C4668;
    const double C38164 = C139442 * C6766;
    const double C78020 = C139586 * C6766;
    const double C83540 = C47031 * C6766;
    const double C110693 = C139586 * C6766;
    const double C116089 = C13593 * C6766;
    const double C41152 = C139442 * C9078;
    const double C80930 = C139586 * C9078;
    const double C86561 = C47031 * C9078;
    const double C113531 = C139586 * C9078;
    const double C119071 = C13593 * C9078;
    const double C43728 = C139442 * C11049;
    const double C89150 = C47031 * C11049;
    const double C121605 = C13593 * C11049;
    const double C581 = C139457 * C559;
    const double C3199 = C139457 * C1442;
    const double C1469 = C139457 * C1445;
    const double C3947 = C139457 * C2378;
    const double C30832 = C139588 * C2378;
    const double C92869 = C139588 * C2378;
    const double C2405 = C139457 * C2381;
    const double C34705 = C139588 * C2381;
    const double C96629 = C139588 * C2381;
    const double C4913 = C139457 * C4901;
    const double C33754 = C139588 * C4901;
    const double C95699 = C139588 * C4901;
    const double C138868 = C138858 / C137060;
    const double C137732 = -C137729;
    const double C15178 = C139457 * C6311;
    const double C16035 = C139457 * C6921;
    const double C35885 = C139588 * C6921;
    const double C97759 = C139588 * C6921;
    const double C11154 =
        (2 * (C137532 * C137704 + C137355 * ae) +
         C137532 * (C137704 + C137532 * C138174 + C138171 * ae) +
         (C137355 + C137378 * C137768) * ae) /
        C137060;
    const double C15064 = C15056 + C15057;
    const double C19109 = C19103 + C19104;
    const double C31747 = C31735 + C31736;
    const double C93762 = C93750 + C93751;
    const double C68642 = C139457 * C20815;
    const double C69340 = C139457 * C21715;
    const double C86771 = C139588 * C21715;
    const double C119281 = C139588 * C21715;
    const double C71648 = C139457 * C24765;
    const double C82840 = C139588 * C24765;
    const double C115433 = C139588 * C24765;
    const double C27251 =
        (2 * (C137532 * C138105 + C138041 * ae) +
         C137532 * (C138105 + C137532 * C138384 + C138379 * ae) +
         (C138041 + C138217 * C137768) * ae) /
        C137060;
    const double C138625 = -C138622;
    const double C138477 = C137702 + C138474;
    const double C138857 = C138844 / C137333;
    const double C20974 =
        3 * ((-(C137778 * C137646) / C137082) / C137060 - C137773 / C137333) +
        C137474 *
            ((-2 * C137474 * C137778) / C137333 +
             C137474 * ((-(C137784 * C137646) / C137082) / C137060 - C137781));
    const double C21933 =
        (-(C137778 * C137646) / C137082) / C137060 - C137773 / C137333 -
        (ae * (C137532 * C138275 + C138224 * ce)) / C137333 -
        ((C137532 * C138285 + C138224 * ae) * ce) / C137333 +
        C137532 *
            ((-(C138285 * ce) / C137082) / C137060 - (ae * C138275) / C137333 +
             C137532 * ((-(C137784 * C137646) / C137082) / C137060 - C137781));
    const double C24979 =
        (((-2 * C138104) / C137082 - (C137474 * C138275) / C137082) * ae) /
            C137060 -
        ((2 * C138105 + C137474 * C138285) * ce) / C137333 +
        C137532 *
            ((-2 * C137474 * C137778) / C137333 +
             C137474 * ((-(C137784 * C137646) / C137082) / C137060 - C137781));
    const double C6364 =
        (-2 * C137474 * C138071) / C137333 +
        C137474 * ((-(C137332 * C137784 * C137646) / C137082) / C137060 -
                   C138071 / C137333);
    const double C7078 =
        (-(ae * (C137532 * C138107 + C138048 * ce)) / C137082) / C137060 -
        (C137474 * C138071) / C137333 -
        ((C137532 * C138108 + C138048 * ae) * ce) / C137333 +
        C137532 *
            ((-(C138108 * ce) / C137082) / C137060 - (ae * C138107) / C137333 -
             (C137532 * C137474 * C137332 * C137784) / C137333);
    const double C9390 =
        (-((C137704 + C137719 * C137646) * ce) / C137082) / C137060 -
        (ae * (C137561 * C137646 + C137546)) / C137333 +
        C137532 * ((-(C137332 * C137784 * C137646) / C137082) / C137060 -
                   C138071 / C137333);
    const double C20973 =
        3 * ((-(C138301 * C137646) / C137082) / C137060 - C138071 / C137333) +
        C137474 * ((-2 * C137474 * C138301) / C137333 +
                   C137474 * ((-(C137332 *
                                 (C137413 * C137414 +
                                  C137768 * bs[7] * std::pow(C137336, 7)) *
                                 C137341 * C137646) /
                               C137082) /
                                  C137060 -
                              C138301 / C137333));
    const double C21934 =
        (-(C138301 * C137646) / C137082) / C137060 - C138071 / C137333 -
        (ae * (C137532 * C138267 + C138247 * ce)) / C137333 -
        ((C137532 * C138296 + C138247 * ae) * ce) / C137333 +
        C137532 *
            ((-(C138296 * ce) / C137082) / C137060 - (ae * C138267) / C137333 +
             C137532 * ((-(C137332 *
                           (C137413 * C137414 +
                            C137768 * bs[7] * std::pow(C137336, 7)) *
                           C137341 * C137646) /
                         C137082) /
                            C137060 -
                        C138301 / C137333));
    const double C27388 =
        2 * ((-(C138105 * ce) / C137082) / C137060 - (ae * C138104) / C137333 -
             (C137532 * C138377) / C137333) -
        (ae * (C137532 * C138383 + C138104 + C138379 * ce)) / C137333 -
        ((C138105 + C137532 * C138384 + C138379 * ae) * ce) / C137333 +
        C137532 * ((-(ae * C138383) / C137082) / C137060 - C138377 / C137333 -
                   (C138384 * ce) / C137333 +
                   C137532 * ((-(C138380 * ce) / C137082) / C137060 -
                              (ae * C138378) / C137333 -
                              (C137532 * C137474 * C137784) / C137333));
    const double C138466 = C138460 / C137333;
    const double C737 = C139457 * C723;
    const double C1669 = C139457 * C1659;
    const double C33968 = C30408 * C1659;
    const double C95913 = C92451 * C1659;
    const double C1676 = C139457 * C1663;
    const double C31964 = C30408 * C1663;
    const double C93979 = C92451 * C1663;
    const double C2607 = C139457 * C2594;
    const double C33058 = C30408 * C2594;
    const double C33054 = C139588 * C2594;
    const double C95005 = C92451 * C2594;
    const double C95001 = C139588 * C2594;
    const double C2612 = C139457 * C2595;
    const double C31006 = C139588 * C2595;
    const double C34919 = C30408 * C2595;
    const double C93043 = C139588 * C2595;
    const double C96843 = C92451 * C2595;
    const double C5142 = C139457 * C5134;
    const double C31960 = C139588 * C5134;
    const double C36163 = C30408 * C5134;
    const double C93975 = C139588 * C5134;
    const double C98037 = C92451 * C5134;
    const double C20978 = C139457 * C6365;
    const double C82988 = C30408 * C6365;
    const double C115581 = C92451 * C6365;
    const double C21942 = C139457 * C7077;
    const double C81480 = C139588 * C7077;
    const double C83962 = C30408 * C7077;
    const double C114081 = C139588 * C7077;
    const double C116511 = C92451 * C7077;
    const double C24986 = C139457 * C9389;
    const double C77406 = C139588 * C9389;
    const double C86983 = C30408 * C9389;
    const double C110167 = C139588 * C9389;
    const double C119493 = C92451 * C9389;
    const double C137393 = C137389 - C137374;
    const double C38271 = C38269 + C38270;
    const double C78136 = C78131 + C78132;
    const double C83648 = C83645 + C83646;
    const double C110809 = C110804 + C110805;
    const double C116197 = C116194 + C116195;
    const double C41255 = C41253 + C41254;
    const double C81070 = C81067 + C81068;
    const double C86669 = C86666 + C86667;
    const double C113671 = C113668 + C113669;
    const double C119179 = C119176 + C119177;
    const double C138230 = C138227 - C137493;
    const double C138475 = C138472 - C137551;
    const double C68301 = (4 * (2 * C138084 + C137474 * C138193) +
                           C137474 * (3 * C138193 + C137474 * C138513)) /
                          C137060;
    const double C68838 =
        (2 * C138084 + C137474 * C138193 + C138513 * C137768) / C137060;
    const double C71167 =
        (C137532 * (3 * C138193 + C137474 * C138513)) / C137060;
    const double C134355 = (4 * (2 * C138405 + C137532 * C138409) +
                            C137532 * (3 * C138409 + C137532 * C138794)) /
                           C137060;
    const double C138539 = C138530 - C138537;
    const double C138820 = C138811 - C138818;
    const double C137527 = C137515 - C137525;
    const double C138839 = C138830 - C138837;
    const double C137585 = C137573 - C137583;
    const double C138608 = C138598 - C138605;
    const double C313 = (4 * (2 * C137603 + C137332 * C137613) +
                         C137332 * (3 * C137613 + C137332 * C137639)) /
                        C137060;
    const double C2060 =
        (2 * C137603 + C137332 * C137613 + C137639 * C137768) / C137060;
    const double C3685 =
        (C137532 * (3 * C137613 + C137332 * C137639)) / C137060;
    const double C134531 = (4 * (2 * C138418 + C137532 * C138420) +
                            C137532 * (3 * C138420 + C137532 * C138803)) /
                           C137060;
    const double C560 = (4 * (2 * C137704 + C137332 * C137714) +
                         C137332 * (3 * C137714 + C137332 * C137740)) /
                        C137060;
    const double C1446 =
        (2 * C137704 + C137332 * C137714 + C137740 * C137646) / C137060;
    const double C3195 =
        (C137474 * (3 * C137714 + C137332 * C137740)) / C137060;
    const double C68636 = (4 * (2 * C138105 + C137474 * C138285) +
                           C137474 * (3 * C138285 + C137474 * C138630)) /
                          C137060;
    const double C137500 = C137499 / C137060;
    const double C138195 = C138194 / C137060;
    const double C137524 = C137521 / C137060;
    const double C138512 = C138510 / C137060;
    const double C138782 = C138781 / C137060;
    const double C32466 = C2087 * C821;
    const double C32464 = C2087 * C139305;
    const double C38039 = C2087 * C139300;
    const double C39979 = C2087 * C139552;
    const double C39977 = C2087 * C139305;
    const double C41949 = C2087 * C5225;
    const double C41945 = C2087 * C5226;
    const double C32491 = C32485 * C821;
    const double C38042 = C32485 * C139300;
    const double C45575 = C32485 * C139552;
    const double C133251 = C32485 * C5225;
    const double C35462 = C35458 * C821;
    const double C38045 = C35458 * C139300;
    const double C39983 = C35458 * C139552;
    const double C137615 = C137614 / C137060;
    const double C138211 = C138210 / C137060;
    const double C89081 = C89076 + C89077;
    const double C121537 = C121532 + C121533;
    const double C130314 = C130310 + C130311;
    const double C38057 = C38055 * C139300;
    const double C128391 = C38055 * C821;
    const double C131763 = C38055 * C139552;
    const double C41047 = C41045 * C139300;
    const double C43657 = C43655 * C139300;
    const double C126260 = C43655 * C821;
    const double C135996 = C43655 * C139552;
    const double C137638 = C137635 / C137060;
    const double C138536 = C138533 / C137060;
    const double C138648 = C138647 / C137060;
    const double C138680 = -C138679;
    const double C137558 = C137557 / C137060;
    const double C138411 = C138410 / C137060;
    const double C137582 = C137579 / C137060;
    const double C138521 = C138520 / C137060;
    const double C138725 = -C138723;
    const double C138793 = C138791 / C137060;
    const double C499 = C495 * C139339;
    const double C3860 = C495 * C139561;
    const double C9850 = C495 * C9466;
    const double C1363 = C1359 * C139339;
    const double C4789 = C1359 * C139561;
    const double C11855 = C1359 * C9466;
    const double C2298 = C2294 * C1762;
    const double C3854 = C2294 * C139403;
    const double C9844 = C2294 * C139403;
    const double C30742 = C2294 * C139339;
    const double C32713 = C2294 * C1761;
    const double C34599 = C2294 * C139561;
    const double C42151 = C2294 * C9466;
    const double C138277 = C138276 / C137060;
    const double C138339 = C138338 / C137060;
    const double C1362 = C1358 * C139339;
    const double C4794 = C1358 * C139561;
    const double C11859 = C1358 * C9466;
    const double C1364 = C1360 * C139339;
    const double C2300 = C2296 * C1762;
    const double C3858 = C2296 * C139403;
    const double C9848 = C2296 * C139403;
    const double C30743 = C2296 * C139339;
    const double C34603 = C2296 * C139561;
    const double C42155 = C2296 * C9466;
    const double C137687 = C137686 / C137060;
    const double C138268 = -C138266;
    const double C138345 = -C138344;
    const double C138604 = C138601 / C137060;
    const double C138664 = C138662 / C137060;
    const double C15043 = C1473 * C821;
    const double C15041 = C1473 * C139305;
    const double C20096 = C1473 * C5225;
    const double C20092 = C1473 * C5226;
    const double C20822 = C1473 * C139300;
    const double C22636 = C1473 * C139552;
    const double C22634 = C1473 * C139305;
    const double C15068 = C15062 * C821;
    const double C20825 = C15062 * C139300;
    const double C22640 = C15062 * C139552;
    const double C68097 = C15062 * C5225;
    const double C19111 = C19107 * C821;
    const double C21721 = C19107 * C139300;
    const double C23760 = C19107 * C139552;
    const double C137716 = C137715 / C137060;
    const double C138438 = C138437 / C137060;
    const double C20836 = C20834 * C139300;
    const double C64407 = C20834 * C821;
    const double C70044 = C20834 * C139552;
    const double C21732 = C21730 * C139300;
    const double C24778 = C24776 * C139300;
    const double C67367 = C24776 * C821;
    const double C70893 = C24776 * C139552;
    const double C137739 = C137736 / C137060;
    const double C138615 = C138614 / C137060;
    const double C138743 = -C138741;
    const double C138817 = C138814 / C137060;
    const double C666 = C662 * C139328;
    const double C3288 = C662 * C139560;
    const double C5779 = C662 * C5228;
    const double C1582 = C1578 * C824;
    const double C3282 = C1578 * C139377;
    const double C5773 = C1578 * C139377;
    const double C14135 = C1578 * C139328;
    const double C15173 = C1578 * C823;
    const double C17097 = C1578 * C139560;
    const double C20200 = C1578 * C5228;
    const double C2514 = C2510 * C139328;
    const double C5023 = C2510 * C139560;
    const double C8574 = C2510 * C5228;
    const double C138287 = C138286 / C137060;
    const double C138456 = C138455 / C137060;
    const double C1584 = C1580 * C824;
    const double C3286 = C1580 * C139377;
    const double C5777 = C1580 * C139377;
    const double C14136 = C1580 * C139328;
    const double C17101 = C1580 * C139560;
    const double C20204 = C1580 * C5228;
    const double C2515 = C2511 * C139328;
    const double C5028 = C2511 * C139560;
    const double C8578 = C2511 * C5228;
    const double C2516 = C2512 * C139328;
    const double C137763 = C137762 / C137060;
    const double C138297 = -C138295;
    const double C138446 = -C138444;
    const double C138629 = C138626 / C137060;
    const double C138836 = C138833 / C137060;
    const double C64085 = C63894 * C244;
    const double C68309 = C63894 * C5913;
    const double C71337 = C63894 * C3607;
    const double C72718 = C63894 * C9616;
    const double C64080 = C63888 * C244;
    const double C66951 = C63888 * C3607;
    const double C68306 = C63888 * C5913;
    const double C69026 = C63888 * C1960;
    const double C72712 = C63888 * C9616;
    const double C63898 = C63886 * C827;
    const double C64086 = C63886 * C244;
    const double C66958 = C63886 * C3607;
    const double C69585 = C63886 * C137101;
    const double C73937 = C63886 * C9616;
    const double C63897 = C63885 * C821;
    const double C67641 = C63885 * C5225;
    const double C68305 = C63885 * C139300;
    const double C69584 = C63885 * C139552;
    const double C64077 = C63884 * C244;
    const double C66946 = C63884 * C3607;
    const double C68304 = C63884 * C5913;
    const double C69019 = C63884 * C1960;
    const double C72708 = C63884 * C9616;
    const double C64104 = C64098 * C139339;
    const double C66957 = C64098 * C139561;
    const double C73936 = C64098 * C9466;
    const double C64103 = C64097 * C139339;
    const double C71336 = C64097 * C139561;
    const double C72717 = C64097 * C9466;
    const double C64102 = C64096 * C139339;
    const double C66952 = C64096 * C139561;
    const double C69027 = C64096 * C1761;
    const double C72713 = C64096 * C9466;
    const double C64101 = C64095 * C139339;
    const double C66947 = C64095 * C139561;
    const double C69020 = C64095 * C1761;
    const double C72709 = C64095 * C9466;
    const double C66953 = C66728 * C3608;
    const double C68842 = C66728 * C5913;
    const double C69028 = C66728 * C1961;
    const double C72714 = C66728 * C9617;
    const double C76772 = C66728 * C244;
    const double C80509 = C66728 * C2784;
    const double C83211 = C66728 * C5308;
    const double C86350 = C66728 * C3607;
    const double C88080 = C66728 * C935;
    const double C88076 = C66728 * C936;
    const double C88188 = C66728 * C9616;
    const double C66948 = C66724 * C3608;
    const double C68844 = C66724 * C5913;
    const double C69021 = C66724 * C1961;
    const double C72710 = C66724 * C9617;
    const double C76769 = C66724 * C244;
    const double C77654 = C66724 * C181;
    const double C80507 = C66724 * C2783;
    const double C80505 = C66724 * C2784;
    const double C80649 = C66724 * C3607;
    const double C83209 = C66724 * C5307;
    const double C83207 = C66724 * C5308;
    const double C83322 = C66724 * C1960;
    const double C88078 = C66724 * C934;
    const double C88074 = C66724 * C935;
    const double C88182 = C66724 * C9616;
    const double C77655 = C66844 * C139328;
    const double C80508 = C66844 * C139560;
    const double C80506 = C66844 * C139377;
    const double C83210 = C66844 * C5228;
    const double C83208 = C66844 * C139377;
    const double C88079 = C66844 * C823;
    const double C88075 = C66844 * C824;
    const double C66971 = C66967 * C139403;
    const double C69029 = C66967 * C1762;
    const double C72715 = C66967 * C139403;
    const double C76771 = C66967 * C139339;
    const double C86349 = C66967 * C139561;
    const double C88187 = C66967 * C9466;
    const double C66970 = C66966 * C139403;
    const double C69022 = C66966 * C1762;
    const double C72711 = C66966 * C139403;
    const double C76770 = C66966 * C139339;
    const double C80650 = C66966 * C139561;
    const double C83323 = C66966 * C1761;
    const double C88183 = C66966 * C9466;
    const double C77671 = C77539 * C181;
    const double C83096 = C77539 * C5913;
    const double C83215 = C77539 * C5307;
    const double C91688 = C77539 * C2783;
    const double C133774 = C77539 * C934;
    const double C77545 = C77535 * C827;
    const double C77660 = C77535 * C181;
    const double C80513 = C77535 * C2783;
    const double C84981 = C77535 * C137101;
    const double C85125 = C77535 * C5307;
    const double C77544 = C77534 * C821;
    const double C83092 = C77534 * C139300;
    const double C84980 = C77534 * C139552;
    const double C87087 = C77534 * C5225;
    const double C77651 = C77533 * C181;
    const double C80503 = C77533 * C2783;
    const double C83091 = C77533 * C5913;
    const double C83205 = C77533 * C5307;
    const double C88072 = C77533 * C934;
    const double C77681 = C77676 * C139328;
    const double C83214 = C77676 * C5228;
    const double C91687 = C77676 * C139560;
    const double C133775 = C77676 * C823;
    const double C77678 = C77673 * C139328;
    const double C80512 = C77673 * C139560;
    const double C85124 = C77673 * C5228;
    const double C77677 = C77672 * C139328;
    const double C80504 = C77672 * C139560;
    const double C83206 = C77672 * C5228;
    const double C88073 = C77672 * C823;
    const double C88854 = C88852 * C5913;
    const double C88924 = C88852 * C181;
    const double C130154 = C88852 * C5307;
    const double C136522 = C88852 * C2783;
    const double C88930 = C88929 * C139328;
    const double C130153 = C88929 * C5228;
    const double C136521 = C88929 * C139560;
    const double C16990 = C1474 * C2704;
    const double C34393 = C2088 * C2704;
    const double C20093 = C1474 * C5232;
    const double C41946 = C2088 * C5232;
    const double C137105 = C139300 - C137103;
    const double C16993 = C1473 * C139589;
    const double C16987 = C15061 * C139589;
    const double C34396 = C2087 * C139589;
    const double C34390 = C32484 * C139589;
    const double C65305 = C63885 * C139589;
    const double C65789 = C15062 * C139589;
    const double C79432 = C77534 * C139589;
    const double C127619 = C32485 * C139589;
    const double C92 =
        (C139589 * C139295) / C137082 + (C139552 - C139577) / C137087;
    const double C16989 = C1473 * C139590;
    const double C34392 = C2087 * C139590;
    const double C93 =
        (C139590 * C139295) / C137082 + (2 * C139305 + C139589) / C137087;
    const double C94 = (C139295 * C139305) / C137091 + C139590 / C137087;
    const double C86242 = C66728 * C7237;
    const double C137204 = C139328 - C137201;
    const double C7468 = C414 * C139591;
    const double C7462 = C413 * C139591;
    const double C7702 = C661 * C139591;
    const double C7696 = C660 * C139591;
    const double C22746 = C1578 * C139591;
    const double C41147 = C32604 * C139591;
    const double C86245 = C66844 * C139591;
    const double C86239 = C77672 * C139591;
    const double C132405 = C77676 * C139591;
    const double C5909 =
        (C139591 * C139372) / C137082 + (C139560 - C139579) / C137087;
    const double C7704 = C1580 * C139592;
    const double C7698 = C1578 * C139592;
    const double C86241 = C66844 * C139592;
    const double C5910 =
        (C139592 * C139372) / C137082 + (2 * C139377 + C139591) / C137087;
    const double C5911 = (C139372 * C139377) / C137091 + C139592 / C137087;
    const double C137250 = C139339 - C137247;
    const double C12621 = C494 * C139593;
    const double C12615 = C493 * C139593;
    const double C12855 = C739 * C139593;
    const double C12849 = C738 * C139593;
    const double C30338 = C15294 * C139593;
    const double C45779 = C2294 * C139593;
    const double C75426 = C64096 * C139593;
    const double C75420 = C64095 * C139593;
    const double C91793 = C66966 * C139593;
    const double C10809 =
        (C139593 * C139398) / C137082 + (C139561 - C139582) / C137087;
    const double C12623 = C2296 * C139594;
    const double C12617 = C2294 * C139594;
    const double C75428 = C66967 * C139594;
    const double C75422 = C66966 * C139594;
    const double C10810 =
        (C139594 * C139398) / C137082 + (2 * C139403 + C139593) / C137087;
    const double C10811 = (C139398 * C139403) / C137091 + C139594 / C137087;
    const double C14340 = C14312 + C14313;
    const double C16358 = C16350 + C16351;
    const double C47772 = C47744 + C47745;
    const double C49700 = C49692 + C49693;
    const double C65320 = C65308 + C65309;
    const double C14348 = C14328 + C14329;
    const double C14344 = C14320 + C14321;
    const double C47780 = C47760 + C47761;
    const double C47776 = C47752 + C47753;
    const double C63890 = C63872 + C63873;
    const double C32105 = C32077 + C32078;
    const double C34079 = C34071 + C34072;
    const double C79439 = C79435 + C79436;
    const double C94120 = C94092 + C94093;
    const double C96024 = C96016 + C96017;
    const double C32113 = C32093 + C32094;
    const double C32109 = C32085 + C32086;
    const double C77537 = C77519 + C77520;
    const double C94128 = C94108 + C94109;
    const double C94124 = C94100 + C94101;
    const double C18261 = C18249 + C18250;
    const double C18257 = C18241 + C18242;
    const double C51580 = C51568 + C51569;
    const double C51576 = C51560 + C51561;
    const double C66722 = C66706 + C66707;
    const double C38054 = C38046 + C38047;
    const double C77915 = C77905 + C77906;
    const double C83437 = C83429 + C83430;
    const double C110588 = C110578 + C110579;
    const double C115986 = C115978 + C115979;
    const double C41044 = C41038 + C41039;
    const double C80797 = C80791 + C80792;
    const double C86458 = C86450 + C86451;
    const double C113398 = C113392 + C113393;
    const double C118968 = C118960 + C118961;
    const double C1583 = C1579 * C825;
    const double C7700 = C1579 * C7158;
    const double C15175 = C1579 * C824;
    const double C17099 = C1579 * C139377;
    const double C20202 = C1579 * C139377;
    const double C22748 = C1579 * C139592;
    const double C2299 = C2295 * C1763;
    const double C12619 = C2295 * C12239;
    const double C32715 = C2295 * C1762;
    const double C34601 = C2295 * C139403;
    const double C42153 = C2295 * C139403;
    const double C45781 = C2295 * C139594;
    const double C5034 = C5032 * C139377;
    const double C8576 = C5032 * C139377;
    const double C16139 = C5032 * C139328;
    const double C19246 = C5032 * C139560;
    const double C23898 = C5032 * C5228;
    const double C4800 = C4798 * C139403;
    const double C11857 = C4798 * C139403;
    const double C31622 = C4798 * C139339;
    const double C35747 = C4798 * C139561;
    const double C44789 = C4798 * C9466;
    const double C1245 = C1154 * C936;
    const double C1352 = C1154 * C244;
    const double C7465 = C1154 * C7237;
    const double C1567 = C1476 * C936;
    const double C1674 = C1476 * C244;
    const double C7699 = C1476 * C7237;
    const double C15046 = C1476 * C827;
    const double C15174 = C1476 * C935;
    const double C17098 = C1476 * C2784;
    const double C19392 = C1476 * C3607;
    const double C20201 = C1476 * C5308;
    const double C20824 = C1476 * C5913;
    const double C22639 = C1476 * C137101;
    const double C26763 = C1476 * C9616;
    const double C2182 = C2090 * C181;
    const double C2283 = C2090 * C1962;
    const double C12618 = C2090 * C12390;
    const double C32469 = C2090 * C827;
    const double C32714 = C2090 * C1961;
    const double C34600 = C2090 * C3608;
    const double C35603 = C2090 * C2783;
    const double C38041 = C2090 * C5913;
    const double C38167 = C2090 * C5307;
    const double C42152 = C2090 * C9617;
    const double C45574 = C2090 * C137101;
    const double C2504 = C2412 * C181;
    const double C2605 = C2412 * C1962;
    const double C12852 = C2412 * C12390;
    const double C4672 = C4566 * C2784;
    const double C4788 = C4566 * C3608;
    const double C8271 = C4566 * C5308;
    const double C11854 = C4566 * C9617;
    const double C31517 = C4566 * C935;
    const double C31623 = C4566 * C244;
    const double C35444 = C4566 * C827;
    const double C35748 = C4566 * C3607;
    const double C38050 = C4566 * C5913;
    const double C39982 = C4566 * C137101;
    const double C44790 = C4566 * C9616;
    const double C5022 = C4916 * C2784;
    const double C5138 = C4916 * C3608;
    const double C8573 = C4916 * C5308;
    const double C12156 = C4916 * C9617;
    const double C16138 = C4916 * C181;
    const double C16245 = C4916 * C1961;
    const double C19093 = C4916 * C827;
    const double C19247 = C4916 * C2783;
    const double C21720 = C4916 * C5913;
    const double C23759 = C4916 * C137101;
    const double C23899 = C4916 * C5307;
    const double C342 = C331 + C332;
    const double C589 = C578 + C579;
    const double C13833 = C13820 + C13821;
    const double C30850 = C30837 + C30838;
    const double C47271 = C47258 + C47259;
    const double C92887 = C92874 + C92875;
    const double C20466 = C20463 + C20464;
    const double C20907 = C20905 + C20906;
    const double C53703 = C53700 + C53701;
    const double C63999 = C63989 + C63990;
    const double C82920 = C82917 + C82918;
    const double C115513 = C115510 + C115511;
    const double C21206 = C21203 + C21204;
    const double C21835 = C21833 + C21834;
    const double C54385 = C54382 + C54383;
    const double C68941 = C68937 + C68938;
    const double C81348 = C81345 + C81346;
    const double C83862 = C83859 + C83860;
    const double C113949 = C113946 + C113947;
    const double C116411 = C116408 + C116409;
    const double C24256 = C24253 + C24254;
    const double C24881 = C24879 + C24880;
    const double C57343 = C57340 + C57341;
    const double C66845 = C66838 + C66839;
    const double C77302 = C77297 + C77298;
    const double C86883 = C86880 + C86881;
    const double C110063 = C110058 + C110059;
    const double C119393 = C119390 + C119391;
    const double C43577 = C43574 + C43575;
    const double C43801 = C43799 + C43800;
    const double C89001 = C88999 + C89000;
    const double C89227 = C89224 + C89225;
    const double C105319 = C105316 + C105317;
    const double C121681 = C121678 + C121679;
    const double C14343 = C14318 + C14319;
    const double C14339 = C14310 + C14311;
    const double C47775 = C47750 + C47751;
    const double C47771 = C47742 + C47743;
    const double C63887 = C63866 + C63867;
    const double C14347 = C14326 + C14327;
    const double C47779 = C47758 + C47759;
    const double C63889 = C63870 + C63871;
    const double C32108 = C32083 + C32084;
    const double C32104 = C32075 + C32076;
    const double C77536 = C77517 + C77518;
    const double C94123 = C94098 + C94099;
    const double C94119 = C94090 + C94091;
    const double C32112 = C32091 + C32092;
    const double C77538 = C77521 + C77522;
    const double C94127 = C94106 + C94107;
    const double C18260 = C18247 + C18248;
    const double C51579 = C51566 + C51567;
    const double C66723 = C66708 + C66709;
    const double C415 = C407 + C408;
    const double C13916 = C13908 + C13909;
    const double C47354 = C47346 + C47347;
    const double C1256 = C1243 + C1244;
    const double C13913 = C13902 + C13903;
    const double C14825 = C14818 + C14819;
    const double C47351 = C47340 + C47341;
    const double C48257 = C48250 + C48251;
    const double C2188 = C2177 + C2178;
    const double C15822 = C15814 + C15815;
    const double C49186 = C49178 + C49179;
    const double C32605 = C32598 + C32599;
    const double C78026 = C78021 + C78022;
    const double C110699 = C110694 + C110695;
    const double C35606 = C35597 + C35598;
    const double C78024 = C78017 + C78018;
    const double C80934 = C80931 + C80932;
    const double C110697 = C110690 + C110691;
    const double C113535 = C113532 + C113533;
    const double C740 = C732 + C733;
    const double C31017 = C31009 + C31010;
    const double C93054 = C93046 + C93047;
    const double C1681 = C1671 + C1672;
    const double C31968 = C31961 + C31962;
    const double C93983 = C93976 + C93977;
    const double C15295 = C15286 + C15287;
    const double C77412 = C77407 + C77408;
    const double C110173 = C110168 + C110169;
    const double C2616 = C2603 + C2604;
    const double C31014 = C31003 + C31004;
    const double C33062 = C33055 + C33056;
    const double C93051 = C93040 + C93041;
    const double C95009 = C95002 + C95003;
    const double C19395 = C19386 + C19387;
    const double C77410 = C77403 + C77404;
    const double C81484 = C81481 + C81482;
    const double C110171 = C110164 + C110165;
    const double C114085 = C114082 + C114083;
    const double C69035 = C69033 * C1763;
    const double C75424 = C69033 * C12239;
    const double C80652 = C69033 * C139403;
    const double C83325 = C69033 * C1762;
    const double C88185 = C69033 * C139403;
    const double C91795 = C69033 * C139594;
    const double C21731 = C21729 * C5913;
    const double C21940 = C21729 * C1962;
    const double C30341 = C21729 * C12390;
    const double C68857 = C68853 * C5913;
    const double C69023 = C68853 * C1962;
    const double C75423 = C68853 * C12390;
    const double C77668 = C68853 * C181;
    const double C80651 = C68853 * C3608;
    const double C83219 = C68853 * C5307;
    const double C83213 = C68853 * C5308;
    const double C83324 = C68853 * C1961;
    const double C88184 = C68853 * C9617;
    const double C91692 = C68853 * C2783;
    const double C91686 = C68853 * C2784;
    const double C133776 = C68853 * C935;
    const double C421 = C404 + C418;
    const double C501 = C484 + C498;
    const double C3034 = C3025 + C3026;
    const double C3864 = C3855 + C3856;
    const double C5544 = C5536 + C5537;
    const double C9853 = C9845 + C9846;
    const double C668 = C651 + C665;
    const double C746 = C729 + C743;
    const double C3292 = C3283 + C3284;
    const double C4121 = C4112 + C4113;
    const double C5782 = C5774 + C5775;
    const double C10091 = C10083 + C10084;
    const double C137405 = C137402 + C137388;
    const double C21090 = C139575 * C6447;
    const double C54273 = C139575 * C6447;
    const double C77528 = C139286 * C6447;
    const double C20388 = C20381 + C20382;
    const double C53629 = C53622 + C53623;
    const double C63892 = C63876 + C63877;
    const double C24146 = C24139 + C24140;
    const double C57237 = C57230 + C57231;
    const double C66726 = C66714 + C66715;
    const double C43423 = C43416 + C43417;
    const double C105173 = C105166 + C105167;
    const double C126018 = C126011 + C126012;
    const double C137447 = C137439 - C137421;
    const double C137957 = C137956 / C137060;
    const double C83105 = C83103 * C5913;
    const double C83326 = C83103 * C1962;
    const double C88927 = C83103 * C181;
    const double C91796 = C83103 * C12390;
    const double C130152 = C83103 * C5308;
    const double C136520 = C83103 * C2784;
    const double C137979 = C137978 / C137060;
    const double C68316 = C68310 + C68311;
    const double C68855 = C68849 + C68850;
    const double C71175 = C71171 + C71172;
    const double C134364 = C134359 + C134360;
    const double C137404 = C137401 + C137385;
    const double C137430 = -C137418;
    const double C15704 = C13796 * C6444;
    const double C16036 = C554 * C6444;
    const double C21093 = C13596 * C6444;
    const double C35456 = C307 * C6444;
    const double C35888 = C30813 * C6444;
    const double C49068 = C47234 * C6444;
    const double C54276 = C47034 * C6444;
    const double C77531 = C63381 * C6444;
    const double C97762 = C92850 * C6444;
    const double C83754 = C139588 * C27253;
    const double C116303 = C139588 * C27253;
    const double C138532 = C138528 / C137060;
    const double C86457 = C139586 * C24465;
    const double C118967 = C139586 * C24465;
    const double C138813 = C138809 / C137060;
    const double C68648 = C68643 + C68644;
    const double C69344 = C69341 + C69342;
    const double C83440 = C83435 + C83436;
    const double C86779 = C86774 + C86775;
    const double C115989 = C115984 + C115985;
    const double C119289 = C119284 + C119285;
    const double C132563 = C132560 + C132561;
    const double C71653 = C71649 + C71650;
    const double C82848 = C82843 + C82844;
    const double C115441 = C115436 + C115437;
    const double C134540 = C134537 + C134538;
    const double C14335 = C139575 * C858;
    const double C47767 = C139575 * C858;
    const double C65319 = C139286 * C858;
    const double C32100 = C139575 * C1794;
    const double C94115 = C139575 * C1794;
    const double C127383 = C139286 * C1794;
    const double C18254 = C13591 * C4236;
    const double C18246 = C139575 * C4236;
    const double C51573 = C47029 * C4236;
    const double C51565 = C139575 * C4236;
    const double C66713 = C139286 * C4236;
    const double C21092 = C13591 * C6451;
    const double C54275 = C47029 * C6451;
    const double C68848 = C139286 * C6451;
    const double C14342 = C14316 + C14317;
    const double C16360 = C16354 + C16355;
    const double C47774 = C47748 + C47749;
    const double C49702 = C49696 + C49697;
    const double C65321 = C65310 + C65311;
    const double C14350 = C14332 + C14333;
    const double C14346 = C14324 + C14325;
    const double C47782 = C47764 + C47765;
    const double C47778 = C47756 + C47757;
    const double C63891 = C63874 + C63875;
    const double C32107 = C32081 + C32082;
    const double C34081 = C34075 + C34076;
    const double C79440 = C79437 + C79438;
    const double C94122 = C94096 + C94097;
    const double C96026 = C96020 + C96021;
    const double C32115 = C32097 + C32098;
    const double C32111 = C32089 + C32090;
    const double C77540 = C77525 + C77526;
    const double C94130 = C94112 + C94113;
    const double C94126 = C94104 + C94105;
    const double C20389 = C20383 + C20384;
    const double C53630 = C53624 + C53625;
    const double C63893 = C63878 + C63879;
    const double C24147 = C24141 + C24142;
    const double C57238 = C57232 + C57233;
    const double C66727 = C66716 + C66717;
    const double C43424 = C43418 + C43419;
    const double C88853 = C88850 + C88851;
    const double C105174 = C105168 + C105169;
    const double C137462 = C137459 + C137437;
    const double C20374 = (3 * (C137366 + C137396 * C137646) +
                           C137474 * (2 * C138082 + C137474 * C138187)) /
                          C137060;
    const double C21082 =
        (C137366 + C137396 * C137646 + C138187 * C137768) / C137060;
    const double C24132 =
        (C137532 * (2 * C138082 + C137474 * C138187)) / C137060;
    const double C43409 = (3 * (C137366 + C137396 * C137768) +
                           C137532 * (2 * C138399 + C137532 * C138403)) /
                          C137060;
    const double C138580 = C138576 + C138563;
    const double C138878 = C138874 + C138866;
    const double C6092 =
        (2 * (C137474 * C137613 + C137386 * ae) +
         C137474 * (C137613 + C137474 * C138057 + C138054 * ae) +
         (C137386 + C137435 * C137646) * ae) /
        C137060;
    const double C6686 =
        (C137474 * C137613 + C137386 * ae + C138057 * C137768) / C137060;
    const double C8998 =
        (C137532 * (C137613 + C137474 * C138057 + C138054 * ae)) / C137060;
    const double C11153 =
        (2 * (C137532 * C137714 + C137386 * ae) +
         C137532 * (C137714 + C137532 * C138180 + C138177 * ae) +
         (C137386 + C137435 * C137768) * ae) /
        C137060;
    const double C1124 = (2 * C137603 + C137332 * C137613 +
                          C137474 * (C137474 * C137639 + C137451 * ae) +
                          C137474 * C137451 * ae) /
                         C137060;
    const double C2382 = (2 * C137704 + C137332 * C137714 +
                          C137532 * (C137532 * C137740 + C137451 * ae) +
                          C137532 * C137451 * ae) /
                         C137060;
    const double C2937 = (C137474 * (3 * C137613 + C137332 * C137639) +
                          (3 * C137386 + C137332 * C137451) * ae) /
                         C137060;
    const double C3943 = (C137532 * (3 * C137714 + C137332 * C137740) +
                          (3 * C137386 + C137332 * C137451) * ae) /
                         C137060;
    const double C4552 =
        (C137532 * (C137474 * C137639 + C137451 * ae)) / C137060;
    const double C4902 =
        (C137532 * C137474 * C137740 + C137474 * C137451 * ae) / C137060;
    const double C112 = 4 * (2 * C137355 + C137332 * C137386) +
                        C137332 * (3 * C137386 + C137332 * C137451);
    const double C835 = 2 * C137355 + C137332 * C137386 + C137451 * C137646;
    const double C1771 = 2 * C137355 + C137332 * C137386 + C137451 * C137768;
    const double C2705 = C137474 * (3 * C137386 + C137332 * C137451);
    const double C3453 = C137532 * (3 * C137386 + C137332 * C137451);
    const double C4226 = C137532 * C137474 * C137451;
    const double C5980 =
        (-2 * (C137474 * C137498 + C137386 * ce)) / C137082 -
        (C137474 * (C137474 * C138056 + C137498 + C138054 * ce)) / C137082 -
        ((C137386 + C137435 * C137646) * ce) / C137082;
    const double C6526 =
        -(C138056 * C137768 + C137474 * C137498 + C137386 * ce) / C137082;
    const double C8838 =
        -(C137532 * (C137474 * C138056 + C137498 + C138054 * ce)) / C137082;
    const double C10935 =
        (-2 * (C137532 * C137556 + C137386 * ce)) / C137082 -
        (C137532 * (C137532 * C138179 + C137556 + C138177 * ce)) / C137082 -
        ((C137386 + C137435 * C137768) * ce) / C137082;
    const double C138257 = C137618 + C138255;
    const double C138498 = C137719 + C138496;
    const double C138256 = C138254 + C137503;
    const double C138497 = C138495 + C137561;
    const double C27250 =
        (2 * (C137532 * C138108 + C138048 * ae) +
         C137532 * (C138108 + C137532 * C138393 + C138388 * ae) +
         (C138048 + C138240 * C137768) * ae) /
        C137060;
    const double C26974 =
        (-2 * (C137532 * C138107 + C138048 * ce)) / C137082 -
        (C137532 * (C137532 * C138392 + C138107 + C138388 * ce)) / C137082 -
        ((C138048 + C138240 * C137768) * ce) / C137082;
    const double C137461 = C137458 + C137434;
    const double C20372 =
        (-3 * (C137395 * C137646 + C137365)) / C137082 +
        C137474 * ((-2 * C138097) / C137082 - (C137474 * C138204) / C137082);
    const double C21080 =
        -(C138204 * C137768 + C137395 * C137646 + C137365) / C137082;
    const double C24130 =
        C137532 * ((-2 * C138097) / C137082 - (C137474 * C138204) / C137082);
    const double C43407 =
        (-3 * (C137395 * C137768 + C137365)) / C137082 +
        C137532 * ((-2 * C138426) / C137082 - (C137532 * C138430) / C137082);
    const double C138579 = C138573 + C138560;
    const double C88921 =
        (-3 * (C138222 * C137768 + C138043)) / C137082 +
        C137532 * ((-2 * C138747) / C137082 - (C137532 * C138752) / C137082);
    const double C138877 = C138873 + C138862;
    const double C137801 = -C137800;
    const double C137879 = -C137878;
    const double C137955 = C137952 / C137333;
    const double C26836 =
        (((-2 * C137532 * C137948) / C137082 -
          (C137532 * (C137474 * C137433 * C137768 + C137948)) / C137082) *
         ae) /
            C137060 -
        ((2 * C137532 * C137947 +
          C137532 * (C137947 + C137474 * C137436 * C137768)) *
         ce) /
            C137333 +
        C137332 * ((-2 * C137994) / C137333 +
                   C137532 * ((-(C137474 *
                                 (C137413 * C137414 +
                                  C137340 * bs[7] * std::pow(C137336, 7)) *
                                 C137341 * C137768) /
                               C137082) /
                                  C137060 -
                              C137949 / C137333));
    const double C88846 =
        3 * ((-(C137949 * C137768) / C137082) / C137060 - C137794 / C137333) +
        C137532 * ((-2 * C137994) / C137333 +
                   C137532 * ((-(C137474 *
                                 (C137413 * C137414 +
                                  C137340 * bs[7] * std::pow(C137336, 7)) *
                                 C137341 * C137768) /
                               C137082) /
                                  C137060 -
                              C137949 / C137333));
    const double C18256 = C139575 * C4237;
    const double C51575 = C139575 * C4237;
    const double C78536 = C139286 * C4237;
    const double C21094 = C139575 * C6450;
    const double C54277 = C139575 * C6450;
    const double C77532 = C139286 * C6450;
    const double C83102 = C139286 * C26837;
    const double C137977 = C137974 / C137333;
    const double C137665 = -C137664;
    const double C138250 = C138244 / C137333;
    const double C27114 =
        (((-2 * C137532 * C137503) / C137082 -
          (C137532 * (C138239 * C137768 + C137503)) / C137082) *
         ae) /
            C137060 -
        ((2 * C137532 * C137618 + C137532 * (C137618 + C138242 * C137768)) *
         ce) /
            C137333 +
        C137474 * ((-2 * C138334) / C137333 +
                   C137532 * ((-(C137332 *
                                 (C137413 * C137414 +
                                  C137646 * bs[7] * std::pow(C137336, 7)) *
                                 C137341 * C137768) /
                               C137082) /
                                  C137060 -
                              C138238 / C137333));
    const double C43723 =
        3 * ((-(C138238 * C137768) / C137082) / C137060 - C138046 / C137333) +
        C137532 * ((-2 * C138334) / C137333 +
                   C137532 * ((-(C137332 *
                                 (C137413 * C137414 +
                                  C137646 * bs[7] * std::pow(C137336, 7)) *
                                 C137341 * C137768) /
                               C137082) /
                                  C137060 -
                              C138238 / C137333));
    const double C138653 = -C138652;
    const double C138689 = C138687 / C137333;
    const double C137787 = -C137786;
    const double C27389 =
        2 * ((-(C138108 * ce) / C137082) / C137060 - (ae * C138107) / C137333 -
             (C137532 * C138386) / C137333) -
        (ae * (C137532 * C138392 + C138107 + C138388 * ce)) / C137333 -
        ((C138108 + C137532 * C138393 + C138388 * ae) * ce) / C137333 +
        C137532 * ((-(ae * C138392) / C137082) / C137060 - C138386 / C137333 -
                   (C138393 * ce) / C137333 +
                   C137532 * ((-(C138389 * ce) / C137082) / C137060 -
                              (ae * C138387) / C137333 -
                              (C137532 * C137474 * C137332 *
                               (C137413 * C137414 +
                                C137768 * bs[7] * std::pow(C137336, 7)) *
                               C137341) /
                                  C137333));
    const double C138488 = C138483 / C137333;
    const double C138638 = -C138637;
    const double C138767 = C138761 / C137333;
    const double C73536 =
        (2 * (C137532 * C138285 + C138224 * ae) +
         C137532 * (C138285 + C137532 * C138713 + C138710 * ae) +
         (C138224 + C138561 * C137768) * ae) /
        C137060;
    const double C69336 = (2 * C138105 + C137474 * C138285 +
                           C137532 * (C137532 * C138630 + C138575 * ae) +
                           C137532 * C138575 * ae) /
                          C137060;
    const double C71643 = (C137532 * (3 * C138285 + C137474 * C138630) +
                           (3 * C138224 + C137474 * C138575) * ae) /
                          C137060;
    const double C68299 = 4 * (2 * C138041 + C137474 * C138224) +
                          C137474 * (3 * C138224 + C137474 * C138575);
    const double C68836 = 2 * C138041 + C137474 * C138224 + C138575 * C137768;
    const double C71165 = C137532 * (3 * C138224 + C137474 * C138575);
    const double C73330 =
        (-2 * (C137532 * C138275 + C138224 * ce)) / C137082 -
        (C137532 * (C137532 * C138712 + C138275 + C138710 * ce)) / C137082 -
        ((C138224 + C138561 * C137768) * ce) / C137082;
    const double C138774 = C138380 + C138772;
    const double C138773 = C138771 + C138378;
    const double C134353 = 4 * (2 * C138165 + C137532 * C138469) +
                           C137532 * (3 * C138469 + C137532 * C138864);
    const double C663 = C658 + C659;
    const double C137520 = C137517 / C137060;
    const double C32954 = C32949 + C32950;
    const double C94901 = C94896 + C94897;
    const double C16142 = C139457 * C7001;
    const double C36029 = C139588 * C7001;
    const double C97903 = C139588 * C7001;
    const double C19249 = C139457 * C9313;
    const double C31856 = C139588 * C9313;
    const double C93871 = C139588 * C9313;
    const double C14822 = C13796 * C5981;
    const double C15177 = C554 * C5981;
    const double C20461 = C13596 * C5981;
    const double C48254 = C47234 * C5981;
    const double C53698 = C47034 * C5981;
    const double C63995 = C63381 * C5981;
    const double C15820 = C13796 * C6527;
    const double C16141 = C554 * C6527;
    const double C21201 = C13596 * C6527;
    const double C35604 = C307 * C6527;
    const double C36028 = C30813 * C6527;
    const double C49184 = C47234 * C6527;
    const double C54380 = C47034 * C6527;
    const double C77665 = C63381 * C6527;
    const double C97902 = C92850 * C6527;
    const double C18823 = C13796 * C8839;
    const double C19248 = C554 * C8839;
    const double C24251 = C13596 * C8839;
    const double C31520 = C307 * C8839;
    const double C31855 = C30813 * C8839;
    const double C52142 = C47234 * C8839;
    const double C57338 = C47034 * C8839;
    const double C66842 = C63381 * C8839;
    const double C93870 = C92850 * C8839;
    const double C138234 = C138231 + C138223;
    const double C138564 = -C138554;
    const double C134425 = C134422 + C134423;
    const double C138832 = C138828 / C137060;
    const double C496 = C491 + C492;
    const double C137578 = C137575 / C137060;
    const double C14937 = C14932 + C14933;
    const double C48369 = C48364 + C48365;
    const double C32717 = C307 * C10936;
    const double C33059 = C30813 * C10936;
    const double C43572 = C13596 * C10936;
    const double C95006 = C92850 * C10936;
    const double C105314 = C47034 * C10936;
    const double C126181 = C63381 * C10936;
    const double C68431 = C68429 + C68430;
    const double C69034 = C69031 + C69032;
    const double C71341 = C71338 + C71339;
    const double C83327 = C63381 * C26975;
    const double C83963 = C30813 * C26975;
    const double C89222 = C47234 * C26975;
    const double C116512 = C92850 * C26975;
    const double C121676 = C13796 * C26975;
    const double C130475 = C307 * C26975;
    const double C138603 = C138600 / C137060;
    const double C138479 = C138476 + C138468;
    const double C138856 = -C138843;
    const double C343 = C333 + C334;
    const double C2944 = C2940 + C2941;
    const double C13830 = C13814 + C13815;
    const double C47268 = C47252 + C47253;
    const double C1156 = C1146 + C1147;
    const double C16676 = C16668 + C16669;
    const double C50018 = C50010 + C50011;
    const double C3692 = C3688 + C3689;
    const double C2092 = C2082 + C2083;
    const double C4568 = C4562 + C4563;
    const double C17603 = C17595 + C17596;
    const double C50924 = C50916 + C50917;
    const double C83647 = C83643 + C83644;
    const double C116196 = C116192 + C116193;
    const double C132725 = C132723 + C132724;
    const double C138572 = C138565 - C137510;
    const double C137634 = C137631 / C137060;
    const double C15935 = C15930 + C15931;
    const double C35752 = C35749 + C35750;
    const double C49299 = C49294 + C49295;
    const double C18962 = C18959 + C18960;
    const double C31627 = C31625 + C31626;
    const double C52281 = C52278 + C52279;
    const double C14703 = C139586 * C6093;
    const double C48135 = C139586 * C6093;
    const double C15701 = C139586 * C6687;
    const double C35455 = C139442 * C6687;
    const double C49065 = C139586 * C6687;
    const double C18680 = C139586 * C8999;
    const double C31412 = C139442 * C8999;
    const double C51999 = C139586 * C8999;
    const double C32601 = C32487 * C181;
    const double C32716 = C32487 * C1962;
    const double C43652 = C32487 * C5913;
    const double C45782 = C32487 * C12390;
    const double C126259 = C32487 * C827;
    const double C135995 = C32487 * C137101;
    const double C138235 = C138232 + C138226;
    const double C89079 = C89072 + C89073;
    const double C121535 = C121528 + C121529;
    const double C130313 = C130308 + C130309;
    const double C134539 = C134535 + C134536;
    const double C138665 = C138663 / C137060;
    const double C83542 = C139586 * C21514;
    const double C116091 = C139586 * C21514;
    const double C132646 = C139442 * C21514;
    const double C15821 = C139586 * C6767;
    const double C35605 = C139442 * C6767;
    const double C49185 = C139586 * C6767;
    const double C18824 = C139586 * C9079;
    const double C31521 = C139442 * C9079;
    const double C52143 = C139586 * C9079;
    const double C32603 = C139442 * C11048;
    const double C89152 = C139586 * C27115;
    const double C121607 = C139586 * C27115;
    const double C130396 = C139442 * C27115;
    const double C134597 = C139442 * C43724;
    const double C416 = C411 + C412;
    const double C1257 = C1246 + C1247;
    const double C14826 = C14820 + C14821;
    const double C14824 = C14816 + C14817;
    const double C48258 = C48252 + C48253;
    const double C48256 = C48248 + C48249;
    const double C1258 = C1251 + C1252;
    const double C13914 = C13904 + C13905;
    const double C16782 = C16778 + C16779;
    const double C47352 = C47342 + C47343;
    const double C50124 = C50120 + C50121;
    const double C2189 = C2180 + C2181;
    const double C17709 = C17705 + C17706;
    const double C51030 = C51026 + C51027;
    const double C2190 = C2183 + C2184;
    const double C15824 = C15818 + C15819;
    const double C49188 = C49182 + C49183;
    const double C4682 = C4675 + C4676;
    const double C15823 = C15816 + C15817;
    const double C18825 = C18821 + C18822;
    const double C49187 = C49180 + C49181;
    const double C52144 = C52140 + C52141;
    const double C38169 = C38163 + C38164;
    const double C78025 = C78019 + C78020;
    const double C83543 = C83539 + C83540;
    const double C110698 = C110692 + C110693;
    const double C116092 = C116088 + C116089;
    const double C41153 = C41151 + C41152;
    const double C80933 = C80929 + C80930;
    const double C86564 = C86560 + C86561;
    const double C113534 = C113530 + C113531;
    const double C119074 = C119070 + C119071;
    const double C43729 = C43727 + C43728;
    const double C89153 = C89149 + C89150;
    const double C121608 = C121604 + C121605;
    const double C590 = C580 + C581;
    const double C3202 = C3198 + C3199;
    const double C1478 = C1468 + C1469;
    const double C3950 = C3946 + C3947;
    const double C30847 = C30831 + C30832;
    const double C92884 = C92868 + C92869;
    const double C2414 = C2404 + C2405;
    const double C34712 = C34704 + C34705;
    const double C96636 = C96628 + C96629;
    const double C4918 = C4912 + C4913;
    const double C33761 = C33753 + C33754;
    const double C95706 = C95698 + C95699;
    const double C138872 = C138868 - C137568;
    const double C137735 = C137732 / C137060;
    const double C16038 = C16034 + C16035;
    const double C35892 = C35884 + C35885;
    const double C97766 = C97758 + C97759;
    const double C32830 = C139588 * C11154;
    const double C94777 = C139588 * C11154;
    const double C15176 = C15064 * C936;
    const double C15291 = C15064 * C244;
    const double C20831 = C15064 * C5913;
    const double C22749 = C15064 * C7237;
    const double C64406 = C15064 * C827;
    const double C70043 = C15064 * C137101;
    const double C19245 = C19109 * C2784;
    const double C19390 = C19109 * C3608;
    const double C23897 = C19109 * C5308;
    const double C24773 = C19109 * C5913;
    const double C26761 = C19109 * C9617;
    const double C67366 = C19109 * C827;
    const double C70892 = C19109 * C137101;
    const double C68647 = C68641 + C68642;
    const double C69343 = C69339 + C69340;
    const double C86777 = C86770 + C86771;
    const double C119287 = C119280 + C119281;
    const double C71652 = C71647 + C71648;
    const double C82846 = C82839 + C82840;
    const double C115439 = C115432 + C115433;
    const double C83750 = C139588 * C27251;
    const double C116299 = C139588 * C27251;
    const double C138628 = C138625 / C137060;
    const double C138480 = C138477 + C138471;
    const double C68759 = C139457 * C20974;
    const double C69506 = C139457 * C21933;
    const double C86985 = C139588 * C21933;
    const double C119495 = C139588 * C21933;
    const double C71814 = C139457 * C24979;
    const double C82990 = C139588 * C24979;
    const double C115583 = C139588 * C24979;
    const double C15293 = C139457 * C6364;
    const double C16249 = C139457 * C7078;
    const double C36165 = C139588 * C7078;
    const double C98039 = C139588 * C7078;
    const double C19394 = C139457 * C9390;
    const double C31966 = C139588 * C9390;
    const double C93981 = C139588 * C9390;
    const double C83964 = C139588 * C27388;
    const double C116513 = C139588 * C27388;
    const double C741 = C736 + C737;
    const double C1680 = C1668 + C1669;
    const double C33971 = C33967 + C33968;
    const double C95916 = C95912 + C95913;
    const double C1682 = C1675 + C1676;
    const double C31969 = C31963 + C31964;
    const double C93984 = C93978 + C93979;
    const double C2617 = C2606 + C2607;
    const double C33063 = C33057 + C33058;
    const double C33061 = C33053 + C33054;
    const double C95010 = C95004 + C95005;
    const double C95008 = C95000 + C95001;
    const double C2618 = C2611 + C2612;
    const double C31015 = C31005 + C31006;
    const double C34922 = C34918 + C34919;
    const double C93052 = C93042 + C93043;
    const double C96846 = C96842 + C96843;
    const double C5148 = C5141 + C5142;
    const double C31967 = C31959 + C31960;
    const double C36166 = C36162 + C36163;
    const double C93982 = C93974 + C93975;
    const double C98040 = C98036 + C98037;
    const double C20979 = C20977 + C20978;
    const double C82991 = C82987 + C82988;
    const double C115584 = C115580 + C115581;
    const double C21943 = C21941 + C21942;
    const double C81483 = C81479 + C81480;
    const double C83965 = C83961 + C83962;
    const double C114084 = C114080 + C114081;
    const double C116514 = C116510 + C116511;
    const double C24987 = C24985 + C24986;
    const double C77411 = C77405 + C77406;
    const double C86986 = C86982 + C86983;
    const double C110172 = C110166 + C110167;
    const double C119496 = C119492 + C119493;
    const double C137403 = C137393 - C137400;
    const double C138233 = C138230 - C138221;
    const double C138478 = C138475 - C138466;
    const double C68300 =
        4 * ((-2 * C138099) / C137082 - (C137474 * C138209) / C137082) +
        C137474 * ((-3 * C138209) / C137082 + C137474 * C138539);
    const double C68837 = (-2 * C138099) / C137082 -
                          (C137474 * C138209) / C137082 + C138539 * C137768;
    const double C71166 =
        C137532 * ((-3 * C138209) / C137082 + C137474 * C138539);
    const double C134354 =
        4 * ((-2 * C138432) / C137082 - (C137532 * C138436) / C137082) +
        C137532 * ((-3 * C138436) / C137082 + C137532 * C138820);
    const double C4670 =
        (C137532 * C137527 * ae) / C137060 -
        (C137532 * C137639 * ce) / C137333 +
        C137474 * C137532 *
            ((-2 * C137332 * C137662) / C137333 +
             C137332 * ((-((C137413 * C137414 +
                            C137646 * bs[7] * std::pow(C137336, 7)) *
                           C137341 * C137340) /
                         C137082) /
                            C137060 -
                        C137662 / C137333));
    const double C5020 =
        ((C137474 * C137527 - (C137451 * ce) / C137082) * ae) / C137060 +
        C137532 * (C137474 * ((-2 * C137332 * C137759) / C137333 +
                              C137332 * ((-(std::pow(C137336, 7) * bs[7] *
                                            C137749 * C137340) /
                                          C137082) /
                                             C137060 -
                                         C137759 / C137333)) -
                   (C137740 * ce) / C137333);
    const double C187 =
        4 * ((-2 * C137488) / C137082 - (C137332 * C137498) / C137082) +
        C137332 * ((-3 * C137498) / C137082 + C137332 * C137527);
    const double C944 =
        (-2 * C137488) / C137082 - (C137332 * C137498) / C137082 +
        C137474 * (C137474 * C137527 - (C137451 * ce) / C137082) -
        (C137474 * C137451 * ce) / C137082;
    const double C1877 = (-2 * C137488) / C137082 -
                         (C137332 * C137498) / C137082 + C137527 * C137768;
    const double C2785 =
        C137474 * ((-3 * C137498) / C137082 + C137332 * C137527) -
        ((3 * C137386 + C137332 * C137451) * ce) / C137082;
    const double C3531 =
        C137532 * ((-3 * C137498) / C137082 + C137332 * C137527);
    const double C4340 =
        C137532 * (C137474 * C137527 - (C137451 * ce) / C137082);
    const double C134417 =
        4 * ((-2 * C138450) / C137082 - (C137532 * C138454) / C137082) +
        C137532 * ((-3 * C138454) / C137082 + C137532 * C138839);
    const double C4786 =
        ((C137532 * C137585 - (C137451 * ce) / C137082) * ae) / C137060 +
        C137474 * (C137532 * ((-2 * C137332 * C137683) / C137333 +
                              C137332 * ((-(std::pow(C137336, 7) * bs[7] *
                                            C137673 * C137340) /
                                          C137082) /
                                             C137060 -
                                         C137683 / C137333)) -
                   (C137639 * ce) / C137333);
    const double C5136 =
        (C137474 * C137585 * ae) / C137060 -
        (C137474 * C137740 * ce) / C137333 +
        C137532 * C137474 *
            ((-2 * C137332 * C137784) / C137333 +
             C137332 * ((-((C137413 * C137414 +
                            C137768 * bs[7] * std::pow(C137336, 7)) *
                           C137341 * C137340) /
                         C137082) /
                            C137060 -
                        C137784 / C137333));
    const double C250 =
        4 * ((-2 * C137546) / C137082 - (C137332 * C137556) / C137082) +
        C137332 * ((-3 * C137556) / C137082 + C137332 * C137585);
    const double C1034 = (-2 * C137546) / C137082 -
                         (C137332 * C137556) / C137082 + C137585 * C137646;
    const double C1970 =
        (-2 * C137546) / C137082 - (C137332 * C137556) / C137082 +
        C137532 * (C137532 * C137585 - (C137451 * ce) / C137082) -
        (C137532 * C137451 * ce) / C137082;
    const double C2861 =
        C137474 * ((-3 * C137556) / C137082 + C137332 * C137585);
    const double C3609 =
        C137532 * ((-3 * C137556) / C137082 + C137332 * C137585) -
        ((3 * C137386 + C137332 * C137451) * ce) / C137082;
    const double C4446 =
        C137532 * C137474 * C137585 - (C137474 * C137451 * ce) / C137082;
    const double C68424 =
        4 * ((-2 * C138104) / C137082 - (C137474 * C138275) / C137082) +
        C137474 * ((-3 * C138275) / C137082 + C137474 * C138608);
    const double C69016 =
        (-2 * C138104) / C137082 - (C137474 * C138275) / C137082 +
        C137532 * (C137532 * C138608 - (C138575 * ce) / C137082) -
        (C137532 * C138575 * ce) / C137082;
    const double C71331 =
        C137532 * ((-3 * C138275) / C137082 + C137474 * C138608) -
        ((3 * C138224 + C137474 * C138575) * ce) / C137082;
    const double C137501 = C137500 - C137493;
    const double C138196 = C138195 - C138190;
    const double C137526 = C137524 - C137510;
    const double C138514 = C138512 - C138505;
    const double C138783 = C138782 - C137504;
    const double C130307 = C38043 + C38042;
    const double C137616 = C137615 - C137608;
    const double C138212 = C138211 - C137374;
    const double C130316 = C130314 * C139300;
    const double C134534 = C43657 + C43656;
    const double C137640 = C137638 - C137625;
    const double C138538 = C138536 - C137421;
    const double C138649 = C138648 - C137619;
    const double C138681 = C138680 / C137060;
    const double C137559 = C137558 - C137551;
    const double C138412 = C138411 - C138190;
    const double C137584 = C137582 - C137568;
    const double C138522 = C138521 - C137562;
    const double C138726 = C138725 / C137060;
    const double C138795 = C138793 - C138505;
    const double C502 = C499 + C489;
    const double C138278 = C138277 - C137551;
    const double C138340 = C138339 - C137608;
    const double C3115 = C1362 + C1348;
    const double C137688 = C137687 - C137682;
    const double C138269 = C138268 / C137060;
    const double C138346 = C138345 / C137060;
    const double C138607 = C138604 - C137568;
    const double C138666 = C138664 - C137625;
    const double C68639 = C20826 + C20825;
    const double C137717 = C137716 - C137709;
    const double C138439 = C138438 - C137374;
    const double C68640 = C20836 + C20835;
    const double C71646 = C24778 + C24777;
    const double C137741 = C137739 - C137726;
    const double C138616 = C138615 - C137720;
    const double C138744 = C138743 / C137060;
    const double C138819 = C138817 - C137421;
    const double C669 = C666 + C656;
    const double C138288 = C138287 - C137709;
    const double C138457 = C138456 - C137493;
    const double C4030 = C2515 + C2501;
    const double C137764 = C137763 - C137758;
    const double C138298 = C138297 / C137060;
    const double C138447 = C138446 / C137060;
    const double C138632 = C138629 - C137726;
    const double C138838 = C138836 - C137510;
    const double C68427 = C64103 + C64085;
    const double C64107 = C64080 + C64102;
    const double C71334 = C66951 + C66952;
    const double C72720 = C72712 + C72713;
    const double C126098 = C77671 + C77681;
    const double C130151 = C83215 + C83214;
    const double C136519 = C91688 + C91687;
    const double C134420 = C88930 + C88924;
    const double C137106 = C137105 * ce;
    const double C826 =
        (-C137083 / C137082) / C137087 - (C137105 * de) / C137082;
    const double C137206 = C137204 * ce;
    const double C137252 = C137250 * ce;
    const double C65324 = C65320 * C2704;
    const double C65482 = C65320 * C244;
    const double C67644 = C65320 * C5232;
    const double C63902 = C63890 * C827;
    const double C64089 = C63890 * C244;
    const double C66963 = C63890 * C3607;
    const double C69589 = C63890 * C137101;
    const double C73941 = C63890 * C9616;
    const double C79441 = C79439 * C2704;
    const double C79541 = C79439 * C181;
    const double C87090 = C79439 * C5232;
    const double C77547 = C77537 * C827;
    const double C77661 = C77537 * C181;
    const double C90702 = C77537 * C137101;
    const double C128192 = C77537 * C2783;
    const double C131564 = C77537 * C5307;
    const double C66730 = C66722 * C827;
    const double C66956 = C66722 * C3608;
    const double C70296 = C66722 * C137101;
    const double C73935 = C66722 * C9617;
    const double C76773 = C66722 * C244;
    const double C77657 = C66722 * C181;
    const double C80517 = C66722 * C2783;
    const double C80511 = C66722 * C2784;
    const double C80655 = C66722 * C3607;
    const double C85129 = C66722 * C5307;
    const double C85123 = C66722 * C5308;
    const double C89822 = C66722 * C9616;
    const double C38056 = C38054 * C5913;
    const double C38160 = C38054 * C5308;
    const double C46568 = C38054 * C2784;
    const double C134004 = C38054 * C935;
    const double C41046 = C41044 * C5913;
    const double C41150 = C41044 * C7237;
    const double C42946 = C41044 * C936;
    const double C77667 = C68941 * C139328;
    const double C83218 = C68941 * C5228;
    const double C83216 = C68941 * C139377;
    const double C91691 = C68941 * C139560;
    const double C91689 = C68941 * C139377;
    const double C132407 = C68941 * C139592;
    const double C133777 = C68941 * C824;
    const double C80510 = C66845 * C139377;
    const double C83212 = C66845 * C139377;
    const double C86247 = C66845 * C139592;
    const double C86243 = C66845 * C7158;
    const double C88081 = C66845 * C824;
    const double C88077 = C66845 * C825;
    const double C63899 = C63887 * C139305;
    const double C65307 = C63887 * C139590;
    const double C67643 = C63887 * C5226;
    const double C69586 = C63887 * C139305;
    const double C63901 = C63889 * C821;
    const double C65313 = C63889 * C139589;
    const double C67647 = C63889 * C5225;
    const double C68307 = C63889 * C139300;
    const double C69588 = C63889 * C139552;
    const double C77546 = C77536 * C139305;
    const double C79434 = C77536 * C139590;
    const double C84982 = C77536 * C139305;
    const double C87089 = C77536 * C5226;
    const double C77548 = C77538 * C821;
    const double C83095 = C77538 * C139300;
    const double C90703 = C77538 * C139552;
    const double C127377 = C77538 * C139589;
    const double C133023 = C77538 * C5225;
    const double C66731 = C66723 * C821;
    const double C68843 = C66723 * C139300;
    const double C70297 = C66723 * C139552;
    const double C78530 = C66723 * C139589;
    const double C81584 = C66723 * C5225;
    const double C419 = C415 * C139328;
    const double C3030 = C415 * C139560;
    const double C5541 = C415 * C5228;
    const double C1260 = C1256 * C824;
    const double C3024 = C1256 * C139377;
    const double C5535 = C1256 * C139377;
    const double C7464 = C1256 * C139592;
    const double C2192 = C2188 * C139328;
    const double C4673 = C2188 * C139560;
    const double C8272 = C2188 * C5228;
    const double C31516 = C2188 * C823;
    const double C39057 = C2188 * C139591;
    const double C32608 = C32605 * C139328;
    const double C38161 = C32605 * C5228;
    const double C46569 = C32605 * C139560;
    const double C132641 = C32605 * C139591;
    const double C134003 = C32605 * C823;
    const double C35610 = C35606 * C139377;
    const double C38159 = C35606 * C139377;
    const double C41149 = C35606 * C139592;
    const double C42945 = C35606 * C824;
    const double C744 = C740 * C139339;
    const double C4117 = C740 * C139561;
    const double C10088 = C740 * C9466;
    const double C1685 = C1681 * C139339;
    const double C5139 = C1681 * C139561;
    const double C12157 = C1681 * C9466;
    const double C16244 = C1681 * C1761;
    const double C29450 = C1681 * C139593;
    const double C15298 = C15295 * C139339;
    const double C24983 = C15295 * C139561;
    const double C26758 = C15295 * C9466;
    const double C69501 = C15295 * C1761;
    const double C75876 = C15295 * C139593;
    const double C2620 = C2616 * C1762;
    const double C4111 = C2616 * C139403;
    const double C10082 = C2616 * C139403;
    const double C12851 = C2616 * C139594;
    const double C19399 = C19395 * C139403;
    const double C21939 = C19395 * C1762;
    const double C26756 = C19395 * C139403;
    const double C30340 = C19395 * C139594;
    const double C423 = C421 * C139457;
    const double C503 = C501 * C139457;
    const double C3036 = C3034 - C3027;
    const double C3866 = C3864 - C3857;
    const double C5545 = C5544 - C5538;
    const double C9854 = C9853 - C9847;
    const double C3294 = C3292 - C3285;
    const double C4123 = C4121 - C4114;
    const double C5783 = C5782 - C5776;
    const double C10092 = C10091 - C10085;
    const double C121 =
        (3 * (C137347 + C137332 * C137366 + C137355 * ae) +
         C137332 * (2 * C137366 + C137332 * C137405 + C137386 * ae) +
         (2 * C137355 + C137332 * C137386) * ae) /
        C137060;
    const double C838 =
        (C137474 * (2 * C137366 + C137332 * C137405 + C137386 * ae)) / C137060;
    const double C846 =
        (C137347 + C137332 * C137366 + C137355 * ae + C137405 * C137646) /
        C137060;
    const double C1774 =
        (C137532 * (2 * C137366 + C137332 * C137405 + C137386 * ae)) / C137060;
    const double C1782 =
        (C137347 + C137332 * C137366 + C137355 * ae + C137405 * C137768) /
        C137060;
    const double C4229 = (C137532 * C137474 * C137405) / C137060;
    const double C21096 = C21089 + C21090;
    const double C54279 = C54272 + C54273;
    const double C77541 = C77527 + C77528;
    const double C63904 = C63892 * C827;
    const double C64092 = C63892 * C244;
    const double C69591 = C63892 * C137101;
    const double C66734 = C66726 * C827;
    const double C66961 = C66726 * C3608;
    const double C70300 = C66726 * C137101;
    const double C73939 = C66726 * C9617;
    const double C76775 = C66726 * C244;
    const double C80515 = C66726 * C2784;
    const double C85127 = C66726 * C5308;
    const double C126021 = C126018 * C827;
    const double C126100 = C126018 * C181;
    const double C135765 = C126018 * C137101;
    const double C137460 = C137447 - C137457;
    const double C137958 = C137957 - C137954;
    const double C138503 = C137957 - C137504;
    const double C137980 = C137979 - C137976;
    const double C138785 = C137979 - C137562;
    const double C68318 = C68316 * C5913;
    const double C68428 = C68316 * C244;
    const double C68859 = C68855 * C5913;
    const double C69030 = C68855 * C1962;
    const double C75429 = C68855 * C12390;
    const double C83217 = C68855 * C5308;
    const double C86348 = C68855 * C3608;
    const double C88186 = C68855 * C9617;
    const double C91690 = C68855 * C2784;
    const double C132408 = C68855 * C7237;
    const double C133778 = C68855 * C936;
    const double C71177 = C71175 * C5913;
    const double C71335 = C71175 * C3608;
    const double C72716 = C71175 * C9617;
    const double C82571 = C71175 * C244;
    const double C86248 = C71175 * C7237;
    const double C88082 = C71175 * C936;
    const double C134366 = C134364 * C5913;
    const double C134421 = C134364 * C181;
    const double C855 =
        2 * ((-(C137474 * C137360 * ce) / C137082) / C137060 -
             (ae * C137474 * C137359) / C137333 -
             (C137332 * C137794) / C137333) -
        (ae * C137474 * C137404) / C137333 -
        (C137474 * C137405 * ce) / C137333 +
        C137332 * ((-(ae * C137474 * C137395) / C137082) / C137060 -
                   C137794 / C137333 - (C137474 * C137396 * ce) / C137333 +
                   C137332 * ((-(C137474 * C137387 * ce) / C137082) / C137060 -
                              (ae * C137474 * C137384) / C137333 -
                              (C137332 * C137474 * C137448) / C137333));
    const double C1791 =
        2 * ((-(C137532 * C137360 * ce) / C137082) / C137060 -
             (ae * C137532 * C137359) / C137333 -
             (C137332 * C137872) / C137333) -
        (ae * C137532 * C137404) / C137333 -
        (C137532 * C137405 * ce) / C137333 +
        C137332 * ((-(ae * C137532 * C137395) / C137082) / C137060 -
                   C137872 / C137333 - (C137532 * C137396 * ce) / C137333 +
                   C137332 * ((-(C137532 * C137387 * ce) / C137082) / C137060 -
                              (ae * C137532 * C137384) / C137333 -
                              (C137332 * C137532 * C137448) / C137333));
    const double C122 =
        (-3 * (C137332 * C137365 + C137346 + C137355 * ce)) / C137082 +
        C137332 * ((-2 * C137365) / C137082 - (C137332 * C137404) / C137082 -
                   (C137386 * ce) / C137082) -
        ((2 * C137355 + C137332 * C137386) * ce) / C137082;
    const double C843 =
        C137474 * ((-2 * C137365) / C137082 - (C137332 * C137404) / C137082 -
                   (C137386 * ce) / C137082);
    const double C849 =
        -(C137404 * C137646 + C137332 * C137365 + C137346 + C137355 * ce) /
        C137082;
    const double C1779 =
        C137532 * ((-2 * C137365) / C137082 - (C137332 * C137404) / C137082 -
                   (C137386 * ce) / C137082);
    const double C1785 =
        -(C137404 * C137768 + C137332 * C137365 + C137346 + C137355 * ce) /
        C137082;
    const double C4232 = -(C137532 * C137474 * C137404) / C137082;
    const double C137438 = C137430 / C137060;
    const double C83758 = C83753 + C83754;
    const double C116307 = C116302 + C116303;
    const double C138535 = C138532 - C137619;
    const double C86461 = C86456 + C86457;
    const double C118971 = C118966 + C118967;
    const double C138816 = C138813 - C137720;
    const double C68650 = C68648 * C139300;
    const double C69346 = C69344 * C139300;
    const double C132565 = C132563 * C139300;
    const double C71655 = C71653 * C139300;
    const double C134542 = C134540 * C139300;
    const double C18263 = C18253 + C18254;
    const double C18259 = C18245 + C18246;
    const double C51582 = C51572 + C51573;
    const double C51578 = C51564 + C51565;
    const double C66725 = C66712 + C66713;
    const double C21097 = C21091 + C21092;
    const double C54280 = C54274 + C54275;
    const double C68854 = C68847 + C68848;
    const double C65325 = C65321 * C2699;
    const double C67645 = C65321 * C5227;
    const double C63903 = C63891 * C139305;
    const double C65315 = C63891 * C139590;
    const double C67649 = C63891 * C5226;
    const double C69590 = C63891 * C139305;
    const double C79442 = C79440 * C2699;
    const double C87091 = C79440 * C5227;
    const double C77550 = C77540 * C139305;
    const double C90705 = C77540 * C139305;
    const double C127379 = C77540 * C139590;
    const double C133025 = C77540 * C5226;
    const double C63905 = C63893 * C821;
    const double C68308 = C63893 * C139300;
    const double C69592 = C63893 * C139552;
    const double C66735 = C66727 * C821;
    const double C68841 = C66727 * C139300;
    const double C70301 = C66727 * C139552;
    const double C88855 = C88853 * C139300;
    const double C126013 = C88853 * C821;
    const double C135766 = C88853 * C139552;
    const double C137465 = C137332 * C137462;
    const double C138080 = C137474 * C137462;
    const double C5920 =
        (2 * C137474 * C137405 + C137474 * (C137405 + C137462 * C137646)) /
        C137060;
    const double C8758 = (C137532 * (C137405 + C137462 * C137646)) / C137060;
    const double C10819 =
        (2 * C137532 * C137405 + C137532 * (C137405 + C137462 * C137768)) /
        C137060;
    const double C138584 = C137474 * C138580;
    const double C138881 = C137532 * C138878;
    const double C138259 = C138257 + C138249;
    const double C138500 = C138498 + C138493;
    const double C138258 = C138256 + C138246;
    const double C138499 = C138497 + C138490;
    const double C137464 = C137332 * C137461;
    const double C138095 = C137474 * C137461;
    const double C4238 =
        2 * ((-(C137532 * C137947 * ce) / C137082) / C137060 -
             (ae * C137532 * C137948) / C137333 -
             (C137332 * C137994) / C137333) -
        (ae * C137532 * C137474 * C137461) / C137333 -
        (C137532 * C137474 * C137462 * ce) / C137333 +
        C137332 *
            ((-(ae * C137532 * C137474 * C137449) / C137082) / C137060 -
             C137994 / C137333 - (C137532 * C137474 * C137452 * ce) / C137333 +
             C137332 *
                 ((-(C137532 * C137474 * C137436 * ce) / C137082) / C137060 -
                  (ae * C137532 * C137474 * C137433) / C137333 -
                  (C137332 * C137532 * C137474 *
                   (C137413 * C137414 +
                    C137340 * bs[7] * std::pow(C137336, 7)) *
                   C137341) /
                      C137333));
    const double C5917 = (-2 * C137474 * C137404) / C137082 -
                         (C137474 * (C137461 * C137646 + C137404)) / C137082;
    const double C8755 = -(C137532 * (C137461 * C137646 + C137404)) / C137082;
    const double C10816 = (-2 * C137532 * C137404) / C137082 -
                          (C137532 * (C137461 * C137768 + C137404)) / C137082;
    const double C138583 = C137474 * C138579;
    const double C138880 = C137532 * C138877;
    const double C137802 = C137801 / C137060;
    const double C137880 = C137879 / C137060;
    const double C21098 = C21093 + C21094;
    const double C54281 = C54276 + C54277;
    const double C77542 = C77531 + C77532;
    const double C83104 = C83101 + C83102;
    const double C137666 = C137665 / C137060;
    const double C138654 = C138653 / C137060;
    const double C137788 = C137787 / C137060;
    const double C138639 = C138638 / C137060;
    const double C138776 = C138774 + C138766;
    const double C138775 = C138773 + C138763;
    const double C667 = C663 * C139328;
    const double C137523 = C137520 - C137504;
    const double C15181 = C15177 + C15178;
    const double C16143 = C16141 + C16142;
    const double C36031 = C36028 + C36029;
    const double C97905 = C97902 + C97903;
    const double C19251 = C19248 + C19249;
    const double C31860 = C31855 + C31856;
    const double C93875 = C93870 + C93871;
    const double C20457 =
        (-3 * (C137474 * C138043 + C137480 + C138041 * ce)) / C137082 +
        C137474 * ((-2 * C138043) / C137082 - (C137474 * C138234) / C137082 -
                   (C138224 * ce) / C137082) -
        ((2 * C138041 + C137474 * C138224) * ce) / C137082;
    const double C21197 =
        -(C138234 * C137768 + C137474 * C138043 + C137480 + C138041 * ce) /
        C137082;
    const double C24247 =
        C137532 * ((-2 * C138043) / C137082 - (C137474 * C138234) / C137082 -
                   (C138224 * ce) / C137082);
    const double C73278 = (-2 * C137532 * C138234) / C137082 -
                          (C137532 * (C138579 * C137768 + C138234)) / C137082;
    const double C138571 = C138564 / C137060;
    const double C134426 = C134425 * C139328;
    const double C138835 = C138832 - C137758;
    const double C500 = C496 * C139339;
    const double C137581 = C137578 - C137562;
    const double C32721 = C32717 + C32718;
    const double C68432 = C68431 * C139339;
    const double C69036 = C69034 * C1763;
    const double C75430 = C69034 * C12239;
    const double C86351 = C69034 * C139403;
    const double C88189 = C69034 * C139403;
    const double C71343 = C71341 * C139403;
    const double C72719 = C71341 * C139403;
    const double C82572 = C71341 * C139339;
    const double C83329 = C83327 + C83328;
    const double C138606 = C138603 - C137682;
    const double C43568 =
        (-3 * (C137532 * C138167 + C137538 + C138165 * ce)) / C137082 +
        C137532 * ((-2 * C138167) / C137082 - (C137532 * C138479) / C137082 -
                   (C138469 * ce) / C137082) -
        ((2 * C138165 + C137532 * C138469) * ce) / C137082;
    const double C138867 = C138856 / C137060;
    const double C410 = C343 * C181;
    const double C490 = C343 * C244;
    const double C3029 = C2944 * C2784;
    const double C3116 = C2944 * C244;
    const double C5540 = C2944 * C5308;
    const double C1253 = C1156 * C936;
    const double C1355 = C1156 * C244;
    const double C7471 = C1156 * C7237;
    const double C3769 = C3692 * C181;
    const double C3859 = C3692 * C3608;
    const double C9849 = C3692 * C9617;
    const double C30745 = C3692 * C244;
    const double C34399 = C3692 * C2704;
    const double C41952 = C3692 * C5232;
    const double C2185 = C2092 * C181;
    const double C2291 = C2092 * C1962;
    const double C12624 = C2092 * C12390;
    const double C32475 = C2092 * C827;
    const double C34602 = C2092 * C3608;
    const double C42154 = C2092 * C9617;
    const double C45578 = C2092 * C137101;
    const double C127622 = C2092 * C2704;
    const double C133254 = C2092 * C5232;
    const double C4677 = C4568 * C2784;
    const double C4793 = C4568 * C3608;
    const double C8275 = C4568 * C5308;
    const double C11858 = C4568 * C9617;
    const double C33653 = C4568 * C244;
    const double C35450 = C4568 * C827;
    const double C39986 = C4568 * C137101;
    const double C138578 = C138572 - C138557;
    const double C137637 = C137634 - C137619;
    const double C138243 = C137634 - C138237;
    const double C6149 =
        2 * ((-(C137603 * ce) / C137082) / C137060 - (ae * C137488) / C137333 -
             (C137474 * C138046) / C137333) -
        (ae * (C137474 * C138050 + C137488 + C138048 * ce)) / C137333 -
        ((C137603 + C137474 * C138051 + C138048 * ae) * ce) / C137333 +
        C137474 * ((-(ae * C138050) / C137082) / C137060 - C138046 / C137333 -
                   (C138051 * ce) / C137333 +
                   C137474 * (C137634 - C137508 / C137333 -
                              (C137474 * C137332 * C137662) / C137333));
    const double C35753 = C35752 * C139403;
    const double C44791 = C35752 * C139403;
    const double C31628 = C31627 * C139339;
    const double C14714 = C14702 + C14703;
    const double C48146 = C48134 + C48135;
    const double C15712 = C15700 + C15701;
    const double C35460 = C35454 + C35455;
    const double C49076 = C49064 + C49065;
    const double C18687 = C18679 + C18680;
    const double C31415 = C31411 + C31412;
    const double C52006 = C51998 + C51999;
    const double C24564 =
        2 * ((-(C137532 * C137601 * ce) / C137082) / C137060 -
             (ae * C137532 * C137486) / C137333 -
             (C137474 * C138332) / C137333) -
        (ae * C137532 * C138234) / C137333 -
        (C137532 * C138235 * ce) / C137333 +
        C137474 * ((-(ae * C137532 * C138222) / C137082) / C137060 -
                   C138332 / C137333 - (C137532 * C138225 * ce) / C137333 +
                   C137474 * ((-(C137532 * C137609 * ce) / C137082) / C137060 -
                              (ae * C137532 * C137494) / C137333 -
                              (C137474 * C137532 * C137662) / C137333));
    const double C20609 =
        (3 * (C137595 + C137474 * C138044 + C138041 * ae) +
         C137474 * (2 * C138044 + C137474 * C138235 + C138224 * ae) +
         (2 * C138041 + C137474 * C138224) * ae) /
        C137060;
    const double C21413 =
        (C137595 + C137474 * C138044 + C138041 * ae + C138235 * C137768) /
        C137060;
    const double C24463 =
        (C137532 * (2 * C138044 + C137474 * C138235 + C138224 * ae)) / C137060;
    const double C73382 =
        (2 * C137532 * C138235 + C137532 * (C138235 + C138580 * C137768)) /
        C137060;
    const double C130315 = C130313 * C5913;
    const double C130392 = C130313 * C5308;
    const double C136750 = C130313 * C2784;
    const double C134541 = C134539 * C5913;
    const double C134595 = C134539 * C181;
    const double C138667 = C138665 - C137682;
    const double C138690 = C138665 - C138688;
    const double C15825 = C15820 + C15821;
    const double C35609 = C35604 + C35605;
    const double C49189 = C49184 + C49185;
    const double C18826 = C18823 + C18824;
    const double C31522 = C31520 + C31521;
    const double C52145 = C52142 + C52143;
    const double C32606 = C32602 + C32603;
    const double C89154 = C89151 + C89152;
    const double C121609 = C121606 + C121607;
    const double C130398 = C130395 + C130396;
    const double C134598 = C134596 + C134597;
    const double C420 = C416 * C139328;
    const double C1261 = C1257 * C825;
    const double C7466 = C1257 * C7158;
    const double C1262 = C1258 * C824;
    const double C3028 = C1258 * C139377;
    const double C5539 = C1258 * C139377;
    const double C7470 = C1258 * C139592;
    const double C2193 = C2189 * C139328;
    const double C4678 = C2189 * C139560;
    const double C8276 = C2189 * C5228;
    const double C2194 = C2190 * C139328;
    const double C35602 = C2190 * C139560;
    const double C38166 = C2190 * C5228;
    const double C4684 = C4682 * C139377;
    const double C8274 = C4682 * C139377;
    const double C31518 = C4682 * C824;
    const double C39059 = C4682 * C139592;
    const double C38170 = C38169 * C139377;
    const double C46571 = C38169 * C139377;
    const double C132643 = C38169 * C139592;
    const double C134005 = C38169 * C824;
    const double C41154 = C41153 * C7158;
    const double C42947 = C41153 * C825;
    const double C43730 = C43729 * C139328;
    const double C130393 = C43729 * C5228;
    const double C136751 = C43729 * C139560;
    const double C657 = C590 * C181;
    const double C735 = C590 * C244;
    const double C3287 = C3202 * C2784;
    const double C3373 = C3202 * C244;
    const double C5778 = C3202 * C5308;
    const double C14138 = C3202 * C181;
    const double C16996 = C3202 * C2704;
    const double C20099 = C3202 * C5232;
    const double C1575 = C1478 * C936;
    const double C1677 = C1478 * C244;
    const double C7705 = C1478 * C7237;
    const double C15052 = C1478 * C827;
    const double C17100 = C1478 * C2784;
    const double C20203 = C1478 * C5308;
    const double C22643 = C1478 * C137101;
    const double C65792 = C1478 * C2704;
    const double C68100 = C1478 * C5232;
    const double C4027 = C3950 * C181;
    const double C4116 = C3950 * C3608;
    const double C10087 = C3950 * C9617;
    const double C2507 = C2414 * C181;
    const double C2613 = C2414 * C1962;
    const double C12858 = C2414 * C12390;
    const double C5027 = C4918 * C2784;
    const double C5143 = C4918 * C3608;
    const double C8577 = C4918 * C5308;
    const double C12160 = C4918 * C9617;
    const double C18011 = C4918 * C181;
    const double C19099 = C4918 * C827;
    const double C23763 = C4918 * C137101;
    const double C138876 = C138872 - C138859;
    const double C137738 = C137735 - C137720;
    const double C138482 = C137735 - C138262;
    const double C11263 =
        2 * ((-(C137704 * ce) / C137082) / C137060 - (ae * C137546) / C137333 -
             (C137532 * C138071) / C137333) -
        (ae * (C137532 * C138173 + C137546 + C138171 * ce)) / C137333 -
        ((C137704 + C137532 * C138174 + C138171 * ae) * ce) / C137333 +
        C137532 * ((-(ae * C138173) / C137082) / C137060 - C138071 / C137333 -
                   (C138174 * ce) / C137333 +
                   C137532 * (C137735 - C137566 / C137333 -
                              (C137532 * C137332 * C137784) / C137333));
    const double C16140 = C16038 * C181;
    const double C16247 = C16038 * C1962;
    const double C21727 = C16038 * C5913;
    const double C29453 = C16038 * C12390;
    const double C32841 = C32829 + C32830;
    const double C94788 = C94776 + C94777;
    const double C68649 = C68647 * C5913;
    const double C68757 = C68647 * C244;
    const double C69345 = C69343 * C5913;
    const double C69504 = C69343 * C1962;
    const double C75879 = C69343 * C12390;
    const double C71654 = C71652 * C5913;
    const double C71810 = C71652 * C3608;
    const double C73168 = C71652 * C9617;
    const double C83756 = C83749 + C83750;
    const double C116305 = C116298 + C116299;
    const double C138631 = C138628 - C137758;
    const double C138760 = C138628 - C138754;
    const double C43868 =
        (3 * (C137696 + C137532 * C138168 + C138165 * ae) +
         C137532 * (2 * C138168 + C137532 * C138480 + C138469 * ae) +
         (2 * C138165 + C137532 * C138469) * ae) /
        C137060;
    const double C68761 = C68758 + C68759;
    const double C69507 = C69505 + C69506;
    const double C86987 = C86984 + C86985;
    const double C119497 = C119494 + C119495;
    const double C71816 = C71813 + C71814;
    const double C82992 = C82989 + C82990;
    const double C115585 = C115582 + C115583;
    const double C15296 = C15292 + C15293;
    const double C16250 = C16248 + C16249;
    const double C36167 = C36164 + C36165;
    const double C98041 = C98038 + C98039;
    const double C19398 = C19393 + C19394;
    const double C31970 = C31965 + C31966;
    const double C93985 = C93980 + C93981;
    const double C83966 = C83963 + C83964;
    const double C116515 = C116512 + C116513;
    const double C745 = C741 * C139339;
    const double C1684 = C1680 * C139339;
    const double C5144 = C1680 * C139561;
    const double C12161 = C1680 * C9466;
    const double C1686 = C1682 * C139339;
    const double C19391 = C1682 * C139561;
    const double C26762 = C1682 * C9466;
    const double C2621 = C2617 * C1763;
    const double C12853 = C2617 * C12239;
    const double C2622 = C2618 * C1762;
    const double C4115 = C2618 * C139403;
    const double C10086 = C2618 * C139403;
    const double C12857 = C2618 * C139594;
    const double C5150 = C5148 * C139403;
    const double C12159 = C5148 * C139403;
    const double C16246 = C5148 * C1762;
    const double C29452 = C5148 * C139594;
    const double C20980 = C20979 * C139339;
    const double C71811 = C20979 * C139561;
    const double C73169 = C20979 * C9466;
    const double C21944 = C21943 * C1763;
    const double C30342 = C21943 * C12239;
    const double C24988 = C24987 * C139403;
    const double C26760 = C24987 * C139403;
    const double C69503 = C24987 * C1762;
    const double C75878 = C24987 * C139594;
    const double C129 =
        3 * ((-(ae * C137365) / C137082) / C137060 - C137364 / C137333 -
             (C137366 * ce) / C137333 + C137332 * C137403) +
        (((-2 * C137365) / C137082 - (C137332 * C137404) / C137082 -
          (C137386 * ce) / C137082) *
         ae) /
            C137060 -
        ((2 * C137366 + C137332 * C137405 + C137386 * ae) * ce) / C137333 +
        C137332 *
            (2 * C137403 - (ae * C137404) / C137333 - (C137405 * ce) / C137333 +
             C137332 * ((-(ae * C137395) / C137082) / C137060 -
                        C137394 / C137333 - (C137396 * ce) / C137333 +
                        C137332 * ((-(C137387 * ce) / C137082) / C137060 -
                                   (ae * C137384) / C137333 -
                                   (C137332 *
                                    (C137371 * C137372 +
                                     C137340 * bs[6] * std::pow(C137330, 6)) *
                                    C137341) /
                                       C137333)));
    const double C20678 =
        3 * ((-(ae * C138043) / C137082) / C137060 - C137651 / C137333 -
             (C138044 * ce) / C137333 + C137474 * C138233) +
        (((-2 * C138043) / C137082 - (C137474 * C138234) / C137082 -
          (C138224 * ce) / C137082) *
         ae) /
            C137060 -
        ((2 * C138044 + C137474 * C138235 + C138224 * ae) * ce) / C137333 +
        C137474 *
            (2 * C138233 - (ae * C138234) / C137333 - (C138235 * ce) / C137333 +
             C137474 * ((-(ae * C138222) / C137082) / C137060 - C137659 -
                        (C138225 * ce) / C137333 +
                        C137474 * ((-C137621 / C137082) / C137060 - C137510 -
                                   (C137474 * C137662) / C137333)));
    const double C44005 =
        3 * ((-(ae * C138167) / C137082) / C137060 - C137773 / C137333 -
             (C138168 * ce) / C137333 + C137532 * C138478) +
        (((-2 * C138167) / C137082 - (C137532 * C138479) / C137082 -
          (C138469 * ce) / C137082) *
         ae) /
            C137060 -
        ((2 * C138168 + C137532 * C138480 + C138469 * ae) * ce) / C137333 +
        C137532 *
            (2 * C138478 - (ae * C138479) / C137333 - (C138480 * ce) / C137333 +
             C137532 * ((-(ae * C138467) / C137082) / C137060 - C137781 -
                        (C138470 * ce) / C137333 +
                        C137532 * ((-C137722 / C137082) / C137060 - C137568 -
                                   (C137532 * C137784) / C137333)));
    const double C192 =
        3 * ((-(ae * C137488) / C137082) / C137060 - C137485 / C137333 +
             C137332 * C137501) +
        (((-2 * C137488) / C137082 - (C137332 * C137498) / C137082) * ae) /
            C137060 +
        C137332 *
            (2 * C137501 - (ae * C137498) / C137333 +
             C137332 * ((-(ae * C137332 * C137494) / C137082) / C137060 -
                        C137492 / C137333 +
                        C137332 * ((-(C137332 * C137414 * C137413 * C137481) /
                                    C137082) /
                                       C137060 -
                                   (ae * C137494) / C137333)));
    const double C945 =
        C137474 * ((-(ae * C137488) / C137082) / C137060 - C137485 / C137333 +
                   C137332 * C137501) -
        ((C137347 + C137332 * C137366 + C137355 * ae) * ce) / C137333;
    const double C949 =
        (-(C137332 * C137485) / C137082) / C137060 - (ae * C137480) / C137333 -
        (C137474 * C137366 * ce) / C137333 +
        C137474 * (C137474 * C137501 - (C137366 * ce) / C137333);
    const double C1879 = C137532 * ((-(ae * C137488) / C137082) / C137060 -
                                    C137485 / C137333 + C137332 * C137501);
    const double C1883 = (-(C137332 * C137485) / C137082) / C137060 -
                         (ae * C137480) / C137333 + C137501 * C137768;
    const double C4342 =
        C137532 * (C137474 * C137501 - (C137366 * ce) / C137333);
    const double C20459 =
        3 * ((-(C138084 * ce) / C137082) / C137060 - C137485 / C137333 +
             C137474 * C138196) -
        ((2 * C138084 + C137474 * C138193) * ce) / C137333 +
        C137474 *
            (2 * C138196 - (C138193 * ce) / C137333 +
             C137474 * (C137957 - C137504 +
                        C137474 * ((-(C137474 * C137509) / C137082) / C137060 -
                                   C137410 / C137333)));
    const double C21199 =
        (-(C138084 * ce) / C137082) / C137060 - C137485 / C137333 +
        C137474 * C138196 +
        (C137957 - C137504 +
         C137474 *
             ((-(C137474 * C137509) / C137082) / C137060 - C137410 / C137333)) *
            C137768;
    const double C24249 =
        C137532 *
        (2 * C138196 - (C138193 * ce) / C137333 +
         C137474 * (C137957 - C137504 +
                    C137474 * ((-(C137474 * C137509) / C137082) / C137060 -
                               C137410 / C137333)));
    const double C26907 =
        2 * C137532 * C138196 +
        C137532 * (C138196 + ((-(C137474 * C137509) / C137082) / C137060 -
                              C137410 / C137333) *
                                 C137768);
    const double C137528 = C137332 * C137526;
    const double C138184 = C137474 * C137526;
    const double C5984 =
        2 * (C137474 * C137501 - (C137366 * ce) / C137333) -
        ((C137366 + C137396 * C137646) * ce) / C137333 +
        C137474 * (C137501 - (C137474 * C137396 * ce) / C137333 +
                   C137474 * (C137474 * C137526 - C137419));
    const double C6530 = C137474 * C137501 - (C137366 * ce) / C137333 +
                         (C137474 * C137526 - C137419) * C137768;
    const double C8842 = C137532 * (C137501 - (C138082 * ce) / C137333 +
                                    C137474 * (C137474 * C137526 - C137419));
    const double C10879 =
        2 * C137532 * C137501 + C137532 * (C137501 + C137526 * C137768);
    const double C43493 =
        3 * (C137501 + C137526 * C137768) +
        C137532 *
            (2 * C137532 * C137526 +
             C137532 * (C137526 +
                        ((-(C137332 * std::pow(C137336, 7) * bs[7] * C137481) /
                          C137082) /
                             C137060 -
                         (ae * C137512) / C137333) *
                            C137768));
    const double C138515 = C137474 * C138514;
    const double C88922 =
        3 * (C138196 + C138514 * C137768) +
        C137532 *
            (2 * C137532 * C138514 +
             C137532 * (C138514 +
                        ((-(C137474 * std::pow(C137336, 7) * bs[7] * C137481) /
                          C137082) /
                             C137060 -
                         (C137436 * ce) / C137333) *
                            C137768));
    const double C134418 =
        4 * ((-2 * C137532 * C137492) / C137333 + C137532 * C138783) +
        C137532 *
            (3 * C138783 + C137532 * ((-2 * C137532 * C137509) / C137333 +
                                      C137532 * ((-(std::pow(C137336, 7) *
                                                    bs[7] * C137481 * C137768) /
                                                  C137082) /
                                                     C137060 -
                                                 C137509 / C137333)));
    const double C318 =
        3 * ((-(C137603 * ce) / C137082) / C137060 - C137600 / C137333 +
             C137332 * C137616) -
        ((2 * C137603 + C137332 * C137613) * ce) / C137333 +
        C137332 *
            (2 * C137616 - (C137613 * ce) / C137333 +
             C137332 * ((-(C137332 * C137609 * ce) / C137082) / C137060 -
                        C137607 / C137333 +
                        C137332 * ((-(C137332 * C137414 * C137413 * C137596) /
                                    C137082) /
                                       C137060 -
                                   (C137609 * ce) / C137333)));
    const double C1127 =
        C137474 * ((-(C137603 * ce) / C137082) / C137060 - C137600 / C137333 +
                   C137332 * C137616) -
        (ae * (C137332 * C137365 + C137346 + C137355 * ce)) / C137333;
    const double C1130 =
        (-(C137332 * C137600) / C137082) / C137060 - (C137595 * ce) / C137333 -
        (ae * C137474 * C137365) / C137333 +
        C137474 * (C137474 * C137616 - (ae * C137365) / C137333);
    const double C2063 = C137532 * ((-(C137603 * ce) / C137082) / C137060 -
                                    C137600 / C137333 + C137332 * C137616);
    const double C2066 = (-(C137332 * C137600) / C137082) / C137060 -
                         (C137595 * ce) / C137333 + C137616 * C137768;
    const double C4554 =
        C137474 * C137532 * C137616 - (ae * C137532 * C137365) / C137333;
    const double C20611 =
        3 * ((-(ae * C138099) / C137082) / C137060 - C137600 / C137333 +
             C137474 * C138212) +
        (((-2 * C138099) / C137082 - (C137474 * C138209) / C137082) * ae) /
            C137060 +
        C137474 *
            (2 * C138212 - (ae * C138209) / C137333 +
             C137474 * ((-C137951 / C137082) / C137060 - C137619 +
                        C137474 * ((-(C137474 * C137624) / C137082) / C137060 -
                                   C137421)));
    const double C137641 = C137332 * C137640;
    const double C138200 = C137474 * C137640;
    const double C138328 = C137532 * C137640;
    const double C6096 =
        2 * (C137474 * C137616 - (ae * C137365) / C137333) -
        (ae * (C137395 * C137646 + C137365)) / C137333 +
        C137474 * (C137616 - (ae * C137474 * C137395) / C137333 +
                   C137474 * (C137474 * C137640 - C137407 / C137333));
    const double C6690 = C137474 * (C137616 + C137640 * C137768) -
                         (ae * (C137395 * C137768 + C137365)) / C137333;
    const double C9002 =
        C137532 * C137616 - (ae * C137532 * C138097) / C137333 +
        C137474 *
            (C137474 * C137532 * C137640 - (ae * C137532 * C137395) / C137333);
    const double C10995 =
        2 * C137532 * C137616 + C137532 * (C137616 + C137640 * C137768);
    const double C21414 =
        C137616 + C137640 * C137768 -
        (ae * (C137474 * C137449 * C137768 + C138097)) / C137333 +
        C137474 *
            (C137474 * (C137640 +
                        ((-(C137332 * std::pow(C137336, 7) * bs[7] * C137596) /
                          C137082) /
                             C137060 -
                         (C137627 * ce) / C137333) *
                            C137768) -
             (ae * (C137449 * C137768 + C137395)) / C137333);
    const double C138540 = C137474 * C138538;
    const double C69111 =
        2 * (C137474 * C138649 - (ae * C138436) / C137333) -
        (ae * (C138531 * C137768 + C138209)) / C137333 +
        C137474 * (C138649 -
                   (ae * (C137474 * C137433 * C137768 + C137948)) / C137333 +
                   C137474 * (C137474 * ((-(std::pow(C137336, 7) * bs[7] *
                                            C137596 * C137768) /
                                          C137082) /
                                             C137060 -
                                         C137624 / C137333) -
                              (ae * (C137433 * C137768 + C137384)) / C137333));
    const double C73383 =
        (-2 * C138330) / C137333 + C137532 * C138649 +
        (((-2 * C137532 * C137948) / C137082 -
          (C137532 * (C137474 * C137433 * C137768 + C137948)) / C137082) *
         ae) /
            C137060 +
        C137474 * ((((-2 * C137970) / C137082 -
                     (C137532 * (C137433 * C137768 + C137384)) / C137082) *
                    ae) /
                       C137060 +
                   C137474 * ((-2 * C138677) / C137333 +
                              C137532 * ((-(std::pow(C137336, 7) * bs[7] *
                                            C137596 * C137768) /
                                          C137082) /
                                             C137060 -
                                         C137624 / C137333)));
    const double C89068 =
        (((-3 * C138436) / C137082 +
          C137532 * ((-2 * C137970) / C137082 -
                     (C137532 * (C137433 * C137768 + C137384)) / C137082)) *
         ae) /
            C137060 +
        C137474 *
            (3 * C138649 + C137532 * ((-2 * C138677) / C137333 +
                                      C137532 * ((-(std::pow(C137336, 7) *
                                                    bs[7] * C137596 * C137768) /
                                                  C137082) /
                                                     C137060 -
                                                 C137624 / C137333)));
    const double C134532 =
        4 * ((-2 * C138330) / C137333 + C137532 * C138649) +
        C137532 *
            (3 * C138649 + C137532 * ((-2 * C138677) / C137333 +
                                      C137532 * ((-(std::pow(C137336, 7) *
                                                    bs[7] * C137596 * C137768) /
                                                  C137082) /
                                                     C137060 -
                                                 C137624 / C137333)));
    const double C138682 = C138681 - C137976;
    const double C255 =
        3 * ((-(ae * C137546) / C137082) / C137060 - C137543 / C137333 +
             C137332 * C137559) +
        (((-2 * C137546) / C137082 - (C137332 * C137556) / C137082) * ae) /
            C137060 +
        C137332 *
            (2 * C137559 - (ae * C137556) / C137333 +
             C137332 * ((-(ae * C137332 * C137552) / C137082) / C137060 -
                        C137550 / C137333 +
                        C137332 * ((-(C137332 * C137414 * C137413 * C137539) /
                                    C137082) /
                                       C137060 -
                                   (ae * C137552) / C137333)));
    const double C1035 = C137474 * ((-(ae * C137546) / C137082) / C137060 -
                                    C137543 / C137333 + C137332 * C137559);
    const double C1039 = (-(C137332 * C137543) / C137082) / C137060 -
                         (ae * C137538) / C137333 + C137559 * C137646;
    const double C1971 =
        C137532 * ((-(ae * C137546) / C137082) / C137060 - C137543 / C137333 +
                   C137332 * C137559) -
        ((C137347 + C137332 * C137366 + C137355 * ae) * ce) / C137333;
    const double C1975 =
        (-(C137332 * C137543) / C137082) / C137060 - (ae * C137538) / C137333 -
        (C137532 * C137366 * ce) / C137333 +
        C137532 * (C137532 * C137559 - (C137366 * ce) / C137333);
    const double C4448 =
        C137532 * C137474 * C137559 - (C137474 * C137366 * ce) / C137333;
    const double C43570 =
        3 * ((-(C138405 * ce) / C137082) / C137060 - C137543 / C137333 +
             C137532 * C138412) -
        ((2 * C138405 + C137532 * C138409) * ce) / C137333 +
        C137532 *
            (2 * C138412 - (C138409 * ce) / C137333 +
             C137532 * (C137979 - C137562 +
                        C137532 * ((-(C137532 * C137567) / C137082) / C137060 -
                                   C137410 / C137333)));
    const double C137586 = C137332 * C137584;
    const double C138359 = C137474 * C137584;
    const double C138400 = C137532 * C137584;
    const double C6040 =
        2 * C137474 * C137559 + C137474 * (C137559 + C137584 * C137646);
    const double C6610 =
        C137474 * C137559 - (C137532 * C138082 * ce) / C137333 +
        C137532 * (C137532 * C137474 * C137584 - (C138082 * ce) / C137333);
    const double C8922 = C137532 * (C137559 + C137584 * C137646) -
                         ((C137366 + C137396 * C137646) * ce) / C137333;
    const double C10939 =
        2 * (C137532 * C137559 - (C137366 * ce) / C137333) -
        ((C137366 + C137396 * C137768) * ce) / C137333 +
        C137532 * (C137559 - (C137532 * C137396 * ce) / C137333 +
                   C137532 * (C137532 * C137584 - C137419));
    const double C20534 =
        3 * (C137559 + C137584 * C137646) +
        C137474 *
            (2 * C137474 * C137584 +
             C137474 * (C137584 +
                        ((-(C137332 * std::pow(C137336, 7) * bs[7] * C137539) /
                          C137082) /
                             C137060 -
                         (ae * C137570) / C137333) *
                            C137646));
    const double C21306 =
        C137559 + C137584 * C137646 - (C137532 * C138187 * ce) / C137333 +
        C137532 *
            (C137532 * (C137584 +
                        ((-(C137332 * std::pow(C137336, 7) * bs[7] * C137539) /
                          C137082) /
                             C137060 -
                         (ae * C137570) / C137333) *
                            C137646) -
             (C138187 * ce) / C137333);
    const double C24356 =
        C137532 *
            (2 * C137474 * C137584 +
             C137474 * (C137584 +
                        ((-(C137332 * std::pow(C137336, 7) * bs[7] * C137539) /
                          C137082) /
                             C137060 -
                         (ae * C137570) / C137333) *
                            C137646)) -
        ((2 * C138082 + C137474 * C138187) * ce) / C137333;
    const double C68425 =
        4 * ((-2 * C138362) / C137333 + C137474 * C138522) +
        C137474 *
            (3 * C138522 + C137474 * ((-2 * C137474 * C137567) / C137333 +
                                      C137474 * ((-(std::pow(C137336, 7) *
                                                    bs[7] * C137539 * C137646) /
                                                  C137082) /
                                                     C137060 -
                                                 C137567 / C137333)));
    const double C69017 =
        (-2 * C138362) / C137333 + C137474 * C138522 -
        (C137532 * C138513 * ce) / C137333 +
        C137532 * (C137532 * ((-2 * C137474 * C137567) / C137333 +
                              C137474 * ((-(std::pow(C137336, 7) * bs[7] *
                                            C137539 * C137646) /
                                          C137082) /
                                             C137060 -
                                         C137567 / C137333)) -
                   (C138513 * ce) / C137333);
    const double C71332 =
        C137532 *
            (3 * C138522 + C137474 * ((-2 * C137474 * C137567) / C137333 +
                                      C137474 * ((-(std::pow(C137336, 7) *
                                                    bs[7] * C137539 * C137646) /
                                                  C137082) /
                                                     C137060 -
                                                 C137567 / C137333))) -
        ((3 * C138193 + C137474 * C138513) * ce) / C137333;
    const double C73331 =
        2 * (C137532 * C138522 - (C138193 * ce) / C137333) -
        ((C138193 + C138509 * C137768) * ce) / C137333 +
        C137532 * (C138522 - (C137532 * C138509 * ce) / C137333 +
                   C137532 * (C137532 * ((-(std::pow(C137336, 7) * bs[7] *
                                            C137539 * C137646) /
                                          C137082) /
                                             C137060 -
                                         C137567 / C137333) -
                              (C138509 * ce) / C137333));
    const double C138727 = C138726 - C138719;
    const double C138796 = C137532 * C138795;
    const double C504 = C502 * C139457;
    const double C20747 =
        3 * ((-(ae * C138104) / C137082) / C137060 - C137676 / C137333 +
             C137474 * C138278) +
        (((-2 * C138104) / C137082 - (C137474 * C138275) / C137082) * ae) /
            C137060 +
        C137474 *
            (2 * C138278 - (ae * C138275) / C137333 +
             C137474 *
                 ((-(ae * C137474 * C137552) / C137082) / C137060 - C137682 +
                  C137474 *
                      ((-(C137474 * C137683) / C137082) / C137060 - C137568)));
    const double C24664 =
        2 * (C137474 * C138340 - (ae * C138167) / C137333) -
        (ae * (C137532 * C138275 + C138224 * ce)) / C137333 +
        C137474 *
            (C138340 -
             (ae * (C137532 * C137474 * C137552 + C138223)) / C137333 +
             C137474 * (C137474 * ((-(C137532 * C137683) / C137082) / C137060 -
                                   C137625) -
                        (ae * (C137532 * C137552 + C137377)) / C137333));
    const double C27182 =
        (((-2 * C138167) / C137082 -
          (C137532 * (C137532 * (C137532 * C137552 + C137377) + C137544 +
                      C137532 * C137370 * ce)) /
              C137082 -
          ((C137349 + C137370 * C137768) * ce) / C137082) *
         ae) /
            C137060 +
        C137474 *
            (2 * C138340 - ((C137601 + C137609 * C137768) * ce) / C137333 +
             C137532 *
                 ((-(C137532 * C137609 * ce) / C137082) / C137060 - C137682 +
                  C137532 *
                      ((-(C137532 * C137683) / C137082) / C137060 - C137625)));
    const double C43796 =
        3 * ((-(C138418 * ce) / C137082) / C137060 - C137676 / C137333 +
             C137532 * C138340) -
        ((2 * C138418 + C137532 * C138420) * ce) / C137333 +
        C137532 *
            (2 * C138340 - (C138420 * ce) / C137333 +
             C137532 *
                 ((-(C137532 * C137609 * ce) / C137082) / C137060 - C137682 +
                  C137532 *
                      ((-(C137532 * C137683) / C137082) / C137060 - C137625)));
    const double C3119 = C3115 * C139457;
    const double C479 =
        4 * ((-2 * C137332 * C137679) / C137333 + C137332 * C137688) +
        C137332 *
            (3 * C137688 + C137332 * ((-2 * C137332 * C137683) / C137333 +
                                      C137332 * ((-(std::pow(C137336, 7) *
                                                    bs[7] * C137673 * C137340) /
                                                  C137082) /
                                                     C137060 -
                                                 C137683 / C137333)));
    const double C1342 =
        (-(C137679 * C137340) / C137082) / C137060 - C137676 / C137333 -
        (ae * C137474 * C137556) / C137333 +
        C137474 * (C137474 * C137688 - (ae * C137556) / C137333);
    const double C1343 =
        (((-2 * C137546) / C137082 - (C137332 * C137556) / C137082) * ae) /
            C137060 +
        C137474 * ((-2 * C137332 * C137679) / C137333 + C137332 * C137688);
    const double C1344 =
        (-2 * C137332 * C137679) / C137333 + C137332 * C137688 +
        (C137474 * C137585 * ae) / C137060 +
        C137474 * ((C137585 * ae) / C137060 +
                   C137474 * ((-2 * C137332 * C137683) / C137333 +
                              C137332 * ((-(std::pow(C137336, 7) * bs[7] *
                                            C137673 * C137340) /
                                          C137082) /
                                             C137060 -
                                         C137683 / C137333)));
    const double C2274 =
        (-(C137679 * C137340) / C137082) / C137060 - C137676 / C137333 -
        (C137532 * C137613 * ce) / C137333 +
        C137532 * (C137532 * C137688 - (C137613 * ce) / C137333);
    const double C2275 =
        C137532 * ((-2 * C137332 * C137679) / C137333 + C137332 * C137688) -
        ((2 * C137603 + C137332 * C137613) * ce) / C137333;
    const double C2276 =
        (-2 * C137332 * C137679) / C137333 + C137332 * C137688 -
        (C137532 * C137639 * ce) / C137333 +
        C137532 * (C137532 * ((-2 * C137332 * C137683) / C137333 +
                              C137332 * ((-(std::pow(C137336, 7) * bs[7] *
                                            C137673 * C137340) /
                                          C137082) /
                                             C137060 -
                                         C137683 / C137333)) -
                   (C137639 * ce) / C137333);
    const double C3113 =
        (((-3 * C137556) / C137082 + C137332 * C137585) * ae) / C137060 +
        C137474 *
            (3 * C137688 + C137332 * ((-2 * C137332 * C137683) / C137333 +
                                      C137332 * ((-(std::pow(C137336, 7) *
                                                    bs[7] * C137673 * C137340) /
                                                  C137082) /
                                                     C137060 -
                                                 C137683 / C137333)));
    const double C3849 =
        C137532 *
            (3 * C137688 + C137332 * ((-2 * C137332 * C137683) / C137333 +
                                      C137332 * ((-(std::pow(C137336, 7) *
                                                    bs[7] * C137673 * C137340) /
                                                  C137082) /
                                                     C137060 -
                                                 C137683 / C137333))) -
        ((3 * C137613 + C137332 * C137639) * ce) / C137333;
    const double C4785 =
        C137474 * (C137532 * C137688 - (C137613 * ce) / C137333) -
        (ae * (C137532 * C137556 + C137386 * ce)) / C137333;
    const double C6201 =
        2 * (C137474 * C137688 - (ae * C137556) / C137333) -
        (ae * (C137577 * C137646 + C137556)) / C137333 +
        C137474 * (C137688 - (ae * C137474 * C137577) / C137333 +
                   C137474 * (C137474 * ((-(std::pow(C137336, 7) * bs[7] *
                                            C137673 * C137340) /
                                          C137082) /
                                             C137060 -
                                         C137683 / C137333) -
                              (ae * C137577) / C137333));
    const double C6845 =
        C137474 * (C137688 - (C137532 * C137633 * ce) / C137333 +
                   C137532 * (C137532 * ((-(std::pow(C137336, 7) * bs[7] *
                                            C137673 * C137340) /
                                          C137082) /
                                             C137060 -
                                         C137683 / C137333) -
                              (C137633 * ce) / C137333)) -
        (ae * (C137532 * (C137532 * C137577 + C137442) + C137556 +
               C137532 * C137435 * ce)) /
            C137333;
    const double C9157 =
        C137532 * C137688 - (C137613 * ce) / C137333 -
        (ae * (C137532 * C138110 + C138054 * ce)) / C137333 +
        C137474 * (C137474 * (C137532 * ((-(std::pow(C137336, 7) * bs[7] *
                                            C137673 * C137340) /
                                          C137082) /
                                             C137060 -
                                         C137683 / C137333) -
                              (C137633 * ce) / C137333) -
                   (ae * (C137532 * C137577 + C137442)) / C137333);
    const double C11102 =
        2 * (C137532 * C137688 - (C137613 * ce) / C137333) -
        ((C137613 + C137633 * C137768) * ce) / C137333 +
        C137532 * (C137688 - (C137532 * C137633 * ce) / C137333 +
                   C137532 * (C137532 * ((-(std::pow(C137336, 7) * bs[7] *
                                            C137673 * C137340) /
                                          C137082) /
                                             C137060 -
                                         C137683 / C137333) -
                              (C137633 * ce) / C137333));
    const double C138270 = C138269 - C138262;
    const double C138347 = C138346 - C138343;
    const double C138609 = C137474 * C138607;
    const double C138668 = C137532 * C138666;
    const double C138693 = C137474 * C138666;
    const double C68645 = C68639 * C139286;
    const double C565 =
        3 * ((-(C137704 * ce) / C137082) / C137060 - C137701 / C137333 +
             C137332 * C137717) -
        ((2 * C137704 + C137332 * C137714) * ce) / C137333 +
        C137332 *
            (2 * C137717 - (C137714 * ce) / C137333 +
             C137332 * ((-(C137332 * C137710 * ce) / C137082) / C137060 -
                        C137708 / C137333 +
                        C137332 * ((-(C137332 * C137414 * C137413 * C137697) /
                                    C137082) /
                                       C137060 -
                                   (C137710 * ce) / C137333)));
    const double C1449 = C137474 * ((-(C137704 * ce) / C137082) / C137060 -
                                    C137701 / C137333 + C137332 * C137717);
    const double C1452 = (-(C137332 * C137701) / C137082) / C137060 -
                         (C137696 * ce) / C137333 + C137717 * C137646;
    const double C2385 =
        C137532 * ((-(C137704 * ce) / C137082) / C137060 - C137701 / C137333 +
                   C137332 * C137717) -
        (ae * (C137332 * C137365 + C137346 + C137355 * ce)) / C137333;
    const double C2388 =
        (-(C137332 * C137701) / C137082) / C137060 - (C137696 * ce) / C137333 -
        (ae * C137532 * C137365) / C137333 +
        C137532 * (C137532 * C137717 - (ae * C137365) / C137333);
    const double C4904 =
        C137532 * C137474 * C137717 - (ae * C137474 * C137365) / C137333;
    const double C43870 =
        3 * ((-(ae * C138432) / C137082) / C137060 - C137701 / C137333 +
             C137532 * C138439) +
        (((-2 * C138432) / C137082 - (C137532 * C138436) / C137082) * ae) /
            C137060 +
        C137532 *
            (2 * C138439 - (ae * C138436) / C137333 +
             C137532 * ((-C137973 / C137082) / C137060 - C137720 +
                        C137532 * ((-(C137532 * C137725) / C137082) / C137060 -
                                   C137421)));
    const double C68646 = C68640 * C139286;
    const double C71651 = C71646 * C139286;
    const double C137742 = C137332 * C137741;
    const double C138370 = C137474 * C137741;
    const double C138427 = C137532 * C137741;
    const double C6258 =
        2 * C137474 * C137717 + C137474 * (C137717 + C137741 * C137646);
    const double C6924 =
        C137474 * C137717 - (ae * C137532 * C138097) / C137333 +
        C137532 * (C137532 * C137474 * C137741 - (ae * C138097) / C137333);
    const double C9236 = C137532 * (C137717 + C137741 * C137646) -
                         (ae * (C137395 * C137646 + C137365)) / C137333;
    const double C11157 =
        2 * (C137532 * C137717 - (ae * C137365) / C137333) -
        (ae * (C137395 * C137768 + C137365)) / C137333 +
        C137532 * (C137717 - (ae * C137532 * C137395) / C137333 +
                   C137532 * (C137532 * C137741 - C137407 / C137333));
    const double C20816 =
        3 * (C137717 + C137741 * C137646) +
        C137474 *
            (2 * C137474 * C137741 +
             C137474 * (C137741 +
                        ((-(C137332 * std::pow(C137336, 7) * bs[7] * C137697) /
                          C137082) /
                             C137060 -
                         (C137728 * ce) / C137333) *
                            C137646));
    const double C21716 =
        C137717 + C137741 * C137646 - (ae * C137532 * C138204) / C137333 +
        C137532 *
            (C137532 * (C137741 +
                        ((-(C137332 * std::pow(C137336, 7) * bs[7] * C137697) /
                          C137082) /
                             C137060 -
                         (C137728 * ce) / C137333) *
                            C137646) -
             (ae * C138204) / C137333);
    const double C24766 =
        (((-2 * C138097) / C137082 - (C137474 * C138204) / C137082) * ae) /
            C137060 +
        C137532 *
            (2 * C137474 * C137741 +
             C137474 * (C137741 +
                        ((-(C137332 * std::pow(C137336, 7) * bs[7] * C137697) /
                          C137082) /
                             C137060 -
                         (C137728 * ce) / C137333) *
                            C137646));
    const double C68637 =
        4 * ((-2 * C138373) / C137333 + C137474 * C138616) +
        C137474 *
            (3 * C138616 + C137474 * ((-2 * C137474 * C137725) / C137333 +
                                      C137474 * ((-(std::pow(C137336, 7) *
                                                    bs[7] * C137697 * C137646) /
                                                  C137082) /
                                                     C137060 -
                                                 C137725 / C137333)));
    const double C69337 =
        (-2 * C138373) / C137333 + C137474 * C138616 +
        (C137532 * C138539 * ae) / C137060 +
        C137532 * ((C138539 * ae) / C137060 +
                   C137532 * ((-2 * C137474 * C137725) / C137333 +
                              C137474 * ((-(std::pow(C137336, 7) * bs[7] *
                                            C137697 * C137646) /
                                          C137082) /
                                             C137060 -
                                         C137725 / C137333)));
    const double C71644 =
        (((-3 * C138209) / C137082 + C137474 * C138539) * ae) / C137060 +
        C137532 *
            (3 * C138616 + C137474 * ((-2 * C137474 * C137725) / C137333 +
                                      C137474 * ((-(std::pow(C137336, 7) *
                                                    bs[7] * C137697 * C137646) /
                                                  C137082) /
                                                     C137060 -
                                                 C137725 / C137333)));
    const double C73537 =
        2 * (C137532 * C138616 - (ae * C138209) / C137333) -
        (ae * (C138531 * C137768 + C138209)) / C137333 +
        C137532 * (C138616 - (ae * C137532 * C138531) / C137333 +
                   C137532 * (C137532 * ((-(std::pow(C137336, 7) * bs[7] *
                                            C137697 * C137646) /
                                          C137082) /
                                             C137060 -
                                         C137725 / C137333) -
                              (ae * C138531) / C137333));
    const double C138745 = C138744 - C137954;
    const double C138821 = C137532 * C138819;
    const double C20902 =
        3 * ((-(C138105 * ce) / C137082) / C137060 - C137752 / C137333 +
             C137474 * C138288) -
        ((2 * C138105 + C137474 * C138285) * ce) / C137333 +
        C137474 *
            (2 * C138288 - (C138285 * ce) / C137333 +
             C137474 *
                 ((-(C137474 * C137710 * ce) / C137082) / C137060 - C137758 +
                  C137474 *
                      ((-(C137474 * C137759) / C137082) / C137060 - C137726)));
    const double C21830 =
        (-(C138105 * ce) / C137082) / C137060 - C137752 / C137333 +
        C137474 * C138288 - (ae * C137532 * C138234) / C137333 +
        C137532 *
            (C137532 *
                 ((-(C137474 * C137710 * ce) / C137082) / C137060 - C137758 +
                  C137474 *
                      ((-(C137474 * C137759) / C137082) / C137060 - C137726)) -
             (ae * C138234) / C137333);
    const double C24876 =
        (((-2 * C138043) / C137082 - (C137474 * C138234) / C137082 -
          (C138224 * ce) / C137082) *
         ae) /
            C137060 +
        C137532 *
            (2 * C138288 - (C138285 * ce) / C137333 +
             C137474 *
                 ((-(C137474 * C137710 * ce) / C137082) / C137060 - C137758 +
                  C137474 *
                      ((-(C137474 * C137759) / C137082) / C137060 - C137726)));
    const double C27321 =
        2 * (C137532 * C138288 - (ae * C138043) / C137333) -
        (ae * (C138222 * C137768 + C138043)) / C137333 +
        C137532 *
            (C138288 - (ae * C137532 * C138222) / C137333 +
             C137532 * (C137532 * ((-(C137474 * C137759) / C137082) / C137060 -
                                   C137726) -
                        (ae * C138222) / C137333));
    const double C43938 =
        3 * ((-(ae * C138450) / C137082) / C137060 - C137752 / C137333 +
             C137532 * C138457) +
        (((-2 * C138450) / C137082 - (C137532 * C138454) / C137082) * ae) /
            C137060 +
        C137532 *
            (2 * C138457 - (ae * C138454) / C137333 +
             C137532 *
                 ((-(ae * C137532 * C137494) / C137082) / C137060 - C137758 +
                  C137532 *
                      ((-(C137532 * C137759) / C137082) / C137060 - C137510)));
    const double C646 =
        4 * ((-2 * C137332 * C137755) / C137333 + C137332 * C137764) +
        C137332 *
            (3 * C137764 + C137332 * ((-2 * C137332 * C137759) / C137333 +
                                      C137332 * ((-(std::pow(C137336, 7) *
                                                    bs[7] * C137749 * C137340) /
                                                  C137082) /
                                                     C137060 -
                                                 C137759 / C137333)));
    const double C1558 =
        (-(C137755 * C137340) / C137082) / C137060 - C137752 / C137333 -
        (C137474 * C137714 * ce) / C137333 +
        C137474 * (C137474 * C137764 - (C137714 * ce) / C137333);
    const double C1559 =
        C137474 * ((-2 * C137332 * C137755) / C137333 + C137332 * C137764) -
        ((2 * C137704 + C137332 * C137714) * ce) / C137333;
    const double C1560 =
        (-2 * C137332 * C137755) / C137333 + C137332 * C137764 -
        (C137474 * C137740 * ce) / C137333 +
        C137474 * (C137474 * ((-2 * C137332 * C137759) / C137333 +
                              C137332 * ((-(std::pow(C137336, 7) * bs[7] *
                                            C137749 * C137340) /
                                          C137082) /
                                             C137060 -
                                         C137759 / C137333)) -
                   (C137740 * ce) / C137333);
    const double C2491 =
        (((-2 * C137488) / C137082 - (C137332 * C137498) / C137082) * ae) /
            C137060 +
        C137532 * ((-2 * C137332 * C137755) / C137333 + C137332 * C137764);
    const double C2495 =
        (-(C137755 * C137340) / C137082) / C137060 - C137752 / C137333 -
        (ae * C137532 * C137498) / C137333 +
        C137532 * (C137532 * C137764 - (ae * C137498) / C137333);
    const double C2496 =
        (-2 * C137332 * C137755) / C137333 + C137332 * C137764 +
        (C137532 * C137527 * ae) / C137060 +
        C137532 * ((C137527 * ae) / C137060 +
                   C137532 * ((-2 * C137332 * C137759) / C137333 +
                              C137332 * ((-(std::pow(C137336, 7) * bs[7] *
                                            C137749 * C137340) /
                                          C137082) /
                                             C137060 -
                                         C137759 / C137333)));
    const double C3277 =
        C137474 *
            (3 * C137764 + C137332 * ((-2 * C137332 * C137759) / C137333 +
                                      C137332 * ((-(std::pow(C137336, 7) *
                                                    bs[7] * C137749 * C137340) /
                                                  C137082) /
                                                     C137060 -
                                                 C137759 / C137333))) -
        ((3 * C137714 + C137332 * C137740) * ce) / C137333;
    const double C4025 =
        (((-3 * C137498) / C137082 + C137332 * C137527) * ae) / C137060 +
        C137532 *
            (3 * C137764 + C137332 * ((-2 * C137332 * C137759) / C137333 +
                                      C137332 * ((-(std::pow(C137336, 7) *
                                                    bs[7] * C137749 * C137340) /
                                                  C137082) /
                                                     C137060 -
                                                 C137759 / C137333)));
    const double C5019 =
        C137532 * (C137474 * C137764 - (C137714 * ce) / C137333) -
        (ae * (C137474 * C137498 + C137386 * ce)) / C137333;
    const double C6312 =
        2 * (C137474 * C137764 - (C137714 * ce) / C137333) -
        ((C137714 + C137734 * C137646) * ce) / C137333 +
        C137474 * (C137764 - (C137474 * C137734 * ce) / C137333 +
                   C137474 * (C137474 * ((-(std::pow(C137336, 7) * bs[7] *
                                            C137749 * C137340) /
                                          C137082) /
                                             C137060 -
                                         C137759 / C137333) -
                              (C137734 * ce) / C137333));
    const double C7002 =
        C137474 * C137764 - (C137714 * ce) / C137333 -
        (ae * C137532 * C138056) / C137333 +
        C137532 * (C137532 * (C137474 * ((-(std::pow(C137336, 7) * bs[7] *
                                            C137749 * C137340) /
                                          C137082) /
                                             C137060 -
                                         C137759 / C137333) -
                              (C137734 * ce) / C137333) -
                   (ae * C138056) / C137333);
    const double C9314 =
        C137532 * (C137764 - (C138111 * ce) / C137333 +
                   C137474 * (C137474 * ((-(std::pow(C137336, 7) * bs[7] *
                                            C137749 * C137340) /
                                          C137082) /
                                             C137060 -
                                         C137759 / C137333) -
                              (C137734 * ce) / C137333)) -
        (ae * (C137474 * C138056 + C137498 + C138054 * ce)) / C137333;
    const double C11209 =
        2 * (C137532 * C137764 - (ae * C137498) / C137333) -
        (ae * (C137519 * C137768 + C137498)) / C137333 +
        C137532 * (C137764 - (ae * C137532 * C137519) / C137333 +
                   C137532 * (C137532 * ((-(std::pow(C137336, 7) * bs[7] *
                                            C137749 * C137340) /
                                          C137082) /
                                             C137060 -
                                         C137759 / C137333) -
                              (ae * C137519) / C137333));
    const double C138299 = C138298 - C138291;
    const double C138448 = C138447 - C138237;
    const double C138633 = C137474 * C138632;
    const double C138748 = C137532 * C138632;
    const double C138840 = C137532 * C138838;
    const double C71340 = C71334 - C66953;
    const double C72721 = C72720 - C72714;
    const double C126103 = C126098 * C139442;
    const double C130156 = C130151 - C83213;
    const double C136524 = C136519 - C91686;
    const double C134424 = C134420 * C139442;
    const double C137107 = C137106 / C137082;
    const double C15054 = C1476 * C826;
    const double C15042 = C1472 * C826;
    const double C15069 = C15063 * C826;
    const double C15066 = C15060 * C826;
    const double C19101 = C4916 * C826;
    const double C19112 = C19108 * C826;
    const double C32477 = C2090 * C826;
    const double C32465 = C2086 * C826;
    const double C32492 = C32486 * C826;
    const double C32489 = C32483 * C826;
    const double C35452 = C4566 * C826;
    const double C35463 = C35459 * C826;
    const double C63906 = C63894 * C826;
    const double C63900 = C63888 * C826;
    const double C63896 = C63884 * C826;
    const double C64408 = C20833 * C826;
    const double C66736 = C66728 * C826;
    const double C66732 = C66724 * C826;
    const double C67368 = C24775 * C826;
    const double C77530 = C68853 * C826;
    const double C77549 = C77539 * C826;
    const double C77543 = C77533 * C826;
    const double C126014 = C88852 * C826;
    const double C126261 = C43654 * C826;
    const double C128392 = C38054 * C826;
    const double C137208 = C137206 / C137082;
    const double C137254 = C137252 / C137082;
    const double C130312 = C38057 + C38056;
    const double C68314 = C68306 + C68307;
    const double C130074 = C83096 + C83095;
    const double C83097 = C68843 + C68844;
    const double C83093 = C68844 + C68843;
    const double C422 = C419 + C409;
    const double C32595 = C2192 + C2176;
    const double C32594 = C2176 + C2192;
    const double C35600 = C4673 + C4674;
    const double C35599 = C4674 + C4673;
    const double C40121 = C8272 + C8273;
    const double C40120 = C8273 + C8272;
    const double C126339 = C32600 + C32608;
    const double C130391 = C38162 + C38161;
    const double C136749 = C46570 + C46569;
    const double C747 = C744 + C734;
    const double C15289 = C1685 + C1673;
    const double C15284 = C1673 + C1685;
    const double C19389 = C5139 + C5140;
    const double C19388 = C5140 + C5139;
    const double C28562 = C12157 + C12158;
    const double C28561 = C12158 + C12157;
    const double C64561 = C15288 + C15298;
    const double C71809 = C24984 + C24983;
    const double C73167 = C26759 + C26758;
    const double C3868 = C3866 - C3858;
    const double C9855 = C9854 - C9848;
    const double C3296 = C3294 - C3286;
    const double C5784 = C5783 - C5777;
    const double C16353 = C139575 * C838;
    const double C49695 = C139575 * C838;
    const double C14323 = C139575 * C846;
    const double C47755 = C139575 * C846;
    const double C65317 = C139286 * C846;
    const double C34074 = C139575 * C1774;
    const double C96019 = C139575 * C1774;
    const double C32088 = C139575 * C1782;
    const double C94103 = C139575 * C1782;
    const double C127381 = C139286 * C1782;
    const double C18244 = C139575 * C4229;
    const double C51563 = C139575 * C4229;
    const double C78534 = C139286 * C4229;
    const double C77551 = C77541 * C827;
    const double C77664 = C77541 * C181;
    const double C80653 = C77541 * C3608;
    const double C84985 = C77541 * C137101;
    const double C89820 = C77541 * C9617;
    const double C128190 = C77541 * C2784;
    const double C131562 = C77541 * C5308;
    const double C137463 = C137332 * C137460;
    const double C137959 = C137958 - C137955;
    const double C137981 = C137980 - C137977;
    const double C16357 = C139575 * C855;
    const double C49699 = C139575 * C855;
    const double C34078 = C139575 * C1791;
    const double C96023 = C139575 * C1791;
    const double C335 = C307 * C122;
    const double C582 = C554 * C122;
    const double C2942 = C307 * C843;
    const double C3200 = C554 * C843;
    const double C13818 = C13796 * C843;
    const double C16356 = C13596 * C843;
    const double C47256 = C47234 * C843;
    const double C49698 = C47034 * C843;
    const double C1148 = C307 * C849;
    const double C1470 = C554 * C849;
    const double C14334 = C13596 * C849;
    const double C16672 = C13796 * C849;
    const double C47766 = C47034 * C849;
    const double C50014 = C47234 * C849;
    const double C65318 = C63381 * C849;
    const double C3690 = C307 * C1779;
    const double C3948 = C554 * C1779;
    const double C30835 = C30813 * C1779;
    const double C34077 = C13596 * C1779;
    const double C92872 = C92850 * C1779;
    const double C96022 = C47034 * C1779;
    const double C2084 = C307 * C1785;
    const double C2406 = C554 * C1785;
    const double C32099 = C13596 * C1785;
    const double C34708 = C30813 * C1785;
    const double C94114 = C47034 * C1785;
    const double C96632 = C92850 * C1785;
    const double C127382 = C63381 * C1785;
    const double C4564 = C307 * C4232;
    const double C4914 = C554 * C4232;
    const double C17599 = C13796 * C4232;
    const double C18255 = C13596 * C4232;
    const double C33757 = C30813 * C4232;
    const double C50920 = C47234 * C4232;
    const double C51574 = C47034 * C4232;
    const double C78535 = C63381 * C4232;
    const double C95702 = C92850 * C4232;
    const double C137446 = C137438 - C137408;
    const double C66733 = C66725 * C139305;
    const double C70299 = C66725 * C139305;
    const double C78532 = C66725 * C139590;
    const double C81586 = C66725 * C5226;
    const double C68858 = C68854 * C139300;
    const double C77529 = C68854 * C821;
    const double C84986 = C68854 * C139552;
    const double C68315 = C68308 + C68309;
    const double C71170 = C68841 + C68842;
    const double C86139 = C68842 + C68841;
    const double C134358 = C88855 + C88854;
    const double C137468 = C137417 + C137465;
    const double C6446 = (C137474 * C137405 + C138080 * C137768) / C137060;
    const double C138587 = C138552 + C138584;
    const double C138884 = C138853 + C138881;
    const double C20608 =
        (3 * (C137603 + C137474 * C138051 + C138048 * ae) +
         C137474 * (2 * C138051 + C137474 * C138259 + C138247 * ae) +
         (2 * C138048 + C137474 * C138247) * ae) /
        C137060;
    const double C21412 =
        (C137603 + C137474 * C138051 + C138048 * ae + C138259 * C137768) /
        C137060;
    const double C24462 =
        (C137532 * (2 * C138051 + C137474 * C138259 + C138247 * ae)) / C137060;
    const double C43867 =
        (3 * (C137704 + C137532 * C138174 + C138171 * ae) +
         C137532 * (2 * C138174 + C137532 * C138500 + C138491 * ae) +
         (2 * C138171 + C137532 * C138491) * ae) /
        C137060;
    const double C24565 =
        2 * ((-(C137532 * C137618 * ce) / C137082) / C137060 -
             (ae * C137532 * C137503) / C137333 -
             (C137474 * C138334) / C137333) -
        (ae * C137532 * C138258) / C137333 -
        (C137532 * C138259 * ce) / C137333 +
        C137474 * ((-(ae * C137532 * C138251) / C137082) / C137060 -
                   C138334 / C137333 - (C137532 * C138252 * ce) / C137333 +
                   C137474 * ((-(C137532 * C138242 * ce) / C137082) / C137060 -
                              (ae * C137532 * C138239) / C137333 -
                              (C137474 * C137532 * C137332 *
                               (C137413 * C137414 +
                                C137646 * bs[7] * std::pow(C137336, 7)) *
                               C137341) /
                                  C137333));
    const double C20456 =
        (-3 * (C137474 * C138050 + C137488 + C138048 * ce)) / C137082 +
        C137474 * ((-2 * C138050) / C137082 - (C137474 * C138258) / C137082 -
                   (C138247 * ce) / C137082) -
        ((2 * C138048 + C137474 * C138247) * ce) / C137082;
    const double C21196 =
        -(C138258 * C137768 + C137474 * C138050 + C137488 + C138048 * ce) /
        C137082;
    const double C24246 =
        C137532 * ((-2 * C138050) / C137082 - (C137474 * C138258) / C137082 -
                   (C138247 * ce) / C137082);
    const double C43567 =
        (-3 * (C137532 * C138173 + C137546 + C138171 * ce)) / C137082 +
        C137532 * ((-2 * C138173) / C137082 - (C137532 * C138499) / C137082 -
                   (C138491 * ce) / C137082) -
        ((2 * C138171 + C137532 * C138491) * ce) / C137082;
    const double C137467 = C137464 / C137082;
    const double C6443 = -(C138095 * C137768 + C137474 * C137404) / C137082;
    const double C138586 = C138583 / C137082;
    const double C138883 = C138880 / C137082;
    const double C137803 = C137802 - C137408;
    const double C137881 = C137880 - C137408;
    const double C77552 = C77542 * C139305;
    const double C84988 = C77542 * C139305;
    const double C83106 = C83104 * C139300;
    const double C137667 = C137666 - C137659;
    const double C138655 = C138654 - C137659;
    const double C137789 = C137788 - C137781;
    const double C138640 = C138639 - C137781;
    const double C89293 =
        (3 * (C138105 + C137532 * C138384 + C138379 * ae) +
         C137532 * (2 * C138384 + C137532 * C138776 + C138764 * ae) +
         (2 * C138379 + C137532 * C138764) * ae) /
        C137060;
    const double C88996 =
        (-3 * (C137532 * C138383 + C138104 + C138379 * ce)) / C137082 +
        C137532 * ((-2 * C138383) / C137082 - (C137532 * C138775) / C137082 -
                   (C138764 * ce) / C137082) -
        ((2 * C138379 + C137532 * C138764) * ce) / C137082;
    const double C15182 = C15181 * C825;
    const double C22750 = C15181 * C7158;
    const double C16144 = C16143 * C139328;
    const double C19252 = C19251 * C139377;
    const double C23900 = C19251 * C139377;
    const double C68372 = C63381 * C20457;
    const double C68702 = C554 * C20457;
    const double C68939 = C63381 * C21197;
    const double C69422 = C554 * C21197;
    const double C83541 = C47234 * C21197;
    const double C86878 = C30813 * C21197;
    const double C116090 = C13796 * C21197;
    const double C119388 = C92850 * C21197;
    const double C132645 = C307 * C21197;
    const double C71255 = C63381 * C24247;
    const double C71731 = C554 * C24247;
    const double C82915 = C30813 * C24247;
    const double C86562 = C47234 * C24247;
    const double C115508 = C92850 * C24247;
    const double C119072 = C13796 * C24247;
    const double C138577 = C138571 - C137659;
    const double C32722 = C32721 * C1763;
    const double C45783 = C32721 * C12239;
    const double C83330 = C83329 * C1763;
    const double C91797 = C83329 * C12239;
    const double C134479 = C63381 * C43568;
    const double C134651 = C307 * C43568;
    const double C138871 = C138867 - C137781;
    const double C138582 = C137474 * C138578;
    const double C138253 = C138243 - C138250;
    const double C14823 = C139586 * C6149;
    const double C48255 = C139586 * C6149;
    const double C35601 = C35460 * C2784;
    const double C35746 = C35460 * C3608;
    const double C38052 = C35460 * C5913;
    const double C38165 = C35460 * C5308;
    const double C44788 = C35460 * C9617;
    const double C128390 = C35460 * C827;
    const double C131762 = C35460 * C137101;
    const double C31519 = C31415 * C936;
    const double C31624 = C31415 * C244;
    const double C39060 = C31415 * C7237;
    const double C41042 = C31415 * C5913;
    const double C86563 = C139586 * C24564;
    const double C119073 = C139586 * C24564;
    const double C83432 = C139586 * C21413;
    const double C115981 = C139586 * C21413;
    const double C132559 = C139442 * C21413;
    const double C86453 = C139586 * C24463;
    const double C118963 = C139586 * C24463;
    const double C138691 = C138690 - C138689;
    const double C35613 = C35609 * C139377;
    const double C38168 = C35609 * C139377;
    const double C31523 = C31522 * C825;
    const double C39061 = C31522 * C7158;
    const double C32609 = C32606 * C139328;
    const double C130400 = C130398 * C139377;
    const double C136753 = C130398 * C139377;
    const double C134599 = C134598 * C139328;
    const double C3038 = C3036 - C3028;
    const double C5546 = C5545 - C5539;
    const double C3772 = C2193 + C2179;
    const double C34499 = C2179 + C2193;
    const double C32597 = C2194 + C2182;
    const double C32596 = C2182 + C2194;
    const double C134594 = C43730 + C43726;
    const double C138879 = C137532 * C138876;
    const double C138494 = C138482 - C138488;
    const double C33060 = C139588 * C11263;
    const double C95007 = C139588 * C11263;
    const double C138770 = C138760 - C138767;
    const double C68762 = C68761 * C139339;
    const double C69508 = C69507 * C1763;
    const double C75880 = C69507 * C12239;
    const double C71818 = C71816 * C139403;
    const double C73171 = C71816 * C139403;
    const double C15299 = C15296 * C139339;
    const double C16251 = C16250 * C1763;
    const double C29454 = C16250 * C12239;
    const double C19402 = C19398 * C139403;
    const double C26764 = C19398 * C139403;
    const double C3372 = C1684 + C1670;
    const double C17202 = C1670 + C1684;
    const double C15290 = C1674 + C1686;
    const double C15285 = C1686 + C1674;
    const double C4125 = C4123 - C4115;
    const double C10093 = C10092 - C10086;
    const double C68756 = C20980 + C20976;
    const double C14461 = C139575 * C945;
    const double C16463 = C13591 * C945;
    const double C47893 = C139575 * C945;
    const double C49805 = C47029 * C945;
    const double C65403 = C139286 * C945;
    const double C14465 = C13591 * C949;
    const double C14457 = C139575 * C949;
    const double C47897 = C47029 * C949;
    const double C47889 = C139575 * C949;
    const double C63994 = C139286 * C949;
    const double C32220 = C139575 * C1879;
    const double C34182 = C13591 * C1879;
    const double C79543 = C139286 * C1879;
    const double C94235 = C139575 * C1879;
    const double C96127 = C47029 * C1879;
    const double C32228 = C139575 * C1883;
    const double C32224 = C13591 * C1883;
    const double C77663 = C139286 * C1883;
    const double C94243 = C139575 * C1883;
    const double C94239 = C47029 * C1883;
    const double C18402 = C13591 * C4342;
    const double C18398 = C139575 * C4342;
    const double C51721 = C47029 * C4342;
    const double C51717 = C139575 * C4342;
    const double C66841 = C139286 * C4342;
    const double C68373 = C139286 * C20459;
    const double C68940 = C139286 * C21199;
    const double C71256 = C139286 * C24249;
    const double C83222 = C139286 * C26907;
    const double C137529 = C137523 + C137528;
    const double C138186 = C138184 - C137419;
    const double C20462 = C139575 * C5984;
    const double C53699 = C139575 * C5984;
    const double C63996 = C139286 * C5984;
    const double C21202 = C139575 * C6530;
    const double C54381 = C139575 * C6530;
    const double C77666 = C139286 * C6530;
    const double C24252 = C139575 * C8842;
    const double C57339 = C139575 * C8842;
    const double C66843 = C139286 * C8842;
    const double C43499 = C139575 * C10879;
    const double C105245 = C139575 * C10879;
    const double C126102 = C139286 * C10879;
    const double C138516 = C138503 + C138515;
    const double C336 = C139442 * C318;
    const double C1141 = C139442 * C1127;
    const double C13813 = C139586 * C1127;
    const double C16675 = C13593 * C1127;
    const double C47251 = C139586 * C1127;
    const double C50017 = C47031 * C1127;
    const double C1145 = C139442 * C1130;
    const double C14709 = C13593 * C1130;
    const double C14701 = C139586 * C1130;
    const double C48141 = C47031 * C1130;
    const double C48133 = C139586 * C1130;
    const double C2077 = C139442 * C2063;
    const double C17602 = C13593 * C2063;
    const double C50923 = C47031 * C2063;
    const double C2081 = C139442 * C2066;
    const double C15707 = C13593 * C2066;
    const double C49071 = C47031 * C2066;
    const double C4561 = C139442 * C4554;
    const double C15699 = C139586 * C4554;
    const double C18686 = C13593 * C4554;
    const double C49063 = C139586 * C4554;
    const double C52005 = C47031 * C4554;
    const double C137642 = C137637 + C137641;
    const double C138203 = C138200 - C138201;
    const double C24464 =
        2 * (C137474 * C138328 - (ae * C137532 * C137395) / C137333) -
        (ae * C137532 * C138204) / C137333 +
        C137474 *
            (C138328 - (ae * C137532 * C137474 * C137449) / C137333 +
             C137474 *
                 (C137474 * C137532 *
                      ((-(C137332 * std::pow(C137336, 7) * bs[7] * C137596) /
                        C137082) /
                           C137060 -
                       (C137627 * ce) / C137333) -
                  (ae * C137532 * C137449) / C137333));
    const double C27046 =
        (((-2 * C137532 * C137395) / C137082 -
          (C137532 * (C137449 * C137768 + C137395)) / C137082) *
         ae) /
            C137060 +
        C137474 *
            (2 * C138328 +
             C137532 * (C137640 +
                        ((-(C137332 * std::pow(C137336, 7) * bs[7] * C137596) /
                          C137082) /
                             C137060 -
                         (C137627 * ce) / C137333) *
                            C137768));
    const double C43645 =
        3 * (C137616 + C137640 * C137768) +
        C137532 *
            (2 * C138328 +
             C137532 * (C137640 +
                        ((-(C137332 * std::pow(C137336, 7) * bs[7] * C137596) /
                          C137082) /
                             C137060 -
                         (C137627 * ce) / C137333) *
                            C137768));
    const double C14707 = C139586 * C6096;
    const double C48139 = C139586 * C6096;
    const double C15705 = C139586 * C6690;
    const double C35457 = C139442 * C6690;
    const double C49069 = C139586 * C6690;
    const double C18684 = C139586 * C9002;
    const double C31414 = C139442 * C9002;
    const double C52003 = C139586 * C9002;
    const double C32482 = C139442 * C10995;
    const double C138541 = C138535 + C138540;
    const double C71418 =
        3 * ((-(ae * C137532 * C137948) / C137082) / C137060 -
             C138330 / C137333 + C137474 * C138682) +
        (C137532 * C138539 * ae) / C137060 +
        C137474 *
            (2 * C138682 - (ae * C137532 * C138531) / C137333 +
             C137474 *
                 ((-(ae * C137532 * C137474 * C137433) / C137082) / C137060 -
                  C138677 / C137333 +
                  C137474 * ((-(C137474 * C137532 * std::pow(C137336, 7) *
                                bs[7] * C137596) /
                              C137082) /
                                 C137060 -
                             (ae * C137532 * C137433) / C137333)));
    const double C14583 = C139575 * C1035;
    const double C16565 = C13591 * C1035;
    const double C48015 = C139575 * C1035;
    const double C49907 = C47029 * C1035;
    const double C65484 = C139286 * C1035;
    const double C14585 = C13591 * C1039;
    const double C14577 = C139575 * C1039;
    const double C48017 = C47029 * C1039;
    const double C48009 = C139575 * C1039;
    const double C64091 = C139286 * C1039;
    const double C32348 = C139575 * C1971;
    const double C34288 = C13591 * C1971;
    const double C79647 = C139286 * C1971;
    const double C94363 = C139575 * C1971;
    const double C96233 = C47029 * C1971;
    const double C32352 = C13591 * C1975;
    const double C32344 = C139575 * C1975;
    const double C77787 = C139286 * C1975;
    const double C94367 = C47029 * C1975;
    const double C94359 = C139575 * C1975;
    const double C18542 = C13591 * C4448;
    const double C18538 = C139575 * C4448;
    const double C51861 = C47029 * C4448;
    const double C51857 = C139575 * C4448;
    const double C66960 = C139286 * C4448;
    const double C134480 = C139286 * C43570;
    const double C137587 = C137581 + C137586;
    const double C26976 =
        2 * (C137532 * C138359 - (C138082 * ce) / C137333) -
        ((C138082 + C138360 * C137768) * ce) / C137333 +
        C137532 *
            (C138359 - (C137532 * C138360 * ce) / C137333 +
             C137532 *
                 (C137532 * C137474 *
                      ((-(C137332 * std::pow(C137336, 7) * bs[7] * C137539) /
                        C137082) /
                           C137060 -
                       (ae * C137570) / C137333) -
                  (C138360 * ce) / C137333));
    const double C138402 = C138400 - C137419;
    const double C20540 = C139575 * C6040;
    const double C53773 = C139575 * C6040;
    const double C64094 = C139286 * C6040;
    const double C21312 = C139575 * C6610;
    const double C54487 = C139575 * C6610;
    const double C77789 = C139286 * C6610;
    const double C24362 = C139575 * C8922;
    const double C57445 = C139575 * C8922;
    const double C66965 = C139286 * C8922;
    const double C43573 = C139575 * C10939;
    const double C105315 = C139575 * C10939;
    const double C126182 = C139286 * C10939;
    const double C88997 =
        3 * ((-(C138717 * ce) / C137082) / C137060 - C138362 / C137333 +
             C137532 * C138727) -
        ((2 * C138717 + C137532 * C138724) * ce) / C137333 +
        C137532 *
            (2 * C138727 - (C138724 * ce) / C137333 +
             C137532 * ((-(C137532 * C138720 * ce) / C137082) / C137060 -
                        C138718 / C137333 +
                        C137532 * ((-(C137532 * C137474 * std::pow(C137336, 7) *
                                      bs[7] * C137539) /
                                    C137082) /
                                       C137060 -
                                   (C138720 * ce) / C137333)));
    const double C138797 = C138785 + C138796;
    const double C86665 = C139586 * C24664;
    const double C119175 = C139586 * C24664;
    const double C89223 = C139586 * C27182;
    const double C121677 = C139586 * C27182;
    const double C130476 = C139442 * C27182;
    const double C134652 = C139442 * C43796;
    const double C1357 = C139442 * C1342;
    const double C16885 = C139586 * C1342;
    const double C50227 = C139586 * C1342;
    const double C3118 = C139442 * C1343;
    const double C13995 = C139586 * C1343;
    const double C47433 = C139586 * C1343;
    const double C2293 = C139442 * C2274;
    const double C3863 = C139442 * C2275;
    const double C4797 = C139442 * C4785;
    const double C17812 = C139586 * C4785;
    const double C51133 = C139586 * C4785;
    const double C20746 =
        3 * ((-(ae * C138107) / C137082) / C137060 - C138060 / C137333 +
             C137474 * C138270) +
        (((-2 * C138107) / C137082 - (C137474 * C138267) / C137082) * ae) /
            C137060 +
        C137474 *
            (2 * C138270 - (ae * C138267) / C137333 +
             C137474 * ((-(ae * C137474 * C138263) / C137082) / C137060 -
                        C138261 / C137333 +
                        C137474 * ((-(C137474 * C137332 * std::pow(C137336, 7) *
                                      bs[7] * C137673) /
                                    C137082) /
                                       C137060 -
                                   (ae * C138263) / C137333)));
    const double C24665 =
        2 * (C137474 * C138347 - (ae * C138173) / C137333) -
        (ae * (C137532 * C138267 + C138247 * ce)) / C137333 +
        C137474 *
            (C138347 -
             (ae * (C137532 * C137474 * C138263 + C138246)) / C137333 +
             C137474 * (C137474 * ((-(C137532 * C137332 * std::pow(C137336, 7) *
                                      bs[7] * C137673) /
                                    C137082) /
                                       C137060 -
                                   (C138242 * ce) / C137333) -
                        (ae * (C137532 * C138263 + C137434)) / C137333));
    const double C27183 =
        (((-2 * C138173) / C137082 -
          (C137532 * (C137532 * (C137532 * C138263 + C137434) + C137561 +
                      C137532 * C137426 * ce)) /
              C137082 -
          ((C137378 + C137426 * C137768) * ce) / C137082) *
         ae) /
            C137060 +
        C137474 *
            (2 * C138347 - ((C137618 + C138242 * C137768) * ce) / C137333 +
             C137532 * ((-(C137532 * C138242 * ce) / C137082) / C137060 -
                        C138261 / C137333 +
                        C137532 * ((-(C137532 * C137332 * std::pow(C137336, 7) *
                                      bs[7] * C137673) /
                                    C137082) /
                                       C137060 -
                                   (C138242 * ce) / C137333)));
    const double C43797 =
        3 * ((-(C138422 * ce) / C137082) / C137060 - C138060 / C137333 +
             C137532 * C138347) -
        ((2 * C138422 + C137532 * C138424) * ce) / C137333 +
        C137532 *
            (2 * C138347 - (C138424 * ce) / C137333 +
             C137532 * ((-(C137532 * C138242 * ce) / C137082) / C137060 -
                        C138261 / C137333 +
                        C137532 * ((-(C137532 * C137332 * std::pow(C137336, 7) *
                                      bs[7] * C137673) /
                                    C137082) /
                                       C137060 -
                                   (C138242 * ce) / C137333)));
    const double C138610 = C138606 + C138609;
    const double C138669 = C138667 + C138668;
    const double C138696 = C138693 - C138695;
    const double C583 = C139457 * C565;
    const double C1463 = C139457 * C1449;
    const double C33760 = C30408 * C1449;
    const double C95705 = C92451 * C1449;
    const double C1467 = C139457 * C1452;
    const double C31742 = C30408 * C1452;
    const double C93757 = C92451 * C1452;
    const double C2399 = C139457 * C2385;
    const double C30830 = C139588 * C2385;
    const double C34711 = C30408 * C2385;
    const double C92867 = C139588 * C2385;
    const double C96635 = C92451 * C2385;
    const double C2403 = C139457 * C2388;
    const double C32836 = C30408 * C2388;
    const double C32828 = C139588 * C2388;
    const double C94783 = C92451 * C2388;
    const double C94775 = C139588 * C2388;
    const double C4911 = C139457 * C4904;
    const double C31734 = C139588 * C4904;
    const double C35891 = C30408 * C4904;
    const double C93749 = C139588 * C4904;
    const double C97765 = C92451 * C4904;
    const double C137743 = C137738 + C137742;
    const double C27252 =
        2 * (C137532 * C138370 - (ae * C138097) / C137333) -
        (ae * (C138371 * C137768 + C138097)) / C137333 +
        C137532 *
            (C138370 - (ae * C137532 * C138371) / C137333 +
             C137532 *
                 (C137532 * C137474 *
                      ((-(C137332 * std::pow(C137336, 7) * bs[7] * C137697) /
                        C137082) /
                           C137060 -
                       (C137728 * ce) / C137333) -
                  (ae * C138371) / C137333));
    const double C138429 = C138427 - C138201;
    const double C15059 = C139457 * C6258;
    const double C16037 = C139457 * C6924;
    const double C35889 = C139588 * C6924;
    const double C97763 = C139588 * C6924;
    const double C19106 = C139457 * C9236;
    const double C31740 = C139588 * C9236;
    const double C93755 = C139588 * C9236;
    const double C32834 = C139588 * C11157;
    const double C94781 = C139588 * C11157;
    const double C89294 =
        3 * ((-(ae * C138736) / C137082) / C137060 - C138373 / C137333 +
             C137532 * C138745) +
        (((-2 * C138736) / C137082 - (C137532 * C138742) / C137082) * ae) /
            C137060 +
        C137532 *
            (2 * C138745 - (ae * C138742) / C137333 +
             C137532 * ((-(ae * C137532 * C138738) / C137082) / C137060 -
                        C138737 / C137333 +
                        C137532 * ((-(C137532 * C137474 * std::pow(C137336, 7) *
                                      bs[7] * C137697) /
                                    C137082) /
                                       C137060 -
                                   (ae * C138738) / C137333)));
    const double C138822 = C138816 + C138821;
    const double C68703 = C139457 * C20902;
    const double C69423 = C139457 * C21830;
    const double C86879 = C139588 * C21830;
    const double C119389 = C139588 * C21830;
    const double C71732 = C139457 * C24876;
    const double C82916 = C139588 * C24876;
    const double C115509 = C139588 * C24876;
    const double C83858 = C139588 * C27321;
    const double C116407 = C139588 * C27321;
    const double C1577 = C139457 * C1558;
    const double C3291 = C139457 * C1559;
    const double C4029 = C139457 * C2491;
    const double C30928 = C139588 * C2491;
    const double C92965 = C139588 * C2491;
    const double C2509 = C139457 * C2495;
    const double C34817 = C139588 * C2495;
    const double C96741 = C139588 * C2495;
    const double C5031 = C139457 * C5019;
    const double C33866 = C139588 * C5019;
    const double C95811 = C139588 * C5019;
    const double C20903 =
        3 * ((-(C138108 * ce) / C137082) / C137060 - C138067 / C137333 +
             C137474 * C138299) -
        ((2 * C138108 + C137474 * C138296) * ce) / C137333 +
        C137474 *
            (2 * C138299 - (C138296 * ce) / C137333 +
             C137474 * ((-(C137474 * C138292 * ce) / C137082) / C137060 -
                        C138290 / C137333 +
                        C137474 * ((-(C137474 * C137332 * std::pow(C137336, 7) *
                                      bs[7] * C137749) /
                                    C137082) /
                                       C137060 -
                                   (C138292 * ce) / C137333)));
    const double C21831 =
        (-(C138108 * ce) / C137082) / C137060 - C138067 / C137333 +
        C137474 * C138299 - (ae * C137532 * C138258) / C137333 +
        C137532 *
            (C137532 * ((-(C137474 * C138292 * ce) / C137082) / C137060 -
                        C138290 / C137333 +
                        C137474 * ((-(C137474 * C137332 * std::pow(C137336, 7) *
                                      bs[7] * C137749) /
                                    C137082) /
                                       C137060 -
                                   (C138292 * ce) / C137333)) -
             (ae * C138258) / C137333);
    const double C24877 =
        (((-2 * C138050) / C137082 - (C137474 * C138258) / C137082 -
          (C138247 * ce) / C137082) *
         ae) /
            C137060 +
        C137532 *
            (2 * C138299 - (C138296 * ce) / C137333 +
             C137474 * ((-(C137474 * C138292 * ce) / C137082) / C137060 -
                        C138290 / C137333 +
                        C137474 * ((-(C137474 * C137332 * std::pow(C137336, 7) *
                                      bs[7] * C137749) /
                                    C137082) /
                                       C137060 -
                                   (C138292 * ce) / C137333)));
    const double C27320 =
        2 * (C137532 * C138299 - (ae * C138050) / C137333) -
        (ae * (C138251 * C137768 + C138050)) / C137333 +
        C137532 *
            (C138299 - (ae * C137532 * C138251) / C137333 +
             C137532 * (C137532 * ((-(C137474 * C137332 * std::pow(C137336, 7) *
                                      bs[7] * C137749) /
                                    C137082) /
                                       C137060 -
                                   (C138292 * ce) / C137333) -
                        (ae * C138251) / C137333));
    const double C43937 =
        3 * ((-(ae * C138441) / C137082) / C137060 - C138067 / C137333 +
             C137532 * C138448) +
        (((-2 * C138441) / C137082 - (C137532 * C138445) / C137082) * ae) /
            C137060 +
        C137532 *
            (2 * C138448 - (ae * C138445) / C137333 +
             C137532 * ((-(ae * C137532 * C138239) / C137082) / C137060 -
                        C138290 / C137333 +
                        C137532 * ((-(C137532 * C137332 * std::pow(C137336, 7) *
                                      bs[7] * C137749) /
                                    C137082) /
                                       C137060 -
                                   (ae * C138239) / C137333)));
    const double C138634 = C138631 + C138633;
    const double C138751 = C138748 - C138749;
    const double C138841 = C138835 + C138840;
    const double C71342 = C71340 - C66971;
    const double C72722 = C72721 - C72715;
    const double C130157 = C130156 - C83216;
    const double C136525 = C136524 - C91689;
    const double C137108 = C137107 - C137097;
    const double C64405 = C15069 + C15068;
    const double C126258 = C32492 + C32491;
    const double C63908 = C63900 + C63901;
    const double C80368 = C66731 + C66732;
    const double C80367 = C66732 + C66731;
    const double C126010 = C77549 + C77548;
    const double C137209 = C137208 - C137193;
    const double C137255 = C137254 - C137239;
    const double C130076 = C130074 * C139442;
    const double C424 = C422 * C139457;
    const double C35608 = C4672 - C35600;
    const double C35607 = C35599 - C4672;
    const double C40123 = C8271 - C40121;
    const double C40122 = C40120 - C8271;
    const double C130397 = C130391 - C38160;
    const double C136754 = C136749 - C46568;
    const double C19397 = C5138 - C19389;
    const double C19396 = C19388 - C5138;
    const double C28564 = C12156 - C28562;
    const double C28563 = C28561 - C12156;
    const double C64563 = C64561 * C139286;
    const double C71815 = C71809 - C24982;
    const double C73172 = C73167 - C26757;
    const double C3869 = C3868 * C139457;
    const double C9856 = C9855 * C139457;
    const double C16359 = C16352 + C16353;
    const double C49701 = C49694 + C49695;
    const double C14345 = C14322 + C14323;
    const double C47777 = C47754 + C47755;
    const double C65322 = C65316 + C65317;
    const double C34080 = C34073 + C34074;
    const double C96025 = C96018 + C96019;
    const double C32110 = C32087 + C32088;
    const double C94125 = C94102 + C94103;
    const double C127384 = C127380 + C127381;
    const double C18258 = C18243 + C18244;
    const double C51577 = C51562 + C51563;
    const double C78537 = C78533 + C78534;
    const double C16361 = C16356 + C16357;
    const double C49703 = C49698 + C49699;
    const double C14351 = C14334 + C14335;
    const double C47783 = C47766 + C47767;
    const double C65323 = C65318 + C65319;
    const double C34082 = C34077 + C34078;
    const double C96027 = C96022 + C96023;
    const double C32116 = C32099 + C32100;
    const double C94131 = C94114 + C94115;
    const double C127385 = C127382 + C127383;
    const double C18264 = C18255 + C18256;
    const double C51583 = C51574 + C51575;
    const double C78538 = C78535 + C78536;
    const double C137453 = C137446 - C137419;
    const double C83098 = C68857 + C68858;
    const double C83094 = C68858 + C68857;
    const double C134363 = C134358 * C139442;
    const double C137470 = C137468 + C137445;
    const double C138589 = C138587 + C138570;
    const double C138886 = C138884 + C138855;
    const double C137469 = C137423 - C137467;
    const double C138588 = C138558 - C138586;
    const double C138885 = C138860 - C138883;
    const double C859 =
        2 * ((-((C137360 + C137387 * C137646) * ce) / C137082) / C137060 -
             (ae * (C137384 * C137646 + C137359)) / C137333 +
             C137332 * C137803) -
        (ae * (C137461 * C137646 + C137404)) / C137333 -
        ((C137405 + C137462 * C137646) * ce) / C137333 +
        C137332 *
            (C137803 - (ae * (C137449 * C137646 + C137395)) / C137333 -
             ((C137396 + C137452 * C137646) * ce) / C137333 +
             C137332 *
                 ((-((C137387 + C137436 * C137646) * ce) / C137082) / C137060 -
                  (ae * (C137433 * C137646 + C137384)) / C137333 +
                  C137332 * ((-((C137413 * C137414 +
                                 C137340 * bs[7] * std::pow(C137336, 7)) *
                                C137341 * C137646) /
                              C137082) /
                                 C137060 -
                             C137448 / C137333)));
    const double C5923 =
        (-2 * C137794) / C137333 + C137474 * C137803 +
        (((-2 * C137474 * C137395) / C137082 -
          (C137474 * (C137449 * C137646 + C137395)) / C137082) *
         ae) /
            C137060 -
        ((2 * C137474 * C137396 + C137474 * (C137396 + C137452 * C137646)) *
         ce) /
            C137333 +
        C137332 *
            ((((-2 * C137948) / C137082 -
               (C137474 * (C137433 * C137646 + C137384)) / C137082) *
              ae) /
                 C137060 -
             ((2 * C137947 + C137474 * (C137387 + C137436 * C137646)) * ce) /
                 C137333 +
             C137332 * ((-2 * C137949) / C137333 +
                        C137474 * ((-((C137413 * C137414 +
                                       C137340 * bs[7] * std::pow(C137336, 7)) *
                                      C137341 * C137646) /
                                    C137082) /
                                       C137060 -
                                   C137448 / C137333)));
    const double C5924 =
        (((-2 * C137474 * C137359) / C137082 -
          (C137474 * (C137384 * C137646 + C137359)) / C137082) *
         ae) /
            C137060 -
        ((2 * C137474 * C137360 + C137474 * (C137360 + C137387 * C137646)) *
         ce) /
            C137333 +
        C137332 * ((-2 * C137794) / C137333 + C137474 * C137803);
    const double C8761 =
        C137532 * C137803 -
        (ae * C137532 * (C137449 * C137646 + C137395)) / C137333 -
        (C137532 * (C137396 + C137452 * C137646) * ce) / C137333 +
        C137332 * ((-(C137532 * (C137387 + C137436 * C137646) * ce) / C137082) /
                       C137060 -
                   (ae * C137532 * (C137433 * C137646 + C137384)) / C137333 +
                   C137332 * C137532 *
                       ((-((C137413 * C137414 +
                            C137340 * bs[7] * std::pow(C137336, 7)) *
                           C137341 * C137646) /
                         C137082) /
                            C137060 -
                        C137448 / C137333));
    const double C8762 =
        (-(C137532 * (C137360 + C137387 * C137646) * ce) / C137082) / C137060 -
        (ae * C137532 * (C137384 * C137646 + C137359)) / C137333 +
        C137332 * C137532 * C137803;
    const double C20376 =
        (((-3 * (C137384 * C137646 + C137359)) / C137082 +
          C137474 * ((-2 * C137948) / C137082 -
                     (C137474 * (C137433 * C137646 + C137384)) / C137082)) *
         ae) /
            C137060 -
        ((3 * (C137360 + C137387 * C137646) +
          C137474 * (2 * C137947 + C137474 * (C137387 + C137436 * C137646))) *
         ce) /
            C137333 +
        C137332 *
            (3 * C137803 +
             C137474 * ((-2 * C137949) / C137333 +
                        C137474 * ((-((C137413 * C137414 +
                                       C137340 * bs[7] * std::pow(C137336, 7)) *
                                      C137341 * C137646) /
                                    C137082) /
                                       C137060 -
                                   C137448 / C137333)));
    const double C20377 =
        3 * ((-(C137394 * C137646) / C137082) / C137060 - C137364 / C137333) +
        C137474 * ((-2 * C137794) / C137333 + C137474 * C137803);
    const double C21084 =
        (-((C138193 + (C137387 + C137436 * C137646) * C137768) * ce) /
         C137082) /
            C137060 -
        (ae * ((C137433 * C137646 + C137384) * C137768 + C138209)) / C137333 +
        C137332 *
            (C137803 +
             ((-((C137413 * C137414 + C137340 * bs[7] * std::pow(C137336, 7)) *
                 C137341 * C137646) /
               C137082) /
                  C137060 -
              C137448 / C137333) *
                 C137768);
    const double C21085 = (-(C137394 * C137646) / C137082) / C137060 -
                          C137364 / C137333 + C137803 * C137768;
    const double C24135 =
        C137532 * ((-2 * C137794) / C137333 + C137474 * C137803);
    const double C68302 =
        4 * ((-2 * C137794) / C137333 + C137474 * C137803) +
        C137474 *
            (3 * C137803 +
             C137474 * ((-2 * C137949) / C137333 +
                        C137474 * ((-((C137413 * C137414 +
                                       C137340 * bs[7] * std::pow(C137336, 7)) *
                                      C137341 * C137646) /
                                    C137082) /
                                       C137060 -
                                   C137448 / C137333)));
    const double C68839 =
        (-2 * C137794) / C137333 + C137474 * C137803 +
        ((-2 * C137949) / C137333 +
         C137474 *
             ((-((C137413 * C137414 + C137340 * bs[7] * std::pow(C137336, 7)) *
                 C137341 * C137646) /
               C137082) /
                  C137060 -
              C137448 / C137333)) *
            C137768;
    const double C71168 =
        C137532 *
        (3 * C137803 +
         C137474 * ((-2 * C137949) / C137333 +
                    C137474 * ((-((C137413 * C137414 +
                                   C137340 * bs[7] * std::pow(C137336, 7)) *
                                  C137341 * C137646) /
                                C137082) /
                                   C137060 -
                               C137448 / C137333)));
    const double C73227 =
        2 * C137532 * C137803 +
        C137532 *
            (C137803 +
             ((-((C137413 * C137414 + C137340 * bs[7] * std::pow(C137336, 7)) *
                 C137341 * C137646) /
               C137082) /
                  C137060 -
              C137448 / C137333) *
                 C137768);
    const double C1795 =
        2 * ((-((C137360 + C137387 * C137768) * ce) / C137082) / C137060 -
             (ae * (C137384 * C137768 + C137359)) / C137333 +
             C137332 * C137881) -
        (ae * (C137461 * C137768 + C137404)) / C137333 -
        ((C137405 + C137462 * C137768) * ce) / C137333 +
        C137332 *
            (C137881 - (ae * (C137449 * C137768 + C137395)) / C137333 -
             ((C137396 + C137452 * C137768) * ce) / C137333 +
             C137332 *
                 ((-((C137387 + C137436 * C137768) * ce) / C137082) / C137060 -
                  (ae * (C137433 * C137768 + C137384)) / C137333 +
                  C137332 * ((-((C137413 * C137414 +
                                 C137340 * bs[7] * std::pow(C137336, 7)) *
                                C137341 * C137768) /
                              C137082) /
                                 C137060 -
                             C137448 / C137333)));
    const double C10822 =
        (-2 * C137872) / C137333 + C137532 * C137881 +
        (((-2 * C137532 * C137395) / C137082 -
          (C137532 * (C137449 * C137768 + C137395)) / C137082) *
         ae) /
            C137060 -
        ((2 * C137532 * C137396 + C137532 * (C137396 + C137452 * C137768)) *
         ce) /
            C137333 +
        C137332 *
            ((((-2 * C137970) / C137082 -
               (C137532 * (C137433 * C137768 + C137384)) / C137082) *
              ae) /
                 C137060 -
             ((2 * C137969 + C137532 * (C137387 + C137436 * C137768)) * ce) /
                 C137333 +
             C137332 * ((-2 * C137971) / C137333 +
                        C137532 * ((-((C137413 * C137414 +
                                       C137340 * bs[7] * std::pow(C137336, 7)) *
                                      C137341 * C137768) /
                                    C137082) /
                                       C137060 -
                                   C137448 / C137333)));
    const double C10823 =
        (((-2 * C137532 * C137359) / C137082 -
          (C137532 * (C137384 * C137768 + C137359)) / C137082) *
         ae) /
            C137060 -
        ((2 * C137532 * C137360 + C137532 * (C137360 + C137387 * C137768)) *
         ce) /
            C137333 +
        C137332 * ((-2 * C137872) / C137333 + C137532 * C137881);
    const double C43411 =
        (((-3 * (C137384 * C137768 + C137359)) / C137082 +
          C137532 * ((-2 * C137970) / C137082 -
                     (C137532 * (C137433 * C137768 + C137384)) / C137082)) *
         ae) /
            C137060 -
        ((3 * (C137360 + C137387 * C137768) +
          C137532 * (2 * C137969 + C137532 * (C137387 + C137436 * C137768))) *
         ce) /
            C137333 +
        C137332 *
            (3 * C137881 +
             C137532 * ((-2 * C137971) / C137333 +
                        C137532 * ((-((C137413 * C137414 +
                                       C137340 * bs[7] * std::pow(C137336, 7)) *
                                      C137341 * C137768) /
                                    C137082) /
                                       C137060 -
                                   C137448 / C137333)));
    const double C43412 =
        3 * ((-(C137394 * C137768) / C137082) / C137060 - C137364 / C137333) +
        C137532 * ((-2 * C137872) / C137333 + C137532 * C137881);
    const double C134356 =
        4 * ((-2 * C137872) / C137333 + C137532 * C137881) +
        C137532 *
            (3 * C137881 +
             C137532 * ((-2 * C137971) / C137333 +
                        C137532 * ((-((C137413 * C137414 +
                                       C137340 * bs[7] * std::pow(C137336, 7)) *
                                      C137341 * C137768) /
                                    C137082) /
                                       C137060 -
                                   C137448 / C137333)));
    const double C399 =
        4 * ((-2 * C137332 * C137656) / C137333 + C137332 * C137667) +
        C137332 *
            (3 * C137667 +
             C137332 * ((-2 * C137332 * C137662) / C137333 +
                        C137332 * ((-((C137413 * C137414 +
                                       C137646 * bs[7] * std::pow(C137336, 7)) *
                                      C137341 * C137340) /
                                    C137082) /
                                       C137060 -
                                   C137662 / C137333)));
    const double C1236 =
        (-(C137656 * C137340) / C137082) / C137060 - C137651 / C137333 -
        (ae * (C137474 * C137498 + C137386 * ce)) / C137333 -
        ((C137474 * C137613 + C137386 * ae) * ce) / C137333 +
        C137474 * ((-(C137613 * ce) / C137082) / C137060 -
                   (ae * C137498) / C137333 + C137474 * C137667);
    const double C1237 =
        (((-2 * C137488) / C137082 - (C137332 * C137498) / C137082) * ae) /
            C137060 -
        ((2 * C137603 + C137332 * C137613) * ce) / C137333 +
        C137474 * ((-2 * C137332 * C137656) / C137333 + C137332 * C137667);
    const double C1238 =
        (-2 * C137332 * C137656) / C137333 + C137332 * C137667 +
        ((C137474 * C137527 - (C137451 * ce) / C137082) * ae) / C137060 -
        ((C137474 * C137639 + C137451 * ae) * ce) / C137333 +
        C137474 *
            ((C137527 * ae) / C137060 - (C137639 * ce) / C137333 +
             C137474 * ((-2 * C137332 * C137662) / C137333 +
                        C137332 * ((-((C137413 * C137414 +
                                       C137646 * bs[7] * std::pow(C137336, 7)) *
                                      C137341 * C137340) /
                                    C137082) /
                                       C137060 -
                                   C137662 / C137333)));
    const double C2169 =
        C137532 * ((-2 * C137332 * C137656) / C137333 + C137332 * C137667);
    const double C2173 = (-(C137656 * C137340) / C137082) / C137060 -
                         C137651 / C137333 + C137667 * C137768;
    const double C2174 =
        (-2 * C137332 * C137656) / C137333 + C137332 * C137667 +
        ((-2 * C137332 * C137662) / C137333 +
         C137332 *
             ((-((C137413 * C137414 + C137646 * bs[7] * std::pow(C137336, 7)) *
                 C137341 * C137340) /
               C137082) /
                  C137060 -
              C137662 / C137333)) *
            C137768;
    const double C3019 =
        (((-3 * C137498) / C137082 + C137332 * C137527) * ae) / C137060 -
        ((3 * C137613 + C137332 * C137639) * ce) / C137333 +
        C137474 *
            (3 * C137667 +
             C137332 * ((-2 * C137332 * C137662) / C137333 +
                        C137332 * ((-((C137413 * C137414 +
                                       C137646 * bs[7] * std::pow(C137336, 7)) *
                                      C137341 * C137340) /
                                    C137082) /
                                       C137060 -
                                   C137662 / C137333)));
    const double C3767 =
        C137532 *
        (3 * C137667 +
         C137332 * ((-2 * C137332 * C137662) / C137333 +
                    C137332 * ((-((C137413 * C137414 +
                                   C137646 * bs[7] * std::pow(C137336, 7)) *
                                  C137341 * C137340) /
                                C137082) /
                                   C137060 -
                               C137662 / C137333)));
    const double C4669 = (-(C137532 * C137613 * ce) / C137082) / C137060 -
                         (ae * C137532 * C137498) / C137333 +
                         C137474 * C137532 * C137667;
    const double C6150 =
        2 * ((-(C137613 * ce) / C137082) / C137060 - (ae * C137498) / C137333 +
             C137474 * C137667) -
        (ae * (C137474 * C138056 + C137498 + C138054 * ce)) / C137333 -
        ((C137613 + C137474 * C138057 + C138054 * ae) * ce) / C137333 +
        C137474 *
            (C137667 - (ae * C138056) / C137333 - (C138057 * ce) / C137333 +
             C137474 * ((-(C137633 * ce) / C137082) / C137060 -
                        (ae * C137519) / C137333 +
                        C137474 * ((-((C137413 * C137414 +
                                       C137646 * bs[7] * std::pow(C137336, 7)) *
                                      C137341 * C137340) /
                                    C137082) /
                                       C137060 -
                                   C137662 / C137333)));
    const double C6768 =
        (-((C137613 + C137633 * C137768) * ce) / C137082) / C137060 -
        (ae * (C137519 * C137768 + C137498)) / C137333 +
        C137474 *
            (C137667 +
             ((-((C137413 * C137414 + C137646 * bs[7] * std::pow(C137336, 7)) *
                 C137341 * C137340) /
               C137082) /
                  C137060 -
              C137662 / C137333) *
                 C137768);
    const double C9080 =
        C137532 * C137667 - (ae * C137532 * C138056) / C137333 -
        (C137532 * C138057 * ce) / C137333 +
        C137474 * ((-(C137532 * C137633 * ce) / C137082) / C137060 -
                   (ae * C137532 * C137519) / C137333 +
                   C137474 * C137532 *
                       ((-((C137413 * C137414 +
                            C137646 * bs[7] * std::pow(C137336, 7)) *
                           C137341 * C137340) /
                         C137082) /
                            C137060 -
                        C137662 / C137333));
    const double C11047 =
        2 * C137532 * C137667 +
        C137532 *
            (C137667 +
             ((-((C137413 * C137414 + C137646 * bs[7] * std::pow(C137336, 7)) *
                 C137341 * C137340) /
               C137082) /
                  C137060 -
              C137662 / C137333) *
                 C137768);
    const double C69186 =
        2 * ((-(C138420 * ce) / C137082) / C137060 - (ae * C138454) / C137333 +
             C137474 * C138655) -
        (ae * (C138579 * C137768 + C138234)) / C137333 -
        ((C138235 + C138580 * C137768) * ce) / C137333 +
        C137474 *
            (C138655 - (ae * (C138559 * C137768 + C138222)) / C137333 -
             ((C138225 + C138562 * C137768) * ce) / C137333 +
             C137474 *
                 ((-((C137609 + C137627 * C137768) * ce) / C137082) / C137060 -
                  (ae * (C137512 * C137768 + C137494)) / C137333 +
                  C137474 * ((-((C137413 * C137414 +
                                 C137646 * bs[7] * std::pow(C137336, 7)) *
                                C137341 * C137768) /
                              C137082) /
                                 C137060 -
                             C137662 / C137333)));
    const double C73434 =
        (-2 * C138332) / C137333 + C137532 * C138655 +
        (((-2 * C137532 * C138222) / C137082 -
          (C137532 * (C138559 * C137768 + C138222)) / C137082) *
         ae) /
            C137060 -
        ((2 * C137532 * C138225 + C137532 * (C138225 + C138562 * C137768)) *
         ce) /
            C137333 +
        C137474 *
            ((((-2 * C138684) / C137082 -
               (C137532 * (C137512 * C137768 + C137494)) / C137082) *
              ae) /
                 C137060 -
             ((2 * C138657 + C137532 * (C137609 + C137627 * C137768)) * ce) /
                 C137333 +
             C137474 * ((-2 * C138685) / C137333 +
                        C137532 * ((-((C137413 * C137414 +
                                       C137646 * bs[7] * std::pow(C137336, 7)) *
                                      C137341 * C137768) /
                                    C137082) /
                                       C137060 -
                                   C137662 / C137333)));
    const double C89147 =
        (((-3 * C138454) / C137082 +
          C137532 * ((-2 * C138684) / C137082 -
                     (C137532 * (C137512 * C137768 + C137494)) / C137082)) *
         ae) /
            C137060 -
        ((3 * C138420 +
          C137532 * (2 * C138657 + C137532 * (C137609 + C137627 * C137768))) *
         ce) /
            C137333 +
        C137474 *
            (3 * C138655 +
             C137532 * ((-2 * C138685) / C137333 +
                        C137532 * ((-((C137413 * C137414 +
                                       C137646 * bs[7] * std::pow(C137336, 7)) *
                                      C137341 * C137768) /
                                    C137082) /
                                       C137060 -
                                   C137662 / C137333)));
    const double C134592 =
        4 * ((-2 * C138332) / C137333 + C137532 * C138655) +
        C137532 *
            (3 * C138655 +
             C137532 * ((-2 * C138685) / C137333 +
                        C137532 * ((-((C137413 * C137414 +
                                       C137646 * bs[7] * std::pow(C137336, 7)) *
                                      C137341 * C137768) /
                                    C137082) /
                                       C137060 -
                                   C137662 / C137333)));
    const double C724 =
        4 * ((-2 * C137332 * C137778) / C137333 + C137332 * C137789) +
        C137332 *
            (3 * C137789 +
             C137332 * ((-2 * C137332 * C137784) / C137333 +
                        C137332 * ((-((C137413 * C137414 +
                                       C137768 * bs[7] * std::pow(C137336, 7)) *
                                      C137341 * C137340) /
                                    C137082) /
                                       C137060 -
                                   C137784 / C137333)));
    const double C1664 = (-(C137778 * C137340) / C137082) / C137060 -
                         C137773 / C137333 + C137789 * C137646;
    const double C1665 =
        C137474 * ((-2 * C137332 * C137778) / C137333 + C137332 * C137789);
    const double C1666 =
        (-2 * C137332 * C137778) / C137333 + C137332 * C137789 +
        ((-2 * C137332 * C137784) / C137333 +
         C137332 *
             ((-((C137413 * C137414 + C137768 * bs[7] * std::pow(C137336, 7)) *
                 C137341 * C137340) /
               C137082) /
                  C137060 -
              C137784 / C137333)) *
            C137646;
    const double C2596 =
        (-(C137778 * C137340) / C137082) / C137060 - C137773 / C137333 -
        (ae * (C137532 * C137556 + C137386 * ce)) / C137333 -
        ((C137532 * C137714 + C137386 * ae) * ce) / C137333 +
        C137532 * ((-(C137714 * ce) / C137082) / C137060 -
                   (ae * C137556) / C137333 + C137532 * C137789);
    const double C2597 =
        (((-2 * C137546) / C137082 - (C137332 * C137556) / C137082) * ae) /
            C137060 -
        ((2 * C137704 + C137332 * C137714) * ce) / C137333 +
        C137532 * ((-2 * C137332 * C137778) / C137333 + C137332 * C137789);
    const double C2598 =
        (-2 * C137332 * C137778) / C137333 + C137332 * C137789 +
        ((C137532 * C137585 - (C137451 * ce) / C137082) * ae) / C137060 -
        ((C137532 * C137740 + C137451 * ae) * ce) / C137333 +
        C137532 *
            ((C137585 * ae) / C137060 - (C137740 * ce) / C137333 +
             C137532 * ((-2 * C137332 * C137784) / C137333 +
                        C137332 * ((-((C137413 * C137414 +
                                       C137768 * bs[7] * std::pow(C137336, 7)) *
                                      C137341 * C137340) /
                                    C137082) /
                                       C137060 -
                                   C137784 / C137333)));
    const double C3370 =
        C137474 *
        (3 * C137789 +
         C137332 * ((-2 * C137332 * C137784) / C137333 +
                    C137332 * ((-((C137413 * C137414 +
                                   C137768 * bs[7] * std::pow(C137336, 7)) *
                                  C137341 * C137340) /
                                C137082) /
                                   C137060 -
                               C137784 / C137333)));
    const double C4106 =
        (((-3 * C137556) / C137082 + C137332 * C137585) * ae) / C137060 -
        ((3 * C137714 + C137332 * C137740) * ce) / C137333 +
        C137532 *
            (3 * C137789 +
             C137332 * ((-2 * C137332 * C137784) / C137333 +
                        C137332 * ((-((C137413 * C137414 +
                                       C137768 * bs[7] * std::pow(C137336, 7)) *
                                      C137341 * C137340) /
                                    C137082) /
                                       C137060 -
                                   C137784 / C137333)));
    const double C5135 = (-(C137474 * C137714 * ce) / C137082) / C137060 -
                         (ae * C137474 * C137556) / C137333 +
                         C137532 * C137474 * C137789;
    const double C6363 =
        2 * C137474 * C137789 +
        C137474 *
            (C137789 +
             ((-((C137413 * C137414 + C137768 * bs[7] * std::pow(C137336, 7)) *
                 C137341 * C137340) /
               C137082) /
                  C137060 -
              C137784 / C137333) *
                 C137646);
    const double C7079 =
        C137474 * C137789 -
        (ae * (C137532 * C138110 + C138054 * ce)) / C137333 -
        ((C137532 * C138111 + C138054 * ae) * ce) / C137333 +
        C137532 *
            ((-(C138111 * ce) / C137082) / C137060 - (ae * C138110) / C137333 +
             C137532 * C137474 *
                 ((-((C137413 * C137414 +
                      C137768 * bs[7] * std::pow(C137336, 7)) *
                     C137341 * C137340) /
                   C137082) /
                      C137060 -
                  C137784 / C137333));
    const double C9391 =
        (-((C137714 + C137734 * C137646) * ce) / C137082) / C137060 -
        (ae * (C137577 * C137646 + C137556)) / C137333 +
        C137532 *
            (C137789 +
             ((-((C137413 * C137414 + C137768 * bs[7] * std::pow(C137336, 7)) *
                 C137341 * C137340) /
               C137082) /
                  C137060 -
              C137784 / C137333) *
                 C137646);
    const double C11264 =
        2 * ((-(C137714 * ce) / C137082) / C137060 - (ae * C137556) / C137333 +
             C137532 * C137789) -
        (ae * (C137532 * C138179 + C137556 + C138177 * ce)) / C137333 -
        ((C137714 + C137532 * C138180 + C138177 * ae) * ce) / C137333 +
        C137532 *
            (C137789 - (ae * C138179) / C137333 - (C138180 * ce) / C137333 +
             C137532 * ((-(C137734 * ce) / C137082) / C137060 -
                        (ae * C137577) / C137333 +
                        C137532 * ((-((C137413 * C137414 +
                                       C137768 * bs[7] * std::pow(C137336, 7)) *
                                      C137341 * C137340) /
                                    C137082) /
                                       C137060 -
                                   C137784 / C137333)));
    const double C68754 =
        4 * ((-2 * C138377) / C137333 + C137474 * C138640) +
        C137474 *
            (3 * C138640 +
             C137474 * ((-2 * C137474 * C137784) / C137333 +
                        C137474 * ((-((C137413 * C137414 +
                                       C137768 * bs[7] * std::pow(C137336, 7)) *
                                      C137341 * C137646) /
                                    C137082) /
                                       C137060 -
                                   C137784 / C137333)));
    const double C69498 =
        (-2 * C138377) / C137333 + C137474 * C138640 +
        ((C137532 * C138608 - (C138575 * ce) / C137082) * ae) / C137060 -
        ((C137532 * C138630 + C138575 * ae) * ce) / C137333 +
        C137532 *
            ((C138608 * ae) / C137060 - (C138630 * ce) / C137333 +
             C137532 * ((-2 * C137474 * C137784) / C137333 +
                        C137474 * ((-((C137413 * C137414 +
                                       C137768 * bs[7] * std::pow(C137336, 7)) *
                                      C137341 * C137646) /
                                    C137082) /
                                       C137060 -
                                   C137784 / C137333)));
    const double C71807 =
        (((-3 * C138275) / C137082 + C137474 * C138608) * ae) / C137060 -
        ((3 * C138285 + C137474 * C138630) * ce) / C137333 +
        C137532 *
            (3 * C138640 +
             C137474 * ((-2 * C137474 * C137784) / C137333 +
                        C137474 * ((-((C137413 * C137414 +
                                       C137768 * bs[7] * std::pow(C137336, 7)) *
                                      C137341 * C137646) /
                                    C137082) /
                                       C137060 -
                                   C137784 / C137333)));
    const double C73639 =
        2 * ((-(C138285 * ce) / C137082) / C137060 - (ae * C138275) / C137333 +
             C137532 * C138640) -
        (ae * (C137532 * C138712 + C138275 + C138710 * ce)) / C137333 -
        ((C138285 + C137532 * C138713 + C138710 * ae) * ce) / C137333 +
        C137532 *
            (C138640 - (ae * C138712) / C137333 - (C138713 * ce) / C137333 +
             C137532 * ((-(C138624 * ce) / C137082) / C137060 -
                        (ae * C138599) / C137333 +
                        C137532 * ((-((C137413 * C137414 +
                                       C137768 * bs[7] * std::pow(C137336, 7)) *
                                      C137341 * C137646) /
                                    C137082) /
                                       C137060 -
                                   C137784 / C137333)));
    const double C83544 = C83541 + C83542;
    const double C116093 = C116090 + C116091;
    const double C132647 = C132645 + C132646;
    const double C138581 = C138577 - C138555;
    const double C138875 = C138871 - C138857;
    const double C20679 =
        3 * ((-(ae * C138050) / C137082) / C137060 - C138046 / C137333 -
             (C138051 * ce) / C137333 + C137474 * C138253) +
        (((-2 * C138050) / C137082 - (C137474 * C138258) / C137082 -
          (C138247 * ce) / C137082) *
         ae) /
            C137060 -
        ((2 * C138051 + C137474 * C138259 + C138247 * ae) * ce) / C137333 +
        C137474 *
            (2 * C138253 - (ae * C138258) / C137333 - (C138259 * ce) / C137333 +
             C137474 * ((-(ae * C138251) / C137082) / C137060 -
                        C138238 / C137333 - (C138252 * ce) / C137333 +
                        C137474 * ((-(C138242 * ce) / C137082) / C137060 -
                                   (ae * C138239) / C137333 -
                                   (C137474 * C137332 *
                                    (C137413 * C137414 +
                                     C137646 * bs[7] * std::pow(C137336, 7)) *
                                    C137341) /
                                       C137333)));
    const double C14827 = C14822 + C14823;
    const double C48259 = C48254 + C48255;
    const double C86565 = C86562 + C86563;
    const double C119075 = C119072 + C119073;
    const double C83438 = C83431 + C83432;
    const double C115987 = C115980 + C115981;
    const double C132562 = C132558 + C132559;
    const double C86459 = C86452 + C86453;
    const double C118969 = C118962 + C118963;
    const double C3039 = C3038 * C139457;
    const double C5547 = C5546 * C139457;
    const double C3774 = C3772 * C139457;
    const double C44006 =
        3 * ((-(ae * C138173) / C137082) / C137060 - C138071 / C137333 -
             (C138174 * ce) / C137333 + C137532 * C138494) +
        (((-2 * C138173) / C137082 - (C137532 * C138499) / C137082 -
          (C138491 * ce) / C137082) *
         ae) /
            C137060 -
        ((2 * C138174 + C137532 * C138500 + C138491 * ae) * ce) / C137333 +
        C137532 *
            (2 * C138494 - (ae * C138499) / C137333 - (C138500 * ce) / C137333 +
             C137532 * ((-(ae * C138489) / C137082) / C137060 -
                        C138301 / C137333 - (C138492 * ce) / C137333 +
                        C137532 * ((-(C138292 * ce) / C137082) / C137060 -
                                   (ae * C138263) / C137333 -
                                   (C137532 * C137332 *
                                    (C137413 * C137414 +
                                     C137768 * bs[7] * std::pow(C137336, 7)) *
                                    C137341) /
                                       C137333)));
    const double C33064 = C33059 + C33060;
    const double C95011 = C95006 + C95007;
    const double C89428 =
        3 * ((-(ae * C138383) / C137082) / C137060 - C138377 / C137333 -
             (C138384 * ce) / C137333 + C137532 * C138770) +
        (((-2 * C138383) / C137082 - (C137532 * C138775) / C137082 -
          (C138764 * ce) / C137082) *
         ae) /
            C137060 -
        ((2 * C138384 + C137532 * C138776 + C138764 * ae) * ce) / C137333 +
        C137532 *
            (2 * C138770 - (ae * C138775) / C137333 - (C138776 * ce) / C137333 +
             C137532 * ((-(ae * C138768) / C137082) / C137060 -
                        C138755 / C137333 - (C138769 * ce) / C137333 +
                        C137532 * ((-(C138759 * ce) / C137082) / C137060 -
                                   (ae * C138756) / C137333 -
                                   (C137532 * C137474 *
                                    (C137413 * C137414 +
                                     C137768 * bs[7] * std::pow(C137336, 7)) *
                                    C137341) /
                                       C137333)));
    const double C64562 = C15285 * C139286;
    const double C68760 = C68756 * C139286;
    const double C14471 = C14460 + C14461;
    const double C16465 = C16462 + C16463;
    const double C47903 = C47892 + C47893;
    const double C49807 = C49804 + C49805;
    const double C65406 = C65402 + C65403;
    const double C14473 = C14464 + C14465;
    const double C14469 = C14456 + C14457;
    const double C47905 = C47896 + C47897;
    const double C47901 = C47888 + C47889;
    const double C64001 = C63993 + C63994;
    const double C32233 = C32219 + C32220;
    const double C34185 = C34181 + C34182;
    const double C79546 = C79542 + C79543;
    const double C94248 = C94234 + C94235;
    const double C96130 = C96126 + C96127;
    const double C32237 = C32227 + C32228;
    const double C32235 = C32223 + C32224;
    const double C77674 = C77662 + C77663;
    const double C94252 = C94242 + C94243;
    const double C94250 = C94238 + C94239;
    const double C18406 = C18401 + C18402;
    const double C18404 = C18397 + C18398;
    const double C51725 = C51720 + C51721;
    const double C51723 = C51716 + C51717;
    const double C66846 = C66840 + C66841;
    const double C68374 = C68372 + C68373;
    const double C68942 = C68939 + C68940;
    const double C71257 = C71255 + C71256;
    const double C83223 = C83221 + C83222;
    const double C193 =
        4 * (2 * C137501 - (ae * C137498) / C137333 + C137332 * C137529) +
        (((-3 * C137498) / C137082 + C137332 * C137527) * ae) / C137060 +
        C137332 *
            (3 * C137529 + (C137527 * ae) / C137060 +
             C137332 *
                 (2 * C137526 - (ae * C137519) / C137333 +
                  C137332 * ((-(ae * C137332 * C137512) / C137082) / C137060 -
                             C137509 / C137333 +
                             C137332 * ((-(C137332 * std::pow(C137336, 7) *
                                           bs[7] * C137481) /
                                         C137082) /
                                            C137060 -
                                        (ae * C137512) / C137333))));
    const double C950 =
        (-(ae * C137488) / C137082) / C137060 - C137485 / C137333 +
        C137332 * C137501 - (C137474 * C137405 * ce) / C137333 +
        C137474 * (C137474 * C137529 - (C137405 * ce) / C137333);
    const double C951 =
        C137474 * (2 * C137501 - (ae * C137498) / C137333 + C137332 * C137529) -
        ((2 * C137366 + C137332 * C137405 + C137386 * ae) * ce) / C137333;
    const double C1880 =
        C137532 * (2 * C137501 - (ae * C137498) / C137333 + C137332 * C137529);
    const double C1884 = (-(ae * C137488) / C137082) / C137060 -
                         C137485 / C137333 + C137332 * C137501 +
                         C137529 * C137768;
    const double C1885 =
        2 * C137501 - (ae * C137498) / C137333 + C137332 * C137529 +
        (2 * C137526 - (ae * C137519) / C137333 +
         C137332 *
             ((-(ae * C137332 * C137512) / C137082) / C137060 -
              C137509 / C137333 +
              C137332 * ((-(C137332 * std::pow(C137336, 7) * bs[7] * C137481) /
                          C137082) /
                             C137060 -
                         (ae * C137512) / C137333))) *
            C137768;
    const double C3532 =
        C137532 *
        (3 * C137529 + (C137527 * ae) / C137060 +
         C137332 * (2 * C137526 - (ae * C137519) / C137333 +
                    C137332 * ((-(ae * C137332 * C137512) / C137082) / C137060 -
                               C137509 / C137333 +
                               C137332 * ((-(C137332 * std::pow(C137336, 7) *
                                             bs[7] * C137481) /
                                           C137082) /
                                              C137060 -
                                          (ae * C137512) / C137333))));
    const double C4343 =
        C137532 * (C137474 * C137529 - (C137405 * ce) / C137333);
    const double C5983 =
        2 * (C137474 * C137529 - (C137405 * ce) / C137333) -
        ((C137405 + C137462 * C137646) * ce) / C137333 +
        C137474 *
            (C137529 - (C137474 * C137462 * ce) / C137333 +
             C137474 *
                 (C137474 * ((-(ae * C137332 * C137512) / C137082) / C137060 -
                             C137509 / C137333 +
                             C137332 * ((-(C137332 * std::pow(C137336, 7) *
                                           bs[7] * C137481) /
                                         C137082) /
                                            C137060 -
                                        (ae * C137512) / C137333)) -
                  (C137462 * ce) / C137333));
    const double C6529 =
        C137474 * C137529 - (C137405 * ce) / C137333 +
        (C137474 *
             ((-(ae * C137332 * C137512) / C137082) / C137060 -
              C137509 / C137333 +
              C137332 * ((-(C137332 * std::pow(C137336, 7) * bs[7] * C137481) /
                          C137082) /
                             C137060 -
                         (ae * C137512) / C137333)) -
         (C137462 * ce) / C137333) *
            C137768;
    const double C8841 =
        C137532 *
        (C137529 - (C138080 * ce) / C137333 +
         C137474 * (C137474 * ((-(ae * C137332 * C137512) / C137082) / C137060 -
                               C137509 / C137333 +
                               C137332 * ((-(C137332 * std::pow(C137336, 7) *
                                             bs[7] * C137481) /
                                           C137082) /
                                              C137060 -
                                          (ae * C137512) / C137333)) -
                    (C137462 * ce) / C137333));
    const double C10878 =
        2 * C137532 * C137529 +
        C137532 *
            (C137529 +
             ((-(ae * C137332 * C137512) / C137082) / C137060 -
              C137509 / C137333 +
              C137332 * ((-(C137332 * std::pow(C137336, 7) * bs[7] * C137481) /
                          C137082) /
                             C137060 -
                         (ae * C137512) / C137333)) *
                 C137768);
    const double C20458 =
        3 * (C137501 - (C138082 * ce) / C137333 + C137474 * C138186) -
        ((2 * C138082 + C137474 * C138187) * ce) / C137333 +
        C137474 *
            (2 * C138186 - (C138187 * ce) / C137333 +
             C137474 *
                 (C137526 - (C137474 * C137452 * ce) / C137333 +
                  C137474 * (C137474 * ((-(C137332 * std::pow(C137336, 7) *
                                           bs[7] * C137481) /
                                         C137082) /
                                            C137060 -
                                        (ae * C137512) / C137333) -
                             (C137452 * ce) / C137333)));
    const double C21198 =
        C137501 - (C138082 * ce) / C137333 + C137474 * C138186 +
        (C137526 - (C137474 * C137452 * ce) / C137333 +
         C137474 *
             (C137474 * ((-(C137332 * std::pow(C137336, 7) * bs[7] * C137481) /
                          C137082) /
                             C137060 -
                         (ae * C137512) / C137333) -
              (C137452 * ce) / C137333)) *
            C137768;
    const double C24248 =
        C137532 *
        (2 * C138186 - (C138187 * ce) / C137333 +
         C137474 * (C137526 - (C137474 * C137452 * ce) / C137333 +
                    C137474 * (C137474 * ((-(C137332 * std::pow(C137336, 7) *
                                             bs[7] * C137481) /
                                           C137082) /
                                              C137060 -
                                          (ae * C137512) / C137333) -
                               (C137452 * ce) / C137333)));
    const double C26906 =
        2 * C137532 * C138186 +
        C137532 *
            (C138186 +
             (C137474 * ((-(C137332 * std::pow(C137336, 7) * bs[7] * C137481) /
                          C137082) /
                             C137060 -
                         (ae * C137512) / C137333) -
              (C137452 * ce) / C137333) *
                 C137768);
    const double C20465 = C20461 + C20462;
    const double C53702 = C53698 + C53699;
    const double C64002 = C63995 + C63996;
    const double C21205 = C21201 + C21202;
    const double C54384 = C54380 + C54381;
    const double C77675 = C77665 + C77666;
    const double C24255 = C24251 + C24252;
    const double C57342 = C57338 + C57339;
    const double C66847 = C66842 + C66843;
    const double C43501 = C43498 + C43499;
    const double C105247 = C105244 + C105245;
    const double C126105 = C126101 + C126102;
    const double C68370 =
        4 * (2 * C138196 - (C138193 * ce) / C137333 + C137474 * C138516) -
        ((3 * C138193 + C137474 * C138513) * ce) / C137333 +
        C137474 *
            (3 * C138516 - (C138513 * ce) / C137333 +
             C137474 *
                 (2 * C138514 - (C138509 * ce) / C137333 +
                  C137474 * ((-(C137474 * C137436 * ce) / C137082) / C137060 -
                             C137509 / C137333 +
                             C137474 * ((-(C137474 * std::pow(C137336, 7) *
                                           bs[7] * C137481) /
                                         C137082) /
                                            C137060 -
                                        (C137436 * ce) / C137333))));
    const double C68935 =
        2 * C138196 - (C138193 * ce) / C137333 + C137474 * C138516 +
        (2 * C138514 - (C138509 * ce) / C137333 +
         C137474 *
             ((-(C137474 * C137436 * ce) / C137082) / C137060 -
              C137509 / C137333 +
              C137474 * ((-(C137474 * std::pow(C137336, 7) * bs[7] * C137481) /
                          C137082) /
                             C137060 -
                         (C137436 * ce) / C137333))) *
            C137768;
    const double C71253 =
        C137532 *
        (3 * C138516 - (C138513 * ce) / C137333 +
         C137474 * (2 * C138514 - (C138509 * ce) / C137333 +
                    C137474 * ((-(C137474 * C137436 * ce) / C137082) / C137060 -
                               C137509 / C137333 +
                               C137474 * ((-(C137474 * std::pow(C137336, 7) *
                                             bs[7] * C137481) /
                                           C137082) /
                                              C137060 -
                                          (C137436 * ce) / C137333))));
    const double C73279 =
        2 * C137532 * C138516 +
        C137532 *
            (C138516 +
             ((-(C137474 * C137436 * ce) / C137082) / C137060 -
              C137509 / C137333 +
              C137474 * ((-(C137474 * std::pow(C137336, 7) * bs[7] * C137481) /
                          C137082) /
                             C137060 -
                         (C137436 * ce) / C137333)) *
                 C137768);
    const double C344 = C335 + C336;
    const double C1153 = C1140 + C1141;
    const double C13829 = C13812 + C13813;
    const double C16679 = C16674 + C16675;
    const double C47267 = C47250 + C47251;
    const double C50021 = C50016 + C50017;
    const double C1155 = C1144 + C1145;
    const double C14717 = C14708 + C14709;
    const double C14713 = C14700 + C14701;
    const double C48149 = C48140 + C48141;
    const double C48145 = C48132 + C48133;
    const double C2089 = C2076 + C2077;
    const double C17606 = C17601 + C17602;
    const double C50927 = C50922 + C50923;
    const double C2091 = C2080 + C2081;
    const double C15715 = C15706 + C15707;
    const double C49079 = C49070 + C49071;
    const double C4567 = C4560 + C4561;
    const double C15711 = C15698 + C15699;
    const double C18690 = C18685 + C18686;
    const double C49075 = C49062 + C49063;
    const double C52009 = C52004 + C52005;
    const double C319 =
        4 * (2 * C137616 - (C137613 * ce) / C137333 + C137332 * C137642) -
        ((3 * C137613 + C137332 * C137639) * ce) / C137333 +
        C137332 *
            (3 * C137642 - (C137639 * ce) / C137333 +
             C137332 *
                 (2 * C137640 - (C137633 * ce) / C137333 +
                  C137332 * ((-(C137332 * C137627 * ce) / C137082) / C137060 -
                             C137624 / C137333 +
                             C137332 * ((-(C137332 * std::pow(C137336, 7) *
                                           bs[7] * C137596) /
                                         C137082) /
                                            C137060 -
                                        (C137627 * ce) / C137333))));
    const double C1128 =
        (((-2 * C137365) / C137082 - (C137332 * C137404) / C137082 -
          (C137386 * ce) / C137082) *
         ae) /
            C137060 +
        C137474 * (2 * C137616 - (C137613 * ce) / C137333 + C137332 * C137642);
    const double C1131 =
        (-(C137603 * ce) / C137082) / C137060 - C137600 / C137333 +
        C137332 * C137616 - (ae * C137474 * C137404) / C137333 +
        C137474 * (C137474 * C137642 - (ae * C137404) / C137333);
    const double C2064 =
        C137532 * (2 * C137616 - (C137613 * ce) / C137333 + C137332 * C137642);
    const double C2067 = (-(C137603 * ce) / C137082) / C137060 -
                         C137600 / C137333 + C137332 * C137616 +
                         C137642 * C137768;
    const double C2068 =
        2 * C137616 - (C137613 * ce) / C137333 + C137332 * C137642 +
        (2 * C137640 - (C137633 * ce) / C137333 +
         C137332 *
             ((-(C137332 * C137627 * ce) / C137082) / C137060 -
              C137624 / C137333 +
              C137332 * ((-(C137332 * std::pow(C137336, 7) * bs[7] * C137596) /
                          C137082) /
                             C137060 -
                         (C137627 * ce) / C137333))) *
            C137768;
    const double C3686 =
        C137532 *
        (3 * C137642 - (C137639 * ce) / C137333 +
         C137332 * (2 * C137640 - (C137633 * ce) / C137333 +
                    C137332 * ((-(C137332 * C137627 * ce) / C137082) / C137060 -
                               C137624 / C137333 +
                               C137332 * ((-(C137332 * std::pow(C137336, 7) *
                                             bs[7] * C137596) /
                                           C137082) /
                                              C137060 -
                                          (C137627 * ce) / C137333))));
    const double C4555 =
        C137474 * C137532 * C137642 - (ae * C137532 * C137404) / C137333;
    const double C6095 =
        2 * (C137474 * C137642 - (ae * C137404) / C137333) -
        (ae * (C137461 * C137646 + C137404)) / C137333 +
        C137474 *
            (C137642 - (ae * C137474 * C137461) / C137333 +
             C137474 *
                 (C137474 * ((-(C137332 * C137627 * ce) / C137082) / C137060 -
                             C137624 / C137333 +
                             C137332 * ((-(C137332 * std::pow(C137336, 7) *
                                           bs[7] * C137596) /
                                         C137082) /
                                            C137060 -
                                        (C137627 * ce) / C137333)) -
                  (ae * C137461) / C137333));
    const double C6689 =
        C137474 *
            (C137642 +
             ((-(C137332 * C137627 * ce) / C137082) / C137060 -
              C137624 / C137333 +
              C137332 * ((-(C137332 * std::pow(C137336, 7) * bs[7] * C137596) /
                          C137082) /
                             C137060 -
                         (C137627 * ce) / C137333)) *
                 C137768) -
        (ae * (C137461 * C137768 + C137404)) / C137333;
    const double C9001 =
        C137532 * C137642 - (ae * C137532 * C138095) / C137333 +
        C137474 *
            (C137474 * C137532 *
                 ((-(C137332 * C137627 * ce) / C137082) / C137060 -
                  C137624 / C137333 +
                  C137332 *
                      ((-(C137332 * std::pow(C137336, 7) * bs[7] * C137596) /
                        C137082) /
                           C137060 -
                       (C137627 * ce) / C137333)) -
             (ae * C137532 * C137461) / C137333);
    const double C10994 =
        2 * C137532 * C137642 +
        C137532 *
            (C137642 +
             ((-(C137332 * C137627 * ce) / C137082) / C137060 -
              C137624 / C137333 +
              C137332 * ((-(C137332 * std::pow(C137336, 7) * bs[7] * C137596) /
                          C137082) /
                             C137060 -
                         (C137627 * ce) / C137333)) *
                 C137768);
    const double C20610 =
        3 * (C137616 - (ae * C138097) / C137333 + C137474 * C138203) +
        (((-2 * C138097) / C137082 - (C137474 * C138204) / C137082) * ae) /
            C137060 +
        C137474 *
            (2 * C138203 - (ae * C138204) / C137333 +
             C137474 *
                 (C137640 - (ae * C137474 * C137449) / C137333 +
                  C137474 * (C137474 * ((-(C137332 * std::pow(C137336, 7) *
                                           bs[7] * C137596) /
                                         C137082) /
                                            C137060 -
                                        (C137627 * ce) / C137333) -
                             (ae * C137449) / C137333)));
    const double C14716 = C14706 + C14707;
    const double C48148 = C48138 + C48139;
    const double C15714 = C15704 + C15705;
    const double C35461 = C35456 + C35457;
    const double C49078 = C49068 + C49069;
    const double C18689 = C18683 + C18684;
    const double C31416 = C31413 + C31414;
    const double C52008 = C52002 + C52003;
    const double C32488 = C32481 + C32482;
    const double C68483 =
        4 * (2 * C138212 - (ae * C138209) / C137333 + C137474 * C138541) +
        (((-3 * C138209) / C137082 + C137474 * C138539) * ae) / C137060 +
        C137474 *
            (3 * C138541 + (C138539 * ae) / C137060 +
             C137474 *
                 (2 * C138538 - (ae * C138531) / C137333 +
                  C137474 * ((-(ae * C137474 * C137433) / C137082) / C137060 -
                             C137624 / C137333 +
                             C137474 * ((-(C137474 * std::pow(C137336, 7) *
                                           bs[7] * C137596) /
                                         C137082) /
                                            C137060 -
                                        (ae * C137433) / C137333))));
    const double C14593 = C14582 + C14583;
    const double C16568 = C16564 + C16565;
    const double C48025 = C48014 + C48015;
    const double C49910 = C49906 + C49907;
    const double C65488 = C65483 + C65484;
    const double C14594 = C14584 + C14585;
    const double C14590 = C14576 + C14577;
    const double C48026 = C48016 + C48017;
    const double C48022 = C48008 + C48009;
    const double C64099 = C64090 + C64091;
    const double C32358 = C32347 + C32348;
    const double C34290 = C34287 + C34288;
    const double C79648 = C79646 + C79647;
    const double C94373 = C94362 + C94363;
    const double C96235 = C96232 + C96233;
    const double C32360 = C32351 + C32352;
    const double C32356 = C32343 + C32344;
    const double C77793 = C77786 + C77787;
    const double C94375 = C94366 + C94367;
    const double C94371 = C94358 + C94359;
    const double C18547 = C18541 + C18542;
    const double C18545 = C18537 + C18538;
    const double C51866 = C51860 + C51861;
    const double C51864 = C51856 + C51857;
    const double C66968 = C66959 + C66960;
    const double C134481 = C134479 + C134480;
    const double C256 =
        4 * (2 * C137559 - (ae * C137556) / C137333 + C137332 * C137587) +
        (((-3 * C137556) / C137082 + C137332 * C137585) * ae) / C137060 +
        C137332 *
            (3 * C137587 + (C137585 * ae) / C137060 +
             C137332 *
                 (2 * C137584 - (ae * C137577) / C137333 +
                  C137332 * ((-(ae * C137332 * C137570) / C137082) / C137060 -
                             C137567 / C137333 +
                             C137332 * ((-(C137332 * std::pow(C137336, 7) *
                                           bs[7] * C137539) /
                                         C137082) /
                                            C137060 -
                                        (ae * C137570) / C137333))));
    const double C1040 = (-(ae * C137546) / C137082) / C137060 -
                         C137543 / C137333 + C137332 * C137559 +
                         C137587 * C137646;
    const double C1041 =
        C137474 * (2 * C137559 - (ae * C137556) / C137333 + C137332 * C137587);
    const double C1042 =
        2 * C137559 - (ae * C137556) / C137333 + C137332 * C137587 +
        (2 * C137584 - (ae * C137577) / C137333 +
         C137332 *
             ((-(ae * C137332 * C137570) / C137082) / C137060 -
              C137567 / C137333 +
              C137332 * ((-(C137332 * std::pow(C137336, 7) * bs[7] * C137539) /
                          C137082) /
                             C137060 -
                         (ae * C137570) / C137333))) *
            C137646;
    const double C1976 =
        (-(ae * C137546) / C137082) / C137060 - C137543 / C137333 +
        C137332 * C137559 - (C137532 * C137405 * ce) / C137333 +
        C137532 * (C137532 * C137587 - (C137405 * ce) / C137333);
    const double C1977 =
        C137532 * (2 * C137559 - (ae * C137556) / C137333 + C137332 * C137587) -
        ((2 * C137366 + C137332 * C137405 + C137386 * ae) * ce) / C137333;
    const double C2862 =
        C137474 *
        (3 * C137587 + (C137585 * ae) / C137060 +
         C137332 * (2 * C137584 - (ae * C137577) / C137333 +
                    C137332 * ((-(ae * C137332 * C137570) / C137082) / C137060 -
                               C137567 / C137333 +
                               C137332 * ((-(C137332 * std::pow(C137336, 7) *
                                             bs[7] * C137539) /
                                           C137082) /
                                              C137060 -
                                          (ae * C137570) / C137333))));
    const double C4449 =
        C137532 * C137474 * C137587 - (C137474 * C137405 * ce) / C137333;
    const double C6039 =
        2 * C137474 * C137587 +
        C137474 *
            (C137587 +
             ((-(ae * C137332 * C137570) / C137082) / C137060 -
              C137567 / C137333 +
              C137332 * ((-(C137332 * std::pow(C137336, 7) * bs[7] * C137539) /
                          C137082) /
                             C137060 -
                         (ae * C137570) / C137333)) *
                 C137646);
    const double C6609 =
        C137474 * C137587 - (C137532 * C138080 * ce) / C137333 +
        C137532 *
            (C137532 * C137474 *
                 ((-(ae * C137332 * C137570) / C137082) / C137060 -
                  C137567 / C137333 +
                  C137332 *
                      ((-(C137332 * std::pow(C137336, 7) * bs[7] * C137539) /
                        C137082) /
                           C137060 -
                       (ae * C137570) / C137333)) -
             (C138080 * ce) / C137333);
    const double C8921 =
        C137532 *
            (C137587 +
             ((-(ae * C137332 * C137570) / C137082) / C137060 -
              C137567 / C137333 +
              C137332 * ((-(C137332 * std::pow(C137336, 7) * bs[7] * C137539) /
                          C137082) /
                             C137060 -
                         (ae * C137570) / C137333)) *
                 C137646) -
        ((C137405 + C137462 * C137646) * ce) / C137333;
    const double C10938 =
        2 * (C137532 * C137587 - (C137405 * ce) / C137333) -
        ((C137405 + C137462 * C137768) * ce) / C137333 +
        C137532 *
            (C137587 - (C137532 * C137462 * ce) / C137333 +
             C137532 *
                 (C137532 * ((-(ae * C137332 * C137570) / C137082) / C137060 -
                             C137567 / C137333 +
                             C137332 * ((-(C137332 * std::pow(C137336, 7) *
                                           bs[7] * C137539) /
                                         C137082) /
                                            C137060 -
                                        (ae * C137570) / C137333)) -
                  (C137462 * ce) / C137333));
    const double C43569 =
        3 * (C137559 - (C138399 * ce) / C137333 + C137532 * C138402) -
        ((2 * C138399 + C137532 * C138403) * ce) / C137333 +
        C137532 *
            (2 * C138402 - (C138403 * ce) / C137333 +
             C137532 *
                 (C137584 - (C137532 * C137452 * ce) / C137333 +
                  C137532 * (C137532 * ((-(C137332 * std::pow(C137336, 7) *
                                           bs[7] * C137539) /
                                         C137082) /
                                            C137060 -
                                        (ae * C137570) / C137333) -
                             (C137452 * ce) / C137333)));
    const double C20542 = C20539 + C20540;
    const double C53775 = C53772 + C53773;
    const double C64100 = C64093 + C64094;
    const double C21314 = C21311 + C21312;
    const double C54489 = C54486 + C54487;
    const double C77794 = C77788 + C77789;
    const double C24364 = C24361 + C24362;
    const double C57447 = C57444 + C57445;
    const double C66969 = C66964 + C66965;
    const double C43576 = C43572 + C43573;
    const double C105318 = C105314 + C105315;
    const double C126183 = C126181 + C126182;
    const double C134477 =
        4 * (2 * C138412 - (C138409 * ce) / C137333 + C137532 * C138797) -
        ((3 * C138409 + C137532 * C138794) * ce) / C137333 +
        C137532 *
            (3 * C138797 - (C138794 * ce) / C137333 +
             C137532 *
                 (2 * C138795 - (C138790 * ce) / C137333 +
                  C137532 * ((-(C137532 * C137436 * ce) / C137082) / C137060 -
                             C137567 / C137333 +
                             C137532 * ((-(C137532 * std::pow(C137336, 7) *
                                           bs[7] * C137539) /
                                         C137082) /
                                            C137060 -
                                        (C137436 * ce) / C137333))));
    const double C86668 = C86664 + C86665;
    const double C119178 = C119174 + C119175;
    const double C89226 = C89222 + C89223;
    const double C121680 = C121676 + C121677;
    const double C130477 = C130475 + C130476;
    const double C134653 = C134651 + C134652;
    const double C1361 = C1356 + C1357;
    const double C16887 = C16884 + C16885;
    const double C50229 = C50226 + C50227;
    const double C3120 = C3117 + C3118;
    const double C14001 = C13994 + C13995;
    const double C47439 = C47432 + C47433;
    const double C2297 = C2292 + C2293;
    const double C3865 = C3862 + C3863;
    const double C4799 = C4796 + C4797;
    const double C17814 = C17811 + C17812;
    const double C51135 = C51132 + C51133;
    const double C68585 =
        4 * (2 * C138278 - (ae * C138275) / C137333 + C137474 * C138610) +
        (((-3 * C138275) / C137082 + C137474 * C138608) * ae) / C137060 +
        C137474 *
            (3 * C138610 + (C138608 * ae) / C137060 +
             C137474 *
                 (2 * C138607 - (ae * C138599) / C137333 +
                  C137474 * ((-(ae * C137474 * C137570) / C137082) / C137060 -
                             C137683 / C137333 +
                             C137474 * ((-(C137474 * std::pow(C137336, 7) *
                                           bs[7] * C137673) /
                                         C137082) /
                                            C137060 -
                                        (ae * C137570) / C137333))));
    const double C69261 =
        2 * (C137474 * C138669 - (ae * C138479) / C137333) -
        (ae * (C137532 * (C137532 * C138599 + C138567) + C138275 +
               C137532 * C138561 * ce)) /
            C137333 +
        C137474 *
            (C138669 -
             (ae * (C137532 * (C137532 * C137474 * C137570 + C138560) +
                    C138378 + C137532 * C138549 * ce)) /
                 C137333 +
             C137474 *
                 (C137474 * ((-(C137532 * C137627 * ce) / C137082) / C137060 -
                             C137683 / C137333 +
                             C137532 * ((-(C137532 * std::pow(C137336, 7) *
                                           bs[7] * C137673) /
                                         C137082) /
                                            C137060 -
                                        (C137627 * ce) / C137333)) -
                  (ae * (C137532 * (C137532 * C137570 + C137425) + C137552 +
                         C137532 * C137412 * ce)) /
                      C137333));
    const double C73485 =
        2 * C138340 - (C138420 * ce) / C137333 + C137532 * C138669 +
        (((-2 * C138383) / C137082 -
          (C137532 * (C137532 * (C137532 * C137474 * C137570 + C138560) +
                      C138378 + C137532 * C138549 * ce)) /
              C137082 -
          ((C138217 + C138549 * C137768) * ce) / C137082) *
         ae) /
            C137060 +
        C137474 *
            ((((-2 * C138467) / C137082 -
               (C137532 * (C137532 * (C137532 * C137570 + C137425) + C137552 +
                           C137532 * C137412 * ce)) /
                   C137082 -
               ((C137370 + C137412 * C137768) * ce) / C137082) *
              ae) /
                 C137060 +
             C137474 *
                 (2 * C138666 - ((C137609 + C137627 * C137768) * ce) / C137333 +
                  C137532 * ((-(C137532 * C137627 * ce) / C137082) / C137060 -
                             C137683 / C137333 +
                             C137532 * ((-(C137532 * std::pow(C137336, 7) *
                                           bs[7] * C137673) /
                                         C137082) /
                                            C137060 -
                                        (C137627 * ce) / C137333))));
    const double C89220 =
        (((-3 * C138479) / C137082 +
          C137532 * ((-2 * C138467) / C137082 -
                     (C137532 * (C137532 * (C137532 * C137570 + C137425) +
                                 C137552 + C137532 * C137412 * ce)) /
                         C137082 -
                     (C138733 * ce) / C137082) -
          ((2 * C138462 + C137532 * C138733) * ce) / C137082) *
         ae) /
            C137060 +
        C137474 *
            (3 * C138669 - ((2 * C138657 + C137532 * C138734) * ce) / C137333 +
             C137532 *
                 (2 * C138666 - (C138734 * ce) / C137333 +
                  C137532 * ((-(C137532 * C137627 * ce) / C137082) / C137060 -
                             C137683 / C137333 +
                             C137532 * ((-(C137532 * std::pow(C137336, 7) *
                                           bs[7] * C137673) /
                                         C137082) /
                                            C137060 -
                                        (C137627 * ce) / C137333))));
    const double C134649 =
        4 * (2 * C138340 - (C138420 * ce) / C137333 + C137532 * C138669) -
        ((3 * C138420 + C137532 * C138803) * ce) / C137333 +
        C137532 *
            (3 * C138669 - (C138803 * ce) / C137333 +
             C137532 *
                 (2 * C138666 - (C138734 * ce) / C137333 +
                  C137532 * ((-(C137532 * C137627 * ce) / C137082) / C137060 -
                             C137683 / C137333 +
                             C137532 * ((-(C137532 * std::pow(C137336, 7) *
                                           bs[7] * C137673) /
                                         C137082) /
                                            C137060 -
                                        (C137627 * ce) / C137333))));
    const double C71568 =
        3 * (C138340 - (ae * C138383) / C137333 + C137474 * C138696) +
        ((C137532 * C138608 - (C138575 * ce) / C137082) * ae) / C137060 +
        C137474 *
            (2 * C138696 - (ae * (C137532 * C138599 + C138567)) / C137333 +
             C137474 *
                 (C138666 -
                  (ae * (C137532 * C137474 * C137570 + C138560)) / C137333 +
                  C137474 * (C137474 * ((-(C137532 * std::pow(C137336, 7) *
                                           bs[7] * C137673) /
                                         C137082) /
                                            C137060 -
                                        (C137627 * ce) / C137333) -
                             (ae * (C137532 * C137570 + C137425)) / C137333)));
    const double C591 = C582 + C583;
    const double C1475 = C1462 + C1463;
    const double C33764 = C33759 + C33760;
    const double C95709 = C95704 + C95705;
    const double C1477 = C1466 + C1467;
    const double C31750 = C31741 + C31742;
    const double C93765 = C93756 + C93757;
    const double C2411 = C2398 + C2399;
    const double C30846 = C30829 + C30830;
    const double C34715 = C34710 + C34711;
    const double C92883 = C92866 + C92867;
    const double C96639 = C96634 + C96635;
    const double C2413 = C2402 + C2403;
    const double C32844 = C32835 + C32836;
    const double C32840 = C32827 + C32828;
    const double C94791 = C94782 + C94783;
    const double C94787 = C94774 + C94775;
    const double C4917 = C4910 + C4911;
    const double C31746 = C31733 + C31734;
    const double C35895 = C35890 + C35891;
    const double C93761 = C93748 + C93749;
    const double C97769 = C97764 + C97765;
    const double C566 =
        4 * (2 * C137717 - (C137714 * ce) / C137333 + C137332 * C137743) -
        ((3 * C137714 + C137332 * C137740) * ce) / C137333 +
        C137332 *
            (3 * C137743 - (C137740 * ce) / C137333 +
             C137332 *
                 (2 * C137741 - (C137734 * ce) / C137333 +
                  C137332 * ((-(C137332 * C137728 * ce) / C137082) / C137060 -
                             C137725 / C137333 +
                             C137332 * ((-(C137332 * std::pow(C137336, 7) *
                                           bs[7] * C137697) /
                                         C137082) /
                                            C137060 -
                                        (C137728 * ce) / C137333))));
    const double C1450 =
        C137474 * (2 * C137717 - (C137714 * ce) / C137333 + C137332 * C137743);
    const double C1453 = (-(C137704 * ce) / C137082) / C137060 -
                         C137701 / C137333 + C137332 * C137717 +
                         C137743 * C137646;
    const double C1454 =
        2 * C137717 - (C137714 * ce) / C137333 + C137332 * C137743 +
        (2 * C137741 - (C137734 * ce) / C137333 +
         C137332 *
             ((-(C137332 * C137728 * ce) / C137082) / C137060 -
              C137725 / C137333 +
              C137332 * ((-(C137332 * std::pow(C137336, 7) * bs[7] * C137697) /
                          C137082) /
                             C137060 -
                         (C137728 * ce) / C137333))) *
            C137646;
    const double C2386 =
        (((-2 * C137365) / C137082 - (C137332 * C137404) / C137082 -
          (C137386 * ce) / C137082) *
         ae) /
            C137060 +
        C137532 * (2 * C137717 - (C137714 * ce) / C137333 + C137332 * C137743);
    const double C2389 =
        (-(C137704 * ce) / C137082) / C137060 - C137701 / C137333 +
        C137332 * C137717 - (ae * C137532 * C137404) / C137333 +
        C137532 * (C137532 * C137743 - (ae * C137404) / C137333);
    const double C3196 =
        C137474 *
        (3 * C137743 - (C137740 * ce) / C137333 +
         C137332 * (2 * C137741 - (C137734 * ce) / C137333 +
                    C137332 * ((-(C137332 * C137728 * ce) / C137082) / C137060 -
                               C137725 / C137333 +
                               C137332 * ((-(C137332 * std::pow(C137336, 7) *
                                             bs[7] * C137697) /
                                           C137082) /
                                              C137060 -
                                          (C137728 * ce) / C137333))));
    const double C4905 =
        C137532 * C137474 * C137743 - (ae * C137474 * C137404) / C137333;
    const double C6257 =
        2 * C137474 * C137743 +
        C137474 *
            (C137743 +
             ((-(C137332 * C137728 * ce) / C137082) / C137060 -
              C137725 / C137333 +
              C137332 * ((-(C137332 * std::pow(C137336, 7) * bs[7] * C137697) /
                          C137082) /
                             C137060 -
                         (C137728 * ce) / C137333)) *
                 C137646);
    const double C6923 =
        C137474 * C137743 - (ae * C137532 * C138095) / C137333 +
        C137532 *
            (C137532 * C137474 *
                 ((-(C137332 * C137728 * ce) / C137082) / C137060 -
                  C137725 / C137333 +
                  C137332 *
                      ((-(C137332 * std::pow(C137336, 7) * bs[7] * C137697) /
                        C137082) /
                           C137060 -
                       (C137728 * ce) / C137333)) -
             (ae * C138095) / C137333);
    const double C9235 =
        C137532 *
            (C137743 +
             ((-(C137332 * C137728 * ce) / C137082) / C137060 -
              C137725 / C137333 +
              C137332 * ((-(C137332 * std::pow(C137336, 7) * bs[7] * C137697) /
                          C137082) /
                             C137060 -
                         (C137728 * ce) / C137333)) *
                 C137646) -
        (ae * (C137461 * C137646 + C137404)) / C137333;
    const double C11156 =
        2 * (C137532 * C137743 - (ae * C137404) / C137333) -
        (ae * (C137461 * C137768 + C137404)) / C137333 +
        C137532 *
            (C137743 - (ae * C137532 * C137461) / C137333 +
             C137532 *
                 (C137532 * ((-(C137332 * C137728 * ce) / C137082) / C137060 -
                             C137725 / C137333 +
                             C137332 * ((-(C137332 * std::pow(C137336, 7) *
                                           bs[7] * C137697) /
                                         C137082) /
                                            C137060 -
                                        (C137728 * ce) / C137333)) -
                  (ae * C137461) / C137333));
    const double C43869 =
        3 * (C137717 - (ae * C138426) / C137333 + C137532 * C138429) +
        (((-2 * C138426) / C137082 - (C137532 * C138430) / C137082) * ae) /
            C137060 +
        C137532 *
            (2 * C138429 - (ae * C138430) / C137333 +
             C137532 *
                 (C137741 - (ae * C137532 * C137449) / C137333 +
                  C137532 * (C137532 * ((-(C137332 * std::pow(C137336, 7) *
                                           bs[7] * C137697) /
                                         C137082) /
                                            C137060 -
                                        (C137728 * ce) / C137333) -
                             (ae * C137449) / C137333)));
    const double C15065 = C15058 + C15059;
    const double C16039 = C16036 + C16037;
    const double C35894 = C35888 + C35889;
    const double C97768 = C97762 + C97763;
    const double C19110 = C19105 + C19106;
    const double C31749 = C31739 + C31740;
    const double C93764 = C93754 + C93755;
    const double C32843 = C32833 + C32834;
    const double C94790 = C94780 + C94781;
    const double C134704 =
        4 * (2 * C138439 - (ae * C138436) / C137333 + C137532 * C138822) +
        (((-3 * C138436) / C137082 + C137532 * C138820) * ae) / C137060 +
        C137532 *
            (3 * C138822 + (C138820 * ae) / C137060 +
             C137532 *
                 (2 * C138819 - (ae * C138812) / C137333 +
                  C137532 * ((-(ae * C137532 * C137433) / C137082) / C137060 -
                             C137725 / C137333 +
                             C137532 * ((-(C137532 * std::pow(C137336, 7) *
                                           bs[7] * C137697) /
                                         C137082) /
                                            C137060 -
                                        (ae * C137433) / C137333))));
    const double C68704 = C68702 + C68703;
    const double C69424 = C69422 + C69423;
    const double C86882 = C86878 + C86879;
    const double C119392 = C119388 + C119389;
    const double C71733 = C71731 + C71732;
    const double C82919 = C82915 + C82916;
    const double C115512 = C115508 + C115509;
    const double C83861 = C83857 + C83858;
    const double C116410 = C116406 + C116407;
    const double C1581 = C1576 + C1577;
    const double C3293 = C3290 + C3291;
    const double C4031 = C4028 + C4029;
    const double C30934 = C30927 + C30928;
    const double C92971 = C92964 + C92965;
    const double C2513 = C2508 + C2509;
    const double C34819 = C34816 + C34817;
    const double C96743 = C96740 + C96741;
    const double C5033 = C5030 + C5031;
    const double C33868 = C33865 + C33866;
    const double C95813 = C95810 + C95811;
    const double C68700 =
        4 * (2 * C138288 - (C138285 * ce) / C137333 + C137474 * C138634) -
        ((3 * C138285 + C137474 * C138630) * ce) / C137333 +
        C137474 *
            (3 * C138634 - (C138630 * ce) / C137333 +
             C137474 *
                 (2 * C138632 - (C138624 * ce) / C137333 +
                  C137474 * ((-(C137474 * C137728 * ce) / C137082) / C137060 -
                             C137759 / C137333 +
                             C137474 * ((-(C137474 * std::pow(C137336, 7) *
                                           bs[7] * C137749) /
                                         C137082) /
                                            C137060 -
                                        (C137728 * ce) / C137333))));
    const double C73588 =
        2 * (C137532 * C138634 - (ae * C138234) / C137333) -
        (ae * (C138579 * C137768 + C138234)) / C137333 +
        C137532 *
            (C138634 - (ae * C137532 * C138579) / C137333 +
             C137532 *
                 (C137532 * ((-(C137474 * C137728 * ce) / C137082) / C137060 -
                             C137759 / C137333 +
                             C137474 * ((-(C137474 * std::pow(C137336, 7) *
                                           bs[7] * C137749) /
                                         C137082) /
                                            C137060 -
                                        (C137728 * ce) / C137333)) -
                  (ae * C138579) / C137333));
    const double C89361 =
        3 * (C138288 - (ae * C138747) / C137333 + C137532 * C138751) +
        (((-2 * C138747) / C137082 - (C137532 * C138752) / C137082) * ae) /
            C137060 +
        C137532 *
            (2 * C138751 - (ae * C138752) / C137333 +
             C137532 *
                 (C138632 - (ae * C137532 * C138559) / C137333 +
                  C137532 * (C137532 * ((-(C137474 * std::pow(C137336, 7) *
                                           bs[7] * C137749) /
                                         C137082) /
                                            C137060 -
                                        (C137728 * ce) / C137333) -
                             (ae * C138559) / C137333)));
    const double C134755 =
        4 * (2 * C138457 - (ae * C138454) / C137333 + C137532 * C138841) +
        (((-3 * C138454) / C137082 + C137532 * C138839) * ae) / C137060 +
        C137532 *
            (3 * C138841 + (C138839 * ae) / C137060 +
             C137532 *
                 (2 * C138838 - (ae * C138831) / C137333 +
                  C137532 * ((-(ae * C137532 * C137512) / C137082) / C137060 -
                             C137759 / C137333 +
                             C137532 * ((-(C137532 * std::pow(C137336, 7) *
                                           bs[7] * C137749) /
                                         C137082) /
                                            C137060 -
                                        (ae * C137512) / C137333))));
    const double C130158 = C130157 * C139442;
    const double C136526 = C136525 * C139442;
    const double C22645 = C1476 * C137108;
    const double C22641 = C15063 * C137108;
    const double C22635 = C1472 * C137108;
    const double C22631 = C15060 * C137108;
    const double C23765 = C4916 * C137108;
    const double C23761 = C19108 * C137108;
    const double C39988 = C4566 * C137108;
    const double C39984 = C35459 * C137108;
    const double C39978 = C2086 * C137108;
    const double C39974 = C32483 * C137108;
    const double C45580 = C2090 * C137108;
    const double C45576 = C32486 * C137108;
    const double C69593 = C63894 * C137108;
    const double C69587 = C63888 * C137108;
    const double C69583 = C63884 * C137108;
    const double C70045 = C20833 * C137108;
    const double C70302 = C66728 * C137108;
    const double C70298 = C66724 * C137108;
    const double C70894 = C24775 * C137108;
    const double C84987 = C68853 * C137108;
    const double C84979 = C77533 * C137108;
    const double C90704 = C77539 * C137108;
    const double C131764 = C38054 * C137108;
    const double C135767 = C88852 * C137108;
    const double C135997 = C43654 * C137108;
    const double C103 =
        ((((0 - (C137080 * C137081) / C137082) * ce) / C137082 -
          (0 * de) / C137091 + C137083 / C137082) /
             C137087 -
         ((C137080 * C137104 + 0) * de) / C137082) /
            C137087 +
        ((C137080 * (C137104 / C137087 -
                     ((C137080 * C137108 + C139552) * de) / C137082 + C137101) +
          C139589) *
         ce) /
            C137082 +
        C137108 / C137087 - ((C137080 * C137101 + C139305) * de) / C137082;
    const double C104 =
        (C137104 / C137087 - ((C137080 * C137108 + C139552) * de) / C137082 +
         C137101) /
            C137087 +
        ((C137080 * (C137108 / C137087 -
                     ((C137080 * C137101 + C139305) * de) / C137082) +
          C139590) *
         ce) /
            C137082 +
        2 * (C137101 / C137087 - (0 * de) / C137082);
    const double C105 =
        (C137108 / C137087 - ((C137080 * C137101 + C139305) * de) / C137082) /
            C137087 +
        ((C137080 * (C137101 / C137087 - (0 * de) / C137082) + C2699) * ce) /
            C137082;
    const double C2702 = C137104 / C137087 -
                         ((C137080 * C137108 + C139552) * de) / C137082 +
                         C137101;
    const double C2703 =
        C137108 / C137087 - ((C137080 * C137101 + C139305) * de) / C137082;
    const double C5230 = C137104 / C137087 +
                         ((C137080 * C137108 + C139552) * ce) / C137082 +
                         C137101;
    const double C5231 =
        C137108 / C137087 + ((C137080 * C137101 + C139305) * ce) / C137082;
    const double C64410 = C64405 - C15046;
    const double C126263 = C126258 - C32469;
    const double C63909 = C63908 - C63902;
    const double C80370 = C66730 - C80368;
    const double C80369 = C80367 - C66730;
    const double C126017 = C126010 - C77547;
    const double C5976 =
        ((((0 - (C137135 * C137190) / C137082) * ce) / C137082 -
          (0 * de) / C137091 + C137136 / C137082) /
             C137087 -
         ((C137135 * C137207 + 0) * de) / C137082) /
            C137087 +
        ((C137135 * (C137207 / C137087 -
                     ((C137135 * C137209 + C139560) * de) / C137082 + C137202) +
          C139591) *
         ce) /
            C137082 +
        C137209 / C137087 - ((C137135 * C137202 + C139377) * de) / C137082;
    const double C5977 =
        (C137207 / C137087 - ((C137135 * C137209 + C139560) * de) / C137082 +
         C137202) /
            C137087 +
        ((C137135 * (C137209 / C137087 -
                     ((C137135 * C137202 + C139377) * de) / C137082) +
          C139592) *
         ce) /
            C137082 +
        2 * (C137202 / C137087 - (0 * de) / C137082);
    const double C5978 =
        (C137209 / C137087 - ((C137135 * C137202 + C139377) * de) / C137082) /
            C137087 +
        ((C137135 * (C137202 / C137087 - (0 * de) / C137082) + C7158) * ce) /
            C137082;
    const double C7235 = C137207 / C137087 -
                         ((C137135 * C137209 + C139560) * de) / C137082 +
                         C137202;
    const double C7236 =
        C137209 / C137087 - ((C137135 * C137202 + C139377) * de) / C137082;
    const double C10931 =
        ((((0 - (C137150 * C137236) / C137082) * ce) / C137082 -
          (0 * de) / C137091 + C137151 / C137082) /
             C137087 -
         ((C137150 * C137253 + 0) * de) / C137082) /
            C137087 +
        ((C137150 * (C137253 / C137087 -
                     ((C137150 * C137255 + C139561) * de) / C137082 + C137248) +
          C139593) *
         ce) /
            C137082 +
        C137255 / C137087 - ((C137150 * C137248 + C139403) * de) / C137082;
    const double C10932 =
        (C137253 / C137087 - ((C137150 * C137255 + C139561) * de) / C137082 +
         C137248) /
            C137087 +
        ((C137150 * (C137255 / C137087 -
                     ((C137150 * C137248 + C139403) * de) / C137082) +
          C139594) *
         ce) /
            C137082 +
        2 * (C137248 / C137087 - (0 * de) / C137082);
    const double C10933 =
        (C137255 / C137087 - ((C137150 * C137248 + C139403) * de) / C137082) /
            C137087 +
        ((C137150 * (C137248 / C137087 - (0 * de) / C137082) + C12239) * ce) /
            C137082;
    const double C12388 = C137253 / C137087 -
                          ((C137150 * C137255 + C139561) * de) / C137082 +
                          C137248;
    const double C12389 =
        C137255 / C137087 - ((C137150 * C137248 + C139403) * de) / C137082;
    const double C35612 = C35608 + C4684;
    const double C35611 = C35607 - C4684;
    const double C40125 = C40123 + C8274;
    const double C40124 = C40122 - C8274;
    const double C130399 = C130397 - C38170;
    const double C136755 = C136754 - C46571;
    const double C19401 = C19397 + C5150;
    const double C19400 = C19396 - C5150;
    const double C28566 = C28564 + C12159;
    const double C28565 = C28563 - C12159;
    const double C71817 = C71815 - C24988;
    const double C73173 = C73172 - C26760;
    const double C65326 = C65322 * C2704;
    const double C65485 = C65322 * C244;
    const double C67650 = C65322 * C5232;
    const double C127386 = C127384 * C2704;
    const double C127462 = C127384 * C181;
    const double C133026 = C127384 * C5232;
    const double C78539 = C78537 * C2704;
    const double C78740 = C78537 * C244;
    const double C79544 = C78537 * C181;
    const double C81587 = C78537 * C5232;
    const double C65327 = C65323 * C2699;
    const double C67651 = C65323 * C5227;
    const double C127387 = C127385 * C2699;
    const double C133027 = C127385 * C5227;
    const double C78540 = C78538 * C2699;
    const double C81588 = C78538 * C5227;
    const double C137466 = C137453 + C137463;
    const double C130075 = C83094 * C139442;
    const double C952 =
        2 * C137501 - (ae * C137498) / C137333 + C137332 * C137529 -
        (C137474 * C137470 * ce) / C137333 +
        C137474 *
            (C137474 *
                 (2 * C137526 - (ae * C137519) / C137333 +
                  C137332 * ((-(ae * C137332 * C137512) / C137082) / C137060 -
                             C137509 / C137333 +
                             C137332 * ((-(C137332 * std::pow(C137336, 7) *
                                           bs[7] * C137481) /
                                         C137082) /
                                            C137060 -
                                        (ae * C137512) / C137333))) -
             (C137470 * ce) / C137333);
    const double C1978 =
        2 * C137559 - (ae * C137556) / C137333 + C137332 * C137587 -
        (C137532 * C137470 * ce) / C137333 +
        C137532 *
            (C137532 *
                 (2 * C137584 - (ae * C137577) / C137333 +
                  C137332 * ((-(ae * C137332 * C137570) / C137082) / C137060 -
                             C137567 / C137333 +
                             C137332 * ((-(C137332 * std::pow(C137336, 7) *
                                           bs[7] * C137539) /
                                         C137082) /
                                            C137060 -
                                        (ae * C137570) / C137333))) -
             (C137470 * ce) / C137333);
    const double C2786 =
        C137474 *
            (3 * C137529 + (C137527 * ae) / C137060 +
             C137332 *
                 (2 * C137526 - (ae * C137519) / C137333 +
                  C137332 * ((-(ae * C137332 * C137512) / C137082) / C137060 -
                             C137509 / C137333 +
                             C137332 * ((-(C137332 * std::pow(C137336, 7) *
                                           bs[7] * C137481) /
                                         C137082) /
                                            C137060 -
                                        (ae * C137512) / C137333)))) -
        ((3 * C137405 + C137332 * C137470 + C137451 * ae) * ce) / C137333;
    const double C3610 =
        C137532 *
            (3 * C137587 + (C137585 * ae) / C137060 +
             C137332 *
                 (2 * C137584 - (ae * C137577) / C137333 +
                  C137332 * ((-(ae * C137332 * C137570) / C137082) / C137060 -
                             C137567 / C137333 +
                             C137332 * ((-(C137332 * std::pow(C137336, 7) *
                                           bs[7] * C137539) /
                                         C137082) /
                                            C137060 -
                                        (ae * C137570) / C137333)))) -
        ((3 * C137405 + C137332 * C137470 + C137451 * ae) * ce) / C137333;
    const double C4344 =
        C137532 *
        (C137474 * (2 * C137526 - (ae * C137519) / C137333 +
                    C137332 * ((-(ae * C137332 * C137512) / C137082) / C137060 -
                               C137509 / C137333 +
                               C137332 * ((-(C137332 * std::pow(C137336, 7) *
                                             bs[7] * C137481) /
                                           C137082) /
                                              C137060 -
                                          (ae * C137512) / C137333))) -
         (C137470 * ce) / C137333);
    const double C4450 =
        C137532 * C137474 *
            (2 * C137584 - (ae * C137577) / C137333 +
             C137332 * ((-(ae * C137332 * C137570) / C137082) / C137060 -
                        C137567 / C137333 +
                        C137332 * ((-(C137332 * std::pow(C137336, 7) * bs[7] *
                                      C137539) /
                                    C137082) /
                                       C137060 -
                                   (ae * C137570) / C137333))) -
        (C137474 * C137470 * ce) / C137333;
    const double C123 =
        (4 * (2 * C137366 + C137332 * C137405 + C137386 * ae) +
         C137332 * (3 * C137405 + C137332 * C137470 + C137451 * ae) +
         (3 * C137386 + C137332 * C137451) * ae) /
        C137060;
    const double C850 =
        (2 * C137366 + C137332 * C137405 + C137386 * ae + C137470 * C137646) /
        C137060;
    const double C1786 =
        (2 * C137366 + C137332 * C137405 + C137386 * ae + C137470 * C137768) /
        C137060;
    const double C2706 =
        (C137474 * (3 * C137405 + C137332 * C137470 + C137451 * ae)) / C137060;
    const double C3454 =
        (C137532 * (3 * C137405 + C137332 * C137470 + C137451 * ae)) / C137060;
    const double C4233 = (C137532 * C137474 * C137470) / C137060;
    const double C68482 =
        (4 * (2 * C138044 + C137474 * C138235 + C138224 * ae) +
         C137474 * (3 * C138235 + C137474 * C138589 + C138575 * ae) +
         (3 * C138224 + C137474 * C138575) * ae) /
        C137060;
    const double C69110 =
        (2 * C138044 + C137474 * C138235 + C138224 * ae + C138589 * C137768) /
        C137060;
    const double C71417 =
        (C137532 * (3 * C138235 + C137474 * C138589 + C138575 * ae)) / C137060;
    const double C134703 =
        (4 * (2 * C138168 + C137532 * C138480 + C138469 * ae) +
         C137532 * (3 * C138480 + C137532 * C138886 + C138864 * ae) +
         (3 * C138469 + C137532 * C138864) * ae) /
        C137060;
    const double C137471 = C137469 - C137450;
    const double C138590 = C138588 - C138574;
    const double C138887 = C138885 - C138863;
    const double C20386 = C139575 * C5924;
    const double C53627 = C139575 * C5924;
    const double C63883 = C139286 * C5924;
    const double C24144 = C139575 * C8762;
    const double C57235 = C139575 * C8762;
    const double C66721 = C139286 * C8762;
    const double C68313 = C139286 * C20377;
    const double C68852 = C139286 * C21085;
    const double C71174 = C139286 * C24135;
    const double C43421 = C139575 * C10823;
    const double C105171 = C139575 * C10823;
    const double C126016 = C139286 * C10823;
    const double C134362 = C139286 * C43412;
    const double C1255 = C139442 * C1236;
    const double C16781 = C139586 * C1236;
    const double C50123 = C139586 * C1236;
    const double C3033 = C139442 * C1237;
    const double C13911 = C139586 * C1237;
    const double C47349 = C139586 * C1237;
    const double C3771 = C139442 * C2169;
    const double C2187 = C139442 * C2173;
    const double C4681 = C139442 * C4669;
    const double C17708 = C139586 * C4669;
    const double C51029 = C139586 * C4669;
    const double C1679 = C139457 * C1664;
    const double C3375 = C139457 * C1665;
    const double C2615 = C139457 * C2596;
    const double C34921 = C139588 * C2596;
    const double C96845 = C139588 * C2596;
    const double C4120 = C139457 * C2597;
    const double C31012 = C139588 * C2597;
    const double C93049 = C139588 * C2597;
    const double C5147 = C139457 * C5135;
    const double C33970 = C139588 * C5135;
    const double C95915 = C139588 * C5135;
    const double C132648 = C132647 * C7158;
    const double C134007 = C132647 * C825;
    const double C138585 = C138581 + C138582;
    const double C138882 = C138875 + C138879;
    const double C132564 = C132562 * C5913;
    const double C132644 = C132562 * C7237;
    const double C134006 = C132562 * C936;
    const double C79547 = C79546 * C139328;
    const double C77679 = C77674 * C139328;
    const double C128191 = C77674 * C139560;
    const double C131563 = C77674 * C5228;
    const double C77656 = C66846 * C139328;
    const double C80516 = C66846 * C139560;
    const double C80514 = C66846 * C139377;
    const double C85128 = C66846 * C5228;
    const double C85126 = C66846 * C139377;
    const double C83220 = C68942 * C139377;
    const double C91693 = C68942 * C139377;
    const double C132409 = C68942 * C7158;
    const double C133779 = C68942 * C825;
    const double C86249 = C71257 * C7158;
    const double C88083 = C71257 * C825;
    const double C88928 = C83223 * C139328;
    const double C130155 = C83223 * C139377;
    const double C136523 = C83223 * C139377;
    const double C14463 = C139575 * C950;
    const double C47895 = C139575 * C950;
    const double C65405 = C139286 * C950;
    const double C16461 = C139575 * C951;
    const double C49803 = C139575 * C951;
    const double C34184 = C139575 * C1880;
    const double C96129 = C139575 * C1880;
    const double C32226 = C139575 * C1884;
    const double C94241 = C139575 * C1884;
    const double C127464 = C139286 * C1884;
    const double C18400 = C139575 * C4343;
    const double C51719 = C139575 * C4343;
    const double C78640 = C139286 * C4343;
    const double C77680 = C77675 * C139328;
    const double C128193 = C77675 * C139377;
    const double C131565 = C77675 * C139377;
    const double C80518 = C66847 * C139377;
    const double C85130 = C66847 * C139377;
    const double C126106 = C126105 * C139328;
    const double C32468 = C2089 * C139305;
    const double C34398 = C2089 * C139590;
    const double C34394 = C2089 * C2699;
    const double C39981 = C2089 * C139305;
    const double C41951 = C2089 * C5226;
    const double C41947 = C2089 * C5227;
    const double C32476 = C2091 * C821;
    const double C32474 = C2091 * C139305;
    const double C38040 = C2091 * C139300;
    const double C45579 = C2091 * C139552;
    const double C45577 = C2091 * C139305;
    const double C127621 = C2091 * C139590;
    const double C133253 = C2091 * C5226;
    const double C35451 = C4567 * C821;
    const double C35449 = C4567 * C139305;
    const double C38051 = C4567 * C139300;
    const double C39987 = C4567 * C139552;
    const double C39985 = C4567 * C139305;
    const double C2943 = C139442 * C1128;
    const double C13819 = C139586 * C1128;
    const double C47257 = C139586 * C1128;
    const double C1149 = C139442 * C1131;
    const double C16673 = C139586 * C1131;
    const double C50015 = C139586 * C1131;
    const double C3691 = C139442 * C2064;
    const double C2085 = C139442 * C2067;
    const double C4565 = C139442 * C4555;
    const double C17600 = C139586 * C4555;
    const double C50921 = C139586 * C4555;
    const double C38053 = C35461 * C139300;
    const double C128393 = C35461 * C139305;
    const double C131765 = C35461 * C139305;
    const double C41043 = C31416 * C139300;
    const double C43653 = C32488 * C139300;
    const double C126262 = C32488 * C139305;
    const double C135998 = C32488 * C139305;
    const double C65490 = C65488 * C139339;
    const double C64105 = C64099 * C139339;
    const double C66962 = C64099 * C139561;
    const double C73940 = C64099 * C9466;
    const double C66972 = C66968 * C139403;
    const double C73938 = C66968 * C139403;
    const double C76774 = C66968 * C139339;
    const double C80654 = C66968 * C139561;
    const double C89821 = C66968 * C9466;
    const double C14587 = C139575 * C1040;
    const double C48019 = C139575 * C1040;
    const double C65487 = C139286 * C1040;
    const double C16567 = C139575 * C1041;
    const double C49909 = C139575 * C1041;
    const double C32350 = C139575 * C1976;
    const double C94365 = C139575 * C1976;
    const double C127542 = C139286 * C1976;
    const double C34286 = C139575 * C1977;
    const double C96231 = C139575 * C1977;
    const double C18544 = C139575 * C4449;
    const double C51863 = C139575 * C4449;
    const double C78742 = C139286 * C4449;
    const double C64106 = C64100 * C139339;
    const double C80656 = C77794 * C139403;
    const double C89823 = C77794 * C139403;
    const double C66973 = C66969 * C139403;
    const double C73942 = C66969 * C139403;
    const double C76776 = C66969 * C139339;
    const double C1365 = C1361 * C139339;
    const double C3121 = C3120 * C139339;
    const double C2301 = C2297 * C1763;
    const double C12625 = C2297 * C12239;
    const double C34605 = C2297 * C139403;
    const double C42157 = C2297 * C139403;
    const double C3867 = C3865 * C139403;
    const double C9852 = C3865 * C139403;
    const double C30746 = C3865 * C139339;
    const double C4801 = C4799 * C139403;
    const double C11861 = C4799 * C139403;
    const double C33654 = C4799 * C139339;
    const double C15045 = C1475 * C139305;
    const double C16995 = C1475 * C139590;
    const double C16991 = C1475 * C2699;
    const double C20098 = C1475 * C5226;
    const double C20094 = C1475 * C5227;
    const double C22638 = C1475 * C139305;
    const double C15053 = C1477 * C821;
    const double C15051 = C1477 * C139305;
    const double C20823 = C1477 * C139300;
    const double C22644 = C1477 * C139552;
    const double C22642 = C1477 * C139305;
    const double C65791 = C1477 * C139590;
    const double C68099 = C1477 * C5226;
    const double C19100 = C4917 * C821;
    const double C19098 = C4917 * C139305;
    const double C21719 = C4917 * C139300;
    const double C23764 = C4917 * C139552;
    const double C23762 = C4917 * C139305;
    const double C3201 = C139457 * C1450;
    const double C1471 = C139457 * C1453;
    const double C3949 = C139457 * C2386;
    const double C30836 = C139588 * C2386;
    const double C92873 = C139588 * C2386;
    const double C2407 = C139457 * C2389;
    const double C34709 = C139588 * C2389;
    const double C96633 = C139588 * C2389;
    const double C4915 = C139457 * C4905;
    const double C33758 = C139588 * C4905;
    const double C95703 = C139588 * C4905;
    const double C20832 = C15065 * C139300;
    const double C64409 = C15065 * C139305;
    const double C70046 = C15065 * C139305;
    const double C21728 = C16039 * C139300;
    const double C24774 = C19110 * C139300;
    const double C67369 = C19110 * C139305;
    const double C70895 = C19110 * C139305;
    const double C1585 = C1581 * C825;
    const double C7706 = C1581 * C7158;
    const double C17103 = C1581 * C139377;
    const double C20206 = C1581 * C139377;
    const double C3295 = C3293 * C139377;
    const double C5781 = C3293 * C139377;
    const double C14139 = C3293 * C139328;
    const double C4032 = C4031 * C139328;
    const double C2517 = C2513 * C139328;
    const double C5035 = C5033 * C139377;
    const double C8580 = C5033 * C139377;
    const double C18012 = C5033 * C139328;
    const double C70042 = C22641 + C22640;
    const double C135994 = C45576 + C45575;
    const double C69595 = C69587 + C69588;
    const double C84984 = C70297 + C70298;
    const double C84983 = C70298 + C70297;
    const double C135764 = C90704 + C90703;
    const double C16992 = C1472 * C2702;
    const double C16986 = C15060 * C2702;
    const double C34395 = C2086 * C2702;
    const double C34389 = C32483 * C2702;
    const double C65312 = C63888 * C2702;
    const double C65304 = C63884 * C2702;
    const double C65788 = C15063 * C2702;
    const double C78529 = C66724 * C2702;
    const double C79431 = C77533 * C2702;
    const double C127376 = C77539 * C2702;
    const double C127618 = C32486 * C2702;
    const double C16994 = C1474 * C2703;
    const double C16988 = C1472 * C2703;
    const double C34397 = C2088 * C2703;
    const double C34391 = C2086 * C2703;
    const double C65314 = C63890 * C2703;
    const double C65306 = C63886 * C2703;
    const double C65790 = C1476 * C2703;
    const double C78531 = C66722 * C2703;
    const double C79433 = C77535 * C2703;
    const double C127378 = C77537 * C2703;
    const double C127620 = C2090 * C2703;
    const double C20095 = C1472 * C5230;
    const double C20089 = C15060 * C5230;
    const double C41948 = C2086 * C5230;
    const double C41942 = C32483 * C5230;
    const double C67646 = C63888 * C5230;
    const double C67640 = C63884 * C5230;
    const double C68096 = C15063 * C5230;
    const double C81583 = C66724 * C5230;
    const double C87086 = C77533 * C5230;
    const double C133022 = C77539 * C5230;
    const double C133250 = C32486 * C5230;
    const double C20097 = C1474 * C5231;
    const double C20091 = C1472 * C5231;
    const double C41950 = C2088 * C5231;
    const double C41944 = C2086 * C5231;
    const double C67648 = C63890 * C5231;
    const double C67642 = C63886 * C5231;
    const double C68098 = C1476 * C5231;
    const double C81585 = C66722 * C5231;
    const double C87088 = C77535 * C5231;
    const double C133024 = C77537 * C5231;
    const double C133252 = C2090 * C5231;
    const double C63910 = C63909 - C63903;
    const double C80372 = C80370 + C66733;
    const double C80371 = C80369 - C66733;
    const double C126020 = C126017 - C77550;
    const double C7467 = C339 * C7235;
    const double C7461 = C337 * C7235;
    const double C7701 = C586 * C7235;
    const double C7695 = C584 * C7235;
    const double C22745 = C1472 * C7235;
    const double C39056 = C2086 * C7235;
    const double C41146 = C32483 * C7235;
    const double C86244 = C66724 * C7235;
    const double C86238 = C77533 * C7235;
    const double C132404 = C77539 * C7235;
    const double C132640 = C32486 * C7235;
    const double C7469 = C1152 * C7236;
    const double C7463 = C1150 * C7236;
    const double C7703 = C1474 * C7236;
    const double C7697 = C1472 * C7236;
    const double C22747 = C1476 * C7236;
    const double C39058 = C4566 * C7236;
    const double C41148 = C35459 * C7236;
    const double C86246 = C66728 * C7236;
    const double C86240 = C66724 * C7236;
    const double C132406 = C68853 * C7236;
    const double C132642 = C38054 * C7236;
    const double C12620 = C339 * C12388;
    const double C12614 = C337 * C12388;
    const double C12854 = C586 * C12388;
    const double C12848 = C584 * C12388;
    const double C29449 = C1472 * C12388;
    const double C30337 = C15060 * C12388;
    const double C45778 = C2086 * C12388;
    const double C75425 = C63888 * C12388;
    const double C75419 = C63884 * C12388;
    const double C75875 = C15063 * C12388;
    const double C91792 = C66724 * C12388;
    const double C12622 = C2088 * C12389;
    const double C12616 = C2086 * C12389;
    const double C12856 = C2410 * C12389;
    const double C12850 = C2408 * C12389;
    const double C29451 = C4916 * C12389;
    const double C30339 = C19108 * C12389;
    const double C45780 = C2090 * C12389;
    const double C75427 = C66728 * C12389;
    const double C75421 = C66724 * C12389;
    const double C75877 = C24775 * C12389;
    const double C91794 = C68853 * C12389;
    const double C71819 = C71817 * C139286;
    const double C73174 = C73173 * C139286;
    const double C130 =
        4 * (2 * C137403 - (ae * C137404) / C137333 - (C137405 * ce) / C137333 +
             C137332 * C137466) +
        (((-3 * C137404) / C137082 + C137332 * C137471 -
          (C137451 * ce) / C137082) *
         ae) /
            C137060 -
        ((3 * C137405 + C137332 * C137470 + C137451 * ae) * ce) / C137333 +
        C137332 *
            (3 * C137466 + (C137471 * ae) / C137060 - (C137470 * ce) / C137333 +
             C137332 *
                 (2 * C137460 - (ae * C137461) / C137333 -
                  (C137462 * ce) / C137333 +
                  C137332 *
                      ((-(ae * C137449) / C137082) / C137060 -
                       C137448 / C137333 - (C137452 * ce) / C137333 +
                       C137332 * ((-(C137436 * ce) / C137082) / C137060 -
                                  (ae * C137433) / C137333 -
                                  (C137332 *
                                   (C137413 * C137414 +
                                    C137340 * bs[7] * std::pow(C137336, 7)) *
                                   C137341) /
                                      C137333))));
    const double C1132 =
        2 * C137616 - (C137613 * ce) / C137333 + C137332 * C137642 +
        (C137474 * C137471 * ae) / C137060 +
        C137474 *
            ((C137471 * ae) / C137060 +
             C137474 *
                 (2 * C137640 - (C137633 * ce) / C137333 +
                  C137332 * ((-(C137332 * C137627 * ce) / C137082) / C137060 -
                             C137624 / C137333 +
                             C137332 * ((-(C137332 * std::pow(C137336, 7) *
                                           bs[7] * C137596) /
                                         C137082) /
                                            C137060 -
                                        (C137627 * ce) / C137333))));
    const double C2390 =
        2 * C137717 - (C137714 * ce) / C137333 + C137332 * C137743 +
        (C137532 * C137471 * ae) / C137060 +
        C137532 *
            ((C137471 * ae) / C137060 +
             C137532 *
                 (2 * C137741 - (C137734 * ce) / C137333 +
                  C137332 * ((-(C137332 * C137728 * ce) / C137082) / C137060 -
                             C137725 / C137333 +
                             C137332 * ((-(C137332 * std::pow(C137336, 7) *
                                           bs[7] * C137697) /
                                         C137082) /
                                            C137060 -
                                        (C137728 * ce) / C137333))));
    const double C2708 =
        3 * ((-(ae * C137474 * C137395) / C137082) / C137060 -
             C137794 / C137333 - (C137474 * C137396 * ce) / C137333 +
             C137332 * C137959) +
        (C137474 * C137471 * ae) / C137060 -
        (C137474 * C137470 * ce) / C137333 +
        C137332 *
            (2 * C137959 - (ae * C137474 * C137461) / C137333 -
             (C137474 * C137462 * ce) / C137333 +
             C137332 *
                 ((-(ae * C137474 * C137449) / C137082) / C137060 -
                  C137949 / C137333 - (C137474 * C137452 * ce) / C137333 +
                  C137332 * ((-(C137474 * C137436 * ce) / C137082) / C137060 -
                             (ae * C137474 * C137433) / C137333 -
                             (C137332 * C137474 *
                              (C137413 * C137414 +
                               C137340 * bs[7] * std::pow(C137336, 7)) *
                              C137341) /
                                 C137333)));
    const double C2938 =
        (((-3 * C137404) / C137082 + C137332 * C137471 -
          (C137451 * ce) / C137082) *
         ae) /
            C137060 +
        C137474 *
            (3 * C137642 - (C137639 * ce) / C137333 +
             C137332 *
                 (2 * C137640 - (C137633 * ce) / C137333 +
                  C137332 * ((-(C137332 * C137627 * ce) / C137082) / C137060 -
                             C137624 / C137333 +
                             C137332 * ((-(C137332 * std::pow(C137336, 7) *
                                           bs[7] * C137596) /
                                         C137082) /
                                            C137060 -
                                        (C137627 * ce) / C137333))));
    const double C3456 =
        3 * ((-(ae * C137532 * C137395) / C137082) / C137060 -
             C137872 / C137333 - (C137532 * C137396 * ce) / C137333 +
             C137332 * C137981) +
        (C137532 * C137471 * ae) / C137060 -
        (C137532 * C137470 * ce) / C137333 +
        C137332 *
            (2 * C137981 - (ae * C137532 * C137461) / C137333 -
             (C137532 * C137462 * ce) / C137333 +
             C137332 *
                 ((-(ae * C137532 * C137449) / C137082) / C137060 -
                  C137971 / C137333 - (C137532 * C137452 * ce) / C137333 +
                  C137332 * ((-(C137532 * C137436 * ce) / C137082) / C137060 -
                             (ae * C137532 * C137433) / C137333 -
                             (C137332 * C137532 *
                              (C137413 * C137414 +
                               C137340 * bs[7] * std::pow(C137336, 7)) *
                              C137341) /
                                 C137333)));
    const double C3944 =
        (((-3 * C137404) / C137082 + C137332 * C137471 -
          (C137451 * ce) / C137082) *
         ae) /
            C137060 +
        C137532 *
            (3 * C137743 - (C137740 * ce) / C137333 +
             C137332 *
                 (2 * C137741 - (C137734 * ce) / C137333 +
                  C137332 * ((-(C137332 * C137728 * ce) / C137082) / C137060 -
                             C137725 / C137333 +
                             C137332 * ((-(C137332 * std::pow(C137336, 7) *
                                           bs[7] * C137697) /
                                         C137082) /
                                            C137060 -
                                        (C137728 * ce) / C137333))));
    const double C4556 =
        (C137532 * C137471 * ae) / C137060 +
        C137474 * C137532 *
            (2 * C137640 - (C137633 * ce) / C137333 +
             C137332 * ((-(C137332 * C137627 * ce) / C137082) / C137060 -
                        C137624 / C137333 +
                        C137332 * ((-(C137332 * std::pow(C137336, 7) * bs[7] *
                                      C137596) /
                                    C137082) /
                                       C137060 -
                                   (C137627 * ce) / C137333)));
    const double C4906 =
        (C137474 * C137471 * ae) / C137060 +
        C137532 * C137474 *
            (2 * C137741 - (C137734 * ce) / C137333 +
             C137332 * ((-(C137332 * C137728 * ce) / C137082) / C137060 -
                        C137725 / C137333 +
                        C137332 * ((-(C137332 * std::pow(C137336, 7) * bs[7] *
                                      C137697) /
                                    C137082) /
                                       C137060 -
                                   (C137728 * ce) / C137333)));
    const double C124 =
        4 * ((-2 * C137365) / C137082 - (C137332 * C137404) / C137082 -
             (C137386 * ce) / C137082) +
        C137332 * ((-3 * C137404) / C137082 + C137332 * C137471 -
                   (C137451 * ce) / C137082) -
        ((3 * C137386 + C137332 * C137451) * ce) / C137082;
    const double C851 = (-2 * C137365) / C137082 -
                        (C137332 * C137404) / C137082 -
                        (C137386 * ce) / C137082 + C137471 * C137646;
    const double C1787 = (-2 * C137365) / C137082 -
                         (C137332 * C137404) / C137082 -
                         (C137386 * ce) / C137082 + C137471 * C137768;
    const double C2707 =
        C137474 * ((-3 * C137404) / C137082 + C137332 * C137471 -
                   (C137451 * ce) / C137082);
    const double C3455 =
        C137532 * ((-3 * C137404) / C137082 + C137332 * C137471 -
                   (C137451 * ce) / C137082);
    const double C4234 = C137532 * C137474 * C137471;
    const double C69420 =
        2 * C138288 - (C138285 * ce) / C137333 + C137474 * C138634 +
        (C137532 * C138590 * ae) / C137060 +
        C137532 *
            ((C138590 * ae) / C137060 +
             C137532 *
                 (2 * C138632 - (C138624 * ce) / C137333 +
                  C137474 * ((-(C137474 * C137728 * ce) / C137082) / C137060 -
                             C137759 / C137333 +
                             C137474 * ((-(C137474 * std::pow(C137336, 7) *
                                           bs[7] * C137749) /
                                         C137082) /
                                            C137060 -
                                        (C137728 * ce) / C137333))));
    const double C71493 =
        3 * ((-(ae * C137532 * C138222) / C137082) / C137060 -
             C138332 / C137333 - (C137532 * C138225 * ce) / C137333 +
             C137474 * C138691) +
        (C137532 * C138590 * ae) / C137060 -
        (C137532 * C138589 * ce) / C137333 +
        C137474 *
            (2 * C138691 - (ae * C137532 * C138579) / C137333 -
             (C137532 * C138580 * ce) / C137333 +
             C137474 *
                 ((-(ae * C137532 * C138559) / C137082) / C137060 -
                  C138685 / C137333 - (C137532 * C138562 * ce) / C137333 +
                  C137474 * ((-(C137532 * C137627 * ce) / C137082) / C137060 -
                             (ae * C137532 * C137512) / C137333 -
                             (C137474 * C137532 *
                              (C137413 * C137414 +
                               C137646 * bs[7] * std::pow(C137336, 7)) *
                              C137341) /
                                 C137333)));
    const double C71729 =
        (((-3 * C138234) / C137082 + C137474 * C138590 -
          (C138575 * ce) / C137082) *
         ae) /
            C137060 +
        C137532 *
            (3 * C138634 - (C138630 * ce) / C137333 +
             C137474 *
                 (2 * C138632 - (C138624 * ce) / C137333 +
                  C137474 * ((-(C137474 * C137728 * ce) / C137082) / C137060 -
                             C137759 / C137333 +
                             C137474 * ((-(C137474 * std::pow(C137336, 7) *
                                           bs[7] * C137749) /
                                         C137082) /
                                            C137060 -
                                        (C137728 * ce) / C137333))));
    const double C68369 =
        4 * ((-2 * C138043) / C137082 - (C137474 * C138234) / C137082 -
             (C138224 * ce) / C137082) +
        C137474 * ((-3 * C138234) / C137082 + C137474 * C138590 -
                   (C138575 * ce) / C137082) -
        ((3 * C138224 + C137474 * C138575) * ce) / C137082;
    const double C68934 = (-2 * C138043) / C137082 -
                          (C137474 * C138234) / C137082 -
                          (C138224 * ce) / C137082 + C138590 * C137768;
    const double C71252 =
        C137532 * ((-3 * C138234) / C137082 + C137474 * C138590 -
                   (C138575 * ce) / C137082);
    const double C134476 =
        4 * ((-2 * C138167) / C137082 - (C137532 * C138479) / C137082 -
             (C138469 * ce) / C137082) +
        C137532 * ((-3 * C138479) / C137082 + C137532 * C138887 -
                   (C138864 * ce) / C137082) -
        ((3 * C138469 + C137532 * C138864) * ce) / C137082;
    const double C20390 = C20385 + C20386;
    const double C53631 = C53626 + C53627;
    const double C63895 = C63882 + C63883;
    const double C24148 = C24143 + C24144;
    const double C57239 = C57234 + C57235;
    const double C66729 = C66720 + C66721;
    const double C68317 = C68312 + C68313;
    const double C68856 = C68851 + C68852;
    const double C71176 = C71173 + C71174;
    const double C43425 = C43420 + C43421;
    const double C105175 = C105170 + C105171;
    const double C126019 = C126015 + C126016;
    const double C134365 = C134361 + C134362;
    const double C1259 = C1254 + C1255;
    const double C16783 = C16780 + C16781;
    const double C50125 = C50122 + C50123;
    const double C3035 = C3032 + C3033;
    const double C13917 = C13910 + C13911;
    const double C47355 = C47348 + C47349;
    const double C3773 = C3770 + C3771;
    const double C2191 = C2186 + C2187;
    const double C4683 = C4680 + C4681;
    const double C17710 = C17707 + C17708;
    const double C51031 = C51028 + C51029;
    const double C1683 = C1678 + C1679;
    const double C3376 = C3374 + C3375;
    const double C2619 = C2614 + C2615;
    const double C34923 = C34920 + C34921;
    const double C96847 = C96844 + C96845;
    const double C4122 = C4119 + C4120;
    const double C31018 = C31011 + C31012;
    const double C93055 = C93048 + C93049;
    const double C5149 = C5146 + C5147;
    const double C33972 = C33969 + C33970;
    const double C95917 = C95914 + C95915;
    const double C68534 =
        4 * (2 * C138233 - (ae * C138234) / C137333 - (C138235 * ce) / C137333 +
             C137474 * C138585) +
        (((-3 * C138234) / C137082 + C137474 * C138590 -
          (C138575 * ce) / C137082) *
         ae) /
            C137060 -
        ((3 * C138235 + C137474 * C138589 + C138575 * ae) * ce) / C137333 +
        C137474 *
            (3 * C138585 + (C138590 * ae) / C137060 - (C138589 * ce) / C137333 +
             C137474 *
                 (2 * C138578 - (ae * C138579) / C137333 -
                  (C138580 * ce) / C137333 +
                  C137474 *
                      ((-(ae * C138559) / C137082) / C137060 -
                       C137662 / C137333 - (C138562 * ce) / C137333 +
                       C137474 * ((-(C137627 * ce) / C137082) / C137060 -
                                  (ae * C137512) / C137333 -
                                  (C137474 *
                                   (C137413 * C137414 +
                                    C137646 * bs[7] * std::pow(C137336, 7)) *
                                   C137341) /
                                      C137333))));
    const double C134806 =
        4 * (2 * C138478 - (ae * C138479) / C137333 - (C138480 * ce) / C137333 +
             C137532 * C138882) +
        (((-3 * C138479) / C137082 + C137532 * C138887 -
          (C138864 * ce) / C137082) *
         ae) /
            C137060 -
        ((3 * C138480 + C137532 * C138886 + C138864 * ae) * ce) / C137333 +
        C137532 *
            (3 * C138882 + (C138887 * ae) / C137060 - (C138886 * ce) / C137333 +
             C137532 *
                 (2 * C138876 - (ae * C138877) / C137333 -
                  (C138878 * ce) / C137333 +
                  C137532 *
                      ((-(ae * C138861) / C137082) / C137060 -
                       C137784 / C137333 - (C138865 * ce) / C137333 +
                       C137532 * ((-(C137728 * ce) / C137082) / C137060 -
                                  (ae * C137570) / C137333 -
                                  (C137532 *
                                   (C137413 * C137414 +
                                    C137768 * bs[7] * std::pow(C137336, 7)) *
                                   C137341) /
                                      C137333))));
    const double C126099 = C77679 + C77661;
    const double C14472 = C14462 + C14463;
    const double C47904 = C47894 + C47895;
    const double C65407 = C65404 + C65405;
    const double C16464 = C16460 + C16461;
    const double C49806 = C49802 + C49803;
    const double C34186 = C34183 + C34184;
    const double C96131 = C96128 + C96129;
    const double C32236 = C32225 + C32226;
    const double C94251 = C94240 + C94241;
    const double C127465 = C127463 + C127464;
    const double C18405 = C18399 + C18400;
    const double C51724 = C51718 + C51719;
    const double C78641 = C78639 + C78640;
    const double C126264 = C126263 - C32474;
    const double C2945 = C2942 + C2943;
    const double C13832 = C13818 + C13819;
    const double C47270 = C47256 + C47257;
    const double C1157 = C1148 + C1149;
    const double C16678 = C16672 + C16673;
    const double C50020 = C50014 + C50015;
    const double C3693 = C3690 + C3691;
    const double C2093 = C2084 + C2085;
    const double C4569 = C4564 + C4565;
    const double C17605 = C17599 + C17600;
    const double C50926 = C50920 + C50921;
    const double C64108 = C64105 + C64089;
    const double C14595 = C14586 + C14587;
    const double C48027 = C48018 + C48019;
    const double C65489 = C65486 + C65487;
    const double C16569 = C16566 + C16567;
    const double C49911 = C49908 + C49909;
    const double C32359 = C32349 + C32350;
    const double C94374 = C94364 + C94365;
    const double C127543 = C127541 + C127542;
    const double C34289 = C34285 + C34286;
    const double C96234 = C96230 + C96231;
    const double C18548 = C18543 + C18544;
    const double C51867 = C51862 + C51863;
    const double C78743 = C78741 + C78742;
    const double C64411 = C64410 - C15051;
    const double C3203 = C3200 + C3201;
    const double C1479 = C1470 + C1471;
    const double C3951 = C3948 + C3949;
    const double C30849 = C30835 + C30836;
    const double C92886 = C92872 + C92873;
    const double C2415 = C2406 + C2407;
    const double C34714 = C34708 + C34709;
    const double C96638 = C96632 + C96633;
    const double C4919 = C4914 + C4915;
    const double C33763 = C33757 + C33758;
    const double C95708 = C95702 + C95703;
    const double C70047 = C70042 - C22639;
    const double C135999 = C135994 - C45574;
    const double C69596 = C69595 - C69589;
    const double C84990 = C70296 - C84984;
    const double C84989 = C84983 - C70296;
    const double C135769 = C135764 - C90702;
    const double C126023 = C126020 * C139442;
    const double C63907 = C63895 * C139305;
    const double C69594 = C63895 * C139305;
    const double C66737 = C66729 * C139305;
    const double C70303 = C66729 * C139305;
    const double C68319 = C68317 * C139300;
    const double C68860 = C68856 * C139300;
    const double C71178 = C71176 * C139300;
    const double C126022 = C126019 * C139305;
    const double C135768 = C126019 * C139305;
    const double C134367 = C134365 * C139300;
    const double C1263 = C1259 * C825;
    const double C7472 = C1259 * C7158;
    const double C3037 = C3035 * C139377;
    const double C5543 = C3035 * C139377;
    const double C3775 = C3773 * C139328;
    const double C2195 = C2191 * C139328;
    const double C4685 = C4683 * C139377;
    const double C8278 = C4683 * C139377;
    const double C1687 = C1683 * C139339;
    const double C3377 = C3376 * C139339;
    const double C2623 = C2619 * C1763;
    const double C12859 = C2619 * C12239;
    const double C4124 = C4122 * C139403;
    const double C10090 = C4122 * C139403;
    const double C5151 = C5149 * C139403;
    const double C12163 = C5149 * C139403;
    const double C126104 = C126099 * C139442;
    const double C127466 = C127465 * C139328;
    const double C79545 = C78641 * C139328;
    const double C34400 = C3693 * C2699;
    const double C41953 = C3693 * C5227;
    const double C32478 = C2093 * C139305;
    const double C45581 = C2093 * C139305;
    const double C127623 = C2093 * C2699;
    const double C133255 = C2093 * C5227;
    const double C35453 = C4569 * C139305;
    const double C39989 = C4569 * C139305;
    const double C65491 = C65489 * C139339;
    const double C78744 = C78743 * C139339;
    const double C64412 = C64411 * C139286;
    const double C16997 = C3203 * C2699;
    const double C20100 = C3203 * C5227;
    const double C15055 = C1479 * C139305;
    const double C22646 = C1479 * C139305;
    const double C65793 = C1479 * C2699;
    const double C68101 = C1479 * C5227;
    const double C19102 = C4919 * C139305;
    const double C23766 = C4919 * C139305;
    const double C70048 = C70047 - C22642;
    const double C136000 = C135999 - C45577;
    const double C69597 = C69596 - C69590;
    const double C84992 = C84990 + C70299;
    const double C84991 = C84989 - C70299;
    const double C135770 = C135769 - C90705;
    const double C70049 = C70048 * C139286;
    const double C135771 = C135770 * C139442;
    d2eexx[0] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 +
                     C102 * C109 + C91 * C115) *
                        C2702 +
                    (C100 * C116 + C89 * C125 + C101 * C117 + C90 * C126 +
                     C102 * C118 + C91 * C127) *
                        C139589 -
                    (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 +
                     C100 * C108 + C89 * C114) *
                        C2703 -
                    (C102 * C120 + C91 * C128 + C101 * C118 + C90 * C127 +
                     C100 * C117 + C89 * C126) *
                        C139590 +
                    (C100 * C109 + C89 * C115 + C101 * C110 + C90 * C119 +
                     C102 * C111 + C91 * C121) *
                        C2704 +
                    (C100 * C118 + C89 * C127 + C101 * C120 + C90 * C128 +
                     C102 * C122 + C91 * C129) *
                        C2699) *
                       C139442 * C139457 * C139339 * C139560 +
                   ((C100 * C828 + C89 * C836 + C101 * C829 + C90 * C837 +
                     C102 * C830 + C91 * C838) *
                        C2703 -
                    ((C102 * C839 + C91 * C852 + C101 * C840 + C90 * C853 +
                      C100 * C841 + C89 * C854) *
                         C139589 +
                     (C102 * C829 + C91 * C837 + C101 * C828 + C90 * C836 +
                      C100 * C831 + C89 * C842) *
                         C2702) +
                    (C100 * C840 + C89 * C853 + C101 * C839 + C90 * C852 +
                     C102 * C843 + C91 * C855) *
                        C139590 -
                    (C102 * C2705 + C91 * C2706 + C101 * C830 + C90 * C838 +
                     C100 * C829 + C89 * C837) *
                        C2704 -
                    (C102 * C2707 + C91 * C2708 + C101 * C843 + C90 * C855 +
                     C100 * C839 + C89 * C852) *
                        C2699) *
                       C139442 * C139457 * C139339 * C139377)) /
                 (p * q * std::sqrt(p + q));
    d2eexy[0] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 +
                     C102 * C109 + C91 * C115) *
                        C2783 +
                    (C100 * C182 + C89 * C188 + C101 * C183 + C90 * C189 +
                     C102 * C184 + C91 * C190) *
                        C139560 -
                    (C102 * C829 + C91 * C837 + C101 * C828 + C90 * C836 +
                     C100 * C831 + C89 * C842) *
                        C2784 -
                    (C102 * C937 + C91 * C945 + C101 * C938 + C90 * C946 +
                     C100 * C939 + C89 * C947) *
                        C139377) *
                       C139442 * C139457 * C139589 +
                   ((C100 * C828 + C89 * C836 + C101 * C829 + C90 * C837 +
                     C102 * C830 + C91 * C838) *
                        C2784 -
                    ((C102 * C185 + C91 * C191 + C101 * C184 + C90 * C190 +
                      C100 * C183 + C89 * C189) *
                         C139560 +
                     (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 +
                      C100 * C108 + C89 * C114) *
                         C2783) +
                    (C100 * C938 + C89 * C946 + C101 * C937 + C90 * C945 +
                     C102 * C943 + C91 * C951) *
                        C139377) *
                       C139442 * C139457 * C139590 +
                   ((C100 * C109 + C89 * C115 + C101 * C110 + C90 * C119 +
                     C102 * C111 + C91 * C121) *
                        C2783 +
                    (C100 * C184 + C89 * C190 + C101 * C185 + C90 * C191 +
                     C102 * C186 + C91 * C192) *
                        C139560 -
                    (C102 * C2705 + C91 * C2706 + C101 * C830 + C90 * C838 +
                     C100 * C829 + C89 * C837) *
                        C2784 -
                    (C102 * C2785 + C91 * C2786 + C101 * C943 + C90 * C951 +
                     C100 * C937 + C89 * C945) *
                        C139377) *
                       C139442 * C139457 * C2699) *
                  C139339) /
                 (p * q * std::sqrt(p + q));
    d2eexz[0] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 +
                      C102 * C109 + C91 * C115) *
                         C244 +
                     (C100 * C245 + C89 * C251 + C101 * C246 + C90 * C252 +
                      C102 * C247 + C91 * C253) *
                         C139339) *
                        C139442 * C139457 * C139560 -
                    ((C102 * C1027 + C91 * C1035 + C101 * C1028 + C90 * C1036 +
                      C100 * C1029 + C89 * C1037) *
                         C139339 +
                     (C102 * C829 + C91 * C837 + C101 * C828 + C90 * C836 +
                      C100 * C831 + C89 * C842) *
                         C244) *
                        C139442 * C139457 * C139377) *
                       C139589 +
                   (((C100 * C828 + C89 * C836 + C101 * C829 + C90 * C837 +
                      C102 * C830 + C91 * C838) *
                         C244 +
                     (C100 * C1028 + C89 * C1036 + C101 * C1027 + C90 * C1035 +
                      C102 * C1033 + C91 * C1041) *
                         C139339) *
                        C139442 * C139457 * C139377 -
                    ((C102 * C248 + C91 * C254 + C101 * C247 + C90 * C253 +
                      C100 * C246 + C89 * C252) *
                         C139339 +
                     (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 +
                      C100 * C108 + C89 * C114) *
                         C244) *
                        C139442 * C139457 * C139560) *
                       C139590 +
                   (((C100 * C109 + C89 * C115 + C101 * C110 + C90 * C119 +
                      C102 * C111 + C91 * C121) *
                         C244 +
                     (C100 * C247 + C89 * C253 + C101 * C248 + C90 * C254 +
                      C102 * C249 + C91 * C255) *
                         C139339) *
                        C139442 * C139457 * C139560 -
                    ((C102 * C2861 + C91 * C2862 + C101 * C1033 + C90 * C1041 +
                      C100 * C1027 + C89 * C1035) *
                         C139339 +
                     (C102 * C2705 + C91 * C2706 + C101 * C830 + C90 * C838 +
                      C100 * C829 + C89 * C837) *
                         C244) *
                        C139442 * C139457 * C139377) *
                       C2699)) /
                 (p * q * std::sqrt(p + q));
    d2eeyx[0] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139442 * C308) * C2702 +
            (C307 * C116 + C139442 * C314) * C139589 - C337 * C2703 -
            C338 * C139590 + C339 * C2704 + C340 * C2699) *
               C139457 * C89 +
           (C337 * C2702 + C338 * C139589 - C339 * C2703 - C340 * C139590 +
            C341 * C2704 + C342 * C2699) *
               C139457 * C90 +
           (C339 * C2702 + C340 * C139589 - C341 * C2703 - C342 * C139590 +
            C343 * C2704 + C344 * C2699) *
               C139457 * C91) *
              C139339 * C139560 +
          ((C1150 * C2703 -
            ((C307 * C841 + C139442 * C1125) * C139589 +
             (C307 * C831 + C139442 * C1118) * C2702) +
            C1151 * C139590 - C1152 * C2704 - C1153 * C2699) *
               C139457 * C89 +
           (C1152 * C2703 - (C1151 * C139589 + C1150 * C2702) +
            C1153 * C139590 - C2944 * C2704 - C2945 * C2699) *
               C139457 * C90 +
           (C2944 * C2703 - (C1153 * C139589 + C1152 * C2702) +
            C2945 * C139590 - (C307 * C2705 + C139442 * C2937) * C2704 -
            (C307 * C2707 + C139442 * C2938) * C2699) *
               C139457 * C91) *
              C139339 * C139377)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[0] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139442 * C308) * C2783 +
            (C307 * C182 + C139442 * C394) * C139560 -
            (C307 * C831 + C139442 * C1118) * C2784 -
            (C307 * C939 + C139442 * C1231) * C139377) *
               C139457 * C89 +
           (C3021 + C3022 - C3023 - C3024) * C139457 * C90 + C3039 * C91) *
              C139589 +
          ((C3023 - (C3022 + C3021) + C3024) * C139457 * C89 +
           (C3027 - (C3026 + C3025) + C3028) * C139457 * C90 +
           (C3029 - (C3030 + C3031) + C3037) * C139457 * C91) *
              C139590 +
          (C3039 * C89 + (C3031 + C3030 - C3029 - C3037) * C139457 * C90 +
           (C343 * C2783 + C416 * C139560 -
            (C307 * C2705 + C139442 * C2937) * C2784 -
            (C307 * C2785 + C139442 * C3019) * C139377) *
               C139457 * C91) *
              C2699) *
         C139339) /
        (p * q * std::sqrt(p + q));
    d2eeyz[0] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139442 * C308) * C244 +
             (C307 * C245 + C139442 * C474) * C139339) *
                C139457 * C89 +
            (C481 + C497) * C139457 * C90 + C503 * C91) *
               C139560 -
           (C3119 * C91 + (C1363 + C1351) * C139457 * C90 +
            ((C307 * C1029 + C139442 * C1339) * C139339 +
             (C307 * C831 + C139442 * C1118) * C244) *
                C139457 * C89) *
               C139377) *
              C139589 +
          (((C1351 + C1363) * C139457 * C89 + (C1348 + C1362) * C139457 * C90 +
            (C3116 + C3121) * C139457 * C91) *
               C139377 -
           (C504 * C91 + (C498 + C484) * C139457 * C90 +
            (C497 + C481) * C139457 * C89) *
               C139560) *
              C139590 +
          ((C503 * C89 + (C489 + C499) * C139457 * C90 +
            (C490 + C500) * C139457 * C91) *
               C139560 -
           (((C307 * C2861 + C139442 * C3113) * C139339 +
             (C307 * C2705 + C139442 * C2937) * C244) *
                C139457 * C91 +
            (C3121 + C3116) * C139457 * C90 + C3119 * C89) *
               C139377) *
              C2699)) /
        (p * q * std::sqrt(p + q));
    d2eezx[0] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C139457 * C555) * C2702 +
            (C554 * C116 + C139457 * C561) * C139589 - C584 * C2703 -
            C585 * C139590 + C586 * C2704 + C587 * C2699) *
               C89 +
           (C584 * C2702 + C585 * C139589 - C586 * C2703 - C587 * C139590 +
            C588 * C2704 + C589 * C2699) *
               C90 +
           (C586 * C2702 + C587 * C139589 - C588 * C2703 - C589 * C139590 +
            C590 * C2704 + C591 * C2699) *
               C91) *
              C139442 * C139339 * C139560 +
          ((C1472 * C2703 -
            ((C554 * C841 + C139457 * C1447) * C139589 +
             (C554 * C831 + C139457 * C1440) * C2702) +
            C1473 * C139590 - C1474 * C2704 - C1475 * C2699) *
               C89 +
           (C1474 * C2703 - (C1473 * C139589 + C1472 * C2702) +
            C1475 * C139590 - C3202 * C2704 - C3203 * C2699) *
               C90 +
           (C3202 * C2703 - (C1475 * C139589 + C1474 * C2702) +
            C3203 * C139590 - (C554 * C2705 + C139457 * C3195) * C2704 -
            (C554 * C2707 + C139457 * C3196) * C2699) *
               C91) *
              C139442 * C139339 * C139377)) /
        (p * q * std::sqrt(p + q));
    d2eezy[0] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C554 * C107 + C139457 * C555) * C2783 +
                     (C554 * C182 + C139457 * C641) * C139560 -
                     (C554 * C831 + C139457 * C1440) * C2784 -
                     (C554 * C939 + C139457 * C1553) * C139377) *
                        C89 +
                    (C3279 + C3280 - C3281 - C3282) * C90 + C3296 * C91) *
                       C139442 * C139589 +
                   ((C3281 - (C3280 + C3279) + C3282) * C89 +
                    (C3285 - (C3284 + C3283) + C3286) * C90 +
                    (C3287 - (C3288 + C3289) + C3295) * C91) *
                       C139442 * C139590 +
                   (C3296 * C89 + (C3289 + C3288 - C3287 - C3295) * C90 +
                    (C590 * C2783 + C663 * C139560 -
                     (C554 * C2705 + C139457 * C3195) * C2784 -
                     (C554 * C2785 + C139457 * C3277) * C139377) *
                        C91) *
                       C139442 * C2699) *
                  C139339) /
                 (p * q * std::sqrt(p + q));
    d2eezz[0] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((((C554 * C107 + C139457 * C555) * C244 +
                      (C554 * C245 + C139457 * C719) * C139339) *
                         C89 +
                     (C726 + C742) * C90 + C746 * C91) *
                        C139442 * C139560 -
                    (C3372 * C91 + (C1685 + C1673) * C90 +
                     ((C554 * C1029 + C139457 * C1661) * C139339 +
                      (C554 * C831 + C139457 * C1440) * C244) *
                         C89) *
                        C139442 * C139377) *
                       C139589 +
                   (((C1673 + C1685) * C89 + (C1670 + C1684) * C90 +
                     (C3373 + C3377) * C91) *
                        C139442 * C139377 -
                    (C747 * C91 + (C743 + C729) * C90 + (C742 + C726) * C89) *
                        C139442 * C139560) *
                       C139590 +
                   ((C746 * C89 + (C734 + C744) * C90 + (C735 + C745) * C91) *
                        C139442 * C139560 -
                    (((C554 * C2861 + C139457 * C3370) * C139339 +
                      (C554 * C2705 + C139457 * C3195) * C244) *
                         C91 +
                     (C3377 + C3373) * C90 + C3372 * C89) *
                        C139442 * C139377) *
                       C2699)) /
                 (p * q * std::sqrt(p + q));
    d2eexx[1] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 +
                      C102 * C109 + C91 * C115) *
                         C826 +
                     (C100 * C116 + C89 * C125 + C101 * C117 + C90 * C126 +
                      C102 * C118 + C91 * C127) *
                         C821 -
                     (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 +
                      C100 * C108 + C89 * C114) *
                         C827 -
                     (C102 * C120 + C91 * C128 + C101 * C118 + C90 * C127 +
                      C100 * C117 + C89 * C126) *
                         C139305) *
                        C139442 * C139457 * C139561 +
                    ((C100 * C1764 + C89 * C1772 + C101 * C1765 + C90 * C1773 +
                      C102 * C1766 + C91 * C1774) *
                         C827 -
                     ((C102 * C1775 + C91 * C1788 + C101 * C1776 + C90 * C1789 +
                       C100 * C1777 + C89 * C1790) *
                          C821 +
                      (C102 * C1765 + C91 * C1773 + C101 * C1764 + C90 * C1772 +
                       C100 * C1767 + C89 * C1778) *
                          C826) +
                     (C100 * C1776 + C89 * C1789 + C101 * C1775 + C90 * C1788 +
                      C102 * C1779 + C91 * C1791) *
                         C139305) *
                        C139442 * C139457 * C139403) *
                       C139560 +
                   (((C100 * C828 + C89 * C836 + C101 * C829 + C90 * C837 +
                      C102 * C830 + C91 * C838) *
                         C827 -
                     ((C102 * C839 + C91 * C852 + C101 * C840 + C90 * C853 +
                       C100 * C841 + C89 * C854) *
                          C821 +
                      (C102 * C829 + C91 * C837 + C101 * C828 + C90 * C836 +
                       C100 * C831 + C89 * C842) *
                          C826) +
                     (C100 * C840 + C89 * C853 + C101 * C839 + C90 * C852 +
                      C102 * C843 + C91 * C855) *
                         C139305) *
                        C139442 * C139457 * C139561 +
                    ((C100 * C4223 + C89 * C4227 + C101 * C4224 + C90 * C4228 +
                      C102 * C4225 + C91 * C4229) *
                         C826 +
                     (C100 * C4230 + C89 * C4235 + C101 * C4231 + C90 * C4236 +
                      C102 * C4232 + C91 * C4237) *
                         C821 -
                     (C102 * C4226 + C91 * C4233 + C101 * C4225 + C90 * C4229 +
                      C100 * C4224 + C89 * C4228) *
                         C827 -
                     (C102 * C4234 + C91 * C4238 + C101 * C4232 + C90 * C4237 +
                      C100 * C4231 + C89 * C4236) *
                         C139305) *
                        C139442 * C139457 * C139403) *
                       C139377)) /
                 (p * q * std::sqrt(p + q));
    d2eexy[1] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 +
                      C102 * C109 + C91 * C115) *
                         C2783 +
                     (C100 * C182 + C89 * C188 + C101 * C183 + C90 * C189 +
                      C102 * C184 + C91 * C190) *
                         C139560 -
                     (C102 * C829 + C91 * C837 + C101 * C828 + C90 * C836 +
                      C100 * C831 + C89 * C842) *
                         C2784 -
                     (C102 * C937 + C91 * C945 + C101 * C938 + C90 * C946 +
                      C100 * C939 + C89 * C947) *
                         C139377) *
                        C139442 * C139457 * C821 +
                    ((C100 * C828 + C89 * C836 + C101 * C829 + C90 * C837 +
                      C102 * C830 + C91 * C838) *
                         C2784 -
                     ((C102 * C185 + C91 * C191 + C101 * C184 + C90 * C190 +
                       C100 * C183 + C89 * C189) *
                          C139560 +
                      (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 +
                       C100 * C108 + C89 * C114) *
                          C2783) +
                     (C100 * C938 + C89 * C946 + C101 * C937 + C90 * C945 +
                      C102 * C943 + C91 * C951) *
                         C139377) *
                        C139442 * C139457 * C139305) *
                       C139561 +
                   (((C100 * C4223 + C89 * C4227 + C101 * C4224 + C90 * C4228 +
                      C102 * C4225 + C91 * C4229) *
                         C2784 -
                     ((C102 * C1871 + C91 * C1879 + C101 * C1870 + C90 * C1878 +
                       C100 * C1873 + C89 * C1881) *
                          C139560 +
                      (C102 * C1765 + C91 * C1773 + C101 * C1764 + C90 * C1772 +
                       C100 * C1767 + C89 * C1778) *
                          C2783) +
                     (C100 * C4337 + C89 * C4341 + C101 * C4338 + C90 * C4342 +
                      C102 * C4339 + C91 * C4343) *
                         C139377) *
                        C139442 * C139457 * C821 +
                    ((C100 * C1764 + C89 * C1772 + C101 * C1765 + C90 * C1773 +
                      C102 * C1766 + C91 * C1774) *
                         C2783 +
                     (C100 * C1870 + C89 * C1878 + C101 * C1871 + C90 * C1879 +
                      C102 * C1872 + C91 * C1880) *
                         C139560 -
                     (C102 * C4226 + C91 * C4233 + C101 * C4225 + C90 * C4229 +
                      C100 * C4224 + C89 * C4228) *
                         C2784 -
                     (C102 * C4340 + C91 * C4344 + C101 * C4339 + C90 * C4343 +
                      C100 * C4338 + C89 * C4342) *
                         C139377) *
                        C139442 * C139457 * C139305) *
                       C139403)) /
                 (p * q * std::sqrt(p + q));
    d2eexz[1] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 +
                      C102 * C109 + C91 * C115) *
                         C3607 +
                     (C100 * C245 + C89 * C251 + C101 * C246 + C90 * C252 +
                      C102 * C247 + C91 * C253) *
                         C139561 -
                     (C102 * C1765 + C91 * C1773 + C101 * C1764 + C90 * C1772 +
                      C100 * C1767 + C89 * C1778) *
                         C3608 -
                     (C102 * C1963 + C91 * C1971 + C101 * C1964 + C90 * C1972 +
                      C100 * C1965 + C89 * C1973) *
                         C139403) *
                        C139442 * C139457 * C139560 +
                    ((C100 * C4223 + C89 * C4227 + C101 * C4224 + C90 * C4228 +
                      C102 * C4225 + C91 * C4229) *
                         C3608 -
                     ((C102 * C1027 + C91 * C1035 + C101 * C1028 + C90 * C1036 +
                       C100 * C1029 + C89 * C1037) *
                          C139561 +
                      (C102 * C829 + C91 * C837 + C101 * C828 + C90 * C836 +
                       C100 * C831 + C89 * C842) *
                          C3607) +
                     (C100 * C4443 + C89 * C4447 + C101 * C4444 + C90 * C4448 +
                      C102 * C4445 + C91 * C4449) *
                         C139403) *
                        C139442 * C139457 * C139377) *
                       C821 +
                   (((C100 * C1764 + C89 * C1772 + C101 * C1765 + C90 * C1773 +
                      C102 * C1766 + C91 * C1774) *
                         C3608 -
                     ((C102 * C248 + C91 * C254 + C101 * C247 + C90 * C253 +
                       C100 * C246 + C89 * C252) *
                          C139561 +
                      (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 +
                       C100 * C108 + C89 * C114) *
                          C3607) +
                     (C100 * C1964 + C89 * C1972 + C101 * C1963 + C90 * C1971 +
                      C102 * C1969 + C91 * C1977) *
                         C139403) *
                        C139442 * C139457 * C139560 +
                    ((C100 * C828 + C89 * C836 + C101 * C829 + C90 * C837 +
                      C102 * C830 + C91 * C838) *
                         C3607 +
                     (C100 * C1028 + C89 * C1036 + C101 * C1027 + C90 * C1035 +
                      C102 * C1033 + C91 * C1041) *
                         C139561 -
                     (C102 * C4226 + C91 * C4233 + C101 * C4225 + C90 * C4229 +
                      C100 * C4224 + C89 * C4228) *
                         C3608 -
                     (C102 * C4446 + C91 * C4450 + C101 * C4445 + C90 * C4449 +
                      C100 * C4444 + C89 * C4448) *
                         C139403) *
                        C139442 * C139457 * C139377) *
                       C139305)) /
                 (p * q * std::sqrt(p + q));
    d2eeyx[1] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139442 * C308) * C826 +
             (C307 * C116 + C139442 * C314) * C821 - C337 * C827 -
             C338 * C139305) *
                C139457 * C89 +
            (C337 * C826 + C338 * C821 - C339 * C827 - C340 * C139305) *
                C139457 * C90 +
            (C339 * C826 + C340 * C821 - C341 * C827 - C342 * C139305) *
                C139457 * C91) *
               C139561 +
           ((C2086 * C827 -
             ((C307 * C1777 + C139442 * C2061) * C821 +
              (C307 * C1767 + C139442 * C2054) * C826) +
             C2087 * C139305) *
                C139457 * C89 +
            (C2088 * C827 - (C2087 * C821 + C2086 * C826) + C2089 * C139305) *
                C139457 * C90 +
            (C3692 * C827 - (C2089 * C821 + C2088 * C826) + C3693 * C139305) *
                C139457 * C91) *
               C139403) *
              C139560 +
          (((C1150 * C827 -
             ((C307 * C841 + C139442 * C1125) * C821 +
              (C307 * C831 + C139442 * C1118) * C826) +
             C1151 * C139305) *
                C139457 * C89 +
            (C1152 * C827 - (C1151 * C821 + C1150 * C826) + C1153 * C139305) *
                C139457 * C90 +
            (C2944 * C827 - (C1153 * C821 + C1152 * C826) + C2945 * C139305) *
                C139457 * C91) *
               C139561 +
           (((C307 * C4223 + C139442 * C4549) * C826 +
             (C307 * C4230 + C139442 * C4553) * C821 - C4566 * C827 -
             C4567 * C139305) *
                C139457 * C89 +
            (C4566 * C826 + C4567 * C821 - C4568 * C827 - C4569 * C139305) *
                C139457 * C90 +
            (C4568 * C826 + C4569 * C821 -
             (C307 * C4226 + C139442 * C4552) * C827 -
             (C307 * C4234 + C139442 * C4556) * C139305) *
                C139457 * C91) *
               C139403) *
              C139377)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[1] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139442 * C308) * C2783 +
             (C307 * C182 + C139442 * C394) * C139560 -
             (C307 * C831 + C139442 * C1118) * C2784 -
             (C307 * C939 + C139442 * C1231) * C139377) *
                C139457 * C89 +
            (C3021 + C3022 - C3023 - C3024) * C139457 * C90 + C3039 * C91) *
               C821 +
           ((C3023 - (C3022 + C3021) + C3024) * C139457 * C89 +
            (C3027 - (C3026 + C3025) + C3028) * C139457 * C90 +
            (C3029 - (C3030 + C3031) + C3037) * C139457 * C91) *
               C139305) *
              C139561 +
          ((((C307 * C4223 + C139442 * C4549) * C2784 -
             ((C307 * C1873 + C139442 * C2170) * C139560 +
              (C307 * C1767 + C139442 * C2054) * C2783) +
             (C307 * C4337 + C139442 * C4667) * C139377) *
                C139457 * C89 +
            (C4672 - (C4673 + C4674) + C4684) * C139457 * C90 +
            (C4677 - (C4678 + C4679) + C4685) * C139457 * C91) *
               C821 +
           ((C4674 + C4673 - C4672 - C4684) * C139457 * C89 +
            (C4679 + C4678 - C4677 - C4685) * C139457 * C90 +
            (C3692 * C2783 + C3773 * C139560 -
             (C307 * C4226 + C139442 * C4552) * C2784 -
             (C307 * C4340 + C139442 * C4670) * C139377) *
                C139457 * C91) *
               C139305) *
              C139403)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[1] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139442 * C308) * C3607 +
             (C307 * C245 + C139442 * C474) * C139561 -
             (C307 * C1767 + C139442 * C2054) * C3608 -
             (C307 * C1965 + C139442 * C2269) * C139403) *
                C139457 * C89 +
            (C3851 + C3852 - C3853 - C3854) * C139457 * C90 + C3869 * C91) *
               C139560 +
           (((C307 * C4223 + C139442 * C4549) * C3608 -
             ((C307 * C1029 + C139442 * C1339) * C139561 +
              (C307 * C831 + C139442 * C1118) * C3607) +
             (C307 * C4443 + C139442 * C4783) * C139403) *
                C139457 * C89 +
            (C4788 - (C4789 + C4790) + C4800) * C139457 * C90 +
            (C4793 - (C4794 + C4795) + C4801) * C139457 * C91) *
               C139377) *
              C821 +
          (((C3853 - (C3852 + C3851) + C3854) * C139457 * C89 +
            (C3857 - (C3856 + C3855) + C3858) * C139457 * C90 +
            (C3859 - (C3860 + C3861) + C3867) * C139457 * C91) *
               C139560 +
           ((C4790 + C4789 - C4788 - C4800) * C139457 * C89 +
            (C4795 + C4794 - C4793 - C4801) * C139457 * C90 +
            (C2944 * C3607 + C3120 * C139561 -
             (C307 * C4226 + C139442 * C4552) * C3608 -
             (C307 * C4446 + C139442 * C4786) * C139403) *
                C139457 * C91) *
               C139377) *
              C139305)) /
        (p * q * std::sqrt(p + q));
    d2eezx[1] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139457 * C555) * C826 +
             (C554 * C116 + C139457 * C561) * C821 - C584 * C827 -
             C585 * C139305) *
                C89 +
            (C584 * C826 + C585 * C821 - C586 * C827 - C587 * C139305) * C90 +
            (C586 * C826 + C587 * C821 - C588 * C827 - C589 * C139305) * C91) *
               C139442 * C139561 +
           ((C2408 * C827 -
             ((C554 * C1777 + C139457 * C2383) * C821 +
              (C554 * C1767 + C139457 * C2376) * C826) +
             C2409 * C139305) *
                C89 +
            (C2410 * C827 - (C2409 * C821 + C2408 * C826) + C2411 * C139305) *
                C90 +
            (C3950 * C827 - (C2411 * C821 + C2410 * C826) + C3951 * C139305) *
                C91) *
               C139442 * C139403) *
              C139560 +
          (((C1472 * C827 -
             ((C554 * C841 + C139457 * C1447) * C821 +
              (C554 * C831 + C139457 * C1440) * C826) +
             C1473 * C139305) *
                C89 +
            (C1474 * C827 - (C1473 * C821 + C1472 * C826) + C1475 * C139305) *
                C90 +
            (C3202 * C827 - (C1475 * C821 + C1474 * C826) + C3203 * C139305) *
                C91) *
               C139442 * C139561 +
           (((C554 * C4223 + C139457 * C4899) * C826 +
             (C554 * C4230 + C139457 * C4903) * C821 - C4916 * C827 -
             C4917 * C139305) *
                C89 +
            (C4916 * C826 + C4917 * C821 - C4918 * C827 - C4919 * C139305) *
                C90 +
            (C4918 * C826 + C4919 * C821 -
             (C554 * C4226 + C139457 * C4902) * C827 -
             (C554 * C4234 + C139457 * C4906) * C139305) *
                C91) *
               C139442 * C139403) *
              C139377)) /
        (p * q * std::sqrt(p + q));
    d2eezy[1] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((((C554 * C107 + C139457 * C555) * C2783 +
                      (C554 * C182 + C139457 * C641) * C139560 -
                      (C554 * C831 + C139457 * C1440) * C2784 -
                      (C554 * C939 + C139457 * C1553) * C139377) *
                         C89 +
                     (C3279 + C3280 - C3281 - C3282) * C90 + C3296 * C91) *
                        C139442 * C821 +
                    ((C3281 - (C3280 + C3279) + C3282) * C89 +
                     (C3285 - (C3284 + C3283) + C3286) * C90 +
                     (C3287 - (C3288 + C3289) + C3295) * C91) *
                        C139442 * C139305) *
                       C139561 +
                   ((((C554 * C4223 + C139457 * C4899) * C2784 -
                      ((C554 * C1873 + C139457 * C2492) * C139560 +
                       (C554 * C1767 + C139457 * C2376) * C2783) +
                      (C554 * C4337 + C139457 * C5017) * C139377) *
                         C89 +
                     (C5022 - (C5023 + C5024) + C5034) * C90 +
                     (C5027 - (C5028 + C5029) + C5035) * C91) *
                        C139442 * C821 +
                    ((C5024 + C5023 - C5022 - C5034) * C89 +
                     (C5029 + C5028 - C5027 - C5035) * C90 +
                     (C3950 * C2783 + C4031 * C139560 -
                      (C554 * C4226 + C139457 * C4902) * C2784 -
                      (C554 * C4340 + C139457 * C5020) * C139377) *
                         C91) *
                        C139442 * C139305) *
                       C139403)) /
                 (p * q * std::sqrt(p + q));
    d2eezz[1] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((((C554 * C107 + C139457 * C555) * C3607 +
                      (C554 * C245 + C139457 * C719) * C139561 -
                      (C554 * C1767 + C139457 * C2376) * C3608 -
                      (C554 * C1965 + C139457 * C2591) * C139403) *
                         C89 +
                     (C4108 + C4109 - C4110 - C4111) * C90 + C4125 * C91) *
                        C139442 * C139560 +
                    (((C554 * C4223 + C139457 * C4899) * C3608 -
                      ((C554 * C1029 + C139457 * C1661) * C139561 +
                       (C554 * C831 + C139457 * C1440) * C3607) +
                      (C554 * C4443 + C139457 * C5133) * C139403) *
                         C89 +
                     (C5138 - (C5139 + C5140) + C5150) * C90 +
                     (C5143 - (C5144 + C5145) + C5151) * C91) *
                        C139442 * C139377) *
                       C821 +
                   (((C4110 - (C4109 + C4108) + C4111) * C89 +
                     (C4114 - (C4113 + C4112) + C4115) * C90 +
                     (C4116 - (C4117 + C4118) + C4124) * C91) *
                        C139442 * C139560 +
                    ((C5140 + C5139 - C5138 - C5150) * C89 +
                     (C5145 + C5144 - C5143 - C5151) * C90 +
                     (C3202 * C3607 + C3376 * C139561 -
                      (C554 * C4226 + C139457 * C4902) * C3608 -
                      (C554 * C4446 + C139457 * C5136) * C139403) *
                         C91) *
                        C139442 * C139377) *
                       C139305)) /
                 (p * q * std::sqrt(p + q));
    d2eexx[2] +=
        (-std::pow(Pi, 2.5) * (((C100 * C107 + C89 * C113 + C101 * C108 +
                                 C90 * C114 + C102 * C109 + C91 * C115) *
                                    C826 +
                                (C100 * C116 + C89 * C125 + C101 * C117 +
                                 C90 * C126 + C102 * C118 + C91 * C127) *
                                    C821 -
                                (C102 * C110 + C91 * C119 + C101 * C109 +
                                 C90 * C115 + C100 * C108 + C89 * C114) *
                                    C827 -
                                (C102 * C120 + C91 * C128 + C101 * C118 +
                                 C90 * C127 + C100 * C117 + C89 * C126) *
                                    C139305) *
                                   C139442 * C139457 * C139339 * C823 +
                               ((C100 * C828 + C89 * C836 + C101 * C829 +
                                 C90 * C837 + C102 * C830 + C91 * C838) *
                                    C827 -
                                ((C102 * C839 + C91 * C852 + C101 * C840 +
                                  C90 * C853 + C100 * C841 + C89 * C854) *
                                     C821 +
                                 (C102 * C829 + C91 * C837 + C101 * C828 +
                                  C90 * C836 + C100 * C831 + C89 * C842) *
                                     C826) +
                                (C100 * C840 + C89 * C853 + C101 * C839 +
                                 C90 * C852 + C102 * C843 + C91 * C855) *
                                    C139305) *
                                   C139442 * C139457 * C139339 * C824 +
                               ((C100 * C832 + C89 * C844 + C101 * C833 +
                                 C90 * C845 + C102 * C834 + C91 * C846) *
                                    C826 +
                                (C100 * C847 + C89 * C856 + C101 * C848 +
                                 C90 * C857 + C102 * C849 + C91 * C858) *
                                    C821 -
                                (C102 * C835 + C91 * C850 + C101 * C834 +
                                 C90 * C846 + C100 * C833 + C89 * C845) *
                                    C827 -
                                (C102 * C851 + C91 * C859 + C101 * C849 +
                                 C90 * C858 + C100 * C848 + C89 * C857) *
                                    C139305) *
                                   C139442 * C139457 * C139339 * C825)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 + C102 * C109 +
           C91 * C115) *
              C103 +
          (C100 * C116 + C89 * C125 + C101 * C117 + C90 * C126 + C102 * C118 +
           C91 * C127) *
              C92 -
          (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 + C100 * C108 +
           C89 * C114) *
              C104 -
          (C102 * C120 + C91 * C128 + C101 * C118 + C90 * C127 + C100 * C117 +
           C89 * C126) *
              C93 +
          (C100 * C109 + C89 * C115 + C101 * C110 + C90 * C119 + C102 * C111 +
           C91 * C121) *
              C105 +
          (C100 * C118 + C89 * C127 + C101 * C120 + C90 * C128 + C102 * C122 +
           C91 * C129) *
              C94 -
          (C102 * C112 + C91 * C123 + C101 * C111 + C90 * C121 + C100 * C110 +
           C89 * C119) *
              C106 -
          (C102 * C124 + C91 * C130 + C101 * C122 + C90 * C129 + C100 * C120 +
           C89 * C128) *
              C95) *
         C139442 * C139457 * C139339 * C139328) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 + C102 * C109 +
            C91 * C115) *
               C826 +
           (C100 * C116 + C89 * C125 + C101 * C117 + C90 * C126 + C102 * C118 +
            C91 * C127) *
               C821 -
           (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 + C100 * C108 +
            C89 * C114) *
               C827 -
           (C102 * C120 + C91 * C128 + C101 * C118 + C90 * C127 + C100 * C117 +
            C89 * C126) *
               C139305) *
              C139442 * C139457 * C1761 +
          ((C100 * C1764 + C89 * C1772 + C101 * C1765 + C90 * C1773 +
            C102 * C1766 + C91 * C1774) *
               C827 -
           ((C102 * C1775 + C91 * C1788 + C101 * C1776 + C90 * C1789 +
             C100 * C1777 + C89 * C1790) *
                C821 +
            (C102 * C1765 + C91 * C1773 + C101 * C1764 + C90 * C1772 +
             C100 * C1767 + C89 * C1778) *
                C826) +
           (C100 * C1776 + C89 * C1789 + C101 * C1775 + C90 * C1788 +
            C102 * C1779 + C91 * C1791) *
               C139305) *
              C139442 * C139457 * C1762 +
          ((C100 * C1768 + C89 * C1780 + C101 * C1769 + C90 * C1781 +
            C102 * C1770 + C91 * C1782) *
               C826 +
           (C100 * C1783 + C89 * C1792 + C101 * C1784 + C90 * C1793 +
            C102 * C1785 + C91 * C1794) *
               C821 -
           (C102 * C1771 + C91 * C1786 + C101 * C1770 + C90 * C1782 +
            C100 * C1769 + C89 * C1781) *
               C827 -
           (C102 * C1787 + C91 * C1795 + C101 * C1785 + C90 * C1794 +
            C100 * C1784 + C89 * C1793) *
               C139305) *
              C139442 * C139457 * C1763) *
         C139328) /
            (p * q * std::sqrt(p + q));
    d2eexy[2] += (-std::pow(Pi, 2.5) *
                  (((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 +
                     C102 * C109 + C91 * C115) *
                        C934 +
                    (C100 * C182 + C89 * C188 + C101 * C183 + C90 * C189 +
                     C102 * C184 + C91 * C190) *
                        C823 -
                    (C102 * C829 + C91 * C837 + C101 * C828 + C90 * C836 +
                     C100 * C831 + C89 * C842) *
                        C935 -
                    (C102 * C937 + C91 * C945 + C101 * C938 + C90 * C946 +
                     C100 * C939 + C89 * C947) *
                        C824 +
                    (C100 * C832 + C89 * C844 + C101 * C833 + C90 * C845 +
                     C102 * C834 + C91 * C846) *
                        C936 +
                    (C100 * C940 + C89 * C948 + C101 * C941 + C90 * C949 +
                     C102 * C942 + C91 * C950) *
                        C825) *
                       C139442 * C139457 * C821 +
                   ((C100 * C828 + C89 * C836 + C101 * C829 + C90 * C837 +
                     C102 * C830 + C91 * C838) *
                        C935 -
                    ((C102 * C185 + C91 * C191 + C101 * C184 + C90 * C190 +
                      C100 * C183 + C89 * C189) *
                         C823 +
                     (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 +
                      C100 * C108 + C89 * C114) *
                         C934) +
                    (C100 * C938 + C89 * C946 + C101 * C937 + C90 * C945 +
                     C102 * C943 + C91 * C951) *
                        C824 -
                    (C102 * C835 + C91 * C850 + C101 * C834 + C90 * C846 +
                     C100 * C833 + C89 * C845) *
                        C936 -
                    (C102 * C944 + C91 * C952 + C101 * C942 + C90 * C950 +
                     C100 * C941 + C89 * C949) *
                        C825) *
                       C139442 * C139457 * C139305) *
                  C139339) /
                     (p * q * std::sqrt(p + q)) -
                 (std::pow(Pi, 2.5) *
                  (((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 +
                     C102 * C109 + C91 * C115) *
                        C181 +
                    (C100 * C182 + C89 * C188 + C101 * C183 + C90 * C189 +
                     C102 * C184 + C91 * C190) *
                        C139328) *
                       C139442 * C139457 * C92 -
                   ((C102 * C185 + C91 * C191 + C101 * C184 + C90 * C190 +
                     C100 * C183 + C89 * C189) *
                        C139328 +
                    (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 +
                     C100 * C108 + C89 * C114) *
                        C181) *
                       C139442 * C139457 * C93 +
                   ((C100 * C109 + C89 * C115 + C101 * C110 + C90 * C119 +
                     C102 * C111 + C91 * C121) *
                        C181 +
                    (C100 * C184 + C89 * C190 + C101 * C185 + C90 * C191 +
                     C102 * C186 + C91 * C192) *
                        C139328) *
                       C139442 * C139457 * C94 -
                   ((C102 * C187 + C91 * C193 + C101 * C186 + C90 * C192 +
                     C100 * C185 + C89 * C191) *
                        C139328 +
                    (C102 * C112 + C91 * C123 + C101 * C111 + C90 * C121 +
                     C100 * C110 + C89 * C119) *
                        C181) *
                       C139442 * C139457 * C95) *
                  C139339) /
                     (p * q * std::sqrt(p + q)) +
                 (2 * std::pow(Pi, 2.5) *
                  ((((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 +
                      C102 * C109 + C91 * C115) *
                         C181 +
                     (C100 * C182 + C89 * C188 + C101 * C183 + C90 * C189 +
                      C102 * C184 + C91 * C190) *
                         C139328) *
                        C139442 * C139457 * C821 -
                    ((C102 * C185 + C91 * C191 + C101 * C184 + C90 * C190 +
                      C100 * C183 + C89 * C189) *
                         C139328 +
                     (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 +
                      C100 * C108 + C89 * C114) *
                         C181) *
                        C139442 * C139457 * C139305) *
                       C1761 +
                   (((C100 * C1764 + C89 * C1772 + C101 * C1765 + C90 * C1773 +
                      C102 * C1766 + C91 * C1774) *
                         C181 +
                     (C100 * C1870 + C89 * C1878 + C101 * C1871 + C90 * C1879 +
                      C102 * C1872 + C91 * C1880) *
                         C139328) *
                        C139442 * C139457 * C139305 -
                    ((C102 * C1871 + C91 * C1879 + C101 * C1870 + C90 * C1878 +
                      C100 * C1873 + C89 * C1881) *
                         C139328 +
                     (C102 * C1765 + C91 * C1773 + C101 * C1764 + C90 * C1772 +
                      C100 * C1767 + C89 * C1778) *
                         C181) *
                        C139442 * C139457 * C821) *
                       C1762 +
                   (((C100 * C1768 + C89 * C1780 + C101 * C1769 + C90 * C1781 +
                      C102 * C1770 + C91 * C1782) *
                         C181 +
                     (C100 * C1874 + C89 * C1882 + C101 * C1875 + C90 * C1883 +
                      C102 * C1876 + C91 * C1884) *
                         C139328) *
                        C139442 * C139457 * C821 -
                    ((C102 * C1877 + C91 * C1885 + C101 * C1876 + C90 * C1884 +
                      C100 * C1875 + C89 * C1883) *
                         C139328 +
                     (C102 * C1771 + C91 * C1786 + C101 * C1770 + C90 * C1782 +
                      C100 * C1769 + C89 * C1781) *
                         C181) *
                        C139442 * C139457 * C139305) *
                       C1763)) /
                     (p * q * std::sqrt(p + q));
    d2eexz[2] +=
        (-std::pow(Pi, 2.5) * ((((C100 * C107 + C89 * C113 + C101 * C108 +
                                  C90 * C114 + C102 * C109 + C91 * C115) *
                                     C244 +
                                 (C100 * C245 + C89 * C251 + C101 * C246 +
                                  C90 * C252 + C102 * C247 + C91 * C253) *
                                     C139339) *
                                    C139442 * C139457 * C823 -
                                ((C102 * C1027 + C91 * C1035 + C101 * C1028 +
                                  C90 * C1036 + C100 * C1029 + C89 * C1037) *
                                     C139339 +
                                 (C102 * C829 + C91 * C837 + C101 * C828 +
                                  C90 * C836 + C100 * C831 + C89 * C842) *
                                     C244) *
                                    C139442 * C139457 * C824 +
                                ((C100 * C832 + C89 * C844 + C101 * C833 +
                                  C90 * C845 + C102 * C834 + C91 * C846) *
                                     C244 +
                                 (C100 * C1030 + C89 * C1038 + C101 * C1031 +
                                  C90 * C1039 + C102 * C1032 + C91 * C1040) *
                                     C139339) *
                                    C139442 * C139457 * C825) *
                                   C821 +
                               (((C100 * C828 + C89 * C836 + C101 * C829 +
                                  C90 * C837 + C102 * C830 + C91 * C838) *
                                     C244 +
                                 (C100 * C1028 + C89 * C1036 + C101 * C1027 +
                                  C90 * C1035 + C102 * C1033 + C91 * C1041) *
                                     C139339) *
                                    C139442 * C139457 * C824 -
                                ((C102 * C248 + C91 * C254 + C101 * C247 +
                                  C90 * C253 + C100 * C246 + C89 * C252) *
                                     C139339 +
                                 (C102 * C110 + C91 * C119 + C101 * C109 +
                                  C90 * C115 + C100 * C108 + C89 * C114) *
                                     C244) *
                                    C139442 * C139457 * C823 -
                                ((C102 * C1034 + C91 * C1042 + C101 * C1032 +
                                  C90 * C1040 + C100 * C1031 + C89 * C1039) *
                                     C139339 +
                                 (C102 * C835 + C91 * C850 + C101 * C834 +
                                  C90 * C846 + C100 * C833 + C89 * C845) *
                                     C244) *
                                    C139442 * C139457 * C825) *
                                   C139305)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * (((C100 * C107 + C89 * C113 + C101 * C108 +
                                C90 * C114 + C102 * C109 + C91 * C115) *
                                   C244 +
                               (C100 * C245 + C89 * C251 + C101 * C246 +
                                C90 * C252 + C102 * C247 + C91 * C253) *
                                   C139339) *
                                  C139442 * C139457 * C139328 * C92 -
                              ((C102 * C248 + C91 * C254 + C101 * C247 +
                                C90 * C253 + C100 * C246 + C89 * C252) *
                                   C139339 +
                               (C102 * C110 + C91 * C119 + C101 * C109 +
                                C90 * C115 + C100 * C108 + C89 * C114) *
                                   C244) *
                                  C139442 * C139457 * C139328 * C93 +
                              ((C100 * C109 + C89 * C115 + C101 * C110 +
                                C90 * C119 + C102 * C111 + C91 * C121) *
                                   C244 +
                               (C100 * C247 + C89 * C253 + C101 * C248 +
                                C90 * C254 + C102 * C249 + C91 * C255) *
                                   C139339) *
                                  C139442 * C139457 * C139328 * C94 -
                              ((C102 * C250 + C91 * C256 + C101 * C249 +
                                C90 * C255 + C100 * C248 + C89 * C254) *
                                   C139339 +
                               (C102 * C112 + C91 * C123 + C101 * C111 +
                                C90 * C121 + C100 * C110 + C89 * C119) *
                                   C244) *
                                  C139442 * C139457 * C139328 * C95)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 + C102 * C109 +
            C91 * C115) *
               C1960 +
           (C100 * C245 + C89 * C251 + C101 * C246 + C90 * C252 + C102 * C247 +
            C91 * C253) *
               C1761 -
           (C102 * C1765 + C91 * C1773 + C101 * C1764 + C90 * C1772 +
            C100 * C1767 + C89 * C1778) *
               C1961 -
           (C102 * C1963 + C91 * C1971 + C101 * C1964 + C90 * C1972 +
            C100 * C1965 + C89 * C1973) *
               C1762 +
           (C100 * C1768 + C89 * C1780 + C101 * C1769 + C90 * C1781 +
            C102 * C1770 + C91 * C1782) *
               C1962 +
           (C100 * C1966 + C89 * C1974 + C101 * C1967 + C90 * C1975 +
            C102 * C1968 + C91 * C1976) *
               C1763) *
              C139442 * C139457 * C139328 * C821 +
          ((C100 * C1764 + C89 * C1772 + C101 * C1765 + C90 * C1773 +
            C102 * C1766 + C91 * C1774) *
               C1961 -
           ((C102 * C248 + C91 * C254 + C101 * C247 + C90 * C253 + C100 * C246 +
             C89 * C252) *
                C1761 +
            (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 + C100 * C108 +
             C89 * C114) *
                C1960) +
           (C100 * C1964 + C89 * C1972 + C101 * C1963 + C90 * C1971 +
            C102 * C1969 + C91 * C1977) *
               C1762 -
           (C102 * C1771 + C91 * C1786 + C101 * C1770 + C90 * C1782 +
            C100 * C1769 + C89 * C1781) *
               C1962 -
           (C102 * C1970 + C91 * C1978 + C101 * C1968 + C90 * C1976 +
            C100 * C1967 + C89 * C1975) *
               C1763) *
              C139442 * C139457 * C139328 * C139305)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[2] +=
        (-std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139442 * C308) * C826 +
            (C307 * C116 + C139442 * C314) * C821 - C337 * C827 -
            C338 * C139305) *
               C139457 * C89 +
           (C337 * C826 + C338 * C821 - C339 * C827 - C340 * C139305) *
               C139457 * C90 +
           (C339 * C826 + C340 * C821 - C341 * C827 - C342 * C139305) *
               C139457 * C91) *
              C139339 * C823 +
          ((C1150 * C827 -
            ((C307 * C841 + C139442 * C1125) * C821 +
             (C307 * C831 + C139442 * C1118) * C826) +
            C1151 * C139305) *
               C139457 * C89 +
           (C1152 * C827 - (C1151 * C821 + C1150 * C826) + C1153 * C139305) *
               C139457 * C90 +
           ((C307 * C830 + C139442 * C1120) * C827 -
            (C1153 * C821 + C1152 * C826) +
            (C307 * C843 + C139442 * C1128) * C139305) *
               C139457 * C91) *
              C139339 * C824 +
          (((C307 * C832 + C139442 * C1121) * C826 +
            (C307 * C847 + C139442 * C1129) * C821 - C1154 * C827 -
            C1155 * C139305) *
               C139457 * C89 +
           (C1154 * C826 + C1155 * C821 - C1156 * C827 - C1157 * C139305) *
               C139457 * C90 +
           (C1156 * C826 + C1157 * C821 -
            (C307 * C835 + C139442 * C1124) * C827 -
            (C307 * C851 + C139442 * C1132) * C139305) *
               C139457 * C91) *
              C139339 * C825)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C307 * C107 + C139442 * C308) * C103 +
           (C307 * C116 + C139442 * C314) * C92 - C337 * C104 - C338 * C93 +
           C339 * C105 + C340 * C94 - C341 * C106 - C342 * C95) *
              C139457 * C89 +
          (C337 * C103 + C338 * C92 - C339 * C104 - C340 * C93 + C341 * C105 +
           C342 * C94 - C343 * C106 - C344 * C95) *
              C139457 * C90 +
          (C339 * C103 + C340 * C92 - C341 * C104 - C342 * C93 + C343 * C105 +
           C344 * C94 - (C307 * C112 + C139442 * C313) * C106 -
           (C307 * C124 + C139442 * C319) * C95) *
              C139457 * C91) *
         C139339 * C139328) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139442 * C308) * C826 +
            (C307 * C116 + C139442 * C314) * C821 - C337 * C827 -
            C338 * C139305) *
               C139457 * C89 +
           (C337 * C826 + C338 * C821 - C339 * C827 - C340 * C139305) *
               C139457 * C90 +
           (C339 * C826 + C340 * C821 - C341 * C827 - C342 * C139305) *
               C139457 * C91) *
              C1761 +
          ((C2086 * C827 -
            ((C307 * C1777 + C139442 * C2061) * C821 +
             (C307 * C1767 + C139442 * C2054) * C826) +
            C2087 * C139305) *
               C139457 * C89 +
           (C2088 * C827 - (C2087 * C821 + C2086 * C826) + C2089 * C139305) *
               C139457 * C90 +
           ((C307 * C1766 + C139442 * C2056) * C827 -
            (C2089 * C821 + C2088 * C826) +
            (C307 * C1779 + C139442 * C2064) * C139305) *
               C139457 * C91) *
              C1762 +
          (((C307 * C1768 + C139442 * C2057) * C826 +
            (C307 * C1783 + C139442 * C2065) * C821 - C2090 * C827 -
            C2091 * C139305) *
               C139457 * C89 +
           (C2090 * C826 + C2091 * C821 - C2092 * C827 - C2093 * C139305) *
               C139457 * C90 +
           (C2092 * C826 + C2093 * C821 -
            (C307 * C1771 + C139442 * C2060) * C827 -
            (C307 * C1787 + C139442 * C2068) * C139305) *
               C139457 * C91) *
              C1763) *
         C139328) /
            (p * q * std::sqrt(p + q));
    d2eeyy[2] +=
        (-std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139442 * C308) * C934 +
            (C307 * C182 + C139442 * C394) * C823 -
            (C307 * C831 + C139442 * C1118) * C935 -
            (C307 * C939 + C139442 * C1231) * C824 +
            (C307 * C832 + C139442 * C1121) * C936 +
            (C307 * C940 + C139442 * C1232) * C825) *
               C139457 * C89 +
           (C1240 + C1241 - C1242 - C1260 + C1245 + C1261) * C139457 * C90 +
           (C1248 + C1249 - C1250 - C1262 + C1253 + C1263) * C139457 * C91) *
              C821 +
          ((C1242 - (C1241 + C1240) + C1260 - C1245 - C1261) * C139457 * C89 +
           (C1250 - (C1249 + C1248) + C1262 - C1253 - C1263) * C139457 * C90 +
           ((C307 * C830 + C139442 * C1120) * C935 -
            (C415 * C823 + C341 * C934) +
            (C307 * C943 + C139442 * C1237) * C824 -
            (C307 * C835 + C139442 * C1124) * C936 -
            (C307 * C944 + C139442 * C1238) * C825) *
               C139457 * C91) *
              C139305) *
         C139339) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139442 * C308) * C181 +
            (C307 * C182 + C139442 * C394) * C139328) *
               C139457 * C89 +
           (C401 + C417) * C139457 * C90 + C423 * C91) *
              C92 -
          (C424 * C91 + (C418 + C404) * C139457 * C90 +
           (C417 + C401) * C139457 * C89) *
              C93 +
          (C423 * C89 + (C409 + C419) * C139457 * C90 +
           (C410 + C420) * C139457 * C91) *
              C94 -
          (((C307 * C187 + C139442 * C399) * C139328 +
            (C307 * C112 + C139442 * C313) * C181) *
               C139457 * C91 +
           (C420 + C410) * C139457 * C90 + C424 * C89) *
              C95) *
         C139339) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139442 * C308) * C181 +
             (C307 * C182 + C139442 * C394) * C139328) *
                C139457 * C89 +
            (C401 + C417) * C139457 * C90 + C423 * C91) *
               C821 -
           (C424 * C91 + (C418 + C404) * C139457 * C90 +
            (C417 + C401) * C139457 * C89) *
               C139305) *
              C1761 +
          (((C2176 + C2192) * C139457 * C89 + (C2179 + C2193) * C139457 * C90 +
            ((C307 * C1766 + C139442 * C2056) * C181 +
             (C307 * C1872 + C139442 * C2169) * C139328) *
                C139457 * C91) *
               C139305 -
           ((C2193 + C2179) * C139457 * C91 + (C2192 + C2176) * C139457 * C90 +
            ((C307 * C1873 + C139442 * C2170) * C139328 +
             (C307 * C1767 + C139442 * C2054) * C181) *
                C139457 * C89) *
               C821) *
              C1762 +
          ((((C307 * C1768 + C139442 * C2057) * C181 +
             (C307 * C1874 + C139442 * C2171) * C139328) *
                C139457 * C89 +
            (C2182 + C2194) * C139457 * C90 + (C2185 + C2195) * C139457 * C91) *
               C821 -
           (((C307 * C1877 + C139442 * C2174) * C139328 +
             (C307 * C1771 + C139442 * C2060) * C181) *
                C139457 * C91 +
            (C2195 + C2185) * C139457 * C90 + (C2194 + C2182) * C139457 * C89) *
               C139305) *
              C1763)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[2] +=
        (-std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139442 * C308) * C244 +
             (C307 * C245 + C139442 * C474) * C139339) *
                C139457 * C89 +
            (C481 + C497) * C139457 * C90 + C503 * C91) *
               C823 -
           ((C1362 + C1348) * C139457 * C91 + (C1363 + C1351) * C139457 * C90 +
            ((C307 * C1029 + C139442 * C1339) * C139339 +
             (C307 * C831 + C139442 * C1118) * C244) *
                C139457 * C89) *
               C824 +
           (((C307 * C832 + C139442 * C1121) * C244 +
             (C307 * C1030 + C139442 * C1340) * C139339) *
                C139457 * C89 +
            (C1352 + C1364) * C139457 * C90 + (C1355 + C1365) * C139457 * C91) *
               C825) *
              C821 +
          (((C1351 + C1363) * C139457 * C89 + (C1348 + C1362) * C139457 * C90 +
            ((C307 * C830 + C139442 * C1120) * C244 +
             (C307 * C1033 + C139442 * C1343) * C139339) *
                C139457 * C91) *
               C824 -
           (C504 * C91 + (C498 + C484) * C139457 * C90 +
            (C497 + C481) * C139457 * C89) *
               C823 -
           (((C307 * C1034 + C139442 * C1344) * C139339 +
             (C307 * C835 + C139442 * C1124) * C244) *
                C139457 * C91 +
            (C1365 + C1355) * C139457 * C90 + (C1364 + C1352) * C139457 * C89) *
               C825) *
              C139305)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * ((((C307 * C107 + C139442 * C308) * C244 +
                                (C307 * C245 + C139442 * C474) * C139339) *
                                   C139457 * C89 +
                               (C481 + C497) * C139457 * C90 + C503 * C91) *
                                  C139328 * C92 -
                              (C504 * C91 + (C498 + C484) * C139457 * C90 +
                               (C497 + C481) * C139457 * C89) *
                                  C139328 * C93 +
                              (C503 * C89 + (C489 + C499) * C139457 * C90 +
                               (C490 + C500) * C139457 * C91) *
                                  C139328 * C94 -
                              (((C307 * C250 + C139442 * C479) * C139339 +
                                (C307 * C112 + C139442 * C313) * C244) *
                                   C139457 * C91 +
                               (C500 + C490) * C139457 * C90 + C504 * C89) *
                                  C139328 * C95)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139442 * C308) * C1960 +
            (C307 * C245 + C139442 * C474) * C1761 -
            (C307 * C1767 + C139442 * C2054) * C1961 -
            (C307 * C1965 + C139442 * C2269) * C1762 +
            (C307 * C1768 + C139442 * C2057) * C1962 +
            (C307 * C1966 + C139442 * C2270) * C1763) *
               C139457 * C89 +
           (C2278 + C2279 - C2280 - C2298 + C2283 + C2299) * C139457 * C90 +
           (C2286 + C2287 - C2288 - C2300 + C2291 + C2301) * C139457 * C91) *
              C139328 * C821 +
          ((C2280 - (C2279 + C2278) + C2298 - C2283 - C2299) * C139457 * C89 +
           (C2288 - (C2287 + C2286) + C2300 - C2291 - C2301) * C139457 * C90 +
           ((C307 * C1766 + C139442 * C2056) * C1961 -
            (C495 * C1761 + C341 * C1960) +
            (C307 * C1969 + C139442 * C2275) * C1762 -
            (C307 * C1771 + C139442 * C2060) * C1962 -
            (C307 * C1970 + C139442 * C2276) * C1763) *
               C139457 * C91) *
              C139328 * C139305)) /
            (p * q * std::sqrt(p + q));
    d2eezx[2] +=
        (-std::pow(Pi, 2.5) *
         ((((C554 * C107 + C139457 * C555) * C826 +
            (C554 * C116 + C139457 * C561) * C821 - C584 * C827 -
            C585 * C139305) *
               C89 +
           (C584 * C826 + C585 * C821 - C586 * C827 - C587 * C139305) * C90 +
           (C586 * C826 + C587 * C821 - C588 * C827 - C589 * C139305) * C91) *
              C139442 * C139339 * C823 +
          ((C1472 * C827 -
            ((C554 * C841 + C139457 * C1447) * C821 +
             (C554 * C831 + C139457 * C1440) * C826) +
            C1473 * C139305) *
               C89 +
           (C1474 * C827 - (C1473 * C821 + C1472 * C826) + C1475 * C139305) *
               C90 +
           ((C554 * C830 + C139457 * C1442) * C827 -
            (C1475 * C821 + C1474 * C826) +
            (C554 * C843 + C139457 * C1450) * C139305) *
               C91) *
              C139442 * C139339 * C824 +
          (((C554 * C832 + C139457 * C1443) * C826 +
            (C554 * C847 + C139457 * C1451) * C821 - C1476 * C827 -
            C1477 * C139305) *
               C89 +
           (C1476 * C826 + C1477 * C821 - C1478 * C827 - C1479 * C139305) *
               C90 +
           (C1478 * C826 + C1479 * C821 -
            (C554 * C835 + C139457 * C1446) * C827 -
            (C554 * C851 + C139457 * C1454) * C139305) *
               C91) *
              C139442 * C139339 * C825)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C554 * C107 + C139457 * C555) * C103 +
           (C554 * C116 + C139457 * C561) * C92 - C584 * C104 - C585 * C93 +
           C586 * C105 + C587 * C94 - C588 * C106 - C589 * C95) *
              C89 +
          (C584 * C103 + C585 * C92 - C586 * C104 - C587 * C93 + C588 * C105 +
           C589 * C94 - C590 * C106 - C591 * C95) *
              C90 +
          (C586 * C103 + C587 * C92 - C588 * C104 - C589 * C93 + C590 * C105 +
           C591 * C94 - (C554 * C112 + C139457 * C560) * C106 -
           (C554 * C124 + C139457 * C566) * C95) *
              C91) *
         C139442 * C139339 * C139328) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C139457 * C555) * C826 +
            (C554 * C116 + C139457 * C561) * C821 - C584 * C827 -
            C585 * C139305) *
               C89 +
           (C584 * C826 + C585 * C821 - C586 * C827 - C587 * C139305) * C90 +
           (C586 * C826 + C587 * C821 - C588 * C827 - C589 * C139305) * C91) *
              C139442 * C1761 +
          ((C2408 * C827 -
            ((C554 * C1777 + C139457 * C2383) * C821 +
             (C554 * C1767 + C139457 * C2376) * C826) +
            C2409 * C139305) *
               C89 +
           (C2410 * C827 - (C2409 * C821 + C2408 * C826) + C2411 * C139305) *
               C90 +
           ((C554 * C1766 + C139457 * C2378) * C827 -
            (C2411 * C821 + C2410 * C826) +
            (C554 * C1779 + C139457 * C2386) * C139305) *
               C91) *
              C139442 * C1762 +
          (((C554 * C1768 + C139457 * C2379) * C826 +
            (C554 * C1783 + C139457 * C2387) * C821 - C2412 * C827 -
            C2413 * C139305) *
               C89 +
           (C2412 * C826 + C2413 * C821 - C2414 * C827 - C2415 * C139305) *
               C90 +
           (C2414 * C826 + C2415 * C821 -
            (C554 * C1771 + C139457 * C2382) * C827 -
            (C554 * C1787 + C139457 * C2390) * C139305) *
               C91) *
              C139442 * C1763) *
         C139328) /
            (p * q * std::sqrt(p + q));
    d2eezy[2] += (-std::pow(Pi, 2.5) *
                  ((((C554 * C107 + C139457 * C555) * C934 +
                     (C554 * C182 + C139457 * C641) * C823 -
                     (C554 * C831 + C139457 * C1440) * C935 -
                     (C554 * C939 + C139457 * C1553) * C824 +
                     (C554 * C832 + C139457 * C1443) * C936 +
                     (C554 * C940 + C139457 * C1554) * C825) *
                        C89 +
                    (C1562 + C1563 - C1564 - C1582 + C1567 + C1583) * C90 +
                    (C1570 + C1571 - C1572 - C1584 + C1575 + C1585) * C91) *
                       C139442 * C821 +
                   ((C1564 - (C1563 + C1562) + C1582 - C1567 - C1583) * C89 +
                    (C1572 - (C1571 + C1570) + C1584 - C1575 - C1585) * C90 +
                    ((C554 * C830 + C139457 * C1442) * C935 -
                     (C662 * C823 + C588 * C934) +
                     (C554 * C943 + C139457 * C1559) * C824 -
                     (C554 * C835 + C139457 * C1446) * C936 -
                     (C554 * C944 + C139457 * C1560) * C825) *
                        C91) *
                       C139442 * C139305) *
                  C139339) /
                     (p * q * std::sqrt(p + q)) -
                 (std::pow(Pi, 2.5) *
                  ((((C554 * C107 + C139457 * C555) * C181 +
                     (C554 * C182 + C139457 * C641) * C139328) *
                        C89 +
                    (C648 + C664) * C90 + C668 * C91) *
                       C139442 * C92 -
                   (C669 * C91 + (C665 + C651) * C90 + (C664 + C648) * C89) *
                       C139442 * C93 +
                   (C668 * C89 + (C656 + C666) * C90 + (C657 + C667) * C91) *
                       C139442 * C94 -
                   (((C554 * C187 + C139457 * C646) * C139328 +
                     (C554 * C112 + C139457 * C560) * C181) *
                        C91 +
                    (C667 + C657) * C90 + C669 * C89) *
                       C139442 * C95) *
                  C139339) /
                     (p * q * std::sqrt(p + q)) +
                 (2 * std::pow(Pi, 2.5) *
                  (((((C554 * C107 + C139457 * C555) * C181 +
                      (C554 * C182 + C139457 * C641) * C139328) *
                         C89 +
                     (C648 + C664) * C90 + C668 * C91) *
                        C139442 * C821 -
                    (C669 * C91 + (C665 + C651) * C90 + (C664 + C648) * C89) *
                        C139442 * C139305) *
                       C1761 +
                   (((C2498 + C2514) * C89 + (C2501 + C2515) * C90 +
                     ((C554 * C1766 + C139457 * C2378) * C181 +
                      (C554 * C1872 + C139457 * C2491) * C139328) *
                         C91) *
                        C139442 * C139305 -
                    ((C2515 + C2501) * C91 + (C2514 + C2498) * C90 +
                     ((C554 * C1873 + C139457 * C2492) * C139328 +
                      (C554 * C1767 + C139457 * C2376) * C181) *
                         C89) *
                        C139442 * C821) *
                       C1762 +
                   ((((C554 * C1768 + C139457 * C2379) * C181 +
                      (C554 * C1874 + C139457 * C2493) * C139328) *
                         C89 +
                     (C2504 + C2516) * C90 + (C2507 + C2517) * C91) *
                        C139442 * C821 -
                    (((C554 * C1877 + C139457 * C2496) * C139328 +
                      (C554 * C1771 + C139457 * C2382) * C181) *
                         C91 +
                     (C2517 + C2507) * C90 + (C2516 + C2504) * C89) *
                        C139442 * C139305) *
                       C1763)) /
                     (p * q * std::sqrt(p + q));
    d2eezz[2] += (-std::pow(Pi, 2.5) *
                  (((((C554 * C107 + C139457 * C555) * C244 +
                      (C554 * C245 + C139457 * C719) * C139339) *
                         C89 +
                     (C726 + C742) * C90 + C746 * C91) *
                        C139442 * C823 -
                    ((C1684 + C1670) * C91 + (C1685 + C1673) * C90 +
                     ((C554 * C1029 + C139457 * C1661) * C139339 +
                      (C554 * C831 + C139457 * C1440) * C244) *
                         C89) *
                        C139442 * C824 +
                    (((C554 * C832 + C139457 * C1443) * C244 +
                      (C554 * C1030 + C139457 * C1662) * C139339) *
                         C89 +
                     (C1674 + C1686) * C90 + (C1677 + C1687) * C91) *
                        C139442 * C825) *
                       C821 +
                   (((C1673 + C1685) * C89 + (C1670 + C1684) * C90 +
                     ((C554 * C830 + C139457 * C1442) * C244 +
                      (C554 * C1033 + C139457 * C1665) * C139339) *
                         C91) *
                        C139442 * C824 -
                    (C747 * C91 + (C743 + C729) * C90 + (C742 + C726) * C89) *
                        C139442 * C823 -
                    (((C554 * C1034 + C139457 * C1666) * C139339 +
                      (C554 * C835 + C139457 * C1446) * C244) *
                         C91 +
                     (C1687 + C1677) * C90 + (C1686 + C1674) * C89) *
                        C139442 * C825) *
                       C139305)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::pow(Pi, 2.5) *
                  ((((C554 * C107 + C139457 * C555) * C244 +
                     (C554 * C245 + C139457 * C719) * C139339) *
                        C89 +
                    (C726 + C742) * C90 + C746 * C91) *
                       C139442 * C139328 * C92 -
                   (C747 * C91 + (C743 + C729) * C90 + (C742 + C726) * C89) *
                       C139442 * C139328 * C93 +
                   (C746 * C89 + (C734 + C744) * C90 + (C735 + C745) * C91) *
                       C139442 * C139328 * C94 -
                   (((C554 * C250 + C139457 * C724) * C139339 +
                     (C554 * C112 + C139457 * C560) * C244) *
                        C91 +
                    (C745 + C735) * C90 + C747 * C89) *
                       C139442 * C139328 * C95)) /
                     (p * q * std::sqrt(p + q)) +
                 (2 * std::pow(Pi, 2.5) *
                  ((((C554 * C107 + C139457 * C555) * C1960 +
                     (C554 * C245 + C139457 * C719) * C1761 -
                     (C554 * C1767 + C139457 * C2376) * C1961 -
                     (C554 * C1965 + C139457 * C2591) * C1762 +
                     (C554 * C1768 + C139457 * C2379) * C1962 +
                     (C554 * C1966 + C139457 * C2592) * C1763) *
                        C89 +
                    (C2600 + C2601 - C2602 - C2620 + C2605 + C2621) * C90 +
                    (C2608 + C2609 - C2610 - C2622 + C2613 + C2623) * C91) *
                       C139442 * C139328 * C821 +
                   ((C2602 - (C2601 + C2600) + C2620 - C2605 - C2621) * C89 +
                    (C2610 - (C2609 + C2608) + C2622 - C2613 - C2623) * C90 +
                    ((C554 * C1766 + C139457 * C2378) * C1961 -
                     (C740 * C1761 + C588 * C1960) +
                     (C554 * C1969 + C139457 * C2597) * C1762 -
                     (C554 * C1771 + C139457 * C2382) * C1962 -
                     (C554 * C1970 + C139457 * C2598) * C1763) *
                        C91) *
                       C139442 * C139328 * C139305)) /
                     (p * q * std::sqrt(p + q));
    d2eexx[3] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 +
                     C102 * C109 + C91 * C115) *
                        C2702 +
                    (C100 * C116 + C89 * C125 + C101 * C117 + C90 * C126 +
                     C102 * C118 + C91 * C127) *
                        C139589 -
                    (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 +
                     C100 * C108 + C89 * C114) *
                        C2703 -
                    (C102 * C120 + C91 * C128 + C101 * C118 + C90 * C127 +
                     C100 * C117 + C89 * C126) *
                        C139590 +
                    (C100 * C109 + C89 * C115 + C101 * C110 + C90 * C119 +
                     C102 * C111 + C91 * C121) *
                        C2704 +
                    (C100 * C118 + C89 * C127 + C101 * C120 + C90 * C128 +
                     C102 * C122 + C91 * C129) *
                        C2699) *
                       C139442 * C139457 * C139561 +
                   ((C100 * C1764 + C89 * C1772 + C101 * C1765 + C90 * C1773 +
                     C102 * C1766 + C91 * C1774) *
                        C2703 -
                    ((C102 * C1775 + C91 * C1788 + C101 * C1776 + C90 * C1789 +
                      C100 * C1777 + C89 * C1790) *
                         C139589 +
                     (C102 * C1765 + C91 * C1773 + C101 * C1764 + C90 * C1772 +
                      C100 * C1767 + C89 * C1778) *
                         C2702) +
                    (C100 * C1776 + C89 * C1789 + C101 * C1775 + C90 * C1788 +
                     C102 * C1779 + C91 * C1791) *
                        C139590 -
                    (C102 * C3453 + C91 * C3454 + C101 * C1766 + C90 * C1774 +
                     C100 * C1765 + C89 * C1773) *
                        C2704 -
                    (C102 * C3455 + C91 * C3456 + C101 * C1779 + C90 * C1791 +
                     C100 * C1775 + C89 * C1788) *
                        C2699) *
                       C139442 * C139457 * C139403) *
                  C139328) /
                 (p * q * std::sqrt(p + q));
    d2eexy[3] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 +
                      C102 * C109 + C91 * C115) *
                         C181 +
                     (C100 * C182 + C89 * C188 + C101 * C183 + C90 * C189 +
                      C102 * C184 + C91 * C190) *
                         C139328) *
                        C139442 * C139457 * C139589 -
                    ((C102 * C185 + C91 * C191 + C101 * C184 + C90 * C190 +
                      C100 * C183 + C89 * C189) *
                         C139328 +
                     (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 +
                      C100 * C108 + C89 * C114) *
                         C181) *
                        C139442 * C139457 * C139590 +
                    ((C100 * C109 + C89 * C115 + C101 * C110 + C90 * C119 +
                      C102 * C111 + C91 * C121) *
                         C181 +
                     (C100 * C184 + C89 * C190 + C101 * C185 + C90 * C191 +
                      C102 * C186 + C91 * C192) *
                         C139328) *
                        C139442 * C139457 * C2699) *
                       C139561 +
                   (((C100 * C1764 + C89 * C1772 + C101 * C1765 + C90 * C1773 +
                      C102 * C1766 + C91 * C1774) *
                         C181 +
                     (C100 * C1870 + C89 * C1878 + C101 * C1871 + C90 * C1879 +
                      C102 * C1872 + C91 * C1880) *
                         C139328) *
                        C139442 * C139457 * C139590 -
                    ((C102 * C1871 + C91 * C1879 + C101 * C1870 + C90 * C1878 +
                      C100 * C1873 + C89 * C1881) *
                         C139328 +
                     (C102 * C1765 + C91 * C1773 + C101 * C1764 + C90 * C1772 +
                      C100 * C1767 + C89 * C1778) *
                         C181) *
                        C139442 * C139457 * C139589 -
                    ((C102 * C3531 + C91 * C3532 + C101 * C1872 + C90 * C1880 +
                      C100 * C1871 + C89 * C1879) *
                         C139328 +
                     (C102 * C3453 + C91 * C3454 + C101 * C1766 + C90 * C1774 +
                      C100 * C1765 + C89 * C1773) *
                         C181) *
                        C139442 * C139457 * C2699) *
                       C139403)) /
                 (p * q * std::sqrt(p + q));
    d2eexz[3] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 +
                     C102 * C109 + C91 * C115) *
                        C3607 +
                    (C100 * C245 + C89 * C251 + C101 * C246 + C90 * C252 +
                     C102 * C247 + C91 * C253) *
                        C139561 -
                    (C102 * C1765 + C91 * C1773 + C101 * C1764 + C90 * C1772 +
                     C100 * C1767 + C89 * C1778) *
                        C3608 -
                    (C102 * C1963 + C91 * C1971 + C101 * C1964 + C90 * C1972 +
                     C100 * C1965 + C89 * C1973) *
                        C139403) *
                       C139442 * C139457 * C139328 * C139589 +
                   ((C100 * C1764 + C89 * C1772 + C101 * C1765 + C90 * C1773 +
                     C102 * C1766 + C91 * C1774) *
                        C3608 -
                    ((C102 * C248 + C91 * C254 + C101 * C247 + C90 * C253 +
                      C100 * C246 + C89 * C252) *
                         C139561 +
                     (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 +
                      C100 * C108 + C89 * C114) *
                         C3607) +
                    (C100 * C1964 + C89 * C1972 + C101 * C1963 + C90 * C1971 +
                     C102 * C1969 + C91 * C1977) *
                        C139403) *
                       C139442 * C139457 * C139328 * C139590 +
                   ((C100 * C109 + C89 * C115 + C101 * C110 + C90 * C119 +
                     C102 * C111 + C91 * C121) *
                        C3607 +
                    (C100 * C247 + C89 * C253 + C101 * C248 + C90 * C254 +
                     C102 * C249 + C91 * C255) *
                        C139561 -
                    (C102 * C3453 + C91 * C3454 + C101 * C1766 + C90 * C1774 +
                     C100 * C1765 + C89 * C1773) *
                        C3608 -
                    (C102 * C3609 + C91 * C3610 + C101 * C1969 + C90 * C1977 +
                     C100 * C1963 + C89 * C1971) *
                        C139403) *
                       C139442 * C139457 * C139328 * C2699)) /
                 (p * q * std::sqrt(p + q));
    d2eeyx[3] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139442 * C308) * C2702 +
            (C307 * C116 + C139442 * C314) * C139589 - C337 * C2703 -
            C338 * C139590 + C339 * C2704 + C340 * C2699) *
               C139457 * C89 +
           (C337 * C2702 + C338 * C139589 - C339 * C2703 - C340 * C139590 +
            C341 * C2704 + C342 * C2699) *
               C139457 * C90 +
           (C339 * C2702 + C340 * C139589 - C341 * C2703 - C342 * C139590 +
            C343 * C2704 + C344 * C2699) *
               C139457 * C91) *
              C139561 +
          ((C2086 * C2703 -
            ((C307 * C1777 + C139442 * C2061) * C139589 +
             (C307 * C1767 + C139442 * C2054) * C2702) +
            C2087 * C139590 - C2088 * C2704 - C2089 * C2699) *
               C139457 * C89 +
           (C2088 * C2703 - (C2087 * C139589 + C2086 * C2702) +
            C2089 * C139590 - C3692 * C2704 - C3693 * C2699) *
               C139457 * C90 +
           (C3692 * C2703 - (C2089 * C139589 + C2088 * C2702) +
            C3693 * C139590 - (C307 * C3453 + C139442 * C3685) * C2704 -
            (C307 * C3455 + C139442 * C3686) * C2699) *
               C139457 * C91) *
              C139403) *
         C139328) /
        (p * q * std::sqrt(p + q));
    d2eeyy[3] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139442 * C308) * C181 +
             (C307 * C182 + C139442 * C394) * C139328) *
                C139457 * C89 +
            (C401 + C417) * C139457 * C90 + C423 * C91) *
               C139589 -
           (C424 * C91 + (C418 + C404) * C139457 * C90 +
            (C417 + C401) * C139457 * C89) *
               C139590 +
           (C423 * C89 + (C409 + C419) * C139457 * C90 +
            (C410 + C420) * C139457 * C91) *
               C2699) *
              C139561 +
          (((C2176 + C2192) * C139457 * C89 + (C2179 + C2193) * C139457 * C90 +
            (C3769 + C3775) * C139457 * C91) *
               C139590 -
           (C3774 * C91 + (C2192 + C2176) * C139457 * C90 +
            ((C307 * C1873 + C139442 * C2170) * C139328 +
             (C307 * C1767 + C139442 * C2054) * C181) *
                C139457 * C89) *
               C139589 -
           (((C307 * C3531 + C139442 * C3767) * C139328 +
             (C307 * C3453 + C139442 * C3685) * C181) *
                C139457 * C91 +
            (C3775 + C3769) * C139457 * C90 + C3774 * C89) *
               C2699) *
              C139403)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[3] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139442 * C308) * C3607 +
            (C307 * C245 + C139442 * C474) * C139561 -
            (C307 * C1767 + C139442 * C2054) * C3608 -
            (C307 * C1965 + C139442 * C2269) * C139403) *
               C139457 * C89 +
           (C3851 + C3852 - C3853 - C3854) * C139457 * C90 + C3869 * C91) *
              C139328 * C139589 +
          ((C3853 - (C3852 + C3851) + C3854) * C139457 * C89 +
           (C3857 - (C3856 + C3855) + C3858) * C139457 * C90 +
           (C3859 - (C3860 + C3861) + C3867) * C139457 * C91) *
              C139328 * C139590 +
          (C3869 * C89 + (C3861 + C3860 - C3859 - C3867) * C139457 * C90 +
           (C343 * C3607 + C496 * C139561 -
            (C307 * C3453 + C139442 * C3685) * C3608 -
            (C307 * C3609 + C139442 * C3849) * C139403) *
               C139457 * C91) *
              C139328 * C2699)) /
        (p * q * std::sqrt(p + q));
    d2eezx[3] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C139457 * C555) * C2702 +
            (C554 * C116 + C139457 * C561) * C139589 - C584 * C2703 -
            C585 * C139590 + C586 * C2704 + C587 * C2699) *
               C89 +
           (C584 * C2702 + C585 * C139589 - C586 * C2703 - C587 * C139590 +
            C588 * C2704 + C589 * C2699) *
               C90 +
           (C586 * C2702 + C587 * C139589 - C588 * C2703 - C589 * C139590 +
            C590 * C2704 + C591 * C2699) *
               C91) *
              C139442 * C139561 +
          ((C2408 * C2703 -
            ((C554 * C1777 + C139457 * C2383) * C139589 +
             (C554 * C1767 + C139457 * C2376) * C2702) +
            C2409 * C139590 - C2410 * C2704 - C2411 * C2699) *
               C89 +
           (C2410 * C2703 - (C2409 * C139589 + C2408 * C2702) +
            C2411 * C139590 - C3950 * C2704 - C3951 * C2699) *
               C90 +
           (C3950 * C2703 - (C2411 * C139589 + C2410 * C2702) +
            C3951 * C139590 - (C554 * C3453 + C139457 * C3943) * C2704 -
            (C554 * C3455 + C139457 * C3944) * C2699) *
               C91) *
              C139442 * C139403) *
         C139328) /
        (p * q * std::sqrt(p + q));
    d2eezy[3] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((((C554 * C107 + C139457 * C555) * C181 +
                      (C554 * C182 + C139457 * C641) * C139328) *
                         C89 +
                     (C648 + C664) * C90 + C668 * C91) *
                        C139442 * C139589 -
                    (C669 * C91 + (C665 + C651) * C90 + (C664 + C648) * C89) *
                        C139442 * C139590 +
                    (C668 * C89 + (C656 + C666) * C90 + (C657 + C667) * C91) *
                        C139442 * C2699) *
                       C139561 +
                   (((C2498 + C2514) * C89 + (C2501 + C2515) * C90 +
                     (C4027 + C4032) * C91) *
                        C139442 * C139590 -
                    (C4030 * C91 + (C2514 + C2498) * C90 +
                     ((C554 * C1873 + C139457 * C2492) * C139328 +
                      (C554 * C1767 + C139457 * C2376) * C181) *
                         C89) *
                        C139442 * C139589 -
                    (((C554 * C3531 + C139457 * C4025) * C139328 +
                      (C554 * C3453 + C139457 * C3943) * C181) *
                         C91 +
                     (C4032 + C4027) * C90 + C4030 * C89) *
                        C139442 * C2699) *
                       C139403)) /
                 (p * q * std::sqrt(p + q));
    d2eezz[3] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C554 * C107 + C139457 * C555) * C3607 +
                     (C554 * C245 + C139457 * C719) * C139561 -
                     (C554 * C1767 + C139457 * C2376) * C3608 -
                     (C554 * C1965 + C139457 * C2591) * C139403) *
                        C89 +
                    (C4108 + C4109 - C4110 - C4111) * C90 + C4125 * C91) *
                       C139442 * C139328 * C139589 +
                   ((C4110 - (C4109 + C4108) + C4111) * C89 +
                    (C4114 - (C4113 + C4112) + C4115) * C90 +
                    (C4116 - (C4117 + C4118) + C4124) * C91) *
                       C139442 * C139328 * C139590 +
                   (C4125 * C89 + (C4118 + C4117 - C4116 - C4124) * C90 +
                    (C590 * C3607 + C741 * C139561 -
                     (C554 * C3453 + C139457 * C3943) * C3608 -
                     (C554 * C3609 + C139457 * C4106) * C139403) *
                        C91) *
                       C139442 * C139328 * C2699)) /
                 (p * q * std::sqrt(p + q));
    d2eexx[4] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 +
                    C102 * C109 + C91 * C115) *
                       C103 +
                   (C100 * C116 + C89 * C125 + C101 * C117 + C90 * C126 +
                    C102 * C118 + C91 * C127) *
                       C92 -
                   (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 +
                    C100 * C108 + C89 * C114) *
                       C104 -
                   (C102 * C120 + C91 * C128 + C101 * C118 + C90 * C127 +
                    C100 * C117 + C89 * C126) *
                       C93 +
                   (C100 * C109 + C89 * C115 + C101 * C110 + C90 * C119 +
                    C102 * C111 + C91 * C121) *
                       C105 +
                   (C100 * C118 + C89 * C127 + C101 * C120 + C90 * C128 +
                    C102 * C122 + C91 * C129) *
                       C94 -
                   (C102 * C112 + C91 * C123 + C101 * C111 + C90 * C121 +
                    C100 * C110 + C89 * C119) *
                       C106 -
                   (C102 * C124 + C91 * C130 + C101 * C122 + C90 * C129 +
                    C100 * C120 + C89 * C128) *
                       C95) *
                  C139442 * C139457 * C139339 * C139328) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 +
                     C102 * C109 + C91 * C115) *
                        C826 +
                    (C100 * C116 + C89 * C125 + C101 * C117 + C90 * C126 +
                     C102 * C118 + C91 * C127) *
                        C821 -
                    (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 +
                     C100 * C108 + C89 * C114) *
                        C827 -
                    (C102 * C120 + C91 * C128 + C101 * C118 + C90 * C127 +
                     C100 * C117 + C89 * C126) *
                        C139305) *
                       C139442 * C139457 * C139339 * C823 +
                   ((C100 * C828 + C89 * C836 + C101 * C829 + C90 * C837 +
                     C102 * C830 + C91 * C838) *
                        C827 -
                    ((C102 * C839 + C91 * C852 + C101 * C840 + C90 * C853 +
                      C100 * C841 + C89 * C854) *
                         C821 +
                     (C102 * C829 + C91 * C837 + C101 * C828 + C90 * C836 +
                      C100 * C831 + C89 * C842) *
                         C826) +
                    (C100 * C840 + C89 * C853 + C101 * C839 + C90 * C852 +
                     C102 * C843 + C91 * C855) *
                        C139305) *
                       C139442 * C139457 * C139339 * C824 +
                   ((C100 * C832 + C89 * C844 + C101 * C833 + C90 * C845 +
                     C102 * C834 + C91 * C846) *
                        C826 +
                    (C100 * C847 + C89 * C856 + C101 * C848 + C90 * C857 +
                     C102 * C849 + C91 * C858) *
                        C821 -
                    (C102 * C835 + C91 * C850 + C101 * C834 + C90 * C846 +
                     C100 * C833 + C89 * C845) *
                        C827 -
                    (C102 * C851 + C91 * C859 + C101 * C849 + C90 * C858 +
                     C100 * C848 + C89 * C857) *
                        C139305) *
                       C139442 * C139457 * C139339 * C825)) /
                     (p * q * std::sqrt(p + q));
    d2eexy[4] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 +
                     C102 * C109 + C91 * C115) *
                        C181 +
                    (C100 * C182 + C89 * C188 + C101 * C183 + C90 * C189 +
                     C102 * C184 + C91 * C190) *
                        C139328) *
                       C139442 * C139457 * C92 -
                   ((C102 * C185 + C91 * C191 + C101 * C184 + C90 * C190 +
                     C100 * C183 + C89 * C189) *
                        C139328 +
                    (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 +
                     C100 * C108 + C89 * C114) *
                        C181) *
                       C139442 * C139457 * C93 +
                   ((C100 * C109 + C89 * C115 + C101 * C110 + C90 * C119 +
                     C102 * C111 + C91 * C121) *
                        C181 +
                    (C100 * C184 + C89 * C190 + C101 * C185 + C90 * C191 +
                     C102 * C186 + C91 * C192) *
                        C139328) *
                       C139442 * C139457 * C94 -
                   ((C102 * C187 + C91 * C193 + C101 * C186 + C90 * C192 +
                     C100 * C185 + C89 * C191) *
                        C139328 +
                    (C102 * C112 + C91 * C123 + C101 * C111 + C90 * C121 +
                     C100 * C110 + C89 * C119) *
                        C181) *
                       C139442 * C139457 * C95) *
                  C139339) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 +
                     C102 * C109 + C91 * C115) *
                        C934 +
                    (C100 * C182 + C89 * C188 + C101 * C183 + C90 * C189 +
                     C102 * C184 + C91 * C190) *
                        C823 -
                    (C102 * C829 + C91 * C837 + C101 * C828 + C90 * C836 +
                     C100 * C831 + C89 * C842) *
                        C935 -
                    (C102 * C937 + C91 * C945 + C101 * C938 + C90 * C946 +
                     C100 * C939 + C89 * C947) *
                        C824 +
                    (C100 * C832 + C89 * C844 + C101 * C833 + C90 * C845 +
                     C102 * C834 + C91 * C846) *
                        C936 +
                    (C100 * C940 + C89 * C948 + C101 * C941 + C90 * C949 +
                     C102 * C942 + C91 * C950) *
                        C825) *
                       C139442 * C139457 * C821 +
                   ((C100 * C828 + C89 * C836 + C101 * C829 + C90 * C837 +
                     C102 * C830 + C91 * C838) *
                        C935 -
                    ((C102 * C185 + C91 * C191 + C101 * C184 + C90 * C190 +
                      C100 * C183 + C89 * C189) *
                         C823 +
                     (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 +
                      C100 * C108 + C89 * C114) *
                         C934) +
                    (C100 * C938 + C89 * C946 + C101 * C937 + C90 * C945 +
                     C102 * C943 + C91 * C951) *
                        C824 -
                    (C102 * C835 + C91 * C850 + C101 * C834 + C90 * C846 +
                     C100 * C833 + C89 * C845) *
                        C936 -
                    (C102 * C944 + C91 * C952 + C101 * C942 + C90 * C950 +
                     C100 * C941 + C89 * C949) *
                        C825) *
                       C139442 * C139457 * C139305) *
                  C139339) /
                     (p * q * std::sqrt(p + q));
    d2eexz[4] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 +
                     C102 * C109 + C91 * C115) *
                        C244 +
                    (C100 * C245 + C89 * C251 + C101 * C246 + C90 * C252 +
                     C102 * C247 + C91 * C253) *
                        C139339) *
                       C139442 * C139457 * C139328 * C92 -
                   ((C102 * C248 + C91 * C254 + C101 * C247 + C90 * C253 +
                     C100 * C246 + C89 * C252) *
                        C139339 +
                    (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 +
                     C100 * C108 + C89 * C114) *
                        C244) *
                       C139442 * C139457 * C139328 * C93 +
                   ((C100 * C109 + C89 * C115 + C101 * C110 + C90 * C119 +
                     C102 * C111 + C91 * C121) *
                        C244 +
                    (C100 * C247 + C89 * C253 + C101 * C248 + C90 * C254 +
                     C102 * C249 + C91 * C255) *
                        C139339) *
                       C139442 * C139457 * C139328 * C94 -
                   ((C102 * C250 + C91 * C256 + C101 * C249 + C90 * C255 +
                     C100 * C248 + C89 * C254) *
                        C139339 +
                    (C102 * C112 + C91 * C123 + C101 * C111 + C90 * C121 +
                     C100 * C110 + C89 * C119) *
                        C244) *
                       C139442 * C139457 * C139328 * C95)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 +
                      C102 * C109 + C91 * C115) *
                         C244 +
                     (C100 * C245 + C89 * C251 + C101 * C246 + C90 * C252 +
                      C102 * C247 + C91 * C253) *
                         C139339) *
                        C139442 * C139457 * C823 -
                    ((C102 * C1027 + C91 * C1035 + C101 * C1028 + C90 * C1036 +
                      C100 * C1029 + C89 * C1037) *
                         C139339 +
                     (C102 * C829 + C91 * C837 + C101 * C828 + C90 * C836 +
                      C100 * C831 + C89 * C842) *
                         C244) *
                        C139442 * C139457 * C824 +
                    ((C100 * C832 + C89 * C844 + C101 * C833 + C90 * C845 +
                      C102 * C834 + C91 * C846) *
                         C244 +
                     (C100 * C1030 + C89 * C1038 + C101 * C1031 + C90 * C1039 +
                      C102 * C1032 + C91 * C1040) *
                         C139339) *
                        C139442 * C139457 * C825) *
                       C821 +
                   (((C100 * C828 + C89 * C836 + C101 * C829 + C90 * C837 +
                      C102 * C830 + C91 * C838) *
                         C244 +
                     (C100 * C1028 + C89 * C1036 + C101 * C1027 + C90 * C1035 +
                      C102 * C1033 + C91 * C1041) *
                         C139339) *
                        C139442 * C139457 * C824 -
                    ((C102 * C248 + C91 * C254 + C101 * C247 + C90 * C253 +
                      C100 * C246 + C89 * C252) *
                         C139339 +
                     (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 +
                      C100 * C108 + C89 * C114) *
                         C244) *
                        C139442 * C139457 * C823 -
                    ((C102 * C1034 + C91 * C1042 + C101 * C1032 + C90 * C1040 +
                      C100 * C1031 + C89 * C1039) *
                         C139339 +
                     (C102 * C835 + C91 * C850 + C101 * C834 + C90 * C846 +
                      C100 * C833 + C89 * C845) *
                         C244) *
                        C139442 * C139457 * C825) *
                       C139305)) /
                     (p * q * std::sqrt(p + q));
    d2eeyx[4] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C307 * C107 + C139442 * C308) * C103 +
           (C307 * C116 + C139442 * C314) * C92 - C337 * C104 - C338 * C93 +
           C339 * C105 + C340 * C94 - C341 * C106 - C342 * C95) *
              C139457 * C89 +
          (C337 * C103 + C338 * C92 - C339 * C104 - C340 * C93 + C341 * C105 +
           C342 * C94 - C343 * C106 - C344 * C95) *
              C139457 * C90 +
          (C339 * C103 + C340 * C92 - C341 * C104 - C342 * C93 + C343 * C105 +
           C344 * C94 - (C307 * C112 + C139442 * C313) * C106 -
           (C307 * C124 + C139442 * C319) * C95) *
              C139457 * C91) *
         C139339 * C139328) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139442 * C308) * C826 +
            (C307 * C116 + C139442 * C314) * C821 - C337 * C827 -
            C338 * C139305) *
               C139457 * C89 +
           (C337 * C826 + C338 * C821 - C339 * C827 - C340 * C139305) *
               C139457 * C90 +
           (C339 * C826 + C340 * C821 - C341 * C827 - C342 * C139305) *
               C139457 * C91) *
              C139339 * C823 +
          ((C1150 * C827 -
            ((C307 * C841 + C139442 * C1125) * C821 +
             (C307 * C831 + C139442 * C1118) * C826) +
            C1151 * C139305) *
               C139457 * C89 +
           (C1152 * C827 - (C1151 * C821 + C1150 * C826) + C1153 * C139305) *
               C139457 * C90 +
           ((C307 * C830 + C139442 * C1120) * C827 -
            (C1153 * C821 + C1152 * C826) +
            (C307 * C843 + C139442 * C1128) * C139305) *
               C139457 * C91) *
              C139339 * C824 +
          (((C307 * C832 + C139442 * C1121) * C826 +
            (C307 * C847 + C139442 * C1129) * C821 - C1154 * C827 -
            C1155 * C139305) *
               C139457 * C89 +
           (C1154 * C826 + C1155 * C821 - C1156 * C827 - C1157 * C139305) *
               C139457 * C90 +
           (C1156 * C826 + C1157 * C821 -
            (C307 * C835 + C139442 * C1124) * C827 -
            (C307 * C851 + C139442 * C1132) * C139305) *
               C139457 * C91) *
              C139339 * C825)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[4] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139442 * C308) * C181 +
            (C307 * C182 + C139442 * C394) * C139328) *
               C139457 * C89 +
           (C401 + C417) * C139457 * C90 + C423 * C91) *
              C92 -
          (C424 * C91 + (C418 + C404) * C139457 * C90 +
           (C417 + C401) * C139457 * C89) *
              C93 +
          (C423 * C89 + (C409 + C419) * C139457 * C90 +
           (C410 + C420) * C139457 * C91) *
              C94 -
          (((C307 * C187 + C139442 * C399) * C139328 +
            (C307 * C112 + C139442 * C313) * C181) *
               C139457 * C91 +
           (C420 + C410) * C139457 * C90 + C424 * C89) *
              C95) *
         C139339) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139442 * C308) * C934 +
            (C307 * C182 + C139442 * C394) * C823 -
            (C307 * C831 + C139442 * C1118) * C935 -
            (C307 * C939 + C139442 * C1231) * C824 +
            (C307 * C832 + C139442 * C1121) * C936 +
            (C307 * C940 + C139442 * C1232) * C825) *
               C139457 * C89 +
           (C1240 + C1241 - C1242 - C1260 + C1245 + C1261) * C139457 * C90 +
           (C1248 + C1249 - C1250 - C1262 + C1253 + C1263) * C139457 * C91) *
              C821 +
          ((C1242 - (C1241 + C1240) + C1260 - C1245 - C1261) * C139457 * C89 +
           (C1250 - (C1249 + C1248) + C1262 - C1253 - C1263) * C139457 * C90 +
           ((C307 * C830 + C139442 * C1120) * C935 -
            (C415 * C823 + C341 * C934) +
            (C307 * C943 + C139442 * C1237) * C824 -
            (C307 * C835 + C139442 * C1124) * C936 -
            (C307 * C944 + C139442 * C1238) * C825) *
               C139457 * C91) *
              C139305) *
         C139339) /
            (p * q * std::sqrt(p + q));
    d2eeyz[4] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139442 * C308) * C244 +
            (C307 * C245 + C139442 * C474) * C139339) *
               C139457 * C89 +
           (C481 + C497) * C139457 * C90 + C503 * C91) *
              C139328 * C92 -
          (C504 * C91 + (C498 + C484) * C139457 * C90 +
           (C497 + C481) * C139457 * C89) *
              C139328 * C93 +
          (C503 * C89 + (C489 + C499) * C139457 * C90 +
           (C490 + C500) * C139457 * C91) *
              C139328 * C94 -
          (((C307 * C250 + C139442 * C479) * C139339 +
            (C307 * C112 + C139442 * C313) * C244) *
               C139457 * C91 +
           (C500 + C490) * C139457 * C90 + C504 * C89) *
              C139328 * C95)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139442 * C308) * C244 +
             (C307 * C245 + C139442 * C474) * C139339) *
                C139457 * C89 +
            (C481 + C497) * C139457 * C90 + C503 * C91) *
               C823 -
           ((C1362 + C1348) * C139457 * C91 + (C1363 + C1351) * C139457 * C90 +
            ((C307 * C1029 + C139442 * C1339) * C139339 +
             (C307 * C831 + C139442 * C1118) * C244) *
                C139457 * C89) *
               C824 +
           (((C307 * C832 + C139442 * C1121) * C244 +
             (C307 * C1030 + C139442 * C1340) * C139339) *
                C139457 * C89 +
            (C1352 + C1364) * C139457 * C90 + (C1355 + C1365) * C139457 * C91) *
               C825) *
              C821 +
          (((C1351 + C1363) * C139457 * C89 + (C1348 + C1362) * C139457 * C90 +
            ((C307 * C830 + C139442 * C1120) * C244 +
             (C307 * C1033 + C139442 * C1343) * C139339) *
                C139457 * C91) *
               C824 -
           (C504 * C91 + (C498 + C484) * C139457 * C90 +
            (C497 + C481) * C139457 * C89) *
               C823 -
           (((C307 * C1034 + C139442 * C1344) * C139339 +
             (C307 * C835 + C139442 * C1124) * C244) *
                C139457 * C91 +
            (C1365 + C1355) * C139457 * C90 + (C1364 + C1352) * C139457 * C89) *
               C825) *
              C139305)) /
            (p * q * std::sqrt(p + q));
    d2eezx[4] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C554 * C107 + C139457 * C555) * C103 +
           (C554 * C116 + C139457 * C561) * C92 - C584 * C104 - C585 * C93 +
           C586 * C105 + C587 * C94 - C588 * C106 - C589 * C95) *
              C89 +
          (C584 * C103 + C585 * C92 - C586 * C104 - C587 * C93 + C588 * C105 +
           C589 * C94 - C590 * C106 - C591 * C95) *
              C90 +
          (C586 * C103 + C587 * C92 - C588 * C104 - C589 * C93 + C590 * C105 +
           C591 * C94 - (C554 * C112 + C139457 * C560) * C106 -
           (C554 * C124 + C139457 * C566) * C95) *
              C91) *
         C139442 * C139339 * C139328) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C139457 * C555) * C826 +
            (C554 * C116 + C139457 * C561) * C821 - C584 * C827 -
            C585 * C139305) *
               C89 +
           (C584 * C826 + C585 * C821 - C586 * C827 - C587 * C139305) * C90 +
           (C586 * C826 + C587 * C821 - C588 * C827 - C589 * C139305) * C91) *
              C139442 * C139339 * C823 +
          ((C1472 * C827 -
            ((C554 * C841 + C139457 * C1447) * C821 +
             (C554 * C831 + C139457 * C1440) * C826) +
            C1473 * C139305) *
               C89 +
           (C1474 * C827 - (C1473 * C821 + C1472 * C826) + C1475 * C139305) *
               C90 +
           ((C554 * C830 + C139457 * C1442) * C827 -
            (C1475 * C821 + C1474 * C826) +
            (C554 * C843 + C139457 * C1450) * C139305) *
               C91) *
              C139442 * C139339 * C824 +
          (((C554 * C832 + C139457 * C1443) * C826 +
            (C554 * C847 + C139457 * C1451) * C821 - C1476 * C827 -
            C1477 * C139305) *
               C89 +
           (C1476 * C826 + C1477 * C821 - C1478 * C827 - C1479 * C139305) *
               C90 +
           (C1478 * C826 + C1479 * C821 -
            (C554 * C835 + C139457 * C1446) * C827 -
            (C554 * C851 + C139457 * C1454) * C139305) *
               C91) *
              C139442 * C139339 * C825)) /
            (p * q * std::sqrt(p + q));
    d2eezy[4] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C554 * C107 + C139457 * C555) * C181 +
                     (C554 * C182 + C139457 * C641) * C139328) *
                        C89 +
                    (C648 + C664) * C90 + C668 * C91) *
                       C139442 * C92 -
                   (C669 * C91 + (C665 + C651) * C90 + (C664 + C648) * C89) *
                       C139442 * C93 +
                   (C668 * C89 + (C656 + C666) * C90 + (C657 + C667) * C91) *
                       C139442 * C94 -
                   (((C554 * C187 + C139457 * C646) * C139328 +
                     (C554 * C112 + C139457 * C560) * C181) *
                        C91 +
                    (C667 + C657) * C90 + C669 * C89) *
                       C139442 * C95) *
                  C139339) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C554 * C107 + C139457 * C555) * C934 +
                     (C554 * C182 + C139457 * C641) * C823 -
                     (C554 * C831 + C139457 * C1440) * C935 -
                     (C554 * C939 + C139457 * C1553) * C824 +
                     (C554 * C832 + C139457 * C1443) * C936 +
                     (C554 * C940 + C139457 * C1554) * C825) *
                        C89 +
                    (C1562 + C1563 - C1564 - C1582 + C1567 + C1583) * C90 +
                    (C1570 + C1571 - C1572 - C1584 + C1575 + C1585) * C91) *
                       C139442 * C821 +
                   ((C1564 - (C1563 + C1562) + C1582 - C1567 - C1583) * C89 +
                    (C1572 - (C1571 + C1570) + C1584 - C1575 - C1585) * C90 +
                    ((C554 * C830 + C139457 * C1442) * C935 -
                     (C662 * C823 + C588 * C934) +
                     (C554 * C943 + C139457 * C1559) * C824 -
                     (C554 * C835 + C139457 * C1446) * C936 -
                     (C554 * C944 + C139457 * C1560) * C825) *
                        C91) *
                       C139442 * C139305) *
                  C139339) /
                     (p * q * std::sqrt(p + q));
    d2eezz[4] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C554 * C107 + C139457 * C555) * C244 +
                     (C554 * C245 + C139457 * C719) * C139339) *
                        C89 +
                    (C726 + C742) * C90 + C746 * C91) *
                       C139442 * C139328 * C92 -
                   (C747 * C91 + (C743 + C729) * C90 + (C742 + C726) * C89) *
                       C139442 * C139328 * C93 +
                   (C746 * C89 + (C734 + C744) * C90 + (C735 + C745) * C91) *
                       C139442 * C139328 * C94 -
                   (((C554 * C250 + C139457 * C724) * C139339 +
                     (C554 * C112 + C139457 * C560) * C244) *
                        C91 +
                    (C745 + C735) * C90 + C747 * C89) *
                       C139442 * C139328 * C95)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C554 * C107 + C139457 * C555) * C244 +
                      (C554 * C245 + C139457 * C719) * C139339) *
                         C89 +
                     (C726 + C742) * C90 + C746 * C91) *
                        C139442 * C823 -
                    ((C1684 + C1670) * C91 + (C1685 + C1673) * C90 +
                     ((C554 * C1029 + C139457 * C1661) * C139339 +
                      (C554 * C831 + C139457 * C1440) * C244) *
                         C89) *
                        C139442 * C824 +
                    (((C554 * C832 + C139457 * C1443) * C244 +
                      (C554 * C1030 + C139457 * C1662) * C139339) *
                         C89 +
                     (C1674 + C1686) * C90 + (C1677 + C1687) * C91) *
                        C139442 * C825) *
                       C821 +
                   (((C1673 + C1685) * C89 + (C1670 + C1684) * C90 +
                     ((C554 * C830 + C139457 * C1442) * C244 +
                      (C554 * C1033 + C139457 * C1665) * C139339) *
                         C91) *
                        C139442 * C824 -
                    (C747 * C91 + (C743 + C729) * C90 + (C742 + C726) * C89) *
                        C139442 * C823 -
                    (((C554 * C1034 + C139457 * C1666) * C139339 +
                      (C554 * C835 + C139457 * C1446) * C244) *
                         C91 +
                     (C1687 + C1677) * C90 + (C1686 + C1674) * C89) *
                        C139442 * C825) *
                       C139305)) /
                     (p * q * std::sqrt(p + q));
    d2eexx[5] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 +
                     C102 * C109 + C91 * C115) *
                        C137108 +
                    (C100 * C116 + C89 * C125 + C101 * C117 + C90 * C126 +
                     C102 * C118 + C91 * C127) *
                        C139552 -
                    (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 +
                     C100 * C108 + C89 * C114) *
                        C137101 -
                    (C102 * C120 + C91 * C128 + C101 * C118 + C90 * C127 +
                     C100 * C117 + C89 * C126) *
                        C139305) *
                       C139442 * C139457 * C139339 * C139591 +
                   ((C100 * C828 + C89 * C836 + C101 * C829 + C90 * C837 +
                     C102 * C830 + C91 * C838) *
                        C137101 -
                    ((C102 * C839 + C91 * C852 + C101 * C840 + C90 * C853 +
                      C100 * C841 + C89 * C854) *
                         C139552 +
                     (C102 * C829 + C91 * C837 + C101 * C828 + C90 * C836 +
                      C100 * C831 + C89 * C842) *
                         C137108) +
                    (C100 * C840 + C89 * C853 + C101 * C839 + C90 * C852 +
                     C102 * C843 + C91 * C855) *
                        C139305) *
                       C139442 * C139457 * C139339 * C139592 +
                   ((C100 * C832 + C89 * C844 + C101 * C833 + C90 * C845 +
                     C102 * C834 + C91 * C846) *
                        C137108 +
                    (C100 * C847 + C89 * C856 + C101 * C848 + C90 * C857 +
                     C102 * C849 + C91 * C858) *
                        C139552 -
                    (C102 * C835 + C91 * C850 + C101 * C834 + C90 * C846 +
                     C100 * C833 + C89 * C845) *
                        C137101 -
                    (C102 * C851 + C91 * C859 + C101 * C849 + C90 * C858 +
                     C100 * C848 + C89 * C857) *
                        C139305) *
                       C139442 * C139457 * C139339 * C7158)) /
                 (p * q * std::sqrt(p + q));
    d2eexy[5] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 +
                     C102 * C109 + C91 * C115) *
                        C7235 +
                    (C100 * C182 + C89 * C188 + C101 * C183 + C90 * C189 +
                     C102 * C184 + C91 * C190) *
                        C139591 -
                    (C102 * C829 + C91 * C837 + C101 * C828 + C90 * C836 +
                     C100 * C831 + C89 * C842) *
                        C7236 -
                    (C102 * C937 + C91 * C945 + C101 * C938 + C90 * C946 +
                     C100 * C939 + C89 * C947) *
                        C139592 +
                    (C100 * C832 + C89 * C844 + C101 * C833 + C90 * C845 +
                     C102 * C834 + C91 * C846) *
                        C7237 +
                    (C100 * C940 + C89 * C948 + C101 * C941 + C90 * C949 +
                     C102 * C942 + C91 * C950) *
                        C7158) *
                       C139442 * C139457 * C139552 +
                   ((C100 * C828 + C89 * C836 + C101 * C829 + C90 * C837 +
                     C102 * C830 + C91 * C838) *
                        C7236 -
                    ((C102 * C185 + C91 * C191 + C101 * C184 + C90 * C190 +
                      C100 * C183 + C89 * C189) *
                         C139591 +
                     (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 +
                      C100 * C108 + C89 * C114) *
                         C7235) +
                    (C100 * C938 + C89 * C946 + C101 * C937 + C90 * C945 +
                     C102 * C943 + C91 * C951) *
                        C139592 -
                    (C102 * C835 + C91 * C850 + C101 * C834 + C90 * C846 +
                     C100 * C833 + C89 * C845) *
                        C7237 -
                    (C102 * C944 + C91 * C952 + C101 * C942 + C90 * C950 +
                     C100 * C941 + C89 * C949) *
                        C7158) *
                       C139442 * C139457 * C139305) *
                  C139339) /
                 (p * q * std::sqrt(p + q));
    d2eexz[5] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 +
                      C102 * C109 + C91 * C115) *
                         C244 +
                     (C100 * C245 + C89 * C251 + C101 * C246 + C90 * C252 +
                      C102 * C247 + C91 * C253) *
                         C139339) *
                        C139442 * C139457 * C139591 -
                    ((C102 * C1027 + C91 * C1035 + C101 * C1028 + C90 * C1036 +
                      C100 * C1029 + C89 * C1037) *
                         C139339 +
                     (C102 * C829 + C91 * C837 + C101 * C828 + C90 * C836 +
                      C100 * C831 + C89 * C842) *
                         C244) *
                        C139442 * C139457 * C139592 +
                    ((C100 * C832 + C89 * C844 + C101 * C833 + C90 * C845 +
                      C102 * C834 + C91 * C846) *
                         C244 +
                     (C100 * C1030 + C89 * C1038 + C101 * C1031 + C90 * C1039 +
                      C102 * C1032 + C91 * C1040) *
                         C139339) *
                        C139442 * C139457 * C7158) *
                       C139552 +
                   (((C100 * C828 + C89 * C836 + C101 * C829 + C90 * C837 +
                      C102 * C830 + C91 * C838) *
                         C244 +
                     (C100 * C1028 + C89 * C1036 + C101 * C1027 + C90 * C1035 +
                      C102 * C1033 + C91 * C1041) *
                         C139339) *
                        C139442 * C139457 * C139592 -
                    ((C102 * C248 + C91 * C254 + C101 * C247 + C90 * C253 +
                      C100 * C246 + C89 * C252) *
                         C139339 +
                     (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 +
                      C100 * C108 + C89 * C114) *
                         C244) *
                        C139442 * C139457 * C139591 -
                    ((C102 * C1034 + C91 * C1042 + C101 * C1032 + C90 * C1040 +
                      C100 * C1031 + C89 * C1039) *
                         C139339 +
                     (C102 * C835 + C91 * C850 + C101 * C834 + C90 * C846 +
                      C100 * C833 + C89 * C845) *
                         C244) *
                        C139442 * C139457 * C7158) *
                       C139305)) /
                 (p * q * std::sqrt(p + q));
    d2eeyx[5] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139442 * C308) * C137108 +
            (C307 * C116 + C139442 * C314) * C139552 - C337 * C137101 -
            C338 * C139305) *
               C139457 * C89 +
           (C337 * C137108 + C338 * C139552 - C339 * C137101 - C340 * C139305) *
               C139457 * C90 +
           (C339 * C137108 + C340 * C139552 - C341 * C137101 - C342 * C139305) *
               C139457 * C91) *
              C139339 * C139591 +
          ((C1150 * C137101 -
            ((C307 * C841 + C139442 * C1125) * C139552 +
             (C307 * C831 + C139442 * C1118) * C137108) +
            C1151 * C139305) *
               C139457 * C89 +
           (C1152 * C137101 - (C1151 * C139552 + C1150 * C137108) +
            C1153 * C139305) *
               C139457 * C90 +
           (C2944 * C137101 - (C1153 * C139552 + C1152 * C137108) +
            C2945 * C139305) *
               C139457 * C91) *
              C139339 * C139592 +
          (((C307 * C832 + C139442 * C1121) * C137108 +
            (C307 * C847 + C139442 * C1129) * C139552 - C1154 * C137101 -
            C1155 * C139305) *
               C139457 * C89 +
           (C1154 * C137108 + C1155 * C139552 - C1156 * C137101 -
            C1157 * C139305) *
               C139457 * C90 +
           (C1156 * C137108 + C1157 * C139552 -
            (C307 * C835 + C139442 * C1124) * C137101 -
            (C307 * C851 + C139442 * C1132) * C139305) *
               C139457 * C91) *
              C139339 * C7158)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[5] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139442 * C308) * C7235 +
            (C307 * C182 + C139442 * C394) * C139591 -
            (C307 * C831 + C139442 * C1118) * C7236 -
            (C307 * C939 + C139442 * C1231) * C139592 +
            (C307 * C832 + C139442 * C1121) * C7237 +
            (C307 * C940 + C139442 * C1232) * C7158) *
               C139457 * C89 +
           (C7461 + C7462 - C7463 - C7464 + C7465 + C7466) * C139457 * C90 +
           (C7467 + C7468 - C7469 - C7470 + C7471 + C7472) * C139457 * C91) *
              C139552 +
          ((C7463 - (C7462 + C7461) + C7464 - C7465 - C7466) * C139457 * C89 +
           (C7469 - (C7468 + C7467) + C7470 - C7471 - C7472) * C139457 * C90 +
           (C2944 * C7236 - (C415 * C139591 + C341 * C7235) + C3035 * C139592 -
            (C307 * C835 + C139442 * C1124) * C7237 -
            (C307 * C944 + C139442 * C1238) * C7158) *
               C139457 * C91) *
              C139305) *
         C139339) /
        (p * q * std::sqrt(p + q));
    d2eeyz[5] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139442 * C308) * C244 +
             (C307 * C245 + C139442 * C474) * C139339) *
                C139457 * C89 +
            (C481 + C497) * C139457 * C90 + C503 * C91) *
               C139591 -
           (C3119 * C91 + (C1363 + C1351) * C139457 * C90 +
            ((C307 * C1029 + C139442 * C1339) * C139339 +
             (C307 * C831 + C139442 * C1118) * C244) *
                C139457 * C89) *
               C139592 +
           (((C307 * C832 + C139442 * C1121) * C244 +
             (C307 * C1030 + C139442 * C1340) * C139339) *
                C139457 * C89 +
            (C1352 + C1364) * C139457 * C90 + (C1355 + C1365) * C139457 * C91) *
               C7158) *
              C139552 +
          (((C1351 + C1363) * C139457 * C89 + (C1348 + C1362) * C139457 * C90 +
            (C3116 + C3121) * C139457 * C91) *
               C139592 -
           (C504 * C91 + (C498 + C484) * C139457 * C90 +
            (C497 + C481) * C139457 * C89) *
               C139591 -
           (((C307 * C1034 + C139442 * C1344) * C139339 +
             (C307 * C835 + C139442 * C1124) * C244) *
                C139457 * C91 +
            (C1365 + C1355) * C139457 * C90 + (C1364 + C1352) * C139457 * C89) *
               C7158) *
              C139305)) /
        (p * q * std::sqrt(p + q));
    d2eezx[5] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C139457 * C555) * C137108 +
            (C554 * C116 + C139457 * C561) * C139552 - C584 * C137101 -
            C585 * C139305) *
               C89 +
           (C584 * C137108 + C585 * C139552 - C586 * C137101 - C587 * C139305) *
               C90 +
           (C586 * C137108 + C587 * C139552 - C588 * C137101 - C589 * C139305) *
               C91) *
              C139442 * C139339 * C139591 +
          ((C1472 * C137101 -
            ((C554 * C841 + C139457 * C1447) * C139552 +
             (C554 * C831 + C139457 * C1440) * C137108) +
            C1473 * C139305) *
               C89 +
           (C1474 * C137101 - (C1473 * C139552 + C1472 * C137108) +
            C1475 * C139305) *
               C90 +
           (C3202 * C137101 - (C1475 * C139552 + C1474 * C137108) +
            C3203 * C139305) *
               C91) *
              C139442 * C139339 * C139592 +
          (((C554 * C832 + C139457 * C1443) * C137108 +
            (C554 * C847 + C139457 * C1451) * C139552 - C1476 * C137101 -
            C1477 * C139305) *
               C89 +
           (C1476 * C137108 + C1477 * C139552 - C1478 * C137101 -
            C1479 * C139305) *
               C90 +
           (C1478 * C137108 + C1479 * C139552 -
            (C554 * C835 + C139457 * C1446) * C137101 -
            (C554 * C851 + C139457 * C1454) * C139305) *
               C91) *
              C139442 * C139339 * C7158)) /
        (p * q * std::sqrt(p + q));
    d2eezy[5] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C554 * C107 + C139457 * C555) * C7235 +
                     (C554 * C182 + C139457 * C641) * C139591 -
                     (C554 * C831 + C139457 * C1440) * C7236 -
                     (C554 * C939 + C139457 * C1553) * C139592 +
                     (C554 * C832 + C139457 * C1443) * C7237 +
                     (C554 * C940 + C139457 * C1554) * C7158) *
                        C89 +
                    (C7695 + C7696 - C7697 - C7698 + C7699 + C7700) * C90 +
                    (C7701 + C7702 - C7703 - C7704 + C7705 + C7706) * C91) *
                       C139442 * C139552 +
                   ((C7697 - (C7696 + C7695) + C7698 - C7699 - C7700) * C89 +
                    (C7703 - (C7702 + C7701) + C7704 - C7705 - C7706) * C90 +
                    (C3202 * C7236 - (C662 * C139591 + C588 * C7235) +
                     C3293 * C139592 - (C554 * C835 + C139457 * C1446) * C7237 -
                     (C554 * C944 + C139457 * C1560) * C7158) *
                        C91) *
                       C139442 * C139305) *
                  C139339) /
                 (p * q * std::sqrt(p + q));
    d2eezz[5] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((((C554 * C107 + C139457 * C555) * C244 +
                      (C554 * C245 + C139457 * C719) * C139339) *
                         C89 +
                     (C726 + C742) * C90 + C746 * C91) *
                        C139442 * C139591 -
                    (C3372 * C91 + (C1685 + C1673) * C90 +
                     ((C554 * C1029 + C139457 * C1661) * C139339 +
                      (C554 * C831 + C139457 * C1440) * C244) *
                         C89) *
                        C139442 * C139592 +
                    (((C554 * C832 + C139457 * C1443) * C244 +
                      (C554 * C1030 + C139457 * C1662) * C139339) *
                         C89 +
                     (C1674 + C1686) * C90 + (C1677 + C1687) * C91) *
                        C139442 * C7158) *
                       C139552 +
                   (((C1673 + C1685) * C89 + (C1670 + C1684) * C90 +
                     (C3373 + C3377) * C91) *
                        C139442 * C139592 -
                    (C747 * C91 + (C743 + C729) * C90 + (C742 + C726) * C89) *
                        C139442 * C139591 -
                    (((C554 * C1034 + C139457 * C1666) * C139339 +
                      (C554 * C835 + C139457 * C1446) * C244) *
                         C91 +
                     (C1687 + C1677) * C90 + (C1686 + C1674) * C89) *
                        C139442 * C7158) *
                       C139305)) /
                 (p * q * std::sqrt(p + q));
    d2eexx[6] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 +
                      C102 * C109 + C91 * C115) *
                         C5913 +
                     (C100 * C116 + C89 * C125 + C101 * C117 + C90 * C126 +
                      C102 * C118 + C91 * C127) *
                         C139300) *
                        C139442 * C139457 * C139561 -
                    ((C102 * C1775 + C91 * C1788 + C101 * C1776 + C90 * C1789 +
                      C100 * C1777 + C89 * C1790) *
                         C139300 +
                     (C102 * C1765 + C91 * C1773 + C101 * C1764 + C90 * C1772 +
                      C100 * C1767 + C89 * C1778) *
                         C5913) *
                        C139442 * C139457 * C139403) *
                       C139591 +
                   (((C100 * C4223 + C89 * C4227 + C101 * C4224 + C90 * C4228 +
                      C102 * C4225 + C91 * C4229) *
                         C5913 +
                     (C100 * C4230 + C89 * C4235 + C101 * C4231 + C90 * C4236 +
                      C102 * C4232 + C91 * C4237) *
                         C139300) *
                        C139442 * C139457 * C139403 -
                    ((C102 * C839 + C91 * C852 + C101 * C840 + C90 * C853 +
                      C100 * C841 + C89 * C854) *
                         C139300 +
                     (C102 * C829 + C91 * C837 + C101 * C828 + C90 * C836 +
                      C100 * C831 + C89 * C842) *
                         C5913) *
                        C139442 * C139457 * C139561) *
                       C139592 +
                   (((C100 * C832 + C89 * C844 + C101 * C833 + C90 * C845 +
                      C102 * C834 + C91 * C846) *
                         C5913 +
                     (C100 * C847 + C89 * C856 + C101 * C848 + C90 * C857 +
                      C102 * C849 + C91 * C858) *
                         C139300) *
                        C139442 * C139457 * C139561 -
                    ((C102 * C8755 + C91 * C8761 + C101 * C8756 + C90 * C8762 +
                      C100 * C8757 + C89 * C8763) *
                         C139300 +
                     (C102 * C8752 + C91 * C8758 + C101 * C8753 + C90 * C8759 +
                      C100 * C8754 + C89 * C8760) *
                         C5913) *
                        C139442 * C139457 * C139403) *
                       C7158)) /
                 (p * q * std::sqrt(p + q));
    d2eexy[6] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 +
                     C102 * C109 + C91 * C115) *
                        C7235 +
                    (C100 * C182 + C89 * C188 + C101 * C183 + C90 * C189 +
                     C102 * C184 + C91 * C190) *
                        C139591 -
                    (C102 * C829 + C91 * C837 + C101 * C828 + C90 * C836 +
                     C100 * C831 + C89 * C842) *
                        C7236 -
                    (C102 * C937 + C91 * C945 + C101 * C938 + C90 * C946 +
                     C100 * C939 + C89 * C947) *
                        C139592 +
                    (C100 * C832 + C89 * C844 + C101 * C833 + C90 * C845 +
                     C102 * C834 + C91 * C846) *
                        C7237 +
                    (C100 * C940 + C89 * C948 + C101 * C941 + C90 * C949 +
                     C102 * C942 + C91 * C950) *
                        C7158) *
                       C139442 * C139457 * C139300 * C139561 +
                   ((C100 * C4223 + C89 * C4227 + C101 * C4224 + C90 * C4228 +
                     C102 * C4225 + C91 * C4229) *
                        C7236 -
                    ((C102 * C1871 + C91 * C1879 + C101 * C1870 + C90 * C1878 +
                      C100 * C1873 + C89 * C1881) *
                         C139591 +
                     (C102 * C1765 + C91 * C1773 + C101 * C1764 + C90 * C1772 +
                      C100 * C1767 + C89 * C1778) *
                         C7235) +
                    (C100 * C4337 + C89 * C4341 + C101 * C4338 + C90 * C4342 +
                     C102 * C4339 + C91 * C4343) *
                        C139592 -
                    (C102 * C8752 + C91 * C8758 + C101 * C8753 + C90 * C8759 +
                     C100 * C8754 + C89 * C8760) *
                        C7237 -
                    (C102 * C8838 + C91 * C8841 + C101 * C8839 + C90 * C8842 +
                     C100 * C8840 + C89 * C8843) *
                        C7158) *
                       C139442 * C139457 * C139300 * C139403)) /
                 (p * q * std::sqrt(p + q));
    d2eexz[6] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 +
                     C102 * C109 + C91 * C115) *
                        C3607 +
                    (C100 * C245 + C89 * C251 + C101 * C246 + C90 * C252 +
                     C102 * C247 + C91 * C253) *
                        C139561 -
                    (C102 * C1765 + C91 * C1773 + C101 * C1764 + C90 * C1772 +
                     C100 * C1767 + C89 * C1778) *
                        C3608 -
                    (C102 * C1963 + C91 * C1971 + C101 * C1964 + C90 * C1972 +
                     C100 * C1965 + C89 * C1973) *
                        C139403) *
                       C139442 * C139457 * C139591 +
                   ((C100 * C4223 + C89 * C4227 + C101 * C4224 + C90 * C4228 +
                     C102 * C4225 + C91 * C4229) *
                        C3608 -
                    ((C102 * C1027 + C91 * C1035 + C101 * C1028 + C90 * C1036 +
                      C100 * C1029 + C89 * C1037) *
                         C139561 +
                     (C102 * C829 + C91 * C837 + C101 * C828 + C90 * C836 +
                      C100 * C831 + C89 * C842) *
                         C3607) +
                    (C100 * C4443 + C89 * C4447 + C101 * C4444 + C90 * C4448 +
                     C102 * C4445 + C91 * C4449) *
                        C139403) *
                       C139442 * C139457 * C139592 +
                   ((C100 * C832 + C89 * C844 + C101 * C833 + C90 * C845 +
                     C102 * C834 + C91 * C846) *
                        C3607 +
                    (C100 * C1030 + C89 * C1038 + C101 * C1031 + C90 * C1039 +
                     C102 * C1032 + C91 * C1040) *
                        C139561 -
                    (C102 * C8752 + C91 * C8758 + C101 * C8753 + C90 * C8759 +
                     C100 * C8754 + C89 * C8760) *
                        C3608 -
                    (C102 * C8918 + C91 * C8921 + C101 * C8919 + C90 * C8922 +
                     C100 * C8920 + C89 * C8923) *
                        C139403) *
                       C139442 * C139457 * C7158) *
                  C139300) /
                 (p * q * std::sqrt(p + q));
    d2eeyx[6] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((((C307 * C107 + C139442 * C308) * C5913 +
                      (C307 * C116 + C139442 * C314) * C139300) *
                         C139457 * C89 +
                     (C337 * C5913 + C338 * C139300) * C139457 * C90 +
                     (C339 * C5913 + C340 * C139300) * C139457 * C91) *
                        C139561 -
                    ((C2089 * C139300 + C2088 * C5913) * C139457 * C91 +
                     (C2087 * C139300 + C2086 * C5913) * C139457 * C90 +
                     ((C307 * C1777 + C139442 * C2061) * C139300 +
                      (C307 * C1767 + C139442 * C2054) * C5913) *
                         C139457 * C89) *
                        C139403) *
                       C139591 +
                   ((((C307 * C4223 + C139442 * C4549) * C5913 +
                      (C307 * C4230 + C139442 * C4553) * C139300) *
                         C139457 * C89 +
                     (C4566 * C5913 + C4567 * C139300) * C139457 * C90 +
                     (C4568 * C5913 + C4569 * C139300) * C139457 * C91) *
                        C139403 -
                    ((C1153 * C139300 + C1152 * C5913) * C139457 * C91 +
                     (C1151 * C139300 + C1150 * C5913) * C139457 * C90 +
                     ((C307 * C841 + C139442 * C1125) * C139300 +
                      (C307 * C831 + C139442 * C1118) * C5913) *
                         C139457 * C89) *
                        C139561) *
                       C139592 +
                   ((((C307 * C832 + C139442 * C1121) * C5913 +
                      (C307 * C847 + C139442 * C1129) * C139300) *
                         C139457 * C89 +
                     (C1154 * C5913 + C1155 * C139300) * C139457 * C90 +
                     (C1156 * C5913 + C1157 * C139300) * C139457 * C91) *
                        C139561 -
                    (((C307 * C8755 + C139442 * C9001) * C139300 +
                      (C307 * C8752 + C139442 * C8998) * C5913) *
                         C139457 * C91 +
                     ((C307 * C8756 + C139442 * C9002) * C139300 +
                      (C307 * C8753 + C139442 * C8999) * C5913) *
                         C139457 * C90 +
                     ((C307 * C8757 + C139442 * C9003) * C139300 +
                      (C307 * C8754 + C139442 * C9000) * C5913) *
                         C139457 * C89) *
                        C139403) *
                       C7158)) /
                 (p * q * std::sqrt(p + q));
    d2eeyy[6] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139442 * C308) * C7235 +
            (C307 * C182 + C139442 * C394) * C139591 -
            (C307 * C831 + C139442 * C1118) * C7236 -
            (C307 * C939 + C139442 * C1231) * C139592 +
            (C307 * C832 + C139442 * C1121) * C7237 +
            (C307 * C940 + C139442 * C1232) * C7158) *
               C139457 * C89 +
           (C7461 + C7462 - C7463 - C7464 + C7465 + C7466) * C139457 * C90 +
           (C7467 + C7468 - C7469 - C7470 + C7471 + C7472) * C139457 * C91) *
              C139300 * C139561 +
          (((C307 * C4223 + C139442 * C4549) * C7236 -
            ((C307 * C1873 + C139442 * C2170) * C139591 +
             (C307 * C1767 + C139442 * C2054) * C7235) +
            (C307 * C4337 + C139442 * C4667) * C139592 -
            (C307 * C8754 + C139442 * C9000) * C7237 -
            (C307 * C8840 + C139442 * C9078) * C7158) *
               C139457 * C89 +
           (C4566 * C7236 - (C2188 * C139591 + C2086 * C7235) +
            C4682 * C139592 - (C307 * C8753 + C139442 * C8999) * C7237 -
            (C307 * C8839 + C139442 * C9079) * C7158) *
               C139457 * C90 +
           (C4568 * C7236 - (C2189 * C139591 + C2088 * C7235) +
            C4683 * C139592 - (C307 * C8752 + C139442 * C8998) * C7237 -
            (C307 * C8838 + C139442 * C9080) * C7158) *
               C139457 * C91) *
              C139300 * C139403)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[6] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139442 * C308) * C3607 +
            (C307 * C245 + C139442 * C474) * C139561 -
            (C307 * C1767 + C139442 * C2054) * C3608 -
            (C307 * C1965 + C139442 * C2269) * C139403) *
               C139457 * C89 +
           (C3851 + C3852 - C3853 - C3854) * C139457 * C90 + C3869 * C91) *
              C139591 +
          (((C307 * C4223 + C139442 * C4549) * C3608 -
            ((C307 * C1029 + C139442 * C1339) * C139561 +
             (C307 * C831 + C139442 * C1118) * C3607) +
            (C307 * C4443 + C139442 * C4783) * C139403) *
               C139457 * C89 +
           (C4788 - (C4789 + C4790) + C4800) * C139457 * C90 +
           (C4793 - (C4794 + C4795) + C4801) * C139457 * C91) *
              C139592 +
          (((C307 * C832 + C139442 * C1121) * C3607 +
            (C307 * C1030 + C139442 * C1340) * C139561 -
            (C307 * C8754 + C139442 * C9000) * C3608 -
            (C307 * C8920 + C139442 * C9155) * C139403) *
               C139457 * C89 +
           (C1154 * C3607 + C1360 * C139561 -
            (C307 * C8753 + C139442 * C8999) * C3608 -
            (C307 * C8919 + C139442 * C9156) * C139403) *
               C139457 * C90 +
           (C1156 * C3607 + C1361 * C139561 -
            (C307 * C8752 + C139442 * C8998) * C3608 -
            (C307 * C8918 + C139442 * C9157) * C139403) *
               C139457 * C91) *
              C7158) *
         C139300) /
        (p * q * std::sqrt(p + q));
    d2eezx[6] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((((C554 * C107 + C139457 * C555) * C5913 +
                      (C554 * C116 + C139457 * C561) * C139300) *
                         C89 +
                     (C584 * C5913 + C585 * C139300) * C90 +
                     (C586 * C5913 + C587 * C139300) * C91) *
                        C139442 * C139561 -
                    ((C2411 * C139300 + C2410 * C5913) * C91 +
                     (C2409 * C139300 + C2408 * C5913) * C90 +
                     ((C554 * C1777 + C139457 * C2383) * C139300 +
                      (C554 * C1767 + C139457 * C2376) * C5913) *
                         C89) *
                        C139442 * C139403) *
                       C139591 +
                   ((((C554 * C4223 + C139457 * C4899) * C5913 +
                      (C554 * C4230 + C139457 * C4903) * C139300) *
                         C89 +
                     (C4916 * C5913 + C4917 * C139300) * C90 +
                     (C4918 * C5913 + C4919 * C139300) * C91) *
                        C139442 * C139403 -
                    ((C1475 * C139300 + C1474 * C5913) * C91 +
                     (C1473 * C139300 + C1472 * C5913) * C90 +
                     ((C554 * C841 + C139457 * C1447) * C139300 +
                      (C554 * C831 + C139457 * C1440) * C5913) *
                         C89) *
                        C139442 * C139561) *
                       C139592 +
                   ((((C554 * C832 + C139457 * C1443) * C5913 +
                      (C554 * C847 + C139457 * C1451) * C139300) *
                         C89 +
                     (C1476 * C5913 + C1477 * C139300) * C90 +
                     (C1478 * C5913 + C1479 * C139300) * C91) *
                        C139442 * C139561 -
                    (((C554 * C8755 + C139457 * C9235) * C139300 +
                      (C554 * C8752 + C139457 * C9232) * C5913) *
                         C91 +
                     ((C554 * C8756 + C139457 * C9236) * C139300 +
                      (C554 * C8753 + C139457 * C9233) * C5913) *
                         C90 +
                     ((C554 * C8757 + C139457 * C9237) * C139300 +
                      (C554 * C8754 + C139457 * C9234) * C5913) *
                         C89) *
                        C139442 * C139403) *
                       C7158)) /
                 (p * q * std::sqrt(p + q));
    d2eezy[6] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C139457 * C555) * C7235 +
            (C554 * C182 + C139457 * C641) * C139591 -
            (C554 * C831 + C139457 * C1440) * C7236 -
            (C554 * C939 + C139457 * C1553) * C139592 +
            (C554 * C832 + C139457 * C1443) * C7237 +
            (C554 * C940 + C139457 * C1554) * C7158) *
               C89 +
           (C7695 + C7696 - C7697 - C7698 + C7699 + C7700) * C90 +
           (C7701 + C7702 - C7703 - C7704 + C7705 + C7706) * C91) *
              C139442 * C139300 * C139561 +
          (((C554 * C4223 + C139457 * C4899) * C7236 -
            ((C554 * C1873 + C139457 * C2492) * C139591 +
             (C554 * C1767 + C139457 * C2376) * C7235) +
            (C554 * C4337 + C139457 * C5017) * C139592 -
            (C554 * C8754 + C139457 * C9234) * C7237 -
            (C554 * C8840 + C139457 * C9312) * C7158) *
               C89 +
           (C4916 * C7236 - (C2510 * C139591 + C2408 * C7235) +
            C5032 * C139592 - (C554 * C8753 + C139457 * C9233) * C7237 -
            (C554 * C8839 + C139457 * C9313) * C7158) *
               C90 +
           (C4918 * C7236 - (C2511 * C139591 + C2410 * C7235) +
            C5033 * C139592 - (C554 * C8752 + C139457 * C9232) * C7237 -
            (C554 * C8838 + C139457 * C9314) * C7158) *
               C91) *
              C139442 * C139300 * C139403)) /
        (p * q * std::sqrt(p + q));
    d2eezz[6] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C554 * C107 + C139457 * C555) * C3607 +
                     (C554 * C245 + C139457 * C719) * C139561 -
                     (C554 * C1767 + C139457 * C2376) * C3608 -
                     (C554 * C1965 + C139457 * C2591) * C139403) *
                        C89 +
                    (C4108 + C4109 - C4110 - C4111) * C90 + C4125 * C91) *
                       C139442 * C139591 +
                   (((C554 * C4223 + C139457 * C4899) * C3608 -
                     ((C554 * C1029 + C139457 * C1661) * C139561 +
                      (C554 * C831 + C139457 * C1440) * C3607) +
                     (C554 * C4443 + C139457 * C5133) * C139403) *
                        C89 +
                    (C5138 - (C5139 + C5140) + C5150) * C90 +
                    (C5143 - (C5144 + C5145) + C5151) * C91) *
                       C139442 * C139592 +
                   (((C554 * C832 + C139457 * C1443) * C3607 +
                     (C554 * C1030 + C139457 * C1662) * C139561 -
                     (C554 * C8754 + C139457 * C9234) * C3608 -
                     (C554 * C8920 + C139457 * C9389) * C139403) *
                        C89 +
                    (C1476 * C3607 + C1682 * C139561 -
                     (C554 * C8753 + C139457 * C9233) * C3608 -
                     (C554 * C8919 + C139457 * C9390) * C139403) *
                        C90 +
                    (C1478 * C3607 + C1683 * C139561 -
                     (C554 * C8752 + C139457 * C9232) * C3608 -
                     (C554 * C8918 + C139457 * C9391) * C139403) *
                        C91) *
                       C139442 * C7158) *
                  C139300) /
                 (p * q * std::sqrt(p + q));
    d2eexx[7] +=
        (-std::pow(Pi, 2.5) * (((C100 * C107 + C89 * C113 + C101 * C108 +
                                 C90 * C114 + C102 * C109 + C91 * C115) *
                                    C5913 +
                                (C100 * C116 + C89 * C125 + C101 * C117 +
                                 C90 * C126 + C102 * C118 + C91 * C127) *
                                    C139300) *
                                   C139442 * C139457 * C139339 * C5909 -
                               ((C102 * C839 + C91 * C852 + C101 * C840 +
                                 C90 * C853 + C100 * C841 + C89 * C854) *
                                    C139300 +
                                (C102 * C829 + C91 * C837 + C101 * C828 +
                                 C90 * C836 + C100 * C831 + C89 * C842) *
                                    C5913) *
                                   C139442 * C139457 * C139339 * C5910 +
                               ((C100 * C832 + C89 * C844 + C101 * C833 +
                                 C90 * C845 + C102 * C834 + C91 * C846) *
                                    C5913 +
                                (C100 * C847 + C89 * C856 + C101 * C848 +
                                 C90 * C857 + C102 * C849 + C91 * C858) *
                                    C139300) *
                                   C139442 * C139457 * C139339 * C5911 -
                               ((C102 * C5917 + C91 * C5923 + C101 * C5918 +
                                 C90 * C5924 + C100 * C5919 + C89 * C5925) *
                                    C139300 +
                                (C102 * C5914 + C91 * C5920 + C101 * C5915 +
                                 C90 * C5921 + C100 * C5916 + C89 * C5922) *
                                    C5913) *
                                   C139442 * C139457 * C139339 * C5912)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * (((C100 * C107 + C89 * C113 + C101 * C108 +
                                C90 * C114 + C102 * C109 + C91 * C115) *
                                   C5230 +
                               (C100 * C116 + C89 * C125 + C101 * C117 +
                                C90 * C126 + C102 * C118 + C91 * C127) *
                                   C5225 -
                               (C102 * C110 + C91 * C119 + C101 * C109 +
                                C90 * C115 + C100 * C108 + C89 * C114) *
                                   C5231 -
                               (C102 * C120 + C91 * C128 + C101 * C118 +
                                C90 * C127 + C100 * C117 + C89 * C126) *
                                   C5226 +
                               (C100 * C109 + C89 * C115 + C101 * C110 +
                                C90 * C119 + C102 * C111 + C91 * C121) *
                                   C5232 +
                               (C100 * C118 + C89 * C127 + C101 * C120 +
                                C90 * C128 + C102 * C122 + C91 * C129) *
                                   C5227) *
                                  C139442 * C139457 * C139339 * C5228 +
                              ((C100 * C828 + C89 * C836 + C101 * C829 +
                                C90 * C837 + C102 * C830 + C91 * C838) *
                                   C5231 -
                               ((C102 * C839 + C91 * C852 + C101 * C840 +
                                 C90 * C853 + C100 * C841 + C89 * C854) *
                                    C5225 +
                                (C102 * C829 + C91 * C837 + C101 * C828 +
                                 C90 * C836 + C100 * C831 + C89 * C842) *
                                    C5230) +
                               (C100 * C840 + C89 * C853 + C101 * C839 +
                                C90 * C852 + C102 * C843 + C91 * C855) *
                                   C5226 -
                               (C102 * C2705 + C91 * C2706 + C101 * C830 +
                                C90 * C838 + C100 * C829 + C89 * C837) *
                                   C5232 -
                               (C102 * C2707 + C91 * C2708 + C101 * C843 +
                                C90 * C855 + C100 * C839 + C89 * C852) *
                                   C5227) *
                                  C139442 * C139457 * C139339 * C139377)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 + C102 * C109 +
             C91 * C115) *
                C5913 +
            (C100 * C116 + C89 * C125 + C101 * C117 + C90 * C126 + C102 * C118 +
             C91 * C127) *
                C139300) *
               C139442 * C139457 * C1761 -
           ((C102 * C1775 + C91 * C1788 + C101 * C1776 + C90 * C1789 +
             C100 * C1777 + C89 * C1790) *
                C139300 +
            (C102 * C1765 + C91 * C1773 + C101 * C1764 + C90 * C1772 +
             C100 * C1767 + C89 * C1778) *
                C5913) *
               C139442 * C139457 * C1762 +
           ((C100 * C1768 + C89 * C1780 + C101 * C1769 + C90 * C1781 +
             C102 * C1770 + C91 * C1782) *
                C5913 +
            (C100 * C1783 + C89 * C1792 + C101 * C1784 + C90 * C1793 +
             C102 * C1785 + C91 * C1794) *
                C139300) *
               C139442 * C139457 * C1763) *
              C5228 +
          (((C100 * C4223 + C89 * C4227 + C101 * C4224 + C90 * C4228 +
             C102 * C4225 + C91 * C4229) *
                C5913 +
            (C100 * C4230 + C89 * C4235 + C101 * C4231 + C90 * C4236 +
             C102 * C4232 + C91 * C4237) *
                C139300) *
               C139442 * C139457 * C1762 -
           ((C102 * C839 + C91 * C852 + C101 * C840 + C90 * C853 + C100 * C841 +
             C89 * C854) *
                C139300 +
            (C102 * C829 + C91 * C837 + C101 * C828 + C90 * C836 + C100 * C831 +
             C89 * C842) *
                C5913) *
               C139442 * C139457 * C1761 -
           ((C102 * C6443 + C91 * C6449 + C101 * C6444 + C90 * C6450 +
             C100 * C6445 + C89 * C6451) *
                C139300 +
            (C102 * C6440 + C91 * C6446 + C101 * C6441 + C90 * C6447 +
             C100 * C6442 + C89 * C6448) *
                C5913) *
               C139442 * C139457 * C1763) *
              C139377)) /
            (p * q * std::sqrt(p + q));
    d2eexy[7] += (-std::pow(Pi, 2.5) *
                  ((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 +
                    C102 * C109 + C91 * C115) *
                       C5976 +
                   (C100 * C182 + C89 * C188 + C101 * C183 + C90 * C189 +
                    C102 * C184 + C91 * C190) *
                       C5909 -
                   (C102 * C829 + C91 * C837 + C101 * C828 + C90 * C836 +
                    C100 * C831 + C89 * C842) *
                       C5977 -
                   (C102 * C937 + C91 * C945 + C101 * C938 + C90 * C946 +
                    C100 * C939 + C89 * C947) *
                       C5910 +
                   (C100 * C832 + C89 * C844 + C101 * C833 + C90 * C845 +
                    C102 * C834 + C91 * C846) *
                       C5978 +
                   (C100 * C940 + C89 * C948 + C101 * C941 + C90 * C949 +
                    C102 * C942 + C91 * C950) *
                       C5911 -
                   (C102 * C5914 + C91 * C5920 + C101 * C5915 + C90 * C5921 +
                    C100 * C5916 + C89 * C5922) *
                       C5979 -
                   (C102 * C5980 + C91 * C5983 + C101 * C5981 + C90 * C5984 +
                    C100 * C5982 + C89 * C5985) *
                       C5912) *
                  C139442 * C139457 * C139300 * C139339) /
                     (p * q * std::sqrt(p + q)) -
                 (std::pow(Pi, 2.5) *
                  (((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 +
                     C102 * C109 + C91 * C115) *
                        C5307 +
                    (C100 * C182 + C89 * C188 + C101 * C183 + C90 * C189 +
                     C102 * C184 + C91 * C190) *
                        C5228 -
                    (C102 * C829 + C91 * C837 + C101 * C828 + C90 * C836 +
                     C100 * C831 + C89 * C842) *
                        C5308 -
                    (C102 * C937 + C91 * C945 + C101 * C938 + C90 * C946 +
                     C100 * C939 + C89 * C947) *
                        C139377) *
                       C139442 * C139457 * C5225 +
                   ((C100 * C828 + C89 * C836 + C101 * C829 + C90 * C837 +
                     C102 * C830 + C91 * C838) *
                        C5308 -
                    ((C102 * C185 + C91 * C191 + C101 * C184 + C90 * C190 +
                      C100 * C183 + C89 * C189) *
                         C5228 +
                     (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 +
                      C100 * C108 + C89 * C114) *
                         C5307) +
                    (C100 * C938 + C89 * C946 + C101 * C937 + C90 * C945 +
                     C102 * C943 + C91 * C951) *
                        C139377) *
                       C139442 * C139457 * C5226 +
                   ((C100 * C109 + C89 * C115 + C101 * C110 + C90 * C119 +
                     C102 * C111 + C91 * C121) *
                        C5307 +
                    (C100 * C184 + C89 * C190 + C101 * C185 + C90 * C191 +
                     C102 * C186 + C91 * C192) *
                        C5228 -
                    (C102 * C2705 + C91 * C2706 + C101 * C830 + C90 * C838 +
                     C100 * C829 + C89 * C837) *
                        C5308 -
                    (C102 * C2785 + C91 * C2786 + C101 * C943 + C90 * C951 +
                     C100 * C937 + C89 * C945) *
                        C139377) *
                       C139442 * C139457 * C5227) *
                  C139339) /
                     (p * q * std::sqrt(p + q)) +
                 (2 * std::pow(Pi, 2.5) *
                  (((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 +
                     C102 * C109 + C91 * C115) *
                        C5307 +
                    (C100 * C182 + C89 * C188 + C101 * C183 + C90 * C189 +
                     C102 * C184 + C91 * C190) *
                        C5228 -
                    (C102 * C829 + C91 * C837 + C101 * C828 + C90 * C836 +
                     C100 * C831 + C89 * C842) *
                        C5308 -
                    (C102 * C937 + C91 * C945 + C101 * C938 + C90 * C946 +
                     C100 * C939 + C89 * C947) *
                        C139377) *
                       C139442 * C139457 * C139300 * C1761 +
                   ((C100 * C4223 + C89 * C4227 + C101 * C4224 + C90 * C4228 +
                     C102 * C4225 + C91 * C4229) *
                        C5308 -
                    ((C102 * C1871 + C91 * C1879 + C101 * C1870 + C90 * C1878 +
                      C100 * C1873 + C89 * C1881) *
                         C5228 +
                     (C102 * C1765 + C91 * C1773 + C101 * C1764 + C90 * C1772 +
                      C100 * C1767 + C89 * C1778) *
                         C5307) +
                    (C100 * C4337 + C89 * C4341 + C101 * C4338 + C90 * C4342 +
                     C102 * C4339 + C91 * C4343) *
                        C139377) *
                       C139442 * C139457 * C139300 * C1762 +
                   ((C100 * C1768 + C89 * C1780 + C101 * C1769 + C90 * C1781 +
                     C102 * C1770 + C91 * C1782) *
                        C5307 +
                    (C100 * C1874 + C89 * C1882 + C101 * C1875 + C90 * C1883 +
                     C102 * C1876 + C91 * C1884) *
                        C5228 -
                    (C102 * C6440 + C91 * C6446 + C101 * C6441 + C90 * C6447 +
                     C100 * C6442 + C89 * C6448) *
                        C5308 -
                    (C102 * C6526 + C91 * C6529 + C101 * C6527 + C90 * C6530 +
                     C100 * C6528 + C89 * C6531) *
                        C139377) *
                       C139442 * C139457 * C139300 * C1763)) /
                     (p * q * std::sqrt(p + q));
    d2eexz[7] +=
        (-std::pow(Pi, 2.5) *
         (((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 + C102 * C109 +
            C91 * C115) *
               C244 +
           (C100 * C245 + C89 * C251 + C101 * C246 + C90 * C252 + C102 * C247 +
            C91 * C253) *
               C139339) *
              C139442 * C139457 * C5909 -
          ((C102 * C1027 + C91 * C1035 + C101 * C1028 + C90 * C1036 +
            C100 * C1029 + C89 * C1037) *
               C139339 +
           (C102 * C829 + C91 * C837 + C101 * C828 + C90 * C836 + C100 * C831 +
            C89 * C842) *
               C244) *
              C139442 * C139457 * C5910 +
          ((C100 * C832 + C89 * C844 + C101 * C833 + C90 * C845 + C102 * C834 +
            C91 * C846) *
               C244 +
           (C100 * C1030 + C89 * C1038 + C101 * C1031 + C90 * C1039 +
            C102 * C1032 + C91 * C1040) *
               C139339) *
              C139442 * C139457 * C5911 -
          ((C102 * C6036 + C91 * C6039 + C101 * C6037 + C90 * C6040 +
            C100 * C6038 + C89 * C6041) *
               C139339 +
           (C102 * C5914 + C91 * C5920 + C101 * C5915 + C90 * C5921 +
            C100 * C5916 + C89 * C5922) *
               C244) *
              C139442 * C139457 * C5912) *
         C139300) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * ((((C100 * C107 + C89 * C113 + C101 * C108 +
                                 C90 * C114 + C102 * C109 + C91 * C115) *
                                    C244 +
                                (C100 * C245 + C89 * C251 + C101 * C246 +
                                 C90 * C252 + C102 * C247 + C91 * C253) *
                                    C139339) *
                                   C139442 * C139457 * C5228 -
                               ((C102 * C1027 + C91 * C1035 + C101 * C1028 +
                                 C90 * C1036 + C100 * C1029 + C89 * C1037) *
                                    C139339 +
                                (C102 * C829 + C91 * C837 + C101 * C828 +
                                 C90 * C836 + C100 * C831 + C89 * C842) *
                                    C244) *
                                   C139442 * C139457 * C139377) *
                                  C5225 +
                              (((C100 * C828 + C89 * C836 + C101 * C829 +
                                 C90 * C837 + C102 * C830 + C91 * C838) *
                                    C244 +
                                (C100 * C1028 + C89 * C1036 + C101 * C1027 +
                                 C90 * C1035 + C102 * C1033 + C91 * C1041) *
                                    C139339) *
                                   C139442 * C139457 * C139377 -
                               ((C102 * C248 + C91 * C254 + C101 * C247 +
                                 C90 * C253 + C100 * C246 + C89 * C252) *
                                    C139339 +
                                (C102 * C110 + C91 * C119 + C101 * C109 +
                                 C90 * C115 + C100 * C108 + C89 * C114) *
                                    C244) *
                                   C139442 * C139457 * C5228) *
                                  C5226 +
                              (((C100 * C109 + C89 * C115 + C101 * C110 +
                                 C90 * C119 + C102 * C111 + C91 * C121) *
                                    C244 +
                                (C100 * C247 + C89 * C253 + C101 * C248 +
                                 C90 * C254 + C102 * C249 + C91 * C255) *
                                    C139339) *
                                   C139442 * C139457 * C5228 -
                               ((C102 * C2861 + C91 * C2862 + C101 * C1033 +
                                 C90 * C1041 + C100 * C1027 + C89 * C1035) *
                                    C139339 +
                                (C102 * C2705 + C91 * C2706 + C101 * C830 +
                                 C90 * C838 + C100 * C829 + C89 * C837) *
                                    C244) *
                                   C139442 * C139457 * C139377) *
                                  C5227)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 + C102 * C109 +
            C91 * C115) *
               C1960 +
           (C100 * C245 + C89 * C251 + C101 * C246 + C90 * C252 + C102 * C247 +
            C91 * C253) *
               C1761 -
           (C102 * C1765 + C91 * C1773 + C101 * C1764 + C90 * C1772 +
            C100 * C1767 + C89 * C1778) *
               C1961 -
           (C102 * C1963 + C91 * C1971 + C101 * C1964 + C90 * C1972 +
            C100 * C1965 + C89 * C1973) *
               C1762 +
           (C100 * C1768 + C89 * C1780 + C101 * C1769 + C90 * C1781 +
            C102 * C1770 + C91 * C1782) *
               C1962 +
           (C100 * C1966 + C89 * C1974 + C101 * C1967 + C90 * C1975 +
            C102 * C1968 + C91 * C1976) *
               C1763) *
              C139442 * C139457 * C5228 +
          ((C100 * C4223 + C89 * C4227 + C101 * C4224 + C90 * C4228 +
            C102 * C4225 + C91 * C4229) *
               C1961 -
           ((C102 * C1027 + C91 * C1035 + C101 * C1028 + C90 * C1036 +
             C100 * C1029 + C89 * C1037) *
                C1761 +
            (C102 * C829 + C91 * C837 + C101 * C828 + C90 * C836 + C100 * C831 +
             C89 * C842) *
                C1960) +
           (C100 * C4443 + C89 * C4447 + C101 * C4444 + C90 * C4448 +
            C102 * C4445 + C91 * C4449) *
               C1762 -
           (C102 * C6440 + C91 * C6446 + C101 * C6441 + C90 * C6447 +
            C100 * C6442 + C89 * C6448) *
               C1962 -
           (C102 * C6606 + C91 * C6609 + C101 * C6607 + C90 * C6610 +
            C100 * C6608 + C89 * C6611) *
               C1763) *
              C139442 * C139457 * C139377) *
         C139300) /
            (p * q * std::sqrt(p + q));
    d2eeyx[7] += (-std::pow(Pi, 2.5) *
                  ((((C307 * C107 + C139442 * C308) * C5913 +
                     (C307 * C116 + C139442 * C314) * C139300) *
                        C139457 * C89 +
                    (C337 * C5913 + C338 * C139300) * C139457 * C90 +
                    (C339 * C5913 + C340 * C139300) * C139457 * C91) *
                       C139339 * C5909 -
                   ((C1153 * C139300 + C1152 * C5913) * C139457 * C91 +
                    (C1151 * C139300 + C1150 * C5913) * C139457 * C90 +
                    ((C307 * C841 + C139442 * C1125) * C139300 +
                     (C307 * C831 + C139442 * C1118) * C5913) *
                        C139457 * C89) *
                       C139339 * C5910 +
                   (((C307 * C832 + C139442 * C1121) * C5913 +
                     (C307 * C847 + C139442 * C1129) * C139300) *
                        C139457 * C89 +
                    (C1154 * C5913 + C1155 * C139300) * C139457 * C90 +
                    (C1156 * C5913 + C1157 * C139300) * C139457 * C91) *
                       C139339 * C5911 -
                   (((C307 * C5917 + C139442 * C6095) * C139300 +
                     (C307 * C5914 + C139442 * C6092) * C5913) *
                        C139457 * C91 +
                    ((C307 * C5918 + C139442 * C6096) * C139300 +
                     (C307 * C5915 + C139442 * C6093) * C5913) *
                        C139457 * C90 +
                    ((C307 * C5919 + C139442 * C6097) * C139300 +
                     (C307 * C5916 + C139442 * C6094) * C5913) *
                        C139457 * C89) *
                       C139339 * C5912)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::pow(Pi, 2.5) *
                  ((((C307 * C107 + C139442 * C308) * C5230 +
                     (C307 * C116 + C139442 * C314) * C5225 - C337 * C5231 -
                     C338 * C5226 + C339 * C5232 + C340 * C5227) *
                        C139457 * C89 +
                    (C337 * C5230 + C338 * C5225 - C339 * C5231 - C340 * C5226 +
                     C341 * C5232 + C342 * C5227) *
                        C139457 * C90 +
                    (C339 * C5230 + C340 * C5225 - C341 * C5231 - C342 * C5226 +
                     C343 * C5232 + C344 * C5227) *
                        C139457 * C91) *
                       C139339 * C5228 +
                   ((C1150 * C5231 -
                     ((C307 * C841 + C139442 * C1125) * C5225 +
                      (C307 * C831 + C139442 * C1118) * C5230) +
                     C1151 * C5226 - C1152 * C5232 - C1153 * C5227) *
                        C139457 * C89 +
                    (C1152 * C5231 - (C1151 * C5225 + C1150 * C5230) +
                     C1153 * C5226 - C2944 * C5232 - C2945 * C5227) *
                        C139457 * C90 +
                    (C2944 * C5231 - (C1153 * C5225 + C1152 * C5230) +
                     C2945 * C5226 - (C307 * C2705 + C139442 * C2937) * C5232 -
                     (C307 * C2707 + C139442 * C2938) * C5227) *
                        C139457 * C91) *
                       C139339 * C139377)) /
                     (p * q * std::sqrt(p + q)) +
                 (2 * std::pow(Pi, 2.5) *
                  (((((C307 * C107 + C139442 * C308) * C5913 +
                      (C307 * C116 + C139442 * C314) * C139300) *
                         C139457 * C89 +
                     (C337 * C5913 + C338 * C139300) * C139457 * C90 +
                     (C339 * C5913 + C340 * C139300) * C139457 * C91) *
                        C1761 -
                    ((C2089 * C139300 + C2088 * C5913) * C139457 * C91 +
                     (C2087 * C139300 + C2086 * C5913) * C139457 * C90 +
                     ((C307 * C1777 + C139442 * C2061) * C139300 +
                      (C307 * C1767 + C139442 * C2054) * C5913) *
                         C139457 * C89) *
                        C1762 +
                    (((C307 * C1768 + C139442 * C2057) * C5913 +
                      (C307 * C1783 + C139442 * C2065) * C139300) *
                         C139457 * C89 +
                     (C2090 * C5913 + C2091 * C139300) * C139457 * C90 +
                     (C2092 * C5913 + C2093 * C139300) * C139457 * C91) *
                        C1763) *
                       C5228 +
                   ((((C307 * C4223 + C139442 * C4549) * C5913 +
                      (C307 * C4230 + C139442 * C4553) * C139300) *
                         C139457 * C89 +
                     (C4566 * C5913 + C4567 * C139300) * C139457 * C90 +
                     (C4568 * C5913 + C4569 * C139300) * C139457 * C91) *
                        C1762 -
                    ((C1153 * C139300 + C1152 * C5913) * C139457 * C91 +
                     (C1151 * C139300 + C1150 * C5913) * C139457 * C90 +
                     ((C307 * C841 + C139442 * C1125) * C139300 +
                      (C307 * C831 + C139442 * C1118) * C5913) *
                         C139457 * C89) *
                        C1761 -
                    (((C307 * C6443 + C139442 * C6689) * C139300 +
                      (C307 * C6440 + C139442 * C6686) * C5913) *
                         C139457 * C91 +
                     ((C307 * C6444 + C139442 * C6690) * C139300 +
                      (C307 * C6441 + C139442 * C6687) * C5913) *
                         C139457 * C90 +
                     ((C307 * C6445 + C139442 * C6691) * C139300 +
                      (C307 * C6442 + C139442 * C6688) * C5913) *
                         C139457 * C89) *
                        C1763) *
                       C139377)) /
                     (p * q * std::sqrt(p + q));
    d2eeyy[7] +=
        (-std::pow(Pi, 2.5) *
         (((C307 * C107 + C139442 * C308) * C5976 +
           (C307 * C182 + C139442 * C394) * C5909 -
           (C307 * C831 + C139442 * C1118) * C5977 -
           (C307 * C939 + C139442 * C1231) * C5910 +
           (C307 * C832 + C139442 * C1121) * C5978 +
           (C307 * C940 + C139442 * C1232) * C5911 -
           (C307 * C5916 + C139442 * C6094) * C5979 -
           (C307 * C5982 + C139442 * C6148) * C5912) *
              C139457 * C89 +
          (C337 * C5976 + C413 * C5909 - C1150 * C5977 - C1256 * C5910 +
           C1154 * C5978 + C1257 * C5911 -
           (C307 * C5915 + C139442 * C6093) * C5979 -
           (C307 * C5981 + C139442 * C6149) * C5912) *
              C139457 * C90 +
          (C339 * C5976 + C414 * C5909 - C1152 * C5977 - C1258 * C5910 +
           C1156 * C5978 + C1259 * C5911 -
           (C307 * C5914 + C139442 * C6092) * C5979 -
           (C307 * C5980 + C139442 * C6150) * C5912) *
              C139457 * C91) *
         C139300 * C139339) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139442 * C308) * C5307 +
            (C307 * C182 + C139442 * C394) * C5228 -
            (C307 * C831 + C139442 * C1118) * C5308 -
            (C307 * C939 + C139442 * C1231) * C139377) *
               C139457 * C89 +
           (C5532 + C5533 - C5534 - C5535) * C139457 * C90 + C5547 * C91) *
              C5225 +
          ((C5534 - (C5533 + C5532) + C5535) * C139457 * C89 +
           (C5538 - (C5537 + C5536) + C5539) * C139457 * C90 +
           (C5540 - (C5541 + C5542) + C5543) * C139457 * C91) *
              C5226 +
          (C5547 * C89 + (C5542 + C5541 - C5540 - C5543) * C139457 * C90 +
           (C343 * C5307 + C416 * C5228 -
            (C307 * C2705 + C139442 * C2937) * C5308 -
            (C307 * C2785 + C139442 * C3019) * C139377) *
               C139457 * C91) *
              C5227) *
         C139339) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139442 * C308) * C5307 +
            (C307 * C182 + C139442 * C394) * C5228 -
            (C307 * C831 + C139442 * C1118) * C5308 -
            (C307 * C939 + C139442 * C1231) * C139377) *
               C139457 * C89 +
           (C5532 + C5533 - C5534 - C5535) * C139457 * C90 + C5547 * C91) *
              C139300 * C1761 +
          (((C307 * C4223 + C139442 * C4549) * C5308 -
            ((C307 * C1873 + C139442 * C2170) * C5228 +
             (C307 * C1767 + C139442 * C2054) * C5307) +
            (C307 * C4337 + C139442 * C4667) * C139377) *
               C139457 * C89 +
           (C4566 * C5308 - (C2188 * C5228 + C2086 * C5307) + C4682 * C139377) *
               C139457 * C90 +
           (C4568 * C5308 - (C2189 * C5228 + C2088 * C5307) + C4683 * C139377) *
               C139457 * C91) *
              C139300 * C1762 +
          (((C307 * C1768 + C139442 * C2057) * C5307 +
            (C307 * C1874 + C139442 * C2171) * C5228 -
            (C307 * C6442 + C139442 * C6688) * C5308 -
            (C307 * C6528 + C139442 * C6766) * C139377) *
               C139457 * C89 +
           (C2090 * C5307 + C2190 * C5228 -
            (C307 * C6441 + C139442 * C6687) * C5308 -
            (C307 * C6527 + C139442 * C6767) * C139377) *
               C139457 * C90 +
           (C2092 * C5307 + C2191 * C5228 -
            (C307 * C6440 + C139442 * C6686) * C5308 -
            (C307 * C6526 + C139442 * C6768) * C139377) *
               C139457 * C91) *
              C139300 * C1763)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[7] +=
        (-std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139442 * C308) * C244 +
            (C307 * C245 + C139442 * C474) * C139339) *
               C139457 * C89 +
           (C481 + C497) * C139457 * C90 + C503 * C91) *
              C5909 -
          (C3119 * C91 + (C1363 + C1351) * C139457 * C90 +
           ((C307 * C1029 + C139442 * C1339) * C139339 +
            (C307 * C831 + C139442 * C1118) * C244) *
               C139457 * C89) *
              C5910 +
          (((C307 * C832 + C139442 * C1121) * C244 +
            (C307 * C1030 + C139442 * C1340) * C139339) *
               C139457 * C89 +
           (C1352 + C1364) * C139457 * C90 + (C1355 + C1365) * C139457 * C91) *
              C5911 -
          (((C307 * C6036 + C139442 * C6201) * C139339 +
            (C307 * C5914 + C139442 * C6092) * C244) *
               C139457 * C91 +
           ((C307 * C6037 + C139442 * C6202) * C139339 +
            (C307 * C5915 + C139442 * C6093) * C244) *
               C139457 * C90 +
           ((C307 * C6038 + C139442 * C6203) * C139339 +
            (C307 * C5916 + C139442 * C6094) * C244) *
               C139457 * C89) *
              C5912) *
         C139300) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139442 * C308) * C244 +
             (C307 * C245 + C139442 * C474) * C139339) *
                C139457 * C89 +
            (C481 + C497) * C139457 * C90 + C503 * C91) *
               C5228 -
           (C3119 * C91 + (C1363 + C1351) * C139457 * C90 +
            ((C307 * C1029 + C139442 * C1339) * C139339 +
             (C307 * C831 + C139442 * C1118) * C244) *
                C139457 * C89) *
               C139377) *
              C5225 +
          (((C1351 + C1363) * C139457 * C89 + (C1348 + C1362) * C139457 * C90 +
            (C3116 + C3121) * C139457 * C91) *
               C139377 -
           (C504 * C91 + (C498 + C484) * C139457 * C90 +
            (C497 + C481) * C139457 * C89) *
               C5228) *
              C5226 +
          ((C503 * C89 + (C489 + C499) * C139457 * C90 +
            (C490 + C500) * C139457 * C91) *
               C5228 -
           (((C307 * C2861 + C139442 * C3113) * C139339 +
             (C307 * C2705 + C139442 * C2937) * C244) *
                C139457 * C91 +
            (C3121 + C3116) * C139457 * C90 + C3119 * C89) *
               C139377) *
              C5227)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139442 * C308) * C1960 +
            (C307 * C245 + C139442 * C474) * C1761 -
            (C307 * C1767 + C139442 * C2054) * C1961 -
            (C307 * C1965 + C139442 * C2269) * C1762 +
            (C307 * C1768 + C139442 * C2057) * C1962 +
            (C307 * C1966 + C139442 * C2270) * C1763) *
               C139457 * C89 +
           (C2278 + C2279 - C2280 - C2298 + C2283 + C2299) * C139457 * C90 +
           (C2286 + C2287 - C2288 - C2300 + C2291 + C2301) * C139457 * C91) *
              C5228 +
          (((C307 * C4223 + C139442 * C4549) * C1961 -
            ((C307 * C1029 + C139442 * C1339) * C1761 +
             (C307 * C831 + C139442 * C1118) * C1960) +
            (C307 * C4443 + C139442 * C4783) * C1762 -
            (C307 * C6442 + C139442 * C6688) * C1962 -
            (C307 * C6608 + C139442 * C6843) * C1763) *
               C139457 * C89 +
           (C4566 * C1961 - (C1359 * C1761 + C1150 * C1960) + C4798 * C1762 -
            (C307 * C6441 + C139442 * C6687) * C1962 -
            (C307 * C6607 + C139442 * C6844) * C1763) *
               C139457 * C90 +
           (C4568 * C1961 - (C1358 * C1761 + C1152 * C1960) + C4799 * C1762 -
            (C307 * C6440 + C139442 * C6686) * C1962 -
            (C307 * C6606 + C139442 * C6845) * C1763) *
               C139457 * C91) *
              C139377) *
         C139300) /
            (p * q * std::sqrt(p + q));
    d2eezx[7] +=
        (-std::pow(Pi, 2.5) * ((((C554 * C107 + C139457 * C555) * C5913 +
                                 (C554 * C116 + C139457 * C561) * C139300) *
                                    C89 +
                                (C584 * C5913 + C585 * C139300) * C90 +
                                (C586 * C5913 + C587 * C139300) * C91) *
                                   C139442 * C139339 * C5909 -
                               ((C1475 * C139300 + C1474 * C5913) * C91 +
                                (C1473 * C139300 + C1472 * C5913) * C90 +
                                ((C554 * C841 + C139457 * C1447) * C139300 +
                                 (C554 * C831 + C139457 * C1440) * C5913) *
                                    C89) *
                                   C139442 * C139339 * C5910 +
                               (((C554 * C832 + C139457 * C1443) * C5913 +
                                 (C554 * C847 + C139457 * C1451) * C139300) *
                                    C89 +
                                (C1476 * C5913 + C1477 * C139300) * C90 +
                                (C1478 * C5913 + C1479 * C139300) * C91) *
                                   C139442 * C139339 * C5911 -
                               (((C554 * C5917 + C139457 * C6257) * C139300 +
                                 (C554 * C5914 + C139457 * C6254) * C5913) *
                                    C91 +
                                ((C554 * C5918 + C139457 * C6258) * C139300 +
                                 (C554 * C5915 + C139457 * C6255) * C5913) *
                                    C90 +
                                ((C554 * C5919 + C139457 * C6259) * C139300 +
                                 (C554 * C5916 + C139457 * C6256) * C5913) *
                                    C89) *
                                   C139442 * C139339 * C5912)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C554 * C107 + C139457 * C555) * C5230 +
            (C554 * C116 + C139457 * C561) * C5225 - C584 * C5231 -
            C585 * C5226 + C586 * C5232 + C587 * C5227) *
               C89 +
           (C584 * C5230 + C585 * C5225 - C586 * C5231 - C587 * C5226 +
            C588 * C5232 + C589 * C5227) *
               C90 +
           (C586 * C5230 + C587 * C5225 - C588 * C5231 - C589 * C5226 +
            C590 * C5232 + C591 * C5227) *
               C91) *
              C139442 * C139339 * C5228 +
          ((C1472 * C5231 -
            ((C554 * C841 + C139457 * C1447) * C5225 +
             (C554 * C831 + C139457 * C1440) * C5230) +
            C1473 * C5226 - C1474 * C5232 - C1475 * C5227) *
               C89 +
           (C1474 * C5231 - (C1473 * C5225 + C1472 * C5230) + C1475 * C5226 -
            C3202 * C5232 - C3203 * C5227) *
               C90 +
           (C3202 * C5231 - (C1475 * C5225 + C1474 * C5230) + C3203 * C5226 -
            (C554 * C2705 + C139457 * C3195) * C5232 -
            (C554 * C2707 + C139457 * C3196) * C5227) *
               C91) *
              C139442 * C139339 * C139377)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139457 * C555) * C5913 +
             (C554 * C116 + C139457 * C561) * C139300) *
                C89 +
            (C584 * C5913 + C585 * C139300) * C90 +
            (C586 * C5913 + C587 * C139300) * C91) *
               C139442 * C1761 -
           ((C2411 * C139300 + C2410 * C5913) * C91 +
            (C2409 * C139300 + C2408 * C5913) * C90 +
            ((C554 * C1777 + C139457 * C2383) * C139300 +
             (C554 * C1767 + C139457 * C2376) * C5913) *
                C89) *
               C139442 * C1762 +
           (((C554 * C1768 + C139457 * C2379) * C5913 +
             (C554 * C1783 + C139457 * C2387) * C139300) *
                C89 +
            (C2412 * C5913 + C2413 * C139300) * C90 +
            (C2414 * C5913 + C2415 * C139300) * C91) *
               C139442 * C1763) *
              C5228 +
          ((((C554 * C4223 + C139457 * C4899) * C5913 +
             (C554 * C4230 + C139457 * C4903) * C139300) *
                C89 +
            (C4916 * C5913 + C4917 * C139300) * C90 +
            (C4918 * C5913 + C4919 * C139300) * C91) *
               C139442 * C1762 -
           ((C1475 * C139300 + C1474 * C5913) * C91 +
            (C1473 * C139300 + C1472 * C5913) * C90 +
            ((C554 * C841 + C139457 * C1447) * C139300 +
             (C554 * C831 + C139457 * C1440) * C5913) *
                C89) *
               C139442 * C1761 -
           (((C554 * C6443 + C139457 * C6923) * C139300 +
             (C554 * C6440 + C139457 * C6920) * C5913) *
                C91 +
            ((C554 * C6444 + C139457 * C6924) * C139300 +
             (C554 * C6441 + C139457 * C6921) * C5913) *
                C90 +
            ((C554 * C6445 + C139457 * C6925) * C139300 +
             (C554 * C6442 + C139457 * C6922) * C5913) *
                C89) *
               C139442 * C1763) *
              C139377)) /
            (p * q * std::sqrt(p + q));
    d2eezy[7] +=
        (-std::pow(Pi, 2.5) *
         (((C554 * C107 + C139457 * C555) * C5976 +
           (C554 * C182 + C139457 * C641) * C5909 -
           (C554 * C831 + C139457 * C1440) * C5977 -
           (C554 * C939 + C139457 * C1553) * C5910 +
           (C554 * C832 + C139457 * C1443) * C5978 +
           (C554 * C940 + C139457 * C1554) * C5911 -
           (C554 * C5916 + C139457 * C6256) * C5979 -
           (C554 * C5982 + C139457 * C6310) * C5912) *
              C89 +
          (C584 * C5976 + C660 * C5909 - C1472 * C5977 - C1578 * C5910 +
           C1476 * C5978 + C1579 * C5911 -
           (C554 * C5915 + C139457 * C6255) * C5979 -
           (C554 * C5981 + C139457 * C6311) * C5912) *
              C90 +
          (C586 * C5976 + C661 * C5909 - C1474 * C5977 - C1580 * C5910 +
           C1478 * C5978 + C1581 * C5911 -
           (C554 * C5914 + C139457 * C6254) * C5979 -
           (C554 * C5980 + C139457 * C6312) * C5912) *
              C91) *
         C139442 * C139300 * C139339) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C554 * C107 + C139457 * C555) * C5307 +
            (C554 * C182 + C139457 * C641) * C5228 -
            (C554 * C831 + C139457 * C1440) * C5308 -
            (C554 * C939 + C139457 * C1553) * C139377) *
               C89 +
           (C5770 + C5771 - C5772 - C5773) * C90 + C5784 * C91) *
              C139442 * C5225 +
          ((C5772 - (C5771 + C5770) + C5773) * C89 +
           (C5776 - (C5775 + C5774) + C5777) * C90 +
           (C5778 - (C5779 + C5780) + C5781) * C91) *
              C139442 * C5226 +
          (C5784 * C89 + (C5780 + C5779 - C5778 - C5781) * C90 +
           (C590 * C5307 + C663 * C5228 -
            (C554 * C2705 + C139457 * C3195) * C5308 -
            (C554 * C2785 + C139457 * C3277) * C139377) *
               C91) *
              C139442 * C5227) *
         C139339) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C139457 * C555) * C5307 +
            (C554 * C182 + C139457 * C641) * C5228 -
            (C554 * C831 + C139457 * C1440) * C5308 -
            (C554 * C939 + C139457 * C1553) * C139377) *
               C89 +
           (C5770 + C5771 - C5772 - C5773) * C90 + C5784 * C91) *
              C139442 * C139300 * C1761 +
          (((C554 * C4223 + C139457 * C4899) * C5308 -
            ((C554 * C1873 + C139457 * C2492) * C5228 +
             (C554 * C1767 + C139457 * C2376) * C5307) +
            (C554 * C4337 + C139457 * C5017) * C139377) *
               C89 +
           (C4916 * C5308 - (C2510 * C5228 + C2408 * C5307) + C5032 * C139377) *
               C90 +
           (C4918 * C5308 - (C2511 * C5228 + C2410 * C5307) + C5033 * C139377) *
               C91) *
              C139442 * C139300 * C1762 +
          (((C554 * C1768 + C139457 * C2379) * C5307 +
            (C554 * C1874 + C139457 * C2493) * C5228 -
            (C554 * C6442 + C139457 * C6922) * C5308 -
            (C554 * C6528 + C139457 * C7000) * C139377) *
               C89 +
           (C2412 * C5307 + C2512 * C5228 -
            (C554 * C6441 + C139457 * C6921) * C5308 -
            (C554 * C6527 + C139457 * C7001) * C139377) *
               C90 +
           (C2414 * C5307 + C2513 * C5228 -
            (C554 * C6440 + C139457 * C6920) * C5308 -
            (C554 * C6526 + C139457 * C7002) * C139377) *
               C91) *
              C139442 * C139300 * C1763)) /
            (p * q * std::sqrt(p + q));
    d2eezz[7] += (-std::pow(Pi, 2.5) *
                  ((((C554 * C107 + C139457 * C555) * C244 +
                     (C554 * C245 + C139457 * C719) * C139339) *
                        C89 +
                    (C726 + C742) * C90 + C746 * C91) *
                       C139442 * C5909 -
                   (C3372 * C91 + (C1685 + C1673) * C90 +
                    ((C554 * C1029 + C139457 * C1661) * C139339 +
                     (C554 * C831 + C139457 * C1440) * C244) *
                        C89) *
                       C139442 * C5910 +
                   (((C554 * C832 + C139457 * C1443) * C244 +
                     (C554 * C1030 + C139457 * C1662) * C139339) *
                        C89 +
                    (C1674 + C1686) * C90 + (C1677 + C1687) * C91) *
                       C139442 * C5911 -
                   (((C554 * C6036 + C139457 * C6363) * C139339 +
                     (C554 * C5914 + C139457 * C6254) * C244) *
                        C91 +
                    ((C554 * C6037 + C139457 * C6364) * C139339 +
                     (C554 * C5915 + C139457 * C6255) * C244) *
                        C90 +
                    ((C554 * C6038 + C139457 * C6365) * C139339 +
                     (C554 * C5916 + C139457 * C6256) * C244) *
                        C89) *
                       C139442 * C5912) *
                  C139300) /
                     (p * q * std::sqrt(p + q)) -
                 (std::pow(Pi, 2.5) *
                  (((((C554 * C107 + C139457 * C555) * C244 +
                      (C554 * C245 + C139457 * C719) * C139339) *
                         C89 +
                     (C726 + C742) * C90 + C746 * C91) *
                        C139442 * C5228 -
                    (C3372 * C91 + (C1685 + C1673) * C90 +
                     ((C554 * C1029 + C139457 * C1661) * C139339 +
                      (C554 * C831 + C139457 * C1440) * C244) *
                         C89) *
                        C139442 * C139377) *
                       C5225 +
                   (((C1673 + C1685) * C89 + (C1670 + C1684) * C90 +
                     (C3373 + C3377) * C91) *
                        C139442 * C139377 -
                    (C747 * C91 + (C743 + C729) * C90 + (C742 + C726) * C89) *
                        C139442 * C5228) *
                       C5226 +
                   ((C746 * C89 + (C734 + C744) * C90 + (C735 + C745) * C91) *
                        C139442 * C5228 -
                    (((C554 * C2861 + C139457 * C3370) * C139339 +
                      (C554 * C2705 + C139457 * C3195) * C244) *
                         C91 +
                     (C3377 + C3373) * C90 + C3372 * C89) *
                        C139442 * C139377) *
                       C5227)) /
                     (p * q * std::sqrt(p + q)) +
                 (2 * std::pow(Pi, 2.5) *
                  ((((C554 * C107 + C139457 * C555) * C1960 +
                     (C554 * C245 + C139457 * C719) * C1761 -
                     (C554 * C1767 + C139457 * C2376) * C1961 -
                     (C554 * C1965 + C139457 * C2591) * C1762 +
                     (C554 * C1768 + C139457 * C2379) * C1962 +
                     (C554 * C1966 + C139457 * C2592) * C1763) *
                        C89 +
                    (C2600 + C2601 - C2602 - C2620 + C2605 + C2621) * C90 +
                    (C2608 + C2609 - C2610 - C2622 + C2613 + C2623) * C91) *
                       C139442 * C5228 +
                   (((C554 * C4223 + C139457 * C4899) * C1961 -
                     ((C554 * C1029 + C139457 * C1661) * C1761 +
                      (C554 * C831 + C139457 * C1440) * C1960) +
                     (C554 * C4443 + C139457 * C5133) * C1762 -
                     (C554 * C6442 + C139457 * C6922) * C1962 -
                     (C554 * C6608 + C139457 * C7077) * C1763) *
                        C89 +
                    (C4916 * C1961 - (C1681 * C1761 + C1472 * C1960) +
                     C5148 * C1762 - (C554 * C6441 + C139457 * C6921) * C1962 -
                     (C554 * C6607 + C139457 * C7078) * C1763) *
                        C90 +
                    (C4918 * C1961 - (C1680 * C1761 + C1474 * C1960) +
                     C5149 * C1762 - (C554 * C6440 + C139457 * C6920) * C1962 -
                     (C554 * C6606 + C139457 * C7079) * C1763) *
                        C91) *
                       C139442 * C139377) *
                  C139300) /
                     (p * q * std::sqrt(p + q));
    d2eexx[8] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 +
                      C102 * C109 + C91 * C115) *
                         C137108 +
                     (C100 * C116 + C89 * C125 + C101 * C117 + C90 * C126 +
                      C102 * C118 + C91 * C127) *
                         C139552 -
                     (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 +
                      C100 * C108 + C89 * C114) *
                         C137101 -
                     (C102 * C120 + C91 * C128 + C101 * C118 + C90 * C127 +
                      C100 * C117 + C89 * C126) *
                         C139305) *
                        C139442 * C139457 * C139561 +
                    ((C100 * C1764 + C89 * C1772 + C101 * C1765 + C90 * C1773 +
                      C102 * C1766 + C91 * C1774) *
                         C137101 -
                     ((C102 * C1775 + C91 * C1788 + C101 * C1776 + C90 * C1789 +
                       C100 * C1777 + C89 * C1790) *
                          C139552 +
                      (C102 * C1765 + C91 * C1773 + C101 * C1764 + C90 * C1772 +
                       C100 * C1767 + C89 * C1778) *
                          C137108) +
                     (C100 * C1776 + C89 * C1789 + C101 * C1775 + C90 * C1788 +
                      C102 * C1779 + C91 * C1791) *
                         C139305) *
                        C139442 * C139457 * C139403) *
                       C5228 +
                   (((C100 * C828 + C89 * C836 + C101 * C829 + C90 * C837 +
                      C102 * C830 + C91 * C838) *
                         C137101 -
                     ((C102 * C839 + C91 * C852 + C101 * C840 + C90 * C853 +
                       C100 * C841 + C89 * C854) *
                          C139552 +
                      (C102 * C829 + C91 * C837 + C101 * C828 + C90 * C836 +
                       C100 * C831 + C89 * C842) *
                          C137108) +
                     (C100 * C840 + C89 * C853 + C101 * C839 + C90 * C852 +
                      C102 * C843 + C91 * C855) *
                         C139305) *
                        C139442 * C139457 * C139561 +
                    ((C100 * C4223 + C89 * C4227 + C101 * C4224 + C90 * C4228 +
                      C102 * C4225 + C91 * C4229) *
                         C137108 +
                     (C100 * C4230 + C89 * C4235 + C101 * C4231 + C90 * C4236 +
                      C102 * C4232 + C91 * C4237) *
                         C139552 -
                     (C102 * C4226 + C91 * C4233 + C101 * C4225 + C90 * C4229 +
                      C100 * C4224 + C89 * C4228) *
                         C137101 -
                     (C102 * C4234 + C91 * C4238 + C101 * C4232 + C90 * C4237 +
                      C100 * C4231 + C89 * C4236) *
                         C139305) *
                        C139442 * C139457 * C139403) *
                       C139377)) /
                 (p * q * std::sqrt(p + q));
    d2eexy[8] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 +
                      C102 * C109 + C91 * C115) *
                         C5307 +
                     (C100 * C182 + C89 * C188 + C101 * C183 + C90 * C189 +
                      C102 * C184 + C91 * C190) *
                         C5228 -
                     (C102 * C829 + C91 * C837 + C101 * C828 + C90 * C836 +
                      C100 * C831 + C89 * C842) *
                         C5308 -
                     (C102 * C937 + C91 * C945 + C101 * C938 + C90 * C946 +
                      C100 * C939 + C89 * C947) *
                         C139377) *
                        C139442 * C139457 * C139552 +
                    ((C100 * C828 + C89 * C836 + C101 * C829 + C90 * C837 +
                      C102 * C830 + C91 * C838) *
                         C5308 -
                     ((C102 * C185 + C91 * C191 + C101 * C184 + C90 * C190 +
                       C100 * C183 + C89 * C189) *
                          C5228 +
                      (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 +
                       C100 * C108 + C89 * C114) *
                          C5307) +
                     (C100 * C938 + C89 * C946 + C101 * C937 + C90 * C945 +
                      C102 * C943 + C91 * C951) *
                         C139377) *
                        C139442 * C139457 * C139305) *
                       C139561 +
                   (((C100 * C4223 + C89 * C4227 + C101 * C4224 + C90 * C4228 +
                      C102 * C4225 + C91 * C4229) *
                         C5308 -
                     ((C102 * C1871 + C91 * C1879 + C101 * C1870 + C90 * C1878 +
                       C100 * C1873 + C89 * C1881) *
                          C5228 +
                      (C102 * C1765 + C91 * C1773 + C101 * C1764 + C90 * C1772 +
                       C100 * C1767 + C89 * C1778) *
                          C5307) +
                     (C100 * C4337 + C89 * C4341 + C101 * C4338 + C90 * C4342 +
                      C102 * C4339 + C91 * C4343) *
                         C139377) *
                        C139442 * C139457 * C139552 +
                    ((C100 * C1764 + C89 * C1772 + C101 * C1765 + C90 * C1773 +
                      C102 * C1766 + C91 * C1774) *
                         C5307 +
                     (C100 * C1870 + C89 * C1878 + C101 * C1871 + C90 * C1879 +
                      C102 * C1872 + C91 * C1880) *
                         C5228 -
                     (C102 * C4226 + C91 * C4233 + C101 * C4225 + C90 * C4229 +
                      C100 * C4224 + C89 * C4228) *
                         C5308 -
                     (C102 * C4340 + C91 * C4344 + C101 * C4339 + C90 * C4343 +
                      C100 * C4338 + C89 * C4342) *
                         C139377) *
                        C139442 * C139457 * C139305) *
                       C139403)) /
                 (p * q * std::sqrt(p + q));
    d2eexz[8] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 +
                      C102 * C109 + C91 * C115) *
                         C3607 +
                     (C100 * C245 + C89 * C251 + C101 * C246 + C90 * C252 +
                      C102 * C247 + C91 * C253) *
                         C139561 -
                     (C102 * C1765 + C91 * C1773 + C101 * C1764 + C90 * C1772 +
                      C100 * C1767 + C89 * C1778) *
                         C3608 -
                     (C102 * C1963 + C91 * C1971 + C101 * C1964 + C90 * C1972 +
                      C100 * C1965 + C89 * C1973) *
                         C139403) *
                        C139442 * C139457 * C5228 +
                    ((C100 * C4223 + C89 * C4227 + C101 * C4224 + C90 * C4228 +
                      C102 * C4225 + C91 * C4229) *
                         C3608 -
                     ((C102 * C1027 + C91 * C1035 + C101 * C1028 + C90 * C1036 +
                       C100 * C1029 + C89 * C1037) *
                          C139561 +
                      (C102 * C829 + C91 * C837 + C101 * C828 + C90 * C836 +
                       C100 * C831 + C89 * C842) *
                          C3607) +
                     (C100 * C4443 + C89 * C4447 + C101 * C4444 + C90 * C4448 +
                      C102 * C4445 + C91 * C4449) *
                         C139403) *
                        C139442 * C139457 * C139377) *
                       C139552 +
                   (((C100 * C1764 + C89 * C1772 + C101 * C1765 + C90 * C1773 +
                      C102 * C1766 + C91 * C1774) *
                         C3608 -
                     ((C102 * C248 + C91 * C254 + C101 * C247 + C90 * C253 +
                       C100 * C246 + C89 * C252) *
                          C139561 +
                      (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 +
                       C100 * C108 + C89 * C114) *
                          C3607) +
                     (C100 * C1964 + C89 * C1972 + C101 * C1963 + C90 * C1971 +
                      C102 * C1969 + C91 * C1977) *
                         C139403) *
                        C139442 * C139457 * C5228 +
                    ((C100 * C828 + C89 * C836 + C101 * C829 + C90 * C837 +
                      C102 * C830 + C91 * C838) *
                         C3607 +
                     (C100 * C1028 + C89 * C1036 + C101 * C1027 + C90 * C1035 +
                      C102 * C1033 + C91 * C1041) *
                         C139561 -
                     (C102 * C4226 + C91 * C4233 + C101 * C4225 + C90 * C4229 +
                      C100 * C4224 + C89 * C4228) *
                         C3608 -
                     (C102 * C4446 + C91 * C4450 + C101 * C4445 + C90 * C4449 +
                      C100 * C4444 + C89 * C4448) *
                         C139403) *
                        C139442 * C139457 * C139377) *
                       C139305)) /
                 (p * q * std::sqrt(p + q));
    d2eeyx[8] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((((C307 * C107 + C139442 * C308) * C137108 +
                      (C307 * C116 + C139442 * C314) * C139552 -
                      C337 * C137101 - C338 * C139305) *
                         C139457 * C89 +
                     (C337 * C137108 + C338 * C139552 - C339 * C137101 -
                      C340 * C139305) *
                         C139457 * C90 +
                     (C339 * C137108 + C340 * C139552 - C341 * C137101 -
                      C342 * C139305) *
                         C139457 * C91) *
                        C139561 +
                    ((C2086 * C137101 -
                      ((C307 * C1777 + C139442 * C2061) * C139552 +
                       (C307 * C1767 + C139442 * C2054) * C137108) +
                      C2087 * C139305) *
                         C139457 * C89 +
                     (C2088 * C137101 - (C2087 * C139552 + C2086 * C137108) +
                      C2089 * C139305) *
                         C139457 * C90 +
                     (C3692 * C137101 - (C2089 * C139552 + C2088 * C137108) +
                      C3693 * C139305) *
                         C139457 * C91) *
                        C139403) *
                       C5228 +
                   (((C1150 * C137101 -
                      ((C307 * C841 + C139442 * C1125) * C139552 +
                       (C307 * C831 + C139442 * C1118) * C137108) +
                      C1151 * C139305) *
                         C139457 * C89 +
                     (C1152 * C137101 - (C1151 * C139552 + C1150 * C137108) +
                      C1153 * C139305) *
                         C139457 * C90 +
                     (C2944 * C137101 - (C1153 * C139552 + C1152 * C137108) +
                      C2945 * C139305) *
                         C139457 * C91) *
                        C139561 +
                    (((C307 * C4223 + C139442 * C4549) * C137108 +
                      (C307 * C4230 + C139442 * C4553) * C139552 -
                      C4566 * C137101 - C4567 * C139305) *
                         C139457 * C89 +
                     (C4566 * C137108 + C4567 * C139552 - C4568 * C137101 -
                      C4569 * C139305) *
                         C139457 * C90 +
                     (C4568 * C137108 + C4569 * C139552 -
                      (C307 * C4226 + C139442 * C4552) * C137101 -
                      (C307 * C4234 + C139442 * C4556) * C139305) *
                         C139457 * C91) *
                        C139403) *
                       C139377)) /
                 (p * q * std::sqrt(p + q));
    d2eeyy[8] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139442 * C308) * C5307 +
             (C307 * C182 + C139442 * C394) * C5228 -
             (C307 * C831 + C139442 * C1118) * C5308 -
             (C307 * C939 + C139442 * C1231) * C139377) *
                C139457 * C89 +
            (C5532 + C5533 - C5534 - C5535) * C139457 * C90 + C5547 * C91) *
               C139552 +
           ((C5534 - (C5533 + C5532) + C5535) * C139457 * C89 +
            (C5538 - (C5537 + C5536) + C5539) * C139457 * C90 +
            (C5540 - (C5541 + C5542) + C5543) * C139457 * C91) *
               C139305) *
              C139561 +
          ((((C307 * C4223 + C139442 * C4549) * C5308 -
             ((C307 * C1873 + C139442 * C2170) * C5228 +
              (C307 * C1767 + C139442 * C2054) * C5307) +
             (C307 * C4337 + C139442 * C4667) * C139377) *
                C139457 * C89 +
            (C8271 - (C8272 + C8273) + C8274) * C139457 * C90 +
            (C8275 - (C8276 + C8277) + C8278) * C139457 * C91) *
               C139552 +
           ((C8273 + C8272 - C8271 - C8274) * C139457 * C89 +
            (C8277 + C8276 - C8275 - C8278) * C139457 * C90 +
            (C3692 * C5307 + C3773 * C5228 -
             (C307 * C4226 + C139442 * C4552) * C5308 -
             (C307 * C4340 + C139442 * C4670) * C139377) *
                C139457 * C91) *
               C139305) *
              C139403)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[8] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139442 * C308) * C3607 +
             (C307 * C245 + C139442 * C474) * C139561 -
             (C307 * C1767 + C139442 * C2054) * C3608 -
             (C307 * C1965 + C139442 * C2269) * C139403) *
                C139457 * C89 +
            (C3851 + C3852 - C3853 - C3854) * C139457 * C90 + C3869 * C91) *
               C5228 +
           (((C307 * C4223 + C139442 * C4549) * C3608 -
             ((C307 * C1029 + C139442 * C1339) * C139561 +
              (C307 * C831 + C139442 * C1118) * C3607) +
             (C307 * C4443 + C139442 * C4783) * C139403) *
                C139457 * C89 +
            (C4788 - (C4789 + C4790) + C4800) * C139457 * C90 +
            (C4793 - (C4794 + C4795) + C4801) * C139457 * C91) *
               C139377) *
              C139552 +
          (((C3853 - (C3852 + C3851) + C3854) * C139457 * C89 +
            (C3857 - (C3856 + C3855) + C3858) * C139457 * C90 +
            (C3859 - (C3860 + C3861) + C3867) * C139457 * C91) *
               C5228 +
           ((C4790 + C4789 - C4788 - C4800) * C139457 * C89 +
            (C4795 + C4794 - C4793 - C4801) * C139457 * C90 +
            (C2944 * C3607 + C3120 * C139561 -
             (C307 * C4226 + C139442 * C4552) * C3608 -
             (C307 * C4446 + C139442 * C4786) * C139403) *
                C139457 * C91) *
               C139377) *
              C139305)) /
        (p * q * std::sqrt(p + q));
    d2eezx[8] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((((C554 * C107 + C139457 * C555) * C137108 +
                      (C554 * C116 + C139457 * C561) * C139552 -
                      C584 * C137101 - C585 * C139305) *
                         C89 +
                     (C584 * C137108 + C585 * C139552 - C586 * C137101 -
                      C587 * C139305) *
                         C90 +
                     (C586 * C137108 + C587 * C139552 - C588 * C137101 -
                      C589 * C139305) *
                         C91) *
                        C139442 * C139561 +
                    ((C2408 * C137101 -
                      ((C554 * C1777 + C139457 * C2383) * C139552 +
                       (C554 * C1767 + C139457 * C2376) * C137108) +
                      C2409 * C139305) *
                         C89 +
                     (C2410 * C137101 - (C2409 * C139552 + C2408 * C137108) +
                      C2411 * C139305) *
                         C90 +
                     (C3950 * C137101 - (C2411 * C139552 + C2410 * C137108) +
                      C3951 * C139305) *
                         C91) *
                        C139442 * C139403) *
                       C5228 +
                   (((C1472 * C137101 -
                      ((C554 * C841 + C139457 * C1447) * C139552 +
                       (C554 * C831 + C139457 * C1440) * C137108) +
                      C1473 * C139305) *
                         C89 +
                     (C1474 * C137101 - (C1473 * C139552 + C1472 * C137108) +
                      C1475 * C139305) *
                         C90 +
                     (C3202 * C137101 - (C1475 * C139552 + C1474 * C137108) +
                      C3203 * C139305) *
                         C91) *
                        C139442 * C139561 +
                    (((C554 * C4223 + C139457 * C4899) * C137108 +
                      (C554 * C4230 + C139457 * C4903) * C139552 -
                      C4916 * C137101 - C4917 * C139305) *
                         C89 +
                     (C4916 * C137108 + C4917 * C139552 - C4918 * C137101 -
                      C4919 * C139305) *
                         C90 +
                     (C4918 * C137108 + C4919 * C139552 -
                      (C554 * C4226 + C139457 * C4902) * C137101 -
                      (C554 * C4234 + C139457 * C4906) * C139305) *
                         C91) *
                        C139442 * C139403) *
                       C139377)) /
                 (p * q * std::sqrt(p + q));
    d2eezy[8] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((((C554 * C107 + C139457 * C555) * C5307 +
                      (C554 * C182 + C139457 * C641) * C5228 -
                      (C554 * C831 + C139457 * C1440) * C5308 -
                      (C554 * C939 + C139457 * C1553) * C139377) *
                         C89 +
                     (C5770 + C5771 - C5772 - C5773) * C90 + C5784 * C91) *
                        C139442 * C139552 +
                    ((C5772 - (C5771 + C5770) + C5773) * C89 +
                     (C5776 - (C5775 + C5774) + C5777) * C90 +
                     (C5778 - (C5779 + C5780) + C5781) * C91) *
                        C139442 * C139305) *
                       C139561 +
                   ((((C554 * C4223 + C139457 * C4899) * C5308 -
                      ((C554 * C1873 + C139457 * C2492) * C5228 +
                       (C554 * C1767 + C139457 * C2376) * C5307) +
                      (C554 * C4337 + C139457 * C5017) * C139377) *
                         C89 +
                     (C8573 - (C8574 + C8575) + C8576) * C90 +
                     (C8577 - (C8578 + C8579) + C8580) * C91) *
                        C139442 * C139552 +
                    ((C8575 + C8574 - C8573 - C8576) * C89 +
                     (C8579 + C8578 - C8577 - C8580) * C90 +
                     (C3950 * C5307 + C4031 * C5228 -
                      (C554 * C4226 + C139457 * C4902) * C5308 -
                      (C554 * C4340 + C139457 * C5020) * C139377) *
                         C91) *
                        C139442 * C139305) *
                       C139403)) /
                 (p * q * std::sqrt(p + q));
    d2eezz[8] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((((C554 * C107 + C139457 * C555) * C3607 +
                      (C554 * C245 + C139457 * C719) * C139561 -
                      (C554 * C1767 + C139457 * C2376) * C3608 -
                      (C554 * C1965 + C139457 * C2591) * C139403) *
                         C89 +
                     (C4108 + C4109 - C4110 - C4111) * C90 + C4125 * C91) *
                        C139442 * C5228 +
                    (((C554 * C4223 + C139457 * C4899) * C3608 -
                      ((C554 * C1029 + C139457 * C1661) * C139561 +
                       (C554 * C831 + C139457 * C1440) * C3607) +
                      (C554 * C4443 + C139457 * C5133) * C139403) *
                         C89 +
                     (C5138 - (C5139 + C5140) + C5150) * C90 +
                     (C5143 - (C5144 + C5145) + C5151) * C91) *
                        C139442 * C139377) *
                       C139552 +
                   (((C4110 - (C4109 + C4108) + C4111) * C89 +
                     (C4114 - (C4113 + C4112) + C4115) * C90 +
                     (C4116 - (C4117 + C4118) + C4124) * C91) *
                        C139442 * C5228 +
                    ((C5140 + C5139 - C5138 - C5150) * C89 +
                     (C5145 + C5144 - C5143 - C5151) * C90 +
                     (C3202 * C3607 + C3376 * C139561 -
                      (C554 * C4226 + C139457 * C4902) * C3608 -
                      (C554 * C4446 + C139457 * C5136) * C139403) *
                         C91) *
                        C139442 * C139377) *
                       C139305)) /
                 (p * q * std::sqrt(p + q));
    d2eexx[9] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 +
                     C102 * C109 + C91 * C115) *
                        C5230 +
                    (C100 * C116 + C89 * C125 + C101 * C117 + C90 * C126 +
                     C102 * C118 + C91 * C127) *
                        C5225 -
                    (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 +
                     C100 * C108 + C89 * C114) *
                        C5231 -
                    (C102 * C120 + C91 * C128 + C101 * C118 + C90 * C127 +
                     C100 * C117 + C89 * C126) *
                        C5226 +
                    (C100 * C109 + C89 * C115 + C101 * C110 + C90 * C119 +
                     C102 * C111 + C91 * C121) *
                        C5232 +
                    (C100 * C118 + C89 * C127 + C101 * C120 + C90 * C128 +
                     C102 * C122 + C91 * C129) *
                        C5227) *
                       C139442 * C139457 * C139339 * C5228 +
                   ((C100 * C828 + C89 * C836 + C101 * C829 + C90 * C837 +
                     C102 * C830 + C91 * C838) *
                        C5231 -
                    ((C102 * C839 + C91 * C852 + C101 * C840 + C90 * C853 +
                      C100 * C841 + C89 * C854) *
                         C5225 +
                     (C102 * C829 + C91 * C837 + C101 * C828 + C90 * C836 +
                      C100 * C831 + C89 * C842) *
                         C5230) +
                    (C100 * C840 + C89 * C853 + C101 * C839 + C90 * C852 +
                     C102 * C843 + C91 * C855) *
                        C5226 -
                    (C102 * C2705 + C91 * C2706 + C101 * C830 + C90 * C838 +
                     C100 * C829 + C89 * C837) *
                        C5232 -
                    (C102 * C2707 + C91 * C2708 + C101 * C843 + C90 * C855 +
                     C100 * C839 + C89 * C852) *
                        C5227) *
                       C139442 * C139457 * C139339 * C139377)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 +
                     C102 * C109 + C91 * C115) *
                        C5913 +
                    (C100 * C116 + C89 * C125 + C101 * C117 + C90 * C126 +
                     C102 * C118 + C91 * C127) *
                        C139300) *
                       C139442 * C139457 * C139339 * C5909 -
                   ((C102 * C839 + C91 * C852 + C101 * C840 + C90 * C853 +
                     C100 * C841 + C89 * C854) *
                        C139300 +
                    (C102 * C829 + C91 * C837 + C101 * C828 + C90 * C836 +
                     C100 * C831 + C89 * C842) *
                        C5913) *
                       C139442 * C139457 * C139339 * C5910 +
                   ((C100 * C832 + C89 * C844 + C101 * C833 + C90 * C845 +
                     C102 * C834 + C91 * C846) *
                        C5913 +
                    (C100 * C847 + C89 * C856 + C101 * C848 + C90 * C857 +
                     C102 * C849 + C91 * C858) *
                        C139300) *
                       C139442 * C139457 * C139339 * C5911 -
                   ((C102 * C5917 + C91 * C5923 + C101 * C5918 + C90 * C5924 +
                     C100 * C5919 + C89 * C5925) *
                        C139300 +
                    (C102 * C5914 + C91 * C5920 + C101 * C5915 + C90 * C5921 +
                     C100 * C5916 + C89 * C5922) *
                        C5913) *
                       C139442 * C139457 * C139339 * C5912)) /
                     (p * q * std::sqrt(p + q));
    d2eexy[9] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 +
                     C102 * C109 + C91 * C115) *
                        C5307 +
                    (C100 * C182 + C89 * C188 + C101 * C183 + C90 * C189 +
                     C102 * C184 + C91 * C190) *
                        C5228 -
                    (C102 * C829 + C91 * C837 + C101 * C828 + C90 * C836 +
                     C100 * C831 + C89 * C842) *
                        C5308 -
                    (C102 * C937 + C91 * C945 + C101 * C938 + C90 * C946 +
                     C100 * C939 + C89 * C947) *
                        C139377) *
                       C139442 * C139457 * C5225 +
                   ((C100 * C828 + C89 * C836 + C101 * C829 + C90 * C837 +
                     C102 * C830 + C91 * C838) *
                        C5308 -
                    ((C102 * C185 + C91 * C191 + C101 * C184 + C90 * C190 +
                      C100 * C183 + C89 * C189) *
                         C5228 +
                     (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 +
                      C100 * C108 + C89 * C114) *
                         C5307) +
                    (C100 * C938 + C89 * C946 + C101 * C937 + C90 * C945 +
                     C102 * C943 + C91 * C951) *
                        C139377) *
                       C139442 * C139457 * C5226 +
                   ((C100 * C109 + C89 * C115 + C101 * C110 + C90 * C119 +
                     C102 * C111 + C91 * C121) *
                        C5307 +
                    (C100 * C184 + C89 * C190 + C101 * C185 + C90 * C191 +
                     C102 * C186 + C91 * C192) *
                        C5228 -
                    (C102 * C2705 + C91 * C2706 + C101 * C830 + C90 * C838 +
                     C100 * C829 + C89 * C837) *
                        C5308 -
                    (C102 * C2785 + C91 * C2786 + C101 * C943 + C90 * C951 +
                     C100 * C937 + C89 * C945) *
                        C139377) *
                       C139442 * C139457 * C5227) *
                  C139339) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 +
                    C102 * C109 + C91 * C115) *
                       C5976 +
                   (C100 * C182 + C89 * C188 + C101 * C183 + C90 * C189 +
                    C102 * C184 + C91 * C190) *
                       C5909 -
                   (C102 * C829 + C91 * C837 + C101 * C828 + C90 * C836 +
                    C100 * C831 + C89 * C842) *
                       C5977 -
                   (C102 * C937 + C91 * C945 + C101 * C938 + C90 * C946 +
                    C100 * C939 + C89 * C947) *
                       C5910 +
                   (C100 * C832 + C89 * C844 + C101 * C833 + C90 * C845 +
                    C102 * C834 + C91 * C846) *
                       C5978 +
                   (C100 * C940 + C89 * C948 + C101 * C941 + C90 * C949 +
                    C102 * C942 + C91 * C950) *
                       C5911 -
                   (C102 * C5914 + C91 * C5920 + C101 * C5915 + C90 * C5921 +
                    C100 * C5916 + C89 * C5922) *
                       C5979 -
                   (C102 * C5980 + C91 * C5983 + C101 * C5981 + C90 * C5984 +
                    C100 * C5982 + C89 * C5985) *
                       C5912) *
                  C139442 * C139457 * C139300 * C139339) /
                     (p * q * std::sqrt(p + q));
    d2eexz[9] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 +
                      C102 * C109 + C91 * C115) *
                         C244 +
                     (C100 * C245 + C89 * C251 + C101 * C246 + C90 * C252 +
                      C102 * C247 + C91 * C253) *
                         C139339) *
                        C139442 * C139457 * C5228 -
                    ((C102 * C1027 + C91 * C1035 + C101 * C1028 + C90 * C1036 +
                      C100 * C1029 + C89 * C1037) *
                         C139339 +
                     (C102 * C829 + C91 * C837 + C101 * C828 + C90 * C836 +
                      C100 * C831 + C89 * C842) *
                         C244) *
                        C139442 * C139457 * C139377) *
                       C5225 +
                   (((C100 * C828 + C89 * C836 + C101 * C829 + C90 * C837 +
                      C102 * C830 + C91 * C838) *
                         C244 +
                     (C100 * C1028 + C89 * C1036 + C101 * C1027 + C90 * C1035 +
                      C102 * C1033 + C91 * C1041) *
                         C139339) *
                        C139442 * C139457 * C139377 -
                    ((C102 * C248 + C91 * C254 + C101 * C247 + C90 * C253 +
                      C100 * C246 + C89 * C252) *
                         C139339 +
                     (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 +
                      C100 * C108 + C89 * C114) *
                         C244) *
                        C139442 * C139457 * C5228) *
                       C5226 +
                   (((C100 * C109 + C89 * C115 + C101 * C110 + C90 * C119 +
                      C102 * C111 + C91 * C121) *
                         C244 +
                     (C100 * C247 + C89 * C253 + C101 * C248 + C90 * C254 +
                      C102 * C249 + C91 * C255) *
                         C139339) *
                        C139442 * C139457 * C5228 -
                    ((C102 * C2861 + C91 * C2862 + C101 * C1033 + C90 * C1041 +
                      C100 * C1027 + C89 * C1035) *
                         C139339 +
                     (C102 * C2705 + C91 * C2706 + C101 * C830 + C90 * C838 +
                      C100 * C829 + C89 * C837) *
                         C244) *
                        C139442 * C139457 * C139377) *
                       C5227)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 +
                     C102 * C109 + C91 * C115) *
                        C244 +
                    (C100 * C245 + C89 * C251 + C101 * C246 + C90 * C252 +
                     C102 * C247 + C91 * C253) *
                        C139339) *
                       C139442 * C139457 * C5909 -
                   ((C102 * C1027 + C91 * C1035 + C101 * C1028 + C90 * C1036 +
                     C100 * C1029 + C89 * C1037) *
                        C139339 +
                    (C102 * C829 + C91 * C837 + C101 * C828 + C90 * C836 +
                     C100 * C831 + C89 * C842) *
                        C244) *
                       C139442 * C139457 * C5910 +
                   ((C100 * C832 + C89 * C844 + C101 * C833 + C90 * C845 +
                     C102 * C834 + C91 * C846) *
                        C244 +
                    (C100 * C1030 + C89 * C1038 + C101 * C1031 + C90 * C1039 +
                     C102 * C1032 + C91 * C1040) *
                        C139339) *
                       C139442 * C139457 * C5911 -
                   ((C102 * C6036 + C91 * C6039 + C101 * C6037 + C90 * C6040 +
                     C100 * C6038 + C89 * C6041) *
                        C139339 +
                    (C102 * C5914 + C91 * C5920 + C101 * C5915 + C90 * C5921 +
                     C100 * C5916 + C89 * C5922) *
                        C244) *
                       C139442 * C139457 * C5912) *
                  C139300) /
                     (p * q * std::sqrt(p + q));
    d2eeyx[9] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C307 * C107 + C139442 * C308) * C5230 +
                     (C307 * C116 + C139442 * C314) * C5225 - C337 * C5231 -
                     C338 * C5226 + C339 * C5232 + C340 * C5227) *
                        C139457 * C89 +
                    (C337 * C5230 + C338 * C5225 - C339 * C5231 - C340 * C5226 +
                     C341 * C5232 + C342 * C5227) *
                        C139457 * C90 +
                    (C339 * C5230 + C340 * C5225 - C341 * C5231 - C342 * C5226 +
                     C343 * C5232 + C344 * C5227) *
                        C139457 * C91) *
                       C139339 * C5228 +
                   ((C1150 * C5231 -
                     ((C307 * C841 + C139442 * C1125) * C5225 +
                      (C307 * C831 + C139442 * C1118) * C5230) +
                     C1151 * C5226 - C1152 * C5232 - C1153 * C5227) *
                        C139457 * C89 +
                    (C1152 * C5231 - (C1151 * C5225 + C1150 * C5230) +
                     C1153 * C5226 - C2944 * C5232 - C2945 * C5227) *
                        C139457 * C90 +
                    (C2944 * C5231 - (C1153 * C5225 + C1152 * C5230) +
                     C2945 * C5226 - (C307 * C2705 + C139442 * C2937) * C5232 -
                     (C307 * C2707 + C139442 * C2938) * C5227) *
                        C139457 * C91) *
                       C139339 * C139377)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C307 * C107 + C139442 * C308) * C5913 +
                     (C307 * C116 + C139442 * C314) * C139300) *
                        C139457 * C89 +
                    (C337 * C5913 + C338 * C139300) * C139457 * C90 +
                    (C339 * C5913 + C340 * C139300) * C139457 * C91) *
                       C139339 * C5909 -
                   ((C1153 * C139300 + C1152 * C5913) * C139457 * C91 +
                    (C1151 * C139300 + C1150 * C5913) * C139457 * C90 +
                    ((C307 * C841 + C139442 * C1125) * C139300 +
                     (C307 * C831 + C139442 * C1118) * C5913) *
                        C139457 * C89) *
                       C139339 * C5910 +
                   (((C307 * C832 + C139442 * C1121) * C5913 +
                     (C307 * C847 + C139442 * C1129) * C139300) *
                        C139457 * C89 +
                    (C1154 * C5913 + C1155 * C139300) * C139457 * C90 +
                    (C1156 * C5913 + C1157 * C139300) * C139457 * C91) *
                       C139339 * C5911 -
                   (((C307 * C5917 + C139442 * C6095) * C139300 +
                     (C307 * C5914 + C139442 * C6092) * C5913) *
                        C139457 * C91 +
                    ((C307 * C5918 + C139442 * C6096) * C139300 +
                     (C307 * C5915 + C139442 * C6093) * C5913) *
                        C139457 * C90 +
                    ((C307 * C5919 + C139442 * C6097) * C139300 +
                     (C307 * C5916 + C139442 * C6094) * C5913) *
                        C139457 * C89) *
                       C139339 * C5912)) /
                     (p * q * std::sqrt(p + q));
    d2eeyy[9] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139442 * C308) * C5307 +
            (C307 * C182 + C139442 * C394) * C5228 -
            (C307 * C831 + C139442 * C1118) * C5308 -
            (C307 * C939 + C139442 * C1231) * C139377) *
               C139457 * C89 +
           (C5532 + C5533 - C5534 - C5535) * C139457 * C90 + C5547 * C91) *
              C5225 +
          ((C5534 - (C5533 + C5532) + C5535) * C139457 * C89 +
           (C5538 - (C5537 + C5536) + C5539) * C139457 * C90 +
           (C5540 - (C5541 + C5542) + C5543) * C139457 * C91) *
              C5226 +
          (C5547 * C89 + (C5542 + C5541 - C5540 - C5543) * C139457 * C90 +
           (C343 * C5307 + C416 * C5228 -
            (C307 * C2705 + C139442 * C2937) * C5308 -
            (C307 * C2785 + C139442 * C3019) * C139377) *
               C139457 * C91) *
              C5227) *
         C139339) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C307 * C107 + C139442 * C308) * C5976 +
           (C307 * C182 + C139442 * C394) * C5909 -
           (C307 * C831 + C139442 * C1118) * C5977 -
           (C307 * C939 + C139442 * C1231) * C5910 +
           (C307 * C832 + C139442 * C1121) * C5978 +
           (C307 * C940 + C139442 * C1232) * C5911 -
           (C307 * C5916 + C139442 * C6094) * C5979 -
           (C307 * C5982 + C139442 * C6148) * C5912) *
              C139457 * C89 +
          (C337 * C5976 + C413 * C5909 - C1150 * C5977 - C1256 * C5910 +
           C1154 * C5978 + C1257 * C5911 -
           (C307 * C5915 + C139442 * C6093) * C5979 -
           (C307 * C5981 + C139442 * C6149) * C5912) *
              C139457 * C90 +
          (C339 * C5976 + C414 * C5909 - C1152 * C5977 - C1258 * C5910 +
           C1156 * C5978 + C1259 * C5911 -
           (C307 * C5914 + C139442 * C6092) * C5979 -
           (C307 * C5980 + C139442 * C6150) * C5912) *
              C139457 * C91) *
         C139300 * C139339) /
            (p * q * std::sqrt(p + q));
    d2eeyz[9] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139442 * C308) * C244 +
             (C307 * C245 + C139442 * C474) * C139339) *
                C139457 * C89 +
            (C481 + C497) * C139457 * C90 + C503 * C91) *
               C5228 -
           (C3119 * C91 + (C1363 + C1351) * C139457 * C90 +
            ((C307 * C1029 + C139442 * C1339) * C139339 +
             (C307 * C831 + C139442 * C1118) * C244) *
                C139457 * C89) *
               C139377) *
              C5225 +
          (((C1351 + C1363) * C139457 * C89 + (C1348 + C1362) * C139457 * C90 +
            (C3116 + C3121) * C139457 * C91) *
               C139377 -
           (C504 * C91 + (C498 + C484) * C139457 * C90 +
            (C497 + C481) * C139457 * C89) *
               C5228) *
              C5226 +
          ((C503 * C89 + (C489 + C499) * C139457 * C90 +
            (C490 + C500) * C139457 * C91) *
               C5228 -
           (((C307 * C2861 + C139442 * C3113) * C139339 +
             (C307 * C2705 + C139442 * C2937) * C244) *
                C139457 * C91 +
            (C3121 + C3116) * C139457 * C90 + C3119 * C89) *
               C139377) *
              C5227)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139442 * C308) * C244 +
            (C307 * C245 + C139442 * C474) * C139339) *
               C139457 * C89 +
           (C481 + C497) * C139457 * C90 + C503 * C91) *
              C5909 -
          (C3119 * C91 + (C1363 + C1351) * C139457 * C90 +
           ((C307 * C1029 + C139442 * C1339) * C139339 +
            (C307 * C831 + C139442 * C1118) * C244) *
               C139457 * C89) *
              C5910 +
          (((C307 * C832 + C139442 * C1121) * C244 +
            (C307 * C1030 + C139442 * C1340) * C139339) *
               C139457 * C89 +
           (C1352 + C1364) * C139457 * C90 + (C1355 + C1365) * C139457 * C91) *
              C5911 -
          (((C307 * C6036 + C139442 * C6201) * C139339 +
            (C307 * C5914 + C139442 * C6092) * C244) *
               C139457 * C91 +
           ((C307 * C6037 + C139442 * C6202) * C139339 +
            (C307 * C5915 + C139442 * C6093) * C244) *
               C139457 * C90 +
           ((C307 * C6038 + C139442 * C6203) * C139339 +
            (C307 * C5916 + C139442 * C6094) * C244) *
               C139457 * C89) *
              C5912) *
         C139300) /
            (p * q * std::sqrt(p + q));
    d2eezx[9] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C554 * C107 + C139457 * C555) * C5230 +
                     (C554 * C116 + C139457 * C561) * C5225 - C584 * C5231 -
                     C585 * C5226 + C586 * C5232 + C587 * C5227) *
                        C89 +
                    (C584 * C5230 + C585 * C5225 - C586 * C5231 - C587 * C5226 +
                     C588 * C5232 + C589 * C5227) *
                        C90 +
                    (C586 * C5230 + C587 * C5225 - C588 * C5231 - C589 * C5226 +
                     C590 * C5232 + C591 * C5227) *
                        C91) *
                       C139442 * C139339 * C5228 +
                   ((C1472 * C5231 -
                     ((C554 * C841 + C139457 * C1447) * C5225 +
                      (C554 * C831 + C139457 * C1440) * C5230) +
                     C1473 * C5226 - C1474 * C5232 - C1475 * C5227) *
                        C89 +
                    (C1474 * C5231 - (C1473 * C5225 + C1472 * C5230) +
                     C1475 * C5226 - C3202 * C5232 - C3203 * C5227) *
                        C90 +
                    (C3202 * C5231 - (C1475 * C5225 + C1474 * C5230) +
                     C3203 * C5226 - (C554 * C2705 + C139457 * C3195) * C5232 -
                     (C554 * C2707 + C139457 * C3196) * C5227) *
                        C91) *
                       C139442 * C139339 * C139377)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C554 * C107 + C139457 * C555) * C5913 +
                     (C554 * C116 + C139457 * C561) * C139300) *
                        C89 +
                    (C584 * C5913 + C585 * C139300) * C90 +
                    (C586 * C5913 + C587 * C139300) * C91) *
                       C139442 * C139339 * C5909 -
                   ((C1475 * C139300 + C1474 * C5913) * C91 +
                    (C1473 * C139300 + C1472 * C5913) * C90 +
                    ((C554 * C841 + C139457 * C1447) * C139300 +
                     (C554 * C831 + C139457 * C1440) * C5913) *
                        C89) *
                       C139442 * C139339 * C5910 +
                   (((C554 * C832 + C139457 * C1443) * C5913 +
                     (C554 * C847 + C139457 * C1451) * C139300) *
                        C89 +
                    (C1476 * C5913 + C1477 * C139300) * C90 +
                    (C1478 * C5913 + C1479 * C139300) * C91) *
                       C139442 * C139339 * C5911 -
                   (((C554 * C5917 + C139457 * C6257) * C139300 +
                     (C554 * C5914 + C139457 * C6254) * C5913) *
                        C91 +
                    ((C554 * C5918 + C139457 * C6258) * C139300 +
                     (C554 * C5915 + C139457 * C6255) * C5913) *
                        C90 +
                    ((C554 * C5919 + C139457 * C6259) * C139300 +
                     (C554 * C5916 + C139457 * C6256) * C5913) *
                        C89) *
                       C139442 * C139339 * C5912)) /
                     (p * q * std::sqrt(p + q));
    d2eezy[9] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C554 * C107 + C139457 * C555) * C5307 +
                     (C554 * C182 + C139457 * C641) * C5228 -
                     (C554 * C831 + C139457 * C1440) * C5308 -
                     (C554 * C939 + C139457 * C1553) * C139377) *
                        C89 +
                    (C5770 + C5771 - C5772 - C5773) * C90 + C5784 * C91) *
                       C139442 * C5225 +
                   ((C5772 - (C5771 + C5770) + C5773) * C89 +
                    (C5776 - (C5775 + C5774) + C5777) * C90 +
                    (C5778 - (C5779 + C5780) + C5781) * C91) *
                       C139442 * C5226 +
                   (C5784 * C89 + (C5780 + C5779 - C5778 - C5781) * C90 +
                    (C590 * C5307 + C663 * C5228 -
                     (C554 * C2705 + C139457 * C3195) * C5308 -
                     (C554 * C2785 + C139457 * C3277) * C139377) *
                        C91) *
                       C139442 * C5227) *
                  C139339) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((C554 * C107 + C139457 * C555) * C5976 +
                    (C554 * C182 + C139457 * C641) * C5909 -
                    (C554 * C831 + C139457 * C1440) * C5977 -
                    (C554 * C939 + C139457 * C1553) * C5910 +
                    (C554 * C832 + C139457 * C1443) * C5978 +
                    (C554 * C940 + C139457 * C1554) * C5911 -
                    (C554 * C5916 + C139457 * C6256) * C5979 -
                    (C554 * C5982 + C139457 * C6310) * C5912) *
                       C89 +
                   (C584 * C5976 + C660 * C5909 - C1472 * C5977 -
                    C1578 * C5910 + C1476 * C5978 + C1579 * C5911 -
                    (C554 * C5915 + C139457 * C6255) * C5979 -
                    (C554 * C5981 + C139457 * C6311) * C5912) *
                       C90 +
                   (C586 * C5976 + C661 * C5909 - C1474 * C5977 -
                    C1580 * C5910 + C1478 * C5978 + C1581 * C5911 -
                    (C554 * C5914 + C139457 * C6254) * C5979 -
                    (C554 * C5980 + C139457 * C6312) * C5912) *
                       C91) *
                  C139442 * C139300 * C139339) /
                     (p * q * std::sqrt(p + q));
    d2eezz[9] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C554 * C107 + C139457 * C555) * C244 +
                      (C554 * C245 + C139457 * C719) * C139339) *
                         C89 +
                     (C726 + C742) * C90 + C746 * C91) *
                        C139442 * C5228 -
                    (C3372 * C91 + (C1685 + C1673) * C90 +
                     ((C554 * C1029 + C139457 * C1661) * C139339 +
                      (C554 * C831 + C139457 * C1440) * C244) *
                         C89) *
                        C139442 * C139377) *
                       C5225 +
                   (((C1673 + C1685) * C89 + (C1670 + C1684) * C90 +
                     (C3373 + C3377) * C91) *
                        C139442 * C139377 -
                    (C747 * C91 + (C743 + C729) * C90 + (C742 + C726) * C89) *
                        C139442 * C5228) *
                       C5226 +
                   ((C746 * C89 + (C734 + C744) * C90 + (C735 + C745) * C91) *
                        C139442 * C5228 -
                    (((C554 * C2861 + C139457 * C3370) * C139339 +
                      (C554 * C2705 + C139457 * C3195) * C244) *
                         C91 +
                     (C3377 + C3373) * C90 + C3372 * C89) *
                        C139442 * C139377) *
                       C5227)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C554 * C107 + C139457 * C555) * C244 +
                     (C554 * C245 + C139457 * C719) * C139339) *
                        C89 +
                    (C726 + C742) * C90 + C746 * C91) *
                       C139442 * C5909 -
                   (C3372 * C91 + (C1685 + C1673) * C90 +
                    ((C554 * C1029 + C139457 * C1661) * C139339 +
                     (C554 * C831 + C139457 * C1440) * C244) *
                        C89) *
                       C139442 * C5910 +
                   (((C554 * C832 + C139457 * C1443) * C244 +
                     (C554 * C1030 + C139457 * C1662) * C139339) *
                        C89 +
                    (C1674 + C1686) * C90 + (C1677 + C1687) * C91) *
                       C139442 * C5911 -
                   (((C554 * C6036 + C139457 * C6363) * C139339 +
                     (C554 * C5914 + C139457 * C6254) * C244) *
                        C91 +
                    ((C554 * C6037 + C139457 * C6364) * C139339 +
                     (C554 * C5915 + C139457 * C6255) * C244) *
                        C90 +
                    ((C554 * C6038 + C139457 * C6365) * C139339 +
                     (C554 * C5916 + C139457 * C6256) * C244) *
                        C89) *
                       C139442 * C5912) *
                  C139300) /
                     (p * q * std::sqrt(p + q));
    d2eexx[10] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 +
                       C102 * C109 + C91 * C115) *
                          C137108 +
                      (C100 * C116 + C89 * C125 + C101 * C117 + C90 * C126 +
                       C102 * C118 + C91 * C127) *
                          C139552 -
                      (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 +
                       C100 * C108 + C89 * C114) *
                          C137101 -
                      (C102 * C120 + C91 * C128 + C101 * C118 + C90 * C127 +
                       C100 * C117 + C89 * C126) *
                          C139305) *
                         C139442 * C139457 * C9466 +
                     ((C100 * C1764 + C89 * C1772 + C101 * C1765 + C90 * C1773 +
                       C102 * C1766 + C91 * C1774) *
                          C137101 -
                      ((C102 * C1775 + C91 * C1788 + C101 * C1776 +
                        C90 * C1789 + C100 * C1777 + C89 * C1790) *
                           C139552 +
                       (C102 * C1765 + C91 * C1773 + C101 * C1764 +
                        C90 * C1772 + C100 * C1767 + C89 * C1778) *
                           C137108) +
                      (C100 * C1776 + C89 * C1789 + C101 * C1775 + C90 * C1788 +
                       C102 * C1779 + C91 * C1791) *
                          C139305) *
                         C139442 * C139457 * C139403) *
                        C139560 +
                    (((C100 * C828 + C89 * C836 + C101 * C829 + C90 * C837 +
                       C102 * C830 + C91 * C838) *
                          C137101 -
                      ((C102 * C839 + C91 * C852 + C101 * C840 + C90 * C853 +
                        C100 * C841 + C89 * C854) *
                           C139552 +
                       (C102 * C829 + C91 * C837 + C101 * C828 + C90 * C836 +
                        C100 * C831 + C89 * C842) *
                           C137108) +
                      (C100 * C840 + C89 * C853 + C101 * C839 + C90 * C852 +
                       C102 * C843 + C91 * C855) *
                          C139305) *
                         C139442 * C139457 * C9466 +
                     ((C100 * C4223 + C89 * C4227 + C101 * C4224 + C90 * C4228 +
                       C102 * C4225 + C91 * C4229) *
                          C137108 +
                      (C100 * C4230 + C89 * C4235 + C101 * C4231 + C90 * C4236 +
                       C102 * C4232 + C91 * C4237) *
                          C139552 -
                      (C102 * C4226 + C91 * C4233 + C101 * C4225 + C90 * C4229 +
                       C100 * C4224 + C89 * C4228) *
                          C137101 -
                      (C102 * C4234 + C91 * C4238 + C101 * C4232 + C90 * C4237 +
                       C100 * C4231 + C89 * C4236) *
                          C139305) *
                         C139442 * C139457 * C139403) *
                        C139377)) /
                  (p * q * std::sqrt(p + q));
    d2eexy[10] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 +
                       C102 * C109 + C91 * C115) *
                          C2783 +
                      (C100 * C182 + C89 * C188 + C101 * C183 + C90 * C189 +
                       C102 * C184 + C91 * C190) *
                          C139560 -
                      (C102 * C829 + C91 * C837 + C101 * C828 + C90 * C836 +
                       C100 * C831 + C89 * C842) *
                          C2784 -
                      (C102 * C937 + C91 * C945 + C101 * C938 + C90 * C946 +
                       C100 * C939 + C89 * C947) *
                          C139377) *
                         C139442 * C139457 * C139552 +
                     ((C100 * C828 + C89 * C836 + C101 * C829 + C90 * C837 +
                       C102 * C830 + C91 * C838) *
                          C2784 -
                      ((C102 * C185 + C91 * C191 + C101 * C184 + C90 * C190 +
                        C100 * C183 + C89 * C189) *
                           C139560 +
                       (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 +
                        C100 * C108 + C89 * C114) *
                           C2783) +
                      (C100 * C938 + C89 * C946 + C101 * C937 + C90 * C945 +
                       C102 * C943 + C91 * C951) *
                          C139377) *
                         C139442 * C139457 * C139305) *
                        C9466 +
                    (((C100 * C4223 + C89 * C4227 + C101 * C4224 + C90 * C4228 +
                       C102 * C4225 + C91 * C4229) *
                          C2784 -
                      ((C102 * C1871 + C91 * C1879 + C101 * C1870 +
                        C90 * C1878 + C100 * C1873 + C89 * C1881) *
                           C139560 +
                       (C102 * C1765 + C91 * C1773 + C101 * C1764 +
                        C90 * C1772 + C100 * C1767 + C89 * C1778) *
                           C2783) +
                      (C100 * C4337 + C89 * C4341 + C101 * C4338 + C90 * C4342 +
                       C102 * C4339 + C91 * C4343) *
                          C139377) *
                         C139442 * C139457 * C139552 +
                     ((C100 * C1764 + C89 * C1772 + C101 * C1765 + C90 * C1773 +
                       C102 * C1766 + C91 * C1774) *
                          C2783 +
                      (C100 * C1870 + C89 * C1878 + C101 * C1871 + C90 * C1879 +
                       C102 * C1872 + C91 * C1880) *
                          C139560 -
                      (C102 * C4226 + C91 * C4233 + C101 * C4225 + C90 * C4229 +
                       C100 * C4224 + C89 * C4228) *
                          C2784 -
                      (C102 * C4340 + C91 * C4344 + C101 * C4339 + C90 * C4343 +
                       C100 * C4338 + C89 * C4342) *
                          C139377) *
                         C139442 * C139457 * C139305) *
                        C139403)) /
                  (p * q * std::sqrt(p + q));
    d2eexz[10] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 +
                       C102 * C109 + C91 * C115) *
                          C9616 +
                      (C100 * C245 + C89 * C251 + C101 * C246 + C90 * C252 +
                       C102 * C247 + C91 * C253) *
                          C9466 -
                      (C102 * C1765 + C91 * C1773 + C101 * C1764 + C90 * C1772 +
                       C100 * C1767 + C89 * C1778) *
                          C9617 -
                      (C102 * C1963 + C91 * C1971 + C101 * C1964 + C90 * C1972 +
                       C100 * C1965 + C89 * C1973) *
                          C139403) *
                         C139442 * C139457 * C139560 +
                     ((C100 * C4223 + C89 * C4227 + C101 * C4224 + C90 * C4228 +
                       C102 * C4225 + C91 * C4229) *
                          C9617 -
                      ((C102 * C1027 + C91 * C1035 + C101 * C1028 +
                        C90 * C1036 + C100 * C1029 + C89 * C1037) *
                           C9466 +
                       (C102 * C829 + C91 * C837 + C101 * C828 + C90 * C836 +
                        C100 * C831 + C89 * C842) *
                           C9616) +
                      (C100 * C4443 + C89 * C4447 + C101 * C4444 + C90 * C4448 +
                       C102 * C4445 + C91 * C4449) *
                          C139403) *
                         C139442 * C139457 * C139377) *
                        C139552 +
                    (((C100 * C1764 + C89 * C1772 + C101 * C1765 + C90 * C1773 +
                       C102 * C1766 + C91 * C1774) *
                          C9617 -
                      ((C102 * C248 + C91 * C254 + C101 * C247 + C90 * C253 +
                        C100 * C246 + C89 * C252) *
                           C9466 +
                       (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 +
                        C100 * C108 + C89 * C114) *
                           C9616) +
                      (C100 * C1964 + C89 * C1972 + C101 * C1963 + C90 * C1971 +
                       C102 * C1969 + C91 * C1977) *
                          C139403) *
                         C139442 * C139457 * C139560 +
                     ((C100 * C828 + C89 * C836 + C101 * C829 + C90 * C837 +
                       C102 * C830 + C91 * C838) *
                          C9616 +
                      (C100 * C1028 + C89 * C1036 + C101 * C1027 + C90 * C1035 +
                       C102 * C1033 + C91 * C1041) *
                          C9466 -
                      (C102 * C4226 + C91 * C4233 + C101 * C4225 + C90 * C4229 +
                       C100 * C4224 + C89 * C4228) *
                          C9617 -
                      (C102 * C4446 + C91 * C4450 + C101 * C4445 + C90 * C4449 +
                       C100 * C4444 + C89 * C4448) *
                          C139403) *
                         C139442 * C139457 * C139377) *
                        C139305)) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[10] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C307 * C107 + C139442 * C308) * C137108 +
                       (C307 * C116 + C139442 * C314) * C139552 -
                       C337 * C137101 - C338 * C139305) *
                          C139457 * C89 +
                      (C337 * C137108 + C338 * C139552 - C339 * C137101 -
                       C340 * C139305) *
                          C139457 * C90 +
                      (C339 * C137108 + C340 * C139552 - C341 * C137101 -
                       C342 * C139305) *
                          C139457 * C91) *
                         C9466 +
                     ((C2086 * C137101 -
                       ((C307 * C1777 + C139442 * C2061) * C139552 +
                        (C307 * C1767 + C139442 * C2054) * C137108) +
                       C2087 * C139305) *
                          C139457 * C89 +
                      (C2088 * C137101 - (C2087 * C139552 + C2086 * C137108) +
                       C2089 * C139305) *
                          C139457 * C90 +
                      (C3692 * C137101 - (C2089 * C139552 + C2088 * C137108) +
                       C3693 * C139305) *
                          C139457 * C91) *
                         C139403) *
                        C139560 +
                    (((C1150 * C137101 -
                       ((C307 * C841 + C139442 * C1125) * C139552 +
                        (C307 * C831 + C139442 * C1118) * C137108) +
                       C1151 * C139305) *
                          C139457 * C89 +
                      (C1152 * C137101 - (C1151 * C139552 + C1150 * C137108) +
                       C1153 * C139305) *
                          C139457 * C90 +
                      (C2944 * C137101 - (C1153 * C139552 + C1152 * C137108) +
                       C2945 * C139305) *
                          C139457 * C91) *
                         C9466 +
                     (((C307 * C4223 + C139442 * C4549) * C137108 +
                       (C307 * C4230 + C139442 * C4553) * C139552 -
                       C4566 * C137101 - C4567 * C139305) *
                          C139457 * C89 +
                      (C4566 * C137108 + C4567 * C139552 - C4568 * C137101 -
                       C4569 * C139305) *
                          C139457 * C90 +
                      (C4568 * C137108 + C4569 * C139552 -
                       (C307 * C4226 + C139442 * C4552) * C137101 -
                       (C307 * C4234 + C139442 * C4556) * C139305) *
                          C139457 * C91) *
                         C139403) *
                        C139377)) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[10] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139442 * C308) * C2783 +
             (C307 * C182 + C139442 * C394) * C139560 -
             (C307 * C831 + C139442 * C1118) * C2784 -
             (C307 * C939 + C139442 * C1231) * C139377) *
                C139457 * C89 +
            (C3021 + C3022 - C3023 - C3024) * C139457 * C90 + C3039 * C91) *
               C139552 +
           ((C3023 - (C3022 + C3021) + C3024) * C139457 * C89 +
            (C3027 - (C3026 + C3025) + C3028) * C139457 * C90 +
            (C3029 - (C3030 + C3031) + C3037) * C139457 * C91) *
               C139305) *
              C9466 +
          ((((C307 * C4223 + C139442 * C4549) * C2784 -
             ((C307 * C1873 + C139442 * C2170) * C139560 +
              (C307 * C1767 + C139442 * C2054) * C2783) +
             (C307 * C4337 + C139442 * C4667) * C139377) *
                C139457 * C89 +
            (C4672 - (C4673 + C4674) + C4684) * C139457 * C90 +
            (C4677 - (C4678 + C4679) + C4685) * C139457 * C91) *
               C139552 +
           ((C4674 + C4673 - C4672 - C4684) * C139457 * C89 +
            (C4679 + C4678 - C4677 - C4685) * C139457 * C90 +
            (C3692 * C2783 + C3773 * C139560 -
             (C307 * C4226 + C139442 * C4552) * C2784 -
             (C307 * C4340 + C139442 * C4670) * C139377) *
                C139457 * C91) *
               C139305) *
              C139403)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[10] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139442 * C308) * C9616 +
             (C307 * C245 + C139442 * C474) * C9466 -
             (C307 * C1767 + C139442 * C2054) * C9617 -
             (C307 * C1965 + C139442 * C2269) * C139403) *
                C139457 * C89 +
            (C9841 + C9842 - C9843 - C9844) * C139457 * C90 + C9856 * C91) *
               C139560 +
           (((C307 * C4223 + C139442 * C4549) * C9617 -
             ((C307 * C1029 + C139442 * C1339) * C9466 +
              (C307 * C831 + C139442 * C1118) * C9616) +
             (C307 * C4443 + C139442 * C4783) * C139403) *
                C139457 * C89 +
            (C11854 - (C11855 + C11856) + C11857) * C139457 * C90 +
            (C11858 - (C11859 + C11860) + C11861) * C139457 * C91) *
               C139377) *
              C139552 +
          (((C9843 - (C9842 + C9841) + C9844) * C139457 * C89 +
            (C9847 - (C9846 + C9845) + C9848) * C139457 * C90 +
            (C9849 - (C9850 + C9851) + C9852) * C139457 * C91) *
               C139560 +
           ((C11856 + C11855 - C11854 - C11857) * C139457 * C89 +
            (C11860 + C11859 - C11858 - C11861) * C139457 * C90 +
            (C2944 * C9616 + C3120 * C9466 -
             (C307 * C4226 + C139442 * C4552) * C9617 -
             (C307 * C4446 + C139442 * C4786) * C139403) *
                C139457 * C91) *
               C139377) *
              C139305)) /
        (p * q * std::sqrt(p + q));
    d2eezx[10] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C554 * C107 + C139457 * C555) * C137108 +
                       (C554 * C116 + C139457 * C561) * C139552 -
                       C584 * C137101 - C585 * C139305) *
                          C89 +
                      (C584 * C137108 + C585 * C139552 - C586 * C137101 -
                       C587 * C139305) *
                          C90 +
                      (C586 * C137108 + C587 * C139552 - C588 * C137101 -
                       C589 * C139305) *
                          C91) *
                         C139442 * C9466 +
                     ((C2408 * C137101 -
                       ((C554 * C1777 + C139457 * C2383) * C139552 +
                        (C554 * C1767 + C139457 * C2376) * C137108) +
                       C2409 * C139305) *
                          C89 +
                      (C2410 * C137101 - (C2409 * C139552 + C2408 * C137108) +
                       C2411 * C139305) *
                          C90 +
                      (C3950 * C137101 - (C2411 * C139552 + C2410 * C137108) +
                       C3951 * C139305) *
                          C91) *
                         C139442 * C139403) *
                        C139560 +
                    (((C1472 * C137101 -
                       ((C554 * C841 + C139457 * C1447) * C139552 +
                        (C554 * C831 + C139457 * C1440) * C137108) +
                       C1473 * C139305) *
                          C89 +
                      (C1474 * C137101 - (C1473 * C139552 + C1472 * C137108) +
                       C1475 * C139305) *
                          C90 +
                      (C3202 * C137101 - (C1475 * C139552 + C1474 * C137108) +
                       C3203 * C139305) *
                          C91) *
                         C139442 * C9466 +
                     (((C554 * C4223 + C139457 * C4899) * C137108 +
                       (C554 * C4230 + C139457 * C4903) * C139552 -
                       C4916 * C137101 - C4917 * C139305) *
                          C89 +
                      (C4916 * C137108 + C4917 * C139552 - C4918 * C137101 -
                       C4919 * C139305) *
                          C90 +
                      (C4918 * C137108 + C4919 * C139552 -
                       (C554 * C4226 + C139457 * C4902) * C137101 -
                       (C554 * C4234 + C139457 * C4906) * C139305) *
                          C91) *
                         C139442 * C139403) *
                        C139377)) /
                  (p * q * std::sqrt(p + q));
    d2eezy[10] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C554 * C107 + C139457 * C555) * C2783 +
                       (C554 * C182 + C139457 * C641) * C139560 -
                       (C554 * C831 + C139457 * C1440) * C2784 -
                       (C554 * C939 + C139457 * C1553) * C139377) *
                          C89 +
                      (C3279 + C3280 - C3281 - C3282) * C90 + C3296 * C91) *
                         C139442 * C139552 +
                     ((C3281 - (C3280 + C3279) + C3282) * C89 +
                      (C3285 - (C3284 + C3283) + C3286) * C90 +
                      (C3287 - (C3288 + C3289) + C3295) * C91) *
                         C139442 * C139305) *
                        C9466 +
                    ((((C554 * C4223 + C139457 * C4899) * C2784 -
                       ((C554 * C1873 + C139457 * C2492) * C139560 +
                        (C554 * C1767 + C139457 * C2376) * C2783) +
                       (C554 * C4337 + C139457 * C5017) * C139377) *
                          C89 +
                      (C5022 - (C5023 + C5024) + C5034) * C90 +
                      (C5027 - (C5028 + C5029) + C5035) * C91) *
                         C139442 * C139552 +
                     ((C5024 + C5023 - C5022 - C5034) * C89 +
                      (C5029 + C5028 - C5027 - C5035) * C90 +
                      (C3950 * C2783 + C4031 * C139560 -
                       (C554 * C4226 + C139457 * C4902) * C2784 -
                       (C554 * C4340 + C139457 * C5020) * C139377) *
                          C91) *
                         C139442 * C139305) *
                        C139403)) /
                  (p * q * std::sqrt(p + q));
    d2eezz[10] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139457 * C555) * C9616 +
             (C554 * C245 + C139457 * C719) * C9466 -
             (C554 * C1767 + C139457 * C2376) * C9617 -
             (C554 * C1965 + C139457 * C2591) * C139403) *
                C89 +
            (C10079 + C10080 - C10081 - C10082) * C90 + C10093 * C91) *
               C139442 * C139560 +
           (((C554 * C4223 + C139457 * C4899) * C9617 -
             ((C554 * C1029 + C139457 * C1661) * C9466 +
              (C554 * C831 + C139457 * C1440) * C9616) +
             (C554 * C4443 + C139457 * C5133) * C139403) *
                C89 +
            (C12156 - (C12157 + C12158) + C12159) * C90 +
            (C12160 - (C12161 + C12162) + C12163) * C91) *
               C139442 * C139377) *
              C139552 +
          (((C10081 - (C10080 + C10079) + C10082) * C89 +
            (C10085 - (C10084 + C10083) + C10086) * C90 +
            (C10087 - (C10088 + C10089) + C10090) * C91) *
               C139442 * C139560 +
           ((C12158 + C12157 - C12156 - C12159) * C89 +
            (C12162 + C12161 - C12160 - C12163) * C90 +
            (C3202 * C9616 + C3376 * C9466 -
             (C554 * C4226 + C139457 * C4902) * C9617 -
             (C554 * C4446 + C139457 * C5136) * C139403) *
                C91) *
               C139442 * C139377) *
              C139305)) /
        (p * q * std::sqrt(p + q));
    d2eexx[11] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 +
                       C102 * C109 + C91 * C115) *
                          C5913 +
                      (C100 * C116 + C89 * C125 + C101 * C117 + C90 * C126 +
                       C102 * C118 + C91 * C127) *
                          C139300) *
                         C139442 * C139457 * C139593 -
                     ((C102 * C1775 + C91 * C1788 + C101 * C1776 + C90 * C1789 +
                       C100 * C1777 + C89 * C1790) *
                          C139300 +
                      (C102 * C1765 + C91 * C1773 + C101 * C1764 + C90 * C1772 +
                       C100 * C1767 + C89 * C1778) *
                          C5913) *
                         C139442 * C139457 * C139594 +
                     ((C100 * C1768 + C89 * C1780 + C101 * C1769 + C90 * C1781 +
                       C102 * C1770 + C91 * C1782) *
                          C5913 +
                      (C100 * C1783 + C89 * C1792 + C101 * C1784 + C90 * C1793 +
                       C102 * C1785 + C91 * C1794) *
                          C139300) *
                         C139442 * C139457 * C12239) *
                        C139560 +
                    (((C100 * C4223 + C89 * C4227 + C101 * C4224 + C90 * C4228 +
                       C102 * C4225 + C91 * C4229) *
                          C5913 +
                      (C100 * C4230 + C89 * C4235 + C101 * C4231 + C90 * C4236 +
                       C102 * C4232 + C91 * C4237) *
                          C139300) *
                         C139442 * C139457 * C139594 -
                     ((C102 * C839 + C91 * C852 + C101 * C840 + C90 * C853 +
                       C100 * C841 + C89 * C854) *
                          C139300 +
                      (C102 * C829 + C91 * C837 + C101 * C828 + C90 * C836 +
                       C100 * C831 + C89 * C842) *
                          C5913) *
                         C139442 * C139457 * C139593 -
                     ((C102 * C6443 + C91 * C6449 + C101 * C6444 + C90 * C6450 +
                       C100 * C6445 + C89 * C6451) *
                          C139300 +
                      (C102 * C6440 + C91 * C6446 + C101 * C6441 + C90 * C6447 +
                       C100 * C6442 + C89 * C6448) *
                          C5913) *
                         C139442 * C139457 * C12239) *
                        C139377)) /
                  (p * q * std::sqrt(p + q));
    d2eexy[11] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 +
                      C102 * C109 + C91 * C115) *
                         C2783 +
                     (C100 * C182 + C89 * C188 + C101 * C183 + C90 * C189 +
                      C102 * C184 + C91 * C190) *
                         C139560 -
                     (C102 * C829 + C91 * C837 + C101 * C828 + C90 * C836 +
                      C100 * C831 + C89 * C842) *
                         C2784 -
                     (C102 * C937 + C91 * C945 + C101 * C938 + C90 * C946 +
                      C100 * C939 + C89 * C947) *
                         C139377) *
                        C139442 * C139457 * C139300 * C139593 +
                    ((C100 * C4223 + C89 * C4227 + C101 * C4224 + C90 * C4228 +
                      C102 * C4225 + C91 * C4229) *
                         C2784 -
                     ((C102 * C1871 + C91 * C1879 + C101 * C1870 + C90 * C1878 +
                       C100 * C1873 + C89 * C1881) *
                          C139560 +
                      (C102 * C1765 + C91 * C1773 + C101 * C1764 + C90 * C1772 +
                       C100 * C1767 + C89 * C1778) *
                          C2783) +
                     (C100 * C4337 + C89 * C4341 + C101 * C4338 + C90 * C4342 +
                      C102 * C4339 + C91 * C4343) *
                         C139377) *
                        C139442 * C139457 * C139300 * C139594 +
                    ((C100 * C1768 + C89 * C1780 + C101 * C1769 + C90 * C1781 +
                      C102 * C1770 + C91 * C1782) *
                         C2783 +
                     (C100 * C1874 + C89 * C1882 + C101 * C1875 + C90 * C1883 +
                      C102 * C1876 + C91 * C1884) *
                         C139560 -
                     (C102 * C6440 + C91 * C6446 + C101 * C6441 + C90 * C6447 +
                      C100 * C6442 + C89 * C6448) *
                         C2784 -
                     (C102 * C6526 + C91 * C6529 + C101 * C6527 + C90 * C6530 +
                      C100 * C6528 + C89 * C6531) *
                         C139377) *
                        C139442 * C139457 * C139300 * C12239)) /
                  (p * q * std::sqrt(p + q));
    d2eexz[11] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 +
                      C102 * C109 + C91 * C115) *
                         C12388 +
                     (C100 * C245 + C89 * C251 + C101 * C246 + C90 * C252 +
                      C102 * C247 + C91 * C253) *
                         C139593 -
                     (C102 * C1765 + C91 * C1773 + C101 * C1764 + C90 * C1772 +
                      C100 * C1767 + C89 * C1778) *
                         C12389 -
                     (C102 * C1963 + C91 * C1971 + C101 * C1964 + C90 * C1972 +
                      C100 * C1965 + C89 * C1973) *
                         C139594 +
                     (C100 * C1768 + C89 * C1780 + C101 * C1769 + C90 * C1781 +
                      C102 * C1770 + C91 * C1782) *
                         C12390 +
                     (C100 * C1966 + C89 * C1974 + C101 * C1967 + C90 * C1975 +
                      C102 * C1968 + C91 * C1976) *
                         C12239) *
                        C139442 * C139457 * C139560 +
                    ((C100 * C4223 + C89 * C4227 + C101 * C4224 + C90 * C4228 +
                      C102 * C4225 + C91 * C4229) *
                         C12389 -
                     ((C102 * C1027 + C91 * C1035 + C101 * C1028 + C90 * C1036 +
                       C100 * C1029 + C89 * C1037) *
                          C139593 +
                      (C102 * C829 + C91 * C837 + C101 * C828 + C90 * C836 +
                       C100 * C831 + C89 * C842) *
                          C12388) +
                     (C100 * C4443 + C89 * C4447 + C101 * C4444 + C90 * C4448 +
                      C102 * C4445 + C91 * C4449) *
                         C139594 -
                     (C102 * C6440 + C91 * C6446 + C101 * C6441 + C90 * C6447 +
                      C100 * C6442 + C89 * C6448) *
                         C12390 -
                     (C102 * C6606 + C91 * C6609 + C101 * C6607 + C90 * C6610 +
                      C100 * C6608 + C89 * C6611) *
                         C12239) *
                        C139442 * C139457 * C139377) *
                   C139300) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[11] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C307 * C107 + C139442 * C308) * C5913 +
                       (C307 * C116 + C139442 * C314) * C139300) *
                          C139457 * C89 +
                      (C337 * C5913 + C338 * C139300) * C139457 * C90 +
                      (C339 * C5913 + C340 * C139300) * C139457 * C91) *
                         C139593 -
                     ((C2089 * C139300 + C2088 * C5913) * C139457 * C91 +
                      (C2087 * C139300 + C2086 * C5913) * C139457 * C90 +
                      ((C307 * C1777 + C139442 * C2061) * C139300 +
                       (C307 * C1767 + C139442 * C2054) * C5913) *
                          C139457 * C89) *
                         C139594 +
                     (((C307 * C1768 + C139442 * C2057) * C5913 +
                       (C307 * C1783 + C139442 * C2065) * C139300) *
                          C139457 * C89 +
                      (C2090 * C5913 + C2091 * C139300) * C139457 * C90 +
                      (C2092 * C5913 + C2093 * C139300) * C139457 * C91) *
                         C12239) *
                        C139560 +
                    ((((C307 * C4223 + C139442 * C4549) * C5913 +
                       (C307 * C4230 + C139442 * C4553) * C139300) *
                          C139457 * C89 +
                      (C4566 * C5913 + C4567 * C139300) * C139457 * C90 +
                      (C4568 * C5913 + C4569 * C139300) * C139457 * C91) *
                         C139594 -
                     ((C1153 * C139300 + C1152 * C5913) * C139457 * C91 +
                      (C1151 * C139300 + C1150 * C5913) * C139457 * C90 +
                      ((C307 * C841 + C139442 * C1125) * C139300 +
                       (C307 * C831 + C139442 * C1118) * C5913) *
                          C139457 * C89) *
                         C139593 -
                     (((C307 * C6443 + C139442 * C6689) * C139300 +
                       (C307 * C6440 + C139442 * C6686) * C5913) *
                          C139457 * C91 +
                      ((C307 * C6444 + C139442 * C6690) * C139300 +
                       (C307 * C6441 + C139442 * C6687) * C5913) *
                          C139457 * C90 +
                      ((C307 * C6445 + C139442 * C6691) * C139300 +
                       (C307 * C6442 + C139442 * C6688) * C5913) *
                          C139457 * C89) *
                         C12239) *
                        C139377)) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[11] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139442 * C308) * C2783 +
            (C307 * C182 + C139442 * C394) * C139560 -
            (C307 * C831 + C139442 * C1118) * C2784 -
            (C307 * C939 + C139442 * C1231) * C139377) *
               C139457 * C89 +
           (C3021 + C3022 - C3023 - C3024) * C139457 * C90 + C3039 * C91) *
              C139300 * C139593 +
          (((C307 * C4223 + C139442 * C4549) * C2784 -
            ((C307 * C1873 + C139442 * C2170) * C139560 +
             (C307 * C1767 + C139442 * C2054) * C2783) +
            (C307 * C4337 + C139442 * C4667) * C139377) *
               C139457 * C89 +
           (C4672 - (C4673 + C4674) + C4684) * C139457 * C90 +
           (C4677 - (C4678 + C4679) + C4685) * C139457 * C91) *
              C139300 * C139594 +
          (((C307 * C1768 + C139442 * C2057) * C2783 +
            (C307 * C1874 + C139442 * C2171) * C139560 -
            (C307 * C6442 + C139442 * C6688) * C2784 -
            (C307 * C6528 + C139442 * C6766) * C139377) *
               C139457 * C89 +
           (C2090 * C2783 + C2190 * C139560 -
            (C307 * C6441 + C139442 * C6687) * C2784 -
            (C307 * C6527 + C139442 * C6767) * C139377) *
               C139457 * C90 +
           (C2092 * C2783 + C2191 * C139560 -
            (C307 * C6440 + C139442 * C6686) * C2784 -
            (C307 * C6526 + C139442 * C6768) * C139377) *
               C139457 * C91) *
              C139300 * C12239)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[11] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139442 * C308) * C12388 +
            (C307 * C245 + C139442 * C474) * C139593 -
            (C307 * C1767 + C139442 * C2054) * C12389 -
            (C307 * C1965 + C139442 * C2269) * C139594 +
            (C307 * C1768 + C139442 * C2057) * C12390 +
            (C307 * C1966 + C139442 * C2270) * C12239) *
               C139457 * C89 +
           (C12614 + C12615 - C12616 - C12617 + C12618 + C12619) * C139457 *
               C90 +
           (C12620 + C12621 - C12622 - C12623 + C12624 + C12625) * C139457 *
               C91) *
              C139560 +
          (((C307 * C4223 + C139442 * C4549) * C12389 -
            ((C307 * C1029 + C139442 * C1339) * C139593 +
             (C307 * C831 + C139442 * C1118) * C12388) +
            (C307 * C4443 + C139442 * C4783) * C139594 -
            (C307 * C6442 + C139442 * C6688) * C12390 -
            (C307 * C6608 + C139442 * C6843) * C12239) *
               C139457 * C89 +
           (C4566 * C12389 - (C1359 * C139593 + C1150 * C12388) +
            C4798 * C139594 - (C307 * C6441 + C139442 * C6687) * C12390 -
            (C307 * C6607 + C139442 * C6844) * C12239) *
               C139457 * C90 +
           (C4568 * C12389 - (C1358 * C139593 + C1152 * C12388) +
            C4799 * C139594 - (C307 * C6440 + C139442 * C6686) * C12390 -
            (C307 * C6606 + C139442 * C6845) * C12239) *
               C139457 * C91) *
              C139377) *
         C139300) /
        (p * q * std::sqrt(p + q));
    d2eezx[11] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C554 * C107 + C139457 * C555) * C5913 +
                       (C554 * C116 + C139457 * C561) * C139300) *
                          C89 +
                      (C584 * C5913 + C585 * C139300) * C90 +
                      (C586 * C5913 + C587 * C139300) * C91) *
                         C139442 * C139593 -
                     ((C2411 * C139300 + C2410 * C5913) * C91 +
                      (C2409 * C139300 + C2408 * C5913) * C90 +
                      ((C554 * C1777 + C139457 * C2383) * C139300 +
                       (C554 * C1767 + C139457 * C2376) * C5913) *
                          C89) *
                         C139442 * C139594 +
                     (((C554 * C1768 + C139457 * C2379) * C5913 +
                       (C554 * C1783 + C139457 * C2387) * C139300) *
                          C89 +
                      (C2412 * C5913 + C2413 * C139300) * C90 +
                      (C2414 * C5913 + C2415 * C139300) * C91) *
                         C139442 * C12239) *
                        C139560 +
                    ((((C554 * C4223 + C139457 * C4899) * C5913 +
                       (C554 * C4230 + C139457 * C4903) * C139300) *
                          C89 +
                      (C4916 * C5913 + C4917 * C139300) * C90 +
                      (C4918 * C5913 + C4919 * C139300) * C91) *
                         C139442 * C139594 -
                     ((C1475 * C139300 + C1474 * C5913) * C91 +
                      (C1473 * C139300 + C1472 * C5913) * C90 +
                      ((C554 * C841 + C139457 * C1447) * C139300 +
                       (C554 * C831 + C139457 * C1440) * C5913) *
                          C89) *
                         C139442 * C139593 -
                     (((C554 * C6443 + C139457 * C6923) * C139300 +
                       (C554 * C6440 + C139457 * C6920) * C5913) *
                          C91 +
                      ((C554 * C6444 + C139457 * C6924) * C139300 +
                       (C554 * C6441 + C139457 * C6921) * C5913) *
                          C90 +
                      ((C554 * C6445 + C139457 * C6925) * C139300 +
                       (C554 * C6442 + C139457 * C6922) * C5913) *
                          C89) *
                         C139442 * C12239) *
                        C139377)) /
                  (p * q * std::sqrt(p + q));
    d2eezy[11] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C554 * C107 + C139457 * C555) * C2783 +
                      (C554 * C182 + C139457 * C641) * C139560 -
                      (C554 * C831 + C139457 * C1440) * C2784 -
                      (C554 * C939 + C139457 * C1553) * C139377) *
                         C89 +
                     (C3279 + C3280 - C3281 - C3282) * C90 + C3296 * C91) *
                        C139442 * C139300 * C139593 +
                    (((C554 * C4223 + C139457 * C4899) * C2784 -
                      ((C554 * C1873 + C139457 * C2492) * C139560 +
                       (C554 * C1767 + C139457 * C2376) * C2783) +
                      (C554 * C4337 + C139457 * C5017) * C139377) *
                         C89 +
                     (C5022 - (C5023 + C5024) + C5034) * C90 +
                     (C5027 - (C5028 + C5029) + C5035) * C91) *
                        C139442 * C139300 * C139594 +
                    (((C554 * C1768 + C139457 * C2379) * C2783 +
                      (C554 * C1874 + C139457 * C2493) * C139560 -
                      (C554 * C6442 + C139457 * C6922) * C2784 -
                      (C554 * C6528 + C139457 * C7000) * C139377) *
                         C89 +
                     (C2412 * C2783 + C2512 * C139560 -
                      (C554 * C6441 + C139457 * C6921) * C2784 -
                      (C554 * C6527 + C139457 * C7001) * C139377) *
                         C90 +
                     (C2414 * C2783 + C2513 * C139560 -
                      (C554 * C6440 + C139457 * C6920) * C2784 -
                      (C554 * C6526 + C139457 * C7002) * C139377) *
                         C91) *
                        C139442 * C139300 * C12239)) /
                  (p * q * std::sqrt(p + q));
    d2eezz[11] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C139457 * C555) * C12388 +
            (C554 * C245 + C139457 * C719) * C139593 -
            (C554 * C1767 + C139457 * C2376) * C12389 -
            (C554 * C1965 + C139457 * C2591) * C139594 +
            (C554 * C1768 + C139457 * C2379) * C12390 +
            (C554 * C1966 + C139457 * C2592) * C12239) *
               C89 +
           (C12848 + C12849 - C12850 - C12851 + C12852 + C12853) * C90 +
           (C12854 + C12855 - C12856 - C12857 + C12858 + C12859) * C91) *
              C139442 * C139560 +
          (((C554 * C4223 + C139457 * C4899) * C12389 -
            ((C554 * C1029 + C139457 * C1661) * C139593 +
             (C554 * C831 + C139457 * C1440) * C12388) +
            (C554 * C4443 + C139457 * C5133) * C139594 -
            (C554 * C6442 + C139457 * C6922) * C12390 -
            (C554 * C6608 + C139457 * C7077) * C12239) *
               C89 +
           (C4916 * C12389 - (C1681 * C139593 + C1472 * C12388) +
            C5148 * C139594 - (C554 * C6441 + C139457 * C6921) * C12390 -
            (C554 * C6607 + C139457 * C7078) * C12239) *
               C90 +
           (C4918 * C12389 - (C1680 * C139593 + C1474 * C12388) +
            C5149 * C139594 - (C554 * C6440 + C139457 * C6920) * C12390 -
            (C554 * C6606 + C139457 * C7079) * C12239) *
               C91) *
              C139442 * C139377) *
         C139300) /
        (p * q * std::sqrt(p + q));
    d2eexx[12] +=
        (-std::pow(Pi, 2.5) * ((((C100 * C107 + C89 * C113 + C101 * C108 +
                                  C90 * C114 + C102 * C109 + C91 * C115) *
                                     C5913 +
                                 (C100 * C116 + C89 * C125 + C101 * C117 +
                                  C90 * C126 + C102 * C118 + C91 * C127) *
                                     C139300) *
                                    C139442 * C139457 * C9466 -
                                ((C102 * C1775 + C91 * C1788 + C101 * C1776 +
                                  C90 * C1789 + C100 * C1777 + C89 * C1790) *
                                     C139300 +
                                 (C102 * C1765 + C91 * C1773 + C101 * C1764 +
                                  C90 * C1772 + C100 * C1767 + C89 * C1778) *
                                     C5913) *
                                    C139442 * C139457 * C139403) *
                                   C823 +
                               (((C100 * C4223 + C89 * C4227 + C101 * C4224 +
                                  C90 * C4228 + C102 * C4225 + C91 * C4229) *
                                     C5913 +
                                 (C100 * C4230 + C89 * C4235 + C101 * C4231 +
                                  C90 * C4236 + C102 * C4232 + C91 * C4237) *
                                     C139300) *
                                    C139442 * C139457 * C139403 -
                                ((C102 * C839 + C91 * C852 + C101 * C840 +
                                  C90 * C853 + C100 * C841 + C89 * C854) *
                                     C139300 +
                                 (C102 * C829 + C91 * C837 + C101 * C828 +
                                  C90 * C836 + C100 * C831 + C89 * C842) *
                                     C5913) *
                                    C139442 * C139457 * C9466) *
                                   C824 +
                               (((C100 * C832 + C89 * C844 + C101 * C833 +
                                  C90 * C845 + C102 * C834 + C91 * C846) *
                                     C5913 +
                                 (C100 * C847 + C89 * C856 + C101 * C848 +
                                  C90 * C857 + C102 * C849 + C91 * C858) *
                                     C139300) *
                                    C139442 * C139457 * C9466 -
                                ((C102 * C8755 + C91 * C8761 + C101 * C8756 +
                                  C90 * C8762 + C100 * C8757 + C89 * C8763) *
                                     C139300 +
                                 (C102 * C8752 + C91 * C8758 + C101 * C8753 +
                                  C90 * C8759 + C100 * C8754 + C89 * C8760) *
                                     C5913) *
                                    C139442 * C139457 * C139403) *
                                   C825)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 + C102 * C109 +
            C91 * C115) *
               C5230 +
           (C100 * C116 + C89 * C125 + C101 * C117 + C90 * C126 + C102 * C118 +
            C91 * C127) *
               C5225 -
           (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 + C100 * C108 +
            C89 * C114) *
               C5231 -
           (C102 * C120 + C91 * C128 + C101 * C118 + C90 * C127 + C100 * C117 +
            C89 * C126) *
               C5226 +
           (C100 * C109 + C89 * C115 + C101 * C110 + C90 * C119 + C102 * C111 +
            C91 * C121) *
               C5232 +
           (C100 * C118 + C89 * C127 + C101 * C120 + C90 * C128 + C102 * C122 +
            C91 * C129) *
               C5227) *
              C139442 * C139457 * C9466 +
          ((C100 * C1764 + C89 * C1772 + C101 * C1765 + C90 * C1773 +
            C102 * C1766 + C91 * C1774) *
               C5231 -
           ((C102 * C1775 + C91 * C1788 + C101 * C1776 + C90 * C1789 +
             C100 * C1777 + C89 * C1790) *
                C5225 +
            (C102 * C1765 + C91 * C1773 + C101 * C1764 + C90 * C1772 +
             C100 * C1767 + C89 * C1778) *
                C5230) +
           (C100 * C1776 + C89 * C1789 + C101 * C1775 + C90 * C1788 +
            C102 * C1779 + C91 * C1791) *
               C5226 -
           (C102 * C3453 + C91 * C3454 + C101 * C1766 + C90 * C1774 +
            C100 * C1765 + C89 * C1773) *
               C5232 -
           (C102 * C3455 + C91 * C3456 + C101 * C1779 + C90 * C1791 +
            C100 * C1775 + C89 * C1788) *
               C5227) *
              C139442 * C139457 * C139403) *
         C139328) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 + C102 * C109 +
            C91 * C115) *
               C5913 +
           (C100 * C116 + C89 * C125 + C101 * C117 + C90 * C126 + C102 * C118 +
            C91 * C127) *
               C139300) *
              C139442 * C139457 * C10809 -
          ((C102 * C1775 + C91 * C1788 + C101 * C1776 + C90 * C1789 +
            C100 * C1777 + C89 * C1790) *
               C139300 +
           (C102 * C1765 + C91 * C1773 + C101 * C1764 + C90 * C1772 +
            C100 * C1767 + C89 * C1778) *
               C5913) *
              C139442 * C139457 * C10810 +
          ((C100 * C1768 + C89 * C1780 + C101 * C1769 + C90 * C1781 +
            C102 * C1770 + C91 * C1782) *
               C5913 +
           (C100 * C1783 + C89 * C1792 + C101 * C1784 + C90 * C1793 +
            C102 * C1785 + C91 * C1794) *
               C139300) *
              C139442 * C139457 * C10811 -
          ((C102 * C10816 + C91 * C10822 + C101 * C10817 + C90 * C10823 +
            C100 * C10818 + C89 * C10824) *
               C139300 +
           (C102 * C10813 + C91 * C10819 + C101 * C10814 + C90 * C10820 +
            C100 * C10815 + C89 * C10821) *
               C5913) *
              C139442 * C139457 * C10812) *
         C139328) /
            (p * q * std::sqrt(p + q));
    d2eexy[12] +=
        (-std::pow(Pi, 2.5) * (((C100 * C107 + C89 * C113 + C101 * C108 +
                                 C90 * C114 + C102 * C109 + C91 * C115) *
                                    C934 +
                                (C100 * C182 + C89 * C188 + C101 * C183 +
                                 C90 * C189 + C102 * C184 + C91 * C190) *
                                    C823 -
                                (C102 * C829 + C91 * C837 + C101 * C828 +
                                 C90 * C836 + C100 * C831 + C89 * C842) *
                                    C935 -
                                (C102 * C937 + C91 * C945 + C101 * C938 +
                                 C90 * C946 + C100 * C939 + C89 * C947) *
                                    C824 +
                                (C100 * C832 + C89 * C844 + C101 * C833 +
                                 C90 * C845 + C102 * C834 + C91 * C846) *
                                    C936 +
                                (C100 * C940 + C89 * C948 + C101 * C941 +
                                 C90 * C949 + C102 * C942 + C91 * C950) *
                                    C825) *
                                   C139442 * C139457 * C139300 * C9466 +
                               ((C100 * C4223 + C89 * C4227 + C101 * C4224 +
                                 C90 * C4228 + C102 * C4225 + C91 * C4229) *
                                    C935 -
                                ((C102 * C1871 + C91 * C1879 + C101 * C1870 +
                                  C90 * C1878 + C100 * C1873 + C89 * C1881) *
                                     C823 +
                                 (C102 * C1765 + C91 * C1773 + C101 * C1764 +
                                  C90 * C1772 + C100 * C1767 + C89 * C1778) *
                                     C934) +
                                (C100 * C4337 + C89 * C4341 + C101 * C4338 +
                                 C90 * C4342 + C102 * C4339 + C91 * C4343) *
                                    C824 -
                                (C102 * C8752 + C91 * C8758 + C101 * C8753 +
                                 C90 * C8759 + C100 * C8754 + C89 * C8760) *
                                    C936 -
                                (C102 * C8838 + C91 * C8841 + C101 * C8839 +
                                 C90 * C8842 + C100 * C8840 + C89 * C8843) *
                                    C825) *
                                   C139442 * C139457 * C139300 * C139403)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * ((((C100 * C107 + C89 * C113 + C101 * C108 +
                                 C90 * C114 + C102 * C109 + C91 * C115) *
                                    C181 +
                                (C100 * C182 + C89 * C188 + C101 * C183 +
                                 C90 * C189 + C102 * C184 + C91 * C190) *
                                    C139328) *
                                   C139442 * C139457 * C5225 -
                               ((C102 * C185 + C91 * C191 + C101 * C184 +
                                 C90 * C190 + C100 * C183 + C89 * C189) *
                                    C139328 +
                                (C102 * C110 + C91 * C119 + C101 * C109 +
                                 C90 * C115 + C100 * C108 + C89 * C114) *
                                    C181) *
                                   C139442 * C139457 * C5226 +
                               ((C100 * C109 + C89 * C115 + C101 * C110 +
                                 C90 * C119 + C102 * C111 + C91 * C121) *
                                    C181 +
                                (C100 * C184 + C89 * C190 + C101 * C185 +
                                 C90 * C191 + C102 * C186 + C91 * C192) *
                                    C139328) *
                                   C139442 * C139457 * C5227) *
                                  C9466 +
                              (((C100 * C1764 + C89 * C1772 + C101 * C1765 +
                                 C90 * C1773 + C102 * C1766 + C91 * C1774) *
                                    C181 +
                                (C100 * C1870 + C89 * C1878 + C101 * C1871 +
                                 C90 * C1879 + C102 * C1872 + C91 * C1880) *
                                    C139328) *
                                   C139442 * C139457 * C5226 -
                               ((C102 * C1871 + C91 * C1879 + C101 * C1870 +
                                 C90 * C1878 + C100 * C1873 + C89 * C1881) *
                                    C139328 +
                                (C102 * C1765 + C91 * C1773 + C101 * C1764 +
                                 C90 * C1772 + C100 * C1767 + C89 * C1778) *
                                    C181) *
                                   C139442 * C139457 * C5225 -
                               ((C102 * C3531 + C91 * C3532 + C101 * C1872 +
                                 C90 * C1880 + C100 * C1871 + C89 * C1879) *
                                    C139328 +
                                (C102 * C3453 + C91 * C3454 + C101 * C1766 +
                                 C90 * C1774 + C100 * C1765 + C89 * C1773) *
                                    C181) *
                                   C139442 * C139457 * C5227) *
                                  C139403)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 + C102 * C109 +
            C91 * C115) *
               C181 +
           (C100 * C182 + C89 * C188 + C101 * C183 + C90 * C189 + C102 * C184 +
            C91 * C190) *
               C139328) *
              C139442 * C139457 * C139300 * C10809 -
          ((C102 * C1871 + C91 * C1879 + C101 * C1870 + C90 * C1878 +
            C100 * C1873 + C89 * C1881) *
               C139328 +
           (C102 * C1765 + C91 * C1773 + C101 * C1764 + C90 * C1772 +
            C100 * C1767 + C89 * C1778) *
               C181) *
              C139442 * C139457 * C139300 * C10810 +
          ((C100 * C1768 + C89 * C1780 + C101 * C1769 + C90 * C1781 +
            C102 * C1770 + C91 * C1782) *
               C181 +
           (C100 * C1874 + C89 * C1882 + C101 * C1875 + C90 * C1883 +
            C102 * C1876 + C91 * C1884) *
               C139328) *
              C139442 * C139457 * C139300 * C10811 -
          ((C102 * C10875 + C91 * C10878 + C101 * C10876 + C90 * C10879 +
            C100 * C10877 + C89 * C10880) *
               C139328 +
           (C102 * C10813 + C91 * C10819 + C101 * C10814 + C90 * C10820 +
            C100 * C10815 + C89 * C10821) *
               C181) *
              C139442 * C139457 * C139300 * C10812)) /
            (p * q * std::sqrt(p + q));
    d2eexz[12] +=
        (-std::pow(Pi, 2.5) *
         (((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 + C102 * C109 +
            C91 * C115) *
               C9616 +
           (C100 * C245 + C89 * C251 + C101 * C246 + C90 * C252 + C102 * C247 +
            C91 * C253) *
               C9466 -
           (C102 * C1765 + C91 * C1773 + C101 * C1764 + C90 * C1772 +
            C100 * C1767 + C89 * C1778) *
               C9617 -
           (C102 * C1963 + C91 * C1971 + C101 * C1964 + C90 * C1972 +
            C100 * C1965 + C89 * C1973) *
               C139403) *
              C139442 * C139457 * C823 +
          ((C100 * C4223 + C89 * C4227 + C101 * C4224 + C90 * C4228 +
            C102 * C4225 + C91 * C4229) *
               C9617 -
           ((C102 * C1027 + C91 * C1035 + C101 * C1028 + C90 * C1036 +
             C100 * C1029 + C89 * C1037) *
                C9466 +
            (C102 * C829 + C91 * C837 + C101 * C828 + C90 * C836 + C100 * C831 +
             C89 * C842) *
                C9616) +
           (C100 * C4443 + C89 * C4447 + C101 * C4444 + C90 * C4448 +
            C102 * C4445 + C91 * C4449) *
               C139403) *
              C139442 * C139457 * C824 +
          ((C100 * C832 + C89 * C844 + C101 * C833 + C90 * C845 + C102 * C834 +
            C91 * C846) *
               C9616 +
           (C100 * C1030 + C89 * C1038 + C101 * C1031 + C90 * C1039 +
            C102 * C1032 + C91 * C1040) *
               C9466 -
           (C102 * C8752 + C91 * C8758 + C101 * C8753 + C90 * C8759 +
            C100 * C8754 + C89 * C8760) *
               C9617 -
           (C102 * C8918 + C91 * C8921 + C101 * C8919 + C90 * C8922 +
            C100 * C8920 + C89 * C8923) *
               C139403) *
              C139442 * C139457 * C825) *
         C139300) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * (((C100 * C107 + C89 * C113 + C101 * C108 +
                                C90 * C114 + C102 * C109 + C91 * C115) *
                                   C9616 +
                               (C100 * C245 + C89 * C251 + C101 * C246 +
                                C90 * C252 + C102 * C247 + C91 * C253) *
                                   C9466 -
                               (C102 * C1765 + C91 * C1773 + C101 * C1764 +
                                C90 * C1772 + C100 * C1767 + C89 * C1778) *
                                   C9617 -
                               (C102 * C1963 + C91 * C1971 + C101 * C1964 +
                                C90 * C1972 + C100 * C1965 + C89 * C1973) *
                                   C139403) *
                                  C139442 * C139457 * C139328 * C5225 +
                              ((C100 * C1764 + C89 * C1772 + C101 * C1765 +
                                C90 * C1773 + C102 * C1766 + C91 * C1774) *
                                   C9617 -
                               ((C102 * C248 + C91 * C254 + C101 * C247 +
                                 C90 * C253 + C100 * C246 + C89 * C252) *
                                    C9466 +
                                (C102 * C110 + C91 * C119 + C101 * C109 +
                                 C90 * C115 + C100 * C108 + C89 * C114) *
                                    C9616) +
                               (C100 * C1964 + C89 * C1972 + C101 * C1963 +
                                C90 * C1971 + C102 * C1969 + C91 * C1977) *
                                   C139403) *
                                  C139442 * C139457 * C139328 * C5226 +
                              ((C100 * C109 + C89 * C115 + C101 * C110 +
                                C90 * C119 + C102 * C111 + C91 * C121) *
                                   C9616 +
                               (C100 * C247 + C89 * C253 + C101 * C248 +
                                C90 * C254 + C102 * C249 + C91 * C255) *
                                   C9466 -
                               (C102 * C3453 + C91 * C3454 + C101 * C1766 +
                                C90 * C1774 + C100 * C1765 + C89 * C1773) *
                                   C9617 -
                               (C102 * C3609 + C91 * C3610 + C101 * C1969 +
                                C90 * C1977 + C100 * C1963 + C89 * C1971) *
                                   C139403) *
                                  C139442 * C139457 * C139328 * C5227)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 + C102 * C109 +
           C91 * C115) *
              C10931 +
          (C100 * C245 + C89 * C251 + C101 * C246 + C90 * C252 + C102 * C247 +
           C91 * C253) *
              C10809 -
          (C102 * C1765 + C91 * C1773 + C101 * C1764 + C90 * C1772 +
           C100 * C1767 + C89 * C1778) *
              C10932 -
          (C102 * C1963 + C91 * C1971 + C101 * C1964 + C90 * C1972 +
           C100 * C1965 + C89 * C1973) *
              C10810 +
          (C100 * C1768 + C89 * C1780 + C101 * C1769 + C90 * C1781 +
           C102 * C1770 + C91 * C1782) *
              C10933 +
          (C100 * C1966 + C89 * C1974 + C101 * C1967 + C90 * C1975 +
           C102 * C1968 + C91 * C1976) *
              C10811 -
          (C102 * C10813 + C91 * C10819 + C101 * C10814 + C90 * C10820 +
           C100 * C10815 + C89 * C10821) *
              C10934 -
          (C102 * C10935 + C91 * C10938 + C101 * C10936 + C90 * C10939 +
           C100 * C10937 + C89 * C10940) *
              C10812) *
         C139442 * C139457 * C139328 * C139300) /
            (p * q * std::sqrt(p + q));
    d2eeyx[12] += (-std::pow(Pi, 2.5) *
                   (((((C307 * C107 + C139442 * C308) * C5913 +
                       (C307 * C116 + C139442 * C314) * C139300) *
                          C139457 * C89 +
                      (C337 * C5913 + C338 * C139300) * C139457 * C90 +
                      (C339 * C5913 + C340 * C139300) * C139457 * C91) *
                         C9466 -
                     ((C2089 * C139300 + C2088 * C5913) * C139457 * C91 +
                      (C2087 * C139300 + C2086 * C5913) * C139457 * C90 +
                      ((C307 * C1777 + C139442 * C2061) * C139300 +
                       (C307 * C1767 + C139442 * C2054) * C5913) *
                          C139457 * C89) *
                         C139403) *
                        C823 +
                    ((((C307 * C4223 + C139442 * C4549) * C5913 +
                       (C307 * C4230 + C139442 * C4553) * C139300) *
                          C139457 * C89 +
                      (C4566 * C5913 + C4567 * C139300) * C139457 * C90 +
                      (C4568 * C5913 + C4569 * C139300) * C139457 * C91) *
                         C139403 -
                     ((C1153 * C139300 + C1152 * C5913) * C139457 * C91 +
                      (C1151 * C139300 + C1150 * C5913) * C139457 * C90 +
                      ((C307 * C841 + C139442 * C1125) * C139300 +
                       (C307 * C831 + C139442 * C1118) * C5913) *
                          C139457 * C89) *
                         C9466) *
                        C824 +
                    ((((C307 * C832 + C139442 * C1121) * C5913 +
                       (C307 * C847 + C139442 * C1129) * C139300) *
                          C139457 * C89 +
                      (C1154 * C5913 + C1155 * C139300) * C139457 * C90 +
                      (C1156 * C5913 + C1157 * C139300) * C139457 * C91) *
                         C9466 -
                     (((C307 * C8755 + C139442 * C9001) * C139300 +
                       (C307 * C8752 + C139442 * C8998) * C5913) *
                          C139457 * C91 +
                      ((C307 * C8756 + C139442 * C9002) * C139300 +
                       (C307 * C8753 + C139442 * C8999) * C5913) *
                          C139457 * C90 +
                      ((C307 * C8757 + C139442 * C9003) * C139300 +
                       (C307 * C8754 + C139442 * C9000) * C5913) *
                          C139457 * C89) *
                         C139403) *
                        C825)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::pow(Pi, 2.5) *
                   ((((C307 * C107 + C139442 * C308) * C5230 +
                      (C307 * C116 + C139442 * C314) * C5225 - C337 * C5231 -
                      C338 * C5226 + C339 * C5232 + C340 * C5227) *
                         C139457 * C89 +
                     (C337 * C5230 + C338 * C5225 - C339 * C5231 -
                      C340 * C5226 + C341 * C5232 + C342 * C5227) *
                         C139457 * C90 +
                     (C339 * C5230 + C340 * C5225 - C341 * C5231 -
                      C342 * C5226 + C343 * C5232 + C344 * C5227) *
                         C139457 * C91) *
                        C9466 +
                    ((C2086 * C5231 -
                      ((C307 * C1777 + C139442 * C2061) * C5225 +
                       (C307 * C1767 + C139442 * C2054) * C5230) +
                      C2087 * C5226 - C2088 * C5232 - C2089 * C5227) *
                         C139457 * C89 +
                     (C2088 * C5231 - (C2087 * C5225 + C2086 * C5230) +
                      C2089 * C5226 - C3692 * C5232 - C3693 * C5227) *
                         C139457 * C90 +
                     (C3692 * C5231 - (C2089 * C5225 + C2088 * C5230) +
                      C3693 * C5226 - (C307 * C3453 + C139442 * C3685) * C5232 -
                      (C307 * C3455 + C139442 * C3686) * C5227) *
                         C139457 * C91) *
                        C139403) *
                   C139328) /
                      (p * q * std::sqrt(p + q)) +
                  (2 * std::pow(Pi, 2.5) *
                   ((((C307 * C107 + C139442 * C308) * C5913 +
                      (C307 * C116 + C139442 * C314) * C139300) *
                         C139457 * C89 +
                     (C337 * C5913 + C338 * C139300) * C139457 * C90 +
                     (C339 * C5913 + C340 * C139300) * C139457 * C91) *
                        C10809 -
                    ((C2089 * C139300 + C2088 * C5913) * C139457 * C91 +
                     (C2087 * C139300 + C2086 * C5913) * C139457 * C90 +
                     ((C307 * C1777 + C139442 * C2061) * C139300 +
                      (C307 * C1767 + C139442 * C2054) * C5913) *
                         C139457 * C89) *
                        C10810 +
                    (((C307 * C1768 + C139442 * C2057) * C5913 +
                      (C307 * C1783 + C139442 * C2065) * C139300) *
                         C139457 * C89 +
                     (C2090 * C5913 + C2091 * C139300) * C139457 * C90 +
                     (C2092 * C5913 + C2093 * C139300) * C139457 * C91) *
                        C10811 -
                    (((C307 * C10816 + C139442 * C10994) * C139300 +
                      (C307 * C10813 + C139442 * C10991) * C5913) *
                         C139457 * C91 +
                     ((C307 * C10817 + C139442 * C10995) * C139300 +
                      (C307 * C10814 + C139442 * C10992) * C5913) *
                         C139457 * C90 +
                     ((C307 * C10818 + C139442 * C10996) * C139300 +
                      (C307 * C10815 + C139442 * C10993) * C5913) *
                         C139457 * C89) *
                        C10812) *
                   C139328) /
                      (p * q * std::sqrt(p + q));
    d2eeyy[12] +=
        (-std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139442 * C308) * C934 +
            (C307 * C182 + C139442 * C394) * C823 -
            (C307 * C831 + C139442 * C1118) * C935 -
            (C307 * C939 + C139442 * C1231) * C824 +
            (C307 * C832 + C139442 * C1121) * C936 +
            (C307 * C940 + C139442 * C1232) * C825) *
               C139457 * C89 +
           (C1240 + C1241 - C1242 - C1260 + C1245 + C1261) * C139457 * C90 +
           (C1248 + C1249 - C1250 - C1262 + C1253 + C1263) * C139457 * C91) *
              C139300 * C9466 +
          (((C307 * C4223 + C139442 * C4549) * C935 -
            ((C307 * C1873 + C139442 * C2170) * C823 +
             (C307 * C1767 + C139442 * C2054) * C934) +
            (C307 * C4337 + C139442 * C4667) * C824 -
            (C307 * C8754 + C139442 * C9000) * C936 -
            (C307 * C8840 + C139442 * C9078) * C825) *
               C139457 * C89 +
           (C4566 * C935 - (C2188 * C823 + C2086 * C934) + C4682 * C824 -
            (C307 * C8753 + C139442 * C8999) * C936 -
            (C307 * C8839 + C139442 * C9079) * C825) *
               C139457 * C90 +
           (C4568 * C935 - (C2189 * C823 + C2088 * C934) + C4683 * C824 -
            (C307 * C8752 + C139442 * C8998) * C936 -
            (C307 * C8838 + C139442 * C9080) * C825) *
               C139457 * C91) *
              C139300 * C139403)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139442 * C308) * C181 +
             (C307 * C182 + C139442 * C394) * C139328) *
                C139457 * C89 +
            (C401 + C417) * C139457 * C90 + C423 * C91) *
               C5225 -
           (C424 * C91 + (C418 + C404) * C139457 * C90 +
            (C417 + C401) * C139457 * C89) *
               C5226 +
           (C423 * C89 + (C409 + C419) * C139457 * C90 +
            (C410 + C420) * C139457 * C91) *
               C5227) *
              C9466 +
          (((C2176 + C2192) * C139457 * C89 + (C2179 + C2193) * C139457 * C90 +
            (C3769 + C3775) * C139457 * C91) *
               C5226 -
           (C3774 * C91 + (C2192 + C2176) * C139457 * C90 +
            ((C307 * C1873 + C139442 * C2170) * C139328 +
             (C307 * C1767 + C139442 * C2054) * C181) *
                C139457 * C89) *
               C5225 -
           (((C307 * C3531 + C139442 * C3767) * C139328 +
             (C307 * C3453 + C139442 * C3685) * C181) *
                C139457 * C91 +
            (C3775 + C3769) * C139457 * C90 + C3774 * C89) *
               C5227) *
              C139403)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139442 * C308) * C181 +
            (C307 * C182 + C139442 * C394) * C139328) *
               C139457 * C89 +
           (C401 + C417) * C139457 * C90 + C423 * C91) *
              C139300 * C10809 -
          (C3774 * C91 + (C2192 + C2176) * C139457 * C90 +
           ((C307 * C1873 + C139442 * C2170) * C139328 +
            (C307 * C1767 + C139442 * C2054) * C181) *
               C139457 * C89) *
              C139300 * C10810 +
          (((C307 * C1768 + C139442 * C2057) * C181 +
            (C307 * C1874 + C139442 * C2171) * C139328) *
               C139457 * C89 +
           (C2182 + C2194) * C139457 * C90 + (C2185 + C2195) * C139457 * C91) *
              C139300 * C10811 -
          (((C307 * C10875 + C139442 * C11047) * C139328 +
            (C307 * C10813 + C139442 * C10991) * C181) *
               C139457 * C91 +
           ((C307 * C10876 + C139442 * C11048) * C139328 +
            (C307 * C10814 + C139442 * C10992) * C181) *
               C139457 * C90 +
           ((C307 * C10877 + C139442 * C11049) * C139328 +
            (C307 * C10815 + C139442 * C10993) * C181) *
               C139457 * C89) *
              C139300 * C10812)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[12] +=
        (-std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139442 * C308) * C9616 +
            (C307 * C245 + C139442 * C474) * C9466 -
            (C307 * C1767 + C139442 * C2054) * C9617 -
            (C307 * C1965 + C139442 * C2269) * C139403) *
               C139457 * C89 +
           (C9841 + C9842 - C9843 - C9844) * C139457 * C90 + C9856 * C91) *
              C823 +
          (((C307 * C4223 + C139442 * C4549) * C9617 -
            ((C307 * C1029 + C139442 * C1339) * C9466 +
             (C307 * C831 + C139442 * C1118) * C9616) +
            (C307 * C4443 + C139442 * C4783) * C139403) *
               C139457 * C89 +
           (C4566 * C9617 - (C1359 * C9466 + C1150 * C9616) + C4798 * C139403) *
               C139457 * C90 +
           (C4568 * C9617 - (C1358 * C9466 + C1152 * C9616) + C4799 * C139403) *
               C139457 * C91) *
              C824 +
          (((C307 * C832 + C139442 * C1121) * C9616 +
            (C307 * C1030 + C139442 * C1340) * C9466 -
            (C307 * C8754 + C139442 * C9000) * C9617 -
            (C307 * C8920 + C139442 * C9155) * C139403) *
               C139457 * C89 +
           (C1154 * C9616 + C1360 * C9466 -
            (C307 * C8753 + C139442 * C8999) * C9617 -
            (C307 * C8919 + C139442 * C9156) * C139403) *
               C139457 * C90 +
           (C1156 * C9616 + C1361 * C9466 -
            (C307 * C8752 + C139442 * C8998) * C9617 -
            (C307 * C8918 + C139442 * C9157) * C139403) *
               C139457 * C91) *
              C825) *
         C139300) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139442 * C308) * C9616 +
            (C307 * C245 + C139442 * C474) * C9466 -
            (C307 * C1767 + C139442 * C2054) * C9617 -
            (C307 * C1965 + C139442 * C2269) * C139403) *
               C139457 * C89 +
           (C9841 + C9842 - C9843 - C9844) * C139457 * C90 + C9856 * C91) *
              C139328 * C5225 +
          ((C9843 - (C9842 + C9841) + C9844) * C139457 * C89 +
           (C9847 - (C9846 + C9845) + C9848) * C139457 * C90 +
           (C9849 - (C9850 + C9851) + C9852) * C139457 * C91) *
              C139328 * C5226 +
          (C9856 * C89 + (C9851 + C9850 - C9849 - C9852) * C139457 * C90 +
           (C343 * C9616 + C496 * C9466 -
            (C307 * C3453 + C139442 * C3685) * C9617 -
            (C307 * C3609 + C139442 * C3849) * C139403) *
               C139457 * C91) *
              C139328 * C5227)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C307 * C107 + C139442 * C308) * C10931 +
           (C307 * C245 + C139442 * C474) * C10809 -
           (C307 * C1767 + C139442 * C2054) * C10932 -
           (C307 * C1965 + C139442 * C2269) * C10810 +
           (C307 * C1768 + C139442 * C2057) * C10933 +
           (C307 * C1966 + C139442 * C2270) * C10811 -
           (C307 * C10815 + C139442 * C10993) * C10934 -
           (C307 * C10937 + C139442 * C11100) * C10812) *
              C139457 * C89 +
          (C337 * C10931 + C493 * C10809 - C2086 * C10932 - C2294 * C10810 +
           C2090 * C10933 + C2295 * C10811 -
           (C307 * C10814 + C139442 * C10992) * C10934 -
           (C307 * C10936 + C139442 * C11101) * C10812) *
              C139457 * C90 +
          (C339 * C10931 + C494 * C10809 - C2088 * C10932 - C2296 * C10810 +
           C2092 * C10933 + C2297 * C10811 -
           (C307 * C10813 + C139442 * C10991) * C10934 -
           (C307 * C10935 + C139442 * C11102) * C10812) *
              C139457 * C91) *
         C139328 * C139300) /
            (p * q * std::sqrt(p + q));
    d2eezx[12] +=
        (-std::pow(Pi, 2.5) * (((((C554 * C107 + C139457 * C555) * C5913 +
                                  (C554 * C116 + C139457 * C561) * C139300) *
                                     C89 +
                                 (C584 * C5913 + C585 * C139300) * C90 +
                                 (C586 * C5913 + C587 * C139300) * C91) *
                                    C139442 * C9466 -
                                ((C2411 * C139300 + C2410 * C5913) * C91 +
                                 (C2409 * C139300 + C2408 * C5913) * C90 +
                                 ((C554 * C1777 + C139457 * C2383) * C139300 +
                                  (C554 * C1767 + C139457 * C2376) * C5913) *
                                     C89) *
                                    C139442 * C139403) *
                                   C823 +
                               ((((C554 * C4223 + C139457 * C4899) * C5913 +
                                  (C554 * C4230 + C139457 * C4903) * C139300) *
                                     C89 +
                                 (C4916 * C5913 + C4917 * C139300) * C90 +
                                 (C4918 * C5913 + C4919 * C139300) * C91) *
                                    C139442 * C139403 -
                                ((C1475 * C139300 + C1474 * C5913) * C91 +
                                 (C1473 * C139300 + C1472 * C5913) * C90 +
                                 ((C554 * C841 + C139457 * C1447) * C139300 +
                                  (C554 * C831 + C139457 * C1440) * C5913) *
                                     C89) *
                                    C139442 * C9466) *
                                   C824 +
                               ((((C554 * C832 + C139457 * C1443) * C5913 +
                                  (C554 * C847 + C139457 * C1451) * C139300) *
                                     C89 +
                                 (C1476 * C5913 + C1477 * C139300) * C90 +
                                 (C1478 * C5913 + C1479 * C139300) * C91) *
                                    C139442 * C9466 -
                                (((C554 * C8755 + C139457 * C9235) * C139300 +
                                  (C554 * C8752 + C139457 * C9232) * C5913) *
                                     C91 +
                                 ((C554 * C8756 + C139457 * C9236) * C139300 +
                                  (C554 * C8753 + C139457 * C9233) * C5913) *
                                     C90 +
                                 ((C554 * C8757 + C139457 * C9237) * C139300 +
                                  (C554 * C8754 + C139457 * C9234) * C5913) *
                                     C89) *
                                    C139442 * C139403) *
                                   C825)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C554 * C107 + C139457 * C555) * C5230 +
            (C554 * C116 + C139457 * C561) * C5225 - C584 * C5231 -
            C585 * C5226 + C586 * C5232 + C587 * C5227) *
               C89 +
           (C584 * C5230 + C585 * C5225 - C586 * C5231 - C587 * C5226 +
            C588 * C5232 + C589 * C5227) *
               C90 +
           (C586 * C5230 + C587 * C5225 - C588 * C5231 - C589 * C5226 +
            C590 * C5232 + C591 * C5227) *
               C91) *
              C139442 * C9466 +
          ((C2408 * C5231 -
            ((C554 * C1777 + C139457 * C2383) * C5225 +
             (C554 * C1767 + C139457 * C2376) * C5230) +
            C2409 * C5226 - C2410 * C5232 - C2411 * C5227) *
               C89 +
           (C2410 * C5231 - (C2409 * C5225 + C2408 * C5230) + C2411 * C5226 -
            C3950 * C5232 - C3951 * C5227) *
               C90 +
           (C3950 * C5231 - (C2411 * C5225 + C2410 * C5230) + C3951 * C5226 -
            (C554 * C3453 + C139457 * C3943) * C5232 -
            (C554 * C3455 + C139457 * C3944) * C5227) *
               C91) *
              C139442 * C139403) *
         C139328) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C139457 * C555) * C5913 +
            (C554 * C116 + C139457 * C561) * C139300) *
               C89 +
           (C584 * C5913 + C585 * C139300) * C90 +
           (C586 * C5913 + C587 * C139300) * C91) *
              C139442 * C10809 -
          ((C2411 * C139300 + C2410 * C5913) * C91 +
           (C2409 * C139300 + C2408 * C5913) * C90 +
           ((C554 * C1777 + C139457 * C2383) * C139300 +
            (C554 * C1767 + C139457 * C2376) * C5913) *
               C89) *
              C139442 * C10810 +
          (((C554 * C1768 + C139457 * C2379) * C5913 +
            (C554 * C1783 + C139457 * C2387) * C139300) *
               C89 +
           (C2412 * C5913 + C2413 * C139300) * C90 +
           (C2414 * C5913 + C2415 * C139300) * C91) *
              C139442 * C10811 -
          (((C554 * C10816 + C139457 * C11156) * C139300 +
            (C554 * C10813 + C139457 * C11153) * C5913) *
               C91 +
           ((C554 * C10817 + C139457 * C11157) * C139300 +
            (C554 * C10814 + C139457 * C11154) * C5913) *
               C90 +
           ((C554 * C10818 + C139457 * C11158) * C139300 +
            (C554 * C10815 + C139457 * C11155) * C5913) *
               C89) *
              C139442 * C10812) *
         C139328) /
            (p * q * std::sqrt(p + q));
    d2eezy[12] += (-std::pow(Pi, 2.5) *
                   ((((C554 * C107 + C139457 * C555) * C934 +
                      (C554 * C182 + C139457 * C641) * C823 -
                      (C554 * C831 + C139457 * C1440) * C935 -
                      (C554 * C939 + C139457 * C1553) * C824 +
                      (C554 * C832 + C139457 * C1443) * C936 +
                      (C554 * C940 + C139457 * C1554) * C825) *
                         C89 +
                     (C1562 + C1563 - C1564 - C1582 + C1567 + C1583) * C90 +
                     (C1570 + C1571 - C1572 - C1584 + C1575 + C1585) * C91) *
                        C139442 * C139300 * C9466 +
                    (((C554 * C4223 + C139457 * C4899) * C935 -
                      ((C554 * C1873 + C139457 * C2492) * C823 +
                       (C554 * C1767 + C139457 * C2376) * C934) +
                      (C554 * C4337 + C139457 * C5017) * C824 -
                      (C554 * C8754 + C139457 * C9234) * C936 -
                      (C554 * C8840 + C139457 * C9312) * C825) *
                         C89 +
                     (C4916 * C935 - (C2510 * C823 + C2408 * C934) +
                      C5032 * C824 - (C554 * C8753 + C139457 * C9233) * C936 -
                      (C554 * C8839 + C139457 * C9313) * C825) *
                         C90 +
                     (C4918 * C935 - (C2511 * C823 + C2410 * C934) +
                      C5033 * C824 - (C554 * C8752 + C139457 * C9232) * C936 -
                      (C554 * C8838 + C139457 * C9314) * C825) *
                         C91) *
                        C139442 * C139300 * C139403)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::pow(Pi, 2.5) *
                   (((((C554 * C107 + C139457 * C555) * C181 +
                       (C554 * C182 + C139457 * C641) * C139328) *
                          C89 +
                      (C648 + C664) * C90 + C668 * C91) *
                         C139442 * C5225 -
                     (C669 * C91 + (C665 + C651) * C90 + (C664 + C648) * C89) *
                         C139442 * C5226 +
                     (C668 * C89 + (C656 + C666) * C90 + (C657 + C667) * C91) *
                         C139442 * C5227) *
                        C9466 +
                    (((C2498 + C2514) * C89 + (C2501 + C2515) * C90 +
                      (C4027 + C4032) * C91) *
                         C139442 * C5226 -
                     (C4030 * C91 + (C2514 + C2498) * C90 +
                      ((C554 * C1873 + C139457 * C2492) * C139328 +
                       (C554 * C1767 + C139457 * C2376) * C181) *
                          C89) *
                         C139442 * C5225 -
                     (((C554 * C3531 + C139457 * C4025) * C139328 +
                       (C554 * C3453 + C139457 * C3943) * C181) *
                          C91 +
                      (C4032 + C4027) * C90 + C4030 * C89) *
                         C139442 * C5227) *
                        C139403)) /
                      (p * q * std::sqrt(p + q)) +
                  (2 * std::pow(Pi, 2.5) *
                   ((((C554 * C107 + C139457 * C555) * C181 +
                      (C554 * C182 + C139457 * C641) * C139328) *
                         C89 +
                     (C648 + C664) * C90 + C668 * C91) *
                        C139442 * C139300 * C10809 -
                    (C4030 * C91 + (C2514 + C2498) * C90 +
                     ((C554 * C1873 + C139457 * C2492) * C139328 +
                      (C554 * C1767 + C139457 * C2376) * C181) *
                         C89) *
                        C139442 * C139300 * C10810 +
                    (((C554 * C1768 + C139457 * C2379) * C181 +
                      (C554 * C1874 + C139457 * C2493) * C139328) *
                         C89 +
                     (C2504 + C2516) * C90 + (C2507 + C2517) * C91) *
                        C139442 * C139300 * C10811 -
                    (((C554 * C10875 + C139457 * C11209) * C139328 +
                      (C554 * C10813 + C139457 * C11153) * C181) *
                         C91 +
                     ((C554 * C10876 + C139457 * C11210) * C139328 +
                      (C554 * C10814 + C139457 * C11154) * C181) *
                         C90 +
                     ((C554 * C10877 + C139457 * C11211) * C139328 +
                      (C554 * C10815 + C139457 * C11155) * C181) *
                         C89) *
                        C139442 * C139300 * C10812)) /
                      (p * q * std::sqrt(p + q));
    d2eezz[12] +=
        (-std::pow(Pi, 2.5) *
         ((((C554 * C107 + C139457 * C555) * C9616 +
            (C554 * C245 + C139457 * C719) * C9466 -
            (C554 * C1767 + C139457 * C2376) * C9617 -
            (C554 * C1965 + C139457 * C2591) * C139403) *
               C89 +
           (C10079 + C10080 - C10081 - C10082) * C90 + C10093 * C91) *
              C139442 * C823 +
          (((C554 * C4223 + C139457 * C4899) * C9617 -
            ((C554 * C1029 + C139457 * C1661) * C9466 +
             (C554 * C831 + C139457 * C1440) * C9616) +
            (C554 * C4443 + C139457 * C5133) * C139403) *
               C89 +
           (C4916 * C9617 - (C1681 * C9466 + C1472 * C9616) + C5148 * C139403) *
               C90 +
           (C4918 * C9617 - (C1680 * C9466 + C1474 * C9616) + C5149 * C139403) *
               C91) *
              C139442 * C824 +
          (((C554 * C832 + C139457 * C1443) * C9616 +
            (C554 * C1030 + C139457 * C1662) * C9466 -
            (C554 * C8754 + C139457 * C9234) * C9617 -
            (C554 * C8920 + C139457 * C9389) * C139403) *
               C89 +
           (C1476 * C9616 + C1682 * C9466 -
            (C554 * C8753 + C139457 * C9233) * C9617 -
            (C554 * C8919 + C139457 * C9390) * C139403) *
               C90 +
           (C1478 * C9616 + C1683 * C9466 -
            (C554 * C8752 + C139457 * C9232) * C9617 -
            (C554 * C8918 + C139457 * C9391) * C139403) *
               C91) *
              C139442 * C825) *
         C139300) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C554 * C107 + C139457 * C555) * C9616 +
            (C554 * C245 + C139457 * C719) * C9466 -
            (C554 * C1767 + C139457 * C2376) * C9617 -
            (C554 * C1965 + C139457 * C2591) * C139403) *
               C89 +
           (C10079 + C10080 - C10081 - C10082) * C90 + C10093 * C91) *
              C139442 * C139328 * C5225 +
          ((C10081 - (C10080 + C10079) + C10082) * C89 +
           (C10085 - (C10084 + C10083) + C10086) * C90 +
           (C10087 - (C10088 + C10089) + C10090) * C91) *
              C139442 * C139328 * C5226 +
          (C10093 * C89 + (C10089 + C10088 - C10087 - C10090) * C90 +
           (C590 * C9616 + C741 * C9466 -
            (C554 * C3453 + C139457 * C3943) * C9617 -
            (C554 * C3609 + C139457 * C4106) * C139403) *
               C91) *
              C139442 * C139328 * C5227)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C554 * C107 + C139457 * C555) * C10931 +
           (C554 * C245 + C139457 * C719) * C10809 -
           (C554 * C1767 + C139457 * C2376) * C10932 -
           (C554 * C1965 + C139457 * C2591) * C10810 +
           (C554 * C1768 + C139457 * C2379) * C10933 +
           (C554 * C1966 + C139457 * C2592) * C10811 -
           (C554 * C10815 + C139457 * C11155) * C10934 -
           (C554 * C10937 + C139457 * C11262) * C10812) *
              C89 +
          (C584 * C10931 + C738 * C10809 - C2408 * C10932 - C2616 * C10810 +
           C2412 * C10933 + C2617 * C10811 -
           (C554 * C10814 + C139457 * C11154) * C10934 -
           (C554 * C10936 + C139457 * C11263) * C10812) *
              C90 +
          (C586 * C10931 + C739 * C10809 - C2410 * C10932 - C2618 * C10810 +
           C2414 * C10933 + C2619 * C10811 -
           (C554 * C10813 + C139457 * C11153) * C10934 -
           (C554 * C10935 + C139457 * C11264) * C10812) *
              C91) *
         C139442 * C139328 * C139300) /
            (p * q * std::sqrt(p + q));
    d2eexx[13] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 +
                      C102 * C109 + C91 * C115) *
                         C137108 +
                     (C100 * C116 + C89 * C125 + C101 * C117 + C90 * C126 +
                      C102 * C118 + C91 * C127) *
                         C139552 -
                     (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 +
                      C100 * C108 + C89 * C114) *
                         C137101 -
                     (C102 * C120 + C91 * C128 + C101 * C118 + C90 * C127 +
                      C100 * C117 + C89 * C126) *
                         C139305) *
                        C139442 * C139457 * C139593 +
                    ((C100 * C1764 + C89 * C1772 + C101 * C1765 + C90 * C1773 +
                      C102 * C1766 + C91 * C1774) *
                         C137101 -
                     ((C102 * C1775 + C91 * C1788 + C101 * C1776 + C90 * C1789 +
                       C100 * C1777 + C89 * C1790) *
                          C139552 +
                      (C102 * C1765 + C91 * C1773 + C101 * C1764 + C90 * C1772 +
                       C100 * C1767 + C89 * C1778) *
                          C137108) +
                     (C100 * C1776 + C89 * C1789 + C101 * C1775 + C90 * C1788 +
                      C102 * C1779 + C91 * C1791) *
                         C139305) *
                        C139442 * C139457 * C139594 +
                    ((C100 * C1768 + C89 * C1780 + C101 * C1769 + C90 * C1781 +
                      C102 * C1770 + C91 * C1782) *
                         C137108 +
                     (C100 * C1783 + C89 * C1792 + C101 * C1784 + C90 * C1793 +
                      C102 * C1785 + C91 * C1794) *
                         C139552 -
                     (C102 * C1771 + C91 * C1786 + C101 * C1770 + C90 * C1782 +
                      C100 * C1769 + C89 * C1781) *
                         C137101 -
                     (C102 * C1787 + C91 * C1795 + C101 * C1785 + C90 * C1794 +
                      C100 * C1784 + C89 * C1793) *
                         C139305) *
                        C139442 * C139457 * C12239) *
                   C139328) /
                  (p * q * std::sqrt(p + q));
    d2eexy[13] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 +
                       C102 * C109 + C91 * C115) *
                          C181 +
                      (C100 * C182 + C89 * C188 + C101 * C183 + C90 * C189 +
                       C102 * C184 + C91 * C190) *
                          C139328) *
                         C139442 * C139457 * C139552 -
                     ((C102 * C185 + C91 * C191 + C101 * C184 + C90 * C190 +
                       C100 * C183 + C89 * C189) *
                          C139328 +
                      (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 +
                       C100 * C108 + C89 * C114) *
                          C181) *
                         C139442 * C139457 * C139305) *
                        C139593 +
                    (((C100 * C1764 + C89 * C1772 + C101 * C1765 + C90 * C1773 +
                       C102 * C1766 + C91 * C1774) *
                          C181 +
                      (C100 * C1870 + C89 * C1878 + C101 * C1871 + C90 * C1879 +
                       C102 * C1872 + C91 * C1880) *
                          C139328) *
                         C139442 * C139457 * C139305 -
                     ((C102 * C1871 + C91 * C1879 + C101 * C1870 + C90 * C1878 +
                       C100 * C1873 + C89 * C1881) *
                          C139328 +
                      (C102 * C1765 + C91 * C1773 + C101 * C1764 + C90 * C1772 +
                       C100 * C1767 + C89 * C1778) *
                          C181) *
                         C139442 * C139457 * C139552) *
                        C139594 +
                    (((C100 * C1768 + C89 * C1780 + C101 * C1769 + C90 * C1781 +
                       C102 * C1770 + C91 * C1782) *
                          C181 +
                      (C100 * C1874 + C89 * C1882 + C101 * C1875 + C90 * C1883 +
                       C102 * C1876 + C91 * C1884) *
                          C139328) *
                         C139442 * C139457 * C139552 -
                     ((C102 * C1877 + C91 * C1885 + C101 * C1876 + C90 * C1884 +
                       C100 * C1875 + C89 * C1883) *
                          C139328 +
                      (C102 * C1771 + C91 * C1786 + C101 * C1770 + C90 * C1782 +
                       C100 * C1769 + C89 * C1781) *
                          C181) *
                         C139442 * C139457 * C139305) *
                        C12239)) /
                  (p * q * std::sqrt(p + q));
    d2eexz[13] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 +
                      C102 * C109 + C91 * C115) *
                         C12388 +
                     (C100 * C245 + C89 * C251 + C101 * C246 + C90 * C252 +
                      C102 * C247 + C91 * C253) *
                         C139593 -
                     (C102 * C1765 + C91 * C1773 + C101 * C1764 + C90 * C1772 +
                      C100 * C1767 + C89 * C1778) *
                         C12389 -
                     (C102 * C1963 + C91 * C1971 + C101 * C1964 + C90 * C1972 +
                      C100 * C1965 + C89 * C1973) *
                         C139594 +
                     (C100 * C1768 + C89 * C1780 + C101 * C1769 + C90 * C1781 +
                      C102 * C1770 + C91 * C1782) *
                         C12390 +
                     (C100 * C1966 + C89 * C1974 + C101 * C1967 + C90 * C1975 +
                      C102 * C1968 + C91 * C1976) *
                         C12239) *
                        C139442 * C139457 * C139328 * C139552 +
                    ((C100 * C1764 + C89 * C1772 + C101 * C1765 + C90 * C1773 +
                      C102 * C1766 + C91 * C1774) *
                         C12389 -
                     ((C102 * C248 + C91 * C254 + C101 * C247 + C90 * C253 +
                       C100 * C246 + C89 * C252) *
                          C139593 +
                      (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 +
                       C100 * C108 + C89 * C114) *
                          C12388) +
                     (C100 * C1964 + C89 * C1972 + C101 * C1963 + C90 * C1971 +
                      C102 * C1969 + C91 * C1977) *
                         C139594 -
                     (C102 * C1771 + C91 * C1786 + C101 * C1770 + C90 * C1782 +
                      C100 * C1769 + C89 * C1781) *
                         C12390 -
                     (C102 * C1970 + C91 * C1978 + C101 * C1968 + C90 * C1976 +
                      C100 * C1967 + C89 * C1975) *
                         C12239) *
                        C139442 * C139457 * C139328 * C139305)) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[13] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139442 * C308) * C137108 +
            (C307 * C116 + C139442 * C314) * C139552 - C337 * C137101 -
            C338 * C139305) *
               C139457 * C89 +
           (C337 * C137108 + C338 * C139552 - C339 * C137101 - C340 * C139305) *
               C139457 * C90 +
           (C339 * C137108 + C340 * C139552 - C341 * C137101 - C342 * C139305) *
               C139457 * C91) *
              C139593 +
          ((C2086 * C137101 -
            ((C307 * C1777 + C139442 * C2061) * C139552 +
             (C307 * C1767 + C139442 * C2054) * C137108) +
            C2087 * C139305) *
               C139457 * C89 +
           (C2088 * C137101 - (C2087 * C139552 + C2086 * C137108) +
            C2089 * C139305) *
               C139457 * C90 +
           (C3692 * C137101 - (C2089 * C139552 + C2088 * C137108) +
            C3693 * C139305) *
               C139457 * C91) *
              C139594 +
          (((C307 * C1768 + C139442 * C2057) * C137108 +
            (C307 * C1783 + C139442 * C2065) * C139552 - C2090 * C137101 -
            C2091 * C139305) *
               C139457 * C89 +
           (C2090 * C137108 + C2091 * C139552 - C2092 * C137101 -
            C2093 * C139305) *
               C139457 * C90 +
           (C2092 * C137108 + C2093 * C139552 -
            (C307 * C1771 + C139442 * C2060) * C137101 -
            (C307 * C1787 + C139442 * C2068) * C139305) *
               C139457 * C91) *
              C12239) *
         C139328) /
        (p * q * std::sqrt(p + q));
    d2eeyy[13] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139442 * C308) * C181 +
             (C307 * C182 + C139442 * C394) * C139328) *
                C139457 * C89 +
            (C401 + C417) * C139457 * C90 + C423 * C91) *
               C139552 -
           (C424 * C91 + (C418 + C404) * C139457 * C90 +
            (C417 + C401) * C139457 * C89) *
               C139305) *
              C139593 +
          (((C2176 + C2192) * C139457 * C89 + (C2179 + C2193) * C139457 * C90 +
            (C3769 + C3775) * C139457 * C91) *
               C139305 -
           (C3774 * C91 + (C2192 + C2176) * C139457 * C90 +
            ((C307 * C1873 + C139442 * C2170) * C139328 +
             (C307 * C1767 + C139442 * C2054) * C181) *
                C139457 * C89) *
               C139552) *
              C139594 +
          ((((C307 * C1768 + C139442 * C2057) * C181 +
             (C307 * C1874 + C139442 * C2171) * C139328) *
                C139457 * C89 +
            (C2182 + C2194) * C139457 * C90 + (C2185 + C2195) * C139457 * C91) *
               C139552 -
           (((C307 * C1877 + C139442 * C2174) * C139328 +
             (C307 * C1771 + C139442 * C2060) * C181) *
                C139457 * C91 +
            (C2195 + C2185) * C139457 * C90 + (C2194 + C2182) * C139457 * C89) *
               C139305) *
              C12239)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[13] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139442 * C308) * C12388 +
            (C307 * C245 + C139442 * C474) * C139593 -
            (C307 * C1767 + C139442 * C2054) * C12389 -
            (C307 * C1965 + C139442 * C2269) * C139594 +
            (C307 * C1768 + C139442 * C2057) * C12390 +
            (C307 * C1966 + C139442 * C2270) * C12239) *
               C139457 * C89 +
           (C12614 + C12615 - C12616 - C12617 + C12618 + C12619) * C139457 *
               C90 +
           (C12620 + C12621 - C12622 - C12623 + C12624 + C12625) * C139457 *
               C91) *
              C139328 * C139552 +
          ((C12616 - (C12615 + C12614) + C12617 - C12618 - C12619) * C139457 *
               C89 +
           (C12622 - (C12621 + C12620) + C12623 - C12624 - C12625) * C139457 *
               C90 +
           (C3692 * C12389 - (C495 * C139593 + C341 * C12388) +
            C3865 * C139594 - (C307 * C1771 + C139442 * C2060) * C12390 -
            (C307 * C1970 + C139442 * C2276) * C12239) *
               C139457 * C91) *
              C139328 * C139305)) /
        (p * q * std::sqrt(p + q));
    d2eezx[13] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C139457 * C555) * C137108 +
            (C554 * C116 + C139457 * C561) * C139552 - C584 * C137101 -
            C585 * C139305) *
               C89 +
           (C584 * C137108 + C585 * C139552 - C586 * C137101 - C587 * C139305) *
               C90 +
           (C586 * C137108 + C587 * C139552 - C588 * C137101 - C589 * C139305) *
               C91) *
              C139442 * C139593 +
          ((C2408 * C137101 -
            ((C554 * C1777 + C139457 * C2383) * C139552 +
             (C554 * C1767 + C139457 * C2376) * C137108) +
            C2409 * C139305) *
               C89 +
           (C2410 * C137101 - (C2409 * C139552 + C2408 * C137108) +
            C2411 * C139305) *
               C90 +
           (C3950 * C137101 - (C2411 * C139552 + C2410 * C137108) +
            C3951 * C139305) *
               C91) *
              C139442 * C139594 +
          (((C554 * C1768 + C139457 * C2379) * C137108 +
            (C554 * C1783 + C139457 * C2387) * C139552 - C2412 * C137101 -
            C2413 * C139305) *
               C89 +
           (C2412 * C137108 + C2413 * C139552 - C2414 * C137101 -
            C2415 * C139305) *
               C90 +
           (C2414 * C137108 + C2415 * C139552 -
            (C554 * C1771 + C139457 * C2382) * C137101 -
            (C554 * C1787 + C139457 * C2390) * C139305) *
               C91) *
              C139442 * C12239) *
         C139328) /
        (p * q * std::sqrt(p + q));
    d2eezy[13] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C554 * C107 + C139457 * C555) * C181 +
                       (C554 * C182 + C139457 * C641) * C139328) *
                          C89 +
                      (C648 + C664) * C90 + C668 * C91) *
                         C139442 * C139552 -
                     (C669 * C91 + (C665 + C651) * C90 + (C664 + C648) * C89) *
                         C139442 * C139305) *
                        C139593 +
                    (((C2498 + C2514) * C89 + (C2501 + C2515) * C90 +
                      (C4027 + C4032) * C91) *
                         C139442 * C139305 -
                     (C4030 * C91 + (C2514 + C2498) * C90 +
                      ((C554 * C1873 + C139457 * C2492) * C139328 +
                       (C554 * C1767 + C139457 * C2376) * C181) *
                          C89) *
                         C139442 * C139552) *
                        C139594 +
                    ((((C554 * C1768 + C139457 * C2379) * C181 +
                       (C554 * C1874 + C139457 * C2493) * C139328) *
                          C89 +
                      (C2504 + C2516) * C90 + (C2507 + C2517) * C91) *
                         C139442 * C139552 -
                     (((C554 * C1877 + C139457 * C2496) * C139328 +
                       (C554 * C1771 + C139457 * C2382) * C181) *
                          C91 +
                      (C2517 + C2507) * C90 + (C2516 + C2504) * C89) *
                         C139442 * C139305) *
                        C12239)) /
                  (p * q * std::sqrt(p + q));
    d2eezz[13] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C139457 * C555) * C12388 +
            (C554 * C245 + C139457 * C719) * C139593 -
            (C554 * C1767 + C139457 * C2376) * C12389 -
            (C554 * C1965 + C139457 * C2591) * C139594 +
            (C554 * C1768 + C139457 * C2379) * C12390 +
            (C554 * C1966 + C139457 * C2592) * C12239) *
               C89 +
           (C12848 + C12849 - C12850 - C12851 + C12852 + C12853) * C90 +
           (C12854 + C12855 - C12856 - C12857 + C12858 + C12859) * C91) *
              C139442 * C139328 * C139552 +
          ((C12850 - (C12849 + C12848) + C12851 - C12852 - C12853) * C89 +
           (C12856 - (C12855 + C12854) + C12857 - C12858 - C12859) * C90 +
           (C3950 * C12389 - (C740 * C139593 + C588 * C12388) +
            C4122 * C139594 - (C554 * C1771 + C139457 * C2382) * C12390 -
            (C554 * C1970 + C139457 * C2598) * C12239) *
               C91) *
              C139442 * C139328 * C139305)) /
        (p * q * std::sqrt(p + q));
    d2eexx[14] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 +
                      C102 * C109 + C91 * C115) *
                         C5230 +
                     (C100 * C116 + C89 * C125 + C101 * C117 + C90 * C126 +
                      C102 * C118 + C91 * C127) *
                         C5225 -
                     (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 +
                      C100 * C108 + C89 * C114) *
                         C5231 -
                     (C102 * C120 + C91 * C128 + C101 * C118 + C90 * C127 +
                      C100 * C117 + C89 * C126) *
                         C5226 +
                     (C100 * C109 + C89 * C115 + C101 * C110 + C90 * C119 +
                      C102 * C111 + C91 * C121) *
                         C5232 +
                     (C100 * C118 + C89 * C127 + C101 * C120 + C90 * C128 +
                      C102 * C122 + C91 * C129) *
                         C5227) *
                        C139442 * C139457 * C9466 +
                    ((C100 * C1764 + C89 * C1772 + C101 * C1765 + C90 * C1773 +
                      C102 * C1766 + C91 * C1774) *
                         C5231 -
                     ((C102 * C1775 + C91 * C1788 + C101 * C1776 + C90 * C1789 +
                       C100 * C1777 + C89 * C1790) *
                          C5225 +
                      (C102 * C1765 + C91 * C1773 + C101 * C1764 + C90 * C1772 +
                       C100 * C1767 + C89 * C1778) *
                          C5230) +
                     (C100 * C1776 + C89 * C1789 + C101 * C1775 + C90 * C1788 +
                      C102 * C1779 + C91 * C1791) *
                         C5226 -
                     (C102 * C3453 + C91 * C3454 + C101 * C1766 + C90 * C1774 +
                      C100 * C1765 + C89 * C1773) *
                         C5232 -
                     (C102 * C3455 + C91 * C3456 + C101 * C1779 + C90 * C1791 +
                      C100 * C1775 + C89 * C1788) *
                         C5227) *
                        C139442 * C139457 * C139403) *
                   C139328) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 +
                       C102 * C109 + C91 * C115) *
                          C5913 +
                      (C100 * C116 + C89 * C125 + C101 * C117 + C90 * C126 +
                       C102 * C118 + C91 * C127) *
                          C139300) *
                         C139442 * C139457 * C9466 -
                     ((C102 * C1775 + C91 * C1788 + C101 * C1776 + C90 * C1789 +
                       C100 * C1777 + C89 * C1790) *
                          C139300 +
                      (C102 * C1765 + C91 * C1773 + C101 * C1764 + C90 * C1772 +
                       C100 * C1767 + C89 * C1778) *
                          C5913) *
                         C139442 * C139457 * C139403) *
                        C823 +
                    (((C100 * C4223 + C89 * C4227 + C101 * C4224 + C90 * C4228 +
                       C102 * C4225 + C91 * C4229) *
                          C5913 +
                      (C100 * C4230 + C89 * C4235 + C101 * C4231 + C90 * C4236 +
                       C102 * C4232 + C91 * C4237) *
                          C139300) *
                         C139442 * C139457 * C139403 -
                     ((C102 * C839 + C91 * C852 + C101 * C840 + C90 * C853 +
                       C100 * C841 + C89 * C854) *
                          C139300 +
                      (C102 * C829 + C91 * C837 + C101 * C828 + C90 * C836 +
                       C100 * C831 + C89 * C842) *
                          C5913) *
                         C139442 * C139457 * C9466) *
                        C824 +
                    (((C100 * C832 + C89 * C844 + C101 * C833 + C90 * C845 +
                       C102 * C834 + C91 * C846) *
                          C5913 +
                      (C100 * C847 + C89 * C856 + C101 * C848 + C90 * C857 +
                       C102 * C849 + C91 * C858) *
                          C139300) *
                         C139442 * C139457 * C9466 -
                     ((C102 * C8755 + C91 * C8761 + C101 * C8756 + C90 * C8762 +
                       C100 * C8757 + C89 * C8763) *
                          C139300 +
                      (C102 * C8752 + C91 * C8758 + C101 * C8753 + C90 * C8759 +
                       C100 * C8754 + C89 * C8760) *
                          C5913) *
                         C139442 * C139457 * C139403) *
                        C825)) /
                      (p * q * std::sqrt(p + q));
    d2eexy[14] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 +
                       C102 * C109 + C91 * C115) *
                          C181 +
                      (C100 * C182 + C89 * C188 + C101 * C183 + C90 * C189 +
                       C102 * C184 + C91 * C190) *
                          C139328) *
                         C139442 * C139457 * C5225 -
                     ((C102 * C185 + C91 * C191 + C101 * C184 + C90 * C190 +
                       C100 * C183 + C89 * C189) *
                          C139328 +
                      (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 +
                       C100 * C108 + C89 * C114) *
                          C181) *
                         C139442 * C139457 * C5226 +
                     ((C100 * C109 + C89 * C115 + C101 * C110 + C90 * C119 +
                       C102 * C111 + C91 * C121) *
                          C181 +
                      (C100 * C184 + C89 * C190 + C101 * C185 + C90 * C191 +
                       C102 * C186 + C91 * C192) *
                          C139328) *
                         C139442 * C139457 * C5227) *
                        C9466 +
                    (((C100 * C1764 + C89 * C1772 + C101 * C1765 + C90 * C1773 +
                       C102 * C1766 + C91 * C1774) *
                          C181 +
                      (C100 * C1870 + C89 * C1878 + C101 * C1871 + C90 * C1879 +
                       C102 * C1872 + C91 * C1880) *
                          C139328) *
                         C139442 * C139457 * C5226 -
                     ((C102 * C1871 + C91 * C1879 + C101 * C1870 + C90 * C1878 +
                       C100 * C1873 + C89 * C1881) *
                          C139328 +
                      (C102 * C1765 + C91 * C1773 + C101 * C1764 + C90 * C1772 +
                       C100 * C1767 + C89 * C1778) *
                          C181) *
                         C139442 * C139457 * C5225 -
                     ((C102 * C3531 + C91 * C3532 + C101 * C1872 + C90 * C1880 +
                       C100 * C1871 + C89 * C1879) *
                          C139328 +
                      (C102 * C3453 + C91 * C3454 + C101 * C1766 + C90 * C1774 +
                       C100 * C1765 + C89 * C1773) *
                          C181) *
                         C139442 * C139457 * C5227) *
                        C139403)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 +
                      C102 * C109 + C91 * C115) *
                         C934 +
                     (C100 * C182 + C89 * C188 + C101 * C183 + C90 * C189 +
                      C102 * C184 + C91 * C190) *
                         C823 -
                     (C102 * C829 + C91 * C837 + C101 * C828 + C90 * C836 +
                      C100 * C831 + C89 * C842) *
                         C935 -
                     (C102 * C937 + C91 * C945 + C101 * C938 + C90 * C946 +
                      C100 * C939 + C89 * C947) *
                         C824 +
                     (C100 * C832 + C89 * C844 + C101 * C833 + C90 * C845 +
                      C102 * C834 + C91 * C846) *
                         C936 +
                     (C100 * C940 + C89 * C948 + C101 * C941 + C90 * C949 +
                      C102 * C942 + C91 * C950) *
                         C825) *
                        C139442 * C139457 * C139300 * C9466 +
                    ((C100 * C4223 + C89 * C4227 + C101 * C4224 + C90 * C4228 +
                      C102 * C4225 + C91 * C4229) *
                         C935 -
                     ((C102 * C1871 + C91 * C1879 + C101 * C1870 + C90 * C1878 +
                       C100 * C1873 + C89 * C1881) *
                          C823 +
                      (C102 * C1765 + C91 * C1773 + C101 * C1764 + C90 * C1772 +
                       C100 * C1767 + C89 * C1778) *
                          C934) +
                     (C100 * C4337 + C89 * C4341 + C101 * C4338 + C90 * C4342 +
                      C102 * C4339 + C91 * C4343) *
                         C824 -
                     (C102 * C8752 + C91 * C8758 + C101 * C8753 + C90 * C8759 +
                      C100 * C8754 + C89 * C8760) *
                         C936 -
                     (C102 * C8838 + C91 * C8841 + C101 * C8839 + C90 * C8842 +
                      C100 * C8840 + C89 * C8843) *
                         C825) *
                        C139442 * C139457 * C139300 * C139403)) /
                      (p * q * std::sqrt(p + q));
    d2eexz[14] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 +
                      C102 * C109 + C91 * C115) *
                         C9616 +
                     (C100 * C245 + C89 * C251 + C101 * C246 + C90 * C252 +
                      C102 * C247 + C91 * C253) *
                         C9466 -
                     (C102 * C1765 + C91 * C1773 + C101 * C1764 + C90 * C1772 +
                      C100 * C1767 + C89 * C1778) *
                         C9617 -
                     (C102 * C1963 + C91 * C1971 + C101 * C1964 + C90 * C1972 +
                      C100 * C1965 + C89 * C1973) *
                         C139403) *
                        C139442 * C139457 * C139328 * C5225 +
                    ((C100 * C1764 + C89 * C1772 + C101 * C1765 + C90 * C1773 +
                      C102 * C1766 + C91 * C1774) *
                         C9617 -
                     ((C102 * C248 + C91 * C254 + C101 * C247 + C90 * C253 +
                       C100 * C246 + C89 * C252) *
                          C9466 +
                      (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 +
                       C100 * C108 + C89 * C114) *
                          C9616) +
                     (C100 * C1964 + C89 * C1972 + C101 * C1963 + C90 * C1971 +
                      C102 * C1969 + C91 * C1977) *
                         C139403) *
                        C139442 * C139457 * C139328 * C5226 +
                    ((C100 * C109 + C89 * C115 + C101 * C110 + C90 * C119 +
                      C102 * C111 + C91 * C121) *
                         C9616 +
                     (C100 * C247 + C89 * C253 + C101 * C248 + C90 * C254 +
                      C102 * C249 + C91 * C255) *
                         C9466 -
                     (C102 * C3453 + C91 * C3454 + C101 * C1766 + C90 * C1774 +
                      C100 * C1765 + C89 * C1773) *
                         C9617 -
                     (C102 * C3609 + C91 * C3610 + C101 * C1969 + C90 * C1977 +
                      C100 * C1963 + C89 * C1971) *
                         C139403) *
                        C139442 * C139457 * C139328 * C5227)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 +
                      C102 * C109 + C91 * C115) *
                         C9616 +
                     (C100 * C245 + C89 * C251 + C101 * C246 + C90 * C252 +
                      C102 * C247 + C91 * C253) *
                         C9466 -
                     (C102 * C1765 + C91 * C1773 + C101 * C1764 + C90 * C1772 +
                      C100 * C1767 + C89 * C1778) *
                         C9617 -
                     (C102 * C1963 + C91 * C1971 + C101 * C1964 + C90 * C1972 +
                      C100 * C1965 + C89 * C1973) *
                         C139403) *
                        C139442 * C139457 * C823 +
                    ((C100 * C4223 + C89 * C4227 + C101 * C4224 + C90 * C4228 +
                      C102 * C4225 + C91 * C4229) *
                         C9617 -
                     ((C102 * C1027 + C91 * C1035 + C101 * C1028 + C90 * C1036 +
                       C100 * C1029 + C89 * C1037) *
                          C9466 +
                      (C102 * C829 + C91 * C837 + C101 * C828 + C90 * C836 +
                       C100 * C831 + C89 * C842) *
                          C9616) +
                     (C100 * C4443 + C89 * C4447 + C101 * C4444 + C90 * C4448 +
                      C102 * C4445 + C91 * C4449) *
                         C139403) *
                        C139442 * C139457 * C824 +
                    ((C100 * C832 + C89 * C844 + C101 * C833 + C90 * C845 +
                      C102 * C834 + C91 * C846) *
                         C9616 +
                     (C100 * C1030 + C89 * C1038 + C101 * C1031 + C90 * C1039 +
                      C102 * C1032 + C91 * C1040) *
                         C9466 -
                     (C102 * C8752 + C91 * C8758 + C101 * C8753 + C90 * C8759 +
                      C100 * C8754 + C89 * C8760) *
                         C9617 -
                     (C102 * C8918 + C91 * C8921 + C101 * C8919 + C90 * C8922 +
                      C100 * C8920 + C89 * C8923) *
                         C139403) *
                        C139442 * C139457 * C825) *
                   C139300) /
                      (p * q * std::sqrt(p + q));
    d2eeyx[14] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C307 * C107 + C139442 * C308) * C5230 +
                      (C307 * C116 + C139442 * C314) * C5225 - C337 * C5231 -
                      C338 * C5226 + C339 * C5232 + C340 * C5227) *
                         C139457 * C89 +
                     (C337 * C5230 + C338 * C5225 - C339 * C5231 -
                      C340 * C5226 + C341 * C5232 + C342 * C5227) *
                         C139457 * C90 +
                     (C339 * C5230 + C340 * C5225 - C341 * C5231 -
                      C342 * C5226 + C343 * C5232 + C344 * C5227) *
                         C139457 * C91) *
                        C9466 +
                    ((C2086 * C5231 -
                      ((C307 * C1777 + C139442 * C2061) * C5225 +
                       (C307 * C1767 + C139442 * C2054) * C5230) +
                      C2087 * C5226 - C2088 * C5232 - C2089 * C5227) *
                         C139457 * C89 +
                     (C2088 * C5231 - (C2087 * C5225 + C2086 * C5230) +
                      C2089 * C5226 - C3692 * C5232 - C3693 * C5227) *
                         C139457 * C90 +
                     (C3692 * C5231 - (C2089 * C5225 + C2088 * C5230) +
                      C3693 * C5226 - (C307 * C3453 + C139442 * C3685) * C5232 -
                      (C307 * C3455 + C139442 * C3686) * C5227) *
                         C139457 * C91) *
                        C139403) *
                   C139328) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((((C307 * C107 + C139442 * C308) * C5913 +
                       (C307 * C116 + C139442 * C314) * C139300) *
                          C139457 * C89 +
                      (C337 * C5913 + C338 * C139300) * C139457 * C90 +
                      (C339 * C5913 + C340 * C139300) * C139457 * C91) *
                         C9466 -
                     ((C2089 * C139300 + C2088 * C5913) * C139457 * C91 +
                      (C2087 * C139300 + C2086 * C5913) * C139457 * C90 +
                      ((C307 * C1777 + C139442 * C2061) * C139300 +
                       (C307 * C1767 + C139442 * C2054) * C5913) *
                          C139457 * C89) *
                         C139403) *
                        C823 +
                    ((((C307 * C4223 + C139442 * C4549) * C5913 +
                       (C307 * C4230 + C139442 * C4553) * C139300) *
                          C139457 * C89 +
                      (C4566 * C5913 + C4567 * C139300) * C139457 * C90 +
                      (C4568 * C5913 + C4569 * C139300) * C139457 * C91) *
                         C139403 -
                     ((C1153 * C139300 + C1152 * C5913) * C139457 * C91 +
                      (C1151 * C139300 + C1150 * C5913) * C139457 * C90 +
                      ((C307 * C841 + C139442 * C1125) * C139300 +
                       (C307 * C831 + C139442 * C1118) * C5913) *
                          C139457 * C89) *
                         C9466) *
                        C824 +
                    ((((C307 * C832 + C139442 * C1121) * C5913 +
                       (C307 * C847 + C139442 * C1129) * C139300) *
                          C139457 * C89 +
                      (C1154 * C5913 + C1155 * C139300) * C139457 * C90 +
                      (C1156 * C5913 + C1157 * C139300) * C139457 * C91) *
                         C9466 -
                     (((C307 * C8755 + C139442 * C9001) * C139300 +
                       (C307 * C8752 + C139442 * C8998) * C5913) *
                          C139457 * C91 +
                      ((C307 * C8756 + C139442 * C9002) * C139300 +
                       (C307 * C8753 + C139442 * C8999) * C5913) *
                          C139457 * C90 +
                      ((C307 * C8757 + C139442 * C9003) * C139300 +
                       (C307 * C8754 + C139442 * C9000) * C5913) *
                          C139457 * C89) *
                         C139403) *
                        C825)) /
                      (p * q * std::sqrt(p + q));
    d2eeyy[14] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139442 * C308) * C181 +
             (C307 * C182 + C139442 * C394) * C139328) *
                C139457 * C89 +
            (C401 + C417) * C139457 * C90 + C423 * C91) *
               C5225 -
           (C424 * C91 + (C418 + C404) * C139457 * C90 +
            (C417 + C401) * C139457 * C89) *
               C5226 +
           (C423 * C89 + (C409 + C419) * C139457 * C90 +
            (C410 + C420) * C139457 * C91) *
               C5227) *
              C9466 +
          (((C2176 + C2192) * C139457 * C89 + (C2179 + C2193) * C139457 * C90 +
            (C3769 + C3775) * C139457 * C91) *
               C5226 -
           (C3774 * C91 + (C2192 + C2176) * C139457 * C90 +
            ((C307 * C1873 + C139442 * C2170) * C139328 +
             (C307 * C1767 + C139442 * C2054) * C181) *
                C139457 * C89) *
               C5225 -
           (((C307 * C3531 + C139442 * C3767) * C139328 +
             (C307 * C3453 + C139442 * C3685) * C181) *
                C139457 * C91 +
            (C3775 + C3769) * C139457 * C90 + C3774 * C89) *
               C5227) *
              C139403)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139442 * C308) * C934 +
            (C307 * C182 + C139442 * C394) * C823 -
            (C307 * C831 + C139442 * C1118) * C935 -
            (C307 * C939 + C139442 * C1231) * C824 +
            (C307 * C832 + C139442 * C1121) * C936 +
            (C307 * C940 + C139442 * C1232) * C825) *
               C139457 * C89 +
           (C1240 + C1241 - C1242 - C1260 + C1245 + C1261) * C139457 * C90 +
           (C1248 + C1249 - C1250 - C1262 + C1253 + C1263) * C139457 * C91) *
              C139300 * C9466 +
          (((C307 * C4223 + C139442 * C4549) * C935 -
            ((C307 * C1873 + C139442 * C2170) * C823 +
             (C307 * C1767 + C139442 * C2054) * C934) +
            (C307 * C4337 + C139442 * C4667) * C824 -
            (C307 * C8754 + C139442 * C9000) * C936 -
            (C307 * C8840 + C139442 * C9078) * C825) *
               C139457 * C89 +
           (C4566 * C935 - (C2188 * C823 + C2086 * C934) + C4682 * C824 -
            (C307 * C8753 + C139442 * C8999) * C936 -
            (C307 * C8839 + C139442 * C9079) * C825) *
               C139457 * C90 +
           (C4568 * C935 - (C2189 * C823 + C2088 * C934) + C4683 * C824 -
            (C307 * C8752 + C139442 * C8998) * C936 -
            (C307 * C8838 + C139442 * C9080) * C825) *
               C139457 * C91) *
              C139300 * C139403)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[14] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139442 * C308) * C9616 +
            (C307 * C245 + C139442 * C474) * C9466 -
            (C307 * C1767 + C139442 * C2054) * C9617 -
            (C307 * C1965 + C139442 * C2269) * C139403) *
               C139457 * C89 +
           (C9841 + C9842 - C9843 - C9844) * C139457 * C90 + C9856 * C91) *
              C139328 * C5225 +
          ((C9843 - (C9842 + C9841) + C9844) * C139457 * C89 +
           (C9847 - (C9846 + C9845) + C9848) * C139457 * C90 +
           (C9849 - (C9850 + C9851) + C9852) * C139457 * C91) *
              C139328 * C5226 +
          (C9856 * C89 + (C9851 + C9850 - C9849 - C9852) * C139457 * C90 +
           (C343 * C9616 + C496 * C9466 -
            (C307 * C3453 + C139442 * C3685) * C9617 -
            (C307 * C3609 + C139442 * C3849) * C139403) *
               C139457 * C91) *
              C139328 * C5227)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139442 * C308) * C9616 +
            (C307 * C245 + C139442 * C474) * C9466 -
            (C307 * C1767 + C139442 * C2054) * C9617 -
            (C307 * C1965 + C139442 * C2269) * C139403) *
               C139457 * C89 +
           (C9841 + C9842 - C9843 - C9844) * C139457 * C90 + C9856 * C91) *
              C823 +
          (((C307 * C4223 + C139442 * C4549) * C9617 -
            ((C307 * C1029 + C139442 * C1339) * C9466 +
             (C307 * C831 + C139442 * C1118) * C9616) +
            (C307 * C4443 + C139442 * C4783) * C139403) *
               C139457 * C89 +
           (C4566 * C9617 - (C1359 * C9466 + C1150 * C9616) + C4798 * C139403) *
               C139457 * C90 +
           (C4568 * C9617 - (C1358 * C9466 + C1152 * C9616) + C4799 * C139403) *
               C139457 * C91) *
              C824 +
          (((C307 * C832 + C139442 * C1121) * C9616 +
            (C307 * C1030 + C139442 * C1340) * C9466 -
            (C307 * C8754 + C139442 * C9000) * C9617 -
            (C307 * C8920 + C139442 * C9155) * C139403) *
               C139457 * C89 +
           (C1154 * C9616 + C1360 * C9466 -
            (C307 * C8753 + C139442 * C8999) * C9617 -
            (C307 * C8919 + C139442 * C9156) * C139403) *
               C139457 * C90 +
           (C1156 * C9616 + C1361 * C9466 -
            (C307 * C8752 + C139442 * C8998) * C9617 -
            (C307 * C8918 + C139442 * C9157) * C139403) *
               C139457 * C91) *
              C825) *
         C139300) /
            (p * q * std::sqrt(p + q));
    d2eezx[14] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C554 * C107 + C139457 * C555) * C5230 +
                      (C554 * C116 + C139457 * C561) * C5225 - C584 * C5231 -
                      C585 * C5226 + C586 * C5232 + C587 * C5227) *
                         C89 +
                     (C584 * C5230 + C585 * C5225 - C586 * C5231 -
                      C587 * C5226 + C588 * C5232 + C589 * C5227) *
                         C90 +
                     (C586 * C5230 + C587 * C5225 - C588 * C5231 -
                      C589 * C5226 + C590 * C5232 + C591 * C5227) *
                         C91) *
                        C139442 * C9466 +
                    ((C2408 * C5231 -
                      ((C554 * C1777 + C139457 * C2383) * C5225 +
                       (C554 * C1767 + C139457 * C2376) * C5230) +
                      C2409 * C5226 - C2410 * C5232 - C2411 * C5227) *
                         C89 +
                     (C2410 * C5231 - (C2409 * C5225 + C2408 * C5230) +
                      C2411 * C5226 - C3950 * C5232 - C3951 * C5227) *
                         C90 +
                     (C3950 * C5231 - (C2411 * C5225 + C2410 * C5230) +
                      C3951 * C5226 - (C554 * C3453 + C139457 * C3943) * C5232 -
                      (C554 * C3455 + C139457 * C3944) * C5227) *
                         C91) *
                        C139442 * C139403) *
                   C139328) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((((C554 * C107 + C139457 * C555) * C5913 +
                       (C554 * C116 + C139457 * C561) * C139300) *
                          C89 +
                      (C584 * C5913 + C585 * C139300) * C90 +
                      (C586 * C5913 + C587 * C139300) * C91) *
                         C139442 * C9466 -
                     ((C2411 * C139300 + C2410 * C5913) * C91 +
                      (C2409 * C139300 + C2408 * C5913) * C90 +
                      ((C554 * C1777 + C139457 * C2383) * C139300 +
                       (C554 * C1767 + C139457 * C2376) * C5913) *
                          C89) *
                         C139442 * C139403) *
                        C823 +
                    ((((C554 * C4223 + C139457 * C4899) * C5913 +
                       (C554 * C4230 + C139457 * C4903) * C139300) *
                          C89 +
                      (C4916 * C5913 + C4917 * C139300) * C90 +
                      (C4918 * C5913 + C4919 * C139300) * C91) *
                         C139442 * C139403 -
                     ((C1475 * C139300 + C1474 * C5913) * C91 +
                      (C1473 * C139300 + C1472 * C5913) * C90 +
                      ((C554 * C841 + C139457 * C1447) * C139300 +
                       (C554 * C831 + C139457 * C1440) * C5913) *
                          C89) *
                         C139442 * C9466) *
                        C824 +
                    ((((C554 * C832 + C139457 * C1443) * C5913 +
                       (C554 * C847 + C139457 * C1451) * C139300) *
                          C89 +
                      (C1476 * C5913 + C1477 * C139300) * C90 +
                      (C1478 * C5913 + C1479 * C139300) * C91) *
                         C139442 * C9466 -
                     (((C554 * C8755 + C139457 * C9235) * C139300 +
                       (C554 * C8752 + C139457 * C9232) * C5913) *
                          C91 +
                      ((C554 * C8756 + C139457 * C9236) * C139300 +
                       (C554 * C8753 + C139457 * C9233) * C5913) *
                          C90 +
                      ((C554 * C8757 + C139457 * C9237) * C139300 +
                       (C554 * C8754 + C139457 * C9234) * C5913) *
                          C89) *
                         C139442 * C139403) *
                        C825)) /
                      (p * q * std::sqrt(p + q));
    d2eezy[14] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((((C554 * C107 + C139457 * C555) * C181 +
                       (C554 * C182 + C139457 * C641) * C139328) *
                          C89 +
                      (C648 + C664) * C90 + C668 * C91) *
                         C139442 * C5225 -
                     (C669 * C91 + (C665 + C651) * C90 + (C664 + C648) * C89) *
                         C139442 * C5226 +
                     (C668 * C89 + (C656 + C666) * C90 + (C657 + C667) * C91) *
                         C139442 * C5227) *
                        C9466 +
                    (((C2498 + C2514) * C89 + (C2501 + C2515) * C90 +
                      (C4027 + C4032) * C91) *
                         C139442 * C5226 -
                     (C4030 * C91 + (C2514 + C2498) * C90 +
                      ((C554 * C1873 + C139457 * C2492) * C139328 +
                       (C554 * C1767 + C139457 * C2376) * C181) *
                          C89) *
                         C139442 * C5225 -
                     (((C554 * C3531 + C139457 * C4025) * C139328 +
                       (C554 * C3453 + C139457 * C3943) * C181) *
                          C91 +
                      (C4032 + C4027) * C90 + C4030 * C89) *
                         C139442 * C5227) *
                        C139403)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C554 * C107 + C139457 * C555) * C934 +
                      (C554 * C182 + C139457 * C641) * C823 -
                      (C554 * C831 + C139457 * C1440) * C935 -
                      (C554 * C939 + C139457 * C1553) * C824 +
                      (C554 * C832 + C139457 * C1443) * C936 +
                      (C554 * C940 + C139457 * C1554) * C825) *
                         C89 +
                     (C1562 + C1563 - C1564 - C1582 + C1567 + C1583) * C90 +
                     (C1570 + C1571 - C1572 - C1584 + C1575 + C1585) * C91) *
                        C139442 * C139300 * C9466 +
                    (((C554 * C4223 + C139457 * C4899) * C935 -
                      ((C554 * C1873 + C139457 * C2492) * C823 +
                       (C554 * C1767 + C139457 * C2376) * C934) +
                      (C554 * C4337 + C139457 * C5017) * C824 -
                      (C554 * C8754 + C139457 * C9234) * C936 -
                      (C554 * C8840 + C139457 * C9312) * C825) *
                         C89 +
                     (C4916 * C935 - (C2510 * C823 + C2408 * C934) +
                      C5032 * C824 - (C554 * C8753 + C139457 * C9233) * C936 -
                      (C554 * C8839 + C139457 * C9313) * C825) *
                         C90 +
                     (C4918 * C935 - (C2511 * C823 + C2410 * C934) +
                      C5033 * C824 - (C554 * C8752 + C139457 * C9232) * C936 -
                      (C554 * C8838 + C139457 * C9314) * C825) *
                         C91) *
                        C139442 * C139300 * C139403)) /
                      (p * q * std::sqrt(p + q));
    d2eezz[14] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C139457 * C555) * C9616 +
            (C554 * C245 + C139457 * C719) * C9466 -
            (C554 * C1767 + C139457 * C2376) * C9617 -
            (C554 * C1965 + C139457 * C2591) * C139403) *
               C89 +
           (C10079 + C10080 - C10081 - C10082) * C90 + C10093 * C91) *
              C139442 * C139328 * C5225 +
          ((C10081 - (C10080 + C10079) + C10082) * C89 +
           (C10085 - (C10084 + C10083) + C10086) * C90 +
           (C10087 - (C10088 + C10089) + C10090) * C91) *
              C139442 * C139328 * C5226 +
          (C10093 * C89 + (C10089 + C10088 - C10087 - C10090) * C90 +
           (C590 * C9616 + C741 * C9466 -
            (C554 * C3453 + C139457 * C3943) * C9617 -
            (C554 * C3609 + C139457 * C4106) * C139403) *
               C91) *
              C139442 * C139328 * C5227)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C139457 * C555) * C9616 +
            (C554 * C245 + C139457 * C719) * C9466 -
            (C554 * C1767 + C139457 * C2376) * C9617 -
            (C554 * C1965 + C139457 * C2591) * C139403) *
               C89 +
           (C10079 + C10080 - C10081 - C10082) * C90 + C10093 * C91) *
              C139442 * C823 +
          (((C554 * C4223 + C139457 * C4899) * C9617 -
            ((C554 * C1029 + C139457 * C1661) * C9466 +
             (C554 * C831 + C139457 * C1440) * C9616) +
            (C554 * C4443 + C139457 * C5133) * C139403) *
               C89 +
           (C4916 * C9617 - (C1681 * C9466 + C1472 * C9616) + C5148 * C139403) *
               C90 +
           (C4918 * C9617 - (C1680 * C9466 + C1474 * C9616) + C5149 * C139403) *
               C91) *
              C139442 * C824 +
          (((C554 * C832 + C139457 * C1443) * C9616 +
            (C554 * C1030 + C139457 * C1662) * C9466 -
            (C554 * C8754 + C139457 * C9234) * C9617 -
            (C554 * C8920 + C139457 * C9389) * C139403) *
               C89 +
           (C1476 * C9616 + C1682 * C9466 -
            (C554 * C8753 + C139457 * C9233) * C9617 -
            (C554 * C8919 + C139457 * C9390) * C139403) *
               C90 +
           (C1478 * C9616 + C1683 * C9466 -
            (C554 * C8752 + C139457 * C9232) * C9617 -
            (C554 * C8918 + C139457 * C9391) * C139403) *
               C91) *
              C139442 * C825) *
         C139300) /
            (p * q * std::sqrt(p + q));
    d2eexx[15] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139575 * C114) *
                C2702 +
            (C13595 * C116 + C13591 * C125 + C13596 * C117 + C139575 * C126) *
                C139589 -
            (C13596 * C109 + C139575 * C115 + C13595 * C108 + C13591 * C114) *
                C2703 -
            (C13596 * C118 + C139575 * C127 + C13595 * C117 + C13591 * C126) *
                C139590 +
            (C13595 * C109 + C13591 * C115 + C13596 * C110 + C139575 * C119) *
                C2704 +
            (C13595 * C118 + C13591 * C127 + C13596 * C120 + C139575 * C128) *
                C2699) *
               C13593 +
           ((C14336 + C14337) * C2702 + (C14338 + C14339) * C139589 -
            (C14340 + C14341) * C2703 - (C14342 + C14343) * C139590 +
            (C16358 + C16359) * C2704 + (C16360 + C16361) * C2699) *
               C139586) *
              C139457 * C139339 * C139560 +
          (((C14341 + C14340) * C2703 -
            ((C14339 + C14338) * C139589 + (C14337 + C14336) * C2702) +
            (C14343 + C14342) * C139590 - (C16359 + C16358) * C2704 -
            (C16361 + C16360) * C2699) *
               C13593 +
           ((C14344 + C14345) * C2703 -
            ((C14346 + C14347) * C139589 + (C14348 + C14349) * C2702) +
            (C14350 + C14351) * C139590 -
            (C13596 * C835 + C139575 * C850 + C13595 * C834 + C13591 * C846) *
                C2704 -
            (C13596 * C851 + C139575 * C859 + C13595 * C849 + C13591 * C858) *
                C2699) *
               C139586) *
              C139457 * C139339 * C139377)) /
        (p * q * std::sqrt(p + q));
    d2eexy[15] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139575 * C114) *
                C2783 +
            (C13595 * C182 + C13591 * C188 + C13596 * C183 + C139575 * C189) *
                C139560 -
            (C14337 + C14336) * C2784 - (C14466 + C14467) * C139377) *
               C13593 +
           ((C14336 + C14337) * C2783 + (C14467 + C14466) * C139560 -
            (C14348 + C14349) * C2784 - (C14469 + C14468) * C139377) *
               C139586) *
              C139457 * C139589 +
          (((C14341 + C14340) * C2784 -
            ((C13596 * C184 + C139575 * C190 + C13595 * C183 + C13591 * C189) *
                 C139560 +
             (C13596 * C109 + C139575 * C115 + C13595 * C108 + C13591 * C114) *
                 C2783) +
            (C14470 + C14471) * C139377) *
               C13593 +
           ((C14344 + C14345) * C2784 -
            ((C14471 + C14470) * C139560 + (C14340 + C14341) * C2783) +
            (C14473 + C14472) * C139377) *
               C139586) *
              C139457 * C139590 +
          (((C13595 * C109 + C13591 * C115 + C13596 * C110 + C139575 * C119) *
                C2783 +
            (C13595 * C184 + C13591 * C190 + C13596 * C185 + C139575 * C191) *
                C139560 -
            (C16359 + C16358) * C2784 - (C16464 + C16465) * C139377) *
               C13593 +
           ((C16358 + C16359) * C2783 + (C16465 + C16464) * C139560 -
            (C13596 * C835 + C139575 * C850 + C13595 * C834 + C13591 * C846) *
                C2784 -
            (C13596 * C944 + C139575 * C952 + C13595 * C942 + C13591 * C950) *
                C139377) *
               C139586) *
              C139457 * C2699) *
         C139339) /
        (p * q * std::sqrt(p + q));
    d2eexz[15] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139575 * C114) *
                 C244 +
             (C13595 * C245 + C13591 * C251 + C13596 * C246 + C139575 * C252) *
                 C139339) *
                C13593 +
            ((C14336 + C14337) * C244 + (C14588 + C14589) * C139339) *
                C139586) *
               C139457 * C139560 -
           (((C14590 + C14591) * C139339 + (C14348 + C14349) * C244) * C139586 +
            ((C14589 + C14588) * C139339 + (C14337 + C14336) * C244) * C13593) *
               C139457 * C139377) *
              C139589 +
          ((((C14341 + C14340) * C244 + (C14592 + C14593) * C139339) * C13593 +
            ((C14344 + C14345) * C244 + (C14594 + C14595) * C139339) *
                C139586) *
               C139457 * C139377 -
           (((C14593 + C14592) * C139339 + (C14340 + C14341) * C244) * C139586 +
            ((C13596 * C247 + C139575 * C253 + C13595 * C246 + C13591 * C252) *
                 C139339 +
             (C13596 * C109 + C139575 * C115 + C13595 * C108 + C13591 * C114) *
                 C244) *
                C13593) *
               C139457 * C139560) *
              C139590 +
          ((((C13595 * C109 + C13591 * C115 + C13596 * C110 + C139575 * C119) *
                 C244 +
             (C13595 * C247 + C13591 * C253 + C13596 * C248 + C139575 * C254) *
                 C139339) *
                C13593 +
            ((C16358 + C16359) * C244 + (C16568 + C16569) * C139339) *
                C139586) *
               C139457 * C139560 -
           (((C13596 * C1034 + C139575 * C1042 + C13595 * C1032 +
              C13591 * C1040) *
                 C139339 +
             (C13596 * C835 + C139575 * C850 + C13595 * C834 + C13591 * C846) *
                 C244) *
                C139586 +
            ((C16569 + C16568) * C139339 + (C16359 + C16358) * C244) * C13593) *
               C139457 * C139377) *
              C2699)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[15] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C831 + C139586 * C1118) *
                C2702 +
            (C13795 * C116 + C13593 * C314 + C13796 * C841 + C139586 * C1125) *
                C139589 -
            (C13822 + C13823) * C2703 - (C13824 + C13825) * C139590 +
            (C13826 + C13827) * C2704 + (C13828 + C13829) * C2699) *
               C139457 * C13591 +
           ((C13823 + C13822) * C2702 + (C13825 + C13824) * C139589 -
            (C13827 + C13826) * C2703 - (C13829 + C13828) * C139590 +
            (C13831 + C13830) * C2704 + (C13833 + C13832) * C2699) *
               C139457 * C139575) *
              C139339 * C139560 +
          (((C14710 + C14711) * C2703 -
            ((C13796 * C847 + C139586 * C1129 + C13795 * C841 +
              C13593 * C1125) *
                 C139589 +
             (C13796 * C832 + C139586 * C1121 + C13795 * C831 +
              C13593 * C1118) *
                 C2702) +
            (C14712 + C14713) * C139590 - (C16676 + C16677) * C2704 -
            (C16678 + C16679) * C2699) *
               C139457 * C13591 +
           ((C16677 + C16676) * C2703 -
            ((C14713 + C14712) * C139589 + (C14711 + C14710) * C2702) +
            (C16679 + C16678) * C139590 -
            (C13796 * C835 + C139586 * C1124 + C13795 * C830 + C13593 * C1120) *
                C2704 -
            (C13796 * C851 + C139586 * C1132 + C13795 * C843 + C13593 * C1128) *
                C2699) *
               C139457 * C139575) *
              C139339 * C139377)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[15] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C831 + C139586 * C1118) *
                C2783 +
            (C13795 * C182 + C13593 * C394 + C13796 * C939 + C139586 * C1231) *
                C139560 -
            (C13796 * C832 + C139586 * C1121 + C13795 * C831 + C13593 * C1118) *
                C2784 -
            (C13796 * C940 + C139586 * C1232 + C13795 * C939 + C13593 * C1231) *
                C139377) *
               C139457 * C13591 +
           ((C13823 + C13822) * C2783 + (C13912 + C13913) * C139560 -
            (C14711 + C14710) * C2784 - (C14824 + C14825) * C139377) *
               C139457 * C139575) *
              C139589 +
          (((C14710 + C14711) * C2784 -
            ((C13913 + C13912) * C139560 + (C13822 + C13823) * C2783) +
            (C14825 + C14824) * C139377) *
               C139457 * C13591 +
           ((C16677 + C16676) * C2784 -
            ((C13914 + C13915) * C139560 + (C13827 + C13826) * C2783) +
            (C16782 + C16783) * C139377) *
               C139457 * C139575) *
              C139590 +
          (((C13826 + C13827) * C2783 + (C13915 + C13914) * C139560 -
            (C16676 + C16677) * C2784 - (C16783 + C16782) * C139377) *
               C139457 * C13591 +
           ((C13831 + C13830) * C2783 + (C13916 + C13917) * C139560 -
            (C13796 * C835 + C139586 * C1124 + C13795 * C830 + C13593 * C1120) *
                C2784 -
            (C13796 * C944 + C139586 * C1238 + C13795 * C943 + C13593 * C1237) *
                C139377) *
               C139457 * C139575) *
              C2699) *
         C139339) /
        (p * q * std::sqrt(p + q));
    d2eeyz[15] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13795 * C107 + C13593 * C308 + C13796 * C831 + C139586 * C1118) *
                 C244 +
             (C13795 * C245 + C13593 * C474 + C13796 * C1029 +
              C139586 * C1339) *
                 C139339) *
                C139457 * C13591 +
            ((C13823 + C13822) * C244 + (C13996 + C13997) * C139339) * C139457 *
                C139575) *
               C139560 -
           (((C14934 + C14935) * C139339 + (C14711 + C14710) * C244) * C139457 *
                C139575 +
            ((C13796 * C1030 + C139586 * C1340 + C13795 * C1029 +
              C13593 * C1339) *
                 C139339 +
             (C13796 * C832 + C139586 * C1121 + C13795 * C831 +
              C13593 * C1118) *
                 C244) *
                C139457 * C13591) *
               C139377) *
              C139589 +
          ((((C14710 + C14711) * C244 + (C14935 + C14934) * C139339) * C139457 *
                C13591 +
            ((C16677 + C16676) * C244 + (C16886 + C16887) * C139339) * C139457 *
                C139575) *
               C139377 -
           (((C13998 + C13999) * C139339 + (C13827 + C13826) * C244) * C139457 *
                C139575 +
            ((C13997 + C13996) * C139339 + (C13822 + C13823) * C244) * C139457 *
                C13591) *
               C139560) *
              C139590 +
          ((((C13826 + C13827) * C244 + (C13999 + C13998) * C139339) * C139457 *
                C13591 +
            ((C13831 + C13830) * C244 + (C14000 + C14001) * C139339) * C139457 *
                C139575) *
               C139560 -
           (((C13796 * C1034 + C139586 * C1344 + C13795 * C1033 +
              C13593 * C1343) *
                 C139339 +
             (C13796 * C835 + C139586 * C1124 + C13795 * C830 +
              C13593 * C1120) *
                 C244) *
                C139457 * C139575 +
            ((C16887 + C16886) * C139339 + (C16676 + C16677) * C244) * C139457 *
                C13591) *
               C139377) *
              C2699)) /
        (p * q * std::sqrt(p + q));
    d2eezx[15] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139457 * C555) * C2702 +
             (C554 * C116 + C139457 * C561) * C139589 - C584 * C2703 -
             C585 * C139590 + C586 * C2704 + C587 * C2699) *
                C13591 +
            (C584 * C2702 + C585 * C139589 - C586 * C2703 - C587 * C139590 +
             C588 * C2704 + C589 * C2699) *
                C139575) *
               C13593 +
           ((C16986 + C16987 - C16988 - C16989 + C16990 + C16991) * C13591 +
            (C16992 + C16993 - C16994 - C16995 + C16996 + C16997) * C139575) *
               C139586) *
              C139339 * C139560 +
          (((C16988 - (C16987 + C16986) + C16989 - C16990 - C16991) * C13591 +
            (C16994 - (C16993 + C16992) + C16995 - C16996 - C16997) * C139575) *
               C13593 +
           ((C1476 * C2703 - (C15062 * C139589 + C15063 * C2702) +
             C1477 * C139590 - C1478 * C2704 - C1479 * C2699) *
                C13591 +
            (C1478 * C2703 - (C1477 * C139589 + C1476 * C2702) +
             C1479 * C139590 - (C554 * C835 + C139457 * C1446) * C2704 -
             (C554 * C851 + C139457 * C1454) * C2699) *
                C139575) *
               C139586) *
              C139339 * C139377)) /
        (p * q * std::sqrt(p + q));
    d2eezy[15] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139457 * C555) * C2783 +
             (C554 * C182 + C139457 * C641) * C139560 - C15060 * C2784 -
             C15179 * C139377) *
                C13591 +
            (C3279 + C3280 - C3281 - C3282) * C139575) *
               C13593 +
           ((C15060 * C2783 + C15179 * C139560 - C15063 * C2784 -
             C15180 * C139377) *
                C13591 +
            (C17096 + C17097 - C17098 - C17099) * C139575) *
               C139586) *
              C139589 +
          (((C3281 - (C3280 + C3279) + C3282) * C13591 +
            (C3285 - (C3284 + C3283) + C3286) * C139575) *
               C13593 +
           ((C17098 - (C17097 + C17096) + C17099) * C13591 +
            (C17100 - (C17101 + C17102) + C17103) * C139575) *
               C139586) *
              C139590 +
          ((C3296 * C13591 + (C3289 + C3288 - C3287 - C3295) * C139575) *
               C13593 +
           ((C17102 + C17101 - C17100 - C17103) * C13591 +
            (C3202 * C2783 + C3293 * C139560 -
             (C554 * C835 + C139457 * C1446) * C2784 -
             (C554 * C944 + C139457 * C1560) * C139377) *
                C139575) *
               C139586) *
              C2699) *
         C139339) /
        (p * q * std::sqrt(p + q));
    d2eezz[15] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C554 * C107 + C139457 * C555) * C244 +
              (C554 * C245 + C139457 * C719) * C139339) *
                 C13591 +
             (C726 + C742) * C139575) *
                C13593 +
            ((C15281 + C15297) * C13591 + C15284 * C139575) * C139586) *
               C139560 -
           ((C15285 * C139575 + (C15298 + C15288) * C13591) * C139586 +
            (C15289 * C139575 + (C15297 + C15281) * C13591) * C13593) *
               C139377) *
              C139589 +
          (((C15284 * C13591 + C17202 * C139575) * C13593 +
            (C15290 * C13591 + (C1677 + C1687) * C139575) * C139586) *
               C139377 -
           ((C3372 * C139575 + C15289 * C13591) * C139586 +
            ((C743 + C729) * C139575 + (C742 + C726) * C13591) * C13593) *
               C139560) *
              C139590 +
          (((C746 * C13591 + (C734 + C744) * C139575) * C13593 +
            (C17202 * C13591 + (C3373 + C3377) * C139575) * C139586) *
               C139560 -
           ((((C554 * C1034 + C139457 * C1666) * C139339 +
              (C554 * C835 + C139457 * C1446) * C244) *
                 C139575 +
             (C1687 + C1677) * C13591) *
                C139586 +
            ((C3377 + C3373) * C139575 + C3372 * C13591) * C13593) *
               C139377) *
              C2699)) /
        (p * q * std::sqrt(p + q));
    d2eexx[16] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139575 * C114) *
                 C826 +
             (C13595 * C116 + C13591 * C125 + C13596 * C117 + C139575 * C126) *
                 C821 -
             (C13596 * C109 + C139575 * C115 + C13595 * C108 + C13591 * C114) *
                 C827 -
             (C13596 * C118 + C139575 * C127 + C13595 * C117 + C13591 * C126) *
                 C139305) *
                C13593 +
            ((C14336 + C14337) * C826 + (C14338 + C14339) * C821 -
             (C14340 + C14341) * C827 - (C14342 + C14343) * C139305) *
                C139586) *
               C139457 * C139561 +
           (((C13595 * C1764 + C13591 * C1772 + C13596 * C1765 +
              C139575 * C1773) *
                 C827 -
             ((C13596 * C1776 + C139575 * C1789 + C13595 * C1777 +
               C13591 * C1790) *
                  C821 +
              (C13596 * C1764 + C139575 * C1772 + C13595 * C1767 +
               C13591 * C1778) *
                  C826) +
             (C13595 * C1776 + C13591 * C1789 + C13596 * C1775 +
              C139575 * C1788) *
                 C139305) *
                C13593 +
            ((C18257 + C18258) * C827 -
             ((C18259 + C18260) * C821 + (C18261 + C18262) * C826) +
             (C18263 + C18264) * C139305) *
                C139586) *
               C139457 * C139403) *
              C139560 +
          ((((C14341 + C14340) * C827 -
             ((C14339 + C14338) * C821 + (C14337 + C14336) * C826) +
             (C14343 + C14342) * C139305) *
                C13593 +
            ((C14344 + C14345) * C827 -
             ((C14346 + C14347) * C821 + (C14348 + C14349) * C826) +
             (C14350 + C14351) * C139305) *
                C139586) *
               C139457 * C139561 +
           (((C18262 + C18261) * C826 + (C18260 + C18259) * C821 -
             (C18258 + C18257) * C827 - (C18264 + C18263) * C139305) *
                C13593 +
            ((C13595 * C8754 + C13591 * C8760 + C13596 * C8753 +
              C139575 * C8759) *
                 C826 +
             (C13595 * C8757 + C13591 * C8763 + C13596 * C8756 +
              C139575 * C8762) *
                 C821 -
             (C13596 * C8752 + C139575 * C8758 + C13595 * C8753 +
              C13591 * C8759) *
                 C827 -
             (C13596 * C8755 + C139575 * C8761 + C13595 * C8756 +
              C13591 * C8762) *
                 C139305) *
                C139586) *
               C139457 * C139403) *
              C139377)) /
        (p * q * std::sqrt(p + q));
    d2eexy[16] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139575 * C114) *
                 C2783 +
             (C13595 * C182 + C13591 * C188 + C13596 * C183 + C139575 * C189) *
                 C139560 -
             (C14337 + C14336) * C2784 - (C14466 + C14467) * C139377) *
                C13593 +
            ((C14336 + C14337) * C2783 + (C14467 + C14466) * C139560 -
             (C14348 + C14349) * C2784 - (C14469 + C14468) * C139377) *
                C139586) *
               C139457 * C821 +
           (((C14341 + C14340) * C2784 -
             ((C13596 * C184 + C139575 * C190 + C13595 * C183 + C13591 * C189) *
                  C139560 +
              (C13596 * C109 + C139575 * C115 + C13595 * C108 + C13591 * C114) *
                  C2783) +
             (C14470 + C14471) * C139377) *
                C13593 +
            ((C14344 + C14345) * C2784 -
             ((C14471 + C14470) * C139560 + (C14340 + C14341) * C2783) +
             (C14473 + C14472) * C139377) *
                C139586) *
               C139457 * C139305) *
              C139561 +
          ((((C18262 + C18261) * C2784 -
             ((C13596 * C1870 + C139575 * C1878 + C13595 * C1873 +
               C13591 * C1881) *
                  C139560 +
              (C13596 * C1764 + C139575 * C1772 + C13595 * C1767 +
               C13591 * C1778) *
                  C2783) +
             (C18403 + C18404) * C139377) *
                C13593 +
            ((C13595 * C8754 + C13591 * C8760 + C13596 * C8753 +
              C139575 * C8759) *
                 C2784 -
             ((C18404 + C18403) * C139560 + (C18261 + C18262) * C2783) +
             (C13595 * C8840 + C13591 * C8843 + C13596 * C8839 +
              C139575 * C8842) *
                 C139377) *
                C139586) *
               C139457 * C821 +
           (((C13595 * C1764 + C13591 * C1772 + C13596 * C1765 +
              C139575 * C1773) *
                 C2783 +
             (C13595 * C1870 + C13591 * C1878 + C13596 * C1871 +
              C139575 * C1879) *
                 C139560 -
             (C18258 + C18257) * C2784 - (C18405 + C18406) * C139377) *
                C13593 +
            ((C18257 + C18258) * C2783 + (C18406 + C18405) * C139560 -
             (C13596 * C8752 + C139575 * C8758 + C13595 * C8753 +
              C13591 * C8759) *
                 C2784 -
             (C13596 * C8838 + C139575 * C8841 + C13595 * C8839 +
              C13591 * C8842) *
                 C139377) *
                C139586) *
               C139457 * C139305) *
              C139403)) /
        (p * q * std::sqrt(p + q));
    d2eexz[16] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139575 * C114) *
                 C3607 +
             (C13595 * C245 + C13591 * C251 + C13596 * C246 + C139575 * C252) *
                 C139561 -
             (C13596 * C1764 + C139575 * C1772 + C13595 * C1767 +
              C13591 * C1778) *
                 C3608 -
             (C13596 * C1964 + C139575 * C1972 + C13595 * C1965 +
              C13591 * C1973) *
                 C139403) *
                C13593 +
            ((C14336 + C14337) * C3607 + (C14588 + C14589) * C139561 -
             (C18261 + C18262) * C3608 - (C18545 + C18546) * C139403) *
                C139586) *
               C139457 * C139560 +
           (((C18262 + C18261) * C3608 -
             ((C14589 + C14588) * C139561 + (C14337 + C14336) * C3607) +
             (C18546 + C18545) * C139403) *
                C13593 +
            ((C13595 * C8754 + C13591 * C8760 + C13596 * C8753 +
              C139575 * C8759) *
                 C3608 -
             ((C14590 + C14591) * C139561 + (C14348 + C14349) * C3607) +
             (C13595 * C8920 + C13591 * C8923 + C13596 * C8919 +
              C139575 * C8922) *
                 C139403) *
                C139586) *
               C139457 * C139377) *
              C821 +
          ((((C13595 * C1764 + C13591 * C1772 + C13596 * C1765 +
              C139575 * C1773) *
                 C3608 -
             ((C13596 * C247 + C139575 * C253 + C13595 * C246 + C13591 * C252) *
                  C139561 +
              (C13596 * C109 + C139575 * C115 + C13595 * C108 + C13591 * C114) *
                  C3607) +
             (C13595 * C1964 + C13591 * C1972 + C13596 * C1963 +
              C139575 * C1971) *
                 C139403) *
                C13593 +
            ((C18257 + C18258) * C3608 -
             ((C14593 + C14592) * C139561 + (C14340 + C14341) * C3607) +
             (C18547 + C18548) * C139403) *
                C139586) *
               C139457 * C139560 +
           (((C14341 + C14340) * C3607 + (C14592 + C14593) * C139561 -
             (C18258 + C18257) * C3608 - (C18548 + C18547) * C139403) *
                C13593 +
            ((C14344 + C14345) * C3607 + (C14594 + C14595) * C139561 -
             (C13596 * C8752 + C139575 * C8758 + C13595 * C8753 +
              C13591 * C8759) *
                 C3608 -
             (C13596 * C8918 + C139575 * C8921 + C13595 * C8919 +
              C13591 * C8922) *
                 C139403) *
                C139586) *
               C139457 * C139377) *
              C139305)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[16] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13795 * C107 + C13593 * C308 + C13796 * C831 + C139586 * C1118) *
                 C826 +
             (C13795 * C116 + C13593 * C314 + C13796 * C841 + C139586 * C1125) *
                 C821 -
             (C13822 + C13823) * C827 - (C13824 + C13825) * C139305) *
                C139457 * C13591 +
            ((C13823 + C13822) * C826 + (C13825 + C13824) * C821 -
             (C13827 + C13826) * C827 - (C13829 + C13828) * C139305) *
                C139457 * C139575) *
               C139561 +
           (((C15708 + C15709) * C827 -
             ((C13796 * C4230 + C139586 * C4553 + C13795 * C1777 +
               C13593 * C2061) *
                  C821 +
              (C13796 * C4223 + C139586 * C4549 + C13795 * C1767 +
               C13593 * C2054) *
                  C826) +
             (C15710 + C15711) * C139305) *
                C139457 * C13591 +
            ((C17604 + C17603) * C827 -
             ((C15711 + C15710) * C821 + (C15709 + C15708) * C826) +
             (C17606 + C17605) * C139305) *
                C139457 * C139575) *
               C139403) *
              C139560 +
          ((((C14710 + C14711) * C827 -
             ((C13796 * C847 + C139586 * C1129 + C13795 * C841 +
               C13593 * C1125) *
                  C821 +
              (C13796 * C832 + C139586 * C1121 + C13795 * C831 +
               C13593 * C1118) *
                  C826) +
             (C14712 + C14713) * C139305) *
                C139457 * C13591 +
            ((C16677 + C16676) * C827 -
             ((C14713 + C14712) * C821 + (C14711 + C14710) * C826) +
             (C16679 + C16678) * C139305) *
                C139457 * C139575) *
               C139561 +
           (((C13795 * C4223 + C13593 * C4549 + C13796 * C8754 +
              C139586 * C9000) *
                 C826 +
             (C13795 * C4230 + C13593 * C4553 + C13796 * C8757 +
              C139586 * C9003) *
                 C821 -
             (C18687 + C18688) * C827 - (C18689 + C18690) * C139305) *
                C139457 * C13591 +
            ((C18688 + C18687) * C826 + (C18690 + C18689) * C821 -
             (C13796 * C8752 + C139586 * C8998 + C13795 * C4225 +
              C13593 * C4551) *
                 C827 -
             (C13796 * C8755 + C139586 * C9001 + C13795 * C4232 +
              C13593 * C4555) *
                 C139305) *
                C139457 * C139575) *
               C139403) *
              C139377)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[16] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13795 * C107 + C13593 * C308 + C13796 * C831 + C139586 * C1118) *
                 C2783 +
             (C13795 * C182 + C13593 * C394 + C13796 * C939 + C139586 * C1231) *
                 C139560 -
             (C13796 * C832 + C139586 * C1121 + C13795 * C831 +
              C13593 * C1118) *
                 C2784 -
             (C13796 * C940 + C139586 * C1232 + C13795 * C939 +
              C13593 * C1231) *
                 C139377) *
                C139457 * C13591 +
            ((C13823 + C13822) * C2783 + (C13912 + C13913) * C139560 -
             (C14711 + C14710) * C2784 - (C14824 + C14825) * C139377) *
                C139457 * C139575) *
               C821 +
           (((C14710 + C14711) * C2784 -
             ((C13913 + C13912) * C139560 + (C13822 + C13823) * C2783) +
             (C14825 + C14824) * C139377) *
                C139457 * C13591 +
            ((C16677 + C16676) * C2784 -
             ((C13914 + C13915) * C139560 + (C13827 + C13826) * C2783) +
             (C16782 + C16783) * C139377) *
                C139457 * C139575) *
               C139305) *
              C139561 +
          ((((C13795 * C4223 + C13593 * C4549 + C13796 * C8754 +
              C139586 * C9000) *
                 C2784 -
             ((C13796 * C4337 + C139586 * C4667 + C13795 * C1873 +
               C13593 * C2170) *
                  C139560 +
              (C13796 * C4223 + C139586 * C4549 + C13795 * C1767 +
               C13593 * C2054) *
                  C2783) +
             (C13795 * C4337 + C13593 * C4667 + C13796 * C8840 +
              C139586 * C9078) *
                 C139377) *
                C139457 * C13591 +
            ((C18688 + C18687) * C2784 -
             ((C15823 + C15822) * C139560 + (C15709 + C15708) * C2783) +
             (C18825 + C18826) * C139377) *
                C139457 * C139575) *
               C821 +
           (((C15708 + C15709) * C2783 + (C15822 + C15823) * C139560 -
             (C18687 + C18688) * C2784 - (C18826 + C18825) * C139377) *
                C139457 * C13591 +
            ((C17604 + C17603) * C2783 + (C17709 + C17710) * C139560 -
             (C13796 * C8752 + C139586 * C8998 + C13795 * C4225 +
              C13593 * C4551) *
                 C2784 -
             (C13796 * C8838 + C139586 * C9080 + C13795 * C4339 +
              C13593 * C4669) *
                 C139377) *
                C139457 * C139575) *
               C139305) *
              C139403)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[16] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13795 * C107 + C13593 * C308 + C13796 * C831 + C139586 * C1118) *
                 C3607 +
             (C13795 * C245 + C13593 * C474 + C13796 * C1029 +
              C139586 * C1339) *
                 C139561 -
             (C13796 * C4223 + C139586 * C4549 + C13795 * C1767 +
              C13593 * C2054) *
                 C3608 -
             (C13796 * C4443 + C139586 * C4783 + C13795 * C1965 +
              C13593 * C2269) *
                 C139403) *
                C139457 * C13591 +
            ((C13823 + C13822) * C3607 + (C13996 + C13997) * C139561 -
             (C15709 + C15708) * C3608 - (C15932 + C15933) * C139403) *
                C139457 * C139575) *
               C139560 +
           (((C13795 * C4223 + C13593 * C4549 + C13796 * C8754 +
              C139586 * C9000) *
                 C3608 -
             ((C13796 * C1030 + C139586 * C1340 + C13795 * C1029 +
               C13593 * C1339) *
                  C139561 +
              (C13796 * C832 + C139586 * C1121 + C13795 * C831 +
               C13593 * C1118) *
                  C3607) +
             (C13795 * C4443 + C13593 * C4783 + C13796 * C8920 +
              C139586 * C9155) *
                 C139403) *
                C139457 * C13591 +
            ((C18688 + C18687) * C3608 -
             ((C14934 + C14935) * C139561 + (C14711 + C14710) * C3607) +
             (C18961 + C18962) * C139403) *
                C139457 * C139575) *
               C139377) *
              C821 +
          ((((C15708 + C15709) * C3608 -
             ((C13997 + C13996) * C139561 + (C13822 + C13823) * C3607) +
             (C15933 + C15932) * C139403) *
                C139457 * C13591 +
            ((C17604 + C17603) * C3608 -
             ((C13998 + C13999) * C139561 + (C13827 + C13826) * C3607) +
             (C17813 + C17814) * C139403) *
                C139457 * C139575) *
               C139560 +
           (((C14710 + C14711) * C3607 + (C14935 + C14934) * C139561 -
             (C18687 + C18688) * C3608 - (C18962 + C18961) * C139403) *
                C139457 * C13591 +
            ((C16677 + C16676) * C3607 + (C16886 + C16887) * C139561 -
             (C13796 * C8752 + C139586 * C8998 + C13795 * C4225 +
              C13593 * C4551) *
                 C3608 -
             (C13796 * C8918 + C139586 * C9157 + C13795 * C4445 +
              C13593 * C4785) *
                 C139403) *
                C139457 * C139575) *
               C139377) *
              C139305)) /
        (p * q * std::sqrt(p + q));
    d2eezx[16] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C554 * C107 + C139457 * C555) * C826 +
              (C554 * C116 + C139457 * C561) * C821 - C584 * C827 -
              C585 * C139305) *
                 C13591 +
             (C584 * C826 + C585 * C821 - C586 * C827 - C587 * C139305) *
                 C139575) *
                C13593 +
            ((C15066 + C15067 - C15040 - C15041) * C13591 +
             (C15042 + C15043 - C15044 - C15045) * C139575) *
                C139586) *
               C139561 +
           (((C2408 * C827 -
              ((C554 * C1777 + C139457 * C2383) * C821 +
               (C554 * C1767 + C139457 * C2376) * C826) +
              C2409 * C139305) *
                 C13591 +
             (C2410 * C827 - (C2409 * C821 + C2408 * C826) + C2411 * C139305) *
                 C139575) *
                C13593 +
            ((C19093 - (C19111 + C19112) + C19098) * C13591 +
             (C19099 - (C19100 + C19101) + C19102) * C139575) *
                C139586) *
               C139403) *
              C139560 +
          ((((C15040 - (C15067 + C15066) + C15041) * C13591 +
             (C15044 - (C15043 + C15042) + C15045) * C139575) *
                C13593 +
            ((C15046 - (C15068 + C15069) + C15051) * C13591 +
             (C15052 - (C15053 + C15054) + C15055) * C139575) *
                C139586) *
               C139561 +
           (((C19112 + C19111 - C19093 - C19098) * C13591 +
             (C19101 + C19100 - C19099 - C19102) * C139575) *
                C13593 +
            (((C554 * C8754 + C139457 * C9234) * C826 +
              (C554 * C8757 + C139457 * C9237) * C821 - C19109 * C827 -
              C19110 * C139305) *
                 C13591 +
             (C19109 * C826 + C19110 * C821 -
              (C554 * C8752 + C139457 * C9232) * C827 -
              (C554 * C8755 + C139457 * C9235) * C139305) *
                 C139575) *
                C139586) *
               C139403) *
              C139377)) /
        (p * q * std::sqrt(p + q));
    d2eezy[16] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((((C554 * C107 + C139457 * C555) * C2783 +
                        (C554 * C182 + C139457 * C641) * C139560 -
                        C15060 * C2784 - C15179 * C139377) *
                           C13591 +
                       (C3279 + C3280 - C3281 - C3282) * C139575) *
                          C13593 +
                      ((C15060 * C2783 + C15179 * C139560 - C15063 * C2784 -
                        C15180 * C139377) *
                           C13591 +
                       (C17096 + C17097 - C17098 - C17099) * C139575) *
                          C139586) *
                         C821 +
                     (((C3281 - (C3280 + C3279) + C3282) * C13591 +
                       (C3285 - (C3284 + C3283) + C3286) * C139575) *
                          C13593 +
                      ((C17098 - (C17097 + C17096) + C17099) * C13591 +
                       (C17100 - (C17101 + C17102) + C17103) * C139575) *
                          C139586) *
                         C139305) *
                        C139561 +
                    ((((C19108 * C2784 -
                        ((C554 * C1873 + C139457 * C2492) * C139560 +
                         (C554 * C1767 + C139457 * C2376) * C2783) +
                        C19250 * C139377) *
                           C13591 +
                       (C5022 - (C5023 + C5024) + C5034) * C139575) *
                          C13593 +
                      (((C554 * C8754 + C139457 * C9234) * C2784 -
                        (C19250 * C139560 + C19108 * C2783) +
                        (C554 * C8840 + C139457 * C9312) * C139377) *
                           C13591 +
                       (C19245 - (C19246 + C19247) + C19252) * C139575) *
                          C139586) *
                         C821 +
                     (((C5024 + C5023 - C5022 - C5034) * C13591 +
                       (C5029 + C5028 - C5027 - C5035) * C139575) *
                          C13593 +
                      ((C19247 + C19246 - C19245 - C19252) * C13591 +
                       (C4918 * C2783 + C5033 * C139560 -
                        (C554 * C8752 + C139457 * C9232) * C2784 -
                        (C554 * C8838 + C139457 * C9314) * C139377) *
                           C139575) *
                          C139586) *
                         C139305) *
                        C139403)) /
                  (p * q * std::sqrt(p + q));
    d2eezz[16] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C554 * C107 + C139457 * C555) * C3607 +
              (C554 * C245 + C139457 * C719) * C139561 -
              (C554 * C1767 + C139457 * C2376) * C3608 -
              (C554 * C1965 + C139457 * C2591) * C139403) *
                 C13591 +
             (C4108 + C4109 - C4110 - C4111) * C139575) *
                C13593 +
            ((C19383 + C19384 - C19385 - C19399) * C13591 + C19400 * C139575) *
                C139586) *
               C139560 +
           (((C19385 - (C19384 + C19383) + C19399) * C13591 +
             C19401 * C139575) *
                C13593 +
            (((C554 * C8754 + C139457 * C9234) * C3608 -
              (C15295 * C139561 + C15063 * C3607) +
              (C554 * C8920 + C139457 * C9389) * C139403) *
                 C13591 +
             (C19390 - (C19391 + C19392) + C19402) * C139575) *
                C139586) *
               C139377) *
              C821 +
          ((((C4110 - (C4109 + C4108) + C4111) * C13591 +
             (C4114 - (C4113 + C4112) + C4115) * C139575) *
                C13593 +
            (C19401 * C13591 + (C5143 - (C5144 + C5145) + C5151) * C139575) *
                C139586) *
               C139560 +
           ((C19400 * C13591 + (C5145 + C5144 - C5143 - C5151) * C139575) *
                C13593 +
            ((C19392 + C19391 - C19390 - C19402) * C13591 +
             (C1478 * C3607 + C1683 * C139561 -
              (C554 * C8752 + C139457 * C9232) * C3608 -
              (C554 * C8918 + C139457 * C9391) * C139403) *
                 C139575) *
                C139586) *
               C139377) *
              C139305)) /
        (p * q * std::sqrt(p + q));
    d2eexx[17] +=
        (-std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139575 * C114) *
                C826 +
            (C13595 * C116 + C13591 * C125 + C13596 * C117 + C139575 * C126) *
                C821 -
            (C13596 * C109 + C139575 * C115 + C13595 * C108 + C13591 * C114) *
                C827 -
            (C13596 * C118 + C139575 * C127 + C13595 * C117 + C13591 * C126) *
                C139305) *
               C13593 +
           ((C14336 + C14337) * C826 + (C14338 + C14339) * C821 -
            (C14340 + C14341) * C827 - (C14342 + C14343) * C139305) *
               C139586) *
              C139457 * C139339 * C823 +
          (((C14341 + C14340) * C827 -
            ((C14339 + C14338) * C821 + (C14337 + C14336) * C826) +
            (C14343 + C14342) * C139305) *
               C13593 +
           ((C14344 + C14345) * C827 -
            ((C14346 + C14347) * C821 + (C14348 + C14349) * C826) +
            (C14350 + C14351) * C139305) *
               C139586) *
              C139457 * C139339 * C824 +
          (((C14349 + C14348) * C826 + (C14347 + C14346) * C821 -
            (C14345 + C14344) * C827 - (C14351 + C14350) * C139305) *
               C13593 +
           ((C13595 * C5916 + C13591 * C5922 + C13596 * C5915 +
             C139575 * C5921) *
                C826 +
            (C13595 * C5919 + C13591 * C5925 + C13596 * C5918 +
             C139575 * C5924) *
                C821 -
            (C13596 * C5914 + C139575 * C5920 + C13595 * C5915 +
             C13591 * C5921) *
                C827 -
            (C13596 * C5917 + C139575 * C5923 + C13595 * C5918 +
             C13591 * C5924) *
                C139305) *
               C139586) *
              C139457 * C139339 * C825)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139575 * C114) *
               C103 +
           (C13595 * C116 + C13591 * C125 + C13596 * C117 + C139575 * C126) *
               C92 -
           (C13596 * C109 + C139575 * C115 + C13595 * C108 + C13591 * C114) *
               C104 -
           (C13596 * C118 + C139575 * C127 + C13595 * C117 + C13591 * C126) *
               C93 +
           (C13595 * C109 + C13591 * C115 + C13596 * C110 + C139575 * C119) *
               C105 +
           (C13595 * C118 + C13591 * C127 + C13596 * C120 + C139575 * C128) *
               C94 -
           (C13596 * C111 + C139575 * C121 + C13595 * C110 + C13591 * C119) *
               C106 -
           (C13596 * C122 + C139575 * C129 + C13595 * C120 + C13591 * C128) *
               C95) *
              C13593 +
          ((C13595 * C831 + C13591 * C842 + C13596 * C828 + C139575 * C836) *
               C103 +
           (C13595 * C841 + C13591 * C854 + C13596 * C840 + C139575 * C853) *
               C92 -
           (C13596 * C829 + C139575 * C837 + C13595 * C828 + C13591 * C836) *
               C104 -
           (C13596 * C839 + C139575 * C852 + C13595 * C840 + C13591 * C853) *
               C93 +
           (C13595 * C829 + C13591 * C837 + C13596 * C830 + C139575 * C838) *
               C105 +
           (C13595 * C839 + C13591 * C852 + C13596 * C843 + C139575 * C855) *
               C94 -
           (C13596 * C2705 + C139575 * C2706 + C13595 * C830 + C13591 * C838) *
               C106 -
           (C13596 * C2707 + C139575 * C2708 + C13595 * C843 + C13591 * C855) *
               C95) *
              C139586) *
         C139457 * C139339 * C139328) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139575 * C114) *
                C826 +
            (C13595 * C116 + C13591 * C125 + C13596 * C117 + C139575 * C126) *
                C821 -
            (C13596 * C109 + C139575 * C115 + C13595 * C108 + C13591 * C114) *
                C827 -
            (C13596 * C118 + C139575 * C127 + C13595 * C117 + C13591 * C126) *
                C139305) *
               C13593 +
           ((C14336 + C14337) * C826 + (C14338 + C14339) * C821 -
            (C14340 + C14341) * C827 - (C14342 + C14343) * C139305) *
               C139586) *
              C139457 * C1761 +
          (((C13595 * C1764 + C13591 * C1772 + C13596 * C1765 +
             C139575 * C1773) *
                C827 -
            ((C13596 * C1776 + C139575 * C1789 + C13595 * C1777 +
              C13591 * C1790) *
                 C821 +
             (C13596 * C1764 + C139575 * C1772 + C13595 * C1767 +
              C13591 * C1778) *
                 C826) +
            (C13595 * C1776 + C13591 * C1789 + C13596 * C1775 +
             C139575 * C1788) *
                C139305) *
               C13593 +
           ((C13595 * C4224 + C13591 * C4228 + C13596 * C4225 +
             C139575 * C4229) *
                C827 -
            ((C13596 * C4231 + C139575 * C4236 + C13595 * C4230 +
              C13591 * C4235) *
                 C821 +
             (C13596 * C4224 + C139575 * C4228 + C13595 * C4223 +
              C13591 * C4227) *
                 C826) +
            (C13595 * C4231 + C13591 * C4236 + C13596 * C4232 +
             C139575 * C4237) *
                C139305) *
               C139586) *
              C139457 * C1762 +
          (((C13595 * C1768 + C13591 * C1780 + C13596 * C1769 +
             C139575 * C1781) *
                C826 +
            (C13595 * C1783 + C13591 * C1792 + C13596 * C1784 +
             C139575 * C1793) *
                C821 -
            (C13596 * C1770 + C139575 * C1782 + C13595 * C1769 +
             C13591 * C1781) *
                C827 -
            (C13596 * C1785 + C139575 * C1794 + C13595 * C1784 +
             C13591 * C1793) *
                C139305) *
               C13593 +
           ((C13595 * C6442 + C13591 * C6448 + C13596 * C6441 +
             C139575 * C6447) *
                C826 +
            (C13595 * C6445 + C13591 * C6451 + C13596 * C6444 +
             C139575 * C6450) *
                C821 -
            (C13596 * C6440 + C139575 * C6446 + C13595 * C6441 +
             C13591 * C6447) *
                C827 -
            (C13596 * C6443 + C139575 * C6449 + C13595 * C6444 +
             C13591 * C6450) *
                C139305) *
               C139586) *
              C139457 * C1763) *
         C139328) /
            (p * q * std::sqrt(p + q));
    d2eexy[17] +=
        (-std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139575 * C114) *
                C934 +
            (C13595 * C182 + C13591 * C188 + C13596 * C183 + C139575 * C189) *
                C823 -
            (C14337 + C14336) * C935 - (C14466 + C14467) * C824 +
            (C14349 + C14348) * C936 + (C14468 + C14469) * C825) *
               C13593 +
           ((C14336 + C14337) * C934 + (C14467 + C14466) * C823 -
            (C14348 + C14349) * C935 - (C14469 + C14468) * C824 +
            (C13595 * C5916 + C13591 * C5922 + C13596 * C5915 +
             C139575 * C5921) *
                C936 +
            (C13595 * C5982 + C13591 * C5985 + C13596 * C5981 +
             C139575 * C5984) *
                C825) *
               C139586) *
              C139457 * C821 +
          (((C14341 + C14340) * C935 -
            ((C13596 * C184 + C139575 * C190 + C13595 * C183 + C13591 * C189) *
                 C823 +
             (C13596 * C109 + C139575 * C115 + C13595 * C108 + C13591 * C114) *
                 C934) +
            (C14470 + C14471) * C824 - (C14345 + C14344) * C936 -
            (C14472 + C14473) * C825) *
               C13593 +
           ((C14344 + C14345) * C935 -
            ((C14471 + C14470) * C823 + (C14340 + C14341) * C934) +
            (C14473 + C14472) * C824 -
            (C13596 * C5914 + C139575 * C5920 + C13595 * C5915 +
             C13591 * C5921) *
                C936 -
            (C13596 * C5980 + C139575 * C5983 + C13595 * C5981 +
             C13591 * C5984) *
                C825) *
               C139586) *
              C139457 * C139305) *
         C139339) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139575 * C114) *
                C181 +
            (C13595 * C182 + C13591 * C188 + C13596 * C183 + C139575 * C189) *
                C139328) *
               C13593 +
           ((C13595 * C831 + C13591 * C842 + C13596 * C828 + C139575 * C836) *
                C181 +
            (C13595 * C939 + C13591 * C947 + C13596 * C938 + C139575 * C946) *
                C139328) *
               C139586) *
              C139457 * C92 -
          (((C13596 * C937 + C139575 * C945 + C13595 * C938 + C13591 * C946) *
                C139328 +
            (C13596 * C829 + C139575 * C837 + C13595 * C828 + C13591 * C836) *
                C181) *
               C139586 +
           ((C13596 * C184 + C139575 * C190 + C13595 * C183 + C13591 * C189) *
                C139328 +
            (C13596 * C109 + C139575 * C115 + C13595 * C108 + C13591 * C114) *
                C181) *
               C13593) *
              C139457 * C93 +
          (((C13595 * C109 + C13591 * C115 + C13596 * C110 + C139575 * C119) *
                C181 +
            (C13595 * C184 + C13591 * C190 + C13596 * C185 + C139575 * C191) *
                C139328) *
               C13593 +
           ((C13595 * C829 + C13591 * C837 + C13596 * C830 + C139575 * C838) *
                C181 +
            (C13595 * C937 + C13591 * C945 + C13596 * C943 + C139575 * C951) *
                C139328) *
               C139586) *
              C139457 * C94 -
          (((C13596 * C2785 + C139575 * C2786 + C13595 * C943 + C13591 * C951) *
                C139328 +
            (C13596 * C2705 + C139575 * C2706 + C13595 * C830 + C13591 * C838) *
                C181) *
               C139586 +
           ((C13596 * C186 + C139575 * C192 + C13595 * C185 + C13591 * C191) *
                C139328 +
            (C13596 * C111 + C139575 * C121 + C13595 * C110 + C13591 * C119) *
                C181) *
               C13593) *
              C139457 * C95) *
         C139339) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139575 * C114) *
                 C181 +
             (C13595 * C182 + C13591 * C188 + C13596 * C183 + C139575 * C189) *
                 C139328) *
                C13593 +
            ((C14336 + C14337) * C181 + (C14467 + C14466) * C139328) *
                C139586) *
               C139457 * C821 -
           (((C14471 + C14470) * C139328 + (C14340 + C14341) * C181) * C139586 +
            ((C13596 * C184 + C139575 * C190 + C13595 * C183 + C13591 * C189) *
                 C139328 +
             (C13596 * C109 + C139575 * C115 + C13595 * C108 + C13591 * C114) *
                 C181) *
                C13593) *
               C139457 * C139305) *
              C1761 +
          ((((C13595 * C1764 + C13591 * C1772 + C13596 * C1765 +
              C139575 * C1773) *
                 C181 +
             (C13595 * C1870 + C13591 * C1878 + C13596 * C1871 +
              C139575 * C1879) *
                 C139328) *
                C13593 +
            ((C13595 * C4224 + C13591 * C4228 + C13596 * C4225 +
              C139575 * C4229) *
                 C181 +
             (C13595 * C4338 + C13591 * C4342 + C13596 * C4339 +
              C139575 * C4343) *
                 C139328) *
                C139586) *
               C139457 * C139305 -
           (((C13596 * C4338 + C139575 * C4342 + C13595 * C4337 +
              C13591 * C4341) *
                 C139328 +
             (C13596 * C4224 + C139575 * C4228 + C13595 * C4223 +
              C13591 * C4227) *
                 C181) *
                C139586 +
            ((C13596 * C1870 + C139575 * C1878 + C13595 * C1873 +
              C13591 * C1881) *
                 C139328 +
             (C13596 * C1764 + C139575 * C1772 + C13595 * C1767 +
              C13591 * C1778) *
                 C181) *
                C13593) *
               C139457 * C821) *
              C1762 +
          ((((C13595 * C1768 + C13591 * C1780 + C13596 * C1769 +
              C139575 * C1781) *
                 C181 +
             (C13595 * C1874 + C13591 * C1882 + C13596 * C1875 +
              C139575 * C1883) *
                 C139328) *
                C13593 +
            ((C13595 * C6442 + C13591 * C6448 + C13596 * C6441 +
              C139575 * C6447) *
                 C181 +
             (C13595 * C6528 + C13591 * C6531 + C13596 * C6527 +
              C139575 * C6530) *
                 C139328) *
                C139586) *
               C139457 * C821 -
           (((C13596 * C6526 + C139575 * C6529 + C13595 * C6527 +
              C13591 * C6530) *
                 C139328 +
             (C13596 * C6440 + C139575 * C6446 + C13595 * C6441 +
              C13591 * C6447) *
                 C181) *
                C139586 +
            ((C13596 * C1876 + C139575 * C1884 + C13595 * C1875 +
              C13591 * C1883) *
                 C139328 +
             (C13596 * C1770 + C139575 * C1782 + C13595 * C1769 +
              C13591 * C1781) *
                 C181) *
                C13593) *
               C139457 * C139305) *
              C1763)) /
            (p * q * std::sqrt(p + q));
    d2eexz[17] +=
        (-std::pow(Pi, 2.5) *
         (((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139575 * C114) *
                 C244 +
             (C13595 * C245 + C13591 * C251 + C13596 * C246 + C139575 * C252) *
                 C139339) *
                C13593 +
            ((C14336 + C14337) * C244 + (C14588 + C14589) * C139339) *
                C139586) *
               C139457 * C823 -
           (((C14590 + C14591) * C139339 + (C14348 + C14349) * C244) * C139586 +
            ((C14589 + C14588) * C139339 + (C14337 + C14336) * C244) * C13593) *
               C139457 * C824 +
           (((C14349 + C14348) * C244 + (C14591 + C14590) * C139339) * C13593 +
            ((C13595 * C5916 + C13591 * C5922 + C13596 * C5915 +
              C139575 * C5921) *
                 C244 +
             (C13595 * C6038 + C13591 * C6041 + C13596 * C6037 +
              C139575 * C6040) *
                 C139339) *
                C139586) *
               C139457 * C825) *
              C821 +
          ((((C14341 + C14340) * C244 + (C14592 + C14593) * C139339) * C13593 +
            ((C14344 + C14345) * C244 + (C14594 + C14595) * C139339) *
                C139586) *
               C139457 * C824 -
           (((C14593 + C14592) * C139339 + (C14340 + C14341) * C244) * C139586 +
            ((C13596 * C247 + C139575 * C253 + C13595 * C246 + C13591 * C252) *
                 C139339 +
             (C13596 * C109 + C139575 * C115 + C13595 * C108 + C13591 * C114) *
                 C244) *
                C13593) *
               C139457 * C823 -
           (((C13596 * C6036 + C139575 * C6039 + C13595 * C6037 +
              C13591 * C6040) *
                 C139339 +
             (C13596 * C5914 + C139575 * C5920 + C13595 * C5915 +
              C13591 * C5921) *
                 C244) *
                C139586 +
            ((C14595 + C14594) * C139339 + (C14345 + C14344) * C244) * C13593) *
               C139457 * C825) *
              C139305)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139575 * C114) *
                C244 +
            (C13595 * C245 + C13591 * C251 + C13596 * C246 + C139575 * C252) *
                C139339) *
               C13593 +
           ((C13595 * C831 + C13591 * C842 + C13596 * C828 + C139575 * C836) *
                C244 +
            (C13595 * C1029 + C13591 * C1037 + C13596 * C1028 +
             C139575 * C1036) *
                C139339) *
               C139586) *
              C139457 * C139328 * C92 -
          (((C13596 * C1027 + C139575 * C1035 + C13595 * C1028 +
             C13591 * C1036) *
                C139339 +
            (C13596 * C829 + C139575 * C837 + C13595 * C828 + C13591 * C836) *
                C244) *
               C139586 +
           ((C13596 * C247 + C139575 * C253 + C13595 * C246 + C13591 * C252) *
                C139339 +
            (C13596 * C109 + C139575 * C115 + C13595 * C108 + C13591 * C114) *
                C244) *
               C13593) *
              C139457 * C139328 * C93 +
          (((C13595 * C109 + C13591 * C115 + C13596 * C110 + C139575 * C119) *
                C244 +
            (C13595 * C247 + C13591 * C253 + C13596 * C248 + C139575 * C254) *
                C139339) *
               C13593 +
           ((C13595 * C829 + C13591 * C837 + C13596 * C830 + C139575 * C838) *
                C244 +
            (C13595 * C1027 + C13591 * C1035 + C13596 * C1033 +
             C139575 * C1041) *
                C139339) *
               C139586) *
              C139457 * C139328 * C94 -
          (((C13596 * C2861 + C139575 * C2862 + C13595 * C1033 +
             C13591 * C1041) *
                C139339 +
            (C13596 * C2705 + C139575 * C2706 + C13595 * C830 + C13591 * C838) *
                C244) *
               C139586 +
           ((C13596 * C249 + C139575 * C255 + C13595 * C248 + C13591 * C254) *
                C139339 +
            (C13596 * C111 + C139575 * C121 + C13595 * C110 + C13591 * C119) *
                C244) *
               C13593) *
              C139457 * C139328 * C95)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139575 * C114) *
                C1960 +
            (C13595 * C245 + C13591 * C251 + C13596 * C246 + C139575 * C252) *
                C1761 -
            (C13596 * C1764 + C139575 * C1772 + C13595 * C1767 +
             C13591 * C1778) *
                C1961 -
            (C13596 * C1964 + C139575 * C1972 + C13595 * C1965 +
             C13591 * C1973) *
                C1762 +
            (C13595 * C1768 + C13591 * C1780 + C13596 * C1769 +
             C139575 * C1781) *
                C1962 +
            (C13595 * C1966 + C13591 * C1974 + C13596 * C1967 +
             C139575 * C1975) *
                C1763) *
               C13593 +
           ((C14336 + C14337) * C1960 + (C14588 + C14589) * C1761 -
            (C13596 * C4224 + C139575 * C4228 + C13595 * C4223 +
             C13591 * C4227) *
                C1961 -
            (C13596 * C4444 + C139575 * C4448 + C13595 * C4443 +
             C13591 * C4447) *
                C1762 +
            (C13595 * C6442 + C13591 * C6448 + C13596 * C6441 +
             C139575 * C6447) *
                C1962 +
            (C13595 * C6608 + C13591 * C6611 + C13596 * C6607 +
             C139575 * C6610) *
                C1763) *
               C139586) *
              C139457 * C139328 * C821 +
          (((C13595 * C1764 + C13591 * C1772 + C13596 * C1765 +
             C139575 * C1773) *
                C1961 -
            ((C13596 * C247 + C139575 * C253 + C13595 * C246 + C13591 * C252) *
                 C1761 +
             (C13596 * C109 + C139575 * C115 + C13595 * C108 + C13591 * C114) *
                 C1960) +
            (C13595 * C1964 + C13591 * C1972 + C13596 * C1963 +
             C139575 * C1971) *
                C1762 -
            (C13596 * C1770 + C139575 * C1782 + C13595 * C1769 +
             C13591 * C1781) *
                C1962 -
            (C13596 * C1968 + C139575 * C1976 + C13595 * C1967 +
             C13591 * C1975) *
                C1763) *
               C13593 +
           ((C13595 * C4224 + C13591 * C4228 + C13596 * C4225 +
             C139575 * C4229) *
                C1961 -
            ((C14593 + C14592) * C1761 + (C14340 + C14341) * C1960) +
            (C13595 * C4444 + C13591 * C4448 + C13596 * C4445 +
             C139575 * C4449) *
                C1762 -
            (C13596 * C6440 + C139575 * C6446 + C13595 * C6441 +
             C13591 * C6447) *
                C1962 -
            (C13596 * C6606 + C139575 * C6609 + C13595 * C6607 +
             C13591 * C6610) *
                C1763) *
               C139586) *
              C139457 * C139328 * C139305)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[17] +=
        (-std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C831 + C139586 * C1118) *
                C826 +
            (C13795 * C116 + C13593 * C314 + C13796 * C841 + C139586 * C1125) *
                C821 -
            (C13822 + C13823) * C827 - (C13824 + C13825) * C139305) *
               C139457 * C13591 +
           ((C13823 + C13822) * C826 + (C13825 + C13824) * C821 -
            (C13827 + C13826) * C827 - (C13829 + C13828) * C139305) *
               C139457 * C139575) *
              C139339 * C823 +
          (((C14710 + C14711) * C827 -
            ((C13796 * C847 + C139586 * C1129 + C13795 * C841 +
              C13593 * C1125) *
                 C821 +
             (C13796 * C832 + C139586 * C1121 + C13795 * C831 +
              C13593 * C1118) *
                 C826) +
            (C14712 + C14713) * C139305) *
               C139457 * C13591 +
           ((C13795 * C829 + C13593 * C1119 + C13796 * C834 + C139586 * C1123) *
                C827 -
            ((C14713 + C14712) * C821 + (C14711 + C14710) * C826) +
            (C13795 * C839 + C13593 * C1127 + C13796 * C849 + C139586 * C1131) *
                C139305) *
               C139457 * C139575) *
              C139339 * C824 +
          (((C13795 * C832 + C13593 * C1121 + C13796 * C5916 +
             C139586 * C6094) *
                C826 +
            (C13795 * C847 + C13593 * C1129 + C13796 * C5919 +
             C139586 * C6097) *
                C821 -
            (C14714 + C14715) * C827 - (C14716 + C14717) * C139305) *
               C139457 * C13591 +
           ((C14715 + C14714) * C826 + (C14717 + C14716) * C821 -
            (C13796 * C5914 + C139586 * C6092 + C13795 * C834 +
             C13593 * C1123) *
                C827 -
            (C13796 * C5917 + C139586 * C6095 + C13795 * C849 +
             C13593 * C1131) *
                C139305) *
               C139457 * C139575) *
              C139339 * C825)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C13795 * C107 + C13593 * C308 + C13796 * C831 + C139586 * C1118) *
               C103 +
           (C13795 * C116 + C13593 * C314 + C13796 * C841 + C139586 * C1125) *
               C92 -
           (C13822 + C13823) * C104 - (C13824 + C13825) * C93 +
           (C13826 + C13827) * C105 + (C13828 + C13829) * C94 -
           (C13830 + C13831) * C106 - (C13832 + C13833) * C95) *
              C139457 * C13591 +
          ((C13823 + C13822) * C103 + (C13825 + C13824) * C92 -
           (C13827 + C13826) * C104 - (C13829 + C13828) * C93 +
           (C13831 + C13830) * C105 + (C13833 + C13832) * C94 -
           (C13796 * C2705 + C139586 * C2937 + C13795 * C111 + C13593 * C312) *
               C106 -
           (C13796 * C2707 + C139586 * C2938 + C13795 * C122 + C13593 * C318) *
               C95) *
              C139457 * C139575) *
         C139339 * C139328) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C831 + C139586 * C1118) *
                C826 +
            (C13795 * C116 + C13593 * C314 + C13796 * C841 + C139586 * C1125) *
                C821 -
            (C13822 + C13823) * C827 - (C13824 + C13825) * C139305) *
               C139457 * C13591 +
           ((C13823 + C13822) * C826 + (C13825 + C13824) * C821 -
            (C13827 + C13826) * C827 - (C13829 + C13828) * C139305) *
               C139457 * C139575) *
              C1761 +
          (((C15708 + C15709) * C827 -
            ((C13796 * C4230 + C139586 * C4553 + C13795 * C1777 +
              C13593 * C2061) *
                 C821 +
             (C13796 * C4223 + C139586 * C4549 + C13795 * C1767 +
              C13593 * C2054) *
                 C826) +
            (C15710 + C15711) * C139305) *
               C139457 * C13591 +
           ((C13795 * C1765 + C13593 * C2055 + C13796 * C4225 +
             C139586 * C4551) *
                C827 -
            ((C15711 + C15710) * C821 + (C15709 + C15708) * C826) +
            (C13795 * C1775 + C13593 * C2063 + C13796 * C4232 +
             C139586 * C4555) *
                C139305) *
               C139457 * C139575) *
              C1762 +
          (((C13795 * C1768 + C13593 * C2057 + C13796 * C6442 +
             C139586 * C6688) *
                C826 +
            (C13795 * C1783 + C13593 * C2065 + C13796 * C6445 +
             C139586 * C6691) *
                C821 -
            (C15712 + C15713) * C827 - (C15714 + C15715) * C139305) *
               C139457 * C13591 +
           ((C15713 + C15712) * C826 + (C15715 + C15714) * C821 -
            (C13796 * C6440 + C139586 * C6686 + C13795 * C1770 +
             C13593 * C2059) *
                C827 -
            (C13796 * C6443 + C139586 * C6689 + C13795 * C1785 +
             C13593 * C2067) *
                C139305) *
               C139457 * C139575) *
              C1763) *
         C139328) /
            (p * q * std::sqrt(p + q));
    d2eeyy[17] +=
        (-std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C831 + C139586 * C1118) *
                C934 +
            (C13795 * C182 + C13593 * C394 + C13796 * C939 + C139586 * C1231) *
                C823 -
            (C13796 * C832 + C139586 * C1121 + C13795 * C831 + C13593 * C1118) *
                C935 -
            (C13796 * C940 + C139586 * C1232 + C13795 * C939 + C13593 * C1231) *
                C824 +
            (C13795 * C832 + C13593 * C1121 + C13796 * C5916 +
             C139586 * C6094) *
                C936 +
            (C13795 * C940 + C13593 * C1232 + C13796 * C5982 +
             C139586 * C6148) *
                C825) *
               C139457 * C13591 +
           ((C13823 + C13822) * C934 + (C13912 + C13913) * C823 -
            (C14711 + C14710) * C935 - (C14824 + C14825) * C824 +
            (C14715 + C14714) * C936 + (C14826 + C14827) * C825) *
               C139457 * C139575) *
              C821 +
          (((C14710 + C14711) * C935 -
            ((C13913 + C13912) * C823 + (C13822 + C13823) * C934) +
            (C14825 + C14824) * C824 - (C14714 + C14715) * C936 -
            (C14827 + C14826) * C825) *
               C139457 * C13591 +
           ((C13795 * C829 + C13593 * C1119 + C13796 * C834 + C139586 * C1123) *
                C935 -
            ((C13914 + C13915) * C823 + (C13827 + C13826) * C934) +
            (C13795 * C937 + C13593 * C1235 + C13796 * C942 + C139586 * C1236) *
                C824 -
            (C13796 * C5914 + C139586 * C6092 + C13795 * C834 +
             C13593 * C1123) *
                C936 -
            (C13796 * C5980 + C139586 * C6150 + C13795 * C942 +
             C13593 * C1236) *
                C825) *
               C139457 * C139575) *
              C139305) *
         C139339) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C831 + C139586 * C1118) *
                C181 +
            (C13795 * C182 + C13593 * C394 + C13796 * C939 + C139586 * C1231) *
                C139328) *
               C139457 * C13591 +
           ((C13823 + C13822) * C181 + (C13912 + C13913) * C139328) * C139457 *
               C139575) *
              C92 -
          (((C13914 + C13915) * C139328 + (C13827 + C13826) * C181) * C139457 *
               C139575 +
           ((C13913 + C13912) * C139328 + (C13822 + C13823) * C181) * C139457 *
               C13591) *
              C93 +
          (((C13826 + C13827) * C181 + (C13915 + C13914) * C139328) * C139457 *
               C13591 +
           ((C13831 + C13830) * C181 + (C13916 + C13917) * C139328) * C139457 *
               C139575) *
              C94 -
          (((C13796 * C2785 + C139586 * C3019 + C13795 * C186 + C13593 * C398) *
                C139328 +
            (C13796 * C2705 + C139586 * C2937 + C13795 * C111 + C13593 * C312) *
                C181) *
               C139457 * C139575 +
           ((C13917 + C13916) * C139328 + (C13830 + C13831) * C181) * C139457 *
               C13591) *
              C95) *
         C139339) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C13795 * C107 + C13593 * C308 + C13796 * C831 + C139586 * C1118) *
                 C181 +
             (C13795 * C182 + C13593 * C394 + C13796 * C939 + C139586 * C1231) *
                 C139328) *
                C139457 * C13591 +
            ((C13823 + C13822) * C181 + (C13912 + C13913) * C139328) * C139457 *
                C139575) *
               C821 -
           (((C13914 + C13915) * C139328 + (C13827 + C13826) * C181) * C139457 *
                C139575 +
            ((C13913 + C13912) * C139328 + (C13822 + C13823) * C181) * C139457 *
                C13591) *
               C139305) *
              C1761 +
          ((((C15708 + C15709) * C181 + (C15822 + C15823) * C139328) * C139457 *
                C13591 +
            ((C13795 * C1765 + C13593 * C2055 + C13796 * C4225 +
              C139586 * C4551) *
                 C181 +
             (C13795 * C1871 + C13593 * C2168 + C13796 * C4339 +
              C139586 * C4669) *
                 C139328) *
                C139457 * C139575) *
               C139305 -
           (((C15823 + C15822) * C139328 + (C15709 + C15708) * C181) * C139457 *
                C139575 +
            ((C13796 * C4337 + C139586 * C4667 + C13795 * C1873 +
              C13593 * C2170) *
                 C139328 +
             (C13796 * C4223 + C139586 * C4549 + C13795 * C1767 +
              C13593 * C2054) *
                 C181) *
                C139457 * C13591) *
               C821) *
              C1762 +
          ((((C13795 * C1768 + C13593 * C2057 + C13796 * C6442 +
              C139586 * C6688) *
                 C181 +
             (C13795 * C1874 + C13593 * C2171 + C13796 * C6528 +
              C139586 * C6766) *
                 C139328) *
                C139457 * C13591 +
            ((C15713 + C15712) * C181 + (C15824 + C15825) * C139328) * C139457 *
                C139575) *
               C821 -
           (((C13796 * C6526 + C139586 * C6768 + C13795 * C1876 +
              C13593 * C2173) *
                 C139328 +
             (C13796 * C6440 + C139586 * C6686 + C13795 * C1770 +
              C13593 * C2059) *
                 C181) *
                C139457 * C139575 +
            ((C15825 + C15824) * C139328 + (C15712 + C15713) * C181) * C139457 *
                C13591) *
               C139305) *
              C1763)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[17] +=
        (-std::pow(Pi, 2.5) *
         (((((C13795 * C107 + C13593 * C308 + C13796 * C831 + C139586 * C1118) *
                 C244 +
             (C13795 * C245 + C13593 * C474 + C13796 * C1029 +
              C139586 * C1339) *
                 C139339) *
                C139457 * C13591 +
            ((C13823 + C13822) * C244 + (C13996 + C13997) * C139339) * C139457 *
                C139575) *
               C823 -
           (((C14934 + C14935) * C139339 + (C14711 + C14710) * C244) * C139457 *
                C139575 +
            ((C13796 * C1030 + C139586 * C1340 + C13795 * C1029 +
              C13593 * C1339) *
                 C139339 +
             (C13796 * C832 + C139586 * C1121 + C13795 * C831 +
              C13593 * C1118) *
                 C244) *
                C139457 * C13591) *
               C824 +
           (((C13795 * C832 + C13593 * C1121 + C13796 * C5916 +
              C139586 * C6094) *
                 C244 +
             (C13795 * C1030 + C13593 * C1340 + C13796 * C6038 +
              C139586 * C6203) *
                 C139339) *
                C139457 * C13591 +
            ((C14715 + C14714) * C244 + (C14936 + C14937) * C139339) * C139457 *
                C139575) *
               C825) *
              C821 +
          ((((C14710 + C14711) * C244 + (C14935 + C14934) * C139339) * C139457 *
                C13591 +
            ((C13795 * C829 + C13593 * C1119 + C13796 * C834 +
              C139586 * C1123) *
                 C244 +
             (C13795 * C1027 + C13593 * C1337 + C13796 * C1032 +
              C139586 * C1342) *
                 C139339) *
                C139457 * C139575) *
               C824 -
           (((C13998 + C13999) * C139339 + (C13827 + C13826) * C244) * C139457 *
                C139575 +
            ((C13997 + C13996) * C139339 + (C13822 + C13823) * C244) * C139457 *
                C13591) *
               C823 -
           (((C13796 * C6036 + C139586 * C6201 + C13795 * C1032 +
              C13593 * C1342) *
                 C139339 +
             (C13796 * C5914 + C139586 * C6092 + C13795 * C834 +
              C13593 * C1123) *
                 C244) *
                C139457 * C139575 +
            ((C14937 + C14936) * C139339 + (C14714 + C14715) * C244) * C139457 *
                C13591) *
               C825) *
              C139305)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C831 + C139586 * C1118) *
                C244 +
            (C13795 * C245 + C13593 * C474 + C13796 * C1029 + C139586 * C1339) *
                C139339) *
               C139457 * C13591 +
           ((C13823 + C13822) * C244 + (C13996 + C13997) * C139339) * C139457 *
               C139575) *
              C139328 * C92 -
          (((C13998 + C13999) * C139339 + (C13827 + C13826) * C244) * C139457 *
               C139575 +
           ((C13997 + C13996) * C139339 + (C13822 + C13823) * C244) * C139457 *
               C13591) *
              C139328 * C93 +
          (((C13826 + C13827) * C244 + (C13999 + C13998) * C139339) * C139457 *
               C13591 +
           ((C13831 + C13830) * C244 + (C14000 + C14001) * C139339) * C139457 *
               C139575) *
              C139328 * C94 -
          (((C13796 * C2861 + C139586 * C3113 + C13795 * C249 + C13593 * C478) *
                C139339 +
            (C13796 * C2705 + C139586 * C2937 + C13795 * C111 + C13593 * C312) *
                C244) *
               C139457 * C139575 +
           ((C14001 + C14000) * C139339 + (C13830 + C13831) * C244) * C139457 *
               C13591) *
              C139328 * C95)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C831 + C139586 * C1118) *
                C1960 +
            (C13795 * C245 + C13593 * C474 + C13796 * C1029 + C139586 * C1339) *
                C1761 -
            (C13796 * C4223 + C139586 * C4549 + C13795 * C1767 +
             C13593 * C2054) *
                C1961 -
            (C13796 * C4443 + C139586 * C4783 + C13795 * C1965 +
             C13593 * C2269) *
                C1762 +
            (C13795 * C1768 + C13593 * C2057 + C13796 * C6442 +
             C139586 * C6688) *
                C1962 +
            (C13795 * C1966 + C13593 * C2270 + C13796 * C6608 +
             C139586 * C6843) *
                C1763) *
               C139457 * C13591 +
           ((C13823 + C13822) * C1960 + (C13996 + C13997) * C1761 -
            (C15709 + C15708) * C1961 - (C15932 + C15933) * C1762 +
            (C15713 + C15712) * C1962 + (C15934 + C15935) * C1763) *
               C139457 * C139575) *
              C139328 * C821 +
          (((C15708 + C15709) * C1961 -
            ((C13997 + C13996) * C1761 + (C13822 + C13823) * C1960) +
            (C15933 + C15932) * C1762 - (C15712 + C15713) * C1962 -
            (C15935 + C15934) * C1763) *
               C139457 * C13591 +
           ((C13795 * C1765 + C13593 * C2055 + C13796 * C4225 +
             C139586 * C4551) *
                C1961 -
            ((C13998 + C13999) * C1761 + (C13827 + C13826) * C1960) +
            (C13795 * C1963 + C13593 * C2273 + C13796 * C4445 +
             C139586 * C4785) *
                C1762 -
            (C13796 * C6440 + C139586 * C6686 + C13795 * C1770 +
             C13593 * C2059) *
                C1962 -
            (C13796 * C6606 + C139586 * C6845 + C13795 * C1968 +
             C13593 * C2274) *
                C1763) *
               C139457 * C139575) *
              C139328 * C139305)) /
            (p * q * std::sqrt(p + q));
    d2eezx[17] +=
        (-std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139457 * C555) * C826 +
             (C554 * C116 + C139457 * C561) * C821 - C584 * C827 -
             C585 * C139305) *
                C13591 +
            (C584 * C826 + C585 * C821 - C586 * C827 - C587 * C139305) *
                C139575) *
               C13593 +
           ((C15066 + C15067 - C15040 - C15041) * C13591 +
            (C15042 + C15043 - C15044 - C15045) * C139575) *
               C139586) *
              C139339 * C823 +
          (((C15040 - (C15067 + C15066) + C15041) * C13591 +
            (C15044 - (C15043 + C15042) + C15045) * C139575) *
               C13593 +
           ((C15046 - (C15068 + C15069) + C15051) * C13591 +
            (C15052 - (C15053 + C15054) + C15055) * C139575) *
               C139586) *
              C139339 * C824 +
          (((C15069 + C15068 - C15046 - C15051) * C13591 +
            (C15054 + C15053 - C15052 - C15055) * C139575) *
               C13593 +
           (((C554 * C5916 + C139457 * C6256) * C826 +
             (C554 * C5919 + C139457 * C6259) * C821 - C15064 * C827 -
             C15065 * C139305) *
                C13591 +
            (C15064 * C826 + C15065 * C821 -
             (C554 * C5914 + C139457 * C6254) * C827 -
             (C554 * C5917 + C139457 * C6257) * C139305) *
                C139575) *
               C139586) *
              C139339 * C825)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C554 * C107 + C139457 * C555) * C103 +
            (C554 * C116 + C139457 * C561) * C92 - C584 * C104 - C585 * C93 +
            C586 * C105 + C587 * C94 - C588 * C106 - C589 * C95) *
               C13591 +
           (C584 * C103 + C585 * C92 - C586 * C104 - C587 * C93 + C588 * C105 +
            C589 * C94 - C590 * C106 - C591 * C95) *
               C139575) *
              C13593 +
          (((C554 * C831 + C139457 * C1440) * C103 +
            (C554 * C841 + C139457 * C1447) * C92 - C1472 * C104 - C1473 * C93 +
            C1474 * C105 + C1475 * C94 - C3202 * C106 - C3203 * C95) *
               C13591 +
           (C1472 * C103 + C1473 * C92 - C1474 * C104 - C1475 * C93 +
            C3202 * C105 + C3203 * C94 -
            (C554 * C2705 + C139457 * C3195) * C106 -
            (C554 * C2707 + C139457 * C3196) * C95) *
               C139575) *
              C139586) *
         C139339 * C139328) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139457 * C555) * C826 +
             (C554 * C116 + C139457 * C561) * C821 - C584 * C827 -
             C585 * C139305) *
                C13591 +
            (C584 * C826 + C585 * C821 - C586 * C827 - C587 * C139305) *
                C139575) *
               C13593 +
           ((C15066 + C15067 - C15040 - C15041) * C13591 +
            (C15042 + C15043 - C15044 - C15045) * C139575) *
               C139586) *
              C1761 +
          (((C2408 * C827 -
             ((C554 * C1777 + C139457 * C2383) * C821 +
              (C554 * C1767 + C139457 * C2376) * C826) +
             C2409 * C139305) *
                C13591 +
            (C2410 * C827 - (C2409 * C821 + C2408 * C826) + C2411 * C139305) *
                C139575) *
               C13593 +
           ((C4916 * C827 -
             ((C554 * C4230 + C139457 * C4903) * C821 +
              (C554 * C4223 + C139457 * C4899) * C826) +
             C4917 * C139305) *
                C13591 +
            (C4918 * C827 - (C4917 * C821 + C4916 * C826) + C4919 * C139305) *
                C139575) *
               C139586) *
              C1762 +
          ((((C554 * C1768 + C139457 * C2379) * C826 +
             (C554 * C1783 + C139457 * C2387) * C821 - C2412 * C827 -
             C2413 * C139305) *
                C13591 +
            (C2412 * C826 + C2413 * C821 - C2414 * C827 - C2415 * C139305) *
                C139575) *
               C13593 +
           (((C554 * C6442 + C139457 * C6922) * C826 +
             (C554 * C6445 + C139457 * C6925) * C821 - C16038 * C827 -
             C16039 * C139305) *
                C13591 +
            (C16038 * C826 + C16039 * C821 -
             (C554 * C6440 + C139457 * C6920) * C827 -
             (C554 * C6443 + C139457 * C6923) * C139305) *
                C139575) *
               C139586) *
              C1763) *
         C139328) /
            (p * q * std::sqrt(p + q));
    d2eezy[17] +=
        (-std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139457 * C555) * C934 +
             (C554 * C182 + C139457 * C641) * C823 - C15060 * C935 -
             C15179 * C824 + C15063 * C936 + C15180 * C825) *
                C13591 +
            (C1562 + C1563 - C1564 - C1582 + C1567 + C1583) * C139575) *
               C13593 +
           ((C15060 * C934 + C15179 * C823 - C15063 * C935 - C15180 * C824 +
             (C554 * C5916 + C139457 * C6256) * C936 +
             (C554 * C5982 + C139457 * C6310) * C825) *
                C13591 +
            (C15172 + C15173 - C15174 - C15175 + C15176 + C15182) * C139575) *
               C139586) *
              C821 +
          (((C1564 - (C1563 + C1562) + C1582 - C1567 - C1583) * C13591 +
            (C1572 - (C1571 + C1570) + C1584 - C1575 - C1585) * C139575) *
               C13593 +
           ((C15174 - (C15173 + C15172) + C15175 - C15176 - C15182) * C13591 +
            (C1478 * C935 - (C1580 * C823 + C1474 * C934) + C1581 * C824 -
             (C554 * C5914 + C139457 * C6254) * C936 -
             (C554 * C5980 + C139457 * C6312) * C825) *
                C139575) *
               C139586) *
              C139305) *
         C139339) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139457 * C555) * C181 +
             (C554 * C182 + C139457 * C641) * C139328) *
                C13591 +
            (C648 + C664) * C139575) *
               C13593 +
           (((C554 * C831 + C139457 * C1440) * C181 +
             (C554 * C939 + C139457 * C1553) * C139328) *
                C13591 +
            (C14134 + C14135) * C139575) *
               C139586) *
              C92 -
          (((C14136 + C14137) * C139575 + (C14135 + C14134) * C13591) *
               C139586 +
           ((C665 + C651) * C139575 + (C664 + C648) * C13591) * C13593) *
              C93 +
          ((C668 * C13591 + (C656 + C666) * C139575) * C13593 +
           ((C14137 + C14136) * C13591 + (C14138 + C14139) * C139575) *
               C139586) *
              C94 -
          ((((C554 * C2785 + C139457 * C3277) * C139328 +
             (C554 * C2705 + C139457 * C3195) * C181) *
                C139575 +
            (C14139 + C14138) * C13591) *
               C139586 +
           ((C667 + C657) * C139575 + C669 * C13591) * C13593) *
              C95) *
         C139339) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((((C554 * C107 + C139457 * C555) * C181 +
              (C554 * C182 + C139457 * C641) * C139328) *
                 C13591 +
             (C648 + C664) * C139575) *
                C13593 +
            ((C15060 * C181 + C15179 * C139328) * C13591 +
             (C14134 + C14135) * C139575) *
                C139586) *
               C821 -
           (((C14136 + C14137) * C139575 + (C14135 + C14134) * C13591) *
                C139586 +
            ((C665 + C651) * C139575 + (C664 + C648) * C13591) * C13593) *
               C139305) *
              C1761 +
          ((((C2498 + C2514) * C13591 + (C2501 + C2515) * C139575) * C13593 +
            ((C16138 + C16139) * C13591 +
             (C4918 * C181 + C5033 * C139328) * C139575) *
                C139586) *
               C139305 -
           (((C16139 + C16138) * C139575 +
             ((C554 * C4337 + C139457 * C5017) * C139328 +
              (C554 * C4223 + C139457 * C4899) * C181) *
                 C13591) *
                C139586 +
            ((C2514 + C2498) * C139575 +
             ((C554 * C1873 + C139457 * C2492) * C139328 +
              (C554 * C1767 + C139457 * C2376) * C181) *
                 C13591) *
                C13593) *
               C821) *
              C1762 +
          (((((C554 * C1768 + C139457 * C2379) * C181 +
              (C554 * C1874 + C139457 * C2493) * C139328) *
                 C13591 +
             (C2504 + C2516) * C139575) *
                C13593 +
            (((C554 * C6442 + C139457 * C6922) * C181 +
              (C554 * C6528 + C139457 * C7000) * C139328) *
                 C13591 +
             (C16140 + C16144) * C139575) *
                C139586) *
               C821 -
           ((((C554 * C6526 + C139457 * C7002) * C139328 +
              (C554 * C6440 + C139457 * C6920) * C181) *
                 C139575 +
             (C16144 + C16140) * C13591) *
                C139586 +
            ((C2517 + C2507) * C139575 + (C2516 + C2504) * C13591) * C13593) *
               C139305) *
              C1763)) /
            (p * q * std::sqrt(p + q));
    d2eezz[17] +=
        (-std::pow(Pi, 2.5) *
         ((((((C554 * C107 + C139457 * C555) * C244 +
              (C554 * C245 + C139457 * C719) * C139339) *
                 C13591 +
             (C726 + C742) * C139575) *
                C13593 +
            ((C15281 + C15297) * C13591 + C15284 * C139575) * C139586) *
               C823 -
           ((C15285 * C139575 + (C15298 + C15288) * C13591) * C139586 +
            (C15289 * C139575 + (C15297 + C15281) * C13591) * C13593) *
               C824 +
           (((C15288 + C15298) * C13591 + C15290 * C139575) * C13593 +
            (((C554 * C5916 + C139457 * C6256) * C244 +
              (C554 * C6038 + C139457 * C6365) * C139339) *
                 C13591 +
             (C15291 + C15299) * C139575) *
                C139586) *
               C825) *
              C821 +
          (((C15284 * C13591 + (C1670 + C1684) * C139575) * C13593 +
            (C15290 * C13591 + (C1677 + C1687) * C139575) * C139586) *
               C824 -
           ((C3372 * C139575 + C15289 * C13591) * C139586 +
            ((C743 + C729) * C139575 + (C742 + C726) * C13591) * C13593) *
               C823 -
           ((((C554 * C6036 + C139457 * C6363) * C139339 +
              (C554 * C5914 + C139457 * C6254) * C244) *
                 C139575 +
             (C15299 + C15291) * C13591) *
                C139586 +
            ((C1687 + C1677) * C139575 + C15285 * C13591) * C13593) *
               C825) *
              C139305)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139457 * C555) * C244 +
             (C554 * C245 + C139457 * C719) * C139339) *
                C13591 +
            (C726 + C742) * C139575) *
               C13593 +
           (((C554 * C831 + C139457 * C1440) * C244 +
             (C554 * C1029 + C139457 * C1661) * C139339) *
                C13591 +
            (C1673 + C1685) * C139575) *
               C139586) *
              C139328 * C92 -
          ((C3372 * C139575 + (C1685 + C1673) * C13591) * C139586 +
           ((C743 + C729) * C139575 + (C742 + C726) * C13591) * C13593) *
              C139328 * C93 +
          ((C746 * C13591 + (C734 + C744) * C139575) * C13593 +
           ((C1670 + C1684) * C13591 + (C3373 + C3377) * C139575) * C139586) *
              C139328 * C94 -
          ((((C554 * C2861 + C139457 * C3370) * C139339 +
             (C554 * C2705 + C139457 * C3195) * C244) *
                C139575 +
            (C3377 + C3373) * C13591) *
               C139586 +
           ((C745 + C735) * C139575 + C747 * C13591) * C13593) *
              C139328 * C95)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139457 * C555) * C1960 +
             (C554 * C245 + C139457 * C719) * C1761 -
             (C554 * C1767 + C139457 * C2376) * C1961 -
             (C554 * C1965 + C139457 * C2591) * C1762 +
             (C554 * C1768 + C139457 * C2379) * C1962 +
             (C554 * C1966 + C139457 * C2592) * C1763) *
                C13591 +
            (C2600 + C2601 - C2602 - C2620 + C2605 + C2621) * C139575) *
               C13593 +
           ((C15060 * C1960 + C15294 * C1761 -
             (C554 * C4223 + C139457 * C4899) * C1961 -
             (C554 * C4443 + C139457 * C5133) * C1762 +
             (C554 * C6442 + C139457 * C6922) * C1962 +
             (C554 * C6608 + C139457 * C7077) * C1763) *
                C13591 +
            (C16243 + C16244 - C16245 - C16246 + C16247 + C16251) * C139575) *
               C139586) *
              C139328 * C821 +
          (((C2602 - (C2601 + C2600) + C2620 - C2605 - C2621) * C13591 +
            (C2610 - (C2609 + C2608) + C2622 - C2613 - C2623) * C139575) *
               C13593 +
           ((C16245 - (C16244 + C16243) + C16246 - C16247 - C16251) * C13591 +
            (C4918 * C1961 - (C1680 * C1761 + C1474 * C1960) + C5149 * C1762 -
             (C554 * C6440 + C139457 * C6920) * C1962 -
             (C554 * C6606 + C139457 * C7079) * C1763) *
                C139575) *
               C139586) *
              C139328 * C139305)) /
            (p * q * std::sqrt(p + q));
    d2eexx[18] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139575 * C114) *
                C2702 +
            (C13595 * C116 + C13591 * C125 + C13596 * C117 + C139575 * C126) *
                C139589 -
            (C13596 * C109 + C139575 * C115 + C13595 * C108 + C13591 * C114) *
                C2703 -
            (C13596 * C118 + C139575 * C127 + C13595 * C117 + C13591 * C126) *
                C139590 +
            (C13595 * C109 + C13591 * C115 + C13596 * C110 + C139575 * C119) *
                C2704 +
            (C13595 * C118 + C13591 * C127 + C13596 * C120 + C139575 * C128) *
                C2699) *
               C13593 +
           ((C14336 + C14337) * C2702 + (C14338 + C14339) * C139589 -
            (C14340 + C14341) * C2703 - (C14342 + C14343) * C139590 +
            (C16358 + C16359) * C2704 + (C16360 + C16361) * C2699) *
               C139586) *
              C139457 * C139561 +
          (((C13595 * C1764 + C13591 * C1772 + C13596 * C1765 +
             C139575 * C1773) *
                C2703 -
            ((C13596 * C1776 + C139575 * C1789 + C13595 * C1777 +
              C13591 * C1790) *
                 C139589 +
             (C13596 * C1764 + C139575 * C1772 + C13595 * C1767 +
              C13591 * C1778) *
                 C2702) +
            (C13595 * C1776 + C13591 * C1789 + C13596 * C1775 +
             C139575 * C1788) *
                C139590 -
            (C13596 * C1766 + C139575 * C1774 + C13595 * C1765 +
             C13591 * C1773) *
                C2704 -
            (C13596 * C1779 + C139575 * C1791 + C13595 * C1775 +
             C13591 * C1788) *
                C2699) *
               C13593 +
           ((C13595 * C4224 + C13591 * C4228 + C13596 * C4225 +
             C139575 * C4229) *
                C2703 -
            ((C13596 * C4231 + C139575 * C4236 + C13595 * C4230 +
              C13591 * C4235) *
                 C139589 +
             (C13596 * C4224 + C139575 * C4228 + C13595 * C4223 +
              C13591 * C4227) *
                 C2702) +
            (C13595 * C4231 + C13591 * C4236 + C13596 * C4232 +
             C139575 * C4237) *
                C139590 -
            (C13596 * C4226 + C139575 * C4233 + C13595 * C4225 +
             C13591 * C4229) *
                C2704 -
            (C13596 * C4234 + C139575 * C4238 + C13595 * C4232 +
             C13591 * C4237) *
                C2699) *
               C139586) *
              C139457 * C139403) *
         C139328) /
        (p * q * std::sqrt(p + q));
    d2eexy[18] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139575 * C114) *
                 C181 +
             (C13595 * C182 + C13591 * C188 + C13596 * C183 + C139575 * C189) *
                 C139328) *
                C13593 +
            ((C14336 + C14337) * C181 + (C14467 + C14466) * C139328) *
                C139586) *
               C139457 * C139589 -
           (((C14471 + C14470) * C139328 + (C14340 + C14341) * C181) * C139586 +
            ((C13596 * C184 + C139575 * C190 + C13595 * C183 + C13591 * C189) *
                 C139328 +
             (C13596 * C109 + C139575 * C115 + C13595 * C108 + C13591 * C114) *
                 C181) *
                C13593) *
               C139457 * C139590 +
           (((C13595 * C109 + C13591 * C115 + C13596 * C110 + C139575 * C119) *
                 C181 +
             (C13595 * C184 + C13591 * C190 + C13596 * C185 + C139575 * C191) *
                 C139328) *
                C13593 +
            ((C16358 + C16359) * C181 + (C16465 + C16464) * C139328) *
                C139586) *
               C139457 * C2699) *
              C139561 +
          ((((C13595 * C1764 + C13591 * C1772 + C13596 * C1765 +
              C139575 * C1773) *
                 C181 +
             (C13595 * C1870 + C13591 * C1878 + C13596 * C1871 +
              C139575 * C1879) *
                 C139328) *
                C13593 +
            ((C13595 * C4224 + C13591 * C4228 + C13596 * C4225 +
              C139575 * C4229) *
                 C181 +
             (C13595 * C4338 + C13591 * C4342 + C13596 * C4339 +
              C139575 * C4343) *
                 C139328) *
                C139586) *
               C139457 * C139590 -
           (((C13596 * C4338 + C139575 * C4342 + C13595 * C4337 +
              C13591 * C4341) *
                 C139328 +
             (C13596 * C4224 + C139575 * C4228 + C13595 * C4223 +
              C13591 * C4227) *
                 C181) *
                C139586 +
            ((C13596 * C1870 + C139575 * C1878 + C13595 * C1873 +
              C13591 * C1881) *
                 C139328 +
             (C13596 * C1764 + C139575 * C1772 + C13595 * C1767 +
              C13591 * C1778) *
                 C181) *
                C13593) *
               C139457 * C139589 -
           (((C13596 * C4340 + C139575 * C4344 + C13595 * C4339 +
              C13591 * C4343) *
                 C139328 +
             (C13596 * C4226 + C139575 * C4233 + C13595 * C4225 +
              C13591 * C4229) *
                 C181) *
                C139586 +
            ((C13596 * C1872 + C139575 * C1880 + C13595 * C1871 +
              C13591 * C1879) *
                 C139328 +
             (C13596 * C1766 + C139575 * C1774 + C13595 * C1765 +
              C13591 * C1773) *
                 C181) *
                C13593) *
               C139457 * C2699) *
              C139403)) /
        (p * q * std::sqrt(p + q));
    d2eexz[18] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139575 * C114) *
                C3607 +
            (C13595 * C245 + C13591 * C251 + C13596 * C246 + C139575 * C252) *
                C139561 -
            (C13596 * C1764 + C139575 * C1772 + C13595 * C1767 +
             C13591 * C1778) *
                C3608 -
            (C13596 * C1964 + C139575 * C1972 + C13595 * C1965 +
             C13591 * C1973) *
                C139403) *
               C13593 +
           ((C14336 + C14337) * C3607 + (C14588 + C14589) * C139561 -
            (C13596 * C4224 + C139575 * C4228 + C13595 * C4223 +
             C13591 * C4227) *
                C3608 -
            (C13596 * C4444 + C139575 * C4448 + C13595 * C4443 +
             C13591 * C4447) *
                C139403) *
               C139586) *
              C139457 * C139328 * C139589 +
          (((C13595 * C1764 + C13591 * C1772 + C13596 * C1765 +
             C139575 * C1773) *
                C3608 -
            ((C13596 * C247 + C139575 * C253 + C13595 * C246 + C13591 * C252) *
                 C139561 +
             (C13596 * C109 + C139575 * C115 + C13595 * C108 + C13591 * C114) *
                 C3607) +
            (C13595 * C1964 + C13591 * C1972 + C13596 * C1963 +
             C139575 * C1971) *
                C139403) *
               C13593 +
           ((C13595 * C4224 + C13591 * C4228 + C13596 * C4225 +
             C139575 * C4229) *
                C3608 -
            ((C14593 + C14592) * C139561 + (C14340 + C14341) * C3607) +
            (C13595 * C4444 + C13591 * C4448 + C13596 * C4445 +
             C139575 * C4449) *
                C139403) *
               C139586) *
              C139457 * C139328 * C139590 +
          (((C13595 * C109 + C13591 * C115 + C13596 * C110 + C139575 * C119) *
                C3607 +
            (C13595 * C247 + C13591 * C253 + C13596 * C248 + C139575 * C254) *
                C139561 -
            (C13596 * C1766 + C139575 * C1774 + C13595 * C1765 +
             C13591 * C1773) *
                C3608 -
            (C13596 * C1969 + C139575 * C1977 + C13595 * C1963 +
             C13591 * C1971) *
                C139403) *
               C13593 +
           ((C16358 + C16359) * C3607 + (C16568 + C16569) * C139561 -
            (C13596 * C4226 + C139575 * C4233 + C13595 * C4225 +
             C13591 * C4229) *
                C3608 -
            (C13596 * C4446 + C139575 * C4450 + C13595 * C4445 +
             C13591 * C4449) *
                C139403) *
               C139586) *
              C139457 * C139328 * C2699)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[18] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C831 + C139586 * C1118) *
                C2702 +
            (C13795 * C116 + C13593 * C314 + C13796 * C841 + C139586 * C1125) *
                C139589 -
            (C13822 + C13823) * C2703 - (C13824 + C13825) * C139590 +
            (C13826 + C13827) * C2704 + (C13828 + C13829) * C2699) *
               C139457 * C13591 +
           ((C13823 + C13822) * C2702 + (C13825 + C13824) * C139589 -
            (C13827 + C13826) * C2703 - (C13829 + C13828) * C139590 +
            (C13831 + C13830) * C2704 + (C13833 + C13832) * C2699) *
               C139457 * C139575) *
              C139561 +
          (((C15708 + C15709) * C2703 -
            ((C13796 * C4230 + C139586 * C4553 + C13795 * C1777 +
              C13593 * C2061) *
                 C139589 +
             (C13796 * C4223 + C139586 * C4549 + C13795 * C1767 +
              C13593 * C2054) *
                 C2702) +
            (C15710 + C15711) * C139590 - (C17603 + C17604) * C2704 -
            (C17605 + C17606) * C2699) *
               C139457 * C13591 +
           ((C17604 + C17603) * C2703 -
            ((C15711 + C15710) * C139589 + (C15709 + C15708) * C2702) +
            (C17606 + C17605) * C139590 -
            (C13796 * C4226 + C139586 * C4552 + C13795 * C1766 +
             C13593 * C2056) *
                C2704 -
            (C13796 * C4234 + C139586 * C4556 + C13795 * C1779 +
             C13593 * C2064) *
                C2699) *
               C139457 * C139575) *
              C139403) *
         C139328) /
        (p * q * std::sqrt(p + q));
    d2eeyy[18] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13795 * C107 + C13593 * C308 + C13796 * C831 + C139586 * C1118) *
                 C181 +
             (C13795 * C182 + C13593 * C394 + C13796 * C939 + C139586 * C1231) *
                 C139328) *
                C139457 * C13591 +
            ((C13823 + C13822) * C181 + (C13912 + C13913) * C139328) * C139457 *
                C139575) *
               C139589 -
           (((C13914 + C13915) * C139328 + (C13827 + C13826) * C181) * C139457 *
                C139575 +
            ((C13913 + C13912) * C139328 + (C13822 + C13823) * C181) * C139457 *
                C13591) *
               C139590 +
           (((C13826 + C13827) * C181 + (C13915 + C13914) * C139328) * C139457 *
                C13591 +
            ((C13831 + C13830) * C181 + (C13916 + C13917) * C139328) * C139457 *
                C139575) *
               C2699) *
              C139561 +
          ((((C15708 + C15709) * C181 + (C15822 + C15823) * C139328) * C139457 *
                C13591 +
            ((C17604 + C17603) * C181 + (C17709 + C17710) * C139328) * C139457 *
                C139575) *
               C139590 -
           (((C15823 + C15822) * C139328 + (C15709 + C15708) * C181) * C139457 *
                C139575 +
            ((C13796 * C4337 + C139586 * C4667 + C13795 * C1873 +
              C13593 * C2170) *
                 C139328 +
             (C13796 * C4223 + C139586 * C4549 + C13795 * C1767 +
              C13593 * C2054) *
                 C181) *
                C139457 * C13591) *
               C139589 -
           (((C13796 * C4340 + C139586 * C4670 + C13795 * C1872 +
              C13593 * C2169) *
                 C139328 +
             (C13796 * C4226 + C139586 * C4552 + C13795 * C1766 +
              C13593 * C2056) *
                 C181) *
                C139457 * C139575 +
            ((C17710 + C17709) * C139328 + (C17603 + C17604) * C181) * C139457 *
                C13591) *
               C2699) *
              C139403)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[18] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C831 + C139586 * C1118) *
                C3607 +
            (C13795 * C245 + C13593 * C474 + C13796 * C1029 + C139586 * C1339) *
                C139561 -
            (C13796 * C4223 + C139586 * C4549 + C13795 * C1767 +
             C13593 * C2054) *
                C3608 -
            (C13796 * C4443 + C139586 * C4783 + C13795 * C1965 +
             C13593 * C2269) *
                C139403) *
               C139457 * C13591 +
           ((C13823 + C13822) * C3607 + (C13996 + C13997) * C139561 -
            (C15709 + C15708) * C3608 - (C15932 + C15933) * C139403) *
               C139457 * C139575) *
              C139328 * C139589 +
          (((C15708 + C15709) * C3608 -
            ((C13997 + C13996) * C139561 + (C13822 + C13823) * C3607) +
            (C15933 + C15932) * C139403) *
               C139457 * C13591 +
           ((C17604 + C17603) * C3608 -
            ((C13998 + C13999) * C139561 + (C13827 + C13826) * C3607) +
            (C17813 + C17814) * C139403) *
               C139457 * C139575) *
              C139328 * C139590 +
          (((C13826 + C13827) * C3607 + (C13999 + C13998) * C139561 -
            (C17603 + C17604) * C3608 - (C17814 + C17813) * C139403) *
               C139457 * C13591 +
           ((C13831 + C13830) * C3607 + (C14000 + C14001) * C139561 -
            (C13796 * C4226 + C139586 * C4552 + C13795 * C1766 +
             C13593 * C2056) *
                C3608 -
            (C13796 * C4446 + C139586 * C4786 + C13795 * C1969 +
             C13593 * C2275) *
                C139403) *
               C139457 * C139575) *
              C139328 * C2699)) /
        (p * q * std::sqrt(p + q));
    d2eezx[18] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139457 * C555) * C2702 +
             (C554 * C116 + C139457 * C561) * C139589 - C584 * C2703 -
             C585 * C139590 + C586 * C2704 + C587 * C2699) *
                C13591 +
            (C584 * C2702 + C585 * C139589 - C586 * C2703 - C587 * C139590 +
             C588 * C2704 + C589 * C2699) *
                C139575) *
               C13593 +
           ((C16986 + C16987 - C16988 - C16989 + C16990 + C16991) * C13591 +
            (C16992 + C16993 - C16994 - C16995 + C16996 + C16997) * C139575) *
               C139586) *
              C139561 +
          (((C2408 * C2703 -
             ((C554 * C1777 + C139457 * C2383) * C139589 +
              (C554 * C1767 + C139457 * C2376) * C2702) +
             C2409 * C139590 - C2410 * C2704 - C2411 * C2699) *
                C13591 +
            (C2410 * C2703 - (C2409 * C139589 + C2408 * C2702) +
             C2411 * C139590 - C3950 * C2704 - C3951 * C2699) *
                C139575) *
               C13593 +
           ((C4916 * C2703 -
             ((C554 * C4230 + C139457 * C4903) * C139589 +
              (C554 * C4223 + C139457 * C4899) * C2702) +
             C4917 * C139590 - C4918 * C2704 - C4919 * C2699) *
                C13591 +
            (C4918 * C2703 - (C4917 * C139589 + C4916 * C2702) +
             C4919 * C139590 - (C554 * C4226 + C139457 * C4902) * C2704 -
             (C554 * C4234 + C139457 * C4906) * C2699) *
                C139575) *
               C139586) *
              C139403) *
         C139328) /
        (p * q * std::sqrt(p + q));
    d2eezy[18] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C554 * C107 + C139457 * C555) * C181 +
              (C554 * C182 + C139457 * C641) * C139328) *
                 C13591 +
             (C648 + C664) * C139575) *
                C13593 +
            ((C15060 * C181 + C15179 * C139328) * C13591 +
             (C14134 + C14135) * C139575) *
                C139586) *
               C139589 -
           (((C14136 + C14137) * C139575 + (C14135 + C14134) * C13591) *
                C139586 +
            ((C665 + C651) * C139575 + (C664 + C648) * C13591) * C13593) *
               C139590 +
           ((C668 * C13591 + (C656 + C666) * C139575) * C13593 +
            ((C14137 + C14136) * C13591 + (C14138 + C14139) * C139575) *
                C139586) *
               C2699) *
              C139561 +
          ((((C2498 + C2514) * C13591 + (C2501 + C2515) * C139575) * C13593 +
            ((C16138 + C16139) * C13591 + (C18011 + C18012) * C139575) *
                C139586) *
               C139590 -
           (((C16139 + C16138) * C139575 +
             ((C554 * C4337 + C139457 * C5017) * C139328 +
              (C554 * C4223 + C139457 * C4899) * C181) *
                 C13591) *
                C139586 +
            ((C2514 + C2498) * C139575 +
             ((C554 * C1873 + C139457 * C2492) * C139328 +
              (C554 * C1767 + C139457 * C2376) * C181) *
                 C13591) *
                C13593) *
               C139589 -
           ((((C554 * C4340 + C139457 * C5020) * C139328 +
              (C554 * C4226 + C139457 * C4902) * C181) *
                 C139575 +
             (C18012 + C18011) * C13591) *
                C139586 +
            ((C4032 + C4027) * C139575 + C4030 * C13591) * C13593) *
               C2699) *
              C139403)) /
        (p * q * std::sqrt(p + q));
    d2eezz[18] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139457 * C555) * C3607 +
             (C554 * C245 + C139457 * C719) * C139561 -
             (C554 * C1767 + C139457 * C2376) * C3608 -
             (C554 * C1965 + C139457 * C2591) * C139403) *
                C13591 +
            (C4108 + C4109 - C4110 - C4111) * C139575) *
               C13593 +
           ((C15060 * C3607 + C15294 * C139561 -
             (C554 * C4223 + C139457 * C4899) * C3608 -
             (C554 * C4443 + C139457 * C5133) * C139403) *
                C13591 +
            (C5140 + C5139 - C5138 - C5150) * C139575) *
               C139586) *
              C139328 * C139589 +
          (((C4110 - (C4109 + C4108) + C4111) * C13591 +
            (C4114 - (C4113 + C4112) + C4115) * C139575) *
               C13593 +
           ((C5138 - (C5139 + C5140) + C5150) * C13591 +
            (C5143 - (C5144 + C5145) + C5151) * C139575) *
               C139586) *
              C139328 * C139590 +
          ((C4125 * C13591 + (C4118 + C4117 - C4116 - C4124) * C139575) *
               C13593 +
           ((C5145 + C5144 - C5143 - C5151) * C13591 +
            (C3202 * C3607 + C3376 * C139561 -
             (C554 * C4226 + C139457 * C4902) * C3608 -
             (C554 * C4446 + C139457 * C5136) * C139403) *
                C139575) *
               C139586) *
              C139328 * C2699)) /
        (p * q * std::sqrt(p + q));
    d2eexx[19] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139575 * C114) *
               C103 +
           (C13595 * C116 + C13591 * C125 + C13596 * C117 + C139575 * C126) *
               C92 -
           (C13596 * C109 + C139575 * C115 + C13595 * C108 + C13591 * C114) *
               C104 -
           (C13596 * C118 + C139575 * C127 + C13595 * C117 + C13591 * C126) *
               C93 +
           (C13595 * C109 + C13591 * C115 + C13596 * C110 + C139575 * C119) *
               C105 +
           (C13595 * C118 + C13591 * C127 + C13596 * C120 + C139575 * C128) *
               C94 -
           (C13596 * C111 + C139575 * C121 + C13595 * C110 + C13591 * C119) *
               C106 -
           (C13596 * C122 + C139575 * C129 + C13595 * C120 + C13591 * C128) *
               C95) *
              C13593 +
          ((C13595 * C831 + C13591 * C842 + C13596 * C828 + C139575 * C836) *
               C103 +
           (C13595 * C841 + C13591 * C854 + C13596 * C840 + C139575 * C853) *
               C92 -
           (C13596 * C829 + C139575 * C837 + C13595 * C828 + C13591 * C836) *
               C104 -
           (C13596 * C839 + C139575 * C852 + C13595 * C840 + C13591 * C853) *
               C93 +
           (C13595 * C829 + C13591 * C837 + C13596 * C830 + C139575 * C838) *
               C105 +
           (C13595 * C839 + C13591 * C852 + C13596 * C843 + C139575 * C855) *
               C94 -
           (C13596 * C2705 + C139575 * C2706 + C13595 * C830 + C13591 * C838) *
               C106 -
           (C13596 * C2707 + C139575 * C2708 + C13595 * C843 + C13591 * C855) *
               C95) *
              C139586) *
         C139457 * C139339 * C139328) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139575 * C114) *
                C826 +
            (C13595 * C116 + C13591 * C125 + C13596 * C117 + C139575 * C126) *
                C821 -
            (C13596 * C109 + C139575 * C115 + C13595 * C108 + C13591 * C114) *
                C827 -
            (C13596 * C118 + C139575 * C127 + C13595 * C117 + C13591 * C126) *
                C139305) *
               C13593 +
           ((C14336 + C14337) * C826 + (C14338 + C14339) * C821 -
            (C14340 + C14341) * C827 - (C14342 + C14343) * C139305) *
               C139586) *
              C139457 * C139339 * C823 +
          (((C14341 + C14340) * C827 -
            ((C14339 + C14338) * C821 + (C14337 + C14336) * C826) +
            (C14343 + C14342) * C139305) *
               C13593 +
           ((C14344 + C14345) * C827 -
            ((C14346 + C14347) * C821 + (C14348 + C14349) * C826) +
            (C14350 + C14351) * C139305) *
               C139586) *
              C139457 * C139339 * C824 +
          (((C14349 + C14348) * C826 + (C14347 + C14346) * C821 -
            (C14345 + C14344) * C827 - (C14351 + C14350) * C139305) *
               C13593 +
           ((C13595 * C5916 + C13591 * C5922 + C13596 * C5915 +
             C139575 * C5921) *
                C826 +
            (C13595 * C5919 + C13591 * C5925 + C13596 * C5918 +
             C139575 * C5924) *
                C821 -
            (C13596 * C5914 + C139575 * C5920 + C13595 * C5915 +
             C13591 * C5921) *
                C827 -
            (C13596 * C5917 + C139575 * C5923 + C13595 * C5918 +
             C13591 * C5924) *
                C139305) *
               C139586) *
              C139457 * C139339 * C825)) /
            (p * q * std::sqrt(p + q));
    d2eexy[19] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139575 * C114) *
                C181 +
            (C13595 * C182 + C13591 * C188 + C13596 * C183 + C139575 * C189) *
                C139328) *
               C13593 +
           ((C13595 * C831 + C13591 * C842 + C13596 * C828 + C139575 * C836) *
                C181 +
            (C13595 * C939 + C13591 * C947 + C13596 * C938 + C139575 * C946) *
                C139328) *
               C139586) *
              C139457 * C92 -
          (((C13596 * C937 + C139575 * C945 + C13595 * C938 + C13591 * C946) *
                C139328 +
            (C13596 * C829 + C139575 * C837 + C13595 * C828 + C13591 * C836) *
                C181) *
               C139586 +
           ((C13596 * C184 + C139575 * C190 + C13595 * C183 + C13591 * C189) *
                C139328 +
            (C13596 * C109 + C139575 * C115 + C13595 * C108 + C13591 * C114) *
                C181) *
               C13593) *
              C139457 * C93 +
          (((C13595 * C109 + C13591 * C115 + C13596 * C110 + C139575 * C119) *
                C181 +
            (C13595 * C184 + C13591 * C190 + C13596 * C185 + C139575 * C191) *
                C139328) *
               C13593 +
           ((C13595 * C829 + C13591 * C837 + C13596 * C830 + C139575 * C838) *
                C181 +
            (C13595 * C937 + C13591 * C945 + C13596 * C943 + C139575 * C951) *
                C139328) *
               C139586) *
              C139457 * C94 -
          (((C13596 * C2785 + C139575 * C2786 + C13595 * C943 + C13591 * C951) *
                C139328 +
            (C13596 * C2705 + C139575 * C2706 + C13595 * C830 + C13591 * C838) *
                C181) *
               C139586 +
           ((C13596 * C186 + C139575 * C192 + C13595 * C185 + C13591 * C191) *
                C139328 +
            (C13596 * C111 + C139575 * C121 + C13595 * C110 + C13591 * C119) *
                C181) *
               C13593) *
              C139457 * C95) *
         C139339) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139575 * C114) *
                C934 +
            (C13595 * C182 + C13591 * C188 + C13596 * C183 + C139575 * C189) *
                C823 -
            (C14337 + C14336) * C935 - (C14466 + C14467) * C824 +
            (C14349 + C14348) * C936 + (C14468 + C14469) * C825) *
               C13593 +
           ((C14336 + C14337) * C934 + (C14467 + C14466) * C823 -
            (C14348 + C14349) * C935 - (C14469 + C14468) * C824 +
            (C13595 * C5916 + C13591 * C5922 + C13596 * C5915 +
             C139575 * C5921) *
                C936 +
            (C13595 * C5982 + C13591 * C5985 + C13596 * C5981 +
             C139575 * C5984) *
                C825) *
               C139586) *
              C139457 * C821 +
          (((C14341 + C14340) * C935 -
            ((C13596 * C184 + C139575 * C190 + C13595 * C183 + C13591 * C189) *
                 C823 +
             (C13596 * C109 + C139575 * C115 + C13595 * C108 + C13591 * C114) *
                 C934) +
            (C14470 + C14471) * C824 - (C14345 + C14344) * C936 -
            (C14472 + C14473) * C825) *
               C13593 +
           ((C14344 + C14345) * C935 -
            ((C14471 + C14470) * C823 + (C14340 + C14341) * C934) +
            (C14473 + C14472) * C824 -
            (C13596 * C5914 + C139575 * C5920 + C13595 * C5915 +
             C13591 * C5921) *
                C936 -
            (C13596 * C5980 + C139575 * C5983 + C13595 * C5981 +
             C13591 * C5984) *
                C825) *
               C139586) *
              C139457 * C139305) *
         C139339) /
            (p * q * std::sqrt(p + q));
    d2eexz[19] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139575 * C114) *
                C244 +
            (C13595 * C245 + C13591 * C251 + C13596 * C246 + C139575 * C252) *
                C139339) *
               C13593 +
           ((C13595 * C831 + C13591 * C842 + C13596 * C828 + C139575 * C836) *
                C244 +
            (C13595 * C1029 + C13591 * C1037 + C13596 * C1028 +
             C139575 * C1036) *
                C139339) *
               C139586) *
              C139457 * C139328 * C92 -
          (((C13596 * C1027 + C139575 * C1035 + C13595 * C1028 +
             C13591 * C1036) *
                C139339 +
            (C13596 * C829 + C139575 * C837 + C13595 * C828 + C13591 * C836) *
                C244) *
               C139586 +
           ((C13596 * C247 + C139575 * C253 + C13595 * C246 + C13591 * C252) *
                C139339 +
            (C13596 * C109 + C139575 * C115 + C13595 * C108 + C13591 * C114) *
                C244) *
               C13593) *
              C139457 * C139328 * C93 +
          (((C13595 * C109 + C13591 * C115 + C13596 * C110 + C139575 * C119) *
                C244 +
            (C13595 * C247 + C13591 * C253 + C13596 * C248 + C139575 * C254) *
                C139339) *
               C13593 +
           ((C13595 * C829 + C13591 * C837 + C13596 * C830 + C139575 * C838) *
                C244 +
            (C13595 * C1027 + C13591 * C1035 + C13596 * C1033 +
             C139575 * C1041) *
                C139339) *
               C139586) *
              C139457 * C139328 * C94 -
          (((C13596 * C2861 + C139575 * C2862 + C13595 * C1033 +
             C13591 * C1041) *
                C139339 +
            (C13596 * C2705 + C139575 * C2706 + C13595 * C830 + C13591 * C838) *
                C244) *
               C139586 +
           ((C13596 * C249 + C139575 * C255 + C13595 * C248 + C13591 * C254) *
                C139339 +
            (C13596 * C111 + C139575 * C121 + C13595 * C110 + C13591 * C119) *
                C244) *
               C13593) *
              C139457 * C139328 * C95)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139575 * C114) *
                 C244 +
             (C13595 * C245 + C13591 * C251 + C13596 * C246 + C139575 * C252) *
                 C139339) *
                C13593 +
            ((C14336 + C14337) * C244 + (C14588 + C14589) * C139339) *
                C139586) *
               C139457 * C823 -
           (((C14590 + C14591) * C139339 + (C14348 + C14349) * C244) * C139586 +
            ((C14589 + C14588) * C139339 + (C14337 + C14336) * C244) * C13593) *
               C139457 * C824 +
           (((C14349 + C14348) * C244 + (C14591 + C14590) * C139339) * C13593 +
            ((C13595 * C5916 + C13591 * C5922 + C13596 * C5915 +
              C139575 * C5921) *
                 C244 +
             (C13595 * C6038 + C13591 * C6041 + C13596 * C6037 +
              C139575 * C6040) *
                 C139339) *
                C139586) *
               C139457 * C825) *
              C821 +
          ((((C14341 + C14340) * C244 + (C14592 + C14593) * C139339) * C13593 +
            ((C14344 + C14345) * C244 + (C14594 + C14595) * C139339) *
                C139586) *
               C139457 * C824 -
           (((C14593 + C14592) * C139339 + (C14340 + C14341) * C244) * C139586 +
            ((C13596 * C247 + C139575 * C253 + C13595 * C246 + C13591 * C252) *
                 C139339 +
             (C13596 * C109 + C139575 * C115 + C13595 * C108 + C13591 * C114) *
                 C244) *
                C13593) *
               C139457 * C823 -
           (((C13596 * C6036 + C139575 * C6039 + C13595 * C6037 +
              C13591 * C6040) *
                 C139339 +
             (C13596 * C5914 + C139575 * C5920 + C13595 * C5915 +
              C13591 * C5921) *
                 C244) *
                C139586 +
            ((C14595 + C14594) * C139339 + (C14345 + C14344) * C244) * C13593) *
               C139457 * C825) *
              C139305)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[19] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C13795 * C107 + C13593 * C308 + C13796 * C831 + C139586 * C1118) *
               C103 +
           (C13795 * C116 + C13593 * C314 + C13796 * C841 + C139586 * C1125) *
               C92 -
           (C13822 + C13823) * C104 - (C13824 + C13825) * C93 +
           (C13826 + C13827) * C105 + (C13828 + C13829) * C94 -
           (C13830 + C13831) * C106 - (C13832 + C13833) * C95) *
              C139457 * C13591 +
          ((C13823 + C13822) * C103 + (C13825 + C13824) * C92 -
           (C13827 + C13826) * C104 - (C13829 + C13828) * C93 +
           (C13831 + C13830) * C105 + (C13833 + C13832) * C94 -
           (C13796 * C2705 + C139586 * C2937 + C13795 * C111 + C13593 * C312) *
               C106 -
           (C13796 * C2707 + C139586 * C2938 + C13795 * C122 + C13593 * C318) *
               C95) *
              C139457 * C139575) *
         C139339 * C139328) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C831 + C139586 * C1118) *
                C826 +
            (C13795 * C116 + C13593 * C314 + C13796 * C841 + C139586 * C1125) *
                C821 -
            (C13822 + C13823) * C827 - (C13824 + C13825) * C139305) *
               C139457 * C13591 +
           ((C13823 + C13822) * C826 + (C13825 + C13824) * C821 -
            (C13827 + C13826) * C827 - (C13829 + C13828) * C139305) *
               C139457 * C139575) *
              C139339 * C823 +
          (((C14710 + C14711) * C827 -
            ((C13796 * C847 + C139586 * C1129 + C13795 * C841 +
              C13593 * C1125) *
                 C821 +
             (C13796 * C832 + C139586 * C1121 + C13795 * C831 +
              C13593 * C1118) *
                 C826) +
            (C14712 + C14713) * C139305) *
               C139457 * C13591 +
           ((C13795 * C829 + C13593 * C1119 + C13796 * C834 + C139586 * C1123) *
                C827 -
            ((C14713 + C14712) * C821 + (C14711 + C14710) * C826) +
            (C13795 * C839 + C13593 * C1127 + C13796 * C849 + C139586 * C1131) *
                C139305) *
               C139457 * C139575) *
              C139339 * C824 +
          (((C13795 * C832 + C13593 * C1121 + C13796 * C5916 +
             C139586 * C6094) *
                C826 +
            (C13795 * C847 + C13593 * C1129 + C13796 * C5919 +
             C139586 * C6097) *
                C821 -
            (C14714 + C14715) * C827 - (C14716 + C14717) * C139305) *
               C139457 * C13591 +
           ((C14715 + C14714) * C826 + (C14717 + C14716) * C821 -
            (C13796 * C5914 + C139586 * C6092 + C13795 * C834 +
             C13593 * C1123) *
                C827 -
            (C13796 * C5917 + C139586 * C6095 + C13795 * C849 +
             C13593 * C1131) *
                C139305) *
               C139457 * C139575) *
              C139339 * C825)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[19] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C831 + C139586 * C1118) *
                C181 +
            (C13795 * C182 + C13593 * C394 + C13796 * C939 + C139586 * C1231) *
                C139328) *
               C139457 * C13591 +
           ((C13823 + C13822) * C181 + (C13912 + C13913) * C139328) * C139457 *
               C139575) *
              C92 -
          (((C13914 + C13915) * C139328 + (C13827 + C13826) * C181) * C139457 *
               C139575 +
           ((C13913 + C13912) * C139328 + (C13822 + C13823) * C181) * C139457 *
               C13591) *
              C93 +
          (((C13826 + C13827) * C181 + (C13915 + C13914) * C139328) * C139457 *
               C13591 +
           ((C13831 + C13830) * C181 + (C13916 + C13917) * C139328) * C139457 *
               C139575) *
              C94 -
          (((C13796 * C2785 + C139586 * C3019 + C13795 * C186 + C13593 * C398) *
                C139328 +
            (C13796 * C2705 + C139586 * C2937 + C13795 * C111 + C13593 * C312) *
                C181) *
               C139457 * C139575 +
           ((C13917 + C13916) * C139328 + (C13830 + C13831) * C181) * C139457 *
               C13591) *
              C95) *
         C139339) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C831 + C139586 * C1118) *
                C934 +
            (C13795 * C182 + C13593 * C394 + C13796 * C939 + C139586 * C1231) *
                C823 -
            (C13796 * C832 + C139586 * C1121 + C13795 * C831 + C13593 * C1118) *
                C935 -
            (C13796 * C940 + C139586 * C1232 + C13795 * C939 + C13593 * C1231) *
                C824 +
            (C13795 * C832 + C13593 * C1121 + C13796 * C5916 +
             C139586 * C6094) *
                C936 +
            (C13795 * C940 + C13593 * C1232 + C13796 * C5982 +
             C139586 * C6148) *
                C825) *
               C139457 * C13591 +
           ((C13823 + C13822) * C934 + (C13912 + C13913) * C823 -
            (C14711 + C14710) * C935 - (C14824 + C14825) * C824 +
            (C14715 + C14714) * C936 + (C14826 + C14827) * C825) *
               C139457 * C139575) *
              C821 +
          (((C14710 + C14711) * C935 -
            ((C13913 + C13912) * C823 + (C13822 + C13823) * C934) +
            (C14825 + C14824) * C824 - (C14714 + C14715) * C936 -
            (C14827 + C14826) * C825) *
               C139457 * C13591 +
           ((C13795 * C829 + C13593 * C1119 + C13796 * C834 + C139586 * C1123) *
                C935 -
            ((C13914 + C13915) * C823 + (C13827 + C13826) * C934) +
            (C13795 * C937 + C13593 * C1235 + C13796 * C942 + C139586 * C1236) *
                C824 -
            (C13796 * C5914 + C139586 * C6092 + C13795 * C834 +
             C13593 * C1123) *
                C936 -
            (C13796 * C5980 + C139586 * C6150 + C13795 * C942 +
             C13593 * C1236) *
                C825) *
               C139457 * C139575) *
              C139305) *
         C139339) /
            (p * q * std::sqrt(p + q));
    d2eeyz[19] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C831 + C139586 * C1118) *
                C244 +
            (C13795 * C245 + C13593 * C474 + C13796 * C1029 + C139586 * C1339) *
                C139339) *
               C139457 * C13591 +
           ((C13823 + C13822) * C244 + (C13996 + C13997) * C139339) * C139457 *
               C139575) *
              C139328 * C92 -
          (((C13998 + C13999) * C139339 + (C13827 + C13826) * C244) * C139457 *
               C139575 +
           ((C13997 + C13996) * C139339 + (C13822 + C13823) * C244) * C139457 *
               C13591) *
              C139328 * C93 +
          (((C13826 + C13827) * C244 + (C13999 + C13998) * C139339) * C139457 *
               C13591 +
           ((C13831 + C13830) * C244 + (C14000 + C14001) * C139339) * C139457 *
               C139575) *
              C139328 * C94 -
          (((C13796 * C2861 + C139586 * C3113 + C13795 * C249 + C13593 * C478) *
                C139339 +
            (C13796 * C2705 + C139586 * C2937 + C13795 * C111 + C13593 * C312) *
                C244) *
               C139457 * C139575 +
           ((C14001 + C14000) * C139339 + (C13830 + C13831) * C244) * C139457 *
               C13591) *
              C139328 * C95)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13795 * C107 + C13593 * C308 + C13796 * C831 + C139586 * C1118) *
                 C244 +
             (C13795 * C245 + C13593 * C474 + C13796 * C1029 +
              C139586 * C1339) *
                 C139339) *
                C139457 * C13591 +
            ((C13823 + C13822) * C244 + (C13996 + C13997) * C139339) * C139457 *
                C139575) *
               C823 -
           (((C14934 + C14935) * C139339 + (C14711 + C14710) * C244) * C139457 *
                C139575 +
            ((C13796 * C1030 + C139586 * C1340 + C13795 * C1029 +
              C13593 * C1339) *
                 C139339 +
             (C13796 * C832 + C139586 * C1121 + C13795 * C831 +
              C13593 * C1118) *
                 C244) *
                C139457 * C13591) *
               C824 +
           (((C13795 * C832 + C13593 * C1121 + C13796 * C5916 +
              C139586 * C6094) *
                 C244 +
             (C13795 * C1030 + C13593 * C1340 + C13796 * C6038 +
              C139586 * C6203) *
                 C139339) *
                C139457 * C13591 +
            ((C14715 + C14714) * C244 + (C14936 + C14937) * C139339) * C139457 *
                C139575) *
               C825) *
              C821 +
          ((((C14710 + C14711) * C244 + (C14935 + C14934) * C139339) * C139457 *
                C13591 +
            ((C13795 * C829 + C13593 * C1119 + C13796 * C834 +
              C139586 * C1123) *
                 C244 +
             (C13795 * C1027 + C13593 * C1337 + C13796 * C1032 +
              C139586 * C1342) *
                 C139339) *
                C139457 * C139575) *
               C824 -
           (((C13998 + C13999) * C139339 + (C13827 + C13826) * C244) * C139457 *
                C139575 +
            ((C13997 + C13996) * C139339 + (C13822 + C13823) * C244) * C139457 *
                C13591) *
               C823 -
           (((C13796 * C6036 + C139586 * C6201 + C13795 * C1032 +
              C13593 * C1342) *
                 C139339 +
             (C13796 * C5914 + C139586 * C6092 + C13795 * C834 +
              C13593 * C1123) *
                 C244) *
                C139457 * C139575 +
            ((C14937 + C14936) * C139339 + (C14714 + C14715) * C244) * C139457 *
                C13591) *
               C825) *
              C139305)) /
            (p * q * std::sqrt(p + q));
    d2eezx[19] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C139457 * C555) * C103 +
            (C554 * C116 + C139457 * C561) * C92 - C584 * C104 - C585 * C93 +
            C586 * C105 + C587 * C94 - C588 * C106 - C589 * C95) *
               C13591 +
           (C584 * C103 + C585 * C92 - C586 * C104 - C587 * C93 + C588 * C105 +
            C589 * C94 - C590 * C106 - C591 * C95) *
               C139575) *
              C13593 +
          (((C554 * C831 + C139457 * C1440) * C103 +
            (C554 * C841 + C139457 * C1447) * C92 - C1472 * C104 - C1473 * C93 +
            C1474 * C105 + C1475 * C94 - C3202 * C106 - C3203 * C95) *
               C13591 +
           (C1472 * C103 + C1473 * C92 - C1474 * C104 - C1475 * C93 +
            C3202 * C105 + C3203 * C94 -
            (C554 * C2705 + C139457 * C3195) * C106 -
            (C554 * C2707 + C139457 * C3196) * C95) *
               C139575) *
              C139586) *
         C139339 * C139328) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139457 * C555) * C826 +
             (C554 * C116 + C139457 * C561) * C821 - C584 * C827 -
             C585 * C139305) *
                C13591 +
            (C584 * C826 + C585 * C821 - C586 * C827 - C587 * C139305) *
                C139575) *
               C13593 +
           ((C15066 + C15067 - C15040 - C15041) * C13591 +
            (C15042 + C15043 - C15044 - C15045) * C139575) *
               C139586) *
              C139339 * C823 +
          (((C15040 - (C15067 + C15066) + C15041) * C13591 +
            (C15044 - (C15043 + C15042) + C15045) * C139575) *
               C13593 +
           ((C15046 - (C15068 + C15069) + C15051) * C13591 +
            (C15052 - (C15053 + C15054) + C15055) * C139575) *
               C139586) *
              C139339 * C824 +
          (((C15069 + C15068 - C15046 - C15051) * C13591 +
            (C15054 + C15053 - C15052 - C15055) * C139575) *
               C13593 +
           (((C554 * C5916 + C139457 * C6256) * C826 +
             (C554 * C5919 + C139457 * C6259) * C821 - C15064 * C827 -
             C15065 * C139305) *
                C13591 +
            (C15064 * C826 + C15065 * C821 -
             (C554 * C5914 + C139457 * C6254) * C827 -
             (C554 * C5917 + C139457 * C6257) * C139305) *
                C139575) *
               C139586) *
              C139339 * C825)) /
            (p * q * std::sqrt(p + q));
    d2eezy[19] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139457 * C555) * C181 +
             (C554 * C182 + C139457 * C641) * C139328) *
                C13591 +
            (C648 + C664) * C139575) *
               C13593 +
           (((C554 * C831 + C139457 * C1440) * C181 +
             (C554 * C939 + C139457 * C1553) * C139328) *
                C13591 +
            (C14134 + C14135) * C139575) *
               C139586) *
              C92 -
          (((C14136 + C14137) * C139575 + (C14135 + C14134) * C13591) *
               C139586 +
           ((C665 + C651) * C139575 + (C664 + C648) * C13591) * C13593) *
              C93 +
          ((C668 * C13591 + (C656 + C666) * C139575) * C13593 +
           ((C14137 + C14136) * C13591 + (C14138 + C14139) * C139575) *
               C139586) *
              C94 -
          ((((C554 * C2785 + C139457 * C3277) * C139328 +
             (C554 * C2705 + C139457 * C3195) * C181) *
                C139575 +
            (C14139 + C14138) * C13591) *
               C139586 +
           ((C667 + C657) * C139575 + C669 * C13591) * C13593) *
              C95) *
         C139339) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139457 * C555) * C934 +
             (C554 * C182 + C139457 * C641) * C823 - C15060 * C935 -
             C15179 * C824 + C15063 * C936 + C15180 * C825) *
                C13591 +
            (C1562 + C1563 - C1564 - C1582 + C1567 + C1583) * C139575) *
               C13593 +
           ((C15060 * C934 + C15179 * C823 - C15063 * C935 - C15180 * C824 +
             (C554 * C5916 + C139457 * C6256) * C936 +
             (C554 * C5982 + C139457 * C6310) * C825) *
                C13591 +
            (C15172 + C15173 - C15174 - C15175 + C15176 + C15182) * C139575) *
               C139586) *
              C821 +
          (((C1564 - (C1563 + C1562) + C1582 - C1567 - C1583) * C13591 +
            (C1572 - (C1571 + C1570) + C1584 - C1575 - C1585) * C139575) *
               C13593 +
           ((C15174 - (C15173 + C15172) + C15175 - C15176 - C15182) * C13591 +
            (C1478 * C935 - (C1580 * C823 + C1474 * C934) + C1581 * C824 -
             (C554 * C5914 + C139457 * C6254) * C936 -
             (C554 * C5980 + C139457 * C6312) * C825) *
                C139575) *
               C139586) *
              C139305) *
         C139339) /
            (p * q * std::sqrt(p + q));
    d2eezz[19] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139457 * C555) * C244 +
             (C554 * C245 + C139457 * C719) * C139339) *
                C13591 +
            (C726 + C742) * C139575) *
               C13593 +
           (((C554 * C831 + C139457 * C1440) * C244 +
             (C554 * C1029 + C139457 * C1661) * C139339) *
                C13591 +
            (C1673 + C1685) * C139575) *
               C139586) *
              C139328 * C92 -
          ((C3372 * C139575 + (C1685 + C1673) * C13591) * C139586 +
           ((C743 + C729) * C139575 + (C742 + C726) * C13591) * C13593) *
              C139328 * C93 +
          ((C746 * C13591 + (C734 + C744) * C139575) * C13593 +
           ((C1670 + C1684) * C13591 + (C3373 + C3377) * C139575) * C139586) *
              C139328 * C94 -
          ((((C554 * C2861 + C139457 * C3370) * C139339 +
             (C554 * C2705 + C139457 * C3195) * C244) *
                C139575 +
            (C3377 + C3373) * C13591) *
               C139586 +
           ((C745 + C735) * C139575 + C747 * C13591) * C13593) *
              C139328 * C95)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C554 * C107 + C139457 * C555) * C244 +
              (C554 * C245 + C139457 * C719) * C139339) *
                 C13591 +
             (C726 + C742) * C139575) *
                C13593 +
            ((C15281 + C15297) * C13591 + C15284 * C139575) * C139586) *
               C823 -
           ((C15285 * C139575 + (C15298 + C15288) * C13591) * C139586 +
            (C15289 * C139575 + (C15297 + C15281) * C13591) * C13593) *
               C824 +
           (((C15288 + C15298) * C13591 + C15290 * C139575) * C13593 +
            (((C554 * C5916 + C139457 * C6256) * C244 +
              (C554 * C6038 + C139457 * C6365) * C139339) *
                 C13591 +
             (C15291 + C15299) * C139575) *
                C139586) *
               C825) *
              C821 +
          (((C15284 * C13591 + (C1670 + C1684) * C139575) * C13593 +
            (C15290 * C13591 + (C1677 + C1687) * C139575) * C139586) *
               C824 -
           ((C3372 * C139575 + C15289 * C13591) * C139586 +
            ((C743 + C729) * C139575 + (C742 + C726) * C13591) * C13593) *
               C823 -
           ((((C554 * C6036 + C139457 * C6363) * C139339 +
              (C554 * C5914 + C139457 * C6254) * C244) *
                 C139575 +
             (C15299 + C15291) * C13591) *
                C139586 +
            ((C1687 + C1677) * C139575 + C15285 * C13591) * C13593) *
               C825) *
              C139305)) /
            (p * q * std::sqrt(p + q));
    d2eexx[20] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139575 * C114) *
                C137108 +
            (C13595 * C116 + C13591 * C125 + C13596 * C117 + C139575 * C126) *
                C139552 -
            (C13596 * C109 + C139575 * C115 + C13595 * C108 + C13591 * C114) *
                C137101 -
            (C13596 * C118 + C139575 * C127 + C13595 * C117 + C13591 * C126) *
                C139305) *
               C13593 +
           ((C14336 + C14337) * C137108 + (C14338 + C14339) * C139552 -
            (C14340 + C14341) * C137101 - (C14342 + C14343) * C139305) *
               C139586) *
              C139457 * C139339 * C139591 +
          (((C14341 + C14340) * C137101 -
            ((C14339 + C14338) * C139552 + (C14337 + C14336) * C137108) +
            (C14343 + C14342) * C139305) *
               C13593 +
           ((C14344 + C14345) * C137101 -
            ((C14346 + C14347) * C139552 + (C14348 + C14349) * C137108) +
            (C14350 + C14351) * C139305) *
               C139586) *
              C139457 * C139339 * C139592 +
          (((C14349 + C14348) * C137108 + (C14347 + C14346) * C139552 -
            (C14345 + C14344) * C137101 - (C14351 + C14350) * C139305) *
               C13593 +
           ((C20387 + C20388) * C137108 + (C20389 + C20390) * C139552 -
            (C13596 * C5914 + C139575 * C5920 + C13595 * C5915 +
             C13591 * C5921) *
                C137101 -
            (C13596 * C5917 + C139575 * C5923 + C13595 * C5918 +
             C13591 * C5924) *
                C139305) *
               C139586) *
              C139457 * C139339 * C7158)) /
        (p * q * std::sqrt(p + q));
    d2eexy[20] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139575 * C114) *
                C7235 +
            (C13595 * C182 + C13591 * C188 + C13596 * C183 + C139575 * C189) *
                C139591 -
            (C14337 + C14336) * C7236 - (C14466 + C14467) * C139592 +
            (C14349 + C14348) * C7237 + (C14468 + C14469) * C7158) *
               C13593 +
           ((C14336 + C14337) * C7235 + (C14467 + C14466) * C139591 -
            (C14348 + C14349) * C7236 - (C14469 + C14468) * C139592 +
            (C20387 + C20388) * C7237 + (C20466 + C20465) * C7158) *
               C139586) *
              C139457 * C139552 +
          (((C14341 + C14340) * C7236 -
            ((C13596 * C184 + C139575 * C190 + C13595 * C183 + C13591 * C189) *
                 C139591 +
             (C13596 * C109 + C139575 * C115 + C13595 * C108 + C13591 * C114) *
                 C7235) +
            (C14470 + C14471) * C139592 - (C14345 + C14344) * C7237 -
            (C14472 + C14473) * C7158) *
               C13593 +
           ((C14344 + C14345) * C7236 -
            ((C14471 + C14470) * C139591 + (C14340 + C14341) * C7235) +
            (C14473 + C14472) * C139592 -
            (C13596 * C5914 + C139575 * C5920 + C13595 * C5915 +
             C13591 * C5921) *
                C7237 -
            (C13596 * C5980 + C139575 * C5983 + C13595 * C5981 +
             C13591 * C5984) *
                C7158) *
               C139586) *
              C139457 * C139305) *
         C139339) /
        (p * q * std::sqrt(p + q));
    d2eexz[20] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139575 * C114) *
                 C244 +
             (C13595 * C245 + C13591 * C251 + C13596 * C246 + C139575 * C252) *
                 C139339) *
                C13593 +
            ((C14336 + C14337) * C244 + (C14588 + C14589) * C139339) *
                C139586) *
               C139457 * C139591 -
           (((C14590 + C14591) * C139339 + (C14348 + C14349) * C244) * C139586 +
            ((C14589 + C14588) * C139339 + (C14337 + C14336) * C244) * C13593) *
               C139457 * C139592 +
           (((C14349 + C14348) * C244 + (C14591 + C14590) * C139339) * C13593 +
            ((C20387 + C20388) * C244 + (C20541 + C20542) * C139339) *
                C139586) *
               C139457 * C7158) *
              C139552 +
          ((((C14341 + C14340) * C244 + (C14592 + C14593) * C139339) * C13593 +
            ((C14344 + C14345) * C244 + (C14594 + C14595) * C139339) *
                C139586) *
               C139457 * C139592 -
           (((C14593 + C14592) * C139339 + (C14340 + C14341) * C244) * C139586 +
            ((C13596 * C247 + C139575 * C253 + C13595 * C246 + C13591 * C252) *
                 C139339 +
             (C13596 * C109 + C139575 * C115 + C13595 * C108 + C13591 * C114) *
                 C244) *
                C13593) *
               C139457 * C139591 -
           (((C13596 * C6036 + C139575 * C6039 + C13595 * C6037 +
              C13591 * C6040) *
                 C139339 +
             (C13596 * C5914 + C139575 * C5920 + C13595 * C5915 +
              C13591 * C5921) *
                 C244) *
                C139586 +
            ((C14595 + C14594) * C139339 + (C14345 + C14344) * C244) * C13593) *
               C139457 * C7158) *
              C139305)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[20] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C831 + C139586 * C1118) *
                C137108 +
            (C13795 * C116 + C13593 * C314 + C13796 * C841 + C139586 * C1125) *
                C139552 -
            (C13822 + C13823) * C137101 - (C13824 + C13825) * C139305) *
               C139457 * C13591 +
           ((C13823 + C13822) * C137108 + (C13825 + C13824) * C139552 -
            (C13827 + C13826) * C137101 - (C13829 + C13828) * C139305) *
               C139457 * C139575) *
              C139339 * C139591 +
          (((C14710 + C14711) * C137101 -
            ((C13796 * C847 + C139586 * C1129 + C13795 * C841 +
              C13593 * C1125) *
                 C139552 +
             (C13796 * C832 + C139586 * C1121 + C13795 * C831 +
              C13593 * C1118) *
                 C137108) +
            (C14712 + C14713) * C139305) *
               C139457 * C13591 +
           ((C16677 + C16676) * C137101 -
            ((C14713 + C14712) * C139552 + (C14711 + C14710) * C137108) +
            (C16679 + C16678) * C139305) *
               C139457 * C139575) *
              C139339 * C139592 +
          (((C13795 * C832 + C13593 * C1121 + C13796 * C5916 +
             C139586 * C6094) *
                C137108 +
            (C13795 * C847 + C13593 * C1129 + C13796 * C5919 +
             C139586 * C6097) *
                C139552 -
            (C14714 + C14715) * C137101 - (C14716 + C14717) * C139305) *
               C139457 * C13591 +
           ((C14715 + C14714) * C137108 + (C14717 + C14716) * C139552 -
            (C13796 * C5914 + C139586 * C6092 + C13795 * C834 +
             C13593 * C1123) *
                C137101 -
            (C13796 * C5917 + C139586 * C6095 + C13795 * C849 +
             C13593 * C1131) *
                C139305) *
               C139457 * C139575) *
              C139339 * C7158)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[20] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C831 + C139586 * C1118) *
                C7235 +
            (C13795 * C182 + C13593 * C394 + C13796 * C939 + C139586 * C1231) *
                C139591 -
            (C13796 * C832 + C139586 * C1121 + C13795 * C831 + C13593 * C1118) *
                C7236 -
            (C13796 * C940 + C139586 * C1232 + C13795 * C939 + C13593 * C1231) *
                C139592 +
            (C13795 * C832 + C13593 * C1121 + C13796 * C5916 +
             C139586 * C6094) *
                C7237 +
            (C13795 * C940 + C13593 * C1232 + C13796 * C5982 +
             C139586 * C6148) *
                C7158) *
               C139457 * C13591 +
           ((C13823 + C13822) * C7235 + (C13912 + C13913) * C139591 -
            (C14711 + C14710) * C7236 - (C14824 + C14825) * C139592 +
            (C14715 + C14714) * C7237 + (C14826 + C14827) * C7158) *
               C139457 * C139575) *
              C139552 +
          (((C14710 + C14711) * C7236 -
            ((C13913 + C13912) * C139591 + (C13822 + C13823) * C7235) +
            (C14825 + C14824) * C139592 - (C14714 + C14715) * C7237 -
            (C14827 + C14826) * C7158) *
               C139457 * C13591 +
           ((C16677 + C16676) * C7236 -
            ((C13914 + C13915) * C139591 + (C13827 + C13826) * C7235) +
            (C16782 + C16783) * C139592 -
            (C13796 * C5914 + C139586 * C6092 + C13795 * C834 +
             C13593 * C1123) *
                C7237 -
            (C13796 * C5980 + C139586 * C6150 + C13795 * C942 +
             C13593 * C1236) *
                C7158) *
               C139457 * C139575) *
              C139305) *
         C139339) /
        (p * q * std::sqrt(p + q));
    d2eeyz[20] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13795 * C107 + C13593 * C308 + C13796 * C831 + C139586 * C1118) *
                 C244 +
             (C13795 * C245 + C13593 * C474 + C13796 * C1029 +
              C139586 * C1339) *
                 C139339) *
                C139457 * C13591 +
            ((C13823 + C13822) * C244 + (C13996 + C13997) * C139339) * C139457 *
                C139575) *
               C139591 -
           (((C14934 + C14935) * C139339 + (C14711 + C14710) * C244) * C139457 *
                C139575 +
            ((C13796 * C1030 + C139586 * C1340 + C13795 * C1029 +
              C13593 * C1339) *
                 C139339 +
             (C13796 * C832 + C139586 * C1121 + C13795 * C831 +
              C13593 * C1118) *
                 C244) *
                C139457 * C13591) *
               C139592 +
           (((C13795 * C832 + C13593 * C1121 + C13796 * C5916 +
              C139586 * C6094) *
                 C244 +
             (C13795 * C1030 + C13593 * C1340 + C13796 * C6038 +
              C139586 * C6203) *
                 C139339) *
                C139457 * C13591 +
            ((C14715 + C14714) * C244 + (C14936 + C14937) * C139339) * C139457 *
                C139575) *
               C7158) *
              C139552 +
          ((((C14710 + C14711) * C244 + (C14935 + C14934) * C139339) * C139457 *
                C13591 +
            ((C16677 + C16676) * C244 + (C16886 + C16887) * C139339) * C139457 *
                C139575) *
               C139592 -
           (((C13998 + C13999) * C139339 + (C13827 + C13826) * C244) * C139457 *
                C139575 +
            ((C13997 + C13996) * C139339 + (C13822 + C13823) * C244) * C139457 *
                C13591) *
               C139591 -
           (((C13796 * C6036 + C139586 * C6201 + C13795 * C1032 +
              C13593 * C1342) *
                 C139339 +
             (C13796 * C5914 + C139586 * C6092 + C13795 * C834 +
              C13593 * C1123) *
                 C244) *
                C139457 * C139575 +
            ((C14937 + C14936) * C139339 + (C14714 + C14715) * C244) * C139457 *
                C13591) *
               C7158) *
              C139305)) /
        (p * q * std::sqrt(p + q));
    d2eezx[20] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C554 * C107 + C139457 * C555) * C137108 +
                       (C554 * C116 + C139457 * C561) * C139552 -
                       C584 * C137101 - C585 * C139305) *
                          C13591 +
                      (C584 * C137108 + C585 * C139552 - C586 * C137101 -
                       C587 * C139305) *
                          C139575) *
                         C13593 +
                     ((C22631 + C22632 - C22633 - C22634) * C13591 +
                      (C22635 + C22636 - C22637 - C22638) * C139575) *
                         C139586) *
                        C139339 * C139591 +
                    (((C22633 - (C22632 + C22631) + C22634) * C13591 +
                      (C22637 - (C22636 + C22635) + C22638) * C139575) *
                         C13593 +
                     ((C22639 - (C22640 + C22641) + C22642) * C13591 +
                      (C22643 - (C22644 + C22645) + C22646) * C139575) *
                         C139586) *
                        C139339 * C139592 +
                    (((C22641 + C22640 - C22639 - C22642) * C13591 +
                      (C22645 + C22644 - C22643 - C22646) * C139575) *
                         C13593 +
                     ((C20833 * C137108 + C20834 * C139552 - C15064 * C137101 -
                       C15065 * C139305) *
                          C13591 +
                      (C15064 * C137108 + C15065 * C139552 -
                       (C554 * C5914 + C139457 * C6254) * C137101 -
                       (C554 * C5917 + C139457 * C6257) * C139305) *
                          C139575) *
                         C139586) *
                        C139339 * C7158)) /
                  (p * q * std::sqrt(p + q));
    d2eezy[20] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139457 * C555) * C7235 +
             (C554 * C182 + C139457 * C641) * C139591 - C15060 * C7236 -
             C15179 * C139592 + C15063 * C7237 + C15180 * C7158) *
                C13591 +
            (C7695 + C7696 - C7697 - C7698 + C7699 + C7700) * C139575) *
               C13593 +
           ((C15060 * C7235 + C15179 * C139591 - C15063 * C7236 -
             C15180 * C139592 + C20833 * C7237 + C20907 * C7158) *
                C13591 +
            (C22745 + C22746 - C22747 - C22748 + C22749 + C22750) * C139575) *
               C139586) *
              C139552 +
          (((C7697 - (C7696 + C7695) + C7698 - C7699 - C7700) * C13591 +
            (C7703 - (C7702 + C7701) + C7704 - C7705 - C7706) * C139575) *
               C13593 +
           ((C22747 - (C22746 + C22745) + C22748 - C22749 - C22750) * C13591 +
            (C1478 * C7236 - (C1580 * C139591 + C1474 * C7235) +
             C1581 * C139592 - (C554 * C5914 + C139457 * C6254) * C7237 -
             (C554 * C5980 + C139457 * C6312) * C7158) *
                C139575) *
               C139586) *
              C139305) *
         C139339) /
        (p * q * std::sqrt(p + q));
    d2eezz[20] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C554 * C107 + C139457 * C555) * C244 +
              (C554 * C245 + C139457 * C719) * C139339) *
                 C13591 +
             (C726 + C742) * C139575) *
                C13593 +
            ((C15281 + C15297) * C13591 + C15284 * C139575) * C139586) *
               C139591 -
           ((C15285 * C139575 + (C15298 + C15288) * C13591) * C139586 +
            (C15289 * C139575 + (C15297 + C15281) * C13591) * C13593) *
               C139592 +
           (((C15288 + C15298) * C13591 + C15290 * C139575) * C13593 +
            ((C20976 + C20980) * C13591 + (C15291 + C15299) * C139575) *
                C139586) *
               C7158) *
              C139552 +
          (((C15284 * C13591 + C17202 * C139575) * C13593 +
            (C15290 * C13591 + (C1677 + C1687) * C139575) * C139586) *
               C139592 -
           ((C3372 * C139575 + C15289 * C13591) * C139586 +
            ((C743 + C729) * C139575 + (C742 + C726) * C13591) * C13593) *
               C139591 -
           ((((C554 * C6036 + C139457 * C6363) * C139339 +
              (C554 * C5914 + C139457 * C6254) * C244) *
                 C139575 +
             (C15299 + C15291) * C13591) *
                C139586 +
            ((C1687 + C1677) * C139575 + C15285 * C13591) * C13593) *
               C7158) *
              C139305)) /
        (p * q * std::sqrt(p + q));
    d2eexx[21] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139575 * C114) *
                 C5913 +
             (C13595 * C116 + C13591 * C125 + C13596 * C117 + C139575 * C126) *
                 C139300) *
                C13593 +
            ((C14336 + C14337) * C5913 + (C14338 + C14339) * C139300) *
                C139586) *
               C139457 * C139561 -
           (((C18259 + C18260) * C139300 + (C18261 + C18262) * C5913) *
                C139586 +
            ((C13596 * C1776 + C139575 * C1789 + C13595 * C1777 +
              C13591 * C1790) *
                 C139300 +
             (C13596 * C1764 + C139575 * C1772 + C13595 * C1767 +
              C13591 * C1778) *
                 C5913) *
                C13593) *
               C139457 * C139403) *
              C139591 +
          ((((C18262 + C18261) * C5913 + (C18260 + C18259) * C139300) * C13593 +
            ((C24145 + C24146) * C5913 + (C24147 + C24148) * C139300) *
                C139586) *
               C139457 * C139403 -
           (((C14346 + C14347) * C139300 + (C14348 + C14349) * C5913) *
                C139586 +
            ((C14339 + C14338) * C139300 + (C14337 + C14336) * C5913) *
                C13593) *
               C139457 * C139561) *
              C139592 +
          ((((C14349 + C14348) * C5913 + (C14347 + C14346) * C139300) * C13593 +
            ((C20387 + C20388) * C5913 + (C20389 + C20390) * C139300) *
                C139586) *
               C139457 * C139561 -
           (((C13596 * C24130 + C139575 * C24134 + C13595 * C24131 +
              C13591 * C24135) *
                 C139300 +
             (C13596 * C24128 + C139575 * C24132 + C13595 * C24129 +
              C13591 * C24133) *
                 C5913) *
                C139586 +
            ((C24148 + C24147) * C139300 + (C24146 + C24145) * C5913) *
                C13593) *
               C139457 * C139403) *
              C7158)) /
        (p * q * std::sqrt(p + q));
    d2eexy[21] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139575 * C114) *
                C7235 +
            (C13595 * C182 + C13591 * C188 + C13596 * C183 + C139575 * C189) *
                C139591 -
            (C14337 + C14336) * C7236 - (C14466 + C14467) * C139592 +
            (C14349 + C14348) * C7237 + (C14468 + C14469) * C7158) *
               C13593 +
           ((C14336 + C14337) * C7235 + (C14467 + C14466) * C139591 -
            (C14348 + C14349) * C7236 - (C14469 + C14468) * C139592 +
            (C20387 + C20388) * C7237 + (C20466 + C20465) * C7158) *
               C139586) *
              C139457 * C139300 * C139561 +
          (((C18262 + C18261) * C7236 -
            ((C13596 * C1870 + C139575 * C1878 + C13595 * C1873 +
              C13591 * C1881) *
                 C139591 +
             (C13596 * C1764 + C139575 * C1772 + C13595 * C1767 +
              C13591 * C1778) *
                 C7235) +
            (C18403 + C18404) * C139592 - (C24146 + C24145) * C7237 -
            (C24255 + C24256) * C7158) *
               C13593 +
           ((C24145 + C24146) * C7236 -
            ((C18404 + C18403) * C139591 + (C18261 + C18262) * C7235) +
            (C24256 + C24255) * C139592 -
            (C13596 * C24128 + C139575 * C24132 + C13595 * C24129 +
             C13591 * C24133) *
                C7237 -
            (C13596 * C24246 + C139575 * C24248 + C13595 * C24247 +
             C13591 * C24249) *
                C7158) *
               C139586) *
              C139457 * C139300 * C139403)) /
        (p * q * std::sqrt(p + q));
    d2eexz[21] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139575 * C114) *
                C3607 +
            (C13595 * C245 + C13591 * C251 + C13596 * C246 + C139575 * C252) *
                C139561 -
            (C13596 * C1764 + C139575 * C1772 + C13595 * C1767 +
             C13591 * C1778) *
                C3608 -
            (C13596 * C1964 + C139575 * C1972 + C13595 * C1965 +
             C13591 * C1973) *
                C139403) *
               C13593 +
           ((C14336 + C14337) * C3607 + (C14588 + C14589) * C139561 -
            (C18261 + C18262) * C3608 - (C18545 + C18546) * C139403) *
               C139586) *
              C139457 * C139591 +
          (((C18262 + C18261) * C3608 -
            ((C14589 + C14588) * C139561 + (C14337 + C14336) * C3607) +
            (C18546 + C18545) * C139403) *
               C13593 +
           ((C24145 + C24146) * C3608 -
            ((C14590 + C14591) * C139561 + (C14348 + C14349) * C3607) +
            (C24363 + C24364) * C139403) *
               C139586) *
              C139457 * C139592 +
          (((C14349 + C14348) * C3607 + (C14591 + C14590) * C139561 -
            (C24146 + C24145) * C3608 - (C24364 + C24363) * C139403) *
               C13593 +
           ((C20387 + C20388) * C3607 + (C20541 + C20542) * C139561 -
            (C13596 * C24128 + C139575 * C24132 + C13595 * C24129 +
             C13591 * C24133) *
                C3608 -
            (C13596 * C24354 + C139575 * C24356 + C13595 * C24355 +
             C13591 * C24357) *
                C139403) *
               C139586) *
              C139457 * C7158) *
         C139300) /
        (p * q * std::sqrt(p + q));
    d2eeyx[21] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13795 * C107 + C13593 * C308 + C13796 * C831 + C139586 * C1118) *
                 C5913 +
             (C13795 * C116 + C13593 * C314 + C13796 * C841 + C139586 * C1125) *
                 C139300) *
                C139457 * C13591 +
            ((C13823 + C13822) * C5913 + (C13825 + C13824) * C139300) *
                C139457 * C139575) *
               C139561 -
           (((C15711 + C15710) * C139300 + (C15709 + C15708) * C5913) *
                C139457 * C139575 +
            ((C13796 * C4230 + C139586 * C4553 + C13795 * C1777 +
              C13593 * C2061) *
                 C139300 +
             (C13796 * C4223 + C139586 * C4549 + C13795 * C1767 +
              C13593 * C2054) *
                 C5913) *
                C139457 * C13591) *
               C139403) *
              C139591 +
          ((((C13795 * C4223 + C13593 * C4549 + C13796 * C8754 +
              C139586 * C9000) *
                 C5913 +
             (C13795 * C4230 + C13593 * C4553 + C13796 * C8757 +
              C139586 * C9003) *
                 C139300) *
                C139457 * C13591 +
            ((C18688 + C18687) * C5913 + (C18690 + C18689) * C139300) *
                C139457 * C139575) *
               C139403 -
           (((C14713 + C14712) * C139300 + (C14711 + C14710) * C5913) *
                C139457 * C139575 +
            ((C13796 * C847 + C139586 * C1129 + C13795 * C841 +
              C13593 * C1125) *
                 C139300 +
             (C13796 * C832 + C139586 * C1121 + C13795 * C831 +
              C13593 * C1118) *
                 C5913) *
                C139457 * C13591) *
               C139561) *
              C139592 +
          ((((C13795 * C832 + C13593 * C1121 + C13796 * C5916 +
              C139586 * C6094) *
                 C5913 +
             (C13795 * C847 + C13593 * C1129 + C13796 * C5919 +
              C139586 * C6097) *
                 C139300) *
                C139457 * C13591 +
            ((C14715 + C14714) * C5913 + (C14717 + C14716) * C139300) *
                C139457 * C139575) *
               C139561 -
           (((C13796 * C24130 + C139586 * C24464 + C13795 * C8756 +
              C13593 * C9002) *
                 C139300 +
             (C13796 * C24128 + C139586 * C24462 + C13795 * C8753 +
              C13593 * C8999) *
                 C5913) *
                C139457 * C139575 +
            ((C13796 * C24131 + C139586 * C24465 + C13795 * C8757 +
              C13593 * C9003) *
                 C139300 +
             (C13796 * C24129 + C139586 * C24463 + C13795 * C8754 +
              C13593 * C9000) *
                 C5913) *
                C139457 * C13591) *
               C139403) *
              C7158)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[21] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C831 + C139586 * C1118) *
                C7235 +
            (C13795 * C182 + C13593 * C394 + C13796 * C939 + C139586 * C1231) *
                C139591 -
            (C13796 * C832 + C139586 * C1121 + C13795 * C831 + C13593 * C1118) *
                C7236 -
            (C13796 * C940 + C139586 * C1232 + C13795 * C939 + C13593 * C1231) *
                C139592 +
            (C13795 * C832 + C13593 * C1121 + C13796 * C5916 +
             C139586 * C6094) *
                C7237 +
            (C13795 * C940 + C13593 * C1232 + C13796 * C5982 +
             C139586 * C6148) *
                C7158) *
               C139457 * C13591 +
           ((C13823 + C13822) * C7235 + (C13912 + C13913) * C139591 -
            (C14711 + C14710) * C7236 - (C14824 + C14825) * C139592 +
            (C14715 + C14714) * C7237 + (C14826 + C14827) * C7158) *
               C139457 * C139575) *
              C139300 * C139561 +
          (((C13795 * C4223 + C13593 * C4549 + C13796 * C8754 +
             C139586 * C9000) *
                C7236 -
            ((C13796 * C4337 + C139586 * C4667 + C13795 * C1873 +
              C13593 * C2170) *
                 C139591 +
             (C13796 * C4223 + C139586 * C4549 + C13795 * C1767 +
              C13593 * C2054) *
                 C7235) +
            (C13795 * C4337 + C13593 * C4667 + C13796 * C8840 +
             C139586 * C9078) *
                C139592 -
            (C13796 * C24129 + C139586 * C24463 + C13795 * C8754 +
             C13593 * C9000) *
                C7237 -
            (C13796 * C24247 + C139586 * C24564 + C13795 * C8840 +
             C13593 * C9078) *
                C7158) *
               C139457 * C13591 +
           ((C18688 + C18687) * C7236 -
            ((C15823 + C15822) * C139591 + (C15709 + C15708) * C7235) +
            (C18825 + C18826) * C139592 -
            (C13796 * C24128 + C139586 * C24462 + C13795 * C8753 +
             C13593 * C8999) *
                C7237 -
            (C13796 * C24246 + C139586 * C24565 + C13795 * C8839 +
             C13593 * C9079) *
                C7158) *
               C139457 * C139575) *
              C139300 * C139403)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[21] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C831 + C139586 * C1118) *
                C3607 +
            (C13795 * C245 + C13593 * C474 + C13796 * C1029 + C139586 * C1339) *
                C139561 -
            (C13796 * C4223 + C139586 * C4549 + C13795 * C1767 +
             C13593 * C2054) *
                C3608 -
            (C13796 * C4443 + C139586 * C4783 + C13795 * C1965 +
             C13593 * C2269) *
                C139403) *
               C139457 * C13591 +
           ((C13823 + C13822) * C3607 + (C13996 + C13997) * C139561 -
            (C15709 + C15708) * C3608 - (C15932 + C15933) * C139403) *
               C139457 * C139575) *
              C139591 +
          (((C13795 * C4223 + C13593 * C4549 + C13796 * C8754 +
             C139586 * C9000) *
                C3608 -
            ((C13796 * C1030 + C139586 * C1340 + C13795 * C1029 +
              C13593 * C1339) *
                 C139561 +
             (C13796 * C832 + C139586 * C1121 + C13795 * C831 +
              C13593 * C1118) *
                 C3607) +
            (C13795 * C4443 + C13593 * C4783 + C13796 * C8920 +
             C139586 * C9155) *
                C139403) *
               C139457 * C13591 +
           ((C18688 + C18687) * C3608 -
            ((C14934 + C14935) * C139561 + (C14711 + C14710) * C3607) +
            (C18961 + C18962) * C139403) *
               C139457 * C139575) *
              C139592 +
          (((C13795 * C832 + C13593 * C1121 + C13796 * C5916 +
             C139586 * C6094) *
                C3607 +
            (C13795 * C1030 + C13593 * C1340 + C13796 * C6038 +
             C139586 * C6203) *
                C139561 -
            (C13796 * C24129 + C139586 * C24463 + C13795 * C8754 +
             C13593 * C9000) *
                C3608 -
            (C13796 * C24355 + C139586 * C24664 + C13795 * C8920 +
             C13593 * C9155) *
                C139403) *
               C139457 * C13591 +
           ((C14715 + C14714) * C3607 + (C14936 + C14937) * C139561 -
            (C13796 * C24128 + C139586 * C24462 + C13795 * C8753 +
             C13593 * C8999) *
                C3608 -
            (C13796 * C24354 + C139586 * C24665 + C13795 * C8919 +
             C13593 * C9156) *
                C139403) *
               C139457 * C139575) *
              C7158) *
         C139300) /
        (p * q * std::sqrt(p + q));
    d2eezx[21] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C554 * C107 + C139457 * C555) * C5913 +
              (C554 * C116 + C139457 * C561) * C139300) *
                 C13591 +
             (C584 * C5913 + C585 * C139300) * C139575) *
                C13593 +
            ((C20819 + C20820) * C13591 + (C20821 + C20822) * C139575) *
                C139586) *
               C139561 -
           (((C21719 + C21720) * C139575 + (C21721 + C21722) * C13591) *
                C139586 +
            ((C2409 * C139300 + C2408 * C5913) * C139575 +
             ((C554 * C1777 + C139457 * C2383) * C139300 +
              (C554 * C1767 + C139457 * C2376) * C5913) *
                 C13591) *
                C13593) *
               C139403) *
              C139591 +
          ((((C21722 + C21721) * C13591 + (C21720 + C21719) * C139575) *
                C13593 +
            ((C24777 + C24778) * C13591 + (C24773 + C24774) * C139575) *
                C139586) *
               C139403 -
           (((C20823 + C20824) * C139575 + (C20825 + C20826) * C13591) *
                C139586 +
            ((C20822 + C20821) * C139575 + (C20820 + C20819) * C13591) *
                C13593) *
               C139561) *
              C139592 +
          ((((C20826 + C20825) * C13591 + (C20824 + C20823) * C139575) *
                C13593 +
            ((C20835 + C20836) * C13591 + (C20831 + C20832) * C139575) *
                C139586) *
               C139561 -
           ((((C554 * C24130 + C139457 * C24766) * C139300 +
              (C554 * C24128 + C139457 * C24764) * C5913) *
                 C139575 +
             ((C554 * C24131 + C139457 * C24767) * C139300 +
              (C554 * C24129 + C139457 * C24765) * C5913) *
                 C13591) *
                C139586 +
            ((C24774 + C24773) * C139575 + (C24778 + C24777) * C13591) *
                C13593) *
               C139403) *
              C7158)) /
        (p * q * std::sqrt(p + q));
    d2eezy[21] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139457 * C555) * C7235 +
             (C554 * C182 + C139457 * C641) * C139591 - C15060 * C7236 -
             C15179 * C139592 + C15063 * C7237 + C15180 * C7158) *
                C13591 +
            (C7695 + C7696 - C7697 - C7698 + C7699 + C7700) * C139575) *
               C13593 +
           ((C15060 * C7235 + C15179 * C139591 - C15063 * C7236 -
             C15180 * C139592 + C20833 * C7237 + C20907 * C7158) *
                C13591 +
            (C22745 + C22746 - C22747 - C22748 + C22749 + C22750) * C139575) *
               C139586) *
              C139300 * C139561 +
          (((C19108 * C7236 -
             ((C554 * C1873 + C139457 * C2492) * C139591 +
              (C554 * C1767 + C139457 * C2376) * C7235) +
             C19250 * C139592 - C24775 * C7237 - C24881 * C7158) *
                C13591 +
            (C4916 * C7236 - (C2510 * C139591 + C2408 * C7235) +
             C5032 * C139592 - C19109 * C7237 - C19251 * C7158) *
                C139575) *
               C13593 +
           ((C24775 * C7236 - (C19250 * C139591 + C19108 * C7235) +
             C24881 * C139592 - (C554 * C24129 + C139457 * C24765) * C7237 -
             (C554 * C24247 + C139457 * C24876) * C7158) *
                C13591 +
            (C19109 * C7236 - (C5032 * C139591 + C4916 * C7235) +
             C19251 * C139592 - (C554 * C24128 + C139457 * C24764) * C7237 -
             (C554 * C24246 + C139457 * C24877) * C7158) *
                C139575) *
               C139586) *
              C139300 * C139403)) /
        (p * q * std::sqrt(p + q));
    d2eezz[21] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139457 * C555) * C3607 +
             (C554 * C245 + C139457 * C719) * C139561 -
             (C554 * C1767 + C139457 * C2376) * C3608 -
             (C554 * C1965 + C139457 * C2591) * C139403) *
                C13591 +
            (C4108 + C4109 - C4110 - C4111) * C139575) *
               C13593 +
           ((C19383 + C19384 - C19385 - C19399) * C13591 + C19400 * C139575) *
               C139586) *
              C139591 +
          (((C19385 - (C19384 + C19383) + C19399) * C13591 + C19401 * C139575) *
               C13593 +
           ((C24982 - (C24983 + C24984) + C24988) * C13591 +
            (C19390 - (C19391 + C19392) + C19402) * C139575) *
               C139586) *
              C139592 +
          (((C24984 + C24983 - C24982 - C24988) * C13591 +
            (C19392 + C19391 - C19390 - C19402) * C139575) *
               C13593 +
           ((C20833 * C3607 + C20979 * C139561 -
             (C554 * C24129 + C139457 * C24765) * C3608 -
             (C554 * C24355 + C139457 * C24979) * C139403) *
                C13591 +
            (C15064 * C3607 + C15296 * C139561 -
             (C554 * C24128 + C139457 * C24764) * C3608 -
             (C554 * C24354 + C139457 * C24980) * C139403) *
                C139575) *
               C139586) *
              C7158) *
         C139300) /
        (p * q * std::sqrt(p + q));
    d2eexx[22] +=
        (-std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139575 * C114) *
                C5913 +
            (C13595 * C116 + C13591 * C125 + C13596 * C117 + C139575 * C126) *
                C139300) *
               C13593 +
           ((C14336 + C14337) * C5913 + (C14338 + C14339) * C139300) *
               C139586) *
              C139457 * C139339 * C5909 -
          (((C14346 + C14347) * C139300 + (C14348 + C14349) * C5913) * C139586 +
           ((C14339 + C14338) * C139300 + (C14337 + C14336) * C5913) * C13593) *
              C139457 * C139339 * C5910 +
          (((C14349 + C14348) * C5913 + (C14347 + C14346) * C139300) * C13593 +
           ((C20387 + C20388) * C5913 + (C20389 + C20390) * C139300) *
               C139586) *
              C139457 * C139339 * C5911 -
          (((C13596 * C20372 + C139575 * C20376 + C13595 * C20373 +
             C13591 * C20377) *
                C139300 +
            (C13596 * C20370 + C139575 * C20374 + C13595 * C20371 +
             C13591 * C20375) *
                C5913) *
               C139586 +
           ((C20390 + C20389) * C139300 + (C20388 + C20387) * C5913) * C13593) *
              C139457 * C139339 * C5912)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139575 * C114) *
                C5230 +
            (C13595 * C116 + C13591 * C125 + C13596 * C117 + C139575 * C126) *
                C5225 -
            (C13596 * C109 + C139575 * C115 + C13595 * C108 + C13591 * C114) *
                C5231 -
            (C13596 * C118 + C139575 * C127 + C13595 * C117 + C13591 * C126) *
                C5226 +
            (C13595 * C109 + C13591 * C115 + C13596 * C110 + C139575 * C119) *
                C5232 +
            (C13595 * C118 + C13591 * C127 + C13596 * C120 + C139575 * C128) *
                C5227) *
               C13593 +
           ((C14336 + C14337) * C5230 + (C14338 + C14339) * C5225 -
            (C14340 + C14341) * C5231 - (C14342 + C14343) * C5226 +
            (C16358 + C16359) * C5232 + (C16360 + C16361) * C5227) *
               C139586) *
              C139457 * C139339 * C5228 +
          (((C14341 + C14340) * C5231 -
            ((C14339 + C14338) * C5225 + (C14337 + C14336) * C5230) +
            (C14343 + C14342) * C5226 - (C16359 + C16358) * C5232 -
            (C16361 + C16360) * C5227) *
               C13593 +
           ((C14344 + C14345) * C5231 -
            ((C14346 + C14347) * C5225 + (C14348 + C14349) * C5230) +
            (C14350 + C14351) * C5226 -
            (C13596 * C835 + C139575 * C850 + C13595 * C834 + C13591 * C846) *
                C5232 -
            (C13596 * C851 + C139575 * C859 + C13595 * C849 + C13591 * C858) *
                C5227) *
               C139586) *
              C139457 * C139339 * C139377)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139575 * C114) *
                 C5913 +
             (C13595 * C116 + C13591 * C125 + C13596 * C117 + C139575 * C126) *
                 C139300) *
                C13593 +
            ((C14336 + C14337) * C5913 + (C14338 + C14339) * C139300) *
                C139586) *
               C139457 * C1761 -
           (((C18259 + C18260) * C139300 + (C18261 + C18262) * C5913) *
                C139586 +
            ((C13596 * C1776 + C139575 * C1789 + C13595 * C1777 +
              C13591 * C1790) *
                 C139300 +
             (C13596 * C1764 + C139575 * C1772 + C13595 * C1767 +
              C13591 * C1778) *
                 C5913) *
                C13593) *
               C139457 * C1762 +
           (((C13595 * C1768 + C13591 * C1780 + C13596 * C1769 +
              C139575 * C1781) *
                 C5913 +
             (C13595 * C1783 + C13591 * C1792 + C13596 * C1784 +
              C139575 * C1793) *
                 C139300) *
                C13593 +
            ((C21095 + C21096) * C5913 + (C21097 + C21098) * C139300) *
                C139586) *
               C139457 * C1763) *
              C5228 +
          ((((C18262 + C18261) * C5913 + (C18260 + C18259) * C139300) * C13593 +
            ((C13595 * C8754 + C13591 * C8760 + C13596 * C8753 +
              C139575 * C8759) *
                 C5913 +
             (C13595 * C8757 + C13591 * C8763 + C13596 * C8756 +
              C139575 * C8762) *
                 C139300) *
                C139586) *
               C139457 * C1762 -
           (((C14346 + C14347) * C139300 + (C14348 + C14349) * C5913) *
                C139586 +
            ((C14339 + C14338) * C139300 + (C14337 + C14336) * C5913) *
                C13593) *
               C139457 * C1761 -
           (((C13596 * C21080 + C139575 * C21084 + C13595 * C21081 +
              C13591 * C21085) *
                 C139300 +
             (C13596 * C21078 + C139575 * C21082 + C13595 * C21079 +
              C13591 * C21083) *
                 C5913) *
                C139586 +
            ((C21098 + C21097) * C139300 + (C21096 + C21095) * C5913) *
                C13593) *
               C139457 * C1763) *
              C139377)) /
            (p * q * std::sqrt(p + q));
    d2eexy[22] +=
        (-std::pow(Pi, 2.5) *
         (((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139575 * C114) *
               C5976 +
           (C13595 * C182 + C13591 * C188 + C13596 * C183 + C139575 * C189) *
               C5909 -
           (C14337 + C14336) * C5977 - (C14466 + C14467) * C5910 +
           (C14349 + C14348) * C5978 + (C14468 + C14469) * C5911 -
           (C20388 + C20387) * C5979 - (C20465 + C20466) * C5912) *
              C13593 +
          ((C14336 + C14337) * C5976 + (C14467 + C14466) * C5909 -
           (C14348 + C14349) * C5977 - (C14469 + C14468) * C5910 +
           (C20387 + C20388) * C5978 + (C20466 + C20465) * C5911 -
           (C13596 * C20370 + C139575 * C20374 + C13595 * C20371 +
            C13591 * C20375) *
               C5979 -
           (C13596 * C20456 + C139575 * C20458 + C13595 * C20457 +
            C13591 * C20459) *
               C5912) *
              C139586) *
         C139457 * C139300 * C139339) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139575 * C114) *
                C5307 +
            (C13595 * C182 + C13591 * C188 + C13596 * C183 + C139575 * C189) *
                C5228 -
            (C14337 + C14336) * C5308 - (C14466 + C14467) * C139377) *
               C13593 +
           ((C14336 + C14337) * C5307 + (C14467 + C14466) * C5228 -
            (C14348 + C14349) * C5308 - (C14469 + C14468) * C139377) *
               C139586) *
              C139457 * C5225 +
          (((C14341 + C14340) * C5308 -
            ((C13596 * C184 + C139575 * C190 + C13595 * C183 + C13591 * C189) *
                 C5228 +
             (C13596 * C109 + C139575 * C115 + C13595 * C108 + C13591 * C114) *
                 C5307) +
            (C14470 + C14471) * C139377) *
               C13593 +
           ((C14344 + C14345) * C5308 -
            ((C14471 + C14470) * C5228 + (C14340 + C14341) * C5307) +
            (C14473 + C14472) * C139377) *
               C139586) *
              C139457 * C5226 +
          (((C13595 * C109 + C13591 * C115 + C13596 * C110 + C139575 * C119) *
                C5307 +
            (C13595 * C184 + C13591 * C190 + C13596 * C185 + C139575 * C191) *
                C5228 -
            (C16359 + C16358) * C5308 - (C16464 + C16465) * C139377) *
               C13593 +
           ((C16358 + C16359) * C5307 + (C16465 + C16464) * C5228 -
            (C13596 * C835 + C139575 * C850 + C13595 * C834 + C13591 * C846) *
                C5308 -
            (C13596 * C944 + C139575 * C952 + C13595 * C942 + C13591 * C950) *
                C139377) *
               C139586) *
              C139457 * C5227) *
         C139339) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139575 * C114) *
                C5307 +
            (C13595 * C182 + C13591 * C188 + C13596 * C183 + C139575 * C189) *
                C5228 -
            (C14337 + C14336) * C5308 - (C14466 + C14467) * C139377) *
               C13593 +
           ((C14336 + C14337) * C5307 + (C14467 + C14466) * C5228 -
            (C14348 + C14349) * C5308 - (C14469 + C14468) * C139377) *
               C139586) *
              C139457 * C139300 * C1761 +
          (((C18262 + C18261) * C5308 -
            ((C13596 * C1870 + C139575 * C1878 + C13595 * C1873 +
              C13591 * C1881) *
                 C5228 +
             (C13596 * C1764 + C139575 * C1772 + C13595 * C1767 +
              C13591 * C1778) *
                 C5307) +
            (C18403 + C18404) * C139377) *
               C13593 +
           ((C13595 * C8754 + C13591 * C8760 + C13596 * C8753 +
             C139575 * C8759) *
                C5308 -
            ((C18404 + C18403) * C5228 + (C18261 + C18262) * C5307) +
            (C13595 * C8840 + C13591 * C8843 + C13596 * C8839 +
             C139575 * C8842) *
                C139377) *
               C139586) *
              C139457 * C139300 * C1762 +
          (((C13595 * C1768 + C13591 * C1780 + C13596 * C1769 +
             C139575 * C1781) *
                C5307 +
            (C13595 * C1874 + C13591 * C1882 + C13596 * C1875 +
             C139575 * C1883) *
                C5228 -
            (C21096 + C21095) * C5308 - (C21205 + C21206) * C139377) *
               C13593 +
           ((C21095 + C21096) * C5307 + (C21206 + C21205) * C5228 -
            (C13596 * C21078 + C139575 * C21082 + C13595 * C21079 +
             C13591 * C21083) *
                C5308 -
            (C13596 * C21196 + C139575 * C21198 + C13595 * C21197 +
             C13591 * C21199) *
                C139377) *
               C139586) *
              C139457 * C139300 * C1763)) /
            (p * q * std::sqrt(p + q));
    d2eexz[22] +=
        (-std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139575 * C114) *
                C244 +
            (C13595 * C245 + C13591 * C251 + C13596 * C246 + C139575 * C252) *
                C139339) *
               C13593 +
           ((C14336 + C14337) * C244 + (C14588 + C14589) * C139339) * C139586) *
              C139457 * C5909 -
          (((C14590 + C14591) * C139339 + (C14348 + C14349) * C244) * C139586 +
           ((C14589 + C14588) * C139339 + (C14337 + C14336) * C244) * C13593) *
              C139457 * C5910 +
          (((C14349 + C14348) * C244 + (C14591 + C14590) * C139339) * C13593 +
           ((C20387 + C20388) * C244 + (C20541 + C20542) * C139339) * C139586) *
              C139457 * C5911 -
          (((C13596 * C20532 + C139575 * C20534 + C13595 * C20533 +
             C13591 * C20535) *
                C139339 +
            (C13596 * C20370 + C139575 * C20374 + C13595 * C20371 +
             C13591 * C20375) *
                C244) *
               C139586 +
           ((C20542 + C20541) * C139339 + (C20388 + C20387) * C244) * C13593) *
              C139457 * C5912) *
         C139300) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139575 * C114) *
                 C244 +
             (C13595 * C245 + C13591 * C251 + C13596 * C246 + C139575 * C252) *
                 C139339) *
                C13593 +
            ((C14336 + C14337) * C244 + (C14588 + C14589) * C139339) *
                C139586) *
               C139457 * C5228 -
           (((C14590 + C14591) * C139339 + (C14348 + C14349) * C244) * C139586 +
            ((C14589 + C14588) * C139339 + (C14337 + C14336) * C244) * C13593) *
               C139457 * C139377) *
              C5225 +
          ((((C14341 + C14340) * C244 + (C14592 + C14593) * C139339) * C13593 +
            ((C14344 + C14345) * C244 + (C14594 + C14595) * C139339) *
                C139586) *
               C139457 * C139377 -
           (((C14593 + C14592) * C139339 + (C14340 + C14341) * C244) * C139586 +
            ((C13596 * C247 + C139575 * C253 + C13595 * C246 + C13591 * C252) *
                 C139339 +
             (C13596 * C109 + C139575 * C115 + C13595 * C108 + C13591 * C114) *
                 C244) *
                C13593) *
               C139457 * C5228) *
              C5226 +
          ((((C13595 * C109 + C13591 * C115 + C13596 * C110 + C139575 * C119) *
                 C244 +
             (C13595 * C247 + C13591 * C253 + C13596 * C248 + C139575 * C254) *
                 C139339) *
                C13593 +
            ((C16358 + C16359) * C244 + (C16568 + C16569) * C139339) *
                C139586) *
               C139457 * C5228 -
           (((C13596 * C1034 + C139575 * C1042 + C13595 * C1032 +
              C13591 * C1040) *
                 C139339 +
             (C13596 * C835 + C139575 * C850 + C13595 * C834 + C13591 * C846) *
                 C244) *
                C139586 +
            ((C16569 + C16568) * C139339 + (C16359 + C16358) * C244) * C13593) *
               C139457 * C139377) *
              C5227)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139575 * C114) *
                C1960 +
            (C13595 * C245 + C13591 * C251 + C13596 * C246 + C139575 * C252) *
                C1761 -
            (C13596 * C1764 + C139575 * C1772 + C13595 * C1767 +
             C13591 * C1778) *
                C1961 -
            (C13596 * C1964 + C139575 * C1972 + C13595 * C1965 +
             C13591 * C1973) *
                C1762 +
            (C13595 * C1768 + C13591 * C1780 + C13596 * C1769 +
             C139575 * C1781) *
                C1962 +
            (C13595 * C1966 + C13591 * C1974 + C13596 * C1967 +
             C139575 * C1975) *
                C1763) *
               C13593 +
           ((C14336 + C14337) * C1960 + (C14588 + C14589) * C1761 -
            (C18261 + C18262) * C1961 - (C18545 + C18546) * C1762 +
            (C21095 + C21096) * C1962 + (C21313 + C21314) * C1763) *
               C139586) *
              C139457 * C5228 +
          (((C18262 + C18261) * C1961 -
            ((C14589 + C14588) * C1761 + (C14337 + C14336) * C1960) +
            (C18546 + C18545) * C1762 - (C21096 + C21095) * C1962 -
            (C21314 + C21313) * C1763) *
               C13593 +
           ((C13595 * C8754 + C13591 * C8760 + C13596 * C8753 +
             C139575 * C8759) *
                C1961 -
            ((C14590 + C14591) * C1761 + (C14348 + C14349) * C1960) +
            (C13595 * C8920 + C13591 * C8923 + C13596 * C8919 +
             C139575 * C8922) *
                C1762 -
            (C13596 * C21078 + C139575 * C21082 + C13595 * C21079 +
             C13591 * C21083) *
                C1962 -
            (C13596 * C21304 + C139575 * C21306 + C13595 * C21305 +
             C13591 * C21307) *
                C1763) *
               C139586) *
              C139457 * C139377) *
         C139300) /
            (p * q * std::sqrt(p + q));
    d2eeyx[22] +=
        (-std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C831 + C139586 * C1118) *
                C5913 +
            (C13795 * C116 + C13593 * C314 + C13796 * C841 + C139586 * C1125) *
                C139300) *
               C139457 * C13591 +
           ((C13823 + C13822) * C5913 + (C13825 + C13824) * C139300) * C139457 *
               C139575) *
              C139339 * C5909 -
          (((C14713 + C14712) * C139300 + (C14711 + C14710) * C5913) * C139457 *
               C139575 +
           ((C13796 * C847 + C139586 * C1129 + C13795 * C841 + C13593 * C1125) *
                C139300 +
            (C13796 * C832 + C139586 * C1121 + C13795 * C831 + C13593 * C1118) *
                C5913) *
               C139457 * C13591) *
              C139339 * C5910 +
          (((C13795 * C832 + C13593 * C1121 + C13796 * C5916 +
             C139586 * C6094) *
                C5913 +
            (C13795 * C847 + C13593 * C1129 + C13796 * C5919 +
             C139586 * C6097) *
                C139300) *
               C139457 * C13591 +
           ((C14715 + C14714) * C5913 + (C14717 + C14716) * C139300) * C139457 *
               C139575) *
              C139339 * C5911 -
          (((C13796 * C20372 + C139586 * C20610 + C13795 * C5918 +
             C13593 * C6096) *
                C139300 +
            (C13796 * C20370 + C139586 * C20608 + C13795 * C5915 +
             C13593 * C6093) *
                C5913) *
               C139457 * C139575 +
           ((C13796 * C20373 + C139586 * C20611 + C13795 * C5919 +
             C13593 * C6097) *
                C139300 +
            (C13796 * C20371 + C139586 * C20609 + C13795 * C5916 +
             C13593 * C6094) *
                C5913) *
               C139457 * C13591) *
              C139339 * C5912)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C831 + C139586 * C1118) *
                C5230 +
            (C13795 * C116 + C13593 * C314 + C13796 * C841 + C139586 * C1125) *
                C5225 -
            (C13822 + C13823) * C5231 - (C13824 + C13825) * C5226 +
            (C13826 + C13827) * C5232 + (C13828 + C13829) * C5227) *
               C139457 * C13591 +
           ((C13823 + C13822) * C5230 + (C13825 + C13824) * C5225 -
            (C13827 + C13826) * C5231 - (C13829 + C13828) * C5226 +
            (C13831 + C13830) * C5232 + (C13833 + C13832) * C5227) *
               C139457 * C139575) *
              C139339 * C5228 +
          (((C14710 + C14711) * C5231 -
            ((C13796 * C847 + C139586 * C1129 + C13795 * C841 +
              C13593 * C1125) *
                 C5225 +
             (C13796 * C832 + C139586 * C1121 + C13795 * C831 +
              C13593 * C1118) *
                 C5230) +
            (C14712 + C14713) * C5226 - (C16676 + C16677) * C5232 -
            (C16678 + C16679) * C5227) *
               C139457 * C13591 +
           ((C16677 + C16676) * C5231 -
            ((C14713 + C14712) * C5225 + (C14711 + C14710) * C5230) +
            (C16679 + C16678) * C5226 -
            (C13796 * C835 + C139586 * C1124 + C13795 * C830 + C13593 * C1120) *
                C5232 -
            (C13796 * C851 + C139586 * C1132 + C13795 * C843 + C13593 * C1128) *
                C5227) *
               C139457 * C139575) *
              C139339 * C139377)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C13795 * C107 + C13593 * C308 + C13796 * C831 + C139586 * C1118) *
                 C5913 +
             (C13795 * C116 + C13593 * C314 + C13796 * C841 + C139586 * C1125) *
                 C139300) *
                C139457 * C13591 +
            ((C13823 + C13822) * C5913 + (C13825 + C13824) * C139300) *
                C139457 * C139575) *
               C1761 -
           (((C15711 + C15710) * C139300 + (C15709 + C15708) * C5913) *
                C139457 * C139575 +
            ((C13796 * C4230 + C139586 * C4553 + C13795 * C1777 +
              C13593 * C2061) *
                 C139300 +
             (C13796 * C4223 + C139586 * C4549 + C13795 * C1767 +
              C13593 * C2054) *
                 C5913) *
                C139457 * C13591) *
               C1762 +
           (((C13795 * C1768 + C13593 * C2057 + C13796 * C6442 +
              C139586 * C6688) *
                 C5913 +
             (C13795 * C1783 + C13593 * C2065 + C13796 * C6445 +
              C139586 * C6691) *
                 C139300) *
                C139457 * C13591 +
            ((C15713 + C15712) * C5913 + (C15715 + C15714) * C139300) *
                C139457 * C139575) *
               C1763) *
              C5228 +
          ((((C13795 * C4223 + C13593 * C4549 + C13796 * C8754 +
              C139586 * C9000) *
                 C5913 +
             (C13795 * C4230 + C13593 * C4553 + C13796 * C8757 +
              C139586 * C9003) *
                 C139300) *
                C139457 * C13591 +
            ((C18688 + C18687) * C5913 + (C18690 + C18689) * C139300) *
                C139457 * C139575) *
               C1762 -
           (((C14713 + C14712) * C139300 + (C14711 + C14710) * C5913) *
                C139457 * C139575 +
            ((C13796 * C847 + C139586 * C1129 + C13795 * C841 +
              C13593 * C1125) *
                 C139300 +
             (C13796 * C832 + C139586 * C1121 + C13795 * C831 +
              C13593 * C1118) *
                 C5913) *
                C139457 * C13591) *
               C1761 -
           (((C13796 * C21080 + C139586 * C21414 + C13795 * C6444 +
              C13593 * C6690) *
                 C139300 +
             (C13796 * C21078 + C139586 * C21412 + C13795 * C6441 +
              C13593 * C6687) *
                 C5913) *
                C139457 * C139575 +
            ((C13796 * C21081 + C139586 * C21415 + C13795 * C6445 +
              C13593 * C6691) *
                 C139300 +
             (C13796 * C21079 + C139586 * C21413 + C13795 * C6442 +
              C13593 * C6688) *
                 C5913) *
                C139457 * C13591) *
               C1763) *
              C139377)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[22] +=
        (-std::pow(Pi, 2.5) *
         (((C13795 * C107 + C13593 * C308 + C13796 * C831 + C139586 * C1118) *
               C5976 +
           (C13795 * C182 + C13593 * C394 + C13796 * C939 + C139586 * C1231) *
               C5909 -
           (C13796 * C832 + C139586 * C1121 + C13795 * C831 + C13593 * C1118) *
               C5977 -
           (C13796 * C940 + C139586 * C1232 + C13795 * C939 + C13593 * C1231) *
               C5910 +
           (C13795 * C832 + C13593 * C1121 + C13796 * C5916 + C139586 * C6094) *
               C5978 +
           (C13795 * C940 + C13593 * C1232 + C13796 * C5982 + C139586 * C6148) *
               C5911 -
           (C13796 * C20371 + C139586 * C20609 + C13795 * C5916 +
            C13593 * C6094) *
               C5979 -
           (C13796 * C20457 + C139586 * C20678 + C13795 * C5982 +
            C13593 * C6148) *
               C5912) *
              C139457 * C13591 +
          ((C13823 + C13822) * C5976 + (C13912 + C13913) * C5909 -
           (C14711 + C14710) * C5977 - (C14824 + C14825) * C5910 +
           (C14715 + C14714) * C5978 + (C14826 + C14827) * C5911 -
           (C13796 * C20370 + C139586 * C20608 + C13795 * C5915 +
            C13593 * C6093) *
               C5979 -
           (C13796 * C20456 + C139586 * C20679 + C13795 * C5981 +
            C13593 * C6149) *
               C5912) *
              C139457 * C139575) *
         C139300 * C139339) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C831 + C139586 * C1118) *
                C5307 +
            (C13795 * C182 + C13593 * C394 + C13796 * C939 + C139586 * C1231) *
                C5228 -
            (C13796 * C832 + C139586 * C1121 + C13795 * C831 + C13593 * C1118) *
                C5308 -
            (C13796 * C940 + C139586 * C1232 + C13795 * C939 + C13593 * C1231) *
                C139377) *
               C139457 * C13591 +
           ((C13823 + C13822) * C5307 + (C13912 + C13913) * C5228 -
            (C14711 + C14710) * C5308 - (C14824 + C14825) * C139377) *
               C139457 * C139575) *
              C5225 +
          (((C14710 + C14711) * C5308 -
            ((C13913 + C13912) * C5228 + (C13822 + C13823) * C5307) +
            (C14825 + C14824) * C139377) *
               C139457 * C13591 +
           ((C16677 + C16676) * C5308 -
            ((C13914 + C13915) * C5228 + (C13827 + C13826) * C5307) +
            (C16782 + C16783) * C139377) *
               C139457 * C139575) *
              C5226 +
          (((C13826 + C13827) * C5307 + (C13915 + C13914) * C5228 -
            (C16676 + C16677) * C5308 - (C16783 + C16782) * C139377) *
               C139457 * C13591 +
           ((C13831 + C13830) * C5307 + (C13916 + C13917) * C5228 -
            (C13796 * C835 + C139586 * C1124 + C13795 * C830 + C13593 * C1120) *
                C5308 -
            (C13796 * C944 + C139586 * C1238 + C13795 * C943 + C13593 * C1237) *
                C139377) *
               C139457 * C139575) *
              C5227) *
         C139339) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C831 + C139586 * C1118) *
                C5307 +
            (C13795 * C182 + C13593 * C394 + C13796 * C939 + C139586 * C1231) *
                C5228 -
            (C13796 * C832 + C139586 * C1121 + C13795 * C831 + C13593 * C1118) *
                C5308 -
            (C13796 * C940 + C139586 * C1232 + C13795 * C939 + C13593 * C1231) *
                C139377) *
               C139457 * C13591 +
           ((C13823 + C13822) * C5307 + (C13912 + C13913) * C5228 -
            (C14711 + C14710) * C5308 - (C14824 + C14825) * C139377) *
               C139457 * C139575) *
              C139300 * C1761 +
          (((C13795 * C4223 + C13593 * C4549 + C13796 * C8754 +
             C139586 * C9000) *
                C5308 -
            ((C13796 * C4337 + C139586 * C4667 + C13795 * C1873 +
              C13593 * C2170) *
                 C5228 +
             (C13796 * C4223 + C139586 * C4549 + C13795 * C1767 +
              C13593 * C2054) *
                 C5307) +
            (C13795 * C4337 + C13593 * C4667 + C13796 * C8840 +
             C139586 * C9078) *
                C139377) *
               C139457 * C13591 +
           ((C18688 + C18687) * C5308 -
            ((C15823 + C15822) * C5228 + (C15709 + C15708) * C5307) +
            (C18825 + C18826) * C139377) *
               C139457 * C139575) *
              C139300 * C1762 +
          (((C13795 * C1768 + C13593 * C2057 + C13796 * C6442 +
             C139586 * C6688) *
                C5307 +
            (C13795 * C1874 + C13593 * C2171 + C13796 * C6528 +
             C139586 * C6766) *
                C5228 -
            (C13796 * C21079 + C139586 * C21413 + C13795 * C6442 +
             C13593 * C6688) *
                C5308 -
            (C13796 * C21197 + C139586 * C21514 + C13795 * C6528 +
             C13593 * C6766) *
                C139377) *
               C139457 * C13591 +
           ((C15713 + C15712) * C5307 + (C15824 + C15825) * C5228 -
            (C13796 * C21078 + C139586 * C21412 + C13795 * C6441 +
             C13593 * C6687) *
                C5308 -
            (C13796 * C21196 + C139586 * C21515 + C13795 * C6527 +
             C13593 * C6767) *
                C139377) *
               C139457 * C139575) *
              C139300 * C1763)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[22] +=
        (-std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C831 + C139586 * C1118) *
                C244 +
            (C13795 * C245 + C13593 * C474 + C13796 * C1029 + C139586 * C1339) *
                C139339) *
               C139457 * C13591 +
           ((C13823 + C13822) * C244 + (C13996 + C13997) * C139339) * C139457 *
               C139575) *
              C5909 -
          (((C14934 + C14935) * C139339 + (C14711 + C14710) * C244) * C139457 *
               C139575 +
           ((C13796 * C1030 + C139586 * C1340 + C13795 * C1029 +
             C13593 * C1339) *
                C139339 +
            (C13796 * C832 + C139586 * C1121 + C13795 * C831 + C13593 * C1118) *
                C244) *
               C139457 * C13591) *
              C5910 +
          (((C13795 * C832 + C13593 * C1121 + C13796 * C5916 +
             C139586 * C6094) *
                C244 +
            (C13795 * C1030 + C13593 * C1340 + C13796 * C6038 +
             C139586 * C6203) *
                C139339) *
               C139457 * C13591 +
           ((C14715 + C14714) * C244 + (C14936 + C14937) * C139339) * C139457 *
               C139575) *
              C5911 -
          (((C13796 * C20532 + C139586 * C20746 + C13795 * C6037 +
             C13593 * C6202) *
                C139339 +
            (C13796 * C20370 + C139586 * C20608 + C13795 * C5915 +
             C13593 * C6093) *
                C244) *
               C139457 * C139575 +
           ((C13796 * C20533 + C139586 * C20747 + C13795 * C6038 +
             C13593 * C6203) *
                C139339 +
            (C13796 * C20371 + C139586 * C20609 + C13795 * C5916 +
             C13593 * C6094) *
                C244) *
               C139457 * C13591) *
              C5912) *
         C139300) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C13795 * C107 + C13593 * C308 + C13796 * C831 + C139586 * C1118) *
                 C244 +
             (C13795 * C245 + C13593 * C474 + C13796 * C1029 +
              C139586 * C1339) *
                 C139339) *
                C139457 * C13591 +
            ((C13823 + C13822) * C244 + (C13996 + C13997) * C139339) * C139457 *
                C139575) *
               C5228 -
           (((C14934 + C14935) * C139339 + (C14711 + C14710) * C244) * C139457 *
                C139575 +
            ((C13796 * C1030 + C139586 * C1340 + C13795 * C1029 +
              C13593 * C1339) *
                 C139339 +
             (C13796 * C832 + C139586 * C1121 + C13795 * C831 +
              C13593 * C1118) *
                 C244) *
                C139457 * C13591) *
               C139377) *
              C5225 +
          ((((C14710 + C14711) * C244 + (C14935 + C14934) * C139339) * C139457 *
                C13591 +
            ((C16677 + C16676) * C244 + (C16886 + C16887) * C139339) * C139457 *
                C139575) *
               C139377 -
           (((C13998 + C13999) * C139339 + (C13827 + C13826) * C244) * C139457 *
                C139575 +
            ((C13997 + C13996) * C139339 + (C13822 + C13823) * C244) * C139457 *
                C13591) *
               C5228) *
              C5226 +
          ((((C13826 + C13827) * C244 + (C13999 + C13998) * C139339) * C139457 *
                C13591 +
            ((C13831 + C13830) * C244 + (C14000 + C14001) * C139339) * C139457 *
                C139575) *
               C5228 -
           (((C13796 * C1034 + C139586 * C1344 + C13795 * C1033 +
              C13593 * C1343) *
                 C139339 +
             (C13796 * C835 + C139586 * C1124 + C13795 * C830 +
              C13593 * C1120) *
                 C244) *
                C139457 * C139575 +
            ((C16887 + C16886) * C139339 + (C16676 + C16677) * C244) * C139457 *
                C13591) *
               C139377) *
              C5227)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C831 + C139586 * C1118) *
                C1960 +
            (C13795 * C245 + C13593 * C474 + C13796 * C1029 + C139586 * C1339) *
                C1761 -
            (C13796 * C4223 + C139586 * C4549 + C13795 * C1767 +
             C13593 * C2054) *
                C1961 -
            (C13796 * C4443 + C139586 * C4783 + C13795 * C1965 +
             C13593 * C2269) *
                C1762 +
            (C13795 * C1768 + C13593 * C2057 + C13796 * C6442 +
             C139586 * C6688) *
                C1962 +
            (C13795 * C1966 + C13593 * C2270 + C13796 * C6608 +
             C139586 * C6843) *
                C1763) *
               C139457 * C13591 +
           ((C13823 + C13822) * C1960 + (C13996 + C13997) * C1761 -
            (C15709 + C15708) * C1961 - (C15932 + C15933) * C1762 +
            (C15713 + C15712) * C1962 + (C15934 + C15935) * C1763) *
               C139457 * C139575) *
              C5228 +
          (((C13795 * C4223 + C13593 * C4549 + C13796 * C8754 +
             C139586 * C9000) *
                C1961 -
            ((C13796 * C1030 + C139586 * C1340 + C13795 * C1029 +
              C13593 * C1339) *
                 C1761 +
             (C13796 * C832 + C139586 * C1121 + C13795 * C831 +
              C13593 * C1118) *
                 C1960) +
            (C13795 * C4443 + C13593 * C4783 + C13796 * C8920 +
             C139586 * C9155) *
                C1762 -
            (C13796 * C21079 + C139586 * C21413 + C13795 * C6442 +
             C13593 * C6688) *
                C1962 -
            (C13796 * C21305 + C139586 * C21614 + C13795 * C6608 +
             C13593 * C6843) *
                C1763) *
               C139457 * C13591 +
           ((C18688 + C18687) * C1961 -
            ((C14934 + C14935) * C1761 + (C14711 + C14710) * C1960) +
            (C18961 + C18962) * C1762 -
            (C13796 * C21078 + C139586 * C21412 + C13795 * C6441 +
             C13593 * C6687) *
                C1962 -
            (C13796 * C21304 + C139586 * C21615 + C13795 * C6607 +
             C13593 * C6844) *
                C1763) *
               C139457 * C139575) *
              C139377) *
         C139300) /
            (p * q * std::sqrt(p + q));
    d2eezx[22] +=
        (-std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139457 * C555) * C5913 +
             (C554 * C116 + C139457 * C561) * C139300) *
                C13591 +
            (C584 * C5913 + C585 * C139300) * C139575) *
               C13593 +
           ((C20819 + C20820) * C13591 + (C20821 + C20822) * C139575) *
               C139586) *
              C139339 * C5909 -
          (((C20823 + C20824) * C139575 + (C20825 + C20826) * C13591) *
               C139586 +
           ((C20822 + C20821) * C139575 + (C20820 + C20819) * C13591) *
               C13593) *
              C139339 * C5910 +
          (((C20826 + C20825) * C13591 + (C20824 + C20823) * C139575) * C13593 +
           ((C20835 + C20836) * C13591 + (C20831 + C20832) * C139575) *
               C139586) *
              C139339 * C5911 -
          ((((C554 * C20372 + C139457 * C20816) * C139300 +
             (C554 * C20370 + C139457 * C20814) * C5913) *
                C139575 +
            ((C554 * C20373 + C139457 * C20817) * C139300 +
             (C554 * C20371 + C139457 * C20815) * C5913) *
                C13591) *
               C139586 +
           ((C20832 + C20831) * C139575 + (C20836 + C20835) * C13591) *
               C13593) *
              C139339 * C5912)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139457 * C555) * C5230 +
             (C554 * C116 + C139457 * C561) * C5225 - C584 * C5231 -
             C585 * C5226 + C586 * C5232 + C587 * C5227) *
                C13591 +
            (C584 * C5230 + C585 * C5225 - C586 * C5231 - C587 * C5226 +
             C588 * C5232 + C589 * C5227) *
                C139575) *
               C13593 +
           ((C20089 + C20090 - C20091 - C20092 + C20093 + C20094) * C13591 +
            (C20095 + C20096 - C20097 - C20098 + C20099 + C20100) * C139575) *
               C139586) *
              C139339 * C5228 +
          (((C20091 - (C20090 + C20089) + C20092 - C20093 - C20094) * C13591 +
            (C20097 - (C20096 + C20095) + C20098 - C20099 - C20100) * C139575) *
               C13593 +
           ((C1476 * C5231 - (C15062 * C5225 + C15063 * C5230) + C1477 * C5226 -
             C1478 * C5232 - C1479 * C5227) *
                C13591 +
            (C1478 * C5231 - (C1477 * C5225 + C1476 * C5230) + C1479 * C5226 -
             (C554 * C835 + C139457 * C1446) * C5232 -
             (C554 * C851 + C139457 * C1454) * C5227) *
                C139575) *
               C139586) *
              C139339 * C139377)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((((C554 * C107 + C139457 * C555) * C5913 +
              (C554 * C116 + C139457 * C561) * C139300) *
                 C13591 +
             (C584 * C5913 + C585 * C139300) * C139575) *
                C13593 +
            ((C20819 + C20820) * C13591 + (C20821 + C20822) * C139575) *
                C139586) *
               C1761 -
           (((C21719 + C21720) * C139575 + (C21721 + C21722) * C13591) *
                C139586 +
            ((C2409 * C139300 + C2408 * C5913) * C139575 +
             ((C554 * C1777 + C139457 * C2383) * C139300 +
              (C554 * C1767 + C139457 * C2376) * C5913) *
                 C13591) *
                C13593) *
               C1762 +
           ((((C554 * C1768 + C139457 * C2379) * C5913 +
              (C554 * C1783 + C139457 * C2387) * C139300) *
                 C13591 +
             (C2412 * C5913 + C2413 * C139300) * C139575) *
                C13593 +
            ((C21731 + C21732) * C13591 + (C21727 + C21728) * C139575) *
                C139586) *
               C1763) *
              C5228 +
          ((((C21722 + C21721) * C13591 + (C21720 + C21719) * C139575) *
                C13593 +
            (((C554 * C8754 + C139457 * C9234) * C5913 +
              (C554 * C8757 + C139457 * C9237) * C139300) *
                 C13591 +
             (C19109 * C5913 + C19110 * C139300) * C139575) *
                C139586) *
               C1762 -
           (((C20823 + C20824) * C139575 + (C20825 + C20826) * C13591) *
                C139586 +
            ((C20822 + C20821) * C139575 + (C20820 + C20819) * C13591) *
                C13593) *
               C1761 -
           ((((C554 * C21080 + C139457 * C21716) * C139300 +
              (C554 * C21078 + C139457 * C21714) * C5913) *
                 C139575 +
             ((C554 * C21081 + C139457 * C21717) * C139300 +
              (C554 * C21079 + C139457 * C21715) * C5913) *
                 C13591) *
                C139586 +
            ((C21728 + C21727) * C139575 + (C21732 + C21731) * C13591) *
                C13593) *
               C1763) *
              C139377)) /
            (p * q * std::sqrt(p + q));
    d2eezy[22] +=
        (-std::pow(Pi, 2.5) *
         ((((C554 * C107 + C139457 * C555) * C5976 +
            (C554 * C182 + C139457 * C641) * C5909 - C15060 * C5977 -
            C15179 * C5910 + C15063 * C5978 + C15180 * C5911 - C20833 * C5979 -
            C20907 * C5912) *
               C13591 +
           (C584 * C5976 + C660 * C5909 - C1472 * C5977 - C1578 * C5910 +
            C1476 * C5978 + C1579 * C5911 - C15064 * C5979 - C15181 * C5912) *
               C139575) *
              C13593 +
          ((C15060 * C5976 + C15179 * C5909 - C15063 * C5977 - C15180 * C5910 +
            C20833 * C5978 + C20907 * C5911 -
            (C554 * C20371 + C139457 * C20815) * C5979 -
            (C554 * C20457 + C139457 * C20902) * C5912) *
               C13591 +
           (C1472 * C5976 + C1578 * C5909 - C1476 * C5977 - C1579 * C5910 +
            C15064 * C5978 + C15181 * C5911 -
            (C554 * C20370 + C139457 * C20814) * C5979 -
            (C554 * C20456 + C139457 * C20903) * C5912) *
               C139575) *
              C139586) *
         C139300 * C139339) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139457 * C555) * C5307 +
             (C554 * C182 + C139457 * C641) * C5228 - C15060 * C5308 -
             C15179 * C139377) *
                C13591 +
            (C5770 + C5771 - C5772 - C5773) * C139575) *
               C13593 +
           ((C15060 * C5307 + C15179 * C5228 - C15063 * C5308 -
             C15180 * C139377) *
                C13591 +
            (C20199 + C20200 - C20201 - C20202) * C139575) *
               C139586) *
              C5225 +
          (((C5772 - (C5771 + C5770) + C5773) * C13591 +
            (C5776 - (C5775 + C5774) + C5777) * C139575) *
               C13593 +
           ((C20201 - (C20200 + C20199) + C20202) * C13591 +
            (C20203 - (C20204 + C20205) + C20206) * C139575) *
               C139586) *
              C5226 +
          ((C5784 * C13591 + (C5780 + C5779 - C5778 - C5781) * C139575) *
               C13593 +
           ((C20205 + C20204 - C20203 - C20206) * C13591 +
            (C3202 * C5307 + C3293 * C5228 -
             (C554 * C835 + C139457 * C1446) * C5308 -
             (C554 * C944 + C139457 * C1560) * C139377) *
                C139575) *
               C139586) *
              C5227) *
         C139339) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139457 * C555) * C5307 +
             (C554 * C182 + C139457 * C641) * C5228 - C15060 * C5308 -
             C15179 * C139377) *
                C13591 +
            (C5770 + C5771 - C5772 - C5773) * C139575) *
               C13593 +
           ((C15060 * C5307 + C15179 * C5228 - C15063 * C5308 -
             C15180 * C139377) *
                C13591 +
            (C20199 + C20200 - C20201 - C20202) * C139575) *
               C139586) *
              C139300 * C1761 +
          (((C19108 * C5308 -
             ((C554 * C1873 + C139457 * C2492) * C5228 +
              (C554 * C1767 + C139457 * C2376) * C5307) +
             C19250 * C139377) *
                C13591 +
            (C8573 - (C8574 + C8575) + C8576) * C139575) *
               C13593 +
           (((C554 * C8754 + C139457 * C9234) * C5308 -
             (C19250 * C5228 + C19108 * C5307) +
             (C554 * C8840 + C139457 * C9312) * C139377) *
                C13591 +
            (C19109 * C5308 - (C5032 * C5228 + C4916 * C5307) +
             C19251 * C139377) *
                C139575) *
               C139586) *
              C139300 * C1762 +
          ((((C554 * C1768 + C139457 * C2379) * C5307 +
             (C554 * C1874 + C139457 * C2493) * C5228 - C21729 * C5308 -
             C21835 * C139377) *
                C13591 +
            (C2412 * C5307 + C2512 * C5228 - C16038 * C5308 -
             C16143 * C139377) *
                C139575) *
               C13593 +
           ((C21729 * C5307 + C21835 * C5228 -
             (C554 * C21079 + C139457 * C21715) * C5308 -
             (C554 * C21197 + C139457 * C21830) * C139377) *
                C13591 +
            (C16038 * C5307 + C16143 * C5228 -
             (C554 * C21078 + C139457 * C21714) * C5308 -
             (C554 * C21196 + C139457 * C21831) * C139377) *
                C139575) *
               C139586) *
              C139300 * C1763)) /
            (p * q * std::sqrt(p + q));
    d2eezz[22] +=
        (-std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139457 * C555) * C244 +
             (C554 * C245 + C139457 * C719) * C139339) *
                C13591 +
            (C726 + C742) * C139575) *
               C13593 +
           ((C15281 + C15297) * C13591 + C15284 * C139575) * C139586) *
              C5909 -
          ((C15285 * C139575 + (C15298 + C15288) * C13591) * C139586 +
           (C15289 * C139575 + (C15297 + C15281) * C13591) * C13593) *
              C5910 +
          (((C15288 + C15298) * C13591 + C15290 * C139575) * C13593 +
           ((C20976 + C20980) * C13591 + (C15291 + C15299) * C139575) *
               C139586) *
              C5911 -
          ((((C554 * C20532 + C139457 * C20973) * C139339 +
             (C554 * C20370 + C139457 * C20814) * C244) *
                C139575 +
            ((C554 * C20533 + C139457 * C20974) * C139339 +
             (C554 * C20371 + C139457 * C20815) * C244) *
                C13591) *
               C139586 +
           ((C15299 + C15291) * C139575 + (C20980 + C20976) * C13591) *
               C13593) *
              C5912) *
         C139300) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((((C554 * C107 + C139457 * C555) * C244 +
              (C554 * C245 + C139457 * C719) * C139339) *
                 C13591 +
             (C726 + C742) * C139575) *
                C13593 +
            ((C15281 + C15297) * C13591 + C15284 * C139575) * C139586) *
               C5228 -
           ((C15285 * C139575 + (C15298 + C15288) * C13591) * C139586 +
            (C15289 * C139575 + (C15297 + C15281) * C13591) * C13593) *
               C139377) *
              C5225 +
          (((C15284 * C13591 + C17202 * C139575) * C13593 +
            (C15290 * C13591 + (C1677 + C1687) * C139575) * C139586) *
               C139377 -
           ((C3372 * C139575 + C15289 * C13591) * C139586 +
            ((C743 + C729) * C139575 + (C742 + C726) * C13591) * C13593) *
               C5228) *
              C5226 +
          (((C746 * C13591 + (C734 + C744) * C139575) * C13593 +
            (C17202 * C13591 + (C3373 + C3377) * C139575) * C139586) *
               C5228 -
           ((((C554 * C1034 + C139457 * C1666) * C139339 +
              (C554 * C835 + C139457 * C1446) * C244) *
                 C139575 +
             (C1687 + C1677) * C13591) *
                C139586 +
            ((C3377 + C3373) * C139575 + C3372 * C13591) * C13593) *
               C139377) *
              C5227)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139457 * C555) * C1960 +
             (C554 * C245 + C139457 * C719) * C1761 -
             (C554 * C1767 + C139457 * C2376) * C1961 -
             (C554 * C1965 + C139457 * C2591) * C1762 +
             (C554 * C1768 + C139457 * C2379) * C1962 +
             (C554 * C1966 + C139457 * C2592) * C1763) *
                C13591 +
            (C2600 + C2601 - C2602 - C2620 + C2605 + C2621) * C139575) *
               C13593 +
           ((C21936 + C21937 - C21938 - C21939 + C21940 + C21944) * C13591 +
            (C16243 + C16244 - C16245 - C16246 + C16247 + C16251) * C139575) *
               C139586) *
              C5228 +
          (((C21938 - (C21937 + C21936) + C21939 - C21940 - C21944) * C13591 +
            (C16245 - (C16244 + C16243) + C16246 - C16247 - C16251) * C139575) *
               C13593 +
           (((C554 * C8754 + C139457 * C9234) * C1961 -
             (C15295 * C1761 + C15063 * C1960) +
             (C554 * C8920 + C139457 * C9389) * C1762 -
             (C554 * C21079 + C139457 * C21715) * C1962 -
             (C554 * C21305 + C139457 * C21933) * C1763) *
                C13591 +
            (C19109 * C1961 - (C1682 * C1761 + C1476 * C1960) + C19398 * C1762 -
             (C554 * C21078 + C139457 * C21714) * C1962 -
             (C554 * C21304 + C139457 * C21934) * C1763) *
                C139575) *
               C139586) *
              C139377) *
         C139300) /
            (p * q * std::sqrt(p + q));
    d2eexx[23] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139575 * C114) *
                 C137108 +
             (C13595 * C116 + C13591 * C125 + C13596 * C117 + C139575 * C126) *
                 C139552 -
             (C13596 * C109 + C139575 * C115 + C13595 * C108 + C13591 * C114) *
                 C137101 -
             (C13596 * C118 + C139575 * C127 + C13595 * C117 + C13591 * C126) *
                 C139305) *
                C13593 +
            ((C14336 + C14337) * C137108 + (C14338 + C14339) * C139552 -
             (C14340 + C14341) * C137101 - (C14342 + C14343) * C139305) *
                C139586) *
               C139457 * C139561 +
           (((C13595 * C1764 + C13591 * C1772 + C13596 * C1765 +
              C139575 * C1773) *
                 C137101 -
             ((C13596 * C1776 + C139575 * C1789 + C13595 * C1777 +
               C13591 * C1790) *
                  C139552 +
              (C13596 * C1764 + C139575 * C1772 + C13595 * C1767 +
               C13591 * C1778) *
                  C137108) +
             (C13595 * C1776 + C13591 * C1789 + C13596 * C1775 +
              C139575 * C1788) *
                 C139305) *
                C13593 +
            ((C18257 + C18258) * C137101 -
             ((C18259 + C18260) * C139552 + (C18261 + C18262) * C137108) +
             (C18263 + C18264) * C139305) *
                C139586) *
               C139457 * C139403) *
              C5228 +
          ((((C14341 + C14340) * C137101 -
             ((C14339 + C14338) * C139552 + (C14337 + C14336) * C137108) +
             (C14343 + C14342) * C139305) *
                C13593 +
            ((C14344 + C14345) * C137101 -
             ((C14346 + C14347) * C139552 + (C14348 + C14349) * C137108) +
             (C14350 + C14351) * C139305) *
                C139586) *
               C139457 * C139561 +
           (((C18262 + C18261) * C137108 + (C18260 + C18259) * C139552 -
             (C18258 + C18257) * C137101 - (C18264 + C18263) * C139305) *
                C13593 +
            ((C13595 * C8754 + C13591 * C8760 + C13596 * C8753 +
              C139575 * C8759) *
                 C137108 +
             (C13595 * C8757 + C13591 * C8763 + C13596 * C8756 +
              C139575 * C8762) *
                 C139552 -
             (C13596 * C8752 + C139575 * C8758 + C13595 * C8753 +
              C13591 * C8759) *
                 C137101 -
             (C13596 * C8755 + C139575 * C8761 + C13595 * C8756 +
              C13591 * C8762) *
                 C139305) *
                C139586) *
               C139457 * C139403) *
              C139377)) /
        (p * q * std::sqrt(p + q));
    d2eexy[23] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139575 * C114) *
                 C5307 +
             (C13595 * C182 + C13591 * C188 + C13596 * C183 + C139575 * C189) *
                 C5228 -
             (C14337 + C14336) * C5308 - (C14466 + C14467) * C139377) *
                C13593 +
            ((C14336 + C14337) * C5307 + (C14467 + C14466) * C5228 -
             (C14348 + C14349) * C5308 - (C14469 + C14468) * C139377) *
                C139586) *
               C139457 * C139552 +
           (((C14341 + C14340) * C5308 -
             ((C13596 * C184 + C139575 * C190 + C13595 * C183 + C13591 * C189) *
                  C5228 +
              (C13596 * C109 + C139575 * C115 + C13595 * C108 + C13591 * C114) *
                  C5307) +
             (C14470 + C14471) * C139377) *
                C13593 +
            ((C14344 + C14345) * C5308 -
             ((C14471 + C14470) * C5228 + (C14340 + C14341) * C5307) +
             (C14473 + C14472) * C139377) *
                C139586) *
               C139457 * C139305) *
              C139561 +
          ((((C18262 + C18261) * C5308 -
             ((C13596 * C1870 + C139575 * C1878 + C13595 * C1873 +
               C13591 * C1881) *
                  C5228 +
              (C13596 * C1764 + C139575 * C1772 + C13595 * C1767 +
               C13591 * C1778) *
                  C5307) +
             (C18403 + C18404) * C139377) *
                C13593 +
            ((C13595 * C8754 + C13591 * C8760 + C13596 * C8753 +
              C139575 * C8759) *
                 C5308 -
             ((C18404 + C18403) * C5228 + (C18261 + C18262) * C5307) +
             (C13595 * C8840 + C13591 * C8843 + C13596 * C8839 +
              C139575 * C8842) *
                 C139377) *
                C139586) *
               C139457 * C139552 +
           (((C13595 * C1764 + C13591 * C1772 + C13596 * C1765 +
              C139575 * C1773) *
                 C5307 +
             (C13595 * C1870 + C13591 * C1878 + C13596 * C1871 +
              C139575 * C1879) *
                 C5228 -
             (C18258 + C18257) * C5308 - (C18405 + C18406) * C139377) *
                C13593 +
            ((C18257 + C18258) * C5307 + (C18406 + C18405) * C5228 -
             (C13596 * C8752 + C139575 * C8758 + C13595 * C8753 +
              C13591 * C8759) *
                 C5308 -
             (C13596 * C8838 + C139575 * C8841 + C13595 * C8839 +
              C13591 * C8842) *
                 C139377) *
                C139586) *
               C139457 * C139305) *
              C139403)) /
        (p * q * std::sqrt(p + q));
    d2eexz[23] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139575 * C114) *
                 C3607 +
             (C13595 * C245 + C13591 * C251 + C13596 * C246 + C139575 * C252) *
                 C139561 -
             (C13596 * C1764 + C139575 * C1772 + C13595 * C1767 +
              C13591 * C1778) *
                 C3608 -
             (C13596 * C1964 + C139575 * C1972 + C13595 * C1965 +
              C13591 * C1973) *
                 C139403) *
                C13593 +
            ((C14336 + C14337) * C3607 + (C14588 + C14589) * C139561 -
             (C18261 + C18262) * C3608 - (C18545 + C18546) * C139403) *
                C139586) *
               C139457 * C5228 +
           (((C18262 + C18261) * C3608 -
             ((C14589 + C14588) * C139561 + (C14337 + C14336) * C3607) +
             (C18546 + C18545) * C139403) *
                C13593 +
            ((C13595 * C8754 + C13591 * C8760 + C13596 * C8753 +
              C139575 * C8759) *
                 C3608 -
             ((C14590 + C14591) * C139561 + (C14348 + C14349) * C3607) +
             (C13595 * C8920 + C13591 * C8923 + C13596 * C8919 +
              C139575 * C8922) *
                 C139403) *
                C139586) *
               C139457 * C139377) *
              C139552 +
          ((((C13595 * C1764 + C13591 * C1772 + C13596 * C1765 +
              C139575 * C1773) *
                 C3608 -
             ((C13596 * C247 + C139575 * C253 + C13595 * C246 + C13591 * C252) *
                  C139561 +
              (C13596 * C109 + C139575 * C115 + C13595 * C108 + C13591 * C114) *
                  C3607) +
             (C13595 * C1964 + C13591 * C1972 + C13596 * C1963 +
              C139575 * C1971) *
                 C139403) *
                C13593 +
            ((C18257 + C18258) * C3608 -
             ((C14593 + C14592) * C139561 + (C14340 + C14341) * C3607) +
             (C18547 + C18548) * C139403) *
                C139586) *
               C139457 * C5228 +
           (((C14341 + C14340) * C3607 + (C14592 + C14593) * C139561 -
             (C18258 + C18257) * C3608 - (C18548 + C18547) * C139403) *
                C13593 +
            ((C14344 + C14345) * C3607 + (C14594 + C14595) * C139561 -
             (C13596 * C8752 + C139575 * C8758 + C13595 * C8753 +
              C13591 * C8759) *
                 C3608 -
             (C13596 * C8918 + C139575 * C8921 + C13595 * C8919 +
              C13591 * C8922) *
                 C139403) *
                C139586) *
               C139457 * C139377) *
              C139305)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[23] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13795 * C107 + C13593 * C308 + C13796 * C831 + C139586 * C1118) *
                 C137108 +
             (C13795 * C116 + C13593 * C314 + C13796 * C841 + C139586 * C1125) *
                 C139552 -
             (C13822 + C13823) * C137101 - (C13824 + C13825) * C139305) *
                C139457 * C13591 +
            ((C13823 + C13822) * C137108 + (C13825 + C13824) * C139552 -
             (C13827 + C13826) * C137101 - (C13829 + C13828) * C139305) *
                C139457 * C139575) *
               C139561 +
           (((C15708 + C15709) * C137101 -
             ((C13796 * C4230 + C139586 * C4553 + C13795 * C1777 +
               C13593 * C2061) *
                  C139552 +
              (C13796 * C4223 + C139586 * C4549 + C13795 * C1767 +
               C13593 * C2054) *
                  C137108) +
             (C15710 + C15711) * C139305) *
                C139457 * C13591 +
            ((C17604 + C17603) * C137101 -
             ((C15711 + C15710) * C139552 + (C15709 + C15708) * C137108) +
             (C17606 + C17605) * C139305) *
                C139457 * C139575) *
               C139403) *
              C5228 +
          ((((C14710 + C14711) * C137101 -
             ((C13796 * C847 + C139586 * C1129 + C13795 * C841 +
               C13593 * C1125) *
                  C139552 +
              (C13796 * C832 + C139586 * C1121 + C13795 * C831 +
               C13593 * C1118) *
                  C137108) +
             (C14712 + C14713) * C139305) *
                C139457 * C13591 +
            ((C16677 + C16676) * C137101 -
             ((C14713 + C14712) * C139552 + (C14711 + C14710) * C137108) +
             (C16679 + C16678) * C139305) *
                C139457 * C139575) *
               C139561 +
           (((C13795 * C4223 + C13593 * C4549 + C13796 * C8754 +
              C139586 * C9000) *
                 C137108 +
             (C13795 * C4230 + C13593 * C4553 + C13796 * C8757 +
              C139586 * C9003) *
                 C139552 -
             (C18687 + C18688) * C137101 - (C18689 + C18690) * C139305) *
                C139457 * C13591 +
            ((C18688 + C18687) * C137108 + (C18690 + C18689) * C139552 -
             (C13796 * C8752 + C139586 * C8998 + C13795 * C4225 +
              C13593 * C4551) *
                 C137101 -
             (C13796 * C8755 + C139586 * C9001 + C13795 * C4232 +
              C13593 * C4555) *
                 C139305) *
                C139457 * C139575) *
               C139403) *
              C139377)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[23] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13795 * C107 + C13593 * C308 + C13796 * C831 + C139586 * C1118) *
                 C5307 +
             (C13795 * C182 + C13593 * C394 + C13796 * C939 + C139586 * C1231) *
                 C5228 -
             (C13796 * C832 + C139586 * C1121 + C13795 * C831 +
              C13593 * C1118) *
                 C5308 -
             (C13796 * C940 + C139586 * C1232 + C13795 * C939 +
              C13593 * C1231) *
                 C139377) *
                C139457 * C13591 +
            ((C13823 + C13822) * C5307 + (C13912 + C13913) * C5228 -
             (C14711 + C14710) * C5308 - (C14824 + C14825) * C139377) *
                C139457 * C139575) *
               C139552 +
           (((C14710 + C14711) * C5308 -
             ((C13913 + C13912) * C5228 + (C13822 + C13823) * C5307) +
             (C14825 + C14824) * C139377) *
                C139457 * C13591 +
            ((C16677 + C16676) * C5308 -
             ((C13914 + C13915) * C5228 + (C13827 + C13826) * C5307) +
             (C16782 + C16783) * C139377) *
                C139457 * C139575) *
               C139305) *
              C139561 +
          ((((C13795 * C4223 + C13593 * C4549 + C13796 * C8754 +
              C139586 * C9000) *
                 C5308 -
             ((C13796 * C4337 + C139586 * C4667 + C13795 * C1873 +
               C13593 * C2170) *
                  C5228 +
              (C13796 * C4223 + C139586 * C4549 + C13795 * C1767 +
               C13593 * C2054) *
                  C5307) +
             (C13795 * C4337 + C13593 * C4667 + C13796 * C8840 +
              C139586 * C9078) *
                 C139377) *
                C139457 * C13591 +
            ((C18688 + C18687) * C5308 -
             ((C15823 + C15822) * C5228 + (C15709 + C15708) * C5307) +
             (C18825 + C18826) * C139377) *
                C139457 * C139575) *
               C139552 +
           (((C15708 + C15709) * C5307 + (C15822 + C15823) * C5228 -
             (C18687 + C18688) * C5308 - (C18826 + C18825) * C139377) *
                C139457 * C13591 +
            ((C17604 + C17603) * C5307 + (C17709 + C17710) * C5228 -
             (C13796 * C8752 + C139586 * C8998 + C13795 * C4225 +
              C13593 * C4551) *
                 C5308 -
             (C13796 * C8838 + C139586 * C9080 + C13795 * C4339 +
              C13593 * C4669) *
                 C139377) *
                C139457 * C139575) *
               C139305) *
              C139403)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[23] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13795 * C107 + C13593 * C308 + C13796 * C831 + C139586 * C1118) *
                 C3607 +
             (C13795 * C245 + C13593 * C474 + C13796 * C1029 +
              C139586 * C1339) *
                 C139561 -
             (C13796 * C4223 + C139586 * C4549 + C13795 * C1767 +
              C13593 * C2054) *
                 C3608 -
             (C13796 * C4443 + C139586 * C4783 + C13795 * C1965 +
              C13593 * C2269) *
                 C139403) *
                C139457 * C13591 +
            ((C13823 + C13822) * C3607 + (C13996 + C13997) * C139561 -
             (C15709 + C15708) * C3608 - (C15932 + C15933) * C139403) *
                C139457 * C139575) *
               C5228 +
           (((C13795 * C4223 + C13593 * C4549 + C13796 * C8754 +
              C139586 * C9000) *
                 C3608 -
             ((C13796 * C1030 + C139586 * C1340 + C13795 * C1029 +
               C13593 * C1339) *
                  C139561 +
              (C13796 * C832 + C139586 * C1121 + C13795 * C831 +
               C13593 * C1118) *
                  C3607) +
             (C13795 * C4443 + C13593 * C4783 + C13796 * C8920 +
              C139586 * C9155) *
                 C139403) *
                C139457 * C13591 +
            ((C18688 + C18687) * C3608 -
             ((C14934 + C14935) * C139561 + (C14711 + C14710) * C3607) +
             (C18961 + C18962) * C139403) *
                C139457 * C139575) *
               C139377) *
              C139552 +
          ((((C15708 + C15709) * C3608 -
             ((C13997 + C13996) * C139561 + (C13822 + C13823) * C3607) +
             (C15933 + C15932) * C139403) *
                C139457 * C13591 +
            ((C17604 + C17603) * C3608 -
             ((C13998 + C13999) * C139561 + (C13827 + C13826) * C3607) +
             (C17813 + C17814) * C139403) *
                C139457 * C139575) *
               C5228 +
           (((C14710 + C14711) * C3607 + (C14935 + C14934) * C139561 -
             (C18687 + C18688) * C3608 - (C18962 + C18961) * C139403) *
                C139457 * C13591 +
            ((C16677 + C16676) * C3607 + (C16886 + C16887) * C139561 -
             (C13796 * C8752 + C139586 * C8998 + C13795 * C4225 +
              C13593 * C4551) *
                 C3608 -
             (C13796 * C8918 + C139586 * C9157 + C13795 * C4445 +
              C13593 * C4785) *
                 C139403) *
                C139457 * C139575) *
               C139377) *
              C139305)) /
        (p * q * std::sqrt(p + q));
    d2eezx[23] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((((C554 * C107 + C139457 * C555) * C137108 +
                        (C554 * C116 + C139457 * C561) * C139552 -
                        C584 * C137101 - C585 * C139305) *
                           C13591 +
                       (C584 * C137108 + C585 * C139552 - C586 * C137101 -
                        C587 * C139305) *
                           C139575) *
                          C13593 +
                      ((C22631 + C22632 - C22633 - C22634) * C13591 +
                       (C22635 + C22636 - C22637 - C22638) * C139575) *
                          C139586) *
                         C139561 +
                     (((C2408 * C137101 -
                        ((C554 * C1777 + C139457 * C2383) * C139552 +
                         (C554 * C1767 + C139457 * C2376) * C137108) +
                        C2409 * C139305) *
                           C13591 +
                       (C2410 * C137101 - (C2409 * C139552 + C2408 * C137108) +
                        C2411 * C139305) *
                           C139575) *
                          C13593 +
                      ((C23759 - (C23760 + C23761) + C23762) * C13591 +
                       (C23763 - (C23764 + C23765) + C23766) * C139575) *
                          C139586) *
                         C139403) *
                        C5228 +
                    ((((C22633 - (C22632 + C22631) + C22634) * C13591 +
                       (C22637 - (C22636 + C22635) + C22638) * C139575) *
                          C13593 +
                      ((C22639 - (C22640 + C22641) + C22642) * C13591 +
                       (C22643 - (C22644 + C22645) + C22646) * C139575) *
                          C139586) *
                         C139561 +
                     (((C23761 + C23760 - C23759 - C23762) * C13591 +
                       (C23765 + C23764 - C23763 - C23766) * C139575) *
                          C13593 +
                      (((C554 * C8754 + C139457 * C9234) * C137108 +
                        (C554 * C8757 + C139457 * C9237) * C139552 -
                        C19109 * C137101 - C19110 * C139305) *
                           C13591 +
                       (C19109 * C137108 + C19110 * C139552 -
                        (C554 * C8752 + C139457 * C9232) * C137101 -
                        (C554 * C8755 + C139457 * C9235) * C139305) *
                           C139575) *
                          C139586) *
                         C139403) *
                        C139377)) /
                  (p * q * std::sqrt(p + q));
    d2eezy[23] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((((C554 * C107 + C139457 * C555) * C5307 +
                        (C554 * C182 + C139457 * C641) * C5228 -
                        C15060 * C5308 - C15179 * C139377) *
                           C13591 +
                       (C5770 + C5771 - C5772 - C5773) * C139575) *
                          C13593 +
                      ((C15060 * C5307 + C15179 * C5228 - C15063 * C5308 -
                        C15180 * C139377) *
                           C13591 +
                       (C20199 + C20200 - C20201 - C20202) * C139575) *
                          C139586) *
                         C139552 +
                     (((C5772 - (C5771 + C5770) + C5773) * C13591 +
                       (C5776 - (C5775 + C5774) + C5777) * C139575) *
                          C13593 +
                      ((C20201 - (C20200 + C20199) + C20202) * C13591 +
                       (C20203 - (C20204 + C20205) + C20206) * C139575) *
                          C139586) *
                         C139305) *
                        C139561 +
                    ((((C19108 * C5308 -
                        ((C554 * C1873 + C139457 * C2492) * C5228 +
                         (C554 * C1767 + C139457 * C2376) * C5307) +
                        C19250 * C139377) *
                           C13591 +
                       (C8573 - (C8574 + C8575) + C8576) * C139575) *
                          C13593 +
                      (((C554 * C8754 + C139457 * C9234) * C5308 -
                        (C19250 * C5228 + C19108 * C5307) +
                        (C554 * C8840 + C139457 * C9312) * C139377) *
                           C13591 +
                       (C23897 - (C23898 + C23899) + C23900) * C139575) *
                          C139586) *
                         C139552 +
                     (((C8575 + C8574 - C8573 - C8576) * C13591 +
                       (C8579 + C8578 - C8577 - C8580) * C139575) *
                          C13593 +
                      ((C23899 + C23898 - C23897 - C23900) * C13591 +
                       (C4918 * C5307 + C5033 * C5228 -
                        (C554 * C8752 + C139457 * C9232) * C5308 -
                        (C554 * C8838 + C139457 * C9314) * C139377) *
                           C139575) *
                          C139586) *
                         C139305) *
                        C139403)) /
                  (p * q * std::sqrt(p + q));
    d2eezz[23] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C554 * C107 + C139457 * C555) * C3607 +
              (C554 * C245 + C139457 * C719) * C139561 -
              (C554 * C1767 + C139457 * C2376) * C3608 -
              (C554 * C1965 + C139457 * C2591) * C139403) *
                 C13591 +
             (C4108 + C4109 - C4110 - C4111) * C139575) *
                C13593 +
            ((C19383 + C19384 - C19385 - C19399) * C13591 + C19400 * C139575) *
                C139586) *
               C5228 +
           (((C19385 - (C19384 + C19383) + C19399) * C13591 +
             C19401 * C139575) *
                C13593 +
            (((C554 * C8754 + C139457 * C9234) * C3608 -
              (C15295 * C139561 + C15063 * C3607) +
              (C554 * C8920 + C139457 * C9389) * C139403) *
                 C13591 +
             (C19390 - (C19391 + C19392) + C19402) * C139575) *
                C139586) *
               C139377) *
              C139552 +
          ((((C4110 - (C4109 + C4108) + C4111) * C13591 +
             (C4114 - (C4113 + C4112) + C4115) * C139575) *
                C13593 +
            (C19401 * C13591 + (C5143 - (C5144 + C5145) + C5151) * C139575) *
                C139586) *
               C5228 +
           ((C19400 * C13591 + (C5145 + C5144 - C5143 - C5151) * C139575) *
                C13593 +
            ((C19392 + C19391 - C19390 - C19402) * C13591 +
             (C1478 * C3607 + C1683 * C139561 -
              (C554 * C8752 + C139457 * C9232) * C3608 -
              (C554 * C8918 + C139457 * C9391) * C139403) *
                 C139575) *
                C139586) *
               C139377) *
              C139305)) /
        (p * q * std::sqrt(p + q));
    d2eexx[24] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139575 * C114) *
                C5230 +
            (C13595 * C116 + C13591 * C125 + C13596 * C117 + C139575 * C126) *
                C5225 -
            (C13596 * C109 + C139575 * C115 + C13595 * C108 + C13591 * C114) *
                C5231 -
            (C13596 * C118 + C139575 * C127 + C13595 * C117 + C13591 * C126) *
                C5226 +
            (C13595 * C109 + C13591 * C115 + C13596 * C110 + C139575 * C119) *
                C5232 +
            (C13595 * C118 + C13591 * C127 + C13596 * C120 + C139575 * C128) *
                C5227) *
               C13593 +
           ((C14336 + C14337) * C5230 + (C14338 + C14339) * C5225 -
            (C14340 + C14341) * C5231 - (C14342 + C14343) * C5226 +
            (C16358 + C16359) * C5232 + (C16360 + C16361) * C5227) *
               C139586) *
              C139457 * C139339 * C5228 +
          (((C14341 + C14340) * C5231 -
            ((C14339 + C14338) * C5225 + (C14337 + C14336) * C5230) +
            (C14343 + C14342) * C5226 - (C16359 + C16358) * C5232 -
            (C16361 + C16360) * C5227) *
               C13593 +
           ((C14344 + C14345) * C5231 -
            ((C14346 + C14347) * C5225 + (C14348 + C14349) * C5230) +
            (C14350 + C14351) * C5226 -
            (C13596 * C835 + C139575 * C850 + C13595 * C834 + C13591 * C846) *
                C5232 -
            (C13596 * C851 + C139575 * C859 + C13595 * C849 + C13591 * C858) *
                C5227) *
               C139586) *
              C139457 * C139339 * C139377)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139575 * C114) *
                C5913 +
            (C13595 * C116 + C13591 * C125 + C13596 * C117 + C139575 * C126) *
                C139300) *
               C13593 +
           ((C14336 + C14337) * C5913 + (C14338 + C14339) * C139300) *
               C139586) *
              C139457 * C139339 * C5909 -
          (((C14346 + C14347) * C139300 + (C14348 + C14349) * C5913) * C139586 +
           ((C14339 + C14338) * C139300 + (C14337 + C14336) * C5913) * C13593) *
              C139457 * C139339 * C5910 +
          (((C14349 + C14348) * C5913 + (C14347 + C14346) * C139300) * C13593 +
           ((C20387 + C20388) * C5913 + (C20389 + C20390) * C139300) *
               C139586) *
              C139457 * C139339 * C5911 -
          (((C13596 * C20372 + C139575 * C20376 + C13595 * C20373 +
             C13591 * C20377) *
                C139300 +
            (C13596 * C20370 + C139575 * C20374 + C13595 * C20371 +
             C13591 * C20375) *
                C5913) *
               C139586 +
           ((C20390 + C20389) * C139300 + (C20388 + C20387) * C5913) * C13593) *
              C139457 * C139339 * C5912)) /
            (p * q * std::sqrt(p + q));
    d2eexy[24] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139575 * C114) *
                C5307 +
            (C13595 * C182 + C13591 * C188 + C13596 * C183 + C139575 * C189) *
                C5228 -
            (C14337 + C14336) * C5308 - (C14466 + C14467) * C139377) *
               C13593 +
           ((C14336 + C14337) * C5307 + (C14467 + C14466) * C5228 -
            (C14348 + C14349) * C5308 - (C14469 + C14468) * C139377) *
               C139586) *
              C139457 * C5225 +
          (((C14341 + C14340) * C5308 -
            ((C13596 * C184 + C139575 * C190 + C13595 * C183 + C13591 * C189) *
                 C5228 +
             (C13596 * C109 + C139575 * C115 + C13595 * C108 + C13591 * C114) *
                 C5307) +
            (C14470 + C14471) * C139377) *
               C13593 +
           ((C14344 + C14345) * C5308 -
            ((C14471 + C14470) * C5228 + (C14340 + C14341) * C5307) +
            (C14473 + C14472) * C139377) *
               C139586) *
              C139457 * C5226 +
          (((C13595 * C109 + C13591 * C115 + C13596 * C110 + C139575 * C119) *
                C5307 +
            (C13595 * C184 + C13591 * C190 + C13596 * C185 + C139575 * C191) *
                C5228 -
            (C16359 + C16358) * C5308 - (C16464 + C16465) * C139377) *
               C13593 +
           ((C16358 + C16359) * C5307 + (C16465 + C16464) * C5228 -
            (C13596 * C835 + C139575 * C850 + C13595 * C834 + C13591 * C846) *
                C5308 -
            (C13596 * C944 + C139575 * C952 + C13595 * C942 + C13591 * C950) *
                C139377) *
               C139586) *
              C139457 * C5227) *
         C139339) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139575 * C114) *
               C5976 +
           (C13595 * C182 + C13591 * C188 + C13596 * C183 + C139575 * C189) *
               C5909 -
           (C14337 + C14336) * C5977 - (C14466 + C14467) * C5910 +
           (C14349 + C14348) * C5978 + (C14468 + C14469) * C5911 -
           (C20388 + C20387) * C5979 - (C20465 + C20466) * C5912) *
              C13593 +
          ((C14336 + C14337) * C5976 + (C14467 + C14466) * C5909 -
           (C14348 + C14349) * C5977 - (C14469 + C14468) * C5910 +
           (C20387 + C20388) * C5978 + (C20466 + C20465) * C5911 -
           (C13596 * C20370 + C139575 * C20374 + C13595 * C20371 +
            C13591 * C20375) *
               C5979 -
           (C13596 * C20456 + C139575 * C20458 + C13595 * C20457 +
            C13591 * C20459) *
               C5912) *
              C139586) *
         C139457 * C139300 * C139339) /
            (p * q * std::sqrt(p + q));
    d2eexz[24] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139575 * C114) *
                 C244 +
             (C13595 * C245 + C13591 * C251 + C13596 * C246 + C139575 * C252) *
                 C139339) *
                C13593 +
            ((C14336 + C14337) * C244 + (C14588 + C14589) * C139339) *
                C139586) *
               C139457 * C5228 -
           (((C14590 + C14591) * C139339 + (C14348 + C14349) * C244) * C139586 +
            ((C14589 + C14588) * C139339 + (C14337 + C14336) * C244) * C13593) *
               C139457 * C139377) *
              C5225 +
          ((((C14341 + C14340) * C244 + (C14592 + C14593) * C139339) * C13593 +
            ((C14344 + C14345) * C244 + (C14594 + C14595) * C139339) *
                C139586) *
               C139457 * C139377 -
           (((C14593 + C14592) * C139339 + (C14340 + C14341) * C244) * C139586 +
            ((C13596 * C247 + C139575 * C253 + C13595 * C246 + C13591 * C252) *
                 C139339 +
             (C13596 * C109 + C139575 * C115 + C13595 * C108 + C13591 * C114) *
                 C244) *
                C13593) *
               C139457 * C5228) *
              C5226 +
          ((((C13595 * C109 + C13591 * C115 + C13596 * C110 + C139575 * C119) *
                 C244 +
             (C13595 * C247 + C13591 * C253 + C13596 * C248 + C139575 * C254) *
                 C139339) *
                C13593 +
            ((C16358 + C16359) * C244 + (C16568 + C16569) * C139339) *
                C139586) *
               C139457 * C5228 -
           (((C13596 * C1034 + C139575 * C1042 + C13595 * C1032 +
              C13591 * C1040) *
                 C139339 +
             (C13596 * C835 + C139575 * C850 + C13595 * C834 + C13591 * C846) *
                 C244) *
                C139586 +
            ((C16569 + C16568) * C139339 + (C16359 + C16358) * C244) * C13593) *
               C139457 * C139377) *
              C5227)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139575 * C114) *
                C244 +
            (C13595 * C245 + C13591 * C251 + C13596 * C246 + C139575 * C252) *
                C139339) *
               C13593 +
           ((C14336 + C14337) * C244 + (C14588 + C14589) * C139339) * C139586) *
              C139457 * C5909 -
          (((C14590 + C14591) * C139339 + (C14348 + C14349) * C244) * C139586 +
           ((C14589 + C14588) * C139339 + (C14337 + C14336) * C244) * C13593) *
              C139457 * C5910 +
          (((C14349 + C14348) * C244 + (C14591 + C14590) * C139339) * C13593 +
           ((C20387 + C20388) * C244 + (C20541 + C20542) * C139339) * C139586) *
              C139457 * C5911 -
          (((C13596 * C20532 + C139575 * C20534 + C13595 * C20533 +
             C13591 * C20535) *
                C139339 +
            (C13596 * C20370 + C139575 * C20374 + C13595 * C20371 +
             C13591 * C20375) *
                C244) *
               C139586 +
           ((C20542 + C20541) * C139339 + (C20388 + C20387) * C244) * C13593) *
              C139457 * C5912) *
         C139300) /
            (p * q * std::sqrt(p + q));
    d2eeyx[24] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C831 + C139586 * C1118) *
                C5230 +
            (C13795 * C116 + C13593 * C314 + C13796 * C841 + C139586 * C1125) *
                C5225 -
            (C13822 + C13823) * C5231 - (C13824 + C13825) * C5226 +
            (C13826 + C13827) * C5232 + (C13828 + C13829) * C5227) *
               C139457 * C13591 +
           ((C13823 + C13822) * C5230 + (C13825 + C13824) * C5225 -
            (C13827 + C13826) * C5231 - (C13829 + C13828) * C5226 +
            (C13831 + C13830) * C5232 + (C13833 + C13832) * C5227) *
               C139457 * C139575) *
              C139339 * C5228 +
          (((C14710 + C14711) * C5231 -
            ((C13796 * C847 + C139586 * C1129 + C13795 * C841 +
              C13593 * C1125) *
                 C5225 +
             (C13796 * C832 + C139586 * C1121 + C13795 * C831 +
              C13593 * C1118) *
                 C5230) +
            (C14712 + C14713) * C5226 - (C16676 + C16677) * C5232 -
            (C16678 + C16679) * C5227) *
               C139457 * C13591 +
           ((C16677 + C16676) * C5231 -
            ((C14713 + C14712) * C5225 + (C14711 + C14710) * C5230) +
            (C16679 + C16678) * C5226 -
            (C13796 * C835 + C139586 * C1124 + C13795 * C830 + C13593 * C1120) *
                C5232 -
            (C13796 * C851 + C139586 * C1132 + C13795 * C843 + C13593 * C1128) *
                C5227) *
               C139457 * C139575) *
              C139339 * C139377)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C831 + C139586 * C1118) *
                C5913 +
            (C13795 * C116 + C13593 * C314 + C13796 * C841 + C139586 * C1125) *
                C139300) *
               C139457 * C13591 +
           ((C13823 + C13822) * C5913 + (C13825 + C13824) * C139300) * C139457 *
               C139575) *
              C139339 * C5909 -
          (((C14713 + C14712) * C139300 + (C14711 + C14710) * C5913) * C139457 *
               C139575 +
           ((C13796 * C847 + C139586 * C1129 + C13795 * C841 + C13593 * C1125) *
                C139300 +
            (C13796 * C832 + C139586 * C1121 + C13795 * C831 + C13593 * C1118) *
                C5913) *
               C139457 * C13591) *
              C139339 * C5910 +
          (((C13795 * C832 + C13593 * C1121 + C13796 * C5916 +
             C139586 * C6094) *
                C5913 +
            (C13795 * C847 + C13593 * C1129 + C13796 * C5919 +
             C139586 * C6097) *
                C139300) *
               C139457 * C13591 +
           ((C14715 + C14714) * C5913 + (C14717 + C14716) * C139300) * C139457 *
               C139575) *
              C139339 * C5911 -
          (((C13796 * C20372 + C139586 * C20610 + C13795 * C5918 +
             C13593 * C6096) *
                C139300 +
            (C13796 * C20370 + C139586 * C20608 + C13795 * C5915 +
             C13593 * C6093) *
                C5913) *
               C139457 * C139575 +
           ((C13796 * C20373 + C139586 * C20611 + C13795 * C5919 +
             C13593 * C6097) *
                C139300 +
            (C13796 * C20371 + C139586 * C20609 + C13795 * C5916 +
             C13593 * C6094) *
                C5913) *
               C139457 * C13591) *
              C139339 * C5912)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[24] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C831 + C139586 * C1118) *
                C5307 +
            (C13795 * C182 + C13593 * C394 + C13796 * C939 + C139586 * C1231) *
                C5228 -
            (C13796 * C832 + C139586 * C1121 + C13795 * C831 + C13593 * C1118) *
                C5308 -
            (C13796 * C940 + C139586 * C1232 + C13795 * C939 + C13593 * C1231) *
                C139377) *
               C139457 * C13591 +
           ((C13823 + C13822) * C5307 + (C13912 + C13913) * C5228 -
            (C14711 + C14710) * C5308 - (C14824 + C14825) * C139377) *
               C139457 * C139575) *
              C5225 +
          (((C14710 + C14711) * C5308 -
            ((C13913 + C13912) * C5228 + (C13822 + C13823) * C5307) +
            (C14825 + C14824) * C139377) *
               C139457 * C13591 +
           ((C16677 + C16676) * C5308 -
            ((C13914 + C13915) * C5228 + (C13827 + C13826) * C5307) +
            (C16782 + C16783) * C139377) *
               C139457 * C139575) *
              C5226 +
          (((C13826 + C13827) * C5307 + (C13915 + C13914) * C5228 -
            (C16676 + C16677) * C5308 - (C16783 + C16782) * C139377) *
               C139457 * C13591 +
           ((C13831 + C13830) * C5307 + (C13916 + C13917) * C5228 -
            (C13796 * C835 + C139586 * C1124 + C13795 * C830 + C13593 * C1120) *
                C5308 -
            (C13796 * C944 + C139586 * C1238 + C13795 * C943 + C13593 * C1237) *
                C139377) *
               C139457 * C139575) *
              C5227) *
         C139339) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C13795 * C107 + C13593 * C308 + C13796 * C831 + C139586 * C1118) *
               C5976 +
           (C13795 * C182 + C13593 * C394 + C13796 * C939 + C139586 * C1231) *
               C5909 -
           (C13796 * C832 + C139586 * C1121 + C13795 * C831 + C13593 * C1118) *
               C5977 -
           (C13796 * C940 + C139586 * C1232 + C13795 * C939 + C13593 * C1231) *
               C5910 +
           (C13795 * C832 + C13593 * C1121 + C13796 * C5916 + C139586 * C6094) *
               C5978 +
           (C13795 * C940 + C13593 * C1232 + C13796 * C5982 + C139586 * C6148) *
               C5911 -
           (C13796 * C20371 + C139586 * C20609 + C13795 * C5916 +
            C13593 * C6094) *
               C5979 -
           (C13796 * C20457 + C139586 * C20678 + C13795 * C5982 +
            C13593 * C6148) *
               C5912) *
              C139457 * C13591 +
          ((C13823 + C13822) * C5976 + (C13912 + C13913) * C5909 -
           (C14711 + C14710) * C5977 - (C14824 + C14825) * C5910 +
           (C14715 + C14714) * C5978 + (C14826 + C14827) * C5911 -
           (C13796 * C20370 + C139586 * C20608 + C13795 * C5915 +
            C13593 * C6093) *
               C5979 -
           (C13796 * C20456 + C139586 * C20679 + C13795 * C5981 +
            C13593 * C6149) *
               C5912) *
              C139457 * C139575) *
         C139300 * C139339) /
            (p * q * std::sqrt(p + q));
    d2eeyz[24] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13795 * C107 + C13593 * C308 + C13796 * C831 + C139586 * C1118) *
                 C244 +
             (C13795 * C245 + C13593 * C474 + C13796 * C1029 +
              C139586 * C1339) *
                 C139339) *
                C139457 * C13591 +
            ((C13823 + C13822) * C244 + (C13996 + C13997) * C139339) * C139457 *
                C139575) *
               C5228 -
           (((C14934 + C14935) * C139339 + (C14711 + C14710) * C244) * C139457 *
                C139575 +
            ((C13796 * C1030 + C139586 * C1340 + C13795 * C1029 +
              C13593 * C1339) *
                 C139339 +
             (C13796 * C832 + C139586 * C1121 + C13795 * C831 +
              C13593 * C1118) *
                 C244) *
                C139457 * C13591) *
               C139377) *
              C5225 +
          ((((C14710 + C14711) * C244 + (C14935 + C14934) * C139339) * C139457 *
                C13591 +
            ((C16677 + C16676) * C244 + (C16886 + C16887) * C139339) * C139457 *
                C139575) *
               C139377 -
           (((C13998 + C13999) * C139339 + (C13827 + C13826) * C244) * C139457 *
                C139575 +
            ((C13997 + C13996) * C139339 + (C13822 + C13823) * C244) * C139457 *
                C13591) *
               C5228) *
              C5226 +
          ((((C13826 + C13827) * C244 + (C13999 + C13998) * C139339) * C139457 *
                C13591 +
            ((C13831 + C13830) * C244 + (C14000 + C14001) * C139339) * C139457 *
                C139575) *
               C5228 -
           (((C13796 * C1034 + C139586 * C1344 + C13795 * C1033 +
              C13593 * C1343) *
                 C139339 +
             (C13796 * C835 + C139586 * C1124 + C13795 * C830 +
              C13593 * C1120) *
                 C244) *
                C139457 * C139575 +
            ((C16887 + C16886) * C139339 + (C16676 + C16677) * C244) * C139457 *
                C13591) *
               C139377) *
              C5227)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C831 + C139586 * C1118) *
                C244 +
            (C13795 * C245 + C13593 * C474 + C13796 * C1029 + C139586 * C1339) *
                C139339) *
               C139457 * C13591 +
           ((C13823 + C13822) * C244 + (C13996 + C13997) * C139339) * C139457 *
               C139575) *
              C5909 -
          (((C14934 + C14935) * C139339 + (C14711 + C14710) * C244) * C139457 *
               C139575 +
           ((C13796 * C1030 + C139586 * C1340 + C13795 * C1029 +
             C13593 * C1339) *
                C139339 +
            (C13796 * C832 + C139586 * C1121 + C13795 * C831 + C13593 * C1118) *
                C244) *
               C139457 * C13591) *
              C5910 +
          (((C13795 * C832 + C13593 * C1121 + C13796 * C5916 +
             C139586 * C6094) *
                C244 +
            (C13795 * C1030 + C13593 * C1340 + C13796 * C6038 +
             C139586 * C6203) *
                C139339) *
               C139457 * C13591 +
           ((C14715 + C14714) * C244 + (C14936 + C14937) * C139339) * C139457 *
               C139575) *
              C5911 -
          (((C13796 * C20532 + C139586 * C20746 + C13795 * C6037 +
             C13593 * C6202) *
                C139339 +
            (C13796 * C20370 + C139586 * C20608 + C13795 * C5915 +
             C13593 * C6093) *
                C244) *
               C139457 * C139575 +
           ((C13796 * C20533 + C139586 * C20747 + C13795 * C6038 +
             C13593 * C6203) *
                C139339 +
            (C13796 * C20371 + C139586 * C20609 + C13795 * C5916 +
             C13593 * C6094) *
                C244) *
               C139457 * C13591) *
              C5912) *
         C139300) /
            (p * q * std::sqrt(p + q));
    d2eezx[24] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139457 * C555) * C5230 +
             (C554 * C116 + C139457 * C561) * C5225 - C584 * C5231 -
             C585 * C5226 + C586 * C5232 + C587 * C5227) *
                C13591 +
            (C584 * C5230 + C585 * C5225 - C586 * C5231 - C587 * C5226 +
             C588 * C5232 + C589 * C5227) *
                C139575) *
               C13593 +
           ((C20089 + C20090 - C20091 - C20092 + C20093 + C20094) * C13591 +
            (C20095 + C20096 - C20097 - C20098 + C20099 + C20100) * C139575) *
               C139586) *
              C139339 * C5228 +
          (((C20091 - (C20090 + C20089) + C20092 - C20093 - C20094) * C13591 +
            (C20097 - (C20096 + C20095) + C20098 - C20099 - C20100) * C139575) *
               C13593 +
           ((C1476 * C5231 - (C15062 * C5225 + C15063 * C5230) + C1477 * C5226 -
             C1478 * C5232 - C1479 * C5227) *
                C13591 +
            (C1478 * C5231 - (C1477 * C5225 + C1476 * C5230) + C1479 * C5226 -
             (C554 * C835 + C139457 * C1446) * C5232 -
             (C554 * C851 + C139457 * C1454) * C5227) *
                C139575) *
               C139586) *
              C139339 * C139377)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139457 * C555) * C5913 +
             (C554 * C116 + C139457 * C561) * C139300) *
                C13591 +
            (C584 * C5913 + C585 * C139300) * C139575) *
               C13593 +
           ((C20819 + C20820) * C13591 + (C20821 + C20822) * C139575) *
               C139586) *
              C139339 * C5909 -
          (((C20823 + C20824) * C139575 + (C20825 + C20826) * C13591) *
               C139586 +
           ((C20822 + C20821) * C139575 + (C20820 + C20819) * C13591) *
               C13593) *
              C139339 * C5910 +
          (((C20826 + C20825) * C13591 + (C20824 + C20823) * C139575) * C13593 +
           ((C20835 + C20836) * C13591 + (C20831 + C20832) * C139575) *
               C139586) *
              C139339 * C5911 -
          ((((C554 * C20372 + C139457 * C20816) * C139300 +
             (C554 * C20370 + C139457 * C20814) * C5913) *
                C139575 +
            ((C554 * C20373 + C139457 * C20817) * C139300 +
             (C554 * C20371 + C139457 * C20815) * C5913) *
                C13591) *
               C139586 +
           ((C20832 + C20831) * C139575 + (C20836 + C20835) * C13591) *
               C13593) *
              C139339 * C5912)) /
            (p * q * std::sqrt(p + q));
    d2eezy[24] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139457 * C555) * C5307 +
             (C554 * C182 + C139457 * C641) * C5228 - C15060 * C5308 -
             C15179 * C139377) *
                C13591 +
            (C5770 + C5771 - C5772 - C5773) * C139575) *
               C13593 +
           ((C15060 * C5307 + C15179 * C5228 - C15063 * C5308 -
             C15180 * C139377) *
                C13591 +
            (C20199 + C20200 - C20201 - C20202) * C139575) *
               C139586) *
              C5225 +
          (((C5772 - (C5771 + C5770) + C5773) * C13591 +
            (C5776 - (C5775 + C5774) + C5777) * C139575) *
               C13593 +
           ((C20201 - (C20200 + C20199) + C20202) * C13591 +
            (C20203 - (C20204 + C20205) + C20206) * C139575) *
               C139586) *
              C5226 +
          ((C5784 * C13591 + (C5780 + C5779 - C5778 - C5781) * C139575) *
               C13593 +
           ((C20205 + C20204 - C20203 - C20206) * C13591 +
            (C3202 * C5307 + C3293 * C5228 -
             (C554 * C835 + C139457 * C1446) * C5308 -
             (C554 * C944 + C139457 * C1560) * C139377) *
                C139575) *
               C139586) *
              C5227) *
         C139339) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C139457 * C555) * C5976 +
            (C554 * C182 + C139457 * C641) * C5909 - C15060 * C5977 -
            C15179 * C5910 + C15063 * C5978 + C15180 * C5911 - C20833 * C5979 -
            C20907 * C5912) *
               C13591 +
           (C584 * C5976 + C660 * C5909 - C1472 * C5977 - C1578 * C5910 +
            C1476 * C5978 + C1579 * C5911 - C15064 * C5979 - C15181 * C5912) *
               C139575) *
              C13593 +
          ((C15060 * C5976 + C15179 * C5909 - C15063 * C5977 - C15180 * C5910 +
            C20833 * C5978 + C20907 * C5911 -
            (C554 * C20371 + C139457 * C20815) * C5979 -
            (C554 * C20457 + C139457 * C20902) * C5912) *
               C13591 +
           (C1472 * C5976 + C1578 * C5909 - C1476 * C5977 - C1579 * C5910 +
            C15064 * C5978 + C15181 * C5911 -
            (C554 * C20370 + C139457 * C20814) * C5979 -
            (C554 * C20456 + C139457 * C20903) * C5912) *
               C139575) *
              C139586) *
         C139300 * C139339) /
            (p * q * std::sqrt(p + q));
    d2eezz[24] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C554 * C107 + C139457 * C555) * C244 +
              (C554 * C245 + C139457 * C719) * C139339) *
                 C13591 +
             (C726 + C742) * C139575) *
                C13593 +
            ((C15281 + C15297) * C13591 + C15284 * C139575) * C139586) *
               C5228 -
           ((C15285 * C139575 + (C15298 + C15288) * C13591) * C139586 +
            (C15289 * C139575 + (C15297 + C15281) * C13591) * C13593) *
               C139377) *
              C5225 +
          (((C15284 * C13591 + C17202 * C139575) * C13593 +
            (C15290 * C13591 + (C1677 + C1687) * C139575) * C139586) *
               C139377 -
           ((C3372 * C139575 + C15289 * C13591) * C139586 +
            ((C743 + C729) * C139575 + (C742 + C726) * C13591) * C13593) *
               C5228) *
              C5226 +
          (((C746 * C13591 + (C734 + C744) * C139575) * C13593 +
            (C17202 * C13591 + (C3373 + C3377) * C139575) * C139586) *
               C5228 -
           ((((C554 * C1034 + C139457 * C1666) * C139339 +
              (C554 * C835 + C139457 * C1446) * C244) *
                 C139575 +
             (C1687 + C1677) * C13591) *
                C139586 +
            ((C3377 + C3373) * C139575 + C3372 * C13591) * C13593) *
               C139377) *
              C5227)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139457 * C555) * C244 +
             (C554 * C245 + C139457 * C719) * C139339) *
                C13591 +
            (C726 + C742) * C139575) *
               C13593 +
           ((C15281 + C15297) * C13591 + C15284 * C139575) * C139586) *
              C5909 -
          ((C15285 * C139575 + (C15298 + C15288) * C13591) * C139586 +
           (C15289 * C139575 + (C15297 + C15281) * C13591) * C13593) *
              C5910 +
          (((C15288 + C15298) * C13591 + C15290 * C139575) * C13593 +
           ((C20976 + C20980) * C13591 + (C15291 + C15299) * C139575) *
               C139586) *
              C5911 -
          ((((C554 * C20532 + C139457 * C20973) * C139339 +
             (C554 * C20370 + C139457 * C20814) * C244) *
                C139575 +
            ((C554 * C20533 + C139457 * C20974) * C139339 +
             (C554 * C20371 + C139457 * C20815) * C244) *
                C13591) *
               C139586 +
           ((C15299 + C15291) * C139575 + (C20980 + C20976) * C13591) *
               C13593) *
              C5912) *
         C139300) /
            (p * q * std::sqrt(p + q));
    d2eexx[25] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139575 * C114) *
                 C137108 +
             (C13595 * C116 + C13591 * C125 + C13596 * C117 + C139575 * C126) *
                 C139552 -
             (C13596 * C109 + C139575 * C115 + C13595 * C108 + C13591 * C114) *
                 C137101 -
             (C13596 * C118 + C139575 * C127 + C13595 * C117 + C13591 * C126) *
                 C139305) *
                C13593 +
            ((C14336 + C14337) * C137108 + (C14338 + C14339) * C139552 -
             (C14340 + C14341) * C137101 - (C14342 + C14343) * C139305) *
                C139586) *
               C139457 * C9466 +
           (((C13595 * C1764 + C13591 * C1772 + C13596 * C1765 +
              C139575 * C1773) *
                 C137101 -
             ((C13596 * C1776 + C139575 * C1789 + C13595 * C1777 +
               C13591 * C1790) *
                  C139552 +
              (C13596 * C1764 + C139575 * C1772 + C13595 * C1767 +
               C13591 * C1778) *
                  C137108) +
             (C13595 * C1776 + C13591 * C1789 + C13596 * C1775 +
              C139575 * C1788) *
                 C139305) *
                C13593 +
            ((C18257 + C18258) * C137101 -
             ((C18259 + C18260) * C139552 + (C18261 + C18262) * C137108) +
             (C18263 + C18264) * C139305) *
                C139586) *
               C139457 * C139403) *
              C139560 +
          ((((C14341 + C14340) * C137101 -
             ((C14339 + C14338) * C139552 + (C14337 + C14336) * C137108) +
             (C14343 + C14342) * C139305) *
                C13593 +
            ((C14344 + C14345) * C137101 -
             ((C14346 + C14347) * C139552 + (C14348 + C14349) * C137108) +
             (C14350 + C14351) * C139305) *
                C139586) *
               C139457 * C9466 +
           (((C18262 + C18261) * C137108 + (C18260 + C18259) * C139552 -
             (C18258 + C18257) * C137101 - (C18264 + C18263) * C139305) *
                C13593 +
            ((C24145 + C24146) * C137108 + (C24147 + C24148) * C139552 -
             (C13596 * C8752 + C139575 * C8758 + C13595 * C8753 +
              C13591 * C8759) *
                 C137101 -
             (C13596 * C8755 + C139575 * C8761 + C13595 * C8756 +
              C13591 * C8762) *
                 C139305) *
                C139586) *
               C139457 * C139403) *
              C139377)) /
        (p * q * std::sqrt(p + q));
    d2eexy[25] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139575 * C114) *
                 C2783 +
             (C13595 * C182 + C13591 * C188 + C13596 * C183 + C139575 * C189) *
                 C139560 -
             (C14337 + C14336) * C2784 - (C14466 + C14467) * C139377) *
                C13593 +
            ((C14336 + C14337) * C2783 + (C14467 + C14466) * C139560 -
             (C14348 + C14349) * C2784 - (C14469 + C14468) * C139377) *
                C139586) *
               C139457 * C139552 +
           (((C14341 + C14340) * C2784 -
             ((C13596 * C184 + C139575 * C190 + C13595 * C183 + C13591 * C189) *
                  C139560 +
              (C13596 * C109 + C139575 * C115 + C13595 * C108 + C13591 * C114) *
                  C2783) +
             (C14470 + C14471) * C139377) *
                C13593 +
            ((C14344 + C14345) * C2784 -
             ((C14471 + C14470) * C139560 + (C14340 + C14341) * C2783) +
             (C14473 + C14472) * C139377) *
                C139586) *
               C139457 * C139305) *
              C9466 +
          ((((C18262 + C18261) * C2784 -
             ((C13596 * C1870 + C139575 * C1878 + C13595 * C1873 +
               C13591 * C1881) *
                  C139560 +
              (C13596 * C1764 + C139575 * C1772 + C13595 * C1767 +
               C13591 * C1778) *
                  C2783) +
             (C18403 + C18404) * C139377) *
                C13593 +
            ((C24145 + C24146) * C2784 -
             ((C18404 + C18403) * C139560 + (C18261 + C18262) * C2783) +
             (C24256 + C24255) * C139377) *
                C139586) *
               C139457 * C139552 +
           (((C13595 * C1764 + C13591 * C1772 + C13596 * C1765 +
              C139575 * C1773) *
                 C2783 +
             (C13595 * C1870 + C13591 * C1878 + C13596 * C1871 +
              C139575 * C1879) *
                 C139560 -
             (C18258 + C18257) * C2784 - (C18405 + C18406) * C139377) *
                C13593 +
            ((C18257 + C18258) * C2783 + (C18406 + C18405) * C139560 -
             (C13596 * C8752 + C139575 * C8758 + C13595 * C8753 +
              C13591 * C8759) *
                 C2784 -
             (C13596 * C8838 + C139575 * C8841 + C13595 * C8839 +
              C13591 * C8842) *
                 C139377) *
                C139586) *
               C139457 * C139305) *
              C139403)) /
        (p * q * std::sqrt(p + q));
    d2eexz[25] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139575 * C114) *
                 C9616 +
             (C13595 * C245 + C13591 * C251 + C13596 * C246 + C139575 * C252) *
                 C9466 -
             (C13596 * C1764 + C139575 * C1772 + C13595 * C1767 +
              C13591 * C1778) *
                 C9617 -
             (C13596 * C1964 + C139575 * C1972 + C13595 * C1965 +
              C13591 * C1973) *
                 C139403) *
                C13593 +
            ((C14336 + C14337) * C9616 + (C14588 + C14589) * C9466 -
             (C18261 + C18262) * C9617 - (C18545 + C18546) * C139403) *
                C139586) *
               C139457 * C139560 +
           (((C18262 + C18261) * C9617 -
             ((C14589 + C14588) * C9466 + (C14337 + C14336) * C9616) +
             (C18546 + C18545) * C139403) *
                C13593 +
            ((C24145 + C24146) * C9617 -
             ((C14590 + C14591) * C9466 + (C14348 + C14349) * C9616) +
             (C24363 + C24364) * C139403) *
                C139586) *
               C139457 * C139377) *
              C139552 +
          ((((C13595 * C1764 + C13591 * C1772 + C13596 * C1765 +
              C139575 * C1773) *
                 C9617 -
             ((C13596 * C247 + C139575 * C253 + C13595 * C246 + C13591 * C252) *
                  C9466 +
              (C13596 * C109 + C139575 * C115 + C13595 * C108 + C13591 * C114) *
                  C9616) +
             (C13595 * C1964 + C13591 * C1972 + C13596 * C1963 +
              C139575 * C1971) *
                 C139403) *
                C13593 +
            ((C18257 + C18258) * C9617 -
             ((C14593 + C14592) * C9466 + (C14340 + C14341) * C9616) +
             (C18547 + C18548) * C139403) *
                C139586) *
               C139457 * C139560 +
           (((C14341 + C14340) * C9616 + (C14592 + C14593) * C9466 -
             (C18258 + C18257) * C9617 - (C18548 + C18547) * C139403) *
                C13593 +
            ((C14344 + C14345) * C9616 + (C14594 + C14595) * C9466 -
             (C13596 * C8752 + C139575 * C8758 + C13595 * C8753 +
              C13591 * C8759) *
                 C9617 -
             (C13596 * C8918 + C139575 * C8921 + C13595 * C8919 +
              C13591 * C8922) *
                 C139403) *
                C139586) *
               C139457 * C139377) *
              C139305)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[25] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13795 * C107 + C13593 * C308 + C13796 * C831 + C139586 * C1118) *
                 C137108 +
             (C13795 * C116 + C13593 * C314 + C13796 * C841 + C139586 * C1125) *
                 C139552 -
             (C13822 + C13823) * C137101 - (C13824 + C13825) * C139305) *
                C139457 * C13591 +
            ((C13823 + C13822) * C137108 + (C13825 + C13824) * C139552 -
             (C13827 + C13826) * C137101 - (C13829 + C13828) * C139305) *
                C139457 * C139575) *
               C9466 +
           (((C15708 + C15709) * C137101 -
             ((C13796 * C4230 + C139586 * C4553 + C13795 * C1777 +
               C13593 * C2061) *
                  C139552 +
              (C13796 * C4223 + C139586 * C4549 + C13795 * C1767 +
               C13593 * C2054) *
                  C137108) +
             (C15710 + C15711) * C139305) *
                C139457 * C13591 +
            ((C17604 + C17603) * C137101 -
             ((C15711 + C15710) * C139552 + (C15709 + C15708) * C137108) +
             (C17606 + C17605) * C139305) *
                C139457 * C139575) *
               C139403) *
              C139560 +
          ((((C14710 + C14711) * C137101 -
             ((C13796 * C847 + C139586 * C1129 + C13795 * C841 +
               C13593 * C1125) *
                  C139552 +
              (C13796 * C832 + C139586 * C1121 + C13795 * C831 +
               C13593 * C1118) *
                  C137108) +
             (C14712 + C14713) * C139305) *
                C139457 * C13591 +
            ((C16677 + C16676) * C137101 -
             ((C14713 + C14712) * C139552 + (C14711 + C14710) * C137108) +
             (C16679 + C16678) * C139305) *
                C139457 * C139575) *
               C9466 +
           (((C13795 * C4223 + C13593 * C4549 + C13796 * C8754 +
              C139586 * C9000) *
                 C137108 +
             (C13795 * C4230 + C13593 * C4553 + C13796 * C8757 +
              C139586 * C9003) *
                 C139552 -
             (C18687 + C18688) * C137101 - (C18689 + C18690) * C139305) *
                C139457 * C13591 +
            ((C18688 + C18687) * C137108 + (C18690 + C18689) * C139552 -
             (C13796 * C8752 + C139586 * C8998 + C13795 * C4225 +
              C13593 * C4551) *
                 C137101 -
             (C13796 * C8755 + C139586 * C9001 + C13795 * C4232 +
              C13593 * C4555) *
                 C139305) *
                C139457 * C139575) *
               C139403) *
              C139377)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[25] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13795 * C107 + C13593 * C308 + C13796 * C831 + C139586 * C1118) *
                 C2783 +
             (C13795 * C182 + C13593 * C394 + C13796 * C939 + C139586 * C1231) *
                 C139560 -
             (C13796 * C832 + C139586 * C1121 + C13795 * C831 +
              C13593 * C1118) *
                 C2784 -
             (C13796 * C940 + C139586 * C1232 + C13795 * C939 +
              C13593 * C1231) *
                 C139377) *
                C139457 * C13591 +
            ((C13823 + C13822) * C2783 + (C13912 + C13913) * C139560 -
             (C14711 + C14710) * C2784 - (C14824 + C14825) * C139377) *
                C139457 * C139575) *
               C139552 +
           (((C14710 + C14711) * C2784 -
             ((C13913 + C13912) * C139560 + (C13822 + C13823) * C2783) +
             (C14825 + C14824) * C139377) *
                C139457 * C13591 +
            ((C16677 + C16676) * C2784 -
             ((C13914 + C13915) * C139560 + (C13827 + C13826) * C2783) +
             (C16782 + C16783) * C139377) *
                C139457 * C139575) *
               C139305) *
              C9466 +
          ((((C13795 * C4223 + C13593 * C4549 + C13796 * C8754 +
              C139586 * C9000) *
                 C2784 -
             ((C13796 * C4337 + C139586 * C4667 + C13795 * C1873 +
               C13593 * C2170) *
                  C139560 +
              (C13796 * C4223 + C139586 * C4549 + C13795 * C1767 +
               C13593 * C2054) *
                  C2783) +
             (C13795 * C4337 + C13593 * C4667 + C13796 * C8840 +
              C139586 * C9078) *
                 C139377) *
                C139457 * C13591 +
            ((C18688 + C18687) * C2784 -
             ((C15823 + C15822) * C139560 + (C15709 + C15708) * C2783) +
             (C18825 + C18826) * C139377) *
                C139457 * C139575) *
               C139552 +
           (((C15708 + C15709) * C2783 + (C15822 + C15823) * C139560 -
             (C18687 + C18688) * C2784 - (C18826 + C18825) * C139377) *
                C139457 * C13591 +
            ((C17604 + C17603) * C2783 + (C17709 + C17710) * C139560 -
             (C13796 * C8752 + C139586 * C8998 + C13795 * C4225 +
              C13593 * C4551) *
                 C2784 -
             (C13796 * C8838 + C139586 * C9080 + C13795 * C4339 +
              C13593 * C4669) *
                 C139377) *
                C139457 * C139575) *
               C139305) *
              C139403)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[25] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13795 * C107 + C13593 * C308 + C13796 * C831 + C139586 * C1118) *
                 C9616 +
             (C13795 * C245 + C13593 * C474 + C13796 * C1029 +
              C139586 * C1339) *
                 C9466 -
             (C13796 * C4223 + C139586 * C4549 + C13795 * C1767 +
              C13593 * C2054) *
                 C9617 -
             (C13796 * C4443 + C139586 * C4783 + C13795 * C1965 +
              C13593 * C2269) *
                 C139403) *
                C139457 * C13591 +
            ((C13823 + C13822) * C9616 + (C13996 + C13997) * C9466 -
             (C15709 + C15708) * C9617 - (C15932 + C15933) * C139403) *
                C139457 * C139575) *
               C139560 +
           (((C13795 * C4223 + C13593 * C4549 + C13796 * C8754 +
              C139586 * C9000) *
                 C9617 -
             ((C13796 * C1030 + C139586 * C1340 + C13795 * C1029 +
               C13593 * C1339) *
                  C9466 +
              (C13796 * C832 + C139586 * C1121 + C13795 * C831 +
               C13593 * C1118) *
                  C9616) +
             (C13795 * C4443 + C13593 * C4783 + C13796 * C8920 +
              C139586 * C9155) *
                 C139403) *
                C139457 * C13591 +
            ((C18688 + C18687) * C9617 -
             ((C14934 + C14935) * C9466 + (C14711 + C14710) * C9616) +
             (C18961 + C18962) * C139403) *
                C139457 * C139575) *
               C139377) *
              C139552 +
          ((((C15708 + C15709) * C9617 -
             ((C13997 + C13996) * C9466 + (C13822 + C13823) * C9616) +
             (C15933 + C15932) * C139403) *
                C139457 * C13591 +
            ((C17604 + C17603) * C9617 -
             ((C13998 + C13999) * C9466 + (C13827 + C13826) * C9616) +
             (C17813 + C17814) * C139403) *
                C139457 * C139575) *
               C139560 +
           (((C14710 + C14711) * C9616 + (C14935 + C14934) * C9466 -
             (C18687 + C18688) * C9617 - (C18962 + C18961) * C139403) *
                C139457 * C13591 +
            ((C16677 + C16676) * C9616 + (C16886 + C16887) * C9466 -
             (C13796 * C8752 + C139586 * C8998 + C13795 * C4225 +
              C13593 * C4551) *
                 C9617 -
             (C13796 * C8918 + C139586 * C9157 + C13795 * C4445 +
              C13593 * C4785) *
                 C139403) *
                C139457 * C139575) *
               C139377) *
              C139305)) /
        (p * q * std::sqrt(p + q));
    d2eezx[25] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((((C554 * C107 + C139457 * C555) * C137108 +
                        (C554 * C116 + C139457 * C561) * C139552 -
                        C584 * C137101 - C585 * C139305) *
                           C13591 +
                       (C584 * C137108 + C585 * C139552 - C586 * C137101 -
                        C587 * C139305) *
                           C139575) *
                          C13593 +
                      ((C22631 + C22632 - C22633 - C22634) * C13591 +
                       (C22635 + C22636 - C22637 - C22638) * C139575) *
                          C139586) *
                         C9466 +
                     (((C2408 * C137101 -
                        ((C554 * C1777 + C139457 * C2383) * C139552 +
                         (C554 * C1767 + C139457 * C2376) * C137108) +
                        C2409 * C139305) *
                           C13591 +
                       (C2410 * C137101 - (C2409 * C139552 + C2408 * C137108) +
                        C2411 * C139305) *
                           C139575) *
                          C13593 +
                      ((C23759 - (C23760 + C23761) + C23762) * C13591 +
                       (C23763 - (C23764 + C23765) + C23766) * C139575) *
                          C139586) *
                         C139403) *
                        C139560 +
                    ((((C22633 - (C22632 + C22631) + C22634) * C13591 +
                       (C22637 - (C22636 + C22635) + C22638) * C139575) *
                          C13593 +
                      ((C22639 - (C22640 + C22641) + C22642) * C13591 +
                       (C22643 - (C22644 + C22645) + C22646) * C139575) *
                          C139586) *
                         C9466 +
                     (((C23761 + C23760 - C23759 - C23762) * C13591 +
                       (C23765 + C23764 - C23763 - C23766) * C139575) *
                          C13593 +
                      ((C24775 * C137108 + C24776 * C139552 - C19109 * C137101 -
                        C19110 * C139305) *
                           C13591 +
                       (C19109 * C137108 + C19110 * C139552 -
                        (C554 * C8752 + C139457 * C9232) * C137101 -
                        (C554 * C8755 + C139457 * C9235) * C139305) *
                           C139575) *
                          C139586) *
                         C139403) *
                        C139377)) /
                  (p * q * std::sqrt(p + q));
    d2eezy[25] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((((C554 * C107 + C139457 * C555) * C2783 +
                        (C554 * C182 + C139457 * C641) * C139560 -
                        C15060 * C2784 - C15179 * C139377) *
                           C13591 +
                       (C3279 + C3280 - C3281 - C3282) * C139575) *
                          C13593 +
                      ((C15060 * C2783 + C15179 * C139560 - C15063 * C2784 -
                        C15180 * C139377) *
                           C13591 +
                       (C17096 + C17097 - C17098 - C17099) * C139575) *
                          C139586) *
                         C139552 +
                     (((C3281 - (C3280 + C3279) + C3282) * C13591 +
                       (C3285 - (C3284 + C3283) + C3286) * C139575) *
                          C13593 +
                      ((C17098 - (C17097 + C17096) + C17099) * C13591 +
                       (C17100 - (C17101 + C17102) + C17103) * C139575) *
                          C139586) *
                         C139305) *
                        C9466 +
                    ((((C19108 * C2784 -
                        ((C554 * C1873 + C139457 * C2492) * C139560 +
                         (C554 * C1767 + C139457 * C2376) * C2783) +
                        C19250 * C139377) *
                           C13591 +
                       (C5022 - (C5023 + C5024) + C5034) * C139575) *
                          C13593 +
                      ((C24775 * C2784 - (C19250 * C139560 + C19108 * C2783) +
                        C24881 * C139377) *
                           C13591 +
                       (C19245 - (C19246 + C19247) + C19252) * C139575) *
                          C139586) *
                         C139552 +
                     (((C5024 + C5023 - C5022 - C5034) * C13591 +
                       (C5029 + C5028 - C5027 - C5035) * C139575) *
                          C13593 +
                      ((C19247 + C19246 - C19245 - C19252) * C13591 +
                       (C4918 * C2783 + C5033 * C139560 -
                        (C554 * C8752 + C139457 * C9232) * C2784 -
                        (C554 * C8838 + C139457 * C9314) * C139377) *
                           C139575) *
                          C139586) *
                         C139305) *
                        C139403)) /
                  (p * q * std::sqrt(p + q));
    d2eezz[25] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C554 * C107 + C139457 * C555) * C9616 +
              (C554 * C245 + C139457 * C719) * C9466 -
              (C554 * C1767 + C139457 * C2376) * C9617 -
              (C554 * C1965 + C139457 * C2591) * C139403) *
                 C13591 +
             (C10079 + C10080 - C10081 - C10082) * C139575) *
                C13593 +
            ((C26753 + C26754 - C26755 - C26756) * C13591 + C28565 * C139575) *
                C139586) *
               C139560 +
           (((C26755 - (C26754 + C26753) + C26756) * C13591 +
             C28566 * C139575) *
                C13593 +
            ((C26757 - (C26758 + C26759) + C26760) * C13591 +
             (C26761 - (C26762 + C26763) + C26764) * C139575) *
                C139586) *
               C139377) *
              C139552 +
          ((((C10081 - (C10080 + C10079) + C10082) * C13591 +
             (C10085 - (C10084 + C10083) + C10086) * C139575) *
                C13593 +
            (C28566 * C13591 +
             (C12160 - (C12161 + C12162) + C12163) * C139575) *
                C139586) *
               C139560 +
           ((C28565 * C13591 + (C12162 + C12161 - C12160 - C12163) * C139575) *
                C13593 +
            ((C26763 + C26762 - C26761 - C26764) * C13591 +
             (C1478 * C9616 + C1683 * C9466 -
              (C554 * C8752 + C139457 * C9232) * C9617 -
              (C554 * C8918 + C139457 * C9391) * C139403) *
                 C139575) *
                C139586) *
               C139377) *
              C139305)) /
        (p * q * std::sqrt(p + q));
    d2eexx[26] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139575 * C114) *
                 C5913 +
             (C13595 * C116 + C13591 * C125 + C13596 * C117 + C139575 * C126) *
                 C139300) *
                C13593 +
            ((C14336 + C14337) * C5913 + (C14338 + C14339) * C139300) *
                C139586) *
               C139457 * C139593 -
           (((C18259 + C18260) * C139300 + (C18261 + C18262) * C5913) *
                C139586 +
            ((C13596 * C1776 + C139575 * C1789 + C13595 * C1777 +
              C13591 * C1790) *
                 C139300 +
             (C13596 * C1764 + C139575 * C1772 + C13595 * C1767 +
              C13591 * C1778) *
                 C5913) *
                C13593) *
               C139457 * C139594 +
           (((C13595 * C1768 + C13591 * C1780 + C13596 * C1769 +
              C139575 * C1781) *
                 C5913 +
             (C13595 * C1783 + C13591 * C1792 + C13596 * C1784 +
              C139575 * C1793) *
                 C139300) *
                C13593 +
            ((C21095 + C21096) * C5913 + (C21097 + C21098) * C139300) *
                C139586) *
               C139457 * C12239) *
              C139560 +
          ((((C18262 + C18261) * C5913 + (C18260 + C18259) * C139300) * C13593 +
            ((C24145 + C24146) * C5913 + (C24147 + C24148) * C139300) *
                C139586) *
               C139457 * C139594 -
           (((C14346 + C14347) * C139300 + (C14348 + C14349) * C5913) *
                C139586 +
            ((C14339 + C14338) * C139300 + (C14337 + C14336) * C5913) *
                C13593) *
               C139457 * C139593 -
           (((C13596 * C21080 + C139575 * C21084 + C13595 * C21081 +
              C13591 * C21085) *
                 C139300 +
             (C13596 * C21078 + C139575 * C21082 + C13595 * C21079 +
              C13591 * C21083) *
                 C5913) *
                C139586 +
            ((C21098 + C21097) * C139300 + (C21096 + C21095) * C5913) *
                C13593) *
               C139457 * C12239) *
              C139377)) /
        (p * q * std::sqrt(p + q));
    d2eexy[26] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139575 * C114) *
                C2783 +
            (C13595 * C182 + C13591 * C188 + C13596 * C183 + C139575 * C189) *
                C139560 -
            (C14337 + C14336) * C2784 - (C14466 + C14467) * C139377) *
               C13593 +
           ((C14336 + C14337) * C2783 + (C14467 + C14466) * C139560 -
            (C14348 + C14349) * C2784 - (C14469 + C14468) * C139377) *
               C139586) *
              C139457 * C139300 * C139593 +
          (((C18262 + C18261) * C2784 -
            ((C13596 * C1870 + C139575 * C1878 + C13595 * C1873 +
              C13591 * C1881) *
                 C139560 +
             (C13596 * C1764 + C139575 * C1772 + C13595 * C1767 +
              C13591 * C1778) *
                 C2783) +
            (C18403 + C18404) * C139377) *
               C13593 +
           ((C24145 + C24146) * C2784 -
            ((C18404 + C18403) * C139560 + (C18261 + C18262) * C2783) +
            (C24256 + C24255) * C139377) *
               C139586) *
              C139457 * C139300 * C139594 +
          (((C13595 * C1768 + C13591 * C1780 + C13596 * C1769 +
             C139575 * C1781) *
                C2783 +
            (C13595 * C1874 + C13591 * C1882 + C13596 * C1875 +
             C139575 * C1883) *
                C139560 -
            (C21096 + C21095) * C2784 - (C21205 + C21206) * C139377) *
               C13593 +
           ((C21095 + C21096) * C2783 + (C21206 + C21205) * C139560 -
            (C13596 * C21078 + C139575 * C21082 + C13595 * C21079 +
             C13591 * C21083) *
                C2784 -
            (C13596 * C21196 + C139575 * C21198 + C13595 * C21197 +
             C13591 * C21199) *
                C139377) *
               C139586) *
              C139457 * C139300 * C12239)) /
        (p * q * std::sqrt(p + q));
    d2eexz[26] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139575 * C114) *
                C12388 +
            (C13595 * C245 + C13591 * C251 + C13596 * C246 + C139575 * C252) *
                C139593 -
            (C13596 * C1764 + C139575 * C1772 + C13595 * C1767 +
             C13591 * C1778) *
                C12389 -
            (C13596 * C1964 + C139575 * C1972 + C13595 * C1965 +
             C13591 * C1973) *
                C139594 +
            (C13595 * C1768 + C13591 * C1780 + C13596 * C1769 +
             C139575 * C1781) *
                C12390 +
            (C13595 * C1966 + C13591 * C1974 + C13596 * C1967 +
             C139575 * C1975) *
                C12239) *
               C13593 +
           ((C14336 + C14337) * C12388 + (C14588 + C14589) * C139593 -
            (C18261 + C18262) * C12389 - (C18545 + C18546) * C139594 +
            (C21095 + C21096) * C12390 + (C21313 + C21314) * C12239) *
               C139586) *
              C139457 * C139560 +
          (((C18262 + C18261) * C12389 -
            ((C14589 + C14588) * C139593 + (C14337 + C14336) * C12388) +
            (C18546 + C18545) * C139594 - (C21096 + C21095) * C12390 -
            (C21314 + C21313) * C12239) *
               C13593 +
           ((C24145 + C24146) * C12389 -
            ((C14590 + C14591) * C139593 + (C14348 + C14349) * C12388) +
            (C24363 + C24364) * C139594 -
            (C13596 * C21078 + C139575 * C21082 + C13595 * C21079 +
             C13591 * C21083) *
                C12390 -
            (C13596 * C21304 + C139575 * C21306 + C13595 * C21305 +
             C13591 * C21307) *
                C12239) *
               C139586) *
              C139457 * C139377) *
         C139300) /
        (p * q * std::sqrt(p + q));
    d2eeyx[26] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13795 * C107 + C13593 * C308 + C13796 * C831 + C139586 * C1118) *
                 C5913 +
             (C13795 * C116 + C13593 * C314 + C13796 * C841 + C139586 * C1125) *
                 C139300) *
                C139457 * C13591 +
            ((C13823 + C13822) * C5913 + (C13825 + C13824) * C139300) *
                C139457 * C139575) *
               C139593 -
           (((C15711 + C15710) * C139300 + (C15709 + C15708) * C5913) *
                C139457 * C139575 +
            ((C13796 * C4230 + C139586 * C4553 + C13795 * C1777 +
              C13593 * C2061) *
                 C139300 +
             (C13796 * C4223 + C139586 * C4549 + C13795 * C1767 +
              C13593 * C2054) *
                 C5913) *
                C139457 * C13591) *
               C139594 +
           (((C13795 * C1768 + C13593 * C2057 + C13796 * C6442 +
              C139586 * C6688) *
                 C5913 +
             (C13795 * C1783 + C13593 * C2065 + C13796 * C6445 +
              C139586 * C6691) *
                 C139300) *
                C139457 * C13591 +
            ((C15713 + C15712) * C5913 + (C15715 + C15714) * C139300) *
                C139457 * C139575) *
               C12239) *
              C139560 +
          ((((C13795 * C4223 + C13593 * C4549 + C13796 * C8754 +
              C139586 * C9000) *
                 C5913 +
             (C13795 * C4230 + C13593 * C4553 + C13796 * C8757 +
              C139586 * C9003) *
                 C139300) *
                C139457 * C13591 +
            ((C18688 + C18687) * C5913 + (C18690 + C18689) * C139300) *
                C139457 * C139575) *
               C139594 -
           (((C14713 + C14712) * C139300 + (C14711 + C14710) * C5913) *
                C139457 * C139575 +
            ((C13796 * C847 + C139586 * C1129 + C13795 * C841 +
              C13593 * C1125) *
                 C139300 +
             (C13796 * C832 + C139586 * C1121 + C13795 * C831 +
              C13593 * C1118) *
                 C5913) *
                C139457 * C13591) *
               C139593 -
           (((C13796 * C21080 + C139586 * C21414 + C13795 * C6444 +
              C13593 * C6690) *
                 C139300 +
             (C13796 * C21078 + C139586 * C21412 + C13795 * C6441 +
              C13593 * C6687) *
                 C5913) *
                C139457 * C139575 +
            ((C13796 * C21081 + C139586 * C21415 + C13795 * C6445 +
              C13593 * C6691) *
                 C139300 +
             (C13796 * C21079 + C139586 * C21413 + C13795 * C6442 +
              C13593 * C6688) *
                 C5913) *
                C139457 * C13591) *
               C12239) *
              C139377)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[26] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C831 + C139586 * C1118) *
                C2783 +
            (C13795 * C182 + C13593 * C394 + C13796 * C939 + C139586 * C1231) *
                C139560 -
            (C13796 * C832 + C139586 * C1121 + C13795 * C831 + C13593 * C1118) *
                C2784 -
            (C13796 * C940 + C139586 * C1232 + C13795 * C939 + C13593 * C1231) *
                C139377) *
               C139457 * C13591 +
           ((C13823 + C13822) * C2783 + (C13912 + C13913) * C139560 -
            (C14711 + C14710) * C2784 - (C14824 + C14825) * C139377) *
               C139457 * C139575) *
              C139300 * C139593 +
          (((C13795 * C4223 + C13593 * C4549 + C13796 * C8754 +
             C139586 * C9000) *
                C2784 -
            ((C13796 * C4337 + C139586 * C4667 + C13795 * C1873 +
              C13593 * C2170) *
                 C139560 +
             (C13796 * C4223 + C139586 * C4549 + C13795 * C1767 +
              C13593 * C2054) *
                 C2783) +
            (C13795 * C4337 + C13593 * C4667 + C13796 * C8840 +
             C139586 * C9078) *
                C139377) *
               C139457 * C13591 +
           ((C18688 + C18687) * C2784 -
            ((C15823 + C15822) * C139560 + (C15709 + C15708) * C2783) +
            (C18825 + C18826) * C139377) *
               C139457 * C139575) *
              C139300 * C139594 +
          (((C13795 * C1768 + C13593 * C2057 + C13796 * C6442 +
             C139586 * C6688) *
                C2783 +
            (C13795 * C1874 + C13593 * C2171 + C13796 * C6528 +
             C139586 * C6766) *
                C139560 -
            (C13796 * C21079 + C139586 * C21413 + C13795 * C6442 +
             C13593 * C6688) *
                C2784 -
            (C13796 * C21197 + C139586 * C21514 + C13795 * C6528 +
             C13593 * C6766) *
                C139377) *
               C139457 * C13591 +
           ((C15713 + C15712) * C2783 + (C15824 + C15825) * C139560 -
            (C13796 * C21078 + C139586 * C21412 + C13795 * C6441 +
             C13593 * C6687) *
                C2784 -
            (C13796 * C21196 + C139586 * C21515 + C13795 * C6527 +
             C13593 * C6767) *
                C139377) *
               C139457 * C139575) *
              C139300 * C12239)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[26] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C831 + C139586 * C1118) *
                C12388 +
            (C13795 * C245 + C13593 * C474 + C13796 * C1029 + C139586 * C1339) *
                C139593 -
            (C13796 * C4223 + C139586 * C4549 + C13795 * C1767 +
             C13593 * C2054) *
                C12389 -
            (C13796 * C4443 + C139586 * C4783 + C13795 * C1965 +
             C13593 * C2269) *
                C139594 +
            (C13795 * C1768 + C13593 * C2057 + C13796 * C6442 +
             C139586 * C6688) *
                C12390 +
            (C13795 * C1966 + C13593 * C2270 + C13796 * C6608 +
             C139586 * C6843) *
                C12239) *
               C139457 * C13591 +
           ((C13823 + C13822) * C12388 + (C13996 + C13997) * C139593 -
            (C15709 + C15708) * C12389 - (C15932 + C15933) * C139594 +
            (C15713 + C15712) * C12390 + (C15934 + C15935) * C12239) *
               C139457 * C139575) *
              C139560 +
          (((C13795 * C4223 + C13593 * C4549 + C13796 * C8754 +
             C139586 * C9000) *
                C12389 -
            ((C13796 * C1030 + C139586 * C1340 + C13795 * C1029 +
              C13593 * C1339) *
                 C139593 +
             (C13796 * C832 + C139586 * C1121 + C13795 * C831 +
              C13593 * C1118) *
                 C12388) +
            (C13795 * C4443 + C13593 * C4783 + C13796 * C8920 +
             C139586 * C9155) *
                C139594 -
            (C13796 * C21079 + C139586 * C21413 + C13795 * C6442 +
             C13593 * C6688) *
                C12390 -
            (C13796 * C21305 + C139586 * C21614 + C13795 * C6608 +
             C13593 * C6843) *
                C12239) *
               C139457 * C13591 +
           ((C18688 + C18687) * C12389 -
            ((C14934 + C14935) * C139593 + (C14711 + C14710) * C12388) +
            (C18961 + C18962) * C139594 -
            (C13796 * C21078 + C139586 * C21412 + C13795 * C6441 +
             C13593 * C6687) *
                C12390 -
            (C13796 * C21304 + C139586 * C21615 + C13795 * C6607 +
             C13593 * C6844) *
                C12239) *
               C139457 * C139575) *
              C139377) *
         C139300) /
        (p * q * std::sqrt(p + q));
    d2eezx[26] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C554 * C107 + C139457 * C555) * C5913 +
              (C554 * C116 + C139457 * C561) * C139300) *
                 C13591 +
             (C584 * C5913 + C585 * C139300) * C139575) *
                C13593 +
            ((C20819 + C20820) * C13591 + (C20821 + C20822) * C139575) *
                C139586) *
               C139593 -
           (((C21719 + C21720) * C139575 + (C21721 + C21722) * C13591) *
                C139586 +
            ((C2409 * C139300 + C2408 * C5913) * C139575 +
             ((C554 * C1777 + C139457 * C2383) * C139300 +
              (C554 * C1767 + C139457 * C2376) * C5913) *
                 C13591) *
                C13593) *
               C139594 +
           ((((C554 * C1768 + C139457 * C2379) * C5913 +
              (C554 * C1783 + C139457 * C2387) * C139300) *
                 C13591 +
             (C2412 * C5913 + C2413 * C139300) * C139575) *
                C13593 +
            ((C21731 + C21732) * C13591 + (C21727 + C21728) * C139575) *
                C139586) *
               C12239) *
              C139560 +
          ((((C21722 + C21721) * C13591 + (C21720 + C21719) * C139575) *
                C13593 +
            ((C24777 + C24778) * C13591 + (C24773 + C24774) * C139575) *
                C139586) *
               C139594 -
           (((C20823 + C20824) * C139575 + (C20825 + C20826) * C13591) *
                C139586 +
            ((C20822 + C20821) * C139575 + (C20820 + C20819) * C13591) *
                C13593) *
               C139593 -
           ((((C554 * C21080 + C139457 * C21716) * C139300 +
              (C554 * C21078 + C139457 * C21714) * C5913) *
                 C139575 +
             ((C554 * C21081 + C139457 * C21717) * C139300 +
              (C554 * C21079 + C139457 * C21715) * C5913) *
                 C13591) *
                C139586 +
            ((C21728 + C21727) * C139575 + (C21732 + C21731) * C13591) *
                C13593) *
               C12239) *
              C139377)) /
        (p * q * std::sqrt(p + q));
    d2eezy[26] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C554 * C107 + C139457 * C555) * C2783 +
                       (C554 * C182 + C139457 * C641) * C139560 -
                       C15060 * C2784 - C15179 * C139377) *
                          C13591 +
                      (C3279 + C3280 - C3281 - C3282) * C139575) *
                         C13593 +
                     ((C15060 * C2783 + C15179 * C139560 - C15063 * C2784 -
                       C15180 * C139377) *
                          C13591 +
                      (C17096 + C17097 - C17098 - C17099) * C139575) *
                         C139586) *
                        C139300 * C139593 +
                    (((C19108 * C2784 -
                       ((C554 * C1873 + C139457 * C2492) * C139560 +
                        (C554 * C1767 + C139457 * C2376) * C2783) +
                       C19250 * C139377) *
                          C13591 +
                      (C5022 - (C5023 + C5024) + C5034) * C139575) *
                         C13593 +
                     ((C24775 * C2784 - (C19250 * C139560 + C19108 * C2783) +
                       C24881 * C139377) *
                          C13591 +
                      (C19245 - (C19246 + C19247) + C19252) * C139575) *
                         C139586) *
                        C139300 * C139594 +
                    ((((C554 * C1768 + C139457 * C2379) * C2783 +
                       (C554 * C1874 + C139457 * C2493) * C139560 -
                       C21729 * C2784 - C21835 * C139377) *
                          C13591 +
                      (C2412 * C2783 + C2512 * C139560 - C16038 * C2784 -
                       C16143 * C139377) *
                          C139575) *
                         C13593 +
                     ((C21729 * C2783 + C21835 * C139560 -
                       (C554 * C21079 + C139457 * C21715) * C2784 -
                       (C554 * C21197 + C139457 * C21830) * C139377) *
                          C13591 +
                      (C16038 * C2783 + C16143 * C139560 -
                       (C554 * C21078 + C139457 * C21714) * C2784 -
                       (C554 * C21196 + C139457 * C21831) * C139377) *
                          C139575) *
                         C139586) *
                        C139300 * C12239)) /
                  (p * q * std::sqrt(p + q));
    d2eezz[26] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139457 * C555) * C12388 +
             (C554 * C245 + C139457 * C719) * C139593 -
             (C554 * C1767 + C139457 * C2376) * C12389 -
             (C554 * C1965 + C139457 * C2591) * C139594 +
             (C554 * C1768 + C139457 * C2379) * C12390 +
             (C554 * C1966 + C139457 * C2592) * C12239) *
                C13591 +
            (C12848 + C12849 - C12850 - C12851 + C12852 + C12853) * C139575) *
               C13593 +
           ((C30337 + C30338 - C30339 - C30340 + C30341 + C30342) * C13591 +
            (C29449 + C29450 - C29451 - C29452 + C29453 + C29454) * C139575) *
               C139586) *
              C139560 +
          (((C30339 - (C30338 + C30337) + C30340 - C30341 - C30342) * C13591 +
            (C29451 - (C29450 + C29449) + C29452 - C29453 - C29454) * C139575) *
               C13593 +
           ((C24775 * C12389 - (C15295 * C139593 + C15063 * C12388) +
             C24987 * C139594 - (C554 * C21079 + C139457 * C21715) * C12390 -
             (C554 * C21305 + C139457 * C21933) * C12239) *
                C13591 +
            (C19109 * C12389 - (C1682 * C139593 + C1476 * C12388) +
             C19398 * C139594 - (C554 * C21078 + C139457 * C21714) * C12390 -
             (C554 * C21304 + C139457 * C21934) * C12239) *
                C139575) *
               C139586) *
              C139377) *
         C139300) /
        (p * q * std::sqrt(p + q));
    d2eexx[27] +=
        (-std::pow(Pi, 2.5) *
         (((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139575 * C114) *
                 C5913 +
             (C13595 * C116 + C13591 * C125 + C13596 * C117 + C139575 * C126) *
                 C139300) *
                C13593 +
            ((C14336 + C14337) * C5913 + (C14338 + C14339) * C139300) *
                C139586) *
               C139457 * C9466 -
           (((C18259 + C18260) * C139300 + (C18261 + C18262) * C5913) *
                C139586 +
            ((C13596 * C1776 + C139575 * C1789 + C13595 * C1777 +
              C13591 * C1790) *
                 C139300 +
             (C13596 * C1764 + C139575 * C1772 + C13595 * C1767 +
              C13591 * C1778) *
                 C5913) *
                C13593) *
               C139457 * C139403) *
              C823 +
          ((((C18262 + C18261) * C5913 + (C18260 + C18259) * C139300) * C13593 +
            ((C24145 + C24146) * C5913 + (C24147 + C24148) * C139300) *
                C139586) *
               C139457 * C139403 -
           (((C14346 + C14347) * C139300 + (C14348 + C14349) * C5913) *
                C139586 +
            ((C14339 + C14338) * C139300 + (C14337 + C14336) * C5913) *
                C13593) *
               C139457 * C9466) *
              C824 +
          ((((C14349 + C14348) * C5913 + (C14347 + C14346) * C139300) * C13593 +
            ((C20387 + C20388) * C5913 + (C20389 + C20390) * C139300) *
                C139586) *
               C139457 * C9466 -
           (((C13596 * C24130 + C139575 * C24134 + C13595 * C24131 +
              C13591 * C24135) *
                 C139300 +
             (C13596 * C24128 + C139575 * C24132 + C13595 * C24129 +
              C13591 * C24133) *
                 C5913) *
                C139586 +
            ((C24148 + C24147) * C139300 + (C24146 + C24145) * C5913) *
                C13593) *
               C139457 * C139403) *
              C825)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139575 * C114) *
                C5230 +
            (C13595 * C116 + C13591 * C125 + C13596 * C117 + C139575 * C126) *
                C5225 -
            (C13596 * C109 + C139575 * C115 + C13595 * C108 + C13591 * C114) *
                C5231 -
            (C13596 * C118 + C139575 * C127 + C13595 * C117 + C13591 * C126) *
                C5226 +
            (C13595 * C109 + C13591 * C115 + C13596 * C110 + C139575 * C119) *
                C5232 +
            (C13595 * C118 + C13591 * C127 + C13596 * C120 + C139575 * C128) *
                C5227) *
               C13593 +
           ((C14336 + C14337) * C5230 + (C14338 + C14339) * C5225 -
            (C14340 + C14341) * C5231 - (C14342 + C14343) * C5226 +
            (C16358 + C16359) * C5232 + (C16360 + C16361) * C5227) *
               C139586) *
              C139457 * C9466 +
          (((C13595 * C1764 + C13591 * C1772 + C13596 * C1765 +
             C139575 * C1773) *
                C5231 -
            ((C13596 * C1776 + C139575 * C1789 + C13595 * C1777 +
              C13591 * C1790) *
                 C5225 +
             (C13596 * C1764 + C139575 * C1772 + C13595 * C1767 +
              C13591 * C1778) *
                 C5230) +
            (C13595 * C1776 + C13591 * C1789 + C13596 * C1775 +
             C139575 * C1788) *
                C5226 -
            (C13596 * C1766 + C139575 * C1774 + C13595 * C1765 +
             C13591 * C1773) *
                C5232 -
            (C13596 * C1779 + C139575 * C1791 + C13595 * C1775 +
             C13591 * C1788) *
                C5227) *
               C13593 +
           ((C18257 + C18258) * C5231 -
            ((C18259 + C18260) * C5225 + (C18261 + C18262) * C5230) +
            (C18263 + C18264) * C5226 -
            (C13596 * C4226 + C139575 * C4233 + C13595 * C4225 +
             C13591 * C4229) *
                C5232 -
            (C13596 * C4234 + C139575 * C4238 + C13595 * C4232 +
             C13591 * C4237) *
                C5227) *
               C139586) *
              C139457 * C139403) *
         C139328) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139575 * C114) *
                C5913 +
            (C13595 * C116 + C13591 * C125 + C13596 * C117 + C139575 * C126) *
                C139300) *
               C13593 +
           ((C14336 + C14337) * C5913 + (C14338 + C14339) * C139300) *
               C139586) *
              C139457 * C10809 -
          (((C18259 + C18260) * C139300 + (C18261 + C18262) * C5913) * C139586 +
           ((C13596 * C1776 + C139575 * C1789 + C13595 * C1777 +
             C13591 * C1790) *
                C139300 +
            (C13596 * C1764 + C139575 * C1772 + C13595 * C1767 +
             C13591 * C1778) *
                C5913) *
               C13593) *
              C139457 * C10810 +
          (((C13595 * C1768 + C13591 * C1780 + C13596 * C1769 +
             C139575 * C1781) *
                C5913 +
            (C13595 * C1783 + C13591 * C1792 + C13596 * C1784 +
             C139575 * C1793) *
                C139300) *
               C13593 +
           ((C21095 + C21096) * C5913 + (C21097 + C21098) * C139300) *
               C139586) *
              C139457 * C10811 -
          (((C13596 * C26832 + C139575 * C26836 + C13595 * C26833 +
             C13591 * C26837) *
                C139300 +
            (C13596 * C26830 + C139575 * C26834 + C13595 * C26831 +
             C13591 * C26835) *
                C5913) *
               C139586 +
           ((C13596 * C10817 + C139575 * C10823 + C13595 * C10818 +
             C13591 * C10824) *
                C139300 +
            (C13596 * C10814 + C139575 * C10820 + C13595 * C10815 +
             C13591 * C10821) *
                C5913) *
               C13593) *
              C139457 * C10812) *
         C139328) /
            (p * q * std::sqrt(p + q));
    d2eexy[27] +=
        (-std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139575 * C114) *
                C934 +
            (C13595 * C182 + C13591 * C188 + C13596 * C183 + C139575 * C189) *
                C823 -
            (C14337 + C14336) * C935 - (C14466 + C14467) * C824 +
            (C14349 + C14348) * C936 + (C14468 + C14469) * C825) *
               C13593 +
           ((C14336 + C14337) * C934 + (C14467 + C14466) * C823 -
            (C14348 + C14349) * C935 - (C14469 + C14468) * C824 +
            (C20387 + C20388) * C936 + (C20466 + C20465) * C825) *
               C139586) *
              C139457 * C139300 * C9466 +
          (((C18262 + C18261) * C935 -
            ((C13596 * C1870 + C139575 * C1878 + C13595 * C1873 +
              C13591 * C1881) *
                 C823 +
             (C13596 * C1764 + C139575 * C1772 + C13595 * C1767 +
              C13591 * C1778) *
                 C934) +
            (C18403 + C18404) * C824 - (C24146 + C24145) * C936 -
            (C24255 + C24256) * C825) *
               C13593 +
           ((C24145 + C24146) * C935 -
            ((C18404 + C18403) * C823 + (C18261 + C18262) * C934) +
            (C24256 + C24255) * C824 -
            (C13596 * C24128 + C139575 * C24132 + C13595 * C24129 +
             C13591 * C24133) *
                C936 -
            (C13596 * C24246 + C139575 * C24248 + C13595 * C24247 +
             C13591 * C24249) *
                C825) *
               C139586) *
              C139457 * C139300 * C139403)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139575 * C114) *
                 C181 +
             (C13595 * C182 + C13591 * C188 + C13596 * C183 + C139575 * C189) *
                 C139328) *
                C13593 +
            ((C14336 + C14337) * C181 + (C14467 + C14466) * C139328) *
                C139586) *
               C139457 * C5225 -
           (((C14471 + C14470) * C139328 + (C14340 + C14341) * C181) * C139586 +
            ((C13596 * C184 + C139575 * C190 + C13595 * C183 + C13591 * C189) *
                 C139328 +
             (C13596 * C109 + C139575 * C115 + C13595 * C108 + C13591 * C114) *
                 C181) *
                C13593) *
               C139457 * C5226 +
           (((C13595 * C109 + C13591 * C115 + C13596 * C110 + C139575 * C119) *
                 C181 +
             (C13595 * C184 + C13591 * C190 + C13596 * C185 + C139575 * C191) *
                 C139328) *
                C13593 +
            ((C16358 + C16359) * C181 + (C16465 + C16464) * C139328) *
                C139586) *
               C139457 * C5227) *
              C9466 +
          ((((C13595 * C1764 + C13591 * C1772 + C13596 * C1765 +
              C139575 * C1773) *
                 C181 +
             (C13595 * C1870 + C13591 * C1878 + C13596 * C1871 +
              C139575 * C1879) *
                 C139328) *
                C13593 +
            ((C18257 + C18258) * C181 + (C18406 + C18405) * C139328) *
                C139586) *
               C139457 * C5226 -
           (((C18404 + C18403) * C139328 + (C18261 + C18262) * C181) * C139586 +
            ((C13596 * C1870 + C139575 * C1878 + C13595 * C1873 +
              C13591 * C1881) *
                 C139328 +
             (C13596 * C1764 + C139575 * C1772 + C13595 * C1767 +
              C13591 * C1778) *
                 C181) *
                C13593) *
               C139457 * C5225 -
           (((C13596 * C4340 + C139575 * C4344 + C13595 * C4339 +
              C13591 * C4343) *
                 C139328 +
             (C13596 * C4226 + C139575 * C4233 + C13595 * C4225 +
              C13591 * C4229) *
                 C181) *
                C139586 +
            ((C13596 * C1872 + C139575 * C1880 + C13595 * C1871 +
              C13591 * C1879) *
                 C139328 +
             (C13596 * C1766 + C139575 * C1774 + C13595 * C1765 +
              C13591 * C1773) *
                 C181) *
                C13593) *
               C139457 * C5227) *
              C139403)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139575 * C114) *
                C181 +
            (C13595 * C182 + C13591 * C188 + C13596 * C183 + C139575 * C189) *
                C139328) *
               C13593 +
           ((C14336 + C14337) * C181 + (C14467 + C14466) * C139328) * C139586) *
              C139457 * C139300 * C10809 -
          (((C18404 + C18403) * C139328 + (C18261 + C18262) * C181) * C139586 +
           ((C13596 * C1870 + C139575 * C1878 + C13595 * C1873 +
             C13591 * C1881) *
                C139328 +
            (C13596 * C1764 + C139575 * C1772 + C13595 * C1767 +
             C13591 * C1778) *
                C181) *
               C13593) *
              C139457 * C139300 * C10810 +
          (((C13595 * C1768 + C13591 * C1780 + C13596 * C1769 +
             C139575 * C1781) *
                C181 +
            (C13595 * C1874 + C13591 * C1882 + C13596 * C1875 +
             C139575 * C1883) *
                C139328) *
               C13593 +
           ((C21095 + C21096) * C181 + (C21206 + C21205) * C139328) * C139586) *
              C139457 * C139300 * C10811 -
          (((C13596 * C26904 + C139575 * C26906 + C13595 * C26905 +
             C13591 * C26907) *
                C139328 +
            (C13596 * C26830 + C139575 * C26834 + C13595 * C26831 +
             C13591 * C26835) *
                C181) *
               C139586 +
           ((C13596 * C10876 + C139575 * C10879 + C13595 * C10877 +
             C13591 * C10880) *
                C139328 +
            (C13596 * C10814 + C139575 * C10820 + C13595 * C10815 +
             C13591 * C10821) *
                C181) *
               C13593) *
              C139457 * C139300 * C10812)) /
            (p * q * std::sqrt(p + q));
    d2eexz[27] +=
        (-std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139575 * C114) *
                C9616 +
            (C13595 * C245 + C13591 * C251 + C13596 * C246 + C139575 * C252) *
                C9466 -
            (C13596 * C1764 + C139575 * C1772 + C13595 * C1767 +
             C13591 * C1778) *
                C9617 -
            (C13596 * C1964 + C139575 * C1972 + C13595 * C1965 +
             C13591 * C1973) *
                C139403) *
               C13593 +
           ((C14336 + C14337) * C9616 + (C14588 + C14589) * C9466 -
            (C18261 + C18262) * C9617 - (C18545 + C18546) * C139403) *
               C139586) *
              C139457 * C823 +
          (((C18262 + C18261) * C9617 -
            ((C14589 + C14588) * C9466 + (C14337 + C14336) * C9616) +
            (C18546 + C18545) * C139403) *
               C13593 +
           ((C24145 + C24146) * C9617 -
            ((C14590 + C14591) * C9466 + (C14348 + C14349) * C9616) +
            (C24363 + C24364) * C139403) *
               C139586) *
              C139457 * C824 +
          (((C14349 + C14348) * C9616 + (C14591 + C14590) * C9466 -
            (C24146 + C24145) * C9617 - (C24364 + C24363) * C139403) *
               C13593 +
           ((C20387 + C20388) * C9616 + (C20541 + C20542) * C9466 -
            (C13596 * C24128 + C139575 * C24132 + C13595 * C24129 +
             C13591 * C24133) *
                C9617 -
            (C13596 * C24354 + C139575 * C24356 + C13595 * C24355 +
             C13591 * C24357) *
                C139403) *
               C139586) *
              C139457 * C825) *
         C139300) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139575 * C114) *
                C9616 +
            (C13595 * C245 + C13591 * C251 + C13596 * C246 + C139575 * C252) *
                C9466 -
            (C13596 * C1764 + C139575 * C1772 + C13595 * C1767 +
             C13591 * C1778) *
                C9617 -
            (C13596 * C1964 + C139575 * C1972 + C13595 * C1965 +
             C13591 * C1973) *
                C139403) *
               C13593 +
           ((C14336 + C14337) * C9616 + (C14588 + C14589) * C9466 -
            (C18261 + C18262) * C9617 - (C18545 + C18546) * C139403) *
               C139586) *
              C139457 * C139328 * C5225 +
          (((C13595 * C1764 + C13591 * C1772 + C13596 * C1765 +
             C139575 * C1773) *
                C9617 -
            ((C13596 * C247 + C139575 * C253 + C13595 * C246 + C13591 * C252) *
                 C9466 +
             (C13596 * C109 + C139575 * C115 + C13595 * C108 + C13591 * C114) *
                 C9616) +
            (C13595 * C1964 + C13591 * C1972 + C13596 * C1963 +
             C139575 * C1971) *
                C139403) *
               C13593 +
           ((C18257 + C18258) * C9617 -
            ((C14593 + C14592) * C9466 + (C14340 + C14341) * C9616) +
            (C18547 + C18548) * C139403) *
               C139586) *
              C139457 * C139328 * C5226 +
          (((C13595 * C109 + C13591 * C115 + C13596 * C110 + C139575 * C119) *
                C9616 +
            (C13595 * C247 + C13591 * C253 + C13596 * C248 + C139575 * C254) *
                C9466 -
            (C13596 * C1766 + C139575 * C1774 + C13595 * C1765 +
             C13591 * C1773) *
                C9617 -
            (C13596 * C1969 + C139575 * C1977 + C13595 * C1963 +
             C13591 * C1971) *
                C139403) *
               C13593 +
           ((C16358 + C16359) * C9616 + (C16568 + C16569) * C9466 -
            (C13596 * C4226 + C139575 * C4233 + C13595 * C4225 +
             C13591 * C4229) *
                C9617 -
            (C13596 * C4446 + C139575 * C4450 + C13595 * C4445 +
             C13591 * C4449) *
                C139403) *
               C139586) *
              C139457 * C139328 * C5227)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139575 * C114) *
               C10931 +
           (C13595 * C245 + C13591 * C251 + C13596 * C246 + C139575 * C252) *
               C10809 -
           (C13596 * C1764 + C139575 * C1772 + C13595 * C1767 +
            C13591 * C1778) *
               C10932 -
           (C13596 * C1964 + C139575 * C1972 + C13595 * C1965 +
            C13591 * C1973) *
               C10810 +
           (C13595 * C1768 + C13591 * C1780 + C13596 * C1769 +
            C139575 * C1781) *
               C10933 +
           (C13595 * C1966 + C13591 * C1974 + C13596 * C1967 +
            C139575 * C1975) *
               C10811 -
           (C13596 * C10814 + C139575 * C10820 + C13595 * C10815 +
            C13591 * C10821) *
               C10934 -
           (C13596 * C10936 + C139575 * C10939 + C13595 * C10937 +
            C13591 * C10940) *
               C10812) *
              C13593 +
          ((C14336 + C14337) * C10931 + (C14588 + C14589) * C10809 -
           (C18261 + C18262) * C10932 - (C18545 + C18546) * C10810 +
           (C21095 + C21096) * C10933 + (C21313 + C21314) * C10811 -
           (C13596 * C26830 + C139575 * C26834 + C13595 * C26831 +
            C13591 * C26835) *
               C10934 -
           (C13596 * C26974 + C139575 * C26976 + C13595 * C26975 +
            C13591 * C26977) *
               C10812) *
              C139586) *
         C139457 * C139328 * C139300) /
            (p * q * std::sqrt(p + q));
    d2eeyx[27] +=
        (-std::pow(Pi, 2.5) *
         (((((C13795 * C107 + C13593 * C308 + C13796 * C831 + C139586 * C1118) *
                 C5913 +
             (C13795 * C116 + C13593 * C314 + C13796 * C841 + C139586 * C1125) *
                 C139300) *
                C139457 * C13591 +
            ((C13823 + C13822) * C5913 + (C13825 + C13824) * C139300) *
                C139457 * C139575) *
               C9466 -
           (((C15711 + C15710) * C139300 + (C15709 + C15708) * C5913) *
                C139457 * C139575 +
            ((C13796 * C4230 + C139586 * C4553 + C13795 * C1777 +
              C13593 * C2061) *
                 C139300 +
             (C13796 * C4223 + C139586 * C4549 + C13795 * C1767 +
              C13593 * C2054) *
                 C5913) *
                C139457 * C13591) *
               C139403) *
              C823 +
          ((((C13795 * C4223 + C13593 * C4549 + C13796 * C8754 +
              C139586 * C9000) *
                 C5913 +
             (C13795 * C4230 + C13593 * C4553 + C13796 * C8757 +
              C139586 * C9003) *
                 C139300) *
                C139457 * C13591 +
            ((C18688 + C18687) * C5913 + (C18690 + C18689) * C139300) *
                C139457 * C139575) *
               C139403 -
           (((C14713 + C14712) * C139300 + (C14711 + C14710) * C5913) *
                C139457 * C139575 +
            ((C13796 * C847 + C139586 * C1129 + C13795 * C841 +
              C13593 * C1125) *
                 C139300 +
             (C13796 * C832 + C139586 * C1121 + C13795 * C831 +
              C13593 * C1118) *
                 C5913) *
                C139457 * C13591) *
               C9466) *
              C824 +
          ((((C13795 * C832 + C13593 * C1121 + C13796 * C5916 +
              C139586 * C6094) *
                 C5913 +
             (C13795 * C847 + C13593 * C1129 + C13796 * C5919 +
              C139586 * C6097) *
                 C139300) *
                C139457 * C13591 +
            ((C14715 + C14714) * C5913 + (C14717 + C14716) * C139300) *
                C139457 * C139575) *
               C9466 -
           (((C13796 * C24130 + C139586 * C24464 + C13795 * C8756 +
              C13593 * C9002) *
                 C139300 +
             (C13796 * C24128 + C139586 * C24462 + C13795 * C8753 +
              C13593 * C8999) *
                 C5913) *
                C139457 * C139575 +
            ((C13796 * C24131 + C139586 * C24465 + C13795 * C8757 +
              C13593 * C9003) *
                 C139300 +
             (C13796 * C24129 + C139586 * C24463 + C13795 * C8754 +
              C13593 * C9000) *
                 C5913) *
                C139457 * C13591) *
               C139403) *
              C825)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C831 + C139586 * C1118) *
                C5230 +
            (C13795 * C116 + C13593 * C314 + C13796 * C841 + C139586 * C1125) *
                C5225 -
            (C13822 + C13823) * C5231 - (C13824 + C13825) * C5226 +
            (C13826 + C13827) * C5232 + (C13828 + C13829) * C5227) *
               C139457 * C13591 +
           ((C13823 + C13822) * C5230 + (C13825 + C13824) * C5225 -
            (C13827 + C13826) * C5231 - (C13829 + C13828) * C5226 +
            (C13831 + C13830) * C5232 + (C13833 + C13832) * C5227) *
               C139457 * C139575) *
              C9466 +
          (((C15708 + C15709) * C5231 -
            ((C13796 * C4230 + C139586 * C4553 + C13795 * C1777 +
              C13593 * C2061) *
                 C5225 +
             (C13796 * C4223 + C139586 * C4549 + C13795 * C1767 +
              C13593 * C2054) *
                 C5230) +
            (C15710 + C15711) * C5226 - (C17603 + C17604) * C5232 -
            (C17605 + C17606) * C5227) *
               C139457 * C13591 +
           ((C17604 + C17603) * C5231 -
            ((C15711 + C15710) * C5225 + (C15709 + C15708) * C5230) +
            (C17606 + C17605) * C5226 -
            (C13796 * C4226 + C139586 * C4552 + C13795 * C1766 +
             C13593 * C2056) *
                C5232 -
            (C13796 * C4234 + C139586 * C4556 + C13795 * C1779 +
             C13593 * C2064) *
                C5227) *
               C139457 * C139575) *
              C139403) *
         C139328) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C831 + C139586 * C1118) *
                C5913 +
            (C13795 * C116 + C13593 * C314 + C13796 * C841 + C139586 * C1125) *
                C139300) *
               C139457 * C13591 +
           ((C13823 + C13822) * C5913 + (C13825 + C13824) * C139300) * C139457 *
               C139575) *
              C10809 -
          (((C15711 + C15710) * C139300 + (C15709 + C15708) * C5913) * C139457 *
               C139575 +
           ((C13796 * C4230 + C139586 * C4553 + C13795 * C1777 +
             C13593 * C2061) *
                C139300 +
            (C13796 * C4223 + C139586 * C4549 + C13795 * C1767 +
             C13593 * C2054) *
                C5913) *
               C139457 * C13591) *
              C10810 +
          (((C13795 * C1768 + C13593 * C2057 + C13796 * C6442 +
             C139586 * C6688) *
                C5913 +
            (C13795 * C1783 + C13593 * C2065 + C13796 * C6445 +
             C139586 * C6691) *
                C139300) *
               C139457 * C13591 +
           ((C15713 + C15712) * C5913 + (C15715 + C15714) * C139300) * C139457 *
               C139575) *
              C10811 -
          (((C13796 * C26832 + C139586 * C27046 + C13795 * C10817 +
             C13593 * C10995) *
                C139300 +
            (C13796 * C26830 + C139586 * C27044 + C13795 * C10814 +
             C13593 * C10992) *
                C5913) *
               C139457 * C139575 +
           ((C13796 * C26833 + C139586 * C27047 + C13795 * C10818 +
             C13593 * C10996) *
                C139300 +
            (C13796 * C26831 + C139586 * C27045 + C13795 * C10815 +
             C13593 * C10993) *
                C5913) *
               C139457 * C13591) *
              C10812) *
         C139328) /
            (p * q * std::sqrt(p + q));
    d2eeyy[27] +=
        (-std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C831 + C139586 * C1118) *
                C934 +
            (C13795 * C182 + C13593 * C394 + C13796 * C939 + C139586 * C1231) *
                C823 -
            (C13796 * C832 + C139586 * C1121 + C13795 * C831 + C13593 * C1118) *
                C935 -
            (C13796 * C940 + C139586 * C1232 + C13795 * C939 + C13593 * C1231) *
                C824 +
            (C13795 * C832 + C13593 * C1121 + C13796 * C5916 +
             C139586 * C6094) *
                C936 +
            (C13795 * C940 + C13593 * C1232 + C13796 * C5982 +
             C139586 * C6148) *
                C825) *
               C139457 * C13591 +
           ((C13823 + C13822) * C934 + (C13912 + C13913) * C823 -
            (C14711 + C14710) * C935 - (C14824 + C14825) * C824 +
            (C14715 + C14714) * C936 + (C14826 + C14827) * C825) *
               C139457 * C139575) *
              C139300 * C9466 +
          (((C13795 * C4223 + C13593 * C4549 + C13796 * C8754 +
             C139586 * C9000) *
                C935 -
            ((C13796 * C4337 + C139586 * C4667 + C13795 * C1873 +
              C13593 * C2170) *
                 C823 +
             (C13796 * C4223 + C139586 * C4549 + C13795 * C1767 +
              C13593 * C2054) *
                 C934) +
            (C13795 * C4337 + C13593 * C4667 + C13796 * C8840 +
             C139586 * C9078) *
                C824 -
            (C13796 * C24129 + C139586 * C24463 + C13795 * C8754 +
             C13593 * C9000) *
                C936 -
            (C13796 * C24247 + C139586 * C24564 + C13795 * C8840 +
             C13593 * C9078) *
                C825) *
               C139457 * C13591 +
           ((C18688 + C18687) * C935 -
            ((C15823 + C15822) * C823 + (C15709 + C15708) * C934) +
            (C18825 + C18826) * C824 -
            (C13796 * C24128 + C139586 * C24462 + C13795 * C8753 +
             C13593 * C8999) *
                C936 -
            (C13796 * C24246 + C139586 * C24565 + C13795 * C8839 +
             C13593 * C9079) *
                C825) *
               C139457 * C139575) *
              C139300 * C139403)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C13795 * C107 + C13593 * C308 + C13796 * C831 + C139586 * C1118) *
                 C181 +
             (C13795 * C182 + C13593 * C394 + C13796 * C939 + C139586 * C1231) *
                 C139328) *
                C139457 * C13591 +
            ((C13823 + C13822) * C181 + (C13912 + C13913) * C139328) * C139457 *
                C139575) *
               C5225 -
           (((C13914 + C13915) * C139328 + (C13827 + C13826) * C181) * C139457 *
                C139575 +
            ((C13913 + C13912) * C139328 + (C13822 + C13823) * C181) * C139457 *
                C13591) *
               C5226 +
           (((C13826 + C13827) * C181 + (C13915 + C13914) * C139328) * C139457 *
                C13591 +
            ((C13831 + C13830) * C181 + (C13916 + C13917) * C139328) * C139457 *
                C139575) *
               C5227) *
              C9466 +
          ((((C15708 + C15709) * C181 + (C15822 + C15823) * C139328) * C139457 *
                C13591 +
            ((C17604 + C17603) * C181 + (C17709 + C17710) * C139328) * C139457 *
                C139575) *
               C5226 -
           (((C15823 + C15822) * C139328 + (C15709 + C15708) * C181) * C139457 *
                C139575 +
            ((C13796 * C4337 + C139586 * C4667 + C13795 * C1873 +
              C13593 * C2170) *
                 C139328 +
             (C13796 * C4223 + C139586 * C4549 + C13795 * C1767 +
              C13593 * C2054) *
                 C181) *
                C139457 * C13591) *
               C5225 -
           (((C13796 * C4340 + C139586 * C4670 + C13795 * C1872 +
              C13593 * C2169) *
                 C139328 +
             (C13796 * C4226 + C139586 * C4552 + C13795 * C1766 +
              C13593 * C2056) *
                 C181) *
                C139457 * C139575 +
            ((C17710 + C17709) * C139328 + (C17603 + C17604) * C181) * C139457 *
                C13591) *
               C5227) *
              C139403)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C831 + C139586 * C1118) *
                C181 +
            (C13795 * C182 + C13593 * C394 + C13796 * C939 + C139586 * C1231) *
                C139328) *
               C139457 * C13591 +
           ((C13823 + C13822) * C181 + (C13912 + C13913) * C139328) * C139457 *
               C139575) *
              C139300 * C10809 -
          (((C15823 + C15822) * C139328 + (C15709 + C15708) * C181) * C139457 *
               C139575 +
           ((C13796 * C4337 + C139586 * C4667 + C13795 * C1873 +
             C13593 * C2170) *
                C139328 +
            (C13796 * C4223 + C139586 * C4549 + C13795 * C1767 +
             C13593 * C2054) *
                C181) *
               C139457 * C13591) *
              C139300 * C10810 +
          (((C13795 * C1768 + C13593 * C2057 + C13796 * C6442 +
             C139586 * C6688) *
                C181 +
            (C13795 * C1874 + C13593 * C2171 + C13796 * C6528 +
             C139586 * C6766) *
                C139328) *
               C139457 * C13591 +
           ((C15713 + C15712) * C181 + (C15824 + C15825) * C139328) * C139457 *
               C139575) *
              C139300 * C10811 -
          (((C13796 * C26904 + C139586 * C27114 + C13795 * C10876 +
             C13593 * C11048) *
                C139328 +
            (C13796 * C26830 + C139586 * C27044 + C13795 * C10814 +
             C13593 * C10992) *
                C181) *
               C139457 * C139575 +
           ((C13796 * C26905 + C139586 * C27115 + C13795 * C10877 +
             C13593 * C11049) *
                C139328 +
            (C13796 * C26831 + C139586 * C27045 + C13795 * C10815 +
             C13593 * C10993) *
                C181) *
               C139457 * C13591) *
              C139300 * C10812)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[27] +=
        (-std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C831 + C139586 * C1118) *
                C9616 +
            (C13795 * C245 + C13593 * C474 + C13796 * C1029 + C139586 * C1339) *
                C9466 -
            (C13796 * C4223 + C139586 * C4549 + C13795 * C1767 +
             C13593 * C2054) *
                C9617 -
            (C13796 * C4443 + C139586 * C4783 + C13795 * C1965 +
             C13593 * C2269) *
                C139403) *
               C139457 * C13591 +
           ((C13823 + C13822) * C9616 + (C13996 + C13997) * C9466 -
            (C15709 + C15708) * C9617 - (C15932 + C15933) * C139403) *
               C139457 * C139575) *
              C823 +
          (((C13795 * C4223 + C13593 * C4549 + C13796 * C8754 +
             C139586 * C9000) *
                C9617 -
            ((C13796 * C1030 + C139586 * C1340 + C13795 * C1029 +
              C13593 * C1339) *
                 C9466 +
             (C13796 * C832 + C139586 * C1121 + C13795 * C831 +
              C13593 * C1118) *
                 C9616) +
            (C13795 * C4443 + C13593 * C4783 + C13796 * C8920 +
             C139586 * C9155) *
                C139403) *
               C139457 * C13591 +
           ((C18688 + C18687) * C9617 -
            ((C14934 + C14935) * C9466 + (C14711 + C14710) * C9616) +
            (C18961 + C18962) * C139403) *
               C139457 * C139575) *
              C824 +
          (((C13795 * C832 + C13593 * C1121 + C13796 * C5916 +
             C139586 * C6094) *
                C9616 +
            (C13795 * C1030 + C13593 * C1340 + C13796 * C6038 +
             C139586 * C6203) *
                C9466 -
            (C13796 * C24129 + C139586 * C24463 + C13795 * C8754 +
             C13593 * C9000) *
                C9617 -
            (C13796 * C24355 + C139586 * C24664 + C13795 * C8920 +
             C13593 * C9155) *
                C139403) *
               C139457 * C13591 +
           ((C14715 + C14714) * C9616 + (C14936 + C14937) * C9466 -
            (C13796 * C24128 + C139586 * C24462 + C13795 * C8753 +
             C13593 * C8999) *
                C9617 -
            (C13796 * C24354 + C139586 * C24665 + C13795 * C8919 +
             C13593 * C9156) *
                C139403) *
               C139457 * C139575) *
              C825) *
         C139300) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C831 + C139586 * C1118) *
                C9616 +
            (C13795 * C245 + C13593 * C474 + C13796 * C1029 + C139586 * C1339) *
                C9466 -
            (C13796 * C4223 + C139586 * C4549 + C13795 * C1767 +
             C13593 * C2054) *
                C9617 -
            (C13796 * C4443 + C139586 * C4783 + C13795 * C1965 +
             C13593 * C2269) *
                C139403) *
               C139457 * C13591 +
           ((C13823 + C13822) * C9616 + (C13996 + C13997) * C9466 -
            (C15709 + C15708) * C9617 - (C15932 + C15933) * C139403) *
               C139457 * C139575) *
              C139328 * C5225 +
          (((C15708 + C15709) * C9617 -
            ((C13997 + C13996) * C9466 + (C13822 + C13823) * C9616) +
            (C15933 + C15932) * C139403) *
               C139457 * C13591 +
           ((C17604 + C17603) * C9617 -
            ((C13998 + C13999) * C9466 + (C13827 + C13826) * C9616) +
            (C17813 + C17814) * C139403) *
               C139457 * C139575) *
              C139328 * C5226 +
          (((C13826 + C13827) * C9616 + (C13999 + C13998) * C9466 -
            (C17603 + C17604) * C9617 - (C17814 + C17813) * C139403) *
               C139457 * C13591 +
           ((C13831 + C13830) * C9616 + (C14000 + C14001) * C9466 -
            (C13796 * C4226 + C139586 * C4552 + C13795 * C1766 +
             C13593 * C2056) *
                C9617 -
            (C13796 * C4446 + C139586 * C4786 + C13795 * C1969 +
             C13593 * C2275) *
                C139403) *
               C139457 * C139575) *
              C139328 * C5227)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C13795 * C107 + C13593 * C308 + C13796 * C831 + C139586 * C1118) *
               C10931 +
           (C13795 * C245 + C13593 * C474 + C13796 * C1029 + C139586 * C1339) *
               C10809 -
           (C13796 * C4223 + C139586 * C4549 + C13795 * C1767 +
            C13593 * C2054) *
               C10932 -
           (C13796 * C4443 + C139586 * C4783 + C13795 * C1965 +
            C13593 * C2269) *
               C10810 +
           (C13795 * C1768 + C13593 * C2057 + C13796 * C6442 +
            C139586 * C6688) *
               C10933 +
           (C13795 * C1966 + C13593 * C2270 + C13796 * C6608 +
            C139586 * C6843) *
               C10811 -
           (C13796 * C26831 + C139586 * C27045 + C13795 * C10815 +
            C13593 * C10993) *
               C10934 -
           (C13796 * C26975 + C139586 * C27182 + C13795 * C10937 +
            C13593 * C11100) *
               C10812) *
              C139457 * C13591 +
          ((C13823 + C13822) * C10931 + (C13996 + C13997) * C10809 -
           (C15709 + C15708) * C10932 - (C15932 + C15933) * C10810 +
           (C15713 + C15712) * C10933 + (C15934 + C15935) * C10811 -
           (C13796 * C26830 + C139586 * C27044 + C13795 * C10814 +
            C13593 * C10992) *
               C10934 -
           (C13796 * C26974 + C139586 * C27183 + C13795 * C10936 +
            C13593 * C11101) *
               C10812) *
              C139457 * C139575) *
         C139328 * C139300) /
            (p * q * std::sqrt(p + q));
    d2eezx[27] +=
        (-std::pow(Pi, 2.5) *
         ((((((C554 * C107 + C139457 * C555) * C5913 +
              (C554 * C116 + C139457 * C561) * C139300) *
                 C13591 +
             (C584 * C5913 + C585 * C139300) * C139575) *
                C13593 +
            ((C20819 + C20820) * C13591 + (C20821 + C20822) * C139575) *
                C139586) *
               C9466 -
           (((C21719 + C21720) * C139575 + (C21721 + C21722) * C13591) *
                C139586 +
            ((C2409 * C139300 + C2408 * C5913) * C139575 +
             ((C554 * C1777 + C139457 * C2383) * C139300 +
              (C554 * C1767 + C139457 * C2376) * C5913) *
                 C13591) *
                C13593) *
               C139403) *
              C823 +
          ((((C21722 + C21721) * C13591 + (C21720 + C21719) * C139575) *
                C13593 +
            ((C24777 + C24778) * C13591 + (C24773 + C24774) * C139575) *
                C139586) *
               C139403 -
           (((C20823 + C20824) * C139575 + (C20825 + C20826) * C13591) *
                C139586 +
            ((C20822 + C20821) * C139575 + (C20820 + C20819) * C13591) *
                C13593) *
               C9466) *
              C824 +
          ((((C20826 + C20825) * C13591 + (C20824 + C20823) * C139575) *
                C13593 +
            ((C20835 + C20836) * C13591 + (C20831 + C20832) * C139575) *
                C139586) *
               C9466 -
           ((((C554 * C24130 + C139457 * C24766) * C139300 +
              (C554 * C24128 + C139457 * C24764) * C5913) *
                 C139575 +
             ((C554 * C24131 + C139457 * C24767) * C139300 +
              (C554 * C24129 + C139457 * C24765) * C5913) *
                 C13591) *
                C139586 +
            ((C24774 + C24773) * C139575 + (C24778 + C24777) * C13591) *
                C13593) *
               C139403) *
              C825)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139457 * C555) * C5230 +
             (C554 * C116 + C139457 * C561) * C5225 - C584 * C5231 -
             C585 * C5226 + C586 * C5232 + C587 * C5227) *
                C13591 +
            (C584 * C5230 + C585 * C5225 - C586 * C5231 - C587 * C5226 +
             C588 * C5232 + C589 * C5227) *
                C139575) *
               C13593 +
           ((C20089 + C20090 - C20091 - C20092 + C20093 + C20094) * C13591 +
            (C20095 + C20096 - C20097 - C20098 + C20099 + C20100) * C139575) *
               C139586) *
              C9466 +
          (((C2408 * C5231 -
             ((C554 * C1777 + C139457 * C2383) * C5225 +
              (C554 * C1767 + C139457 * C2376) * C5230) +
             C2409 * C5226 - C2410 * C5232 - C2411 * C5227) *
                C13591 +
            (C2410 * C5231 - (C2409 * C5225 + C2408 * C5230) + C2411 * C5226 -
             C3950 * C5232 - C3951 * C5227) *
                C139575) *
               C13593 +
           ((C4916 * C5231 - (C19107 * C5225 + C19108 * C5230) + C4917 * C5226 -
             C4918 * C5232 - C4919 * C5227) *
                C13591 +
            (C4918 * C5231 - (C4917 * C5225 + C4916 * C5230) + C4919 * C5226 -
             (C554 * C4226 + C139457 * C4902) * C5232 -
             (C554 * C4234 + C139457 * C4906) * C5227) *
                C139575) *
               C139586) *
              C139403) *
         C139328) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139457 * C555) * C5913 +
             (C554 * C116 + C139457 * C561) * C139300) *
                C13591 +
            (C584 * C5913 + C585 * C139300) * C139575) *
               C13593 +
           ((C20819 + C20820) * C13591 + (C20821 + C20822) * C139575) *
               C139586) *
              C10809 -
          (((C21719 + C21720) * C139575 + (C21721 + C21722) * C13591) *
               C139586 +
           ((C2409 * C139300 + C2408 * C5913) * C139575 +
            ((C554 * C1777 + C139457 * C2383) * C139300 +
             (C554 * C1767 + C139457 * C2376) * C5913) *
                C13591) *
               C13593) *
              C10810 +
          ((((C554 * C1768 + C139457 * C2379) * C5913 +
             (C554 * C1783 + C139457 * C2387) * C139300) *
                C13591 +
            (C2412 * C5913 + C2413 * C139300) * C139575) *
               C13593 +
           ((C21731 + C21732) * C13591 + (C21727 + C21728) * C139575) *
               C139586) *
              C10811 -
          ((((C554 * C26832 + C139457 * C27252) * C139300 +
             (C554 * C26830 + C139457 * C27250) * C5913) *
                C139575 +
            ((C554 * C26833 + C139457 * C27253) * C139300 +
             (C554 * C26831 + C139457 * C27251) * C5913) *
                C13591) *
               C139586 +
           (((C554 * C10817 + C139457 * C11157) * C139300 +
             (C554 * C10814 + C139457 * C11154) * C5913) *
                C139575 +
            ((C554 * C10818 + C139457 * C11158) * C139300 +
             (C554 * C10815 + C139457 * C11155) * C5913) *
                C13591) *
               C13593) *
              C10812) *
         C139328) /
            (p * q * std::sqrt(p + q));
    d2eezy[27] +=
        (-std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139457 * C555) * C934 +
             (C554 * C182 + C139457 * C641) * C823 - C15060 * C935 -
             C15179 * C824 + C15063 * C936 + C15180 * C825) *
                C13591 +
            (C1562 + C1563 - C1564 - C1582 + C1567 + C1583) * C139575) *
               C13593 +
           ((C15060 * C934 + C15179 * C823 - C15063 * C935 - C15180 * C824 +
             C20833 * C936 + C20907 * C825) *
                C13591 +
            (C15172 + C15173 - C15174 - C15175 + C15176 + C15182) * C139575) *
               C139586) *
              C139300 * C9466 +
          (((C19108 * C935 -
             ((C554 * C1873 + C139457 * C2492) * C823 +
              (C554 * C1767 + C139457 * C2376) * C934) +
             C19250 * C824 - C24775 * C936 - C24881 * C825) *
                C13591 +
            (C4916 * C935 - (C2510 * C823 + C2408 * C934) + C5032 * C824 -
             C19109 * C936 - C19251 * C825) *
                C139575) *
               C13593 +
           ((C24775 * C935 - (C19250 * C823 + C19108 * C934) + C24881 * C824 -
             (C554 * C24129 + C139457 * C24765) * C936 -
             (C554 * C24247 + C139457 * C24876) * C825) *
                C13591 +
            (C19109 * C935 - (C5032 * C823 + C4916 * C934) + C19251 * C824 -
             (C554 * C24128 + C139457 * C24764) * C936 -
             (C554 * C24246 + C139457 * C24877) * C825) *
                C139575) *
               C139586) *
              C139300 * C139403)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((((C554 * C107 + C139457 * C555) * C181 +
              (C554 * C182 + C139457 * C641) * C139328) *
                 C13591 +
             (C648 + C664) * C139575) *
                C13593 +
            ((C15060 * C181 + C15179 * C139328) * C13591 +
             (C14134 + C14135) * C139575) *
                C139586) *
               C5225 -
           (((C14136 + C14137) * C139575 + (C14135 + C14134) * C13591) *
                C139586 +
            ((C665 + C651) * C139575 + (C664 + C648) * C13591) * C13593) *
               C5226 +
           ((C668 * C13591 + (C656 + C666) * C139575) * C13593 +
            ((C14137 + C14136) * C13591 + (C14138 + C14139) * C139575) *
                C139586) *
               C5227) *
              C9466 +
          ((((C2498 + C2514) * C13591 + (C2501 + C2515) * C139575) * C13593 +
            ((C16138 + C16139) * C13591 + (C18011 + C18012) * C139575) *
                C139586) *
               C5226 -
           (((C16139 + C16138) * C139575 +
             (C19250 * C139328 + C19108 * C181) * C13591) *
                C139586 +
            ((C2514 + C2498) * C139575 +
             ((C554 * C1873 + C139457 * C2492) * C139328 +
              (C554 * C1767 + C139457 * C2376) * C181) *
                 C13591) *
                C13593) *
               C5225 -
           ((((C554 * C4340 + C139457 * C5020) * C139328 +
              (C554 * C4226 + C139457 * C4902) * C181) *
                 C139575 +
             (C18012 + C18011) * C13591) *
                C139586 +
            ((C4032 + C4027) * C139575 + C4030 * C13591) * C13593) *
               C5227) *
              C139403)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139457 * C555) * C181 +
             (C554 * C182 + C139457 * C641) * C139328) *
                C13591 +
            (C648 + C664) * C139575) *
               C13593 +
           ((C15060 * C181 + C15179 * C139328) * C13591 +
            (C14134 + C14135) * C139575) *
               C139586) *
              C139300 * C10809 -
          (((C16139 + C16138) * C139575 +
            (C19250 * C139328 + C19108 * C181) * C13591) *
               C139586 +
           ((C2514 + C2498) * C139575 +
            ((C554 * C1873 + C139457 * C2492) * C139328 +
             (C554 * C1767 + C139457 * C2376) * C181) *
                C13591) *
               C13593) *
              C139300 * C10810 +
          ((((C554 * C1768 + C139457 * C2379) * C181 +
             (C554 * C1874 + C139457 * C2493) * C139328) *
                C13591 +
            (C2504 + C2516) * C139575) *
               C13593 +
           ((C21729 * C181 + C21835 * C139328) * C13591 +
            (C16140 + C16144) * C139575) *
               C139586) *
              C139300 * C10811 -
          ((((C554 * C26904 + C139457 * C27320) * C139328 +
             (C554 * C26830 + C139457 * C27250) * C181) *
                C139575 +
            ((C554 * C26905 + C139457 * C27321) * C139328 +
             (C554 * C26831 + C139457 * C27251) * C181) *
                C13591) *
               C139586 +
           (((C554 * C10876 + C139457 * C11210) * C139328 +
             (C554 * C10814 + C139457 * C11154) * C181) *
                C139575 +
            ((C554 * C10877 + C139457 * C11211) * C139328 +
             (C554 * C10815 + C139457 * C11155) * C181) *
                C13591) *
               C13593) *
              C139300 * C10812)) /
            (p * q * std::sqrt(p + q));
    d2eezz[27] +=
        (-std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139457 * C555) * C9616 +
             (C554 * C245 + C139457 * C719) * C9466 -
             (C554 * C1767 + C139457 * C2376) * C9617 -
             (C554 * C1965 + C139457 * C2591) * C139403) *
                C13591 +
            (C10079 + C10080 - C10081 - C10082) * C139575) *
               C13593 +
           ((C26753 + C26754 - C26755 - C26756) * C13591 +
            (C12158 + C12157 - C12156 - C12159) * C139575) *
               C139586) *
              C823 +
          (((C26755 - (C26754 + C26753) + C26756) * C13591 +
            (C12156 - (C12157 + C12158) + C12159) * C139575) *
               C13593 +
           ((C26757 - (C26758 + C26759) + C26760) * C13591 +
            (C26761 - (C26762 + C26763) + C26764) * C139575) *
               C139586) *
              C824 +
          (((C26759 + C26758 - C26757 - C26760) * C13591 +
            (C26763 + C26762 - C26761 - C26764) * C139575) *
               C13593 +
           ((C20833 * C9616 + C20979 * C9466 -
             (C554 * C24129 + C139457 * C24765) * C9617 -
             (C554 * C24355 + C139457 * C24979) * C139403) *
                C13591 +
            (C15064 * C9616 + C15296 * C9466 -
             (C554 * C24128 + C139457 * C24764) * C9617 -
             (C554 * C24354 + C139457 * C24980) * C139403) *
                C139575) *
               C139586) *
              C825) *
         C139300) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139457 * C555) * C9616 +
             (C554 * C245 + C139457 * C719) * C9466 -
             (C554 * C1767 + C139457 * C2376) * C9617 -
             (C554 * C1965 + C139457 * C2591) * C139403) *
                C13591 +
            (C10079 + C10080 - C10081 - C10082) * C139575) *
               C13593 +
           ((C15060 * C9616 + C15294 * C9466 - C19108 * C9617 -
             C19395 * C139403) *
                C13591 +
            (C12158 + C12157 - C12156 - C12159) * C139575) *
               C139586) *
              C139328 * C5225 +
          (((C10081 - (C10080 + C10079) + C10082) * C13591 +
            (C10085 - (C10084 + C10083) + C10086) * C139575) *
               C13593 +
           ((C12156 - (C12157 + C12158) + C12159) * C13591 +
            (C12160 - (C12161 + C12162) + C12163) * C139575) *
               C139586) *
              C139328 * C5226 +
          ((C10093 * C13591 + (C10089 + C10088 - C10087 - C10090) * C139575) *
               C13593 +
           ((C12162 + C12161 - C12160 - C12163) * C13591 +
            (C3202 * C9616 + C3376 * C9466 -
             (C554 * C4226 + C139457 * C4902) * C9617 -
             (C554 * C4446 + C139457 * C5136) * C139403) *
                C139575) *
               C139586) *
              C139328 * C5227)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C139457 * C555) * C10931 +
            (C554 * C245 + C139457 * C719) * C10809 -
            (C554 * C1767 + C139457 * C2376) * C10932 -
            (C554 * C1965 + C139457 * C2591) * C10810 +
            (C554 * C1768 + C139457 * C2379) * C10933 +
            (C554 * C1966 + C139457 * C2592) * C10811 -
            (C554 * C10815 + C139457 * C11155) * C10934 -
            (C554 * C10937 + C139457 * C11262) * C10812) *
               C13591 +
           (C584 * C10931 + C738 * C10809 - C2408 * C10932 - C2616 * C10810 +
            C2412 * C10933 + C2617 * C10811 -
            (C554 * C10814 + C139457 * C11154) * C10934 -
            (C554 * C10936 + C139457 * C11263) * C10812) *
               C139575) *
              C13593 +
          ((C15060 * C10931 + C15294 * C10809 - C19108 * C10932 -
            C19395 * C10810 + C21729 * C10933 + C21943 * C10811 -
            (C554 * C26831 + C139457 * C27251) * C10934 -
            (C554 * C26975 + C139457 * C27388) * C10812) *
               C13591 +
           (C1472 * C10931 + C1681 * C10809 - C4916 * C10932 - C5148 * C10810 +
            C16038 * C10933 + C16250 * C10811 -
            (C554 * C26830 + C139457 * C27250) * C10934 -
            (C554 * C26974 + C139457 * C27389) * C10812) *
               C139575) *
              C139586) *
         C139328 * C139300) /
            (p * q * std::sqrt(p + q));
    d2eexx[28] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139575 * C114) *
                C137108 +
            (C13595 * C116 + C13591 * C125 + C13596 * C117 + C139575 * C126) *
                C139552 -
            (C13596 * C109 + C139575 * C115 + C13595 * C108 + C13591 * C114) *
                C137101 -
            (C13596 * C118 + C139575 * C127 + C13595 * C117 + C13591 * C126) *
                C139305) *
               C13593 +
           ((C14336 + C14337) * C137108 + (C14338 + C14339) * C139552 -
            (C14340 + C14341) * C137101 - (C14342 + C14343) * C139305) *
               C139586) *
              C139457 * C139593 +
          (((C13595 * C1764 + C13591 * C1772 + C13596 * C1765 +
             C139575 * C1773) *
                C137101 -
            ((C13596 * C1776 + C139575 * C1789 + C13595 * C1777 +
              C13591 * C1790) *
                 C139552 +
             (C13596 * C1764 + C139575 * C1772 + C13595 * C1767 +
              C13591 * C1778) *
                 C137108) +
            (C13595 * C1776 + C13591 * C1789 + C13596 * C1775 +
             C139575 * C1788) *
                C139305) *
               C13593 +
           ((C18257 + C18258) * C137101 -
            ((C18259 + C18260) * C139552 + (C18261 + C18262) * C137108) +
            (C18263 + C18264) * C139305) *
               C139586) *
              C139457 * C139594 +
          (((C13595 * C1768 + C13591 * C1780 + C13596 * C1769 +
             C139575 * C1781) *
                C137108 +
            (C13595 * C1783 + C13591 * C1792 + C13596 * C1784 +
             C139575 * C1793) *
                C139552 -
            (C13596 * C1770 + C139575 * C1782 + C13595 * C1769 +
             C13591 * C1781) *
                C137101 -
            (C13596 * C1785 + C139575 * C1794 + C13595 * C1784 +
             C13591 * C1793) *
                C139305) *
               C13593 +
           ((C21095 + C21096) * C137108 + (C21097 + C21098) * C139552 -
            (C13596 * C6440 + C139575 * C6446 + C13595 * C6441 +
             C13591 * C6447) *
                C137101 -
            (C13596 * C6443 + C139575 * C6449 + C13595 * C6444 +
             C13591 * C6450) *
                C139305) *
               C139586) *
              C139457 * C12239) *
         C139328) /
        (p * q * std::sqrt(p + q));
    d2eexy[28] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139575 * C114) *
                 C181 +
             (C13595 * C182 + C13591 * C188 + C13596 * C183 + C139575 * C189) *
                 C139328) *
                C13593 +
            ((C14336 + C14337) * C181 + (C14467 + C14466) * C139328) *
                C139586) *
               C139457 * C139552 -
           (((C14471 + C14470) * C139328 + (C14340 + C14341) * C181) * C139586 +
            ((C13596 * C184 + C139575 * C190 + C13595 * C183 + C13591 * C189) *
                 C139328 +
             (C13596 * C109 + C139575 * C115 + C13595 * C108 + C13591 * C114) *
                 C181) *
                C13593) *
               C139457 * C139305) *
              C139593 +
          ((((C13595 * C1764 + C13591 * C1772 + C13596 * C1765 +
              C139575 * C1773) *
                 C181 +
             (C13595 * C1870 + C13591 * C1878 + C13596 * C1871 +
              C139575 * C1879) *
                 C139328) *
                C13593 +
            ((C18257 + C18258) * C181 + (C18406 + C18405) * C139328) *
                C139586) *
               C139457 * C139305 -
           (((C18404 + C18403) * C139328 + (C18261 + C18262) * C181) * C139586 +
            ((C13596 * C1870 + C139575 * C1878 + C13595 * C1873 +
              C13591 * C1881) *
                 C139328 +
             (C13596 * C1764 + C139575 * C1772 + C13595 * C1767 +
              C13591 * C1778) *
                 C181) *
                C13593) *
               C139457 * C139552) *
              C139594 +
          ((((C13595 * C1768 + C13591 * C1780 + C13596 * C1769 +
              C139575 * C1781) *
                 C181 +
             (C13595 * C1874 + C13591 * C1882 + C13596 * C1875 +
              C139575 * C1883) *
                 C139328) *
                C13593 +
            ((C21095 + C21096) * C181 + (C21206 + C21205) * C139328) *
                C139586) *
               C139457 * C139552 -
           (((C13596 * C6526 + C139575 * C6529 + C13595 * C6527 +
              C13591 * C6530) *
                 C139328 +
             (C13596 * C6440 + C139575 * C6446 + C13595 * C6441 +
              C13591 * C6447) *
                 C181) *
                C139586 +
            ((C13596 * C1876 + C139575 * C1884 + C13595 * C1875 +
              C13591 * C1883) *
                 C139328 +
             (C13596 * C1770 + C139575 * C1782 + C13595 * C1769 +
              C13591 * C1781) *
                 C181) *
                C13593) *
               C139457 * C139305) *
              C12239)) /
        (p * q * std::sqrt(p + q));
    d2eexz[28] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139575 * C114) *
                C12388 +
            (C13595 * C245 + C13591 * C251 + C13596 * C246 + C139575 * C252) *
                C139593 -
            (C13596 * C1764 + C139575 * C1772 + C13595 * C1767 +
             C13591 * C1778) *
                C12389 -
            (C13596 * C1964 + C139575 * C1972 + C13595 * C1965 +
             C13591 * C1973) *
                C139594 +
            (C13595 * C1768 + C13591 * C1780 + C13596 * C1769 +
             C139575 * C1781) *
                C12390 +
            (C13595 * C1966 + C13591 * C1974 + C13596 * C1967 +
             C139575 * C1975) *
                C12239) *
               C13593 +
           ((C14336 + C14337) * C12388 + (C14588 + C14589) * C139593 -
            (C18261 + C18262) * C12389 - (C18545 + C18546) * C139594 +
            (C21095 + C21096) * C12390 + (C21313 + C21314) * C12239) *
               C139586) *
              C139457 * C139328 * C139552 +
          (((C13595 * C1764 + C13591 * C1772 + C13596 * C1765 +
             C139575 * C1773) *
                C12389 -
            ((C13596 * C247 + C139575 * C253 + C13595 * C246 + C13591 * C252) *
                 C139593 +
             (C13596 * C109 + C139575 * C115 + C13595 * C108 + C13591 * C114) *
                 C12388) +
            (C13595 * C1964 + C13591 * C1972 + C13596 * C1963 +
             C139575 * C1971) *
                C139594 -
            (C13596 * C1770 + C139575 * C1782 + C13595 * C1769 +
             C13591 * C1781) *
                C12390 -
            (C13596 * C1968 + C139575 * C1976 + C13595 * C1967 +
             C13591 * C1975) *
                C12239) *
               C13593 +
           ((C18257 + C18258) * C12389 -
            ((C14593 + C14592) * C139593 + (C14340 + C14341) * C12388) +
            (C18547 + C18548) * C139594 -
            (C13596 * C6440 + C139575 * C6446 + C13595 * C6441 +
             C13591 * C6447) *
                C12390 -
            (C13596 * C6606 + C139575 * C6609 + C13595 * C6607 +
             C13591 * C6610) *
                C12239) *
               C139586) *
              C139457 * C139328 * C139305)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[28] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C831 + C139586 * C1118) *
                C137108 +
            (C13795 * C116 + C13593 * C314 + C13796 * C841 + C139586 * C1125) *
                C139552 -
            (C13822 + C13823) * C137101 - (C13824 + C13825) * C139305) *
               C139457 * C13591 +
           ((C13823 + C13822) * C137108 + (C13825 + C13824) * C139552 -
            (C13827 + C13826) * C137101 - (C13829 + C13828) * C139305) *
               C139457 * C139575) *
              C139593 +
          (((C15708 + C15709) * C137101 -
            ((C13796 * C4230 + C139586 * C4553 + C13795 * C1777 +
              C13593 * C2061) *
                 C139552 +
             (C13796 * C4223 + C139586 * C4549 + C13795 * C1767 +
              C13593 * C2054) *
                 C137108) +
            (C15710 + C15711) * C139305) *
               C139457 * C13591 +
           ((C17604 + C17603) * C137101 -
            ((C15711 + C15710) * C139552 + (C15709 + C15708) * C137108) +
            (C17606 + C17605) * C139305) *
               C139457 * C139575) *
              C139594 +
          (((C13795 * C1768 + C13593 * C2057 + C13796 * C6442 +
             C139586 * C6688) *
                C137108 +
            (C13795 * C1783 + C13593 * C2065 + C13796 * C6445 +
             C139586 * C6691) *
                C139552 -
            (C15712 + C15713) * C137101 - (C15714 + C15715) * C139305) *
               C139457 * C13591 +
           ((C15713 + C15712) * C137108 + (C15715 + C15714) * C139552 -
            (C13796 * C6440 + C139586 * C6686 + C13795 * C1770 +
             C13593 * C2059) *
                C137101 -
            (C13796 * C6443 + C139586 * C6689 + C13795 * C1785 +
             C13593 * C2067) *
                C139305) *
               C139457 * C139575) *
              C12239) *
         C139328) /
        (p * q * std::sqrt(p + q));
    d2eeyy[28] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13795 * C107 + C13593 * C308 + C13796 * C831 + C139586 * C1118) *
                 C181 +
             (C13795 * C182 + C13593 * C394 + C13796 * C939 + C139586 * C1231) *
                 C139328) *
                C139457 * C13591 +
            ((C13823 + C13822) * C181 + (C13912 + C13913) * C139328) * C139457 *
                C139575) *
               C139552 -
           (((C13914 + C13915) * C139328 + (C13827 + C13826) * C181) * C139457 *
                C139575 +
            ((C13913 + C13912) * C139328 + (C13822 + C13823) * C181) * C139457 *
                C13591) *
               C139305) *
              C139593 +
          ((((C15708 + C15709) * C181 + (C15822 + C15823) * C139328) * C139457 *
                C13591 +
            ((C17604 + C17603) * C181 + (C17709 + C17710) * C139328) * C139457 *
                C139575) *
               C139305 -
           (((C15823 + C15822) * C139328 + (C15709 + C15708) * C181) * C139457 *
                C139575 +
            ((C13796 * C4337 + C139586 * C4667 + C13795 * C1873 +
              C13593 * C2170) *
                 C139328 +
             (C13796 * C4223 + C139586 * C4549 + C13795 * C1767 +
              C13593 * C2054) *
                 C181) *
                C139457 * C13591) *
               C139552) *
              C139594 +
          ((((C13795 * C1768 + C13593 * C2057 + C13796 * C6442 +
              C139586 * C6688) *
                 C181 +
             (C13795 * C1874 + C13593 * C2171 + C13796 * C6528 +
              C139586 * C6766) *
                 C139328) *
                C139457 * C13591 +
            ((C15713 + C15712) * C181 + (C15824 + C15825) * C139328) * C139457 *
                C139575) *
               C139552 -
           (((C13796 * C6526 + C139586 * C6768 + C13795 * C1876 +
              C13593 * C2173) *
                 C139328 +
             (C13796 * C6440 + C139586 * C6686 + C13795 * C1770 +
              C13593 * C2059) *
                 C181) *
                C139457 * C139575 +
            ((C15825 + C15824) * C139328 + (C15712 + C15713) * C181) * C139457 *
                C13591) *
               C139305) *
              C12239)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[28] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C831 + C139586 * C1118) *
                C12388 +
            (C13795 * C245 + C13593 * C474 + C13796 * C1029 + C139586 * C1339) *
                C139593 -
            (C13796 * C4223 + C139586 * C4549 + C13795 * C1767 +
             C13593 * C2054) *
                C12389 -
            (C13796 * C4443 + C139586 * C4783 + C13795 * C1965 +
             C13593 * C2269) *
                C139594 +
            (C13795 * C1768 + C13593 * C2057 + C13796 * C6442 +
             C139586 * C6688) *
                C12390 +
            (C13795 * C1966 + C13593 * C2270 + C13796 * C6608 +
             C139586 * C6843) *
                C12239) *
               C139457 * C13591 +
           ((C13823 + C13822) * C12388 + (C13996 + C13997) * C139593 -
            (C15709 + C15708) * C12389 - (C15932 + C15933) * C139594 +
            (C15713 + C15712) * C12390 + (C15934 + C15935) * C12239) *
               C139457 * C139575) *
              C139328 * C139552 +
          (((C15708 + C15709) * C12389 -
            ((C13997 + C13996) * C139593 + (C13822 + C13823) * C12388) +
            (C15933 + C15932) * C139594 - (C15712 + C15713) * C12390 -
            (C15935 + C15934) * C12239) *
               C139457 * C13591 +
           ((C17604 + C17603) * C12389 -
            ((C13998 + C13999) * C139593 + (C13827 + C13826) * C12388) +
            (C17813 + C17814) * C139594 -
            (C13796 * C6440 + C139586 * C6686 + C13795 * C1770 +
             C13593 * C2059) *
                C12390 -
            (C13796 * C6606 + C139586 * C6845 + C13795 * C1968 +
             C13593 * C2274) *
                C12239) *
               C139457 * C139575) *
              C139328 * C139305)) /
        (p * q * std::sqrt(p + q));
    d2eezx[28] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C554 * C107 + C139457 * C555) * C137108 +
                       (C554 * C116 + C139457 * C561) * C139552 -
                       C584 * C137101 - C585 * C139305) *
                          C13591 +
                      (C584 * C137108 + C585 * C139552 - C586 * C137101 -
                       C587 * C139305) *
                          C139575) *
                         C13593 +
                     ((C22631 + C22632 - C22633 - C22634) * C13591 +
                      (C22635 + C22636 - C22637 - C22638) * C139575) *
                         C139586) *
                        C139593 +
                    (((C2408 * C137101 -
                       ((C554 * C1777 + C139457 * C2383) * C139552 +
                        (C554 * C1767 + C139457 * C2376) * C137108) +
                       C2409 * C139305) *
                          C13591 +
                      (C2410 * C137101 - (C2409 * C139552 + C2408 * C137108) +
                       C2411 * C139305) *
                          C139575) *
                         C13593 +
                     ((C23759 - (C23760 + C23761) + C23762) * C13591 +
                      (C23763 - (C23764 + C23765) + C23766) * C139575) *
                         C139586) *
                        C139594 +
                    ((((C554 * C1768 + C139457 * C2379) * C137108 +
                       (C554 * C1783 + C139457 * C2387) * C139552 -
                       C2412 * C137101 - C2413 * C139305) *
                          C13591 +
                      (C2412 * C137108 + C2413 * C139552 - C2414 * C137101 -
                       C2415 * C139305) *
                          C139575) *
                         C13593 +
                     ((C21729 * C137108 + C21730 * C139552 - C16038 * C137101 -
                       C16039 * C139305) *
                          C13591 +
                      (C16038 * C137108 + C16039 * C139552 -
                       (C554 * C6440 + C139457 * C6920) * C137101 -
                       (C554 * C6443 + C139457 * C6923) * C139305) *
                          C139575) *
                         C139586) *
                        C12239) *
                   C139328) /
                  (p * q * std::sqrt(p + q));
    d2eezy[28] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C554 * C107 + C139457 * C555) * C181 +
              (C554 * C182 + C139457 * C641) * C139328) *
                 C13591 +
             (C648 + C664) * C139575) *
                C13593 +
            ((C15060 * C181 + C15179 * C139328) * C13591 +
             (C14134 + C14135) * C139575) *
                C139586) *
               C139552 -
           (((C14136 + C14137) * C139575 + (C14135 + C14134) * C13591) *
                C139586 +
            ((C665 + C651) * C139575 + (C664 + C648) * C13591) * C13593) *
               C139305) *
              C139593 +
          ((((C2498 + C2514) * C13591 + (C2501 + C2515) * C139575) * C13593 +
            ((C16138 + C16139) * C13591 + (C18011 + C18012) * C139575) *
                C139586) *
               C139305 -
           (((C16139 + C16138) * C139575 +
             (C19250 * C139328 + C19108 * C181) * C13591) *
                C139586 +
            ((C2514 + C2498) * C139575 +
             ((C554 * C1873 + C139457 * C2492) * C139328 +
              (C554 * C1767 + C139457 * C2376) * C181) *
                 C13591) *
                C13593) *
               C139552) *
              C139594 +
          (((((C554 * C1768 + C139457 * C2379) * C181 +
              (C554 * C1874 + C139457 * C2493) * C139328) *
                 C13591 +
             (C2504 + C2516) * C139575) *
                C13593 +
            ((C21729 * C181 + C21835 * C139328) * C13591 +
             (C16140 + C16144) * C139575) *
                C139586) *
               C139552 -
           ((((C554 * C6526 + C139457 * C7002) * C139328 +
              (C554 * C6440 + C139457 * C6920) * C181) *
                 C139575 +
             (C16144 + C16140) * C13591) *
                C139586 +
            ((C2517 + C2507) * C139575 + (C2516 + C2504) * C13591) * C13593) *
               C139305) *
              C12239)) /
        (p * q * std::sqrt(p + q));
    d2eezz[28] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139457 * C555) * C12388 +
             (C554 * C245 + C139457 * C719) * C139593 -
             (C554 * C1767 + C139457 * C2376) * C12389 -
             (C554 * C1965 + C139457 * C2591) * C139594 +
             (C554 * C1768 + C139457 * C2379) * C12390 +
             (C554 * C1966 + C139457 * C2592) * C12239) *
                C13591 +
            (C12848 + C12849 - C12850 - C12851 + C12852 + C12853) * C139575) *
               C13593 +
           ((C15060 * C12388 + C15294 * C139593 - C19108 * C12389 -
             C19395 * C139594 + C21729 * C12390 + C21943 * C12239) *
                C13591 +
            (C29449 + C29450 - C29451 - C29452 + C29453 + C29454) * C139575) *
               C139586) *
              C139328 * C139552 +
          (((C12850 - (C12849 + C12848) + C12851 - C12852 - C12853) * C13591 +
            (C12856 - (C12855 + C12854) + C12857 - C12858 - C12859) * C139575) *
               C13593 +
           ((C29451 - (C29450 + C29449) + C29452 - C29453 - C29454) * C13591 +
            (C4918 * C12389 - (C1680 * C139593 + C1474 * C12388) +
             C5149 * C139594 - (C554 * C6440 + C139457 * C6920) * C12390 -
             (C554 * C6606 + C139457 * C7079) * C12239) *
                C139575) *
               C139586) *
              C139328 * C139305)) /
        (p * q * std::sqrt(p + q));
    d2eexx[29] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139575 * C114) *
                C5230 +
            (C13595 * C116 + C13591 * C125 + C13596 * C117 + C139575 * C126) *
                C5225 -
            (C13596 * C109 + C139575 * C115 + C13595 * C108 + C13591 * C114) *
                C5231 -
            (C13596 * C118 + C139575 * C127 + C13595 * C117 + C13591 * C126) *
                C5226 +
            (C13595 * C109 + C13591 * C115 + C13596 * C110 + C139575 * C119) *
                C5232 +
            (C13595 * C118 + C13591 * C127 + C13596 * C120 + C139575 * C128) *
                C5227) *
               C13593 +
           ((C14336 + C14337) * C5230 + (C14338 + C14339) * C5225 -
            (C14340 + C14341) * C5231 - (C14342 + C14343) * C5226 +
            (C16358 + C16359) * C5232 + (C16360 + C16361) * C5227) *
               C139586) *
              C139457 * C9466 +
          (((C13595 * C1764 + C13591 * C1772 + C13596 * C1765 +
             C139575 * C1773) *
                C5231 -
            ((C13596 * C1776 + C139575 * C1789 + C13595 * C1777 +
              C13591 * C1790) *
                 C5225 +
             (C13596 * C1764 + C139575 * C1772 + C13595 * C1767 +
              C13591 * C1778) *
                 C5230) +
            (C13595 * C1776 + C13591 * C1789 + C13596 * C1775 +
             C139575 * C1788) *
                C5226 -
            (C13596 * C1766 + C139575 * C1774 + C13595 * C1765 +
             C13591 * C1773) *
                C5232 -
            (C13596 * C1779 + C139575 * C1791 + C13595 * C1775 +
             C13591 * C1788) *
                C5227) *
               C13593 +
           ((C18257 + C18258) * C5231 -
            ((C18259 + C18260) * C5225 + (C18261 + C18262) * C5230) +
            (C18263 + C18264) * C5226 -
            (C13596 * C4226 + C139575 * C4233 + C13595 * C4225 +
             C13591 * C4229) *
                C5232 -
            (C13596 * C4234 + C139575 * C4238 + C13595 * C4232 +
             C13591 * C4237) *
                C5227) *
               C139586) *
              C139457 * C139403) *
         C139328) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139575 * C114) *
                 C5913 +
             (C13595 * C116 + C13591 * C125 + C13596 * C117 + C139575 * C126) *
                 C139300) *
                C13593 +
            ((C14336 + C14337) * C5913 + (C14338 + C14339) * C139300) *
                C139586) *
               C139457 * C9466 -
           (((C18259 + C18260) * C139300 + (C18261 + C18262) * C5913) *
                C139586 +
            ((C13596 * C1776 + C139575 * C1789 + C13595 * C1777 +
              C13591 * C1790) *
                 C139300 +
             (C13596 * C1764 + C139575 * C1772 + C13595 * C1767 +
              C13591 * C1778) *
                 C5913) *
                C13593) *
               C139457 * C139403) *
              C823 +
          ((((C18262 + C18261) * C5913 + (C18260 + C18259) * C139300) * C13593 +
            ((C24145 + C24146) * C5913 + (C24147 + C24148) * C139300) *
                C139586) *
               C139457 * C139403 -
           (((C14346 + C14347) * C139300 + (C14348 + C14349) * C5913) *
                C139586 +
            ((C14339 + C14338) * C139300 + (C14337 + C14336) * C5913) *
                C13593) *
               C139457 * C9466) *
              C824 +
          ((((C14349 + C14348) * C5913 + (C14347 + C14346) * C139300) * C13593 +
            ((C20387 + C20388) * C5913 + (C20389 + C20390) * C139300) *
                C139586) *
               C139457 * C9466 -
           (((C13596 * C24130 + C139575 * C24134 + C13595 * C24131 +
              C13591 * C24135) *
                 C139300 +
             (C13596 * C24128 + C139575 * C24132 + C13595 * C24129 +
              C13591 * C24133) *
                 C5913) *
                C139586 +
            ((C24148 + C24147) * C139300 + (C24146 + C24145) * C5913) *
                C13593) *
               C139457 * C139403) *
              C825)) /
            (p * q * std::sqrt(p + q));
    d2eexy[29] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139575 * C114) *
                 C181 +
             (C13595 * C182 + C13591 * C188 + C13596 * C183 + C139575 * C189) *
                 C139328) *
                C13593 +
            ((C14336 + C14337) * C181 + (C14467 + C14466) * C139328) *
                C139586) *
               C139457 * C5225 -
           (((C14471 + C14470) * C139328 + (C14340 + C14341) * C181) * C139586 +
            ((C13596 * C184 + C139575 * C190 + C13595 * C183 + C13591 * C189) *
                 C139328 +
             (C13596 * C109 + C139575 * C115 + C13595 * C108 + C13591 * C114) *
                 C181) *
                C13593) *
               C139457 * C5226 +
           (((C13595 * C109 + C13591 * C115 + C13596 * C110 + C139575 * C119) *
                 C181 +
             (C13595 * C184 + C13591 * C190 + C13596 * C185 + C139575 * C191) *
                 C139328) *
                C13593 +
            ((C16358 + C16359) * C181 + (C16465 + C16464) * C139328) *
                C139586) *
               C139457 * C5227) *
              C9466 +
          ((((C13595 * C1764 + C13591 * C1772 + C13596 * C1765 +
              C139575 * C1773) *
                 C181 +
             (C13595 * C1870 + C13591 * C1878 + C13596 * C1871 +
              C139575 * C1879) *
                 C139328) *
                C13593 +
            ((C18257 + C18258) * C181 + (C18406 + C18405) * C139328) *
                C139586) *
               C139457 * C5226 -
           (((C18404 + C18403) * C139328 + (C18261 + C18262) * C181) * C139586 +
            ((C13596 * C1870 + C139575 * C1878 + C13595 * C1873 +
              C13591 * C1881) *
                 C139328 +
             (C13596 * C1764 + C139575 * C1772 + C13595 * C1767 +
              C13591 * C1778) *
                 C181) *
                C13593) *
               C139457 * C5225 -
           (((C13596 * C4340 + C139575 * C4344 + C13595 * C4339 +
              C13591 * C4343) *
                 C139328 +
             (C13596 * C4226 + C139575 * C4233 + C13595 * C4225 +
              C13591 * C4229) *
                 C181) *
                C139586 +
            ((C13596 * C1872 + C139575 * C1880 + C13595 * C1871 +
              C13591 * C1879) *
                 C139328 +
             (C13596 * C1766 + C139575 * C1774 + C13595 * C1765 +
              C13591 * C1773) *
                 C181) *
                C13593) *
               C139457 * C5227) *
              C139403)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139575 * C114) *
                C934 +
            (C13595 * C182 + C13591 * C188 + C13596 * C183 + C139575 * C189) *
                C823 -
            (C14337 + C14336) * C935 - (C14466 + C14467) * C824 +
            (C14349 + C14348) * C936 + (C14468 + C14469) * C825) *
               C13593 +
           ((C14336 + C14337) * C934 + (C14467 + C14466) * C823 -
            (C14348 + C14349) * C935 - (C14469 + C14468) * C824 +
            (C20387 + C20388) * C936 + (C20466 + C20465) * C825) *
               C139586) *
              C139457 * C139300 * C9466 +
          (((C18262 + C18261) * C935 -
            ((C13596 * C1870 + C139575 * C1878 + C13595 * C1873 +
              C13591 * C1881) *
                 C823 +
             (C13596 * C1764 + C139575 * C1772 + C13595 * C1767 +
              C13591 * C1778) *
                 C934) +
            (C18403 + C18404) * C824 - (C24146 + C24145) * C936 -
            (C24255 + C24256) * C825) *
               C13593 +
           ((C24145 + C24146) * C935 -
            ((C18404 + C18403) * C823 + (C18261 + C18262) * C934) +
            (C24256 + C24255) * C824 -
            (C13596 * C24128 + C139575 * C24132 + C13595 * C24129 +
             C13591 * C24133) *
                C936 -
            (C13596 * C24246 + C139575 * C24248 + C13595 * C24247 +
             C13591 * C24249) *
                C825) *
               C139586) *
              C139457 * C139300 * C139403)) /
            (p * q * std::sqrt(p + q));
    d2eexz[29] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139575 * C114) *
                C9616 +
            (C13595 * C245 + C13591 * C251 + C13596 * C246 + C139575 * C252) *
                C9466 -
            (C13596 * C1764 + C139575 * C1772 + C13595 * C1767 +
             C13591 * C1778) *
                C9617 -
            (C13596 * C1964 + C139575 * C1972 + C13595 * C1965 +
             C13591 * C1973) *
                C139403) *
               C13593 +
           ((C14336 + C14337) * C9616 + (C14588 + C14589) * C9466 -
            (C18261 + C18262) * C9617 - (C18545 + C18546) * C139403) *
               C139586) *
              C139457 * C139328 * C5225 +
          (((C13595 * C1764 + C13591 * C1772 + C13596 * C1765 +
             C139575 * C1773) *
                C9617 -
            ((C13596 * C247 + C139575 * C253 + C13595 * C246 + C13591 * C252) *
                 C9466 +
             (C13596 * C109 + C139575 * C115 + C13595 * C108 + C13591 * C114) *
                 C9616) +
            (C13595 * C1964 + C13591 * C1972 + C13596 * C1963 +
             C139575 * C1971) *
                C139403) *
               C13593 +
           ((C18257 + C18258) * C9617 -
            ((C14593 + C14592) * C9466 + (C14340 + C14341) * C9616) +
            (C18547 + C18548) * C139403) *
               C139586) *
              C139457 * C139328 * C5226 +
          (((C13595 * C109 + C13591 * C115 + C13596 * C110 + C139575 * C119) *
                C9616 +
            (C13595 * C247 + C13591 * C253 + C13596 * C248 + C139575 * C254) *
                C9466 -
            (C13596 * C1766 + C139575 * C1774 + C13595 * C1765 +
             C13591 * C1773) *
                C9617 -
            (C13596 * C1969 + C139575 * C1977 + C13595 * C1963 +
             C13591 * C1971) *
                C139403) *
               C13593 +
           ((C16358 + C16359) * C9616 + (C16568 + C16569) * C9466 -
            (C13596 * C4226 + C139575 * C4233 + C13595 * C4225 +
             C13591 * C4229) *
                C9617 -
            (C13596 * C4446 + C139575 * C4450 + C13595 * C4445 +
             C13591 * C4449) *
                C139403) *
               C139586) *
              C139457 * C139328 * C5227)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139575 * C114) *
                C9616 +
            (C13595 * C245 + C13591 * C251 + C13596 * C246 + C139575 * C252) *
                C9466 -
            (C13596 * C1764 + C139575 * C1772 + C13595 * C1767 +
             C13591 * C1778) *
                C9617 -
            (C13596 * C1964 + C139575 * C1972 + C13595 * C1965 +
             C13591 * C1973) *
                C139403) *
               C13593 +
           ((C14336 + C14337) * C9616 + (C14588 + C14589) * C9466 -
            (C18261 + C18262) * C9617 - (C18545 + C18546) * C139403) *
               C139586) *
              C139457 * C823 +
          (((C18262 + C18261) * C9617 -
            ((C14589 + C14588) * C9466 + (C14337 + C14336) * C9616) +
            (C18546 + C18545) * C139403) *
               C13593 +
           ((C24145 + C24146) * C9617 -
            ((C14590 + C14591) * C9466 + (C14348 + C14349) * C9616) +
            (C24363 + C24364) * C139403) *
               C139586) *
              C139457 * C824 +
          (((C14349 + C14348) * C9616 + (C14591 + C14590) * C9466 -
            (C24146 + C24145) * C9617 - (C24364 + C24363) * C139403) *
               C13593 +
           ((C20387 + C20388) * C9616 + (C20541 + C20542) * C9466 -
            (C13596 * C24128 + C139575 * C24132 + C13595 * C24129 +
             C13591 * C24133) *
                C9617 -
            (C13596 * C24354 + C139575 * C24356 + C13595 * C24355 +
             C13591 * C24357) *
                C139403) *
               C139586) *
              C139457 * C825) *
         C139300) /
            (p * q * std::sqrt(p + q));
    d2eeyx[29] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C831 + C139586 * C1118) *
                C5230 +
            (C13795 * C116 + C13593 * C314 + C13796 * C841 + C139586 * C1125) *
                C5225 -
            (C13822 + C13823) * C5231 - (C13824 + C13825) * C5226 +
            (C13826 + C13827) * C5232 + (C13828 + C13829) * C5227) *
               C139457 * C13591 +
           ((C13823 + C13822) * C5230 + (C13825 + C13824) * C5225 -
            (C13827 + C13826) * C5231 - (C13829 + C13828) * C5226 +
            (C13831 + C13830) * C5232 + (C13833 + C13832) * C5227) *
               C139457 * C139575) *
              C9466 +
          (((C15708 + C15709) * C5231 -
            ((C13796 * C4230 + C139586 * C4553 + C13795 * C1777 +
              C13593 * C2061) *
                 C5225 +
             (C13796 * C4223 + C139586 * C4549 + C13795 * C1767 +
              C13593 * C2054) *
                 C5230) +
            (C15710 + C15711) * C5226 - (C17603 + C17604) * C5232 -
            (C17605 + C17606) * C5227) *
               C139457 * C13591 +
           ((C17604 + C17603) * C5231 -
            ((C15711 + C15710) * C5225 + (C15709 + C15708) * C5230) +
            (C17606 + C17605) * C5226 -
            (C13796 * C4226 + C139586 * C4552 + C13795 * C1766 +
             C13593 * C2056) *
                C5232 -
            (C13796 * C4234 + C139586 * C4556 + C13795 * C1779 +
             C13593 * C2064) *
                C5227) *
               C139457 * C139575) *
              C139403) *
         C139328) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13795 * C107 + C13593 * C308 + C13796 * C831 + C139586 * C1118) *
                 C5913 +
             (C13795 * C116 + C13593 * C314 + C13796 * C841 + C139586 * C1125) *
                 C139300) *
                C139457 * C13591 +
            ((C13823 + C13822) * C5913 + (C13825 + C13824) * C139300) *
                C139457 * C139575) *
               C9466 -
           (((C15711 + C15710) * C139300 + (C15709 + C15708) * C5913) *
                C139457 * C139575 +
            ((C13796 * C4230 + C139586 * C4553 + C13795 * C1777 +
              C13593 * C2061) *
                 C139300 +
             (C13796 * C4223 + C139586 * C4549 + C13795 * C1767 +
              C13593 * C2054) *
                 C5913) *
                C139457 * C13591) *
               C139403) *
              C823 +
          ((((C13795 * C4223 + C13593 * C4549 + C13796 * C8754 +
              C139586 * C9000) *
                 C5913 +
             (C13795 * C4230 + C13593 * C4553 + C13796 * C8757 +
              C139586 * C9003) *
                 C139300) *
                C139457 * C13591 +
            ((C18688 + C18687) * C5913 + (C18690 + C18689) * C139300) *
                C139457 * C139575) *
               C139403 -
           (((C14713 + C14712) * C139300 + (C14711 + C14710) * C5913) *
                C139457 * C139575 +
            ((C13796 * C847 + C139586 * C1129 + C13795 * C841 +
              C13593 * C1125) *
                 C139300 +
             (C13796 * C832 + C139586 * C1121 + C13795 * C831 +
              C13593 * C1118) *
                 C5913) *
                C139457 * C13591) *
               C9466) *
              C824 +
          ((((C13795 * C832 + C13593 * C1121 + C13796 * C5916 +
              C139586 * C6094) *
                 C5913 +
             (C13795 * C847 + C13593 * C1129 + C13796 * C5919 +
              C139586 * C6097) *
                 C139300) *
                C139457 * C13591 +
            ((C14715 + C14714) * C5913 + (C14717 + C14716) * C139300) *
                C139457 * C139575) *
               C9466 -
           (((C13796 * C24130 + C139586 * C24464 + C13795 * C8756 +
              C13593 * C9002) *
                 C139300 +
             (C13796 * C24128 + C139586 * C24462 + C13795 * C8753 +
              C13593 * C8999) *
                 C5913) *
                C139457 * C139575 +
            ((C13796 * C24131 + C139586 * C24465 + C13795 * C8757 +
              C13593 * C9003) *
                 C139300 +
             (C13796 * C24129 + C139586 * C24463 + C13795 * C8754 +
              C13593 * C9000) *
                 C5913) *
                C139457 * C13591) *
               C139403) *
              C825)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[29] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13795 * C107 + C13593 * C308 + C13796 * C831 + C139586 * C1118) *
                 C181 +
             (C13795 * C182 + C13593 * C394 + C13796 * C939 + C139586 * C1231) *
                 C139328) *
                C139457 * C13591 +
            ((C13823 + C13822) * C181 + (C13912 + C13913) * C139328) * C139457 *
                C139575) *
               C5225 -
           (((C13914 + C13915) * C139328 + (C13827 + C13826) * C181) * C139457 *
                C139575 +
            ((C13913 + C13912) * C139328 + (C13822 + C13823) * C181) * C139457 *
                C13591) *
               C5226 +
           (((C13826 + C13827) * C181 + (C13915 + C13914) * C139328) * C139457 *
                C13591 +
            ((C13831 + C13830) * C181 + (C13916 + C13917) * C139328) * C139457 *
                C139575) *
               C5227) *
              C9466 +
          ((((C15708 + C15709) * C181 + (C15822 + C15823) * C139328) * C139457 *
                C13591 +
            ((C17604 + C17603) * C181 + (C17709 + C17710) * C139328) * C139457 *
                C139575) *
               C5226 -
           (((C15823 + C15822) * C139328 + (C15709 + C15708) * C181) * C139457 *
                C139575 +
            ((C13796 * C4337 + C139586 * C4667 + C13795 * C1873 +
              C13593 * C2170) *
                 C139328 +
             (C13796 * C4223 + C139586 * C4549 + C13795 * C1767 +
              C13593 * C2054) *
                 C181) *
                C139457 * C13591) *
               C5225 -
           (((C13796 * C4340 + C139586 * C4670 + C13795 * C1872 +
              C13593 * C2169) *
                 C139328 +
             (C13796 * C4226 + C139586 * C4552 + C13795 * C1766 +
              C13593 * C2056) *
                 C181) *
                C139457 * C139575 +
            ((C17710 + C17709) * C139328 + (C17603 + C17604) * C181) * C139457 *
                C13591) *
               C5227) *
              C139403)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C831 + C139586 * C1118) *
                C934 +
            (C13795 * C182 + C13593 * C394 + C13796 * C939 + C139586 * C1231) *
                C823 -
            (C13796 * C832 + C139586 * C1121 + C13795 * C831 + C13593 * C1118) *
                C935 -
            (C13796 * C940 + C139586 * C1232 + C13795 * C939 + C13593 * C1231) *
                C824 +
            (C13795 * C832 + C13593 * C1121 + C13796 * C5916 +
             C139586 * C6094) *
                C936 +
            (C13795 * C940 + C13593 * C1232 + C13796 * C5982 +
             C139586 * C6148) *
                C825) *
               C139457 * C13591 +
           ((C13823 + C13822) * C934 + (C13912 + C13913) * C823 -
            (C14711 + C14710) * C935 - (C14824 + C14825) * C824 +
            (C14715 + C14714) * C936 + (C14826 + C14827) * C825) *
               C139457 * C139575) *
              C139300 * C9466 +
          (((C13795 * C4223 + C13593 * C4549 + C13796 * C8754 +
             C139586 * C9000) *
                C935 -
            ((C13796 * C4337 + C139586 * C4667 + C13795 * C1873 +
              C13593 * C2170) *
                 C823 +
             (C13796 * C4223 + C139586 * C4549 + C13795 * C1767 +
              C13593 * C2054) *
                 C934) +
            (C13795 * C4337 + C13593 * C4667 + C13796 * C8840 +
             C139586 * C9078) *
                C824 -
            (C13796 * C24129 + C139586 * C24463 + C13795 * C8754 +
             C13593 * C9000) *
                C936 -
            (C13796 * C24247 + C139586 * C24564 + C13795 * C8840 +
             C13593 * C9078) *
                C825) *
               C139457 * C13591 +
           ((C18688 + C18687) * C935 -
            ((C15823 + C15822) * C823 + (C15709 + C15708) * C934) +
            (C18825 + C18826) * C824 -
            (C13796 * C24128 + C139586 * C24462 + C13795 * C8753 +
             C13593 * C8999) *
                C936 -
            (C13796 * C24246 + C139586 * C24565 + C13795 * C8839 +
             C13593 * C9079) *
                C825) *
               C139457 * C139575) *
              C139300 * C139403)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[29] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C831 + C139586 * C1118) *
                C9616 +
            (C13795 * C245 + C13593 * C474 + C13796 * C1029 + C139586 * C1339) *
                C9466 -
            (C13796 * C4223 + C139586 * C4549 + C13795 * C1767 +
             C13593 * C2054) *
                C9617 -
            (C13796 * C4443 + C139586 * C4783 + C13795 * C1965 +
             C13593 * C2269) *
                C139403) *
               C139457 * C13591 +
           ((C13823 + C13822) * C9616 + (C13996 + C13997) * C9466 -
            (C15709 + C15708) * C9617 - (C15932 + C15933) * C139403) *
               C139457 * C139575) *
              C139328 * C5225 +
          (((C15708 + C15709) * C9617 -
            ((C13997 + C13996) * C9466 + (C13822 + C13823) * C9616) +
            (C15933 + C15932) * C139403) *
               C139457 * C13591 +
           ((C17604 + C17603) * C9617 -
            ((C13998 + C13999) * C9466 + (C13827 + C13826) * C9616) +
            (C17813 + C17814) * C139403) *
               C139457 * C139575) *
              C139328 * C5226 +
          (((C13826 + C13827) * C9616 + (C13999 + C13998) * C9466 -
            (C17603 + C17604) * C9617 - (C17814 + C17813) * C139403) *
               C139457 * C13591 +
           ((C13831 + C13830) * C9616 + (C14000 + C14001) * C9466 -
            (C13796 * C4226 + C139586 * C4552 + C13795 * C1766 +
             C13593 * C2056) *
                C9617 -
            (C13796 * C4446 + C139586 * C4786 + C13795 * C1969 +
             C13593 * C2275) *
                C139403) *
               C139457 * C139575) *
              C139328 * C5227)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C831 + C139586 * C1118) *
                C9616 +
            (C13795 * C245 + C13593 * C474 + C13796 * C1029 + C139586 * C1339) *
                C9466 -
            (C13796 * C4223 + C139586 * C4549 + C13795 * C1767 +
             C13593 * C2054) *
                C9617 -
            (C13796 * C4443 + C139586 * C4783 + C13795 * C1965 +
             C13593 * C2269) *
                C139403) *
               C139457 * C13591 +
           ((C13823 + C13822) * C9616 + (C13996 + C13997) * C9466 -
            (C15709 + C15708) * C9617 - (C15932 + C15933) * C139403) *
               C139457 * C139575) *
              C823 +
          (((C13795 * C4223 + C13593 * C4549 + C13796 * C8754 +
             C139586 * C9000) *
                C9617 -
            ((C13796 * C1030 + C139586 * C1340 + C13795 * C1029 +
              C13593 * C1339) *
                 C9466 +
             (C13796 * C832 + C139586 * C1121 + C13795 * C831 +
              C13593 * C1118) *
                 C9616) +
            (C13795 * C4443 + C13593 * C4783 + C13796 * C8920 +
             C139586 * C9155) *
                C139403) *
               C139457 * C13591 +
           ((C18688 + C18687) * C9617 -
            ((C14934 + C14935) * C9466 + (C14711 + C14710) * C9616) +
            (C18961 + C18962) * C139403) *
               C139457 * C139575) *
              C824 +
          (((C13795 * C832 + C13593 * C1121 + C13796 * C5916 +
             C139586 * C6094) *
                C9616 +
            (C13795 * C1030 + C13593 * C1340 + C13796 * C6038 +
             C139586 * C6203) *
                C9466 -
            (C13796 * C24129 + C139586 * C24463 + C13795 * C8754 +
             C13593 * C9000) *
                C9617 -
            (C13796 * C24355 + C139586 * C24664 + C13795 * C8920 +
             C13593 * C9155) *
                C139403) *
               C139457 * C13591 +
           ((C14715 + C14714) * C9616 + (C14936 + C14937) * C9466 -
            (C13796 * C24128 + C139586 * C24462 + C13795 * C8753 +
             C13593 * C8999) *
                C9617 -
            (C13796 * C24354 + C139586 * C24665 + C13795 * C8919 +
             C13593 * C9156) *
                C139403) *
               C139457 * C139575) *
              C825) *
         C139300) /
            (p * q * std::sqrt(p + q));
    d2eezx[29] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139457 * C555) * C5230 +
             (C554 * C116 + C139457 * C561) * C5225 - C584 * C5231 -
             C585 * C5226 + C586 * C5232 + C587 * C5227) *
                C13591 +
            (C584 * C5230 + C585 * C5225 - C586 * C5231 - C587 * C5226 +
             C588 * C5232 + C589 * C5227) *
                C139575) *
               C13593 +
           ((C20089 + C20090 - C20091 - C20092 + C20093 + C20094) * C13591 +
            (C20095 + C20096 - C20097 - C20098 + C20099 + C20100) * C139575) *
               C139586) *
              C9466 +
          (((C2408 * C5231 -
             ((C554 * C1777 + C139457 * C2383) * C5225 +
              (C554 * C1767 + C139457 * C2376) * C5230) +
             C2409 * C5226 - C2410 * C5232 - C2411 * C5227) *
                C13591 +
            (C2410 * C5231 - (C2409 * C5225 + C2408 * C5230) + C2411 * C5226 -
             C3950 * C5232 - C3951 * C5227) *
                C139575) *
               C13593 +
           ((C4916 * C5231 - (C19107 * C5225 + C19108 * C5230) + C4917 * C5226 -
             C4918 * C5232 - C4919 * C5227) *
                C13591 +
            (C4918 * C5231 - (C4917 * C5225 + C4916 * C5230) + C4919 * C5226 -
             (C554 * C4226 + C139457 * C4902) * C5232 -
             (C554 * C4234 + C139457 * C4906) * C5227) *
                C139575) *
               C139586) *
              C139403) *
         C139328) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C554 * C107 + C139457 * C555) * C5913 +
              (C554 * C116 + C139457 * C561) * C139300) *
                 C13591 +
             (C584 * C5913 + C585 * C139300) * C139575) *
                C13593 +
            ((C20819 + C20820) * C13591 + (C20821 + C20822) * C139575) *
                C139586) *
               C9466 -
           (((C21719 + C21720) * C139575 + (C21721 + C21722) * C13591) *
                C139586 +
            ((C2409 * C139300 + C2408 * C5913) * C139575 +
             ((C554 * C1777 + C139457 * C2383) * C139300 +
              (C554 * C1767 + C139457 * C2376) * C5913) *
                 C13591) *
                C13593) *
               C139403) *
              C823 +
          ((((C21722 + C21721) * C13591 + (C21720 + C21719) * C139575) *
                C13593 +
            ((C24777 + C24778) * C13591 + (C24773 + C24774) * C139575) *
                C139586) *
               C139403 -
           (((C20823 + C20824) * C139575 + (C20825 + C20826) * C13591) *
                C139586 +
            ((C20822 + C20821) * C139575 + (C20820 + C20819) * C13591) *
                C13593) *
               C9466) *
              C824 +
          ((((C20826 + C20825) * C13591 + (C20824 + C20823) * C139575) *
                C13593 +
            ((C20835 + C20836) * C13591 + (C20831 + C20832) * C139575) *
                C139586) *
               C9466 -
           ((((C554 * C24130 + C139457 * C24766) * C139300 +
              (C554 * C24128 + C139457 * C24764) * C5913) *
                 C139575 +
             ((C554 * C24131 + C139457 * C24767) * C139300 +
              (C554 * C24129 + C139457 * C24765) * C5913) *
                 C13591) *
                C139586 +
            ((C24774 + C24773) * C139575 + (C24778 + C24777) * C13591) *
                C13593) *
               C139403) *
              C825)) /
            (p * q * std::sqrt(p + q));
    d2eezy[29] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C554 * C107 + C139457 * C555) * C181 +
              (C554 * C182 + C139457 * C641) * C139328) *
                 C13591 +
             (C648 + C664) * C139575) *
                C13593 +
            ((C15060 * C181 + C15179 * C139328) * C13591 +
             (C14134 + C14135) * C139575) *
                C139586) *
               C5225 -
           (((C14136 + C14137) * C139575 + (C14135 + C14134) * C13591) *
                C139586 +
            ((C665 + C651) * C139575 + (C664 + C648) * C13591) * C13593) *
               C5226 +
           ((C668 * C13591 + (C656 + C666) * C139575) * C13593 +
            ((C14137 + C14136) * C13591 + (C14138 + C14139) * C139575) *
                C139586) *
               C5227) *
              C9466 +
          ((((C2498 + C2514) * C13591 + (C2501 + C2515) * C139575) * C13593 +
            ((C16138 + C16139) * C13591 + (C18011 + C18012) * C139575) *
                C139586) *
               C5226 -
           (((C16139 + C16138) * C139575 +
             (C19250 * C139328 + C19108 * C181) * C13591) *
                C139586 +
            ((C2514 + C2498) * C139575 +
             ((C554 * C1873 + C139457 * C2492) * C139328 +
              (C554 * C1767 + C139457 * C2376) * C181) *
                 C13591) *
                C13593) *
               C5225 -
           ((((C554 * C4340 + C139457 * C5020) * C139328 +
              (C554 * C4226 + C139457 * C4902) * C181) *
                 C139575 +
             (C18012 + C18011) * C13591) *
                C139586 +
            ((C4032 + C4027) * C139575 + C4030 * C13591) * C13593) *
               C5227) *
              C139403)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139457 * C555) * C934 +
             (C554 * C182 + C139457 * C641) * C823 - C15060 * C935 -
             C15179 * C824 + C15063 * C936 + C15180 * C825) *
                C13591 +
            (C1562 + C1563 - C1564 - C1582 + C1567 + C1583) * C139575) *
               C13593 +
           ((C15060 * C934 + C15179 * C823 - C15063 * C935 - C15180 * C824 +
             C20833 * C936 + C20907 * C825) *
                C13591 +
            (C15172 + C15173 - C15174 - C15175 + C15176 + C15182) * C139575) *
               C139586) *
              C139300 * C9466 +
          (((C19108 * C935 -
             ((C554 * C1873 + C139457 * C2492) * C823 +
              (C554 * C1767 + C139457 * C2376) * C934) +
             C19250 * C824 - C24775 * C936 - C24881 * C825) *
                C13591 +
            (C4916 * C935 - (C2510 * C823 + C2408 * C934) + C5032 * C824 -
             C19109 * C936 - C19251 * C825) *
                C139575) *
               C13593 +
           ((C24775 * C935 - (C19250 * C823 + C19108 * C934) + C24881 * C824 -
             (C554 * C24129 + C139457 * C24765) * C936 -
             (C554 * C24247 + C139457 * C24876) * C825) *
                C13591 +
            (C19109 * C935 - (C5032 * C823 + C4916 * C934) + C19251 * C824 -
             (C554 * C24128 + C139457 * C24764) * C936 -
             (C554 * C24246 + C139457 * C24877) * C825) *
                C139575) *
               C139586) *
              C139300 * C139403)) /
            (p * q * std::sqrt(p + q));
    d2eezz[29] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139457 * C555) * C9616 +
             (C554 * C245 + C139457 * C719) * C9466 -
             (C554 * C1767 + C139457 * C2376) * C9617 -
             (C554 * C1965 + C139457 * C2591) * C139403) *
                C13591 +
            (C10079 + C10080 - C10081 - C10082) * C139575) *
               C13593 +
           ((C15060 * C9616 + C15294 * C9466 - C19108 * C9617 -
             C19395 * C139403) *
                C13591 +
            (C12158 + C12157 - C12156 - C12159) * C139575) *
               C139586) *
              C139328 * C5225 +
          (((C10081 - (C10080 + C10079) + C10082) * C13591 +
            (C10085 - (C10084 + C10083) + C10086) * C139575) *
               C13593 +
           ((C12156 - (C12157 + C12158) + C12159) * C13591 +
            (C12160 - (C12161 + C12162) + C12163) * C139575) *
               C139586) *
              C139328 * C5226 +
          ((C10093 * C13591 + (C10089 + C10088 - C10087 - C10090) * C139575) *
               C13593 +
           ((C12162 + C12161 - C12160 - C12163) * C13591 +
            (C3202 * C9616 + C3376 * C9466 -
             (C554 * C4226 + C139457 * C4902) * C9617 -
             (C554 * C4446 + C139457 * C5136) * C139403) *
                C139575) *
               C139586) *
              C139328 * C5227)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139457 * C555) * C9616 +
             (C554 * C245 + C139457 * C719) * C9466 -
             (C554 * C1767 + C139457 * C2376) * C9617 -
             (C554 * C1965 + C139457 * C2591) * C139403) *
                C13591 +
            (C10079 + C10080 - C10081 - C10082) * C139575) *
               C13593 +
           ((C26753 + C26754 - C26755 - C26756) * C13591 +
            (C12158 + C12157 - C12156 - C12159) * C139575) *
               C139586) *
              C823 +
          (((C26755 - (C26754 + C26753) + C26756) * C13591 +
            (C12156 - (C12157 + C12158) + C12159) * C139575) *
               C13593 +
           ((C26757 - (C26758 + C26759) + C26760) * C13591 +
            (C26761 - (C26762 + C26763) + C26764) * C139575) *
               C139586) *
              C824 +
          (((C26759 + C26758 - C26757 - C26760) * C13591 +
            (C26763 + C26762 - C26761 - C26764) * C139575) *
               C13593 +
           ((C20833 * C9616 + C20979 * C9466 -
             (C554 * C24129 + C139457 * C24765) * C9617 -
             (C554 * C24355 + C139457 * C24979) * C139403) *
                C13591 +
            (C15064 * C9616 + C15296 * C9466 -
             (C554 * C24128 + C139457 * C24764) * C9617 -
             (C554 * C24354 + C139457 * C24980) * C139403) *
                C139575) *
               C139586) *
              C825) *
         C139300) /
            (p * q * std::sqrt(p + q));
    d2eexx[30] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139575 * C114) *
                C2702 +
            (C13595 * C116 + C13591 * C125 + C13596 * C117 + C139575 * C126) *
                C139589 -
            (C13596 * C109 + C139575 * C115 + C13595 * C108 + C13591 * C114) *
                C2703 -
            (C13596 * C118 + C139575 * C127 + C13595 * C117 + C13591 * C126) *
                C139590 +
            (C13595 * C109 + C13591 * C115 + C13596 * C110 + C139575 * C119) *
                C2704 +
            (C13595 * C118 + C13591 * C127 + C13596 * C120 + C139575 * C128) *
                C2699) *
               C139442 * C30408 +
           ((C32101 + C32102) * C2702 + (C32103 + C32104) * C139589 -
            (C32105 + C32106) * C2703 - (C32107 + C32108) * C139590 +
            (C13595 * C1765 + C13591 * C1773 + C13596 * C1766 +
             C139575 * C1774) *
                C2704 +
            (C13595 * C1775 + C13591 * C1788 + C13596 * C1779 +
             C139575 * C1791) *
                C2699) *
               C139442 * C139588) *
              C139339 * C139560 +
          (((C14341 + C14340) * C2703 -
            ((C14339 + C14338) * C139589 + (C14337 + C14336) * C2702) +
            (C14343 + C14342) * C139590 - (C16359 + C16358) * C2704 -
            (C16361 + C16360) * C2699) *
               C139442 * C30408 +
           ((C18257 + C18258) * C2703 -
            ((C18259 + C18260) * C139589 + (C18261 + C18262) * C2702) +
            (C18263 + C18264) * C139590 -
            (C13596 * C4226 + C139575 * C4233 + C13595 * C4225 +
             C13591 * C4229) *
                C2704 -
            (C13596 * C4234 + C139575 * C4238 + C13595 * C4232 +
             C13591 * C4237) *
                C2699) *
               C139442 * C139588) *
              C139339 * C139377)) /
        (p * q * std::sqrt(p + q));
    d2eexy[30] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139575 * C114) *
                C2783 +
            (C13595 * C182 + C13591 * C188 + C13596 * C183 + C139575 * C189) *
                C139560 -
            (C14337 + C14336) * C2784 - (C14466 + C14467) * C139377) *
               C139442 * C30408 +
           ((C32101 + C32102) * C2783 + (C32231 + C32232) * C139560 -
            (C18261 + C18262) * C2784 - (C18404 + C18403) * C139377) *
               C139442 * C139588) *
              C139589 +
          (((C14341 + C14340) * C2784 -
            ((C13596 * C184 + C139575 * C190 + C13595 * C183 + C13591 * C189) *
                 C139560 +
             (C13596 * C109 + C139575 * C115 + C13595 * C108 + C13591 * C114) *
                 C2783) +
            (C14470 + C14471) * C139377) *
               C139442 * C30408 +
           ((C18257 + C18258) * C2784 -
            ((C32233 + C32234) * C139560 + (C32105 + C32106) * C2783) +
            (C18406 + C18405) * C139377) *
               C139442 * C139588) *
              C139590 +
          (((C13595 * C109 + C13591 * C115 + C13596 * C110 + C139575 * C119) *
                C2783 +
            (C13595 * C184 + C13591 * C190 + C13596 * C185 + C139575 * C191) *
                C139560 -
            (C16359 + C16358) * C2784 - (C16464 + C16465) * C139377) *
               C139442 * C30408 +
           ((C13595 * C1765 + C13591 * C1773 + C13596 * C1766 +
             C139575 * C1774) *
                C2783 +
            (C13595 * C1871 + C13591 * C1879 + C13596 * C1872 +
             C139575 * C1880) *
                C139560 -
            (C13596 * C4226 + C139575 * C4233 + C13595 * C4225 +
             C13591 * C4229) *
                C2784 -
            (C13596 * C4340 + C139575 * C4344 + C13595 * C4339 +
             C13591 * C4343) *
                C139377) *
               C139442 * C139588) *
              C2699) *
         C139339) /
        (p * q * std::sqrt(p + q));
    d2eexz[30] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139575 * C114) *
                 C244 +
             (C13595 * C245 + C13591 * C251 + C13596 * C246 + C139575 * C252) *
                 C139339) *
                C139442 * C30408 +
            ((C32101 + C32102) * C244 + (C32354 + C32353) * C139339) * C139442 *
                C139588) *
               C139560 -
           (((C18545 + C18546) * C139339 + (C18261 + C18262) * C244) * C139442 *
                C139588 +
            ((C14589 + C14588) * C139339 + (C14337 + C14336) * C244) * C139442 *
                C30408) *
               C139377) *
              C139589 +
          ((((C14341 + C14340) * C244 + (C14592 + C14593) * C139339) * C139442 *
                C30408 +
            ((C18257 + C18258) * C244 + (C18547 + C18548) * C139339) * C139442 *
                C139588) *
               C139377 -
           (((C32358 + C32357) * C139339 + (C32105 + C32106) * C244) * C139442 *
                C139588 +
            ((C13596 * C247 + C139575 * C253 + C13595 * C246 + C13591 * C252) *
                 C139339 +
             (C13596 * C109 + C139575 * C115 + C13595 * C108 + C13591 * C114) *
                 C244) *
                C139442 * C30408) *
               C139560) *
              C139590 +
          ((((C13595 * C109 + C13591 * C115 + C13596 * C110 + C139575 * C119) *
                 C244 +
             (C13595 * C247 + C13591 * C253 + C13596 * C248 + C139575 * C254) *
                 C139339) *
                C139442 * C30408 +
            ((C13595 * C1765 + C13591 * C1773 + C13596 * C1766 +
              C139575 * C1774) *
                 C244 +
             (C13595 * C1963 + C13591 * C1971 + C13596 * C1969 +
              C139575 * C1977) *
                 C139339) *
                C139442 * C139588) *
               C139560 -
           (((C13596 * C4446 + C139575 * C4450 + C13595 * C4445 +
              C13591 * C4449) *
                 C139339 +
             (C13596 * C4226 + C139575 * C4233 + C13595 * C4225 +
              C13591 * C4229) *
                 C244) *
                C139442 * C139588 +
            ((C16569 + C16568) * C139339 + (C16359 + C16358) * C244) * C139442 *
                C30408) *
               C139377) *
              C2699)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[30] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139442 * C308) * C2702 +
             (C307 * C116 + C139442 * C314) * C139589 - C337 * C2703 -
             C338 * C139590 + C339 * C2704 + C340 * C2699) *
                C30408 +
            (C32483 * C2702 + C32484 * C139589 - C2086 * C2703 -
             C2087 * C139590 + C2088 * C2704 + C2089 * C2699) *
                C139588) *
               C13591 +
           ((C337 * C2702 + C338 * C139589 - C339 * C2703 - C340 * C139590 +
             C341 * C2704 + C342 * C2699) *
                C30408 +
            (C2086 * C2702 + C2087 * C139589 - C2088 * C2703 - C2089 * C139590 +
             C3692 * C2704 + C3693 * C2699) *
                C139588) *
               C139575) *
              C139339 * C139560 +
          (((C1150 * C2703 -
             ((C307 * C841 + C139442 * C1125) * C139589 +
              (C307 * C831 + C139442 * C1118) * C2702) +
             C1151 * C139590 - C1152 * C2704 - C1153 * C2699) *
                C30408 +
            (C4566 * C2703 -
             ((C307 * C4230 + C139442 * C4553) * C139589 +
              (C307 * C4223 + C139442 * C4549) * C2702) +
             C4567 * C139590 - C4568 * C2704 - C4569 * C2699) *
                C139588) *
               C13591 +
           ((C1152 * C2703 - (C1151 * C139589 + C1150 * C2702) +
             C1153 * C139590 - C2944 * C2704 - C2945 * C2699) *
                C30408 +
            (C4568 * C2703 - (C4567 * C139589 + C4566 * C2702) +
             C4569 * C139590 - (C307 * C4226 + C139442 * C4552) * C2704 -
             (C307 * C4234 + C139442 * C4556) * C2699) *
                C139588) *
               C139575) *
              C139339 * C139377)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[30] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139442 * C308) * C2783 +
             (C307 * C182 + C139442 * C394) * C139560 -
             (C307 * C831 + C139442 * C1118) * C2784 -
             (C307 * C939 + C139442 * C1231) * C139377) *
                C30408 +
            (C32483 * C2783 + C32604 * C139560 -
             (C307 * C4223 + C139442 * C4549) * C2784 -
             (C307 * C4337 + C139442 * C4667) * C139377) *
                C139588) *
               C13591 +
           ((C3021 + C3022 - C3023 - C3024) * C30408 +
            (C4674 + C4673 - C4672 - C4684) * C139588) *
               C139575) *
              C139589 +
          (((C3023 - (C3022 + C3021) + C3024) * C30408 +
            (C4672 - (C4673 + C4674) + C4684) * C139588) *
               C13591 +
           ((C3027 - (C3026 + C3025) + C3028) * C30408 +
            (C4677 - (C4678 + C4679) + C4685) * C139588) *
               C139575) *
              C139590 +
          ((C3038 * C30408 + (C4679 + C4678 - C4677 - C4685) * C139588) *
               C13591 +
           ((C3031 + C3030 - C3029 - C3037) * C30408 +
            (C3692 * C2783 + C3773 * C139560 -
             (C307 * C4226 + C139442 * C4552) * C2784 -
             (C307 * C4340 + C139442 * C4670) * C139377) *
                C139588) *
               C139575) *
              C2699) *
         C139339) /
        (p * q * std::sqrt(p + q));
    d2eeyz[30] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C307 * C107 + C139442 * C308) * C244 +
              (C307 * C245 + C139442 * C474) * C139339) *
                 C30408 +
             (C32483 * C244 + C32719 * C139339) * C139588) *
                C13591 +
            ((C481 + C497) * C30408 + (C30741 + C30742) * C139588) * C139575) *
               C139560 -
           (((C31622 + C31623) * C139588 + (C1363 + C1351) * C30408) * C139575 +
            (((C307 * C4443 + C139442 * C4783) * C139339 +
              (C307 * C4223 + C139442 * C4549) * C244) *
                 C139588 +
             ((C307 * C1029 + C139442 * C1339) * C139339 +
              (C307 * C831 + C139442 * C1118) * C244) *
                 C30408) *
                C13591) *
               C139377) *
              C139589 +
          ((((C1351 + C1363) * C30408 + (C31623 + C31622) * C139588) * C13591 +
            ((C1348 + C1362) * C30408 + (C33653 + C33654) * C139588) *
                C139575) *
               C139377 -
           (((C30743 + C30744) * C139588 + (C498 + C484) * C30408) * C139575 +
            ((C30742 + C30741) * C139588 + (C497 + C481) * C30408) * C13591) *
               C139560) *
              C139590 +
          (((C501 * C30408 + (C30744 + C30743) * C139588) * C13591 +
            ((C489 + C499) * C30408 + (C30745 + C30746) * C139588) * C139575) *
               C139560 -
           ((((C307 * C4446 + C139442 * C4786) * C139339 +
              (C307 * C4226 + C139442 * C4552) * C244) *
                 C139588 +
             (C3121 + C3116) * C30408) *
                C139575 +
            ((C33654 + C33653) * C139588 + C3115 * C30408) * C13591) *
               C139377) *
              C2699)) /
        (p * q * std::sqrt(p + q));
    d2eezx[30] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1767 + C139588 * C2376) *
                C2702 +
            (C30812 * C116 + C30408 * C561 + C30813 * C1777 + C139588 * C2383) *
                C139589 -
            (C30839 + C30840) * C2703 - (C30841 + C30842) * C139590 +
            (C30843 + C30844) * C2704 + (C30845 + C30846) * C2699) *
               C13591 +
           ((C30840 + C30839) * C2702 + (C30842 + C30841) * C139589 -
            (C30844 + C30843) * C2703 - (C30846 + C30845) * C139590 +
            (C30848 + C30847) * C2704 + (C30850 + C30849) * C2699) *
               C139575) *
              C139442 * C139339 * C139560 +
          (((C31743 + C31744) * C2703 -
            ((C30813 * C4230 + C139588 * C4903 + C30812 * C841 +
              C30408 * C1447) *
                 C139589 +
             (C30813 * C4223 + C139588 * C4899 + C30812 * C831 +
              C30408 * C1440) *
                 C2702) +
            (C31745 + C31746) * C139590 - (C33761 + C33762) * C2704 -
            (C33763 + C33764) * C2699) *
               C13591 +
           ((C33762 + C33761) * C2703 -
            ((C31746 + C31745) * C139589 + (C31744 + C31743) * C2702) +
            (C33764 + C33763) * C139590 -
            (C30813 * C4226 + C139588 * C4902 + C30812 * C830 +
             C30408 * C1442) *
                C2704 -
            (C30813 * C4234 + C139588 * C4906 + C30812 * C843 +
             C30408 * C1450) *
                C2699) *
               C139575) *
              C139442 * C139339 * C139377)) /
        (p * q * std::sqrt(p + q));
    d2eezy[30] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1767 + C139588 * C2376) *
                C2783 +
            (C30812 * C182 + C30408 * C641 + C30813 * C1873 + C139588 * C2492) *
                C139560 -
            (C30813 * C4223 + C139588 * C4899 + C30812 * C831 +
             C30408 * C1440) *
                C2784 -
            (C30813 * C4337 + C139588 * C5017 + C30812 * C939 +
             C30408 * C1553) *
                C139377) *
               C13591 +
           ((C30840 + C30839) * C2783 + (C30929 + C30930) * C139560 -
            (C31744 + C31743) * C2784 - (C31857 + C31858) * C139377) *
               C139575) *
              C139442 * C139589 +
          (((C31743 + C31744) * C2784 -
            ((C30930 + C30929) * C139560 + (C30839 + C30840) * C2783) +
            (C31858 + C31857) * C139377) *
               C13591 +
           ((C33762 + C33761) * C2784 -
            ((C30931 + C30932) * C139560 + (C30844 + C30843) * C2783) +
            (C33867 + C33868) * C139377) *
               C139575) *
              C139442 * C139590 +
          (((C30843 + C30844) * C2783 + (C30932 + C30931) * C139560 -
            (C33761 + C33762) * C2784 - (C33868 + C33867) * C139377) *
               C13591 +
           ((C30848 + C30847) * C2783 + (C30933 + C30934) * C139560 -
            (C30813 * C4226 + C139588 * C4902 + C30812 * C830 +
             C30408 * C1442) *
                C2784 -
            (C30813 * C4340 + C139588 * C5020 + C30812 * C943 +
             C30408 * C1559) *
                C139377) *
               C139575) *
              C139442 * C2699) *
         C139339) /
        (p * q * std::sqrt(p + q));
    d2eezz[30] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C30812 * C107 + C30408 * C555 + C30813 * C1767 +
              C139588 * C2376) *
                 C244 +
             (C30812 * C245 + C30408 * C719 + C30813 * C1965 +
              C139588 * C2591) *
                 C139339) *
                C13591 +
            ((C30840 + C30839) * C244 + (C31013 + C31014) * C139339) *
                C139575) *
               C139442 * C139560 -
           (((C31967 + C31968) * C139339 + (C31744 + C31743) * C244) * C139575 +
            ((C30813 * C4443 + C139588 * C5133 + C30812 * C1029 +
              C30408 * C1661) *
                 C139339 +
             (C30813 * C4223 + C139588 * C4899 + C30812 * C831 +
              C30408 * C1440) *
                 C244) *
                C13591) *
               C139442 * C139377) *
              C139589 +
          ((((C31743 + C31744) * C244 + (C31968 + C31967) * C139339) * C13591 +
            ((C33762 + C33761) * C244 + (C33971 + C33972) * C139339) *
                C139575) *
               C139442 * C139377 -
           (((C31015 + C31016) * C139339 + (C30844 + C30843) * C244) * C139575 +
            ((C31014 + C31013) * C139339 + (C30839 + C30840) * C244) * C13591) *
               C139442 * C139560) *
              C139590 +
          ((((C30843 + C30844) * C244 + (C31016 + C31015) * C139339) * C13591 +
            ((C30848 + C30847) * C244 + (C31017 + C31018) * C139339) *
                C139575) *
               C139442 * C139560 -
           (((C30813 * C4446 + C139588 * C5136 + C30812 * C1033 +
              C30408 * C1665) *
                 C139339 +
             (C30813 * C4226 + C139588 * C4902 + C30812 * C830 +
              C30408 * C1442) *
                 C244) *
                C139575 +
            ((C33972 + C33971) * C139339 + (C33761 + C33762) * C244) * C13591) *
               C139442 * C139377) *
              C2699)) /
        (p * q * std::sqrt(p + q));
    d2eexx[31] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139575 * C114) *
                 C826 +
             (C13595 * C116 + C13591 * C125 + C13596 * C117 + C139575 * C126) *
                 C821 -
             (C13596 * C109 + C139575 * C115 + C13595 * C108 + C13591 * C114) *
                 C827 -
             (C13596 * C118 + C139575 * C127 + C13595 * C117 + C13591 * C126) *
                 C139305) *
                C139442 * C30408 +
            ((C32101 + C32102) * C826 + (C32103 + C32104) * C821 -
             (C32105 + C32106) * C827 - (C32107 + C32108) * C139305) *
                C139442 * C139588) *
               C139561 +
           (((C32106 + C32105) * C827 -
             ((C32104 + C32103) * C821 + (C32102 + C32101) * C826) +
             (C32108 + C32107) * C139305) *
                C139442 * C30408 +
            ((C32109 + C32110) * C827 -
             ((C32111 + C32112) * C821 + (C32113 + C32114) * C826) +
             (C32115 + C32116) * C139305) *
                C139442 * C139588) *
               C139403) *
              C139560 +
          ((((C14341 + C14340) * C827 -
             ((C14339 + C14338) * C821 + (C14337 + C14336) * C826) +
             (C14343 + C14342) * C139305) *
                C139442 * C30408 +
            ((C18257 + C18258) * C827 -
             ((C18259 + C18260) * C821 + (C18261 + C18262) * C826) +
             (C18263 + C18264) * C139305) *
                C139442 * C139588) *
               C139561 +
           (((C18262 + C18261) * C826 + (C18260 + C18259) * C821 -
             (C18258 + C18257) * C827 - (C18264 + C18263) * C139305) *
                C139442 * C30408 +
            ((C21095 + C21096) * C826 + (C21097 + C21098) * C821 -
             (C13596 * C6440 + C139575 * C6446 + C13595 * C6441 +
              C13591 * C6447) *
                 C827 -
             (C13596 * C6443 + C139575 * C6449 + C13595 * C6444 +
              C13591 * C6450) *
                 C139305) *
                C139442 * C139588) *
               C139403) *
              C139377)) /
        (p * q * std::sqrt(p + q));
    d2eexy[31] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139575 * C114) *
                 C2783 +
             (C13595 * C182 + C13591 * C188 + C13596 * C183 + C139575 * C189) *
                 C139560 -
             (C14337 + C14336) * C2784 - (C14466 + C14467) * C139377) *
                C139442 * C30408 +
            ((C32101 + C32102) * C2783 + (C32231 + C32232) * C139560 -
             (C18261 + C18262) * C2784 - (C18404 + C18403) * C139377) *
                C139442 * C139588) *
               C821 +
           (((C14341 + C14340) * C2784 -
             ((C13596 * C184 + C139575 * C190 + C13595 * C183 + C13591 * C189) *
                  C139560 +
              (C13596 * C109 + C139575 * C115 + C13595 * C108 + C13591 * C114) *
                  C2783) +
             (C14470 + C14471) * C139377) *
                C139442 * C30408 +
            ((C18257 + C18258) * C2784 -
             ((C32233 + C32234) * C139560 + (C32105 + C32106) * C2783) +
             (C18406 + C18405) * C139377) *
                C139442 * C139588) *
               C139305) *
              C139561 +
          ((((C18262 + C18261) * C2784 -
             ((C32232 + C32231) * C139560 + (C32102 + C32101) * C2783) +
             (C18403 + C18404) * C139377) *
                C139442 * C30408 +
            ((C21095 + C21096) * C2784 -
             ((C32237 + C32238) * C139560 + (C32113 + C32114) * C2783) +
             (C21206 + C21205) * C139377) *
                C139442 * C139588) *
               C821 +
           (((C32106 + C32105) * C2783 + (C32234 + C32233) * C139560 -
             (C18258 + C18257) * C2784 - (C18405 + C18406) * C139377) *
                C139442 * C30408 +
            ((C32109 + C32110) * C2783 + (C32235 + C32236) * C139560 -
             (C13596 * C6440 + C139575 * C6446 + C13595 * C6441 +
              C13591 * C6447) *
                 C2784 -
             (C13596 * C6526 + C139575 * C6529 + C13595 * C6527 +
              C13591 * C6530) *
                 C139377) *
                C139442 * C139588) *
               C139305) *
              C139403)) /
        (p * q * std::sqrt(p + q));
    d2eexz[31] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139575 * C114) *
                 C3607 +
             (C13595 * C245 + C13591 * C251 + C13596 * C246 + C139575 * C252) *
                 C139561 -
             (C32102 + C32101) * C3608 - (C32353 + C32354) * C139403) *
                C139442 * C30408 +
            ((C32101 + C32102) * C3607 + (C32354 + C32353) * C139561 -
             (C32113 + C32114) * C3608 - (C32356 + C32355) * C139403) *
                C139442 * C139588) *
               C139560 +
           (((C18262 + C18261) * C3608 -
             ((C14589 + C14588) * C139561 + (C14337 + C14336) * C3607) +
             (C18546 + C18545) * C139403) *
                C139442 * C30408 +
            ((C21095 + C21096) * C3608 -
             ((C18545 + C18546) * C139561 + (C18261 + C18262) * C3607) +
             (C21313 + C21314) * C139403) *
                C139442 * C139588) *
               C139377) *
              C821 +
          ((((C32106 + C32105) * C3608 -
             ((C13596 * C247 + C139575 * C253 + C13595 * C246 + C13591 * C252) *
                  C139561 +
              (C13596 * C109 + C139575 * C115 + C13595 * C108 + C13591 * C114) *
                  C3607) +
             (C32357 + C32358) * C139403) *
                C139442 * C30408 +
            ((C32109 + C32110) * C3608 -
             ((C32358 + C32357) * C139561 + (C32105 + C32106) * C3607) +
             (C32360 + C32359) * C139403) *
                C139442 * C139588) *
               C139560 +
           (((C14341 + C14340) * C3607 + (C14592 + C14593) * C139561 -
             (C18258 + C18257) * C3608 - (C18548 + C18547) * C139403) *
                C139442 * C30408 +
            ((C18257 + C18258) * C3607 + (C18547 + C18548) * C139561 -
             (C13596 * C6440 + C139575 * C6446 + C13595 * C6441 +
              C13591 * C6447) *
                 C3608 -
             (C13596 * C6606 + C139575 * C6609 + C13595 * C6607 +
              C13591 * C6610) *
                 C139403) *
                C139442 * C139588) *
               C139377) *
              C139305)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[31] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C307 * C107 + C139442 * C308) * C826 +
              (C307 * C116 + C139442 * C314) * C821 - C337 * C827 -
              C338 * C139305) *
                 C30408 +
             (C32489 + C32490 - C32463 - C32464) * C139588) *
                C13591 +
            ((C337 * C826 + C338 * C821 - C339 * C827 - C340 * C139305) *
                 C30408 +
             (C32465 + C32466 - C32467 - C32468) * C139588) *
                C139575) *
               C139561 +
           (((C32463 - (C32490 + C32489) + C32464) * C30408 +
             (C32469 - (C32491 + C32492) + C32474) * C139588) *
                C13591 +
            ((C32467 - (C32466 + C32465) + C32468) * C30408 +
             (C32475 - (C32476 + C32477) + C32478) * C139588) *
                C139575) *
               C139403) *
              C139560 +
          ((((C1150 * C827 -
              ((C307 * C841 + C139442 * C1125) * C821 +
               (C307 * C831 + C139442 * C1118) * C826) +
              C1151 * C139305) *
                 C30408 +
             (C35444 - (C35462 + C35463) + C35449) * C139588) *
                C13591 +
            ((C1152 * C827 - (C1151 * C821 + C1150 * C826) + C1153 * C139305) *
                 C30408 +
             (C35450 - (C35451 + C35452) + C35453) * C139588) *
                C139575) *
               C139561 +
           (((C35463 + C35462 - C35444 - C35449) * C30408 +
             ((C307 * C6442 + C139442 * C6688) * C826 +
              (C307 * C6445 + C139442 * C6691) * C821 - C35460 * C827 -
              C35461 * C139305) *
                 C139588) *
                C13591 +
            ((C35452 + C35451 - C35450 - C35453) * C30408 +
             (C35460 * C826 + C35461 * C821 -
              (C307 * C6440 + C139442 * C6686) * C827 -
              (C307 * C6443 + C139442 * C6689) * C139305) *
                 C139588) *
                C139575) *
               C139403) *
              C139377)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[31] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C307 * C107 + C139442 * C308) * C2783 +
              (C307 * C182 + C139442 * C394) * C139560 -
              (C307 * C831 + C139442 * C1118) * C2784 -
              (C307 * C939 + C139442 * C1231) * C139377) *
                 C30408 +
             (C35594 + C35595 - C35596 - C35610) * C139588) *
                C13591 +
            ((C3021 + C3022 - C3023 - C3024) * C30408 + C35611 * C139588) *
                C139575) *
               C821 +
           (((C3023 - (C3022 + C3021) + C3024) * C30408 + C35612 * C139588) *
                C13591 +
            ((C3027 - (C3026 + C3025) + C3028) * C30408 +
             (C4677 - (C4678 + C4679) + C4685) * C139588) *
                C139575) *
               C139305) *
              C139561 +
          ((((C35596 - (C35595 + C35594) + C35610) * C30408 +
             ((C307 * C6442 + C139442 * C6688) * C2784 -
              (C32605 * C139560 + C32486 * C2783) +
              (C307 * C6528 + C139442 * C6766) * C139377) *
                 C139588) *
                C13591 +
            (C35612 * C30408 +
             (C35601 - (C35602 + C35603) + C35613) * C139588) *
                C139575) *
               C821 +
           ((C35611 * C30408 + (C35603 + C35602 - C35601 - C35613) * C139588) *
                C13591 +
            ((C4679 + C4678 - C4677 - C4685) * C30408 +
             (C2092 * C2783 + C2191 * C139560 -
              (C307 * C6440 + C139442 * C6686) * C2784 -
              (C307 * C6526 + C139442 * C6768) * C139377) *
                 C139588) *
                C139575) *
               C139305) *
              C139403)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[31] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((((C307 * C107 + C139442 * C308) * C3607 +
                        (C307 * C245 + C139442 * C474) * C139561 -
                        C32483 * C3608 - C32719 * C139403) *
                           C30408 +
                       (C32483 * C3607 + C32719 * C139561 - C32486 * C3608 -
                        C32720 * C139403) *
                           C139588) *
                          C13591 +
                      ((C3851 + C3852 - C3853 - C3854) * C30408 +
                       (C34598 + C34599 - C34600 - C34601) * C139588) *
                          C139575) *
                         C139560 +
                     (((C35459 * C3608 -
                        ((C307 * C1029 + C139442 * C1339) * C139561 +
                         (C307 * C831 + C139442 * C1118) * C3607) +
                        C35751 * C139403) *
                           C30408 +
                       ((C307 * C6442 + C139442 * C6688) * C3608 -
                        (C35751 * C139561 + C35459 * C3607) +
                        (C307 * C6608 + C139442 * C6843) * C139403) *
                           C139588) *
                          C13591 +
                      ((C4788 - (C4789 + C4790) + C4800) * C30408 +
                       (C35746 - (C35747 + C35748) + C35753) * C139588) *
                          C139575) *
                         C139377) *
                        C821 +
                    ((((C3853 - (C3852 + C3851) + C3854) * C30408 +
                       (C34600 - (C34599 + C34598) + C34601) * C139588) *
                          C13591 +
                      ((C3857 - (C3856 + C3855) + C3858) * C30408 +
                       (C34602 - (C34603 + C34604) + C34605) * C139588) *
                          C139575) *
                         C139560 +
                     (((C4790 + C4789 - C4788 - C4800) * C30408 +
                       (C35748 + C35747 - C35746 - C35753) * C139588) *
                          C13591 +
                      ((C4795 + C4794 - C4793 - C4801) * C30408 +
                       (C4568 * C3607 + C4799 * C139561 -
                        (C307 * C6440 + C139442 * C6686) * C3608 -
                        (C307 * C6606 + C139442 * C6845) * C139403) *
                           C139588) *
                          C139575) *
                         C139377) *
                        C139305)) /
                  (p * q * std::sqrt(p + q));
    d2eezx[31] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C30812 * C107 + C30408 * C555 + C30813 * C1767 +
                        C139588 * C2376) *
                           C826 +
                       (C30812 * C116 + C30408 * C561 + C30813 * C1777 +
                        C139588 * C2383) *
                           C821 -
                       (C30839 + C30840) * C827 - (C30841 + C30842) * C139305) *
                          C13591 +
                      ((C30840 + C30839) * C826 + (C30842 + C30841) * C821 -
                       (C30844 + C30843) * C827 - (C30846 + C30845) * C139305) *
                          C139575) *
                         C139442 * C139561 +
                     (((C32837 + C32838) * C827 -
                       ((C30813 * C1783 + C139588 * C2387 + C30812 * C1777 +
                         C30408 * C2383) *
                            C821 +
                        (C30813 * C1768 + C139588 * C2379 + C30812 * C1767 +
                         C30408 * C2376) *
                            C826) +
                       (C32839 + C32840) * C139305) *
                          C13591 +
                      ((C34713 + C34712) * C827 -
                       ((C32840 + C32839) * C821 + (C32838 + C32837) * C826) +
                       (C34715 + C34714) * C139305) *
                          C139575) *
                         C139442 * C139403) *
                        C139560 +
                    ((((C31743 + C31744) * C827 -
                       ((C30813 * C4230 + C139588 * C4903 + C30812 * C841 +
                         C30408 * C1447) *
                            C821 +
                        (C30813 * C4223 + C139588 * C4899 + C30812 * C831 +
                         C30408 * C1440) *
                            C826) +
                       (C31745 + C31746) * C139305) *
                          C13591 +
                      ((C33762 + C33761) * C827 -
                       ((C31746 + C31745) * C821 + (C31744 + C31743) * C826) +
                       (C33764 + C33763) * C139305) *
                          C139575) *
                         C139442 * C139561 +
                     (((C30812 * C4223 + C30408 * C4899 + C30813 * C6442 +
                        C139588 * C6922) *
                           C826 +
                       (C30812 * C4230 + C30408 * C4903 + C30813 * C6445 +
                        C139588 * C6925) *
                           C821 -
                       (C35892 + C35893) * C827 - (C35894 + C35895) * C139305) *
                          C13591 +
                      ((C35893 + C35892) * C826 + (C35895 + C35894) * C821 -
                       (C30813 * C6440 + C139588 * C6920 + C30812 * C4225 +
                        C30408 * C4901) *
                           C827 -
                       (C30813 * C6443 + C139588 * C6923 + C30812 * C4232 +
                        C30408 * C4905) *
                           C139305) *
                          C139575) *
                         C139442 * C139403) *
                        C139377)) /
                  (p * q * std::sqrt(p + q));
    d2eezy[31] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C30812 * C107 + C30408 * C555 + C30813 * C1767 +
              C139588 * C2376) *
                 C2783 +
             (C30812 * C182 + C30408 * C641 + C30813 * C1873 +
              C139588 * C2492) *
                 C139560 -
             (C30813 * C4223 + C139588 * C4899 + C30812 * C831 +
              C30408 * C1440) *
                 C2784 -
             (C30813 * C4337 + C139588 * C5017 + C30812 * C939 +
              C30408 * C1553) *
                 C139377) *
                C13591 +
            ((C30840 + C30839) * C2783 + (C30929 + C30930) * C139560 -
             (C31744 + C31743) * C2784 - (C31857 + C31858) * C139377) *
                C139575) *
               C139442 * C821 +
           (((C31743 + C31744) * C2784 -
             ((C30930 + C30929) * C139560 + (C30839 + C30840) * C2783) +
             (C31858 + C31857) * C139377) *
                C13591 +
            ((C33762 + C33761) * C2784 -
             ((C30931 + C30932) * C139560 + (C30844 + C30843) * C2783) +
             (C33867 + C33868) * C139377) *
                C139575) *
               C139442 * C139305) *
              C139561 +
          ((((C30812 * C4223 + C30408 * C4899 + C30813 * C6442 +
              C139588 * C6922) *
                 C2784 -
             ((C30813 * C1874 + C139588 * C2493 + C30812 * C1873 +
               C30408 * C2492) *
                  C139560 +
              (C30813 * C1768 + C139588 * C2379 + C30812 * C1767 +
               C30408 * C2376) *
                  C2783) +
             (C30812 * C4337 + C30408 * C5017 + C30813 * C6528 +
              C139588 * C7000) *
                 C139377) *
                C13591 +
            ((C35893 + C35892) * C2784 -
             ((C32952 + C32951) * C139560 + (C32838 + C32837) * C2783) +
             (C36030 + C36031) * C139377) *
                C139575) *
               C139442 * C821 +
           (((C32837 + C32838) * C2783 + (C32951 + C32952) * C139560 -
             (C35892 + C35893) * C2784 - (C36031 + C36030) * C139377) *
                C13591 +
            ((C34713 + C34712) * C2783 + (C34818 + C34819) * C139560 -
             (C30813 * C6440 + C139588 * C6920 + C30812 * C4225 +
              C30408 * C4901) *
                 C2784 -
             (C30813 * C6526 + C139588 * C7002 + C30812 * C4339 +
              C30408 * C5019) *
                 C139377) *
                C139575) *
               C139442 * C139305) *
              C139403)) /
        (p * q * std::sqrt(p + q));
    d2eezz[31] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C30812 * C107 + C30408 * C555 + C30813 * C1767 +
              C139588 * C2376) *
                 C3607 +
             (C30812 * C245 + C30408 * C719 + C30813 * C1965 +
              C139588 * C2591) *
                 C139561 -
             (C30813 * C1768 + C139588 * C2379 + C30812 * C1767 +
              C30408 * C2376) *
                 C3608 -
             (C30813 * C1966 + C139588 * C2592 + C30812 * C1965 +
              C30408 * C2591) *
                 C139403) *
                C13591 +
            ((C30840 + C30839) * C3607 + (C31013 + C31014) * C139561 -
             (C32838 + C32837) * C3608 - (C33061 + C33062) * C139403) *
                C139575) *
               C139442 * C139560 +
           (((C30812 * C4223 + C30408 * C4899 + C30813 * C6442 +
              C139588 * C6922) *
                 C3608 -
             ((C30813 * C4443 + C139588 * C5133 + C30812 * C1029 +
               C30408 * C1661) *
                  C139561 +
              (C30813 * C4223 + C139588 * C4899 + C30812 * C831 +
               C30408 * C1440) *
                  C3607) +
             (C30812 * C4443 + C30408 * C5133 + C30813 * C6608 +
              C139588 * C7077) *
                 C139403) *
                C13591 +
            ((C35893 + C35892) * C3608 -
             ((C31967 + C31968) * C139561 + (C31744 + C31743) * C3607) +
             (C36166 + C36167) * C139403) *
                C139575) *
               C139442 * C139377) *
              C821 +
          ((((C32837 + C32838) * C3608 -
             ((C31014 + C31013) * C139561 + (C30839 + C30840) * C3607) +
             (C33062 + C33061) * C139403) *
                C13591 +
            ((C34713 + C34712) * C3608 -
             ((C31015 + C31016) * C139561 + (C30844 + C30843) * C3607) +
             (C34922 + C34923) * C139403) *
                C139575) *
               C139442 * C139560 +
           (((C31743 + C31744) * C3607 + (C31968 + C31967) * C139561 -
             (C35892 + C35893) * C3608 - (C36167 + C36166) * C139403) *
                C13591 +
            ((C33762 + C33761) * C3607 + (C33971 + C33972) * C139561 -
             (C30813 * C6440 + C139588 * C6920 + C30812 * C4225 +
              C30408 * C4901) *
                 C3608 -
             (C30813 * C6606 + C139588 * C7079 + C30812 * C4445 +
              C30408 * C5135) *
                 C139403) *
                C139575) *
               C139442 * C139377) *
              C139305)) /
        (p * q * std::sqrt(p + q));
    d2eexx[32] +=
        (-std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139575 * C114) *
                C826 +
            (C13595 * C116 + C13591 * C125 + C13596 * C117 + C139575 * C126) *
                C821 -
            (C13596 * C109 + C139575 * C115 + C13595 * C108 + C13591 * C114) *
                C827 -
            (C13596 * C118 + C139575 * C127 + C13595 * C117 + C13591 * C126) *
                C139305) *
               C139442 * C30408 +
           ((C13595 * C1767 + C13591 * C1778 + C13596 * C1764 +
             C139575 * C1772) *
                C826 +
            (C13595 * C1777 + C13591 * C1790 + C13596 * C1776 +
             C139575 * C1789) *
                C821 -
            (C13596 * C1765 + C139575 * C1773 + C13595 * C1764 +
             C13591 * C1772) *
                C827 -
            (C13596 * C1775 + C139575 * C1788 + C13595 * C1776 +
             C13591 * C1789) *
                C139305) *
               C139442 * C139588) *
              C139339 * C823 +
          (((C14341 + C14340) * C827 -
            ((C14339 + C14338) * C821 + (C14337 + C14336) * C826) +
            (C14343 + C14342) * C139305) *
               C139442 * C30408 +
           ((C18257 + C18258) * C827 -
            ((C18259 + C18260) * C821 + (C18261 + C18262) * C826) +
            (C18263 + C18264) * C139305) *
               C139442 * C139588) *
              C139339 * C824 +
          (((C14349 + C14348) * C826 + (C14347 + C14346) * C821 -
            (C14345 + C14344) * C827 - (C14351 + C14350) * C139305) *
               C139442 * C30408 +
           ((C24145 + C24146) * C826 + (C24147 + C24148) * C821 -
            (C13596 * C8752 + C139575 * C8758 + C13595 * C8753 +
             C13591 * C8759) *
                C827 -
            (C13596 * C8755 + C139575 * C8761 + C13595 * C8756 +
             C13591 * C8762) *
                C139305) *
               C139442 * C139588) *
              C139339 * C825)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139575 * C114) *
               C103 +
           (C13595 * C116 + C13591 * C125 + C13596 * C117 + C139575 * C126) *
               C92 -
           (C13596 * C109 + C139575 * C115 + C13595 * C108 + C13591 * C114) *
               C104 -
           (C13596 * C118 + C139575 * C127 + C13595 * C117 + C13591 * C126) *
               C93 +
           (C13595 * C109 + C13591 * C115 + C13596 * C110 + C139575 * C119) *
               C105 +
           (C13595 * C118 + C13591 * C127 + C13596 * C120 + C139575 * C128) *
               C94 -
           (C13596 * C111 + C139575 * C121 + C13595 * C110 + C13591 * C119) *
               C106 -
           (C13596 * C122 + C139575 * C129 + C13595 * C120 + C13591 * C128) *
               C95) *
              C139442 * C30408 +
          ((C13595 * C1767 + C13591 * C1778 + C13596 * C1764 +
            C139575 * C1772) *
               C103 +
           (C13595 * C1777 + C13591 * C1790 + C13596 * C1776 +
            C139575 * C1789) *
               C92 -
           (C13596 * C1765 + C139575 * C1773 + C13595 * C1764 +
            C13591 * C1772) *
               C104 -
           (C13596 * C1775 + C139575 * C1788 + C13595 * C1776 +
            C13591 * C1789) *
               C93 +
           (C13595 * C1765 + C13591 * C1773 + C13596 * C1766 +
            C139575 * C1774) *
               C105 +
           (C13595 * C1775 + C13591 * C1788 + C13596 * C1779 +
            C139575 * C1791) *
               C94 -
           (C13596 * C3453 + C139575 * C3454 + C13595 * C1766 +
            C13591 * C1774) *
               C106 -
           (C13596 * C3455 + C139575 * C3456 + C13595 * C1779 +
            C13591 * C1791) *
               C95) *
              C139442 * C139588) *
         C139339 * C139328) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139575 * C114) *
                C826 +
            (C13595 * C116 + C13591 * C125 + C13596 * C117 + C139575 * C126) *
                C821 -
            (C13596 * C109 + C139575 * C115 + C13595 * C108 + C13591 * C114) *
                C827 -
            (C13596 * C118 + C139575 * C127 + C13595 * C117 + C13591 * C126) *
                C139305) *
               C139442 * C30408 +
           ((C32101 + C32102) * C826 + (C32103 + C32104) * C821 -
            (C32105 + C32106) * C827 - (C32107 + C32108) * C139305) *
               C139442 * C139588) *
              C1761 +
          (((C32106 + C32105) * C827 -
            ((C32104 + C32103) * C821 + (C32102 + C32101) * C826) +
            (C32108 + C32107) * C139305) *
               C139442 * C30408 +
           ((C32109 + C32110) * C827 -
            ((C32111 + C32112) * C821 + (C32113 + C32114) * C826) +
            (C32115 + C32116) * C139305) *
               C139442 * C139588) *
              C1762 +
          (((C32114 + C32113) * C826 + (C32112 + C32111) * C821 -
            (C32110 + C32109) * C827 - (C32116 + C32115) * C139305) *
               C139442 * C30408 +
           ((C13595 * C10815 + C13591 * C10821 + C13596 * C10814 +
             C139575 * C10820) *
                C826 +
            (C13595 * C10818 + C13591 * C10824 + C13596 * C10817 +
             C139575 * C10823) *
                C821 -
            (C13596 * C10813 + C139575 * C10819 + C13595 * C10814 +
             C13591 * C10820) *
                C827 -
            (C13596 * C10816 + C139575 * C10822 + C13595 * C10817 +
             C13591 * C10823) *
                C139305) *
               C139442 * C139588) *
              C1763) *
         C139328) /
            (p * q * std::sqrt(p + q));
    d2eexy[32] +=
        (-std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139575 * C114) *
                C934 +
            (C13595 * C182 + C13591 * C188 + C13596 * C183 + C139575 * C189) *
                C823 -
            (C14337 + C14336) * C935 - (C14466 + C14467) * C824 +
            (C14349 + C14348) * C936 + (C14468 + C14469) * C825) *
               C139442 * C30408 +
           ((C13595 * C1767 + C13591 * C1778 + C13596 * C1764 +
             C139575 * C1772) *
                C934 +
            (C13595 * C1873 + C13591 * C1881 + C13596 * C1870 +
             C139575 * C1878) *
                C823 -
            (C18261 + C18262) * C935 - (C18404 + C18403) * C824 +
            (C24145 + C24146) * C936 + (C24256 + C24255) * C825) *
               C139442 * C139588) *
              C821 +
          (((C14341 + C14340) * C935 -
            ((C13596 * C184 + C139575 * C190 + C13595 * C183 + C13591 * C189) *
                 C823 +
             (C13596 * C109 + C139575 * C115 + C13595 * C108 + C13591 * C114) *
                 C934) +
            (C14470 + C14471) * C824 - (C14345 + C14344) * C936 -
            (C14472 + C14473) * C825) *
               C139442 * C30408 +
           ((C18257 + C18258) * C935 -
            ((C13596 * C1871 + C139575 * C1879 + C13595 * C1870 +
              C13591 * C1878) *
                 C823 +
             (C13596 * C1765 + C139575 * C1773 + C13595 * C1764 +
              C13591 * C1772) *
                 C934) +
            (C18406 + C18405) * C824 -
            (C13596 * C8752 + C139575 * C8758 + C13595 * C8753 +
             C13591 * C8759) *
                C936 -
            (C13596 * C8838 + C139575 * C8841 + C13595 * C8839 +
             C13591 * C8842) *
                C825) *
               C139442 * C139588) *
              C139305) *
         C139339) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139575 * C114) *
                C181 +
            (C13595 * C182 + C13591 * C188 + C13596 * C183 + C139575 * C189) *
                C139328) *
               C139442 * C30408 +
           ((C13595 * C1767 + C13591 * C1778 + C13596 * C1764 +
             C139575 * C1772) *
                C181 +
            (C13595 * C1873 + C13591 * C1881 + C13596 * C1870 +
             C139575 * C1878) *
                C139328) *
               C139442 * C139588) *
              C92 -
          (((C13596 * C1871 + C139575 * C1879 + C13595 * C1870 +
             C13591 * C1878) *
                C139328 +
            (C13596 * C1765 + C139575 * C1773 + C13595 * C1764 +
             C13591 * C1772) *
                C181) *
               C139442 * C139588 +
           ((C13596 * C184 + C139575 * C190 + C13595 * C183 + C13591 * C189) *
                C139328 +
            (C13596 * C109 + C139575 * C115 + C13595 * C108 + C13591 * C114) *
                C181) *
               C139442 * C30408) *
              C93 +
          (((C13595 * C109 + C13591 * C115 + C13596 * C110 + C139575 * C119) *
                C181 +
            (C13595 * C184 + C13591 * C190 + C13596 * C185 + C139575 * C191) *
                C139328) *
               C139442 * C30408 +
           ((C13595 * C1765 + C13591 * C1773 + C13596 * C1766 +
             C139575 * C1774) *
                C181 +
            (C13595 * C1871 + C13591 * C1879 + C13596 * C1872 +
             C139575 * C1880) *
                C139328) *
               C139442 * C139588) *
              C94 -
          (((C13596 * C3531 + C139575 * C3532 + C13595 * C1872 +
             C13591 * C1880) *
                C139328 +
            (C13596 * C3453 + C139575 * C3454 + C13595 * C1766 +
             C13591 * C1774) *
                C181) *
               C139442 * C139588 +
           ((C13596 * C186 + C139575 * C192 + C13595 * C185 + C13591 * C191) *
                C139328 +
            (C13596 * C111 + C139575 * C121 + C13595 * C110 + C13591 * C119) *
                C181) *
               C139442 * C30408) *
              C95) *
         C139339) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139575 * C114) *
                 C181 +
             (C13595 * C182 + C13591 * C188 + C13596 * C183 + C139575 * C189) *
                 C139328) *
                C139442 * C30408 +
            ((C32101 + C32102) * C181 + (C32231 + C32232) * C139328) * C139442 *
                C139588) *
               C821 -
           (((C32233 + C32234) * C139328 + (C32105 + C32106) * C181) * C139442 *
                C139588 +
            ((C13596 * C184 + C139575 * C190 + C13595 * C183 + C13591 * C189) *
                 C139328 +
             (C13596 * C109 + C139575 * C115 + C13595 * C108 + C13591 * C114) *
                 C181) *
                C139442 * C30408) *
               C139305) *
              C1761 +
          ((((C32106 + C32105) * C181 + (C32234 + C32233) * C139328) * C139442 *
                C30408 +
            ((C32109 + C32110) * C181 + (C32235 + C32236) * C139328) * C139442 *
                C139588) *
               C139305 -
           (((C32237 + C32238) * C139328 + (C32113 + C32114) * C181) * C139442 *
                C139588 +
            ((C32232 + C32231) * C139328 + (C32102 + C32101) * C181) * C139442 *
                C30408) *
               C821) *
              C1762 +
          ((((C32114 + C32113) * C181 + (C32238 + C32237) * C139328) * C139442 *
                C30408 +
            ((C13595 * C10815 + C13591 * C10821 + C13596 * C10814 +
              C139575 * C10820) *
                 C181 +
             (C13595 * C10877 + C13591 * C10880 + C13596 * C10876 +
              C139575 * C10879) *
                 C139328) *
                C139442 * C139588) *
               C821 -
           (((C13596 * C10875 + C139575 * C10878 + C13595 * C10876 +
              C13591 * C10879) *
                 C139328 +
             (C13596 * C10813 + C139575 * C10819 + C13595 * C10814 +
              C13591 * C10820) *
                 C181) *
                C139442 * C139588 +
            ((C32236 + C32235) * C139328 + (C32110 + C32109) * C181) * C139442 *
                C30408) *
               C139305) *
              C1763)) /
            (p * q * std::sqrt(p + q));
    d2eexz[32] +=
        (-std::pow(Pi, 2.5) *
         (((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139575 * C114) *
                 C244 +
             (C13595 * C245 + C13591 * C251 + C13596 * C246 + C139575 * C252) *
                 C139339) *
                C139442 * C30408 +
            ((C13595 * C1767 + C13591 * C1778 + C13596 * C1764 +
              C139575 * C1772) *
                 C244 +
             (C13595 * C1965 + C13591 * C1973 + C13596 * C1964 +
              C139575 * C1972) *
                 C139339) *
                C139442 * C139588) *
               C823 -
           (((C18545 + C18546) * C139339 + (C18261 + C18262) * C244) * C139442 *
                C139588 +
            ((C14589 + C14588) * C139339 + (C14337 + C14336) * C244) * C139442 *
                C30408) *
               C824 +
           (((C14349 + C14348) * C244 + (C14591 + C14590) * C139339) * C139442 *
                C30408 +
            ((C24145 + C24146) * C244 + (C24363 + C24364) * C139339) * C139442 *
                C139588) *
               C825) *
              C821 +
          ((((C14341 + C14340) * C244 + (C14592 + C14593) * C139339) * C139442 *
                C30408 +
            ((C18257 + C18258) * C244 + (C18547 + C18548) * C139339) * C139442 *
                C139588) *
               C824 -
           (((C13596 * C1963 + C139575 * C1971 + C13595 * C1964 +
              C13591 * C1972) *
                 C139339 +
             (C13596 * C1765 + C139575 * C1773 + C13595 * C1764 +
              C13591 * C1772) *
                 C244) *
                C139442 * C139588 +
            ((C13596 * C247 + C139575 * C253 + C13595 * C246 + C13591 * C252) *
                 C139339 +
             (C13596 * C109 + C139575 * C115 + C13595 * C108 + C13591 * C114) *
                 C244) *
                C139442 * C30408) *
               C823 -
           (((C13596 * C8918 + C139575 * C8921 + C13595 * C8919 +
              C13591 * C8922) *
                 C139339 +
             (C13596 * C8752 + C139575 * C8758 + C13595 * C8753 +
              C13591 * C8759) *
                 C244) *
                C139442 * C139588 +
            ((C14595 + C14594) * C139339 + (C14345 + C14344) * C244) * C139442 *
                C30408) *
               C825) *
              C139305)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139575 * C114) *
                C244 +
            (C13595 * C245 + C13591 * C251 + C13596 * C246 + C139575 * C252) *
                C139339) *
               C139442 * C30408 +
           ((C13595 * C1767 + C13591 * C1778 + C13596 * C1764 +
             C139575 * C1772) *
                C244 +
            (C13595 * C1965 + C13591 * C1973 + C13596 * C1964 +
             C139575 * C1972) *
                C139339) *
               C139442 * C139588) *
              C139328 * C92 -
          (((C13596 * C1963 + C139575 * C1971 + C13595 * C1964 +
             C13591 * C1972) *
                C139339 +
            (C13596 * C1765 + C139575 * C1773 + C13595 * C1764 +
             C13591 * C1772) *
                C244) *
               C139442 * C139588 +
           ((C13596 * C247 + C139575 * C253 + C13595 * C246 + C13591 * C252) *
                C139339 +
            (C13596 * C109 + C139575 * C115 + C13595 * C108 + C13591 * C114) *
                C244) *
               C139442 * C30408) *
              C139328 * C93 +
          (((C13595 * C109 + C13591 * C115 + C13596 * C110 + C139575 * C119) *
                C244 +
            (C13595 * C247 + C13591 * C253 + C13596 * C248 + C139575 * C254) *
                C139339) *
               C139442 * C30408 +
           ((C13595 * C1765 + C13591 * C1773 + C13596 * C1766 +
             C139575 * C1774) *
                C244 +
            (C13595 * C1963 + C13591 * C1971 + C13596 * C1969 +
             C139575 * C1977) *
                C139339) *
               C139442 * C139588) *
              C139328 * C94 -
          (((C13596 * C3609 + C139575 * C3610 + C13595 * C1969 +
             C13591 * C1977) *
                C139339 +
            (C13596 * C3453 + C139575 * C3454 + C13595 * C1766 +
             C13591 * C1774) *
                C244) *
               C139442 * C139588 +
           ((C13596 * C249 + C139575 * C255 + C13595 * C248 + C13591 * C254) *
                C139339 +
            (C13596 * C111 + C139575 * C121 + C13595 * C110 + C13591 * C119) *
                C244) *
               C139442 * C30408) *
              C139328 * C95)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139575 * C114) *
                C1960 +
            (C13595 * C245 + C13591 * C251 + C13596 * C246 + C139575 * C252) *
                C1761 -
            (C32102 + C32101) * C1961 - (C32353 + C32354) * C1762 +
            (C32114 + C32113) * C1962 + (C32355 + C32356) * C1763) *
               C139442 * C30408 +
           ((C32101 + C32102) * C1960 + (C32354 + C32353) * C1761 -
            (C32113 + C32114) * C1961 - (C32356 + C32355) * C1762 +
            (C13595 * C10815 + C13591 * C10821 + C13596 * C10814 +
             C139575 * C10820) *
                C1962 +
            (C13595 * C10937 + C13591 * C10940 + C13596 * C10936 +
             C139575 * C10939) *
                C1763) *
               C139442 * C139588) *
              C139328 * C821 +
          (((C32106 + C32105) * C1961 -
            ((C13596 * C247 + C139575 * C253 + C13595 * C246 + C13591 * C252) *
                 C1761 +
             (C13596 * C109 + C139575 * C115 + C13595 * C108 + C13591 * C114) *
                 C1960) +
            (C32357 + C32358) * C1762 - (C32110 + C32109) * C1962 -
            (C32359 + C32360) * C1763) *
               C139442 * C30408 +
           ((C32109 + C32110) * C1961 -
            ((C32358 + C32357) * C1761 + (C32105 + C32106) * C1960) +
            (C32360 + C32359) * C1762 -
            (C13596 * C10813 + C139575 * C10819 + C13595 * C10814 +
             C13591 * C10820) *
                C1962 -
            (C13596 * C10935 + C139575 * C10938 + C13595 * C10936 +
             C13591 * C10939) *
                C1763) *
               C139442 * C139588) *
              C139328 * C139305)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[32] +=
        (-std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139442 * C308) * C826 +
             (C307 * C116 + C139442 * C314) * C821 - C337 * C827 -
             C338 * C139305) *
                C30408 +
            ((C307 * C1767 + C139442 * C2054) * C826 +
             (C307 * C1777 + C139442 * C2061) * C821 - C2086 * C827 -
             C2087 * C139305) *
                C139588) *
               C13591 +
           ((C337 * C826 + C338 * C821 - C339 * C827 - C340 * C139305) *
                C30408 +
            (C2086 * C826 + C2087 * C821 - C2088 * C827 - C2089 * C139305) *
                C139588) *
               C139575) *
              C139339 * C823 +
          (((C1150 * C827 -
             ((C307 * C841 + C139442 * C1125) * C821 +
              (C307 * C831 + C139442 * C1118) * C826) +
             C1151 * C139305) *
                C30408 +
            (C4566 * C827 -
             ((C307 * C4230 + C139442 * C4553) * C821 +
              (C307 * C4223 + C139442 * C4549) * C826) +
             C4567 * C139305) *
                C139588) *
               C13591 +
           ((C1152 * C827 - (C1151 * C821 + C1150 * C826) + C1153 * C139305) *
                C30408 +
            (C4568 * C827 - (C4567 * C821 + C4566 * C826) + C4569 * C139305) *
                C139588) *
               C139575) *
              C139339 * C824 +
          ((((C307 * C832 + C139442 * C1121) * C826 +
             (C307 * C847 + C139442 * C1129) * C821 - C1154 * C827 -
             C1155 * C139305) *
                C30408 +
            ((C307 * C8754 + C139442 * C9000) * C826 +
             (C307 * C8757 + C139442 * C9003) * C821 - C31415 * C827 -
             C31416 * C139305) *
                C139588) *
               C13591 +
           ((C1154 * C826 + C1155 * C821 - C1156 * C827 - C1157 * C139305) *
                C30408 +
            (C31415 * C826 + C31416 * C821 -
             (C307 * C8752 + C139442 * C8998) * C827 -
             (C307 * C8755 + C139442 * C9001) * C139305) *
                C139588) *
               C139575) *
              C139339 * C825)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139442 * C308) * C103 +
            (C307 * C116 + C139442 * C314) * C92 - C337 * C104 - C338 * C93 +
            C339 * C105 + C340 * C94 - C341 * C106 - C342 * C95) *
               C30408 +
           ((C307 * C1767 + C139442 * C2054) * C103 +
            (C307 * C1777 + C139442 * C2061) * C92 - C2086 * C104 -
            C2087 * C93 + C2088 * C105 + C2089 * C94 - C3692 * C106 -
            C3693 * C95) *
               C139588) *
              C13591 +
          ((C337 * C103 + C338 * C92 - C339 * C104 - C340 * C93 + C341 * C105 +
            C342 * C94 - C343 * C106 - C344 * C95) *
               C30408 +
           (C2086 * C103 + C2087 * C92 - C2088 * C104 - C2089 * C93 +
            C3692 * C105 + C3693 * C94 -
            (C307 * C3453 + C139442 * C3685) * C106 -
            (C307 * C3455 + C139442 * C3686) * C95) *
               C139588) *
              C139575) *
         C139339 * C139328) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139442 * C308) * C826 +
             (C307 * C116 + C139442 * C314) * C821 - C337 * C827 -
             C338 * C139305) *
                C30408 +
            (C32489 + C32490 - C32463 - C32464) * C139588) *
               C13591 +
           ((C337 * C826 + C338 * C821 - C339 * C827 - C340 * C139305) *
                C30408 +
            (C32465 + C32466 - C32467 - C32468) * C139588) *
               C139575) *
              C1761 +
          (((C32463 - (C32490 + C32489) + C32464) * C30408 +
            (C32469 - (C32491 + C32492) + C32474) * C139588) *
               C13591 +
           ((C32467 - (C32466 + C32465) + C32468) * C30408 +
            (C32475 - (C32476 + C32477) + C32478) * C139588) *
               C139575) *
              C1762 +
          (((C32492 + C32491 - C32469 - C32474) * C30408 +
            ((C307 * C10815 + C139442 * C10993) * C826 +
             (C307 * C10818 + C139442 * C10996) * C821 - C32487 * C827 -
             C32488 * C139305) *
                C139588) *
               C13591 +
           ((C32477 + C32476 - C32475 - C32478) * C30408 +
            (C32487 * C826 + C32488 * C821 -
             (C307 * C10813 + C139442 * C10991) * C827 -
             (C307 * C10816 + C139442 * C10994) * C139305) *
                C139588) *
               C139575) *
              C1763) *
         C139328) /
            (p * q * std::sqrt(p + q));
    d2eeyy[32] +=
        (-std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139442 * C308) * C934 +
             (C307 * C182 + C139442 * C394) * C823 -
             (C307 * C831 + C139442 * C1118) * C935 -
             (C307 * C939 + C139442 * C1231) * C824 +
             (C307 * C832 + C139442 * C1121) * C936 +
             (C307 * C940 + C139442 * C1232) * C825) *
                C30408 +
            ((C307 * C1767 + C139442 * C2054) * C934 +
             (C307 * C1873 + C139442 * C2170) * C823 -
             (C307 * C4223 + C139442 * C4549) * C935 -
             (C307 * C4337 + C139442 * C4667) * C824 +
             (C307 * C8754 + C139442 * C9000) * C936 +
             (C307 * C8840 + C139442 * C9078) * C825) *
                C139588) *
               C13591 +
           ((C1240 + C1241 - C1242 - C1260 + C1245 + C1261) * C30408 +
            (C31515 + C31516 - C31517 - C31518 + C31519 + C31523) * C139588) *
               C139575) *
              C821 +
          (((C1242 - (C1241 + C1240) + C1260 - C1245 - C1261) * C30408 +
            (C31517 - (C31516 + C31515) + C31518 - C31519 - C31523) * C139588) *
               C13591 +
           ((C1250 - (C1249 + C1248) + C1262 - C1253 - C1263) * C30408 +
            (C4568 * C935 - (C2189 * C823 + C2088 * C934) + C4683 * C824 -
             (C307 * C8752 + C139442 * C8998) * C936 -
             (C307 * C8838 + C139442 * C9080) * C825) *
                C139588) *
               C139575) *
              C139305) *
         C139339) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139442 * C308) * C181 +
             (C307 * C182 + C139442 * C394) * C139328) *
                C30408 +
            ((C307 * C1767 + C139442 * C2054) * C181 +
             (C307 * C1873 + C139442 * C2170) * C139328) *
                C139588) *
               C13591 +
           ((C401 + C417) * C30408 + (C2176 + C2192) * C139588) * C139575) *
              C92 -
          ((C3772 * C139588 + (C418 + C404) * C30408) * C139575 +
           ((C2192 + C2176) * C139588 + (C417 + C401) * C30408) * C13591) *
              C93 +
          ((C421 * C30408 + (C2179 + C2193) * C139588) * C13591 +
           ((C409 + C419) * C30408 + (C3769 + C3775) * C139588) * C139575) *
              C94 -
          ((((C307 * C3531 + C139442 * C3767) * C139328 +
             (C307 * C3453 + C139442 * C3685) * C181) *
                C139588 +
            (C420 + C410) * C30408) *
               C139575 +
           ((C3775 + C3769) * C139588 + C422 * C30408) * C13591) *
              C95) *
         C139339) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((((C307 * C107 + C139442 * C308) * C181 +
              (C307 * C182 + C139442 * C394) * C139328) *
                 C30408 +
             (C32591 + C32607) * C139588) *
                C13591 +
            ((C401 + C417) * C30408 + C32594 * C139588) * C139575) *
               C821 -
           ((C3772 * C139588 + (C418 + C404) * C30408) * C139575 +
            (C32595 * C139588 + (C417 + C401) * C30408) * C13591) *
               C139305) *
              C1761 +
          (((C32594 * C30408 + C32596 * C139588) * C13591 +
            ((C2179 + C2193) * C30408 + (C2185 + C2195) * C139588) * C139575) *
               C139305 -
           ((C32597 * C139588 + C32595 * C30408) * C139575 +
            ((C32608 + C32600) * C139588 + (C32607 + C32591) * C30408) *
                C13591) *
               C821) *
              C1762 +
          ((((C32600 + C32608) * C30408 +
             ((C307 * C10815 + C139442 * C10993) * C181 +
              (C307 * C10877 + C139442 * C11049) * C139328) *
                 C139588) *
                C13591 +
            (C32596 * C30408 + (C32601 + C32609) * C139588) * C139575) *
               C821 -
           ((((C307 * C10875 + C139442 * C11047) * C139328 +
              (C307 * C10813 + C139442 * C10991) * C181) *
                 C139588 +
             (C2195 + C2185) * C30408) *
                C139575 +
            ((C32609 + C32601) * C139588 + C32597 * C30408) * C13591) *
               C139305) *
              C1763)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[32] +=
        (-std::pow(Pi, 2.5) *
         ((((((C307 * C107 + C139442 * C308) * C244 +
              (C307 * C245 + C139442 * C474) * C139339) *
                 C30408 +
             ((C307 * C1767 + C139442 * C2054) * C244 +
              (C307 * C1965 + C139442 * C2269) * C139339) *
                 C139588) *
                C13591 +
            ((C481 + C497) * C30408 + (C30741 + C30742) * C139588) * C139575) *
               C823 -
           (((C31622 + C31623) * C139588 + (C1363 + C1351) * C30408) * C139575 +
            (((C307 * C4443 + C139442 * C4783) * C139339 +
              (C307 * C4223 + C139442 * C4549) * C244) *
                 C139588 +
             ((C307 * C1029 + C139442 * C1339) * C139339 +
              (C307 * C831 + C139442 * C1118) * C244) *
                 C30408) *
                C13591) *
               C824 +
           ((((C307 * C832 + C139442 * C1121) * C244 +
              (C307 * C1030 + C139442 * C1340) * C139339) *
                 C30408 +
             ((C307 * C8754 + C139442 * C9000) * C244 +
              (C307 * C8920 + C139442 * C9155) * C139339) *
                 C139588) *
                C13591 +
            ((C1352 + C1364) * C30408 + (C31624 + C31628) * C139588) *
                C139575) *
               C825) *
              C821 +
          ((((C1351 + C1363) * C30408 + (C31623 + C31622) * C139588) * C13591 +
            ((C1348 + C1362) * C30408 +
             (C4568 * C244 + C4799 * C139339) * C139588) *
                C139575) *
               C824 -
           (((C30743 + C30744) * C139588 + (C498 + C484) * C30408) * C139575 +
            ((C30742 + C30741) * C139588 + (C497 + C481) * C30408) * C13591) *
               C823 -
           ((((C307 * C8918 + C139442 * C9157) * C139339 +
              (C307 * C8752 + C139442 * C8998) * C244) *
                 C139588 +
             (C1365 + C1355) * C30408) *
                C139575 +
            ((C31628 + C31624) * C139588 + (C1364 + C1352) * C30408) * C13591) *
               C825) *
              C139305)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139442 * C308) * C244 +
             (C307 * C245 + C139442 * C474) * C139339) *
                C30408 +
            ((C307 * C1767 + C139442 * C2054) * C244 +
             (C307 * C1965 + C139442 * C2269) * C139339) *
                C139588) *
               C13591 +
           ((C481 + C497) * C30408 + (C30741 + C30742) * C139588) * C139575) *
              C139328 * C92 -
          (((C30743 + C30744) * C139588 + (C498 + C484) * C30408) * C139575 +
           ((C30742 + C30741) * C139588 + (C497 + C481) * C30408) * C13591) *
              C139328 * C93 +
          ((C501 * C30408 + (C30744 + C30743) * C139588) * C13591 +
           ((C489 + C499) * C30408 + (C30745 + C30746) * C139588) * C139575) *
              C139328 * C94 -
          ((((C307 * C3609 + C139442 * C3849) * C139339 +
             (C307 * C3453 + C139442 * C3685) * C244) *
                C139588 +
            (C500 + C490) * C30408) *
               C139575 +
           ((C30746 + C30745) * C139588 + C502 * C30408) * C13591) *
              C139328 * C95)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139442 * C308) * C1960 +
             (C307 * C245 + C139442 * C474) * C1761 - C32483 * C1961 -
             C32719 * C1762 + C32486 * C1962 + C32720 * C1763) *
                C30408 +
            (C32483 * C1960 + C32719 * C1761 - C32486 * C1961 - C32720 * C1762 +
             (C307 * C10815 + C139442 * C10993) * C1962 +
             (C307 * C10937 + C139442 * C11100) * C1763) *
                C139588) *
               C13591 +
           ((C2278 + C2279 - C2280 - C2298 + C2283 + C2299) * C30408 +
            (C32712 + C32713 - C32714 - C32715 + C32716 + C32722) * C139588) *
               C139575) *
              C139328 * C821 +
          (((C2280 - (C2279 + C2278) + C2298 - C2283 - C2299) * C30408 +
            (C32714 - (C32713 + C32712) + C32715 - C32716 - C32722) * C139588) *
               C13591 +
           ((C2288 - (C2287 + C2286) + C2300 - C2291 - C2301) * C30408 +
            (C2092 * C1961 - (C2296 * C1761 + C2088 * C1960) + C2297 * C1762 -
             (C307 * C10813 + C139442 * C10991) * C1962 -
             (C307 * C10935 + C139442 * C11102) * C1763) *
                C139588) *
               C139575) *
              C139328 * C139305)) /
            (p * q * std::sqrt(p + q));
    d2eezx[32] +=
        (-std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1767 + C139588 * C2376) *
                C826 +
            (C30812 * C116 + C30408 * C561 + C30813 * C1777 + C139588 * C2383) *
                C821 -
            (C30839 + C30840) * C827 - (C30841 + C30842) * C139305) *
               C13591 +
           ((C30840 + C30839) * C826 + (C30842 + C30841) * C821 -
            (C30844 + C30843) * C827 - (C30846 + C30845) * C139305) *
               C139575) *
              C139442 * C139339 * C823 +
          (((C31743 + C31744) * C827 -
            ((C30813 * C4230 + C139588 * C4903 + C30812 * C841 +
              C30408 * C1447) *
                 C821 +
             (C30813 * C4223 + C139588 * C4899 + C30812 * C831 +
              C30408 * C1440) *
                 C826) +
            (C31745 + C31746) * C139305) *
               C13591 +
           ((C30812 * C829 + C30408 * C1441 + C30813 * C4225 +
             C139588 * C4901) *
                C827 -
            ((C31746 + C31745) * C821 + (C31744 + C31743) * C826) +
            (C30812 * C839 + C30408 * C1449 + C30813 * C4232 +
             C139588 * C4905) *
                C139305) *
               C139575) *
              C139442 * C139339 * C824 +
          (((C30812 * C832 + C30408 * C1443 + C30813 * C8754 +
             C139588 * C9234) *
                C826 +
            (C30812 * C847 + C30408 * C1451 + C30813 * C8757 +
             C139588 * C9237) *
                C821 -
            (C31747 + C31748) * C827 - (C31749 + C31750) * C139305) *
               C13591 +
           ((C31748 + C31747) * C826 + (C31750 + C31749) * C821 -
            (C30813 * C8752 + C139588 * C9232 + C30812 * C834 +
             C30408 * C1445) *
                C827 -
            (C30813 * C8755 + C139588 * C9235 + C30812 * C849 +
             C30408 * C1453) *
                C139305) *
               C139575) *
              C139442 * C139339 * C825)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C30812 * C107 + C30408 * C555 + C30813 * C1767 + C139588 * C2376) *
               C103 +
           (C30812 * C116 + C30408 * C561 + C30813 * C1777 + C139588 * C2383) *
               C92 -
           (C30839 + C30840) * C104 - (C30841 + C30842) * C93 +
           (C30843 + C30844) * C105 + (C30845 + C30846) * C94 -
           (C30847 + C30848) * C106 - (C30849 + C30850) * C95) *
              C13591 +
          ((C30840 + C30839) * C103 + (C30842 + C30841) * C92 -
           (C30844 + C30843) * C104 - (C30846 + C30845) * C93 +
           (C30848 + C30847) * C105 + (C30850 + C30849) * C94 -
           (C30813 * C3453 + C139588 * C3943 + C30812 * C111 + C30408 * C559) *
               C106 -
           (C30813 * C3455 + C139588 * C3944 + C30812 * C122 + C30408 * C565) *
               C95) *
              C139575) *
         C139442 * C139339 * C139328) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1767 + C139588 * C2376) *
                C826 +
            (C30812 * C116 + C30408 * C561 + C30813 * C1777 + C139588 * C2383) *
                C821 -
            (C30839 + C30840) * C827 - (C30841 + C30842) * C139305) *
               C13591 +
           ((C30840 + C30839) * C826 + (C30842 + C30841) * C821 -
            (C30844 + C30843) * C827 - (C30846 + C30845) * C139305) *
               C139575) *
              C139442 * C1761 +
          (((C32837 + C32838) * C827 -
            ((C30813 * C1783 + C139588 * C2387 + C30812 * C1777 +
              C30408 * C2383) *
                 C821 +
             (C30813 * C1768 + C139588 * C2379 + C30812 * C1767 +
              C30408 * C2376) *
                 C826) +
            (C32839 + C32840) * C139305) *
               C13591 +
           ((C30812 * C1765 + C30408 * C2377 + C30813 * C1770 +
             C139588 * C2381) *
                C827 -
            ((C32840 + C32839) * C821 + (C32838 + C32837) * C826) +
            (C30812 * C1775 + C30408 * C2385 + C30813 * C1785 +
             C139588 * C2389) *
                C139305) *
               C139575) *
              C139442 * C1762 +
          (((C30812 * C1768 + C30408 * C2379 + C30813 * C10815 +
             C139588 * C11155) *
                C826 +
            (C30812 * C1783 + C30408 * C2387 + C30813 * C10818 +
             C139588 * C11158) *
                C821 -
            (C32841 + C32842) * C827 - (C32843 + C32844) * C139305) *
               C13591 +
           ((C32842 + C32841) * C826 + (C32844 + C32843) * C821 -
            (C30813 * C10813 + C139588 * C11153 + C30812 * C1770 +
             C30408 * C2381) *
                C827 -
            (C30813 * C10816 + C139588 * C11156 + C30812 * C1785 +
             C30408 * C2389) *
                C139305) *
               C139575) *
              C139442 * C1763) *
         C139328) /
            (p * q * std::sqrt(p + q));
    d2eezy[32] +=
        (-std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1767 + C139588 * C2376) *
                C934 +
            (C30812 * C182 + C30408 * C641 + C30813 * C1873 + C139588 * C2492) *
                C823 -
            (C30813 * C4223 + C139588 * C4899 + C30812 * C831 +
             C30408 * C1440) *
                C935 -
            (C30813 * C4337 + C139588 * C5017 + C30812 * C939 +
             C30408 * C1553) *
                C824 +
            (C30812 * C832 + C30408 * C1443 + C30813 * C8754 +
             C139588 * C9234) *
                C936 +
            (C30812 * C940 + C30408 * C1554 + C30813 * C8840 +
             C139588 * C9312) *
                C825) *
               C13591 +
           ((C30840 + C30839) * C934 + (C30929 + C30930) * C823 -
            (C31744 + C31743) * C935 - (C31857 + C31858) * C824 +
            (C31748 + C31747) * C936 + (C31859 + C31860) * C825) *
               C139575) *
              C139442 * C821 +
          (((C31743 + C31744) * C935 -
            ((C30930 + C30929) * C823 + (C30839 + C30840) * C934) +
            (C31858 + C31857) * C824 - (C31747 + C31748) * C936 -
            (C31860 + C31859) * C825) *
               C13591 +
           ((C30812 * C829 + C30408 * C1441 + C30813 * C4225 +
             C139588 * C4901) *
                C935 -
            ((C30931 + C30932) * C823 + (C30844 + C30843) * C934) +
            (C30812 * C937 + C30408 * C1557 + C30813 * C4339 +
             C139588 * C5019) *
                C824 -
            (C30813 * C8752 + C139588 * C9232 + C30812 * C834 +
             C30408 * C1445) *
                C936 -
            (C30813 * C8838 + C139588 * C9314 + C30812 * C942 +
             C30408 * C1558) *
                C825) *
               C139575) *
              C139442 * C139305) *
         C139339) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1767 + C139588 * C2376) *
                C181 +
            (C30812 * C182 + C30408 * C641 + C30813 * C1873 + C139588 * C2492) *
                C139328) *
               C13591 +
           ((C30840 + C30839) * C181 + (C30929 + C30930) * C139328) * C139575) *
              C139442 * C92 -
          (((C30931 + C30932) * C139328 + (C30844 + C30843) * C181) * C139575 +
           ((C30930 + C30929) * C139328 + (C30839 + C30840) * C181) * C13591) *
              C139442 * C93 +
          (((C30843 + C30844) * C181 + (C30932 + C30931) * C139328) * C13591 +
           ((C30848 + C30847) * C181 + (C30933 + C30934) * C139328) * C139575) *
              C139442 * C94 -
          (((C30813 * C3531 + C139588 * C4025 + C30812 * C186 + C30408 * C645) *
                C139328 +
            (C30813 * C3453 + C139588 * C3943 + C30812 * C111 + C30408 * C559) *
                C181) *
               C139575 +
           ((C30934 + C30933) * C139328 + (C30847 + C30848) * C181) * C13591) *
              C139442 * C95) *
         C139339) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C30812 * C107 + C30408 * C555 + C30813 * C1767 +
              C139588 * C2376) *
                 C181 +
             (C30812 * C182 + C30408 * C641 + C30813 * C1873 +
              C139588 * C2492) *
                 C139328) *
                C13591 +
            ((C30840 + C30839) * C181 + (C30929 + C30930) * C139328) *
                C139575) *
               C139442 * C821 -
           (((C30931 + C30932) * C139328 + (C30844 + C30843) * C181) * C139575 +
            ((C30930 + C30929) * C139328 + (C30839 + C30840) * C181) * C13591) *
               C139442 * C139305) *
              C1761 +
          ((((C32837 + C32838) * C181 + (C32951 + C32952) * C139328) * C13591 +
            ((C30812 * C1765 + C30408 * C2377 + C30813 * C1770 +
              C139588 * C2381) *
                 C181 +
             (C30812 * C1871 + C30408 * C2490 + C30813 * C1876 +
              C139588 * C2495) *
                 C139328) *
                C139575) *
               C139442 * C139305 -
           (((C32952 + C32951) * C139328 + (C32838 + C32837) * C181) * C139575 +
            ((C30813 * C1874 + C139588 * C2493 + C30812 * C1873 +
              C30408 * C2492) *
                 C139328 +
             (C30813 * C1768 + C139588 * C2379 + C30812 * C1767 +
              C30408 * C2376) *
                 C181) *
                C13591) *
               C139442 * C821) *
              C1762 +
          ((((C30812 * C1768 + C30408 * C2379 + C30813 * C10815 +
              C139588 * C11155) *
                 C181 +
             (C30812 * C1874 + C30408 * C2493 + C30813 * C10877 +
              C139588 * C11211) *
                 C139328) *
                C13591 +
            ((C32842 + C32841) * C181 + (C32953 + C32954) * C139328) *
                C139575) *
               C139442 * C821 -
           (((C30813 * C10875 + C139588 * C11209 + C30812 * C1876 +
              C30408 * C2495) *
                 C139328 +
             (C30813 * C10813 + C139588 * C11153 + C30812 * C1770 +
              C30408 * C2381) *
                 C181) *
                C139575 +
            ((C32954 + C32953) * C139328 + (C32841 + C32842) * C181) * C13591) *
               C139442 * C139305) *
              C1763)) /
            (p * q * std::sqrt(p + q));
    d2eezz[32] +=
        (-std::pow(Pi, 2.5) *
         (((((C30812 * C107 + C30408 * C555 + C30813 * C1767 +
              C139588 * C2376) *
                 C244 +
             (C30812 * C245 + C30408 * C719 + C30813 * C1965 +
              C139588 * C2591) *
                 C139339) *
                C13591 +
            ((C30840 + C30839) * C244 + (C31013 + C31014) * C139339) *
                C139575) *
               C139442 * C823 -
           (((C31967 + C31968) * C139339 + (C31744 + C31743) * C244) * C139575 +
            ((C30813 * C4443 + C139588 * C5133 + C30812 * C1029 +
              C30408 * C1661) *
                 C139339 +
             (C30813 * C4223 + C139588 * C4899 + C30812 * C831 +
              C30408 * C1440) *
                 C244) *
                C13591) *
               C139442 * C824 +
           (((C30812 * C832 + C30408 * C1443 + C30813 * C8754 +
              C139588 * C9234) *
                 C244 +
             (C30812 * C1030 + C30408 * C1662 + C30813 * C8920 +
              C139588 * C9389) *
                 C139339) *
                C13591 +
            ((C31748 + C31747) * C244 + (C31969 + C31970) * C139339) *
                C139575) *
               C139442 * C825) *
              C821 +
          ((((C31743 + C31744) * C244 + (C31968 + C31967) * C139339) * C13591 +
            ((C30812 * C829 + C30408 * C1441 + C30813 * C4225 +
              C139588 * C4901) *
                 C244 +
             (C30812 * C1027 + C30408 * C1659 + C30813 * C4445 +
              C139588 * C5135) *
                 C139339) *
                C139575) *
               C139442 * C824 -
           (((C31015 + C31016) * C139339 + (C30844 + C30843) * C244) * C139575 +
            ((C31014 + C31013) * C139339 + (C30839 + C30840) * C244) * C13591) *
               C139442 * C823 -
           (((C30813 * C8918 + C139588 * C9391 + C30812 * C1032 +
              C30408 * C1664) *
                 C139339 +
             (C30813 * C8752 + C139588 * C9232 + C30812 * C834 +
              C30408 * C1445) *
                 C244) *
                C139575 +
            ((C31970 + C31969) * C139339 + (C31747 + C31748) * C244) * C13591) *
               C139442 * C825) *
              C139305)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1767 + C139588 * C2376) *
                C244 +
            (C30812 * C245 + C30408 * C719 + C30813 * C1965 + C139588 * C2591) *
                C139339) *
               C13591 +
           ((C30840 + C30839) * C244 + (C31013 + C31014) * C139339) * C139575) *
              C139442 * C139328 * C92 -
          (((C31015 + C31016) * C139339 + (C30844 + C30843) * C244) * C139575 +
           ((C31014 + C31013) * C139339 + (C30839 + C30840) * C244) * C13591) *
              C139442 * C139328 * C93 +
          (((C30843 + C30844) * C244 + (C31016 + C31015) * C139339) * C13591 +
           ((C30848 + C30847) * C244 + (C31017 + C31018) * C139339) * C139575) *
              C139442 * C139328 * C94 -
          (((C30813 * C3609 + C139588 * C4106 + C30812 * C249 + C30408 * C723) *
                C139339 +
            (C30813 * C3453 + C139588 * C3943 + C30812 * C111 + C30408 * C559) *
                C244) *
               C139575 +
           ((C31018 + C31017) * C139339 + (C30847 + C30848) * C244) * C13591) *
              C139442 * C139328 * C95)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1767 + C139588 * C2376) *
                C1960 +
            (C30812 * C245 + C30408 * C719 + C30813 * C1965 + C139588 * C2591) *
                C1761 -
            (C30813 * C1768 + C139588 * C2379 + C30812 * C1767 +
             C30408 * C2376) *
                C1961 -
            (C30813 * C1966 + C139588 * C2592 + C30812 * C1965 +
             C30408 * C2591) *
                C1762 +
            (C30812 * C1768 + C30408 * C2379 + C30813 * C10815 +
             C139588 * C11155) *
                C1962 +
            (C30812 * C1966 + C30408 * C2592 + C30813 * C10937 +
             C139588 * C11262) *
                C1763) *
               C13591 +
           ((C30840 + C30839) * C1960 + (C31013 + C31014) * C1761 -
            (C32838 + C32837) * C1961 - (C33061 + C33062) * C1762 +
            (C32842 + C32841) * C1962 + (C33063 + C33064) * C1763) *
               C139575) *
              C139442 * C139328 * C821 +
          (((C32837 + C32838) * C1961 -
            ((C31014 + C31013) * C1761 + (C30839 + C30840) * C1960) +
            (C33062 + C33061) * C1762 - (C32841 + C32842) * C1962 -
            (C33064 + C33063) * C1763) *
               C13591 +
           ((C30812 * C1765 + C30408 * C2377 + C30813 * C1770 +
             C139588 * C2381) *
                C1961 -
            ((C31015 + C31016) * C1761 + (C30844 + C30843) * C1960) +
            (C30812 * C1963 + C30408 * C2595 + C30813 * C1968 +
             C139588 * C2596) *
                C1762 -
            (C30813 * C10813 + C139588 * C11153 + C30812 * C1770 +
             C30408 * C2381) *
                C1962 -
            (C30813 * C10935 + C139588 * C11264 + C30812 * C1968 +
             C30408 * C2596) *
                C1763) *
               C139575) *
              C139442 * C139328 * C139305)) /
            (p * q * std::sqrt(p + q));
    d2eexx[33] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139575 * C114) *
                C2702 +
            (C13595 * C116 + C13591 * C125 + C13596 * C117 + C139575 * C126) *
                C139589 -
            (C13596 * C109 + C139575 * C115 + C13595 * C108 + C13591 * C114) *
                C2703 -
            (C13596 * C118 + C139575 * C127 + C13595 * C117 + C13591 * C126) *
                C139590 +
            (C13595 * C109 + C13591 * C115 + C13596 * C110 + C139575 * C119) *
                C2704 +
            (C13595 * C118 + C13591 * C127 + C13596 * C120 + C139575 * C128) *
                C2699) *
               C139442 * C30408 +
           ((C32101 + C32102) * C2702 + (C32103 + C32104) * C139589 -
            (C32105 + C32106) * C2703 - (C32107 + C32108) * C139590 +
            (C34079 + C34080) * C2704 + (C34081 + C34082) * C2699) *
               C139442 * C139588) *
              C139561 +
          (((C32106 + C32105) * C2703 -
            ((C32104 + C32103) * C139589 + (C32102 + C32101) * C2702) +
            (C32108 + C32107) * C139590 - (C34080 + C34079) * C2704 -
            (C34082 + C34081) * C2699) *
               C139442 * C30408 +
           ((C32109 + C32110) * C2703 -
            ((C32111 + C32112) * C139589 + (C32113 + C32114) * C2702) +
            (C32115 + C32116) * C139590 -
            (C13596 * C1771 + C139575 * C1786 + C13595 * C1770 +
             C13591 * C1782) *
                C2704 -
            (C13596 * C1787 + C139575 * C1795 + C13595 * C1785 +
             C13591 * C1794) *
                C2699) *
               C139442 * C139588) *
              C139403) *
         C139328) /
        (p * q * std::sqrt(p + q));
    d2eexy[33] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139575 * C114) *
                 C181 +
             (C13595 * C182 + C13591 * C188 + C13596 * C183 + C139575 * C189) *
                 C139328) *
                C139442 * C30408 +
            ((C32101 + C32102) * C181 + (C32231 + C32232) * C139328) * C139442 *
                C139588) *
               C139589 -
           (((C32233 + C32234) * C139328 + (C32105 + C32106) * C181) * C139442 *
                C139588 +
            ((C13596 * C184 + C139575 * C190 + C13595 * C183 + C13591 * C189) *
                 C139328 +
             (C13596 * C109 + C139575 * C115 + C13595 * C108 + C13591 * C114) *
                 C181) *
                C139442 * C30408) *
               C139590 +
           (((C13595 * C109 + C13591 * C115 + C13596 * C110 + C139575 * C119) *
                 C181 +
             (C13595 * C184 + C13591 * C190 + C13596 * C185 + C139575 * C191) *
                 C139328) *
                C139442 * C30408 +
            ((C34079 + C34080) * C181 + (C34185 + C34186) * C139328) * C139442 *
                C139588) *
               C2699) *
              C139561 +
          ((((C32106 + C32105) * C181 + (C32234 + C32233) * C139328) * C139442 *
                C30408 +
            ((C32109 + C32110) * C181 + (C32235 + C32236) * C139328) * C139442 *
                C139588) *
               C139590 -
           (((C32237 + C32238) * C139328 + (C32113 + C32114) * C181) * C139442 *
                C139588 +
            ((C32232 + C32231) * C139328 + (C32102 + C32101) * C181) * C139442 *
                C30408) *
               C139589 -
           (((C13596 * C1877 + C139575 * C1885 + C13595 * C1876 +
              C13591 * C1884) *
                 C139328 +
             (C13596 * C1771 + C139575 * C1786 + C13595 * C1770 +
              C13591 * C1782) *
                 C181) *
                C139442 * C139588 +
            ((C34186 + C34185) * C139328 + (C34080 + C34079) * C181) * C139442 *
                C30408) *
               C2699) *
              C139403)) /
        (p * q * std::sqrt(p + q));
    d2eexz[33] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139575 * C114) *
                C3607 +
            (C13595 * C245 + C13591 * C251 + C13596 * C246 + C139575 * C252) *
                C139561 -
            (C32102 + C32101) * C3608 - (C32353 + C32354) * C139403) *
               C139442 * C30408 +
           ((C32101 + C32102) * C3607 + (C32354 + C32353) * C139561 -
            (C32113 + C32114) * C3608 - (C32356 + C32355) * C139403) *
               C139442 * C139588) *
              C139328 * C139589 +
          (((C32106 + C32105) * C3608 -
            ((C13596 * C247 + C139575 * C253 + C13595 * C246 + C13591 * C252) *
                 C139561 +
             (C13596 * C109 + C139575 * C115 + C13595 * C108 + C13591 * C114) *
                 C3607) +
            (C32357 + C32358) * C139403) *
               C139442 * C30408 +
           ((C32109 + C32110) * C3608 -
            ((C32358 + C32357) * C139561 + (C32105 + C32106) * C3607) +
            (C32360 + C32359) * C139403) *
               C139442 * C139588) *
              C139328 * C139590 +
          (((C13595 * C109 + C13591 * C115 + C13596 * C110 + C139575 * C119) *
                C3607 +
            (C13595 * C247 + C13591 * C253 + C13596 * C248 + C139575 * C254) *
                C139561 -
            (C34080 + C34079) * C3608 - (C34289 + C34290) * C139403) *
               C139442 * C30408 +
           ((C34079 + C34080) * C3607 + (C34290 + C34289) * C139561 -
            (C13596 * C1771 + C139575 * C1786 + C13595 * C1770 +
             C13591 * C1782) *
                C3608 -
            (C13596 * C1970 + C139575 * C1978 + C13595 * C1968 +
             C13591 * C1976) *
                C139403) *
               C139442 * C139588) *
              C139328 * C2699)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[33] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139442 * C308) * C2702 +
             (C307 * C116 + C139442 * C314) * C139589 - C337 * C2703 -
             C338 * C139590 + C339 * C2704 + C340 * C2699) *
                C30408 +
            (C34389 + C34390 - C34391 - C34392 + C34393 + C34394) * C139588) *
               C13591 +
           ((C337 * C2702 + C338 * C139589 - C339 * C2703 - C340 * C139590 +
             C341 * C2704 + C342 * C2699) *
                C30408 +
            (C34395 + C34396 - C34397 - C34398 + C34399 + C34400) * C139588) *
               C139575) *
              C139561 +
          (((C34391 - (C34390 + C34389) + C34392 - C34393 - C34394) * C30408 +
            (C2090 * C2703 - (C32485 * C139589 + C32486 * C2702) +
             C2091 * C139590 - C2092 * C2704 - C2093 * C2699) *
                C139588) *
               C13591 +
           ((C34397 - (C34396 + C34395) + C34398 - C34399 - C34400) * C30408 +
            (C2092 * C2703 - (C2091 * C139589 + C2090 * C2702) +
             C2093 * C139590 - (C307 * C1771 + C139442 * C2060) * C2704 -
             (C307 * C1787 + C139442 * C2068) * C2699) *
                C139588) *
               C139575) *
              C139403) *
         C139328) /
        (p * q * std::sqrt(p + q));
    d2eeyy[33] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C307 * C107 + C139442 * C308) * C181 +
              (C307 * C182 + C139442 * C394) * C139328) *
                 C30408 +
             (C32591 + C32607) * C139588) *
                C13591 +
            ((C401 + C417) * C30408 + C32594 * C139588) * C139575) *
               C139589 -
           ((C3772 * C139588 + (C418 + C404) * C30408) * C139575 +
            (C32595 * C139588 + (C417 + C401) * C30408) * C13591) *
               C139590 +
           ((C421 * C30408 + C34499 * C139588) * C13591 +
            ((C409 + C419) * C30408 + (C3769 + C3775) * C139588) * C139575) *
               C2699) *
              C139561 +
          (((C32594 * C30408 + C32596 * C139588) * C13591 +
            (C34499 * C30408 + (C2185 + C2195) * C139588) * C139575) *
               C139590 -
           ((C32597 * C139588 + C32595 * C30408) * C139575 +
            ((C32608 + C32600) * C139588 + (C32607 + C32591) * C30408) *
                C13591) *
               C139589 -
           ((((C307 * C1877 + C139442 * C2174) * C139328 +
              (C307 * C1771 + C139442 * C2060) * C181) *
                 C139588 +
             (C3775 + C3769) * C30408) *
                C139575 +
            ((C2195 + C2185) * C139588 + C3772 * C30408) * C13591) *
               C2699) *
              C139403)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[33] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139442 * C308) * C3607 +
             (C307 * C245 + C139442 * C474) * C139561 - C32483 * C3608 -
             C32719 * C139403) *
                C30408 +
            (C32483 * C3607 + C32719 * C139561 - C32486 * C3608 -
             C32720 * C139403) *
                C139588) *
               C13591 +
           ((C3851 + C3852 - C3853 - C3854) * C30408 +
            (C34598 + C34599 - C34600 - C34601) * C139588) *
               C139575) *
              C139328 * C139589 +
          (((C3853 - (C3852 + C3851) + C3854) * C30408 +
            (C34600 - (C34599 + C34598) + C34601) * C139588) *
               C13591 +
           ((C3857 - (C3856 + C3855) + C3858) * C30408 +
            (C34602 - (C34603 + C34604) + C34605) * C139588) *
               C139575) *
              C139328 * C139590 +
          ((C3868 * C30408 + (C34604 + C34603 - C34602 - C34605) * C139588) *
               C13591 +
           ((C3861 + C3860 - C3859 - C3867) * C30408 +
            (C3692 * C3607 + C3865 * C139561 -
             (C307 * C1771 + C139442 * C2060) * C3608 -
             (C307 * C1970 + C139442 * C2276) * C139403) *
                C139588) *
               C139575) *
              C139328 * C2699)) /
        (p * q * std::sqrt(p + q));
    d2eezx[33] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1767 + C139588 * C2376) *
                C2702 +
            (C30812 * C116 + C30408 * C561 + C30813 * C1777 + C139588 * C2383) *
                C139589 -
            (C30839 + C30840) * C2703 - (C30841 + C30842) * C139590 +
            (C30843 + C30844) * C2704 + (C30845 + C30846) * C2699) *
               C13591 +
           ((C30840 + C30839) * C2702 + (C30842 + C30841) * C139589 -
            (C30844 + C30843) * C2703 - (C30846 + C30845) * C139590 +
            (C30848 + C30847) * C2704 + (C30850 + C30849) * C2699) *
               C139575) *
              C139442 * C139561 +
          (((C32837 + C32838) * C2703 -
            ((C30813 * C1783 + C139588 * C2387 + C30812 * C1777 +
              C30408 * C2383) *
                 C139589 +
             (C30813 * C1768 + C139588 * C2379 + C30812 * C1767 +
              C30408 * C2376) *
                 C2702) +
            (C32839 + C32840) * C139590 - (C34712 + C34713) * C2704 -
            (C34714 + C34715) * C2699) *
               C13591 +
           ((C34713 + C34712) * C2703 -
            ((C32840 + C32839) * C139589 + (C32838 + C32837) * C2702) +
            (C34715 + C34714) * C139590 -
            (C30813 * C1771 + C139588 * C2382 + C30812 * C1766 +
             C30408 * C2378) *
                C2704 -
            (C30813 * C1787 + C139588 * C2390 + C30812 * C1779 +
             C30408 * C2386) *
                C2699) *
               C139575) *
              C139442 * C139403) *
         C139328) /
        (p * q * std::sqrt(p + q));
    d2eezy[33] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C30812 * C107 + C30408 * C555 + C30813 * C1767 +
              C139588 * C2376) *
                 C181 +
             (C30812 * C182 + C30408 * C641 + C30813 * C1873 +
              C139588 * C2492) *
                 C139328) *
                C13591 +
            ((C30840 + C30839) * C181 + (C30929 + C30930) * C139328) *
                C139575) *
               C139442 * C139589 -
           (((C30931 + C30932) * C139328 + (C30844 + C30843) * C181) * C139575 +
            ((C30930 + C30929) * C139328 + (C30839 + C30840) * C181) * C13591) *
               C139442 * C139590 +
           (((C30843 + C30844) * C181 + (C30932 + C30931) * C139328) * C13591 +
            ((C30848 + C30847) * C181 + (C30933 + C30934) * C139328) *
                C139575) *
               C139442 * C2699) *
              C139561 +
          ((((C32837 + C32838) * C181 + (C32951 + C32952) * C139328) * C13591 +
            ((C34713 + C34712) * C181 + (C34818 + C34819) * C139328) *
                C139575) *
               C139442 * C139590 -
           (((C32952 + C32951) * C139328 + (C32838 + C32837) * C181) * C139575 +
            ((C30813 * C1874 + C139588 * C2493 + C30812 * C1873 +
              C30408 * C2492) *
                 C139328 +
             (C30813 * C1768 + C139588 * C2379 + C30812 * C1767 +
              C30408 * C2376) *
                 C181) *
                C13591) *
               C139442 * C139589 -
           (((C30813 * C1877 + C139588 * C2496 + C30812 * C1872 +
              C30408 * C2491) *
                 C139328 +
             (C30813 * C1771 + C139588 * C2382 + C30812 * C1766 +
              C30408 * C2378) *
                 C181) *
                C139575 +
            ((C34819 + C34818) * C139328 + (C34712 + C34713) * C181) * C13591) *
               C139442 * C2699) *
              C139403)) /
        (p * q * std::sqrt(p + q));
    d2eezz[33] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1767 + C139588 * C2376) *
                C3607 +
            (C30812 * C245 + C30408 * C719 + C30813 * C1965 + C139588 * C2591) *
                C139561 -
            (C30813 * C1768 + C139588 * C2379 + C30812 * C1767 +
             C30408 * C2376) *
                C3608 -
            (C30813 * C1966 + C139588 * C2592 + C30812 * C1965 +
             C30408 * C2591) *
                C139403) *
               C13591 +
           ((C30840 + C30839) * C3607 + (C31013 + C31014) * C139561 -
            (C32838 + C32837) * C3608 - (C33061 + C33062) * C139403) *
               C139575) *
              C139442 * C139328 * C139589 +
          (((C32837 + C32838) * C3608 -
            ((C31014 + C31013) * C139561 + (C30839 + C30840) * C3607) +
            (C33062 + C33061) * C139403) *
               C13591 +
           ((C34713 + C34712) * C3608 -
            ((C31015 + C31016) * C139561 + (C30844 + C30843) * C3607) +
            (C34922 + C34923) * C139403) *
               C139575) *
              C139442 * C139328 * C139590 +
          (((C30843 + C30844) * C3607 + (C31016 + C31015) * C139561 -
            (C34712 + C34713) * C3608 - (C34923 + C34922) * C139403) *
               C13591 +
           ((C30848 + C30847) * C3607 + (C31017 + C31018) * C139561 -
            (C30813 * C1771 + C139588 * C2382 + C30812 * C1766 +
             C30408 * C2378) *
                C3608 -
            (C30813 * C1970 + C139588 * C2598 + C30812 * C1969 +
             C30408 * C2597) *
                C139403) *
               C139575) *
              C139442 * C139328 * C2699)) /
        (p * q * std::sqrt(p + q));
    d2eexx[34] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139575 * C114) *
               C103 +
           (C13595 * C116 + C13591 * C125 + C13596 * C117 + C139575 * C126) *
               C92 -
           (C13596 * C109 + C139575 * C115 + C13595 * C108 + C13591 * C114) *
               C104 -
           (C13596 * C118 + C139575 * C127 + C13595 * C117 + C13591 * C126) *
               C93 +
           (C13595 * C109 + C13591 * C115 + C13596 * C110 + C139575 * C119) *
               C105 +
           (C13595 * C118 + C13591 * C127 + C13596 * C120 + C139575 * C128) *
               C94 -
           (C13596 * C111 + C139575 * C121 + C13595 * C110 + C13591 * C119) *
               C106 -
           (C13596 * C122 + C139575 * C129 + C13595 * C120 + C13591 * C128) *
               C95) *
              C139442 * C30408 +
          ((C13595 * C1767 + C13591 * C1778 + C13596 * C1764 +
            C139575 * C1772) *
               C103 +
           (C13595 * C1777 + C13591 * C1790 + C13596 * C1776 +
            C139575 * C1789) *
               C92 -
           (C13596 * C1765 + C139575 * C1773 + C13595 * C1764 +
            C13591 * C1772) *
               C104 -
           (C13596 * C1775 + C139575 * C1788 + C13595 * C1776 +
            C13591 * C1789) *
               C93 +
           (C13595 * C1765 + C13591 * C1773 + C13596 * C1766 +
            C139575 * C1774) *
               C105 +
           (C13595 * C1775 + C13591 * C1788 + C13596 * C1779 +
            C139575 * C1791) *
               C94 -
           (C13596 * C3453 + C139575 * C3454 + C13595 * C1766 +
            C13591 * C1774) *
               C106 -
           (C13596 * C3455 + C139575 * C3456 + C13595 * C1779 +
            C13591 * C1791) *
               C95) *
              C139442 * C139588) *
         C139339 * C139328) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139575 * C114) *
                C826 +
            (C13595 * C116 + C13591 * C125 + C13596 * C117 + C139575 * C126) *
                C821 -
            (C13596 * C109 + C139575 * C115 + C13595 * C108 + C13591 * C114) *
                C827 -
            (C13596 * C118 + C139575 * C127 + C13595 * C117 + C13591 * C126) *
                C139305) *
               C139442 * C30408 +
           ((C13595 * C1767 + C13591 * C1778 + C13596 * C1764 +
             C139575 * C1772) *
                C826 +
            (C13595 * C1777 + C13591 * C1790 + C13596 * C1776 +
             C139575 * C1789) *
                C821 -
            (C13596 * C1765 + C139575 * C1773 + C13595 * C1764 +
             C13591 * C1772) *
                C827 -
            (C13596 * C1775 + C139575 * C1788 + C13595 * C1776 +
             C13591 * C1789) *
                C139305) *
               C139442 * C139588) *
              C139339 * C823 +
          (((C14341 + C14340) * C827 -
            ((C14339 + C14338) * C821 + (C14337 + C14336) * C826) +
            (C14343 + C14342) * C139305) *
               C139442 * C30408 +
           ((C18257 + C18258) * C827 -
            ((C18259 + C18260) * C821 + (C18261 + C18262) * C826) +
            (C18263 + C18264) * C139305) *
               C139442 * C139588) *
              C139339 * C824 +
          (((C14349 + C14348) * C826 + (C14347 + C14346) * C821 -
            (C14345 + C14344) * C827 - (C14351 + C14350) * C139305) *
               C139442 * C30408 +
           ((C24145 + C24146) * C826 + (C24147 + C24148) * C821 -
            (C13596 * C8752 + C139575 * C8758 + C13595 * C8753 +
             C13591 * C8759) *
                C827 -
            (C13596 * C8755 + C139575 * C8761 + C13595 * C8756 +
             C13591 * C8762) *
                C139305) *
               C139442 * C139588) *
              C139339 * C825)) /
            (p * q * std::sqrt(p + q));
    d2eexy[34] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139575 * C114) *
                C181 +
            (C13595 * C182 + C13591 * C188 + C13596 * C183 + C139575 * C189) *
                C139328) *
               C139442 * C30408 +
           ((C13595 * C1767 + C13591 * C1778 + C13596 * C1764 +
             C139575 * C1772) *
                C181 +
            (C13595 * C1873 + C13591 * C1881 + C13596 * C1870 +
             C139575 * C1878) *
                C139328) *
               C139442 * C139588) *
              C92 -
          (((C13596 * C1871 + C139575 * C1879 + C13595 * C1870 +
             C13591 * C1878) *
                C139328 +
            (C13596 * C1765 + C139575 * C1773 + C13595 * C1764 +
             C13591 * C1772) *
                C181) *
               C139442 * C139588 +
           ((C13596 * C184 + C139575 * C190 + C13595 * C183 + C13591 * C189) *
                C139328 +
            (C13596 * C109 + C139575 * C115 + C13595 * C108 + C13591 * C114) *
                C181) *
               C139442 * C30408) *
              C93 +
          (((C13595 * C109 + C13591 * C115 + C13596 * C110 + C139575 * C119) *
                C181 +
            (C13595 * C184 + C13591 * C190 + C13596 * C185 + C139575 * C191) *
                C139328) *
               C139442 * C30408 +
           ((C13595 * C1765 + C13591 * C1773 + C13596 * C1766 +
             C139575 * C1774) *
                C181 +
            (C13595 * C1871 + C13591 * C1879 + C13596 * C1872 +
             C139575 * C1880) *
                C139328) *
               C139442 * C139588) *
              C94 -
          (((C13596 * C3531 + C139575 * C3532 + C13595 * C1872 +
             C13591 * C1880) *
                C139328 +
            (C13596 * C3453 + C139575 * C3454 + C13595 * C1766 +
             C13591 * C1774) *
                C181) *
               C139442 * C139588 +
           ((C13596 * C186 + C139575 * C192 + C13595 * C185 + C13591 * C191) *
                C139328 +
            (C13596 * C111 + C139575 * C121 + C13595 * C110 + C13591 * C119) *
                C181) *
               C139442 * C30408) *
              C95) *
         C139339) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139575 * C114) *
                C934 +
            (C13595 * C182 + C13591 * C188 + C13596 * C183 + C139575 * C189) *
                C823 -
            (C14337 + C14336) * C935 - (C14466 + C14467) * C824 +
            (C14349 + C14348) * C936 + (C14468 + C14469) * C825) *
               C139442 * C30408 +
           ((C13595 * C1767 + C13591 * C1778 + C13596 * C1764 +
             C139575 * C1772) *
                C934 +
            (C13595 * C1873 + C13591 * C1881 + C13596 * C1870 +
             C139575 * C1878) *
                C823 -
            (C18261 + C18262) * C935 - (C18404 + C18403) * C824 +
            (C24145 + C24146) * C936 + (C24256 + C24255) * C825) *
               C139442 * C139588) *
              C821 +
          (((C14341 + C14340) * C935 -
            ((C13596 * C184 + C139575 * C190 + C13595 * C183 + C13591 * C189) *
                 C823 +
             (C13596 * C109 + C139575 * C115 + C13595 * C108 + C13591 * C114) *
                 C934) +
            (C14470 + C14471) * C824 - (C14345 + C14344) * C936 -
            (C14472 + C14473) * C825) *
               C139442 * C30408 +
           ((C18257 + C18258) * C935 -
            ((C13596 * C1871 + C139575 * C1879 + C13595 * C1870 +
              C13591 * C1878) *
                 C823 +
             (C13596 * C1765 + C139575 * C1773 + C13595 * C1764 +
              C13591 * C1772) *
                 C934) +
            (C18406 + C18405) * C824 -
            (C13596 * C8752 + C139575 * C8758 + C13595 * C8753 +
             C13591 * C8759) *
                C936 -
            (C13596 * C8838 + C139575 * C8841 + C13595 * C8839 +
             C13591 * C8842) *
                C825) *
               C139442 * C139588) *
              C139305) *
         C139339) /
            (p * q * std::sqrt(p + q));
    d2eexz[34] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139575 * C114) *
                C244 +
            (C13595 * C245 + C13591 * C251 + C13596 * C246 + C139575 * C252) *
                C139339) *
               C139442 * C30408 +
           ((C13595 * C1767 + C13591 * C1778 + C13596 * C1764 +
             C139575 * C1772) *
                C244 +
            (C13595 * C1965 + C13591 * C1973 + C13596 * C1964 +
             C139575 * C1972) *
                C139339) *
               C139442 * C139588) *
              C139328 * C92 -
          (((C13596 * C1963 + C139575 * C1971 + C13595 * C1964 +
             C13591 * C1972) *
                C139339 +
            (C13596 * C1765 + C139575 * C1773 + C13595 * C1764 +
             C13591 * C1772) *
                C244) *
               C139442 * C139588 +
           ((C13596 * C247 + C139575 * C253 + C13595 * C246 + C13591 * C252) *
                C139339 +
            (C13596 * C109 + C139575 * C115 + C13595 * C108 + C13591 * C114) *
                C244) *
               C139442 * C30408) *
              C139328 * C93 +
          (((C13595 * C109 + C13591 * C115 + C13596 * C110 + C139575 * C119) *
                C244 +
            (C13595 * C247 + C13591 * C253 + C13596 * C248 + C139575 * C254) *
                C139339) *
               C139442 * C30408 +
           ((C13595 * C1765 + C13591 * C1773 + C13596 * C1766 +
             C139575 * C1774) *
                C244 +
            (C13595 * C1963 + C13591 * C1971 + C13596 * C1969 +
             C139575 * C1977) *
                C139339) *
               C139442 * C139588) *
              C139328 * C94 -
          (((C13596 * C3609 + C139575 * C3610 + C13595 * C1969 +
             C13591 * C1977) *
                C139339 +
            (C13596 * C3453 + C139575 * C3454 + C13595 * C1766 +
             C13591 * C1774) *
                C244) *
               C139442 * C139588 +
           ((C13596 * C249 + C139575 * C255 + C13595 * C248 + C13591 * C254) *
                C139339 +
            (C13596 * C111 + C139575 * C121 + C13595 * C110 + C13591 * C119) *
                C244) *
               C139442 * C30408) *
              C139328 * C95)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139575 * C114) *
                 C244 +
             (C13595 * C245 + C13591 * C251 + C13596 * C246 + C139575 * C252) *
                 C139339) *
                C139442 * C30408 +
            ((C13595 * C1767 + C13591 * C1778 + C13596 * C1764 +
              C139575 * C1772) *
                 C244 +
             (C13595 * C1965 + C13591 * C1973 + C13596 * C1964 +
              C139575 * C1972) *
                 C139339) *
                C139442 * C139588) *
               C823 -
           (((C18545 + C18546) * C139339 + (C18261 + C18262) * C244) * C139442 *
                C139588 +
            ((C14589 + C14588) * C139339 + (C14337 + C14336) * C244) * C139442 *
                C30408) *
               C824 +
           (((C14349 + C14348) * C244 + (C14591 + C14590) * C139339) * C139442 *
                C30408 +
            ((C24145 + C24146) * C244 + (C24363 + C24364) * C139339) * C139442 *
                C139588) *
               C825) *
              C821 +
          ((((C14341 + C14340) * C244 + (C14592 + C14593) * C139339) * C139442 *
                C30408 +
            ((C18257 + C18258) * C244 + (C18547 + C18548) * C139339) * C139442 *
                C139588) *
               C824 -
           (((C13596 * C1963 + C139575 * C1971 + C13595 * C1964 +
              C13591 * C1972) *
                 C139339 +
             (C13596 * C1765 + C139575 * C1773 + C13595 * C1764 +
              C13591 * C1772) *
                 C244) *
                C139442 * C139588 +
            ((C13596 * C247 + C139575 * C253 + C13595 * C246 + C13591 * C252) *
                 C139339 +
             (C13596 * C109 + C139575 * C115 + C13595 * C108 + C13591 * C114) *
                 C244) *
                C139442 * C30408) *
               C823 -
           (((C13596 * C8918 + C139575 * C8921 + C13595 * C8919 +
              C13591 * C8922) *
                 C139339 +
             (C13596 * C8752 + C139575 * C8758 + C13595 * C8753 +
              C13591 * C8759) *
                 C244) *
                C139442 * C139588 +
            ((C14595 + C14594) * C139339 + (C14345 + C14344) * C244) * C139442 *
                C30408) *
               C825) *
              C139305)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[34] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139442 * C308) * C103 +
            (C307 * C116 + C139442 * C314) * C92 - C337 * C104 - C338 * C93 +
            C339 * C105 + C340 * C94 - C341 * C106 - C342 * C95) *
               C30408 +
           ((C307 * C1767 + C139442 * C2054) * C103 +
            (C307 * C1777 + C139442 * C2061) * C92 - C2086 * C104 -
            C2087 * C93 + C2088 * C105 + C2089 * C94 - C3692 * C106 -
            C3693 * C95) *
               C139588) *
              C13591 +
          ((C337 * C103 + C338 * C92 - C339 * C104 - C340 * C93 + C341 * C105 +
            C342 * C94 - C343 * C106 - C344 * C95) *
               C30408 +
           (C2086 * C103 + C2087 * C92 - C2088 * C104 - C2089 * C93 +
            C3692 * C105 + C3693 * C94 -
            (C307 * C3453 + C139442 * C3685) * C106 -
            (C307 * C3455 + C139442 * C3686) * C95) *
               C139588) *
              C139575) *
         C139339 * C139328) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139442 * C308) * C826 +
             (C307 * C116 + C139442 * C314) * C821 - C337 * C827 -
             C338 * C139305) *
                C30408 +
            ((C307 * C1767 + C139442 * C2054) * C826 +
             (C307 * C1777 + C139442 * C2061) * C821 - C2086 * C827 -
             C2087 * C139305) *
                C139588) *
               C13591 +
           ((C337 * C826 + C338 * C821 - C339 * C827 - C340 * C139305) *
                C30408 +
            (C2086 * C826 + C2087 * C821 - C2088 * C827 - C2089 * C139305) *
                C139588) *
               C139575) *
              C139339 * C823 +
          (((C1150 * C827 -
             ((C307 * C841 + C139442 * C1125) * C821 +
              (C307 * C831 + C139442 * C1118) * C826) +
             C1151 * C139305) *
                C30408 +
            (C4566 * C827 -
             ((C307 * C4230 + C139442 * C4553) * C821 +
              (C307 * C4223 + C139442 * C4549) * C826) +
             C4567 * C139305) *
                C139588) *
               C13591 +
           ((C1152 * C827 - (C1151 * C821 + C1150 * C826) + C1153 * C139305) *
                C30408 +
            (C4568 * C827 - (C4567 * C821 + C4566 * C826) + C4569 * C139305) *
                C139588) *
               C139575) *
              C139339 * C824 +
          ((((C307 * C832 + C139442 * C1121) * C826 +
             (C307 * C847 + C139442 * C1129) * C821 - C1154 * C827 -
             C1155 * C139305) *
                C30408 +
            ((C307 * C8754 + C139442 * C9000) * C826 +
             (C307 * C8757 + C139442 * C9003) * C821 - C31415 * C827 -
             C31416 * C139305) *
                C139588) *
               C13591 +
           ((C1154 * C826 + C1155 * C821 - C1156 * C827 - C1157 * C139305) *
                C30408 +
            (C31415 * C826 + C31416 * C821 -
             (C307 * C8752 + C139442 * C8998) * C827 -
             (C307 * C8755 + C139442 * C9001) * C139305) *
                C139588) *
               C139575) *
              C139339 * C825)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[34] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139442 * C308) * C181 +
             (C307 * C182 + C139442 * C394) * C139328) *
                C30408 +
            ((C307 * C1767 + C139442 * C2054) * C181 +
             (C307 * C1873 + C139442 * C2170) * C139328) *
                C139588) *
               C13591 +
           ((C401 + C417) * C30408 + (C2176 + C2192) * C139588) * C139575) *
              C92 -
          ((C3772 * C139588 + (C418 + C404) * C30408) * C139575 +
           ((C2192 + C2176) * C139588 + (C417 + C401) * C30408) * C13591) *
              C93 +
          ((C421 * C30408 + (C2179 + C2193) * C139588) * C13591 +
           ((C409 + C419) * C30408 + (C3769 + C3775) * C139588) * C139575) *
              C94 -
          ((((C307 * C3531 + C139442 * C3767) * C139328 +
             (C307 * C3453 + C139442 * C3685) * C181) *
                C139588 +
            (C420 + C410) * C30408) *
               C139575 +
           ((C3775 + C3769) * C139588 + C422 * C30408) * C13591) *
              C95) *
         C139339) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139442 * C308) * C934 +
             (C307 * C182 + C139442 * C394) * C823 -
             (C307 * C831 + C139442 * C1118) * C935 -
             (C307 * C939 + C139442 * C1231) * C824 +
             (C307 * C832 + C139442 * C1121) * C936 +
             (C307 * C940 + C139442 * C1232) * C825) *
                C30408 +
            ((C307 * C1767 + C139442 * C2054) * C934 +
             (C307 * C1873 + C139442 * C2170) * C823 -
             (C307 * C4223 + C139442 * C4549) * C935 -
             (C307 * C4337 + C139442 * C4667) * C824 +
             (C307 * C8754 + C139442 * C9000) * C936 +
             (C307 * C8840 + C139442 * C9078) * C825) *
                C139588) *
               C13591 +
           ((C1240 + C1241 - C1242 - C1260 + C1245 + C1261) * C30408 +
            (C31515 + C31516 - C31517 - C31518 + C31519 + C31523) * C139588) *
               C139575) *
              C821 +
          (((C1242 - (C1241 + C1240) + C1260 - C1245 - C1261) * C30408 +
            (C31517 - (C31516 + C31515) + C31518 - C31519 - C31523) * C139588) *
               C13591 +
           ((C1250 - (C1249 + C1248) + C1262 - C1253 - C1263) * C30408 +
            (C4568 * C935 - (C2189 * C823 + C2088 * C934) + C4683 * C824 -
             (C307 * C8752 + C139442 * C8998) * C936 -
             (C307 * C8838 + C139442 * C9080) * C825) *
                C139588) *
               C139575) *
              C139305) *
         C139339) /
            (p * q * std::sqrt(p + q));
    d2eeyz[34] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139442 * C308) * C244 +
             (C307 * C245 + C139442 * C474) * C139339) *
                C30408 +
            ((C307 * C1767 + C139442 * C2054) * C244 +
             (C307 * C1965 + C139442 * C2269) * C139339) *
                C139588) *
               C13591 +
           ((C481 + C497) * C30408 + (C30741 + C30742) * C139588) * C139575) *
              C139328 * C92 -
          (((C30743 + C30744) * C139588 + (C498 + C484) * C30408) * C139575 +
           ((C30742 + C30741) * C139588 + (C497 + C481) * C30408) * C13591) *
              C139328 * C93 +
          ((C501 * C30408 + (C30744 + C30743) * C139588) * C13591 +
           ((C489 + C499) * C30408 + (C30745 + C30746) * C139588) * C139575) *
              C139328 * C94 -
          ((((C307 * C3609 + C139442 * C3849) * C139339 +
             (C307 * C3453 + C139442 * C3685) * C244) *
                C139588 +
            (C500 + C490) * C30408) *
               C139575 +
           ((C30746 + C30745) * C139588 + C502 * C30408) * C13591) *
              C139328 * C95)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C307 * C107 + C139442 * C308) * C244 +
              (C307 * C245 + C139442 * C474) * C139339) *
                 C30408 +
             ((C307 * C1767 + C139442 * C2054) * C244 +
              (C307 * C1965 + C139442 * C2269) * C139339) *
                 C139588) *
                C13591 +
            ((C481 + C497) * C30408 + (C30741 + C30742) * C139588) * C139575) *
               C823 -
           (((C31622 + C31623) * C139588 + (C1363 + C1351) * C30408) * C139575 +
            (((C307 * C4443 + C139442 * C4783) * C139339 +
              (C307 * C4223 + C139442 * C4549) * C244) *
                 C139588 +
             ((C307 * C1029 + C139442 * C1339) * C139339 +
              (C307 * C831 + C139442 * C1118) * C244) *
                 C30408) *
                C13591) *
               C824 +
           ((((C307 * C832 + C139442 * C1121) * C244 +
              (C307 * C1030 + C139442 * C1340) * C139339) *
                 C30408 +
             ((C307 * C8754 + C139442 * C9000) * C244 +
              (C307 * C8920 + C139442 * C9155) * C139339) *
                 C139588) *
                C13591 +
            ((C1352 + C1364) * C30408 + (C31624 + C31628) * C139588) *
                C139575) *
               C825) *
              C821 +
          ((((C1351 + C1363) * C30408 + (C31623 + C31622) * C139588) * C13591 +
            ((C1348 + C1362) * C30408 +
             (C4568 * C244 + C4799 * C139339) * C139588) *
                C139575) *
               C824 -
           (((C30743 + C30744) * C139588 + (C498 + C484) * C30408) * C139575 +
            ((C30742 + C30741) * C139588 + (C497 + C481) * C30408) * C13591) *
               C823 -
           ((((C307 * C8918 + C139442 * C9157) * C139339 +
              (C307 * C8752 + C139442 * C8998) * C244) *
                 C139588 +
             (C1365 + C1355) * C30408) *
                C139575 +
            ((C31628 + C31624) * C139588 + (C1364 + C1352) * C30408) * C13591) *
               C825) *
              C139305)) /
            (p * q * std::sqrt(p + q));
    d2eezx[34] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C30812 * C107 + C30408 * C555 + C30813 * C1767 + C139588 * C2376) *
               C103 +
           (C30812 * C116 + C30408 * C561 + C30813 * C1777 + C139588 * C2383) *
               C92 -
           (C30839 + C30840) * C104 - (C30841 + C30842) * C93 +
           (C30843 + C30844) * C105 + (C30845 + C30846) * C94 -
           (C30847 + C30848) * C106 - (C30849 + C30850) * C95) *
              C13591 +
          ((C30840 + C30839) * C103 + (C30842 + C30841) * C92 -
           (C30844 + C30843) * C104 - (C30846 + C30845) * C93 +
           (C30848 + C30847) * C105 + (C30850 + C30849) * C94 -
           (C30813 * C3453 + C139588 * C3943 + C30812 * C111 + C30408 * C559) *
               C106 -
           (C30813 * C3455 + C139588 * C3944 + C30812 * C122 + C30408 * C565) *
               C95) *
              C139575) *
         C139442 * C139339 * C139328) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1767 + C139588 * C2376) *
                C826 +
            (C30812 * C116 + C30408 * C561 + C30813 * C1777 + C139588 * C2383) *
                C821 -
            (C30839 + C30840) * C827 - (C30841 + C30842) * C139305) *
               C13591 +
           ((C30840 + C30839) * C826 + (C30842 + C30841) * C821 -
            (C30844 + C30843) * C827 - (C30846 + C30845) * C139305) *
               C139575) *
              C139442 * C139339 * C823 +
          (((C31743 + C31744) * C827 -
            ((C30813 * C4230 + C139588 * C4903 + C30812 * C841 +
              C30408 * C1447) *
                 C821 +
             (C30813 * C4223 + C139588 * C4899 + C30812 * C831 +
              C30408 * C1440) *
                 C826) +
            (C31745 + C31746) * C139305) *
               C13591 +
           ((C30812 * C829 + C30408 * C1441 + C30813 * C4225 +
             C139588 * C4901) *
                C827 -
            ((C31746 + C31745) * C821 + (C31744 + C31743) * C826) +
            (C30812 * C839 + C30408 * C1449 + C30813 * C4232 +
             C139588 * C4905) *
                C139305) *
               C139575) *
              C139442 * C139339 * C824 +
          (((C30812 * C832 + C30408 * C1443 + C30813 * C8754 +
             C139588 * C9234) *
                C826 +
            (C30812 * C847 + C30408 * C1451 + C30813 * C8757 +
             C139588 * C9237) *
                C821 -
            (C31747 + C31748) * C827 - (C31749 + C31750) * C139305) *
               C13591 +
           ((C31748 + C31747) * C826 + (C31750 + C31749) * C821 -
            (C30813 * C8752 + C139588 * C9232 + C30812 * C834 +
             C30408 * C1445) *
                C827 -
            (C30813 * C8755 + C139588 * C9235 + C30812 * C849 +
             C30408 * C1453) *
                C139305) *
               C139575) *
              C139442 * C139339 * C825)) /
            (p * q * std::sqrt(p + q));
    d2eezy[34] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1767 + C139588 * C2376) *
                C181 +
            (C30812 * C182 + C30408 * C641 + C30813 * C1873 + C139588 * C2492) *
                C139328) *
               C13591 +
           ((C30840 + C30839) * C181 + (C30929 + C30930) * C139328) * C139575) *
              C139442 * C92 -
          (((C30931 + C30932) * C139328 + (C30844 + C30843) * C181) * C139575 +
           ((C30930 + C30929) * C139328 + (C30839 + C30840) * C181) * C13591) *
              C139442 * C93 +
          (((C30843 + C30844) * C181 + (C30932 + C30931) * C139328) * C13591 +
           ((C30848 + C30847) * C181 + (C30933 + C30934) * C139328) * C139575) *
              C139442 * C94 -
          (((C30813 * C3531 + C139588 * C4025 + C30812 * C186 + C30408 * C645) *
                C139328 +
            (C30813 * C3453 + C139588 * C3943 + C30812 * C111 + C30408 * C559) *
                C181) *
               C139575 +
           ((C30934 + C30933) * C139328 + (C30847 + C30848) * C181) * C13591) *
              C139442 * C95) *
         C139339) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1767 + C139588 * C2376) *
                C934 +
            (C30812 * C182 + C30408 * C641 + C30813 * C1873 + C139588 * C2492) *
                C823 -
            (C30813 * C4223 + C139588 * C4899 + C30812 * C831 +
             C30408 * C1440) *
                C935 -
            (C30813 * C4337 + C139588 * C5017 + C30812 * C939 +
             C30408 * C1553) *
                C824 +
            (C30812 * C832 + C30408 * C1443 + C30813 * C8754 +
             C139588 * C9234) *
                C936 +
            (C30812 * C940 + C30408 * C1554 + C30813 * C8840 +
             C139588 * C9312) *
                C825) *
               C13591 +
           ((C30840 + C30839) * C934 + (C30929 + C30930) * C823 -
            (C31744 + C31743) * C935 - (C31857 + C31858) * C824 +
            (C31748 + C31747) * C936 + (C31859 + C31860) * C825) *
               C139575) *
              C139442 * C821 +
          (((C31743 + C31744) * C935 -
            ((C30930 + C30929) * C823 + (C30839 + C30840) * C934) +
            (C31858 + C31857) * C824 - (C31747 + C31748) * C936 -
            (C31860 + C31859) * C825) *
               C13591 +
           ((C30812 * C829 + C30408 * C1441 + C30813 * C4225 +
             C139588 * C4901) *
                C935 -
            ((C30931 + C30932) * C823 + (C30844 + C30843) * C934) +
            (C30812 * C937 + C30408 * C1557 + C30813 * C4339 +
             C139588 * C5019) *
                C824 -
            (C30813 * C8752 + C139588 * C9232 + C30812 * C834 +
             C30408 * C1445) *
                C936 -
            (C30813 * C8838 + C139588 * C9314 + C30812 * C942 +
             C30408 * C1558) *
                C825) *
               C139575) *
              C139442 * C139305) *
         C139339) /
            (p * q * std::sqrt(p + q));
    d2eezz[34] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1767 + C139588 * C2376) *
                C244 +
            (C30812 * C245 + C30408 * C719 + C30813 * C1965 + C139588 * C2591) *
                C139339) *
               C13591 +
           ((C30840 + C30839) * C244 + (C31013 + C31014) * C139339) * C139575) *
              C139442 * C139328 * C92 -
          (((C31015 + C31016) * C139339 + (C30844 + C30843) * C244) * C139575 +
           ((C31014 + C31013) * C139339 + (C30839 + C30840) * C244) * C13591) *
              C139442 * C139328 * C93 +
          (((C30843 + C30844) * C244 + (C31016 + C31015) * C139339) * C13591 +
           ((C30848 + C30847) * C244 + (C31017 + C31018) * C139339) * C139575) *
              C139442 * C139328 * C94 -
          (((C30813 * C3609 + C139588 * C4106 + C30812 * C249 + C30408 * C723) *
                C139339 +
            (C30813 * C3453 + C139588 * C3943 + C30812 * C111 + C30408 * C559) *
                C244) *
               C139575 +
           ((C31018 + C31017) * C139339 + (C30847 + C30848) * C244) * C13591) *
              C139442 * C139328 * C95)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30812 * C107 + C30408 * C555 + C30813 * C1767 +
              C139588 * C2376) *
                 C244 +
             (C30812 * C245 + C30408 * C719 + C30813 * C1965 +
              C139588 * C2591) *
                 C139339) *
                C13591 +
            ((C30840 + C30839) * C244 + (C31013 + C31014) * C139339) *
                C139575) *
               C139442 * C823 -
           (((C31967 + C31968) * C139339 + (C31744 + C31743) * C244) * C139575 +
            ((C30813 * C4443 + C139588 * C5133 + C30812 * C1029 +
              C30408 * C1661) *
                 C139339 +
             (C30813 * C4223 + C139588 * C4899 + C30812 * C831 +
              C30408 * C1440) *
                 C244) *
                C13591) *
               C139442 * C824 +
           (((C30812 * C832 + C30408 * C1443 + C30813 * C8754 +
              C139588 * C9234) *
                 C244 +
             (C30812 * C1030 + C30408 * C1662 + C30813 * C8920 +
              C139588 * C9389) *
                 C139339) *
                C13591 +
            ((C31748 + C31747) * C244 + (C31969 + C31970) * C139339) *
                C139575) *
               C139442 * C825) *
              C821 +
          ((((C31743 + C31744) * C244 + (C31968 + C31967) * C139339) * C13591 +
            ((C30812 * C829 + C30408 * C1441 + C30813 * C4225 +
              C139588 * C4901) *
                 C244 +
             (C30812 * C1027 + C30408 * C1659 + C30813 * C4445 +
              C139588 * C5135) *
                 C139339) *
                C139575) *
               C139442 * C824 -
           (((C31015 + C31016) * C139339 + (C30844 + C30843) * C244) * C139575 +
            ((C31014 + C31013) * C139339 + (C30839 + C30840) * C244) * C13591) *
               C139442 * C823 -
           (((C30813 * C8918 + C139588 * C9391 + C30812 * C1032 +
              C30408 * C1664) *
                 C139339 +
             (C30813 * C8752 + C139588 * C9232 + C30812 * C834 +
              C30408 * C1445) *
                 C244) *
                C139575 +
            ((C31970 + C31969) * C139339 + (C31747 + C31748) * C244) * C13591) *
               C139442 * C825) *
              C139305)) /
            (p * q * std::sqrt(p + q));
    d2eexx[35] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139575 * C114) *
                C137108 +
            (C13595 * C116 + C13591 * C125 + C13596 * C117 + C139575 * C126) *
                C139552 -
            (C13596 * C109 + C139575 * C115 + C13595 * C108 + C13591 * C114) *
                C137101 -
            (C13596 * C118 + C139575 * C127 + C13595 * C117 + C13591 * C126) *
                C139305) *
               C139442 * C30408 +
           ((C32101 + C32102) * C137108 + (C32103 + C32104) * C139552 -
            (C32105 + C32106) * C137101 - (C32107 + C32108) * C139305) *
               C139442 * C139588) *
              C139339 * C139591 +
          (((C14341 + C14340) * C137101 -
            ((C14339 + C14338) * C139552 + (C14337 + C14336) * C137108) +
            (C14343 + C14342) * C139305) *
               C139442 * C30408 +
           ((C18257 + C18258) * C137101 -
            ((C18259 + C18260) * C139552 + (C18261 + C18262) * C137108) +
            (C18263 + C18264) * C139305) *
               C139442 * C139588) *
              C139339 * C139592 +
          (((C14349 + C14348) * C137108 + (C14347 + C14346) * C139552 -
            (C14345 + C14344) * C137101 - (C14351 + C14350) * C139305) *
               C139442 * C30408 +
           ((C24145 + C24146) * C137108 + (C24147 + C24148) * C139552 -
            (C13596 * C8752 + C139575 * C8758 + C13595 * C8753 +
             C13591 * C8759) *
                C137101 -
            (C13596 * C8755 + C139575 * C8761 + C13595 * C8756 +
             C13591 * C8762) *
                C139305) *
               C139442 * C139588) *
              C139339 * C7158)) /
        (p * q * std::sqrt(p + q));
    d2eexy[35] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139575 * C114) *
                C7235 +
            (C13595 * C182 + C13591 * C188 + C13596 * C183 + C139575 * C189) *
                C139591 -
            (C14337 + C14336) * C7236 - (C14466 + C14467) * C139592 +
            (C14349 + C14348) * C7237 + (C14468 + C14469) * C7158) *
               C139442 * C30408 +
           ((C32101 + C32102) * C7235 + (C32231 + C32232) * C139591 -
            (C18261 + C18262) * C7236 - (C18404 + C18403) * C139592 +
            (C24145 + C24146) * C7237 + (C24256 + C24255) * C7158) *
               C139442 * C139588) *
              C139552 +
          (((C14341 + C14340) * C7236 -
            ((C13596 * C184 + C139575 * C190 + C13595 * C183 + C13591 * C189) *
                 C139591 +
             (C13596 * C109 + C139575 * C115 + C13595 * C108 + C13591 * C114) *
                 C7235) +
            (C14470 + C14471) * C139592 - (C14345 + C14344) * C7237 -
            (C14472 + C14473) * C7158) *
               C139442 * C30408 +
           ((C18257 + C18258) * C7236 -
            ((C32233 + C32234) * C139591 + (C32105 + C32106) * C7235) +
            (C18406 + C18405) * C139592 -
            (C13596 * C8752 + C139575 * C8758 + C13595 * C8753 +
             C13591 * C8759) *
                C7237 -
            (C13596 * C8838 + C139575 * C8841 + C13595 * C8839 +
             C13591 * C8842) *
                C7158) *
               C139442 * C139588) *
              C139305) *
         C139339) /
        (p * q * std::sqrt(p + q));
    d2eexz[35] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139575 * C114) *
                 C244 +
             (C13595 * C245 + C13591 * C251 + C13596 * C246 + C139575 * C252) *
                 C139339) *
                C139442 * C30408 +
            ((C32101 + C32102) * C244 + (C32354 + C32353) * C139339) * C139442 *
                C139588) *
               C139591 -
           (((C18545 + C18546) * C139339 + (C18261 + C18262) * C244) * C139442 *
                C139588 +
            ((C14589 + C14588) * C139339 + (C14337 + C14336) * C244) * C139442 *
                C30408) *
               C139592 +
           (((C14349 + C14348) * C244 + (C14591 + C14590) * C139339) * C139442 *
                C30408 +
            ((C24145 + C24146) * C244 + (C24363 + C24364) * C139339) * C139442 *
                C139588) *
               C7158) *
              C139552 +
          ((((C14341 + C14340) * C244 + (C14592 + C14593) * C139339) * C139442 *
                C30408 +
            ((C18257 + C18258) * C244 + (C18547 + C18548) * C139339) * C139442 *
                C139588) *
               C139592 -
           (((C32358 + C32357) * C139339 + (C32105 + C32106) * C244) * C139442 *
                C139588 +
            ((C13596 * C247 + C139575 * C253 + C13595 * C246 + C13591 * C252) *
                 C139339 +
             (C13596 * C109 + C139575 * C115 + C13595 * C108 + C13591 * C114) *
                 C244) *
                C139442 * C30408) *
               C139591 -
           (((C13596 * C8918 + C139575 * C8921 + C13595 * C8919 +
              C13591 * C8922) *
                 C139339 +
             (C13596 * C8752 + C139575 * C8758 + C13595 * C8753 +
              C13591 * C8759) *
                 C244) *
                C139442 * C139588 +
            ((C14595 + C14594) * C139339 + (C14345 + C14344) * C244) * C139442 *
                C30408) *
               C7158) *
              C139305)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[35] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C307 * C107 + C139442 * C308) * C137108 +
                       (C307 * C116 + C139442 * C314) * C139552 -
                       C337 * C137101 - C338 * C139305) *
                          C30408 +
                      (C32483 * C137108 + C32484 * C139552 - C2086 * C137101 -
                       C2087 * C139305) *
                          C139588) *
                         C13591 +
                     ((C337 * C137108 + C338 * C139552 - C339 * C137101 -
                       C340 * C139305) *
                          C30408 +
                      (C2086 * C137108 + C2087 * C139552 - C2088 * C137101 -
                       C2089 * C139305) *
                          C139588) *
                         C139575) *
                        C139339 * C139591 +
                    (((C1150 * C137101 -
                       ((C307 * C841 + C139442 * C1125) * C139552 +
                        (C307 * C831 + C139442 * C1118) * C137108) +
                       C1151 * C139305) *
                          C30408 +
                      (C4566 * C137101 - (C35458 * C139552 + C35459 * C137108) +
                       C4567 * C139305) *
                          C139588) *
                         C13591 +
                     ((C1152 * C137101 - (C1151 * C139552 + C1150 * C137108) +
                       C1153 * C139305) *
                          C30408 +
                      (C4568 * C137101 - (C4567 * C139552 + C4566 * C137108) +
                       C4569 * C139305) *
                          C139588) *
                         C139575) *
                        C139339 * C139592 +
                    ((((C307 * C832 + C139442 * C1121) * C137108 +
                       (C307 * C847 + C139442 * C1129) * C139552 -
                       C1154 * C137101 - C1155 * C139305) *
                          C30408 +
                      ((C307 * C8754 + C139442 * C9000) * C137108 +
                       (C307 * C8757 + C139442 * C9003) * C139552 -
                       C31415 * C137101 - C31416 * C139305) *
                          C139588) *
                         C13591 +
                     ((C1154 * C137108 + C1155 * C139552 - C1156 * C137101 -
                       C1157 * C139305) *
                          C30408 +
                      (C31415 * C137108 + C31416 * C139552 -
                       (C307 * C8752 + C139442 * C8998) * C137101 -
                       (C307 * C8755 + C139442 * C9001) * C139305) *
                          C139588) *
                         C139575) *
                        C139339 * C7158)) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[35] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139442 * C308) * C7235 +
             (C307 * C182 + C139442 * C394) * C139591 -
             (C307 * C831 + C139442 * C1118) * C7236 -
             (C307 * C939 + C139442 * C1231) * C139592 +
             (C307 * C832 + C139442 * C1121) * C7237 +
             (C307 * C940 + C139442 * C1232) * C7158) *
                C30408 +
            (C32483 * C7235 + C32604 * C139591 - C35459 * C7236 -
             C35606 * C139592 + (C307 * C8754 + C139442 * C9000) * C7237 +
             (C307 * C8840 + C139442 * C9078) * C7158) *
                C139588) *
               C13591 +
           ((C7461 + C7462 - C7463 - C7464 + C7465 + C7466) * C30408 +
            (C39056 + C39057 - C39058 - C39059 + C39060 + C39061) * C139588) *
               C139575) *
              C139552 +
          (((C7463 - (C7462 + C7461) + C7464 - C7465 - C7466) * C30408 +
            (C39058 - (C39057 + C39056) + C39059 - C39060 - C39061) * C139588) *
               C13591 +
           ((C7469 - (C7468 + C7467) + C7470 - C7471 - C7472) * C30408 +
            (C4568 * C7236 - (C2189 * C139591 + C2088 * C7235) +
             C4683 * C139592 - (C307 * C8752 + C139442 * C8998) * C7237 -
             (C307 * C8838 + C139442 * C9080) * C7158) *
                C139588) *
               C139575) *
              C139305) *
         C139339) /
        (p * q * std::sqrt(p + q));
    d2eeyz[35] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C307 * C107 + C139442 * C308) * C244 +
              (C307 * C245 + C139442 * C474) * C139339) *
                 C30408 +
             (C32483 * C244 + C32719 * C139339) * C139588) *
                C13591 +
            ((C481 + C497) * C30408 + (C30741 + C30742) * C139588) * C139575) *
               C139591 -
           (((C31622 + C31623) * C139588 + (C1363 + C1351) * C30408) * C139575 +
            ((C35751 * C139339 + C35459 * C244) * C139588 +
             ((C307 * C1029 + C139442 * C1339) * C139339 +
              (C307 * C831 + C139442 * C1118) * C244) *
                 C30408) *
                C13591) *
               C139592 +
           ((((C307 * C832 + C139442 * C1121) * C244 +
              (C307 * C1030 + C139442 * C1340) * C139339) *
                 C30408 +
             ((C307 * C8754 + C139442 * C9000) * C244 +
              (C307 * C8920 + C139442 * C9155) * C139339) *
                 C139588) *
                C13591 +
            ((C1352 + C1364) * C30408 + (C31624 + C31628) * C139588) *
                C139575) *
               C7158) *
              C139552 +
          ((((C1351 + C1363) * C30408 + (C31623 + C31622) * C139588) * C13591 +
            ((C1348 + C1362) * C30408 + (C33653 + C33654) * C139588) *
                C139575) *
               C139592 -
           (((C30743 + C30744) * C139588 + (C498 + C484) * C30408) * C139575 +
            ((C30742 + C30741) * C139588 + (C497 + C481) * C30408) * C13591) *
               C139591 -
           ((((C307 * C8918 + C139442 * C9157) * C139339 +
              (C307 * C8752 + C139442 * C8998) * C244) *
                 C139588 +
             (C1365 + C1355) * C30408) *
                C139575 +
            ((C31628 + C31624) * C139588 + (C1364 + C1352) * C30408) * C13591) *
               C7158) *
              C139305)) /
        (p * q * std::sqrt(p + q));
    d2eezx[35] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1767 + C139588 * C2376) *
                C137108 +
            (C30812 * C116 + C30408 * C561 + C30813 * C1777 + C139588 * C2383) *
                C139552 -
            (C30839 + C30840) * C137101 - (C30841 + C30842) * C139305) *
               C13591 +
           ((C30840 + C30839) * C137108 + (C30842 + C30841) * C139552 -
            (C30844 + C30843) * C137101 - (C30846 + C30845) * C139305) *
               C139575) *
              C139442 * C139339 * C139591 +
          (((C31743 + C31744) * C137101 -
            ((C30813 * C4230 + C139588 * C4903 + C30812 * C841 +
              C30408 * C1447) *
                 C139552 +
             (C30813 * C4223 + C139588 * C4899 + C30812 * C831 +
              C30408 * C1440) *
                 C137108) +
            (C31745 + C31746) * C139305) *
               C13591 +
           ((C33762 + C33761) * C137101 -
            ((C31746 + C31745) * C139552 + (C31744 + C31743) * C137108) +
            (C33764 + C33763) * C139305) *
               C139575) *
              C139442 * C139339 * C139592 +
          (((C30812 * C832 + C30408 * C1443 + C30813 * C8754 +
             C139588 * C9234) *
                C137108 +
            (C30812 * C847 + C30408 * C1451 + C30813 * C8757 +
             C139588 * C9237) *
                C139552 -
            (C31747 + C31748) * C137101 - (C31749 + C31750) * C139305) *
               C13591 +
           ((C31748 + C31747) * C137108 + (C31750 + C31749) * C139552 -
            (C30813 * C8752 + C139588 * C9232 + C30812 * C834 +
             C30408 * C1445) *
                C137101 -
            (C30813 * C8755 + C139588 * C9235 + C30812 * C849 +
             C30408 * C1453) *
                C139305) *
               C139575) *
              C139442 * C139339 * C7158)) /
        (p * q * std::sqrt(p + q));
    d2eezy[35] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1767 + C139588 * C2376) *
                C7235 +
            (C30812 * C182 + C30408 * C641 + C30813 * C1873 + C139588 * C2492) *
                C139591 -
            (C30813 * C4223 + C139588 * C4899 + C30812 * C831 +
             C30408 * C1440) *
                C7236 -
            (C30813 * C4337 + C139588 * C5017 + C30812 * C939 +
             C30408 * C1553) *
                C139592 +
            (C30812 * C832 + C30408 * C1443 + C30813 * C8754 +
             C139588 * C9234) *
                C7237 +
            (C30812 * C940 + C30408 * C1554 + C30813 * C8840 +
             C139588 * C9312) *
                C7158) *
               C13591 +
           ((C30840 + C30839) * C7235 + (C30929 + C30930) * C139591 -
            (C31744 + C31743) * C7236 - (C31857 + C31858) * C139592 +
            (C31748 + C31747) * C7237 + (C31859 + C31860) * C7158) *
               C139575) *
              C139442 * C139552 +
          (((C31743 + C31744) * C7236 -
            ((C30930 + C30929) * C139591 + (C30839 + C30840) * C7235) +
            (C31858 + C31857) * C139592 - (C31747 + C31748) * C7237 -
            (C31860 + C31859) * C7158) *
               C13591 +
           ((C33762 + C33761) * C7236 -
            ((C30931 + C30932) * C139591 + (C30844 + C30843) * C7235) +
            (C33867 + C33868) * C139592 -
            (C30813 * C8752 + C139588 * C9232 + C30812 * C834 +
             C30408 * C1445) *
                C7237 -
            (C30813 * C8838 + C139588 * C9314 + C30812 * C942 +
             C30408 * C1558) *
                C7158) *
               C139575) *
              C139442 * C139305) *
         C139339) /
        (p * q * std::sqrt(p + q));
    d2eezz[35] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C30812 * C107 + C30408 * C555 + C30813 * C1767 +
              C139588 * C2376) *
                 C244 +
             (C30812 * C245 + C30408 * C719 + C30813 * C1965 +
              C139588 * C2591) *
                 C139339) *
                C13591 +
            ((C30840 + C30839) * C244 + (C31013 + C31014) * C139339) *
                C139575) *
               C139442 * C139591 -
           (((C31967 + C31968) * C139339 + (C31744 + C31743) * C244) * C139575 +
            ((C30813 * C4443 + C139588 * C5133 + C30812 * C1029 +
              C30408 * C1661) *
                 C139339 +
             (C30813 * C4223 + C139588 * C4899 + C30812 * C831 +
              C30408 * C1440) *
                 C244) *
                C13591) *
               C139442 * C139592 +
           (((C30812 * C832 + C30408 * C1443 + C30813 * C8754 +
              C139588 * C9234) *
                 C244 +
             (C30812 * C1030 + C30408 * C1662 + C30813 * C8920 +
              C139588 * C9389) *
                 C139339) *
                C13591 +
            ((C31748 + C31747) * C244 + (C31969 + C31970) * C139339) *
                C139575) *
               C139442 * C7158) *
              C139552 +
          ((((C31743 + C31744) * C244 + (C31968 + C31967) * C139339) * C13591 +
            ((C33762 + C33761) * C244 + (C33971 + C33972) * C139339) *
                C139575) *
               C139442 * C139592 -
           (((C31015 + C31016) * C139339 + (C30844 + C30843) * C244) * C139575 +
            ((C31014 + C31013) * C139339 + (C30839 + C30840) * C244) * C13591) *
               C139442 * C139591 -
           (((C30813 * C8918 + C139588 * C9391 + C30812 * C1032 +
              C30408 * C1664) *
                 C139339 +
             (C30813 * C8752 + C139588 * C9232 + C30812 * C834 +
              C30408 * C1445) *
                 C244) *
                C139575 +
            ((C31970 + C31969) * C139339 + (C31747 + C31748) * C244) * C13591) *
               C139442 * C7158) *
              C139305)) /
        (p * q * std::sqrt(p + q));
    d2eexx[36] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139575 * C114) *
                 C5913 +
             (C13595 * C116 + C13591 * C125 + C13596 * C117 + C139575 * C126) *
                 C139300) *
                C139442 * C30408 +
            ((C32101 + C32102) * C5913 + (C32103 + C32104) * C139300) *
                C139442 * C139588) *
               C139561 -
           (((C32111 + C32112) * C139300 + (C32113 + C32114) * C5913) *
                C139442 * C139588 +
            ((C32104 + C32103) * C139300 + (C32102 + C32101) * C5913) *
                C139442 * C30408) *
               C139403) *
              C139591 +
          ((((C18262 + C18261) * C5913 + (C18260 + C18259) * C139300) *
                C139442 * C30408 +
            ((C21095 + C21096) * C5913 + (C21097 + C21098) * C139300) *
                C139442 * C139588) *
               C139403 -
           (((C18259 + C18260) * C139300 + (C18261 + C18262) * C5913) *
                C139442 * C139588 +
            ((C14339 + C14338) * C139300 + (C14337 + C14336) * C5913) *
                C139442 * C30408) *
               C139561) *
              C139592 +
          ((((C14349 + C14348) * C5913 + (C14347 + C14346) * C139300) *
                C139442 * C30408 +
            ((C24145 + C24146) * C5913 + (C24147 + C24148) * C139300) *
                C139442 * C139588) *
               C139561 -
           (((C13596 * C21080 + C139575 * C21084 + C13595 * C21081 +
              C13591 * C21085) *
                 C139300 +
             (C13596 * C21078 + C139575 * C21082 + C13595 * C21079 +
              C13591 * C21083) *
                 C5913) *
                C139442 * C139588 +
            ((C24148 + C24147) * C139300 + (C24146 + C24145) * C5913) *
                C139442 * C30408) *
               C139403) *
              C7158)) /
        (p * q * std::sqrt(p + q));
    d2eexy[36] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139575 * C114) *
                C7235 +
            (C13595 * C182 + C13591 * C188 + C13596 * C183 + C139575 * C189) *
                C139591 -
            (C14337 + C14336) * C7236 - (C14466 + C14467) * C139592 +
            (C14349 + C14348) * C7237 + (C14468 + C14469) * C7158) *
               C139442 * C30408 +
           ((C32101 + C32102) * C7235 + (C32231 + C32232) * C139591 -
            (C18261 + C18262) * C7236 - (C18404 + C18403) * C139592 +
            (C24145 + C24146) * C7237 + (C24256 + C24255) * C7158) *
               C139442 * C139588) *
              C139300 * C139561 +
          (((C18262 + C18261) * C7236 -
            ((C32232 + C32231) * C139591 + (C32102 + C32101) * C7235) +
            (C18403 + C18404) * C139592 - (C24146 + C24145) * C7237 -
            (C24255 + C24256) * C7158) *
               C139442 * C30408 +
           ((C21095 + C21096) * C7236 -
            ((C32237 + C32238) * C139591 + (C32113 + C32114) * C7235) +
            (C21206 + C21205) * C139592 -
            (C13596 * C21078 + C139575 * C21082 + C13595 * C21079 +
             C13591 * C21083) *
                C7237 -
            (C13596 * C21196 + C139575 * C21198 + C13595 * C21197 +
             C13591 * C21199) *
                C7158) *
               C139442 * C139588) *
              C139300 * C139403)) /
        (p * q * std::sqrt(p + q));
    d2eexz[36] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139575 * C114) *
                C3607 +
            (C13595 * C245 + C13591 * C251 + C13596 * C246 + C139575 * C252) *
                C139561 -
            (C32102 + C32101) * C3608 - (C32353 + C32354) * C139403) *
               C139442 * C30408 +
           ((C32101 + C32102) * C3607 + (C32354 + C32353) * C139561 -
            (C32113 + C32114) * C3608 - (C32356 + C32355) * C139403) *
               C139442 * C139588) *
              C139591 +
          (((C18262 + C18261) * C3608 -
            ((C14589 + C14588) * C139561 + (C14337 + C14336) * C3607) +
            (C18546 + C18545) * C139403) *
               C139442 * C30408 +
           ((C21095 + C21096) * C3608 -
            ((C18545 + C18546) * C139561 + (C18261 + C18262) * C3607) +
            (C21313 + C21314) * C139403) *
               C139442 * C139588) *
              C139592 +
          (((C14349 + C14348) * C3607 + (C14591 + C14590) * C139561 -
            (C24146 + C24145) * C3608 - (C24364 + C24363) * C139403) *
               C139442 * C30408 +
           ((C24145 + C24146) * C3607 + (C24363 + C24364) * C139561 -
            (C13596 * C21078 + C139575 * C21082 + C13595 * C21079 +
             C13591 * C21083) *
                C3608 -
            (C13596 * C21304 + C139575 * C21306 + C13595 * C21305 +
             C13591 * C21307) *
                C139403) *
               C139442 * C139588) *
              C7158) *
         C139300) /
        (p * q * std::sqrt(p + q));
    d2eeyx[36] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C307 * C107 + C139442 * C308) * C5913 +
              (C307 * C116 + C139442 * C314) * C139300) *
                 C30408 +
             (C38036 + C38037) * C139588) *
                C13591 +
            ((C337 * C5913 + C338 * C139300) * C30408 +
             (C38038 + C38039) * C139588) *
                C139575) *
               C139561 -
           (((C38040 + C38041) * C139588 + (C38039 + C38038) * C30408) *
                C139575 +
            ((C38042 + C38043) * C139588 + (C38037 + C38036) * C30408) *
                C13591) *
               C139403) *
              C139591 +
          ((((C38044 + C38045) * C30408 + (C38056 + C38057) * C139588) *
                C13591 +
            ((C38050 + C38051) * C30408 + (C38052 + C38053) * C139588) *
                C139575) *
               C139403 -
           (((C38051 + C38050) * C139588 +
             (C1151 * C139300 + C1150 * C5913) * C30408) *
                C139575 +
            ((C38045 + C38044) * C139588 +
             ((C307 * C841 + C139442 * C1125) * C139300 +
              (C307 * C831 + C139442 * C1118) * C5913) *
                 C30408) *
                C13591) *
               C139561) *
              C139592 +
          (((((C307 * C832 + C139442 * C1121) * C5913 +
              (C307 * C847 + C139442 * C1129) * C139300) *
                 C30408 +
             (C41046 + C41047) * C139588) *
                C13591 +
            ((C1154 * C5913 + C1155 * C139300) * C30408 +
             (C41042 + C41043) * C139588) *
                C139575) *
               C139561 -
           ((((C307 * C21080 + C139442 * C21414) * C139300 +
              (C307 * C21078 + C139442 * C21412) * C5913) *
                 C139588 +
             (C41043 + C41042) * C30408) *
                C139575 +
            (((C307 * C21081 + C139442 * C21415) * C139300 +
              (C307 * C21079 + C139442 * C21413) * C5913) *
                 C139588 +
             (C41047 + C41046) * C30408) *
                C13591) *
               C139403) *
              C7158)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[36] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139442 * C308) * C7235 +
             (C307 * C182 + C139442 * C394) * C139591 -
             (C307 * C831 + C139442 * C1118) * C7236 -
             (C307 * C939 + C139442 * C1231) * C139592 +
             (C307 * C832 + C139442 * C1121) * C7237 +
             (C307 * C940 + C139442 * C1232) * C7158) *
                C30408 +
            (C41146 + C41147 - C41148 - C41149 + C41150 + C41154) * C139588) *
               C13591 +
           ((C7461 + C7462 - C7463 - C7464 + C7465 + C7466) * C30408 +
            (C39056 + C39057 - C39058 - C39059 + C39060 + C39061) * C139588) *
               C139575) *
              C139300 * C139561 +
          (((C41148 - (C41147 + C41146) + C41149 - C41150 - C41154) * C30408 +
            (C38054 * C7236 - (C32605 * C139591 + C32486 * C7235) +
             C38169 * C139592 - (C307 * C21079 + C139442 * C21413) * C7237 -
             (C307 * C21197 + C139442 * C21514) * C7158) *
                C139588) *
               C13591 +
           ((C39058 - (C39057 + C39056) + C39059 - C39060 - C39061) * C30408 +
            (C35460 * C7236 - (C2190 * C139591 + C2090 * C7235) +
             C35609 * C139592 - (C307 * C21078 + C139442 * C21412) * C7237 -
             (C307 * C21196 + C139442 * C21515) * C7158) *
                C139588) *
               C139575) *
              C139300 * C139403)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[36] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C307 * C107 + C139442 * C308) * C3607 +
                       (C307 * C245 + C139442 * C474) * C139561 -
                       C32483 * C3608 - C32719 * C139403) *
                          C30408 +
                      (C32483 * C3607 + C32719 * C139561 - C32486 * C3608 -
                       C32720 * C139403) *
                          C139588) *
                         C13591 +
                     ((C3851 + C3852 - C3853 - C3854) * C30408 +
                      (C34598 + C34599 - C34600 - C34601) * C139588) *
                         C139575) *
                        C139591 +
                    (((C35459 * C3608 -
                       ((C307 * C1029 + C139442 * C1339) * C139561 +
                        (C307 * C831 + C139442 * C1118) * C3607) +
                       C35751 * C139403) *
                          C30408 +
                      (C38054 * C3608 - (C35751 * C139561 + C35459 * C3607) +
                       C38271 * C139403) *
                          C139588) *
                         C13591 +
                     ((C4788 - (C4789 + C4790) + C4800) * C30408 +
                      (C35746 - (C35747 + C35748) + C35753) * C139588) *
                         C139575) *
                        C139592 +
                    ((((C307 * C832 + C139442 * C1121) * C3607 +
                       (C307 * C1030 + C139442 * C1340) * C139561 -
                       C41044 * C3608 - C41255 * C139403) *
                          C30408 +
                      (C41044 * C3607 + C41255 * C139561 -
                       (C307 * C21079 + C139442 * C21413) * C3608 -
                       (C307 * C21305 + C139442 * C21614) * C139403) *
                          C139588) *
                         C13591 +
                     ((C1154 * C3607 + C1360 * C139561 - C31415 * C3608 -
                       C31627 * C139403) *
                          C30408 +
                      (C31415 * C3607 + C31627 * C139561 -
                       (C307 * C21078 + C139442 * C21412) * C3608 -
                       (C307 * C21304 + C139442 * C21615) * C139403) *
                          C139588) *
                         C139575) *
                        C7158) *
                   C139300) /
                  (p * q * std::sqrt(p + q));
    d2eezx[36] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C30812 * C107 + C30408 * C555 + C30813 * C1767 +
              C139588 * C2376) *
                 C5913 +
             (C30812 * C116 + C30408 * C561 + C30813 * C1777 +
              C139588 * C2383) *
                 C139300) *
                C13591 +
            ((C30840 + C30839) * C5913 + (C30842 + C30841) * C139300) *
                C139575) *
               C139442 * C139561 -
           (((C32840 + C32839) * C139300 + (C32838 + C32837) * C5913) *
                C139575 +
            ((C30813 * C1783 + C139588 * C2387 + C30812 * C1777 +
              C30408 * C2383) *
                 C139300 +
             (C30813 * C1768 + C139588 * C2379 + C30812 * C1767 +
              C30408 * C2376) *
                 C5913) *
                C13591) *
               C139442 * C139403) *
              C139591 +
          ((((C30812 * C4223 + C30408 * C4899 + C30813 * C6442 +
              C139588 * C6922) *
                 C5913 +
             (C30812 * C4230 + C30408 * C4903 + C30813 * C6445 +
              C139588 * C6925) *
                 C139300) *
                C13591 +
            ((C35893 + C35892) * C5913 + (C35895 + C35894) * C139300) *
                C139575) *
               C139442 * C139403 -
           (((C31746 + C31745) * C139300 + (C31744 + C31743) * C5913) *
                C139575 +
            ((C30813 * C4230 + C139588 * C4903 + C30812 * C841 +
              C30408 * C1447) *
                 C139300 +
             (C30813 * C4223 + C139588 * C4899 + C30812 * C831 +
              C30408 * C1440) *
                 C5913) *
                C13591) *
               C139442 * C139561) *
              C139592 +
          ((((C30812 * C832 + C30408 * C1443 + C30813 * C8754 +
              C139588 * C9234) *
                 C5913 +
             (C30812 * C847 + C30408 * C1451 + C30813 * C8757 +
              C139588 * C9237) *
                 C139300) *
                C13591 +
            ((C31748 + C31747) * C5913 + (C31750 + C31749) * C139300) *
                C139575) *
               C139442 * C139561 -
           (((C30813 * C21080 + C139588 * C21716 + C30812 * C8756 +
              C30408 * C9236) *
                 C139300 +
             (C30813 * C21078 + C139588 * C21714 + C30812 * C8753 +
              C30408 * C9233) *
                 C5913) *
                C139575 +
            ((C30813 * C21081 + C139588 * C21717 + C30812 * C8757 +
              C30408 * C9237) *
                 C139300 +
             (C30813 * C21079 + C139588 * C21715 + C30812 * C8754 +
              C30408 * C9234) *
                 C5913) *
                C13591) *
               C139442 * C139403) *
              C7158)) /
        (p * q * std::sqrt(p + q));
    d2eezy[36] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1767 + C139588 * C2376) *
                C7235 +
            (C30812 * C182 + C30408 * C641 + C30813 * C1873 + C139588 * C2492) *
                C139591 -
            (C30813 * C4223 + C139588 * C4899 + C30812 * C831 +
             C30408 * C1440) *
                C7236 -
            (C30813 * C4337 + C139588 * C5017 + C30812 * C939 +
             C30408 * C1553) *
                C139592 +
            (C30812 * C832 + C30408 * C1443 + C30813 * C8754 +
             C139588 * C9234) *
                C7237 +
            (C30812 * C940 + C30408 * C1554 + C30813 * C8840 +
             C139588 * C9312) *
                C7158) *
               C13591 +
           ((C30840 + C30839) * C7235 + (C30929 + C30930) * C139591 -
            (C31744 + C31743) * C7236 - (C31857 + C31858) * C139592 +
            (C31748 + C31747) * C7237 + (C31859 + C31860) * C7158) *
               C139575) *
              C139442 * C139300 * C139561 +
          (((C30812 * C4223 + C30408 * C4899 + C30813 * C6442 +
             C139588 * C6922) *
                C7236 -
            ((C30813 * C1874 + C139588 * C2493 + C30812 * C1873 +
              C30408 * C2492) *
                 C139591 +
             (C30813 * C1768 + C139588 * C2379 + C30812 * C1767 +
              C30408 * C2376) *
                 C7235) +
            (C30812 * C4337 + C30408 * C5017 + C30813 * C6528 +
             C139588 * C7000) *
                C139592 -
            (C30813 * C21079 + C139588 * C21715 + C30812 * C8754 +
             C30408 * C9234) *
                C7237 -
            (C30813 * C21197 + C139588 * C21830 + C30812 * C8840 +
             C30408 * C9312) *
                C7158) *
               C13591 +
           ((C35893 + C35892) * C7236 -
            ((C32952 + C32951) * C139591 + (C32838 + C32837) * C7235) +
            (C36030 + C36031) * C139592 -
            (C30813 * C21078 + C139588 * C21714 + C30812 * C8753 +
             C30408 * C9233) *
                C7237 -
            (C30813 * C21196 + C139588 * C21831 + C30812 * C8839 +
             C30408 * C9313) *
                C7158) *
               C139575) *
              C139442 * C139300 * C139403)) /
        (p * q * std::sqrt(p + q));
    d2eezz[36] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1767 + C139588 * C2376) *
                C3607 +
            (C30812 * C245 + C30408 * C719 + C30813 * C1965 + C139588 * C2591) *
                C139561 -
            (C30813 * C1768 + C139588 * C2379 + C30812 * C1767 +
             C30408 * C2376) *
                C3608 -
            (C30813 * C1966 + C139588 * C2592 + C30812 * C1965 +
             C30408 * C2591) *
                C139403) *
               C13591 +
           ((C30840 + C30839) * C3607 + (C31013 + C31014) * C139561 -
            (C32838 + C32837) * C3608 - (C33061 + C33062) * C139403) *
               C139575) *
              C139442 * C139591 +
          (((C30812 * C4223 + C30408 * C4899 + C30813 * C6442 +
             C139588 * C6922) *
                C3608 -
            ((C30813 * C4443 + C139588 * C5133 + C30812 * C1029 +
              C30408 * C1661) *
                 C139561 +
             (C30813 * C4223 + C139588 * C4899 + C30812 * C831 +
              C30408 * C1440) *
                 C3607) +
            (C30812 * C4443 + C30408 * C5133 + C30813 * C6608 +
             C139588 * C7077) *
                C139403) *
               C13591 +
           ((C35893 + C35892) * C3608 -
            ((C31967 + C31968) * C139561 + (C31744 + C31743) * C3607) +
            (C36166 + C36167) * C139403) *
               C139575) *
              C139442 * C139592 +
          (((C30812 * C832 + C30408 * C1443 + C30813 * C8754 +
             C139588 * C9234) *
                C3607 +
            (C30812 * C1030 + C30408 * C1662 + C30813 * C8920 +
             C139588 * C9389) *
                C139561 -
            (C30813 * C21079 + C139588 * C21715 + C30812 * C8754 +
             C30408 * C9234) *
                C3608 -
            (C30813 * C21305 + C139588 * C21933 + C30812 * C8920 +
             C30408 * C9389) *
                C139403) *
               C13591 +
           ((C31748 + C31747) * C3607 + (C31969 + C31970) * C139561 -
            (C30813 * C21078 + C139588 * C21714 + C30812 * C8753 +
             C30408 * C9233) *
                C3608 -
            (C30813 * C21304 + C139588 * C21934 + C30812 * C8919 +
             C30408 * C9390) *
                C139403) *
               C139575) *
              C139442 * C7158) *
         C139300) /
        (p * q * std::sqrt(p + q));
    d2eexx[37] +=
        (-std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139575 * C114) *
                C5913 +
            (C13595 * C116 + C13591 * C125 + C13596 * C117 + C139575 * C126) *
                C139300) *
               C139442 * C30408 +
           ((C32101 + C32102) * C5913 + (C32103 + C32104) * C139300) * C139442 *
               C139588) *
              C139339 * C5909 -
          (((C18259 + C18260) * C139300 + (C18261 + C18262) * C5913) * C139442 *
               C139588 +
           ((C14339 + C14338) * C139300 + (C14337 + C14336) * C5913) * C139442 *
               C30408) *
              C139339 * C5910 +
          (((C14349 + C14348) * C5913 + (C14347 + C14346) * C139300) * C139442 *
               C30408 +
           ((C24145 + C24146) * C5913 + (C24147 + C24148) * C139300) * C139442 *
               C139588) *
              C139339 * C5911 -
          (((C13596 * C24130 + C139575 * C24134 + C13595 * C24131 +
             C13591 * C24135) *
                C139300 +
            (C13596 * C24128 + C139575 * C24132 + C13595 * C24129 +
             C13591 * C24133) *
                C5913) *
               C139442 * C139588 +
           ((C20390 + C20389) * C139300 + (C20388 + C20387) * C5913) * C139442 *
               C30408) *
              C139339 * C5912)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139575 * C114) *
                C5230 +
            (C13595 * C116 + C13591 * C125 + C13596 * C117 + C139575 * C126) *
                C5225 -
            (C13596 * C109 + C139575 * C115 + C13595 * C108 + C13591 * C114) *
                C5231 -
            (C13596 * C118 + C139575 * C127 + C13595 * C117 + C13591 * C126) *
                C5226 +
            (C13595 * C109 + C13591 * C115 + C13596 * C110 + C139575 * C119) *
                C5232 +
            (C13595 * C118 + C13591 * C127 + C13596 * C120 + C139575 * C128) *
                C5227) *
               C139442 * C30408 +
           ((C32101 + C32102) * C5230 + (C32103 + C32104) * C5225 -
            (C32105 + C32106) * C5231 - (C32107 + C32108) * C5226 +
            (C34079 + C34080) * C5232 + (C34081 + C34082) * C5227) *
               C139442 * C139588) *
              C139339 * C5228 +
          (((C14341 + C14340) * C5231 -
            ((C14339 + C14338) * C5225 + (C14337 + C14336) * C5230) +
            (C14343 + C14342) * C5226 - (C16359 + C16358) * C5232 -
            (C16361 + C16360) * C5227) *
               C139442 * C30408 +
           ((C18257 + C18258) * C5231 -
            ((C18259 + C18260) * C5225 + (C18261 + C18262) * C5230) +
            (C18263 + C18264) * C5226 -
            (C13596 * C4226 + C139575 * C4233 + C13595 * C4225 +
             C13591 * C4229) *
                C5232 -
            (C13596 * C4234 + C139575 * C4238 + C13595 * C4232 +
             C13591 * C4237) *
                C5227) *
               C139442 * C139588) *
              C139339 * C139377)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139575 * C114) *
                 C5913 +
             (C13595 * C116 + C13591 * C125 + C13596 * C117 + C139575 * C126) *
                 C139300) *
                C139442 * C30408 +
            ((C32101 + C32102) * C5913 + (C32103 + C32104) * C139300) *
                C139442 * C139588) *
               C1761 -
           (((C32111 + C32112) * C139300 + (C32113 + C32114) * C5913) *
                C139442 * C139588 +
            ((C32104 + C32103) * C139300 + (C32102 + C32101) * C5913) *
                C139442 * C30408) *
               C1762 +
           (((C32114 + C32113) * C5913 + (C32112 + C32111) * C139300) *
                C139442 * C30408 +
            ((C13595 * C10815 + C13591 * C10821 + C13596 * C10814 +
              C139575 * C10820) *
                 C5913 +
             (C13595 * C10818 + C13591 * C10824 + C13596 * C10817 +
              C139575 * C10823) *
                 C139300) *
                C139442 * C139588) *
               C1763) *
              C5228 +
          ((((C18262 + C18261) * C5913 + (C18260 + C18259) * C139300) *
                C139442 * C30408 +
            ((C21095 + C21096) * C5913 + (C21097 + C21098) * C139300) *
                C139442 * C139588) *
               C1762 -
           (((C18259 + C18260) * C139300 + (C18261 + C18262) * C5913) *
                C139442 * C139588 +
            ((C14339 + C14338) * C139300 + (C14337 + C14336) * C5913) *
                C139442 * C30408) *
               C1761 -
           (((C13596 * C26832 + C139575 * C26836 + C13595 * C26833 +
              C13591 * C26837) *
                 C139300 +
             (C13596 * C26830 + C139575 * C26834 + C13595 * C26831 +
              C13591 * C26835) *
                 C5913) *
                C139442 * C139588 +
            ((C21098 + C21097) * C139300 + (C21096 + C21095) * C5913) *
                C139442 * C30408) *
               C1763) *
              C139377)) /
            (p * q * std::sqrt(p + q));
    d2eexy[37] +=
        (-std::pow(Pi, 2.5) *
         (((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139575 * C114) *
               C5976 +
           (C13595 * C182 + C13591 * C188 + C13596 * C183 + C139575 * C189) *
               C5909 -
           (C14337 + C14336) * C5977 - (C14466 + C14467) * C5910 +
           (C14349 + C14348) * C5978 + (C14468 + C14469) * C5911 -
           (C20388 + C20387) * C5979 - (C20465 + C20466) * C5912) *
              C139442 * C30408 +
          ((C32101 + C32102) * C5976 + (C32231 + C32232) * C5909 -
           (C18261 + C18262) * C5977 - (C18404 + C18403) * C5910 +
           (C24145 + C24146) * C5978 + (C24256 + C24255) * C5911 -
           (C13596 * C24128 + C139575 * C24132 + C13595 * C24129 +
            C13591 * C24133) *
               C5979 -
           (C13596 * C24246 + C139575 * C24248 + C13595 * C24247 +
            C13591 * C24249) *
               C5912) *
              C139442 * C139588) *
         C139300 * C139339) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139575 * C114) *
                C5307 +
            (C13595 * C182 + C13591 * C188 + C13596 * C183 + C139575 * C189) *
                C5228 -
            (C14337 + C14336) * C5308 - (C14466 + C14467) * C139377) *
               C139442 * C30408 +
           ((C32101 + C32102) * C5307 + (C32231 + C32232) * C5228 -
            (C18261 + C18262) * C5308 - (C18404 + C18403) * C139377) *
               C139442 * C139588) *
              C5225 +
          (((C14341 + C14340) * C5308 -
            ((C13596 * C184 + C139575 * C190 + C13595 * C183 + C13591 * C189) *
                 C5228 +
             (C13596 * C109 + C139575 * C115 + C13595 * C108 + C13591 * C114) *
                 C5307) +
            (C14470 + C14471) * C139377) *
               C139442 * C30408 +
           ((C18257 + C18258) * C5308 -
            ((C32233 + C32234) * C5228 + (C32105 + C32106) * C5307) +
            (C18406 + C18405) * C139377) *
               C139442 * C139588) *
              C5226 +
          (((C13595 * C109 + C13591 * C115 + C13596 * C110 + C139575 * C119) *
                C5307 +
            (C13595 * C184 + C13591 * C190 + C13596 * C185 + C139575 * C191) *
                C5228 -
            (C16359 + C16358) * C5308 - (C16464 + C16465) * C139377) *
               C139442 * C30408 +
           ((C34079 + C34080) * C5307 + (C34185 + C34186) * C5228 -
            (C13596 * C4226 + C139575 * C4233 + C13595 * C4225 +
             C13591 * C4229) *
                C5308 -
            (C13596 * C4340 + C139575 * C4344 + C13595 * C4339 +
             C13591 * C4343) *
                C139377) *
               C139442 * C139588) *
              C5227) *
         C139339) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139575 * C114) *
                C5307 +
            (C13595 * C182 + C13591 * C188 + C13596 * C183 + C139575 * C189) *
                C5228 -
            (C14337 + C14336) * C5308 - (C14466 + C14467) * C139377) *
               C139442 * C30408 +
           ((C32101 + C32102) * C5307 + (C32231 + C32232) * C5228 -
            (C18261 + C18262) * C5308 - (C18404 + C18403) * C139377) *
               C139442 * C139588) *
              C139300 * C1761 +
          (((C18262 + C18261) * C5308 -
            ((C32232 + C32231) * C5228 + (C32102 + C32101) * C5307) +
            (C18403 + C18404) * C139377) *
               C139442 * C30408 +
           ((C21095 + C21096) * C5308 -
            ((C32237 + C32238) * C5228 + (C32113 + C32114) * C5307) +
            (C21206 + C21205) * C139377) *
               C139442 * C139588) *
              C139300 * C1762 +
          (((C32114 + C32113) * C5307 + (C32238 + C32237) * C5228 -
            (C21096 + C21095) * C5308 - (C21205 + C21206) * C139377) *
               C139442 * C30408 +
           ((C13595 * C10815 + C13591 * C10821 + C13596 * C10814 +
             C139575 * C10820) *
                C5307 +
            (C13595 * C10877 + C13591 * C10880 + C13596 * C10876 +
             C139575 * C10879) *
                C5228 -
            (C13596 * C26830 + C139575 * C26834 + C13595 * C26831 +
             C13591 * C26835) *
                C5308 -
            (C13596 * C26904 + C139575 * C26906 + C13595 * C26905 +
             C13591 * C26907) *
                C139377) *
               C139442 * C139588) *
              C139300 * C1763)) /
            (p * q * std::sqrt(p + q));
    d2eexz[37] +=
        (-std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139575 * C114) *
                C244 +
            (C13595 * C245 + C13591 * C251 + C13596 * C246 + C139575 * C252) *
                C139339) *
               C139442 * C30408 +
           ((C32101 + C32102) * C244 + (C32354 + C32353) * C139339) * C139442 *
               C139588) *
              C5909 -
          (((C18545 + C18546) * C139339 + (C18261 + C18262) * C244) * C139442 *
               C139588 +
           ((C14589 + C14588) * C139339 + (C14337 + C14336) * C244) * C139442 *
               C30408) *
              C5910 +
          (((C14349 + C14348) * C244 + (C14591 + C14590) * C139339) * C139442 *
               C30408 +
           ((C24145 + C24146) * C244 + (C24363 + C24364) * C139339) * C139442 *
               C139588) *
              C5911 -
          (((C13596 * C24354 + C139575 * C24356 + C13595 * C24355 +
             C13591 * C24357) *
                C139339 +
            (C13596 * C24128 + C139575 * C24132 + C13595 * C24129 +
             C13591 * C24133) *
                C244) *
               C139442 * C139588 +
           ((C20542 + C20541) * C139339 + (C20388 + C20387) * C244) * C139442 *
               C30408) *
              C5912) *
         C139300) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139575 * C114) *
                 C244 +
             (C13595 * C245 + C13591 * C251 + C13596 * C246 + C139575 * C252) *
                 C139339) *
                C139442 * C30408 +
            ((C32101 + C32102) * C244 + (C32354 + C32353) * C139339) * C139442 *
                C139588) *
               C5228 -
           (((C18545 + C18546) * C139339 + (C18261 + C18262) * C244) * C139442 *
                C139588 +
            ((C14589 + C14588) * C139339 + (C14337 + C14336) * C244) * C139442 *
                C30408) *
               C139377) *
              C5225 +
          ((((C14341 + C14340) * C244 + (C14592 + C14593) * C139339) * C139442 *
                C30408 +
            ((C18257 + C18258) * C244 + (C18547 + C18548) * C139339) * C139442 *
                C139588) *
               C139377 -
           (((C32358 + C32357) * C139339 + (C32105 + C32106) * C244) * C139442 *
                C139588 +
            ((C13596 * C247 + C139575 * C253 + C13595 * C246 + C13591 * C252) *
                 C139339 +
             (C13596 * C109 + C139575 * C115 + C13595 * C108 + C13591 * C114) *
                 C244) *
                C139442 * C30408) *
               C5228) *
              C5226 +
          ((((C13595 * C109 + C13591 * C115 + C13596 * C110 + C139575 * C119) *
                 C244 +
             (C13595 * C247 + C13591 * C253 + C13596 * C248 + C139575 * C254) *
                 C139339) *
                C139442 * C30408 +
            ((C34079 + C34080) * C244 + (C34290 + C34289) * C139339) * C139442 *
                C139588) *
               C5228 -
           (((C13596 * C4446 + C139575 * C4450 + C13595 * C4445 +
              C13591 * C4449) *
                 C139339 +
             (C13596 * C4226 + C139575 * C4233 + C13595 * C4225 +
              C13591 * C4229) *
                 C244) *
                C139442 * C139588 +
            ((C16569 + C16568) * C139339 + (C16359 + C16358) * C244) * C139442 *
                C30408) *
               C139377) *
              C5227)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139575 * C114) *
                C1960 +
            (C13595 * C245 + C13591 * C251 + C13596 * C246 + C139575 * C252) *
                C1761 -
            (C32102 + C32101) * C1961 - (C32353 + C32354) * C1762 +
            (C32114 + C32113) * C1962 + (C32355 + C32356) * C1763) *
               C139442 * C30408 +
           ((C32101 + C32102) * C1960 + (C32354 + C32353) * C1761 -
            (C32113 + C32114) * C1961 - (C32356 + C32355) * C1762 +
            (C13595 * C10815 + C13591 * C10821 + C13596 * C10814 +
             C139575 * C10820) *
                C1962 +
            (C13595 * C10937 + C13591 * C10940 + C13596 * C10936 +
             C139575 * C10939) *
                C1763) *
               C139442 * C139588) *
              C5228 +
          (((C18262 + C18261) * C1961 -
            ((C14589 + C14588) * C1761 + (C14337 + C14336) * C1960) +
            (C18546 + C18545) * C1762 - (C21096 + C21095) * C1962 -
            (C21314 + C21313) * C1763) *
               C139442 * C30408 +
           ((C21095 + C21096) * C1961 -
            ((C18545 + C18546) * C1761 + (C18261 + C18262) * C1960) +
            (C21313 + C21314) * C1762 -
            (C13596 * C26830 + C139575 * C26834 + C13595 * C26831 +
             C13591 * C26835) *
                C1962 -
            (C13596 * C26974 + C139575 * C26976 + C13595 * C26975 +
             C13591 * C26977) *
                C1763) *
               C139442 * C139588) *
              C139377) *
         C139300) /
            (p * q * std::sqrt(p + q));
    d2eeyx[37] +=
        (-std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139442 * C308) * C5913 +
             (C307 * C116 + C139442 * C314) * C139300) *
                C30408 +
            (C32483 * C5913 + C32484 * C139300) * C139588) *
               C13591 +
           ((C337 * C5913 + C338 * C139300) * C30408 +
            (C2086 * C5913 + C2087 * C139300) * C139588) *
               C139575) *
              C139339 * C5909 -
          (((C4567 * C139300 + C4566 * C5913) * C139588 +
            (C1151 * C139300 + C1150 * C5913) * C30408) *
               C139575 +
           ((C35458 * C139300 + C35459 * C5913) * C139588 +
            ((C307 * C841 + C139442 * C1125) * C139300 +
             (C307 * C831 + C139442 * C1118) * C5913) *
                C30408) *
               C13591) *
              C139339 * C5910 +
          ((((C307 * C832 + C139442 * C1121) * C5913 +
             (C307 * C847 + C139442 * C1129) * C139300) *
                C30408 +
            ((C307 * C8754 + C139442 * C9000) * C5913 +
             (C307 * C8757 + C139442 * C9003) * C139300) *
                C139588) *
               C13591 +
           ((C1154 * C5913 + C1155 * C139300) * C30408 +
            (C31415 * C5913 + C31416 * C139300) * C139588) *
               C139575) *
              C139339 * C5911 -
          ((((C307 * C24130 + C139442 * C24464) * C139300 +
             (C307 * C24128 + C139442 * C24462) * C5913) *
                C139588 +
            ((C307 * C5918 + C139442 * C6096) * C139300 +
             (C307 * C5915 + C139442 * C6093) * C5913) *
                C30408) *
               C139575 +
           (((C307 * C24131 + C139442 * C24465) * C139300 +
             (C307 * C24129 + C139442 * C24463) * C5913) *
                C139588 +
            ((C307 * C5919 + C139442 * C6097) * C139300 +
             (C307 * C5916 + C139442 * C6094) * C5913) *
                C30408) *
               C13591) *
              C139339 * C5912)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139442 * C308) * C5230 +
             (C307 * C116 + C139442 * C314) * C5225 - C337 * C5231 -
             C338 * C5226 + C339 * C5232 + C340 * C5227) *
                C30408 +
            (C32483 * C5230 + C32484 * C5225 - C2086 * C5231 - C2087 * C5226 +
             C2088 * C5232 + C2089 * C5227) *
                C139588) *
               C13591 +
           ((C337 * C5230 + C338 * C5225 - C339 * C5231 - C340 * C5226 +
             C341 * C5232 + C342 * C5227) *
                C30408 +
            (C2086 * C5230 + C2087 * C5225 - C2088 * C5231 - C2089 * C5226 +
             C3692 * C5232 + C3693 * C5227) *
                C139588) *
               C139575) *
              C139339 * C5228 +
          (((C1150 * C5231 -
             ((C307 * C841 + C139442 * C1125) * C5225 +
              (C307 * C831 + C139442 * C1118) * C5230) +
             C1151 * C5226 - C1152 * C5232 - C1153 * C5227) *
                C30408 +
            (C4566 * C5231 - (C35458 * C5225 + C35459 * C5230) + C4567 * C5226 -
             C4568 * C5232 - C4569 * C5227) *
                C139588) *
               C13591 +
           ((C1152 * C5231 - (C1151 * C5225 + C1150 * C5230) + C1153 * C5226 -
             C2944 * C5232 - C2945 * C5227) *
                C30408 +
            (C4568 * C5231 - (C4567 * C5225 + C4566 * C5230) + C4569 * C5226 -
             (C307 * C4226 + C139442 * C4552) * C5232 -
             (C307 * C4234 + C139442 * C4556) * C5227) *
                C139588) *
               C139575) *
              C139339 * C139377)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((((C307 * C107 + C139442 * C308) * C5913 +
              (C307 * C116 + C139442 * C314) * C139300) *
                 C30408 +
             (C38036 + C38037) * C139588) *
                C13591 +
            ((C337 * C5913 + C338 * C139300) * C30408 +
             (C38038 + C38039) * C139588) *
                C139575) *
               C1761 -
           (((C38040 + C38041) * C139588 + (C38039 + C38038) * C30408) *
                C139575 +
            ((C38042 + C38043) * C139588 + (C38037 + C38036) * C30408) *
                C13591) *
               C1762 +
           (((C38043 + C38042) * C30408 +
             ((C307 * C10815 + C139442 * C10993) * C5913 +
              (C307 * C10818 + C139442 * C10996) * C139300) *
                 C139588) *
                C13591 +
            ((C38041 + C38040) * C30408 +
             (C32487 * C5913 + C32488 * C139300) * C139588) *
                C139575) *
               C1763) *
              C5228 +
          ((((C38044 + C38045) * C30408 + (C38056 + C38057) * C139588) *
                C13591 +
            ((C38050 + C38051) * C30408 + (C38052 + C38053) * C139588) *
                C139575) *
               C1762 -
           (((C38051 + C38050) * C139588 +
             (C1151 * C139300 + C1150 * C5913) * C30408) *
                C139575 +
            ((C38045 + C38044) * C139588 +
             ((C307 * C841 + C139442 * C1125) * C139300 +
              (C307 * C831 + C139442 * C1118) * C5913) *
                 C30408) *
                C13591) *
               C1761 -
           ((((C307 * C26832 + C139442 * C27046) * C139300 +
              (C307 * C26830 + C139442 * C27044) * C5913) *
                 C139588 +
             (C38053 + C38052) * C30408) *
                C139575 +
            (((C307 * C26833 + C139442 * C27047) * C139300 +
              (C307 * C26831 + C139442 * C27045) * C5913) *
                 C139588 +
             (C38057 + C38056) * C30408) *
                C13591) *
               C1763) *
              C139377)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[37] +=
        (-std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139442 * C308) * C5976 +
            (C307 * C182 + C139442 * C394) * C5909 -
            (C307 * C831 + C139442 * C1118) * C5977 -
            (C307 * C939 + C139442 * C1231) * C5910 +
            (C307 * C832 + C139442 * C1121) * C5978 +
            (C307 * C940 + C139442 * C1232) * C5911 -
            (C307 * C5916 + C139442 * C6094) * C5979 -
            (C307 * C5982 + C139442 * C6148) * C5912) *
               C30408 +
           (C32483 * C5976 + C32604 * C5909 - C35459 * C5977 - C35606 * C5910 +
            (C307 * C8754 + C139442 * C9000) * C5978 +
            (C307 * C8840 + C139442 * C9078) * C5911 -
            (C307 * C24129 + C139442 * C24463) * C5979 -
            (C307 * C24247 + C139442 * C24564) * C5912) *
               C139588) *
              C13591 +
          ((C337 * C5976 + C413 * C5909 - C1150 * C5977 - C1256 * C5910 +
            C1154 * C5978 + C1257 * C5911 -
            (C307 * C5915 + C139442 * C6093) * C5979 -
            (C307 * C5981 + C139442 * C6149) * C5912) *
               C30408 +
           (C2086 * C5976 + C2188 * C5909 - C4566 * C5977 - C4682 * C5910 +
            C31415 * C5978 + C31522 * C5911 -
            (C307 * C24128 + C139442 * C24462) * C5979 -
            (C307 * C24246 + C139442 * C24565) * C5912) *
               C139588) *
              C139575) *
         C139300 * C139339) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139442 * C308) * C5307 +
             (C307 * C182 + C139442 * C394) * C5228 -
             (C307 * C831 + C139442 * C1118) * C5308 -
             (C307 * C939 + C139442 * C1231) * C139377) *
                C30408 +
            (C32483 * C5307 + C32604 * C5228 - C35459 * C5308 -
             C35606 * C139377) *
                C139588) *
               C13591 +
           ((C5532 + C5533 - C5534 - C5535) * C30408 +
            (C8273 + C8272 - C8271 - C8274) * C139588) *
               C139575) *
              C5225 +
          (((C5534 - (C5533 + C5532) + C5535) * C30408 +
            (C8271 - (C8272 + C8273) + C8274) * C139588) *
               C13591 +
           ((C5538 - (C5537 + C5536) + C5539) * C30408 +
            (C8275 - (C8276 + C8277) + C8278) * C139588) *
               C139575) *
              C5226 +
          ((C5546 * C30408 + (C8277 + C8276 - C8275 - C8278) * C139588) *
               C13591 +
           ((C5542 + C5541 - C5540 - C5543) * C30408 +
            (C3692 * C5307 + C3773 * C5228 -
             (C307 * C4226 + C139442 * C4552) * C5308 -
             (C307 * C4340 + C139442 * C4670) * C139377) *
                C139588) *
               C139575) *
              C5227) *
         C139339) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139442 * C308) * C5307 +
             (C307 * C182 + C139442 * C394) * C5228 -
             (C307 * C831 + C139442 * C1118) * C5308 -
             (C307 * C939 + C139442 * C1231) * C139377) *
                C30408 +
            (C38156 + C38157 - C38158 - C38159) * C139588) *
               C13591 +
           ((C5532 + C5533 - C5534 - C5535) * C30408 +
            (C8273 + C8272 - C8271 - C8274) * C139588) *
               C139575) *
              C139300 * C1761 +
          (((C38158 - (C38157 + C38156) + C38159) * C30408 +
            (C38160 - (C38161 + C38162) + C38170) * C139588) *
               C13591 +
           ((C8271 - (C8272 + C8273) + C8274) * C30408 +
            (C38165 - (C38166 + C38167) + C38168) * C139588) *
               C139575) *
              C139300 * C1762 +
          (((C38162 + C38161 - C38160 - C38170) * C30408 +
            ((C307 * C10815 + C139442 * C10993) * C5307 +
             (C307 * C10877 + C139442 * C11049) * C5228 -
             (C307 * C26831 + C139442 * C27045) * C5308 -
             (C307 * C26905 + C139442 * C27115) * C139377) *
                C139588) *
               C13591 +
           ((C38167 + C38166 - C38165 - C38168) * C30408 +
            (C32487 * C5307 + C32606 * C5228 -
             (C307 * C26830 + C139442 * C27044) * C5308 -
             (C307 * C26904 + C139442 * C27114) * C139377) *
                C139588) *
               C139575) *
              C139300 * C1763)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[37] +=
        (-std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139442 * C308) * C244 +
             (C307 * C245 + C139442 * C474) * C139339) *
                C30408 +
            (C32483 * C244 + C32719 * C139339) * C139588) *
               C13591 +
           ((C481 + C497) * C30408 + (C30741 + C30742) * C139588) * C139575) *
              C5909 -
          (((C31622 + C31623) * C139588 + (C1363 + C1351) * C30408) * C139575 +
           ((C35751 * C139339 + C35459 * C244) * C139588 +
            ((C307 * C1029 + C139442 * C1339) * C139339 +
             (C307 * C831 + C139442 * C1118) * C244) *
                C30408) *
               C13591) *
              C5910 +
          ((((C307 * C832 + C139442 * C1121) * C244 +
             (C307 * C1030 + C139442 * C1340) * C139339) *
                C30408 +
            ((C307 * C8754 + C139442 * C9000) * C244 +
             (C307 * C8920 + C139442 * C9155) * C139339) *
                C139588) *
               C13591 +
           ((C1352 + C1364) * C30408 + (C31624 + C31628) * C139588) * C139575) *
              C5911 -
          ((((C307 * C24354 + C139442 * C24665) * C139339 +
             (C307 * C24128 + C139442 * C24462) * C244) *
                C139588 +
            ((C307 * C6037 + C139442 * C6202) * C139339 +
             (C307 * C5915 + C139442 * C6093) * C244) *
                C30408) *
               C139575 +
           (((C307 * C24355 + C139442 * C24664) * C139339 +
             (C307 * C24129 + C139442 * C24463) * C244) *
                C139588 +
            ((C307 * C6038 + C139442 * C6203) * C139339 +
             (C307 * C5916 + C139442 * C6094) * C244) *
                C30408) *
               C13591) *
              C5912) *
         C139300) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((((C307 * C107 + C139442 * C308) * C244 +
              (C307 * C245 + C139442 * C474) * C139339) *
                 C30408 +
             (C32483 * C244 + C32719 * C139339) * C139588) *
                C13591 +
            ((C481 + C497) * C30408 + (C30741 + C30742) * C139588) * C139575) *
               C5228 -
           (((C31622 + C31623) * C139588 + (C1363 + C1351) * C30408) * C139575 +
            ((C35751 * C139339 + C35459 * C244) * C139588 +
             ((C307 * C1029 + C139442 * C1339) * C139339 +
              (C307 * C831 + C139442 * C1118) * C244) *
                 C30408) *
                C13591) *
               C139377) *
              C5225 +
          ((((C1351 + C1363) * C30408 + (C31623 + C31622) * C139588) * C13591 +
            ((C1348 + C1362) * C30408 + (C33653 + C33654) * C139588) *
                C139575) *
               C139377 -
           (((C30743 + C30744) * C139588 + (C498 + C484) * C30408) * C139575 +
            ((C30742 + C30741) * C139588 + (C497 + C481) * C30408) * C13591) *
               C5228) *
              C5226 +
          (((C501 * C30408 + (C30744 + C30743) * C139588) * C13591 +
            ((C489 + C499) * C30408 + (C30745 + C30746) * C139588) * C139575) *
               C5228 -
           ((((C307 * C4446 + C139442 * C4786) * C139339 +
              (C307 * C4226 + C139442 * C4552) * C244) *
                 C139588 +
             (C3121 + C3116) * C30408) *
                C139575 +
            ((C33654 + C33653) * C139588 + C3115 * C30408) * C13591) *
               C139377) *
              C5227)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139442 * C308) * C1960 +
             (C307 * C245 + C139442 * C474) * C1761 - C32483 * C1961 -
             C32719 * C1762 + C32486 * C1962 + C32720 * C1763) *
                C30408 +
            (C32483 * C1960 + C32719 * C1761 - C32486 * C1961 - C32720 * C1762 +
             (C307 * C10815 + C139442 * C10993) * C1962 +
             (C307 * C10937 + C139442 * C11100) * C1763) *
                C139588) *
               C13591 +
           ((C2278 + C2279 - C2280 - C2298 + C2283 + C2299) * C30408 +
            (C32712 + C32713 - C32714 - C32715 + C32716 + C32722) * C139588) *
               C139575) *
              C5228 +
          (((C35459 * C1961 -
             ((C307 * C1029 + C139442 * C1339) * C1761 +
              (C307 * C831 + C139442 * C1118) * C1960) +
             C35751 * C1762 - C38054 * C1962 - C38271 * C1763) *
                C30408 +
            (C38054 * C1961 - (C35751 * C1761 + C35459 * C1960) +
             C38271 * C1762 - (C307 * C26831 + C139442 * C27045) * C1962 -
             (C307 * C26975 + C139442 * C27182) * C1763) *
                C139588) *
               C13591 +
           ((C4566 * C1961 - (C1359 * C1761 + C1150 * C1960) + C4798 * C1762 -
             C35460 * C1962 - C35752 * C1763) *
                C30408 +
            (C35460 * C1961 - (C4798 * C1761 + C4566 * C1960) + C35752 * C1762 -
             (C307 * C26830 + C139442 * C27044) * C1962 -
             (C307 * C26974 + C139442 * C27183) * C1763) *
                C139588) *
               C139575) *
              C139377) *
         C139300) /
            (p * q * std::sqrt(p + q));
    d2eezx[37] +=
        (-std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1767 + C139588 * C2376) *
                C5913 +
            (C30812 * C116 + C30408 * C561 + C30813 * C1777 + C139588 * C2383) *
                C139300) *
               C13591 +
           ((C30840 + C30839) * C5913 + (C30842 + C30841) * C139300) *
               C139575) *
              C139442 * C139339 * C5909 -
          (((C31746 + C31745) * C139300 + (C31744 + C31743) * C5913) * C139575 +
           ((C30813 * C4230 + C139588 * C4903 + C30812 * C841 +
             C30408 * C1447) *
                C139300 +
            (C30813 * C4223 + C139588 * C4899 + C30812 * C831 +
             C30408 * C1440) *
                C5913) *
               C13591) *
              C139442 * C139339 * C5910 +
          (((C30812 * C832 + C30408 * C1443 + C30813 * C8754 +
             C139588 * C9234) *
                C5913 +
            (C30812 * C847 + C30408 * C1451 + C30813 * C8757 +
             C139588 * C9237) *
                C139300) *
               C13591 +
           ((C31748 + C31747) * C5913 + (C31750 + C31749) * C139300) *
               C139575) *
              C139442 * C139339 * C5911 -
          (((C30813 * C24130 + C139588 * C24766 + C30812 * C5918 +
             C30408 * C6258) *
                C139300 +
            (C30813 * C24128 + C139588 * C24764 + C30812 * C5915 +
             C30408 * C6255) *
                C5913) *
               C139575 +
           ((C30813 * C24131 + C139588 * C24767 + C30812 * C5919 +
             C30408 * C6259) *
                C139300 +
            (C30813 * C24129 + C139588 * C24765 + C30812 * C5916 +
             C30408 * C6256) *
                C5913) *
               C13591) *
              C139442 * C139339 * C5912)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1767 + C139588 * C2376) *
                C5230 +
            (C30812 * C116 + C30408 * C561 + C30813 * C1777 + C139588 * C2383) *
                C5225 -
            (C30839 + C30840) * C5231 - (C30841 + C30842) * C5226 +
            (C30843 + C30844) * C5232 + (C30845 + C30846) * C5227) *
               C13591 +
           ((C30840 + C30839) * C5230 + (C30842 + C30841) * C5225 -
            (C30844 + C30843) * C5231 - (C30846 + C30845) * C5226 +
            (C30848 + C30847) * C5232 + (C30850 + C30849) * C5227) *
               C139575) *
              C139442 * C139339 * C5228 +
          (((C31743 + C31744) * C5231 -
            ((C30813 * C4230 + C139588 * C4903 + C30812 * C841 +
              C30408 * C1447) *
                 C5225 +
             (C30813 * C4223 + C139588 * C4899 + C30812 * C831 +
              C30408 * C1440) *
                 C5230) +
            (C31745 + C31746) * C5226 - (C33761 + C33762) * C5232 -
            (C33763 + C33764) * C5227) *
               C13591 +
           ((C33762 + C33761) * C5231 -
            ((C31746 + C31745) * C5225 + (C31744 + C31743) * C5230) +
            (C33764 + C33763) * C5226 -
            (C30813 * C4226 + C139588 * C4902 + C30812 * C830 +
             C30408 * C1442) *
                C5232 -
            (C30813 * C4234 + C139588 * C4906 + C30812 * C843 +
             C30408 * C1450) *
                C5227) *
               C139575) *
              C139442 * C139339 * C139377)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C30812 * C107 + C30408 * C555 + C30813 * C1767 +
              C139588 * C2376) *
                 C5913 +
             (C30812 * C116 + C30408 * C561 + C30813 * C1777 +
              C139588 * C2383) *
                 C139300) *
                C13591 +
            ((C30840 + C30839) * C5913 + (C30842 + C30841) * C139300) *
                C139575) *
               C139442 * C1761 -
           (((C32840 + C32839) * C139300 + (C32838 + C32837) * C5913) *
                C139575 +
            ((C30813 * C1783 + C139588 * C2387 + C30812 * C1777 +
              C30408 * C2383) *
                 C139300 +
             (C30813 * C1768 + C139588 * C2379 + C30812 * C1767 +
              C30408 * C2376) *
                 C5913) *
                C13591) *
               C139442 * C1762 +
           (((C30812 * C1768 + C30408 * C2379 + C30813 * C10815 +
              C139588 * C11155) *
                 C5913 +
             (C30812 * C1783 + C30408 * C2387 + C30813 * C10818 +
              C139588 * C11158) *
                 C139300) *
                C13591 +
            ((C32842 + C32841) * C5913 + (C32844 + C32843) * C139300) *
                C139575) *
               C139442 * C1763) *
              C5228 +
          ((((C30812 * C4223 + C30408 * C4899 + C30813 * C6442 +
              C139588 * C6922) *
                 C5913 +
             (C30812 * C4230 + C30408 * C4903 + C30813 * C6445 +
              C139588 * C6925) *
                 C139300) *
                C13591 +
            ((C35893 + C35892) * C5913 + (C35895 + C35894) * C139300) *
                C139575) *
               C139442 * C1762 -
           (((C31746 + C31745) * C139300 + (C31744 + C31743) * C5913) *
                C139575 +
            ((C30813 * C4230 + C139588 * C4903 + C30812 * C841 +
              C30408 * C1447) *
                 C139300 +
             (C30813 * C4223 + C139588 * C4899 + C30812 * C831 +
              C30408 * C1440) *
                 C5913) *
                C13591) *
               C139442 * C1761 -
           (((C30813 * C26832 + C139588 * C27252 + C30812 * C6444 +
              C30408 * C6924) *
                 C139300 +
             (C30813 * C26830 + C139588 * C27250 + C30812 * C6441 +
              C30408 * C6921) *
                 C5913) *
                C139575 +
            ((C30813 * C26833 + C139588 * C27253 + C30812 * C6445 +
              C30408 * C6925) *
                 C139300 +
             (C30813 * C26831 + C139588 * C27251 + C30812 * C6442 +
              C30408 * C6922) *
                 C5913) *
                C13591) *
               C139442 * C1763) *
              C139377)) /
            (p * q * std::sqrt(p + q));
    d2eezy[37] +=
        (-std::pow(Pi, 2.5) *
         (((C30812 * C107 + C30408 * C555 + C30813 * C1767 + C139588 * C2376) *
               C5976 +
           (C30812 * C182 + C30408 * C641 + C30813 * C1873 + C139588 * C2492) *
               C5909 -
           (C30813 * C4223 + C139588 * C4899 + C30812 * C831 + C30408 * C1440) *
               C5977 -
           (C30813 * C4337 + C139588 * C5017 + C30812 * C939 + C30408 * C1553) *
               C5910 +
           (C30812 * C832 + C30408 * C1443 + C30813 * C8754 + C139588 * C9234) *
               C5978 +
           (C30812 * C940 + C30408 * C1554 + C30813 * C8840 + C139588 * C9312) *
               C5911 -
           (C30813 * C24129 + C139588 * C24765 + C30812 * C5916 +
            C30408 * C6256) *
               C5979 -
           (C30813 * C24247 + C139588 * C24876 + C30812 * C5982 +
            C30408 * C6310) *
               C5912) *
              C13591 +
          ((C30840 + C30839) * C5976 + (C30929 + C30930) * C5909 -
           (C31744 + C31743) * C5977 - (C31857 + C31858) * C5910 +
           (C31748 + C31747) * C5978 + (C31859 + C31860) * C5911 -
           (C30813 * C24128 + C139588 * C24764 + C30812 * C5915 +
            C30408 * C6255) *
               C5979 -
           (C30813 * C24246 + C139588 * C24877 + C30812 * C5981 +
            C30408 * C6311) *
               C5912) *
              C139575) *
         C139442 * C139300 * C139339) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1767 + C139588 * C2376) *
                C5307 +
            (C30812 * C182 + C30408 * C641 + C30813 * C1873 + C139588 * C2492) *
                C5228 -
            (C30813 * C4223 + C139588 * C4899 + C30812 * C831 +
             C30408 * C1440) *
                C5308 -
            (C30813 * C4337 + C139588 * C5017 + C30812 * C939 +
             C30408 * C1553) *
                C139377) *
               C13591 +
           ((C30840 + C30839) * C5307 + (C30929 + C30930) * C5228 -
            (C31744 + C31743) * C5308 - (C31857 + C31858) * C139377) *
               C139575) *
              C139442 * C5225 +
          (((C31743 + C31744) * C5308 -
            ((C30930 + C30929) * C5228 + (C30839 + C30840) * C5307) +
            (C31858 + C31857) * C139377) *
               C13591 +
           ((C33762 + C33761) * C5308 -
            ((C30931 + C30932) * C5228 + (C30844 + C30843) * C5307) +
            (C33867 + C33868) * C139377) *
               C139575) *
              C139442 * C5226 +
          (((C30843 + C30844) * C5307 + (C30932 + C30931) * C5228 -
            (C33761 + C33762) * C5308 - (C33868 + C33867) * C139377) *
               C13591 +
           ((C30848 + C30847) * C5307 + (C30933 + C30934) * C5228 -
            (C30813 * C4226 + C139588 * C4902 + C30812 * C830 +
             C30408 * C1442) *
                C5308 -
            (C30813 * C4340 + C139588 * C5020 + C30812 * C943 +
             C30408 * C1559) *
                C139377) *
               C139575) *
              C139442 * C5227) *
         C139339) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1767 + C139588 * C2376) *
                C5307 +
            (C30812 * C182 + C30408 * C641 + C30813 * C1873 + C139588 * C2492) *
                C5228 -
            (C30813 * C4223 + C139588 * C4899 + C30812 * C831 +
             C30408 * C1440) *
                C5308 -
            (C30813 * C4337 + C139588 * C5017 + C30812 * C939 +
             C30408 * C1553) *
                C139377) *
               C13591 +
           ((C30840 + C30839) * C5307 + (C30929 + C30930) * C5228 -
            (C31744 + C31743) * C5308 - (C31857 + C31858) * C139377) *
               C139575) *
              C139442 * C139300 * C1761 +
          (((C30812 * C4223 + C30408 * C4899 + C30813 * C6442 +
             C139588 * C6922) *
                C5308 -
            ((C30813 * C1874 + C139588 * C2493 + C30812 * C1873 +
              C30408 * C2492) *
                 C5228 +
             (C30813 * C1768 + C139588 * C2379 + C30812 * C1767 +
              C30408 * C2376) *
                 C5307) +
            (C30812 * C4337 + C30408 * C5017 + C30813 * C6528 +
             C139588 * C7000) *
                C139377) *
               C13591 +
           ((C35893 + C35892) * C5308 -
            ((C32952 + C32951) * C5228 + (C32838 + C32837) * C5307) +
            (C36030 + C36031) * C139377) *
               C139575) *
              C139442 * C139300 * C1762 +
          (((C30812 * C1768 + C30408 * C2379 + C30813 * C10815 +
             C139588 * C11155) *
                C5307 +
            (C30812 * C1874 + C30408 * C2493 + C30813 * C10877 +
             C139588 * C11211) *
                C5228 -
            (C30813 * C26831 + C139588 * C27251 + C30812 * C6442 +
             C30408 * C6922) *
                C5308 -
            (C30813 * C26905 + C139588 * C27321 + C30812 * C6528 +
             C30408 * C7000) *
                C139377) *
               C13591 +
           ((C32842 + C32841) * C5307 + (C32953 + C32954) * C5228 -
            (C30813 * C26830 + C139588 * C27250 + C30812 * C6441 +
             C30408 * C6921) *
                C5308 -
            (C30813 * C26904 + C139588 * C27320 + C30812 * C6527 +
             C30408 * C7001) *
                C139377) *
               C139575) *
              C139442 * C139300 * C1763)) /
            (p * q * std::sqrt(p + q));
    d2eezz[37] +=
        (-std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1767 + C139588 * C2376) *
                C244 +
            (C30812 * C245 + C30408 * C719 + C30813 * C1965 + C139588 * C2591) *
                C139339) *
               C13591 +
           ((C30840 + C30839) * C244 + (C31013 + C31014) * C139339) * C139575) *
              C139442 * C5909 -
          (((C31967 + C31968) * C139339 + (C31744 + C31743) * C244) * C139575 +
           ((C30813 * C4443 + C139588 * C5133 + C30812 * C1029 +
             C30408 * C1661) *
                C139339 +
            (C30813 * C4223 + C139588 * C4899 + C30812 * C831 +
             C30408 * C1440) *
                C244) *
               C13591) *
              C139442 * C5910 +
          (((C30812 * C832 + C30408 * C1443 + C30813 * C8754 +
             C139588 * C9234) *
                C244 +
            (C30812 * C1030 + C30408 * C1662 + C30813 * C8920 +
             C139588 * C9389) *
                C139339) *
               C13591 +
           ((C31748 + C31747) * C244 + (C31969 + C31970) * C139339) * C139575) *
              C139442 * C5911 -
          (((C30813 * C24354 + C139588 * C24980 + C30812 * C6037 +
             C30408 * C6364) *
                C139339 +
            (C30813 * C24128 + C139588 * C24764 + C30812 * C5915 +
             C30408 * C6255) *
                C244) *
               C139575 +
           ((C30813 * C24355 + C139588 * C24979 + C30812 * C6038 +
             C30408 * C6365) *
                C139339 +
            (C30813 * C24129 + C139588 * C24765 + C30812 * C5916 +
             C30408 * C6256) *
                C244) *
               C13591) *
              C139442 * C5912) *
         C139300) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C30812 * C107 + C30408 * C555 + C30813 * C1767 +
              C139588 * C2376) *
                 C244 +
             (C30812 * C245 + C30408 * C719 + C30813 * C1965 +
              C139588 * C2591) *
                 C139339) *
                C13591 +
            ((C30840 + C30839) * C244 + (C31013 + C31014) * C139339) *
                C139575) *
               C139442 * C5228 -
           (((C31967 + C31968) * C139339 + (C31744 + C31743) * C244) * C139575 +
            ((C30813 * C4443 + C139588 * C5133 + C30812 * C1029 +
              C30408 * C1661) *
                 C139339 +
             (C30813 * C4223 + C139588 * C4899 + C30812 * C831 +
              C30408 * C1440) *
                 C244) *
                C13591) *
               C139442 * C139377) *
              C5225 +
          ((((C31743 + C31744) * C244 + (C31968 + C31967) * C139339) * C13591 +
            ((C33762 + C33761) * C244 + (C33971 + C33972) * C139339) *
                C139575) *
               C139442 * C139377 -
           (((C31015 + C31016) * C139339 + (C30844 + C30843) * C244) * C139575 +
            ((C31014 + C31013) * C139339 + (C30839 + C30840) * C244) * C13591) *
               C139442 * C5228) *
              C5226 +
          ((((C30843 + C30844) * C244 + (C31016 + C31015) * C139339) * C13591 +
            ((C30848 + C30847) * C244 + (C31017 + C31018) * C139339) *
                C139575) *
               C139442 * C5228 -
           (((C30813 * C4446 + C139588 * C5136 + C30812 * C1033 +
              C30408 * C1665) *
                 C139339 +
             (C30813 * C4226 + C139588 * C4902 + C30812 * C830 +
              C30408 * C1442) *
                 C244) *
                C139575 +
            ((C33972 + C33971) * C139339 + (C33761 + C33762) * C244) * C13591) *
               C139442 * C139377) *
              C5227)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1767 + C139588 * C2376) *
                C1960 +
            (C30812 * C245 + C30408 * C719 + C30813 * C1965 + C139588 * C2591) *
                C1761 -
            (C30813 * C1768 + C139588 * C2379 + C30812 * C1767 +
             C30408 * C2376) *
                C1961 -
            (C30813 * C1966 + C139588 * C2592 + C30812 * C1965 +
             C30408 * C2591) *
                C1762 +
            (C30812 * C1768 + C30408 * C2379 + C30813 * C10815 +
             C139588 * C11155) *
                C1962 +
            (C30812 * C1966 + C30408 * C2592 + C30813 * C10937 +
             C139588 * C11262) *
                C1763) *
               C13591 +
           ((C30840 + C30839) * C1960 + (C31013 + C31014) * C1761 -
            (C32838 + C32837) * C1961 - (C33061 + C33062) * C1762 +
            (C32842 + C32841) * C1962 + (C33063 + C33064) * C1763) *
               C139575) *
              C139442 * C5228 +
          (((C30812 * C4223 + C30408 * C4899 + C30813 * C6442 +
             C139588 * C6922) *
                C1961 -
            ((C30813 * C4443 + C139588 * C5133 + C30812 * C1029 +
              C30408 * C1661) *
                 C1761 +
             (C30813 * C4223 + C139588 * C4899 + C30812 * C831 +
              C30408 * C1440) *
                 C1960) +
            (C30812 * C4443 + C30408 * C5133 + C30813 * C6608 +
             C139588 * C7077) *
                C1762 -
            (C30813 * C26831 + C139588 * C27251 + C30812 * C6442 +
             C30408 * C6922) *
                C1962 -
            (C30813 * C26975 + C139588 * C27388 + C30812 * C6608 +
             C30408 * C7077) *
                C1763) *
               C13591 +
           ((C35893 + C35892) * C1961 -
            ((C31967 + C31968) * C1761 + (C31744 + C31743) * C1960) +
            (C36166 + C36167) * C1762 -
            (C30813 * C26830 + C139588 * C27250 + C30812 * C6441 +
             C30408 * C6921) *
                C1962 -
            (C30813 * C26974 + C139588 * C27389 + C30812 * C6607 +
             C30408 * C7078) *
                C1763) *
               C139575) *
              C139442 * C139377) *
         C139300) /
            (p * q * std::sqrt(p + q));
    d2eexx[38] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139575 * C114) *
                 C137108 +
             (C13595 * C116 + C13591 * C125 + C13596 * C117 + C139575 * C126) *
                 C139552 -
             (C13596 * C109 + C139575 * C115 + C13595 * C108 + C13591 * C114) *
                 C137101 -
             (C13596 * C118 + C139575 * C127 + C13595 * C117 + C13591 * C126) *
                 C139305) *
                C139442 * C30408 +
            ((C32101 + C32102) * C137108 + (C32103 + C32104) * C139552 -
             (C32105 + C32106) * C137101 - (C32107 + C32108) * C139305) *
                C139442 * C139588) *
               C139561 +
           (((C32106 + C32105) * C137101 -
             ((C32104 + C32103) * C139552 + (C32102 + C32101) * C137108) +
             (C32108 + C32107) * C139305) *
                C139442 * C30408 +
            ((C32109 + C32110) * C137101 -
             ((C32111 + C32112) * C139552 + (C32113 + C32114) * C137108) +
             (C32115 + C32116) * C139305) *
                C139442 * C139588) *
               C139403) *
              C5228 +
          ((((C14341 + C14340) * C137101 -
             ((C14339 + C14338) * C139552 + (C14337 + C14336) * C137108) +
             (C14343 + C14342) * C139305) *
                C139442 * C30408 +
            ((C18257 + C18258) * C137101 -
             ((C18259 + C18260) * C139552 + (C18261 + C18262) * C137108) +
             (C18263 + C18264) * C139305) *
                C139442 * C139588) *
               C139561 +
           (((C18262 + C18261) * C137108 + (C18260 + C18259) * C139552 -
             (C18258 + C18257) * C137101 - (C18264 + C18263) * C139305) *
                C139442 * C30408 +
            ((C21095 + C21096) * C137108 + (C21097 + C21098) * C139552 -
             (C13596 * C6440 + C139575 * C6446 + C13595 * C6441 +
              C13591 * C6447) *
                 C137101 -
             (C13596 * C6443 + C139575 * C6449 + C13595 * C6444 +
              C13591 * C6450) *
                 C139305) *
                C139442 * C139588) *
               C139403) *
              C139377)) /
        (p * q * std::sqrt(p + q));
    d2eexy[38] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139575 * C114) *
                 C5307 +
             (C13595 * C182 + C13591 * C188 + C13596 * C183 + C139575 * C189) *
                 C5228 -
             (C14337 + C14336) * C5308 - (C14466 + C14467) * C139377) *
                C139442 * C30408 +
            ((C32101 + C32102) * C5307 + (C32231 + C32232) * C5228 -
             (C18261 + C18262) * C5308 - (C18404 + C18403) * C139377) *
                C139442 * C139588) *
               C139552 +
           (((C14341 + C14340) * C5308 -
             ((C13596 * C184 + C139575 * C190 + C13595 * C183 + C13591 * C189) *
                  C5228 +
              (C13596 * C109 + C139575 * C115 + C13595 * C108 + C13591 * C114) *
                  C5307) +
             (C14470 + C14471) * C139377) *
                C139442 * C30408 +
            ((C18257 + C18258) * C5308 -
             ((C32233 + C32234) * C5228 + (C32105 + C32106) * C5307) +
             (C18406 + C18405) * C139377) *
                C139442 * C139588) *
               C139305) *
              C139561 +
          ((((C18262 + C18261) * C5308 -
             ((C32232 + C32231) * C5228 + (C32102 + C32101) * C5307) +
             (C18403 + C18404) * C139377) *
                C139442 * C30408 +
            ((C21095 + C21096) * C5308 -
             ((C32237 + C32238) * C5228 + (C32113 + C32114) * C5307) +
             (C21206 + C21205) * C139377) *
                C139442 * C139588) *
               C139552 +
           (((C32106 + C32105) * C5307 + (C32234 + C32233) * C5228 -
             (C18258 + C18257) * C5308 - (C18405 + C18406) * C139377) *
                C139442 * C30408 +
            ((C32109 + C32110) * C5307 + (C32235 + C32236) * C5228 -
             (C13596 * C6440 + C139575 * C6446 + C13595 * C6441 +
              C13591 * C6447) *
                 C5308 -
             (C13596 * C6526 + C139575 * C6529 + C13595 * C6527 +
              C13591 * C6530) *
                 C139377) *
                C139442 * C139588) *
               C139305) *
              C139403)) /
        (p * q * std::sqrt(p + q));
    d2eexz[38] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139575 * C114) *
                 C3607 +
             (C13595 * C245 + C13591 * C251 + C13596 * C246 + C139575 * C252) *
                 C139561 -
             (C32102 + C32101) * C3608 - (C32353 + C32354) * C139403) *
                C139442 * C30408 +
            ((C32101 + C32102) * C3607 + (C32354 + C32353) * C139561 -
             (C32113 + C32114) * C3608 - (C32356 + C32355) * C139403) *
                C139442 * C139588) *
               C5228 +
           (((C18262 + C18261) * C3608 -
             ((C14589 + C14588) * C139561 + (C14337 + C14336) * C3607) +
             (C18546 + C18545) * C139403) *
                C139442 * C30408 +
            ((C21095 + C21096) * C3608 -
             ((C18545 + C18546) * C139561 + (C18261 + C18262) * C3607) +
             (C21313 + C21314) * C139403) *
                C139442 * C139588) *
               C139377) *
              C139552 +
          ((((C32106 + C32105) * C3608 -
             ((C13596 * C247 + C139575 * C253 + C13595 * C246 + C13591 * C252) *
                  C139561 +
              (C13596 * C109 + C139575 * C115 + C13595 * C108 + C13591 * C114) *
                  C3607) +
             (C32357 + C32358) * C139403) *
                C139442 * C30408 +
            ((C32109 + C32110) * C3608 -
             ((C32358 + C32357) * C139561 + (C32105 + C32106) * C3607) +
             (C32360 + C32359) * C139403) *
                C139442 * C139588) *
               C5228 +
           (((C14341 + C14340) * C3607 + (C14592 + C14593) * C139561 -
             (C18258 + C18257) * C3608 - (C18548 + C18547) * C139403) *
                C139442 * C30408 +
            ((C18257 + C18258) * C3607 + (C18547 + C18548) * C139561 -
             (C13596 * C6440 + C139575 * C6446 + C13595 * C6441 +
              C13591 * C6447) *
                 C3608 -
             (C13596 * C6606 + C139575 * C6609 + C13595 * C6607 +
              C13591 * C6610) *
                 C139403) *
                C139442 * C139588) *
               C139377) *
              C139305)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[38] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C307 * C107 + C139442 * C308) * C137108 +
              (C307 * C116 + C139442 * C314) * C139552 - C337 * C137101 -
              C338 * C139305) *
                 C30408 +
             (C39974 + C39975 - C39976 - C39977) * C139588) *
                C13591 +
            ((C337 * C137108 + C338 * C139552 - C339 * C137101 -
              C340 * C139305) *
                 C30408 +
             (C39978 + C39979 - C39980 - C39981) * C139588) *
                C139575) *
               C139561 +
           (((C39976 - (C39975 + C39974) + C39977) * C30408 +
             (C2090 * C137101 - (C32485 * C139552 + C32486 * C137108) +
              C2091 * C139305) *
                 C139588) *
                C13591 +
            ((C39980 - (C39979 + C39978) + C39981) * C30408 +
             (C2092 * C137101 - (C2091 * C139552 + C2090 * C137108) +
              C2093 * C139305) *
                 C139588) *
                C139575) *
               C139403) *
              C5228 +
          ((((C1150 * C137101 -
              ((C307 * C841 + C139442 * C1125) * C139552 +
               (C307 * C831 + C139442 * C1118) * C137108) +
              C1151 * C139305) *
                 C30408 +
             (C39982 - (C39983 + C39984) + C39985) * C139588) *
                C13591 +
            ((C1152 * C137101 - (C1151 * C139552 + C1150 * C137108) +
              C1153 * C139305) *
                 C30408 +
             (C39986 - (C39987 + C39988) + C39989) * C139588) *
                C139575) *
               C139561 +
           (((C39984 + C39983 - C39982 - C39985) * C30408 +
             (C38054 * C137108 + C38055 * C139552 - C35460 * C137101 -
              C35461 * C139305) *
                 C139588) *
                C13591 +
            ((C39988 + C39987 - C39986 - C39989) * C30408 +
             (C35460 * C137108 + C35461 * C139552 -
              (C307 * C6440 + C139442 * C6686) * C137101 -
              (C307 * C6443 + C139442 * C6689) * C139305) *
                 C139588) *
                C139575) *
               C139403) *
              C139377)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[38] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C307 * C107 + C139442 * C308) * C5307 +
              (C307 * C182 + C139442 * C394) * C5228 -
              (C307 * C831 + C139442 * C1118) * C5308 -
              (C307 * C939 + C139442 * C1231) * C139377) *
                 C30408 +
             (C38156 + C38157 - C38158 - C38159) * C139588) *
                C13591 +
            ((C5532 + C5533 - C5534 - C5535) * C30408 + C40124 * C139588) *
                C139575) *
               C139552 +
           (((C5534 - (C5533 + C5532) + C5535) * C30408 + C40125 * C139588) *
                C13591 +
            ((C5538 - (C5537 + C5536) + C5539) * C30408 +
             (C8275 - (C8276 + C8277) + C8278) * C139588) *
                C139575) *
               C139305) *
              C139561 +
          ((((C38158 - (C38157 + C38156) + C38159) * C30408 +
             (C38160 - (C38161 + C38162) + C38170) * C139588) *
                C13591 +
            (C40125 * C30408 +
             (C38165 - (C38166 + C38167) + C38168) * C139588) *
                C139575) *
               C139552 +
           ((C40124 * C30408 + (C38167 + C38166 - C38165 - C38168) * C139588) *
                C13591 +
            ((C8277 + C8276 - C8275 - C8278) * C30408 +
             (C2092 * C5307 + C2191 * C5228 -
              (C307 * C6440 + C139442 * C6686) * C5308 -
              (C307 * C6526 + C139442 * C6768) * C139377) *
                 C139588) *
                C139575) *
               C139305) *
              C139403)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[38] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((((C307 * C107 + C139442 * C308) * C3607 +
                        (C307 * C245 + C139442 * C474) * C139561 -
                        C32483 * C3608 - C32719 * C139403) *
                           C30408 +
                       (C32483 * C3607 + C32719 * C139561 - C32486 * C3608 -
                        C32720 * C139403) *
                           C139588) *
                          C13591 +
                      ((C3851 + C3852 - C3853 - C3854) * C30408 +
                       (C34598 + C34599 - C34600 - C34601) * C139588) *
                          C139575) *
                         C5228 +
                     (((C35459 * C3608 -
                        ((C307 * C1029 + C139442 * C1339) * C139561 +
                         (C307 * C831 + C139442 * C1118) * C3607) +
                        C35751 * C139403) *
                           C30408 +
                       (C38054 * C3608 - (C35751 * C139561 + C35459 * C3607) +
                        C38271 * C139403) *
                           C139588) *
                          C13591 +
                      ((C4788 - (C4789 + C4790) + C4800) * C30408 +
                       (C35746 - (C35747 + C35748) + C35753) * C139588) *
                          C139575) *
                         C139377) *
                        C139552 +
                    ((((C3853 - (C3852 + C3851) + C3854) * C30408 +
                       (C34600 - (C34599 + C34598) + C34601) * C139588) *
                          C13591 +
                      ((C3857 - (C3856 + C3855) + C3858) * C30408 +
                       (C34602 - (C34603 + C34604) + C34605) * C139588) *
                          C139575) *
                         C5228 +
                     (((C4790 + C4789 - C4788 - C4800) * C30408 +
                       (C35748 + C35747 - C35746 - C35753) * C139588) *
                          C13591 +
                      ((C4795 + C4794 - C4793 - C4801) * C30408 +
                       (C4568 * C3607 + C4799 * C139561 -
                        (C307 * C6440 + C139442 * C6686) * C3608 -
                        (C307 * C6606 + C139442 * C6845) * C139403) *
                           C139588) *
                          C139575) *
                         C139377) *
                        C139305)) /
                  (p * q * std::sqrt(p + q));
    d2eezx[38] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C30812 * C107 + C30408 * C555 + C30813 * C1767 +
              C139588 * C2376) *
                 C137108 +
             (C30812 * C116 + C30408 * C561 + C30813 * C1777 +
              C139588 * C2383) *
                 C139552 -
             (C30839 + C30840) * C137101 - (C30841 + C30842) * C139305) *
                C13591 +
            ((C30840 + C30839) * C137108 + (C30842 + C30841) * C139552 -
             (C30844 + C30843) * C137101 - (C30846 + C30845) * C139305) *
                C139575) *
               C139442 * C139561 +
           (((C32837 + C32838) * C137101 -
             ((C30813 * C1783 + C139588 * C2387 + C30812 * C1777 +
               C30408 * C2383) *
                  C139552 +
              (C30813 * C1768 + C139588 * C2379 + C30812 * C1767 +
               C30408 * C2376) *
                  C137108) +
             (C32839 + C32840) * C139305) *
                C13591 +
            ((C34713 + C34712) * C137101 -
             ((C32840 + C32839) * C139552 + (C32838 + C32837) * C137108) +
             (C34715 + C34714) * C139305) *
                C139575) *
               C139442 * C139403) *
              C5228 +
          ((((C31743 + C31744) * C137101 -
             ((C30813 * C4230 + C139588 * C4903 + C30812 * C841 +
               C30408 * C1447) *
                  C139552 +
              (C30813 * C4223 + C139588 * C4899 + C30812 * C831 +
               C30408 * C1440) *
                  C137108) +
             (C31745 + C31746) * C139305) *
                C13591 +
            ((C33762 + C33761) * C137101 -
             ((C31746 + C31745) * C139552 + (C31744 + C31743) * C137108) +
             (C33764 + C33763) * C139305) *
                C139575) *
               C139442 * C139561 +
           (((C30812 * C4223 + C30408 * C4899 + C30813 * C6442 +
              C139588 * C6922) *
                 C137108 +
             (C30812 * C4230 + C30408 * C4903 + C30813 * C6445 +
              C139588 * C6925) *
                 C139552 -
             (C35892 + C35893) * C137101 - (C35894 + C35895) * C139305) *
                C13591 +
            ((C35893 + C35892) * C137108 + (C35895 + C35894) * C139552 -
             (C30813 * C6440 + C139588 * C6920 + C30812 * C4225 +
              C30408 * C4901) *
                 C137101 -
             (C30813 * C6443 + C139588 * C6923 + C30812 * C4232 +
              C30408 * C4905) *
                 C139305) *
                C139575) *
               C139442 * C139403) *
              C139377)) /
        (p * q * std::sqrt(p + q));
    d2eezy[38] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C30812 * C107 + C30408 * C555 + C30813 * C1767 +
              C139588 * C2376) *
                 C5307 +
             (C30812 * C182 + C30408 * C641 + C30813 * C1873 +
              C139588 * C2492) *
                 C5228 -
             (C30813 * C4223 + C139588 * C4899 + C30812 * C831 +
              C30408 * C1440) *
                 C5308 -
             (C30813 * C4337 + C139588 * C5017 + C30812 * C939 +
              C30408 * C1553) *
                 C139377) *
                C13591 +
            ((C30840 + C30839) * C5307 + (C30929 + C30930) * C5228 -
             (C31744 + C31743) * C5308 - (C31857 + C31858) * C139377) *
                C139575) *
               C139442 * C139552 +
           (((C31743 + C31744) * C5308 -
             ((C30930 + C30929) * C5228 + (C30839 + C30840) * C5307) +
             (C31858 + C31857) * C139377) *
                C13591 +
            ((C33762 + C33761) * C5308 -
             ((C30931 + C30932) * C5228 + (C30844 + C30843) * C5307) +
             (C33867 + C33868) * C139377) *
                C139575) *
               C139442 * C139305) *
              C139561 +
          ((((C30812 * C4223 + C30408 * C4899 + C30813 * C6442 +
              C139588 * C6922) *
                 C5308 -
             ((C30813 * C1874 + C139588 * C2493 + C30812 * C1873 +
               C30408 * C2492) *
                  C5228 +
              (C30813 * C1768 + C139588 * C2379 + C30812 * C1767 +
               C30408 * C2376) *
                  C5307) +
             (C30812 * C4337 + C30408 * C5017 + C30813 * C6528 +
              C139588 * C7000) *
                 C139377) *
                C13591 +
            ((C35893 + C35892) * C5308 -
             ((C32952 + C32951) * C5228 + (C32838 + C32837) * C5307) +
             (C36030 + C36031) * C139377) *
                C139575) *
               C139442 * C139552 +
           (((C32837 + C32838) * C5307 + (C32951 + C32952) * C5228 -
             (C35892 + C35893) * C5308 - (C36031 + C36030) * C139377) *
                C13591 +
            ((C34713 + C34712) * C5307 + (C34818 + C34819) * C5228 -
             (C30813 * C6440 + C139588 * C6920 + C30812 * C4225 +
              C30408 * C4901) *
                 C5308 -
             (C30813 * C6526 + C139588 * C7002 + C30812 * C4339 +
              C30408 * C5019) *
                 C139377) *
                C139575) *
               C139442 * C139305) *
              C139403)) /
        (p * q * std::sqrt(p + q));
    d2eezz[38] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C30812 * C107 + C30408 * C555 + C30813 * C1767 +
              C139588 * C2376) *
                 C3607 +
             (C30812 * C245 + C30408 * C719 + C30813 * C1965 +
              C139588 * C2591) *
                 C139561 -
             (C30813 * C1768 + C139588 * C2379 + C30812 * C1767 +
              C30408 * C2376) *
                 C3608 -
             (C30813 * C1966 + C139588 * C2592 + C30812 * C1965 +
              C30408 * C2591) *
                 C139403) *
                C13591 +
            ((C30840 + C30839) * C3607 + (C31013 + C31014) * C139561 -
             (C32838 + C32837) * C3608 - (C33061 + C33062) * C139403) *
                C139575) *
               C139442 * C5228 +
           (((C30812 * C4223 + C30408 * C4899 + C30813 * C6442 +
              C139588 * C6922) *
                 C3608 -
             ((C30813 * C4443 + C139588 * C5133 + C30812 * C1029 +
               C30408 * C1661) *
                  C139561 +
              (C30813 * C4223 + C139588 * C4899 + C30812 * C831 +
               C30408 * C1440) *
                  C3607) +
             (C30812 * C4443 + C30408 * C5133 + C30813 * C6608 +
              C139588 * C7077) *
                 C139403) *
                C13591 +
            ((C35893 + C35892) * C3608 -
             ((C31967 + C31968) * C139561 + (C31744 + C31743) * C3607) +
             (C36166 + C36167) * C139403) *
                C139575) *
               C139442 * C139377) *
              C139552 +
          ((((C32837 + C32838) * C3608 -
             ((C31014 + C31013) * C139561 + (C30839 + C30840) * C3607) +
             (C33062 + C33061) * C139403) *
                C13591 +
            ((C34713 + C34712) * C3608 -
             ((C31015 + C31016) * C139561 + (C30844 + C30843) * C3607) +
             (C34922 + C34923) * C139403) *
                C139575) *
               C139442 * C5228 +
           (((C31743 + C31744) * C3607 + (C31968 + C31967) * C139561 -
             (C35892 + C35893) * C3608 - (C36167 + C36166) * C139403) *
                C13591 +
            ((C33762 + C33761) * C3607 + (C33971 + C33972) * C139561 -
             (C30813 * C6440 + C139588 * C6920 + C30812 * C4225 +
              C30408 * C4901) *
                 C3608 -
             (C30813 * C6606 + C139588 * C7079 + C30812 * C4445 +
              C30408 * C5135) *
                 C139403) *
                C139575) *
               C139442 * C139377) *
              C139305)) /
        (p * q * std::sqrt(p + q));
    d2eexx[39] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139575 * C114) *
                C5230 +
            (C13595 * C116 + C13591 * C125 + C13596 * C117 + C139575 * C126) *
                C5225 -
            (C13596 * C109 + C139575 * C115 + C13595 * C108 + C13591 * C114) *
                C5231 -
            (C13596 * C118 + C139575 * C127 + C13595 * C117 + C13591 * C126) *
                C5226 +
            (C13595 * C109 + C13591 * C115 + C13596 * C110 + C139575 * C119) *
                C5232 +
            (C13595 * C118 + C13591 * C127 + C13596 * C120 + C139575 * C128) *
                C5227) *
               C139442 * C30408 +
           ((C32101 + C32102) * C5230 + (C32103 + C32104) * C5225 -
            (C32105 + C32106) * C5231 - (C32107 + C32108) * C5226 +
            (C34079 + C34080) * C5232 + (C34081 + C34082) * C5227) *
               C139442 * C139588) *
              C139339 * C5228 +
          (((C14341 + C14340) * C5231 -
            ((C14339 + C14338) * C5225 + (C14337 + C14336) * C5230) +
            (C14343 + C14342) * C5226 - (C16359 + C16358) * C5232 -
            (C16361 + C16360) * C5227) *
               C139442 * C30408 +
           ((C18257 + C18258) * C5231 -
            ((C18259 + C18260) * C5225 + (C18261 + C18262) * C5230) +
            (C18263 + C18264) * C5226 -
            (C13596 * C4226 + C139575 * C4233 + C13595 * C4225 +
             C13591 * C4229) *
                C5232 -
            (C13596 * C4234 + C139575 * C4238 + C13595 * C4232 +
             C13591 * C4237) *
                C5227) *
               C139442 * C139588) *
              C139339 * C139377)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139575 * C114) *
                C5913 +
            (C13595 * C116 + C13591 * C125 + C13596 * C117 + C139575 * C126) *
                C139300) *
               C139442 * C30408 +
           ((C32101 + C32102) * C5913 + (C32103 + C32104) * C139300) * C139442 *
               C139588) *
              C139339 * C5909 -
          (((C18259 + C18260) * C139300 + (C18261 + C18262) * C5913) * C139442 *
               C139588 +
           ((C14339 + C14338) * C139300 + (C14337 + C14336) * C5913) * C139442 *
               C30408) *
              C139339 * C5910 +
          (((C14349 + C14348) * C5913 + (C14347 + C14346) * C139300) * C139442 *
               C30408 +
           ((C24145 + C24146) * C5913 + (C24147 + C24148) * C139300) * C139442 *
               C139588) *
              C139339 * C5911 -
          (((C13596 * C24130 + C139575 * C24134 + C13595 * C24131 +
             C13591 * C24135) *
                C139300 +
            (C13596 * C24128 + C139575 * C24132 + C13595 * C24129 +
             C13591 * C24133) *
                C5913) *
               C139442 * C139588 +
           ((C20390 + C20389) * C139300 + (C20388 + C20387) * C5913) * C139442 *
               C30408) *
              C139339 * C5912)) /
            (p * q * std::sqrt(p + q));
    d2eexy[39] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139575 * C114) *
                C5307 +
            (C13595 * C182 + C13591 * C188 + C13596 * C183 + C139575 * C189) *
                C5228 -
            (C14337 + C14336) * C5308 - (C14466 + C14467) * C139377) *
               C139442 * C30408 +
           ((C32101 + C32102) * C5307 + (C32231 + C32232) * C5228 -
            (C18261 + C18262) * C5308 - (C18404 + C18403) * C139377) *
               C139442 * C139588) *
              C5225 +
          (((C14341 + C14340) * C5308 -
            ((C13596 * C184 + C139575 * C190 + C13595 * C183 + C13591 * C189) *
                 C5228 +
             (C13596 * C109 + C139575 * C115 + C13595 * C108 + C13591 * C114) *
                 C5307) +
            (C14470 + C14471) * C139377) *
               C139442 * C30408 +
           ((C18257 + C18258) * C5308 -
            ((C32233 + C32234) * C5228 + (C32105 + C32106) * C5307) +
            (C18406 + C18405) * C139377) *
               C139442 * C139588) *
              C5226 +
          (((C13595 * C109 + C13591 * C115 + C13596 * C110 + C139575 * C119) *
                C5307 +
            (C13595 * C184 + C13591 * C190 + C13596 * C185 + C139575 * C191) *
                C5228 -
            (C16359 + C16358) * C5308 - (C16464 + C16465) * C139377) *
               C139442 * C30408 +
           ((C34079 + C34080) * C5307 + (C34185 + C34186) * C5228 -
            (C13596 * C4226 + C139575 * C4233 + C13595 * C4225 +
             C13591 * C4229) *
                C5308 -
            (C13596 * C4340 + C139575 * C4344 + C13595 * C4339 +
             C13591 * C4343) *
                C139377) *
               C139442 * C139588) *
              C5227) *
         C139339) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139575 * C114) *
               C5976 +
           (C13595 * C182 + C13591 * C188 + C13596 * C183 + C139575 * C189) *
               C5909 -
           (C14337 + C14336) * C5977 - (C14466 + C14467) * C5910 +
           (C14349 + C14348) * C5978 + (C14468 + C14469) * C5911 -
           (C20388 + C20387) * C5979 - (C20465 + C20466) * C5912) *
              C139442 * C30408 +
          ((C32101 + C32102) * C5976 + (C32231 + C32232) * C5909 -
           (C18261 + C18262) * C5977 - (C18404 + C18403) * C5910 +
           (C24145 + C24146) * C5978 + (C24256 + C24255) * C5911 -
           (C13596 * C24128 + C139575 * C24132 + C13595 * C24129 +
            C13591 * C24133) *
               C5979 -
           (C13596 * C24246 + C139575 * C24248 + C13595 * C24247 +
            C13591 * C24249) *
               C5912) *
              C139442 * C139588) *
         C139300 * C139339) /
            (p * q * std::sqrt(p + q));
    d2eexz[39] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139575 * C114) *
                 C244 +
             (C13595 * C245 + C13591 * C251 + C13596 * C246 + C139575 * C252) *
                 C139339) *
                C139442 * C30408 +
            ((C32101 + C32102) * C244 + (C32354 + C32353) * C139339) * C139442 *
                C139588) *
               C5228 -
           (((C18545 + C18546) * C139339 + (C18261 + C18262) * C244) * C139442 *
                C139588 +
            ((C14589 + C14588) * C139339 + (C14337 + C14336) * C244) * C139442 *
                C30408) *
               C139377) *
              C5225 +
          ((((C14341 + C14340) * C244 + (C14592 + C14593) * C139339) * C139442 *
                C30408 +
            ((C18257 + C18258) * C244 + (C18547 + C18548) * C139339) * C139442 *
                C139588) *
               C139377 -
           (((C32358 + C32357) * C139339 + (C32105 + C32106) * C244) * C139442 *
                C139588 +
            ((C13596 * C247 + C139575 * C253 + C13595 * C246 + C13591 * C252) *
                 C139339 +
             (C13596 * C109 + C139575 * C115 + C13595 * C108 + C13591 * C114) *
                 C244) *
                C139442 * C30408) *
               C5228) *
              C5226 +
          ((((C13595 * C109 + C13591 * C115 + C13596 * C110 + C139575 * C119) *
                 C244 +
             (C13595 * C247 + C13591 * C253 + C13596 * C248 + C139575 * C254) *
                 C139339) *
                C139442 * C30408 +
            ((C34079 + C34080) * C244 + (C34290 + C34289) * C139339) * C139442 *
                C139588) *
               C5228 -
           (((C13596 * C4446 + C139575 * C4450 + C13595 * C4445 +
              C13591 * C4449) *
                 C139339 +
             (C13596 * C4226 + C139575 * C4233 + C13595 * C4225 +
              C13591 * C4229) *
                 C244) *
                C139442 * C139588 +
            ((C16569 + C16568) * C139339 + (C16359 + C16358) * C244) * C139442 *
                C30408) *
               C139377) *
              C5227)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139575 * C114) *
                C244 +
            (C13595 * C245 + C13591 * C251 + C13596 * C246 + C139575 * C252) *
                C139339) *
               C139442 * C30408 +
           ((C32101 + C32102) * C244 + (C32354 + C32353) * C139339) * C139442 *
               C139588) *
              C5909 -
          (((C18545 + C18546) * C139339 + (C18261 + C18262) * C244) * C139442 *
               C139588 +
           ((C14589 + C14588) * C139339 + (C14337 + C14336) * C244) * C139442 *
               C30408) *
              C5910 +
          (((C14349 + C14348) * C244 + (C14591 + C14590) * C139339) * C139442 *
               C30408 +
           ((C24145 + C24146) * C244 + (C24363 + C24364) * C139339) * C139442 *
               C139588) *
              C5911 -
          (((C13596 * C24354 + C139575 * C24356 + C13595 * C24355 +
             C13591 * C24357) *
                C139339 +
            (C13596 * C24128 + C139575 * C24132 + C13595 * C24129 +
             C13591 * C24133) *
                C244) *
               C139442 * C139588 +
           ((C20542 + C20541) * C139339 + (C20388 + C20387) * C244) * C139442 *
               C30408) *
              C5912) *
         C139300) /
            (p * q * std::sqrt(p + q));
    d2eeyx[39] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139442 * C308) * C5230 +
             (C307 * C116 + C139442 * C314) * C5225 - C337 * C5231 -
             C338 * C5226 + C339 * C5232 + C340 * C5227) *
                C30408 +
            (C32483 * C5230 + C32484 * C5225 - C2086 * C5231 - C2087 * C5226 +
             C2088 * C5232 + C2089 * C5227) *
                C139588) *
               C13591 +
           ((C337 * C5230 + C338 * C5225 - C339 * C5231 - C340 * C5226 +
             C341 * C5232 + C342 * C5227) *
                C30408 +
            (C2086 * C5230 + C2087 * C5225 - C2088 * C5231 - C2089 * C5226 +
             C3692 * C5232 + C3693 * C5227) *
                C139588) *
               C139575) *
              C139339 * C5228 +
          (((C1150 * C5231 -
             ((C307 * C841 + C139442 * C1125) * C5225 +
              (C307 * C831 + C139442 * C1118) * C5230) +
             C1151 * C5226 - C1152 * C5232 - C1153 * C5227) *
                C30408 +
            (C4566 * C5231 - (C35458 * C5225 + C35459 * C5230) + C4567 * C5226 -
             C4568 * C5232 - C4569 * C5227) *
                C139588) *
               C13591 +
           ((C1152 * C5231 - (C1151 * C5225 + C1150 * C5230) + C1153 * C5226 -
             C2944 * C5232 - C2945 * C5227) *
                C30408 +
            (C4568 * C5231 - (C4567 * C5225 + C4566 * C5230) + C4569 * C5226 -
             (C307 * C4226 + C139442 * C4552) * C5232 -
             (C307 * C4234 + C139442 * C4556) * C5227) *
                C139588) *
               C139575) *
              C139339 * C139377)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139442 * C308) * C5913 +
             (C307 * C116 + C139442 * C314) * C139300) *
                C30408 +
            (C32483 * C5913 + C32484 * C139300) * C139588) *
               C13591 +
           ((C337 * C5913 + C338 * C139300) * C30408 +
            (C2086 * C5913 + C2087 * C139300) * C139588) *
               C139575) *
              C139339 * C5909 -
          (((C4567 * C139300 + C4566 * C5913) * C139588 +
            (C1151 * C139300 + C1150 * C5913) * C30408) *
               C139575 +
           ((C35458 * C139300 + C35459 * C5913) * C139588 +
            ((C307 * C841 + C139442 * C1125) * C139300 +
             (C307 * C831 + C139442 * C1118) * C5913) *
                C30408) *
               C13591) *
              C139339 * C5910 +
          ((((C307 * C832 + C139442 * C1121) * C5913 +
             (C307 * C847 + C139442 * C1129) * C139300) *
                C30408 +
            ((C307 * C8754 + C139442 * C9000) * C5913 +
             (C307 * C8757 + C139442 * C9003) * C139300) *
                C139588) *
               C13591 +
           ((C1154 * C5913 + C1155 * C139300) * C30408 +
            (C31415 * C5913 + C31416 * C139300) * C139588) *
               C139575) *
              C139339 * C5911 -
          ((((C307 * C24130 + C139442 * C24464) * C139300 +
             (C307 * C24128 + C139442 * C24462) * C5913) *
                C139588 +
            ((C307 * C5918 + C139442 * C6096) * C139300 +
             (C307 * C5915 + C139442 * C6093) * C5913) *
                C30408) *
               C139575 +
           (((C307 * C24131 + C139442 * C24465) * C139300 +
             (C307 * C24129 + C139442 * C24463) * C5913) *
                C139588 +
            ((C307 * C5919 + C139442 * C6097) * C139300 +
             (C307 * C5916 + C139442 * C6094) * C5913) *
                C30408) *
               C13591) *
              C139339 * C5912)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[39] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139442 * C308) * C5307 +
             (C307 * C182 + C139442 * C394) * C5228 -
             (C307 * C831 + C139442 * C1118) * C5308 -
             (C307 * C939 + C139442 * C1231) * C139377) *
                C30408 +
            (C32483 * C5307 + C32604 * C5228 - C35459 * C5308 -
             C35606 * C139377) *
                C139588) *
               C13591 +
           ((C5532 + C5533 - C5534 - C5535) * C30408 +
            (C8273 + C8272 - C8271 - C8274) * C139588) *
               C139575) *
              C5225 +
          (((C5534 - (C5533 + C5532) + C5535) * C30408 +
            (C8271 - (C8272 + C8273) + C8274) * C139588) *
               C13591 +
           ((C5538 - (C5537 + C5536) + C5539) * C30408 +
            (C8275 - (C8276 + C8277) + C8278) * C139588) *
               C139575) *
              C5226 +
          ((C5546 * C30408 + (C8277 + C8276 - C8275 - C8278) * C139588) *
               C13591 +
           ((C5542 + C5541 - C5540 - C5543) * C30408 +
            (C3692 * C5307 + C3773 * C5228 -
             (C307 * C4226 + C139442 * C4552) * C5308 -
             (C307 * C4340 + C139442 * C4670) * C139377) *
                C139588) *
               C139575) *
              C5227) *
         C139339) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139442 * C308) * C5976 +
            (C307 * C182 + C139442 * C394) * C5909 -
            (C307 * C831 + C139442 * C1118) * C5977 -
            (C307 * C939 + C139442 * C1231) * C5910 +
            (C307 * C832 + C139442 * C1121) * C5978 +
            (C307 * C940 + C139442 * C1232) * C5911 -
            (C307 * C5916 + C139442 * C6094) * C5979 -
            (C307 * C5982 + C139442 * C6148) * C5912) *
               C30408 +
           (C32483 * C5976 + C32604 * C5909 - C35459 * C5977 - C35606 * C5910 +
            (C307 * C8754 + C139442 * C9000) * C5978 +
            (C307 * C8840 + C139442 * C9078) * C5911 -
            (C307 * C24129 + C139442 * C24463) * C5979 -
            (C307 * C24247 + C139442 * C24564) * C5912) *
               C139588) *
              C13591 +
          ((C337 * C5976 + C413 * C5909 - C1150 * C5977 - C1256 * C5910 +
            C1154 * C5978 + C1257 * C5911 -
            (C307 * C5915 + C139442 * C6093) * C5979 -
            (C307 * C5981 + C139442 * C6149) * C5912) *
               C30408 +
           (C2086 * C5976 + C2188 * C5909 - C4566 * C5977 - C4682 * C5910 +
            C31415 * C5978 + C31522 * C5911 -
            (C307 * C24128 + C139442 * C24462) * C5979 -
            (C307 * C24246 + C139442 * C24565) * C5912) *
               C139588) *
              C139575) *
         C139300 * C139339) /
            (p * q * std::sqrt(p + q));
    d2eeyz[39] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C307 * C107 + C139442 * C308) * C244 +
              (C307 * C245 + C139442 * C474) * C139339) *
                 C30408 +
             (C32483 * C244 + C32719 * C139339) * C139588) *
                C13591 +
            ((C481 + C497) * C30408 + (C30741 + C30742) * C139588) * C139575) *
               C5228 -
           (((C31622 + C31623) * C139588 + (C1363 + C1351) * C30408) * C139575 +
            ((C35751 * C139339 + C35459 * C244) * C139588 +
             ((C307 * C1029 + C139442 * C1339) * C139339 +
              (C307 * C831 + C139442 * C1118) * C244) *
                 C30408) *
                C13591) *
               C139377) *
              C5225 +
          ((((C1351 + C1363) * C30408 + (C31623 + C31622) * C139588) * C13591 +
            ((C1348 + C1362) * C30408 + (C33653 + C33654) * C139588) *
                C139575) *
               C139377 -
           (((C30743 + C30744) * C139588 + (C498 + C484) * C30408) * C139575 +
            ((C30742 + C30741) * C139588 + (C497 + C481) * C30408) * C13591) *
               C5228) *
              C5226 +
          (((C501 * C30408 + (C30744 + C30743) * C139588) * C13591 +
            ((C489 + C499) * C30408 + (C30745 + C30746) * C139588) * C139575) *
               C5228 -
           ((((C307 * C4446 + C139442 * C4786) * C139339 +
              (C307 * C4226 + C139442 * C4552) * C244) *
                 C139588 +
             (C3121 + C3116) * C30408) *
                C139575 +
            ((C33654 + C33653) * C139588 + C3115 * C30408) * C13591) *
               C139377) *
              C5227)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139442 * C308) * C244 +
             (C307 * C245 + C139442 * C474) * C139339) *
                C30408 +
            (C32483 * C244 + C32719 * C139339) * C139588) *
               C13591 +
           ((C481 + C497) * C30408 + (C30741 + C30742) * C139588) * C139575) *
              C5909 -
          (((C31622 + C31623) * C139588 + (C1363 + C1351) * C30408) * C139575 +
           ((C35751 * C139339 + C35459 * C244) * C139588 +
            ((C307 * C1029 + C139442 * C1339) * C139339 +
             (C307 * C831 + C139442 * C1118) * C244) *
                C30408) *
               C13591) *
              C5910 +
          ((((C307 * C832 + C139442 * C1121) * C244 +
             (C307 * C1030 + C139442 * C1340) * C139339) *
                C30408 +
            ((C307 * C8754 + C139442 * C9000) * C244 +
             (C307 * C8920 + C139442 * C9155) * C139339) *
                C139588) *
               C13591 +
           ((C1352 + C1364) * C30408 + (C31624 + C31628) * C139588) * C139575) *
              C5911 -
          ((((C307 * C24354 + C139442 * C24665) * C139339 +
             (C307 * C24128 + C139442 * C24462) * C244) *
                C139588 +
            ((C307 * C6037 + C139442 * C6202) * C139339 +
             (C307 * C5915 + C139442 * C6093) * C244) *
                C30408) *
               C139575 +
           (((C307 * C24355 + C139442 * C24664) * C139339 +
             (C307 * C24129 + C139442 * C24463) * C244) *
                C139588 +
            ((C307 * C6038 + C139442 * C6203) * C139339 +
             (C307 * C5916 + C139442 * C6094) * C244) *
                C30408) *
               C13591) *
              C5912) *
         C139300) /
            (p * q * std::sqrt(p + q));
    d2eezx[39] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1767 + C139588 * C2376) *
                C5230 +
            (C30812 * C116 + C30408 * C561 + C30813 * C1777 + C139588 * C2383) *
                C5225 -
            (C30839 + C30840) * C5231 - (C30841 + C30842) * C5226 +
            (C30843 + C30844) * C5232 + (C30845 + C30846) * C5227) *
               C13591 +
           ((C30840 + C30839) * C5230 + (C30842 + C30841) * C5225 -
            (C30844 + C30843) * C5231 - (C30846 + C30845) * C5226 +
            (C30848 + C30847) * C5232 + (C30850 + C30849) * C5227) *
               C139575) *
              C139442 * C139339 * C5228 +
          (((C31743 + C31744) * C5231 -
            ((C30813 * C4230 + C139588 * C4903 + C30812 * C841 +
              C30408 * C1447) *
                 C5225 +
             (C30813 * C4223 + C139588 * C4899 + C30812 * C831 +
              C30408 * C1440) *
                 C5230) +
            (C31745 + C31746) * C5226 - (C33761 + C33762) * C5232 -
            (C33763 + C33764) * C5227) *
               C13591 +
           ((C33762 + C33761) * C5231 -
            ((C31746 + C31745) * C5225 + (C31744 + C31743) * C5230) +
            (C33764 + C33763) * C5226 -
            (C30813 * C4226 + C139588 * C4902 + C30812 * C830 +
             C30408 * C1442) *
                C5232 -
            (C30813 * C4234 + C139588 * C4906 + C30812 * C843 +
             C30408 * C1450) *
                C5227) *
               C139575) *
              C139442 * C139339 * C139377)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1767 + C139588 * C2376) *
                C5913 +
            (C30812 * C116 + C30408 * C561 + C30813 * C1777 + C139588 * C2383) *
                C139300) *
               C13591 +
           ((C30840 + C30839) * C5913 + (C30842 + C30841) * C139300) *
               C139575) *
              C139442 * C139339 * C5909 -
          (((C31746 + C31745) * C139300 + (C31744 + C31743) * C5913) * C139575 +
           ((C30813 * C4230 + C139588 * C4903 + C30812 * C841 +
             C30408 * C1447) *
                C139300 +
            (C30813 * C4223 + C139588 * C4899 + C30812 * C831 +
             C30408 * C1440) *
                C5913) *
               C13591) *
              C139442 * C139339 * C5910 +
          (((C30812 * C832 + C30408 * C1443 + C30813 * C8754 +
             C139588 * C9234) *
                C5913 +
            (C30812 * C847 + C30408 * C1451 + C30813 * C8757 +
             C139588 * C9237) *
                C139300) *
               C13591 +
           ((C31748 + C31747) * C5913 + (C31750 + C31749) * C139300) *
               C139575) *
              C139442 * C139339 * C5911 -
          (((C30813 * C24130 + C139588 * C24766 + C30812 * C5918 +
             C30408 * C6258) *
                C139300 +
            (C30813 * C24128 + C139588 * C24764 + C30812 * C5915 +
             C30408 * C6255) *
                C5913) *
               C139575 +
           ((C30813 * C24131 + C139588 * C24767 + C30812 * C5919 +
             C30408 * C6259) *
                C139300 +
            (C30813 * C24129 + C139588 * C24765 + C30812 * C5916 +
             C30408 * C6256) *
                C5913) *
               C13591) *
              C139442 * C139339 * C5912)) /
            (p * q * std::sqrt(p + q));
    d2eezy[39] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1767 + C139588 * C2376) *
                C5307 +
            (C30812 * C182 + C30408 * C641 + C30813 * C1873 + C139588 * C2492) *
                C5228 -
            (C30813 * C4223 + C139588 * C4899 + C30812 * C831 +
             C30408 * C1440) *
                C5308 -
            (C30813 * C4337 + C139588 * C5017 + C30812 * C939 +
             C30408 * C1553) *
                C139377) *
               C13591 +
           ((C30840 + C30839) * C5307 + (C30929 + C30930) * C5228 -
            (C31744 + C31743) * C5308 - (C31857 + C31858) * C139377) *
               C139575) *
              C139442 * C5225 +
          (((C31743 + C31744) * C5308 -
            ((C30930 + C30929) * C5228 + (C30839 + C30840) * C5307) +
            (C31858 + C31857) * C139377) *
               C13591 +
           ((C33762 + C33761) * C5308 -
            ((C30931 + C30932) * C5228 + (C30844 + C30843) * C5307) +
            (C33867 + C33868) * C139377) *
               C139575) *
              C139442 * C5226 +
          (((C30843 + C30844) * C5307 + (C30932 + C30931) * C5228 -
            (C33761 + C33762) * C5308 - (C33868 + C33867) * C139377) *
               C13591 +
           ((C30848 + C30847) * C5307 + (C30933 + C30934) * C5228 -
            (C30813 * C4226 + C139588 * C4902 + C30812 * C830 +
             C30408 * C1442) *
                C5308 -
            (C30813 * C4340 + C139588 * C5020 + C30812 * C943 +
             C30408 * C1559) *
                C139377) *
               C139575) *
              C139442 * C5227) *
         C139339) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C30812 * C107 + C30408 * C555 + C30813 * C1767 + C139588 * C2376) *
               C5976 +
           (C30812 * C182 + C30408 * C641 + C30813 * C1873 + C139588 * C2492) *
               C5909 -
           (C30813 * C4223 + C139588 * C4899 + C30812 * C831 + C30408 * C1440) *
               C5977 -
           (C30813 * C4337 + C139588 * C5017 + C30812 * C939 + C30408 * C1553) *
               C5910 +
           (C30812 * C832 + C30408 * C1443 + C30813 * C8754 + C139588 * C9234) *
               C5978 +
           (C30812 * C940 + C30408 * C1554 + C30813 * C8840 + C139588 * C9312) *
               C5911 -
           (C30813 * C24129 + C139588 * C24765 + C30812 * C5916 +
            C30408 * C6256) *
               C5979 -
           (C30813 * C24247 + C139588 * C24876 + C30812 * C5982 +
            C30408 * C6310) *
               C5912) *
              C13591 +
          ((C30840 + C30839) * C5976 + (C30929 + C30930) * C5909 -
           (C31744 + C31743) * C5977 - (C31857 + C31858) * C5910 +
           (C31748 + C31747) * C5978 + (C31859 + C31860) * C5911 -
           (C30813 * C24128 + C139588 * C24764 + C30812 * C5915 +
            C30408 * C6255) *
               C5979 -
           (C30813 * C24246 + C139588 * C24877 + C30812 * C5981 +
            C30408 * C6311) *
               C5912) *
              C139575) *
         C139442 * C139300 * C139339) /
            (p * q * std::sqrt(p + q));
    d2eezz[39] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30812 * C107 + C30408 * C555 + C30813 * C1767 +
              C139588 * C2376) *
                 C244 +
             (C30812 * C245 + C30408 * C719 + C30813 * C1965 +
              C139588 * C2591) *
                 C139339) *
                C13591 +
            ((C30840 + C30839) * C244 + (C31013 + C31014) * C139339) *
                C139575) *
               C139442 * C5228 -
           (((C31967 + C31968) * C139339 + (C31744 + C31743) * C244) * C139575 +
            ((C30813 * C4443 + C139588 * C5133 + C30812 * C1029 +
              C30408 * C1661) *
                 C139339 +
             (C30813 * C4223 + C139588 * C4899 + C30812 * C831 +
              C30408 * C1440) *
                 C244) *
                C13591) *
               C139442 * C139377) *
              C5225 +
          ((((C31743 + C31744) * C244 + (C31968 + C31967) * C139339) * C13591 +
            ((C33762 + C33761) * C244 + (C33971 + C33972) * C139339) *
                C139575) *
               C139442 * C139377 -
           (((C31015 + C31016) * C139339 + (C30844 + C30843) * C244) * C139575 +
            ((C31014 + C31013) * C139339 + (C30839 + C30840) * C244) * C13591) *
               C139442 * C5228) *
              C5226 +
          ((((C30843 + C30844) * C244 + (C31016 + C31015) * C139339) * C13591 +
            ((C30848 + C30847) * C244 + (C31017 + C31018) * C139339) *
                C139575) *
               C139442 * C5228 -
           (((C30813 * C4446 + C139588 * C5136 + C30812 * C1033 +
              C30408 * C1665) *
                 C139339 +
             (C30813 * C4226 + C139588 * C4902 + C30812 * C830 +
              C30408 * C1442) *
                 C244) *
                C139575 +
            ((C33972 + C33971) * C139339 + (C33761 + C33762) * C244) * C13591) *
               C139442 * C139377) *
              C5227)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1767 + C139588 * C2376) *
                C244 +
            (C30812 * C245 + C30408 * C719 + C30813 * C1965 + C139588 * C2591) *
                C139339) *
               C13591 +
           ((C30840 + C30839) * C244 + (C31013 + C31014) * C139339) * C139575) *
              C139442 * C5909 -
          (((C31967 + C31968) * C139339 + (C31744 + C31743) * C244) * C139575 +
           ((C30813 * C4443 + C139588 * C5133 + C30812 * C1029 +
             C30408 * C1661) *
                C139339 +
            (C30813 * C4223 + C139588 * C4899 + C30812 * C831 +
             C30408 * C1440) *
                C244) *
               C13591) *
              C139442 * C5910 +
          (((C30812 * C832 + C30408 * C1443 + C30813 * C8754 +
             C139588 * C9234) *
                C244 +
            (C30812 * C1030 + C30408 * C1662 + C30813 * C8920 +
             C139588 * C9389) *
                C139339) *
               C13591 +
           ((C31748 + C31747) * C244 + (C31969 + C31970) * C139339) * C139575) *
              C139442 * C5911 -
          (((C30813 * C24354 + C139588 * C24980 + C30812 * C6037 +
             C30408 * C6364) *
                C139339 +
            (C30813 * C24128 + C139588 * C24764 + C30812 * C5915 +
             C30408 * C6255) *
                C244) *
               C139575 +
           ((C30813 * C24355 + C139588 * C24979 + C30812 * C6038 +
             C30408 * C6365) *
                C139339 +
            (C30813 * C24129 + C139588 * C24765 + C30812 * C5916 +
             C30408 * C6256) *
                C244) *
               C13591) *
              C139442 * C5912) *
         C139300) /
            (p * q * std::sqrt(p + q));
    d2eexx[40] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139575 * C114) *
                 C137108 +
             (C13595 * C116 + C13591 * C125 + C13596 * C117 + C139575 * C126) *
                 C139552 -
             (C13596 * C109 + C139575 * C115 + C13595 * C108 + C13591 * C114) *
                 C137101 -
             (C13596 * C118 + C139575 * C127 + C13595 * C117 + C13591 * C126) *
                 C139305) *
                C139442 * C30408 +
            ((C32101 + C32102) * C137108 + (C32103 + C32104) * C139552 -
             (C32105 + C32106) * C137101 - (C32107 + C32108) * C139305) *
                C139442 * C139588) *
               C9466 +
           (((C32106 + C32105) * C137101 -
             ((C32104 + C32103) * C139552 + (C32102 + C32101) * C137108) +
             (C32108 + C32107) * C139305) *
                C139442 * C30408 +
            ((C32109 + C32110) * C137101 -
             ((C32111 + C32112) * C139552 + (C32113 + C32114) * C137108) +
             (C32115 + C32116) * C139305) *
                C139442 * C139588) *
               C139403) *
              C139560 +
          ((((C14341 + C14340) * C137101 -
             ((C14339 + C14338) * C139552 + (C14337 + C14336) * C137108) +
             (C14343 + C14342) * C139305) *
                C139442 * C30408 +
            ((C18257 + C18258) * C137101 -
             ((C18259 + C18260) * C139552 + (C18261 + C18262) * C137108) +
             (C18263 + C18264) * C139305) *
                C139442 * C139588) *
               C9466 +
           (((C18262 + C18261) * C137108 + (C18260 + C18259) * C139552 -
             (C18258 + C18257) * C137101 - (C18264 + C18263) * C139305) *
                C139442 * C30408 +
            ((C21095 + C21096) * C137108 + (C21097 + C21098) * C139552 -
             (C13596 * C6440 + C139575 * C6446 + C13595 * C6441 +
              C13591 * C6447) *
                 C137101 -
             (C13596 * C6443 + C139575 * C6449 + C13595 * C6444 +
              C13591 * C6450) *
                 C139305) *
                C139442 * C139588) *
               C139403) *
              C139377)) /
        (p * q * std::sqrt(p + q));
    d2eexy[40] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139575 * C114) *
                 C2783 +
             (C13595 * C182 + C13591 * C188 + C13596 * C183 + C139575 * C189) *
                 C139560 -
             (C14337 + C14336) * C2784 - (C14466 + C14467) * C139377) *
                C139442 * C30408 +
            ((C32101 + C32102) * C2783 + (C32231 + C32232) * C139560 -
             (C18261 + C18262) * C2784 - (C18404 + C18403) * C139377) *
                C139442 * C139588) *
               C139552 +
           (((C14341 + C14340) * C2784 -
             ((C13596 * C184 + C139575 * C190 + C13595 * C183 + C13591 * C189) *
                  C139560 +
              (C13596 * C109 + C139575 * C115 + C13595 * C108 + C13591 * C114) *
                  C2783) +
             (C14470 + C14471) * C139377) *
                C139442 * C30408 +
            ((C18257 + C18258) * C2784 -
             ((C32233 + C32234) * C139560 + (C32105 + C32106) * C2783) +
             (C18406 + C18405) * C139377) *
                C139442 * C139588) *
               C139305) *
              C9466 +
          ((((C18262 + C18261) * C2784 -
             ((C32232 + C32231) * C139560 + (C32102 + C32101) * C2783) +
             (C18403 + C18404) * C139377) *
                C139442 * C30408 +
            ((C21095 + C21096) * C2784 -
             ((C32237 + C32238) * C139560 + (C32113 + C32114) * C2783) +
             (C21206 + C21205) * C139377) *
                C139442 * C139588) *
               C139552 +
           (((C32106 + C32105) * C2783 + (C32234 + C32233) * C139560 -
             (C18258 + C18257) * C2784 - (C18405 + C18406) * C139377) *
                C139442 * C30408 +
            ((C32109 + C32110) * C2783 + (C32235 + C32236) * C139560 -
             (C13596 * C6440 + C139575 * C6446 + C13595 * C6441 +
              C13591 * C6447) *
                 C2784 -
             (C13596 * C6526 + C139575 * C6529 + C13595 * C6527 +
              C13591 * C6530) *
                 C139377) *
                C139442 * C139588) *
               C139305) *
              C139403)) /
        (p * q * std::sqrt(p + q));
    d2eexz[40] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139575 * C114) *
                 C9616 +
             (C13595 * C245 + C13591 * C251 + C13596 * C246 + C139575 * C252) *
                 C9466 -
             (C32102 + C32101) * C9617 - (C32353 + C32354) * C139403) *
                C139442 * C30408 +
            ((C32101 + C32102) * C9616 + (C32354 + C32353) * C9466 -
             (C32113 + C32114) * C9617 - (C32356 + C32355) * C139403) *
                C139442 * C139588) *
               C139560 +
           (((C18262 + C18261) * C9617 -
             ((C14589 + C14588) * C9466 + (C14337 + C14336) * C9616) +
             (C18546 + C18545) * C139403) *
                C139442 * C30408 +
            ((C21095 + C21096) * C9617 -
             ((C18545 + C18546) * C9466 + (C18261 + C18262) * C9616) +
             (C21313 + C21314) * C139403) *
                C139442 * C139588) *
               C139377) *
              C139552 +
          ((((C32106 + C32105) * C9617 -
             ((C13596 * C247 + C139575 * C253 + C13595 * C246 + C13591 * C252) *
                  C9466 +
              (C13596 * C109 + C139575 * C115 + C13595 * C108 + C13591 * C114) *
                  C9616) +
             (C32357 + C32358) * C139403) *
                C139442 * C30408 +
            ((C32109 + C32110) * C9617 -
             ((C32358 + C32357) * C9466 + (C32105 + C32106) * C9616) +
             (C32360 + C32359) * C139403) *
                C139442 * C139588) *
               C139560 +
           (((C14341 + C14340) * C9616 + (C14592 + C14593) * C9466 -
             (C18258 + C18257) * C9617 - (C18548 + C18547) * C139403) *
                C139442 * C30408 +
            ((C18257 + C18258) * C9616 + (C18547 + C18548) * C9466 -
             (C13596 * C6440 + C139575 * C6446 + C13595 * C6441 +
              C13591 * C6447) *
                 C9617 -
             (C13596 * C6606 + C139575 * C6609 + C13595 * C6607 +
              C13591 * C6610) *
                 C139403) *
                C139442 * C139588) *
               C139377) *
              C139305)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[40] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C307 * C107 + C139442 * C308) * C137108 +
              (C307 * C116 + C139442 * C314) * C139552 - C337 * C137101 -
              C338 * C139305) *
                 C30408 +
             (C39974 + C39975 - C39976 - C39977) * C139588) *
                C13591 +
            ((C337 * C137108 + C338 * C139552 - C339 * C137101 -
              C340 * C139305) *
                 C30408 +
             (C39978 + C39979 - C39980 - C39981) * C139588) *
                C139575) *
               C9466 +
           (((C39976 - (C39975 + C39974) + C39977) * C30408 +
             (C2090 * C137101 - (C32485 * C139552 + C32486 * C137108) +
              C2091 * C139305) *
                 C139588) *
                C13591 +
            ((C39980 - (C39979 + C39978) + C39981) * C30408 +
             (C2092 * C137101 - (C2091 * C139552 + C2090 * C137108) +
              C2093 * C139305) *
                 C139588) *
                C139575) *
               C139403) *
              C139560 +
          ((((C1150 * C137101 -
              ((C307 * C841 + C139442 * C1125) * C139552 +
               (C307 * C831 + C139442 * C1118) * C137108) +
              C1151 * C139305) *
                 C30408 +
             (C39982 - (C39983 + C39984) + C39985) * C139588) *
                C13591 +
            ((C1152 * C137101 - (C1151 * C139552 + C1150 * C137108) +
              C1153 * C139305) *
                 C30408 +
             (C39986 - (C39987 + C39988) + C39989) * C139588) *
                C139575) *
               C9466 +
           (((C39984 + C39983 - C39982 - C39985) * C30408 +
             (C38054 * C137108 + C38055 * C139552 - C35460 * C137101 -
              C35461 * C139305) *
                 C139588) *
                C13591 +
            ((C39988 + C39987 - C39986 - C39989) * C30408 +
             (C35460 * C137108 + C35461 * C139552 -
              (C307 * C6440 + C139442 * C6686) * C137101 -
              (C307 * C6443 + C139442 * C6689) * C139305) *
                 C139588) *
                C139575) *
               C139403) *
              C139377)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[40] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C307 * C107 + C139442 * C308) * C2783 +
              (C307 * C182 + C139442 * C394) * C139560 -
              (C307 * C831 + C139442 * C1118) * C2784 -
              (C307 * C939 + C139442 * C1231) * C139377) *
                 C30408 +
             (C35594 + C35595 - C35596 - C35610) * C139588) *
                C13591 +
            ((C3021 + C3022 - C3023 - C3024) * C30408 + C35611 * C139588) *
                C139575) *
               C139552 +
           (((C3023 - (C3022 + C3021) + C3024) * C30408 + C35612 * C139588) *
                C13591 +
            ((C3027 - (C3026 + C3025) + C3028) * C30408 +
             (C4677 - (C4678 + C4679) + C4685) * C139588) *
                C139575) *
               C139305) *
              C9466 +
          ((((C35596 - (C35595 + C35594) + C35610) * C30408 +
             (C38054 * C2784 - (C32605 * C139560 + C32486 * C2783) +
              C38169 * C139377) *
                 C139588) *
                C13591 +
            (C35612 * C30408 +
             (C35601 - (C35602 + C35603) + C35613) * C139588) *
                C139575) *
               C139552 +
           ((C35611 * C30408 + (C35603 + C35602 - C35601 - C35613) * C139588) *
                C13591 +
            ((C4679 + C4678 - C4677 - C4685) * C30408 +
             (C2092 * C2783 + C2191 * C139560 -
              (C307 * C6440 + C139442 * C6686) * C2784 -
              (C307 * C6526 + C139442 * C6768) * C139377) *
                 C139588) *
                C139575) *
               C139305) *
              C139403)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[40] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((((C307 * C107 + C139442 * C308) * C9616 +
                        (C307 * C245 + C139442 * C474) * C9466 -
                        C32483 * C9617 - C32719 * C139403) *
                           C30408 +
                       (C32483 * C9616 + C32719 * C9466 - C32486 * C9617 -
                        C32720 * C139403) *
                           C139588) *
                          C13591 +
                      ((C9841 + C9842 - C9843 - C9844) * C30408 +
                       (C42150 + C42151 - C42152 - C42153) * C139588) *
                          C139575) *
                         C139560 +
                     (((C35459 * C9617 -
                        ((C307 * C1029 + C139442 * C1339) * C9466 +
                         (C307 * C831 + C139442 * C1118) * C9616) +
                        C35751 * C139403) *
                           C30408 +
                       (C38054 * C9617 - (C35751 * C9466 + C35459 * C9616) +
                        C38271 * C139403) *
                           C139588) *
                          C13591 +
                      ((C11854 - (C11855 + C11856) + C11857) * C30408 +
                       (C44788 - (C44789 + C44790) + C44791) * C139588) *
                          C139575) *
                         C139377) *
                        C139552 +
                    ((((C9843 - (C9842 + C9841) + C9844) * C30408 +
                       (C42152 - (C42151 + C42150) + C42153) * C139588) *
                          C13591 +
                      ((C9847 - (C9846 + C9845) + C9848) * C30408 +
                       (C42154 - (C42155 + C42156) + C42157) * C139588) *
                          C139575) *
                         C139560 +
                     (((C11856 + C11855 - C11854 - C11857) * C30408 +
                       (C44790 + C44789 - C44788 - C44791) * C139588) *
                          C13591 +
                      ((C11860 + C11859 - C11858 - C11861) * C30408 +
                       (C4568 * C9616 + C4799 * C9466 -
                        (C307 * C6440 + C139442 * C6686) * C9617 -
                        (C307 * C6606 + C139442 * C6845) * C139403) *
                           C139588) *
                          C139575) *
                         C139377) *
                        C139305)) /
                  (p * q * std::sqrt(p + q));
    d2eezx[40] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C30812 * C107 + C30408 * C555 + C30813 * C1767 +
              C139588 * C2376) *
                 C137108 +
             (C30812 * C116 + C30408 * C561 + C30813 * C1777 +
              C139588 * C2383) *
                 C139552 -
             (C30839 + C30840) * C137101 - (C30841 + C30842) * C139305) *
                C13591 +
            ((C30840 + C30839) * C137108 + (C30842 + C30841) * C139552 -
             (C30844 + C30843) * C137101 - (C30846 + C30845) * C139305) *
                C139575) *
               C139442 * C9466 +
           (((C32837 + C32838) * C137101 -
             ((C30813 * C1783 + C139588 * C2387 + C30812 * C1777 +
               C30408 * C2383) *
                  C139552 +
              (C30813 * C1768 + C139588 * C2379 + C30812 * C1767 +
               C30408 * C2376) *
                  C137108) +
             (C32839 + C32840) * C139305) *
                C13591 +
            ((C34713 + C34712) * C137101 -
             ((C32840 + C32839) * C139552 + (C32838 + C32837) * C137108) +
             (C34715 + C34714) * C139305) *
                C139575) *
               C139442 * C139403) *
              C139560 +
          ((((C31743 + C31744) * C137101 -
             ((C30813 * C4230 + C139588 * C4903 + C30812 * C841 +
               C30408 * C1447) *
                  C139552 +
              (C30813 * C4223 + C139588 * C4899 + C30812 * C831 +
               C30408 * C1440) *
                  C137108) +
             (C31745 + C31746) * C139305) *
                C13591 +
            ((C33762 + C33761) * C137101 -
             ((C31746 + C31745) * C139552 + (C31744 + C31743) * C137108) +
             (C33764 + C33763) * C139305) *
                C139575) *
               C139442 * C9466 +
           (((C30812 * C4223 + C30408 * C4899 + C30813 * C6442 +
              C139588 * C6922) *
                 C137108 +
             (C30812 * C4230 + C30408 * C4903 + C30813 * C6445 +
              C139588 * C6925) *
                 C139552 -
             (C35892 + C35893) * C137101 - (C35894 + C35895) * C139305) *
                C13591 +
            ((C35893 + C35892) * C137108 + (C35895 + C35894) * C139552 -
             (C30813 * C6440 + C139588 * C6920 + C30812 * C4225 +
              C30408 * C4901) *
                 C137101 -
             (C30813 * C6443 + C139588 * C6923 + C30812 * C4232 +
              C30408 * C4905) *
                 C139305) *
                C139575) *
               C139442 * C139403) *
              C139377)) /
        (p * q * std::sqrt(p + q));
    d2eezy[40] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C30812 * C107 + C30408 * C555 + C30813 * C1767 +
              C139588 * C2376) *
                 C2783 +
             (C30812 * C182 + C30408 * C641 + C30813 * C1873 +
              C139588 * C2492) *
                 C139560 -
             (C30813 * C4223 + C139588 * C4899 + C30812 * C831 +
              C30408 * C1440) *
                 C2784 -
             (C30813 * C4337 + C139588 * C5017 + C30812 * C939 +
              C30408 * C1553) *
                 C139377) *
                C13591 +
            ((C30840 + C30839) * C2783 + (C30929 + C30930) * C139560 -
             (C31744 + C31743) * C2784 - (C31857 + C31858) * C139377) *
                C139575) *
               C139442 * C139552 +
           (((C31743 + C31744) * C2784 -
             ((C30930 + C30929) * C139560 + (C30839 + C30840) * C2783) +
             (C31858 + C31857) * C139377) *
                C13591 +
            ((C33762 + C33761) * C2784 -
             ((C30931 + C30932) * C139560 + (C30844 + C30843) * C2783) +
             (C33867 + C33868) * C139377) *
                C139575) *
               C139442 * C139305) *
              C9466 +
          ((((C30812 * C4223 + C30408 * C4899 + C30813 * C6442 +
              C139588 * C6922) *
                 C2784 -
             ((C30813 * C1874 + C139588 * C2493 + C30812 * C1873 +
               C30408 * C2492) *
                  C139560 +
              (C30813 * C1768 + C139588 * C2379 + C30812 * C1767 +
               C30408 * C2376) *
                  C2783) +
             (C30812 * C4337 + C30408 * C5017 + C30813 * C6528 +
              C139588 * C7000) *
                 C139377) *
                C13591 +
            ((C35893 + C35892) * C2784 -
             ((C32952 + C32951) * C139560 + (C32838 + C32837) * C2783) +
             (C36030 + C36031) * C139377) *
                C139575) *
               C139442 * C139552 +
           (((C32837 + C32838) * C2783 + (C32951 + C32952) * C139560 -
             (C35892 + C35893) * C2784 - (C36031 + C36030) * C139377) *
                C13591 +
            ((C34713 + C34712) * C2783 + (C34818 + C34819) * C139560 -
             (C30813 * C6440 + C139588 * C6920 + C30812 * C4225 +
              C30408 * C4901) *
                 C2784 -
             (C30813 * C6526 + C139588 * C7002 + C30812 * C4339 +
              C30408 * C5019) *
                 C139377) *
                C139575) *
               C139442 * C139305) *
              C139403)) /
        (p * q * std::sqrt(p + q));
    d2eezz[40] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C30812 * C107 + C30408 * C555 + C30813 * C1767 +
              C139588 * C2376) *
                 C9616 +
             (C30812 * C245 + C30408 * C719 + C30813 * C1965 +
              C139588 * C2591) *
                 C9466 -
             (C30813 * C1768 + C139588 * C2379 + C30812 * C1767 +
              C30408 * C2376) *
                 C9617 -
             (C30813 * C1966 + C139588 * C2592 + C30812 * C1965 +
              C30408 * C2591) *
                 C139403) *
                C13591 +
            ((C30840 + C30839) * C9616 + (C31013 + C31014) * C9466 -
             (C32838 + C32837) * C9617 - (C33061 + C33062) * C139403) *
                C139575) *
               C139442 * C139560 +
           (((C30812 * C4223 + C30408 * C4899 + C30813 * C6442 +
              C139588 * C6922) *
                 C9617 -
             ((C30813 * C4443 + C139588 * C5133 + C30812 * C1029 +
               C30408 * C1661) *
                  C9466 +
              (C30813 * C4223 + C139588 * C4899 + C30812 * C831 +
               C30408 * C1440) *
                  C9616) +
             (C30812 * C4443 + C30408 * C5133 + C30813 * C6608 +
              C139588 * C7077) *
                 C139403) *
                C13591 +
            ((C35893 + C35892) * C9617 -
             ((C31967 + C31968) * C9466 + (C31744 + C31743) * C9616) +
             (C36166 + C36167) * C139403) *
                C139575) *
               C139442 * C139377) *
              C139552 +
          ((((C32837 + C32838) * C9617 -
             ((C31014 + C31013) * C9466 + (C30839 + C30840) * C9616) +
             (C33062 + C33061) * C139403) *
                C13591 +
            ((C34713 + C34712) * C9617 -
             ((C31015 + C31016) * C9466 + (C30844 + C30843) * C9616) +
             (C34922 + C34923) * C139403) *
                C139575) *
               C139442 * C139560 +
           (((C31743 + C31744) * C9616 + (C31968 + C31967) * C9466 -
             (C35892 + C35893) * C9617 - (C36167 + C36166) * C139403) *
                C13591 +
            ((C33762 + C33761) * C9616 + (C33971 + C33972) * C9466 -
             (C30813 * C6440 + C139588 * C6920 + C30812 * C4225 +
              C30408 * C4901) *
                 C9617 -
             (C30813 * C6606 + C139588 * C7079 + C30812 * C4445 +
              C30408 * C5135) *
                 C139403) *
                C139575) *
               C139442 * C139377) *
              C139305)) /
        (p * q * std::sqrt(p + q));
    d2eexx[41] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139575 * C114) *
                 C5913 +
             (C13595 * C116 + C13591 * C125 + C13596 * C117 + C139575 * C126) *
                 C139300) *
                C139442 * C30408 +
            ((C32101 + C32102) * C5913 + (C32103 + C32104) * C139300) *
                C139442 * C139588) *
               C139593 -
           (((C32111 + C32112) * C139300 + (C32113 + C32114) * C5913) *
                C139442 * C139588 +
            ((C32104 + C32103) * C139300 + (C32102 + C32101) * C5913) *
                C139442 * C30408) *
               C139594 +
           (((C32114 + C32113) * C5913 + (C32112 + C32111) * C139300) *
                C139442 * C30408 +
            ((C43422 + C43423) * C5913 + (C43424 + C43425) * C139300) *
                C139442 * C139588) *
               C12239) *
              C139560 +
          ((((C18262 + C18261) * C5913 + (C18260 + C18259) * C139300) *
                C139442 * C30408 +
            ((C21095 + C21096) * C5913 + (C21097 + C21098) * C139300) *
                C139442 * C139588) *
               C139594 -
           (((C18259 + C18260) * C139300 + (C18261 + C18262) * C5913) *
                C139442 * C139588 +
            ((C14339 + C14338) * C139300 + (C14337 + C14336) * C5913) *
                C139442 * C30408) *
               C139593 -
           (((C13596 * C26832 + C139575 * C26836 + C13595 * C26833 +
              C13591 * C26837) *
                 C139300 +
             (C13596 * C26830 + C139575 * C26834 + C13595 * C26831 +
              C13591 * C26835) *
                 C5913) *
                C139442 * C139588 +
            ((C21098 + C21097) * C139300 + (C21096 + C21095) * C5913) *
                C139442 * C30408) *
               C12239) *
              C139377)) /
        (p * q * std::sqrt(p + q));
    d2eexy[41] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139575 * C114) *
                C2783 +
            (C13595 * C182 + C13591 * C188 + C13596 * C183 + C139575 * C189) *
                C139560 -
            (C14337 + C14336) * C2784 - (C14466 + C14467) * C139377) *
               C139442 * C30408 +
           ((C32101 + C32102) * C2783 + (C32231 + C32232) * C139560 -
            (C18261 + C18262) * C2784 - (C18404 + C18403) * C139377) *
               C139442 * C139588) *
              C139300 * C139593 +
          (((C18262 + C18261) * C2784 -
            ((C32232 + C32231) * C139560 + (C32102 + C32101) * C2783) +
            (C18403 + C18404) * C139377) *
               C139442 * C30408 +
           ((C21095 + C21096) * C2784 -
            ((C32237 + C32238) * C139560 + (C32113 + C32114) * C2783) +
            (C21206 + C21205) * C139377) *
               C139442 * C139588) *
              C139300 * C139594 +
          (((C32114 + C32113) * C2783 + (C32238 + C32237) * C139560 -
            (C21096 + C21095) * C2784 - (C21205 + C21206) * C139377) *
               C139442 * C30408 +
           ((C43422 + C43423) * C2783 + (C43500 + C43501) * C139560 -
            (C13596 * C26830 + C139575 * C26834 + C13595 * C26831 +
             C13591 * C26835) *
                C2784 -
            (C13596 * C26904 + C139575 * C26906 + C13595 * C26905 +
             C13591 * C26907) *
                C139377) *
               C139442 * C139588) *
              C139300 * C12239)) /
        (p * q * std::sqrt(p + q));
    d2eexz[41] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139575 * C114) *
                C12388 +
            (C13595 * C245 + C13591 * C251 + C13596 * C246 + C139575 * C252) *
                C139593 -
            (C32102 + C32101) * C12389 - (C32353 + C32354) * C139594 +
            (C32114 + C32113) * C12390 + (C32355 + C32356) * C12239) *
               C139442 * C30408 +
           ((C32101 + C32102) * C12388 + (C32354 + C32353) * C139593 -
            (C32113 + C32114) * C12389 - (C32356 + C32355) * C139594 +
            (C43422 + C43423) * C12390 + (C43577 + C43576) * C12239) *
               C139442 * C139588) *
              C139560 +
          (((C18262 + C18261) * C12389 -
            ((C14589 + C14588) * C139593 + (C14337 + C14336) * C12388) +
            (C18546 + C18545) * C139594 - (C21096 + C21095) * C12390 -
            (C21314 + C21313) * C12239) *
               C139442 * C30408 +
           ((C21095 + C21096) * C12389 -
            ((C18545 + C18546) * C139593 + (C18261 + C18262) * C12388) +
            (C21313 + C21314) * C139594 -
            (C13596 * C26830 + C139575 * C26834 + C13595 * C26831 +
             C13591 * C26835) *
                C12390 -
            (C13596 * C26974 + C139575 * C26976 + C13595 * C26975 +
             C13591 * C26977) *
                C12239) *
               C139442 * C139588) *
              C139377) *
         C139300) /
        (p * q * std::sqrt(p + q));
    d2eeyx[41] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C307 * C107 + C139442 * C308) * C5913 +
              (C307 * C116 + C139442 * C314) * C139300) *
                 C30408 +
             (C38036 + C38037) * C139588) *
                C13591 +
            ((C337 * C5913 + C338 * C139300) * C30408 +
             (C38038 + C38039) * C139588) *
                C139575) *
               C139593 -
           (((C38040 + C38041) * C139588 + (C38039 + C38038) * C30408) *
                C139575 +
            ((C38042 + C38043) * C139588 + (C38037 + C38036) * C30408) *
                C13591) *
               C139594 +
           (((C38043 + C38042) * C30408 + (C43656 + C43657) * C139588) *
                C13591 +
            ((C38041 + C38040) * C30408 + (C43652 + C43653) * C139588) *
                C139575) *
               C12239) *
              C139560 +
          ((((C38044 + C38045) * C30408 + (C38056 + C38057) * C139588) *
                C13591 +
            ((C38050 + C38051) * C30408 + (C38052 + C38053) * C139588) *
                C139575) *
               C139594 -
           (((C38051 + C38050) * C139588 +
             (C1151 * C139300 + C1150 * C5913) * C30408) *
                C139575 +
            ((C38045 + C38044) * C139588 +
             ((C307 * C841 + C139442 * C1125) * C139300 +
              (C307 * C831 + C139442 * C1118) * C5913) *
                 C30408) *
                C13591) *
               C139593 -
           ((((C307 * C26832 + C139442 * C27046) * C139300 +
              (C307 * C26830 + C139442 * C27044) * C5913) *
                 C139588 +
             (C38053 + C38052) * C30408) *
                C139575 +
            (((C307 * C26833 + C139442 * C27047) * C139300 +
              (C307 * C26831 + C139442 * C27045) * C5913) *
                 C139588 +
             (C38057 + C38056) * C30408) *
                C13591) *
               C12239) *
              C139377)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[41] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139442 * C308) * C2783 +
             (C307 * C182 + C139442 * C394) * C139560 -
             (C307 * C831 + C139442 * C1118) * C2784 -
             (C307 * C939 + C139442 * C1231) * C139377) *
                C30408 +
            (C35594 + C35595 - C35596 - C35610) * C139588) *
               C13591 +
           ((C3021 + C3022 - C3023 - C3024) * C30408 + C35611 * C139588) *
               C139575) *
              C139300 * C139593 +
          (((C35596 - (C35595 + C35594) + C35610) * C30408 +
            (C46568 - (C46569 + C46570) + C46571) * C139588) *
               C13591 +
           (C35612 * C30408 + (C35601 - (C35602 + C35603) + C35613) * C139588) *
               C139575) *
              C139300 * C139594 +
          (((C46570 + C46569 - C46568 - C46571) * C30408 +
            (C43654 * C2783 + C43729 * C139560 -
             (C307 * C26831 + C139442 * C27045) * C2784 -
             (C307 * C26905 + C139442 * C27115) * C139377) *
                C139588) *
               C13591 +
           ((C35603 + C35602 - C35601 - C35613) * C30408 +
            (C32487 * C2783 + C32606 * C139560 -
             (C307 * C26830 + C139442 * C27044) * C2784 -
             (C307 * C26904 + C139442 * C27114) * C139377) *
                C139588) *
               C139575) *
              C139300 * C12239)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[41] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139442 * C308) * C12388 +
             (C307 * C245 + C139442 * C474) * C139593 - C32483 * C12389 -
             C32719 * C139594 + C32486 * C12390 + C32720 * C12239) *
                C30408 +
            (C32483 * C12388 + C32719 * C139593 - C32486 * C12389 -
             C32720 * C139594 + C43654 * C12390 + C43801 * C12239) *
                C139588) *
               C13591 +
           ((C12614 + C12615 - C12616 - C12617 + C12618 + C12619) * C30408 +
            (C45778 + C45779 - C45780 - C45781 + C45782 + C45783) * C139588) *
               C139575) *
              C139560 +
          (((C35459 * C12389 -
             ((C307 * C1029 + C139442 * C1339) * C139593 +
              (C307 * C831 + C139442 * C1118) * C12388) +
             C35751 * C139594 - C38054 * C12390 - C38271 * C12239) *
                C30408 +
            (C38054 * C12389 - (C35751 * C139593 + C35459 * C12388) +
             C38271 * C139594 - (C307 * C26831 + C139442 * C27045) * C12390 -
             (C307 * C26975 + C139442 * C27182) * C12239) *
                C139588) *
               C13591 +
           ((C4566 * C12389 - (C1359 * C139593 + C1150 * C12388) +
             C4798 * C139594 - C35460 * C12390 - C35752 * C12239) *
                C30408 +
            (C35460 * C12389 - (C4798 * C139593 + C4566 * C12388) +
             C35752 * C139594 - (C307 * C26830 + C139442 * C27044) * C12390 -
             (C307 * C26974 + C139442 * C27183) * C12239) *
                C139588) *
               C139575) *
              C139377) *
         C139300) /
        (p * q * std::sqrt(p + q));
    d2eezx[41] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C30812 * C107 + C30408 * C555 + C30813 * C1767 +
              C139588 * C2376) *
                 C5913 +
             (C30812 * C116 + C30408 * C561 + C30813 * C1777 +
              C139588 * C2383) *
                 C139300) *
                C13591 +
            ((C30840 + C30839) * C5913 + (C30842 + C30841) * C139300) *
                C139575) *
               C139442 * C139593 -
           (((C32840 + C32839) * C139300 + (C32838 + C32837) * C5913) *
                C139575 +
            ((C30813 * C1783 + C139588 * C2387 + C30812 * C1777 +
              C30408 * C2383) *
                 C139300 +
             (C30813 * C1768 + C139588 * C2379 + C30812 * C1767 +
              C30408 * C2376) *
                 C5913) *
                C13591) *
               C139442 * C139594 +
           (((C30812 * C1768 + C30408 * C2379 + C30813 * C10815 +
              C139588 * C11155) *
                 C5913 +
             (C30812 * C1783 + C30408 * C2387 + C30813 * C10818 +
              C139588 * C11158) *
                 C139300) *
                C13591 +
            ((C32842 + C32841) * C5913 + (C32844 + C32843) * C139300) *
                C139575) *
               C139442 * C12239) *
              C139560 +
          ((((C30812 * C4223 + C30408 * C4899 + C30813 * C6442 +
              C139588 * C6922) *
                 C5913 +
             (C30812 * C4230 + C30408 * C4903 + C30813 * C6445 +
              C139588 * C6925) *
                 C139300) *
                C13591 +
            ((C35893 + C35892) * C5913 + (C35895 + C35894) * C139300) *
                C139575) *
               C139442 * C139594 -
           (((C31746 + C31745) * C139300 + (C31744 + C31743) * C5913) *
                C139575 +
            ((C30813 * C4230 + C139588 * C4903 + C30812 * C841 +
              C30408 * C1447) *
                 C139300 +
             (C30813 * C4223 + C139588 * C4899 + C30812 * C831 +
              C30408 * C1440) *
                 C5913) *
                C13591) *
               C139442 * C139593 -
           (((C30813 * C26832 + C139588 * C27252 + C30812 * C6444 +
              C30408 * C6924) *
                 C139300 +
             (C30813 * C26830 + C139588 * C27250 + C30812 * C6441 +
              C30408 * C6921) *
                 C5913) *
                C139575 +
            ((C30813 * C26833 + C139588 * C27253 + C30812 * C6445 +
              C30408 * C6925) *
                 C139300 +
             (C30813 * C26831 + C139588 * C27251 + C30812 * C6442 +
              C30408 * C6922) *
                 C5913) *
                C13591) *
               C139442 * C12239) *
              C139377)) /
        (p * q * std::sqrt(p + q));
    d2eezy[41] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1767 + C139588 * C2376) *
                C2783 +
            (C30812 * C182 + C30408 * C641 + C30813 * C1873 + C139588 * C2492) *
                C139560 -
            (C30813 * C4223 + C139588 * C4899 + C30812 * C831 +
             C30408 * C1440) *
                C2784 -
            (C30813 * C4337 + C139588 * C5017 + C30812 * C939 +
             C30408 * C1553) *
                C139377) *
               C13591 +
           ((C30840 + C30839) * C2783 + (C30929 + C30930) * C139560 -
            (C31744 + C31743) * C2784 - (C31857 + C31858) * C139377) *
               C139575) *
              C139442 * C139300 * C139593 +
          (((C30812 * C4223 + C30408 * C4899 + C30813 * C6442 +
             C139588 * C6922) *
                C2784 -
            ((C30813 * C1874 + C139588 * C2493 + C30812 * C1873 +
              C30408 * C2492) *
                 C139560 +
             (C30813 * C1768 + C139588 * C2379 + C30812 * C1767 +
              C30408 * C2376) *
                 C2783) +
            (C30812 * C4337 + C30408 * C5017 + C30813 * C6528 +
             C139588 * C7000) *
                C139377) *
               C13591 +
           ((C35893 + C35892) * C2784 -
            ((C32952 + C32951) * C139560 + (C32838 + C32837) * C2783) +
            (C36030 + C36031) * C139377) *
               C139575) *
              C139442 * C139300 * C139594 +
          (((C30812 * C1768 + C30408 * C2379 + C30813 * C10815 +
             C139588 * C11155) *
                C2783 +
            (C30812 * C1874 + C30408 * C2493 + C30813 * C10877 +
             C139588 * C11211) *
                C139560 -
            (C30813 * C26831 + C139588 * C27251 + C30812 * C6442 +
             C30408 * C6922) *
                C2784 -
            (C30813 * C26905 + C139588 * C27321 + C30812 * C6528 +
             C30408 * C7000) *
                C139377) *
               C13591 +
           ((C32842 + C32841) * C2783 + (C32953 + C32954) * C139560 -
            (C30813 * C26830 + C139588 * C27250 + C30812 * C6441 +
             C30408 * C6921) *
                C2784 -
            (C30813 * C26904 + C139588 * C27320 + C30812 * C6527 +
             C30408 * C7001) *
                C139377) *
               C139575) *
              C139442 * C139300 * C12239)) /
        (p * q * std::sqrt(p + q));
    d2eezz[41] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1767 + C139588 * C2376) *
                C12388 +
            (C30812 * C245 + C30408 * C719 + C30813 * C1965 + C139588 * C2591) *
                C139593 -
            (C30813 * C1768 + C139588 * C2379 + C30812 * C1767 +
             C30408 * C2376) *
                C12389 -
            (C30813 * C1966 + C139588 * C2592 + C30812 * C1965 +
             C30408 * C2591) *
                C139594 +
            (C30812 * C1768 + C30408 * C2379 + C30813 * C10815 +
             C139588 * C11155) *
                C12390 +
            (C30812 * C1966 + C30408 * C2592 + C30813 * C10937 +
             C139588 * C11262) *
                C12239) *
               C13591 +
           ((C30840 + C30839) * C12388 + (C31013 + C31014) * C139593 -
            (C32838 + C32837) * C12389 - (C33061 + C33062) * C139594 +
            (C32842 + C32841) * C12390 + (C33063 + C33064) * C12239) *
               C139575) *
              C139442 * C139560 +
          (((C30812 * C4223 + C30408 * C4899 + C30813 * C6442 +
             C139588 * C6922) *
                C12389 -
            ((C30813 * C4443 + C139588 * C5133 + C30812 * C1029 +
              C30408 * C1661) *
                 C139593 +
             (C30813 * C4223 + C139588 * C4899 + C30812 * C831 +
              C30408 * C1440) *
                 C12388) +
            (C30812 * C4443 + C30408 * C5133 + C30813 * C6608 +
             C139588 * C7077) *
                C139594 -
            (C30813 * C26831 + C139588 * C27251 + C30812 * C6442 +
             C30408 * C6922) *
                C12390 -
            (C30813 * C26975 + C139588 * C27388 + C30812 * C6608 +
             C30408 * C7077) *
                C12239) *
               C13591 +
           ((C35893 + C35892) * C12389 -
            ((C31967 + C31968) * C139593 + (C31744 + C31743) * C12388) +
            (C36166 + C36167) * C139594 -
            (C30813 * C26830 + C139588 * C27250 + C30812 * C6441 +
             C30408 * C6921) *
                C12390 -
            (C30813 * C26974 + C139588 * C27389 + C30812 * C6607 +
             C30408 * C7078) *
                C12239) *
               C139575) *
              C139442 * C139377) *
         C139300) /
        (p * q * std::sqrt(p + q));
    d2eexx[42] +=
        (-std::pow(Pi, 2.5) *
         (((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139575 * C114) *
                 C5913 +
             (C13595 * C116 + C13591 * C125 + C13596 * C117 + C139575 * C126) *
                 C139300) *
                C139442 * C30408 +
            ((C32101 + C32102) * C5913 + (C32103 + C32104) * C139300) *
                C139442 * C139588) *
               C9466 -
           (((C32111 + C32112) * C139300 + (C32113 + C32114) * C5913) *
                C139442 * C139588 +
            ((C32104 + C32103) * C139300 + (C32102 + C32101) * C5913) *
                C139442 * C30408) *
               C139403) *
              C823 +
          ((((C18262 + C18261) * C5913 + (C18260 + C18259) * C139300) *
                C139442 * C30408 +
            ((C21095 + C21096) * C5913 + (C21097 + C21098) * C139300) *
                C139442 * C139588) *
               C139403 -
           (((C18259 + C18260) * C139300 + (C18261 + C18262) * C5913) *
                C139442 * C139588 +
            ((C14339 + C14338) * C139300 + (C14337 + C14336) * C5913) *
                C139442 * C30408) *
               C9466) *
              C824 +
          ((((C14349 + C14348) * C5913 + (C14347 + C14346) * C139300) *
                C139442 * C30408 +
            ((C24145 + C24146) * C5913 + (C24147 + C24148) * C139300) *
                C139442 * C139588) *
               C9466 -
           (((C13596 * C21080 + C139575 * C21084 + C13595 * C21081 +
              C13591 * C21085) *
                 C139300 +
             (C13596 * C21078 + C139575 * C21082 + C13595 * C21079 +
              C13591 * C21083) *
                 C5913) *
                C139442 * C139588 +
            ((C24148 + C24147) * C139300 + (C24146 + C24145) * C5913) *
                C139442 * C30408) *
               C139403) *
              C825)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139575 * C114) *
                C5230 +
            (C13595 * C116 + C13591 * C125 + C13596 * C117 + C139575 * C126) *
                C5225 -
            (C13596 * C109 + C139575 * C115 + C13595 * C108 + C13591 * C114) *
                C5231 -
            (C13596 * C118 + C139575 * C127 + C13595 * C117 + C13591 * C126) *
                C5226 +
            (C13595 * C109 + C13591 * C115 + C13596 * C110 + C139575 * C119) *
                C5232 +
            (C13595 * C118 + C13591 * C127 + C13596 * C120 + C139575 * C128) *
                C5227) *
               C139442 * C30408 +
           ((C32101 + C32102) * C5230 + (C32103 + C32104) * C5225 -
            (C32105 + C32106) * C5231 - (C32107 + C32108) * C5226 +
            (C34079 + C34080) * C5232 + (C34081 + C34082) * C5227) *
               C139442 * C139588) *
              C9466 +
          (((C32106 + C32105) * C5231 -
            ((C32104 + C32103) * C5225 + (C32102 + C32101) * C5230) +
            (C32108 + C32107) * C5226 - (C34080 + C34079) * C5232 -
            (C34082 + C34081) * C5227) *
               C139442 * C30408 +
           ((C32109 + C32110) * C5231 -
            ((C32111 + C32112) * C5225 + (C32113 + C32114) * C5230) +
            (C32115 + C32116) * C5226 -
            (C13596 * C1771 + C139575 * C1786 + C13595 * C1770 +
             C13591 * C1782) *
                C5232 -
            (C13596 * C1787 + C139575 * C1795 + C13595 * C1785 +
             C13591 * C1794) *
                C5227) *
               C139442 * C139588) *
              C139403) *
         C139328) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139575 * C114) *
                C5913 +
            (C13595 * C116 + C13591 * C125 + C13596 * C117 + C139575 * C126) *
                C139300) *
               C139442 * C30408 +
           ((C32101 + C32102) * C5913 + (C32103 + C32104) * C139300) * C139442 *
               C139588) *
              C10809 -
          (((C32111 + C32112) * C139300 + (C32113 + C32114) * C5913) * C139442 *
               C139588 +
           ((C32104 + C32103) * C139300 + (C32102 + C32101) * C5913) * C139442 *
               C30408) *
              C10810 +
          (((C32114 + C32113) * C5913 + (C32112 + C32111) * C139300) * C139442 *
               C30408 +
           ((C43422 + C43423) * C5913 + (C43424 + C43425) * C139300) * C139442 *
               C139588) *
              C10811 -
          (((C13596 * C43407 + C139575 * C43411 + C13595 * C43408 +
             C13591 * C43412) *
                C139300 +
            (C13596 * C43405 + C139575 * C43409 + C13595 * C43406 +
             C13591 * C43410) *
                C5913) *
               C139442 * C139588 +
           ((C43425 + C43424) * C139300 + (C43423 + C43422) * C5913) * C139442 *
               C30408) *
              C10812) *
         C139328) /
            (p * q * std::sqrt(p + q));
    d2eexy[42] +=
        (-std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139575 * C114) *
                C934 +
            (C13595 * C182 + C13591 * C188 + C13596 * C183 + C139575 * C189) *
                C823 -
            (C14337 + C14336) * C935 - (C14466 + C14467) * C824 +
            (C14349 + C14348) * C936 + (C14468 + C14469) * C825) *
               C139442 * C30408 +
           ((C32101 + C32102) * C934 + (C32231 + C32232) * C823 -
            (C18261 + C18262) * C935 - (C18404 + C18403) * C824 +
            (C24145 + C24146) * C936 + (C24256 + C24255) * C825) *
               C139442 * C139588) *
              C139300 * C9466 +
          (((C18262 + C18261) * C935 -
            ((C32232 + C32231) * C823 + (C32102 + C32101) * C934) +
            (C18403 + C18404) * C824 - (C24146 + C24145) * C936 -
            (C24255 + C24256) * C825) *
               C139442 * C30408 +
           ((C21095 + C21096) * C935 -
            ((C32237 + C32238) * C823 + (C32113 + C32114) * C934) +
            (C21206 + C21205) * C824 -
            (C13596 * C21078 + C139575 * C21082 + C13595 * C21079 +
             C13591 * C21083) *
                C936 -
            (C13596 * C21196 + C139575 * C21198 + C13595 * C21197 +
             C13591 * C21199) *
                C825) *
               C139442 * C139588) *
              C139300 * C139403)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139575 * C114) *
                 C181 +
             (C13595 * C182 + C13591 * C188 + C13596 * C183 + C139575 * C189) *
                 C139328) *
                C139442 * C30408 +
            ((C32101 + C32102) * C181 + (C32231 + C32232) * C139328) * C139442 *
                C139588) *
               C5225 -
           (((C32233 + C32234) * C139328 + (C32105 + C32106) * C181) * C139442 *
                C139588 +
            ((C13596 * C184 + C139575 * C190 + C13595 * C183 + C13591 * C189) *
                 C139328 +
             (C13596 * C109 + C139575 * C115 + C13595 * C108 + C13591 * C114) *
                 C181) *
                C139442 * C30408) *
               C5226 +
           (((C13595 * C109 + C13591 * C115 + C13596 * C110 + C139575 * C119) *
                 C181 +
             (C13595 * C184 + C13591 * C190 + C13596 * C185 + C139575 * C191) *
                 C139328) *
                C139442 * C30408 +
            ((C34079 + C34080) * C181 + (C34185 + C34186) * C139328) * C139442 *
                C139588) *
               C5227) *
              C9466 +
          ((((C32106 + C32105) * C181 + (C32234 + C32233) * C139328) * C139442 *
                C30408 +
            ((C32109 + C32110) * C181 + (C32235 + C32236) * C139328) * C139442 *
                C139588) *
               C5226 -
           (((C32237 + C32238) * C139328 + (C32113 + C32114) * C181) * C139442 *
                C139588 +
            ((C32232 + C32231) * C139328 + (C32102 + C32101) * C181) * C139442 *
                C30408) *
               C5225 -
           (((C13596 * C1877 + C139575 * C1885 + C13595 * C1876 +
              C13591 * C1884) *
                 C139328 +
             (C13596 * C1771 + C139575 * C1786 + C13595 * C1770 +
              C13591 * C1782) *
                 C181) *
                C139442 * C139588 +
            ((C34186 + C34185) * C139328 + (C34080 + C34079) * C181) * C139442 *
                C30408) *
               C5227) *
              C139403)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139575 * C114) *
                C181 +
            (C13595 * C182 + C13591 * C188 + C13596 * C183 + C139575 * C189) *
                C139328) *
               C139442 * C30408 +
           ((C32101 + C32102) * C181 + (C32231 + C32232) * C139328) * C139442 *
               C139588) *
              C139300 * C10809 -
          (((C32237 + C32238) * C139328 + (C32113 + C32114) * C181) * C139442 *
               C139588 +
           ((C32232 + C32231) * C139328 + (C32102 + C32101) * C181) * C139442 *
               C30408) *
              C139300 * C10810 +
          (((C32114 + C32113) * C181 + (C32238 + C32237) * C139328) * C139442 *
               C30408 +
           ((C43422 + C43423) * C181 + (C43500 + C43501) * C139328) * C139442 *
               C139588) *
              C139300 * C10811 -
          (((C13596 * C43491 + C139575 * C43493 + C13595 * C43492 +
             C13591 * C43494) *
                C139328 +
            (C13596 * C43405 + C139575 * C43409 + C13595 * C43406 +
             C13591 * C43410) *
                C181) *
               C139442 * C139588 +
           ((C43501 + C43500) * C139328 + (C43423 + C43422) * C181) * C139442 *
               C30408) *
              C139300 * C10812)) /
            (p * q * std::sqrt(p + q));
    d2eexz[42] +=
        (-std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139575 * C114) *
                C9616 +
            (C13595 * C245 + C13591 * C251 + C13596 * C246 + C139575 * C252) *
                C9466 -
            (C32102 + C32101) * C9617 - (C32353 + C32354) * C139403) *
               C139442 * C30408 +
           ((C32101 + C32102) * C9616 + (C32354 + C32353) * C9466 -
            (C32113 + C32114) * C9617 - (C32356 + C32355) * C139403) *
               C139442 * C139588) *
              C823 +
          (((C18262 + C18261) * C9617 -
            ((C14589 + C14588) * C9466 + (C14337 + C14336) * C9616) +
            (C18546 + C18545) * C139403) *
               C139442 * C30408 +
           ((C21095 + C21096) * C9617 -
            ((C18545 + C18546) * C9466 + (C18261 + C18262) * C9616) +
            (C21313 + C21314) * C139403) *
               C139442 * C139588) *
              C824 +
          (((C14349 + C14348) * C9616 + (C14591 + C14590) * C9466 -
            (C24146 + C24145) * C9617 - (C24364 + C24363) * C139403) *
               C139442 * C30408 +
           ((C24145 + C24146) * C9616 + (C24363 + C24364) * C9466 -
            (C13596 * C21078 + C139575 * C21082 + C13595 * C21079 +
             C13591 * C21083) *
                C9617 -
            (C13596 * C21304 + C139575 * C21306 + C13595 * C21305 +
             C13591 * C21307) *
                C139403) *
               C139442 * C139588) *
              C825) *
         C139300) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139575 * C114) *
                C9616 +
            (C13595 * C245 + C13591 * C251 + C13596 * C246 + C139575 * C252) *
                C9466 -
            (C32102 + C32101) * C9617 - (C32353 + C32354) * C139403) *
               C139442 * C30408 +
           ((C32101 + C32102) * C9616 + (C32354 + C32353) * C9466 -
            (C32113 + C32114) * C9617 - (C32356 + C32355) * C139403) *
               C139442 * C139588) *
              C139328 * C5225 +
          (((C32106 + C32105) * C9617 -
            ((C13596 * C247 + C139575 * C253 + C13595 * C246 + C13591 * C252) *
                 C9466 +
             (C13596 * C109 + C139575 * C115 + C13595 * C108 + C13591 * C114) *
                 C9616) +
            (C32357 + C32358) * C139403) *
               C139442 * C30408 +
           ((C32109 + C32110) * C9617 -
            ((C32358 + C32357) * C9466 + (C32105 + C32106) * C9616) +
            (C32360 + C32359) * C139403) *
               C139442 * C139588) *
              C139328 * C5226 +
          (((C13595 * C109 + C13591 * C115 + C13596 * C110 + C139575 * C119) *
                C9616 +
            (C13595 * C247 + C13591 * C253 + C13596 * C248 + C139575 * C254) *
                C9466 -
            (C34080 + C34079) * C9617 - (C34289 + C34290) * C139403) *
               C139442 * C30408 +
           ((C34079 + C34080) * C9616 + (C34290 + C34289) * C9466 -
            (C13596 * C1771 + C139575 * C1786 + C13595 * C1770 +
             C13591 * C1782) *
                C9617 -
            (C13596 * C1970 + C139575 * C1978 + C13595 * C1968 +
             C13591 * C1976) *
                C139403) *
               C139442 * C139588) *
              C139328 * C5227)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139575 * C114) *
               C10931 +
           (C13595 * C245 + C13591 * C251 + C13596 * C246 + C139575 * C252) *
               C10809 -
           (C32102 + C32101) * C10932 - (C32353 + C32354) * C10810 +
           (C32114 + C32113) * C10933 + (C32355 + C32356) * C10811 -
           (C43423 + C43422) * C10934 - (C43576 + C43577) * C10812) *
              C139442 * C30408 +
          ((C32101 + C32102) * C10931 + (C32354 + C32353) * C10809 -
           (C32113 + C32114) * C10932 - (C32356 + C32355) * C10810 +
           (C43422 + C43423) * C10933 + (C43577 + C43576) * C10811 -
           (C13596 * C43405 + C139575 * C43409 + C13595 * C43406 +
            C13591 * C43410) *
               C10934 -
           (C13596 * C43567 + C139575 * C43569 + C13595 * C43568 +
            C13591 * C43570) *
               C10812) *
              C139442 * C139588) *
         C139328 * C139300) /
            (p * q * std::sqrt(p + q));
    d2eeyx[42] +=
        (-std::pow(Pi, 2.5) *
         ((((((C307 * C107 + C139442 * C308) * C5913 +
              (C307 * C116 + C139442 * C314) * C139300) *
                 C30408 +
             (C38036 + C38037) * C139588) *
                C13591 +
            ((C337 * C5913 + C338 * C139300) * C30408 +
             (C38038 + C38039) * C139588) *
                C139575) *
               C9466 -
           (((C38040 + C38041) * C139588 + (C38039 + C38038) * C30408) *
                C139575 +
            ((C38042 + C38043) * C139588 + (C38037 + C38036) * C30408) *
                C13591) *
               C139403) *
              C823 +
          ((((C38044 + C38045) * C30408 + (C38056 + C38057) * C139588) *
                C13591 +
            ((C38050 + C38051) * C30408 + (C38052 + C38053) * C139588) *
                C139575) *
               C139403 -
           (((C38051 + C38050) * C139588 +
             (C1151 * C139300 + C1150 * C5913) * C30408) *
                C139575 +
            ((C38045 + C38044) * C139588 +
             ((C307 * C841 + C139442 * C1125) * C139300 +
              (C307 * C831 + C139442 * C1118) * C5913) *
                 C30408) *
                C13591) *
               C9466) *
              C824 +
          (((((C307 * C832 + C139442 * C1121) * C5913 +
              (C307 * C847 + C139442 * C1129) * C139300) *
                 C30408 +
             (C41046 + C41047) * C139588) *
                C13591 +
            ((C1154 * C5913 + C1155 * C139300) * C30408 +
             (C41042 + C41043) * C139588) *
                C139575) *
               C9466 -
           ((((C307 * C21080 + C139442 * C21414) * C139300 +
              (C307 * C21078 + C139442 * C21412) * C5913) *
                 C139588 +
             (C41043 + C41042) * C30408) *
                C139575 +
            (((C307 * C21081 + C139442 * C21415) * C139300 +
              (C307 * C21079 + C139442 * C21413) * C5913) *
                 C139588 +
             (C41047 + C41046) * C30408) *
                C13591) *
               C139403) *
              C825)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139442 * C308) * C5230 +
             (C307 * C116 + C139442 * C314) * C5225 - C337 * C5231 -
             C338 * C5226 + C339 * C5232 + C340 * C5227) *
                C30408 +
            (C41942 + C41943 - C41944 - C41945 + C41946 + C41947) * C139588) *
               C13591 +
           ((C337 * C5230 + C338 * C5225 - C339 * C5231 - C340 * C5226 +
             C341 * C5232 + C342 * C5227) *
                C30408 +
            (C41948 + C41949 - C41950 - C41951 + C41952 + C41953) * C139588) *
               C139575) *
              C9466 +
          (((C41944 - (C41943 + C41942) + C41945 - C41946 - C41947) * C30408 +
            (C2090 * C5231 - (C32485 * C5225 + C32486 * C5230) + C2091 * C5226 -
             C2092 * C5232 - C2093 * C5227) *
                C139588) *
               C13591 +
           ((C41950 - (C41949 + C41948) + C41951 - C41952 - C41953) * C30408 +
            (C2092 * C5231 - (C2091 * C5225 + C2090 * C5230) + C2093 * C5226 -
             (C307 * C1771 + C139442 * C2060) * C5232 -
             (C307 * C1787 + C139442 * C2068) * C5227) *
                C139588) *
               C139575) *
              C139403) *
         C139328) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139442 * C308) * C5913 +
             (C307 * C116 + C139442 * C314) * C139300) *
                C30408 +
            (C38036 + C38037) * C139588) *
               C13591 +
           ((C337 * C5913 + C338 * C139300) * C30408 +
            (C38038 + C38039) * C139588) *
               C139575) *
              C10809 -
          (((C38040 + C38041) * C139588 + (C38039 + C38038) * C30408) *
               C139575 +
           ((C38042 + C38043) * C139588 + (C38037 + C38036) * C30408) *
               C13591) *
              C10810 +
          (((C38043 + C38042) * C30408 + (C43656 + C43657) * C139588) * C13591 +
           ((C38041 + C38040) * C30408 + (C43652 + C43653) * C139588) *
               C139575) *
              C10811 -
          ((((C307 * C43407 + C139442 * C43645) * C139300 +
             (C307 * C43405 + C139442 * C43643) * C5913) *
                C139588 +
            (C43653 + C43652) * C30408) *
               C139575 +
           (((C307 * C43408 + C139442 * C43646) * C139300 +
             (C307 * C43406 + C139442 * C43644) * C5913) *
                C139588 +
            (C43657 + C43656) * C30408) *
               C13591) *
              C10812) *
         C139328) /
            (p * q * std::sqrt(p + q));
    d2eeyy[42] +=
        (-std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139442 * C308) * C934 +
             (C307 * C182 + C139442 * C394) * C823 -
             (C307 * C831 + C139442 * C1118) * C935 -
             (C307 * C939 + C139442 * C1231) * C824 +
             (C307 * C832 + C139442 * C1121) * C936 +
             (C307 * C940 + C139442 * C1232) * C825) *
                C30408 +
            (C42942 + C42943 - C42944 - C42945 + C42946 + C42947) * C139588) *
               C13591 +
           ((C1240 + C1241 - C1242 - C1260 + C1245 + C1261) * C30408 +
            (C31515 + C31516 - C31517 - C31518 + C31519 + C31523) * C139588) *
               C139575) *
              C139300 * C9466 +
          (((C42944 - (C42943 + C42942) + C42945 - C42946 - C42947) * C30408 +
            (C38054 * C935 - (C32605 * C823 + C32486 * C934) + C38169 * C824 -
             (C307 * C21079 + C139442 * C21413) * C936 -
             (C307 * C21197 + C139442 * C21514) * C825) *
                C139588) *
               C13591 +
           ((C31517 - (C31516 + C31515) + C31518 - C31519 - C31523) * C30408 +
            (C35460 * C935 - (C2190 * C823 + C2090 * C934) + C35609 * C824 -
             (C307 * C21078 + C139442 * C21412) * C936 -
             (C307 * C21196 + C139442 * C21515) * C825) *
                C139588) *
               C139575) *
              C139300 * C139403)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((((C307 * C107 + C139442 * C308) * C181 +
              (C307 * C182 + C139442 * C394) * C139328) *
                 C30408 +
             (C32591 + C32607) * C139588) *
                C13591 +
            ((C401 + C417) * C30408 + C32594 * C139588) * C139575) *
               C5225 -
           ((C3772 * C139588 + (C418 + C404) * C30408) * C139575 +
            (C32595 * C139588 + (C417 + C401) * C30408) * C13591) *
               C5226 +
           ((C421 * C30408 + C34499 * C139588) * C13591 +
            ((C409 + C419) * C30408 + (C3769 + C3775) * C139588) * C139575) *
               C5227) *
              C9466 +
          (((C32594 * C30408 + C32596 * C139588) * C13591 +
            (C34499 * C30408 + (C2185 + C2195) * C139588) * C139575) *
               C5226 -
           ((C32597 * C139588 + C32595 * C30408) * C139575 +
            ((C32608 + C32600) * C139588 + (C32607 + C32591) * C30408) *
                C13591) *
               C5225 -
           ((((C307 * C1877 + C139442 * C2174) * C139328 +
              (C307 * C1771 + C139442 * C2060) * C181) *
                 C139588 +
             (C3775 + C3769) * C30408) *
                C139575 +
            ((C2195 + C2185) * C139588 + C3772 * C30408) * C13591) *
               C5227) *
              C139403)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139442 * C308) * C181 +
             (C307 * C182 + C139442 * C394) * C139328) *
                C30408 +
            (C32591 + C32607) * C139588) *
               C13591 +
           ((C401 + C417) * C30408 + C32594 * C139588) * C139575) *
              C139300 * C10809 -
          ((C32597 * C139588 + C32595 * C30408) * C139575 +
           ((C32608 + C32600) * C139588 + (C32607 + C32591) * C30408) *
               C13591) *
              C139300 * C10810 +
          (((C32600 + C32608) * C30408 + (C43726 + C43730) * C139588) * C13591 +
           (C32596 * C30408 + (C32601 + C32609) * C139588) * C139575) *
              C139300 * C10811 -
          ((((C307 * C43491 + C139442 * C43723) * C139328 +
             (C307 * C43405 + C139442 * C43643) * C181) *
                C139588 +
            (C32609 + C32601) * C30408) *
               C139575 +
           (((C307 * C43492 + C139442 * C43724) * C139328 +
             (C307 * C43406 + C139442 * C43644) * C181) *
                C139588 +
            (C43730 + C43726) * C30408) *
               C13591) *
              C139300 * C10812)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[42] +=
        (-std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139442 * C308) * C9616 +
             (C307 * C245 + C139442 * C474) * C9466 - C32483 * C9617 -
             C32719 * C139403) *
                C30408 +
            (C32483 * C9616 + C32719 * C9466 - C32486 * C9617 -
             C32720 * C139403) *
                C139588) *
               C13591 +
           ((C9841 + C9842 - C9843 - C9844) * C30408 +
            (C42150 + C42151 - C42152 - C42153) * C139588) *
               C139575) *
              C823 +
          (((C35459 * C9617 -
             ((C307 * C1029 + C139442 * C1339) * C9466 +
              (C307 * C831 + C139442 * C1118) * C9616) +
             C35751 * C139403) *
                C30408 +
            (C38054 * C9617 - (C35751 * C9466 + C35459 * C9616) +
             C38271 * C139403) *
                C139588) *
               C13591 +
           ((C11854 - (C11855 + C11856) + C11857) * C30408 +
            (C35460 * C9617 - (C4798 * C9466 + C4566 * C9616) +
             C35752 * C139403) *
                C139588) *
               C139575) *
              C824 +
          ((((C307 * C832 + C139442 * C1121) * C9616 +
             (C307 * C1030 + C139442 * C1340) * C9466 - C41044 * C9617 -
             C41255 * C139403) *
                C30408 +
            (C41044 * C9616 + C41255 * C9466 -
             (C307 * C21079 + C139442 * C21413) * C9617 -
             (C307 * C21305 + C139442 * C21614) * C139403) *
                C139588) *
               C13591 +
           ((C1154 * C9616 + C1360 * C9466 - C31415 * C9617 -
             C31627 * C139403) *
                C30408 +
            (C31415 * C9616 + C31627 * C9466 -
             (C307 * C21078 + C139442 * C21412) * C9617 -
             (C307 * C21304 + C139442 * C21615) * C139403) *
                C139588) *
               C139575) *
              C825) *
         C139300) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139442 * C308) * C9616 +
             (C307 * C245 + C139442 * C474) * C9466 - C32483 * C9617 -
             C32719 * C139403) *
                C30408 +
            (C32483 * C9616 + C32719 * C9466 - C32486 * C9617 -
             C32720 * C139403) *
                C139588) *
               C13591 +
           ((C9841 + C9842 - C9843 - C9844) * C30408 +
            (C42150 + C42151 - C42152 - C42153) * C139588) *
               C139575) *
              C139328 * C5225 +
          (((C9843 - (C9842 + C9841) + C9844) * C30408 +
            (C42152 - (C42151 + C42150) + C42153) * C139588) *
               C13591 +
           ((C9847 - (C9846 + C9845) + C9848) * C30408 +
            (C42154 - (C42155 + C42156) + C42157) * C139588) *
               C139575) *
              C139328 * C5226 +
          ((C9855 * C30408 + (C42156 + C42155 - C42154 - C42157) * C139588) *
               C13591 +
           ((C9851 + C9850 - C9849 - C9852) * C30408 +
            (C3692 * C9616 + C3865 * C9466 -
             (C307 * C1771 + C139442 * C2060) * C9617 -
             (C307 * C1970 + C139442 * C2276) * C139403) *
                C139588) *
               C139575) *
              C139328 * C5227)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139442 * C308) * C10931 +
            (C307 * C245 + C139442 * C474) * C10809 - C32483 * C10932 -
            C32719 * C10810 + C32486 * C10933 + C32720 * C10811 -
            C43654 * C10934 - C43801 * C10812) *
               C30408 +
           (C32483 * C10931 + C32719 * C10809 - C32486 * C10932 -
            C32720 * C10810 + C43654 * C10933 + C43801 * C10811 -
            (C307 * C43406 + C139442 * C43644) * C10934 -
            (C307 * C43568 + C139442 * C43796) * C10812) *
               C139588) *
              C13591 +
          ((C337 * C10931 + C493 * C10809 - C2086 * C10932 - C2294 * C10810 +
            C2090 * C10933 + C2295 * C10811 - C32487 * C10934 -
            C32721 * C10812) *
               C30408 +
           (C2086 * C10931 + C2294 * C10809 - C2090 * C10932 - C2295 * C10810 +
            C32487 * C10933 + C32721 * C10811 -
            (C307 * C43405 + C139442 * C43643) * C10934 -
            (C307 * C43567 + C139442 * C43797) * C10812) *
               C139588) *
              C139575) *
         C139328 * C139300) /
            (p * q * std::sqrt(p + q));
    d2eezx[42] +=
        (-std::pow(Pi, 2.5) *
         (((((C30812 * C107 + C30408 * C555 + C30813 * C1767 +
              C139588 * C2376) *
                 C5913 +
             (C30812 * C116 + C30408 * C561 + C30813 * C1777 +
              C139588 * C2383) *
                 C139300) *
                C13591 +
            ((C30840 + C30839) * C5913 + (C30842 + C30841) * C139300) *
                C139575) *
               C139442 * C9466 -
           (((C32840 + C32839) * C139300 + (C32838 + C32837) * C5913) *
                C139575 +
            ((C30813 * C1783 + C139588 * C2387 + C30812 * C1777 +
              C30408 * C2383) *
                 C139300 +
             (C30813 * C1768 + C139588 * C2379 + C30812 * C1767 +
              C30408 * C2376) *
                 C5913) *
                C13591) *
               C139442 * C139403) *
              C823 +
          ((((C30812 * C4223 + C30408 * C4899 + C30813 * C6442 +
              C139588 * C6922) *
                 C5913 +
             (C30812 * C4230 + C30408 * C4903 + C30813 * C6445 +
              C139588 * C6925) *
                 C139300) *
                C13591 +
            ((C35893 + C35892) * C5913 + (C35895 + C35894) * C139300) *
                C139575) *
               C139442 * C139403 -
           (((C31746 + C31745) * C139300 + (C31744 + C31743) * C5913) *
                C139575 +
            ((C30813 * C4230 + C139588 * C4903 + C30812 * C841 +
              C30408 * C1447) *
                 C139300 +
             (C30813 * C4223 + C139588 * C4899 + C30812 * C831 +
              C30408 * C1440) *
                 C5913) *
                C13591) *
               C139442 * C9466) *
              C824 +
          ((((C30812 * C832 + C30408 * C1443 + C30813 * C8754 +
              C139588 * C9234) *
                 C5913 +
             (C30812 * C847 + C30408 * C1451 + C30813 * C8757 +
              C139588 * C9237) *
                 C139300) *
                C13591 +
            ((C31748 + C31747) * C5913 + (C31750 + C31749) * C139300) *
                C139575) *
               C139442 * C9466 -
           (((C30813 * C21080 + C139588 * C21716 + C30812 * C8756 +
              C30408 * C9236) *
                 C139300 +
             (C30813 * C21078 + C139588 * C21714 + C30812 * C8753 +
              C30408 * C9233) *
                 C5913) *
                C139575 +
            ((C30813 * C21081 + C139588 * C21717 + C30812 * C8757 +
              C30408 * C9237) *
                 C139300 +
             (C30813 * C21079 + C139588 * C21715 + C30812 * C8754 +
              C30408 * C9234) *
                 C5913) *
                C13591) *
               C139442 * C139403) *
              C825)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1767 + C139588 * C2376) *
                C5230 +
            (C30812 * C116 + C30408 * C561 + C30813 * C1777 + C139588 * C2383) *
                C5225 -
            (C30839 + C30840) * C5231 - (C30841 + C30842) * C5226 +
            (C30843 + C30844) * C5232 + (C30845 + C30846) * C5227) *
               C13591 +
           ((C30840 + C30839) * C5230 + (C30842 + C30841) * C5225 -
            (C30844 + C30843) * C5231 - (C30846 + C30845) * C5226 +
            (C30848 + C30847) * C5232 + (C30850 + C30849) * C5227) *
               C139575) *
              C139442 * C9466 +
          (((C32837 + C32838) * C5231 -
            ((C30813 * C1783 + C139588 * C2387 + C30812 * C1777 +
              C30408 * C2383) *
                 C5225 +
             (C30813 * C1768 + C139588 * C2379 + C30812 * C1767 +
              C30408 * C2376) *
                 C5230) +
            (C32839 + C32840) * C5226 - (C34712 + C34713) * C5232 -
            (C34714 + C34715) * C5227) *
               C13591 +
           ((C34713 + C34712) * C5231 -
            ((C32840 + C32839) * C5225 + (C32838 + C32837) * C5230) +
            (C34715 + C34714) * C5226 -
            (C30813 * C1771 + C139588 * C2382 + C30812 * C1766 +
             C30408 * C2378) *
                C5232 -
            (C30813 * C1787 + C139588 * C2390 + C30812 * C1779 +
             C30408 * C2386) *
                C5227) *
               C139575) *
              C139442 * C139403) *
         C139328) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1767 + C139588 * C2376) *
                C5913 +
            (C30812 * C116 + C30408 * C561 + C30813 * C1777 + C139588 * C2383) *
                C139300) *
               C13591 +
           ((C30840 + C30839) * C5913 + (C30842 + C30841) * C139300) *
               C139575) *
              C139442 * C10809 -
          (((C32840 + C32839) * C139300 + (C32838 + C32837) * C5913) * C139575 +
           ((C30813 * C1783 + C139588 * C2387 + C30812 * C1777 +
             C30408 * C2383) *
                C139300 +
            (C30813 * C1768 + C139588 * C2379 + C30812 * C1767 +
             C30408 * C2376) *
                C5913) *
               C13591) *
              C139442 * C10810 +
          (((C30812 * C1768 + C30408 * C2379 + C30813 * C10815 +
             C139588 * C11155) *
                C5913 +
            (C30812 * C1783 + C30408 * C2387 + C30813 * C10818 +
             C139588 * C11158) *
                C139300) *
               C13591 +
           ((C32842 + C32841) * C5913 + (C32844 + C32843) * C139300) *
               C139575) *
              C139442 * C10811 -
          (((C30813 * C43407 + C139588 * C43869 + C30812 * C10817 +
             C30408 * C11157) *
                C139300 +
            (C30813 * C43405 + C139588 * C43867 + C30812 * C10814 +
             C30408 * C11154) *
                C5913) *
               C139575 +
           ((C30813 * C43408 + C139588 * C43870 + C30812 * C10818 +
             C30408 * C11158) *
                C139300 +
            (C30813 * C43406 + C139588 * C43868 + C30812 * C10815 +
             C30408 * C11155) *
                C5913) *
               C13591) *
              C139442 * C10812) *
         C139328) /
            (p * q * std::sqrt(p + q));
    d2eezy[42] +=
        (-std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1767 + C139588 * C2376) *
                C934 +
            (C30812 * C182 + C30408 * C641 + C30813 * C1873 + C139588 * C2492) *
                C823 -
            (C30813 * C4223 + C139588 * C4899 + C30812 * C831 +
             C30408 * C1440) *
                C935 -
            (C30813 * C4337 + C139588 * C5017 + C30812 * C939 +
             C30408 * C1553) *
                C824 +
            (C30812 * C832 + C30408 * C1443 + C30813 * C8754 +
             C139588 * C9234) *
                C936 +
            (C30812 * C940 + C30408 * C1554 + C30813 * C8840 +
             C139588 * C9312) *
                C825) *
               C13591 +
           ((C30840 + C30839) * C934 + (C30929 + C30930) * C823 -
            (C31744 + C31743) * C935 - (C31857 + C31858) * C824 +
            (C31748 + C31747) * C936 + (C31859 + C31860) * C825) *
               C139575) *
              C139442 * C139300 * C9466 +
          (((C30812 * C4223 + C30408 * C4899 + C30813 * C6442 +
             C139588 * C6922) *
                C935 -
            ((C30813 * C1874 + C139588 * C2493 + C30812 * C1873 +
              C30408 * C2492) *
                 C823 +
             (C30813 * C1768 + C139588 * C2379 + C30812 * C1767 +
              C30408 * C2376) *
                 C934) +
            (C30812 * C4337 + C30408 * C5017 + C30813 * C6528 +
             C139588 * C7000) *
                C824 -
            (C30813 * C21079 + C139588 * C21715 + C30812 * C8754 +
             C30408 * C9234) *
                C936 -
            (C30813 * C21197 + C139588 * C21830 + C30812 * C8840 +
             C30408 * C9312) *
                C825) *
               C13591 +
           ((C35893 + C35892) * C935 -
            ((C32952 + C32951) * C823 + (C32838 + C32837) * C934) +
            (C36030 + C36031) * C824 -
            (C30813 * C21078 + C139588 * C21714 + C30812 * C8753 +
             C30408 * C9233) *
                C936 -
            (C30813 * C21196 + C139588 * C21831 + C30812 * C8839 +
             C30408 * C9313) *
                C825) *
               C139575) *
              C139442 * C139300 * C139403)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C30812 * C107 + C30408 * C555 + C30813 * C1767 +
              C139588 * C2376) *
                 C181 +
             (C30812 * C182 + C30408 * C641 + C30813 * C1873 +
              C139588 * C2492) *
                 C139328) *
                C13591 +
            ((C30840 + C30839) * C181 + (C30929 + C30930) * C139328) *
                C139575) *
               C139442 * C5225 -
           (((C30931 + C30932) * C139328 + (C30844 + C30843) * C181) * C139575 +
            ((C30930 + C30929) * C139328 + (C30839 + C30840) * C181) * C13591) *
               C139442 * C5226 +
           (((C30843 + C30844) * C181 + (C30932 + C30931) * C139328) * C13591 +
            ((C30848 + C30847) * C181 + (C30933 + C30934) * C139328) *
                C139575) *
               C139442 * C5227) *
              C9466 +
          ((((C32837 + C32838) * C181 + (C32951 + C32952) * C139328) * C13591 +
            ((C34713 + C34712) * C181 + (C34818 + C34819) * C139328) *
                C139575) *
               C139442 * C5226 -
           (((C32952 + C32951) * C139328 + (C32838 + C32837) * C181) * C139575 +
            ((C30813 * C1874 + C139588 * C2493 + C30812 * C1873 +
              C30408 * C2492) *
                 C139328 +
             (C30813 * C1768 + C139588 * C2379 + C30812 * C1767 +
              C30408 * C2376) *
                 C181) *
                C13591) *
               C139442 * C5225 -
           (((C30813 * C1877 + C139588 * C2496 + C30812 * C1872 +
              C30408 * C2491) *
                 C139328 +
             (C30813 * C1771 + C139588 * C2382 + C30812 * C1766 +
              C30408 * C2378) *
                 C181) *
                C139575 +
            ((C34819 + C34818) * C139328 + (C34712 + C34713) * C181) * C13591) *
               C139442 * C5227) *
              C139403)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1767 + C139588 * C2376) *
                C181 +
            (C30812 * C182 + C30408 * C641 + C30813 * C1873 + C139588 * C2492) *
                C139328) *
               C13591 +
           ((C30840 + C30839) * C181 + (C30929 + C30930) * C139328) * C139575) *
              C139442 * C139300 * C10809 -
          (((C32952 + C32951) * C139328 + (C32838 + C32837) * C181) * C139575 +
           ((C30813 * C1874 + C139588 * C2493 + C30812 * C1873 +
             C30408 * C2492) *
                C139328 +
            (C30813 * C1768 + C139588 * C2379 + C30812 * C1767 +
             C30408 * C2376) *
                C181) *
               C13591) *
              C139442 * C139300 * C10810 +
          (((C30812 * C1768 + C30408 * C2379 + C30813 * C10815 +
             C139588 * C11155) *
                C181 +
            (C30812 * C1874 + C30408 * C2493 + C30813 * C10877 +
             C139588 * C11211) *
                C139328) *
               C13591 +
           ((C32842 + C32841) * C181 + (C32953 + C32954) * C139328) * C139575) *
              C139442 * C139300 * C10811 -
          (((C30813 * C43491 + C139588 * C43937 + C30812 * C10876 +
             C30408 * C11210) *
                C139328 +
            (C30813 * C43405 + C139588 * C43867 + C30812 * C10814 +
             C30408 * C11154) *
                C181) *
               C139575 +
           ((C30813 * C43492 + C139588 * C43938 + C30812 * C10877 +
             C30408 * C11211) *
                C139328 +
            (C30813 * C43406 + C139588 * C43868 + C30812 * C10815 +
             C30408 * C11155) *
                C181) *
               C13591) *
              C139442 * C139300 * C10812)) /
            (p * q * std::sqrt(p + q));
    d2eezz[42] +=
        (-std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1767 + C139588 * C2376) *
                C9616 +
            (C30812 * C245 + C30408 * C719 + C30813 * C1965 + C139588 * C2591) *
                C9466 -
            (C30813 * C1768 + C139588 * C2379 + C30812 * C1767 +
             C30408 * C2376) *
                C9617 -
            (C30813 * C1966 + C139588 * C2592 + C30812 * C1965 +
             C30408 * C2591) *
                C139403) *
               C13591 +
           ((C30840 + C30839) * C9616 + (C31013 + C31014) * C9466 -
            (C32838 + C32837) * C9617 - (C33061 + C33062) * C139403) *
               C139575) *
              C139442 * C823 +
          (((C30812 * C4223 + C30408 * C4899 + C30813 * C6442 +
             C139588 * C6922) *
                C9617 -
            ((C30813 * C4443 + C139588 * C5133 + C30812 * C1029 +
              C30408 * C1661) *
                 C9466 +
             (C30813 * C4223 + C139588 * C4899 + C30812 * C831 +
              C30408 * C1440) *
                 C9616) +
            (C30812 * C4443 + C30408 * C5133 + C30813 * C6608 +
             C139588 * C7077) *
                C139403) *
               C13591 +
           ((C35893 + C35892) * C9617 -
            ((C31967 + C31968) * C9466 + (C31744 + C31743) * C9616) +
            (C36166 + C36167) * C139403) *
               C139575) *
              C139442 * C824 +
          (((C30812 * C832 + C30408 * C1443 + C30813 * C8754 +
             C139588 * C9234) *
                C9616 +
            (C30812 * C1030 + C30408 * C1662 + C30813 * C8920 +
             C139588 * C9389) *
                C9466 -
            (C30813 * C21079 + C139588 * C21715 + C30812 * C8754 +
             C30408 * C9234) *
                C9617 -
            (C30813 * C21305 + C139588 * C21933 + C30812 * C8920 +
             C30408 * C9389) *
                C139403) *
               C13591 +
           ((C31748 + C31747) * C9616 + (C31969 + C31970) * C9466 -
            (C30813 * C21078 + C139588 * C21714 + C30812 * C8753 +
             C30408 * C9233) *
                C9617 -
            (C30813 * C21304 + C139588 * C21934 + C30812 * C8919 +
             C30408 * C9390) *
                C139403) *
               C139575) *
              C139442 * C825) *
         C139300) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1767 + C139588 * C2376) *
                C9616 +
            (C30812 * C245 + C30408 * C719 + C30813 * C1965 + C139588 * C2591) *
                C9466 -
            (C30813 * C1768 + C139588 * C2379 + C30812 * C1767 +
             C30408 * C2376) *
                C9617 -
            (C30813 * C1966 + C139588 * C2592 + C30812 * C1965 +
             C30408 * C2591) *
                C139403) *
               C13591 +
           ((C30840 + C30839) * C9616 + (C31013 + C31014) * C9466 -
            (C32838 + C32837) * C9617 - (C33061 + C33062) * C139403) *
               C139575) *
              C139442 * C139328 * C5225 +
          (((C32837 + C32838) * C9617 -
            ((C31014 + C31013) * C9466 + (C30839 + C30840) * C9616) +
            (C33062 + C33061) * C139403) *
               C13591 +
           ((C34713 + C34712) * C9617 -
            ((C31015 + C31016) * C9466 + (C30844 + C30843) * C9616) +
            (C34922 + C34923) * C139403) *
               C139575) *
              C139442 * C139328 * C5226 +
          (((C30843 + C30844) * C9616 + (C31016 + C31015) * C9466 -
            (C34712 + C34713) * C9617 - (C34923 + C34922) * C139403) *
               C13591 +
           ((C30848 + C30847) * C9616 + (C31017 + C31018) * C9466 -
            (C30813 * C1771 + C139588 * C2382 + C30812 * C1766 +
             C30408 * C2378) *
                C9617 -
            (C30813 * C1970 + C139588 * C2598 + C30812 * C1969 +
             C30408 * C2597) *
                C139403) *
               C139575) *
              C139442 * C139328 * C5227)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C30812 * C107 + C30408 * C555 + C30813 * C1767 + C139588 * C2376) *
               C10931 +
           (C30812 * C245 + C30408 * C719 + C30813 * C1965 + C139588 * C2591) *
               C10809 -
           (C30813 * C1768 + C139588 * C2379 + C30812 * C1767 +
            C30408 * C2376) *
               C10932 -
           (C30813 * C1966 + C139588 * C2592 + C30812 * C1965 +
            C30408 * C2591) *
               C10810 +
           (C30812 * C1768 + C30408 * C2379 + C30813 * C10815 +
            C139588 * C11155) *
               C10933 +
           (C30812 * C1966 + C30408 * C2592 + C30813 * C10937 +
            C139588 * C11262) *
               C10811 -
           (C30813 * C43406 + C139588 * C43868 + C30812 * C10815 +
            C30408 * C11155) *
               C10934 -
           (C30813 * C43568 + C139588 * C44005 + C30812 * C10937 +
            C30408 * C11262) *
               C10812) *
              C13591 +
          ((C30840 + C30839) * C10931 + (C31013 + C31014) * C10809 -
           (C32838 + C32837) * C10932 - (C33061 + C33062) * C10810 +
           (C32842 + C32841) * C10933 + (C33063 + C33064) * C10811 -
           (C30813 * C43405 + C139588 * C43867 + C30812 * C10814 +
            C30408 * C11154) *
               C10934 -
           (C30813 * C43567 + C139588 * C44006 + C30812 * C10936 +
            C30408 * C11263) *
               C10812) *
              C139575) *
         C139442 * C139328 * C139300) /
            (p * q * std::sqrt(p + q));
    d2eexx[43] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139575 * C114) *
                C137108 +
            (C13595 * C116 + C13591 * C125 + C13596 * C117 + C139575 * C126) *
                C139552 -
            (C13596 * C109 + C139575 * C115 + C13595 * C108 + C13591 * C114) *
                C137101 -
            (C13596 * C118 + C139575 * C127 + C13595 * C117 + C13591 * C126) *
                C139305) *
               C139442 * C30408 +
           ((C32101 + C32102) * C137108 + (C32103 + C32104) * C139552 -
            (C32105 + C32106) * C137101 - (C32107 + C32108) * C139305) *
               C139442 * C139588) *
              C139593 +
          (((C32106 + C32105) * C137101 -
            ((C32104 + C32103) * C139552 + (C32102 + C32101) * C137108) +
            (C32108 + C32107) * C139305) *
               C139442 * C30408 +
           ((C32109 + C32110) * C137101 -
            ((C32111 + C32112) * C139552 + (C32113 + C32114) * C137108) +
            (C32115 + C32116) * C139305) *
               C139442 * C139588) *
              C139594 +
          (((C32114 + C32113) * C137108 + (C32112 + C32111) * C139552 -
            (C32110 + C32109) * C137101 - (C32116 + C32115) * C139305) *
               C139442 * C30408 +
           ((C43422 + C43423) * C137108 + (C43424 + C43425) * C139552 -
            (C13596 * C10813 + C139575 * C10819 + C13595 * C10814 +
             C13591 * C10820) *
                C137101 -
            (C13596 * C10816 + C139575 * C10822 + C13595 * C10817 +
             C13591 * C10823) *
                C139305) *
               C139442 * C139588) *
              C12239) *
         C139328) /
        (p * q * std::sqrt(p + q));
    d2eexy[43] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139575 * C114) *
                 C181 +
             (C13595 * C182 + C13591 * C188 + C13596 * C183 + C139575 * C189) *
                 C139328) *
                C139442 * C30408 +
            ((C32101 + C32102) * C181 + (C32231 + C32232) * C139328) * C139442 *
                C139588) *
               C139552 -
           (((C32233 + C32234) * C139328 + (C32105 + C32106) * C181) * C139442 *
                C139588 +
            ((C13596 * C184 + C139575 * C190 + C13595 * C183 + C13591 * C189) *
                 C139328 +
             (C13596 * C109 + C139575 * C115 + C13595 * C108 + C13591 * C114) *
                 C181) *
                C139442 * C30408) *
               C139305) *
              C139593 +
          ((((C32106 + C32105) * C181 + (C32234 + C32233) * C139328) * C139442 *
                C30408 +
            ((C32109 + C32110) * C181 + (C32235 + C32236) * C139328) * C139442 *
                C139588) *
               C139305 -
           (((C32237 + C32238) * C139328 + (C32113 + C32114) * C181) * C139442 *
                C139588 +
            ((C32232 + C32231) * C139328 + (C32102 + C32101) * C181) * C139442 *
                C30408) *
               C139552) *
              C139594 +
          ((((C32114 + C32113) * C181 + (C32238 + C32237) * C139328) * C139442 *
                C30408 +
            ((C43422 + C43423) * C181 + (C43500 + C43501) * C139328) * C139442 *
                C139588) *
               C139552 -
           (((C13596 * C10875 + C139575 * C10878 + C13595 * C10876 +
              C13591 * C10879) *
                 C139328 +
             (C13596 * C10813 + C139575 * C10819 + C13595 * C10814 +
              C13591 * C10820) *
                 C181) *
                C139442 * C139588 +
            ((C32236 + C32235) * C139328 + (C32110 + C32109) * C181) * C139442 *
                C30408) *
               C139305) *
              C12239)) /
        (p * q * std::sqrt(p + q));
    d2eexz[43] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139575 * C114) *
                C12388 +
            (C13595 * C245 + C13591 * C251 + C13596 * C246 + C139575 * C252) *
                C139593 -
            (C32102 + C32101) * C12389 - (C32353 + C32354) * C139594 +
            (C32114 + C32113) * C12390 + (C32355 + C32356) * C12239) *
               C139442 * C30408 +
           ((C32101 + C32102) * C12388 + (C32354 + C32353) * C139593 -
            (C32113 + C32114) * C12389 - (C32356 + C32355) * C139594 +
            (C43422 + C43423) * C12390 + (C43577 + C43576) * C12239) *
               C139442 * C139588) *
              C139328 * C139552 +
          (((C32106 + C32105) * C12389 -
            ((C13596 * C247 + C139575 * C253 + C13595 * C246 + C13591 * C252) *
                 C139593 +
             (C13596 * C109 + C139575 * C115 + C13595 * C108 + C13591 * C114) *
                 C12388) +
            (C32357 + C32358) * C139594 - (C32110 + C32109) * C12390 -
            (C32359 + C32360) * C12239) *
               C139442 * C30408 +
           ((C32109 + C32110) * C12389 -
            ((C32358 + C32357) * C139593 + (C32105 + C32106) * C12388) +
            (C32360 + C32359) * C139594 -
            (C13596 * C10813 + C139575 * C10819 + C13595 * C10814 +
             C13591 * C10820) *
                C12390 -
            (C13596 * C10935 + C139575 * C10938 + C13595 * C10936 +
             C13591 * C10939) *
                C12239) *
               C139442 * C139588) *
              C139328 * C139305)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[43] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C307 * C107 + C139442 * C308) * C137108 +
                       (C307 * C116 + C139442 * C314) * C139552 -
                       C337 * C137101 - C338 * C139305) *
                          C30408 +
                      (C39974 + C39975 - C39976 - C39977) * C139588) *
                         C13591 +
                     ((C337 * C137108 + C338 * C139552 - C339 * C137101 -
                       C340 * C139305) *
                          C30408 +
                      (C39978 + C39979 - C39980 - C39981) * C139588) *
                         C139575) *
                        C139593 +
                    (((C39976 - (C39975 + C39974) + C39977) * C30408 +
                      (C45574 - (C45575 + C45576) + C45577) * C139588) *
                         C13591 +
                     ((C39980 - (C39979 + C39978) + C39981) * C30408 +
                      (C45578 - (C45579 + C45580) + C45581) * C139588) *
                         C139575) *
                        C139594 +
                    (((C45576 + C45575 - C45574 - C45577) * C30408 +
                      (C43654 * C137108 + C43655 * C139552 - C32487 * C137101 -
                       C32488 * C139305) *
                          C139588) *
                         C13591 +
                     ((C45580 + C45579 - C45578 - C45581) * C30408 +
                      (C32487 * C137108 + C32488 * C139552 -
                       (C307 * C10813 + C139442 * C10991) * C137101 -
                       (C307 * C10816 + C139442 * C10994) * C139305) *
                          C139588) *
                         C139575) *
                        C12239) *
                   C139328) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[43] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C307 * C107 + C139442 * C308) * C181 +
              (C307 * C182 + C139442 * C394) * C139328) *
                 C30408 +
             (C32591 + C32607) * C139588) *
                C13591 +
            ((C401 + C417) * C30408 + C32594 * C139588) * C139575) *
               C139552 -
           ((C3772 * C139588 + (C418 + C404) * C30408) * C139575 +
            (C32595 * C139588 + (C417 + C401) * C30408) * C13591) *
               C139305) *
              C139593 +
          (((C32594 * C30408 + C32596 * C139588) * C13591 +
            (C34499 * C30408 + (C2185 + C2195) * C139588) * C139575) *
               C139305 -
           ((C32597 * C139588 + C32595 * C30408) * C139575 +
            ((C32608 + C32600) * C139588 + (C32607 + C32591) * C30408) *
                C13591) *
               C139552) *
              C139594 +
          ((((C32600 + C32608) * C30408 + (C43726 + C43730) * C139588) *
                C13591 +
            (C32596 * C30408 + (C32601 + C32609) * C139588) * C139575) *
               C139552 -
           ((((C307 * C10875 + C139442 * C11047) * C139328 +
              (C307 * C10813 + C139442 * C10991) * C181) *
                 C139588 +
             (C2195 + C2185) * C30408) *
                C139575 +
            ((C32609 + C32601) * C139588 + C32597 * C30408) * C13591) *
               C139305) *
              C12239)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[43] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139442 * C308) * C12388 +
             (C307 * C245 + C139442 * C474) * C139593 - C32483 * C12389 -
             C32719 * C139594 + C32486 * C12390 + C32720 * C12239) *
                C30408 +
            (C32483 * C12388 + C32719 * C139593 - C32486 * C12389 -
             C32720 * C139594 + C43654 * C12390 + C43801 * C12239) *
                C139588) *
               C13591 +
           ((C12614 + C12615 - C12616 - C12617 + C12618 + C12619) * C30408 +
            (C45778 + C45779 - C45780 - C45781 + C45782 + C45783) * C139588) *
               C139575) *
              C139328 * C139552 +
          (((C12616 - (C12615 + C12614) + C12617 - C12618 - C12619) * C30408 +
            (C45780 - (C45779 + C45778) + C45781 - C45782 - C45783) * C139588) *
               C13591 +
           ((C12622 - (C12621 + C12620) + C12623 - C12624 - C12625) * C30408 +
            (C2092 * C12389 - (C2296 * C139593 + C2088 * C12388) +
             C2297 * C139594 - (C307 * C10813 + C139442 * C10991) * C12390 -
             (C307 * C10935 + C139442 * C11102) * C12239) *
                C139588) *
               C139575) *
              C139328 * C139305)) /
        (p * q * std::sqrt(p + q));
    d2eezx[43] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1767 + C139588 * C2376) *
                C137108 +
            (C30812 * C116 + C30408 * C561 + C30813 * C1777 + C139588 * C2383) *
                C139552 -
            (C30839 + C30840) * C137101 - (C30841 + C30842) * C139305) *
               C13591 +
           ((C30840 + C30839) * C137108 + (C30842 + C30841) * C139552 -
            (C30844 + C30843) * C137101 - (C30846 + C30845) * C139305) *
               C139575) *
              C139442 * C139593 +
          (((C32837 + C32838) * C137101 -
            ((C30813 * C1783 + C139588 * C2387 + C30812 * C1777 +
              C30408 * C2383) *
                 C139552 +
             (C30813 * C1768 + C139588 * C2379 + C30812 * C1767 +
              C30408 * C2376) *
                 C137108) +
            (C32839 + C32840) * C139305) *
               C13591 +
           ((C34713 + C34712) * C137101 -
            ((C32840 + C32839) * C139552 + (C32838 + C32837) * C137108) +
            (C34715 + C34714) * C139305) *
               C139575) *
              C139442 * C139594 +
          (((C30812 * C1768 + C30408 * C2379 + C30813 * C10815 +
             C139588 * C11155) *
                C137108 +
            (C30812 * C1783 + C30408 * C2387 + C30813 * C10818 +
             C139588 * C11158) *
                C139552 -
            (C32841 + C32842) * C137101 - (C32843 + C32844) * C139305) *
               C13591 +
           ((C32842 + C32841) * C137108 + (C32844 + C32843) * C139552 -
            (C30813 * C10813 + C139588 * C11153 + C30812 * C1770 +
             C30408 * C2381) *
                C137101 -
            (C30813 * C10816 + C139588 * C11156 + C30812 * C1785 +
             C30408 * C2389) *
                C139305) *
               C139575) *
              C139442 * C12239) *
         C139328) /
        (p * q * std::sqrt(p + q));
    d2eezy[43] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C30812 * C107 + C30408 * C555 + C30813 * C1767 +
              C139588 * C2376) *
                 C181 +
             (C30812 * C182 + C30408 * C641 + C30813 * C1873 +
              C139588 * C2492) *
                 C139328) *
                C13591 +
            ((C30840 + C30839) * C181 + (C30929 + C30930) * C139328) *
                C139575) *
               C139442 * C139552 -
           (((C30931 + C30932) * C139328 + (C30844 + C30843) * C181) * C139575 +
            ((C30930 + C30929) * C139328 + (C30839 + C30840) * C181) * C13591) *
               C139442 * C139305) *
              C139593 +
          ((((C32837 + C32838) * C181 + (C32951 + C32952) * C139328) * C13591 +
            ((C34713 + C34712) * C181 + (C34818 + C34819) * C139328) *
                C139575) *
               C139442 * C139305 -
           (((C32952 + C32951) * C139328 + (C32838 + C32837) * C181) * C139575 +
            ((C30813 * C1874 + C139588 * C2493 + C30812 * C1873 +
              C30408 * C2492) *
                 C139328 +
             (C30813 * C1768 + C139588 * C2379 + C30812 * C1767 +
              C30408 * C2376) *
                 C181) *
                C13591) *
               C139442 * C139552) *
              C139594 +
          ((((C30812 * C1768 + C30408 * C2379 + C30813 * C10815 +
              C139588 * C11155) *
                 C181 +
             (C30812 * C1874 + C30408 * C2493 + C30813 * C10877 +
              C139588 * C11211) *
                 C139328) *
                C13591 +
            ((C32842 + C32841) * C181 + (C32953 + C32954) * C139328) *
                C139575) *
               C139442 * C139552 -
           (((C30813 * C10875 + C139588 * C11209 + C30812 * C1876 +
              C30408 * C2495) *
                 C139328 +
             (C30813 * C10813 + C139588 * C11153 + C30812 * C1770 +
              C30408 * C2381) *
                 C181) *
                C139575 +
            ((C32954 + C32953) * C139328 + (C32841 + C32842) * C181) * C13591) *
               C139442 * C139305) *
              C12239)) /
        (p * q * std::sqrt(p + q));
    d2eezz[43] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1767 + C139588 * C2376) *
                C12388 +
            (C30812 * C245 + C30408 * C719 + C30813 * C1965 + C139588 * C2591) *
                C139593 -
            (C30813 * C1768 + C139588 * C2379 + C30812 * C1767 +
             C30408 * C2376) *
                C12389 -
            (C30813 * C1966 + C139588 * C2592 + C30812 * C1965 +
             C30408 * C2591) *
                C139594 +
            (C30812 * C1768 + C30408 * C2379 + C30813 * C10815 +
             C139588 * C11155) *
                C12390 +
            (C30812 * C1966 + C30408 * C2592 + C30813 * C10937 +
             C139588 * C11262) *
                C12239) *
               C13591 +
           ((C30840 + C30839) * C12388 + (C31013 + C31014) * C139593 -
            (C32838 + C32837) * C12389 - (C33061 + C33062) * C139594 +
            (C32842 + C32841) * C12390 + (C33063 + C33064) * C12239) *
               C139575) *
              C139442 * C139328 * C139552 +
          (((C32837 + C32838) * C12389 -
            ((C31014 + C31013) * C139593 + (C30839 + C30840) * C12388) +
            (C33062 + C33061) * C139594 - (C32841 + C32842) * C12390 -
            (C33064 + C33063) * C12239) *
               C13591 +
           ((C34713 + C34712) * C12389 -
            ((C31015 + C31016) * C139593 + (C30844 + C30843) * C12388) +
            (C34922 + C34923) * C139594 -
            (C30813 * C10813 + C139588 * C11153 + C30812 * C1770 +
             C30408 * C2381) *
                C12390 -
            (C30813 * C10935 + C139588 * C11264 + C30812 * C1968 +
             C30408 * C2596) *
                C12239) *
               C139575) *
              C139442 * C139328 * C139305)) /
        (p * q * std::sqrt(p + q));
    d2eexx[44] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139575 * C114) *
                C5230 +
            (C13595 * C116 + C13591 * C125 + C13596 * C117 + C139575 * C126) *
                C5225 -
            (C13596 * C109 + C139575 * C115 + C13595 * C108 + C13591 * C114) *
                C5231 -
            (C13596 * C118 + C139575 * C127 + C13595 * C117 + C13591 * C126) *
                C5226 +
            (C13595 * C109 + C13591 * C115 + C13596 * C110 + C139575 * C119) *
                C5232 +
            (C13595 * C118 + C13591 * C127 + C13596 * C120 + C139575 * C128) *
                C5227) *
               C139442 * C30408 +
           ((C32101 + C32102) * C5230 + (C32103 + C32104) * C5225 -
            (C32105 + C32106) * C5231 - (C32107 + C32108) * C5226 +
            (C34079 + C34080) * C5232 + (C34081 + C34082) * C5227) *
               C139442 * C139588) *
              C9466 +
          (((C32106 + C32105) * C5231 -
            ((C32104 + C32103) * C5225 + (C32102 + C32101) * C5230) +
            (C32108 + C32107) * C5226 - (C34080 + C34079) * C5232 -
            (C34082 + C34081) * C5227) *
               C139442 * C30408 +
           ((C32109 + C32110) * C5231 -
            ((C32111 + C32112) * C5225 + (C32113 + C32114) * C5230) +
            (C32115 + C32116) * C5226 -
            (C13596 * C1771 + C139575 * C1786 + C13595 * C1770 +
             C13591 * C1782) *
                C5232 -
            (C13596 * C1787 + C139575 * C1795 + C13595 * C1785 +
             C13591 * C1794) *
                C5227) *
               C139442 * C139588) *
              C139403) *
         C139328) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139575 * C114) *
                 C5913 +
             (C13595 * C116 + C13591 * C125 + C13596 * C117 + C139575 * C126) *
                 C139300) *
                C139442 * C30408 +
            ((C32101 + C32102) * C5913 + (C32103 + C32104) * C139300) *
                C139442 * C139588) *
               C9466 -
           (((C32111 + C32112) * C139300 + (C32113 + C32114) * C5913) *
                C139442 * C139588 +
            ((C32104 + C32103) * C139300 + (C32102 + C32101) * C5913) *
                C139442 * C30408) *
               C139403) *
              C823 +
          ((((C18262 + C18261) * C5913 + (C18260 + C18259) * C139300) *
                C139442 * C30408 +
            ((C21095 + C21096) * C5913 + (C21097 + C21098) * C139300) *
                C139442 * C139588) *
               C139403 -
           (((C18259 + C18260) * C139300 + (C18261 + C18262) * C5913) *
                C139442 * C139588 +
            ((C14339 + C14338) * C139300 + (C14337 + C14336) * C5913) *
                C139442 * C30408) *
               C9466) *
              C824 +
          ((((C14349 + C14348) * C5913 + (C14347 + C14346) * C139300) *
                C139442 * C30408 +
            ((C24145 + C24146) * C5913 + (C24147 + C24148) * C139300) *
                C139442 * C139588) *
               C9466 -
           (((C13596 * C21080 + C139575 * C21084 + C13595 * C21081 +
              C13591 * C21085) *
                 C139300 +
             (C13596 * C21078 + C139575 * C21082 + C13595 * C21079 +
              C13591 * C21083) *
                 C5913) *
                C139442 * C139588 +
            ((C24148 + C24147) * C139300 + (C24146 + C24145) * C5913) *
                C139442 * C30408) *
               C139403) *
              C825)) /
            (p * q * std::sqrt(p + q));
    d2eexy[44] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139575 * C114) *
                 C181 +
             (C13595 * C182 + C13591 * C188 + C13596 * C183 + C139575 * C189) *
                 C139328) *
                C139442 * C30408 +
            ((C32101 + C32102) * C181 + (C32231 + C32232) * C139328) * C139442 *
                C139588) *
               C5225 -
           (((C32233 + C32234) * C139328 + (C32105 + C32106) * C181) * C139442 *
                C139588 +
            ((C13596 * C184 + C139575 * C190 + C13595 * C183 + C13591 * C189) *
                 C139328 +
             (C13596 * C109 + C139575 * C115 + C13595 * C108 + C13591 * C114) *
                 C181) *
                C139442 * C30408) *
               C5226 +
           (((C13595 * C109 + C13591 * C115 + C13596 * C110 + C139575 * C119) *
                 C181 +
             (C13595 * C184 + C13591 * C190 + C13596 * C185 + C139575 * C191) *
                 C139328) *
                C139442 * C30408 +
            ((C34079 + C34080) * C181 + (C34185 + C34186) * C139328) * C139442 *
                C139588) *
               C5227) *
              C9466 +
          ((((C32106 + C32105) * C181 + (C32234 + C32233) * C139328) * C139442 *
                C30408 +
            ((C32109 + C32110) * C181 + (C32235 + C32236) * C139328) * C139442 *
                C139588) *
               C5226 -
           (((C32237 + C32238) * C139328 + (C32113 + C32114) * C181) * C139442 *
                C139588 +
            ((C32232 + C32231) * C139328 + (C32102 + C32101) * C181) * C139442 *
                C30408) *
               C5225 -
           (((C13596 * C1877 + C139575 * C1885 + C13595 * C1876 +
              C13591 * C1884) *
                 C139328 +
             (C13596 * C1771 + C139575 * C1786 + C13595 * C1770 +
              C13591 * C1782) *
                 C181) *
                C139442 * C139588 +
            ((C34186 + C34185) * C139328 + (C34080 + C34079) * C181) * C139442 *
                C30408) *
               C5227) *
              C139403)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139575 * C114) *
                C934 +
            (C13595 * C182 + C13591 * C188 + C13596 * C183 + C139575 * C189) *
                C823 -
            (C14337 + C14336) * C935 - (C14466 + C14467) * C824 +
            (C14349 + C14348) * C936 + (C14468 + C14469) * C825) *
               C139442 * C30408 +
           ((C32101 + C32102) * C934 + (C32231 + C32232) * C823 -
            (C18261 + C18262) * C935 - (C18404 + C18403) * C824 +
            (C24145 + C24146) * C936 + (C24256 + C24255) * C825) *
               C139442 * C139588) *
              C139300 * C9466 +
          (((C18262 + C18261) * C935 -
            ((C32232 + C32231) * C823 + (C32102 + C32101) * C934) +
            (C18403 + C18404) * C824 - (C24146 + C24145) * C936 -
            (C24255 + C24256) * C825) *
               C139442 * C30408 +
           ((C21095 + C21096) * C935 -
            ((C32237 + C32238) * C823 + (C32113 + C32114) * C934) +
            (C21206 + C21205) * C824 -
            (C13596 * C21078 + C139575 * C21082 + C13595 * C21079 +
             C13591 * C21083) *
                C936 -
            (C13596 * C21196 + C139575 * C21198 + C13595 * C21197 +
             C13591 * C21199) *
                C825) *
               C139442 * C139588) *
              C139300 * C139403)) /
            (p * q * std::sqrt(p + q));
    d2eexz[44] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139575 * C114) *
                C9616 +
            (C13595 * C245 + C13591 * C251 + C13596 * C246 + C139575 * C252) *
                C9466 -
            (C32102 + C32101) * C9617 - (C32353 + C32354) * C139403) *
               C139442 * C30408 +
           ((C32101 + C32102) * C9616 + (C32354 + C32353) * C9466 -
            (C32113 + C32114) * C9617 - (C32356 + C32355) * C139403) *
               C139442 * C139588) *
              C139328 * C5225 +
          (((C32106 + C32105) * C9617 -
            ((C13596 * C247 + C139575 * C253 + C13595 * C246 + C13591 * C252) *
                 C9466 +
             (C13596 * C109 + C139575 * C115 + C13595 * C108 + C13591 * C114) *
                 C9616) +
            (C32357 + C32358) * C139403) *
               C139442 * C30408 +
           ((C32109 + C32110) * C9617 -
            ((C32358 + C32357) * C9466 + (C32105 + C32106) * C9616) +
            (C32360 + C32359) * C139403) *
               C139442 * C139588) *
              C139328 * C5226 +
          (((C13595 * C109 + C13591 * C115 + C13596 * C110 + C139575 * C119) *
                C9616 +
            (C13595 * C247 + C13591 * C253 + C13596 * C248 + C139575 * C254) *
                C9466 -
            (C34080 + C34079) * C9617 - (C34289 + C34290) * C139403) *
               C139442 * C30408 +
           ((C34079 + C34080) * C9616 + (C34290 + C34289) * C9466 -
            (C13596 * C1771 + C139575 * C1786 + C13595 * C1770 +
             C13591 * C1782) *
                C9617 -
            (C13596 * C1970 + C139575 * C1978 + C13595 * C1968 +
             C13591 * C1976) *
                C139403) *
               C139442 * C139588) *
              C139328 * C5227)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139575 * C114) *
                C9616 +
            (C13595 * C245 + C13591 * C251 + C13596 * C246 + C139575 * C252) *
                C9466 -
            (C32102 + C32101) * C9617 - (C32353 + C32354) * C139403) *
               C139442 * C30408 +
           ((C32101 + C32102) * C9616 + (C32354 + C32353) * C9466 -
            (C32113 + C32114) * C9617 - (C32356 + C32355) * C139403) *
               C139442 * C139588) *
              C823 +
          (((C18262 + C18261) * C9617 -
            ((C14589 + C14588) * C9466 + (C14337 + C14336) * C9616) +
            (C18546 + C18545) * C139403) *
               C139442 * C30408 +
           ((C21095 + C21096) * C9617 -
            ((C18545 + C18546) * C9466 + (C18261 + C18262) * C9616) +
            (C21313 + C21314) * C139403) *
               C139442 * C139588) *
              C824 +
          (((C14349 + C14348) * C9616 + (C14591 + C14590) * C9466 -
            (C24146 + C24145) * C9617 - (C24364 + C24363) * C139403) *
               C139442 * C30408 +
           ((C24145 + C24146) * C9616 + (C24363 + C24364) * C9466 -
            (C13596 * C21078 + C139575 * C21082 + C13595 * C21079 +
             C13591 * C21083) *
                C9617 -
            (C13596 * C21304 + C139575 * C21306 + C13595 * C21305 +
             C13591 * C21307) *
                C139403) *
               C139442 * C139588) *
              C825) *
         C139300) /
            (p * q * std::sqrt(p + q));
    d2eeyx[44] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139442 * C308) * C5230 +
             (C307 * C116 + C139442 * C314) * C5225 - C337 * C5231 -
             C338 * C5226 + C339 * C5232 + C340 * C5227) *
                C30408 +
            (C41942 + C41943 - C41944 - C41945 + C41946 + C41947) * C139588) *
               C13591 +
           ((C337 * C5230 + C338 * C5225 - C339 * C5231 - C340 * C5226 +
             C341 * C5232 + C342 * C5227) *
                C30408 +
            (C41948 + C41949 - C41950 - C41951 + C41952 + C41953) * C139588) *
               C139575) *
              C9466 +
          (((C41944 - (C41943 + C41942) + C41945 - C41946 - C41947) * C30408 +
            (C2090 * C5231 - (C32485 * C5225 + C32486 * C5230) + C2091 * C5226 -
             C2092 * C5232 - C2093 * C5227) *
                C139588) *
               C13591 +
           ((C41950 - (C41949 + C41948) + C41951 - C41952 - C41953) * C30408 +
            (C2092 * C5231 - (C2091 * C5225 + C2090 * C5230) + C2093 * C5226 -
             (C307 * C1771 + C139442 * C2060) * C5232 -
             (C307 * C1787 + C139442 * C2068) * C5227) *
                C139588) *
               C139575) *
              C139403) *
         C139328) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C307 * C107 + C139442 * C308) * C5913 +
              (C307 * C116 + C139442 * C314) * C139300) *
                 C30408 +
             (C38036 + C38037) * C139588) *
                C13591 +
            ((C337 * C5913 + C338 * C139300) * C30408 +
             (C38038 + C38039) * C139588) *
                C139575) *
               C9466 -
           (((C38040 + C38041) * C139588 + (C38039 + C38038) * C30408) *
                C139575 +
            ((C38042 + C38043) * C139588 + (C38037 + C38036) * C30408) *
                C13591) *
               C139403) *
              C823 +
          ((((C38044 + C38045) * C30408 + (C38056 + C38057) * C139588) *
                C13591 +
            ((C38050 + C38051) * C30408 + (C38052 + C38053) * C139588) *
                C139575) *
               C139403 -
           (((C38051 + C38050) * C139588 +
             (C1151 * C139300 + C1150 * C5913) * C30408) *
                C139575 +
            ((C38045 + C38044) * C139588 +
             ((C307 * C841 + C139442 * C1125) * C139300 +
              (C307 * C831 + C139442 * C1118) * C5913) *
                 C30408) *
                C13591) *
               C9466) *
              C824 +
          (((((C307 * C832 + C139442 * C1121) * C5913 +
              (C307 * C847 + C139442 * C1129) * C139300) *
                 C30408 +
             (C41046 + C41047) * C139588) *
                C13591 +
            ((C1154 * C5913 + C1155 * C139300) * C30408 +
             (C41042 + C41043) * C139588) *
                C139575) *
               C9466 -
           ((((C307 * C21080 + C139442 * C21414) * C139300 +
              (C307 * C21078 + C139442 * C21412) * C5913) *
                 C139588 +
             (C41043 + C41042) * C30408) *
                C139575 +
            (((C307 * C21081 + C139442 * C21415) * C139300 +
              (C307 * C21079 + C139442 * C21413) * C5913) *
                 C139588 +
             (C41047 + C41046) * C30408) *
                C13591) *
               C139403) *
              C825)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[44] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C307 * C107 + C139442 * C308) * C181 +
              (C307 * C182 + C139442 * C394) * C139328) *
                 C30408 +
             (C32591 + C32607) * C139588) *
                C13591 +
            ((C401 + C417) * C30408 + C32594 * C139588) * C139575) *
               C5225 -
           ((C3772 * C139588 + (C418 + C404) * C30408) * C139575 +
            (C32595 * C139588 + (C417 + C401) * C30408) * C13591) *
               C5226 +
           ((C421 * C30408 + C34499 * C139588) * C13591 +
            ((C409 + C419) * C30408 + (C3769 + C3775) * C139588) * C139575) *
               C5227) *
              C9466 +
          (((C32594 * C30408 + C32596 * C139588) * C13591 +
            (C34499 * C30408 + (C2185 + C2195) * C139588) * C139575) *
               C5226 -
           ((C32597 * C139588 + C32595 * C30408) * C139575 +
            ((C32608 + C32600) * C139588 + (C32607 + C32591) * C30408) *
                C13591) *
               C5225 -
           ((((C307 * C1877 + C139442 * C2174) * C139328 +
              (C307 * C1771 + C139442 * C2060) * C181) *
                 C139588 +
             (C3775 + C3769) * C30408) *
                C139575 +
            ((C2195 + C2185) * C139588 + C3772 * C30408) * C13591) *
               C5227) *
              C139403)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139442 * C308) * C934 +
             (C307 * C182 + C139442 * C394) * C823 -
             (C307 * C831 + C139442 * C1118) * C935 -
             (C307 * C939 + C139442 * C1231) * C824 +
             (C307 * C832 + C139442 * C1121) * C936 +
             (C307 * C940 + C139442 * C1232) * C825) *
                C30408 +
            (C42942 + C42943 - C42944 - C42945 + C42946 + C42947) * C139588) *
               C13591 +
           ((C1240 + C1241 - C1242 - C1260 + C1245 + C1261) * C30408 +
            (C31515 + C31516 - C31517 - C31518 + C31519 + C31523) * C139588) *
               C139575) *
              C139300 * C9466 +
          (((C42944 - (C42943 + C42942) + C42945 - C42946 - C42947) * C30408 +
            (C38054 * C935 - (C32605 * C823 + C32486 * C934) + C38169 * C824 -
             (C307 * C21079 + C139442 * C21413) * C936 -
             (C307 * C21197 + C139442 * C21514) * C825) *
                C139588) *
               C13591 +
           ((C31517 - (C31516 + C31515) + C31518 - C31519 - C31523) * C30408 +
            (C35460 * C935 - (C2190 * C823 + C2090 * C934) + C35609 * C824 -
             (C307 * C21078 + C139442 * C21412) * C936 -
             (C307 * C21196 + C139442 * C21515) * C825) *
                C139588) *
               C139575) *
              C139300 * C139403)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[44] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139442 * C308) * C9616 +
             (C307 * C245 + C139442 * C474) * C9466 - C32483 * C9617 -
             C32719 * C139403) *
                C30408 +
            (C32483 * C9616 + C32719 * C9466 - C32486 * C9617 -
             C32720 * C139403) *
                C139588) *
               C13591 +
           ((C9841 + C9842 - C9843 - C9844) * C30408 +
            (C42150 + C42151 - C42152 - C42153) * C139588) *
               C139575) *
              C139328 * C5225 +
          (((C9843 - (C9842 + C9841) + C9844) * C30408 +
            (C42152 - (C42151 + C42150) + C42153) * C139588) *
               C13591 +
           ((C9847 - (C9846 + C9845) + C9848) * C30408 +
            (C42154 - (C42155 + C42156) + C42157) * C139588) *
               C139575) *
              C139328 * C5226 +
          ((C9855 * C30408 + (C42156 + C42155 - C42154 - C42157) * C139588) *
               C13591 +
           ((C9851 + C9850 - C9849 - C9852) * C30408 +
            (C3692 * C9616 + C3865 * C9466 -
             (C307 * C1771 + C139442 * C2060) * C9617 -
             (C307 * C1970 + C139442 * C2276) * C139403) *
                C139588) *
               C139575) *
              C139328 * C5227)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139442 * C308) * C9616 +
             (C307 * C245 + C139442 * C474) * C9466 - C32483 * C9617 -
             C32719 * C139403) *
                C30408 +
            (C32483 * C9616 + C32719 * C9466 - C32486 * C9617 -
             C32720 * C139403) *
                C139588) *
               C13591 +
           ((C9841 + C9842 - C9843 - C9844) * C30408 +
            (C42150 + C42151 - C42152 - C42153) * C139588) *
               C139575) *
              C823 +
          (((C35459 * C9617 -
             ((C307 * C1029 + C139442 * C1339) * C9466 +
              (C307 * C831 + C139442 * C1118) * C9616) +
             C35751 * C139403) *
                C30408 +
            (C38054 * C9617 - (C35751 * C9466 + C35459 * C9616) +
             C38271 * C139403) *
                C139588) *
               C13591 +
           ((C11854 - (C11855 + C11856) + C11857) * C30408 +
            (C35460 * C9617 - (C4798 * C9466 + C4566 * C9616) +
             C35752 * C139403) *
                C139588) *
               C139575) *
              C824 +
          ((((C307 * C832 + C139442 * C1121) * C9616 +
             (C307 * C1030 + C139442 * C1340) * C9466 - C41044 * C9617 -
             C41255 * C139403) *
                C30408 +
            (C41044 * C9616 + C41255 * C9466 -
             (C307 * C21079 + C139442 * C21413) * C9617 -
             (C307 * C21305 + C139442 * C21614) * C139403) *
                C139588) *
               C13591 +
           ((C1154 * C9616 + C1360 * C9466 - C31415 * C9617 -
             C31627 * C139403) *
                C30408 +
            (C31415 * C9616 + C31627 * C9466 -
             (C307 * C21078 + C139442 * C21412) * C9617 -
             (C307 * C21304 + C139442 * C21615) * C139403) *
                C139588) *
               C139575) *
              C825) *
         C139300) /
            (p * q * std::sqrt(p + q));
    d2eezx[44] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1767 + C139588 * C2376) *
                C5230 +
            (C30812 * C116 + C30408 * C561 + C30813 * C1777 + C139588 * C2383) *
                C5225 -
            (C30839 + C30840) * C5231 - (C30841 + C30842) * C5226 +
            (C30843 + C30844) * C5232 + (C30845 + C30846) * C5227) *
               C13591 +
           ((C30840 + C30839) * C5230 + (C30842 + C30841) * C5225 -
            (C30844 + C30843) * C5231 - (C30846 + C30845) * C5226 +
            (C30848 + C30847) * C5232 + (C30850 + C30849) * C5227) *
               C139575) *
              C139442 * C9466 +
          (((C32837 + C32838) * C5231 -
            ((C30813 * C1783 + C139588 * C2387 + C30812 * C1777 +
              C30408 * C2383) *
                 C5225 +
             (C30813 * C1768 + C139588 * C2379 + C30812 * C1767 +
              C30408 * C2376) *
                 C5230) +
            (C32839 + C32840) * C5226 - (C34712 + C34713) * C5232 -
            (C34714 + C34715) * C5227) *
               C13591 +
           ((C34713 + C34712) * C5231 -
            ((C32840 + C32839) * C5225 + (C32838 + C32837) * C5230) +
            (C34715 + C34714) * C5226 -
            (C30813 * C1771 + C139588 * C2382 + C30812 * C1766 +
             C30408 * C2378) *
                C5232 -
            (C30813 * C1787 + C139588 * C2390 + C30812 * C1779 +
             C30408 * C2386) *
                C5227) *
               C139575) *
              C139442 * C139403) *
         C139328) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30812 * C107 + C30408 * C555 + C30813 * C1767 +
              C139588 * C2376) *
                 C5913 +
             (C30812 * C116 + C30408 * C561 + C30813 * C1777 +
              C139588 * C2383) *
                 C139300) *
                C13591 +
            ((C30840 + C30839) * C5913 + (C30842 + C30841) * C139300) *
                C139575) *
               C139442 * C9466 -
           (((C32840 + C32839) * C139300 + (C32838 + C32837) * C5913) *
                C139575 +
            ((C30813 * C1783 + C139588 * C2387 + C30812 * C1777 +
              C30408 * C2383) *
                 C139300 +
             (C30813 * C1768 + C139588 * C2379 + C30812 * C1767 +
              C30408 * C2376) *
                 C5913) *
                C13591) *
               C139442 * C139403) *
              C823 +
          ((((C30812 * C4223 + C30408 * C4899 + C30813 * C6442 +
              C139588 * C6922) *
                 C5913 +
             (C30812 * C4230 + C30408 * C4903 + C30813 * C6445 +
              C139588 * C6925) *
                 C139300) *
                C13591 +
            ((C35893 + C35892) * C5913 + (C35895 + C35894) * C139300) *
                C139575) *
               C139442 * C139403 -
           (((C31746 + C31745) * C139300 + (C31744 + C31743) * C5913) *
                C139575 +
            ((C30813 * C4230 + C139588 * C4903 + C30812 * C841 +
              C30408 * C1447) *
                 C139300 +
             (C30813 * C4223 + C139588 * C4899 + C30812 * C831 +
              C30408 * C1440) *
                 C5913) *
                C13591) *
               C139442 * C9466) *
              C824 +
          ((((C30812 * C832 + C30408 * C1443 + C30813 * C8754 +
              C139588 * C9234) *
                 C5913 +
             (C30812 * C847 + C30408 * C1451 + C30813 * C8757 +
              C139588 * C9237) *
                 C139300) *
                C13591 +
            ((C31748 + C31747) * C5913 + (C31750 + C31749) * C139300) *
                C139575) *
               C139442 * C9466 -
           (((C30813 * C21080 + C139588 * C21716 + C30812 * C8756 +
              C30408 * C9236) *
                 C139300 +
             (C30813 * C21078 + C139588 * C21714 + C30812 * C8753 +
              C30408 * C9233) *
                 C5913) *
                C139575 +
            ((C30813 * C21081 + C139588 * C21717 + C30812 * C8757 +
              C30408 * C9237) *
                 C139300 +
             (C30813 * C21079 + C139588 * C21715 + C30812 * C8754 +
              C30408 * C9234) *
                 C5913) *
                C13591) *
               C139442 * C139403) *
              C825)) /
            (p * q * std::sqrt(p + q));
    d2eezy[44] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30812 * C107 + C30408 * C555 + C30813 * C1767 +
              C139588 * C2376) *
                 C181 +
             (C30812 * C182 + C30408 * C641 + C30813 * C1873 +
              C139588 * C2492) *
                 C139328) *
                C13591 +
            ((C30840 + C30839) * C181 + (C30929 + C30930) * C139328) *
                C139575) *
               C139442 * C5225 -
           (((C30931 + C30932) * C139328 + (C30844 + C30843) * C181) * C139575 +
            ((C30930 + C30929) * C139328 + (C30839 + C30840) * C181) * C13591) *
               C139442 * C5226 +
           (((C30843 + C30844) * C181 + (C30932 + C30931) * C139328) * C13591 +
            ((C30848 + C30847) * C181 + (C30933 + C30934) * C139328) *
                C139575) *
               C139442 * C5227) *
              C9466 +
          ((((C32837 + C32838) * C181 + (C32951 + C32952) * C139328) * C13591 +
            ((C34713 + C34712) * C181 + (C34818 + C34819) * C139328) *
                C139575) *
               C139442 * C5226 -
           (((C32952 + C32951) * C139328 + (C32838 + C32837) * C181) * C139575 +
            ((C30813 * C1874 + C139588 * C2493 + C30812 * C1873 +
              C30408 * C2492) *
                 C139328 +
             (C30813 * C1768 + C139588 * C2379 + C30812 * C1767 +
              C30408 * C2376) *
                 C181) *
                C13591) *
               C139442 * C5225 -
           (((C30813 * C1877 + C139588 * C2496 + C30812 * C1872 +
              C30408 * C2491) *
                 C139328 +
             (C30813 * C1771 + C139588 * C2382 + C30812 * C1766 +
              C30408 * C2378) *
                 C181) *
                C139575 +
            ((C34819 + C34818) * C139328 + (C34712 + C34713) * C181) * C13591) *
               C139442 * C5227) *
              C139403)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1767 + C139588 * C2376) *
                C934 +
            (C30812 * C182 + C30408 * C641 + C30813 * C1873 + C139588 * C2492) *
                C823 -
            (C30813 * C4223 + C139588 * C4899 + C30812 * C831 +
             C30408 * C1440) *
                C935 -
            (C30813 * C4337 + C139588 * C5017 + C30812 * C939 +
             C30408 * C1553) *
                C824 +
            (C30812 * C832 + C30408 * C1443 + C30813 * C8754 +
             C139588 * C9234) *
                C936 +
            (C30812 * C940 + C30408 * C1554 + C30813 * C8840 +
             C139588 * C9312) *
                C825) *
               C13591 +
           ((C30840 + C30839) * C934 + (C30929 + C30930) * C823 -
            (C31744 + C31743) * C935 - (C31857 + C31858) * C824 +
            (C31748 + C31747) * C936 + (C31859 + C31860) * C825) *
               C139575) *
              C139442 * C139300 * C9466 +
          (((C30812 * C4223 + C30408 * C4899 + C30813 * C6442 +
             C139588 * C6922) *
                C935 -
            ((C30813 * C1874 + C139588 * C2493 + C30812 * C1873 +
              C30408 * C2492) *
                 C823 +
             (C30813 * C1768 + C139588 * C2379 + C30812 * C1767 +
              C30408 * C2376) *
                 C934) +
            (C30812 * C4337 + C30408 * C5017 + C30813 * C6528 +
             C139588 * C7000) *
                C824 -
            (C30813 * C21079 + C139588 * C21715 + C30812 * C8754 +
             C30408 * C9234) *
                C936 -
            (C30813 * C21197 + C139588 * C21830 + C30812 * C8840 +
             C30408 * C9312) *
                C825) *
               C13591 +
           ((C35893 + C35892) * C935 -
            ((C32952 + C32951) * C823 + (C32838 + C32837) * C934) +
            (C36030 + C36031) * C824 -
            (C30813 * C21078 + C139588 * C21714 + C30812 * C8753 +
             C30408 * C9233) *
                C936 -
            (C30813 * C21196 + C139588 * C21831 + C30812 * C8839 +
             C30408 * C9313) *
                C825) *
               C139575) *
              C139442 * C139300 * C139403)) /
            (p * q * std::sqrt(p + q));
    d2eezz[44] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1767 + C139588 * C2376) *
                C9616 +
            (C30812 * C245 + C30408 * C719 + C30813 * C1965 + C139588 * C2591) *
                C9466 -
            (C30813 * C1768 + C139588 * C2379 + C30812 * C1767 +
             C30408 * C2376) *
                C9617 -
            (C30813 * C1966 + C139588 * C2592 + C30812 * C1965 +
             C30408 * C2591) *
                C139403) *
               C13591 +
           ((C30840 + C30839) * C9616 + (C31013 + C31014) * C9466 -
            (C32838 + C32837) * C9617 - (C33061 + C33062) * C139403) *
               C139575) *
              C139442 * C139328 * C5225 +
          (((C32837 + C32838) * C9617 -
            ((C31014 + C31013) * C9466 + (C30839 + C30840) * C9616) +
            (C33062 + C33061) * C139403) *
               C13591 +
           ((C34713 + C34712) * C9617 -
            ((C31015 + C31016) * C9466 + (C30844 + C30843) * C9616) +
            (C34922 + C34923) * C139403) *
               C139575) *
              C139442 * C139328 * C5226 +
          (((C30843 + C30844) * C9616 + (C31016 + C31015) * C9466 -
            (C34712 + C34713) * C9617 - (C34923 + C34922) * C139403) *
               C13591 +
           ((C30848 + C30847) * C9616 + (C31017 + C31018) * C9466 -
            (C30813 * C1771 + C139588 * C2382 + C30812 * C1766 +
             C30408 * C2378) *
                C9617 -
            (C30813 * C1970 + C139588 * C2598 + C30812 * C1969 +
             C30408 * C2597) *
                C139403) *
               C139575) *
              C139442 * C139328 * C5227)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1767 + C139588 * C2376) *
                C9616 +
            (C30812 * C245 + C30408 * C719 + C30813 * C1965 + C139588 * C2591) *
                C9466 -
            (C30813 * C1768 + C139588 * C2379 + C30812 * C1767 +
             C30408 * C2376) *
                C9617 -
            (C30813 * C1966 + C139588 * C2592 + C30812 * C1965 +
             C30408 * C2591) *
                C139403) *
               C13591 +
           ((C30840 + C30839) * C9616 + (C31013 + C31014) * C9466 -
            (C32838 + C32837) * C9617 - (C33061 + C33062) * C139403) *
               C139575) *
              C139442 * C823 +
          (((C30812 * C4223 + C30408 * C4899 + C30813 * C6442 +
             C139588 * C6922) *
                C9617 -
            ((C30813 * C4443 + C139588 * C5133 + C30812 * C1029 +
              C30408 * C1661) *
                 C9466 +
             (C30813 * C4223 + C139588 * C4899 + C30812 * C831 +
              C30408 * C1440) *
                 C9616) +
            (C30812 * C4443 + C30408 * C5133 + C30813 * C6608 +
             C139588 * C7077) *
                C139403) *
               C13591 +
           ((C35893 + C35892) * C9617 -
            ((C31967 + C31968) * C9466 + (C31744 + C31743) * C9616) +
            (C36166 + C36167) * C139403) *
               C139575) *
              C139442 * C824 +
          (((C30812 * C832 + C30408 * C1443 + C30813 * C8754 +
             C139588 * C9234) *
                C9616 +
            (C30812 * C1030 + C30408 * C1662 + C30813 * C8920 +
             C139588 * C9389) *
                C9466 -
            (C30813 * C21079 + C139588 * C21715 + C30812 * C8754 +
             C30408 * C9234) *
                C9617 -
            (C30813 * C21305 + C139588 * C21933 + C30812 * C8920 +
             C30408 * C9389) *
                C139403) *
               C13591 +
           ((C31748 + C31747) * C9616 + (C31969 + C31970) * C9466 -
            (C30813 * C21078 + C139588 * C21714 + C30812 * C8753 +
             C30408 * C9233) *
                C9617 -
            (C30813 * C21304 + C139588 * C21934 + C30812 * C8919 +
             C30408 * C9390) *
                C139403) *
               C139575) *
              C139442 * C825) *
         C139300) /
            (p * q * std::sqrt(p + q));
    d2eexx[45] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139575 * C114) *
                C2702 +
            (C47033 * C116 + C47029 * C125 + C47034 * C117 + C139575 * C126) *
                C139589 -
            (C47034 * C109 + C139575 * C115 + C47033 * C108 + C47029 * C114) *
                C2703 -
            (C47034 * C118 + C139575 * C127 + C47033 * C117 + C47029 * C126) *
                C139590 +
            (C47033 * C109 + C47029 * C115 + C47034 * C110 + C139575 * C119) *
                C2704 +
            (C47033 * C118 + C47029 * C127 + C47034 * C120 + C139575 * C128) *
                C2699) *
               C47031 +
           ((C47768 + C47769) * C2702 + (C47770 + C47771) * C139589 -
            (C47772 + C47773) * C2703 - (C47774 + C47775) * C139590 +
            (C49700 + C49701) * C2704 + (C49702 + C49703) * C2699) *
               C139586) *
              C139457 * C139339 * C139560 +
          (((C47773 + C47772) * C2703 -
            ((C47771 + C47770) * C139589 + (C47769 + C47768) * C2702) +
            (C47775 + C47774) * C139590 - (C49701 + C49700) * C2704 -
            (C49703 + C49702) * C2699) *
               C47031 +
           ((C47776 + C47777) * C2703 -
            ((C47778 + C47779) * C139589 + (C47780 + C47781) * C2702) +
            (C47782 + C47783) * C139590 -
            (C47034 * C835 + C139575 * C850 + C47033 * C834 + C47029 * C846) *
                C2704 -
            (C47034 * C851 + C139575 * C859 + C47033 * C849 + C47029 * C858) *
                C2699) *
               C139586) *
              C139457 * C139339 * C139377)) /
        (p * q * std::sqrt(p + q));
    d2eexy[45] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139575 * C114) *
                C2783 +
            (C47033 * C182 + C47029 * C188 + C47034 * C183 + C139575 * C189) *
                C139560 -
            (C47769 + C47768) * C2784 - (C47898 + C47899) * C139377) *
               C47031 +
           ((C47768 + C47769) * C2783 + (C47899 + C47898) * C139560 -
            (C47780 + C47781) * C2784 - (C47901 + C47900) * C139377) *
               C139586) *
              C139457 * C139589 +
          (((C47773 + C47772) * C2784 -
            ((C47034 * C184 + C139575 * C190 + C47033 * C183 + C47029 * C189) *
                 C139560 +
             (C47034 * C109 + C139575 * C115 + C47033 * C108 + C47029 * C114) *
                 C2783) +
            (C47902 + C47903) * C139377) *
               C47031 +
           ((C47776 + C47777) * C2784 -
            ((C47903 + C47902) * C139560 + (C47772 + C47773) * C2783) +
            (C47905 + C47904) * C139377) *
               C139586) *
              C139457 * C139590 +
          (((C47033 * C109 + C47029 * C115 + C47034 * C110 + C139575 * C119) *
                C2783 +
            (C47033 * C184 + C47029 * C190 + C47034 * C185 + C139575 * C191) *
                C139560 -
            (C49701 + C49700) * C2784 - (C49806 + C49807) * C139377) *
               C47031 +
           ((C49700 + C49701) * C2783 + (C49807 + C49806) * C139560 -
            (C47034 * C835 + C139575 * C850 + C47033 * C834 + C47029 * C846) *
                C2784 -
            (C47034 * C944 + C139575 * C952 + C47033 * C942 + C47029 * C950) *
                C139377) *
               C139586) *
              C139457 * C2699) *
         C139339) /
        (p * q * std::sqrt(p + q));
    d2eexz[45] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139575 * C114) *
                 C244 +
             (C47033 * C245 + C47029 * C251 + C47034 * C246 + C139575 * C252) *
                 C139339) *
                C47031 +
            ((C47768 + C47769) * C244 + (C48020 + C48021) * C139339) *
                C139586) *
               C139457 * C139560 -
           (((C48022 + C48023) * C139339 + (C47780 + C47781) * C244) * C139586 +
            ((C48021 + C48020) * C139339 + (C47769 + C47768) * C244) * C47031) *
               C139457 * C139377) *
              C139589 +
          ((((C47773 + C47772) * C244 + (C48024 + C48025) * C139339) * C47031 +
            ((C47776 + C47777) * C244 + (C48026 + C48027) * C139339) *
                C139586) *
               C139457 * C139377 -
           (((C48025 + C48024) * C139339 + (C47772 + C47773) * C244) * C139586 +
            ((C47034 * C247 + C139575 * C253 + C47033 * C246 + C47029 * C252) *
                 C139339 +
             (C47034 * C109 + C139575 * C115 + C47033 * C108 + C47029 * C114) *
                 C244) *
                C47031) *
               C139457 * C139560) *
              C139590 +
          ((((C47033 * C109 + C47029 * C115 + C47034 * C110 + C139575 * C119) *
                 C244 +
             (C47033 * C247 + C47029 * C253 + C47034 * C248 + C139575 * C254) *
                 C139339) *
                C47031 +
            ((C49700 + C49701) * C244 + (C49910 + C49911) * C139339) *
                C139586) *
               C139457 * C139560 -
           (((C47034 * C1034 + C139575 * C1042 + C47033 * C1032 +
              C47029 * C1040) *
                 C139339 +
             (C47034 * C835 + C139575 * C850 + C47033 * C834 + C47029 * C846) *
                 C244) *
                C139586 +
            ((C49911 + C49910) * C139339 + (C49701 + C49700) * C244) * C47031) *
               C139457 * C139377) *
              C2699)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[45] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C831 + C139586 * C1118) *
                C2702 +
            (C47233 * C116 + C47031 * C314 + C47234 * C841 + C139586 * C1125) *
                C139589 -
            (C47260 + C47261) * C2703 - (C47262 + C47263) * C139590 +
            (C47264 + C47265) * C2704 + (C47266 + C47267) * C2699) *
               C139457 * C47029 +
           ((C47261 + C47260) * C2702 + (C47263 + C47262) * C139589 -
            (C47265 + C47264) * C2703 - (C47267 + C47266) * C139590 +
            (C47269 + C47268) * C2704 + (C47271 + C47270) * C2699) *
               C139457 * C139575) *
              C139339 * C139560 +
          (((C48142 + C48143) * C2703 -
            ((C47234 * C847 + C139586 * C1129 + C47233 * C841 +
              C47031 * C1125) *
                 C139589 +
             (C47234 * C832 + C139586 * C1121 + C47233 * C831 +
              C47031 * C1118) *
                 C2702) +
            (C48144 + C48145) * C139590 - (C50018 + C50019) * C2704 -
            (C50020 + C50021) * C2699) *
               C139457 * C47029 +
           ((C50019 + C50018) * C2703 -
            ((C48145 + C48144) * C139589 + (C48143 + C48142) * C2702) +
            (C50021 + C50020) * C139590 -
            (C47234 * C835 + C139586 * C1124 + C47233 * C830 + C47031 * C1120) *
                C2704 -
            (C47234 * C851 + C139586 * C1132 + C47233 * C843 + C47031 * C1128) *
                C2699) *
               C139457 * C139575) *
              C139339 * C139377)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[45] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C831 + C139586 * C1118) *
                C2783 +
            (C47233 * C182 + C47031 * C394 + C47234 * C939 + C139586 * C1231) *
                C139560 -
            (C47234 * C832 + C139586 * C1121 + C47233 * C831 + C47031 * C1118) *
                C2784 -
            (C47234 * C940 + C139586 * C1232 + C47233 * C939 + C47031 * C1231) *
                C139377) *
               C139457 * C47029 +
           ((C47261 + C47260) * C2783 + (C47350 + C47351) * C139560 -
            (C48143 + C48142) * C2784 - (C48256 + C48257) * C139377) *
               C139457 * C139575) *
              C139589 +
          (((C48142 + C48143) * C2784 -
            ((C47351 + C47350) * C139560 + (C47260 + C47261) * C2783) +
            (C48257 + C48256) * C139377) *
               C139457 * C47029 +
           ((C50019 + C50018) * C2784 -
            ((C47352 + C47353) * C139560 + (C47265 + C47264) * C2783) +
            (C50124 + C50125) * C139377) *
               C139457 * C139575) *
              C139590 +
          (((C47264 + C47265) * C2783 + (C47353 + C47352) * C139560 -
            (C50018 + C50019) * C2784 - (C50125 + C50124) * C139377) *
               C139457 * C47029 +
           ((C47269 + C47268) * C2783 + (C47354 + C47355) * C139560 -
            (C47234 * C835 + C139586 * C1124 + C47233 * C830 + C47031 * C1120) *
                C2784 -
            (C47234 * C944 + C139586 * C1238 + C47233 * C943 + C47031 * C1237) *
                C139377) *
               C139457 * C139575) *
              C2699) *
         C139339) /
        (p * q * std::sqrt(p + q));
    d2eeyz[45] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47233 * C107 + C47031 * C308 + C47234 * C831 + C139586 * C1118) *
                 C244 +
             (C47233 * C245 + C47031 * C474 + C47234 * C1029 +
              C139586 * C1339) *
                 C139339) *
                C139457 * C47029 +
            ((C47261 + C47260) * C244 + (C47434 + C47435) * C139339) * C139457 *
                C139575) *
               C139560 -
           (((C48366 + C48367) * C139339 + (C48143 + C48142) * C244) * C139457 *
                C139575 +
            ((C47234 * C1030 + C139586 * C1340 + C47233 * C1029 +
              C47031 * C1339) *
                 C139339 +
             (C47234 * C832 + C139586 * C1121 + C47233 * C831 +
              C47031 * C1118) *
                 C244) *
                C139457 * C47029) *
               C139377) *
              C139589 +
          ((((C48142 + C48143) * C244 + (C48367 + C48366) * C139339) * C139457 *
                C47029 +
            ((C50019 + C50018) * C244 + (C50228 + C50229) * C139339) * C139457 *
                C139575) *
               C139377 -
           (((C47436 + C47437) * C139339 + (C47265 + C47264) * C244) * C139457 *
                C139575 +
            ((C47435 + C47434) * C139339 + (C47260 + C47261) * C244) * C139457 *
                C47029) *
               C139560) *
              C139590 +
          ((((C47264 + C47265) * C244 + (C47437 + C47436) * C139339) * C139457 *
                C47029 +
            ((C47269 + C47268) * C244 + (C47438 + C47439) * C139339) * C139457 *
                C139575) *
               C139560 -
           (((C47234 * C1034 + C139586 * C1344 + C47233 * C1033 +
              C47031 * C1343) *
                 C139339 +
             (C47234 * C835 + C139586 * C1124 + C47233 * C830 +
              C47031 * C1120) *
                 C244) *
                C139457 * C139575 +
            ((C50229 + C50228) * C139339 + (C50018 + C50019) * C244) * C139457 *
                C47029) *
               C139377) *
              C2699)) /
        (p * q * std::sqrt(p + q));
    d2eezx[45] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139457 * C555) * C2702 +
             (C554 * C116 + C139457 * C561) * C139589 - C584 * C2703 -
             C585 * C139590 + C586 * C2704 + C587 * C2699) *
                C47029 +
            (C584 * C2702 + C585 * C139589 - C586 * C2703 - C587 * C139590 +
             C588 * C2704 + C589 * C2699) *
                C139575) *
               C47031 +
           ((C16986 + C16987 - C16988 - C16989 + C16990 + C16991) * C47029 +
            (C16992 + C16993 - C16994 - C16995 + C16996 + C16997) * C139575) *
               C139586) *
              C139339 * C139560 +
          (((C16988 - (C16987 + C16986) + C16989 - C16990 - C16991) * C47029 +
            (C16994 - (C16993 + C16992) + C16995 - C16996 - C16997) * C139575) *
               C47031 +
           ((C1476 * C2703 - (C15062 * C139589 + C15063 * C2702) +
             C1477 * C139590 - C1478 * C2704 - C1479 * C2699) *
                C47029 +
            (C1478 * C2703 - (C1477 * C139589 + C1476 * C2702) +
             C1479 * C139590 - (C554 * C835 + C139457 * C1446) * C2704 -
             (C554 * C851 + C139457 * C1454) * C2699) *
                C139575) *
               C139586) *
              C139339 * C139377)) /
        (p * q * std::sqrt(p + q));
    d2eezy[45] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139457 * C555) * C2783 +
             (C554 * C182 + C139457 * C641) * C139560 - C15060 * C2784 -
             C15179 * C139377) *
                C47029 +
            (C3279 + C3280 - C3281 - C3282) * C139575) *
               C47031 +
           ((C15060 * C2783 + C15179 * C139560 - C15063 * C2784 -
             C15180 * C139377) *
                C47029 +
            (C17096 + C17097 - C17098 - C17099) * C139575) *
               C139586) *
              C139589 +
          (((C3281 - (C3280 + C3279) + C3282) * C47029 +
            (C3285 - (C3284 + C3283) + C3286) * C139575) *
               C47031 +
           ((C17098 - (C17097 + C17096) + C17099) * C47029 +
            (C17100 - (C17101 + C17102) + C17103) * C139575) *
               C139586) *
              C139590 +
          ((C3296 * C47029 + (C3289 + C3288 - C3287 - C3295) * C139575) *
               C47031 +
           ((C17102 + C17101 - C17100 - C17103) * C47029 +
            (C3202 * C2783 + C3293 * C139560 -
             (C554 * C835 + C139457 * C1446) * C2784 -
             (C554 * C944 + C139457 * C1560) * C139377) *
                C139575) *
               C139586) *
              C2699) *
         C139339) /
        (p * q * std::sqrt(p + q));
    d2eezz[45] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C554 * C107 + C139457 * C555) * C244 +
              (C554 * C245 + C139457 * C719) * C139339) *
                 C47029 +
             (C726 + C742) * C139575) *
                C47031 +
            ((C15281 + C15297) * C47029 + C15284 * C139575) * C139586) *
               C139560 -
           ((C15285 * C139575 + (C15298 + C15288) * C47029) * C139586 +
            (C15289 * C139575 + (C15297 + C15281) * C47029) * C47031) *
               C139377) *
              C139589 +
          (((C15284 * C47029 + C17202 * C139575) * C47031 +
            (C15290 * C47029 + (C1677 + C1687) * C139575) * C139586) *
               C139377 -
           ((C3372 * C139575 + C15289 * C47029) * C139586 +
            ((C743 + C729) * C139575 + (C742 + C726) * C47029) * C47031) *
               C139560) *
              C139590 +
          (((C746 * C47029 + (C734 + C744) * C139575) * C47031 +
            (C17202 * C47029 + (C3373 + C3377) * C139575) * C139586) *
               C139560 -
           ((((C554 * C1034 + C139457 * C1666) * C139339 +
              (C554 * C835 + C139457 * C1446) * C244) *
                 C139575 +
             (C1687 + C1677) * C47029) *
                C139586 +
            ((C3377 + C3373) * C139575 + C3372 * C47029) * C47031) *
               C139377) *
              C2699)) /
        (p * q * std::sqrt(p + q));
    d2eexx[46] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139575 * C114) *
                 C826 +
             (C47033 * C116 + C47029 * C125 + C47034 * C117 + C139575 * C126) *
                 C821 -
             (C47034 * C109 + C139575 * C115 + C47033 * C108 + C47029 * C114) *
                 C827 -
             (C47034 * C118 + C139575 * C127 + C47033 * C117 + C47029 * C126) *
                 C139305) *
                C47031 +
            ((C47768 + C47769) * C826 + (C47770 + C47771) * C821 -
             (C47772 + C47773) * C827 - (C47774 + C47775) * C139305) *
                C139586) *
               C139457 * C139561 +
           (((C47033 * C1764 + C47029 * C1772 + C47034 * C1765 +
              C139575 * C1773) *
                 C827 -
             ((C47034 * C1776 + C139575 * C1789 + C47033 * C1777 +
               C47029 * C1790) *
                  C821 +
              (C47034 * C1764 + C139575 * C1772 + C47033 * C1767 +
               C47029 * C1778) *
                  C826) +
             (C47033 * C1776 + C47029 * C1789 + C47034 * C1775 +
              C139575 * C1788) *
                 C139305) *
                C47031 +
            ((C51576 + C51577) * C827 -
             ((C51578 + C51579) * C821 + (C51580 + C51581) * C826) +
             (C51582 + C51583) * C139305) *
                C139586) *
               C139457 * C139403) *
              C139560 +
          ((((C47773 + C47772) * C827 -
             ((C47771 + C47770) * C821 + (C47769 + C47768) * C826) +
             (C47775 + C47774) * C139305) *
                C47031 +
            ((C47776 + C47777) * C827 -
             ((C47778 + C47779) * C821 + (C47780 + C47781) * C826) +
             (C47782 + C47783) * C139305) *
                C139586) *
               C139457 * C139561 +
           (((C51581 + C51580) * C826 + (C51579 + C51578) * C821 -
             (C51577 + C51576) * C827 - (C51583 + C51582) * C139305) *
                C47031 +
            ((C47033 * C8754 + C47029 * C8760 + C47034 * C8753 +
              C139575 * C8759) *
                 C826 +
             (C47033 * C8757 + C47029 * C8763 + C47034 * C8756 +
              C139575 * C8762) *
                 C821 -
             (C47034 * C8752 + C139575 * C8758 + C47033 * C8753 +
              C47029 * C8759) *
                 C827 -
             (C47034 * C8755 + C139575 * C8761 + C47033 * C8756 +
              C47029 * C8762) *
                 C139305) *
                C139586) *
               C139457 * C139403) *
              C139377)) /
        (p * q * std::sqrt(p + q));
    d2eexy[46] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139575 * C114) *
                 C2783 +
             (C47033 * C182 + C47029 * C188 + C47034 * C183 + C139575 * C189) *
                 C139560 -
             (C47769 + C47768) * C2784 - (C47898 + C47899) * C139377) *
                C47031 +
            ((C47768 + C47769) * C2783 + (C47899 + C47898) * C139560 -
             (C47780 + C47781) * C2784 - (C47901 + C47900) * C139377) *
                C139586) *
               C139457 * C821 +
           (((C47773 + C47772) * C2784 -
             ((C47034 * C184 + C139575 * C190 + C47033 * C183 + C47029 * C189) *
                  C139560 +
              (C47034 * C109 + C139575 * C115 + C47033 * C108 + C47029 * C114) *
                  C2783) +
             (C47902 + C47903) * C139377) *
                C47031 +
            ((C47776 + C47777) * C2784 -
             ((C47903 + C47902) * C139560 + (C47772 + C47773) * C2783) +
             (C47905 + C47904) * C139377) *
                C139586) *
               C139457 * C139305) *
              C139561 +
          ((((C51581 + C51580) * C2784 -
             ((C47034 * C1870 + C139575 * C1878 + C47033 * C1873 +
               C47029 * C1881) *
                  C139560 +
              (C47034 * C1764 + C139575 * C1772 + C47033 * C1767 +
               C47029 * C1778) *
                  C2783) +
             (C51722 + C51723) * C139377) *
                C47031 +
            ((C47033 * C8754 + C47029 * C8760 + C47034 * C8753 +
              C139575 * C8759) *
                 C2784 -
             ((C51723 + C51722) * C139560 + (C51580 + C51581) * C2783) +
             (C47033 * C8840 + C47029 * C8843 + C47034 * C8839 +
              C139575 * C8842) *
                 C139377) *
                C139586) *
               C139457 * C821 +
           (((C47033 * C1764 + C47029 * C1772 + C47034 * C1765 +
              C139575 * C1773) *
                 C2783 +
             (C47033 * C1870 + C47029 * C1878 + C47034 * C1871 +
              C139575 * C1879) *
                 C139560 -
             (C51577 + C51576) * C2784 - (C51724 + C51725) * C139377) *
                C47031 +
            ((C51576 + C51577) * C2783 + (C51725 + C51724) * C139560 -
             (C47034 * C8752 + C139575 * C8758 + C47033 * C8753 +
              C47029 * C8759) *
                 C2784 -
             (C47034 * C8838 + C139575 * C8841 + C47033 * C8839 +
              C47029 * C8842) *
                 C139377) *
                C139586) *
               C139457 * C139305) *
              C139403)) /
        (p * q * std::sqrt(p + q));
    d2eexz[46] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139575 * C114) *
                 C3607 +
             (C47033 * C245 + C47029 * C251 + C47034 * C246 + C139575 * C252) *
                 C139561 -
             (C47034 * C1764 + C139575 * C1772 + C47033 * C1767 +
              C47029 * C1778) *
                 C3608 -
             (C47034 * C1964 + C139575 * C1972 + C47033 * C1965 +
              C47029 * C1973) *
                 C139403) *
                C47031 +
            ((C47768 + C47769) * C3607 + (C48020 + C48021) * C139561 -
             (C51580 + C51581) * C3608 - (C51864 + C51865) * C139403) *
                C139586) *
               C139457 * C139560 +
           (((C51581 + C51580) * C3608 -
             ((C48021 + C48020) * C139561 + (C47769 + C47768) * C3607) +
             (C51865 + C51864) * C139403) *
                C47031 +
            ((C47033 * C8754 + C47029 * C8760 + C47034 * C8753 +
              C139575 * C8759) *
                 C3608 -
             ((C48022 + C48023) * C139561 + (C47780 + C47781) * C3607) +
             (C47033 * C8920 + C47029 * C8923 + C47034 * C8919 +
              C139575 * C8922) *
                 C139403) *
                C139586) *
               C139457 * C139377) *
              C821 +
          ((((C47033 * C1764 + C47029 * C1772 + C47034 * C1765 +
              C139575 * C1773) *
                 C3608 -
             ((C47034 * C247 + C139575 * C253 + C47033 * C246 + C47029 * C252) *
                  C139561 +
              (C47034 * C109 + C139575 * C115 + C47033 * C108 + C47029 * C114) *
                  C3607) +
             (C47033 * C1964 + C47029 * C1972 + C47034 * C1963 +
              C139575 * C1971) *
                 C139403) *
                C47031 +
            ((C51576 + C51577) * C3608 -
             ((C48025 + C48024) * C139561 + (C47772 + C47773) * C3607) +
             (C51866 + C51867) * C139403) *
                C139586) *
               C139457 * C139560 +
           (((C47773 + C47772) * C3607 + (C48024 + C48025) * C139561 -
             (C51577 + C51576) * C3608 - (C51867 + C51866) * C139403) *
                C47031 +
            ((C47776 + C47777) * C3607 + (C48026 + C48027) * C139561 -
             (C47034 * C8752 + C139575 * C8758 + C47033 * C8753 +
              C47029 * C8759) *
                 C3608 -
             (C47034 * C8918 + C139575 * C8921 + C47033 * C8919 +
              C47029 * C8922) *
                 C139403) *
                C139586) *
               C139457 * C139377) *
              C139305)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[46] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47233 * C107 + C47031 * C308 + C47234 * C831 + C139586 * C1118) *
                 C826 +
             (C47233 * C116 + C47031 * C314 + C47234 * C841 + C139586 * C1125) *
                 C821 -
             (C47260 + C47261) * C827 - (C47262 + C47263) * C139305) *
                C139457 * C47029 +
            ((C47261 + C47260) * C826 + (C47263 + C47262) * C821 -
             (C47265 + C47264) * C827 - (C47267 + C47266) * C139305) *
                C139457 * C139575) *
               C139561 +
           (((C49072 + C49073) * C827 -
             ((C47234 * C4230 + C139586 * C4553 + C47233 * C1777 +
               C47031 * C2061) *
                  C821 +
              (C47234 * C4223 + C139586 * C4549 + C47233 * C1767 +
               C47031 * C2054) *
                  C826) +
             (C49074 + C49075) * C139305) *
                C139457 * C47029 +
            ((C50925 + C50924) * C827 -
             ((C49075 + C49074) * C821 + (C49073 + C49072) * C826) +
             (C50927 + C50926) * C139305) *
                C139457 * C139575) *
               C139403) *
              C139560 +
          ((((C48142 + C48143) * C827 -
             ((C47234 * C847 + C139586 * C1129 + C47233 * C841 +
               C47031 * C1125) *
                  C821 +
              (C47234 * C832 + C139586 * C1121 + C47233 * C831 +
               C47031 * C1118) *
                  C826) +
             (C48144 + C48145) * C139305) *
                C139457 * C47029 +
            ((C50019 + C50018) * C827 -
             ((C48145 + C48144) * C821 + (C48143 + C48142) * C826) +
             (C50021 + C50020) * C139305) *
                C139457 * C139575) *
               C139561 +
           (((C47233 * C4223 + C47031 * C4549 + C47234 * C8754 +
              C139586 * C9000) *
                 C826 +
             (C47233 * C4230 + C47031 * C4553 + C47234 * C8757 +
              C139586 * C9003) *
                 C821 -
             (C52006 + C52007) * C827 - (C52008 + C52009) * C139305) *
                C139457 * C47029 +
            ((C52007 + C52006) * C826 + (C52009 + C52008) * C821 -
             (C47234 * C8752 + C139586 * C8998 + C47233 * C4225 +
              C47031 * C4551) *
                 C827 -
             (C47234 * C8755 + C139586 * C9001 + C47233 * C4232 +
              C47031 * C4555) *
                 C139305) *
                C139457 * C139575) *
               C139403) *
              C139377)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[46] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47233 * C107 + C47031 * C308 + C47234 * C831 + C139586 * C1118) *
                 C2783 +
             (C47233 * C182 + C47031 * C394 + C47234 * C939 + C139586 * C1231) *
                 C139560 -
             (C47234 * C832 + C139586 * C1121 + C47233 * C831 +
              C47031 * C1118) *
                 C2784 -
             (C47234 * C940 + C139586 * C1232 + C47233 * C939 +
              C47031 * C1231) *
                 C139377) *
                C139457 * C47029 +
            ((C47261 + C47260) * C2783 + (C47350 + C47351) * C139560 -
             (C48143 + C48142) * C2784 - (C48256 + C48257) * C139377) *
                C139457 * C139575) *
               C821 +
           (((C48142 + C48143) * C2784 -
             ((C47351 + C47350) * C139560 + (C47260 + C47261) * C2783) +
             (C48257 + C48256) * C139377) *
                C139457 * C47029 +
            ((C50019 + C50018) * C2784 -
             ((C47352 + C47353) * C139560 + (C47265 + C47264) * C2783) +
             (C50124 + C50125) * C139377) *
                C139457 * C139575) *
               C139305) *
              C139561 +
          ((((C47233 * C4223 + C47031 * C4549 + C47234 * C8754 +
              C139586 * C9000) *
                 C2784 -
             ((C47234 * C4337 + C139586 * C4667 + C47233 * C1873 +
               C47031 * C2170) *
                  C139560 +
              (C47234 * C4223 + C139586 * C4549 + C47233 * C1767 +
               C47031 * C2054) *
                  C2783) +
             (C47233 * C4337 + C47031 * C4667 + C47234 * C8840 +
              C139586 * C9078) *
                 C139377) *
                C139457 * C47029 +
            ((C52007 + C52006) * C2784 -
             ((C49187 + C49186) * C139560 + (C49073 + C49072) * C2783) +
             (C52144 + C52145) * C139377) *
                C139457 * C139575) *
               C821 +
           (((C49072 + C49073) * C2783 + (C49186 + C49187) * C139560 -
             (C52006 + C52007) * C2784 - (C52145 + C52144) * C139377) *
                C139457 * C47029 +
            ((C50925 + C50924) * C2783 + (C51030 + C51031) * C139560 -
             (C47234 * C8752 + C139586 * C8998 + C47233 * C4225 +
              C47031 * C4551) *
                 C2784 -
             (C47234 * C8838 + C139586 * C9080 + C47233 * C4339 +
              C47031 * C4669) *
                 C139377) *
                C139457 * C139575) *
               C139305) *
              C139403)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[46] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47233 * C107 + C47031 * C308 + C47234 * C831 + C139586 * C1118) *
                 C3607 +
             (C47233 * C245 + C47031 * C474 + C47234 * C1029 +
              C139586 * C1339) *
                 C139561 -
             (C47234 * C4223 + C139586 * C4549 + C47233 * C1767 +
              C47031 * C2054) *
                 C3608 -
             (C47234 * C4443 + C139586 * C4783 + C47233 * C1965 +
              C47031 * C2269) *
                 C139403) *
                C139457 * C47029 +
            ((C47261 + C47260) * C3607 + (C47434 + C47435) * C139561 -
             (C49073 + C49072) * C3608 - (C49296 + C49297) * C139403) *
                C139457 * C139575) *
               C139560 +
           (((C47233 * C4223 + C47031 * C4549 + C47234 * C8754 +
              C139586 * C9000) *
                 C3608 -
             ((C47234 * C1030 + C139586 * C1340 + C47233 * C1029 +
               C47031 * C1339) *
                  C139561 +
              (C47234 * C832 + C139586 * C1121 + C47233 * C831 +
               C47031 * C1118) *
                  C3607) +
             (C47233 * C4443 + C47031 * C4783 + C47234 * C8920 +
              C139586 * C9155) *
                 C139403) *
                C139457 * C47029 +
            ((C52007 + C52006) * C3608 -
             ((C48366 + C48367) * C139561 + (C48143 + C48142) * C3607) +
             (C52280 + C52281) * C139403) *
                C139457 * C139575) *
               C139377) *
              C821 +
          ((((C49072 + C49073) * C3608 -
             ((C47435 + C47434) * C139561 + (C47260 + C47261) * C3607) +
             (C49297 + C49296) * C139403) *
                C139457 * C47029 +
            ((C50925 + C50924) * C3608 -
             ((C47436 + C47437) * C139561 + (C47265 + C47264) * C3607) +
             (C51134 + C51135) * C139403) *
                C139457 * C139575) *
               C139560 +
           (((C48142 + C48143) * C3607 + (C48367 + C48366) * C139561 -
             (C52006 + C52007) * C3608 - (C52281 + C52280) * C139403) *
                C139457 * C47029 +
            ((C50019 + C50018) * C3607 + (C50228 + C50229) * C139561 -
             (C47234 * C8752 + C139586 * C8998 + C47233 * C4225 +
              C47031 * C4551) *
                 C3608 -
             (C47234 * C8918 + C139586 * C9157 + C47233 * C4445 +
              C47031 * C4785) *
                 C139403) *
                C139457 * C139575) *
               C139377) *
              C139305)) /
        (p * q * std::sqrt(p + q));
    d2eezx[46] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C554 * C107 + C139457 * C555) * C826 +
              (C554 * C116 + C139457 * C561) * C821 - C584 * C827 -
              C585 * C139305) *
                 C47029 +
             (C584 * C826 + C585 * C821 - C586 * C827 - C587 * C139305) *
                 C139575) *
                C47031 +
            ((C15066 + C15067 - C15040 - C15041) * C47029 +
             (C15042 + C15043 - C15044 - C15045) * C139575) *
                C139586) *
               C139561 +
           (((C2408 * C827 -
              ((C554 * C1777 + C139457 * C2383) * C821 +
               (C554 * C1767 + C139457 * C2376) * C826) +
              C2409 * C139305) *
                 C47029 +
             (C2410 * C827 - (C2409 * C821 + C2408 * C826) + C2411 * C139305) *
                 C139575) *
                C47031 +
            ((C19093 - (C19111 + C19112) + C19098) * C47029 +
             (C19099 - (C19100 + C19101) + C19102) * C139575) *
                C139586) *
               C139403) *
              C139560 +
          ((((C15040 - (C15067 + C15066) + C15041) * C47029 +
             (C15044 - (C15043 + C15042) + C15045) * C139575) *
                C47031 +
            ((C15046 - (C15068 + C15069) + C15051) * C47029 +
             (C15052 - (C15053 + C15054) + C15055) * C139575) *
                C139586) *
               C139561 +
           (((C19112 + C19111 - C19093 - C19098) * C47029 +
             (C19101 + C19100 - C19099 - C19102) * C139575) *
                C47031 +
            ((C24775 * C826 + C24776 * C821 - C19109 * C827 -
              C19110 * C139305) *
                 C47029 +
             (C19109 * C826 + C19110 * C821 -
              (C554 * C8752 + C139457 * C9232) * C827 -
              (C554 * C8755 + C139457 * C9235) * C139305) *
                 C139575) *
                C139586) *
               C139403) *
              C139377)) /
        (p * q * std::sqrt(p + q));
    d2eezy[46] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((((C554 * C107 + C139457 * C555) * C2783 +
                        (C554 * C182 + C139457 * C641) * C139560 -
                        C15060 * C2784 - C15179 * C139377) *
                           C47029 +
                       (C3279 + C3280 - C3281 - C3282) * C139575) *
                          C47031 +
                      ((C15060 * C2783 + C15179 * C139560 - C15063 * C2784 -
                        C15180 * C139377) *
                           C47029 +
                       (C17096 + C17097 - C17098 - C17099) * C139575) *
                          C139586) *
                         C821 +
                     (((C3281 - (C3280 + C3279) + C3282) * C47029 +
                       (C3285 - (C3284 + C3283) + C3286) * C139575) *
                          C47031 +
                      ((C17098 - (C17097 + C17096) + C17099) * C47029 +
                       (C17100 - (C17101 + C17102) + C17103) * C139575) *
                          C139586) *
                         C139305) *
                        C139561 +
                    ((((C19108 * C2784 -
                        ((C554 * C1873 + C139457 * C2492) * C139560 +
                         (C554 * C1767 + C139457 * C2376) * C2783) +
                        C19250 * C139377) *
                           C47029 +
                       (C5022 - (C5023 + C5024) + C5034) * C139575) *
                          C47031 +
                      ((C24775 * C2784 - (C19250 * C139560 + C19108 * C2783) +
                        C24881 * C139377) *
                           C47029 +
                       (C19245 - (C19246 + C19247) + C19252) * C139575) *
                          C139586) *
                         C821 +
                     (((C5024 + C5023 - C5022 - C5034) * C47029 +
                       (C5029 + C5028 - C5027 - C5035) * C139575) *
                          C47031 +
                      ((C19247 + C19246 - C19245 - C19252) * C47029 +
                       (C4918 * C2783 + C5033 * C139560 -
                        (C554 * C8752 + C139457 * C9232) * C2784 -
                        (C554 * C8838 + C139457 * C9314) * C139377) *
                           C139575) *
                          C139586) *
                         C139305) *
                        C139403)) /
                  (p * q * std::sqrt(p + q));
    d2eezz[46] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C554 * C107 + C139457 * C555) * C3607 +
              (C554 * C245 + C139457 * C719) * C139561 -
              (C554 * C1767 + C139457 * C2376) * C3608 -
              (C554 * C1965 + C139457 * C2591) * C139403) *
                 C47029 +
             (C4108 + C4109 - C4110 - C4111) * C139575) *
                C47031 +
            ((C19383 + C19384 - C19385 - C19399) * C47029 + C19400 * C139575) *
                C139586) *
               C139560 +
           (((C19385 - (C19384 + C19383) + C19399) * C47029 +
             C19401 * C139575) *
                C47031 +
            ((C24982 - (C24983 + C24984) + C24988) * C47029 +
             (C19390 - (C19391 + C19392) + C19402) * C139575) *
                C139586) *
               C139377) *
              C821 +
          ((((C4110 - (C4109 + C4108) + C4111) * C47029 +
             (C4114 - (C4113 + C4112) + C4115) * C139575) *
                C47031 +
            (C19401 * C47029 + (C5143 - (C5144 + C5145) + C5151) * C139575) *
                C139586) *
               C139560 +
           ((C19400 * C47029 + (C5145 + C5144 - C5143 - C5151) * C139575) *
                C47031 +
            ((C19392 + C19391 - C19390 - C19402) * C47029 +
             (C1478 * C3607 + C1683 * C139561 -
              (C554 * C8752 + C139457 * C9232) * C3608 -
              (C554 * C8918 + C139457 * C9391) * C139403) *
                 C139575) *
                C139586) *
               C139377) *
              C139305)) /
        (p * q * std::sqrt(p + q));
    d2eexx[47] +=
        (-std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139575 * C114) *
                C826 +
            (C47033 * C116 + C47029 * C125 + C47034 * C117 + C139575 * C126) *
                C821 -
            (C47034 * C109 + C139575 * C115 + C47033 * C108 + C47029 * C114) *
                C827 -
            (C47034 * C118 + C139575 * C127 + C47033 * C117 + C47029 * C126) *
                C139305) *
               C47031 +
           ((C47768 + C47769) * C826 + (C47770 + C47771) * C821 -
            (C47772 + C47773) * C827 - (C47774 + C47775) * C139305) *
               C139586) *
              C139457 * C139339 * C823 +
          (((C47773 + C47772) * C827 -
            ((C47771 + C47770) * C821 + (C47769 + C47768) * C826) +
            (C47775 + C47774) * C139305) *
               C47031 +
           ((C47776 + C47777) * C827 -
            ((C47778 + C47779) * C821 + (C47780 + C47781) * C826) +
            (C47782 + C47783) * C139305) *
               C139586) *
              C139457 * C139339 * C824 +
          (((C47781 + C47780) * C826 + (C47779 + C47778) * C821 -
            (C47777 + C47776) * C827 - (C47783 + C47782) * C139305) *
               C47031 +
           ((C47033 * C5916 + C47029 * C5922 + C47034 * C5915 +
             C139575 * C5921) *
                C826 +
            (C47033 * C5919 + C47029 * C5925 + C47034 * C5918 +
             C139575 * C5924) *
                C821 -
            (C47034 * C5914 + C139575 * C5920 + C47033 * C5915 +
             C47029 * C5921) *
                C827 -
            (C47034 * C5917 + C139575 * C5923 + C47033 * C5918 +
             C47029 * C5924) *
                C139305) *
               C139586) *
              C139457 * C139339 * C825)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139575 * C114) *
               C103 +
           (C47033 * C116 + C47029 * C125 + C47034 * C117 + C139575 * C126) *
               C92 -
           (C47034 * C109 + C139575 * C115 + C47033 * C108 + C47029 * C114) *
               C104 -
           (C47034 * C118 + C139575 * C127 + C47033 * C117 + C47029 * C126) *
               C93 +
           (C47033 * C109 + C47029 * C115 + C47034 * C110 + C139575 * C119) *
               C105 +
           (C47033 * C118 + C47029 * C127 + C47034 * C120 + C139575 * C128) *
               C94 -
           (C47034 * C111 + C139575 * C121 + C47033 * C110 + C47029 * C119) *
               C106 -
           (C47034 * C122 + C139575 * C129 + C47033 * C120 + C47029 * C128) *
               C95) *
              C47031 +
          ((C47033 * C831 + C47029 * C842 + C47034 * C828 + C139575 * C836) *
               C103 +
           (C47033 * C841 + C47029 * C854 + C47034 * C840 + C139575 * C853) *
               C92 -
           (C47034 * C829 + C139575 * C837 + C47033 * C828 + C47029 * C836) *
               C104 -
           (C47034 * C839 + C139575 * C852 + C47033 * C840 + C47029 * C853) *
               C93 +
           (C47033 * C829 + C47029 * C837 + C47034 * C830 + C139575 * C838) *
               C105 +
           (C47033 * C839 + C47029 * C852 + C47034 * C843 + C139575 * C855) *
               C94 -
           (C47034 * C2705 + C139575 * C2706 + C47033 * C830 + C47029 * C838) *
               C106 -
           (C47034 * C2707 + C139575 * C2708 + C47033 * C843 + C47029 * C855) *
               C95) *
              C139586) *
         C139457 * C139339 * C139328) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139575 * C114) *
                C826 +
            (C47033 * C116 + C47029 * C125 + C47034 * C117 + C139575 * C126) *
                C821 -
            (C47034 * C109 + C139575 * C115 + C47033 * C108 + C47029 * C114) *
                C827 -
            (C47034 * C118 + C139575 * C127 + C47033 * C117 + C47029 * C126) *
                C139305) *
               C47031 +
           ((C47768 + C47769) * C826 + (C47770 + C47771) * C821 -
            (C47772 + C47773) * C827 - (C47774 + C47775) * C139305) *
               C139586) *
              C139457 * C1761 +
          (((C47033 * C1764 + C47029 * C1772 + C47034 * C1765 +
             C139575 * C1773) *
                C827 -
            ((C47034 * C1776 + C139575 * C1789 + C47033 * C1777 +
              C47029 * C1790) *
                 C821 +
             (C47034 * C1764 + C139575 * C1772 + C47033 * C1767 +
              C47029 * C1778) *
                 C826) +
            (C47033 * C1776 + C47029 * C1789 + C47034 * C1775 +
             C139575 * C1788) *
                C139305) *
               C47031 +
           ((C47033 * C4224 + C47029 * C4228 + C47034 * C4225 +
             C139575 * C4229) *
                C827 -
            ((C47034 * C4231 + C139575 * C4236 + C47033 * C4230 +
              C47029 * C4235) *
                 C821 +
             (C47034 * C4224 + C139575 * C4228 + C47033 * C4223 +
              C47029 * C4227) *
                 C826) +
            (C47033 * C4231 + C47029 * C4236 + C47034 * C4232 +
             C139575 * C4237) *
                C139305) *
               C139586) *
              C139457 * C1762 +
          (((C47033 * C1768 + C47029 * C1780 + C47034 * C1769 +
             C139575 * C1781) *
                C826 +
            (C47033 * C1783 + C47029 * C1792 + C47034 * C1784 +
             C139575 * C1793) *
                C821 -
            (C47034 * C1770 + C139575 * C1782 + C47033 * C1769 +
             C47029 * C1781) *
                C827 -
            (C47034 * C1785 + C139575 * C1794 + C47033 * C1784 +
             C47029 * C1793) *
                C139305) *
               C47031 +
           ((C47033 * C6442 + C47029 * C6448 + C47034 * C6441 +
             C139575 * C6447) *
                C826 +
            (C47033 * C6445 + C47029 * C6451 + C47034 * C6444 +
             C139575 * C6450) *
                C821 -
            (C47034 * C6440 + C139575 * C6446 + C47033 * C6441 +
             C47029 * C6447) *
                C827 -
            (C47034 * C6443 + C139575 * C6449 + C47033 * C6444 +
             C47029 * C6450) *
                C139305) *
               C139586) *
              C139457 * C1763) *
         C139328) /
            (p * q * std::sqrt(p + q));
    d2eexy[47] +=
        (-std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139575 * C114) *
                C934 +
            (C47033 * C182 + C47029 * C188 + C47034 * C183 + C139575 * C189) *
                C823 -
            (C47769 + C47768) * C935 - (C47898 + C47899) * C824 +
            (C47781 + C47780) * C936 + (C47900 + C47901) * C825) *
               C47031 +
           ((C47768 + C47769) * C934 + (C47899 + C47898) * C823 -
            (C47780 + C47781) * C935 - (C47901 + C47900) * C824 +
            (C47033 * C5916 + C47029 * C5922 + C47034 * C5915 +
             C139575 * C5921) *
                C936 +
            (C47033 * C5982 + C47029 * C5985 + C47034 * C5981 +
             C139575 * C5984) *
                C825) *
               C139586) *
              C139457 * C821 +
          (((C47773 + C47772) * C935 -
            ((C47034 * C184 + C139575 * C190 + C47033 * C183 + C47029 * C189) *
                 C823 +
             (C47034 * C109 + C139575 * C115 + C47033 * C108 + C47029 * C114) *
                 C934) +
            (C47902 + C47903) * C824 - (C47777 + C47776) * C936 -
            (C47904 + C47905) * C825) *
               C47031 +
           ((C47776 + C47777) * C935 -
            ((C47903 + C47902) * C823 + (C47772 + C47773) * C934) +
            (C47905 + C47904) * C824 -
            (C47034 * C5914 + C139575 * C5920 + C47033 * C5915 +
             C47029 * C5921) *
                C936 -
            (C47034 * C5980 + C139575 * C5983 + C47033 * C5981 +
             C47029 * C5984) *
                C825) *
               C139586) *
              C139457 * C139305) *
         C139339) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139575 * C114) *
                C181 +
            (C47033 * C182 + C47029 * C188 + C47034 * C183 + C139575 * C189) *
                C139328) *
               C47031 +
           ((C47033 * C831 + C47029 * C842 + C47034 * C828 + C139575 * C836) *
                C181 +
            (C47033 * C939 + C47029 * C947 + C47034 * C938 + C139575 * C946) *
                C139328) *
               C139586) *
              C139457 * C92 -
          (((C47034 * C937 + C139575 * C945 + C47033 * C938 + C47029 * C946) *
                C139328 +
            (C47034 * C829 + C139575 * C837 + C47033 * C828 + C47029 * C836) *
                C181) *
               C139586 +
           ((C47034 * C184 + C139575 * C190 + C47033 * C183 + C47029 * C189) *
                C139328 +
            (C47034 * C109 + C139575 * C115 + C47033 * C108 + C47029 * C114) *
                C181) *
               C47031) *
              C139457 * C93 +
          (((C47033 * C109 + C47029 * C115 + C47034 * C110 + C139575 * C119) *
                C181 +
            (C47033 * C184 + C47029 * C190 + C47034 * C185 + C139575 * C191) *
                C139328) *
               C47031 +
           ((C47033 * C829 + C47029 * C837 + C47034 * C830 + C139575 * C838) *
                C181 +
            (C47033 * C937 + C47029 * C945 + C47034 * C943 + C139575 * C951) *
                C139328) *
               C139586) *
              C139457 * C94 -
          (((C47034 * C2785 + C139575 * C2786 + C47033 * C943 + C47029 * C951) *
                C139328 +
            (C47034 * C2705 + C139575 * C2706 + C47033 * C830 + C47029 * C838) *
                C181) *
               C139586 +
           ((C47034 * C186 + C139575 * C192 + C47033 * C185 + C47029 * C191) *
                C139328 +
            (C47034 * C111 + C139575 * C121 + C47033 * C110 + C47029 * C119) *
                C181) *
               C47031) *
              C139457 * C95) *
         C139339) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139575 * C114) *
                 C181 +
             (C47033 * C182 + C47029 * C188 + C47034 * C183 + C139575 * C189) *
                 C139328) *
                C47031 +
            ((C47768 + C47769) * C181 + (C47899 + C47898) * C139328) *
                C139586) *
               C139457 * C821 -
           (((C47903 + C47902) * C139328 + (C47772 + C47773) * C181) * C139586 +
            ((C47034 * C184 + C139575 * C190 + C47033 * C183 + C47029 * C189) *
                 C139328 +
             (C47034 * C109 + C139575 * C115 + C47033 * C108 + C47029 * C114) *
                 C181) *
                C47031) *
               C139457 * C139305) *
              C1761 +
          ((((C47033 * C1764 + C47029 * C1772 + C47034 * C1765 +
              C139575 * C1773) *
                 C181 +
             (C47033 * C1870 + C47029 * C1878 + C47034 * C1871 +
              C139575 * C1879) *
                 C139328) *
                C47031 +
            ((C47033 * C4224 + C47029 * C4228 + C47034 * C4225 +
              C139575 * C4229) *
                 C181 +
             (C47033 * C4338 + C47029 * C4342 + C47034 * C4339 +
              C139575 * C4343) *
                 C139328) *
                C139586) *
               C139457 * C139305 -
           (((C47034 * C4338 + C139575 * C4342 + C47033 * C4337 +
              C47029 * C4341) *
                 C139328 +
             (C47034 * C4224 + C139575 * C4228 + C47033 * C4223 +
              C47029 * C4227) *
                 C181) *
                C139586 +
            ((C47034 * C1870 + C139575 * C1878 + C47033 * C1873 +
              C47029 * C1881) *
                 C139328 +
             (C47034 * C1764 + C139575 * C1772 + C47033 * C1767 +
              C47029 * C1778) *
                 C181) *
                C47031) *
               C139457 * C821) *
              C1762 +
          ((((C47033 * C1768 + C47029 * C1780 + C47034 * C1769 +
              C139575 * C1781) *
                 C181 +
             (C47033 * C1874 + C47029 * C1882 + C47034 * C1875 +
              C139575 * C1883) *
                 C139328) *
                C47031 +
            ((C47033 * C6442 + C47029 * C6448 + C47034 * C6441 +
              C139575 * C6447) *
                 C181 +
             (C47033 * C6528 + C47029 * C6531 + C47034 * C6527 +
              C139575 * C6530) *
                 C139328) *
                C139586) *
               C139457 * C821 -
           (((C47034 * C6526 + C139575 * C6529 + C47033 * C6527 +
              C47029 * C6530) *
                 C139328 +
             (C47034 * C6440 + C139575 * C6446 + C47033 * C6441 +
              C47029 * C6447) *
                 C181) *
                C139586 +
            ((C47034 * C1876 + C139575 * C1884 + C47033 * C1875 +
              C47029 * C1883) *
                 C139328 +
             (C47034 * C1770 + C139575 * C1782 + C47033 * C1769 +
              C47029 * C1781) *
                 C181) *
                C47031) *
               C139457 * C139305) *
              C1763)) /
            (p * q * std::sqrt(p + q));
    d2eexz[47] +=
        (-std::pow(Pi, 2.5) *
         (((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139575 * C114) *
                 C244 +
             (C47033 * C245 + C47029 * C251 + C47034 * C246 + C139575 * C252) *
                 C139339) *
                C47031 +
            ((C47768 + C47769) * C244 + (C48020 + C48021) * C139339) *
                C139586) *
               C139457 * C823 -
           (((C48022 + C48023) * C139339 + (C47780 + C47781) * C244) * C139586 +
            ((C48021 + C48020) * C139339 + (C47769 + C47768) * C244) * C47031) *
               C139457 * C824 +
           (((C47781 + C47780) * C244 + (C48023 + C48022) * C139339) * C47031 +
            ((C47033 * C5916 + C47029 * C5922 + C47034 * C5915 +
              C139575 * C5921) *
                 C244 +
             (C47033 * C6038 + C47029 * C6041 + C47034 * C6037 +
              C139575 * C6040) *
                 C139339) *
                C139586) *
               C139457 * C825) *
              C821 +
          ((((C47773 + C47772) * C244 + (C48024 + C48025) * C139339) * C47031 +
            ((C47776 + C47777) * C244 + (C48026 + C48027) * C139339) *
                C139586) *
               C139457 * C824 -
           (((C48025 + C48024) * C139339 + (C47772 + C47773) * C244) * C139586 +
            ((C47034 * C247 + C139575 * C253 + C47033 * C246 + C47029 * C252) *
                 C139339 +
             (C47034 * C109 + C139575 * C115 + C47033 * C108 + C47029 * C114) *
                 C244) *
                C47031) *
               C139457 * C823 -
           (((C47034 * C6036 + C139575 * C6039 + C47033 * C6037 +
              C47029 * C6040) *
                 C139339 +
             (C47034 * C5914 + C139575 * C5920 + C47033 * C5915 +
              C47029 * C5921) *
                 C244) *
                C139586 +
            ((C48027 + C48026) * C139339 + (C47777 + C47776) * C244) * C47031) *
               C139457 * C825) *
              C139305)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139575 * C114) *
                C244 +
            (C47033 * C245 + C47029 * C251 + C47034 * C246 + C139575 * C252) *
                C139339) *
               C47031 +
           ((C47033 * C831 + C47029 * C842 + C47034 * C828 + C139575 * C836) *
                C244 +
            (C47033 * C1029 + C47029 * C1037 + C47034 * C1028 +
             C139575 * C1036) *
                C139339) *
               C139586) *
              C139457 * C139328 * C92 -
          (((C47034 * C1027 + C139575 * C1035 + C47033 * C1028 +
             C47029 * C1036) *
                C139339 +
            (C47034 * C829 + C139575 * C837 + C47033 * C828 + C47029 * C836) *
                C244) *
               C139586 +
           ((C47034 * C247 + C139575 * C253 + C47033 * C246 + C47029 * C252) *
                C139339 +
            (C47034 * C109 + C139575 * C115 + C47033 * C108 + C47029 * C114) *
                C244) *
               C47031) *
              C139457 * C139328 * C93 +
          (((C47033 * C109 + C47029 * C115 + C47034 * C110 + C139575 * C119) *
                C244 +
            (C47033 * C247 + C47029 * C253 + C47034 * C248 + C139575 * C254) *
                C139339) *
               C47031 +
           ((C47033 * C829 + C47029 * C837 + C47034 * C830 + C139575 * C838) *
                C244 +
            (C47033 * C1027 + C47029 * C1035 + C47034 * C1033 +
             C139575 * C1041) *
                C139339) *
               C139586) *
              C139457 * C139328 * C94 -
          (((C47034 * C2861 + C139575 * C2862 + C47033 * C1033 +
             C47029 * C1041) *
                C139339 +
            (C47034 * C2705 + C139575 * C2706 + C47033 * C830 + C47029 * C838) *
                C244) *
               C139586 +
           ((C47034 * C249 + C139575 * C255 + C47033 * C248 + C47029 * C254) *
                C139339 +
            (C47034 * C111 + C139575 * C121 + C47033 * C110 + C47029 * C119) *
                C244) *
               C47031) *
              C139457 * C139328 * C95)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139575 * C114) *
                C1960 +
            (C47033 * C245 + C47029 * C251 + C47034 * C246 + C139575 * C252) *
                C1761 -
            (C47034 * C1764 + C139575 * C1772 + C47033 * C1767 +
             C47029 * C1778) *
                C1961 -
            (C47034 * C1964 + C139575 * C1972 + C47033 * C1965 +
             C47029 * C1973) *
                C1762 +
            (C47033 * C1768 + C47029 * C1780 + C47034 * C1769 +
             C139575 * C1781) *
                C1962 +
            (C47033 * C1966 + C47029 * C1974 + C47034 * C1967 +
             C139575 * C1975) *
                C1763) *
               C47031 +
           ((C47768 + C47769) * C1960 + (C48020 + C48021) * C1761 -
            (C47034 * C4224 + C139575 * C4228 + C47033 * C4223 +
             C47029 * C4227) *
                C1961 -
            (C47034 * C4444 + C139575 * C4448 + C47033 * C4443 +
             C47029 * C4447) *
                C1762 +
            (C47033 * C6442 + C47029 * C6448 + C47034 * C6441 +
             C139575 * C6447) *
                C1962 +
            (C47033 * C6608 + C47029 * C6611 + C47034 * C6607 +
             C139575 * C6610) *
                C1763) *
               C139586) *
              C139457 * C139328 * C821 +
          (((C47033 * C1764 + C47029 * C1772 + C47034 * C1765 +
             C139575 * C1773) *
                C1961 -
            ((C47034 * C247 + C139575 * C253 + C47033 * C246 + C47029 * C252) *
                 C1761 +
             (C47034 * C109 + C139575 * C115 + C47033 * C108 + C47029 * C114) *
                 C1960) +
            (C47033 * C1964 + C47029 * C1972 + C47034 * C1963 +
             C139575 * C1971) *
                C1762 -
            (C47034 * C1770 + C139575 * C1782 + C47033 * C1769 +
             C47029 * C1781) *
                C1962 -
            (C47034 * C1968 + C139575 * C1976 + C47033 * C1967 +
             C47029 * C1975) *
                C1763) *
               C47031 +
           ((C47033 * C4224 + C47029 * C4228 + C47034 * C4225 +
             C139575 * C4229) *
                C1961 -
            ((C48025 + C48024) * C1761 + (C47772 + C47773) * C1960) +
            (C47033 * C4444 + C47029 * C4448 + C47034 * C4445 +
             C139575 * C4449) *
                C1762 -
            (C47034 * C6440 + C139575 * C6446 + C47033 * C6441 +
             C47029 * C6447) *
                C1962 -
            (C47034 * C6606 + C139575 * C6609 + C47033 * C6607 +
             C47029 * C6610) *
                C1763) *
               C139586) *
              C139457 * C139328 * C139305)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[47] +=
        (-std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C831 + C139586 * C1118) *
                C826 +
            (C47233 * C116 + C47031 * C314 + C47234 * C841 + C139586 * C1125) *
                C821 -
            (C47260 + C47261) * C827 - (C47262 + C47263) * C139305) *
               C139457 * C47029 +
           ((C47261 + C47260) * C826 + (C47263 + C47262) * C821 -
            (C47265 + C47264) * C827 - (C47267 + C47266) * C139305) *
               C139457 * C139575) *
              C139339 * C823 +
          (((C48142 + C48143) * C827 -
            ((C47234 * C847 + C139586 * C1129 + C47233 * C841 +
              C47031 * C1125) *
                 C821 +
             (C47234 * C832 + C139586 * C1121 + C47233 * C831 +
              C47031 * C1118) *
                 C826) +
            (C48144 + C48145) * C139305) *
               C139457 * C47029 +
           ((C47233 * C829 + C47031 * C1119 + C47234 * C834 + C139586 * C1123) *
                C827 -
            ((C48145 + C48144) * C821 + (C48143 + C48142) * C826) +
            (C47233 * C839 + C47031 * C1127 + C47234 * C849 + C139586 * C1131) *
                C139305) *
               C139457 * C139575) *
              C139339 * C824 +
          (((C47233 * C832 + C47031 * C1121 + C47234 * C5916 +
             C139586 * C6094) *
                C826 +
            (C47233 * C847 + C47031 * C1129 + C47234 * C5919 +
             C139586 * C6097) *
                C821 -
            (C48146 + C48147) * C827 - (C48148 + C48149) * C139305) *
               C139457 * C47029 +
           ((C48147 + C48146) * C826 + (C48149 + C48148) * C821 -
            (C47234 * C5914 + C139586 * C6092 + C47233 * C834 +
             C47031 * C1123) *
                C827 -
            (C47234 * C5917 + C139586 * C6095 + C47233 * C849 +
             C47031 * C1131) *
                C139305) *
               C139457 * C139575) *
              C139339 * C825)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C47233 * C107 + C47031 * C308 + C47234 * C831 + C139586 * C1118) *
               C103 +
           (C47233 * C116 + C47031 * C314 + C47234 * C841 + C139586 * C1125) *
               C92 -
           (C47260 + C47261) * C104 - (C47262 + C47263) * C93 +
           (C47264 + C47265) * C105 + (C47266 + C47267) * C94 -
           (C47268 + C47269) * C106 - (C47270 + C47271) * C95) *
              C139457 * C47029 +
          ((C47261 + C47260) * C103 + (C47263 + C47262) * C92 -
           (C47265 + C47264) * C104 - (C47267 + C47266) * C93 +
           (C47269 + C47268) * C105 + (C47271 + C47270) * C94 -
           (C47234 * C2705 + C139586 * C2937 + C47233 * C111 + C47031 * C312) *
               C106 -
           (C47234 * C2707 + C139586 * C2938 + C47233 * C122 + C47031 * C318) *
               C95) *
              C139457 * C139575) *
         C139339 * C139328) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C831 + C139586 * C1118) *
                C826 +
            (C47233 * C116 + C47031 * C314 + C47234 * C841 + C139586 * C1125) *
                C821 -
            (C47260 + C47261) * C827 - (C47262 + C47263) * C139305) *
               C139457 * C47029 +
           ((C47261 + C47260) * C826 + (C47263 + C47262) * C821 -
            (C47265 + C47264) * C827 - (C47267 + C47266) * C139305) *
               C139457 * C139575) *
              C1761 +
          (((C49072 + C49073) * C827 -
            ((C47234 * C4230 + C139586 * C4553 + C47233 * C1777 +
              C47031 * C2061) *
                 C821 +
             (C47234 * C4223 + C139586 * C4549 + C47233 * C1767 +
              C47031 * C2054) *
                 C826) +
            (C49074 + C49075) * C139305) *
               C139457 * C47029 +
           ((C47233 * C1765 + C47031 * C2055 + C47234 * C4225 +
             C139586 * C4551) *
                C827 -
            ((C49075 + C49074) * C821 + (C49073 + C49072) * C826) +
            (C47233 * C1775 + C47031 * C2063 + C47234 * C4232 +
             C139586 * C4555) *
                C139305) *
               C139457 * C139575) *
              C1762 +
          (((C47233 * C1768 + C47031 * C2057 + C47234 * C6442 +
             C139586 * C6688) *
                C826 +
            (C47233 * C1783 + C47031 * C2065 + C47234 * C6445 +
             C139586 * C6691) *
                C821 -
            (C49076 + C49077) * C827 - (C49078 + C49079) * C139305) *
               C139457 * C47029 +
           ((C49077 + C49076) * C826 + (C49079 + C49078) * C821 -
            (C47234 * C6440 + C139586 * C6686 + C47233 * C1770 +
             C47031 * C2059) *
                C827 -
            (C47234 * C6443 + C139586 * C6689 + C47233 * C1785 +
             C47031 * C2067) *
                C139305) *
               C139457 * C139575) *
              C1763) *
         C139328) /
            (p * q * std::sqrt(p + q));
    d2eeyy[47] +=
        (-std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C831 + C139586 * C1118) *
                C934 +
            (C47233 * C182 + C47031 * C394 + C47234 * C939 + C139586 * C1231) *
                C823 -
            (C47234 * C832 + C139586 * C1121 + C47233 * C831 + C47031 * C1118) *
                C935 -
            (C47234 * C940 + C139586 * C1232 + C47233 * C939 + C47031 * C1231) *
                C824 +
            (C47233 * C832 + C47031 * C1121 + C47234 * C5916 +
             C139586 * C6094) *
                C936 +
            (C47233 * C940 + C47031 * C1232 + C47234 * C5982 +
             C139586 * C6148) *
                C825) *
               C139457 * C47029 +
           ((C47261 + C47260) * C934 + (C47350 + C47351) * C823 -
            (C48143 + C48142) * C935 - (C48256 + C48257) * C824 +
            (C48147 + C48146) * C936 + (C48258 + C48259) * C825) *
               C139457 * C139575) *
              C821 +
          (((C48142 + C48143) * C935 -
            ((C47351 + C47350) * C823 + (C47260 + C47261) * C934) +
            (C48257 + C48256) * C824 - (C48146 + C48147) * C936 -
            (C48259 + C48258) * C825) *
               C139457 * C47029 +
           ((C47233 * C829 + C47031 * C1119 + C47234 * C834 + C139586 * C1123) *
                C935 -
            ((C47352 + C47353) * C823 + (C47265 + C47264) * C934) +
            (C47233 * C937 + C47031 * C1235 + C47234 * C942 + C139586 * C1236) *
                C824 -
            (C47234 * C5914 + C139586 * C6092 + C47233 * C834 +
             C47031 * C1123) *
                C936 -
            (C47234 * C5980 + C139586 * C6150 + C47233 * C942 +
             C47031 * C1236) *
                C825) *
               C139457 * C139575) *
              C139305) *
         C139339) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C831 + C139586 * C1118) *
                C181 +
            (C47233 * C182 + C47031 * C394 + C47234 * C939 + C139586 * C1231) *
                C139328) *
               C139457 * C47029 +
           ((C47261 + C47260) * C181 + (C47350 + C47351) * C139328) * C139457 *
               C139575) *
              C92 -
          (((C47352 + C47353) * C139328 + (C47265 + C47264) * C181) * C139457 *
               C139575 +
           ((C47351 + C47350) * C139328 + (C47260 + C47261) * C181) * C139457 *
               C47029) *
              C93 +
          (((C47264 + C47265) * C181 + (C47353 + C47352) * C139328) * C139457 *
               C47029 +
           ((C47269 + C47268) * C181 + (C47354 + C47355) * C139328) * C139457 *
               C139575) *
              C94 -
          (((C47234 * C2785 + C139586 * C3019 + C47233 * C186 + C47031 * C398) *
                C139328 +
            (C47234 * C2705 + C139586 * C2937 + C47233 * C111 + C47031 * C312) *
                C181) *
               C139457 * C139575 +
           ((C47355 + C47354) * C139328 + (C47268 + C47269) * C181) * C139457 *
               C47029) *
              C95) *
         C139339) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C47233 * C107 + C47031 * C308 + C47234 * C831 + C139586 * C1118) *
                 C181 +
             (C47233 * C182 + C47031 * C394 + C47234 * C939 + C139586 * C1231) *
                 C139328) *
                C139457 * C47029 +
            ((C47261 + C47260) * C181 + (C47350 + C47351) * C139328) * C139457 *
                C139575) *
               C821 -
           (((C47352 + C47353) * C139328 + (C47265 + C47264) * C181) * C139457 *
                C139575 +
            ((C47351 + C47350) * C139328 + (C47260 + C47261) * C181) * C139457 *
                C47029) *
               C139305) *
              C1761 +
          ((((C49072 + C49073) * C181 + (C49186 + C49187) * C139328) * C139457 *
                C47029 +
            ((C47233 * C1765 + C47031 * C2055 + C47234 * C4225 +
              C139586 * C4551) *
                 C181 +
             (C47233 * C1871 + C47031 * C2168 + C47234 * C4339 +
              C139586 * C4669) *
                 C139328) *
                C139457 * C139575) *
               C139305 -
           (((C49187 + C49186) * C139328 + (C49073 + C49072) * C181) * C139457 *
                C139575 +
            ((C47234 * C4337 + C139586 * C4667 + C47233 * C1873 +
              C47031 * C2170) *
                 C139328 +
             (C47234 * C4223 + C139586 * C4549 + C47233 * C1767 +
              C47031 * C2054) *
                 C181) *
                C139457 * C47029) *
               C821) *
              C1762 +
          ((((C47233 * C1768 + C47031 * C2057 + C47234 * C6442 +
              C139586 * C6688) *
                 C181 +
             (C47233 * C1874 + C47031 * C2171 + C47234 * C6528 +
              C139586 * C6766) *
                 C139328) *
                C139457 * C47029 +
            ((C49077 + C49076) * C181 + (C49188 + C49189) * C139328) * C139457 *
                C139575) *
               C821 -
           (((C47234 * C6526 + C139586 * C6768 + C47233 * C1876 +
              C47031 * C2173) *
                 C139328 +
             (C47234 * C6440 + C139586 * C6686 + C47233 * C1770 +
              C47031 * C2059) *
                 C181) *
                C139457 * C139575 +
            ((C49189 + C49188) * C139328 + (C49076 + C49077) * C181) * C139457 *
                C47029) *
               C139305) *
              C1763)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[47] +=
        (-std::pow(Pi, 2.5) *
         (((((C47233 * C107 + C47031 * C308 + C47234 * C831 + C139586 * C1118) *
                 C244 +
             (C47233 * C245 + C47031 * C474 + C47234 * C1029 +
              C139586 * C1339) *
                 C139339) *
                C139457 * C47029 +
            ((C47261 + C47260) * C244 + (C47434 + C47435) * C139339) * C139457 *
                C139575) *
               C823 -
           (((C48366 + C48367) * C139339 + (C48143 + C48142) * C244) * C139457 *
                C139575 +
            ((C47234 * C1030 + C139586 * C1340 + C47233 * C1029 +
              C47031 * C1339) *
                 C139339 +
             (C47234 * C832 + C139586 * C1121 + C47233 * C831 +
              C47031 * C1118) *
                 C244) *
                C139457 * C47029) *
               C824 +
           (((C47233 * C832 + C47031 * C1121 + C47234 * C5916 +
              C139586 * C6094) *
                 C244 +
             (C47233 * C1030 + C47031 * C1340 + C47234 * C6038 +
              C139586 * C6203) *
                 C139339) *
                C139457 * C47029 +
            ((C48147 + C48146) * C244 + (C48368 + C48369) * C139339) * C139457 *
                C139575) *
               C825) *
              C821 +
          ((((C48142 + C48143) * C244 + (C48367 + C48366) * C139339) * C139457 *
                C47029 +
            ((C47233 * C829 + C47031 * C1119 + C47234 * C834 +
              C139586 * C1123) *
                 C244 +
             (C47233 * C1027 + C47031 * C1337 + C47234 * C1032 +
              C139586 * C1342) *
                 C139339) *
                C139457 * C139575) *
               C824 -
           (((C47436 + C47437) * C139339 + (C47265 + C47264) * C244) * C139457 *
                C139575 +
            ((C47435 + C47434) * C139339 + (C47260 + C47261) * C244) * C139457 *
                C47029) *
               C823 -
           (((C47234 * C6036 + C139586 * C6201 + C47233 * C1032 +
              C47031 * C1342) *
                 C139339 +
             (C47234 * C5914 + C139586 * C6092 + C47233 * C834 +
              C47031 * C1123) *
                 C244) *
                C139457 * C139575 +
            ((C48369 + C48368) * C139339 + (C48146 + C48147) * C244) * C139457 *
                C47029) *
               C825) *
              C139305)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C831 + C139586 * C1118) *
                C244 +
            (C47233 * C245 + C47031 * C474 + C47234 * C1029 + C139586 * C1339) *
                C139339) *
               C139457 * C47029 +
           ((C47261 + C47260) * C244 + (C47434 + C47435) * C139339) * C139457 *
               C139575) *
              C139328 * C92 -
          (((C47436 + C47437) * C139339 + (C47265 + C47264) * C244) * C139457 *
               C139575 +
           ((C47435 + C47434) * C139339 + (C47260 + C47261) * C244) * C139457 *
               C47029) *
              C139328 * C93 +
          (((C47264 + C47265) * C244 + (C47437 + C47436) * C139339) * C139457 *
               C47029 +
           ((C47269 + C47268) * C244 + (C47438 + C47439) * C139339) * C139457 *
               C139575) *
              C139328 * C94 -
          (((C47234 * C2861 + C139586 * C3113 + C47233 * C249 + C47031 * C478) *
                C139339 +
            (C47234 * C2705 + C139586 * C2937 + C47233 * C111 + C47031 * C312) *
                C244) *
               C139457 * C139575 +
           ((C47439 + C47438) * C139339 + (C47268 + C47269) * C244) * C139457 *
               C47029) *
              C139328 * C95)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C831 + C139586 * C1118) *
                C1960 +
            (C47233 * C245 + C47031 * C474 + C47234 * C1029 + C139586 * C1339) *
                C1761 -
            (C47234 * C4223 + C139586 * C4549 + C47233 * C1767 +
             C47031 * C2054) *
                C1961 -
            (C47234 * C4443 + C139586 * C4783 + C47233 * C1965 +
             C47031 * C2269) *
                C1762 +
            (C47233 * C1768 + C47031 * C2057 + C47234 * C6442 +
             C139586 * C6688) *
                C1962 +
            (C47233 * C1966 + C47031 * C2270 + C47234 * C6608 +
             C139586 * C6843) *
                C1763) *
               C139457 * C47029 +
           ((C47261 + C47260) * C1960 + (C47434 + C47435) * C1761 -
            (C49073 + C49072) * C1961 - (C49296 + C49297) * C1762 +
            (C49077 + C49076) * C1962 + (C49298 + C49299) * C1763) *
               C139457 * C139575) *
              C139328 * C821 +
          (((C49072 + C49073) * C1961 -
            ((C47435 + C47434) * C1761 + (C47260 + C47261) * C1960) +
            (C49297 + C49296) * C1762 - (C49076 + C49077) * C1962 -
            (C49299 + C49298) * C1763) *
               C139457 * C47029 +
           ((C47233 * C1765 + C47031 * C2055 + C47234 * C4225 +
             C139586 * C4551) *
                C1961 -
            ((C47436 + C47437) * C1761 + (C47265 + C47264) * C1960) +
            (C47233 * C1963 + C47031 * C2273 + C47234 * C4445 +
             C139586 * C4785) *
                C1762 -
            (C47234 * C6440 + C139586 * C6686 + C47233 * C1770 +
             C47031 * C2059) *
                C1962 -
            (C47234 * C6606 + C139586 * C6845 + C47233 * C1968 +
             C47031 * C2274) *
                C1763) *
               C139457 * C139575) *
              C139328 * C139305)) /
            (p * q * std::sqrt(p + q));
    d2eezx[47] +=
        (-std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139457 * C555) * C826 +
             (C554 * C116 + C139457 * C561) * C821 - C584 * C827 -
             C585 * C139305) *
                C47029 +
            (C584 * C826 + C585 * C821 - C586 * C827 - C587 * C139305) *
                C139575) *
               C47031 +
           ((C15066 + C15067 - C15040 - C15041) * C47029 +
            (C15042 + C15043 - C15044 - C15045) * C139575) *
               C139586) *
              C139339 * C823 +
          (((C15040 - (C15067 + C15066) + C15041) * C47029 +
            (C15044 - (C15043 + C15042) + C15045) * C139575) *
               C47031 +
           ((C15046 - (C15068 + C15069) + C15051) * C47029 +
            (C15052 - (C15053 + C15054) + C15055) * C139575) *
               C139586) *
              C139339 * C824 +
          (((C15069 + C15068 - C15046 - C15051) * C47029 +
            (C15054 + C15053 - C15052 - C15055) * C139575) *
               C47031 +
           ((C20833 * C826 + C20834 * C821 - C15064 * C827 - C15065 * C139305) *
                C47029 +
            (C15064 * C826 + C15065 * C821 -
             (C554 * C5914 + C139457 * C6254) * C827 -
             (C554 * C5917 + C139457 * C6257) * C139305) *
                C139575) *
               C139586) *
              C139339 * C825)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C554 * C107 + C139457 * C555) * C103 +
            (C554 * C116 + C139457 * C561) * C92 - C584 * C104 - C585 * C93 +
            C586 * C105 + C587 * C94 - C588 * C106 - C589 * C95) *
               C47029 +
           (C584 * C103 + C585 * C92 - C586 * C104 - C587 * C93 + C588 * C105 +
            C589 * C94 - C590 * C106 - C591 * C95) *
               C139575) *
              C47031 +
          ((C15060 * C103 + C15061 * C92 - C1472 * C104 - C1473 * C93 +
            C1474 * C105 + C1475 * C94 - C3202 * C106 - C3203 * C95) *
               C47029 +
           (C1472 * C103 + C1473 * C92 - C1474 * C104 - C1475 * C93 +
            C3202 * C105 + C3203 * C94 -
            (C554 * C2705 + C139457 * C3195) * C106 -
            (C554 * C2707 + C139457 * C3196) * C95) *
               C139575) *
              C139586) *
         C139339 * C139328) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139457 * C555) * C826 +
             (C554 * C116 + C139457 * C561) * C821 - C584 * C827 -
             C585 * C139305) *
                C47029 +
            (C584 * C826 + C585 * C821 - C586 * C827 - C587 * C139305) *
                C139575) *
               C47031 +
           ((C15066 + C15067 - C15040 - C15041) * C47029 +
            (C15042 + C15043 - C15044 - C15045) * C139575) *
               C139586) *
              C1761 +
          (((C2408 * C827 -
             ((C554 * C1777 + C139457 * C2383) * C821 +
              (C554 * C1767 + C139457 * C2376) * C826) +
             C2409 * C139305) *
                C47029 +
            (C2410 * C827 - (C2409 * C821 + C2408 * C826) + C2411 * C139305) *
                C139575) *
               C47031 +
           ((C19093 - (C19111 + C19112) + C19098) * C47029 +
            (C19099 - (C19100 + C19101) + C19102) * C139575) *
               C139586) *
              C1762 +
          ((((C554 * C1768 + C139457 * C2379) * C826 +
             (C554 * C1783 + C139457 * C2387) * C821 - C2412 * C827 -
             C2413 * C139305) *
                C47029 +
            (C2412 * C826 + C2413 * C821 - C2414 * C827 - C2415 * C139305) *
                C139575) *
               C47031 +
           ((C21729 * C826 + C21730 * C821 - C16038 * C827 - C16039 * C139305) *
                C47029 +
            (C16038 * C826 + C16039 * C821 -
             (C554 * C6440 + C139457 * C6920) * C827 -
             (C554 * C6443 + C139457 * C6923) * C139305) *
                C139575) *
               C139586) *
              C1763) *
         C139328) /
            (p * q * std::sqrt(p + q));
    d2eezy[47] +=
        (-std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139457 * C555) * C934 +
             (C554 * C182 + C139457 * C641) * C823 - C15060 * C935 -
             C15179 * C824 + C15063 * C936 + C15180 * C825) *
                C47029 +
            (C1562 + C1563 - C1564 - C1582 + C1567 + C1583) * C139575) *
               C47031 +
           ((C15060 * C934 + C15179 * C823 - C15063 * C935 - C15180 * C824 +
             C20833 * C936 + C20907 * C825) *
                C47029 +
            (C15172 + C15173 - C15174 - C15175 + C15176 + C15182) * C139575) *
               C139586) *
              C821 +
          (((C1564 - (C1563 + C1562) + C1582 - C1567 - C1583) * C47029 +
            (C1572 - (C1571 + C1570) + C1584 - C1575 - C1585) * C139575) *
               C47031 +
           ((C15174 - (C15173 + C15172) + C15175 - C15176 - C15182) * C47029 +
            (C1478 * C935 - (C1580 * C823 + C1474 * C934) + C1581 * C824 -
             (C554 * C5914 + C139457 * C6254) * C936 -
             (C554 * C5980 + C139457 * C6312) * C825) *
                C139575) *
               C139586) *
              C139305) *
         C139339) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139457 * C555) * C181 +
             (C554 * C182 + C139457 * C641) * C139328) *
                C47029 +
            (C648 + C664) * C139575) *
               C47031 +
           ((C15060 * C181 + C15179 * C139328) * C47029 +
            (C14134 + C14135) * C139575) *
               C139586) *
              C92 -
          (((C14136 + C14137) * C139575 + (C14135 + C14134) * C47029) *
               C139586 +
           ((C665 + C651) * C139575 + (C664 + C648) * C47029) * C47031) *
              C93 +
          ((C668 * C47029 + (C656 + C666) * C139575) * C47031 +
           ((C14137 + C14136) * C47029 + (C14138 + C14139) * C139575) *
               C139586) *
              C94 -
          ((((C554 * C2785 + C139457 * C3277) * C139328 +
             (C554 * C2705 + C139457 * C3195) * C181) *
                C139575 +
            (C14139 + C14138) * C47029) *
               C139586 +
           ((C667 + C657) * C139575 + C669 * C47029) * C47031) *
              C95) *
         C139339) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((((C554 * C107 + C139457 * C555) * C181 +
              (C554 * C182 + C139457 * C641) * C139328) *
                 C47029 +
             (C648 + C664) * C139575) *
                C47031 +
            ((C15060 * C181 + C15179 * C139328) * C47029 +
             (C14134 + C14135) * C139575) *
                C139586) *
               C821 -
           (((C14136 + C14137) * C139575 + (C14135 + C14134) * C47029) *
                C139586 +
            ((C665 + C651) * C139575 + (C664 + C648) * C47029) * C47031) *
               C139305) *
              C1761 +
          ((((C2498 + C2514) * C47029 + (C2501 + C2515) * C139575) * C47031 +
            ((C16138 + C16139) * C47029 + (C18011 + C18012) * C139575) *
                C139586) *
               C139305 -
           (((C16139 + C16138) * C139575 +
             (C19250 * C139328 + C19108 * C181) * C47029) *
                C139586 +
            ((C2514 + C2498) * C139575 +
             ((C554 * C1873 + C139457 * C2492) * C139328 +
              (C554 * C1767 + C139457 * C2376) * C181) *
                 C47029) *
                C47031) *
               C821) *
              C1762 +
          (((((C554 * C1768 + C139457 * C2379) * C181 +
              (C554 * C1874 + C139457 * C2493) * C139328) *
                 C47029 +
             (C2504 + C2516) * C139575) *
                C47031 +
            ((C21729 * C181 + C21835 * C139328) * C47029 +
             (C16140 + C16144) * C139575) *
                C139586) *
               C821 -
           ((((C554 * C6526 + C139457 * C7002) * C139328 +
              (C554 * C6440 + C139457 * C6920) * C181) *
                 C139575 +
             (C16144 + C16140) * C47029) *
                C139586 +
            ((C2517 + C2507) * C139575 + (C2516 + C2504) * C47029) * C47031) *
               C139305) *
              C1763)) /
            (p * q * std::sqrt(p + q));
    d2eezz[47] +=
        (-std::pow(Pi, 2.5) *
         ((((((C554 * C107 + C139457 * C555) * C244 +
              (C554 * C245 + C139457 * C719) * C139339) *
                 C47029 +
             (C726 + C742) * C139575) *
                C47031 +
            ((C15281 + C15297) * C47029 + C15284 * C139575) * C139586) *
               C823 -
           ((C15285 * C139575 + (C15298 + C15288) * C47029) * C139586 +
            (C15289 * C139575 + (C15297 + C15281) * C47029) * C47031) *
               C824 +
           (((C15288 + C15298) * C47029 + C15290 * C139575) * C47031 +
            ((C20976 + C20980) * C47029 + (C15291 + C15299) * C139575) *
                C139586) *
               C825) *
              C821 +
          (((C15284 * C47029 + C17202 * C139575) * C47031 +
            (C15290 * C47029 + (C1677 + C1687) * C139575) * C139586) *
               C824 -
           ((C3372 * C139575 + C15289 * C47029) * C139586 +
            ((C743 + C729) * C139575 + (C742 + C726) * C47029) * C47031) *
               C823 -
           ((((C554 * C6036 + C139457 * C6363) * C139339 +
              (C554 * C5914 + C139457 * C6254) * C244) *
                 C139575 +
             (C15299 + C15291) * C47029) *
                C139586 +
            ((C1687 + C1677) * C139575 + C15285 * C47029) * C47031) *
               C825) *
              C139305)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139457 * C555) * C244 +
             (C554 * C245 + C139457 * C719) * C139339) *
                C47029 +
            (C726 + C742) * C139575) *
               C47031 +
           ((C15281 + C15297) * C47029 + C15284 * C139575) * C139586) *
              C139328 * C92 -
          ((C3372 * C139575 + C15289 * C47029) * C139586 +
           ((C743 + C729) * C139575 + (C742 + C726) * C47029) * C47031) *
              C139328 * C93 +
          ((C746 * C47029 + (C734 + C744) * C139575) * C47031 +
           (C17202 * C47029 + (C3373 + C3377) * C139575) * C139586) *
              C139328 * C94 -
          ((((C554 * C2861 + C139457 * C3370) * C139339 +
             (C554 * C2705 + C139457 * C3195) * C244) *
                C139575 +
            (C3377 + C3373) * C47029) *
               C139586 +
           ((C745 + C735) * C139575 + C747 * C47029) * C47031) *
              C139328 * C95)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139457 * C555) * C1960 +
             (C554 * C245 + C139457 * C719) * C1761 -
             (C554 * C1767 + C139457 * C2376) * C1961 -
             (C554 * C1965 + C139457 * C2591) * C1762 +
             (C554 * C1768 + C139457 * C2379) * C1962 +
             (C554 * C1966 + C139457 * C2592) * C1763) *
                C47029 +
            (C2600 + C2601 - C2602 - C2620 + C2605 + C2621) * C139575) *
               C47031 +
           ((C21936 + C21937 - C21938 - C21939 + C21940 + C21944) * C47029 +
            (C16243 + C16244 - C16245 - C16246 + C16247 + C16251) * C139575) *
               C139586) *
              C139328 * C821 +
          (((C2602 - (C2601 + C2600) + C2620 - C2605 - C2621) * C47029 +
            (C2610 - (C2609 + C2608) + C2622 - C2613 - C2623) * C139575) *
               C47031 +
           ((C16245 - (C16244 + C16243) + C16246 - C16247 - C16251) * C47029 +
            (C4918 * C1961 - (C1680 * C1761 + C1474 * C1960) + C5149 * C1762 -
             (C554 * C6440 + C139457 * C6920) * C1962 -
             (C554 * C6606 + C139457 * C7079) * C1763) *
                C139575) *
               C139586) *
              C139328 * C139305)) /
            (p * q * std::sqrt(p + q));
    d2eexx[48] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139575 * C114) *
                C2702 +
            (C47033 * C116 + C47029 * C125 + C47034 * C117 + C139575 * C126) *
                C139589 -
            (C47034 * C109 + C139575 * C115 + C47033 * C108 + C47029 * C114) *
                C2703 -
            (C47034 * C118 + C139575 * C127 + C47033 * C117 + C47029 * C126) *
                C139590 +
            (C47033 * C109 + C47029 * C115 + C47034 * C110 + C139575 * C119) *
                C2704 +
            (C47033 * C118 + C47029 * C127 + C47034 * C120 + C139575 * C128) *
                C2699) *
               C47031 +
           ((C47768 + C47769) * C2702 + (C47770 + C47771) * C139589 -
            (C47772 + C47773) * C2703 - (C47774 + C47775) * C139590 +
            (C49700 + C49701) * C2704 + (C49702 + C49703) * C2699) *
               C139586) *
              C139457 * C139561 +
          (((C47033 * C1764 + C47029 * C1772 + C47034 * C1765 +
             C139575 * C1773) *
                C2703 -
            ((C47034 * C1776 + C139575 * C1789 + C47033 * C1777 +
              C47029 * C1790) *
                 C139589 +
             (C47034 * C1764 + C139575 * C1772 + C47033 * C1767 +
              C47029 * C1778) *
                 C2702) +
            (C47033 * C1776 + C47029 * C1789 + C47034 * C1775 +
             C139575 * C1788) *
                C139590 -
            (C47034 * C1766 + C139575 * C1774 + C47033 * C1765 +
             C47029 * C1773) *
                C2704 -
            (C47034 * C1779 + C139575 * C1791 + C47033 * C1775 +
             C47029 * C1788) *
                C2699) *
               C47031 +
           ((C47033 * C4224 + C47029 * C4228 + C47034 * C4225 +
             C139575 * C4229) *
                C2703 -
            ((C47034 * C4231 + C139575 * C4236 + C47033 * C4230 +
              C47029 * C4235) *
                 C139589 +
             (C47034 * C4224 + C139575 * C4228 + C47033 * C4223 +
              C47029 * C4227) *
                 C2702) +
            (C47033 * C4231 + C47029 * C4236 + C47034 * C4232 +
             C139575 * C4237) *
                C139590 -
            (C47034 * C4226 + C139575 * C4233 + C47033 * C4225 +
             C47029 * C4229) *
                C2704 -
            (C47034 * C4234 + C139575 * C4238 + C47033 * C4232 +
             C47029 * C4237) *
                C2699) *
               C139586) *
              C139457 * C139403) *
         C139328) /
        (p * q * std::sqrt(p + q));
    d2eexy[48] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139575 * C114) *
                 C181 +
             (C47033 * C182 + C47029 * C188 + C47034 * C183 + C139575 * C189) *
                 C139328) *
                C47031 +
            ((C47768 + C47769) * C181 + (C47899 + C47898) * C139328) *
                C139586) *
               C139457 * C139589 -
           (((C47903 + C47902) * C139328 + (C47772 + C47773) * C181) * C139586 +
            ((C47034 * C184 + C139575 * C190 + C47033 * C183 + C47029 * C189) *
                 C139328 +
             (C47034 * C109 + C139575 * C115 + C47033 * C108 + C47029 * C114) *
                 C181) *
                C47031) *
               C139457 * C139590 +
           (((C47033 * C109 + C47029 * C115 + C47034 * C110 + C139575 * C119) *
                 C181 +
             (C47033 * C184 + C47029 * C190 + C47034 * C185 + C139575 * C191) *
                 C139328) *
                C47031 +
            ((C49700 + C49701) * C181 + (C49807 + C49806) * C139328) *
                C139586) *
               C139457 * C2699) *
              C139561 +
          ((((C47033 * C1764 + C47029 * C1772 + C47034 * C1765 +
              C139575 * C1773) *
                 C181 +
             (C47033 * C1870 + C47029 * C1878 + C47034 * C1871 +
              C139575 * C1879) *
                 C139328) *
                C47031 +
            ((C47033 * C4224 + C47029 * C4228 + C47034 * C4225 +
              C139575 * C4229) *
                 C181 +
             (C47033 * C4338 + C47029 * C4342 + C47034 * C4339 +
              C139575 * C4343) *
                 C139328) *
                C139586) *
               C139457 * C139590 -
           (((C47034 * C4338 + C139575 * C4342 + C47033 * C4337 +
              C47029 * C4341) *
                 C139328 +
             (C47034 * C4224 + C139575 * C4228 + C47033 * C4223 +
              C47029 * C4227) *
                 C181) *
                C139586 +
            ((C47034 * C1870 + C139575 * C1878 + C47033 * C1873 +
              C47029 * C1881) *
                 C139328 +
             (C47034 * C1764 + C139575 * C1772 + C47033 * C1767 +
              C47029 * C1778) *
                 C181) *
                C47031) *
               C139457 * C139589 -
           (((C47034 * C4340 + C139575 * C4344 + C47033 * C4339 +
              C47029 * C4343) *
                 C139328 +
             (C47034 * C4226 + C139575 * C4233 + C47033 * C4225 +
              C47029 * C4229) *
                 C181) *
                C139586 +
            ((C47034 * C1872 + C139575 * C1880 + C47033 * C1871 +
              C47029 * C1879) *
                 C139328 +
             (C47034 * C1766 + C139575 * C1774 + C47033 * C1765 +
              C47029 * C1773) *
                 C181) *
                C47031) *
               C139457 * C2699) *
              C139403)) /
        (p * q * std::sqrt(p + q));
    d2eexz[48] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139575 * C114) *
                C3607 +
            (C47033 * C245 + C47029 * C251 + C47034 * C246 + C139575 * C252) *
                C139561 -
            (C47034 * C1764 + C139575 * C1772 + C47033 * C1767 +
             C47029 * C1778) *
                C3608 -
            (C47034 * C1964 + C139575 * C1972 + C47033 * C1965 +
             C47029 * C1973) *
                C139403) *
               C47031 +
           ((C47768 + C47769) * C3607 + (C48020 + C48021) * C139561 -
            (C47034 * C4224 + C139575 * C4228 + C47033 * C4223 +
             C47029 * C4227) *
                C3608 -
            (C47034 * C4444 + C139575 * C4448 + C47033 * C4443 +
             C47029 * C4447) *
                C139403) *
               C139586) *
              C139457 * C139328 * C139589 +
          (((C47033 * C1764 + C47029 * C1772 + C47034 * C1765 +
             C139575 * C1773) *
                C3608 -
            ((C47034 * C247 + C139575 * C253 + C47033 * C246 + C47029 * C252) *
                 C139561 +
             (C47034 * C109 + C139575 * C115 + C47033 * C108 + C47029 * C114) *
                 C3607) +
            (C47033 * C1964 + C47029 * C1972 + C47034 * C1963 +
             C139575 * C1971) *
                C139403) *
               C47031 +
           ((C47033 * C4224 + C47029 * C4228 + C47034 * C4225 +
             C139575 * C4229) *
                C3608 -
            ((C48025 + C48024) * C139561 + (C47772 + C47773) * C3607) +
            (C47033 * C4444 + C47029 * C4448 + C47034 * C4445 +
             C139575 * C4449) *
                C139403) *
               C139586) *
              C139457 * C139328 * C139590 +
          (((C47033 * C109 + C47029 * C115 + C47034 * C110 + C139575 * C119) *
                C3607 +
            (C47033 * C247 + C47029 * C253 + C47034 * C248 + C139575 * C254) *
                C139561 -
            (C47034 * C1766 + C139575 * C1774 + C47033 * C1765 +
             C47029 * C1773) *
                C3608 -
            (C47034 * C1969 + C139575 * C1977 + C47033 * C1963 +
             C47029 * C1971) *
                C139403) *
               C47031 +
           ((C49700 + C49701) * C3607 + (C49910 + C49911) * C139561 -
            (C47034 * C4226 + C139575 * C4233 + C47033 * C4225 +
             C47029 * C4229) *
                C3608 -
            (C47034 * C4446 + C139575 * C4450 + C47033 * C4445 +
             C47029 * C4449) *
                C139403) *
               C139586) *
              C139457 * C139328 * C2699)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[48] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C831 + C139586 * C1118) *
                C2702 +
            (C47233 * C116 + C47031 * C314 + C47234 * C841 + C139586 * C1125) *
                C139589 -
            (C47260 + C47261) * C2703 - (C47262 + C47263) * C139590 +
            (C47264 + C47265) * C2704 + (C47266 + C47267) * C2699) *
               C139457 * C47029 +
           ((C47261 + C47260) * C2702 + (C47263 + C47262) * C139589 -
            (C47265 + C47264) * C2703 - (C47267 + C47266) * C139590 +
            (C47269 + C47268) * C2704 + (C47271 + C47270) * C2699) *
               C139457 * C139575) *
              C139561 +
          (((C49072 + C49073) * C2703 -
            ((C47234 * C4230 + C139586 * C4553 + C47233 * C1777 +
              C47031 * C2061) *
                 C139589 +
             (C47234 * C4223 + C139586 * C4549 + C47233 * C1767 +
              C47031 * C2054) *
                 C2702) +
            (C49074 + C49075) * C139590 - (C50924 + C50925) * C2704 -
            (C50926 + C50927) * C2699) *
               C139457 * C47029 +
           ((C50925 + C50924) * C2703 -
            ((C49075 + C49074) * C139589 + (C49073 + C49072) * C2702) +
            (C50927 + C50926) * C139590 -
            (C47234 * C4226 + C139586 * C4552 + C47233 * C1766 +
             C47031 * C2056) *
                C2704 -
            (C47234 * C4234 + C139586 * C4556 + C47233 * C1779 +
             C47031 * C2064) *
                C2699) *
               C139457 * C139575) *
              C139403) *
         C139328) /
        (p * q * std::sqrt(p + q));
    d2eeyy[48] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47233 * C107 + C47031 * C308 + C47234 * C831 + C139586 * C1118) *
                 C181 +
             (C47233 * C182 + C47031 * C394 + C47234 * C939 + C139586 * C1231) *
                 C139328) *
                C139457 * C47029 +
            ((C47261 + C47260) * C181 + (C47350 + C47351) * C139328) * C139457 *
                C139575) *
               C139589 -
           (((C47352 + C47353) * C139328 + (C47265 + C47264) * C181) * C139457 *
                C139575 +
            ((C47351 + C47350) * C139328 + (C47260 + C47261) * C181) * C139457 *
                C47029) *
               C139590 +
           (((C47264 + C47265) * C181 + (C47353 + C47352) * C139328) * C139457 *
                C47029 +
            ((C47269 + C47268) * C181 + (C47354 + C47355) * C139328) * C139457 *
                C139575) *
               C2699) *
              C139561 +
          ((((C49072 + C49073) * C181 + (C49186 + C49187) * C139328) * C139457 *
                C47029 +
            ((C50925 + C50924) * C181 + (C51030 + C51031) * C139328) * C139457 *
                C139575) *
               C139590 -
           (((C49187 + C49186) * C139328 + (C49073 + C49072) * C181) * C139457 *
                C139575 +
            ((C47234 * C4337 + C139586 * C4667 + C47233 * C1873 +
              C47031 * C2170) *
                 C139328 +
             (C47234 * C4223 + C139586 * C4549 + C47233 * C1767 +
              C47031 * C2054) *
                 C181) *
                C139457 * C47029) *
               C139589 -
           (((C47234 * C4340 + C139586 * C4670 + C47233 * C1872 +
              C47031 * C2169) *
                 C139328 +
             (C47234 * C4226 + C139586 * C4552 + C47233 * C1766 +
              C47031 * C2056) *
                 C181) *
                C139457 * C139575 +
            ((C51031 + C51030) * C139328 + (C50924 + C50925) * C181) * C139457 *
                C47029) *
               C2699) *
              C139403)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[48] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C831 + C139586 * C1118) *
                C3607 +
            (C47233 * C245 + C47031 * C474 + C47234 * C1029 + C139586 * C1339) *
                C139561 -
            (C47234 * C4223 + C139586 * C4549 + C47233 * C1767 +
             C47031 * C2054) *
                C3608 -
            (C47234 * C4443 + C139586 * C4783 + C47233 * C1965 +
             C47031 * C2269) *
                C139403) *
               C139457 * C47029 +
           ((C47261 + C47260) * C3607 + (C47434 + C47435) * C139561 -
            (C49073 + C49072) * C3608 - (C49296 + C49297) * C139403) *
               C139457 * C139575) *
              C139328 * C139589 +
          (((C49072 + C49073) * C3608 -
            ((C47435 + C47434) * C139561 + (C47260 + C47261) * C3607) +
            (C49297 + C49296) * C139403) *
               C139457 * C47029 +
           ((C50925 + C50924) * C3608 -
            ((C47436 + C47437) * C139561 + (C47265 + C47264) * C3607) +
            (C51134 + C51135) * C139403) *
               C139457 * C139575) *
              C139328 * C139590 +
          (((C47264 + C47265) * C3607 + (C47437 + C47436) * C139561 -
            (C50924 + C50925) * C3608 - (C51135 + C51134) * C139403) *
               C139457 * C47029 +
           ((C47269 + C47268) * C3607 + (C47438 + C47439) * C139561 -
            (C47234 * C4226 + C139586 * C4552 + C47233 * C1766 +
             C47031 * C2056) *
                C3608 -
            (C47234 * C4446 + C139586 * C4786 + C47233 * C1969 +
             C47031 * C2275) *
                C139403) *
               C139457 * C139575) *
              C139328 * C2699)) /
        (p * q * std::sqrt(p + q));
    d2eezx[48] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139457 * C555) * C2702 +
             (C554 * C116 + C139457 * C561) * C139589 - C584 * C2703 -
             C585 * C139590 + C586 * C2704 + C587 * C2699) *
                C47029 +
            (C584 * C2702 + C585 * C139589 - C586 * C2703 - C587 * C139590 +
             C588 * C2704 + C589 * C2699) *
                C139575) *
               C47031 +
           ((C16986 + C16987 - C16988 - C16989 + C16990 + C16991) * C47029 +
            (C16992 + C16993 - C16994 - C16995 + C16996 + C16997) * C139575) *
               C139586) *
              C139561 +
          (((C2408 * C2703 -
             ((C554 * C1777 + C139457 * C2383) * C139589 +
              (C554 * C1767 + C139457 * C2376) * C2702) +
             C2409 * C139590 - C2410 * C2704 - C2411 * C2699) *
                C47029 +
            (C2410 * C2703 - (C2409 * C139589 + C2408 * C2702) +
             C2411 * C139590 - C3950 * C2704 - C3951 * C2699) *
                C139575) *
               C47031 +
           ((C4916 * C2703 - (C19107 * C139589 + C19108 * C2702) +
             C4917 * C139590 - C4918 * C2704 - C4919 * C2699) *
                C47029 +
            (C4918 * C2703 - (C4917 * C139589 + C4916 * C2702) +
             C4919 * C139590 - (C554 * C4226 + C139457 * C4902) * C2704 -
             (C554 * C4234 + C139457 * C4906) * C2699) *
                C139575) *
               C139586) *
              C139403) *
         C139328) /
        (p * q * std::sqrt(p + q));
    d2eezy[48] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C554 * C107 + C139457 * C555) * C181 +
              (C554 * C182 + C139457 * C641) * C139328) *
                 C47029 +
             (C648 + C664) * C139575) *
                C47031 +
            ((C15060 * C181 + C15179 * C139328) * C47029 +
             (C14134 + C14135) * C139575) *
                C139586) *
               C139589 -
           (((C14136 + C14137) * C139575 + (C14135 + C14134) * C47029) *
                C139586 +
            ((C665 + C651) * C139575 + (C664 + C648) * C47029) * C47031) *
               C139590 +
           ((C668 * C47029 + (C656 + C666) * C139575) * C47031 +
            ((C14137 + C14136) * C47029 + (C14138 + C14139) * C139575) *
                C139586) *
               C2699) *
              C139561 +
          ((((C2498 + C2514) * C47029 + (C2501 + C2515) * C139575) * C47031 +
            ((C16138 + C16139) * C47029 + (C18011 + C18012) * C139575) *
                C139586) *
               C139590 -
           (((C16139 + C16138) * C139575 +
             (C19250 * C139328 + C19108 * C181) * C47029) *
                C139586 +
            ((C2514 + C2498) * C139575 +
             ((C554 * C1873 + C139457 * C2492) * C139328 +
              (C554 * C1767 + C139457 * C2376) * C181) *
                 C47029) *
                C47031) *
               C139589 -
           ((((C554 * C4340 + C139457 * C5020) * C139328 +
              (C554 * C4226 + C139457 * C4902) * C181) *
                 C139575 +
             (C18012 + C18011) * C47029) *
                C139586 +
            ((C4032 + C4027) * C139575 + C4030 * C47029) * C47031) *
               C2699) *
              C139403)) /
        (p * q * std::sqrt(p + q));
    d2eezz[48] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139457 * C555) * C3607 +
             (C554 * C245 + C139457 * C719) * C139561 -
             (C554 * C1767 + C139457 * C2376) * C3608 -
             (C554 * C1965 + C139457 * C2591) * C139403) *
                C47029 +
            (C4108 + C4109 - C4110 - C4111) * C139575) *
               C47031 +
           ((C19383 + C19384 - C19385 - C19399) * C47029 + C19400 * C139575) *
               C139586) *
              C139328 * C139589 +
          (((C4110 - (C4109 + C4108) + C4111) * C47029 +
            (C4114 - (C4113 + C4112) + C4115) * C139575) *
               C47031 +
           (C19401 * C47029 + (C5143 - (C5144 + C5145) + C5151) * C139575) *
               C139586) *
              C139328 * C139590 +
          ((C4125 * C47029 + (C4118 + C4117 - C4116 - C4124) * C139575) *
               C47031 +
           ((C5145 + C5144 - C5143 - C5151) * C47029 +
            (C3202 * C3607 + C3376 * C139561 -
             (C554 * C4226 + C139457 * C4902) * C3608 -
             (C554 * C4446 + C139457 * C5136) * C139403) *
                C139575) *
               C139586) *
              C139328 * C2699)) /
        (p * q * std::sqrt(p + q));
    d2eexx[49] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139575 * C114) *
               C103 +
           (C47033 * C116 + C47029 * C125 + C47034 * C117 + C139575 * C126) *
               C92 -
           (C47034 * C109 + C139575 * C115 + C47033 * C108 + C47029 * C114) *
               C104 -
           (C47034 * C118 + C139575 * C127 + C47033 * C117 + C47029 * C126) *
               C93 +
           (C47033 * C109 + C47029 * C115 + C47034 * C110 + C139575 * C119) *
               C105 +
           (C47033 * C118 + C47029 * C127 + C47034 * C120 + C139575 * C128) *
               C94 -
           (C47034 * C111 + C139575 * C121 + C47033 * C110 + C47029 * C119) *
               C106 -
           (C47034 * C122 + C139575 * C129 + C47033 * C120 + C47029 * C128) *
               C95) *
              C47031 +
          ((C47033 * C831 + C47029 * C842 + C47034 * C828 + C139575 * C836) *
               C103 +
           (C47033 * C841 + C47029 * C854 + C47034 * C840 + C139575 * C853) *
               C92 -
           (C47034 * C829 + C139575 * C837 + C47033 * C828 + C47029 * C836) *
               C104 -
           (C47034 * C839 + C139575 * C852 + C47033 * C840 + C47029 * C853) *
               C93 +
           (C47033 * C829 + C47029 * C837 + C47034 * C830 + C139575 * C838) *
               C105 +
           (C47033 * C839 + C47029 * C852 + C47034 * C843 + C139575 * C855) *
               C94 -
           (C47034 * C2705 + C139575 * C2706 + C47033 * C830 + C47029 * C838) *
               C106 -
           (C47034 * C2707 + C139575 * C2708 + C47033 * C843 + C47029 * C855) *
               C95) *
              C139586) *
         C139457 * C139339 * C139328) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139575 * C114) *
                C826 +
            (C47033 * C116 + C47029 * C125 + C47034 * C117 + C139575 * C126) *
                C821 -
            (C47034 * C109 + C139575 * C115 + C47033 * C108 + C47029 * C114) *
                C827 -
            (C47034 * C118 + C139575 * C127 + C47033 * C117 + C47029 * C126) *
                C139305) *
               C47031 +
           ((C47768 + C47769) * C826 + (C47770 + C47771) * C821 -
            (C47772 + C47773) * C827 - (C47774 + C47775) * C139305) *
               C139586) *
              C139457 * C139339 * C823 +
          (((C47773 + C47772) * C827 -
            ((C47771 + C47770) * C821 + (C47769 + C47768) * C826) +
            (C47775 + C47774) * C139305) *
               C47031 +
           ((C47776 + C47777) * C827 -
            ((C47778 + C47779) * C821 + (C47780 + C47781) * C826) +
            (C47782 + C47783) * C139305) *
               C139586) *
              C139457 * C139339 * C824 +
          (((C47781 + C47780) * C826 + (C47779 + C47778) * C821 -
            (C47777 + C47776) * C827 - (C47783 + C47782) * C139305) *
               C47031 +
           ((C47033 * C5916 + C47029 * C5922 + C47034 * C5915 +
             C139575 * C5921) *
                C826 +
            (C47033 * C5919 + C47029 * C5925 + C47034 * C5918 +
             C139575 * C5924) *
                C821 -
            (C47034 * C5914 + C139575 * C5920 + C47033 * C5915 +
             C47029 * C5921) *
                C827 -
            (C47034 * C5917 + C139575 * C5923 + C47033 * C5918 +
             C47029 * C5924) *
                C139305) *
               C139586) *
              C139457 * C139339 * C825)) /
            (p * q * std::sqrt(p + q));
    d2eexy[49] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139575 * C114) *
                C181 +
            (C47033 * C182 + C47029 * C188 + C47034 * C183 + C139575 * C189) *
                C139328) *
               C47031 +
           ((C47033 * C831 + C47029 * C842 + C47034 * C828 + C139575 * C836) *
                C181 +
            (C47033 * C939 + C47029 * C947 + C47034 * C938 + C139575 * C946) *
                C139328) *
               C139586) *
              C139457 * C92 -
          (((C47034 * C937 + C139575 * C945 + C47033 * C938 + C47029 * C946) *
                C139328 +
            (C47034 * C829 + C139575 * C837 + C47033 * C828 + C47029 * C836) *
                C181) *
               C139586 +
           ((C47034 * C184 + C139575 * C190 + C47033 * C183 + C47029 * C189) *
                C139328 +
            (C47034 * C109 + C139575 * C115 + C47033 * C108 + C47029 * C114) *
                C181) *
               C47031) *
              C139457 * C93 +
          (((C47033 * C109 + C47029 * C115 + C47034 * C110 + C139575 * C119) *
                C181 +
            (C47033 * C184 + C47029 * C190 + C47034 * C185 + C139575 * C191) *
                C139328) *
               C47031 +
           ((C47033 * C829 + C47029 * C837 + C47034 * C830 + C139575 * C838) *
                C181 +
            (C47033 * C937 + C47029 * C945 + C47034 * C943 + C139575 * C951) *
                C139328) *
               C139586) *
              C139457 * C94 -
          (((C47034 * C2785 + C139575 * C2786 + C47033 * C943 + C47029 * C951) *
                C139328 +
            (C47034 * C2705 + C139575 * C2706 + C47033 * C830 + C47029 * C838) *
                C181) *
               C139586 +
           ((C47034 * C186 + C139575 * C192 + C47033 * C185 + C47029 * C191) *
                C139328 +
            (C47034 * C111 + C139575 * C121 + C47033 * C110 + C47029 * C119) *
                C181) *
               C47031) *
              C139457 * C95) *
         C139339) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139575 * C114) *
                C934 +
            (C47033 * C182 + C47029 * C188 + C47034 * C183 + C139575 * C189) *
                C823 -
            (C47769 + C47768) * C935 - (C47898 + C47899) * C824 +
            (C47781 + C47780) * C936 + (C47900 + C47901) * C825) *
               C47031 +
           ((C47768 + C47769) * C934 + (C47899 + C47898) * C823 -
            (C47780 + C47781) * C935 - (C47901 + C47900) * C824 +
            (C47033 * C5916 + C47029 * C5922 + C47034 * C5915 +
             C139575 * C5921) *
                C936 +
            (C47033 * C5982 + C47029 * C5985 + C47034 * C5981 +
             C139575 * C5984) *
                C825) *
               C139586) *
              C139457 * C821 +
          (((C47773 + C47772) * C935 -
            ((C47034 * C184 + C139575 * C190 + C47033 * C183 + C47029 * C189) *
                 C823 +
             (C47034 * C109 + C139575 * C115 + C47033 * C108 + C47029 * C114) *
                 C934) +
            (C47902 + C47903) * C824 - (C47777 + C47776) * C936 -
            (C47904 + C47905) * C825) *
               C47031 +
           ((C47776 + C47777) * C935 -
            ((C47903 + C47902) * C823 + (C47772 + C47773) * C934) +
            (C47905 + C47904) * C824 -
            (C47034 * C5914 + C139575 * C5920 + C47033 * C5915 +
             C47029 * C5921) *
                C936 -
            (C47034 * C5980 + C139575 * C5983 + C47033 * C5981 +
             C47029 * C5984) *
                C825) *
               C139586) *
              C139457 * C139305) *
         C139339) /
            (p * q * std::sqrt(p + q));
    d2eexz[49] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139575 * C114) *
                C244 +
            (C47033 * C245 + C47029 * C251 + C47034 * C246 + C139575 * C252) *
                C139339) *
               C47031 +
           ((C47033 * C831 + C47029 * C842 + C47034 * C828 + C139575 * C836) *
                C244 +
            (C47033 * C1029 + C47029 * C1037 + C47034 * C1028 +
             C139575 * C1036) *
                C139339) *
               C139586) *
              C139457 * C139328 * C92 -
          (((C47034 * C1027 + C139575 * C1035 + C47033 * C1028 +
             C47029 * C1036) *
                C139339 +
            (C47034 * C829 + C139575 * C837 + C47033 * C828 + C47029 * C836) *
                C244) *
               C139586 +
           ((C47034 * C247 + C139575 * C253 + C47033 * C246 + C47029 * C252) *
                C139339 +
            (C47034 * C109 + C139575 * C115 + C47033 * C108 + C47029 * C114) *
                C244) *
               C47031) *
              C139457 * C139328 * C93 +
          (((C47033 * C109 + C47029 * C115 + C47034 * C110 + C139575 * C119) *
                C244 +
            (C47033 * C247 + C47029 * C253 + C47034 * C248 + C139575 * C254) *
                C139339) *
               C47031 +
           ((C47033 * C829 + C47029 * C837 + C47034 * C830 + C139575 * C838) *
                C244 +
            (C47033 * C1027 + C47029 * C1035 + C47034 * C1033 +
             C139575 * C1041) *
                C139339) *
               C139586) *
              C139457 * C139328 * C94 -
          (((C47034 * C2861 + C139575 * C2862 + C47033 * C1033 +
             C47029 * C1041) *
                C139339 +
            (C47034 * C2705 + C139575 * C2706 + C47033 * C830 + C47029 * C838) *
                C244) *
               C139586 +
           ((C47034 * C249 + C139575 * C255 + C47033 * C248 + C47029 * C254) *
                C139339 +
            (C47034 * C111 + C139575 * C121 + C47033 * C110 + C47029 * C119) *
                C244) *
               C47031) *
              C139457 * C139328 * C95)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139575 * C114) *
                 C244 +
             (C47033 * C245 + C47029 * C251 + C47034 * C246 + C139575 * C252) *
                 C139339) *
                C47031 +
            ((C47768 + C47769) * C244 + (C48020 + C48021) * C139339) *
                C139586) *
               C139457 * C823 -
           (((C48022 + C48023) * C139339 + (C47780 + C47781) * C244) * C139586 +
            ((C48021 + C48020) * C139339 + (C47769 + C47768) * C244) * C47031) *
               C139457 * C824 +
           (((C47781 + C47780) * C244 + (C48023 + C48022) * C139339) * C47031 +
            ((C47033 * C5916 + C47029 * C5922 + C47034 * C5915 +
              C139575 * C5921) *
                 C244 +
             (C47033 * C6038 + C47029 * C6041 + C47034 * C6037 +
              C139575 * C6040) *
                 C139339) *
                C139586) *
               C139457 * C825) *
              C821 +
          ((((C47773 + C47772) * C244 + (C48024 + C48025) * C139339) * C47031 +
            ((C47776 + C47777) * C244 + (C48026 + C48027) * C139339) *
                C139586) *
               C139457 * C824 -
           (((C48025 + C48024) * C139339 + (C47772 + C47773) * C244) * C139586 +
            ((C47034 * C247 + C139575 * C253 + C47033 * C246 + C47029 * C252) *
                 C139339 +
             (C47034 * C109 + C139575 * C115 + C47033 * C108 + C47029 * C114) *
                 C244) *
                C47031) *
               C139457 * C823 -
           (((C47034 * C6036 + C139575 * C6039 + C47033 * C6037 +
              C47029 * C6040) *
                 C139339 +
             (C47034 * C5914 + C139575 * C5920 + C47033 * C5915 +
              C47029 * C5921) *
                 C244) *
                C139586 +
            ((C48027 + C48026) * C139339 + (C47777 + C47776) * C244) * C47031) *
               C139457 * C825) *
              C139305)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[49] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C47233 * C107 + C47031 * C308 + C47234 * C831 + C139586 * C1118) *
               C103 +
           (C47233 * C116 + C47031 * C314 + C47234 * C841 + C139586 * C1125) *
               C92 -
           (C47260 + C47261) * C104 - (C47262 + C47263) * C93 +
           (C47264 + C47265) * C105 + (C47266 + C47267) * C94 -
           (C47268 + C47269) * C106 - (C47270 + C47271) * C95) *
              C139457 * C47029 +
          ((C47261 + C47260) * C103 + (C47263 + C47262) * C92 -
           (C47265 + C47264) * C104 - (C47267 + C47266) * C93 +
           (C47269 + C47268) * C105 + (C47271 + C47270) * C94 -
           (C47234 * C2705 + C139586 * C2937 + C47233 * C111 + C47031 * C312) *
               C106 -
           (C47234 * C2707 + C139586 * C2938 + C47233 * C122 + C47031 * C318) *
               C95) *
              C139457 * C139575) *
         C139339 * C139328) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C831 + C139586 * C1118) *
                C826 +
            (C47233 * C116 + C47031 * C314 + C47234 * C841 + C139586 * C1125) *
                C821 -
            (C47260 + C47261) * C827 - (C47262 + C47263) * C139305) *
               C139457 * C47029 +
           ((C47261 + C47260) * C826 + (C47263 + C47262) * C821 -
            (C47265 + C47264) * C827 - (C47267 + C47266) * C139305) *
               C139457 * C139575) *
              C139339 * C823 +
          (((C48142 + C48143) * C827 -
            ((C47234 * C847 + C139586 * C1129 + C47233 * C841 +
              C47031 * C1125) *
                 C821 +
             (C47234 * C832 + C139586 * C1121 + C47233 * C831 +
              C47031 * C1118) *
                 C826) +
            (C48144 + C48145) * C139305) *
               C139457 * C47029 +
           ((C47233 * C829 + C47031 * C1119 + C47234 * C834 + C139586 * C1123) *
                C827 -
            ((C48145 + C48144) * C821 + (C48143 + C48142) * C826) +
            (C47233 * C839 + C47031 * C1127 + C47234 * C849 + C139586 * C1131) *
                C139305) *
               C139457 * C139575) *
              C139339 * C824 +
          (((C47233 * C832 + C47031 * C1121 + C47234 * C5916 +
             C139586 * C6094) *
                C826 +
            (C47233 * C847 + C47031 * C1129 + C47234 * C5919 +
             C139586 * C6097) *
                C821 -
            (C48146 + C48147) * C827 - (C48148 + C48149) * C139305) *
               C139457 * C47029 +
           ((C48147 + C48146) * C826 + (C48149 + C48148) * C821 -
            (C47234 * C5914 + C139586 * C6092 + C47233 * C834 +
             C47031 * C1123) *
                C827 -
            (C47234 * C5917 + C139586 * C6095 + C47233 * C849 +
             C47031 * C1131) *
                C139305) *
               C139457 * C139575) *
              C139339 * C825)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[49] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C831 + C139586 * C1118) *
                C181 +
            (C47233 * C182 + C47031 * C394 + C47234 * C939 + C139586 * C1231) *
                C139328) *
               C139457 * C47029 +
           ((C47261 + C47260) * C181 + (C47350 + C47351) * C139328) * C139457 *
               C139575) *
              C92 -
          (((C47352 + C47353) * C139328 + (C47265 + C47264) * C181) * C139457 *
               C139575 +
           ((C47351 + C47350) * C139328 + (C47260 + C47261) * C181) * C139457 *
               C47029) *
              C93 +
          (((C47264 + C47265) * C181 + (C47353 + C47352) * C139328) * C139457 *
               C47029 +
           ((C47269 + C47268) * C181 + (C47354 + C47355) * C139328) * C139457 *
               C139575) *
              C94 -
          (((C47234 * C2785 + C139586 * C3019 + C47233 * C186 + C47031 * C398) *
                C139328 +
            (C47234 * C2705 + C139586 * C2937 + C47233 * C111 + C47031 * C312) *
                C181) *
               C139457 * C139575 +
           ((C47355 + C47354) * C139328 + (C47268 + C47269) * C181) * C139457 *
               C47029) *
              C95) *
         C139339) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C831 + C139586 * C1118) *
                C934 +
            (C47233 * C182 + C47031 * C394 + C47234 * C939 + C139586 * C1231) *
                C823 -
            (C47234 * C832 + C139586 * C1121 + C47233 * C831 + C47031 * C1118) *
                C935 -
            (C47234 * C940 + C139586 * C1232 + C47233 * C939 + C47031 * C1231) *
                C824 +
            (C47233 * C832 + C47031 * C1121 + C47234 * C5916 +
             C139586 * C6094) *
                C936 +
            (C47233 * C940 + C47031 * C1232 + C47234 * C5982 +
             C139586 * C6148) *
                C825) *
               C139457 * C47029 +
           ((C47261 + C47260) * C934 + (C47350 + C47351) * C823 -
            (C48143 + C48142) * C935 - (C48256 + C48257) * C824 +
            (C48147 + C48146) * C936 + (C48258 + C48259) * C825) *
               C139457 * C139575) *
              C821 +
          (((C48142 + C48143) * C935 -
            ((C47351 + C47350) * C823 + (C47260 + C47261) * C934) +
            (C48257 + C48256) * C824 - (C48146 + C48147) * C936 -
            (C48259 + C48258) * C825) *
               C139457 * C47029 +
           ((C47233 * C829 + C47031 * C1119 + C47234 * C834 + C139586 * C1123) *
                C935 -
            ((C47352 + C47353) * C823 + (C47265 + C47264) * C934) +
            (C47233 * C937 + C47031 * C1235 + C47234 * C942 + C139586 * C1236) *
                C824 -
            (C47234 * C5914 + C139586 * C6092 + C47233 * C834 +
             C47031 * C1123) *
                C936 -
            (C47234 * C5980 + C139586 * C6150 + C47233 * C942 +
             C47031 * C1236) *
                C825) *
               C139457 * C139575) *
              C139305) *
         C139339) /
            (p * q * std::sqrt(p + q));
    d2eeyz[49] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C831 + C139586 * C1118) *
                C244 +
            (C47233 * C245 + C47031 * C474 + C47234 * C1029 + C139586 * C1339) *
                C139339) *
               C139457 * C47029 +
           ((C47261 + C47260) * C244 + (C47434 + C47435) * C139339) * C139457 *
               C139575) *
              C139328 * C92 -
          (((C47436 + C47437) * C139339 + (C47265 + C47264) * C244) * C139457 *
               C139575 +
           ((C47435 + C47434) * C139339 + (C47260 + C47261) * C244) * C139457 *
               C47029) *
              C139328 * C93 +
          (((C47264 + C47265) * C244 + (C47437 + C47436) * C139339) * C139457 *
               C47029 +
           ((C47269 + C47268) * C244 + (C47438 + C47439) * C139339) * C139457 *
               C139575) *
              C139328 * C94 -
          (((C47234 * C2861 + C139586 * C3113 + C47233 * C249 + C47031 * C478) *
                C139339 +
            (C47234 * C2705 + C139586 * C2937 + C47233 * C111 + C47031 * C312) *
                C244) *
               C139457 * C139575 +
           ((C47439 + C47438) * C139339 + (C47268 + C47269) * C244) * C139457 *
               C47029) *
              C139328 * C95)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47233 * C107 + C47031 * C308 + C47234 * C831 + C139586 * C1118) *
                 C244 +
             (C47233 * C245 + C47031 * C474 + C47234 * C1029 +
              C139586 * C1339) *
                 C139339) *
                C139457 * C47029 +
            ((C47261 + C47260) * C244 + (C47434 + C47435) * C139339) * C139457 *
                C139575) *
               C823 -
           (((C48366 + C48367) * C139339 + (C48143 + C48142) * C244) * C139457 *
                C139575 +
            ((C47234 * C1030 + C139586 * C1340 + C47233 * C1029 +
              C47031 * C1339) *
                 C139339 +
             (C47234 * C832 + C139586 * C1121 + C47233 * C831 +
              C47031 * C1118) *
                 C244) *
                C139457 * C47029) *
               C824 +
           (((C47233 * C832 + C47031 * C1121 + C47234 * C5916 +
              C139586 * C6094) *
                 C244 +
             (C47233 * C1030 + C47031 * C1340 + C47234 * C6038 +
              C139586 * C6203) *
                 C139339) *
                C139457 * C47029 +
            ((C48147 + C48146) * C244 + (C48368 + C48369) * C139339) * C139457 *
                C139575) *
               C825) *
              C821 +
          ((((C48142 + C48143) * C244 + (C48367 + C48366) * C139339) * C139457 *
                C47029 +
            ((C47233 * C829 + C47031 * C1119 + C47234 * C834 +
              C139586 * C1123) *
                 C244 +
             (C47233 * C1027 + C47031 * C1337 + C47234 * C1032 +
              C139586 * C1342) *
                 C139339) *
                C139457 * C139575) *
               C824 -
           (((C47436 + C47437) * C139339 + (C47265 + C47264) * C244) * C139457 *
                C139575 +
            ((C47435 + C47434) * C139339 + (C47260 + C47261) * C244) * C139457 *
                C47029) *
               C823 -
           (((C47234 * C6036 + C139586 * C6201 + C47233 * C1032 +
              C47031 * C1342) *
                 C139339 +
             (C47234 * C5914 + C139586 * C6092 + C47233 * C834 +
              C47031 * C1123) *
                 C244) *
                C139457 * C139575 +
            ((C48369 + C48368) * C139339 + (C48146 + C48147) * C244) * C139457 *
                C47029) *
               C825) *
              C139305)) /
            (p * q * std::sqrt(p + q));
    d2eezx[49] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C139457 * C555) * C103 +
            (C554 * C116 + C139457 * C561) * C92 - C584 * C104 - C585 * C93 +
            C586 * C105 + C587 * C94 - C588 * C106 - C589 * C95) *
               C47029 +
           (C584 * C103 + C585 * C92 - C586 * C104 - C587 * C93 + C588 * C105 +
            C589 * C94 - C590 * C106 - C591 * C95) *
               C139575) *
              C47031 +
          ((C15060 * C103 + C15061 * C92 - C1472 * C104 - C1473 * C93 +
            C1474 * C105 + C1475 * C94 - C3202 * C106 - C3203 * C95) *
               C47029 +
           (C1472 * C103 + C1473 * C92 - C1474 * C104 - C1475 * C93 +
            C3202 * C105 + C3203 * C94 -
            (C554 * C2705 + C139457 * C3195) * C106 -
            (C554 * C2707 + C139457 * C3196) * C95) *
               C139575) *
              C139586) *
         C139339 * C139328) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139457 * C555) * C826 +
             (C554 * C116 + C139457 * C561) * C821 - C584 * C827 -
             C585 * C139305) *
                C47029 +
            (C584 * C826 + C585 * C821 - C586 * C827 - C587 * C139305) *
                C139575) *
               C47031 +
           ((C15066 + C15067 - C15040 - C15041) * C47029 +
            (C15042 + C15043 - C15044 - C15045) * C139575) *
               C139586) *
              C139339 * C823 +
          (((C15040 - (C15067 + C15066) + C15041) * C47029 +
            (C15044 - (C15043 + C15042) + C15045) * C139575) *
               C47031 +
           ((C15046 - (C15068 + C15069) + C15051) * C47029 +
            (C15052 - (C15053 + C15054) + C15055) * C139575) *
               C139586) *
              C139339 * C824 +
          (((C15069 + C15068 - C15046 - C15051) * C47029 +
            (C15054 + C15053 - C15052 - C15055) * C139575) *
               C47031 +
           ((C20833 * C826 + C20834 * C821 - C15064 * C827 - C15065 * C139305) *
                C47029 +
            (C15064 * C826 + C15065 * C821 -
             (C554 * C5914 + C139457 * C6254) * C827 -
             (C554 * C5917 + C139457 * C6257) * C139305) *
                C139575) *
               C139586) *
              C139339 * C825)) /
            (p * q * std::sqrt(p + q));
    d2eezy[49] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139457 * C555) * C181 +
             (C554 * C182 + C139457 * C641) * C139328) *
                C47029 +
            (C648 + C664) * C139575) *
               C47031 +
           ((C15060 * C181 + C15179 * C139328) * C47029 +
            (C14134 + C14135) * C139575) *
               C139586) *
              C92 -
          (((C14136 + C14137) * C139575 + (C14135 + C14134) * C47029) *
               C139586 +
           ((C665 + C651) * C139575 + (C664 + C648) * C47029) * C47031) *
              C93 +
          ((C668 * C47029 + (C656 + C666) * C139575) * C47031 +
           ((C14137 + C14136) * C47029 + (C14138 + C14139) * C139575) *
               C139586) *
              C94 -
          ((((C554 * C2785 + C139457 * C3277) * C139328 +
             (C554 * C2705 + C139457 * C3195) * C181) *
                C139575 +
            (C14139 + C14138) * C47029) *
               C139586 +
           ((C667 + C657) * C139575 + C669 * C47029) * C47031) *
              C95) *
         C139339) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139457 * C555) * C934 +
             (C554 * C182 + C139457 * C641) * C823 - C15060 * C935 -
             C15179 * C824 + C15063 * C936 + C15180 * C825) *
                C47029 +
            (C1562 + C1563 - C1564 - C1582 + C1567 + C1583) * C139575) *
               C47031 +
           ((C15060 * C934 + C15179 * C823 - C15063 * C935 - C15180 * C824 +
             C20833 * C936 + C20907 * C825) *
                C47029 +
            (C15172 + C15173 - C15174 - C15175 + C15176 + C15182) * C139575) *
               C139586) *
              C821 +
          (((C1564 - (C1563 + C1562) + C1582 - C1567 - C1583) * C47029 +
            (C1572 - (C1571 + C1570) + C1584 - C1575 - C1585) * C139575) *
               C47031 +
           ((C15174 - (C15173 + C15172) + C15175 - C15176 - C15182) * C47029 +
            (C1478 * C935 - (C1580 * C823 + C1474 * C934) + C1581 * C824 -
             (C554 * C5914 + C139457 * C6254) * C936 -
             (C554 * C5980 + C139457 * C6312) * C825) *
                C139575) *
               C139586) *
              C139305) *
         C139339) /
            (p * q * std::sqrt(p + q));
    d2eezz[49] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139457 * C555) * C244 +
             (C554 * C245 + C139457 * C719) * C139339) *
                C47029 +
            (C726 + C742) * C139575) *
               C47031 +
           ((C15281 + C15297) * C47029 + C15284 * C139575) * C139586) *
              C139328 * C92 -
          ((C3372 * C139575 + C15289 * C47029) * C139586 +
           ((C743 + C729) * C139575 + (C742 + C726) * C47029) * C47031) *
              C139328 * C93 +
          ((C746 * C47029 + (C734 + C744) * C139575) * C47031 +
           (C17202 * C47029 + (C3373 + C3377) * C139575) * C139586) *
              C139328 * C94 -
          ((((C554 * C2861 + C139457 * C3370) * C139339 +
             (C554 * C2705 + C139457 * C3195) * C244) *
                C139575 +
            (C3377 + C3373) * C47029) *
               C139586 +
           ((C745 + C735) * C139575 + C747 * C47029) * C47031) *
              C139328 * C95)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C554 * C107 + C139457 * C555) * C244 +
              (C554 * C245 + C139457 * C719) * C139339) *
                 C47029 +
             (C726 + C742) * C139575) *
                C47031 +
            ((C15281 + C15297) * C47029 + C15284 * C139575) * C139586) *
               C823 -
           ((C15285 * C139575 + (C15298 + C15288) * C47029) * C139586 +
            (C15289 * C139575 + (C15297 + C15281) * C47029) * C47031) *
               C824 +
           (((C15288 + C15298) * C47029 + C15290 * C139575) * C47031 +
            ((C20976 + C20980) * C47029 + (C15291 + C15299) * C139575) *
                C139586) *
               C825) *
              C821 +
          (((C15284 * C47029 + C17202 * C139575) * C47031 +
            (C15290 * C47029 + (C1677 + C1687) * C139575) * C139586) *
               C824 -
           ((C3372 * C139575 + C15289 * C47029) * C139586 +
            ((C743 + C729) * C139575 + (C742 + C726) * C47029) * C47031) *
               C823 -
           ((((C554 * C6036 + C139457 * C6363) * C139339 +
              (C554 * C5914 + C139457 * C6254) * C244) *
                 C139575 +
             (C15299 + C15291) * C47029) *
                C139586 +
            ((C1687 + C1677) * C139575 + C15285 * C47029) * C47031) *
               C825) *
              C139305)) /
            (p * q * std::sqrt(p + q));
    d2eexx[50] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139575 * C114) *
                C137108 +
            (C47033 * C116 + C47029 * C125 + C47034 * C117 + C139575 * C126) *
                C139552 -
            (C47034 * C109 + C139575 * C115 + C47033 * C108 + C47029 * C114) *
                C137101 -
            (C47034 * C118 + C139575 * C127 + C47033 * C117 + C47029 * C126) *
                C139305) *
               C47031 +
           ((C47768 + C47769) * C137108 + (C47770 + C47771) * C139552 -
            (C47772 + C47773) * C137101 - (C47774 + C47775) * C139305) *
               C139586) *
              C139457 * C139339 * C139591 +
          (((C47773 + C47772) * C137101 -
            ((C47771 + C47770) * C139552 + (C47769 + C47768) * C137108) +
            (C47775 + C47774) * C139305) *
               C47031 +
           ((C47776 + C47777) * C137101 -
            ((C47778 + C47779) * C139552 + (C47780 + C47781) * C137108) +
            (C47782 + C47783) * C139305) *
               C139586) *
              C139457 * C139339 * C139592 +
          (((C47781 + C47780) * C137108 + (C47779 + C47778) * C139552 -
            (C47777 + C47776) * C137101 - (C47783 + C47782) * C139305) *
               C47031 +
           ((C53628 + C53629) * C137108 + (C53630 + C53631) * C139552 -
            (C47034 * C5914 + C139575 * C5920 + C47033 * C5915 +
             C47029 * C5921) *
                C137101 -
            (C47034 * C5917 + C139575 * C5923 + C47033 * C5918 +
             C47029 * C5924) *
                C139305) *
               C139586) *
              C139457 * C139339 * C7158)) /
        (p * q * std::sqrt(p + q));
    d2eexy[50] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139575 * C114) *
                C7235 +
            (C47033 * C182 + C47029 * C188 + C47034 * C183 + C139575 * C189) *
                C139591 -
            (C47769 + C47768) * C7236 - (C47898 + C47899) * C139592 +
            (C47781 + C47780) * C7237 + (C47900 + C47901) * C7158) *
               C47031 +
           ((C47768 + C47769) * C7235 + (C47899 + C47898) * C139591 -
            (C47780 + C47781) * C7236 - (C47901 + C47900) * C139592 +
            (C53628 + C53629) * C7237 + (C53703 + C53702) * C7158) *
               C139586) *
              C139457 * C139552 +
          (((C47773 + C47772) * C7236 -
            ((C47034 * C184 + C139575 * C190 + C47033 * C183 + C47029 * C189) *
                 C139591 +
             (C47034 * C109 + C139575 * C115 + C47033 * C108 + C47029 * C114) *
                 C7235) +
            (C47902 + C47903) * C139592 - (C47777 + C47776) * C7237 -
            (C47904 + C47905) * C7158) *
               C47031 +
           ((C47776 + C47777) * C7236 -
            ((C47903 + C47902) * C139591 + (C47772 + C47773) * C7235) +
            (C47905 + C47904) * C139592 -
            (C47034 * C5914 + C139575 * C5920 + C47033 * C5915 +
             C47029 * C5921) *
                C7237 -
            (C47034 * C5980 + C139575 * C5983 + C47033 * C5981 +
             C47029 * C5984) *
                C7158) *
               C139586) *
              C139457 * C139305) *
         C139339) /
        (p * q * std::sqrt(p + q));
    d2eexz[50] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139575 * C114) *
                 C244 +
             (C47033 * C245 + C47029 * C251 + C47034 * C246 + C139575 * C252) *
                 C139339) *
                C47031 +
            ((C47768 + C47769) * C244 + (C48020 + C48021) * C139339) *
                C139586) *
               C139457 * C139591 -
           (((C48022 + C48023) * C139339 + (C47780 + C47781) * C244) * C139586 +
            ((C48021 + C48020) * C139339 + (C47769 + C47768) * C244) * C47031) *
               C139457 * C139592 +
           (((C47781 + C47780) * C244 + (C48023 + C48022) * C139339) * C47031 +
            ((C53628 + C53629) * C244 + (C53774 + C53775) * C139339) *
                C139586) *
               C139457 * C7158) *
              C139552 +
          ((((C47773 + C47772) * C244 + (C48024 + C48025) * C139339) * C47031 +
            ((C47776 + C47777) * C244 + (C48026 + C48027) * C139339) *
                C139586) *
               C139457 * C139592 -
           (((C48025 + C48024) * C139339 + (C47772 + C47773) * C244) * C139586 +
            ((C47034 * C247 + C139575 * C253 + C47033 * C246 + C47029 * C252) *
                 C139339 +
             (C47034 * C109 + C139575 * C115 + C47033 * C108 + C47029 * C114) *
                 C244) *
                C47031) *
               C139457 * C139591 -
           (((C47034 * C6036 + C139575 * C6039 + C47033 * C6037 +
              C47029 * C6040) *
                 C139339 +
             (C47034 * C5914 + C139575 * C5920 + C47033 * C5915 +
              C47029 * C5921) *
                 C244) *
                C139586 +
            ((C48027 + C48026) * C139339 + (C47777 + C47776) * C244) * C47031) *
               C139457 * C7158) *
              C139305)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[50] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C831 + C139586 * C1118) *
                C137108 +
            (C47233 * C116 + C47031 * C314 + C47234 * C841 + C139586 * C1125) *
                C139552 -
            (C47260 + C47261) * C137101 - (C47262 + C47263) * C139305) *
               C139457 * C47029 +
           ((C47261 + C47260) * C137108 + (C47263 + C47262) * C139552 -
            (C47265 + C47264) * C137101 - (C47267 + C47266) * C139305) *
               C139457 * C139575) *
              C139339 * C139591 +
          (((C48142 + C48143) * C137101 -
            ((C47234 * C847 + C139586 * C1129 + C47233 * C841 +
              C47031 * C1125) *
                 C139552 +
             (C47234 * C832 + C139586 * C1121 + C47233 * C831 +
              C47031 * C1118) *
                 C137108) +
            (C48144 + C48145) * C139305) *
               C139457 * C47029 +
           ((C50019 + C50018) * C137101 -
            ((C48145 + C48144) * C139552 + (C48143 + C48142) * C137108) +
            (C50021 + C50020) * C139305) *
               C139457 * C139575) *
              C139339 * C139592 +
          (((C47233 * C832 + C47031 * C1121 + C47234 * C5916 +
             C139586 * C6094) *
                C137108 +
            (C47233 * C847 + C47031 * C1129 + C47234 * C5919 +
             C139586 * C6097) *
                C139552 -
            (C48146 + C48147) * C137101 - (C48148 + C48149) * C139305) *
               C139457 * C47029 +
           ((C48147 + C48146) * C137108 + (C48149 + C48148) * C139552 -
            (C47234 * C5914 + C139586 * C6092 + C47233 * C834 +
             C47031 * C1123) *
                C137101 -
            (C47234 * C5917 + C139586 * C6095 + C47233 * C849 +
             C47031 * C1131) *
                C139305) *
               C139457 * C139575) *
              C139339 * C7158)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[50] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C831 + C139586 * C1118) *
                C7235 +
            (C47233 * C182 + C47031 * C394 + C47234 * C939 + C139586 * C1231) *
                C139591 -
            (C47234 * C832 + C139586 * C1121 + C47233 * C831 + C47031 * C1118) *
                C7236 -
            (C47234 * C940 + C139586 * C1232 + C47233 * C939 + C47031 * C1231) *
                C139592 +
            (C47233 * C832 + C47031 * C1121 + C47234 * C5916 +
             C139586 * C6094) *
                C7237 +
            (C47233 * C940 + C47031 * C1232 + C47234 * C5982 +
             C139586 * C6148) *
                C7158) *
               C139457 * C47029 +
           ((C47261 + C47260) * C7235 + (C47350 + C47351) * C139591 -
            (C48143 + C48142) * C7236 - (C48256 + C48257) * C139592 +
            (C48147 + C48146) * C7237 + (C48258 + C48259) * C7158) *
               C139457 * C139575) *
              C139552 +
          (((C48142 + C48143) * C7236 -
            ((C47351 + C47350) * C139591 + (C47260 + C47261) * C7235) +
            (C48257 + C48256) * C139592 - (C48146 + C48147) * C7237 -
            (C48259 + C48258) * C7158) *
               C139457 * C47029 +
           ((C50019 + C50018) * C7236 -
            ((C47352 + C47353) * C139591 + (C47265 + C47264) * C7235) +
            (C50124 + C50125) * C139592 -
            (C47234 * C5914 + C139586 * C6092 + C47233 * C834 +
             C47031 * C1123) *
                C7237 -
            (C47234 * C5980 + C139586 * C6150 + C47233 * C942 +
             C47031 * C1236) *
                C7158) *
               C139457 * C139575) *
              C139305) *
         C139339) /
        (p * q * std::sqrt(p + q));
    d2eeyz[50] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47233 * C107 + C47031 * C308 + C47234 * C831 + C139586 * C1118) *
                 C244 +
             (C47233 * C245 + C47031 * C474 + C47234 * C1029 +
              C139586 * C1339) *
                 C139339) *
                C139457 * C47029 +
            ((C47261 + C47260) * C244 + (C47434 + C47435) * C139339) * C139457 *
                C139575) *
               C139591 -
           (((C48366 + C48367) * C139339 + (C48143 + C48142) * C244) * C139457 *
                C139575 +
            ((C47234 * C1030 + C139586 * C1340 + C47233 * C1029 +
              C47031 * C1339) *
                 C139339 +
             (C47234 * C832 + C139586 * C1121 + C47233 * C831 +
              C47031 * C1118) *
                 C244) *
                C139457 * C47029) *
               C139592 +
           (((C47233 * C832 + C47031 * C1121 + C47234 * C5916 +
              C139586 * C6094) *
                 C244 +
             (C47233 * C1030 + C47031 * C1340 + C47234 * C6038 +
              C139586 * C6203) *
                 C139339) *
                C139457 * C47029 +
            ((C48147 + C48146) * C244 + (C48368 + C48369) * C139339) * C139457 *
                C139575) *
               C7158) *
              C139552 +
          ((((C48142 + C48143) * C244 + (C48367 + C48366) * C139339) * C139457 *
                C47029 +
            ((C50019 + C50018) * C244 + (C50228 + C50229) * C139339) * C139457 *
                C139575) *
               C139592 -
           (((C47436 + C47437) * C139339 + (C47265 + C47264) * C244) * C139457 *
                C139575 +
            ((C47435 + C47434) * C139339 + (C47260 + C47261) * C244) * C139457 *
                C47029) *
               C139591 -
           (((C47234 * C6036 + C139586 * C6201 + C47233 * C1032 +
              C47031 * C1342) *
                 C139339 +
             (C47234 * C5914 + C139586 * C6092 + C47233 * C834 +
              C47031 * C1123) *
                 C244) *
                C139457 * C139575 +
            ((C48369 + C48368) * C139339 + (C48146 + C48147) * C244) * C139457 *
                C47029) *
               C7158) *
              C139305)) /
        (p * q * std::sqrt(p + q));
    d2eezx[50] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C554 * C107 + C139457 * C555) * C137108 +
                       (C554 * C116 + C139457 * C561) * C139552 -
                       C584 * C137101 - C585 * C139305) *
                          C47029 +
                      (C584 * C137108 + C585 * C139552 - C586 * C137101 -
                       C587 * C139305) *
                          C139575) *
                         C47031 +
                     ((C22631 + C22632 - C22633 - C22634) * C47029 +
                      (C22635 + C22636 - C22637 - C22638) * C139575) *
                         C139586) *
                        C139339 * C139591 +
                    (((C22633 - (C22632 + C22631) + C22634) * C47029 +
                      (C22637 - (C22636 + C22635) + C22638) * C139575) *
                         C47031 +
                     ((C22639 - (C22640 + C22641) + C22642) * C47029 +
                      (C22643 - (C22644 + C22645) + C22646) * C139575) *
                         C139586) *
                        C139339 * C139592 +
                    (((C22641 + C22640 - C22639 - C22642) * C47029 +
                      (C22645 + C22644 - C22643 - C22646) * C139575) *
                         C47031 +
                     ((C20833 * C137108 + C20834 * C139552 - C15064 * C137101 -
                       C15065 * C139305) *
                          C47029 +
                      (C15064 * C137108 + C15065 * C139552 -
                       (C554 * C5914 + C139457 * C6254) * C137101 -
                       (C554 * C5917 + C139457 * C6257) * C139305) *
                          C139575) *
                         C139586) *
                        C139339 * C7158)) /
                  (p * q * std::sqrt(p + q));
    d2eezy[50] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139457 * C555) * C7235 +
             (C554 * C182 + C139457 * C641) * C139591 - C15060 * C7236 -
             C15179 * C139592 + C15063 * C7237 + C15180 * C7158) *
                C47029 +
            (C7695 + C7696 - C7697 - C7698 + C7699 + C7700) * C139575) *
               C47031 +
           ((C15060 * C7235 + C15179 * C139591 - C15063 * C7236 -
             C15180 * C139592 + C20833 * C7237 + C20907 * C7158) *
                C47029 +
            (C22745 + C22746 - C22747 - C22748 + C22749 + C22750) * C139575) *
               C139586) *
              C139552 +
          (((C7697 - (C7696 + C7695) + C7698 - C7699 - C7700) * C47029 +
            (C7703 - (C7702 + C7701) + C7704 - C7705 - C7706) * C139575) *
               C47031 +
           ((C22747 - (C22746 + C22745) + C22748 - C22749 - C22750) * C47029 +
            (C1478 * C7236 - (C1580 * C139591 + C1474 * C7235) +
             C1581 * C139592 - (C554 * C5914 + C139457 * C6254) * C7237 -
             (C554 * C5980 + C139457 * C6312) * C7158) *
                C139575) *
               C139586) *
              C139305) *
         C139339) /
        (p * q * std::sqrt(p + q));
    d2eezz[50] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C554 * C107 + C139457 * C555) * C244 +
              (C554 * C245 + C139457 * C719) * C139339) *
                 C47029 +
             (C726 + C742) * C139575) *
                C47031 +
            ((C15281 + C15297) * C47029 + C15284 * C139575) * C139586) *
               C139591 -
           ((C15285 * C139575 + (C15298 + C15288) * C47029) * C139586 +
            (C15289 * C139575 + (C15297 + C15281) * C47029) * C47031) *
               C139592 +
           (((C15288 + C15298) * C47029 + C15290 * C139575) * C47031 +
            ((C20976 + C20980) * C47029 + (C15291 + C15299) * C139575) *
                C139586) *
               C7158) *
              C139552 +
          (((C15284 * C47029 + C17202 * C139575) * C47031 +
            (C15290 * C47029 + (C1677 + C1687) * C139575) * C139586) *
               C139592 -
           ((C3372 * C139575 + C15289 * C47029) * C139586 +
            ((C743 + C729) * C139575 + (C742 + C726) * C47029) * C47031) *
               C139591 -
           ((((C554 * C6036 + C139457 * C6363) * C139339 +
              (C554 * C5914 + C139457 * C6254) * C244) *
                 C139575 +
             (C15299 + C15291) * C47029) *
                C139586 +
            ((C1687 + C1677) * C139575 + C15285 * C47029) * C47031) *
               C7158) *
              C139305)) /
        (p * q * std::sqrt(p + q));
    d2eexx[51] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139575 * C114) *
                 C5913 +
             (C47033 * C116 + C47029 * C125 + C47034 * C117 + C139575 * C126) *
                 C139300) *
                C47031 +
            ((C47768 + C47769) * C5913 + (C47770 + C47771) * C139300) *
                C139586) *
               C139457 * C139561 -
           (((C51578 + C51579) * C139300 + (C51580 + C51581) * C5913) *
                C139586 +
            ((C47034 * C1776 + C139575 * C1789 + C47033 * C1777 +
              C47029 * C1790) *
                 C139300 +
             (C47034 * C1764 + C139575 * C1772 + C47033 * C1767 +
              C47029 * C1778) *
                 C5913) *
                C47031) *
               C139457 * C139403) *
              C139591 +
          ((((C51581 + C51580) * C5913 + (C51579 + C51578) * C139300) * C47031 +
            ((C57236 + C57237) * C5913 + (C57238 + C57239) * C139300) *
                C139586) *
               C139457 * C139403 -
           (((C47778 + C47779) * C139300 + (C47780 + C47781) * C5913) *
                C139586 +
            ((C47771 + C47770) * C139300 + (C47769 + C47768) * C5913) *
                C47031) *
               C139457 * C139561) *
              C139592 +
          ((((C47781 + C47780) * C5913 + (C47779 + C47778) * C139300) * C47031 +
            ((C53628 + C53629) * C5913 + (C53630 + C53631) * C139300) *
                C139586) *
               C139457 * C139561 -
           (((C47034 * C24130 + C139575 * C24134 + C47033 * C24131 +
              C47029 * C24135) *
                 C139300 +
             (C47034 * C24128 + C139575 * C24132 + C47033 * C24129 +
              C47029 * C24133) *
                 C5913) *
                C139586 +
            ((C57239 + C57238) * C139300 + (C57237 + C57236) * C5913) *
                C47031) *
               C139457 * C139403) *
              C7158)) /
        (p * q * std::sqrt(p + q));
    d2eexy[51] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139575 * C114) *
                C7235 +
            (C47033 * C182 + C47029 * C188 + C47034 * C183 + C139575 * C189) *
                C139591 -
            (C47769 + C47768) * C7236 - (C47898 + C47899) * C139592 +
            (C47781 + C47780) * C7237 + (C47900 + C47901) * C7158) *
               C47031 +
           ((C47768 + C47769) * C7235 + (C47899 + C47898) * C139591 -
            (C47780 + C47781) * C7236 - (C47901 + C47900) * C139592 +
            (C53628 + C53629) * C7237 + (C53703 + C53702) * C7158) *
               C139586) *
              C139457 * C139300 * C139561 +
          (((C51581 + C51580) * C7236 -
            ((C47034 * C1870 + C139575 * C1878 + C47033 * C1873 +
              C47029 * C1881) *
                 C139591 +
             (C47034 * C1764 + C139575 * C1772 + C47033 * C1767 +
              C47029 * C1778) *
                 C7235) +
            (C51722 + C51723) * C139592 - (C57237 + C57236) * C7237 -
            (C57342 + C57343) * C7158) *
               C47031 +
           ((C57236 + C57237) * C7236 -
            ((C51723 + C51722) * C139591 + (C51580 + C51581) * C7235) +
            (C57343 + C57342) * C139592 -
            (C47034 * C24128 + C139575 * C24132 + C47033 * C24129 +
             C47029 * C24133) *
                C7237 -
            (C47034 * C24246 + C139575 * C24248 + C47033 * C24247 +
             C47029 * C24249) *
                C7158) *
               C139586) *
              C139457 * C139300 * C139403)) /
        (p * q * std::sqrt(p + q));
    d2eexz[51] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139575 * C114) *
                C3607 +
            (C47033 * C245 + C47029 * C251 + C47034 * C246 + C139575 * C252) *
                C139561 -
            (C47034 * C1764 + C139575 * C1772 + C47033 * C1767 +
             C47029 * C1778) *
                C3608 -
            (C47034 * C1964 + C139575 * C1972 + C47033 * C1965 +
             C47029 * C1973) *
                C139403) *
               C47031 +
           ((C47768 + C47769) * C3607 + (C48020 + C48021) * C139561 -
            (C51580 + C51581) * C3608 - (C51864 + C51865) * C139403) *
               C139586) *
              C139457 * C139591 +
          (((C51581 + C51580) * C3608 -
            ((C48021 + C48020) * C139561 + (C47769 + C47768) * C3607) +
            (C51865 + C51864) * C139403) *
               C47031 +
           ((C57236 + C57237) * C3608 -
            ((C48022 + C48023) * C139561 + (C47780 + C47781) * C3607) +
            (C57446 + C57447) * C139403) *
               C139586) *
              C139457 * C139592 +
          (((C47781 + C47780) * C3607 + (C48023 + C48022) * C139561 -
            (C57237 + C57236) * C3608 - (C57447 + C57446) * C139403) *
               C47031 +
           ((C53628 + C53629) * C3607 + (C53774 + C53775) * C139561 -
            (C47034 * C24128 + C139575 * C24132 + C47033 * C24129 +
             C47029 * C24133) *
                C3608 -
            (C47034 * C24354 + C139575 * C24356 + C47033 * C24355 +
             C47029 * C24357) *
                C139403) *
               C139586) *
              C139457 * C7158) *
         C139300) /
        (p * q * std::sqrt(p + q));
    d2eeyx[51] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47233 * C107 + C47031 * C308 + C47234 * C831 + C139586 * C1118) *
                 C5913 +
             (C47233 * C116 + C47031 * C314 + C47234 * C841 + C139586 * C1125) *
                 C139300) *
                C139457 * C47029 +
            ((C47261 + C47260) * C5913 + (C47263 + C47262) * C139300) *
                C139457 * C139575) *
               C139561 -
           (((C49075 + C49074) * C139300 + (C49073 + C49072) * C5913) *
                C139457 * C139575 +
            ((C47234 * C4230 + C139586 * C4553 + C47233 * C1777 +
              C47031 * C2061) *
                 C139300 +
             (C47234 * C4223 + C139586 * C4549 + C47233 * C1767 +
              C47031 * C2054) *
                 C5913) *
                C139457 * C47029) *
               C139403) *
              C139591 +
          ((((C47233 * C4223 + C47031 * C4549 + C47234 * C8754 +
              C139586 * C9000) *
                 C5913 +
             (C47233 * C4230 + C47031 * C4553 + C47234 * C8757 +
              C139586 * C9003) *
                 C139300) *
                C139457 * C47029 +
            ((C52007 + C52006) * C5913 + (C52009 + C52008) * C139300) *
                C139457 * C139575) *
               C139403 -
           (((C48145 + C48144) * C139300 + (C48143 + C48142) * C5913) *
                C139457 * C139575 +
            ((C47234 * C847 + C139586 * C1129 + C47233 * C841 +
              C47031 * C1125) *
                 C139300 +
             (C47234 * C832 + C139586 * C1121 + C47233 * C831 +
              C47031 * C1118) *
                 C5913) *
                C139457 * C47029) *
               C139561) *
              C139592 +
          ((((C47233 * C832 + C47031 * C1121 + C47234 * C5916 +
              C139586 * C6094) *
                 C5913 +
             (C47233 * C847 + C47031 * C1129 + C47234 * C5919 +
              C139586 * C6097) *
                 C139300) *
                C139457 * C47029 +
            ((C48147 + C48146) * C5913 + (C48149 + C48148) * C139300) *
                C139457 * C139575) *
               C139561 -
           (((C47234 * C24130 + C139586 * C24464 + C47233 * C8756 +
              C47031 * C9002) *
                 C139300 +
             (C47234 * C24128 + C139586 * C24462 + C47233 * C8753 +
              C47031 * C8999) *
                 C5913) *
                C139457 * C139575 +
            ((C47234 * C24131 + C139586 * C24465 + C47233 * C8757 +
              C47031 * C9003) *
                 C139300 +
             (C47234 * C24129 + C139586 * C24463 + C47233 * C8754 +
              C47031 * C9000) *
                 C5913) *
                C139457 * C47029) *
               C139403) *
              C7158)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[51] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C831 + C139586 * C1118) *
                C7235 +
            (C47233 * C182 + C47031 * C394 + C47234 * C939 + C139586 * C1231) *
                C139591 -
            (C47234 * C832 + C139586 * C1121 + C47233 * C831 + C47031 * C1118) *
                C7236 -
            (C47234 * C940 + C139586 * C1232 + C47233 * C939 + C47031 * C1231) *
                C139592 +
            (C47233 * C832 + C47031 * C1121 + C47234 * C5916 +
             C139586 * C6094) *
                C7237 +
            (C47233 * C940 + C47031 * C1232 + C47234 * C5982 +
             C139586 * C6148) *
                C7158) *
               C139457 * C47029 +
           ((C47261 + C47260) * C7235 + (C47350 + C47351) * C139591 -
            (C48143 + C48142) * C7236 - (C48256 + C48257) * C139592 +
            (C48147 + C48146) * C7237 + (C48258 + C48259) * C7158) *
               C139457 * C139575) *
              C139300 * C139561 +
          (((C47233 * C4223 + C47031 * C4549 + C47234 * C8754 +
             C139586 * C9000) *
                C7236 -
            ((C47234 * C4337 + C139586 * C4667 + C47233 * C1873 +
              C47031 * C2170) *
                 C139591 +
             (C47234 * C4223 + C139586 * C4549 + C47233 * C1767 +
              C47031 * C2054) *
                 C7235) +
            (C47233 * C4337 + C47031 * C4667 + C47234 * C8840 +
             C139586 * C9078) *
                C139592 -
            (C47234 * C24129 + C139586 * C24463 + C47233 * C8754 +
             C47031 * C9000) *
                C7237 -
            (C47234 * C24247 + C139586 * C24564 + C47233 * C8840 +
             C47031 * C9078) *
                C7158) *
               C139457 * C47029 +
           ((C52007 + C52006) * C7236 -
            ((C49187 + C49186) * C139591 + (C49073 + C49072) * C7235) +
            (C52144 + C52145) * C139592 -
            (C47234 * C24128 + C139586 * C24462 + C47233 * C8753 +
             C47031 * C8999) *
                C7237 -
            (C47234 * C24246 + C139586 * C24565 + C47233 * C8839 +
             C47031 * C9079) *
                C7158) *
               C139457 * C139575) *
              C139300 * C139403)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[51] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C831 + C139586 * C1118) *
                C3607 +
            (C47233 * C245 + C47031 * C474 + C47234 * C1029 + C139586 * C1339) *
                C139561 -
            (C47234 * C4223 + C139586 * C4549 + C47233 * C1767 +
             C47031 * C2054) *
                C3608 -
            (C47234 * C4443 + C139586 * C4783 + C47233 * C1965 +
             C47031 * C2269) *
                C139403) *
               C139457 * C47029 +
           ((C47261 + C47260) * C3607 + (C47434 + C47435) * C139561 -
            (C49073 + C49072) * C3608 - (C49296 + C49297) * C139403) *
               C139457 * C139575) *
              C139591 +
          (((C47233 * C4223 + C47031 * C4549 + C47234 * C8754 +
             C139586 * C9000) *
                C3608 -
            ((C47234 * C1030 + C139586 * C1340 + C47233 * C1029 +
              C47031 * C1339) *
                 C139561 +
             (C47234 * C832 + C139586 * C1121 + C47233 * C831 +
              C47031 * C1118) *
                 C3607) +
            (C47233 * C4443 + C47031 * C4783 + C47234 * C8920 +
             C139586 * C9155) *
                C139403) *
               C139457 * C47029 +
           ((C52007 + C52006) * C3608 -
            ((C48366 + C48367) * C139561 + (C48143 + C48142) * C3607) +
            (C52280 + C52281) * C139403) *
               C139457 * C139575) *
              C139592 +
          (((C47233 * C832 + C47031 * C1121 + C47234 * C5916 +
             C139586 * C6094) *
                C3607 +
            (C47233 * C1030 + C47031 * C1340 + C47234 * C6038 +
             C139586 * C6203) *
                C139561 -
            (C47234 * C24129 + C139586 * C24463 + C47233 * C8754 +
             C47031 * C9000) *
                C3608 -
            (C47234 * C24355 + C139586 * C24664 + C47233 * C8920 +
             C47031 * C9155) *
                C139403) *
               C139457 * C47029 +
           ((C48147 + C48146) * C3607 + (C48368 + C48369) * C139561 -
            (C47234 * C24128 + C139586 * C24462 + C47233 * C8753 +
             C47031 * C8999) *
                C3608 -
            (C47234 * C24354 + C139586 * C24665 + C47233 * C8919 +
             C47031 * C9156) *
                C139403) *
               C139457 * C139575) *
              C7158) *
         C139300) /
        (p * q * std::sqrt(p + q));
    d2eezx[51] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C554 * C107 + C139457 * C555) * C5913 +
              (C554 * C116 + C139457 * C561) * C139300) *
                 C47029 +
             (C584 * C5913 + C585 * C139300) * C139575) *
                C47031 +
            ((C20819 + C20820) * C47029 + (C20821 + C20822) * C139575) *
                C139586) *
               C139561 -
           (((C21719 + C21720) * C139575 + (C21721 + C21722) * C47029) *
                C139586 +
            ((C2409 * C139300 + C2408 * C5913) * C139575 +
             ((C554 * C1777 + C139457 * C2383) * C139300 +
              (C554 * C1767 + C139457 * C2376) * C5913) *
                 C47029) *
                C47031) *
               C139403) *
              C139591 +
          ((((C21722 + C21721) * C47029 + (C21720 + C21719) * C139575) *
                C47031 +
            ((C24777 + C24778) * C47029 + (C24773 + C24774) * C139575) *
                C139586) *
               C139403 -
           (((C20823 + C20824) * C139575 + (C20825 + C20826) * C47029) *
                C139586 +
            ((C20822 + C20821) * C139575 + (C20820 + C20819) * C47029) *
                C47031) *
               C139561) *
              C139592 +
          ((((C20826 + C20825) * C47029 + (C20824 + C20823) * C139575) *
                C47031 +
            ((C20835 + C20836) * C47029 + (C20831 + C20832) * C139575) *
                C139586) *
               C139561 -
           ((((C554 * C24130 + C139457 * C24766) * C139300 +
              (C554 * C24128 + C139457 * C24764) * C5913) *
                 C139575 +
             ((C554 * C24131 + C139457 * C24767) * C139300 +
              (C554 * C24129 + C139457 * C24765) * C5913) *
                 C47029) *
                C139586 +
            ((C24774 + C24773) * C139575 + (C24778 + C24777) * C47029) *
                C47031) *
               C139403) *
              C7158)) /
        (p * q * std::sqrt(p + q));
    d2eezy[51] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139457 * C555) * C7235 +
             (C554 * C182 + C139457 * C641) * C139591 - C15060 * C7236 -
             C15179 * C139592 + C15063 * C7237 + C15180 * C7158) *
                C47029 +
            (C7695 + C7696 - C7697 - C7698 + C7699 + C7700) * C139575) *
               C47031 +
           ((C15060 * C7235 + C15179 * C139591 - C15063 * C7236 -
             C15180 * C139592 + C20833 * C7237 + C20907 * C7158) *
                C47029 +
            (C22745 + C22746 - C22747 - C22748 + C22749 + C22750) * C139575) *
               C139586) *
              C139300 * C139561 +
          (((C19108 * C7236 -
             ((C554 * C1873 + C139457 * C2492) * C139591 +
              (C554 * C1767 + C139457 * C2376) * C7235) +
             C19250 * C139592 - C24775 * C7237 - C24881 * C7158) *
                C47029 +
            (C4916 * C7236 - (C2510 * C139591 + C2408 * C7235) +
             C5032 * C139592 - C19109 * C7237 - C19251 * C7158) *
                C139575) *
               C47031 +
           ((C24775 * C7236 - (C19250 * C139591 + C19108 * C7235) +
             C24881 * C139592 - (C554 * C24129 + C139457 * C24765) * C7237 -
             (C554 * C24247 + C139457 * C24876) * C7158) *
                C47029 +
            (C19109 * C7236 - (C5032 * C139591 + C4916 * C7235) +
             C19251 * C139592 - (C554 * C24128 + C139457 * C24764) * C7237 -
             (C554 * C24246 + C139457 * C24877) * C7158) *
                C139575) *
               C139586) *
              C139300 * C139403)) /
        (p * q * std::sqrt(p + q));
    d2eezz[51] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139457 * C555) * C3607 +
             (C554 * C245 + C139457 * C719) * C139561 -
             (C554 * C1767 + C139457 * C2376) * C3608 -
             (C554 * C1965 + C139457 * C2591) * C139403) *
                C47029 +
            (C4108 + C4109 - C4110 - C4111) * C139575) *
               C47031 +
           ((C19383 + C19384 - C19385 - C19399) * C47029 + C19400 * C139575) *
               C139586) *
              C139591 +
          (((C19385 - (C19384 + C19383) + C19399) * C47029 + C19401 * C139575) *
               C47031 +
           ((C24982 - (C24983 + C24984) + C24988) * C47029 +
            (C19390 - (C19391 + C19392) + C19402) * C139575) *
               C139586) *
              C139592 +
          (((C24984 + C24983 - C24982 - C24988) * C47029 +
            (C19392 + C19391 - C19390 - C19402) * C139575) *
               C47031 +
           ((C20833 * C3607 + C20979 * C139561 -
             (C554 * C24129 + C139457 * C24765) * C3608 -
             (C554 * C24355 + C139457 * C24979) * C139403) *
                C47029 +
            (C15064 * C3607 + C15296 * C139561 -
             (C554 * C24128 + C139457 * C24764) * C3608 -
             (C554 * C24354 + C139457 * C24980) * C139403) *
                C139575) *
               C139586) *
              C7158) *
         C139300) /
        (p * q * std::sqrt(p + q));
    d2eexx[52] +=
        (-std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139575 * C114) *
                C5913 +
            (C47033 * C116 + C47029 * C125 + C47034 * C117 + C139575 * C126) *
                C139300) *
               C47031 +
           ((C47768 + C47769) * C5913 + (C47770 + C47771) * C139300) *
               C139586) *
              C139457 * C139339 * C5909 -
          (((C47778 + C47779) * C139300 + (C47780 + C47781) * C5913) * C139586 +
           ((C47771 + C47770) * C139300 + (C47769 + C47768) * C5913) * C47031) *
              C139457 * C139339 * C5910 +
          (((C47781 + C47780) * C5913 + (C47779 + C47778) * C139300) * C47031 +
           ((C53628 + C53629) * C5913 + (C53630 + C53631) * C139300) *
               C139586) *
              C139457 * C139339 * C5911 -
          (((C47034 * C20372 + C139575 * C20376 + C47033 * C20373 +
             C47029 * C20377) *
                C139300 +
            (C47034 * C20370 + C139575 * C20374 + C47033 * C20371 +
             C47029 * C20375) *
                C5913) *
               C139586 +
           ((C53631 + C53630) * C139300 + (C53629 + C53628) * C5913) * C47031) *
              C139457 * C139339 * C5912)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139575 * C114) *
                C5230 +
            (C47033 * C116 + C47029 * C125 + C47034 * C117 + C139575 * C126) *
                C5225 -
            (C47034 * C109 + C139575 * C115 + C47033 * C108 + C47029 * C114) *
                C5231 -
            (C47034 * C118 + C139575 * C127 + C47033 * C117 + C47029 * C126) *
                C5226 +
            (C47033 * C109 + C47029 * C115 + C47034 * C110 + C139575 * C119) *
                C5232 +
            (C47033 * C118 + C47029 * C127 + C47034 * C120 + C139575 * C128) *
                C5227) *
               C47031 +
           ((C47768 + C47769) * C5230 + (C47770 + C47771) * C5225 -
            (C47772 + C47773) * C5231 - (C47774 + C47775) * C5226 +
            (C49700 + C49701) * C5232 + (C49702 + C49703) * C5227) *
               C139586) *
              C139457 * C139339 * C5228 +
          (((C47773 + C47772) * C5231 -
            ((C47771 + C47770) * C5225 + (C47769 + C47768) * C5230) +
            (C47775 + C47774) * C5226 - (C49701 + C49700) * C5232 -
            (C49703 + C49702) * C5227) *
               C47031 +
           ((C47776 + C47777) * C5231 -
            ((C47778 + C47779) * C5225 + (C47780 + C47781) * C5230) +
            (C47782 + C47783) * C5226 -
            (C47034 * C835 + C139575 * C850 + C47033 * C834 + C47029 * C846) *
                C5232 -
            (C47034 * C851 + C139575 * C859 + C47033 * C849 + C47029 * C858) *
                C5227) *
               C139586) *
              C139457 * C139339 * C139377)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139575 * C114) *
                 C5913 +
             (C47033 * C116 + C47029 * C125 + C47034 * C117 + C139575 * C126) *
                 C139300) *
                C47031 +
            ((C47768 + C47769) * C5913 + (C47770 + C47771) * C139300) *
                C139586) *
               C139457 * C1761 -
           (((C51578 + C51579) * C139300 + (C51580 + C51581) * C5913) *
                C139586 +
            ((C47034 * C1776 + C139575 * C1789 + C47033 * C1777 +
              C47029 * C1790) *
                 C139300 +
             (C47034 * C1764 + C139575 * C1772 + C47033 * C1767 +
              C47029 * C1778) *
                 C5913) *
                C47031) *
               C139457 * C1762 +
           (((C47033 * C1768 + C47029 * C1780 + C47034 * C1769 +
              C139575 * C1781) *
                 C5913 +
             (C47033 * C1783 + C47029 * C1792 + C47034 * C1784 +
              C139575 * C1793) *
                 C139300) *
                C47031 +
            ((C54278 + C54279) * C5913 + (C54280 + C54281) * C139300) *
                C139586) *
               C139457 * C1763) *
              C5228 +
          ((((C51581 + C51580) * C5913 + (C51579 + C51578) * C139300) * C47031 +
            ((C47033 * C8754 + C47029 * C8760 + C47034 * C8753 +
              C139575 * C8759) *
                 C5913 +
             (C47033 * C8757 + C47029 * C8763 + C47034 * C8756 +
              C139575 * C8762) *
                 C139300) *
                C139586) *
               C139457 * C1762 -
           (((C47778 + C47779) * C139300 + (C47780 + C47781) * C5913) *
                C139586 +
            ((C47771 + C47770) * C139300 + (C47769 + C47768) * C5913) *
                C47031) *
               C139457 * C1761 -
           (((C47034 * C21080 + C139575 * C21084 + C47033 * C21081 +
              C47029 * C21085) *
                 C139300 +
             (C47034 * C21078 + C139575 * C21082 + C47033 * C21079 +
              C47029 * C21083) *
                 C5913) *
                C139586 +
            ((C54281 + C54280) * C139300 + (C54279 + C54278) * C5913) *
                C47031) *
               C139457 * C1763) *
              C139377)) /
            (p * q * std::sqrt(p + q));
    d2eexy[52] +=
        (-std::pow(Pi, 2.5) *
         (((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139575 * C114) *
               C5976 +
           (C47033 * C182 + C47029 * C188 + C47034 * C183 + C139575 * C189) *
               C5909 -
           (C47769 + C47768) * C5977 - (C47898 + C47899) * C5910 +
           (C47781 + C47780) * C5978 + (C47900 + C47901) * C5911 -
           (C53629 + C53628) * C5979 - (C53702 + C53703) * C5912) *
              C47031 +
          ((C47768 + C47769) * C5976 + (C47899 + C47898) * C5909 -
           (C47780 + C47781) * C5977 - (C47901 + C47900) * C5910 +
           (C53628 + C53629) * C5978 + (C53703 + C53702) * C5911 -
           (C47034 * C20370 + C139575 * C20374 + C47033 * C20371 +
            C47029 * C20375) *
               C5979 -
           (C47034 * C20456 + C139575 * C20458 + C47033 * C20457 +
            C47029 * C20459) *
               C5912) *
              C139586) *
         C139457 * C139300 * C139339) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139575 * C114) *
                C5307 +
            (C47033 * C182 + C47029 * C188 + C47034 * C183 + C139575 * C189) *
                C5228 -
            (C47769 + C47768) * C5308 - (C47898 + C47899) * C139377) *
               C47031 +
           ((C47768 + C47769) * C5307 + (C47899 + C47898) * C5228 -
            (C47780 + C47781) * C5308 - (C47901 + C47900) * C139377) *
               C139586) *
              C139457 * C5225 +
          (((C47773 + C47772) * C5308 -
            ((C47034 * C184 + C139575 * C190 + C47033 * C183 + C47029 * C189) *
                 C5228 +
             (C47034 * C109 + C139575 * C115 + C47033 * C108 + C47029 * C114) *
                 C5307) +
            (C47902 + C47903) * C139377) *
               C47031 +
           ((C47776 + C47777) * C5308 -
            ((C47903 + C47902) * C5228 + (C47772 + C47773) * C5307) +
            (C47905 + C47904) * C139377) *
               C139586) *
              C139457 * C5226 +
          (((C47033 * C109 + C47029 * C115 + C47034 * C110 + C139575 * C119) *
                C5307 +
            (C47033 * C184 + C47029 * C190 + C47034 * C185 + C139575 * C191) *
                C5228 -
            (C49701 + C49700) * C5308 - (C49806 + C49807) * C139377) *
               C47031 +
           ((C49700 + C49701) * C5307 + (C49807 + C49806) * C5228 -
            (C47034 * C835 + C139575 * C850 + C47033 * C834 + C47029 * C846) *
                C5308 -
            (C47034 * C944 + C139575 * C952 + C47033 * C942 + C47029 * C950) *
                C139377) *
               C139586) *
              C139457 * C5227) *
         C139339) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139575 * C114) *
                C5307 +
            (C47033 * C182 + C47029 * C188 + C47034 * C183 + C139575 * C189) *
                C5228 -
            (C47769 + C47768) * C5308 - (C47898 + C47899) * C139377) *
               C47031 +
           ((C47768 + C47769) * C5307 + (C47899 + C47898) * C5228 -
            (C47780 + C47781) * C5308 - (C47901 + C47900) * C139377) *
               C139586) *
              C139457 * C139300 * C1761 +
          (((C51581 + C51580) * C5308 -
            ((C47034 * C1870 + C139575 * C1878 + C47033 * C1873 +
              C47029 * C1881) *
                 C5228 +
             (C47034 * C1764 + C139575 * C1772 + C47033 * C1767 +
              C47029 * C1778) *
                 C5307) +
            (C51722 + C51723) * C139377) *
               C47031 +
           ((C47033 * C8754 + C47029 * C8760 + C47034 * C8753 +
             C139575 * C8759) *
                C5308 -
            ((C51723 + C51722) * C5228 + (C51580 + C51581) * C5307) +
            (C47033 * C8840 + C47029 * C8843 + C47034 * C8839 +
             C139575 * C8842) *
                C139377) *
               C139586) *
              C139457 * C139300 * C1762 +
          (((C47033 * C1768 + C47029 * C1780 + C47034 * C1769 +
             C139575 * C1781) *
                C5307 +
            (C47033 * C1874 + C47029 * C1882 + C47034 * C1875 +
             C139575 * C1883) *
                C5228 -
            (C54279 + C54278) * C5308 - (C54384 + C54385) * C139377) *
               C47031 +
           ((C54278 + C54279) * C5307 + (C54385 + C54384) * C5228 -
            (C47034 * C21078 + C139575 * C21082 + C47033 * C21079 +
             C47029 * C21083) *
                C5308 -
            (C47034 * C21196 + C139575 * C21198 + C47033 * C21197 +
             C47029 * C21199) *
                C139377) *
               C139586) *
              C139457 * C139300 * C1763)) /
            (p * q * std::sqrt(p + q));
    d2eexz[52] +=
        (-std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139575 * C114) *
                C244 +
            (C47033 * C245 + C47029 * C251 + C47034 * C246 + C139575 * C252) *
                C139339) *
               C47031 +
           ((C47768 + C47769) * C244 + (C48020 + C48021) * C139339) * C139586) *
              C139457 * C5909 -
          (((C48022 + C48023) * C139339 + (C47780 + C47781) * C244) * C139586 +
           ((C48021 + C48020) * C139339 + (C47769 + C47768) * C244) * C47031) *
              C139457 * C5910 +
          (((C47781 + C47780) * C244 + (C48023 + C48022) * C139339) * C47031 +
           ((C53628 + C53629) * C244 + (C53774 + C53775) * C139339) * C139586) *
              C139457 * C5911 -
          (((C47034 * C20532 + C139575 * C20534 + C47033 * C20533 +
             C47029 * C20535) *
                C139339 +
            (C47034 * C20370 + C139575 * C20374 + C47033 * C20371 +
             C47029 * C20375) *
                C244) *
               C139586 +
           ((C53775 + C53774) * C139339 + (C53629 + C53628) * C244) * C47031) *
              C139457 * C5912) *
         C139300) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139575 * C114) *
                 C244 +
             (C47033 * C245 + C47029 * C251 + C47034 * C246 + C139575 * C252) *
                 C139339) *
                C47031 +
            ((C47768 + C47769) * C244 + (C48020 + C48021) * C139339) *
                C139586) *
               C139457 * C5228 -
           (((C48022 + C48023) * C139339 + (C47780 + C47781) * C244) * C139586 +
            ((C48021 + C48020) * C139339 + (C47769 + C47768) * C244) * C47031) *
               C139457 * C139377) *
              C5225 +
          ((((C47773 + C47772) * C244 + (C48024 + C48025) * C139339) * C47031 +
            ((C47776 + C47777) * C244 + (C48026 + C48027) * C139339) *
                C139586) *
               C139457 * C139377 -
           (((C48025 + C48024) * C139339 + (C47772 + C47773) * C244) * C139586 +
            ((C47034 * C247 + C139575 * C253 + C47033 * C246 + C47029 * C252) *
                 C139339 +
             (C47034 * C109 + C139575 * C115 + C47033 * C108 + C47029 * C114) *
                 C244) *
                C47031) *
               C139457 * C5228) *
              C5226 +
          ((((C47033 * C109 + C47029 * C115 + C47034 * C110 + C139575 * C119) *
                 C244 +
             (C47033 * C247 + C47029 * C253 + C47034 * C248 + C139575 * C254) *
                 C139339) *
                C47031 +
            ((C49700 + C49701) * C244 + (C49910 + C49911) * C139339) *
                C139586) *
               C139457 * C5228 -
           (((C47034 * C1034 + C139575 * C1042 + C47033 * C1032 +
              C47029 * C1040) *
                 C139339 +
             (C47034 * C835 + C139575 * C850 + C47033 * C834 + C47029 * C846) *
                 C244) *
                C139586 +
            ((C49911 + C49910) * C139339 + (C49701 + C49700) * C244) * C47031) *
               C139457 * C139377) *
              C5227)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139575 * C114) *
                C1960 +
            (C47033 * C245 + C47029 * C251 + C47034 * C246 + C139575 * C252) *
                C1761 -
            (C47034 * C1764 + C139575 * C1772 + C47033 * C1767 +
             C47029 * C1778) *
                C1961 -
            (C47034 * C1964 + C139575 * C1972 + C47033 * C1965 +
             C47029 * C1973) *
                C1762 +
            (C47033 * C1768 + C47029 * C1780 + C47034 * C1769 +
             C139575 * C1781) *
                C1962 +
            (C47033 * C1966 + C47029 * C1974 + C47034 * C1967 +
             C139575 * C1975) *
                C1763) *
               C47031 +
           ((C47768 + C47769) * C1960 + (C48020 + C48021) * C1761 -
            (C51580 + C51581) * C1961 - (C51864 + C51865) * C1762 +
            (C54278 + C54279) * C1962 + (C54488 + C54489) * C1763) *
               C139586) *
              C139457 * C5228 +
          (((C51581 + C51580) * C1961 -
            ((C48021 + C48020) * C1761 + (C47769 + C47768) * C1960) +
            (C51865 + C51864) * C1762 - (C54279 + C54278) * C1962 -
            (C54489 + C54488) * C1763) *
               C47031 +
           ((C47033 * C8754 + C47029 * C8760 + C47034 * C8753 +
             C139575 * C8759) *
                C1961 -
            ((C48022 + C48023) * C1761 + (C47780 + C47781) * C1960) +
            (C47033 * C8920 + C47029 * C8923 + C47034 * C8919 +
             C139575 * C8922) *
                C1762 -
            (C47034 * C21078 + C139575 * C21082 + C47033 * C21079 +
             C47029 * C21083) *
                C1962 -
            (C47034 * C21304 + C139575 * C21306 + C47033 * C21305 +
             C47029 * C21307) *
                C1763) *
               C139586) *
              C139457 * C139377) *
         C139300) /
            (p * q * std::sqrt(p + q));
    d2eeyx[52] +=
        (-std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C831 + C139586 * C1118) *
                C5913 +
            (C47233 * C116 + C47031 * C314 + C47234 * C841 + C139586 * C1125) *
                C139300) *
               C139457 * C47029 +
           ((C47261 + C47260) * C5913 + (C47263 + C47262) * C139300) * C139457 *
               C139575) *
              C139339 * C5909 -
          (((C48145 + C48144) * C139300 + (C48143 + C48142) * C5913) * C139457 *
               C139575 +
           ((C47234 * C847 + C139586 * C1129 + C47233 * C841 + C47031 * C1125) *
                C139300 +
            (C47234 * C832 + C139586 * C1121 + C47233 * C831 + C47031 * C1118) *
                C5913) *
               C139457 * C47029) *
              C139339 * C5910 +
          (((C47233 * C832 + C47031 * C1121 + C47234 * C5916 +
             C139586 * C6094) *
                C5913 +
            (C47233 * C847 + C47031 * C1129 + C47234 * C5919 +
             C139586 * C6097) *
                C139300) *
               C139457 * C47029 +
           ((C48147 + C48146) * C5913 + (C48149 + C48148) * C139300) * C139457 *
               C139575) *
              C139339 * C5911 -
          (((C47234 * C20372 + C139586 * C20610 + C47233 * C5918 +
             C47031 * C6096) *
                C139300 +
            (C47234 * C20370 + C139586 * C20608 + C47233 * C5915 +
             C47031 * C6093) *
                C5913) *
               C139457 * C139575 +
           ((C47234 * C20373 + C139586 * C20611 + C47233 * C5919 +
             C47031 * C6097) *
                C139300 +
            (C47234 * C20371 + C139586 * C20609 + C47233 * C5916 +
             C47031 * C6094) *
                C5913) *
               C139457 * C47029) *
              C139339 * C5912)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C831 + C139586 * C1118) *
                C5230 +
            (C47233 * C116 + C47031 * C314 + C47234 * C841 + C139586 * C1125) *
                C5225 -
            (C47260 + C47261) * C5231 - (C47262 + C47263) * C5226 +
            (C47264 + C47265) * C5232 + (C47266 + C47267) * C5227) *
               C139457 * C47029 +
           ((C47261 + C47260) * C5230 + (C47263 + C47262) * C5225 -
            (C47265 + C47264) * C5231 - (C47267 + C47266) * C5226 +
            (C47269 + C47268) * C5232 + (C47271 + C47270) * C5227) *
               C139457 * C139575) *
              C139339 * C5228 +
          (((C48142 + C48143) * C5231 -
            ((C47234 * C847 + C139586 * C1129 + C47233 * C841 +
              C47031 * C1125) *
                 C5225 +
             (C47234 * C832 + C139586 * C1121 + C47233 * C831 +
              C47031 * C1118) *
                 C5230) +
            (C48144 + C48145) * C5226 - (C50018 + C50019) * C5232 -
            (C50020 + C50021) * C5227) *
               C139457 * C47029 +
           ((C50019 + C50018) * C5231 -
            ((C48145 + C48144) * C5225 + (C48143 + C48142) * C5230) +
            (C50021 + C50020) * C5226 -
            (C47234 * C835 + C139586 * C1124 + C47233 * C830 + C47031 * C1120) *
                C5232 -
            (C47234 * C851 + C139586 * C1132 + C47233 * C843 + C47031 * C1128) *
                C5227) *
               C139457 * C139575) *
              C139339 * C139377)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C47233 * C107 + C47031 * C308 + C47234 * C831 + C139586 * C1118) *
                 C5913 +
             (C47233 * C116 + C47031 * C314 + C47234 * C841 + C139586 * C1125) *
                 C139300) *
                C139457 * C47029 +
            ((C47261 + C47260) * C5913 + (C47263 + C47262) * C139300) *
                C139457 * C139575) *
               C1761 -
           (((C49075 + C49074) * C139300 + (C49073 + C49072) * C5913) *
                C139457 * C139575 +
            ((C47234 * C4230 + C139586 * C4553 + C47233 * C1777 +
              C47031 * C2061) *
                 C139300 +
             (C47234 * C4223 + C139586 * C4549 + C47233 * C1767 +
              C47031 * C2054) *
                 C5913) *
                C139457 * C47029) *
               C1762 +
           (((C47233 * C1768 + C47031 * C2057 + C47234 * C6442 +
              C139586 * C6688) *
                 C5913 +
             (C47233 * C1783 + C47031 * C2065 + C47234 * C6445 +
              C139586 * C6691) *
                 C139300) *
                C139457 * C47029 +
            ((C49077 + C49076) * C5913 + (C49079 + C49078) * C139300) *
                C139457 * C139575) *
               C1763) *
              C5228 +
          ((((C47233 * C4223 + C47031 * C4549 + C47234 * C8754 +
              C139586 * C9000) *
                 C5913 +
             (C47233 * C4230 + C47031 * C4553 + C47234 * C8757 +
              C139586 * C9003) *
                 C139300) *
                C139457 * C47029 +
            ((C52007 + C52006) * C5913 + (C52009 + C52008) * C139300) *
                C139457 * C139575) *
               C1762 -
           (((C48145 + C48144) * C139300 + (C48143 + C48142) * C5913) *
                C139457 * C139575 +
            ((C47234 * C847 + C139586 * C1129 + C47233 * C841 +
              C47031 * C1125) *
                 C139300 +
             (C47234 * C832 + C139586 * C1121 + C47233 * C831 +
              C47031 * C1118) *
                 C5913) *
                C139457 * C47029) *
               C1761 -
           (((C47234 * C21080 + C139586 * C21414 + C47233 * C6444 +
              C47031 * C6690) *
                 C139300 +
             (C47234 * C21078 + C139586 * C21412 + C47233 * C6441 +
              C47031 * C6687) *
                 C5913) *
                C139457 * C139575 +
            ((C47234 * C21081 + C139586 * C21415 + C47233 * C6445 +
              C47031 * C6691) *
                 C139300 +
             (C47234 * C21079 + C139586 * C21413 + C47233 * C6442 +
              C47031 * C6688) *
                 C5913) *
                C139457 * C47029) *
               C1763) *
              C139377)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[52] +=
        (-std::pow(Pi, 2.5) *
         (((C47233 * C107 + C47031 * C308 + C47234 * C831 + C139586 * C1118) *
               C5976 +
           (C47233 * C182 + C47031 * C394 + C47234 * C939 + C139586 * C1231) *
               C5909 -
           (C47234 * C832 + C139586 * C1121 + C47233 * C831 + C47031 * C1118) *
               C5977 -
           (C47234 * C940 + C139586 * C1232 + C47233 * C939 + C47031 * C1231) *
               C5910 +
           (C47233 * C832 + C47031 * C1121 + C47234 * C5916 + C139586 * C6094) *
               C5978 +
           (C47233 * C940 + C47031 * C1232 + C47234 * C5982 + C139586 * C6148) *
               C5911 -
           (C47234 * C20371 + C139586 * C20609 + C47233 * C5916 +
            C47031 * C6094) *
               C5979 -
           (C47234 * C20457 + C139586 * C20678 + C47233 * C5982 +
            C47031 * C6148) *
               C5912) *
              C139457 * C47029 +
          ((C47261 + C47260) * C5976 + (C47350 + C47351) * C5909 -
           (C48143 + C48142) * C5977 - (C48256 + C48257) * C5910 +
           (C48147 + C48146) * C5978 + (C48258 + C48259) * C5911 -
           (C47234 * C20370 + C139586 * C20608 + C47233 * C5915 +
            C47031 * C6093) *
               C5979 -
           (C47234 * C20456 + C139586 * C20679 + C47233 * C5981 +
            C47031 * C6149) *
               C5912) *
              C139457 * C139575) *
         C139300 * C139339) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C831 + C139586 * C1118) *
                C5307 +
            (C47233 * C182 + C47031 * C394 + C47234 * C939 + C139586 * C1231) *
                C5228 -
            (C47234 * C832 + C139586 * C1121 + C47233 * C831 + C47031 * C1118) *
                C5308 -
            (C47234 * C940 + C139586 * C1232 + C47233 * C939 + C47031 * C1231) *
                C139377) *
               C139457 * C47029 +
           ((C47261 + C47260) * C5307 + (C47350 + C47351) * C5228 -
            (C48143 + C48142) * C5308 - (C48256 + C48257) * C139377) *
               C139457 * C139575) *
              C5225 +
          (((C48142 + C48143) * C5308 -
            ((C47351 + C47350) * C5228 + (C47260 + C47261) * C5307) +
            (C48257 + C48256) * C139377) *
               C139457 * C47029 +
           ((C50019 + C50018) * C5308 -
            ((C47352 + C47353) * C5228 + (C47265 + C47264) * C5307) +
            (C50124 + C50125) * C139377) *
               C139457 * C139575) *
              C5226 +
          (((C47264 + C47265) * C5307 + (C47353 + C47352) * C5228 -
            (C50018 + C50019) * C5308 - (C50125 + C50124) * C139377) *
               C139457 * C47029 +
           ((C47269 + C47268) * C5307 + (C47354 + C47355) * C5228 -
            (C47234 * C835 + C139586 * C1124 + C47233 * C830 + C47031 * C1120) *
                C5308 -
            (C47234 * C944 + C139586 * C1238 + C47233 * C943 + C47031 * C1237) *
                C139377) *
               C139457 * C139575) *
              C5227) *
         C139339) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C831 + C139586 * C1118) *
                C5307 +
            (C47233 * C182 + C47031 * C394 + C47234 * C939 + C139586 * C1231) *
                C5228 -
            (C47234 * C832 + C139586 * C1121 + C47233 * C831 + C47031 * C1118) *
                C5308 -
            (C47234 * C940 + C139586 * C1232 + C47233 * C939 + C47031 * C1231) *
                C139377) *
               C139457 * C47029 +
           ((C47261 + C47260) * C5307 + (C47350 + C47351) * C5228 -
            (C48143 + C48142) * C5308 - (C48256 + C48257) * C139377) *
               C139457 * C139575) *
              C139300 * C1761 +
          (((C47233 * C4223 + C47031 * C4549 + C47234 * C8754 +
             C139586 * C9000) *
                C5308 -
            ((C47234 * C4337 + C139586 * C4667 + C47233 * C1873 +
              C47031 * C2170) *
                 C5228 +
             (C47234 * C4223 + C139586 * C4549 + C47233 * C1767 +
              C47031 * C2054) *
                 C5307) +
            (C47233 * C4337 + C47031 * C4667 + C47234 * C8840 +
             C139586 * C9078) *
                C139377) *
               C139457 * C47029 +
           ((C52007 + C52006) * C5308 -
            ((C49187 + C49186) * C5228 + (C49073 + C49072) * C5307) +
            (C52144 + C52145) * C139377) *
               C139457 * C139575) *
              C139300 * C1762 +
          (((C47233 * C1768 + C47031 * C2057 + C47234 * C6442 +
             C139586 * C6688) *
                C5307 +
            (C47233 * C1874 + C47031 * C2171 + C47234 * C6528 +
             C139586 * C6766) *
                C5228 -
            (C47234 * C21079 + C139586 * C21413 + C47233 * C6442 +
             C47031 * C6688) *
                C5308 -
            (C47234 * C21197 + C139586 * C21514 + C47233 * C6528 +
             C47031 * C6766) *
                C139377) *
               C139457 * C47029 +
           ((C49077 + C49076) * C5307 + (C49188 + C49189) * C5228 -
            (C47234 * C21078 + C139586 * C21412 + C47233 * C6441 +
             C47031 * C6687) *
                C5308 -
            (C47234 * C21196 + C139586 * C21515 + C47233 * C6527 +
             C47031 * C6767) *
                C139377) *
               C139457 * C139575) *
              C139300 * C1763)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[52] +=
        (-std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C831 + C139586 * C1118) *
                C244 +
            (C47233 * C245 + C47031 * C474 + C47234 * C1029 + C139586 * C1339) *
                C139339) *
               C139457 * C47029 +
           ((C47261 + C47260) * C244 + (C47434 + C47435) * C139339) * C139457 *
               C139575) *
              C5909 -
          (((C48366 + C48367) * C139339 + (C48143 + C48142) * C244) * C139457 *
               C139575 +
           ((C47234 * C1030 + C139586 * C1340 + C47233 * C1029 +
             C47031 * C1339) *
                C139339 +
            (C47234 * C832 + C139586 * C1121 + C47233 * C831 + C47031 * C1118) *
                C244) *
               C139457 * C47029) *
              C5910 +
          (((C47233 * C832 + C47031 * C1121 + C47234 * C5916 +
             C139586 * C6094) *
                C244 +
            (C47233 * C1030 + C47031 * C1340 + C47234 * C6038 +
             C139586 * C6203) *
                C139339) *
               C139457 * C47029 +
           ((C48147 + C48146) * C244 + (C48368 + C48369) * C139339) * C139457 *
               C139575) *
              C5911 -
          (((C47234 * C20532 + C139586 * C20746 + C47233 * C6037 +
             C47031 * C6202) *
                C139339 +
            (C47234 * C20370 + C139586 * C20608 + C47233 * C5915 +
             C47031 * C6093) *
                C244) *
               C139457 * C139575 +
           ((C47234 * C20533 + C139586 * C20747 + C47233 * C6038 +
             C47031 * C6203) *
                C139339 +
            (C47234 * C20371 + C139586 * C20609 + C47233 * C5916 +
             C47031 * C6094) *
                C244) *
               C139457 * C47029) *
              C5912) *
         C139300) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C47233 * C107 + C47031 * C308 + C47234 * C831 + C139586 * C1118) *
                 C244 +
             (C47233 * C245 + C47031 * C474 + C47234 * C1029 +
              C139586 * C1339) *
                 C139339) *
                C139457 * C47029 +
            ((C47261 + C47260) * C244 + (C47434 + C47435) * C139339) * C139457 *
                C139575) *
               C5228 -
           (((C48366 + C48367) * C139339 + (C48143 + C48142) * C244) * C139457 *
                C139575 +
            ((C47234 * C1030 + C139586 * C1340 + C47233 * C1029 +
              C47031 * C1339) *
                 C139339 +
             (C47234 * C832 + C139586 * C1121 + C47233 * C831 +
              C47031 * C1118) *
                 C244) *
                C139457 * C47029) *
               C139377) *
              C5225 +
          ((((C48142 + C48143) * C244 + (C48367 + C48366) * C139339) * C139457 *
                C47029 +
            ((C50019 + C50018) * C244 + (C50228 + C50229) * C139339) * C139457 *
                C139575) *
               C139377 -
           (((C47436 + C47437) * C139339 + (C47265 + C47264) * C244) * C139457 *
                C139575 +
            ((C47435 + C47434) * C139339 + (C47260 + C47261) * C244) * C139457 *
                C47029) *
               C5228) *
              C5226 +
          ((((C47264 + C47265) * C244 + (C47437 + C47436) * C139339) * C139457 *
                C47029 +
            ((C47269 + C47268) * C244 + (C47438 + C47439) * C139339) * C139457 *
                C139575) *
               C5228 -
           (((C47234 * C1034 + C139586 * C1344 + C47233 * C1033 +
              C47031 * C1343) *
                 C139339 +
             (C47234 * C835 + C139586 * C1124 + C47233 * C830 +
              C47031 * C1120) *
                 C244) *
                C139457 * C139575 +
            ((C50229 + C50228) * C139339 + (C50018 + C50019) * C244) * C139457 *
                C47029) *
               C139377) *
              C5227)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C831 + C139586 * C1118) *
                C1960 +
            (C47233 * C245 + C47031 * C474 + C47234 * C1029 + C139586 * C1339) *
                C1761 -
            (C47234 * C4223 + C139586 * C4549 + C47233 * C1767 +
             C47031 * C2054) *
                C1961 -
            (C47234 * C4443 + C139586 * C4783 + C47233 * C1965 +
             C47031 * C2269) *
                C1762 +
            (C47233 * C1768 + C47031 * C2057 + C47234 * C6442 +
             C139586 * C6688) *
                C1962 +
            (C47233 * C1966 + C47031 * C2270 + C47234 * C6608 +
             C139586 * C6843) *
                C1763) *
               C139457 * C47029 +
           ((C47261 + C47260) * C1960 + (C47434 + C47435) * C1761 -
            (C49073 + C49072) * C1961 - (C49296 + C49297) * C1762 +
            (C49077 + C49076) * C1962 + (C49298 + C49299) * C1763) *
               C139457 * C139575) *
              C5228 +
          (((C47233 * C4223 + C47031 * C4549 + C47234 * C8754 +
             C139586 * C9000) *
                C1961 -
            ((C47234 * C1030 + C139586 * C1340 + C47233 * C1029 +
              C47031 * C1339) *
                 C1761 +
             (C47234 * C832 + C139586 * C1121 + C47233 * C831 +
              C47031 * C1118) *
                 C1960) +
            (C47233 * C4443 + C47031 * C4783 + C47234 * C8920 +
             C139586 * C9155) *
                C1762 -
            (C47234 * C21079 + C139586 * C21413 + C47233 * C6442 +
             C47031 * C6688) *
                C1962 -
            (C47234 * C21305 + C139586 * C21614 + C47233 * C6608 +
             C47031 * C6843) *
                C1763) *
               C139457 * C47029 +
           ((C52007 + C52006) * C1961 -
            ((C48366 + C48367) * C1761 + (C48143 + C48142) * C1960) +
            (C52280 + C52281) * C1762 -
            (C47234 * C21078 + C139586 * C21412 + C47233 * C6441 +
             C47031 * C6687) *
                C1962 -
            (C47234 * C21304 + C139586 * C21615 + C47233 * C6607 +
             C47031 * C6844) *
                C1763) *
               C139457 * C139575) *
              C139377) *
         C139300) /
            (p * q * std::sqrt(p + q));
    d2eezx[52] +=
        (-std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139457 * C555) * C5913 +
             (C554 * C116 + C139457 * C561) * C139300) *
                C47029 +
            (C584 * C5913 + C585 * C139300) * C139575) *
               C47031 +
           ((C20819 + C20820) * C47029 + (C20821 + C20822) * C139575) *
               C139586) *
              C139339 * C5909 -
          (((C20823 + C20824) * C139575 + (C20825 + C20826) * C47029) *
               C139586 +
           ((C20822 + C20821) * C139575 + (C20820 + C20819) * C47029) *
               C47031) *
              C139339 * C5910 +
          (((C20826 + C20825) * C47029 + (C20824 + C20823) * C139575) * C47031 +
           ((C20835 + C20836) * C47029 + (C20831 + C20832) * C139575) *
               C139586) *
              C139339 * C5911 -
          ((((C554 * C20372 + C139457 * C20816) * C139300 +
             (C554 * C20370 + C139457 * C20814) * C5913) *
                C139575 +
            ((C554 * C20373 + C139457 * C20817) * C139300 +
             (C554 * C20371 + C139457 * C20815) * C5913) *
                C47029) *
               C139586 +
           ((C20832 + C20831) * C139575 + (C20836 + C20835) * C47029) *
               C47031) *
              C139339 * C5912)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139457 * C555) * C5230 +
             (C554 * C116 + C139457 * C561) * C5225 - C584 * C5231 -
             C585 * C5226 + C586 * C5232 + C587 * C5227) *
                C47029 +
            (C584 * C5230 + C585 * C5225 - C586 * C5231 - C587 * C5226 +
             C588 * C5232 + C589 * C5227) *
                C139575) *
               C47031 +
           ((C20089 + C20090 - C20091 - C20092 + C20093 + C20094) * C47029 +
            (C20095 + C20096 - C20097 - C20098 + C20099 + C20100) * C139575) *
               C139586) *
              C139339 * C5228 +
          (((C20091 - (C20090 + C20089) + C20092 - C20093 - C20094) * C47029 +
            (C20097 - (C20096 + C20095) + C20098 - C20099 - C20100) * C139575) *
               C47031 +
           ((C1476 * C5231 - (C15062 * C5225 + C15063 * C5230) + C1477 * C5226 -
             C1478 * C5232 - C1479 * C5227) *
                C47029 +
            (C1478 * C5231 - (C1477 * C5225 + C1476 * C5230) + C1479 * C5226 -
             (C554 * C835 + C139457 * C1446) * C5232 -
             (C554 * C851 + C139457 * C1454) * C5227) *
                C139575) *
               C139586) *
              C139339 * C139377)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((((C554 * C107 + C139457 * C555) * C5913 +
              (C554 * C116 + C139457 * C561) * C139300) *
                 C47029 +
             (C584 * C5913 + C585 * C139300) * C139575) *
                C47031 +
            ((C20819 + C20820) * C47029 + (C20821 + C20822) * C139575) *
                C139586) *
               C1761 -
           (((C21719 + C21720) * C139575 + (C21721 + C21722) * C47029) *
                C139586 +
            ((C2409 * C139300 + C2408 * C5913) * C139575 +
             ((C554 * C1777 + C139457 * C2383) * C139300 +
              (C554 * C1767 + C139457 * C2376) * C5913) *
                 C47029) *
                C47031) *
               C1762 +
           ((((C554 * C1768 + C139457 * C2379) * C5913 +
              (C554 * C1783 + C139457 * C2387) * C139300) *
                 C47029 +
             (C2412 * C5913 + C2413 * C139300) * C139575) *
                C47031 +
            ((C21731 + C21732) * C47029 + (C21727 + C21728) * C139575) *
                C139586) *
               C1763) *
              C5228 +
          ((((C21722 + C21721) * C47029 + (C21720 + C21719) * C139575) *
                C47031 +
            ((C24777 + C24778) * C47029 + (C24773 + C24774) * C139575) *
                C139586) *
               C1762 -
           (((C20823 + C20824) * C139575 + (C20825 + C20826) * C47029) *
                C139586 +
            ((C20822 + C20821) * C139575 + (C20820 + C20819) * C47029) *
                C47031) *
               C1761 -
           ((((C554 * C21080 + C139457 * C21716) * C139300 +
              (C554 * C21078 + C139457 * C21714) * C5913) *
                 C139575 +
             ((C554 * C21081 + C139457 * C21717) * C139300 +
              (C554 * C21079 + C139457 * C21715) * C5913) *
                 C47029) *
                C139586 +
            ((C21728 + C21727) * C139575 + (C21732 + C21731) * C47029) *
                C47031) *
               C1763) *
              C139377)) /
            (p * q * std::sqrt(p + q));
    d2eezy[52] +=
        (-std::pow(Pi, 2.5) *
         ((((C554 * C107 + C139457 * C555) * C5976 +
            (C554 * C182 + C139457 * C641) * C5909 - C15060 * C5977 -
            C15179 * C5910 + C15063 * C5978 + C15180 * C5911 - C20833 * C5979 -
            C20907 * C5912) *
               C47029 +
           (C584 * C5976 + C660 * C5909 - C1472 * C5977 - C1578 * C5910 +
            C1476 * C5978 + C1579 * C5911 - C15064 * C5979 - C15181 * C5912) *
               C139575) *
              C47031 +
          ((C15060 * C5976 + C15179 * C5909 - C15063 * C5977 - C15180 * C5910 +
            C20833 * C5978 + C20907 * C5911 -
            (C554 * C20371 + C139457 * C20815) * C5979 -
            (C554 * C20457 + C139457 * C20902) * C5912) *
               C47029 +
           (C1472 * C5976 + C1578 * C5909 - C1476 * C5977 - C1579 * C5910 +
            C15064 * C5978 + C15181 * C5911 -
            (C554 * C20370 + C139457 * C20814) * C5979 -
            (C554 * C20456 + C139457 * C20903) * C5912) *
               C139575) *
              C139586) *
         C139300 * C139339) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139457 * C555) * C5307 +
             (C554 * C182 + C139457 * C641) * C5228 - C15060 * C5308 -
             C15179 * C139377) *
                C47029 +
            (C5770 + C5771 - C5772 - C5773) * C139575) *
               C47031 +
           ((C15060 * C5307 + C15179 * C5228 - C15063 * C5308 -
             C15180 * C139377) *
                C47029 +
            (C20199 + C20200 - C20201 - C20202) * C139575) *
               C139586) *
              C5225 +
          (((C5772 - (C5771 + C5770) + C5773) * C47029 +
            (C5776 - (C5775 + C5774) + C5777) * C139575) *
               C47031 +
           ((C20201 - (C20200 + C20199) + C20202) * C47029 +
            (C20203 - (C20204 + C20205) + C20206) * C139575) *
               C139586) *
              C5226 +
          ((C5784 * C47029 + (C5780 + C5779 - C5778 - C5781) * C139575) *
               C47031 +
           ((C20205 + C20204 - C20203 - C20206) * C47029 +
            (C3202 * C5307 + C3293 * C5228 -
             (C554 * C835 + C139457 * C1446) * C5308 -
             (C554 * C944 + C139457 * C1560) * C139377) *
                C139575) *
               C139586) *
              C5227) *
         C139339) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139457 * C555) * C5307 +
             (C554 * C182 + C139457 * C641) * C5228 - C15060 * C5308 -
             C15179 * C139377) *
                C47029 +
            (C5770 + C5771 - C5772 - C5773) * C139575) *
               C47031 +
           ((C15060 * C5307 + C15179 * C5228 - C15063 * C5308 -
             C15180 * C139377) *
                C47029 +
            (C20199 + C20200 - C20201 - C20202) * C139575) *
               C139586) *
              C139300 * C1761 +
          (((C19108 * C5308 -
             ((C554 * C1873 + C139457 * C2492) * C5228 +
              (C554 * C1767 + C139457 * C2376) * C5307) +
             C19250 * C139377) *
                C47029 +
            (C8573 - (C8574 + C8575) + C8576) * C139575) *
               C47031 +
           ((C24775 * C5308 - (C19250 * C5228 + C19108 * C5307) +
             C24881 * C139377) *
                C47029 +
            (C23897 - (C23898 + C23899) + C23900) * C139575) *
               C139586) *
              C139300 * C1762 +
          ((((C554 * C1768 + C139457 * C2379) * C5307 +
             (C554 * C1874 + C139457 * C2493) * C5228 - C21729 * C5308 -
             C21835 * C139377) *
                C47029 +
            (C2412 * C5307 + C2512 * C5228 - C16038 * C5308 -
             C16143 * C139377) *
                C139575) *
               C47031 +
           ((C21729 * C5307 + C21835 * C5228 -
             (C554 * C21079 + C139457 * C21715) * C5308 -
             (C554 * C21197 + C139457 * C21830) * C139377) *
                C47029 +
            (C16038 * C5307 + C16143 * C5228 -
             (C554 * C21078 + C139457 * C21714) * C5308 -
             (C554 * C21196 + C139457 * C21831) * C139377) *
                C139575) *
               C139586) *
              C139300 * C1763)) /
            (p * q * std::sqrt(p + q));
    d2eezz[52] +=
        (-std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139457 * C555) * C244 +
             (C554 * C245 + C139457 * C719) * C139339) *
                C47029 +
            (C726 + C742) * C139575) *
               C47031 +
           ((C15281 + C15297) * C47029 + C15284 * C139575) * C139586) *
              C5909 -
          ((C15285 * C139575 + (C15298 + C15288) * C47029) * C139586 +
           (C15289 * C139575 + (C15297 + C15281) * C47029) * C47031) *
              C5910 +
          (((C15288 + C15298) * C47029 + C15290 * C139575) * C47031 +
           ((C20976 + C20980) * C47029 + (C15291 + C15299) * C139575) *
               C139586) *
              C5911 -
          ((((C554 * C20532 + C139457 * C20973) * C139339 +
             (C554 * C20370 + C139457 * C20814) * C244) *
                C139575 +
            ((C554 * C20533 + C139457 * C20974) * C139339 +
             (C554 * C20371 + C139457 * C20815) * C244) *
                C47029) *
               C139586 +
           ((C15299 + C15291) * C139575 + (C20980 + C20976) * C47029) *
               C47031) *
              C5912) *
         C139300) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((((C554 * C107 + C139457 * C555) * C244 +
              (C554 * C245 + C139457 * C719) * C139339) *
                 C47029 +
             (C726 + C742) * C139575) *
                C47031 +
            ((C15281 + C15297) * C47029 + C15284 * C139575) * C139586) *
               C5228 -
           ((C15285 * C139575 + (C15298 + C15288) * C47029) * C139586 +
            (C15289 * C139575 + (C15297 + C15281) * C47029) * C47031) *
               C139377) *
              C5225 +
          (((C15284 * C47029 + C17202 * C139575) * C47031 +
            (C15290 * C47029 + (C1677 + C1687) * C139575) * C139586) *
               C139377 -
           ((C3372 * C139575 + C15289 * C47029) * C139586 +
            ((C743 + C729) * C139575 + (C742 + C726) * C47029) * C47031) *
               C5228) *
              C5226 +
          (((C746 * C47029 + (C734 + C744) * C139575) * C47031 +
            (C17202 * C47029 + (C3373 + C3377) * C139575) * C139586) *
               C5228 -
           ((((C554 * C1034 + C139457 * C1666) * C139339 +
              (C554 * C835 + C139457 * C1446) * C244) *
                 C139575 +
             (C1687 + C1677) * C47029) *
                C139586 +
            ((C3377 + C3373) * C139575 + C3372 * C47029) * C47031) *
               C139377) *
              C5227)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139457 * C555) * C1960 +
             (C554 * C245 + C139457 * C719) * C1761 -
             (C554 * C1767 + C139457 * C2376) * C1961 -
             (C554 * C1965 + C139457 * C2591) * C1762 +
             (C554 * C1768 + C139457 * C2379) * C1962 +
             (C554 * C1966 + C139457 * C2592) * C1763) *
                C47029 +
            (C2600 + C2601 - C2602 - C2620 + C2605 + C2621) * C139575) *
               C47031 +
           ((C21936 + C21937 - C21938 - C21939 + C21940 + C21944) * C47029 +
            (C16243 + C16244 - C16245 - C16246 + C16247 + C16251) * C139575) *
               C139586) *
              C5228 +
          (((C21938 - (C21937 + C21936) + C21939 - C21940 - C21944) * C47029 +
            (C16245 - (C16244 + C16243) + C16246 - C16247 - C16251) * C139575) *
               C47031 +
           ((C24775 * C1961 - (C15295 * C1761 + C15063 * C1960) +
             C24987 * C1762 - (C554 * C21079 + C139457 * C21715) * C1962 -
             (C554 * C21305 + C139457 * C21933) * C1763) *
                C47029 +
            (C19109 * C1961 - (C1682 * C1761 + C1476 * C1960) + C19398 * C1762 -
             (C554 * C21078 + C139457 * C21714) * C1962 -
             (C554 * C21304 + C139457 * C21934) * C1763) *
                C139575) *
               C139586) *
              C139377) *
         C139300) /
            (p * q * std::sqrt(p + q));
    d2eexx[53] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139575 * C114) *
                 C137108 +
             (C47033 * C116 + C47029 * C125 + C47034 * C117 + C139575 * C126) *
                 C139552 -
             (C47034 * C109 + C139575 * C115 + C47033 * C108 + C47029 * C114) *
                 C137101 -
             (C47034 * C118 + C139575 * C127 + C47033 * C117 + C47029 * C126) *
                 C139305) *
                C47031 +
            ((C47768 + C47769) * C137108 + (C47770 + C47771) * C139552 -
             (C47772 + C47773) * C137101 - (C47774 + C47775) * C139305) *
                C139586) *
               C139457 * C139561 +
           (((C47033 * C1764 + C47029 * C1772 + C47034 * C1765 +
              C139575 * C1773) *
                 C137101 -
             ((C47034 * C1776 + C139575 * C1789 + C47033 * C1777 +
               C47029 * C1790) *
                  C139552 +
              (C47034 * C1764 + C139575 * C1772 + C47033 * C1767 +
               C47029 * C1778) *
                  C137108) +
             (C47033 * C1776 + C47029 * C1789 + C47034 * C1775 +
              C139575 * C1788) *
                 C139305) *
                C47031 +
            ((C51576 + C51577) * C137101 -
             ((C51578 + C51579) * C139552 + (C51580 + C51581) * C137108) +
             (C51582 + C51583) * C139305) *
                C139586) *
               C139457 * C139403) *
              C5228 +
          ((((C47773 + C47772) * C137101 -
             ((C47771 + C47770) * C139552 + (C47769 + C47768) * C137108) +
             (C47775 + C47774) * C139305) *
                C47031 +
            ((C47776 + C47777) * C137101 -
             ((C47778 + C47779) * C139552 + (C47780 + C47781) * C137108) +
             (C47782 + C47783) * C139305) *
                C139586) *
               C139457 * C139561 +
           (((C51581 + C51580) * C137108 + (C51579 + C51578) * C139552 -
             (C51577 + C51576) * C137101 - (C51583 + C51582) * C139305) *
                C47031 +
            ((C47033 * C8754 + C47029 * C8760 + C47034 * C8753 +
              C139575 * C8759) *
                 C137108 +
             (C47033 * C8757 + C47029 * C8763 + C47034 * C8756 +
              C139575 * C8762) *
                 C139552 -
             (C47034 * C8752 + C139575 * C8758 + C47033 * C8753 +
              C47029 * C8759) *
                 C137101 -
             (C47034 * C8755 + C139575 * C8761 + C47033 * C8756 +
              C47029 * C8762) *
                 C139305) *
                C139586) *
               C139457 * C139403) *
              C139377)) /
        (p * q * std::sqrt(p + q));
    d2eexy[53] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139575 * C114) *
                 C5307 +
             (C47033 * C182 + C47029 * C188 + C47034 * C183 + C139575 * C189) *
                 C5228 -
             (C47769 + C47768) * C5308 - (C47898 + C47899) * C139377) *
                C47031 +
            ((C47768 + C47769) * C5307 + (C47899 + C47898) * C5228 -
             (C47780 + C47781) * C5308 - (C47901 + C47900) * C139377) *
                C139586) *
               C139457 * C139552 +
           (((C47773 + C47772) * C5308 -
             ((C47034 * C184 + C139575 * C190 + C47033 * C183 + C47029 * C189) *
                  C5228 +
              (C47034 * C109 + C139575 * C115 + C47033 * C108 + C47029 * C114) *
                  C5307) +
             (C47902 + C47903) * C139377) *
                C47031 +
            ((C47776 + C47777) * C5308 -
             ((C47903 + C47902) * C5228 + (C47772 + C47773) * C5307) +
             (C47905 + C47904) * C139377) *
                C139586) *
               C139457 * C139305) *
              C139561 +
          ((((C51581 + C51580) * C5308 -
             ((C47034 * C1870 + C139575 * C1878 + C47033 * C1873 +
               C47029 * C1881) *
                  C5228 +
              (C47034 * C1764 + C139575 * C1772 + C47033 * C1767 +
               C47029 * C1778) *
                  C5307) +
             (C51722 + C51723) * C139377) *
                C47031 +
            ((C47033 * C8754 + C47029 * C8760 + C47034 * C8753 +
              C139575 * C8759) *
                 C5308 -
             ((C51723 + C51722) * C5228 + (C51580 + C51581) * C5307) +
             (C47033 * C8840 + C47029 * C8843 + C47034 * C8839 +
              C139575 * C8842) *
                 C139377) *
                C139586) *
               C139457 * C139552 +
           (((C47033 * C1764 + C47029 * C1772 + C47034 * C1765 +
              C139575 * C1773) *
                 C5307 +
             (C47033 * C1870 + C47029 * C1878 + C47034 * C1871 +
              C139575 * C1879) *
                 C5228 -
             (C51577 + C51576) * C5308 - (C51724 + C51725) * C139377) *
                C47031 +
            ((C51576 + C51577) * C5307 + (C51725 + C51724) * C5228 -
             (C47034 * C8752 + C139575 * C8758 + C47033 * C8753 +
              C47029 * C8759) *
                 C5308 -
             (C47034 * C8838 + C139575 * C8841 + C47033 * C8839 +
              C47029 * C8842) *
                 C139377) *
                C139586) *
               C139457 * C139305) *
              C139403)) /
        (p * q * std::sqrt(p + q));
    d2eexz[53] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139575 * C114) *
                 C3607 +
             (C47033 * C245 + C47029 * C251 + C47034 * C246 + C139575 * C252) *
                 C139561 -
             (C47034 * C1764 + C139575 * C1772 + C47033 * C1767 +
              C47029 * C1778) *
                 C3608 -
             (C47034 * C1964 + C139575 * C1972 + C47033 * C1965 +
              C47029 * C1973) *
                 C139403) *
                C47031 +
            ((C47768 + C47769) * C3607 + (C48020 + C48021) * C139561 -
             (C51580 + C51581) * C3608 - (C51864 + C51865) * C139403) *
                C139586) *
               C139457 * C5228 +
           (((C51581 + C51580) * C3608 -
             ((C48021 + C48020) * C139561 + (C47769 + C47768) * C3607) +
             (C51865 + C51864) * C139403) *
                C47031 +
            ((C47033 * C8754 + C47029 * C8760 + C47034 * C8753 +
              C139575 * C8759) *
                 C3608 -
             ((C48022 + C48023) * C139561 + (C47780 + C47781) * C3607) +
             (C47033 * C8920 + C47029 * C8923 + C47034 * C8919 +
              C139575 * C8922) *
                 C139403) *
                C139586) *
               C139457 * C139377) *
              C139552 +
          ((((C47033 * C1764 + C47029 * C1772 + C47034 * C1765 +
              C139575 * C1773) *
                 C3608 -
             ((C47034 * C247 + C139575 * C253 + C47033 * C246 + C47029 * C252) *
                  C139561 +
              (C47034 * C109 + C139575 * C115 + C47033 * C108 + C47029 * C114) *
                  C3607) +
             (C47033 * C1964 + C47029 * C1972 + C47034 * C1963 +
              C139575 * C1971) *
                 C139403) *
                C47031 +
            ((C51576 + C51577) * C3608 -
             ((C48025 + C48024) * C139561 + (C47772 + C47773) * C3607) +
             (C51866 + C51867) * C139403) *
                C139586) *
               C139457 * C5228 +
           (((C47773 + C47772) * C3607 + (C48024 + C48025) * C139561 -
             (C51577 + C51576) * C3608 - (C51867 + C51866) * C139403) *
                C47031 +
            ((C47776 + C47777) * C3607 + (C48026 + C48027) * C139561 -
             (C47034 * C8752 + C139575 * C8758 + C47033 * C8753 +
              C47029 * C8759) *
                 C3608 -
             (C47034 * C8918 + C139575 * C8921 + C47033 * C8919 +
              C47029 * C8922) *
                 C139403) *
                C139586) *
               C139457 * C139377) *
              C139305)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[53] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47233 * C107 + C47031 * C308 + C47234 * C831 + C139586 * C1118) *
                 C137108 +
             (C47233 * C116 + C47031 * C314 + C47234 * C841 + C139586 * C1125) *
                 C139552 -
             (C47260 + C47261) * C137101 - (C47262 + C47263) * C139305) *
                C139457 * C47029 +
            ((C47261 + C47260) * C137108 + (C47263 + C47262) * C139552 -
             (C47265 + C47264) * C137101 - (C47267 + C47266) * C139305) *
                C139457 * C139575) *
               C139561 +
           (((C49072 + C49073) * C137101 -
             ((C47234 * C4230 + C139586 * C4553 + C47233 * C1777 +
               C47031 * C2061) *
                  C139552 +
              (C47234 * C4223 + C139586 * C4549 + C47233 * C1767 +
               C47031 * C2054) *
                  C137108) +
             (C49074 + C49075) * C139305) *
                C139457 * C47029 +
            ((C50925 + C50924) * C137101 -
             ((C49075 + C49074) * C139552 + (C49073 + C49072) * C137108) +
             (C50927 + C50926) * C139305) *
                C139457 * C139575) *
               C139403) *
              C5228 +
          ((((C48142 + C48143) * C137101 -
             ((C47234 * C847 + C139586 * C1129 + C47233 * C841 +
               C47031 * C1125) *
                  C139552 +
              (C47234 * C832 + C139586 * C1121 + C47233 * C831 +
               C47031 * C1118) *
                  C137108) +
             (C48144 + C48145) * C139305) *
                C139457 * C47029 +
            ((C50019 + C50018) * C137101 -
             ((C48145 + C48144) * C139552 + (C48143 + C48142) * C137108) +
             (C50021 + C50020) * C139305) *
                C139457 * C139575) *
               C139561 +
           (((C47233 * C4223 + C47031 * C4549 + C47234 * C8754 +
              C139586 * C9000) *
                 C137108 +
             (C47233 * C4230 + C47031 * C4553 + C47234 * C8757 +
              C139586 * C9003) *
                 C139552 -
             (C52006 + C52007) * C137101 - (C52008 + C52009) * C139305) *
                C139457 * C47029 +
            ((C52007 + C52006) * C137108 + (C52009 + C52008) * C139552 -
             (C47234 * C8752 + C139586 * C8998 + C47233 * C4225 +
              C47031 * C4551) *
                 C137101 -
             (C47234 * C8755 + C139586 * C9001 + C47233 * C4232 +
              C47031 * C4555) *
                 C139305) *
                C139457 * C139575) *
               C139403) *
              C139377)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[53] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47233 * C107 + C47031 * C308 + C47234 * C831 + C139586 * C1118) *
                 C5307 +
             (C47233 * C182 + C47031 * C394 + C47234 * C939 + C139586 * C1231) *
                 C5228 -
             (C47234 * C832 + C139586 * C1121 + C47233 * C831 +
              C47031 * C1118) *
                 C5308 -
             (C47234 * C940 + C139586 * C1232 + C47233 * C939 +
              C47031 * C1231) *
                 C139377) *
                C139457 * C47029 +
            ((C47261 + C47260) * C5307 + (C47350 + C47351) * C5228 -
             (C48143 + C48142) * C5308 - (C48256 + C48257) * C139377) *
                C139457 * C139575) *
               C139552 +
           (((C48142 + C48143) * C5308 -
             ((C47351 + C47350) * C5228 + (C47260 + C47261) * C5307) +
             (C48257 + C48256) * C139377) *
                C139457 * C47029 +
            ((C50019 + C50018) * C5308 -
             ((C47352 + C47353) * C5228 + (C47265 + C47264) * C5307) +
             (C50124 + C50125) * C139377) *
                C139457 * C139575) *
               C139305) *
              C139561 +
          ((((C47233 * C4223 + C47031 * C4549 + C47234 * C8754 +
              C139586 * C9000) *
                 C5308 -
             ((C47234 * C4337 + C139586 * C4667 + C47233 * C1873 +
               C47031 * C2170) *
                  C5228 +
              (C47234 * C4223 + C139586 * C4549 + C47233 * C1767 +
               C47031 * C2054) *
                  C5307) +
             (C47233 * C4337 + C47031 * C4667 + C47234 * C8840 +
              C139586 * C9078) *
                 C139377) *
                C139457 * C47029 +
            ((C52007 + C52006) * C5308 -
             ((C49187 + C49186) * C5228 + (C49073 + C49072) * C5307) +
             (C52144 + C52145) * C139377) *
                C139457 * C139575) *
               C139552 +
           (((C49072 + C49073) * C5307 + (C49186 + C49187) * C5228 -
             (C52006 + C52007) * C5308 - (C52145 + C52144) * C139377) *
                C139457 * C47029 +
            ((C50925 + C50924) * C5307 + (C51030 + C51031) * C5228 -
             (C47234 * C8752 + C139586 * C8998 + C47233 * C4225 +
              C47031 * C4551) *
                 C5308 -
             (C47234 * C8838 + C139586 * C9080 + C47233 * C4339 +
              C47031 * C4669) *
                 C139377) *
                C139457 * C139575) *
               C139305) *
              C139403)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[53] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47233 * C107 + C47031 * C308 + C47234 * C831 + C139586 * C1118) *
                 C3607 +
             (C47233 * C245 + C47031 * C474 + C47234 * C1029 +
              C139586 * C1339) *
                 C139561 -
             (C47234 * C4223 + C139586 * C4549 + C47233 * C1767 +
              C47031 * C2054) *
                 C3608 -
             (C47234 * C4443 + C139586 * C4783 + C47233 * C1965 +
              C47031 * C2269) *
                 C139403) *
                C139457 * C47029 +
            ((C47261 + C47260) * C3607 + (C47434 + C47435) * C139561 -
             (C49073 + C49072) * C3608 - (C49296 + C49297) * C139403) *
                C139457 * C139575) *
               C5228 +
           (((C47233 * C4223 + C47031 * C4549 + C47234 * C8754 +
              C139586 * C9000) *
                 C3608 -
             ((C47234 * C1030 + C139586 * C1340 + C47233 * C1029 +
               C47031 * C1339) *
                  C139561 +
              (C47234 * C832 + C139586 * C1121 + C47233 * C831 +
               C47031 * C1118) *
                  C3607) +
             (C47233 * C4443 + C47031 * C4783 + C47234 * C8920 +
              C139586 * C9155) *
                 C139403) *
                C139457 * C47029 +
            ((C52007 + C52006) * C3608 -
             ((C48366 + C48367) * C139561 + (C48143 + C48142) * C3607) +
             (C52280 + C52281) * C139403) *
                C139457 * C139575) *
               C139377) *
              C139552 +
          ((((C49072 + C49073) * C3608 -
             ((C47435 + C47434) * C139561 + (C47260 + C47261) * C3607) +
             (C49297 + C49296) * C139403) *
                C139457 * C47029 +
            ((C50925 + C50924) * C3608 -
             ((C47436 + C47437) * C139561 + (C47265 + C47264) * C3607) +
             (C51134 + C51135) * C139403) *
                C139457 * C139575) *
               C5228 +
           (((C48142 + C48143) * C3607 + (C48367 + C48366) * C139561 -
             (C52006 + C52007) * C3608 - (C52281 + C52280) * C139403) *
                C139457 * C47029 +
            ((C50019 + C50018) * C3607 + (C50228 + C50229) * C139561 -
             (C47234 * C8752 + C139586 * C8998 + C47233 * C4225 +
              C47031 * C4551) *
                 C3608 -
             (C47234 * C8918 + C139586 * C9157 + C47233 * C4445 +
              C47031 * C4785) *
                 C139403) *
                C139457 * C139575) *
               C139377) *
              C139305)) /
        (p * q * std::sqrt(p + q));
    d2eezx[53] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((((C554 * C107 + C139457 * C555) * C137108 +
                        (C554 * C116 + C139457 * C561) * C139552 -
                        C584 * C137101 - C585 * C139305) *
                           C47029 +
                       (C584 * C137108 + C585 * C139552 - C586 * C137101 -
                        C587 * C139305) *
                           C139575) *
                          C47031 +
                      ((C22631 + C22632 - C22633 - C22634) * C47029 +
                       (C22635 + C22636 - C22637 - C22638) * C139575) *
                          C139586) *
                         C139561 +
                     (((C2408 * C137101 -
                        ((C554 * C1777 + C139457 * C2383) * C139552 +
                         (C554 * C1767 + C139457 * C2376) * C137108) +
                        C2409 * C139305) *
                           C47029 +
                       (C2410 * C137101 - (C2409 * C139552 + C2408 * C137108) +
                        C2411 * C139305) *
                           C139575) *
                          C47031 +
                      ((C23759 - (C23760 + C23761) + C23762) * C47029 +
                       (C23763 - (C23764 + C23765) + C23766) * C139575) *
                          C139586) *
                         C139403) *
                        C5228 +
                    ((((C22633 - (C22632 + C22631) + C22634) * C47029 +
                       (C22637 - (C22636 + C22635) + C22638) * C139575) *
                          C47031 +
                      ((C22639 - (C22640 + C22641) + C22642) * C47029 +
                       (C22643 - (C22644 + C22645) + C22646) * C139575) *
                          C139586) *
                         C139561 +
                     (((C23761 + C23760 - C23759 - C23762) * C47029 +
                       (C23765 + C23764 - C23763 - C23766) * C139575) *
                          C47031 +
                      ((C24775 * C137108 + C24776 * C139552 - C19109 * C137101 -
                        C19110 * C139305) *
                           C47029 +
                       (C19109 * C137108 + C19110 * C139552 -
                        (C554 * C8752 + C139457 * C9232) * C137101 -
                        (C554 * C8755 + C139457 * C9235) * C139305) *
                           C139575) *
                          C139586) *
                         C139403) *
                        C139377)) /
                  (p * q * std::sqrt(p + q));
    d2eezy[53] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((((C554 * C107 + C139457 * C555) * C5307 +
                        (C554 * C182 + C139457 * C641) * C5228 -
                        C15060 * C5308 - C15179 * C139377) *
                           C47029 +
                       (C5770 + C5771 - C5772 - C5773) * C139575) *
                          C47031 +
                      ((C15060 * C5307 + C15179 * C5228 - C15063 * C5308 -
                        C15180 * C139377) *
                           C47029 +
                       (C20199 + C20200 - C20201 - C20202) * C139575) *
                          C139586) *
                         C139552 +
                     (((C5772 - (C5771 + C5770) + C5773) * C47029 +
                       (C5776 - (C5775 + C5774) + C5777) * C139575) *
                          C47031 +
                      ((C20201 - (C20200 + C20199) + C20202) * C47029 +
                       (C20203 - (C20204 + C20205) + C20206) * C139575) *
                          C139586) *
                         C139305) *
                        C139561 +
                    ((((C19108 * C5308 -
                        ((C554 * C1873 + C139457 * C2492) * C5228 +
                         (C554 * C1767 + C139457 * C2376) * C5307) +
                        C19250 * C139377) *
                           C47029 +
                       (C8573 - (C8574 + C8575) + C8576) * C139575) *
                          C47031 +
                      ((C24775 * C5308 - (C19250 * C5228 + C19108 * C5307) +
                        C24881 * C139377) *
                           C47029 +
                       (C23897 - (C23898 + C23899) + C23900) * C139575) *
                          C139586) *
                         C139552 +
                     (((C8575 + C8574 - C8573 - C8576) * C47029 +
                       (C8579 + C8578 - C8577 - C8580) * C139575) *
                          C47031 +
                      ((C23899 + C23898 - C23897 - C23900) * C47029 +
                       (C4918 * C5307 + C5033 * C5228 -
                        (C554 * C8752 + C139457 * C9232) * C5308 -
                        (C554 * C8838 + C139457 * C9314) * C139377) *
                           C139575) *
                          C139586) *
                         C139305) *
                        C139403)) /
                  (p * q * std::sqrt(p + q));
    d2eezz[53] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C554 * C107 + C139457 * C555) * C3607 +
              (C554 * C245 + C139457 * C719) * C139561 -
              (C554 * C1767 + C139457 * C2376) * C3608 -
              (C554 * C1965 + C139457 * C2591) * C139403) *
                 C47029 +
             (C4108 + C4109 - C4110 - C4111) * C139575) *
                C47031 +
            ((C19383 + C19384 - C19385 - C19399) * C47029 + C19400 * C139575) *
                C139586) *
               C5228 +
           (((C19385 - (C19384 + C19383) + C19399) * C47029 +
             C19401 * C139575) *
                C47031 +
            ((C24982 - (C24983 + C24984) + C24988) * C47029 +
             (C19390 - (C19391 + C19392) + C19402) * C139575) *
                C139586) *
               C139377) *
              C139552 +
          ((((C4110 - (C4109 + C4108) + C4111) * C47029 +
             (C4114 - (C4113 + C4112) + C4115) * C139575) *
                C47031 +
            (C19401 * C47029 + (C5143 - (C5144 + C5145) + C5151) * C139575) *
                C139586) *
               C5228 +
           ((C19400 * C47029 + (C5145 + C5144 - C5143 - C5151) * C139575) *
                C47031 +
            ((C19392 + C19391 - C19390 - C19402) * C47029 +
             (C1478 * C3607 + C1683 * C139561 -
              (C554 * C8752 + C139457 * C9232) * C3608 -
              (C554 * C8918 + C139457 * C9391) * C139403) *
                 C139575) *
                C139586) *
               C139377) *
              C139305)) /
        (p * q * std::sqrt(p + q));
    d2eexx[54] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139575 * C114) *
                C5230 +
            (C47033 * C116 + C47029 * C125 + C47034 * C117 + C139575 * C126) *
                C5225 -
            (C47034 * C109 + C139575 * C115 + C47033 * C108 + C47029 * C114) *
                C5231 -
            (C47034 * C118 + C139575 * C127 + C47033 * C117 + C47029 * C126) *
                C5226 +
            (C47033 * C109 + C47029 * C115 + C47034 * C110 + C139575 * C119) *
                C5232 +
            (C47033 * C118 + C47029 * C127 + C47034 * C120 + C139575 * C128) *
                C5227) *
               C47031 +
           ((C47768 + C47769) * C5230 + (C47770 + C47771) * C5225 -
            (C47772 + C47773) * C5231 - (C47774 + C47775) * C5226 +
            (C49700 + C49701) * C5232 + (C49702 + C49703) * C5227) *
               C139586) *
              C139457 * C139339 * C5228 +
          (((C47773 + C47772) * C5231 -
            ((C47771 + C47770) * C5225 + (C47769 + C47768) * C5230) +
            (C47775 + C47774) * C5226 - (C49701 + C49700) * C5232 -
            (C49703 + C49702) * C5227) *
               C47031 +
           ((C47776 + C47777) * C5231 -
            ((C47778 + C47779) * C5225 + (C47780 + C47781) * C5230) +
            (C47782 + C47783) * C5226 -
            (C47034 * C835 + C139575 * C850 + C47033 * C834 + C47029 * C846) *
                C5232 -
            (C47034 * C851 + C139575 * C859 + C47033 * C849 + C47029 * C858) *
                C5227) *
               C139586) *
              C139457 * C139339 * C139377)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139575 * C114) *
                C5913 +
            (C47033 * C116 + C47029 * C125 + C47034 * C117 + C139575 * C126) *
                C139300) *
               C47031 +
           ((C47768 + C47769) * C5913 + (C47770 + C47771) * C139300) *
               C139586) *
              C139457 * C139339 * C5909 -
          (((C47778 + C47779) * C139300 + (C47780 + C47781) * C5913) * C139586 +
           ((C47771 + C47770) * C139300 + (C47769 + C47768) * C5913) * C47031) *
              C139457 * C139339 * C5910 +
          (((C47781 + C47780) * C5913 + (C47779 + C47778) * C139300) * C47031 +
           ((C53628 + C53629) * C5913 + (C53630 + C53631) * C139300) *
               C139586) *
              C139457 * C139339 * C5911 -
          (((C47034 * C20372 + C139575 * C20376 + C47033 * C20373 +
             C47029 * C20377) *
                C139300 +
            (C47034 * C20370 + C139575 * C20374 + C47033 * C20371 +
             C47029 * C20375) *
                C5913) *
               C139586 +
           ((C53631 + C53630) * C139300 + (C53629 + C53628) * C5913) * C47031) *
              C139457 * C139339 * C5912)) /
            (p * q * std::sqrt(p + q));
    d2eexy[54] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139575 * C114) *
                C5307 +
            (C47033 * C182 + C47029 * C188 + C47034 * C183 + C139575 * C189) *
                C5228 -
            (C47769 + C47768) * C5308 - (C47898 + C47899) * C139377) *
               C47031 +
           ((C47768 + C47769) * C5307 + (C47899 + C47898) * C5228 -
            (C47780 + C47781) * C5308 - (C47901 + C47900) * C139377) *
               C139586) *
              C139457 * C5225 +
          (((C47773 + C47772) * C5308 -
            ((C47034 * C184 + C139575 * C190 + C47033 * C183 + C47029 * C189) *
                 C5228 +
             (C47034 * C109 + C139575 * C115 + C47033 * C108 + C47029 * C114) *
                 C5307) +
            (C47902 + C47903) * C139377) *
               C47031 +
           ((C47776 + C47777) * C5308 -
            ((C47903 + C47902) * C5228 + (C47772 + C47773) * C5307) +
            (C47905 + C47904) * C139377) *
               C139586) *
              C139457 * C5226 +
          (((C47033 * C109 + C47029 * C115 + C47034 * C110 + C139575 * C119) *
                C5307 +
            (C47033 * C184 + C47029 * C190 + C47034 * C185 + C139575 * C191) *
                C5228 -
            (C49701 + C49700) * C5308 - (C49806 + C49807) * C139377) *
               C47031 +
           ((C49700 + C49701) * C5307 + (C49807 + C49806) * C5228 -
            (C47034 * C835 + C139575 * C850 + C47033 * C834 + C47029 * C846) *
                C5308 -
            (C47034 * C944 + C139575 * C952 + C47033 * C942 + C47029 * C950) *
                C139377) *
               C139586) *
              C139457 * C5227) *
         C139339) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139575 * C114) *
               C5976 +
           (C47033 * C182 + C47029 * C188 + C47034 * C183 + C139575 * C189) *
               C5909 -
           (C47769 + C47768) * C5977 - (C47898 + C47899) * C5910 +
           (C47781 + C47780) * C5978 + (C47900 + C47901) * C5911 -
           (C53629 + C53628) * C5979 - (C53702 + C53703) * C5912) *
              C47031 +
          ((C47768 + C47769) * C5976 + (C47899 + C47898) * C5909 -
           (C47780 + C47781) * C5977 - (C47901 + C47900) * C5910 +
           (C53628 + C53629) * C5978 + (C53703 + C53702) * C5911 -
           (C47034 * C20370 + C139575 * C20374 + C47033 * C20371 +
            C47029 * C20375) *
               C5979 -
           (C47034 * C20456 + C139575 * C20458 + C47033 * C20457 +
            C47029 * C20459) *
               C5912) *
              C139586) *
         C139457 * C139300 * C139339) /
            (p * q * std::sqrt(p + q));
    d2eexz[54] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139575 * C114) *
                 C244 +
             (C47033 * C245 + C47029 * C251 + C47034 * C246 + C139575 * C252) *
                 C139339) *
                C47031 +
            ((C47768 + C47769) * C244 + (C48020 + C48021) * C139339) *
                C139586) *
               C139457 * C5228 -
           (((C48022 + C48023) * C139339 + (C47780 + C47781) * C244) * C139586 +
            ((C48021 + C48020) * C139339 + (C47769 + C47768) * C244) * C47031) *
               C139457 * C139377) *
              C5225 +
          ((((C47773 + C47772) * C244 + (C48024 + C48025) * C139339) * C47031 +
            ((C47776 + C47777) * C244 + (C48026 + C48027) * C139339) *
                C139586) *
               C139457 * C139377 -
           (((C48025 + C48024) * C139339 + (C47772 + C47773) * C244) * C139586 +
            ((C47034 * C247 + C139575 * C253 + C47033 * C246 + C47029 * C252) *
                 C139339 +
             (C47034 * C109 + C139575 * C115 + C47033 * C108 + C47029 * C114) *
                 C244) *
                C47031) *
               C139457 * C5228) *
              C5226 +
          ((((C47033 * C109 + C47029 * C115 + C47034 * C110 + C139575 * C119) *
                 C244 +
             (C47033 * C247 + C47029 * C253 + C47034 * C248 + C139575 * C254) *
                 C139339) *
                C47031 +
            ((C49700 + C49701) * C244 + (C49910 + C49911) * C139339) *
                C139586) *
               C139457 * C5228 -
           (((C47034 * C1034 + C139575 * C1042 + C47033 * C1032 +
              C47029 * C1040) *
                 C139339 +
             (C47034 * C835 + C139575 * C850 + C47033 * C834 + C47029 * C846) *
                 C244) *
                C139586 +
            ((C49911 + C49910) * C139339 + (C49701 + C49700) * C244) * C47031) *
               C139457 * C139377) *
              C5227)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139575 * C114) *
                C244 +
            (C47033 * C245 + C47029 * C251 + C47034 * C246 + C139575 * C252) *
                C139339) *
               C47031 +
           ((C47768 + C47769) * C244 + (C48020 + C48021) * C139339) * C139586) *
              C139457 * C5909 -
          (((C48022 + C48023) * C139339 + (C47780 + C47781) * C244) * C139586 +
           ((C48021 + C48020) * C139339 + (C47769 + C47768) * C244) * C47031) *
              C139457 * C5910 +
          (((C47781 + C47780) * C244 + (C48023 + C48022) * C139339) * C47031 +
           ((C53628 + C53629) * C244 + (C53774 + C53775) * C139339) * C139586) *
              C139457 * C5911 -
          (((C47034 * C20532 + C139575 * C20534 + C47033 * C20533 +
             C47029 * C20535) *
                C139339 +
            (C47034 * C20370 + C139575 * C20374 + C47033 * C20371 +
             C47029 * C20375) *
                C244) *
               C139586 +
           ((C53775 + C53774) * C139339 + (C53629 + C53628) * C244) * C47031) *
              C139457 * C5912) *
         C139300) /
            (p * q * std::sqrt(p + q));
    d2eeyx[54] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C831 + C139586 * C1118) *
                C5230 +
            (C47233 * C116 + C47031 * C314 + C47234 * C841 + C139586 * C1125) *
                C5225 -
            (C47260 + C47261) * C5231 - (C47262 + C47263) * C5226 +
            (C47264 + C47265) * C5232 + (C47266 + C47267) * C5227) *
               C139457 * C47029 +
           ((C47261 + C47260) * C5230 + (C47263 + C47262) * C5225 -
            (C47265 + C47264) * C5231 - (C47267 + C47266) * C5226 +
            (C47269 + C47268) * C5232 + (C47271 + C47270) * C5227) *
               C139457 * C139575) *
              C139339 * C5228 +
          (((C48142 + C48143) * C5231 -
            ((C47234 * C847 + C139586 * C1129 + C47233 * C841 +
              C47031 * C1125) *
                 C5225 +
             (C47234 * C832 + C139586 * C1121 + C47233 * C831 +
              C47031 * C1118) *
                 C5230) +
            (C48144 + C48145) * C5226 - (C50018 + C50019) * C5232 -
            (C50020 + C50021) * C5227) *
               C139457 * C47029 +
           ((C50019 + C50018) * C5231 -
            ((C48145 + C48144) * C5225 + (C48143 + C48142) * C5230) +
            (C50021 + C50020) * C5226 -
            (C47234 * C835 + C139586 * C1124 + C47233 * C830 + C47031 * C1120) *
                C5232 -
            (C47234 * C851 + C139586 * C1132 + C47233 * C843 + C47031 * C1128) *
                C5227) *
               C139457 * C139575) *
              C139339 * C139377)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C831 + C139586 * C1118) *
                C5913 +
            (C47233 * C116 + C47031 * C314 + C47234 * C841 + C139586 * C1125) *
                C139300) *
               C139457 * C47029 +
           ((C47261 + C47260) * C5913 + (C47263 + C47262) * C139300) * C139457 *
               C139575) *
              C139339 * C5909 -
          (((C48145 + C48144) * C139300 + (C48143 + C48142) * C5913) * C139457 *
               C139575 +
           ((C47234 * C847 + C139586 * C1129 + C47233 * C841 + C47031 * C1125) *
                C139300 +
            (C47234 * C832 + C139586 * C1121 + C47233 * C831 + C47031 * C1118) *
                C5913) *
               C139457 * C47029) *
              C139339 * C5910 +
          (((C47233 * C832 + C47031 * C1121 + C47234 * C5916 +
             C139586 * C6094) *
                C5913 +
            (C47233 * C847 + C47031 * C1129 + C47234 * C5919 +
             C139586 * C6097) *
                C139300) *
               C139457 * C47029 +
           ((C48147 + C48146) * C5913 + (C48149 + C48148) * C139300) * C139457 *
               C139575) *
              C139339 * C5911 -
          (((C47234 * C20372 + C139586 * C20610 + C47233 * C5918 +
             C47031 * C6096) *
                C139300 +
            (C47234 * C20370 + C139586 * C20608 + C47233 * C5915 +
             C47031 * C6093) *
                C5913) *
               C139457 * C139575 +
           ((C47234 * C20373 + C139586 * C20611 + C47233 * C5919 +
             C47031 * C6097) *
                C139300 +
            (C47234 * C20371 + C139586 * C20609 + C47233 * C5916 +
             C47031 * C6094) *
                C5913) *
               C139457 * C47029) *
              C139339 * C5912)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[54] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C831 + C139586 * C1118) *
                C5307 +
            (C47233 * C182 + C47031 * C394 + C47234 * C939 + C139586 * C1231) *
                C5228 -
            (C47234 * C832 + C139586 * C1121 + C47233 * C831 + C47031 * C1118) *
                C5308 -
            (C47234 * C940 + C139586 * C1232 + C47233 * C939 + C47031 * C1231) *
                C139377) *
               C139457 * C47029 +
           ((C47261 + C47260) * C5307 + (C47350 + C47351) * C5228 -
            (C48143 + C48142) * C5308 - (C48256 + C48257) * C139377) *
               C139457 * C139575) *
              C5225 +
          (((C48142 + C48143) * C5308 -
            ((C47351 + C47350) * C5228 + (C47260 + C47261) * C5307) +
            (C48257 + C48256) * C139377) *
               C139457 * C47029 +
           ((C50019 + C50018) * C5308 -
            ((C47352 + C47353) * C5228 + (C47265 + C47264) * C5307) +
            (C50124 + C50125) * C139377) *
               C139457 * C139575) *
              C5226 +
          (((C47264 + C47265) * C5307 + (C47353 + C47352) * C5228 -
            (C50018 + C50019) * C5308 - (C50125 + C50124) * C139377) *
               C139457 * C47029 +
           ((C47269 + C47268) * C5307 + (C47354 + C47355) * C5228 -
            (C47234 * C835 + C139586 * C1124 + C47233 * C830 + C47031 * C1120) *
                C5308 -
            (C47234 * C944 + C139586 * C1238 + C47233 * C943 + C47031 * C1237) *
                C139377) *
               C139457 * C139575) *
              C5227) *
         C139339) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C47233 * C107 + C47031 * C308 + C47234 * C831 + C139586 * C1118) *
               C5976 +
           (C47233 * C182 + C47031 * C394 + C47234 * C939 + C139586 * C1231) *
               C5909 -
           (C47234 * C832 + C139586 * C1121 + C47233 * C831 + C47031 * C1118) *
               C5977 -
           (C47234 * C940 + C139586 * C1232 + C47233 * C939 + C47031 * C1231) *
               C5910 +
           (C47233 * C832 + C47031 * C1121 + C47234 * C5916 + C139586 * C6094) *
               C5978 +
           (C47233 * C940 + C47031 * C1232 + C47234 * C5982 + C139586 * C6148) *
               C5911 -
           (C47234 * C20371 + C139586 * C20609 + C47233 * C5916 +
            C47031 * C6094) *
               C5979 -
           (C47234 * C20457 + C139586 * C20678 + C47233 * C5982 +
            C47031 * C6148) *
               C5912) *
              C139457 * C47029 +
          ((C47261 + C47260) * C5976 + (C47350 + C47351) * C5909 -
           (C48143 + C48142) * C5977 - (C48256 + C48257) * C5910 +
           (C48147 + C48146) * C5978 + (C48258 + C48259) * C5911 -
           (C47234 * C20370 + C139586 * C20608 + C47233 * C5915 +
            C47031 * C6093) *
               C5979 -
           (C47234 * C20456 + C139586 * C20679 + C47233 * C5981 +
            C47031 * C6149) *
               C5912) *
              C139457 * C139575) *
         C139300 * C139339) /
            (p * q * std::sqrt(p + q));
    d2eeyz[54] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47233 * C107 + C47031 * C308 + C47234 * C831 + C139586 * C1118) *
                 C244 +
             (C47233 * C245 + C47031 * C474 + C47234 * C1029 +
              C139586 * C1339) *
                 C139339) *
                C139457 * C47029 +
            ((C47261 + C47260) * C244 + (C47434 + C47435) * C139339) * C139457 *
                C139575) *
               C5228 -
           (((C48366 + C48367) * C139339 + (C48143 + C48142) * C244) * C139457 *
                C139575 +
            ((C47234 * C1030 + C139586 * C1340 + C47233 * C1029 +
              C47031 * C1339) *
                 C139339 +
             (C47234 * C832 + C139586 * C1121 + C47233 * C831 +
              C47031 * C1118) *
                 C244) *
                C139457 * C47029) *
               C139377) *
              C5225 +
          ((((C48142 + C48143) * C244 + (C48367 + C48366) * C139339) * C139457 *
                C47029 +
            ((C50019 + C50018) * C244 + (C50228 + C50229) * C139339) * C139457 *
                C139575) *
               C139377 -
           (((C47436 + C47437) * C139339 + (C47265 + C47264) * C244) * C139457 *
                C139575 +
            ((C47435 + C47434) * C139339 + (C47260 + C47261) * C244) * C139457 *
                C47029) *
               C5228) *
              C5226 +
          ((((C47264 + C47265) * C244 + (C47437 + C47436) * C139339) * C139457 *
                C47029 +
            ((C47269 + C47268) * C244 + (C47438 + C47439) * C139339) * C139457 *
                C139575) *
               C5228 -
           (((C47234 * C1034 + C139586 * C1344 + C47233 * C1033 +
              C47031 * C1343) *
                 C139339 +
             (C47234 * C835 + C139586 * C1124 + C47233 * C830 +
              C47031 * C1120) *
                 C244) *
                C139457 * C139575 +
            ((C50229 + C50228) * C139339 + (C50018 + C50019) * C244) * C139457 *
                C47029) *
               C139377) *
              C5227)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C831 + C139586 * C1118) *
                C244 +
            (C47233 * C245 + C47031 * C474 + C47234 * C1029 + C139586 * C1339) *
                C139339) *
               C139457 * C47029 +
           ((C47261 + C47260) * C244 + (C47434 + C47435) * C139339) * C139457 *
               C139575) *
              C5909 -
          (((C48366 + C48367) * C139339 + (C48143 + C48142) * C244) * C139457 *
               C139575 +
           ((C47234 * C1030 + C139586 * C1340 + C47233 * C1029 +
             C47031 * C1339) *
                C139339 +
            (C47234 * C832 + C139586 * C1121 + C47233 * C831 + C47031 * C1118) *
                C244) *
               C139457 * C47029) *
              C5910 +
          (((C47233 * C832 + C47031 * C1121 + C47234 * C5916 +
             C139586 * C6094) *
                C244 +
            (C47233 * C1030 + C47031 * C1340 + C47234 * C6038 +
             C139586 * C6203) *
                C139339) *
               C139457 * C47029 +
           ((C48147 + C48146) * C244 + (C48368 + C48369) * C139339) * C139457 *
               C139575) *
              C5911 -
          (((C47234 * C20532 + C139586 * C20746 + C47233 * C6037 +
             C47031 * C6202) *
                C139339 +
            (C47234 * C20370 + C139586 * C20608 + C47233 * C5915 +
             C47031 * C6093) *
                C244) *
               C139457 * C139575 +
           ((C47234 * C20533 + C139586 * C20747 + C47233 * C6038 +
             C47031 * C6203) *
                C139339 +
            (C47234 * C20371 + C139586 * C20609 + C47233 * C5916 +
             C47031 * C6094) *
                C244) *
               C139457 * C47029) *
              C5912) *
         C139300) /
            (p * q * std::sqrt(p + q));
    d2eezx[54] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139457 * C555) * C5230 +
             (C554 * C116 + C139457 * C561) * C5225 - C584 * C5231 -
             C585 * C5226 + C586 * C5232 + C587 * C5227) *
                C47029 +
            (C584 * C5230 + C585 * C5225 - C586 * C5231 - C587 * C5226 +
             C588 * C5232 + C589 * C5227) *
                C139575) *
               C47031 +
           ((C20089 + C20090 - C20091 - C20092 + C20093 + C20094) * C47029 +
            (C20095 + C20096 - C20097 - C20098 + C20099 + C20100) * C139575) *
               C139586) *
              C139339 * C5228 +
          (((C20091 - (C20090 + C20089) + C20092 - C20093 - C20094) * C47029 +
            (C20097 - (C20096 + C20095) + C20098 - C20099 - C20100) * C139575) *
               C47031 +
           ((C1476 * C5231 - (C15062 * C5225 + C15063 * C5230) + C1477 * C5226 -
             C1478 * C5232 - C1479 * C5227) *
                C47029 +
            (C1478 * C5231 - (C1477 * C5225 + C1476 * C5230) + C1479 * C5226 -
             (C554 * C835 + C139457 * C1446) * C5232 -
             (C554 * C851 + C139457 * C1454) * C5227) *
                C139575) *
               C139586) *
              C139339 * C139377)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139457 * C555) * C5913 +
             (C554 * C116 + C139457 * C561) * C139300) *
                C47029 +
            (C584 * C5913 + C585 * C139300) * C139575) *
               C47031 +
           ((C20819 + C20820) * C47029 + (C20821 + C20822) * C139575) *
               C139586) *
              C139339 * C5909 -
          (((C20823 + C20824) * C139575 + (C20825 + C20826) * C47029) *
               C139586 +
           ((C20822 + C20821) * C139575 + (C20820 + C20819) * C47029) *
               C47031) *
              C139339 * C5910 +
          (((C20826 + C20825) * C47029 + (C20824 + C20823) * C139575) * C47031 +
           ((C20835 + C20836) * C47029 + (C20831 + C20832) * C139575) *
               C139586) *
              C139339 * C5911 -
          ((((C554 * C20372 + C139457 * C20816) * C139300 +
             (C554 * C20370 + C139457 * C20814) * C5913) *
                C139575 +
            ((C554 * C20373 + C139457 * C20817) * C139300 +
             (C554 * C20371 + C139457 * C20815) * C5913) *
                C47029) *
               C139586 +
           ((C20832 + C20831) * C139575 + (C20836 + C20835) * C47029) *
               C47031) *
              C139339 * C5912)) /
            (p * q * std::sqrt(p + q));
    d2eezy[54] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139457 * C555) * C5307 +
             (C554 * C182 + C139457 * C641) * C5228 - C15060 * C5308 -
             C15179 * C139377) *
                C47029 +
            (C5770 + C5771 - C5772 - C5773) * C139575) *
               C47031 +
           ((C15060 * C5307 + C15179 * C5228 - C15063 * C5308 -
             C15180 * C139377) *
                C47029 +
            (C20199 + C20200 - C20201 - C20202) * C139575) *
               C139586) *
              C5225 +
          (((C5772 - (C5771 + C5770) + C5773) * C47029 +
            (C5776 - (C5775 + C5774) + C5777) * C139575) *
               C47031 +
           ((C20201 - (C20200 + C20199) + C20202) * C47029 +
            (C20203 - (C20204 + C20205) + C20206) * C139575) *
               C139586) *
              C5226 +
          ((C5784 * C47029 + (C5780 + C5779 - C5778 - C5781) * C139575) *
               C47031 +
           ((C20205 + C20204 - C20203 - C20206) * C47029 +
            (C3202 * C5307 + C3293 * C5228 -
             (C554 * C835 + C139457 * C1446) * C5308 -
             (C554 * C944 + C139457 * C1560) * C139377) *
                C139575) *
               C139586) *
              C5227) *
         C139339) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C139457 * C555) * C5976 +
            (C554 * C182 + C139457 * C641) * C5909 - C15060 * C5977 -
            C15179 * C5910 + C15063 * C5978 + C15180 * C5911 - C20833 * C5979 -
            C20907 * C5912) *
               C47029 +
           (C584 * C5976 + C660 * C5909 - C1472 * C5977 - C1578 * C5910 +
            C1476 * C5978 + C1579 * C5911 - C15064 * C5979 - C15181 * C5912) *
               C139575) *
              C47031 +
          ((C15060 * C5976 + C15179 * C5909 - C15063 * C5977 - C15180 * C5910 +
            C20833 * C5978 + C20907 * C5911 -
            (C554 * C20371 + C139457 * C20815) * C5979 -
            (C554 * C20457 + C139457 * C20902) * C5912) *
               C47029 +
           (C1472 * C5976 + C1578 * C5909 - C1476 * C5977 - C1579 * C5910 +
            C15064 * C5978 + C15181 * C5911 -
            (C554 * C20370 + C139457 * C20814) * C5979 -
            (C554 * C20456 + C139457 * C20903) * C5912) *
               C139575) *
              C139586) *
         C139300 * C139339) /
            (p * q * std::sqrt(p + q));
    d2eezz[54] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C554 * C107 + C139457 * C555) * C244 +
              (C554 * C245 + C139457 * C719) * C139339) *
                 C47029 +
             (C726 + C742) * C139575) *
                C47031 +
            ((C15281 + C15297) * C47029 + C15284 * C139575) * C139586) *
               C5228 -
           ((C15285 * C139575 + (C15298 + C15288) * C47029) * C139586 +
            (C15289 * C139575 + (C15297 + C15281) * C47029) * C47031) *
               C139377) *
              C5225 +
          (((C15284 * C47029 + C17202 * C139575) * C47031 +
            (C15290 * C47029 + (C1677 + C1687) * C139575) * C139586) *
               C139377 -
           ((C3372 * C139575 + C15289 * C47029) * C139586 +
            ((C743 + C729) * C139575 + (C742 + C726) * C47029) * C47031) *
               C5228) *
              C5226 +
          (((C746 * C47029 + (C734 + C744) * C139575) * C47031 +
            (C17202 * C47029 + (C3373 + C3377) * C139575) * C139586) *
               C5228 -
           ((((C554 * C1034 + C139457 * C1666) * C139339 +
              (C554 * C835 + C139457 * C1446) * C244) *
                 C139575 +
             (C1687 + C1677) * C47029) *
                C139586 +
            ((C3377 + C3373) * C139575 + C3372 * C47029) * C47031) *
               C139377) *
              C5227)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139457 * C555) * C244 +
             (C554 * C245 + C139457 * C719) * C139339) *
                C47029 +
            (C726 + C742) * C139575) *
               C47031 +
           ((C15281 + C15297) * C47029 + C15284 * C139575) * C139586) *
              C5909 -
          ((C15285 * C139575 + (C15298 + C15288) * C47029) * C139586 +
           (C15289 * C139575 + (C15297 + C15281) * C47029) * C47031) *
              C5910 +
          (((C15288 + C15298) * C47029 + C15290 * C139575) * C47031 +
           ((C20976 + C20980) * C47029 + (C15291 + C15299) * C139575) *
               C139586) *
              C5911 -
          ((((C554 * C20532 + C139457 * C20973) * C139339 +
             (C554 * C20370 + C139457 * C20814) * C244) *
                C139575 +
            ((C554 * C20533 + C139457 * C20974) * C139339 +
             (C554 * C20371 + C139457 * C20815) * C244) *
                C47029) *
               C139586 +
           ((C15299 + C15291) * C139575 + (C20980 + C20976) * C47029) *
               C47031) *
              C5912) *
         C139300) /
            (p * q * std::sqrt(p + q));
    d2eexx[55] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139575 * C114) *
                 C137108 +
             (C47033 * C116 + C47029 * C125 + C47034 * C117 + C139575 * C126) *
                 C139552 -
             (C47034 * C109 + C139575 * C115 + C47033 * C108 + C47029 * C114) *
                 C137101 -
             (C47034 * C118 + C139575 * C127 + C47033 * C117 + C47029 * C126) *
                 C139305) *
                C47031 +
            ((C47768 + C47769) * C137108 + (C47770 + C47771) * C139552 -
             (C47772 + C47773) * C137101 - (C47774 + C47775) * C139305) *
                C139586) *
               C139457 * C9466 +
           (((C47033 * C1764 + C47029 * C1772 + C47034 * C1765 +
              C139575 * C1773) *
                 C137101 -
             ((C47034 * C1776 + C139575 * C1789 + C47033 * C1777 +
               C47029 * C1790) *
                  C139552 +
              (C47034 * C1764 + C139575 * C1772 + C47033 * C1767 +
               C47029 * C1778) *
                  C137108) +
             (C47033 * C1776 + C47029 * C1789 + C47034 * C1775 +
              C139575 * C1788) *
                 C139305) *
                C47031 +
            ((C51576 + C51577) * C137101 -
             ((C51578 + C51579) * C139552 + (C51580 + C51581) * C137108) +
             (C51582 + C51583) * C139305) *
                C139586) *
               C139457 * C139403) *
              C139560 +
          ((((C47773 + C47772) * C137101 -
             ((C47771 + C47770) * C139552 + (C47769 + C47768) * C137108) +
             (C47775 + C47774) * C139305) *
                C47031 +
            ((C47776 + C47777) * C137101 -
             ((C47778 + C47779) * C139552 + (C47780 + C47781) * C137108) +
             (C47782 + C47783) * C139305) *
                C139586) *
               C139457 * C9466 +
           (((C51581 + C51580) * C137108 + (C51579 + C51578) * C139552 -
             (C51577 + C51576) * C137101 - (C51583 + C51582) * C139305) *
                C47031 +
            ((C57236 + C57237) * C137108 + (C57238 + C57239) * C139552 -
             (C47034 * C8752 + C139575 * C8758 + C47033 * C8753 +
              C47029 * C8759) *
                 C137101 -
             (C47034 * C8755 + C139575 * C8761 + C47033 * C8756 +
              C47029 * C8762) *
                 C139305) *
                C139586) *
               C139457 * C139403) *
              C139377)) /
        (p * q * std::sqrt(p + q));
    d2eexy[55] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139575 * C114) *
                 C2783 +
             (C47033 * C182 + C47029 * C188 + C47034 * C183 + C139575 * C189) *
                 C139560 -
             (C47769 + C47768) * C2784 - (C47898 + C47899) * C139377) *
                C47031 +
            ((C47768 + C47769) * C2783 + (C47899 + C47898) * C139560 -
             (C47780 + C47781) * C2784 - (C47901 + C47900) * C139377) *
                C139586) *
               C139457 * C139552 +
           (((C47773 + C47772) * C2784 -
             ((C47034 * C184 + C139575 * C190 + C47033 * C183 + C47029 * C189) *
                  C139560 +
              (C47034 * C109 + C139575 * C115 + C47033 * C108 + C47029 * C114) *
                  C2783) +
             (C47902 + C47903) * C139377) *
                C47031 +
            ((C47776 + C47777) * C2784 -
             ((C47903 + C47902) * C139560 + (C47772 + C47773) * C2783) +
             (C47905 + C47904) * C139377) *
                C139586) *
               C139457 * C139305) *
              C9466 +
          ((((C51581 + C51580) * C2784 -
             ((C47034 * C1870 + C139575 * C1878 + C47033 * C1873 +
               C47029 * C1881) *
                  C139560 +
              (C47034 * C1764 + C139575 * C1772 + C47033 * C1767 +
               C47029 * C1778) *
                  C2783) +
             (C51722 + C51723) * C139377) *
                C47031 +
            ((C57236 + C57237) * C2784 -
             ((C51723 + C51722) * C139560 + (C51580 + C51581) * C2783) +
             (C57343 + C57342) * C139377) *
                C139586) *
               C139457 * C139552 +
           (((C47033 * C1764 + C47029 * C1772 + C47034 * C1765 +
              C139575 * C1773) *
                 C2783 +
             (C47033 * C1870 + C47029 * C1878 + C47034 * C1871 +
              C139575 * C1879) *
                 C139560 -
             (C51577 + C51576) * C2784 - (C51724 + C51725) * C139377) *
                C47031 +
            ((C51576 + C51577) * C2783 + (C51725 + C51724) * C139560 -
             (C47034 * C8752 + C139575 * C8758 + C47033 * C8753 +
              C47029 * C8759) *
                 C2784 -
             (C47034 * C8838 + C139575 * C8841 + C47033 * C8839 +
              C47029 * C8842) *
                 C139377) *
                C139586) *
               C139457 * C139305) *
              C139403)) /
        (p * q * std::sqrt(p + q));
    d2eexz[55] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139575 * C114) *
                 C9616 +
             (C47033 * C245 + C47029 * C251 + C47034 * C246 + C139575 * C252) *
                 C9466 -
             (C47034 * C1764 + C139575 * C1772 + C47033 * C1767 +
              C47029 * C1778) *
                 C9617 -
             (C47034 * C1964 + C139575 * C1972 + C47033 * C1965 +
              C47029 * C1973) *
                 C139403) *
                C47031 +
            ((C47768 + C47769) * C9616 + (C48020 + C48021) * C9466 -
             (C51580 + C51581) * C9617 - (C51864 + C51865) * C139403) *
                C139586) *
               C139457 * C139560 +
           (((C51581 + C51580) * C9617 -
             ((C48021 + C48020) * C9466 + (C47769 + C47768) * C9616) +
             (C51865 + C51864) * C139403) *
                C47031 +
            ((C57236 + C57237) * C9617 -
             ((C48022 + C48023) * C9466 + (C47780 + C47781) * C9616) +
             (C57446 + C57447) * C139403) *
                C139586) *
               C139457 * C139377) *
              C139552 +
          ((((C47033 * C1764 + C47029 * C1772 + C47034 * C1765 +
              C139575 * C1773) *
                 C9617 -
             ((C47034 * C247 + C139575 * C253 + C47033 * C246 + C47029 * C252) *
                  C9466 +
              (C47034 * C109 + C139575 * C115 + C47033 * C108 + C47029 * C114) *
                  C9616) +
             (C47033 * C1964 + C47029 * C1972 + C47034 * C1963 +
              C139575 * C1971) *
                 C139403) *
                C47031 +
            ((C51576 + C51577) * C9617 -
             ((C48025 + C48024) * C9466 + (C47772 + C47773) * C9616) +
             (C51866 + C51867) * C139403) *
                C139586) *
               C139457 * C139560 +
           (((C47773 + C47772) * C9616 + (C48024 + C48025) * C9466 -
             (C51577 + C51576) * C9617 - (C51867 + C51866) * C139403) *
                C47031 +
            ((C47776 + C47777) * C9616 + (C48026 + C48027) * C9466 -
             (C47034 * C8752 + C139575 * C8758 + C47033 * C8753 +
              C47029 * C8759) *
                 C9617 -
             (C47034 * C8918 + C139575 * C8921 + C47033 * C8919 +
              C47029 * C8922) *
                 C139403) *
                C139586) *
               C139457 * C139377) *
              C139305)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[55] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47233 * C107 + C47031 * C308 + C47234 * C831 + C139586 * C1118) *
                 C137108 +
             (C47233 * C116 + C47031 * C314 + C47234 * C841 + C139586 * C1125) *
                 C139552 -
             (C47260 + C47261) * C137101 - (C47262 + C47263) * C139305) *
                C139457 * C47029 +
            ((C47261 + C47260) * C137108 + (C47263 + C47262) * C139552 -
             (C47265 + C47264) * C137101 - (C47267 + C47266) * C139305) *
                C139457 * C139575) *
               C9466 +
           (((C49072 + C49073) * C137101 -
             ((C47234 * C4230 + C139586 * C4553 + C47233 * C1777 +
               C47031 * C2061) *
                  C139552 +
              (C47234 * C4223 + C139586 * C4549 + C47233 * C1767 +
               C47031 * C2054) *
                  C137108) +
             (C49074 + C49075) * C139305) *
                C139457 * C47029 +
            ((C50925 + C50924) * C137101 -
             ((C49075 + C49074) * C139552 + (C49073 + C49072) * C137108) +
             (C50927 + C50926) * C139305) *
                C139457 * C139575) *
               C139403) *
              C139560 +
          ((((C48142 + C48143) * C137101 -
             ((C47234 * C847 + C139586 * C1129 + C47233 * C841 +
               C47031 * C1125) *
                  C139552 +
              (C47234 * C832 + C139586 * C1121 + C47233 * C831 +
               C47031 * C1118) *
                  C137108) +
             (C48144 + C48145) * C139305) *
                C139457 * C47029 +
            ((C50019 + C50018) * C137101 -
             ((C48145 + C48144) * C139552 + (C48143 + C48142) * C137108) +
             (C50021 + C50020) * C139305) *
                C139457 * C139575) *
               C9466 +
           (((C47233 * C4223 + C47031 * C4549 + C47234 * C8754 +
              C139586 * C9000) *
                 C137108 +
             (C47233 * C4230 + C47031 * C4553 + C47234 * C8757 +
              C139586 * C9003) *
                 C139552 -
             (C52006 + C52007) * C137101 - (C52008 + C52009) * C139305) *
                C139457 * C47029 +
            ((C52007 + C52006) * C137108 + (C52009 + C52008) * C139552 -
             (C47234 * C8752 + C139586 * C8998 + C47233 * C4225 +
              C47031 * C4551) *
                 C137101 -
             (C47234 * C8755 + C139586 * C9001 + C47233 * C4232 +
              C47031 * C4555) *
                 C139305) *
                C139457 * C139575) *
               C139403) *
              C139377)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[55] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47233 * C107 + C47031 * C308 + C47234 * C831 + C139586 * C1118) *
                 C2783 +
             (C47233 * C182 + C47031 * C394 + C47234 * C939 + C139586 * C1231) *
                 C139560 -
             (C47234 * C832 + C139586 * C1121 + C47233 * C831 +
              C47031 * C1118) *
                 C2784 -
             (C47234 * C940 + C139586 * C1232 + C47233 * C939 +
              C47031 * C1231) *
                 C139377) *
                C139457 * C47029 +
            ((C47261 + C47260) * C2783 + (C47350 + C47351) * C139560 -
             (C48143 + C48142) * C2784 - (C48256 + C48257) * C139377) *
                C139457 * C139575) *
               C139552 +
           (((C48142 + C48143) * C2784 -
             ((C47351 + C47350) * C139560 + (C47260 + C47261) * C2783) +
             (C48257 + C48256) * C139377) *
                C139457 * C47029 +
            ((C50019 + C50018) * C2784 -
             ((C47352 + C47353) * C139560 + (C47265 + C47264) * C2783) +
             (C50124 + C50125) * C139377) *
                C139457 * C139575) *
               C139305) *
              C9466 +
          ((((C47233 * C4223 + C47031 * C4549 + C47234 * C8754 +
              C139586 * C9000) *
                 C2784 -
             ((C47234 * C4337 + C139586 * C4667 + C47233 * C1873 +
               C47031 * C2170) *
                  C139560 +
              (C47234 * C4223 + C139586 * C4549 + C47233 * C1767 +
               C47031 * C2054) *
                  C2783) +
             (C47233 * C4337 + C47031 * C4667 + C47234 * C8840 +
              C139586 * C9078) *
                 C139377) *
                C139457 * C47029 +
            ((C52007 + C52006) * C2784 -
             ((C49187 + C49186) * C139560 + (C49073 + C49072) * C2783) +
             (C52144 + C52145) * C139377) *
                C139457 * C139575) *
               C139552 +
           (((C49072 + C49073) * C2783 + (C49186 + C49187) * C139560 -
             (C52006 + C52007) * C2784 - (C52145 + C52144) * C139377) *
                C139457 * C47029 +
            ((C50925 + C50924) * C2783 + (C51030 + C51031) * C139560 -
             (C47234 * C8752 + C139586 * C8998 + C47233 * C4225 +
              C47031 * C4551) *
                 C2784 -
             (C47234 * C8838 + C139586 * C9080 + C47233 * C4339 +
              C47031 * C4669) *
                 C139377) *
                C139457 * C139575) *
               C139305) *
              C139403)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[55] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47233 * C107 + C47031 * C308 + C47234 * C831 + C139586 * C1118) *
                 C9616 +
             (C47233 * C245 + C47031 * C474 + C47234 * C1029 +
              C139586 * C1339) *
                 C9466 -
             (C47234 * C4223 + C139586 * C4549 + C47233 * C1767 +
              C47031 * C2054) *
                 C9617 -
             (C47234 * C4443 + C139586 * C4783 + C47233 * C1965 +
              C47031 * C2269) *
                 C139403) *
                C139457 * C47029 +
            ((C47261 + C47260) * C9616 + (C47434 + C47435) * C9466 -
             (C49073 + C49072) * C9617 - (C49296 + C49297) * C139403) *
                C139457 * C139575) *
               C139560 +
           (((C47233 * C4223 + C47031 * C4549 + C47234 * C8754 +
              C139586 * C9000) *
                 C9617 -
             ((C47234 * C1030 + C139586 * C1340 + C47233 * C1029 +
               C47031 * C1339) *
                  C9466 +
              (C47234 * C832 + C139586 * C1121 + C47233 * C831 +
               C47031 * C1118) *
                  C9616) +
             (C47233 * C4443 + C47031 * C4783 + C47234 * C8920 +
              C139586 * C9155) *
                 C139403) *
                C139457 * C47029 +
            ((C52007 + C52006) * C9617 -
             ((C48366 + C48367) * C9466 + (C48143 + C48142) * C9616) +
             (C52280 + C52281) * C139403) *
                C139457 * C139575) *
               C139377) *
              C139552 +
          ((((C49072 + C49073) * C9617 -
             ((C47435 + C47434) * C9466 + (C47260 + C47261) * C9616) +
             (C49297 + C49296) * C139403) *
                C139457 * C47029 +
            ((C50925 + C50924) * C9617 -
             ((C47436 + C47437) * C9466 + (C47265 + C47264) * C9616) +
             (C51134 + C51135) * C139403) *
                C139457 * C139575) *
               C139560 +
           (((C48142 + C48143) * C9616 + (C48367 + C48366) * C9466 -
             (C52006 + C52007) * C9617 - (C52281 + C52280) * C139403) *
                C139457 * C47029 +
            ((C50019 + C50018) * C9616 + (C50228 + C50229) * C9466 -
             (C47234 * C8752 + C139586 * C8998 + C47233 * C4225 +
              C47031 * C4551) *
                 C9617 -
             (C47234 * C8918 + C139586 * C9157 + C47233 * C4445 +
              C47031 * C4785) *
                 C139403) *
                C139457 * C139575) *
               C139377) *
              C139305)) /
        (p * q * std::sqrt(p + q));
    d2eezx[55] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((((C554 * C107 + C139457 * C555) * C137108 +
                        (C554 * C116 + C139457 * C561) * C139552 -
                        C584 * C137101 - C585 * C139305) *
                           C47029 +
                       (C584 * C137108 + C585 * C139552 - C586 * C137101 -
                        C587 * C139305) *
                           C139575) *
                          C47031 +
                      ((C22631 + C22632 - C22633 - C22634) * C47029 +
                       (C22635 + C22636 - C22637 - C22638) * C139575) *
                          C139586) *
                         C9466 +
                     (((C2408 * C137101 -
                        ((C554 * C1777 + C139457 * C2383) * C139552 +
                         (C554 * C1767 + C139457 * C2376) * C137108) +
                        C2409 * C139305) *
                           C47029 +
                       (C2410 * C137101 - (C2409 * C139552 + C2408 * C137108) +
                        C2411 * C139305) *
                           C139575) *
                          C47031 +
                      ((C23759 - (C23760 + C23761) + C23762) * C47029 +
                       (C23763 - (C23764 + C23765) + C23766) * C139575) *
                          C139586) *
                         C139403) *
                        C139560 +
                    ((((C22633 - (C22632 + C22631) + C22634) * C47029 +
                       (C22637 - (C22636 + C22635) + C22638) * C139575) *
                          C47031 +
                      ((C22639 - (C22640 + C22641) + C22642) * C47029 +
                       (C22643 - (C22644 + C22645) + C22646) * C139575) *
                          C139586) *
                         C9466 +
                     (((C23761 + C23760 - C23759 - C23762) * C47029 +
                       (C23765 + C23764 - C23763 - C23766) * C139575) *
                          C47031 +
                      ((C24775 * C137108 + C24776 * C139552 - C19109 * C137101 -
                        C19110 * C139305) *
                           C47029 +
                       (C19109 * C137108 + C19110 * C139552 -
                        (C554 * C8752 + C139457 * C9232) * C137101 -
                        (C554 * C8755 + C139457 * C9235) * C139305) *
                           C139575) *
                          C139586) *
                         C139403) *
                        C139377)) /
                  (p * q * std::sqrt(p + q));
    d2eezy[55] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((((C554 * C107 + C139457 * C555) * C2783 +
                        (C554 * C182 + C139457 * C641) * C139560 -
                        C15060 * C2784 - C15179 * C139377) *
                           C47029 +
                       (C3279 + C3280 - C3281 - C3282) * C139575) *
                          C47031 +
                      ((C15060 * C2783 + C15179 * C139560 - C15063 * C2784 -
                        C15180 * C139377) *
                           C47029 +
                       (C17096 + C17097 - C17098 - C17099) * C139575) *
                          C139586) *
                         C139552 +
                     (((C3281 - (C3280 + C3279) + C3282) * C47029 +
                       (C3285 - (C3284 + C3283) + C3286) * C139575) *
                          C47031 +
                      ((C17098 - (C17097 + C17096) + C17099) * C47029 +
                       (C17100 - (C17101 + C17102) + C17103) * C139575) *
                          C139586) *
                         C139305) *
                        C9466 +
                    ((((C19108 * C2784 -
                        ((C554 * C1873 + C139457 * C2492) * C139560 +
                         (C554 * C1767 + C139457 * C2376) * C2783) +
                        C19250 * C139377) *
                           C47029 +
                       (C5022 - (C5023 + C5024) + C5034) * C139575) *
                          C47031 +
                      ((C24775 * C2784 - (C19250 * C139560 + C19108 * C2783) +
                        C24881 * C139377) *
                           C47029 +
                       (C19245 - (C19246 + C19247) + C19252) * C139575) *
                          C139586) *
                         C139552 +
                     (((C5024 + C5023 - C5022 - C5034) * C47029 +
                       (C5029 + C5028 - C5027 - C5035) * C139575) *
                          C47031 +
                      ((C19247 + C19246 - C19245 - C19252) * C47029 +
                       (C4918 * C2783 + C5033 * C139560 -
                        (C554 * C8752 + C139457 * C9232) * C2784 -
                        (C554 * C8838 + C139457 * C9314) * C139377) *
                           C139575) *
                          C139586) *
                         C139305) *
                        C139403)) /
                  (p * q * std::sqrt(p + q));
    d2eezz[55] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C554 * C107 + C139457 * C555) * C9616 +
              (C554 * C245 + C139457 * C719) * C9466 -
              (C554 * C1767 + C139457 * C2376) * C9617 -
              (C554 * C1965 + C139457 * C2591) * C139403) *
                 C47029 +
             (C10079 + C10080 - C10081 - C10082) * C139575) *
                C47031 +
            ((C26753 + C26754 - C26755 - C26756) * C47029 + C28565 * C139575) *
                C139586) *
               C139560 +
           (((C26755 - (C26754 + C26753) + C26756) * C47029 +
             C28566 * C139575) *
                C47031 +
            ((C26757 - (C26758 + C26759) + C26760) * C47029 +
             (C26761 - (C26762 + C26763) + C26764) * C139575) *
                C139586) *
               C139377) *
              C139552 +
          ((((C10081 - (C10080 + C10079) + C10082) * C47029 +
             (C10085 - (C10084 + C10083) + C10086) * C139575) *
                C47031 +
            (C28566 * C47029 +
             (C12160 - (C12161 + C12162) + C12163) * C139575) *
                C139586) *
               C139560 +
           ((C28565 * C47029 + (C12162 + C12161 - C12160 - C12163) * C139575) *
                C47031 +
            ((C26763 + C26762 - C26761 - C26764) * C47029 +
             (C1478 * C9616 + C1683 * C9466 -
              (C554 * C8752 + C139457 * C9232) * C9617 -
              (C554 * C8918 + C139457 * C9391) * C139403) *
                 C139575) *
                C139586) *
               C139377) *
              C139305)) /
        (p * q * std::sqrt(p + q));
    d2eexx[56] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139575 * C114) *
                 C5913 +
             (C47033 * C116 + C47029 * C125 + C47034 * C117 + C139575 * C126) *
                 C139300) *
                C47031 +
            ((C47768 + C47769) * C5913 + (C47770 + C47771) * C139300) *
                C139586) *
               C139457 * C139593 -
           (((C51578 + C51579) * C139300 + (C51580 + C51581) * C5913) *
                C139586 +
            ((C47034 * C1776 + C139575 * C1789 + C47033 * C1777 +
              C47029 * C1790) *
                 C139300 +
             (C47034 * C1764 + C139575 * C1772 + C47033 * C1767 +
              C47029 * C1778) *
                 C5913) *
                C47031) *
               C139457 * C139594 +
           (((C47033 * C1768 + C47029 * C1780 + C47034 * C1769 +
              C139575 * C1781) *
                 C5913 +
             (C47033 * C1783 + C47029 * C1792 + C47034 * C1784 +
              C139575 * C1793) *
                 C139300) *
                C47031 +
            ((C54278 + C54279) * C5913 + (C54280 + C54281) * C139300) *
                C139586) *
               C139457 * C12239) *
              C139560 +
          ((((C51581 + C51580) * C5913 + (C51579 + C51578) * C139300) * C47031 +
            ((C57236 + C57237) * C5913 + (C57238 + C57239) * C139300) *
                C139586) *
               C139457 * C139594 -
           (((C47778 + C47779) * C139300 + (C47780 + C47781) * C5913) *
                C139586 +
            ((C47771 + C47770) * C139300 + (C47769 + C47768) * C5913) *
                C47031) *
               C139457 * C139593 -
           (((C47034 * C21080 + C139575 * C21084 + C47033 * C21081 +
              C47029 * C21085) *
                 C139300 +
             (C47034 * C21078 + C139575 * C21082 + C47033 * C21079 +
              C47029 * C21083) *
                 C5913) *
                C139586 +
            ((C54281 + C54280) * C139300 + (C54279 + C54278) * C5913) *
                C47031) *
               C139457 * C12239) *
              C139377)) /
        (p * q * std::sqrt(p + q));
    d2eexy[56] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139575 * C114) *
                C2783 +
            (C47033 * C182 + C47029 * C188 + C47034 * C183 + C139575 * C189) *
                C139560 -
            (C47769 + C47768) * C2784 - (C47898 + C47899) * C139377) *
               C47031 +
           ((C47768 + C47769) * C2783 + (C47899 + C47898) * C139560 -
            (C47780 + C47781) * C2784 - (C47901 + C47900) * C139377) *
               C139586) *
              C139457 * C139300 * C139593 +
          (((C51581 + C51580) * C2784 -
            ((C47034 * C1870 + C139575 * C1878 + C47033 * C1873 +
              C47029 * C1881) *
                 C139560 +
             (C47034 * C1764 + C139575 * C1772 + C47033 * C1767 +
              C47029 * C1778) *
                 C2783) +
            (C51722 + C51723) * C139377) *
               C47031 +
           ((C57236 + C57237) * C2784 -
            ((C51723 + C51722) * C139560 + (C51580 + C51581) * C2783) +
            (C57343 + C57342) * C139377) *
               C139586) *
              C139457 * C139300 * C139594 +
          (((C47033 * C1768 + C47029 * C1780 + C47034 * C1769 +
             C139575 * C1781) *
                C2783 +
            (C47033 * C1874 + C47029 * C1882 + C47034 * C1875 +
             C139575 * C1883) *
                C139560 -
            (C54279 + C54278) * C2784 - (C54384 + C54385) * C139377) *
               C47031 +
           ((C54278 + C54279) * C2783 + (C54385 + C54384) * C139560 -
            (C47034 * C21078 + C139575 * C21082 + C47033 * C21079 +
             C47029 * C21083) *
                C2784 -
            (C47034 * C21196 + C139575 * C21198 + C47033 * C21197 +
             C47029 * C21199) *
                C139377) *
               C139586) *
              C139457 * C139300 * C12239)) /
        (p * q * std::sqrt(p + q));
    d2eexz[56] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139575 * C114) *
                C12388 +
            (C47033 * C245 + C47029 * C251 + C47034 * C246 + C139575 * C252) *
                C139593 -
            (C47034 * C1764 + C139575 * C1772 + C47033 * C1767 +
             C47029 * C1778) *
                C12389 -
            (C47034 * C1964 + C139575 * C1972 + C47033 * C1965 +
             C47029 * C1973) *
                C139594 +
            (C47033 * C1768 + C47029 * C1780 + C47034 * C1769 +
             C139575 * C1781) *
                C12390 +
            (C47033 * C1966 + C47029 * C1974 + C47034 * C1967 +
             C139575 * C1975) *
                C12239) *
               C47031 +
           ((C47768 + C47769) * C12388 + (C48020 + C48021) * C139593 -
            (C51580 + C51581) * C12389 - (C51864 + C51865) * C139594 +
            (C54278 + C54279) * C12390 + (C54488 + C54489) * C12239) *
               C139586) *
              C139457 * C139560 +
          (((C51581 + C51580) * C12389 -
            ((C48021 + C48020) * C139593 + (C47769 + C47768) * C12388) +
            (C51865 + C51864) * C139594 - (C54279 + C54278) * C12390 -
            (C54489 + C54488) * C12239) *
               C47031 +
           ((C57236 + C57237) * C12389 -
            ((C48022 + C48023) * C139593 + (C47780 + C47781) * C12388) +
            (C57446 + C57447) * C139594 -
            (C47034 * C21078 + C139575 * C21082 + C47033 * C21079 +
             C47029 * C21083) *
                C12390 -
            (C47034 * C21304 + C139575 * C21306 + C47033 * C21305 +
             C47029 * C21307) *
                C12239) *
               C139586) *
              C139457 * C139377) *
         C139300) /
        (p * q * std::sqrt(p + q));
    d2eeyx[56] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47233 * C107 + C47031 * C308 + C47234 * C831 + C139586 * C1118) *
                 C5913 +
             (C47233 * C116 + C47031 * C314 + C47234 * C841 + C139586 * C1125) *
                 C139300) *
                C139457 * C47029 +
            ((C47261 + C47260) * C5913 + (C47263 + C47262) * C139300) *
                C139457 * C139575) *
               C139593 -
           (((C49075 + C49074) * C139300 + (C49073 + C49072) * C5913) *
                C139457 * C139575 +
            ((C47234 * C4230 + C139586 * C4553 + C47233 * C1777 +
              C47031 * C2061) *
                 C139300 +
             (C47234 * C4223 + C139586 * C4549 + C47233 * C1767 +
              C47031 * C2054) *
                 C5913) *
                C139457 * C47029) *
               C139594 +
           (((C47233 * C1768 + C47031 * C2057 + C47234 * C6442 +
              C139586 * C6688) *
                 C5913 +
             (C47233 * C1783 + C47031 * C2065 + C47234 * C6445 +
              C139586 * C6691) *
                 C139300) *
                C139457 * C47029 +
            ((C49077 + C49076) * C5913 + (C49079 + C49078) * C139300) *
                C139457 * C139575) *
               C12239) *
              C139560 +
          ((((C47233 * C4223 + C47031 * C4549 + C47234 * C8754 +
              C139586 * C9000) *
                 C5913 +
             (C47233 * C4230 + C47031 * C4553 + C47234 * C8757 +
              C139586 * C9003) *
                 C139300) *
                C139457 * C47029 +
            ((C52007 + C52006) * C5913 + (C52009 + C52008) * C139300) *
                C139457 * C139575) *
               C139594 -
           (((C48145 + C48144) * C139300 + (C48143 + C48142) * C5913) *
                C139457 * C139575 +
            ((C47234 * C847 + C139586 * C1129 + C47233 * C841 +
              C47031 * C1125) *
                 C139300 +
             (C47234 * C832 + C139586 * C1121 + C47233 * C831 +
              C47031 * C1118) *
                 C5913) *
                C139457 * C47029) *
               C139593 -
           (((C47234 * C21080 + C139586 * C21414 + C47233 * C6444 +
              C47031 * C6690) *
                 C139300 +
             (C47234 * C21078 + C139586 * C21412 + C47233 * C6441 +
              C47031 * C6687) *
                 C5913) *
                C139457 * C139575 +
            ((C47234 * C21081 + C139586 * C21415 + C47233 * C6445 +
              C47031 * C6691) *
                 C139300 +
             (C47234 * C21079 + C139586 * C21413 + C47233 * C6442 +
              C47031 * C6688) *
                 C5913) *
                C139457 * C47029) *
               C12239) *
              C139377)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[56] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C831 + C139586 * C1118) *
                C2783 +
            (C47233 * C182 + C47031 * C394 + C47234 * C939 + C139586 * C1231) *
                C139560 -
            (C47234 * C832 + C139586 * C1121 + C47233 * C831 + C47031 * C1118) *
                C2784 -
            (C47234 * C940 + C139586 * C1232 + C47233 * C939 + C47031 * C1231) *
                C139377) *
               C139457 * C47029 +
           ((C47261 + C47260) * C2783 + (C47350 + C47351) * C139560 -
            (C48143 + C48142) * C2784 - (C48256 + C48257) * C139377) *
               C139457 * C139575) *
              C139300 * C139593 +
          (((C47233 * C4223 + C47031 * C4549 + C47234 * C8754 +
             C139586 * C9000) *
                C2784 -
            ((C47234 * C4337 + C139586 * C4667 + C47233 * C1873 +
              C47031 * C2170) *
                 C139560 +
             (C47234 * C4223 + C139586 * C4549 + C47233 * C1767 +
              C47031 * C2054) *
                 C2783) +
            (C47233 * C4337 + C47031 * C4667 + C47234 * C8840 +
             C139586 * C9078) *
                C139377) *
               C139457 * C47029 +
           ((C52007 + C52006) * C2784 -
            ((C49187 + C49186) * C139560 + (C49073 + C49072) * C2783) +
            (C52144 + C52145) * C139377) *
               C139457 * C139575) *
              C139300 * C139594 +
          (((C47233 * C1768 + C47031 * C2057 + C47234 * C6442 +
             C139586 * C6688) *
                C2783 +
            (C47233 * C1874 + C47031 * C2171 + C47234 * C6528 +
             C139586 * C6766) *
                C139560 -
            (C47234 * C21079 + C139586 * C21413 + C47233 * C6442 +
             C47031 * C6688) *
                C2784 -
            (C47234 * C21197 + C139586 * C21514 + C47233 * C6528 +
             C47031 * C6766) *
                C139377) *
               C139457 * C47029 +
           ((C49077 + C49076) * C2783 + (C49188 + C49189) * C139560 -
            (C47234 * C21078 + C139586 * C21412 + C47233 * C6441 +
             C47031 * C6687) *
                C2784 -
            (C47234 * C21196 + C139586 * C21515 + C47233 * C6527 +
             C47031 * C6767) *
                C139377) *
               C139457 * C139575) *
              C139300 * C12239)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[56] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C831 + C139586 * C1118) *
                C12388 +
            (C47233 * C245 + C47031 * C474 + C47234 * C1029 + C139586 * C1339) *
                C139593 -
            (C47234 * C4223 + C139586 * C4549 + C47233 * C1767 +
             C47031 * C2054) *
                C12389 -
            (C47234 * C4443 + C139586 * C4783 + C47233 * C1965 +
             C47031 * C2269) *
                C139594 +
            (C47233 * C1768 + C47031 * C2057 + C47234 * C6442 +
             C139586 * C6688) *
                C12390 +
            (C47233 * C1966 + C47031 * C2270 + C47234 * C6608 +
             C139586 * C6843) *
                C12239) *
               C139457 * C47029 +
           ((C47261 + C47260) * C12388 + (C47434 + C47435) * C139593 -
            (C49073 + C49072) * C12389 - (C49296 + C49297) * C139594 +
            (C49077 + C49076) * C12390 + (C49298 + C49299) * C12239) *
               C139457 * C139575) *
              C139560 +
          (((C47233 * C4223 + C47031 * C4549 + C47234 * C8754 +
             C139586 * C9000) *
                C12389 -
            ((C47234 * C1030 + C139586 * C1340 + C47233 * C1029 +
              C47031 * C1339) *
                 C139593 +
             (C47234 * C832 + C139586 * C1121 + C47233 * C831 +
              C47031 * C1118) *
                 C12388) +
            (C47233 * C4443 + C47031 * C4783 + C47234 * C8920 +
             C139586 * C9155) *
                C139594 -
            (C47234 * C21079 + C139586 * C21413 + C47233 * C6442 +
             C47031 * C6688) *
                C12390 -
            (C47234 * C21305 + C139586 * C21614 + C47233 * C6608 +
             C47031 * C6843) *
                C12239) *
               C139457 * C47029 +
           ((C52007 + C52006) * C12389 -
            ((C48366 + C48367) * C139593 + (C48143 + C48142) * C12388) +
            (C52280 + C52281) * C139594 -
            (C47234 * C21078 + C139586 * C21412 + C47233 * C6441 +
             C47031 * C6687) *
                C12390 -
            (C47234 * C21304 + C139586 * C21615 + C47233 * C6607 +
             C47031 * C6844) *
                C12239) *
               C139457 * C139575) *
              C139377) *
         C139300) /
        (p * q * std::sqrt(p + q));
    d2eezx[56] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C554 * C107 + C139457 * C555) * C5913 +
              (C554 * C116 + C139457 * C561) * C139300) *
                 C47029 +
             (C584 * C5913 + C585 * C139300) * C139575) *
                C47031 +
            ((C20819 + C20820) * C47029 + (C20821 + C20822) * C139575) *
                C139586) *
               C139593 -
           (((C21719 + C21720) * C139575 + (C21721 + C21722) * C47029) *
                C139586 +
            ((C2409 * C139300 + C2408 * C5913) * C139575 +
             ((C554 * C1777 + C139457 * C2383) * C139300 +
              (C554 * C1767 + C139457 * C2376) * C5913) *
                 C47029) *
                C47031) *
               C139594 +
           ((((C554 * C1768 + C139457 * C2379) * C5913 +
              (C554 * C1783 + C139457 * C2387) * C139300) *
                 C47029 +
             (C2412 * C5913 + C2413 * C139300) * C139575) *
                C47031 +
            ((C21731 + C21732) * C47029 + (C21727 + C21728) * C139575) *
                C139586) *
               C12239) *
              C139560 +
          ((((C21722 + C21721) * C47029 + (C21720 + C21719) * C139575) *
                C47031 +
            ((C24777 + C24778) * C47029 + (C24773 + C24774) * C139575) *
                C139586) *
               C139594 -
           (((C20823 + C20824) * C139575 + (C20825 + C20826) * C47029) *
                C139586 +
            ((C20822 + C20821) * C139575 + (C20820 + C20819) * C47029) *
                C47031) *
               C139593 -
           ((((C554 * C21080 + C139457 * C21716) * C139300 +
              (C554 * C21078 + C139457 * C21714) * C5913) *
                 C139575 +
             ((C554 * C21081 + C139457 * C21717) * C139300 +
              (C554 * C21079 + C139457 * C21715) * C5913) *
                 C47029) *
                C139586 +
            ((C21728 + C21727) * C139575 + (C21732 + C21731) * C47029) *
                C47031) *
               C12239) *
              C139377)) /
        (p * q * std::sqrt(p + q));
    d2eezy[56] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C554 * C107 + C139457 * C555) * C2783 +
                       (C554 * C182 + C139457 * C641) * C139560 -
                       C15060 * C2784 - C15179 * C139377) *
                          C47029 +
                      (C3279 + C3280 - C3281 - C3282) * C139575) *
                         C47031 +
                     ((C15060 * C2783 + C15179 * C139560 - C15063 * C2784 -
                       C15180 * C139377) *
                          C47029 +
                      (C17096 + C17097 - C17098 - C17099) * C139575) *
                         C139586) *
                        C139300 * C139593 +
                    (((C19108 * C2784 -
                       ((C554 * C1873 + C139457 * C2492) * C139560 +
                        (C554 * C1767 + C139457 * C2376) * C2783) +
                       C19250 * C139377) *
                          C47029 +
                      (C5022 - (C5023 + C5024) + C5034) * C139575) *
                         C47031 +
                     ((C24775 * C2784 - (C19250 * C139560 + C19108 * C2783) +
                       C24881 * C139377) *
                          C47029 +
                      (C19245 - (C19246 + C19247) + C19252) * C139575) *
                         C139586) *
                        C139300 * C139594 +
                    ((((C554 * C1768 + C139457 * C2379) * C2783 +
                       (C554 * C1874 + C139457 * C2493) * C139560 -
                       C21729 * C2784 - C21835 * C139377) *
                          C47029 +
                      (C2412 * C2783 + C2512 * C139560 - C16038 * C2784 -
                       C16143 * C139377) *
                          C139575) *
                         C47031 +
                     ((C21729 * C2783 + C21835 * C139560 -
                       (C554 * C21079 + C139457 * C21715) * C2784 -
                       (C554 * C21197 + C139457 * C21830) * C139377) *
                          C47029 +
                      (C16038 * C2783 + C16143 * C139560 -
                       (C554 * C21078 + C139457 * C21714) * C2784 -
                       (C554 * C21196 + C139457 * C21831) * C139377) *
                          C139575) *
                         C139586) *
                        C139300 * C12239)) /
                  (p * q * std::sqrt(p + q));
    d2eezz[56] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139457 * C555) * C12388 +
             (C554 * C245 + C139457 * C719) * C139593 -
             (C554 * C1767 + C139457 * C2376) * C12389 -
             (C554 * C1965 + C139457 * C2591) * C139594 +
             (C554 * C1768 + C139457 * C2379) * C12390 +
             (C554 * C1966 + C139457 * C2592) * C12239) *
                C47029 +
            (C12848 + C12849 - C12850 - C12851 + C12852 + C12853) * C139575) *
               C47031 +
           ((C30337 + C30338 - C30339 - C30340 + C30341 + C30342) * C47029 +
            (C29449 + C29450 - C29451 - C29452 + C29453 + C29454) * C139575) *
               C139586) *
              C139560 +
          (((C30339 - (C30338 + C30337) + C30340 - C30341 - C30342) * C47029 +
            (C29451 - (C29450 + C29449) + C29452 - C29453 - C29454) * C139575) *
               C47031 +
           ((C24775 * C12389 - (C15295 * C139593 + C15063 * C12388) +
             C24987 * C139594 - (C554 * C21079 + C139457 * C21715) * C12390 -
             (C554 * C21305 + C139457 * C21933) * C12239) *
                C47029 +
            (C19109 * C12389 - (C1682 * C139593 + C1476 * C12388) +
             C19398 * C139594 - (C554 * C21078 + C139457 * C21714) * C12390 -
             (C554 * C21304 + C139457 * C21934) * C12239) *
                C139575) *
               C139586) *
              C139377) *
         C139300) /
        (p * q * std::sqrt(p + q));
    d2eexx[57] +=
        (-std::pow(Pi, 2.5) *
         (((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139575 * C114) *
                 C5913 +
             (C47033 * C116 + C47029 * C125 + C47034 * C117 + C139575 * C126) *
                 C139300) *
                C47031 +
            ((C47768 + C47769) * C5913 + (C47770 + C47771) * C139300) *
                C139586) *
               C139457 * C9466 -
           (((C51578 + C51579) * C139300 + (C51580 + C51581) * C5913) *
                C139586 +
            ((C47034 * C1776 + C139575 * C1789 + C47033 * C1777 +
              C47029 * C1790) *
                 C139300 +
             (C47034 * C1764 + C139575 * C1772 + C47033 * C1767 +
              C47029 * C1778) *
                 C5913) *
                C47031) *
               C139457 * C139403) *
              C823 +
          ((((C51581 + C51580) * C5913 + (C51579 + C51578) * C139300) * C47031 +
            ((C57236 + C57237) * C5913 + (C57238 + C57239) * C139300) *
                C139586) *
               C139457 * C139403 -
           (((C47778 + C47779) * C139300 + (C47780 + C47781) * C5913) *
                C139586 +
            ((C47771 + C47770) * C139300 + (C47769 + C47768) * C5913) *
                C47031) *
               C139457 * C9466) *
              C824 +
          ((((C47781 + C47780) * C5913 + (C47779 + C47778) * C139300) * C47031 +
            ((C53628 + C53629) * C5913 + (C53630 + C53631) * C139300) *
                C139586) *
               C139457 * C9466 -
           (((C47034 * C24130 + C139575 * C24134 + C47033 * C24131 +
              C47029 * C24135) *
                 C139300 +
             (C47034 * C24128 + C139575 * C24132 + C47033 * C24129 +
              C47029 * C24133) *
                 C5913) *
                C139586 +
            ((C57239 + C57238) * C139300 + (C57237 + C57236) * C5913) *
                C47031) *
               C139457 * C139403) *
              C825)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139575 * C114) *
                C5230 +
            (C47033 * C116 + C47029 * C125 + C47034 * C117 + C139575 * C126) *
                C5225 -
            (C47034 * C109 + C139575 * C115 + C47033 * C108 + C47029 * C114) *
                C5231 -
            (C47034 * C118 + C139575 * C127 + C47033 * C117 + C47029 * C126) *
                C5226 +
            (C47033 * C109 + C47029 * C115 + C47034 * C110 + C139575 * C119) *
                C5232 +
            (C47033 * C118 + C47029 * C127 + C47034 * C120 + C139575 * C128) *
                C5227) *
               C47031 +
           ((C47768 + C47769) * C5230 + (C47770 + C47771) * C5225 -
            (C47772 + C47773) * C5231 - (C47774 + C47775) * C5226 +
            (C49700 + C49701) * C5232 + (C49702 + C49703) * C5227) *
               C139586) *
              C139457 * C9466 +
          (((C47033 * C1764 + C47029 * C1772 + C47034 * C1765 +
             C139575 * C1773) *
                C5231 -
            ((C47034 * C1776 + C139575 * C1789 + C47033 * C1777 +
              C47029 * C1790) *
                 C5225 +
             (C47034 * C1764 + C139575 * C1772 + C47033 * C1767 +
              C47029 * C1778) *
                 C5230) +
            (C47033 * C1776 + C47029 * C1789 + C47034 * C1775 +
             C139575 * C1788) *
                C5226 -
            (C47034 * C1766 + C139575 * C1774 + C47033 * C1765 +
             C47029 * C1773) *
                C5232 -
            (C47034 * C1779 + C139575 * C1791 + C47033 * C1775 +
             C47029 * C1788) *
                C5227) *
               C47031 +
           ((C51576 + C51577) * C5231 -
            ((C51578 + C51579) * C5225 + (C51580 + C51581) * C5230) +
            (C51582 + C51583) * C5226 -
            (C47034 * C4226 + C139575 * C4233 + C47033 * C4225 +
             C47029 * C4229) *
                C5232 -
            (C47034 * C4234 + C139575 * C4238 + C47033 * C4232 +
             C47029 * C4237) *
                C5227) *
               C139586) *
              C139457 * C139403) *
         C139328) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139575 * C114) *
                C5913 +
            (C47033 * C116 + C47029 * C125 + C47034 * C117 + C139575 * C126) *
                C139300) *
               C47031 +
           ((C47768 + C47769) * C5913 + (C47770 + C47771) * C139300) *
               C139586) *
              C139457 * C10809 -
          (((C51578 + C51579) * C139300 + (C51580 + C51581) * C5913) * C139586 +
           ((C47034 * C1776 + C139575 * C1789 + C47033 * C1777 +
             C47029 * C1790) *
                C139300 +
            (C47034 * C1764 + C139575 * C1772 + C47033 * C1767 +
             C47029 * C1778) *
                C5913) *
               C47031) *
              C139457 * C10810 +
          (((C47033 * C1768 + C47029 * C1780 + C47034 * C1769 +
             C139575 * C1781) *
                C5913 +
            (C47033 * C1783 + C47029 * C1792 + C47034 * C1784 +
             C139575 * C1793) *
                C139300) *
               C47031 +
           ((C54278 + C54279) * C5913 + (C54280 + C54281) * C139300) *
               C139586) *
              C139457 * C10811 -
          (((C47034 * C26832 + C139575 * C26836 + C47033 * C26833 +
             C47029 * C26837) *
                C139300 +
            (C47034 * C26830 + C139575 * C26834 + C47033 * C26831 +
             C47029 * C26835) *
                C5913) *
               C139586 +
           ((C47034 * C10817 + C139575 * C10823 + C47033 * C10818 +
             C47029 * C10824) *
                C139300 +
            (C47034 * C10814 + C139575 * C10820 + C47033 * C10815 +
             C47029 * C10821) *
                C5913) *
               C47031) *
              C139457 * C10812) *
         C139328) /
            (p * q * std::sqrt(p + q));
    d2eexy[57] +=
        (-std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139575 * C114) *
                C934 +
            (C47033 * C182 + C47029 * C188 + C47034 * C183 + C139575 * C189) *
                C823 -
            (C47769 + C47768) * C935 - (C47898 + C47899) * C824 +
            (C47781 + C47780) * C936 + (C47900 + C47901) * C825) *
               C47031 +
           ((C47768 + C47769) * C934 + (C47899 + C47898) * C823 -
            (C47780 + C47781) * C935 - (C47901 + C47900) * C824 +
            (C53628 + C53629) * C936 + (C53703 + C53702) * C825) *
               C139586) *
              C139457 * C139300 * C9466 +
          (((C51581 + C51580) * C935 -
            ((C47034 * C1870 + C139575 * C1878 + C47033 * C1873 +
              C47029 * C1881) *
                 C823 +
             (C47034 * C1764 + C139575 * C1772 + C47033 * C1767 +
              C47029 * C1778) *
                 C934) +
            (C51722 + C51723) * C824 - (C57237 + C57236) * C936 -
            (C57342 + C57343) * C825) *
               C47031 +
           ((C57236 + C57237) * C935 -
            ((C51723 + C51722) * C823 + (C51580 + C51581) * C934) +
            (C57343 + C57342) * C824 -
            (C47034 * C24128 + C139575 * C24132 + C47033 * C24129 +
             C47029 * C24133) *
                C936 -
            (C47034 * C24246 + C139575 * C24248 + C47033 * C24247 +
             C47029 * C24249) *
                C825) *
               C139586) *
              C139457 * C139300 * C139403)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139575 * C114) *
                 C181 +
             (C47033 * C182 + C47029 * C188 + C47034 * C183 + C139575 * C189) *
                 C139328) *
                C47031 +
            ((C47768 + C47769) * C181 + (C47899 + C47898) * C139328) *
                C139586) *
               C139457 * C5225 -
           (((C47903 + C47902) * C139328 + (C47772 + C47773) * C181) * C139586 +
            ((C47034 * C184 + C139575 * C190 + C47033 * C183 + C47029 * C189) *
                 C139328 +
             (C47034 * C109 + C139575 * C115 + C47033 * C108 + C47029 * C114) *
                 C181) *
                C47031) *
               C139457 * C5226 +
           (((C47033 * C109 + C47029 * C115 + C47034 * C110 + C139575 * C119) *
                 C181 +
             (C47033 * C184 + C47029 * C190 + C47034 * C185 + C139575 * C191) *
                 C139328) *
                C47031 +
            ((C49700 + C49701) * C181 + (C49807 + C49806) * C139328) *
                C139586) *
               C139457 * C5227) *
              C9466 +
          ((((C47033 * C1764 + C47029 * C1772 + C47034 * C1765 +
              C139575 * C1773) *
                 C181 +
             (C47033 * C1870 + C47029 * C1878 + C47034 * C1871 +
              C139575 * C1879) *
                 C139328) *
                C47031 +
            ((C51576 + C51577) * C181 + (C51725 + C51724) * C139328) *
                C139586) *
               C139457 * C5226 -
           (((C51723 + C51722) * C139328 + (C51580 + C51581) * C181) * C139586 +
            ((C47034 * C1870 + C139575 * C1878 + C47033 * C1873 +
              C47029 * C1881) *
                 C139328 +
             (C47034 * C1764 + C139575 * C1772 + C47033 * C1767 +
              C47029 * C1778) *
                 C181) *
                C47031) *
               C139457 * C5225 -
           (((C47034 * C4340 + C139575 * C4344 + C47033 * C4339 +
              C47029 * C4343) *
                 C139328 +
             (C47034 * C4226 + C139575 * C4233 + C47033 * C4225 +
              C47029 * C4229) *
                 C181) *
                C139586 +
            ((C47034 * C1872 + C139575 * C1880 + C47033 * C1871 +
              C47029 * C1879) *
                 C139328 +
             (C47034 * C1766 + C139575 * C1774 + C47033 * C1765 +
              C47029 * C1773) *
                 C181) *
                C47031) *
               C139457 * C5227) *
              C139403)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139575 * C114) *
                C181 +
            (C47033 * C182 + C47029 * C188 + C47034 * C183 + C139575 * C189) *
                C139328) *
               C47031 +
           ((C47768 + C47769) * C181 + (C47899 + C47898) * C139328) * C139586) *
              C139457 * C139300 * C10809 -
          (((C51723 + C51722) * C139328 + (C51580 + C51581) * C181) * C139586 +
           ((C47034 * C1870 + C139575 * C1878 + C47033 * C1873 +
             C47029 * C1881) *
                C139328 +
            (C47034 * C1764 + C139575 * C1772 + C47033 * C1767 +
             C47029 * C1778) *
                C181) *
               C47031) *
              C139457 * C139300 * C10810 +
          (((C47033 * C1768 + C47029 * C1780 + C47034 * C1769 +
             C139575 * C1781) *
                C181 +
            (C47033 * C1874 + C47029 * C1882 + C47034 * C1875 +
             C139575 * C1883) *
                C139328) *
               C47031 +
           ((C54278 + C54279) * C181 + (C54385 + C54384) * C139328) * C139586) *
              C139457 * C139300 * C10811 -
          (((C47034 * C26904 + C139575 * C26906 + C47033 * C26905 +
             C47029 * C26907) *
                C139328 +
            (C47034 * C26830 + C139575 * C26834 + C47033 * C26831 +
             C47029 * C26835) *
                C181) *
               C139586 +
           ((C47034 * C10876 + C139575 * C10879 + C47033 * C10877 +
             C47029 * C10880) *
                C139328 +
            (C47034 * C10814 + C139575 * C10820 + C47033 * C10815 +
             C47029 * C10821) *
                C181) *
               C47031) *
              C139457 * C139300 * C10812)) /
            (p * q * std::sqrt(p + q));
    d2eexz[57] +=
        (-std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139575 * C114) *
                C9616 +
            (C47033 * C245 + C47029 * C251 + C47034 * C246 + C139575 * C252) *
                C9466 -
            (C47034 * C1764 + C139575 * C1772 + C47033 * C1767 +
             C47029 * C1778) *
                C9617 -
            (C47034 * C1964 + C139575 * C1972 + C47033 * C1965 +
             C47029 * C1973) *
                C139403) *
               C47031 +
           ((C47768 + C47769) * C9616 + (C48020 + C48021) * C9466 -
            (C51580 + C51581) * C9617 - (C51864 + C51865) * C139403) *
               C139586) *
              C139457 * C823 +
          (((C51581 + C51580) * C9617 -
            ((C48021 + C48020) * C9466 + (C47769 + C47768) * C9616) +
            (C51865 + C51864) * C139403) *
               C47031 +
           ((C57236 + C57237) * C9617 -
            ((C48022 + C48023) * C9466 + (C47780 + C47781) * C9616) +
            (C57446 + C57447) * C139403) *
               C139586) *
              C139457 * C824 +
          (((C47781 + C47780) * C9616 + (C48023 + C48022) * C9466 -
            (C57237 + C57236) * C9617 - (C57447 + C57446) * C139403) *
               C47031 +
           ((C53628 + C53629) * C9616 + (C53774 + C53775) * C9466 -
            (C47034 * C24128 + C139575 * C24132 + C47033 * C24129 +
             C47029 * C24133) *
                C9617 -
            (C47034 * C24354 + C139575 * C24356 + C47033 * C24355 +
             C47029 * C24357) *
                C139403) *
               C139586) *
              C139457 * C825) *
         C139300) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139575 * C114) *
                C9616 +
            (C47033 * C245 + C47029 * C251 + C47034 * C246 + C139575 * C252) *
                C9466 -
            (C47034 * C1764 + C139575 * C1772 + C47033 * C1767 +
             C47029 * C1778) *
                C9617 -
            (C47034 * C1964 + C139575 * C1972 + C47033 * C1965 +
             C47029 * C1973) *
                C139403) *
               C47031 +
           ((C47768 + C47769) * C9616 + (C48020 + C48021) * C9466 -
            (C51580 + C51581) * C9617 - (C51864 + C51865) * C139403) *
               C139586) *
              C139457 * C139328 * C5225 +
          (((C47033 * C1764 + C47029 * C1772 + C47034 * C1765 +
             C139575 * C1773) *
                C9617 -
            ((C47034 * C247 + C139575 * C253 + C47033 * C246 + C47029 * C252) *
                 C9466 +
             (C47034 * C109 + C139575 * C115 + C47033 * C108 + C47029 * C114) *
                 C9616) +
            (C47033 * C1964 + C47029 * C1972 + C47034 * C1963 +
             C139575 * C1971) *
                C139403) *
               C47031 +
           ((C51576 + C51577) * C9617 -
            ((C48025 + C48024) * C9466 + (C47772 + C47773) * C9616) +
            (C51866 + C51867) * C139403) *
               C139586) *
              C139457 * C139328 * C5226 +
          (((C47033 * C109 + C47029 * C115 + C47034 * C110 + C139575 * C119) *
                C9616 +
            (C47033 * C247 + C47029 * C253 + C47034 * C248 + C139575 * C254) *
                C9466 -
            (C47034 * C1766 + C139575 * C1774 + C47033 * C1765 +
             C47029 * C1773) *
                C9617 -
            (C47034 * C1969 + C139575 * C1977 + C47033 * C1963 +
             C47029 * C1971) *
                C139403) *
               C47031 +
           ((C49700 + C49701) * C9616 + (C49910 + C49911) * C9466 -
            (C47034 * C4226 + C139575 * C4233 + C47033 * C4225 +
             C47029 * C4229) *
                C9617 -
            (C47034 * C4446 + C139575 * C4450 + C47033 * C4445 +
             C47029 * C4449) *
                C139403) *
               C139586) *
              C139457 * C139328 * C5227)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139575 * C114) *
               C10931 +
           (C47033 * C245 + C47029 * C251 + C47034 * C246 + C139575 * C252) *
               C10809 -
           (C47034 * C1764 + C139575 * C1772 + C47033 * C1767 +
            C47029 * C1778) *
               C10932 -
           (C47034 * C1964 + C139575 * C1972 + C47033 * C1965 +
            C47029 * C1973) *
               C10810 +
           (C47033 * C1768 + C47029 * C1780 + C47034 * C1769 +
            C139575 * C1781) *
               C10933 +
           (C47033 * C1966 + C47029 * C1974 + C47034 * C1967 +
            C139575 * C1975) *
               C10811 -
           (C47034 * C10814 + C139575 * C10820 + C47033 * C10815 +
            C47029 * C10821) *
               C10934 -
           (C47034 * C10936 + C139575 * C10939 + C47033 * C10937 +
            C47029 * C10940) *
               C10812) *
              C47031 +
          ((C47768 + C47769) * C10931 + (C48020 + C48021) * C10809 -
           (C51580 + C51581) * C10932 - (C51864 + C51865) * C10810 +
           (C54278 + C54279) * C10933 + (C54488 + C54489) * C10811 -
           (C47034 * C26830 + C139575 * C26834 + C47033 * C26831 +
            C47029 * C26835) *
               C10934 -
           (C47034 * C26974 + C139575 * C26976 + C47033 * C26975 +
            C47029 * C26977) *
               C10812) *
              C139586) *
         C139457 * C139328 * C139300) /
            (p * q * std::sqrt(p + q));
    d2eeyx[57] +=
        (-std::pow(Pi, 2.5) *
         (((((C47233 * C107 + C47031 * C308 + C47234 * C831 + C139586 * C1118) *
                 C5913 +
             (C47233 * C116 + C47031 * C314 + C47234 * C841 + C139586 * C1125) *
                 C139300) *
                C139457 * C47029 +
            ((C47261 + C47260) * C5913 + (C47263 + C47262) * C139300) *
                C139457 * C139575) *
               C9466 -
           (((C49075 + C49074) * C139300 + (C49073 + C49072) * C5913) *
                C139457 * C139575 +
            ((C47234 * C4230 + C139586 * C4553 + C47233 * C1777 +
              C47031 * C2061) *
                 C139300 +
             (C47234 * C4223 + C139586 * C4549 + C47233 * C1767 +
              C47031 * C2054) *
                 C5913) *
                C139457 * C47029) *
               C139403) *
              C823 +
          ((((C47233 * C4223 + C47031 * C4549 + C47234 * C8754 +
              C139586 * C9000) *
                 C5913 +
             (C47233 * C4230 + C47031 * C4553 + C47234 * C8757 +
              C139586 * C9003) *
                 C139300) *
                C139457 * C47029 +
            ((C52007 + C52006) * C5913 + (C52009 + C52008) * C139300) *
                C139457 * C139575) *
               C139403 -
           (((C48145 + C48144) * C139300 + (C48143 + C48142) * C5913) *
                C139457 * C139575 +
            ((C47234 * C847 + C139586 * C1129 + C47233 * C841 +
              C47031 * C1125) *
                 C139300 +
             (C47234 * C832 + C139586 * C1121 + C47233 * C831 +
              C47031 * C1118) *
                 C5913) *
                C139457 * C47029) *
               C9466) *
              C824 +
          ((((C47233 * C832 + C47031 * C1121 + C47234 * C5916 +
              C139586 * C6094) *
                 C5913 +
             (C47233 * C847 + C47031 * C1129 + C47234 * C5919 +
              C139586 * C6097) *
                 C139300) *
                C139457 * C47029 +
            ((C48147 + C48146) * C5913 + (C48149 + C48148) * C139300) *
                C139457 * C139575) *
               C9466 -
           (((C47234 * C24130 + C139586 * C24464 + C47233 * C8756 +
              C47031 * C9002) *
                 C139300 +
             (C47234 * C24128 + C139586 * C24462 + C47233 * C8753 +
              C47031 * C8999) *
                 C5913) *
                C139457 * C139575 +
            ((C47234 * C24131 + C139586 * C24465 + C47233 * C8757 +
              C47031 * C9003) *
                 C139300 +
             (C47234 * C24129 + C139586 * C24463 + C47233 * C8754 +
              C47031 * C9000) *
                 C5913) *
                C139457 * C47029) *
               C139403) *
              C825)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C831 + C139586 * C1118) *
                C5230 +
            (C47233 * C116 + C47031 * C314 + C47234 * C841 + C139586 * C1125) *
                C5225 -
            (C47260 + C47261) * C5231 - (C47262 + C47263) * C5226 +
            (C47264 + C47265) * C5232 + (C47266 + C47267) * C5227) *
               C139457 * C47029 +
           ((C47261 + C47260) * C5230 + (C47263 + C47262) * C5225 -
            (C47265 + C47264) * C5231 - (C47267 + C47266) * C5226 +
            (C47269 + C47268) * C5232 + (C47271 + C47270) * C5227) *
               C139457 * C139575) *
              C9466 +
          (((C49072 + C49073) * C5231 -
            ((C47234 * C4230 + C139586 * C4553 + C47233 * C1777 +
              C47031 * C2061) *
                 C5225 +
             (C47234 * C4223 + C139586 * C4549 + C47233 * C1767 +
              C47031 * C2054) *
                 C5230) +
            (C49074 + C49075) * C5226 - (C50924 + C50925) * C5232 -
            (C50926 + C50927) * C5227) *
               C139457 * C47029 +
           ((C50925 + C50924) * C5231 -
            ((C49075 + C49074) * C5225 + (C49073 + C49072) * C5230) +
            (C50927 + C50926) * C5226 -
            (C47234 * C4226 + C139586 * C4552 + C47233 * C1766 +
             C47031 * C2056) *
                C5232 -
            (C47234 * C4234 + C139586 * C4556 + C47233 * C1779 +
             C47031 * C2064) *
                C5227) *
               C139457 * C139575) *
              C139403) *
         C139328) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C831 + C139586 * C1118) *
                C5913 +
            (C47233 * C116 + C47031 * C314 + C47234 * C841 + C139586 * C1125) *
                C139300) *
               C139457 * C47029 +
           ((C47261 + C47260) * C5913 + (C47263 + C47262) * C139300) * C139457 *
               C139575) *
              C10809 -
          (((C49075 + C49074) * C139300 + (C49073 + C49072) * C5913) * C139457 *
               C139575 +
           ((C47234 * C4230 + C139586 * C4553 + C47233 * C1777 +
             C47031 * C2061) *
                C139300 +
            (C47234 * C4223 + C139586 * C4549 + C47233 * C1767 +
             C47031 * C2054) *
                C5913) *
               C139457 * C47029) *
              C10810 +
          (((C47233 * C1768 + C47031 * C2057 + C47234 * C6442 +
             C139586 * C6688) *
                C5913 +
            (C47233 * C1783 + C47031 * C2065 + C47234 * C6445 +
             C139586 * C6691) *
                C139300) *
               C139457 * C47029 +
           ((C49077 + C49076) * C5913 + (C49079 + C49078) * C139300) * C139457 *
               C139575) *
              C10811 -
          (((C47234 * C26832 + C139586 * C27046 + C47233 * C10817 +
             C47031 * C10995) *
                C139300 +
            (C47234 * C26830 + C139586 * C27044 + C47233 * C10814 +
             C47031 * C10992) *
                C5913) *
               C139457 * C139575 +
           ((C47234 * C26833 + C139586 * C27047 + C47233 * C10818 +
             C47031 * C10996) *
                C139300 +
            (C47234 * C26831 + C139586 * C27045 + C47233 * C10815 +
             C47031 * C10993) *
                C5913) *
               C139457 * C47029) *
              C10812) *
         C139328) /
            (p * q * std::sqrt(p + q));
    d2eeyy[57] +=
        (-std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C831 + C139586 * C1118) *
                C934 +
            (C47233 * C182 + C47031 * C394 + C47234 * C939 + C139586 * C1231) *
                C823 -
            (C47234 * C832 + C139586 * C1121 + C47233 * C831 + C47031 * C1118) *
                C935 -
            (C47234 * C940 + C139586 * C1232 + C47233 * C939 + C47031 * C1231) *
                C824 +
            (C47233 * C832 + C47031 * C1121 + C47234 * C5916 +
             C139586 * C6094) *
                C936 +
            (C47233 * C940 + C47031 * C1232 + C47234 * C5982 +
             C139586 * C6148) *
                C825) *
               C139457 * C47029 +
           ((C47261 + C47260) * C934 + (C47350 + C47351) * C823 -
            (C48143 + C48142) * C935 - (C48256 + C48257) * C824 +
            (C48147 + C48146) * C936 + (C48258 + C48259) * C825) *
               C139457 * C139575) *
              C139300 * C9466 +
          (((C47233 * C4223 + C47031 * C4549 + C47234 * C8754 +
             C139586 * C9000) *
                C935 -
            ((C47234 * C4337 + C139586 * C4667 + C47233 * C1873 +
              C47031 * C2170) *
                 C823 +
             (C47234 * C4223 + C139586 * C4549 + C47233 * C1767 +
              C47031 * C2054) *
                 C934) +
            (C47233 * C4337 + C47031 * C4667 + C47234 * C8840 +
             C139586 * C9078) *
                C824 -
            (C47234 * C24129 + C139586 * C24463 + C47233 * C8754 +
             C47031 * C9000) *
                C936 -
            (C47234 * C24247 + C139586 * C24564 + C47233 * C8840 +
             C47031 * C9078) *
                C825) *
               C139457 * C47029 +
           ((C52007 + C52006) * C935 -
            ((C49187 + C49186) * C823 + (C49073 + C49072) * C934) +
            (C52144 + C52145) * C824 -
            (C47234 * C24128 + C139586 * C24462 + C47233 * C8753 +
             C47031 * C8999) *
                C936 -
            (C47234 * C24246 + C139586 * C24565 + C47233 * C8839 +
             C47031 * C9079) *
                C825) *
               C139457 * C139575) *
              C139300 * C139403)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C47233 * C107 + C47031 * C308 + C47234 * C831 + C139586 * C1118) *
                 C181 +
             (C47233 * C182 + C47031 * C394 + C47234 * C939 + C139586 * C1231) *
                 C139328) *
                C139457 * C47029 +
            ((C47261 + C47260) * C181 + (C47350 + C47351) * C139328) * C139457 *
                C139575) *
               C5225 -
           (((C47352 + C47353) * C139328 + (C47265 + C47264) * C181) * C139457 *
                C139575 +
            ((C47351 + C47350) * C139328 + (C47260 + C47261) * C181) * C139457 *
                C47029) *
               C5226 +
           (((C47264 + C47265) * C181 + (C47353 + C47352) * C139328) * C139457 *
                C47029 +
            ((C47269 + C47268) * C181 + (C47354 + C47355) * C139328) * C139457 *
                C139575) *
               C5227) *
              C9466 +
          ((((C49072 + C49073) * C181 + (C49186 + C49187) * C139328) * C139457 *
                C47029 +
            ((C50925 + C50924) * C181 + (C51030 + C51031) * C139328) * C139457 *
                C139575) *
               C5226 -
           (((C49187 + C49186) * C139328 + (C49073 + C49072) * C181) * C139457 *
                C139575 +
            ((C47234 * C4337 + C139586 * C4667 + C47233 * C1873 +
              C47031 * C2170) *
                 C139328 +
             (C47234 * C4223 + C139586 * C4549 + C47233 * C1767 +
              C47031 * C2054) *
                 C181) *
                C139457 * C47029) *
               C5225 -
           (((C47234 * C4340 + C139586 * C4670 + C47233 * C1872 +
              C47031 * C2169) *
                 C139328 +
             (C47234 * C4226 + C139586 * C4552 + C47233 * C1766 +
              C47031 * C2056) *
                 C181) *
                C139457 * C139575 +
            ((C51031 + C51030) * C139328 + (C50924 + C50925) * C181) * C139457 *
                C47029) *
               C5227) *
              C139403)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C831 + C139586 * C1118) *
                C181 +
            (C47233 * C182 + C47031 * C394 + C47234 * C939 + C139586 * C1231) *
                C139328) *
               C139457 * C47029 +
           ((C47261 + C47260) * C181 + (C47350 + C47351) * C139328) * C139457 *
               C139575) *
              C139300 * C10809 -
          (((C49187 + C49186) * C139328 + (C49073 + C49072) * C181) * C139457 *
               C139575 +
           ((C47234 * C4337 + C139586 * C4667 + C47233 * C1873 +
             C47031 * C2170) *
                C139328 +
            (C47234 * C4223 + C139586 * C4549 + C47233 * C1767 +
             C47031 * C2054) *
                C181) *
               C139457 * C47029) *
              C139300 * C10810 +
          (((C47233 * C1768 + C47031 * C2057 + C47234 * C6442 +
             C139586 * C6688) *
                C181 +
            (C47233 * C1874 + C47031 * C2171 + C47234 * C6528 +
             C139586 * C6766) *
                C139328) *
               C139457 * C47029 +
           ((C49077 + C49076) * C181 + (C49188 + C49189) * C139328) * C139457 *
               C139575) *
              C139300 * C10811 -
          (((C47234 * C26904 + C139586 * C27114 + C47233 * C10876 +
             C47031 * C11048) *
                C139328 +
            (C47234 * C26830 + C139586 * C27044 + C47233 * C10814 +
             C47031 * C10992) *
                C181) *
               C139457 * C139575 +
           ((C47234 * C26905 + C139586 * C27115 + C47233 * C10877 +
             C47031 * C11049) *
                C139328 +
            (C47234 * C26831 + C139586 * C27045 + C47233 * C10815 +
             C47031 * C10993) *
                C181) *
               C139457 * C47029) *
              C139300 * C10812)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[57] +=
        (-std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C831 + C139586 * C1118) *
                C9616 +
            (C47233 * C245 + C47031 * C474 + C47234 * C1029 + C139586 * C1339) *
                C9466 -
            (C47234 * C4223 + C139586 * C4549 + C47233 * C1767 +
             C47031 * C2054) *
                C9617 -
            (C47234 * C4443 + C139586 * C4783 + C47233 * C1965 +
             C47031 * C2269) *
                C139403) *
               C139457 * C47029 +
           ((C47261 + C47260) * C9616 + (C47434 + C47435) * C9466 -
            (C49073 + C49072) * C9617 - (C49296 + C49297) * C139403) *
               C139457 * C139575) *
              C823 +
          (((C47233 * C4223 + C47031 * C4549 + C47234 * C8754 +
             C139586 * C9000) *
                C9617 -
            ((C47234 * C1030 + C139586 * C1340 + C47233 * C1029 +
              C47031 * C1339) *
                 C9466 +
             (C47234 * C832 + C139586 * C1121 + C47233 * C831 +
              C47031 * C1118) *
                 C9616) +
            (C47233 * C4443 + C47031 * C4783 + C47234 * C8920 +
             C139586 * C9155) *
                C139403) *
               C139457 * C47029 +
           ((C52007 + C52006) * C9617 -
            ((C48366 + C48367) * C9466 + (C48143 + C48142) * C9616) +
            (C52280 + C52281) * C139403) *
               C139457 * C139575) *
              C824 +
          (((C47233 * C832 + C47031 * C1121 + C47234 * C5916 +
             C139586 * C6094) *
                C9616 +
            (C47233 * C1030 + C47031 * C1340 + C47234 * C6038 +
             C139586 * C6203) *
                C9466 -
            (C47234 * C24129 + C139586 * C24463 + C47233 * C8754 +
             C47031 * C9000) *
                C9617 -
            (C47234 * C24355 + C139586 * C24664 + C47233 * C8920 +
             C47031 * C9155) *
                C139403) *
               C139457 * C47029 +
           ((C48147 + C48146) * C9616 + (C48368 + C48369) * C9466 -
            (C47234 * C24128 + C139586 * C24462 + C47233 * C8753 +
             C47031 * C8999) *
                C9617 -
            (C47234 * C24354 + C139586 * C24665 + C47233 * C8919 +
             C47031 * C9156) *
                C139403) *
               C139457 * C139575) *
              C825) *
         C139300) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C831 + C139586 * C1118) *
                C9616 +
            (C47233 * C245 + C47031 * C474 + C47234 * C1029 + C139586 * C1339) *
                C9466 -
            (C47234 * C4223 + C139586 * C4549 + C47233 * C1767 +
             C47031 * C2054) *
                C9617 -
            (C47234 * C4443 + C139586 * C4783 + C47233 * C1965 +
             C47031 * C2269) *
                C139403) *
               C139457 * C47029 +
           ((C47261 + C47260) * C9616 + (C47434 + C47435) * C9466 -
            (C49073 + C49072) * C9617 - (C49296 + C49297) * C139403) *
               C139457 * C139575) *
              C139328 * C5225 +
          (((C49072 + C49073) * C9617 -
            ((C47435 + C47434) * C9466 + (C47260 + C47261) * C9616) +
            (C49297 + C49296) * C139403) *
               C139457 * C47029 +
           ((C50925 + C50924) * C9617 -
            ((C47436 + C47437) * C9466 + (C47265 + C47264) * C9616) +
            (C51134 + C51135) * C139403) *
               C139457 * C139575) *
              C139328 * C5226 +
          (((C47264 + C47265) * C9616 + (C47437 + C47436) * C9466 -
            (C50924 + C50925) * C9617 - (C51135 + C51134) * C139403) *
               C139457 * C47029 +
           ((C47269 + C47268) * C9616 + (C47438 + C47439) * C9466 -
            (C47234 * C4226 + C139586 * C4552 + C47233 * C1766 +
             C47031 * C2056) *
                C9617 -
            (C47234 * C4446 + C139586 * C4786 + C47233 * C1969 +
             C47031 * C2275) *
                C139403) *
               C139457 * C139575) *
              C139328 * C5227)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C47233 * C107 + C47031 * C308 + C47234 * C831 + C139586 * C1118) *
               C10931 +
           (C47233 * C245 + C47031 * C474 + C47234 * C1029 + C139586 * C1339) *
               C10809 -
           (C47234 * C4223 + C139586 * C4549 + C47233 * C1767 +
            C47031 * C2054) *
               C10932 -
           (C47234 * C4443 + C139586 * C4783 + C47233 * C1965 +
            C47031 * C2269) *
               C10810 +
           (C47233 * C1768 + C47031 * C2057 + C47234 * C6442 +
            C139586 * C6688) *
               C10933 +
           (C47233 * C1966 + C47031 * C2270 + C47234 * C6608 +
            C139586 * C6843) *
               C10811 -
           (C47234 * C26831 + C139586 * C27045 + C47233 * C10815 +
            C47031 * C10993) *
               C10934 -
           (C47234 * C26975 + C139586 * C27182 + C47233 * C10937 +
            C47031 * C11100) *
               C10812) *
              C139457 * C47029 +
          ((C47261 + C47260) * C10931 + (C47434 + C47435) * C10809 -
           (C49073 + C49072) * C10932 - (C49296 + C49297) * C10810 +
           (C49077 + C49076) * C10933 + (C49298 + C49299) * C10811 -
           (C47234 * C26830 + C139586 * C27044 + C47233 * C10814 +
            C47031 * C10992) *
               C10934 -
           (C47234 * C26974 + C139586 * C27183 + C47233 * C10936 +
            C47031 * C11101) *
               C10812) *
              C139457 * C139575) *
         C139328 * C139300) /
            (p * q * std::sqrt(p + q));
    d2eezx[57] +=
        (-std::pow(Pi, 2.5) *
         ((((((C554 * C107 + C139457 * C555) * C5913 +
              (C554 * C116 + C139457 * C561) * C139300) *
                 C47029 +
             (C584 * C5913 + C585 * C139300) * C139575) *
                C47031 +
            ((C20819 + C20820) * C47029 + (C20821 + C20822) * C139575) *
                C139586) *
               C9466 -
           (((C21719 + C21720) * C139575 + (C21721 + C21722) * C47029) *
                C139586 +
            ((C2409 * C139300 + C2408 * C5913) * C139575 +
             ((C554 * C1777 + C139457 * C2383) * C139300 +
              (C554 * C1767 + C139457 * C2376) * C5913) *
                 C47029) *
                C47031) *
               C139403) *
              C823 +
          ((((C21722 + C21721) * C47029 + (C21720 + C21719) * C139575) *
                C47031 +
            ((C24777 + C24778) * C47029 + (C24773 + C24774) * C139575) *
                C139586) *
               C139403 -
           (((C20823 + C20824) * C139575 + (C20825 + C20826) * C47029) *
                C139586 +
            ((C20822 + C20821) * C139575 + (C20820 + C20819) * C47029) *
                C47031) *
               C9466) *
              C824 +
          ((((C20826 + C20825) * C47029 + (C20824 + C20823) * C139575) *
                C47031 +
            ((C20835 + C20836) * C47029 + (C20831 + C20832) * C139575) *
                C139586) *
               C9466 -
           ((((C554 * C24130 + C139457 * C24766) * C139300 +
              (C554 * C24128 + C139457 * C24764) * C5913) *
                 C139575 +
             ((C554 * C24131 + C139457 * C24767) * C139300 +
              (C554 * C24129 + C139457 * C24765) * C5913) *
                 C47029) *
                C139586 +
            ((C24774 + C24773) * C139575 + (C24778 + C24777) * C47029) *
                C47031) *
               C139403) *
              C825)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139457 * C555) * C5230 +
             (C554 * C116 + C139457 * C561) * C5225 - C584 * C5231 -
             C585 * C5226 + C586 * C5232 + C587 * C5227) *
                C47029 +
            (C584 * C5230 + C585 * C5225 - C586 * C5231 - C587 * C5226 +
             C588 * C5232 + C589 * C5227) *
                C139575) *
               C47031 +
           ((C20089 + C20090 - C20091 - C20092 + C20093 + C20094) * C47029 +
            (C20095 + C20096 - C20097 - C20098 + C20099 + C20100) * C139575) *
               C139586) *
              C9466 +
          (((C2408 * C5231 -
             ((C554 * C1777 + C139457 * C2383) * C5225 +
              (C554 * C1767 + C139457 * C2376) * C5230) +
             C2409 * C5226 - C2410 * C5232 - C2411 * C5227) *
                C47029 +
            (C2410 * C5231 - (C2409 * C5225 + C2408 * C5230) + C2411 * C5226 -
             C3950 * C5232 - C3951 * C5227) *
                C139575) *
               C47031 +
           ((C4916 * C5231 - (C19107 * C5225 + C19108 * C5230) + C4917 * C5226 -
             C4918 * C5232 - C4919 * C5227) *
                C47029 +
            (C4918 * C5231 - (C4917 * C5225 + C4916 * C5230) + C4919 * C5226 -
             (C554 * C4226 + C139457 * C4902) * C5232 -
             (C554 * C4234 + C139457 * C4906) * C5227) *
                C139575) *
               C139586) *
              C139403) *
         C139328) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139457 * C555) * C5913 +
             (C554 * C116 + C139457 * C561) * C139300) *
                C47029 +
            (C584 * C5913 + C585 * C139300) * C139575) *
               C47031 +
           ((C20819 + C20820) * C47029 + (C20821 + C20822) * C139575) *
               C139586) *
              C10809 -
          (((C21719 + C21720) * C139575 + (C21721 + C21722) * C47029) *
               C139586 +
           ((C2409 * C139300 + C2408 * C5913) * C139575 +
            ((C554 * C1777 + C139457 * C2383) * C139300 +
             (C554 * C1767 + C139457 * C2376) * C5913) *
                C47029) *
               C47031) *
              C10810 +
          ((((C554 * C1768 + C139457 * C2379) * C5913 +
             (C554 * C1783 + C139457 * C2387) * C139300) *
                C47029 +
            (C2412 * C5913 + C2413 * C139300) * C139575) *
               C47031 +
           ((C21731 + C21732) * C47029 + (C21727 + C21728) * C139575) *
               C139586) *
              C10811 -
          ((((C554 * C26832 + C139457 * C27252) * C139300 +
             (C554 * C26830 + C139457 * C27250) * C5913) *
                C139575 +
            ((C554 * C26833 + C139457 * C27253) * C139300 +
             (C554 * C26831 + C139457 * C27251) * C5913) *
                C47029) *
               C139586 +
           (((C554 * C10817 + C139457 * C11157) * C139300 +
             (C554 * C10814 + C139457 * C11154) * C5913) *
                C139575 +
            ((C554 * C10818 + C139457 * C11158) * C139300 +
             (C554 * C10815 + C139457 * C11155) * C5913) *
                C47029) *
               C47031) *
              C10812) *
         C139328) /
            (p * q * std::sqrt(p + q));
    d2eezy[57] +=
        (-std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139457 * C555) * C934 +
             (C554 * C182 + C139457 * C641) * C823 - C15060 * C935 -
             C15179 * C824 + C15063 * C936 + C15180 * C825) *
                C47029 +
            (C1562 + C1563 - C1564 - C1582 + C1567 + C1583) * C139575) *
               C47031 +
           ((C15060 * C934 + C15179 * C823 - C15063 * C935 - C15180 * C824 +
             C20833 * C936 + C20907 * C825) *
                C47029 +
            (C15172 + C15173 - C15174 - C15175 + C15176 + C15182) * C139575) *
               C139586) *
              C139300 * C9466 +
          (((C19108 * C935 -
             ((C554 * C1873 + C139457 * C2492) * C823 +
              (C554 * C1767 + C139457 * C2376) * C934) +
             C19250 * C824 - C24775 * C936 - C24881 * C825) *
                C47029 +
            (C4916 * C935 - (C2510 * C823 + C2408 * C934) + C5032 * C824 -
             C19109 * C936 - C19251 * C825) *
                C139575) *
               C47031 +
           ((C24775 * C935 - (C19250 * C823 + C19108 * C934) + C24881 * C824 -
             (C554 * C24129 + C139457 * C24765) * C936 -
             (C554 * C24247 + C139457 * C24876) * C825) *
                C47029 +
            (C19109 * C935 - (C5032 * C823 + C4916 * C934) + C19251 * C824 -
             (C554 * C24128 + C139457 * C24764) * C936 -
             (C554 * C24246 + C139457 * C24877) * C825) *
                C139575) *
               C139586) *
              C139300 * C139403)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((((C554 * C107 + C139457 * C555) * C181 +
              (C554 * C182 + C139457 * C641) * C139328) *
                 C47029 +
             (C648 + C664) * C139575) *
                C47031 +
            ((C15060 * C181 + C15179 * C139328) * C47029 +
             (C14134 + C14135) * C139575) *
                C139586) *
               C5225 -
           (((C14136 + C14137) * C139575 + (C14135 + C14134) * C47029) *
                C139586 +
            ((C665 + C651) * C139575 + (C664 + C648) * C47029) * C47031) *
               C5226 +
           ((C668 * C47029 + (C656 + C666) * C139575) * C47031 +
            ((C14137 + C14136) * C47029 + (C14138 + C14139) * C139575) *
                C139586) *
               C5227) *
              C9466 +
          ((((C2498 + C2514) * C47029 + (C2501 + C2515) * C139575) * C47031 +
            ((C16138 + C16139) * C47029 + (C18011 + C18012) * C139575) *
                C139586) *
               C5226 -
           (((C16139 + C16138) * C139575 +
             (C19250 * C139328 + C19108 * C181) * C47029) *
                C139586 +
            ((C2514 + C2498) * C139575 +
             ((C554 * C1873 + C139457 * C2492) * C139328 +
              (C554 * C1767 + C139457 * C2376) * C181) *
                 C47029) *
                C47031) *
               C5225 -
           ((((C554 * C4340 + C139457 * C5020) * C139328 +
              (C554 * C4226 + C139457 * C4902) * C181) *
                 C139575 +
             (C18012 + C18011) * C47029) *
                C139586 +
            ((C4032 + C4027) * C139575 + C4030 * C47029) * C47031) *
               C5227) *
              C139403)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139457 * C555) * C181 +
             (C554 * C182 + C139457 * C641) * C139328) *
                C47029 +
            (C648 + C664) * C139575) *
               C47031 +
           ((C15060 * C181 + C15179 * C139328) * C47029 +
            (C14134 + C14135) * C139575) *
               C139586) *
              C139300 * C10809 -
          (((C16139 + C16138) * C139575 +
            (C19250 * C139328 + C19108 * C181) * C47029) *
               C139586 +
           ((C2514 + C2498) * C139575 +
            ((C554 * C1873 + C139457 * C2492) * C139328 +
             (C554 * C1767 + C139457 * C2376) * C181) *
                C47029) *
               C47031) *
              C139300 * C10810 +
          ((((C554 * C1768 + C139457 * C2379) * C181 +
             (C554 * C1874 + C139457 * C2493) * C139328) *
                C47029 +
            (C2504 + C2516) * C139575) *
               C47031 +
           ((C21729 * C181 + C21835 * C139328) * C47029 +
            (C16140 + C16144) * C139575) *
               C139586) *
              C139300 * C10811 -
          ((((C554 * C26904 + C139457 * C27320) * C139328 +
             (C554 * C26830 + C139457 * C27250) * C181) *
                C139575 +
            ((C554 * C26905 + C139457 * C27321) * C139328 +
             (C554 * C26831 + C139457 * C27251) * C181) *
                C47029) *
               C139586 +
           (((C554 * C10876 + C139457 * C11210) * C139328 +
             (C554 * C10814 + C139457 * C11154) * C181) *
                C139575 +
            ((C554 * C10877 + C139457 * C11211) * C139328 +
             (C554 * C10815 + C139457 * C11155) * C181) *
                C47029) *
               C47031) *
              C139300 * C10812)) /
            (p * q * std::sqrt(p + q));
    d2eezz[57] +=
        (-std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139457 * C555) * C9616 +
             (C554 * C245 + C139457 * C719) * C9466 -
             (C554 * C1767 + C139457 * C2376) * C9617 -
             (C554 * C1965 + C139457 * C2591) * C139403) *
                C47029 +
            (C10079 + C10080 - C10081 - C10082) * C139575) *
               C47031 +
           ((C26753 + C26754 - C26755 - C26756) * C47029 + C28565 * C139575) *
               C139586) *
              C823 +
          (((C26755 - (C26754 + C26753) + C26756) * C47029 + C28566 * C139575) *
               C47031 +
           ((C26757 - (C26758 + C26759) + C26760) * C47029 +
            (C26761 - (C26762 + C26763) + C26764) * C139575) *
               C139586) *
              C824 +
          (((C26759 + C26758 - C26757 - C26760) * C47029 +
            (C26763 + C26762 - C26761 - C26764) * C139575) *
               C47031 +
           ((C20833 * C9616 + C20979 * C9466 -
             (C554 * C24129 + C139457 * C24765) * C9617 -
             (C554 * C24355 + C139457 * C24979) * C139403) *
                C47029 +
            (C15064 * C9616 + C15296 * C9466 -
             (C554 * C24128 + C139457 * C24764) * C9617 -
             (C554 * C24354 + C139457 * C24980) * C139403) *
                C139575) *
               C139586) *
              C825) *
         C139300) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139457 * C555) * C9616 +
             (C554 * C245 + C139457 * C719) * C9466 -
             (C554 * C1767 + C139457 * C2376) * C9617 -
             (C554 * C1965 + C139457 * C2591) * C139403) *
                C47029 +
            (C10079 + C10080 - C10081 - C10082) * C139575) *
               C47031 +
           ((C26753 + C26754 - C26755 - C26756) * C47029 + C28565 * C139575) *
               C139586) *
              C139328 * C5225 +
          (((C10081 - (C10080 + C10079) + C10082) * C47029 +
            (C10085 - (C10084 + C10083) + C10086) * C139575) *
               C47031 +
           (C28566 * C47029 + (C12160 - (C12161 + C12162) + C12163) * C139575) *
               C139586) *
              C139328 * C5226 +
          ((C10093 * C47029 + (C10089 + C10088 - C10087 - C10090) * C139575) *
               C47031 +
           ((C12162 + C12161 - C12160 - C12163) * C47029 +
            (C3202 * C9616 + C3376 * C9466 -
             (C554 * C4226 + C139457 * C4902) * C9617 -
             (C554 * C4446 + C139457 * C5136) * C139403) *
                C139575) *
               C139586) *
              C139328 * C5227)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C139457 * C555) * C10931 +
            (C554 * C245 + C139457 * C719) * C10809 -
            (C554 * C1767 + C139457 * C2376) * C10932 -
            (C554 * C1965 + C139457 * C2591) * C10810 +
            (C554 * C1768 + C139457 * C2379) * C10933 +
            (C554 * C1966 + C139457 * C2592) * C10811 -
            (C554 * C10815 + C139457 * C11155) * C10934 -
            (C554 * C10937 + C139457 * C11262) * C10812) *
               C47029 +
           (C584 * C10931 + C738 * C10809 - C2408 * C10932 - C2616 * C10810 +
            C2412 * C10933 + C2617 * C10811 -
            (C554 * C10814 + C139457 * C11154) * C10934 -
            (C554 * C10936 + C139457 * C11263) * C10812) *
               C139575) *
              C47031 +
          ((C15060 * C10931 + C15294 * C10809 - C19108 * C10932 -
            C19395 * C10810 + C21729 * C10933 + C21943 * C10811 -
            (C554 * C26831 + C139457 * C27251) * C10934 -
            (C554 * C26975 + C139457 * C27388) * C10812) *
               C47029 +
           (C1472 * C10931 + C1681 * C10809 - C4916 * C10932 - C5148 * C10810 +
            C16038 * C10933 + C16250 * C10811 -
            (C554 * C26830 + C139457 * C27250) * C10934 -
            (C554 * C26974 + C139457 * C27389) * C10812) *
               C139575) *
              C139586) *
         C139328 * C139300) /
            (p * q * std::sqrt(p + q));
    d2eexx[58] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139575 * C114) *
                C137108 +
            (C47033 * C116 + C47029 * C125 + C47034 * C117 + C139575 * C126) *
                C139552 -
            (C47034 * C109 + C139575 * C115 + C47033 * C108 + C47029 * C114) *
                C137101 -
            (C47034 * C118 + C139575 * C127 + C47033 * C117 + C47029 * C126) *
                C139305) *
               C47031 +
           ((C47768 + C47769) * C137108 + (C47770 + C47771) * C139552 -
            (C47772 + C47773) * C137101 - (C47774 + C47775) * C139305) *
               C139586) *
              C139457 * C139593 +
          (((C47033 * C1764 + C47029 * C1772 + C47034 * C1765 +
             C139575 * C1773) *
                C137101 -
            ((C47034 * C1776 + C139575 * C1789 + C47033 * C1777 +
              C47029 * C1790) *
                 C139552 +
             (C47034 * C1764 + C139575 * C1772 + C47033 * C1767 +
              C47029 * C1778) *
                 C137108) +
            (C47033 * C1776 + C47029 * C1789 + C47034 * C1775 +
             C139575 * C1788) *
                C139305) *
               C47031 +
           ((C51576 + C51577) * C137101 -
            ((C51578 + C51579) * C139552 + (C51580 + C51581) * C137108) +
            (C51582 + C51583) * C139305) *
               C139586) *
              C139457 * C139594 +
          (((C47033 * C1768 + C47029 * C1780 + C47034 * C1769 +
             C139575 * C1781) *
                C137108 +
            (C47033 * C1783 + C47029 * C1792 + C47034 * C1784 +
             C139575 * C1793) *
                C139552 -
            (C47034 * C1770 + C139575 * C1782 + C47033 * C1769 +
             C47029 * C1781) *
                C137101 -
            (C47034 * C1785 + C139575 * C1794 + C47033 * C1784 +
             C47029 * C1793) *
                C139305) *
               C47031 +
           ((C54278 + C54279) * C137108 + (C54280 + C54281) * C139552 -
            (C47034 * C6440 + C139575 * C6446 + C47033 * C6441 +
             C47029 * C6447) *
                C137101 -
            (C47034 * C6443 + C139575 * C6449 + C47033 * C6444 +
             C47029 * C6450) *
                C139305) *
               C139586) *
              C139457 * C12239) *
         C139328) /
        (p * q * std::sqrt(p + q));
    d2eexy[58] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139575 * C114) *
                 C181 +
             (C47033 * C182 + C47029 * C188 + C47034 * C183 + C139575 * C189) *
                 C139328) *
                C47031 +
            ((C47768 + C47769) * C181 + (C47899 + C47898) * C139328) *
                C139586) *
               C139457 * C139552 -
           (((C47903 + C47902) * C139328 + (C47772 + C47773) * C181) * C139586 +
            ((C47034 * C184 + C139575 * C190 + C47033 * C183 + C47029 * C189) *
                 C139328 +
             (C47034 * C109 + C139575 * C115 + C47033 * C108 + C47029 * C114) *
                 C181) *
                C47031) *
               C139457 * C139305) *
              C139593 +
          ((((C47033 * C1764 + C47029 * C1772 + C47034 * C1765 +
              C139575 * C1773) *
                 C181 +
             (C47033 * C1870 + C47029 * C1878 + C47034 * C1871 +
              C139575 * C1879) *
                 C139328) *
                C47031 +
            ((C51576 + C51577) * C181 + (C51725 + C51724) * C139328) *
                C139586) *
               C139457 * C139305 -
           (((C51723 + C51722) * C139328 + (C51580 + C51581) * C181) * C139586 +
            ((C47034 * C1870 + C139575 * C1878 + C47033 * C1873 +
              C47029 * C1881) *
                 C139328 +
             (C47034 * C1764 + C139575 * C1772 + C47033 * C1767 +
              C47029 * C1778) *
                 C181) *
                C47031) *
               C139457 * C139552) *
              C139594 +
          ((((C47033 * C1768 + C47029 * C1780 + C47034 * C1769 +
              C139575 * C1781) *
                 C181 +
             (C47033 * C1874 + C47029 * C1882 + C47034 * C1875 +
              C139575 * C1883) *
                 C139328) *
                C47031 +
            ((C54278 + C54279) * C181 + (C54385 + C54384) * C139328) *
                C139586) *
               C139457 * C139552 -
           (((C47034 * C6526 + C139575 * C6529 + C47033 * C6527 +
              C47029 * C6530) *
                 C139328 +
             (C47034 * C6440 + C139575 * C6446 + C47033 * C6441 +
              C47029 * C6447) *
                 C181) *
                C139586 +
            ((C47034 * C1876 + C139575 * C1884 + C47033 * C1875 +
              C47029 * C1883) *
                 C139328 +
             (C47034 * C1770 + C139575 * C1782 + C47033 * C1769 +
              C47029 * C1781) *
                 C181) *
                C47031) *
               C139457 * C139305) *
              C12239)) /
        (p * q * std::sqrt(p + q));
    d2eexz[58] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139575 * C114) *
                C12388 +
            (C47033 * C245 + C47029 * C251 + C47034 * C246 + C139575 * C252) *
                C139593 -
            (C47034 * C1764 + C139575 * C1772 + C47033 * C1767 +
             C47029 * C1778) *
                C12389 -
            (C47034 * C1964 + C139575 * C1972 + C47033 * C1965 +
             C47029 * C1973) *
                C139594 +
            (C47033 * C1768 + C47029 * C1780 + C47034 * C1769 +
             C139575 * C1781) *
                C12390 +
            (C47033 * C1966 + C47029 * C1974 + C47034 * C1967 +
             C139575 * C1975) *
                C12239) *
               C47031 +
           ((C47768 + C47769) * C12388 + (C48020 + C48021) * C139593 -
            (C51580 + C51581) * C12389 - (C51864 + C51865) * C139594 +
            (C54278 + C54279) * C12390 + (C54488 + C54489) * C12239) *
               C139586) *
              C139457 * C139328 * C139552 +
          (((C47033 * C1764 + C47029 * C1772 + C47034 * C1765 +
             C139575 * C1773) *
                C12389 -
            ((C47034 * C247 + C139575 * C253 + C47033 * C246 + C47029 * C252) *
                 C139593 +
             (C47034 * C109 + C139575 * C115 + C47033 * C108 + C47029 * C114) *
                 C12388) +
            (C47033 * C1964 + C47029 * C1972 + C47034 * C1963 +
             C139575 * C1971) *
                C139594 -
            (C47034 * C1770 + C139575 * C1782 + C47033 * C1769 +
             C47029 * C1781) *
                C12390 -
            (C47034 * C1968 + C139575 * C1976 + C47033 * C1967 +
             C47029 * C1975) *
                C12239) *
               C47031 +
           ((C51576 + C51577) * C12389 -
            ((C48025 + C48024) * C139593 + (C47772 + C47773) * C12388) +
            (C51866 + C51867) * C139594 -
            (C47034 * C6440 + C139575 * C6446 + C47033 * C6441 +
             C47029 * C6447) *
                C12390 -
            (C47034 * C6606 + C139575 * C6609 + C47033 * C6607 +
             C47029 * C6610) *
                C12239) *
               C139586) *
              C139457 * C139328 * C139305)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[58] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C831 + C139586 * C1118) *
                C137108 +
            (C47233 * C116 + C47031 * C314 + C47234 * C841 + C139586 * C1125) *
                C139552 -
            (C47260 + C47261) * C137101 - (C47262 + C47263) * C139305) *
               C139457 * C47029 +
           ((C47261 + C47260) * C137108 + (C47263 + C47262) * C139552 -
            (C47265 + C47264) * C137101 - (C47267 + C47266) * C139305) *
               C139457 * C139575) *
              C139593 +
          (((C49072 + C49073) * C137101 -
            ((C47234 * C4230 + C139586 * C4553 + C47233 * C1777 +
              C47031 * C2061) *
                 C139552 +
             (C47234 * C4223 + C139586 * C4549 + C47233 * C1767 +
              C47031 * C2054) *
                 C137108) +
            (C49074 + C49075) * C139305) *
               C139457 * C47029 +
           ((C50925 + C50924) * C137101 -
            ((C49075 + C49074) * C139552 + (C49073 + C49072) * C137108) +
            (C50927 + C50926) * C139305) *
               C139457 * C139575) *
              C139594 +
          (((C47233 * C1768 + C47031 * C2057 + C47234 * C6442 +
             C139586 * C6688) *
                C137108 +
            (C47233 * C1783 + C47031 * C2065 + C47234 * C6445 +
             C139586 * C6691) *
                C139552 -
            (C49076 + C49077) * C137101 - (C49078 + C49079) * C139305) *
               C139457 * C47029 +
           ((C49077 + C49076) * C137108 + (C49079 + C49078) * C139552 -
            (C47234 * C6440 + C139586 * C6686 + C47233 * C1770 +
             C47031 * C2059) *
                C137101 -
            (C47234 * C6443 + C139586 * C6689 + C47233 * C1785 +
             C47031 * C2067) *
                C139305) *
               C139457 * C139575) *
              C12239) *
         C139328) /
        (p * q * std::sqrt(p + q));
    d2eeyy[58] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47233 * C107 + C47031 * C308 + C47234 * C831 + C139586 * C1118) *
                 C181 +
             (C47233 * C182 + C47031 * C394 + C47234 * C939 + C139586 * C1231) *
                 C139328) *
                C139457 * C47029 +
            ((C47261 + C47260) * C181 + (C47350 + C47351) * C139328) * C139457 *
                C139575) *
               C139552 -
           (((C47352 + C47353) * C139328 + (C47265 + C47264) * C181) * C139457 *
                C139575 +
            ((C47351 + C47350) * C139328 + (C47260 + C47261) * C181) * C139457 *
                C47029) *
               C139305) *
              C139593 +
          ((((C49072 + C49073) * C181 + (C49186 + C49187) * C139328) * C139457 *
                C47029 +
            ((C50925 + C50924) * C181 + (C51030 + C51031) * C139328) * C139457 *
                C139575) *
               C139305 -
           (((C49187 + C49186) * C139328 + (C49073 + C49072) * C181) * C139457 *
                C139575 +
            ((C47234 * C4337 + C139586 * C4667 + C47233 * C1873 +
              C47031 * C2170) *
                 C139328 +
             (C47234 * C4223 + C139586 * C4549 + C47233 * C1767 +
              C47031 * C2054) *
                 C181) *
                C139457 * C47029) *
               C139552) *
              C139594 +
          ((((C47233 * C1768 + C47031 * C2057 + C47234 * C6442 +
              C139586 * C6688) *
                 C181 +
             (C47233 * C1874 + C47031 * C2171 + C47234 * C6528 +
              C139586 * C6766) *
                 C139328) *
                C139457 * C47029 +
            ((C49077 + C49076) * C181 + (C49188 + C49189) * C139328) * C139457 *
                C139575) *
               C139552 -
           (((C47234 * C6526 + C139586 * C6768 + C47233 * C1876 +
              C47031 * C2173) *
                 C139328 +
             (C47234 * C6440 + C139586 * C6686 + C47233 * C1770 +
              C47031 * C2059) *
                 C181) *
                C139457 * C139575 +
            ((C49189 + C49188) * C139328 + (C49076 + C49077) * C181) * C139457 *
                C47029) *
               C139305) *
              C12239)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[58] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C831 + C139586 * C1118) *
                C12388 +
            (C47233 * C245 + C47031 * C474 + C47234 * C1029 + C139586 * C1339) *
                C139593 -
            (C47234 * C4223 + C139586 * C4549 + C47233 * C1767 +
             C47031 * C2054) *
                C12389 -
            (C47234 * C4443 + C139586 * C4783 + C47233 * C1965 +
             C47031 * C2269) *
                C139594 +
            (C47233 * C1768 + C47031 * C2057 + C47234 * C6442 +
             C139586 * C6688) *
                C12390 +
            (C47233 * C1966 + C47031 * C2270 + C47234 * C6608 +
             C139586 * C6843) *
                C12239) *
               C139457 * C47029 +
           ((C47261 + C47260) * C12388 + (C47434 + C47435) * C139593 -
            (C49073 + C49072) * C12389 - (C49296 + C49297) * C139594 +
            (C49077 + C49076) * C12390 + (C49298 + C49299) * C12239) *
               C139457 * C139575) *
              C139328 * C139552 +
          (((C49072 + C49073) * C12389 -
            ((C47435 + C47434) * C139593 + (C47260 + C47261) * C12388) +
            (C49297 + C49296) * C139594 - (C49076 + C49077) * C12390 -
            (C49299 + C49298) * C12239) *
               C139457 * C47029 +
           ((C50925 + C50924) * C12389 -
            ((C47436 + C47437) * C139593 + (C47265 + C47264) * C12388) +
            (C51134 + C51135) * C139594 -
            (C47234 * C6440 + C139586 * C6686 + C47233 * C1770 +
             C47031 * C2059) *
                C12390 -
            (C47234 * C6606 + C139586 * C6845 + C47233 * C1968 +
             C47031 * C2274) *
                C12239) *
               C139457 * C139575) *
              C139328 * C139305)) /
        (p * q * std::sqrt(p + q));
    d2eezx[58] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C554 * C107 + C139457 * C555) * C137108 +
                       (C554 * C116 + C139457 * C561) * C139552 -
                       C584 * C137101 - C585 * C139305) *
                          C47029 +
                      (C584 * C137108 + C585 * C139552 - C586 * C137101 -
                       C587 * C139305) *
                          C139575) *
                         C47031 +
                     ((C22631 + C22632 - C22633 - C22634) * C47029 +
                      (C22635 + C22636 - C22637 - C22638) * C139575) *
                         C139586) *
                        C139593 +
                    (((C2408 * C137101 -
                       ((C554 * C1777 + C139457 * C2383) * C139552 +
                        (C554 * C1767 + C139457 * C2376) * C137108) +
                       C2409 * C139305) *
                          C47029 +
                      (C2410 * C137101 - (C2409 * C139552 + C2408 * C137108) +
                       C2411 * C139305) *
                          C139575) *
                         C47031 +
                     ((C23759 - (C23760 + C23761) + C23762) * C47029 +
                      (C23763 - (C23764 + C23765) + C23766) * C139575) *
                         C139586) *
                        C139594 +
                    ((((C554 * C1768 + C139457 * C2379) * C137108 +
                       (C554 * C1783 + C139457 * C2387) * C139552 -
                       C2412 * C137101 - C2413 * C139305) *
                          C47029 +
                      (C2412 * C137108 + C2413 * C139552 - C2414 * C137101 -
                       C2415 * C139305) *
                          C139575) *
                         C47031 +
                     ((C21729 * C137108 + C21730 * C139552 - C16038 * C137101 -
                       C16039 * C139305) *
                          C47029 +
                      (C16038 * C137108 + C16039 * C139552 -
                       (C554 * C6440 + C139457 * C6920) * C137101 -
                       (C554 * C6443 + C139457 * C6923) * C139305) *
                          C139575) *
                         C139586) *
                        C12239) *
                   C139328) /
                  (p * q * std::sqrt(p + q));
    d2eezy[58] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C554 * C107 + C139457 * C555) * C181 +
              (C554 * C182 + C139457 * C641) * C139328) *
                 C47029 +
             (C648 + C664) * C139575) *
                C47031 +
            ((C15060 * C181 + C15179 * C139328) * C47029 +
             (C14134 + C14135) * C139575) *
                C139586) *
               C139552 -
           (((C14136 + C14137) * C139575 + (C14135 + C14134) * C47029) *
                C139586 +
            ((C665 + C651) * C139575 + (C664 + C648) * C47029) * C47031) *
               C139305) *
              C139593 +
          ((((C2498 + C2514) * C47029 + (C2501 + C2515) * C139575) * C47031 +
            ((C16138 + C16139) * C47029 + (C18011 + C18012) * C139575) *
                C139586) *
               C139305 -
           (((C16139 + C16138) * C139575 +
             (C19250 * C139328 + C19108 * C181) * C47029) *
                C139586 +
            ((C2514 + C2498) * C139575 +
             ((C554 * C1873 + C139457 * C2492) * C139328 +
              (C554 * C1767 + C139457 * C2376) * C181) *
                 C47029) *
                C47031) *
               C139552) *
              C139594 +
          (((((C554 * C1768 + C139457 * C2379) * C181 +
              (C554 * C1874 + C139457 * C2493) * C139328) *
                 C47029 +
             (C2504 + C2516) * C139575) *
                C47031 +
            ((C21729 * C181 + C21835 * C139328) * C47029 +
             (C16140 + C16144) * C139575) *
                C139586) *
               C139552 -
           ((((C554 * C6526 + C139457 * C7002) * C139328 +
              (C554 * C6440 + C139457 * C6920) * C181) *
                 C139575 +
             (C16144 + C16140) * C47029) *
                C139586 +
            ((C2517 + C2507) * C139575 + (C2516 + C2504) * C47029) * C47031) *
               C139305) *
              C12239)) /
        (p * q * std::sqrt(p + q));
    d2eezz[58] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139457 * C555) * C12388 +
             (C554 * C245 + C139457 * C719) * C139593 -
             (C554 * C1767 + C139457 * C2376) * C12389 -
             (C554 * C1965 + C139457 * C2591) * C139594 +
             (C554 * C1768 + C139457 * C2379) * C12390 +
             (C554 * C1966 + C139457 * C2592) * C12239) *
                C47029 +
            (C12848 + C12849 - C12850 - C12851 + C12852 + C12853) * C139575) *
               C47031 +
           ((C30337 + C30338 - C30339 - C30340 + C30341 + C30342) * C47029 +
            (C29449 + C29450 - C29451 - C29452 + C29453 + C29454) * C139575) *
               C139586) *
              C139328 * C139552 +
          (((C12850 - (C12849 + C12848) + C12851 - C12852 - C12853) * C47029 +
            (C12856 - (C12855 + C12854) + C12857 - C12858 - C12859) * C139575) *
               C47031 +
           ((C29451 - (C29450 + C29449) + C29452 - C29453 - C29454) * C47029 +
            (C4918 * C12389 - (C1680 * C139593 + C1474 * C12388) +
             C5149 * C139594 - (C554 * C6440 + C139457 * C6920) * C12390 -
             (C554 * C6606 + C139457 * C7079) * C12239) *
                C139575) *
               C139586) *
              C139328 * C139305)) /
        (p * q * std::sqrt(p + q));
    d2eexx[59] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139575 * C114) *
                C5230 +
            (C47033 * C116 + C47029 * C125 + C47034 * C117 + C139575 * C126) *
                C5225 -
            (C47034 * C109 + C139575 * C115 + C47033 * C108 + C47029 * C114) *
                C5231 -
            (C47034 * C118 + C139575 * C127 + C47033 * C117 + C47029 * C126) *
                C5226 +
            (C47033 * C109 + C47029 * C115 + C47034 * C110 + C139575 * C119) *
                C5232 +
            (C47033 * C118 + C47029 * C127 + C47034 * C120 + C139575 * C128) *
                C5227) *
               C47031 +
           ((C47768 + C47769) * C5230 + (C47770 + C47771) * C5225 -
            (C47772 + C47773) * C5231 - (C47774 + C47775) * C5226 +
            (C49700 + C49701) * C5232 + (C49702 + C49703) * C5227) *
               C139586) *
              C139457 * C9466 +
          (((C47033 * C1764 + C47029 * C1772 + C47034 * C1765 +
             C139575 * C1773) *
                C5231 -
            ((C47034 * C1776 + C139575 * C1789 + C47033 * C1777 +
              C47029 * C1790) *
                 C5225 +
             (C47034 * C1764 + C139575 * C1772 + C47033 * C1767 +
              C47029 * C1778) *
                 C5230) +
            (C47033 * C1776 + C47029 * C1789 + C47034 * C1775 +
             C139575 * C1788) *
                C5226 -
            (C47034 * C1766 + C139575 * C1774 + C47033 * C1765 +
             C47029 * C1773) *
                C5232 -
            (C47034 * C1779 + C139575 * C1791 + C47033 * C1775 +
             C47029 * C1788) *
                C5227) *
               C47031 +
           ((C51576 + C51577) * C5231 -
            ((C51578 + C51579) * C5225 + (C51580 + C51581) * C5230) +
            (C51582 + C51583) * C5226 -
            (C47034 * C4226 + C139575 * C4233 + C47033 * C4225 +
             C47029 * C4229) *
                C5232 -
            (C47034 * C4234 + C139575 * C4238 + C47033 * C4232 +
             C47029 * C4237) *
                C5227) *
               C139586) *
              C139457 * C139403) *
         C139328) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139575 * C114) *
                 C5913 +
             (C47033 * C116 + C47029 * C125 + C47034 * C117 + C139575 * C126) *
                 C139300) *
                C47031 +
            ((C47768 + C47769) * C5913 + (C47770 + C47771) * C139300) *
                C139586) *
               C139457 * C9466 -
           (((C51578 + C51579) * C139300 + (C51580 + C51581) * C5913) *
                C139586 +
            ((C47034 * C1776 + C139575 * C1789 + C47033 * C1777 +
              C47029 * C1790) *
                 C139300 +
             (C47034 * C1764 + C139575 * C1772 + C47033 * C1767 +
              C47029 * C1778) *
                 C5913) *
                C47031) *
               C139457 * C139403) *
              C823 +
          ((((C51581 + C51580) * C5913 + (C51579 + C51578) * C139300) * C47031 +
            ((C57236 + C57237) * C5913 + (C57238 + C57239) * C139300) *
                C139586) *
               C139457 * C139403 -
           (((C47778 + C47779) * C139300 + (C47780 + C47781) * C5913) *
                C139586 +
            ((C47771 + C47770) * C139300 + (C47769 + C47768) * C5913) *
                C47031) *
               C139457 * C9466) *
              C824 +
          ((((C47781 + C47780) * C5913 + (C47779 + C47778) * C139300) * C47031 +
            ((C53628 + C53629) * C5913 + (C53630 + C53631) * C139300) *
                C139586) *
               C139457 * C9466 -
           (((C47034 * C24130 + C139575 * C24134 + C47033 * C24131 +
              C47029 * C24135) *
                 C139300 +
             (C47034 * C24128 + C139575 * C24132 + C47033 * C24129 +
              C47029 * C24133) *
                 C5913) *
                C139586 +
            ((C57239 + C57238) * C139300 + (C57237 + C57236) * C5913) *
                C47031) *
               C139457 * C139403) *
              C825)) /
            (p * q * std::sqrt(p + q));
    d2eexy[59] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139575 * C114) *
                 C181 +
             (C47033 * C182 + C47029 * C188 + C47034 * C183 + C139575 * C189) *
                 C139328) *
                C47031 +
            ((C47768 + C47769) * C181 + (C47899 + C47898) * C139328) *
                C139586) *
               C139457 * C5225 -
           (((C47903 + C47902) * C139328 + (C47772 + C47773) * C181) * C139586 +
            ((C47034 * C184 + C139575 * C190 + C47033 * C183 + C47029 * C189) *
                 C139328 +
             (C47034 * C109 + C139575 * C115 + C47033 * C108 + C47029 * C114) *
                 C181) *
                C47031) *
               C139457 * C5226 +
           (((C47033 * C109 + C47029 * C115 + C47034 * C110 + C139575 * C119) *
                 C181 +
             (C47033 * C184 + C47029 * C190 + C47034 * C185 + C139575 * C191) *
                 C139328) *
                C47031 +
            ((C49700 + C49701) * C181 + (C49807 + C49806) * C139328) *
                C139586) *
               C139457 * C5227) *
              C9466 +
          ((((C47033 * C1764 + C47029 * C1772 + C47034 * C1765 +
              C139575 * C1773) *
                 C181 +
             (C47033 * C1870 + C47029 * C1878 + C47034 * C1871 +
              C139575 * C1879) *
                 C139328) *
                C47031 +
            ((C51576 + C51577) * C181 + (C51725 + C51724) * C139328) *
                C139586) *
               C139457 * C5226 -
           (((C51723 + C51722) * C139328 + (C51580 + C51581) * C181) * C139586 +
            ((C47034 * C1870 + C139575 * C1878 + C47033 * C1873 +
              C47029 * C1881) *
                 C139328 +
             (C47034 * C1764 + C139575 * C1772 + C47033 * C1767 +
              C47029 * C1778) *
                 C181) *
                C47031) *
               C139457 * C5225 -
           (((C47034 * C4340 + C139575 * C4344 + C47033 * C4339 +
              C47029 * C4343) *
                 C139328 +
             (C47034 * C4226 + C139575 * C4233 + C47033 * C4225 +
              C47029 * C4229) *
                 C181) *
                C139586 +
            ((C47034 * C1872 + C139575 * C1880 + C47033 * C1871 +
              C47029 * C1879) *
                 C139328 +
             (C47034 * C1766 + C139575 * C1774 + C47033 * C1765 +
              C47029 * C1773) *
                 C181) *
                C47031) *
               C139457 * C5227) *
              C139403)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139575 * C114) *
                C934 +
            (C47033 * C182 + C47029 * C188 + C47034 * C183 + C139575 * C189) *
                C823 -
            (C47769 + C47768) * C935 - (C47898 + C47899) * C824 +
            (C47781 + C47780) * C936 + (C47900 + C47901) * C825) *
               C47031 +
           ((C47768 + C47769) * C934 + (C47899 + C47898) * C823 -
            (C47780 + C47781) * C935 - (C47901 + C47900) * C824 +
            (C53628 + C53629) * C936 + (C53703 + C53702) * C825) *
               C139586) *
              C139457 * C139300 * C9466 +
          (((C51581 + C51580) * C935 -
            ((C47034 * C1870 + C139575 * C1878 + C47033 * C1873 +
              C47029 * C1881) *
                 C823 +
             (C47034 * C1764 + C139575 * C1772 + C47033 * C1767 +
              C47029 * C1778) *
                 C934) +
            (C51722 + C51723) * C824 - (C57237 + C57236) * C936 -
            (C57342 + C57343) * C825) *
               C47031 +
           ((C57236 + C57237) * C935 -
            ((C51723 + C51722) * C823 + (C51580 + C51581) * C934) +
            (C57343 + C57342) * C824 -
            (C47034 * C24128 + C139575 * C24132 + C47033 * C24129 +
             C47029 * C24133) *
                C936 -
            (C47034 * C24246 + C139575 * C24248 + C47033 * C24247 +
             C47029 * C24249) *
                C825) *
               C139586) *
              C139457 * C139300 * C139403)) /
            (p * q * std::sqrt(p + q));
    d2eexz[59] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139575 * C114) *
                C9616 +
            (C47033 * C245 + C47029 * C251 + C47034 * C246 + C139575 * C252) *
                C9466 -
            (C47034 * C1764 + C139575 * C1772 + C47033 * C1767 +
             C47029 * C1778) *
                C9617 -
            (C47034 * C1964 + C139575 * C1972 + C47033 * C1965 +
             C47029 * C1973) *
                C139403) *
               C47031 +
           ((C47768 + C47769) * C9616 + (C48020 + C48021) * C9466 -
            (C51580 + C51581) * C9617 - (C51864 + C51865) * C139403) *
               C139586) *
              C139457 * C139328 * C5225 +
          (((C47033 * C1764 + C47029 * C1772 + C47034 * C1765 +
             C139575 * C1773) *
                C9617 -
            ((C47034 * C247 + C139575 * C253 + C47033 * C246 + C47029 * C252) *
                 C9466 +
             (C47034 * C109 + C139575 * C115 + C47033 * C108 + C47029 * C114) *
                 C9616) +
            (C47033 * C1964 + C47029 * C1972 + C47034 * C1963 +
             C139575 * C1971) *
                C139403) *
               C47031 +
           ((C51576 + C51577) * C9617 -
            ((C48025 + C48024) * C9466 + (C47772 + C47773) * C9616) +
            (C51866 + C51867) * C139403) *
               C139586) *
              C139457 * C139328 * C5226 +
          (((C47033 * C109 + C47029 * C115 + C47034 * C110 + C139575 * C119) *
                C9616 +
            (C47033 * C247 + C47029 * C253 + C47034 * C248 + C139575 * C254) *
                C9466 -
            (C47034 * C1766 + C139575 * C1774 + C47033 * C1765 +
             C47029 * C1773) *
                C9617 -
            (C47034 * C1969 + C139575 * C1977 + C47033 * C1963 +
             C47029 * C1971) *
                C139403) *
               C47031 +
           ((C49700 + C49701) * C9616 + (C49910 + C49911) * C9466 -
            (C47034 * C4226 + C139575 * C4233 + C47033 * C4225 +
             C47029 * C4229) *
                C9617 -
            (C47034 * C4446 + C139575 * C4450 + C47033 * C4445 +
             C47029 * C4449) *
                C139403) *
               C139586) *
              C139457 * C139328 * C5227)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139575 * C114) *
                C9616 +
            (C47033 * C245 + C47029 * C251 + C47034 * C246 + C139575 * C252) *
                C9466 -
            (C47034 * C1764 + C139575 * C1772 + C47033 * C1767 +
             C47029 * C1778) *
                C9617 -
            (C47034 * C1964 + C139575 * C1972 + C47033 * C1965 +
             C47029 * C1973) *
                C139403) *
               C47031 +
           ((C47768 + C47769) * C9616 + (C48020 + C48021) * C9466 -
            (C51580 + C51581) * C9617 - (C51864 + C51865) * C139403) *
               C139586) *
              C139457 * C823 +
          (((C51581 + C51580) * C9617 -
            ((C48021 + C48020) * C9466 + (C47769 + C47768) * C9616) +
            (C51865 + C51864) * C139403) *
               C47031 +
           ((C57236 + C57237) * C9617 -
            ((C48022 + C48023) * C9466 + (C47780 + C47781) * C9616) +
            (C57446 + C57447) * C139403) *
               C139586) *
              C139457 * C824 +
          (((C47781 + C47780) * C9616 + (C48023 + C48022) * C9466 -
            (C57237 + C57236) * C9617 - (C57447 + C57446) * C139403) *
               C47031 +
           ((C53628 + C53629) * C9616 + (C53774 + C53775) * C9466 -
            (C47034 * C24128 + C139575 * C24132 + C47033 * C24129 +
             C47029 * C24133) *
                C9617 -
            (C47034 * C24354 + C139575 * C24356 + C47033 * C24355 +
             C47029 * C24357) *
                C139403) *
               C139586) *
              C139457 * C825) *
         C139300) /
            (p * q * std::sqrt(p + q));
    d2eeyx[59] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C831 + C139586 * C1118) *
                C5230 +
            (C47233 * C116 + C47031 * C314 + C47234 * C841 + C139586 * C1125) *
                C5225 -
            (C47260 + C47261) * C5231 - (C47262 + C47263) * C5226 +
            (C47264 + C47265) * C5232 + (C47266 + C47267) * C5227) *
               C139457 * C47029 +
           ((C47261 + C47260) * C5230 + (C47263 + C47262) * C5225 -
            (C47265 + C47264) * C5231 - (C47267 + C47266) * C5226 +
            (C47269 + C47268) * C5232 + (C47271 + C47270) * C5227) *
               C139457 * C139575) *
              C9466 +
          (((C49072 + C49073) * C5231 -
            ((C47234 * C4230 + C139586 * C4553 + C47233 * C1777 +
              C47031 * C2061) *
                 C5225 +
             (C47234 * C4223 + C139586 * C4549 + C47233 * C1767 +
              C47031 * C2054) *
                 C5230) +
            (C49074 + C49075) * C5226 - (C50924 + C50925) * C5232 -
            (C50926 + C50927) * C5227) *
               C139457 * C47029 +
           ((C50925 + C50924) * C5231 -
            ((C49075 + C49074) * C5225 + (C49073 + C49072) * C5230) +
            (C50927 + C50926) * C5226 -
            (C47234 * C4226 + C139586 * C4552 + C47233 * C1766 +
             C47031 * C2056) *
                C5232 -
            (C47234 * C4234 + C139586 * C4556 + C47233 * C1779 +
             C47031 * C2064) *
                C5227) *
               C139457 * C139575) *
              C139403) *
         C139328) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47233 * C107 + C47031 * C308 + C47234 * C831 + C139586 * C1118) *
                 C5913 +
             (C47233 * C116 + C47031 * C314 + C47234 * C841 + C139586 * C1125) *
                 C139300) *
                C139457 * C47029 +
            ((C47261 + C47260) * C5913 + (C47263 + C47262) * C139300) *
                C139457 * C139575) *
               C9466 -
           (((C49075 + C49074) * C139300 + (C49073 + C49072) * C5913) *
                C139457 * C139575 +
            ((C47234 * C4230 + C139586 * C4553 + C47233 * C1777 +
              C47031 * C2061) *
                 C139300 +
             (C47234 * C4223 + C139586 * C4549 + C47233 * C1767 +
              C47031 * C2054) *
                 C5913) *
                C139457 * C47029) *
               C139403) *
              C823 +
          ((((C47233 * C4223 + C47031 * C4549 + C47234 * C8754 +
              C139586 * C9000) *
                 C5913 +
             (C47233 * C4230 + C47031 * C4553 + C47234 * C8757 +
              C139586 * C9003) *
                 C139300) *
                C139457 * C47029 +
            ((C52007 + C52006) * C5913 + (C52009 + C52008) * C139300) *
                C139457 * C139575) *
               C139403 -
           (((C48145 + C48144) * C139300 + (C48143 + C48142) * C5913) *
                C139457 * C139575 +
            ((C47234 * C847 + C139586 * C1129 + C47233 * C841 +
              C47031 * C1125) *
                 C139300 +
             (C47234 * C832 + C139586 * C1121 + C47233 * C831 +
              C47031 * C1118) *
                 C5913) *
                C139457 * C47029) *
               C9466) *
              C824 +
          ((((C47233 * C832 + C47031 * C1121 + C47234 * C5916 +
              C139586 * C6094) *
                 C5913 +
             (C47233 * C847 + C47031 * C1129 + C47234 * C5919 +
              C139586 * C6097) *
                 C139300) *
                C139457 * C47029 +
            ((C48147 + C48146) * C5913 + (C48149 + C48148) * C139300) *
                C139457 * C139575) *
               C9466 -
           (((C47234 * C24130 + C139586 * C24464 + C47233 * C8756 +
              C47031 * C9002) *
                 C139300 +
             (C47234 * C24128 + C139586 * C24462 + C47233 * C8753 +
              C47031 * C8999) *
                 C5913) *
                C139457 * C139575 +
            ((C47234 * C24131 + C139586 * C24465 + C47233 * C8757 +
              C47031 * C9003) *
                 C139300 +
             (C47234 * C24129 + C139586 * C24463 + C47233 * C8754 +
              C47031 * C9000) *
                 C5913) *
                C139457 * C47029) *
               C139403) *
              C825)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[59] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47233 * C107 + C47031 * C308 + C47234 * C831 + C139586 * C1118) *
                 C181 +
             (C47233 * C182 + C47031 * C394 + C47234 * C939 + C139586 * C1231) *
                 C139328) *
                C139457 * C47029 +
            ((C47261 + C47260) * C181 + (C47350 + C47351) * C139328) * C139457 *
                C139575) *
               C5225 -
           (((C47352 + C47353) * C139328 + (C47265 + C47264) * C181) * C139457 *
                C139575 +
            ((C47351 + C47350) * C139328 + (C47260 + C47261) * C181) * C139457 *
                C47029) *
               C5226 +
           (((C47264 + C47265) * C181 + (C47353 + C47352) * C139328) * C139457 *
                C47029 +
            ((C47269 + C47268) * C181 + (C47354 + C47355) * C139328) * C139457 *
                C139575) *
               C5227) *
              C9466 +
          ((((C49072 + C49073) * C181 + (C49186 + C49187) * C139328) * C139457 *
                C47029 +
            ((C50925 + C50924) * C181 + (C51030 + C51031) * C139328) * C139457 *
                C139575) *
               C5226 -
           (((C49187 + C49186) * C139328 + (C49073 + C49072) * C181) * C139457 *
                C139575 +
            ((C47234 * C4337 + C139586 * C4667 + C47233 * C1873 +
              C47031 * C2170) *
                 C139328 +
             (C47234 * C4223 + C139586 * C4549 + C47233 * C1767 +
              C47031 * C2054) *
                 C181) *
                C139457 * C47029) *
               C5225 -
           (((C47234 * C4340 + C139586 * C4670 + C47233 * C1872 +
              C47031 * C2169) *
                 C139328 +
             (C47234 * C4226 + C139586 * C4552 + C47233 * C1766 +
              C47031 * C2056) *
                 C181) *
                C139457 * C139575 +
            ((C51031 + C51030) * C139328 + (C50924 + C50925) * C181) * C139457 *
                C47029) *
               C5227) *
              C139403)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C831 + C139586 * C1118) *
                C934 +
            (C47233 * C182 + C47031 * C394 + C47234 * C939 + C139586 * C1231) *
                C823 -
            (C47234 * C832 + C139586 * C1121 + C47233 * C831 + C47031 * C1118) *
                C935 -
            (C47234 * C940 + C139586 * C1232 + C47233 * C939 + C47031 * C1231) *
                C824 +
            (C47233 * C832 + C47031 * C1121 + C47234 * C5916 +
             C139586 * C6094) *
                C936 +
            (C47233 * C940 + C47031 * C1232 + C47234 * C5982 +
             C139586 * C6148) *
                C825) *
               C139457 * C47029 +
           ((C47261 + C47260) * C934 + (C47350 + C47351) * C823 -
            (C48143 + C48142) * C935 - (C48256 + C48257) * C824 +
            (C48147 + C48146) * C936 + (C48258 + C48259) * C825) *
               C139457 * C139575) *
              C139300 * C9466 +
          (((C47233 * C4223 + C47031 * C4549 + C47234 * C8754 +
             C139586 * C9000) *
                C935 -
            ((C47234 * C4337 + C139586 * C4667 + C47233 * C1873 +
              C47031 * C2170) *
                 C823 +
             (C47234 * C4223 + C139586 * C4549 + C47233 * C1767 +
              C47031 * C2054) *
                 C934) +
            (C47233 * C4337 + C47031 * C4667 + C47234 * C8840 +
             C139586 * C9078) *
                C824 -
            (C47234 * C24129 + C139586 * C24463 + C47233 * C8754 +
             C47031 * C9000) *
                C936 -
            (C47234 * C24247 + C139586 * C24564 + C47233 * C8840 +
             C47031 * C9078) *
                C825) *
               C139457 * C47029 +
           ((C52007 + C52006) * C935 -
            ((C49187 + C49186) * C823 + (C49073 + C49072) * C934) +
            (C52144 + C52145) * C824 -
            (C47234 * C24128 + C139586 * C24462 + C47233 * C8753 +
             C47031 * C8999) *
                C936 -
            (C47234 * C24246 + C139586 * C24565 + C47233 * C8839 +
             C47031 * C9079) *
                C825) *
               C139457 * C139575) *
              C139300 * C139403)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[59] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C831 + C139586 * C1118) *
                C9616 +
            (C47233 * C245 + C47031 * C474 + C47234 * C1029 + C139586 * C1339) *
                C9466 -
            (C47234 * C4223 + C139586 * C4549 + C47233 * C1767 +
             C47031 * C2054) *
                C9617 -
            (C47234 * C4443 + C139586 * C4783 + C47233 * C1965 +
             C47031 * C2269) *
                C139403) *
               C139457 * C47029 +
           ((C47261 + C47260) * C9616 + (C47434 + C47435) * C9466 -
            (C49073 + C49072) * C9617 - (C49296 + C49297) * C139403) *
               C139457 * C139575) *
              C139328 * C5225 +
          (((C49072 + C49073) * C9617 -
            ((C47435 + C47434) * C9466 + (C47260 + C47261) * C9616) +
            (C49297 + C49296) * C139403) *
               C139457 * C47029 +
           ((C50925 + C50924) * C9617 -
            ((C47436 + C47437) * C9466 + (C47265 + C47264) * C9616) +
            (C51134 + C51135) * C139403) *
               C139457 * C139575) *
              C139328 * C5226 +
          (((C47264 + C47265) * C9616 + (C47437 + C47436) * C9466 -
            (C50924 + C50925) * C9617 - (C51135 + C51134) * C139403) *
               C139457 * C47029 +
           ((C47269 + C47268) * C9616 + (C47438 + C47439) * C9466 -
            (C47234 * C4226 + C139586 * C4552 + C47233 * C1766 +
             C47031 * C2056) *
                C9617 -
            (C47234 * C4446 + C139586 * C4786 + C47233 * C1969 +
             C47031 * C2275) *
                C139403) *
               C139457 * C139575) *
              C139328 * C5227)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C831 + C139586 * C1118) *
                C9616 +
            (C47233 * C245 + C47031 * C474 + C47234 * C1029 + C139586 * C1339) *
                C9466 -
            (C47234 * C4223 + C139586 * C4549 + C47233 * C1767 +
             C47031 * C2054) *
                C9617 -
            (C47234 * C4443 + C139586 * C4783 + C47233 * C1965 +
             C47031 * C2269) *
                C139403) *
               C139457 * C47029 +
           ((C47261 + C47260) * C9616 + (C47434 + C47435) * C9466 -
            (C49073 + C49072) * C9617 - (C49296 + C49297) * C139403) *
               C139457 * C139575) *
              C823 +
          (((C47233 * C4223 + C47031 * C4549 + C47234 * C8754 +
             C139586 * C9000) *
                C9617 -
            ((C47234 * C1030 + C139586 * C1340 + C47233 * C1029 +
              C47031 * C1339) *
                 C9466 +
             (C47234 * C832 + C139586 * C1121 + C47233 * C831 +
              C47031 * C1118) *
                 C9616) +
            (C47233 * C4443 + C47031 * C4783 + C47234 * C8920 +
             C139586 * C9155) *
                C139403) *
               C139457 * C47029 +
           ((C52007 + C52006) * C9617 -
            ((C48366 + C48367) * C9466 + (C48143 + C48142) * C9616) +
            (C52280 + C52281) * C139403) *
               C139457 * C139575) *
              C824 +
          (((C47233 * C832 + C47031 * C1121 + C47234 * C5916 +
             C139586 * C6094) *
                C9616 +
            (C47233 * C1030 + C47031 * C1340 + C47234 * C6038 +
             C139586 * C6203) *
                C9466 -
            (C47234 * C24129 + C139586 * C24463 + C47233 * C8754 +
             C47031 * C9000) *
                C9617 -
            (C47234 * C24355 + C139586 * C24664 + C47233 * C8920 +
             C47031 * C9155) *
                C139403) *
               C139457 * C47029 +
           ((C48147 + C48146) * C9616 + (C48368 + C48369) * C9466 -
            (C47234 * C24128 + C139586 * C24462 + C47233 * C8753 +
             C47031 * C8999) *
                C9617 -
            (C47234 * C24354 + C139586 * C24665 + C47233 * C8919 +
             C47031 * C9156) *
                C139403) *
               C139457 * C139575) *
              C825) *
         C139300) /
            (p * q * std::sqrt(p + q));
    d2eezx[59] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139457 * C555) * C5230 +
             (C554 * C116 + C139457 * C561) * C5225 - C584 * C5231 -
             C585 * C5226 + C586 * C5232 + C587 * C5227) *
                C47029 +
            (C584 * C5230 + C585 * C5225 - C586 * C5231 - C587 * C5226 +
             C588 * C5232 + C589 * C5227) *
                C139575) *
               C47031 +
           ((C20089 + C20090 - C20091 - C20092 + C20093 + C20094) * C47029 +
            (C20095 + C20096 - C20097 - C20098 + C20099 + C20100) * C139575) *
               C139586) *
              C9466 +
          (((C2408 * C5231 -
             ((C554 * C1777 + C139457 * C2383) * C5225 +
              (C554 * C1767 + C139457 * C2376) * C5230) +
             C2409 * C5226 - C2410 * C5232 - C2411 * C5227) *
                C47029 +
            (C2410 * C5231 - (C2409 * C5225 + C2408 * C5230) + C2411 * C5226 -
             C3950 * C5232 - C3951 * C5227) *
                C139575) *
               C47031 +
           ((C4916 * C5231 - (C19107 * C5225 + C19108 * C5230) + C4917 * C5226 -
             C4918 * C5232 - C4919 * C5227) *
                C47029 +
            (C4918 * C5231 - (C4917 * C5225 + C4916 * C5230) + C4919 * C5226 -
             (C554 * C4226 + C139457 * C4902) * C5232 -
             (C554 * C4234 + C139457 * C4906) * C5227) *
                C139575) *
               C139586) *
              C139403) *
         C139328) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C554 * C107 + C139457 * C555) * C5913 +
              (C554 * C116 + C139457 * C561) * C139300) *
                 C47029 +
             (C584 * C5913 + C585 * C139300) * C139575) *
                C47031 +
            ((C20819 + C20820) * C47029 + (C20821 + C20822) * C139575) *
                C139586) *
               C9466 -
           (((C21719 + C21720) * C139575 + (C21721 + C21722) * C47029) *
                C139586 +
            ((C2409 * C139300 + C2408 * C5913) * C139575 +
             ((C554 * C1777 + C139457 * C2383) * C139300 +
              (C554 * C1767 + C139457 * C2376) * C5913) *
                 C47029) *
                C47031) *
               C139403) *
              C823 +
          ((((C21722 + C21721) * C47029 + (C21720 + C21719) * C139575) *
                C47031 +
            ((C24777 + C24778) * C47029 + (C24773 + C24774) * C139575) *
                C139586) *
               C139403 -
           (((C20823 + C20824) * C139575 + (C20825 + C20826) * C47029) *
                C139586 +
            ((C20822 + C20821) * C139575 + (C20820 + C20819) * C47029) *
                C47031) *
               C9466) *
              C824 +
          ((((C20826 + C20825) * C47029 + (C20824 + C20823) * C139575) *
                C47031 +
            ((C20835 + C20836) * C47029 + (C20831 + C20832) * C139575) *
                C139586) *
               C9466 -
           ((((C554 * C24130 + C139457 * C24766) * C139300 +
              (C554 * C24128 + C139457 * C24764) * C5913) *
                 C139575 +
             ((C554 * C24131 + C139457 * C24767) * C139300 +
              (C554 * C24129 + C139457 * C24765) * C5913) *
                 C47029) *
                C139586 +
            ((C24774 + C24773) * C139575 + (C24778 + C24777) * C47029) *
                C47031) *
               C139403) *
              C825)) /
            (p * q * std::sqrt(p + q));
    d2eezy[59] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C554 * C107 + C139457 * C555) * C181 +
              (C554 * C182 + C139457 * C641) * C139328) *
                 C47029 +
             (C648 + C664) * C139575) *
                C47031 +
            ((C15060 * C181 + C15179 * C139328) * C47029 +
             (C14134 + C14135) * C139575) *
                C139586) *
               C5225 -
           (((C14136 + C14137) * C139575 + (C14135 + C14134) * C47029) *
                C139586 +
            ((C665 + C651) * C139575 + (C664 + C648) * C47029) * C47031) *
               C5226 +
           ((C668 * C47029 + (C656 + C666) * C139575) * C47031 +
            ((C14137 + C14136) * C47029 + (C14138 + C14139) * C139575) *
                C139586) *
               C5227) *
              C9466 +
          ((((C2498 + C2514) * C47029 + (C2501 + C2515) * C139575) * C47031 +
            ((C16138 + C16139) * C47029 + (C18011 + C18012) * C139575) *
                C139586) *
               C5226 -
           (((C16139 + C16138) * C139575 +
             (C19250 * C139328 + C19108 * C181) * C47029) *
                C139586 +
            ((C2514 + C2498) * C139575 +
             ((C554 * C1873 + C139457 * C2492) * C139328 +
              (C554 * C1767 + C139457 * C2376) * C181) *
                 C47029) *
                C47031) *
               C5225 -
           ((((C554 * C4340 + C139457 * C5020) * C139328 +
              (C554 * C4226 + C139457 * C4902) * C181) *
                 C139575 +
             (C18012 + C18011) * C47029) *
                C139586 +
            ((C4032 + C4027) * C139575 + C4030 * C47029) * C47031) *
               C5227) *
              C139403)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139457 * C555) * C934 +
             (C554 * C182 + C139457 * C641) * C823 - C15060 * C935 -
             C15179 * C824 + C15063 * C936 + C15180 * C825) *
                C47029 +
            (C1562 + C1563 - C1564 - C1582 + C1567 + C1583) * C139575) *
               C47031 +
           ((C15060 * C934 + C15179 * C823 - C15063 * C935 - C15180 * C824 +
             C20833 * C936 + C20907 * C825) *
                C47029 +
            (C15172 + C15173 - C15174 - C15175 + C15176 + C15182) * C139575) *
               C139586) *
              C139300 * C9466 +
          (((C19108 * C935 -
             ((C554 * C1873 + C139457 * C2492) * C823 +
              (C554 * C1767 + C139457 * C2376) * C934) +
             C19250 * C824 - C24775 * C936 - C24881 * C825) *
                C47029 +
            (C4916 * C935 - (C2510 * C823 + C2408 * C934) + C5032 * C824 -
             C19109 * C936 - C19251 * C825) *
                C139575) *
               C47031 +
           ((C24775 * C935 - (C19250 * C823 + C19108 * C934) + C24881 * C824 -
             (C554 * C24129 + C139457 * C24765) * C936 -
             (C554 * C24247 + C139457 * C24876) * C825) *
                C47029 +
            (C19109 * C935 - (C5032 * C823 + C4916 * C934) + C19251 * C824 -
             (C554 * C24128 + C139457 * C24764) * C936 -
             (C554 * C24246 + C139457 * C24877) * C825) *
                C139575) *
               C139586) *
              C139300 * C139403)) /
            (p * q * std::sqrt(p + q));
    d2eezz[59] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139457 * C555) * C9616 +
             (C554 * C245 + C139457 * C719) * C9466 -
             (C554 * C1767 + C139457 * C2376) * C9617 -
             (C554 * C1965 + C139457 * C2591) * C139403) *
                C47029 +
            (C10079 + C10080 - C10081 - C10082) * C139575) *
               C47031 +
           ((C26753 + C26754 - C26755 - C26756) * C47029 + C28565 * C139575) *
               C139586) *
              C139328 * C5225 +
          (((C10081 - (C10080 + C10079) + C10082) * C47029 +
            (C10085 - (C10084 + C10083) + C10086) * C139575) *
               C47031 +
           (C28566 * C47029 + (C12160 - (C12161 + C12162) + C12163) * C139575) *
               C139586) *
              C139328 * C5226 +
          ((C10093 * C47029 + (C10089 + C10088 - C10087 - C10090) * C139575) *
               C47031 +
           ((C12162 + C12161 - C12160 - C12163) * C47029 +
            (C3202 * C9616 + C3376 * C9466 -
             (C554 * C4226 + C139457 * C4902) * C9617 -
             (C554 * C4446 + C139457 * C5136) * C139403) *
                C139575) *
               C139586) *
              C139328 * C5227)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139457 * C555) * C9616 +
             (C554 * C245 + C139457 * C719) * C9466 -
             (C554 * C1767 + C139457 * C2376) * C9617 -
             (C554 * C1965 + C139457 * C2591) * C139403) *
                C47029 +
            (C10079 + C10080 - C10081 - C10082) * C139575) *
               C47031 +
           ((C26753 + C26754 - C26755 - C26756) * C47029 + C28565 * C139575) *
               C139586) *
              C823 +
          (((C26755 - (C26754 + C26753) + C26756) * C47029 + C28566 * C139575) *
               C47031 +
           ((C26757 - (C26758 + C26759) + C26760) * C47029 +
            (C26761 - (C26762 + C26763) + C26764) * C139575) *
               C139586) *
              C824 +
          (((C26759 + C26758 - C26757 - C26760) * C47029 +
            (C26763 + C26762 - C26761 - C26764) * C139575) *
               C47031 +
           ((C20833 * C9616 + C20979 * C9466 -
             (C554 * C24129 + C139457 * C24765) * C9617 -
             (C554 * C24355 + C139457 * C24979) * C139403) *
                C47029 +
            (C15064 * C9616 + C15296 * C9466 -
             (C554 * C24128 + C139457 * C24764) * C9617 -
             (C554 * C24354 + C139457 * C24980) * C139403) *
                C139575) *
               C139586) *
              C825) *
         C139300) /
            (p * q * std::sqrt(p + q));
    d2eexx[60] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139286 * C113) * C2702 +
            (C63381 * C116 + C139286 * C125) * C139589 -
            (C63381 * C108 + C139286 * C114) * C2703 -
            (C63381 * C117 + C139286 * C126) * C139590 +
            (C63381 * C109 + C139286 * C115) * C2704 +
            (C63381 * C118 + C139286 * C127) * C2699) *
               C63378 +
           (C65304 + C65305 - C65306 - C65307 + C65324 + C65325) * C63379 +
           (C65312 + C65313 - C65314 - C65315 + C65326 + C65327) * C63380) *
              C139457 * C139339 * C139560 +
          ((C65306 - (C65305 + C65304) + C65307 - C65324 - C65325) * C63378 +
           (C65314 - (C65313 + C65312) + C65315 - C65326 - C65327) * C63379 +
           (C63892 * C2703 - (C63893 * C139589 + C63894 * C2702) +
            C63895 * C139590 - (C63381 * C5914 + C139286 * C5920) * C2704 -
            (C63381 * C5917 + C139286 * C5923) * C2699) *
               C63380) *
              C139457 * C139339 * C139377)) /
        (p * q * std::sqrt(p + q));
    d2eexy[60] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C63381 * C107 + C139286 * C113) * C2783 +
                      (C63381 * C182 + C139286 * C188) * C139560 -
                      C63884 * C2784 - C63997 * C139377) *
                         C63378 +
                     (C63884 * C2783 + C63997 * C139560 - C63888 * C2784 -
                      C63998 * C139377) *
                         C63379 +
                     (C63888 * C2783 + C63998 * C139560 - C63894 * C2784 -
                      C63999 * C139377) *
                         C63380) *
                        C139457 * C139589 +
                    ((C63886 * C2784 -
                      ((C63381 * C183 + C139286 * C189) * C139560 +
                       (C63381 * C108 + C139286 * C114) * C2783) +
                      C64000 * C139377) *
                         C63378 +
                     (C63890 * C2784 - (C64000 * C139560 + C63886 * C2783) +
                      C64001 * C139377) *
                         C63379 +
                     (C63892 * C2784 - (C64001 * C139560 + C63890 * C2783) +
                      C64002 * C139377) *
                         C63380) *
                        C139457 * C139590 +
                    (((C63381 * C109 + C139286 * C115) * C2783 +
                      (C63381 * C184 + C139286 * C190) * C139560 -
                      C65320 * C2784 - C65406 * C139377) *
                         C63378 +
                     (C65320 * C2783 + C65406 * C139560 - C65322 * C2784 -
                      C65407 * C139377) *
                         C63379 +
                     (C65322 * C2783 + C65407 * C139560 -
                      (C63381 * C5914 + C139286 * C5920) * C2784 -
                      (C63381 * C5980 + C139286 * C5983) * C139377) *
                         C63380) *
                        C139457 * C2699) *
                   C139339) /
                  (p * q * std::sqrt(p + q));
    d2eexz[60] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C63381 * C107 + C139286 * C113) * C244 +
                       (C63381 * C245 + C139286 * C251) * C139339) *
                          C63378 +
                      (C64077 + C64101) * C63379 + C64107 * C63380) *
                         C139457 * C139560 -
                     ((C64103 + C64085) * C63380 + (C64102 + C64080) * C63379 +
                      (C64101 + C64077) * C63378) *
                         C139457 * C139377) *
                        C139589 +
                    (((C64086 + C64104) * C63378 + (C64089 + C64105) * C63379 +
                      (C64092 + C64106) * C63380) *
                         C139457 * C139377 -
                     (C64108 * C63380 + (C64104 + C64086) * C63379 +
                      ((C63381 * C246 + C139286 * C252) * C139339 +
                       (C63381 * C108 + C139286 * C114) * C244) *
                          C63378) *
                         C139457 * C139560) *
                        C139590 +
                    ((((C63381 * C109 + C139286 * C115) * C244 +
                       (C63381 * C247 + C139286 * C253) * C139339) *
                          C63378 +
                      (C65482 + C65490) * C63379 + (C65485 + C65491) * C63380) *
                         C139457 * C139560 -
                     (((C63381 * C6036 + C139286 * C6039) * C139339 +
                       (C63381 * C5914 + C139286 * C5920) * C244) *
                          C63380 +
                      (C65491 + C65485) * C63379 + (C65490 + C65482) * C63378) *
                         C139457 * C139377) *
                        C2699)) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[60] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((C63532 * C107 + C63378 * C308 + C63533 * C831 +
                      C63379 * C1118 + C63534 * C832 + C63380 * C1121) *
                         C2702 +
                     (C63532 * C116 + C63378 * C314 + C63533 * C841 +
                      C63379 * C1125 + C63534 * C847 + C63380 * C1129) *
                         C139589 -
                     (C63534 * C833 + C63380 * C1122 + C63533 * C828 +
                      C63379 * C1117 + C63532 * C108 + C63378 * C309) *
                         C2703 -
                     (C63534 * C848 + C63380 * C1130 + C63533 * C840 +
                      C63379 * C1126 + C63532 * C117 + C63378 * C315) *
                         C139590 +
                     (C63532 * C109 + C63378 * C310 + C63533 * C829 +
                      C63379 * C1119 + C63534 * C834 + C63380 * C1123) *
                         C2704 +
                     (C63532 * C118 + C63378 * C316 + C63533 * C839 +
                      C63379 * C1127 + C63534 * C849 + C63380 * C1131) *
                         C2699) *
                        C139457 * C139286 * C139339 * C139560 +
                    ((C63532 * C828 + C63378 * C1117 + C63533 * C833 +
                      C63379 * C1122 + C63534 * C5915 + C63380 * C6093) *
                         C2703 -
                     ((C63534 * C5919 + C63380 * C6097 + C63533 * C847 +
                       C63379 * C1129 + C63532 * C841 + C63378 * C1125) *
                          C139589 +
                      (C63534 * C5916 + C63380 * C6094 + C63533 * C832 +
                       C63379 * C1121 + C63532 * C831 + C63378 * C1118) *
                          C2702) +
                     (C63532 * C840 + C63378 * C1126 + C63533 * C848 +
                      C63379 * C1130 + C63534 * C5918 + C63380 * C6096) *
                         C139590 -
                     (C63534 * C5914 + C63380 * C6092 + C63533 * C834 +
                      C63379 * C1123 + C63532 * C829 + C63378 * C1119) *
                         C2704 -
                     (C63534 * C5917 + C63380 * C6095 + C63533 * C849 +
                      C63379 * C1131 + C63532 * C839 + C63378 * C1127) *
                         C2699) *
                        C139457 * C139286 * C139339 * C139377)) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[60] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((C63532 * C107 + C63378 * C308 + C63533 * C831 +
                      C63379 * C1118 + C63534 * C832 + C63380 * C1121) *
                         C2783 +
                     (C63532 * C182 + C63378 * C394 + C63533 * C939 +
                      C63379 * C1231 + C63534 * C940 + C63380 * C1232) *
                         C139560 -
                     (C63534 * C5916 + C63380 * C6094 + C63533 * C832 +
                      C63379 * C1121 + C63532 * C831 + C63378 * C1118) *
                         C2784 -
                     (C63534 * C5982 + C63380 * C6148 + C63533 * C940 +
                      C63379 * C1232 + C63532 * C939 + C63378 * C1231) *
                         C139377) *
                        C139457 * C139286 * C139589 +
                    ((C63532 * C828 + C63378 * C1117 + C63533 * C833 +
                      C63379 * C1122 + C63534 * C5915 + C63380 * C6093) *
                         C2784 -
                     ((C63534 * C941 + C63380 * C1234 + C63533 * C938 +
                       C63379 * C1233 + C63532 * C183 + C63378 * C395) *
                          C139560 +
                      (C63534 * C833 + C63380 * C1122 + C63533 * C828 +
                       C63379 * C1117 + C63532 * C108 + C63378 * C309) *
                          C2783) +
                     (C63532 * C938 + C63378 * C1233 + C63533 * C941 +
                      C63379 * C1234 + C63534 * C5981 + C63380 * C6149) *
                         C139377) *
                        C139457 * C139286 * C139590 +
                    ((C63532 * C109 + C63378 * C310 + C63533 * C829 +
                      C63379 * C1119 + C63534 * C834 + C63380 * C1123) *
                         C2783 +
                     (C63532 * C184 + C63378 * C396 + C63533 * C937 +
                      C63379 * C1235 + C63534 * C942 + C63380 * C1236) *
                         C139560 -
                     (C63534 * C5914 + C63380 * C6092 + C63533 * C834 +
                      C63379 * C1123 + C63532 * C829 + C63378 * C1119) *
                         C2784 -
                     (C63534 * C5980 + C63380 * C6150 + C63533 * C942 +
                      C63379 * C1236 + C63532 * C937 + C63378 * C1235) *
                         C139377) *
                        C139457 * C139286 * C2699) *
                   C139339) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[60] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C63532 * C107 + C63378 * C308 + C63533 * C831 +
                       C63379 * C1118 + C63534 * C832 + C63380 * C1121) *
                          C244 +
                      (C63532 * C245 + C63378 * C474 + C63533 * C1029 +
                       C63379 * C1339 + C63534 * C1030 + C63380 * C1340) *
                          C139339) *
                         C139457 * C139286 * C139560 -
                     ((C63534 * C6038 + C63380 * C6203 + C63533 * C1030 +
                       C63379 * C1340 + C63532 * C1029 + C63378 * C1339) *
                          C139339 +
                      (C63534 * C5916 + C63380 * C6094 + C63533 * C832 +
                       C63379 * C1121 + C63532 * C831 + C63378 * C1118) *
                          C244) *
                         C139457 * C139286 * C139377) *
                        C139589 +
                    (((C63532 * C828 + C63378 * C1117 + C63533 * C833 +
                       C63379 * C1122 + C63534 * C5915 + C63380 * C6093) *
                          C244 +
                      (C63532 * C1028 + C63378 * C1338 + C63533 * C1031 +
                       C63379 * C1341 + C63534 * C6037 + C63380 * C6202) *
                          C139339) *
                         C139457 * C139286 * C139377 -
                     ((C63534 * C1031 + C63380 * C1341 + C63533 * C1028 +
                       C63379 * C1338 + C63532 * C246 + C63378 * C475) *
                          C139339 +
                      (C63534 * C833 + C63380 * C1122 + C63533 * C828 +
                       C63379 * C1117 + C63532 * C108 + C63378 * C309) *
                          C244) *
                         C139457 * C139286 * C139560) *
                        C139590 +
                    (((C63532 * C109 + C63378 * C310 + C63533 * C829 +
                       C63379 * C1119 + C63534 * C834 + C63380 * C1123) *
                          C244 +
                      (C63532 * C247 + C63378 * C476 + C63533 * C1027 +
                       C63379 * C1337 + C63534 * C1032 + C63380 * C1342) *
                          C139339) *
                         C139457 * C139286 * C139560 -
                     ((C63534 * C6036 + C63380 * C6201 + C63533 * C1032 +
                       C63379 * C1342 + C63532 * C1027 + C63378 * C1337) *
                          C139339 +
                      (C63534 * C5914 + C63380 * C6092 + C63533 * C834 +
                       C63379 * C1123 + C63532 * C829 + C63378 * C1119) *
                          C244) *
                         C139457 * C139286 * C139377) *
                        C2699)) /
                  (p * q * std::sqrt(p + q));
    d2eezx[60] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C139457 * C555) * C2702 +
            (C554 * C116 + C139457 * C561) * C139589 - C584 * C2703 -
            C585 * C139590 + C586 * C2704 + C587 * C2699) *
               C139286 * C63378 +
           (C16986 + C16987 - C16988 - C16989 + C16990 + C16991) * C139286 *
               C63379 +
           (C65788 + C65789 - C65790 - C65791 + C65792 + C65793) * C139286 *
               C63380) *
              C139339 * C139560 +
          ((C16988 - (C16987 + C16986) + C16989 - C16990 - C16991) * C139286 *
               C63378 +
           (C65790 - (C65789 + C65788) + C65791 - C65792 - C65793) * C139286 *
               C63379 +
           (C15064 * C2703 - (C20834 * C139589 + C20833 * C2702) +
            C15065 * C139590 - (C554 * C5914 + C139457 * C6254) * C2704 -
            (C554 * C5917 + C139457 * C6257) * C2699) *
               C139286 * C63380) *
              C139339 * C139377)) /
        (p * q * std::sqrt(p + q));
    d2eezy[60] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C554 * C107 + C139457 * C555) * C2783 +
                      (C554 * C182 + C139457 * C641) * C139560 -
                      C15060 * C2784 - C15179 * C139377) *
                         C139286 * C63378 +
                     (C15060 * C2783 + C15179 * C139560 - C15063 * C2784 -
                      C15180 * C139377) *
                         C139286 * C63379 +
                     (C15063 * C2783 + C15180 * C139560 - C20833 * C2784 -
                      C20907 * C139377) *
                         C139286 * C63380) *
                        C139589 +
                    ((C3281 - (C3280 + C3279) + C3282) * C139286 * C63378 +
                     (C17098 - (C17097 + C17096) + C17099) * C139286 * C63379 +
                     (C15064 * C2784 - (C1579 * C139560 + C1476 * C2783) +
                      C15181 * C139377) *
                         C139286 * C63380) *
                        C139590 +
                    (C3296 * C139286 * C63378 +
                     (C17102 + C17101 - C17100 - C17103) * C139286 * C63379 +
                     (C1478 * C2783 + C1581 * C139560 -
                      (C554 * C5914 + C139457 * C6254) * C2784 -
                      (C554 * C5980 + C139457 * C6312) * C139377) *
                         C139286 * C63380) *
                        C2699) *
                   C139339) /
                  (p * q * std::sqrt(p + q));
    d2eezz[60] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139457 * C555) * C244 +
             (C554 * C245 + C139457 * C719) * C139339) *
                C139286 * C63378 +
            (C15281 + C15297) * C139286 * C63379 + C64563 * C63380) *
               C139560 -
           ((C20980 + C20976) * C139286 * C63380 +
            (C15298 + C15288) * C139286 * C63379 +
            (C15297 + C15281) * C139286 * C63378) *
               C139377) *
              C139589 +
          ((C15284 * C139286 * C63378 + C15290 * C139286 * C63379 +
            (C15291 + C15299) * C139286 * C63380) *
               C139377 -
           (C64562 * C63380 + C15289 * C139286 * C63379 +
            (C742 + C726) * C139286 * C63378) *
               C139560) *
              C139590 +
          ((C746 * C139286 * C63378 + C17202 * C139286 * C63379 +
            (C1677 + C1687) * C139286 * C63380) *
               C139560 -
           (((C554 * C6036 + C139457 * C6363) * C139339 +
             (C554 * C5914 + C139457 * C6254) * C244) *
                C139286 * C63380 +
            (C1687 + C1677) * C139286 * C63379 + C3372 * C139286 * C63378) *
               C139377) *
              C2699)) /
        (p * q * std::sqrt(p + q));
    d2eexx[61] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139286 * C113) * C826 +
             (C63381 * C116 + C139286 * C125) * C821 -
             (C63381 * C108 + C139286 * C114) * C827 -
             (C63381 * C117 + C139286 * C126) * C139305) *
                C63378 +
            (C63896 + C63897 - C63898 - C63899) * C63379 + C63910 * C63380) *
               C139457 * C139561 +
           (((C63381 * C1764 + C139286 * C1772) * C827 -
             ((C63381 * C1777 + C139286 * C1790) * C821 +
              (C63381 * C1767 + C139286 * C1778) * C826) +
             (C63381 * C1776 + C139286 * C1789) * C139305) *
                C63378 +
            (C66730 - (C66731 + C66732) + C66733) * C63379 +
            (C66734 - (C66735 + C66736) + C66737) * C63380) *
               C139457 * C139403) *
              C139560 +
          (((C63898 - (C63897 + C63896) + C63899) * C63378 +
            (C63902 - (C63901 + C63900) + C63903) * C63379 +
            (C63904 - (C63905 + C63906) + C63907) * C63380) *
               C139457 * C139561 +
           ((C66732 + C66731 - C66730 - C66733) * C63378 +
            (C66736 + C66735 - C66734 - C66737) * C63379 +
            ((C63381 * C24129 + C139286 * C24133) * C826 +
             (C63381 * C24131 + C139286 * C24135) * C821 -
             (C63381 * C24128 + C139286 * C24132) * C827 -
             (C63381 * C24130 + C139286 * C24134) * C139305) *
                C63380) *
               C139457 * C139403) *
              C139377)) /
        (p * q * std::sqrt(p + q));
    d2eexy[61] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C63381 * C107 + C139286 * C113) * C2783 +
                       (C63381 * C182 + C139286 * C188) * C139560 -
                       C63884 * C2784 - C63997 * C139377) *
                          C63378 +
                      (C63884 * C2783 + C63997 * C139560 - C63888 * C2784 -
                       C63998 * C139377) *
                          C63379 +
                      (C63888 * C2783 + C63998 * C139560 - C63894 * C2784 -
                       C63999 * C139377) *
                          C63380) *
                         C139457 * C821 +
                     ((C63886 * C2784 -
                       ((C63381 * C183 + C139286 * C189) * C139560 +
                        (C63381 * C108 + C139286 * C114) * C2783) +
                       C64000 * C139377) *
                          C63378 +
                      (C63890 * C2784 - (C64000 * C139560 + C63886 * C2783) +
                       C64001 * C139377) *
                          C63379 +
                      (C63892 * C2784 - (C64001 * C139560 + C63890 * C2783) +
                       C64002 * C139377) *
                          C63380) *
                         C139457 * C139305) *
                        C139561 +
                    (((C66724 * C2784 -
                       ((C63381 * C1873 + C139286 * C1881) * C139560 +
                        (C63381 * C1767 + C139286 * C1778) * C2783) +
                       C66844 * C139377) *
                          C63378 +
                      (C66728 * C2784 - (C66844 * C139560 + C66724 * C2783) +
                       C66845 * C139377) *
                          C63379 +
                      ((C63381 * C24129 + C139286 * C24133) * C2784 -
                       (C66845 * C139560 + C66728 * C2783) +
                       (C63381 * C24247 + C139286 * C24249) * C139377) *
                          C63380) *
                         C139457 * C821 +
                     (((C63381 * C1764 + C139286 * C1772) * C2783 +
                       (C63381 * C1870 + C139286 * C1878) * C139560 -
                       C66722 * C2784 - C66846 * C139377) *
                          C63378 +
                      (C66722 * C2783 + C66846 * C139560 - C66726 * C2784 -
                       C66847 * C139377) *
                          C63379 +
                      (C66726 * C2783 + C66847 * C139560 -
                       (C63381 * C24128 + C139286 * C24132) * C2784 -
                       (C63381 * C24246 + C139286 * C24248) * C139377) *
                          C63380) *
                         C139457 * C139305) *
                        C139403)) /
                  (p * q * std::sqrt(p + q));
    d2eexz[61] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C63381 * C107 + C139286 * C113) * C3607 +
                       (C63381 * C245 + C139286 * C251) * C139561 -
                       (C63381 * C1767 + C139286 * C1778) * C3608 -
                       (C63381 * C1965 + C139286 * C1973) * C139403) *
                          C63378 +
                      (C66946 + C66947 - C66948 - C66970) * C63379 +
                      (C66951 + C66952 - C66953 - C66971) * C63380) *
                         C139457 * C139560 +
                     ((C66948 - (C66947 + C66946) + C66970) * C63378 +
                      (C66953 - (C66952 + C66951) + C66971) * C63379 +
                      ((C63381 * C24129 + C139286 * C24133) * C3608 -
                       (C64097 * C139561 + C63894 * C3607) +
                       (C63381 * C24355 + C139286 * C24357) * C139403) *
                          C63380) *
                         C139457 * C139377) *
                        C821 +
                    ((((C63381 * C1764 + C139286 * C1772) * C3608 -
                       ((C63381 * C246 + C139286 * C252) * C139561 +
                        (C63381 * C108 + C139286 * C114) * C3607) +
                       (C63381 * C1964 + C139286 * C1972) * C139403) *
                          C63378 +
                      (C66956 - (C66957 + C66958) + C66972) * C63379 +
                      (C66961 - (C66962 + C66963) + C66973) * C63380) *
                         C139457 * C139560 +
                     ((C66958 + C66957 - C66956 - C66972) * C63378 +
                      (C66963 + C66962 - C66961 - C66973) * C63379 +
                      (C63892 * C3607 + C64100 * C139561 -
                       (C63381 * C24128 + C139286 * C24132) * C3608 -
                       (C63381 * C24354 + C139286 * C24356) * C139403) *
                          C63380) *
                         C139457 * C139377) *
                        C139305)) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[61] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C63532 * C107 + C63378 * C308 + C63533 * C831 +
                       C63379 * C1118 + C63534 * C832 + C63380 * C1121) *
                          C826 +
                      (C63532 * C116 + C63378 * C314 + C63533 * C841 +
                       C63379 * C1125 + C63534 * C847 + C63380 * C1129) *
                          C821 -
                      (C63534 * C833 + C63380 * C1122 + C63533 * C828 +
                       C63379 * C1117 + C63532 * C108 + C63378 * C309) *
                          C827 -
                      (C63534 * C848 + C63380 * C1130 + C63533 * C840 +
                       C63379 * C1126 + C63532 * C117 + C63378 * C315) *
                          C139305) *
                         C139457 * C139286 * C139561 +
                     ((C63532 * C1764 + C63378 * C2053 + C63533 * C4224 +
                       C63379 * C4550 + C63534 * C8753 + C63380 * C8999) *
                          C827 -
                      ((C63534 * C8757 + C63380 * C9003 + C63533 * C4230 +
                        C63379 * C4553 + C63532 * C1777 + C63378 * C2061) *
                           C821 +
                       (C63534 * C8754 + C63380 * C9000 + C63533 * C4223 +
                        C63379 * C4549 + C63532 * C1767 + C63378 * C2054) *
                           C826) +
                      (C63532 * C1776 + C63378 * C2062 + C63533 * C4231 +
                       C63379 * C4554 + C63534 * C8756 + C63380 * C9002) *
                          C139305) *
                         C139457 * C139286 * C139403) *
                        C139560 +
                    (((C63532 * C828 + C63378 * C1117 + C63533 * C833 +
                       C63379 * C1122 + C63534 * C5915 + C63380 * C6093) *
                          C827 -
                      ((C63534 * C5919 + C63380 * C6097 + C63533 * C847 +
                        C63379 * C1129 + C63532 * C841 + C63378 * C1125) *
                           C821 +
                       (C63534 * C5916 + C63380 * C6094 + C63533 * C832 +
                        C63379 * C1121 + C63532 * C831 + C63378 * C1118) *
                           C826) +
                      (C63532 * C840 + C63378 * C1126 + C63533 * C848 +
                       C63379 * C1130 + C63534 * C5918 + C63380 * C6096) *
                          C139305) *
                         C139457 * C139286 * C139561 +
                     ((C63532 * C4223 + C63378 * C4549 + C63533 * C8754 +
                       C63379 * C9000 + C63534 * C24129 + C63380 * C24463) *
                          C826 +
                      (C63532 * C4230 + C63378 * C4553 + C63533 * C8757 +
                       C63379 * C9003 + C63534 * C24131 + C63380 * C24465) *
                          C821 -
                      (C63534 * C24128 + C63380 * C24462 + C63533 * C8753 +
                       C63379 * C8999 + C63532 * C4224 + C63378 * C4550) *
                          C827 -
                      (C63534 * C24130 + C63380 * C24464 + C63533 * C8756 +
                       C63379 * C9002 + C63532 * C4231 + C63378 * C4554) *
                          C139305) *
                         C139457 * C139286 * C139403) *
                        C139377)) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[61] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C63532 * C107 + C63378 * C308 + C63533 * C831 +
                       C63379 * C1118 + C63534 * C832 + C63380 * C1121) *
                          C2783 +
                      (C63532 * C182 + C63378 * C394 + C63533 * C939 +
                       C63379 * C1231 + C63534 * C940 + C63380 * C1232) *
                          C139560 -
                      (C63534 * C5916 + C63380 * C6094 + C63533 * C832 +
                       C63379 * C1121 + C63532 * C831 + C63378 * C1118) *
                          C2784 -
                      (C63534 * C5982 + C63380 * C6148 + C63533 * C940 +
                       C63379 * C1232 + C63532 * C939 + C63378 * C1231) *
                          C139377) *
                         C139457 * C139286 * C821 +
                     ((C63532 * C828 + C63378 * C1117 + C63533 * C833 +
                       C63379 * C1122 + C63534 * C5915 + C63380 * C6093) *
                          C2784 -
                      ((C63534 * C941 + C63380 * C1234 + C63533 * C938 +
                        C63379 * C1233 + C63532 * C183 + C63378 * C395) *
                           C139560 +
                       (C63534 * C833 + C63380 * C1122 + C63533 * C828 +
                        C63379 * C1117 + C63532 * C108 + C63378 * C309) *
                           C2783) +
                      (C63532 * C938 + C63378 * C1233 + C63533 * C941 +
                       C63379 * C1234 + C63534 * C5981 + C63380 * C6149) *
                          C139377) *
                         C139457 * C139286 * C139305) *
                        C139561 +
                    (((C63532 * C4223 + C63378 * C4549 + C63533 * C8754 +
                       C63379 * C9000 + C63534 * C24129 + C63380 * C24463) *
                          C2784 -
                      ((C63534 * C8840 + C63380 * C9078 + C63533 * C4337 +
                        C63379 * C4667 + C63532 * C1873 + C63378 * C2170) *
                           C139560 +
                       (C63534 * C8754 + C63380 * C9000 + C63533 * C4223 +
                        C63379 * C4549 + C63532 * C1767 + C63378 * C2054) *
                           C2783) +
                      (C63532 * C4337 + C63378 * C4667 + C63533 * C8840 +
                       C63379 * C9078 + C63534 * C24247 + C63380 * C24564) *
                          C139377) *
                         C139457 * C139286 * C821 +
                     ((C63532 * C1764 + C63378 * C2053 + C63533 * C4224 +
                       C63379 * C4550 + C63534 * C8753 + C63380 * C8999) *
                          C2783 +
                      (C63532 * C1870 + C63378 * C2167 + C63533 * C4338 +
                       C63379 * C4668 + C63534 * C8839 + C63380 * C9079) *
                          C139560 -
                      (C63534 * C24128 + C63380 * C24462 + C63533 * C8753 +
                       C63379 * C8999 + C63532 * C4224 + C63378 * C4550) *
                          C2784 -
                      (C63534 * C24246 + C63380 * C24565 + C63533 * C8839 +
                       C63379 * C9079 + C63532 * C4338 + C63378 * C4668) *
                          C139377) *
                         C139457 * C139286 * C139305) *
                        C139403)) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[61] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C63532 * C107 + C63378 * C308 + C63533 * C831 +
                       C63379 * C1118 + C63534 * C832 + C63380 * C1121) *
                          C3607 +
                      (C63532 * C245 + C63378 * C474 + C63533 * C1029 +
                       C63379 * C1339 + C63534 * C1030 + C63380 * C1340) *
                          C139561 -
                      (C63534 * C8754 + C63380 * C9000 + C63533 * C4223 +
                       C63379 * C4549 + C63532 * C1767 + C63378 * C2054) *
                          C3608 -
                      (C63534 * C8920 + C63380 * C9155 + C63533 * C4443 +
                       C63379 * C4783 + C63532 * C1965 + C63378 * C2269) *
                          C139403) *
                         C139457 * C139286 * C139560 +
                     ((C63532 * C4223 + C63378 * C4549 + C63533 * C8754 +
                       C63379 * C9000 + C63534 * C24129 + C63380 * C24463) *
                          C3608 -
                      ((C63534 * C6038 + C63380 * C6203 + C63533 * C1030 +
                        C63379 * C1340 + C63532 * C1029 + C63378 * C1339) *
                           C139561 +
                       (C63534 * C5916 + C63380 * C6094 + C63533 * C832 +
                        C63379 * C1121 + C63532 * C831 + C63378 * C1118) *
                           C3607) +
                      (C63532 * C4443 + C63378 * C4783 + C63533 * C8920 +
                       C63379 * C9155 + C63534 * C24355 + C63380 * C24664) *
                          C139403) *
                         C139457 * C139286 * C139377) *
                        C821 +
                    (((C63532 * C1764 + C63378 * C2053 + C63533 * C4224 +
                       C63379 * C4550 + C63534 * C8753 + C63380 * C8999) *
                          C3608 -
                      ((C63534 * C1031 + C63380 * C1341 + C63533 * C1028 +
                        C63379 * C1338 + C63532 * C246 + C63378 * C475) *
                           C139561 +
                       (C63534 * C833 + C63380 * C1122 + C63533 * C828 +
                        C63379 * C1117 + C63532 * C108 + C63378 * C309) *
                           C3607) +
                      (C63532 * C1964 + C63378 * C2271 + C63533 * C4444 +
                       C63379 * C4784 + C63534 * C8919 + C63380 * C9156) *
                          C139403) *
                         C139457 * C139286 * C139560 +
                     ((C63532 * C828 + C63378 * C1117 + C63533 * C833 +
                       C63379 * C1122 + C63534 * C5915 + C63380 * C6093) *
                          C3607 +
                      (C63532 * C1028 + C63378 * C1338 + C63533 * C1031 +
                       C63379 * C1341 + C63534 * C6037 + C63380 * C6202) *
                          C139561 -
                      (C63534 * C24128 + C63380 * C24462 + C63533 * C8753 +
                       C63379 * C8999 + C63532 * C4224 + C63378 * C4550) *
                          C3608 -
                      (C63534 * C24354 + C63380 * C24665 + C63533 * C8919 +
                       C63379 * C9156 + C63532 * C4444 + C63378 * C4784) *
                          C139403) *
                         C139457 * C139286 * C139377) *
                        C139305)) /
                  (p * q * std::sqrt(p + q));
    d2eezx[61] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139457 * C555) * C826 +
             (C554 * C116 + C139457 * C561) * C821 - C584 * C827 -
             C585 * C139305) *
                C139286 * C63378 +
            (C15066 + C15067 - C15040 - C15041) * C139286 * C63379 +
            C64412 * C63380) *
               C139561 +
           ((C2408 * C827 -
             ((C554 * C1777 + C139457 * C2383) * C821 +
              (C554 * C1767 + C139457 * C2376) * C826) +
             C2409 * C139305) *
                C139286 * C63378 +
            (C19093 - (C19111 + C19112) + C19098) * C139286 * C63379 +
            (C67366 - (C67367 + C67368) + C67369) * C139286 * C63380) *
               C139403) *
              C139560 +
          (((C15040 - (C15067 + C15066) + C15041) * C139286 * C63378 +
            (C15046 - (C15068 + C15069) + C15051) * C139286 * C63379 +
            (C64406 - (C64407 + C64408) + C64409) * C139286 * C63380) *
               C139561 +
           ((C19112 + C19111 - C19093 - C19098) * C139286 * C63378 +
            (C67368 + C67367 - C67366 - C67369) * C139286 * C63379 +
            ((C554 * C24129 + C139457 * C24765) * C826 +
             (C554 * C24131 + C139457 * C24767) * C821 -
             (C554 * C24128 + C139457 * C24764) * C827 -
             (C554 * C24130 + C139457 * C24766) * C139305) *
                C139286 * C63380) *
               C139403) *
              C139377)) /
        (p * q * std::sqrt(p + q));
    d2eezy[61] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C554 * C107 + C139457 * C555) * C2783 +
                       (C554 * C182 + C139457 * C641) * C139560 -
                       C15060 * C2784 - C15179 * C139377) *
                          C139286 * C63378 +
                      (C15060 * C2783 + C15179 * C139560 - C15063 * C2784 -
                       C15180 * C139377) *
                          C139286 * C63379 +
                      (C15063 * C2783 + C15180 * C139560 - C20833 * C2784 -
                       C20907 * C139377) *
                          C139286 * C63380) *
                         C821 +
                     ((C3281 - (C3280 + C3279) + C3282) * C139286 * C63378 +
                      (C17098 - (C17097 + C17096) + C17099) * C139286 * C63379 +
                      (C15064 * C2784 - (C1579 * C139560 + C1476 * C2783) +
                       C15181 * C139377) *
                          C139286 * C63380) *
                         C139305) *
                        C139561 +
                    (((C19108 * C2784 -
                       ((C554 * C1873 + C139457 * C2492) * C139560 +
                        (C554 * C1767 + C139457 * C2376) * C2783) +
                       C19250 * C139377) *
                          C139286 * C63378 +
                      (C24775 * C2784 - (C19250 * C139560 + C19108 * C2783) +
                       C24881 * C139377) *
                          C139286 * C63379 +
                      ((C554 * C24129 + C139457 * C24765) * C2784 -
                       (C24881 * C139560 + C24775 * C2783) +
                       (C554 * C24247 + C139457 * C24876) * C139377) *
                          C139286 * C63380) *
                         C821 +
                     ((C5024 + C5023 - C5022 - C5034) * C139286 * C63378 +
                      (C19247 + C19246 - C19245 - C19252) * C139286 * C63379 +
                      (C19109 * C2783 + C19251 * C139560 -
                       (C554 * C24128 + C139457 * C24764) * C2784 -
                       (C554 * C24246 + C139457 * C24877) * C139377) *
                          C139286 * C63380) *
                         C139305) *
                        C139403)) /
                  (p * q * std::sqrt(p + q));
    d2eezz[61] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139457 * C555) * C3607 +
             (C554 * C245 + C139457 * C719) * C139561 -
             (C554 * C1767 + C139457 * C2376) * C3608 -
             (C554 * C1965 + C139457 * C2591) * C139403) *
                C139286 * C63378 +
            (C19383 + C19384 - C19385 - C19399) * C139286 * C63379 +
            (C24984 + C24983 - C24982 - C24988) * C139286 * C63380) *
               C139560 +
           ((C19385 - (C19384 + C19383) + C19399) * C139286 * C63378 +
            (C24982 - (C24983 + C24984) + C24988) * C139286 * C63379 +
            ((C554 * C24129 + C139457 * C24765) * C3608 -
             (C20979 * C139561 + C20833 * C3607) +
             (C554 * C24355 + C139457 * C24979) * C139403) *
                C139286 * C63380) *
               C139377) *
              C821 +
          (((C4110 - (C4109 + C4108) + C4111) * C139286 * C63378 +
            C19401 * C139286 * C63379 +
            (C19390 - (C19391 + C19392) + C19402) * C139286 * C63380) *
               C139560 +
           (C19400 * C139286 * C63378 +
            (C19392 + C19391 - C19390 - C19402) * C139286 * C63379 +
            (C15064 * C3607 + C15296 * C139561 -
             (C554 * C24128 + C139457 * C24764) * C3608 -
             (C554 * C24354 + C139457 * C24980) * C139403) *
                C139286 * C63380) *
               C139377) *
              C139305)) /
        (p * q * std::sqrt(p + q));
    d2eexx[62] +=
        (-std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139286 * C113) * C826 +
            (C63381 * C116 + C139286 * C125) * C821 -
            (C63381 * C108 + C139286 * C114) * C827 -
            (C63381 * C117 + C139286 * C126) * C139305) *
               C63378 +
           (C63896 + C63897 - C63898 - C63899) * C63379 + C63910 * C63380) *
              C139457 * C139339 * C823 +
          ((C63898 - (C63897 + C63896) + C63899) * C63378 +
           (C63902 - (C63901 + C63900) + C63903) * C63379 +
           (C63904 - (C63905 + C63906) + C63907) * C63380) *
              C139457 * C139339 * C824 +
          (C63910 * C63378 + (C63906 + C63905 - C63904 - C63907) * C63379 +
           ((C63381 * C20371 + C139286 * C20375) * C826 +
            (C63381 * C20373 + C139286 * C20377) * C821 -
            (C63381 * C20370 + C139286 * C20374) * C827 -
            (C63381 * C20372 + C139286 * C20376) * C139305) *
               C63380) *
              C139457 * C139339 * C825)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C63381 * C107 + C139286 * C113) * C103 +
           (C63381 * C116 + C139286 * C125) * C92 -
           (C63381 * C108 + C139286 * C114) * C104 -
           (C63381 * C117 + C139286 * C126) * C93 +
           (C63381 * C109 + C139286 * C115) * C105 +
           (C63381 * C118 + C139286 * C127) * C94 -
           (C63381 * C110 + C139286 * C119) * C106 -
           (C63381 * C120 + C139286 * C128) * C95) *
              C63378 +
          ((C63381 * C831 + C139286 * C842) * C103 +
           (C63381 * C841 + C139286 * C854) * C92 -
           (C63381 * C828 + C139286 * C836) * C104 -
           (C63381 * C840 + C139286 * C853) * C93 +
           (C63381 * C829 + C139286 * C837) * C105 +
           (C63381 * C839 + C139286 * C852) * C94 -
           (C63381 * C830 + C139286 * C838) * C106 -
           (C63381 * C843 + C139286 * C855) * C95) *
              C63379 +
          ((C63381 * C832 + C139286 * C844) * C103 +
           (C63381 * C847 + C139286 * C856) * C92 -
           (C63381 * C833 + C139286 * C845) * C104 -
           (C63381 * C848 + C139286 * C857) * C93 +
           (C63381 * C834 + C139286 * C846) * C105 +
           (C63381 * C849 + C139286 * C858) * C94 -
           (C63381 * C835 + C139286 * C850) * C106 -
           (C63381 * C851 + C139286 * C859) * C95) *
              C63380) *
         C139457 * C139339 * C139328) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139286 * C113) * C826 +
            (C63381 * C116 + C139286 * C125) * C821 -
            (C63381 * C108 + C139286 * C114) * C827 -
            (C63381 * C117 + C139286 * C126) * C139305) *
               C63378 +
           (C63896 + C63897 - C63898 - C63899) * C63379 + C63910 * C63380) *
              C139457 * C1761 +
          (((C63381 * C1764 + C139286 * C1772) * C827 -
            ((C63381 * C1777 + C139286 * C1790) * C821 +
             (C63381 * C1767 + C139286 * C1778) * C826) +
            (C63381 * C1776 + C139286 * C1789) * C139305) *
               C63378 +
           ((C63381 * C4224 + C139286 * C4228) * C827 -
            ((C63381 * C4230 + C139286 * C4235) * C821 +
             (C63381 * C4223 + C139286 * C4227) * C826) +
            (C63381 * C4231 + C139286 * C4236) * C139305) *
               C63379 +
           ((C63381 * C8753 + C139286 * C8759) * C827 -
            ((C63381 * C8757 + C139286 * C8763) * C821 +
             (C63381 * C8754 + C139286 * C8760) * C826) +
            (C63381 * C8756 + C139286 * C8762) * C139305) *
               C63380) *
              C139457 * C1762 +
          (((C63381 * C1768 + C139286 * C1780) * C826 +
            (C63381 * C1783 + C139286 * C1792) * C821 -
            (C63381 * C1769 + C139286 * C1781) * C827 -
            (C63381 * C1784 + C139286 * C1793) * C139305) *
               C63378 +
           ((C63381 * C6442 + C139286 * C6448) * C826 +
            (C63381 * C6445 + C139286 * C6451) * C821 -
            (C63381 * C6441 + C139286 * C6447) * C827 -
            (C63381 * C6444 + C139286 * C6450) * C139305) *
               C63379 +
           ((C63381 * C21079 + C139286 * C21083) * C826 +
            (C63381 * C21081 + C139286 * C21085) * C821 -
            (C63381 * C21078 + C139286 * C21082) * C827 -
            (C63381 * C21080 + C139286 * C21084) * C139305) *
               C63380) *
              C139457 * C1763) *
         C139328) /
            (p * q * std::sqrt(p + q));
    d2eexy[62] +=
        (-std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139286 * C113) * C934 +
            (C63381 * C182 + C139286 * C188) * C823 - C63884 * C935 -
            C63997 * C824 + C63888 * C936 + C63998 * C825) *
               C63378 +
           (C63884 * C934 + C63997 * C823 - C63888 * C935 - C63998 * C824 +
            C63894 * C936 + C63999 * C825) *
               C63379 +
           (C63888 * C934 + C63998 * C823 - C63894 * C935 - C63999 * C824 +
            (C63381 * C20371 + C139286 * C20375) * C936 +
            (C63381 * C20457 + C139286 * C20459) * C825) *
               C63380) *
              C139457 * C821 +
          ((C63886 * C935 -
            ((C63381 * C183 + C139286 * C189) * C823 +
             (C63381 * C108 + C139286 * C114) * C934) +
            C64000 * C824 - C63890 * C936 - C64001 * C825) *
               C63378 +
           (C63890 * C935 - (C64000 * C823 + C63886 * C934) + C64001 * C824 -
            C63892 * C936 - C64002 * C825) *
               C63379 +
           (C63892 * C935 - (C64001 * C823 + C63890 * C934) + C64002 * C824 -
            (C63381 * C20370 + C139286 * C20374) * C936 -
            (C63381 * C20456 + C139286 * C20458) * C825) *
               C63380) *
              C139457 * C139305) *
         C139339) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139286 * C113) * C181 +
            (C63381 * C182 + C139286 * C188) * C139328) *
               C63378 +
           ((C63381 * C831 + C139286 * C842) * C181 +
            (C63381 * C939 + C139286 * C947) * C139328) *
               C63379 +
           ((C63381 * C832 + C139286 * C844) * C181 +
            (C63381 * C940 + C139286 * C948) * C139328) *
               C63380) *
              C139457 * C92 -
          (((C63381 * C941 + C139286 * C949) * C139328 +
            (C63381 * C833 + C139286 * C845) * C181) *
               C63380 +
           ((C63381 * C938 + C139286 * C946) * C139328 +
            (C63381 * C828 + C139286 * C836) * C181) *
               C63379 +
           ((C63381 * C183 + C139286 * C189) * C139328 +
            (C63381 * C108 + C139286 * C114) * C181) *
               C63378) *
              C139457 * C93 +
          (((C63381 * C109 + C139286 * C115) * C181 +
            (C63381 * C184 + C139286 * C190) * C139328) *
               C63378 +
           ((C63381 * C829 + C139286 * C837) * C181 +
            (C63381 * C937 + C139286 * C945) * C139328) *
               C63379 +
           ((C63381 * C834 + C139286 * C846) * C181 +
            (C63381 * C942 + C139286 * C950) * C139328) *
               C63380) *
              C139457 * C94 -
          (((C63381 * C944 + C139286 * C952) * C139328 +
            (C63381 * C835 + C139286 * C850) * C181) *
               C63380 +
           ((C63381 * C943 + C139286 * C951) * C139328 +
            (C63381 * C830 + C139286 * C838) * C181) *
               C63379 +
           ((C63381 * C185 + C139286 * C191) * C139328 +
            (C63381 * C110 + C139286 * C119) * C181) *
               C63378) *
              C139457 * C95) *
         C139339) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139286 * C113) * C181 +
             (C63381 * C182 + C139286 * C188) * C139328) *
                C63378 +
            (C63884 * C181 + C63997 * C139328) * C63379 +
            (C63888 * C181 + C63998 * C139328) * C63380) *
               C139457 * C821 -
           ((C64001 * C139328 + C63890 * C181) * C63380 +
            (C64000 * C139328 + C63886 * C181) * C63379 +
            ((C63381 * C183 + C139286 * C189) * C139328 +
             (C63381 * C108 + C139286 * C114) * C181) *
                C63378) *
               C139457 * C139305) *
              C1761 +
          ((((C63381 * C1764 + C139286 * C1772) * C181 +
             (C63381 * C1870 + C139286 * C1878) * C139328) *
                C63378 +
            ((C63381 * C4224 + C139286 * C4228) * C181 +
             (C63381 * C4338 + C139286 * C4342) * C139328) *
                C63379 +
            ((C63381 * C8753 + C139286 * C8759) * C181 +
             (C63381 * C8839 + C139286 * C8842) * C139328) *
                C63380) *
               C139457 * C139305 -
           (((C63381 * C8840 + C139286 * C8843) * C139328 +
             (C63381 * C8754 + C139286 * C8760) * C181) *
                C63380 +
            ((C63381 * C4337 + C139286 * C4341) * C139328 +
             (C63381 * C4223 + C139286 * C4227) * C181) *
                C63379 +
            ((C63381 * C1873 + C139286 * C1881) * C139328 +
             (C63381 * C1767 + C139286 * C1778) * C181) *
                C63378) *
               C139457 * C821) *
              C1762 +
          ((((C63381 * C1768 + C139286 * C1780) * C181 +
             (C63381 * C1874 + C139286 * C1882) * C139328) *
                C63378 +
            ((C63381 * C6442 + C139286 * C6448) * C181 +
             (C63381 * C6528 + C139286 * C6531) * C139328) *
                C63379 +
            ((C63381 * C21079 + C139286 * C21083) * C181 +
             (C63381 * C21197 + C139286 * C21199) * C139328) *
                C63380) *
               C139457 * C821 -
           (((C63381 * C21196 + C139286 * C21198) * C139328 +
             (C63381 * C21078 + C139286 * C21082) * C181) *
                C63380 +
            ((C63381 * C6527 + C139286 * C6530) * C139328 +
             (C63381 * C6441 + C139286 * C6447) * C181) *
                C63379 +
            ((C63381 * C1875 + C139286 * C1883) * C139328 +
             (C63381 * C1769 + C139286 * C1781) * C181) *
                C63378) *
               C139457 * C139305) *
              C1763)) /
            (p * q * std::sqrt(p + q));
    d2eexz[62] +=
        (-std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139286 * C113) * C244 +
             (C63381 * C245 + C139286 * C251) * C139339) *
                C63378 +
            (C64077 + C64101) * C63379 + C64107 * C63380) *
               C139457 * C823 -
           ((C64103 + C64085) * C63380 + (C64102 + C64080) * C63379 +
            (C64101 + C64077) * C63378) *
               C139457 * C824 +
           (C64107 * C63378 + (C64085 + C64103) * C63379 +
            ((C63381 * C20371 + C139286 * C20375) * C244 +
             (C63381 * C20533 + C139286 * C20535) * C139339) *
                C63380) *
               C139457 * C825) *
              C821 +
          (((C64086 + C64104) * C63378 + (C64089 + C64105) * C63379 +
            (C64092 + C64106) * C63380) *
               C139457 * C824 -
           (C64108 * C63380 + (C64104 + C64086) * C63379 +
            ((C63381 * C246 + C139286 * C252) * C139339 +
             (C63381 * C108 + C139286 * C114) * C244) *
                C63378) *
               C139457 * C823 -
           (((C63381 * C20532 + C139286 * C20534) * C139339 +
             (C63381 * C20370 + C139286 * C20374) * C244) *
                C63380 +
            (C64106 + C64092) * C63379 + C64108 * C63378) *
               C139457 * C825) *
              C139305)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * ((((C63381 * C107 + C139286 * C113) * C244 +
                                (C63381 * C245 + C139286 * C251) * C139339) *
                                   C63378 +
                               ((C63381 * C831 + C139286 * C842) * C244 +
                                (C63381 * C1029 + C139286 * C1037) * C139339) *
                                   C63379 +
                               ((C63381 * C832 + C139286 * C844) * C244 +
                                (C63381 * C1030 + C139286 * C1038) * C139339) *
                                   C63380) *
                                  C139457 * C139328 * C92 -
                              (((C63381 * C1031 + C139286 * C1039) * C139339 +
                                (C63381 * C833 + C139286 * C845) * C244) *
                                   C63380 +
                               ((C63381 * C1028 + C139286 * C1036) * C139339 +
                                (C63381 * C828 + C139286 * C836) * C244) *
                                   C63379 +
                               ((C63381 * C246 + C139286 * C252) * C139339 +
                                (C63381 * C108 + C139286 * C114) * C244) *
                                   C63378) *
                                  C139457 * C139328 * C93 +
                              (((C63381 * C109 + C139286 * C115) * C244 +
                                (C63381 * C247 + C139286 * C253) * C139339) *
                                   C63378 +
                               ((C63381 * C829 + C139286 * C837) * C244 +
                                (C63381 * C1027 + C139286 * C1035) * C139339) *
                                   C63379 +
                               ((C63381 * C834 + C139286 * C846) * C244 +
                                (C63381 * C1032 + C139286 * C1040) * C139339) *
                                   C63380) *
                                  C139457 * C139328 * C94 -
                              (((C63381 * C1034 + C139286 * C1042) * C139339 +
                                (C63381 * C835 + C139286 * C850) * C244) *
                                   C63380 +
                               ((C63381 * C1033 + C139286 * C1041) * C139339 +
                                (C63381 * C830 + C139286 * C838) * C244) *
                                   C63379 +
                               ((C63381 * C248 + C139286 * C254) * C139339 +
                                (C63381 * C110 + C139286 * C119) * C244) *
                                   C63378) *
                                  C139457 * C139328 * C95)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139286 * C113) * C1960 +
            (C63381 * C245 + C139286 * C251) * C1761 -
            (C63381 * C1767 + C139286 * C1778) * C1961 -
            (C63381 * C1965 + C139286 * C1973) * C1762 +
            (C63381 * C1768 + C139286 * C1780) * C1962 +
            (C63381 * C1966 + C139286 * C1974) * C1763) *
               C63378 +
           (C63884 * C1960 + C64095 * C1761 -
            (C63381 * C4223 + C139286 * C4227) * C1961 -
            (C63381 * C4443 + C139286 * C4447) * C1762 +
            (C63381 * C6442 + C139286 * C6448) * C1962 +
            (C63381 * C6608 + C139286 * C6611) * C1763) *
               C63379 +
           (C63888 * C1960 + C64096 * C1761 -
            (C63381 * C8754 + C139286 * C8760) * C1961 -
            (C63381 * C8920 + C139286 * C8923) * C1762 +
            (C63381 * C21079 + C139286 * C21083) * C1962 +
            (C63381 * C21305 + C139286 * C21307) * C1763) *
               C63380) *
              C139457 * C139328 * C821 +
          (((C63381 * C1764 + C139286 * C1772) * C1961 -
            ((C63381 * C246 + C139286 * C252) * C1761 +
             (C63381 * C108 + C139286 * C114) * C1960) +
            (C63381 * C1964 + C139286 * C1972) * C1762 -
            (C63381 * C1769 + C139286 * C1781) * C1962 -
            (C63381 * C1967 + C139286 * C1975) * C1763) *
               C63378 +
           ((C63381 * C4224 + C139286 * C4228) * C1961 -
            (C64098 * C1761 + C63886 * C1960) +
            (C63381 * C4444 + C139286 * C4448) * C1762 -
            (C63381 * C6441 + C139286 * C6447) * C1962 -
            (C63381 * C6607 + C139286 * C6610) * C1763) *
               C63379 +
           ((C63381 * C8753 + C139286 * C8759) * C1961 -
            (C64099 * C1761 + C63890 * C1960) +
            (C63381 * C8919 + C139286 * C8922) * C1762 -
            (C63381 * C21078 + C139286 * C21082) * C1962 -
            (C63381 * C21304 + C139286 * C21306) * C1763) *
               C63380) *
              C139457 * C139328 * C139305)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[62] += (-std::pow(Pi, 2.5) *
                   (((C63532 * C107 + C63378 * C308 + C63533 * C831 +
                      C63379 * C1118 + C63534 * C832 + C63380 * C1121) *
                         C826 +
                     (C63532 * C116 + C63378 * C314 + C63533 * C841 +
                      C63379 * C1125 + C63534 * C847 + C63380 * C1129) *
                         C821 -
                     (C63534 * C833 + C63380 * C1122 + C63533 * C828 +
                      C63379 * C1117 + C63532 * C108 + C63378 * C309) *
                         C827 -
                     (C63534 * C848 + C63380 * C1130 + C63533 * C840 +
                      C63379 * C1126 + C63532 * C117 + C63378 * C315) *
                         C139305) *
                        C139457 * C139286 * C139339 * C823 +
                    ((C63532 * C828 + C63378 * C1117 + C63533 * C833 +
                      C63379 * C1122 + C63534 * C5915 + C63380 * C6093) *
                         C827 -
                     ((C63534 * C5919 + C63380 * C6097 + C63533 * C847 +
                       C63379 * C1129 + C63532 * C841 + C63378 * C1125) *
                          C821 +
                      (C63534 * C5916 + C63380 * C6094 + C63533 * C832 +
                       C63379 * C1121 + C63532 * C831 + C63378 * C1118) *
                          C826) +
                     (C63532 * C840 + C63378 * C1126 + C63533 * C848 +
                      C63379 * C1130 + C63534 * C5918 + C63380 * C6096) *
                         C139305) *
                        C139457 * C139286 * C139339 * C824 +
                    ((C63532 * C832 + C63378 * C1121 + C63533 * C5916 +
                      C63379 * C6094 + C63534 * C20371 + C63380 * C20609) *
                         C826 +
                     (C63532 * C847 + C63378 * C1129 + C63533 * C5919 +
                      C63379 * C6097 + C63534 * C20373 + C63380 * C20611) *
                         C821 -
                     (C63534 * C20370 + C63380 * C20608 + C63533 * C5915 +
                      C63379 * C6093 + C63532 * C833 + C63378 * C1122) *
                         C827 -
                     (C63534 * C20372 + C63380 * C20610 + C63533 * C5918 +
                      C63379 * C6096 + C63532 * C848 + C63378 * C1130) *
                         C139305) *
                        C139457 * C139286 * C139339 * C825)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::pow(Pi, 2.5) *
                   ((C63532 * C107 + C63378 * C308 + C63533 * C831 +
                     C63379 * C1118 + C63534 * C832 + C63380 * C1121) *
                        C103 +
                    (C63532 * C116 + C63378 * C314 + C63533 * C841 +
                     C63379 * C1125 + C63534 * C847 + C63380 * C1129) *
                        C92 -
                    (C63534 * C833 + C63380 * C1122 + C63533 * C828 +
                     C63379 * C1117 + C63532 * C108 + C63378 * C309) *
                        C104 -
                    (C63534 * C848 + C63380 * C1130 + C63533 * C840 +
                     C63379 * C1126 + C63532 * C117 + C63378 * C315) *
                        C93 +
                    (C63532 * C109 + C63378 * C310 + C63533 * C829 +
                     C63379 * C1119 + C63534 * C834 + C63380 * C1123) *
                        C105 +
                    (C63532 * C118 + C63378 * C316 + C63533 * C839 +
                     C63379 * C1127 + C63534 * C849 + C63380 * C1131) *
                        C94 -
                    (C63534 * C835 + C63380 * C1124 + C63533 * C830 +
                     C63379 * C1120 + C63532 * C110 + C63378 * C311) *
                        C106 -
                    (C63534 * C851 + C63380 * C1132 + C63533 * C843 +
                     C63379 * C1128 + C63532 * C120 + C63378 * C317) *
                        C95) *
                   C139457 * C139286 * C139339 * C139328) /
                      (p * q * std::sqrt(p + q)) +
                  (2 * std::pow(Pi, 2.5) *
                   (((C63532 * C107 + C63378 * C308 + C63533 * C831 +
                      C63379 * C1118 + C63534 * C832 + C63380 * C1121) *
                         C826 +
                     (C63532 * C116 + C63378 * C314 + C63533 * C841 +
                      C63379 * C1125 + C63534 * C847 + C63380 * C1129) *
                         C821 -
                     (C63534 * C833 + C63380 * C1122 + C63533 * C828 +
                      C63379 * C1117 + C63532 * C108 + C63378 * C309) *
                         C827 -
                     (C63534 * C848 + C63380 * C1130 + C63533 * C840 +
                      C63379 * C1126 + C63532 * C117 + C63378 * C315) *
                         C139305) *
                        C139457 * C139286 * C1761 +
                    ((C63532 * C1764 + C63378 * C2053 + C63533 * C4224 +
                      C63379 * C4550 + C63534 * C8753 + C63380 * C8999) *
                         C827 -
                     ((C63534 * C8757 + C63380 * C9003 + C63533 * C4230 +
                       C63379 * C4553 + C63532 * C1777 + C63378 * C2061) *
                          C821 +
                      (C63534 * C8754 + C63380 * C9000 + C63533 * C4223 +
                       C63379 * C4549 + C63532 * C1767 + C63378 * C2054) *
                          C826) +
                     (C63532 * C1776 + C63378 * C2062 + C63533 * C4231 +
                      C63379 * C4554 + C63534 * C8756 + C63380 * C9002) *
                         C139305) *
                        C139457 * C139286 * C1762 +
                    ((C63532 * C1768 + C63378 * C2057 + C63533 * C6442 +
                      C63379 * C6688 + C63534 * C21079 + C63380 * C21413) *
                         C826 +
                     (C63532 * C1783 + C63378 * C2065 + C63533 * C6445 +
                      C63379 * C6691 + C63534 * C21081 + C63380 * C21415) *
                         C821 -
                     (C63534 * C21078 + C63380 * C21412 + C63533 * C6441 +
                      C63379 * C6687 + C63532 * C1769 + C63378 * C2058) *
                         C827 -
                     (C63534 * C21080 + C63380 * C21414 + C63533 * C6444 +
                      C63379 * C6690 + C63532 * C1784 + C63378 * C2066) *
                         C139305) *
                        C139457 * C139286 * C1763) *
                   C139328) /
                      (p * q * std::sqrt(p + q));
    d2eeyy[62] += (-std::pow(Pi, 2.5) *
                   (((C63532 * C107 + C63378 * C308 + C63533 * C831 +
                      C63379 * C1118 + C63534 * C832 + C63380 * C1121) *
                         C934 +
                     (C63532 * C182 + C63378 * C394 + C63533 * C939 +
                      C63379 * C1231 + C63534 * C940 + C63380 * C1232) *
                         C823 -
                     (C63534 * C5916 + C63380 * C6094 + C63533 * C832 +
                      C63379 * C1121 + C63532 * C831 + C63378 * C1118) *
                         C935 -
                     (C63534 * C5982 + C63380 * C6148 + C63533 * C940 +
                      C63379 * C1232 + C63532 * C939 + C63378 * C1231) *
                         C824 +
                     (C63532 * C832 + C63378 * C1121 + C63533 * C5916 +
                      C63379 * C6094 + C63534 * C20371 + C63380 * C20609) *
                         C936 +
                     (C63532 * C940 + C63378 * C1232 + C63533 * C5982 +
                      C63379 * C6148 + C63534 * C20457 + C63380 * C20678) *
                         C825) *
                        C139457 * C139286 * C821 +
                    ((C63532 * C828 + C63378 * C1117 + C63533 * C833 +
                      C63379 * C1122 + C63534 * C5915 + C63380 * C6093) *
                         C935 -
                     ((C63534 * C941 + C63380 * C1234 + C63533 * C938 +
                       C63379 * C1233 + C63532 * C183 + C63378 * C395) *
                          C823 +
                      (C63534 * C833 + C63380 * C1122 + C63533 * C828 +
                       C63379 * C1117 + C63532 * C108 + C63378 * C309) *
                          C934) +
                     (C63532 * C938 + C63378 * C1233 + C63533 * C941 +
                      C63379 * C1234 + C63534 * C5981 + C63380 * C6149) *
                         C824 -
                     (C63534 * C20370 + C63380 * C20608 + C63533 * C5915 +
                      C63379 * C6093 + C63532 * C833 + C63378 * C1122) *
                         C936 -
                     (C63534 * C20456 + C63380 * C20679 + C63533 * C5981 +
                      C63379 * C6149 + C63532 * C941 + C63378 * C1234) *
                         C825) *
                        C139457 * C139286 * C139305) *
                   C139339) /
                      (p * q * std::sqrt(p + q)) -
                  (std::pow(Pi, 2.5) *
                   (((C63532 * C107 + C63378 * C308 + C63533 * C831 +
                      C63379 * C1118 + C63534 * C832 + C63380 * C1121) *
                         C181 +
                     (C63532 * C182 + C63378 * C394 + C63533 * C939 +
                      C63379 * C1231 + C63534 * C940 + C63380 * C1232) *
                         C139328) *
                        C139457 * C139286 * C92 -
                    ((C63534 * C941 + C63380 * C1234 + C63533 * C938 +
                      C63379 * C1233 + C63532 * C183 + C63378 * C395) *
                         C139328 +
                     (C63534 * C833 + C63380 * C1122 + C63533 * C828 +
                      C63379 * C1117 + C63532 * C108 + C63378 * C309) *
                         C181) *
                        C139457 * C139286 * C93 +
                    ((C63532 * C109 + C63378 * C310 + C63533 * C829 +
                      C63379 * C1119 + C63534 * C834 + C63380 * C1123) *
                         C181 +
                     (C63532 * C184 + C63378 * C396 + C63533 * C937 +
                      C63379 * C1235 + C63534 * C942 + C63380 * C1236) *
                         C139328) *
                        C139457 * C139286 * C94 -
                    ((C63534 * C944 + C63380 * C1238 + C63533 * C943 +
                      C63379 * C1237 + C63532 * C185 + C63378 * C397) *
                         C139328 +
                     (C63534 * C835 + C63380 * C1124 + C63533 * C830 +
                      C63379 * C1120 + C63532 * C110 + C63378 * C311) *
                         C181) *
                        C139457 * C139286 * C95) *
                   C139339) /
                      (p * q * std::sqrt(p + q)) +
                  (2 * std::pow(Pi, 2.5) *
                   ((((C63532 * C107 + C63378 * C308 + C63533 * C831 +
                       C63379 * C1118 + C63534 * C832 + C63380 * C1121) *
                          C181 +
                      (C63532 * C182 + C63378 * C394 + C63533 * C939 +
                       C63379 * C1231 + C63534 * C940 + C63380 * C1232) *
                          C139328) *
                         C139457 * C139286 * C821 -
                     ((C63534 * C941 + C63380 * C1234 + C63533 * C938 +
                       C63379 * C1233 + C63532 * C183 + C63378 * C395) *
                          C139328 +
                      (C63534 * C833 + C63380 * C1122 + C63533 * C828 +
                       C63379 * C1117 + C63532 * C108 + C63378 * C309) *
                          C181) *
                         C139457 * C139286 * C139305) *
                        C1761 +
                    (((C63532 * C1764 + C63378 * C2053 + C63533 * C4224 +
                       C63379 * C4550 + C63534 * C8753 + C63380 * C8999) *
                          C181 +
                      (C63532 * C1870 + C63378 * C2167 + C63533 * C4338 +
                       C63379 * C4668 + C63534 * C8839 + C63380 * C9079) *
                          C139328) *
                         C139457 * C139286 * C139305 -
                     ((C63534 * C8840 + C63380 * C9078 + C63533 * C4337 +
                       C63379 * C4667 + C63532 * C1873 + C63378 * C2170) *
                          C139328 +
                      (C63534 * C8754 + C63380 * C9000 + C63533 * C4223 +
                       C63379 * C4549 + C63532 * C1767 + C63378 * C2054) *
                          C181) *
                         C139457 * C139286 * C821) *
                        C1762 +
                    (((C63532 * C1768 + C63378 * C2057 + C63533 * C6442 +
                       C63379 * C6688 + C63534 * C21079 + C63380 * C21413) *
                          C181 +
                      (C63532 * C1874 + C63378 * C2171 + C63533 * C6528 +
                       C63379 * C6766 + C63534 * C21197 + C63380 * C21514) *
                          C139328) *
                         C139457 * C139286 * C821 -
                     ((C63534 * C21196 + C63380 * C21515 + C63533 * C6527 +
                       C63379 * C6767 + C63532 * C1875 + C63378 * C2172) *
                          C139328 +
                      (C63534 * C21078 + C63380 * C21412 + C63533 * C6441 +
                       C63379 * C6687 + C63532 * C1769 + C63378 * C2058) *
                          C181) *
                         C139457 * C139286 * C139305) *
                        C1763)) /
                      (p * q * std::sqrt(p + q));
    d2eeyz[62] += (-std::pow(Pi, 2.5) *
                   ((((C63532 * C107 + C63378 * C308 + C63533 * C831 +
                       C63379 * C1118 + C63534 * C832 + C63380 * C1121) *
                          C244 +
                      (C63532 * C245 + C63378 * C474 + C63533 * C1029 +
                       C63379 * C1339 + C63534 * C1030 + C63380 * C1340) *
                          C139339) *
                         C139457 * C139286 * C823 -
                     ((C63534 * C6038 + C63380 * C6203 + C63533 * C1030 +
                       C63379 * C1340 + C63532 * C1029 + C63378 * C1339) *
                          C139339 +
                      (C63534 * C5916 + C63380 * C6094 + C63533 * C832 +
                       C63379 * C1121 + C63532 * C831 + C63378 * C1118) *
                          C244) *
                         C139457 * C139286 * C824 +
                     ((C63532 * C832 + C63378 * C1121 + C63533 * C5916 +
                       C63379 * C6094 + C63534 * C20371 + C63380 * C20609) *
                          C244 +
                      (C63532 * C1030 + C63378 * C1340 + C63533 * C6038 +
                       C63379 * C6203 + C63534 * C20533 + C63380 * C20747) *
                          C139339) *
                         C139457 * C139286 * C825) *
                        C821 +
                    (((C63532 * C828 + C63378 * C1117 + C63533 * C833 +
                       C63379 * C1122 + C63534 * C5915 + C63380 * C6093) *
                          C244 +
                      (C63532 * C1028 + C63378 * C1338 + C63533 * C1031 +
                       C63379 * C1341 + C63534 * C6037 + C63380 * C6202) *
                          C139339) *
                         C139457 * C139286 * C824 -
                     ((C63534 * C1031 + C63380 * C1341 + C63533 * C1028 +
                       C63379 * C1338 + C63532 * C246 + C63378 * C475) *
                          C139339 +
                      (C63534 * C833 + C63380 * C1122 + C63533 * C828 +
                       C63379 * C1117 + C63532 * C108 + C63378 * C309) *
                          C244) *
                         C139457 * C139286 * C823 -
                     ((C63534 * C20532 + C63380 * C20746 + C63533 * C6037 +
                       C63379 * C6202 + C63532 * C1031 + C63378 * C1341) *
                          C139339 +
                      (C63534 * C20370 + C63380 * C20608 + C63533 * C5915 +
                       C63379 * C6093 + C63532 * C833 + C63378 * C1122) *
                          C244) *
                         C139457 * C139286 * C825) *
                        C139305)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::pow(Pi, 2.5) *
                   (((C63532 * C107 + C63378 * C308 + C63533 * C831 +
                      C63379 * C1118 + C63534 * C832 + C63380 * C1121) *
                         C244 +
                     (C63532 * C245 + C63378 * C474 + C63533 * C1029 +
                      C63379 * C1339 + C63534 * C1030 + C63380 * C1340) *
                         C139339) *
                        C139457 * C139286 * C139328 * C92 -
                    ((C63534 * C1031 + C63380 * C1341 + C63533 * C1028 +
                      C63379 * C1338 + C63532 * C246 + C63378 * C475) *
                         C139339 +
                     (C63534 * C833 + C63380 * C1122 + C63533 * C828 +
                      C63379 * C1117 + C63532 * C108 + C63378 * C309) *
                         C244) *
                        C139457 * C139286 * C139328 * C93 +
                    ((C63532 * C109 + C63378 * C310 + C63533 * C829 +
                      C63379 * C1119 + C63534 * C834 + C63380 * C1123) *
                         C244 +
                     (C63532 * C247 + C63378 * C476 + C63533 * C1027 +
                      C63379 * C1337 + C63534 * C1032 + C63380 * C1342) *
                         C139339) *
                        C139457 * C139286 * C139328 * C94 -
                    ((C63534 * C1034 + C63380 * C1344 + C63533 * C1033 +
                      C63379 * C1343 + C63532 * C248 + C63378 * C477) *
                         C139339 +
                     (C63534 * C835 + C63380 * C1124 + C63533 * C830 +
                      C63379 * C1120 + C63532 * C110 + C63378 * C311) *
                         C244) *
                        C139457 * C139286 * C139328 * C95)) /
                      (p * q * std::sqrt(p + q)) +
                  (2 * std::pow(Pi, 2.5) *
                   (((C63532 * C107 + C63378 * C308 + C63533 * C831 +
                      C63379 * C1118 + C63534 * C832 + C63380 * C1121) *
                         C1960 +
                     (C63532 * C245 + C63378 * C474 + C63533 * C1029 +
                      C63379 * C1339 + C63534 * C1030 + C63380 * C1340) *
                         C1761 -
                     (C63534 * C8754 + C63380 * C9000 + C63533 * C4223 +
                      C63379 * C4549 + C63532 * C1767 + C63378 * C2054) *
                         C1961 -
                     (C63534 * C8920 + C63380 * C9155 + C63533 * C4443 +
                      C63379 * C4783 + C63532 * C1965 + C63378 * C2269) *
                         C1762 +
                     (C63532 * C1768 + C63378 * C2057 + C63533 * C6442 +
                      C63379 * C6688 + C63534 * C21079 + C63380 * C21413) *
                         C1962 +
                     (C63532 * C1966 + C63378 * C2270 + C63533 * C6608 +
                      C63379 * C6843 + C63534 * C21305 + C63380 * C21614) *
                         C1763) *
                        C139457 * C139286 * C139328 * C821 +
                    ((C63532 * C1764 + C63378 * C2053 + C63533 * C4224 +
                      C63379 * C4550 + C63534 * C8753 + C63380 * C8999) *
                         C1961 -
                     ((C63534 * C1031 + C63380 * C1341 + C63533 * C1028 +
                       C63379 * C1338 + C63532 * C246 + C63378 * C475) *
                          C1761 +
                      (C63534 * C833 + C63380 * C1122 + C63533 * C828 +
                       C63379 * C1117 + C63532 * C108 + C63378 * C309) *
                          C1960) +
                     (C63532 * C1964 + C63378 * C2271 + C63533 * C4444 +
                      C63379 * C4784 + C63534 * C8919 + C63380 * C9156) *
                         C1762 -
                     (C63534 * C21078 + C63380 * C21412 + C63533 * C6441 +
                      C63379 * C6687 + C63532 * C1769 + C63378 * C2058) *
                         C1962 -
                     (C63534 * C21304 + C63380 * C21615 + C63533 * C6607 +
                      C63379 * C6844 + C63532 * C1967 + C63378 * C2272) *
                         C1763) *
                        C139457 * C139286 * C139328 * C139305)) /
                      (p * q * std::sqrt(p + q));
    d2eezx[62] +=
        (-std::pow(Pi, 2.5) *
         ((((C554 * C107 + C139457 * C555) * C826 +
            (C554 * C116 + C139457 * C561) * C821 - C584 * C827 -
            C585 * C139305) *
               C139286 * C63378 +
           (C15066 + C15067 - C15040 - C15041) * C139286 * C63379 +
           C64412 * C63380) *
              C139339 * C823 +
          ((C15040 - (C15067 + C15066) + C15041) * C139286 * C63378 +
           (C15046 - (C15068 + C15069) + C15051) * C139286 * C63379 +
           (C64406 - (C64407 + C64408) + C64409) * C139286 * C63380) *
              C139339 * C824 +
          (C64412 * C63378 +
           (C64408 + C64407 - C64406 - C64409) * C139286 * C63379 +
           ((C554 * C20371 + C139457 * C20815) * C826 +
            (C554 * C20373 + C139457 * C20817) * C821 -
            (C554 * C20370 + C139457 * C20814) * C827 -
            (C554 * C20372 + C139457 * C20816) * C139305) *
               C139286 * C63380) *
              C139339 * C825)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C554 * C107 + C139457 * C555) * C103 +
           (C554 * C116 + C139457 * C561) * C92 - C584 * C104 - C585 * C93 +
           C586 * C105 + C587 * C94 - C588 * C106 - C589 * C95) *
              C139286 * C63378 +
          (C15060 * C103 + C15061 * C92 - C1472 * C104 - C1473 * C93 +
           C1474 * C105 + C1475 * C94 - C3202 * C106 - C3203 * C95) *
              C139286 * C63379 +
          (C15063 * C103 + C15062 * C92 - C1476 * C104 - C1477 * C93 +
           C1478 * C105 + C1479 * C94 - (C554 * C835 + C139457 * C1446) * C106 -
           (C554 * C851 + C139457 * C1454) * C95) *
              C139286 * C63380) *
         C139339 * C139328) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C139457 * C555) * C826 +
            (C554 * C116 + C139457 * C561) * C821 - C584 * C827 -
            C585 * C139305) *
               C139286 * C63378 +
           (C15066 + C15067 - C15040 - C15041) * C139286 * C63379 +
           C64412 * C63380) *
              C1761 +
          ((C2408 * C827 -
            ((C554 * C1777 + C139457 * C2383) * C821 +
             (C554 * C1767 + C139457 * C2376) * C826) +
            C2409 * C139305) *
               C139286 * C63378 +
           (C19093 - (C19111 + C19112) + C19098) * C139286 * C63379 +
           (C19109 * C827 - (C24776 * C821 + C24775 * C826) +
            C19110 * C139305) *
               C139286 * C63380) *
              C1762 +
          (((C554 * C1768 + C139457 * C2379) * C826 +
            (C554 * C1783 + C139457 * C2387) * C821 - C2412 * C827 -
            C2413 * C139305) *
               C139286 * C63378 +
           (C21729 * C826 + C21730 * C821 - C16038 * C827 - C16039 * C139305) *
               C139286 * C63379 +
           ((C554 * C21079 + C139457 * C21715) * C826 +
            (C554 * C21081 + C139457 * C21717) * C821 -
            (C554 * C21078 + C139457 * C21714) * C827 -
            (C554 * C21080 + C139457 * C21716) * C139305) *
               C139286 * C63380) *
              C1763) *
         C139328) /
            (p * q * std::sqrt(p + q));
    d2eezy[62] +=
        (-std::pow(Pi, 2.5) *
         ((((C554 * C107 + C139457 * C555) * C934 +
            (C554 * C182 + C139457 * C641) * C823 - C15060 * C935 -
            C15179 * C824 + C15063 * C936 + C15180 * C825) *
               C139286 * C63378 +
           (C15060 * C934 + C15179 * C823 - C15063 * C935 - C15180 * C824 +
            C20833 * C936 + C20907 * C825) *
               C139286 * C63379 +
           (C15063 * C934 + C15180 * C823 - C20833 * C935 - C20907 * C824 +
            (C554 * C20371 + C139457 * C20815) * C936 +
            (C554 * C20457 + C139457 * C20902) * C825) *
               C139286 * C63380) *
              C821 +
          ((C1564 - (C1563 + C1562) + C1582 - C1567 - C1583) * C139286 *
               C63378 +
           (C15174 - (C15173 + C15172) + C15175 - C15176 - C15182) * C139286 *
               C63379 +
           (C15064 * C935 - (C1579 * C823 + C1476 * C934) + C15181 * C824 -
            (C554 * C20370 + C139457 * C20814) * C936 -
            (C554 * C20456 + C139457 * C20903) * C825) *
               C139286 * C63380) *
              C139305) *
         C139339) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C554 * C107 + C139457 * C555) * C181 +
            (C554 * C182 + C139457 * C641) * C139328) *
               C139286 * C63378 +
           (C15060 * C181 + C15179 * C139328) * C139286 * C63379 +
           (C15063 * C181 + C15180 * C139328) * C139286 * C63380) *
              C92 -
          ((C1579 * C139328 + C1476 * C181) * C139286 * C63380 +
           (C14135 + C14134) * C139286 * C63379 +
           (C664 + C648) * C139286 * C63378) *
              C93 +
          (C668 * C139286 * C63378 + (C14137 + C14136) * C139286 * C63379 +
           (C1478 * C181 + C1581 * C139328) * C139286 * C63380) *
              C94 -
          (((C554 * C944 + C139457 * C1560) * C139328 +
            (C554 * C835 + C139457 * C1446) * C181) *
               C139286 * C63380 +
           (C14139 + C14138) * C139286 * C63379 + C669 * C139286 * C63378) *
              C95) *
         C139339) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139457 * C555) * C181 +
             (C554 * C182 + C139457 * C641) * C139328) *
                C139286 * C63378 +
            (C15060 * C181 + C15179 * C139328) * C139286 * C63379 +
            (C15063 * C181 + C15180 * C139328) * C139286 * C63380) *
               C821 -
           ((C1579 * C139328 + C1476 * C181) * C139286 * C63380 +
            (C14135 + C14134) * C139286 * C63379 +
            (C664 + C648) * C139286 * C63378) *
               C139305) *
              C1761 +
          (((C2498 + C2514) * C139286 * C63378 +
            (C16138 + C16139) * C139286 * C63379 +
            (C19109 * C181 + C19251 * C139328) * C139286 * C63380) *
               C139305 -
           ((C24881 * C139328 + C24775 * C181) * C139286 * C63380 +
            (C19250 * C139328 + C19108 * C181) * C139286 * C63379 +
            ((C554 * C1873 + C139457 * C2492) * C139328 +
             (C554 * C1767 + C139457 * C2376) * C181) *
                C139286 * C63378) *
               C821) *
              C1762 +
          ((((C554 * C1768 + C139457 * C2379) * C181 +
             (C554 * C1874 + C139457 * C2493) * C139328) *
                C139286 * C63378 +
            (C21729 * C181 + C21835 * C139328) * C139286 * C63379 +
            ((C554 * C21079 + C139457 * C21715) * C181 +
             (C554 * C21197 + C139457 * C21830) * C139328) *
                C139286 * C63380) *
               C821 -
           (((C554 * C21196 + C139457 * C21831) * C139328 +
             (C554 * C21078 + C139457 * C21714) * C181) *
                C139286 * C63380 +
            (C16144 + C16140) * C139286 * C63379 +
            (C2516 + C2504) * C139286 * C63378) *
               C139305) *
              C1763)) /
            (p * q * std::sqrt(p + q));
    d2eezz[62] +=
        (-std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139457 * C555) * C244 +
             (C554 * C245 + C139457 * C719) * C139339) *
                C139286 * C63378 +
            (C15281 + C15297) * C139286 * C63379 + C64563 * C63380) *
               C823 -
           ((C20980 + C20976) * C139286 * C63380 +
            (C15298 + C15288) * C139286 * C63379 +
            (C15297 + C15281) * C139286 * C63378) *
               C824 +
           (C64563 * C63378 + (C20976 + C20980) * C139286 * C63379 +
            ((C554 * C20371 + C139457 * C20815) * C244 +
             (C554 * C20533 + C139457 * C20974) * C139339) *
                C139286 * C63380) *
               C825) *
              C821 +
          ((C15284 * C139286 * C63378 + C15290 * C139286 * C63379 +
            (C15291 + C15299) * C139286 * C63380) *
               C824 -
           (C64562 * C63380 + C15289 * C139286 * C63379 +
            (C742 + C726) * C139286 * C63378) *
               C823 -
           (((C554 * C20532 + C139457 * C20973) * C139339 +
             (C554 * C20370 + C139457 * C20814) * C244) *
                C139286 * C63380 +
            (C15299 + C15291) * C139286 * C63379 + C64562 * C63378) *
               C825) *
              C139305)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C554 * C107 + C139457 * C555) * C244 +
            (C554 * C245 + C139457 * C719) * C139339) *
               C139286 * C63378 +
           (C15281 + C15297) * C139286 * C63379 +
           (C15288 + C15298) * C139286 * C63380) *
              C139328 * C92 -
          (C15285 * C139286 * C63380 + C15289 * C139286 * C63379 +
           (C742 + C726) * C139286 * C63378) *
              C139328 * C93 +
          (C746 * C139286 * C63378 + C17202 * C139286 * C63379 +
           (C1677 + C1687) * C139286 * C63380) *
              C139328 * C94 -
          (((C554 * C1034 + C139457 * C1666) * C139339 +
            (C554 * C835 + C139457 * C1446) * C244) *
               C139286 * C63380 +
           (C3377 + C3373) * C139286 * C63379 + C747 * C139286 * C63378) *
              C139328 * C95)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C139457 * C555) * C1960 +
            (C554 * C245 + C139457 * C719) * C1761 -
            (C554 * C1767 + C139457 * C2376) * C1961 -
            (C554 * C1965 + C139457 * C2591) * C1762 +
            (C554 * C1768 + C139457 * C2379) * C1962 +
            (C554 * C1966 + C139457 * C2592) * C1763) *
               C139286 * C63378 +
           (C21936 + C21937 - C21938 - C21939 + C21940 + C21944) * C139286 *
               C63379 +
           (C15063 * C1960 + C15295 * C1761 - C24775 * C1961 - C24987 * C1762 +
            (C554 * C21079 + C139457 * C21715) * C1962 +
            (C554 * C21305 + C139457 * C21933) * C1763) *
               C139286 * C63380) *
              C139328 * C821 +
          ((C2602 - (C2601 + C2600) + C2620 - C2605 - C2621) * C139286 *
               C63378 +
           (C16245 - (C16244 + C16243) + C16246 - C16247 - C16251) * C139286 *
               C63379 +
           (C19109 * C1961 - (C1682 * C1761 + C1476 * C1960) + C19398 * C1762 -
            (C554 * C21078 + C139457 * C21714) * C1962 -
            (C554 * C21304 + C139457 * C21934) * C1763) *
               C139286 * C63380) *
              C139328 * C139305)) /
            (p * q * std::sqrt(p + q));
    d2eexx[63] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139286 * C113) * C2702 +
            (C63381 * C116 + C139286 * C125) * C139589 -
            (C63381 * C108 + C139286 * C114) * C2703 -
            (C63381 * C117 + C139286 * C126) * C139590 +
            (C63381 * C109 + C139286 * C115) * C2704 +
            (C63381 * C118 + C139286 * C127) * C2699) *
               C63378 +
           (C65304 + C65305 - C65306 - C65307 + C65324 + C65325) * C63379 +
           (C65312 + C65313 - C65314 - C65315 + C65326 + C65327) * C63380) *
              C139457 * C139561 +
          (((C63381 * C1764 + C139286 * C1772) * C2703 -
            ((C63381 * C1777 + C139286 * C1790) * C139589 +
             (C63381 * C1767 + C139286 * C1778) * C2702) +
            (C63381 * C1776 + C139286 * C1789) * C139590 -
            (C63381 * C1765 + C139286 * C1773) * C2704 -
            (C63381 * C1775 + C139286 * C1788) * C2699) *
               C63378 +
           ((C63381 * C4224 + C139286 * C4228) * C2703 -
            ((C63381 * C4230 + C139286 * C4235) * C139589 +
             (C63381 * C4223 + C139286 * C4227) * C2702) +
            (C63381 * C4231 + C139286 * C4236) * C139590 -
            (C63381 * C4225 + C139286 * C4229) * C2704 -
            (C63381 * C4232 + C139286 * C4237) * C2699) *
               C63379 +
           ((C63381 * C8753 + C139286 * C8759) * C2703 -
            ((C63381 * C8757 + C139286 * C8763) * C139589 +
             (C63381 * C8754 + C139286 * C8760) * C2702) +
            (C63381 * C8756 + C139286 * C8762) * C139590 -
            (C63381 * C8752 + C139286 * C8758) * C2704 -
            (C63381 * C8755 + C139286 * C8761) * C2699) *
               C63380) *
              C139457 * C139403) *
         C139328) /
        (p * q * std::sqrt(p + q));
    d2eexy[63] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C63381 * C107 + C139286 * C113) * C181 +
                       (C63381 * C182 + C139286 * C188) * C139328) *
                          C63378 +
                      (C63884 * C181 + C63997 * C139328) * C63379 +
                      (C63888 * C181 + C63998 * C139328) * C63380) *
                         C139457 * C139589 -
                     ((C64001 * C139328 + C63890 * C181) * C63380 +
                      (C64000 * C139328 + C63886 * C181) * C63379 +
                      ((C63381 * C183 + C139286 * C189) * C139328 +
                       (C63381 * C108 + C139286 * C114) * C181) *
                          C63378) *
                         C139457 * C139590 +
                     (((C63381 * C109 + C139286 * C115) * C181 +
                       (C63381 * C184 + C139286 * C190) * C139328) *
                          C63378 +
                      (C65320 * C181 + C65406 * C139328) * C63379 +
                      (C65322 * C181 + C65407 * C139328) * C63380) *
                         C139457 * C2699) *
                        C139561 +
                    ((((C63381 * C1764 + C139286 * C1772) * C181 +
                       (C63381 * C1870 + C139286 * C1878) * C139328) *
                          C63378 +
                      ((C63381 * C4224 + C139286 * C4228) * C181 +
                       (C63381 * C4338 + C139286 * C4342) * C139328) *
                          C63379 +
                      ((C63381 * C8753 + C139286 * C8759) * C181 +
                       (C63381 * C8839 + C139286 * C8842) * C139328) *
                          C63380) *
                         C139457 * C139590 -
                     (((C63381 * C8840 + C139286 * C8843) * C139328 +
                       (C63381 * C8754 + C139286 * C8760) * C181) *
                          C63380 +
                      ((C63381 * C4337 + C139286 * C4341) * C139328 +
                       (C63381 * C4223 + C139286 * C4227) * C181) *
                          C63379 +
                      ((C63381 * C1873 + C139286 * C1881) * C139328 +
                       (C63381 * C1767 + C139286 * C1778) * C181) *
                          C63378) *
                         C139457 * C139589 -
                     (((C63381 * C8838 + C139286 * C8841) * C139328 +
                       (C63381 * C8752 + C139286 * C8758) * C181) *
                          C63380 +
                      ((C63381 * C4339 + C139286 * C4343) * C139328 +
                       (C63381 * C4225 + C139286 * C4229) * C181) *
                          C63379 +
                      ((C63381 * C1871 + C139286 * C1879) * C139328 +
                       (C63381 * C1765 + C139286 * C1773) * C181) *
                          C63378) *
                         C139457 * C2699) *
                        C139403)) /
                  (p * q * std::sqrt(p + q));
    d2eexz[63] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C63381 * C107 + C139286 * C113) * C3607 +
                      (C63381 * C245 + C139286 * C251) * C139561 -
                      (C63381 * C1767 + C139286 * C1778) * C3608 -
                      (C63381 * C1965 + C139286 * C1973) * C139403) *
                         C63378 +
                     (C63884 * C3607 + C64095 * C139561 -
                      (C63381 * C4223 + C139286 * C4227) * C3608 -
                      (C63381 * C4443 + C139286 * C4447) * C139403) *
                         C63379 +
                     (C63888 * C3607 + C64096 * C139561 -
                      (C63381 * C8754 + C139286 * C8760) * C3608 -
                      (C63381 * C8920 + C139286 * C8923) * C139403) *
                         C63380) *
                        C139457 * C139328 * C139589 +
                    (((C63381 * C1764 + C139286 * C1772) * C3608 -
                      ((C63381 * C246 + C139286 * C252) * C139561 +
                       (C63381 * C108 + C139286 * C114) * C3607) +
                      (C63381 * C1964 + C139286 * C1972) * C139403) *
                         C63378 +
                     ((C63381 * C4224 + C139286 * C4228) * C3608 -
                      (C64098 * C139561 + C63886 * C3607) +
                      (C63381 * C4444 + C139286 * C4448) * C139403) *
                         C63379 +
                     ((C63381 * C8753 + C139286 * C8759) * C3608 -
                      (C64099 * C139561 + C63890 * C3607) +
                      (C63381 * C8919 + C139286 * C8922) * C139403) *
                         C63380) *
                        C139457 * C139328 * C139590 +
                    (((C63381 * C109 + C139286 * C115) * C3607 +
                      (C63381 * C247 + C139286 * C253) * C139561 -
                      (C63381 * C1765 + C139286 * C1773) * C3608 -
                      (C63381 * C1963 + C139286 * C1971) * C139403) *
                         C63378 +
                     (C65320 * C3607 + C65488 * C139561 -
                      (C63381 * C4225 + C139286 * C4229) * C3608 -
                      (C63381 * C4445 + C139286 * C4449) * C139403) *
                         C63379 +
                     (C65322 * C3607 + C65489 * C139561 -
                      (C63381 * C8752 + C139286 * C8758) * C3608 -
                      (C63381 * C8918 + C139286 * C8921) * C139403) *
                         C63380) *
                        C139457 * C139328 * C2699)) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[63] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((C63532 * C107 + C63378 * C308 + C63533 * C831 +
                      C63379 * C1118 + C63534 * C832 + C63380 * C1121) *
                         C2702 +
                     (C63532 * C116 + C63378 * C314 + C63533 * C841 +
                      C63379 * C1125 + C63534 * C847 + C63380 * C1129) *
                         C139589 -
                     (C63534 * C833 + C63380 * C1122 + C63533 * C828 +
                      C63379 * C1117 + C63532 * C108 + C63378 * C309) *
                         C2703 -
                     (C63534 * C848 + C63380 * C1130 + C63533 * C840 +
                      C63379 * C1126 + C63532 * C117 + C63378 * C315) *
                         C139590 +
                     (C63532 * C109 + C63378 * C310 + C63533 * C829 +
                      C63379 * C1119 + C63534 * C834 + C63380 * C1123) *
                         C2704 +
                     (C63532 * C118 + C63378 * C316 + C63533 * C839 +
                      C63379 * C1127 + C63534 * C849 + C63380 * C1131) *
                         C2699) *
                        C139457 * C139286 * C139561 +
                    ((C63532 * C1764 + C63378 * C2053 + C63533 * C4224 +
                      C63379 * C4550 + C63534 * C8753 + C63380 * C8999) *
                         C2703 -
                     ((C63534 * C8757 + C63380 * C9003 + C63533 * C4230 +
                       C63379 * C4553 + C63532 * C1777 + C63378 * C2061) *
                          C139589 +
                      (C63534 * C8754 + C63380 * C9000 + C63533 * C4223 +
                       C63379 * C4549 + C63532 * C1767 + C63378 * C2054) *
                          C2702) +
                     (C63532 * C1776 + C63378 * C2062 + C63533 * C4231 +
                      C63379 * C4554 + C63534 * C8756 + C63380 * C9002) *
                         C139590 -
                     (C63534 * C8752 + C63380 * C8998 + C63533 * C4225 +
                      C63379 * C4551 + C63532 * C1765 + C63378 * C2055) *
                         C2704 -
                     (C63534 * C8755 + C63380 * C9001 + C63533 * C4232 +
                      C63379 * C4555 + C63532 * C1775 + C63378 * C2063) *
                         C2699) *
                        C139457 * C139286 * C139403) *
                   C139328) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[63] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C63532 * C107 + C63378 * C308 + C63533 * C831 +
                       C63379 * C1118 + C63534 * C832 + C63380 * C1121) *
                          C181 +
                      (C63532 * C182 + C63378 * C394 + C63533 * C939 +
                       C63379 * C1231 + C63534 * C940 + C63380 * C1232) *
                          C139328) *
                         C139457 * C139286 * C139589 -
                     ((C63534 * C941 + C63380 * C1234 + C63533 * C938 +
                       C63379 * C1233 + C63532 * C183 + C63378 * C395) *
                          C139328 +
                      (C63534 * C833 + C63380 * C1122 + C63533 * C828 +
                       C63379 * C1117 + C63532 * C108 + C63378 * C309) *
                          C181) *
                         C139457 * C139286 * C139590 +
                     ((C63532 * C109 + C63378 * C310 + C63533 * C829 +
                       C63379 * C1119 + C63534 * C834 + C63380 * C1123) *
                          C181 +
                      (C63532 * C184 + C63378 * C396 + C63533 * C937 +
                       C63379 * C1235 + C63534 * C942 + C63380 * C1236) *
                          C139328) *
                         C139457 * C139286 * C2699) *
                        C139561 +
                    (((C63532 * C1764 + C63378 * C2053 + C63533 * C4224 +
                       C63379 * C4550 + C63534 * C8753 + C63380 * C8999) *
                          C181 +
                      (C63532 * C1870 + C63378 * C2167 + C63533 * C4338 +
                       C63379 * C4668 + C63534 * C8839 + C63380 * C9079) *
                          C139328) *
                         C139457 * C139286 * C139590 -
                     ((C63534 * C8840 + C63380 * C9078 + C63533 * C4337 +
                       C63379 * C4667 + C63532 * C1873 + C63378 * C2170) *
                          C139328 +
                      (C63534 * C8754 + C63380 * C9000 + C63533 * C4223 +
                       C63379 * C4549 + C63532 * C1767 + C63378 * C2054) *
                          C181) *
                         C139457 * C139286 * C139589 -
                     ((C63534 * C8838 + C63380 * C9080 + C63533 * C4339 +
                       C63379 * C4669 + C63532 * C1871 + C63378 * C2168) *
                          C139328 +
                      (C63534 * C8752 + C63380 * C8998 + C63533 * C4225 +
                       C63379 * C4551 + C63532 * C1765 + C63378 * C2055) *
                          C181) *
                         C139457 * C139286 * C2699) *
                        C139403)) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[63] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((C63532 * C107 + C63378 * C308 + C63533 * C831 +
                      C63379 * C1118 + C63534 * C832 + C63380 * C1121) *
                         C3607 +
                     (C63532 * C245 + C63378 * C474 + C63533 * C1029 +
                      C63379 * C1339 + C63534 * C1030 + C63380 * C1340) *
                         C139561 -
                     (C63534 * C8754 + C63380 * C9000 + C63533 * C4223 +
                      C63379 * C4549 + C63532 * C1767 + C63378 * C2054) *
                         C3608 -
                     (C63534 * C8920 + C63380 * C9155 + C63533 * C4443 +
                      C63379 * C4783 + C63532 * C1965 + C63378 * C2269) *
                         C139403) *
                        C139457 * C139286 * C139328 * C139589 +
                    ((C63532 * C1764 + C63378 * C2053 + C63533 * C4224 +
                      C63379 * C4550 + C63534 * C8753 + C63380 * C8999) *
                         C3608 -
                     ((C63534 * C1031 + C63380 * C1341 + C63533 * C1028 +
                       C63379 * C1338 + C63532 * C246 + C63378 * C475) *
                          C139561 +
                      (C63534 * C833 + C63380 * C1122 + C63533 * C828 +
                       C63379 * C1117 + C63532 * C108 + C63378 * C309) *
                          C3607) +
                     (C63532 * C1964 + C63378 * C2271 + C63533 * C4444 +
                      C63379 * C4784 + C63534 * C8919 + C63380 * C9156) *
                         C139403) *
                        C139457 * C139286 * C139328 * C139590 +
                    ((C63532 * C109 + C63378 * C310 + C63533 * C829 +
                      C63379 * C1119 + C63534 * C834 + C63380 * C1123) *
                         C3607 +
                     (C63532 * C247 + C63378 * C476 + C63533 * C1027 +
                      C63379 * C1337 + C63534 * C1032 + C63380 * C1342) *
                         C139561 -
                     (C63534 * C8752 + C63380 * C8998 + C63533 * C4225 +
                      C63379 * C4551 + C63532 * C1765 + C63378 * C2055) *
                         C3608 -
                     (C63534 * C8918 + C63380 * C9157 + C63533 * C4445 +
                      C63379 * C4785 + C63532 * C1963 + C63378 * C2273) *
                         C139403) *
                        C139457 * C139286 * C139328 * C2699)) /
                  (p * q * std::sqrt(p + q));
    d2eezx[63] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C139457 * C555) * C2702 +
            (C554 * C116 + C139457 * C561) * C139589 - C584 * C2703 -
            C585 * C139590 + C586 * C2704 + C587 * C2699) *
               C139286 * C63378 +
           (C16986 + C16987 - C16988 - C16989 + C16990 + C16991) * C139286 *
               C63379 +
           (C65788 + C65789 - C65790 - C65791 + C65792 + C65793) * C139286 *
               C63380) *
              C139561 +
          ((C2408 * C2703 -
            ((C554 * C1777 + C139457 * C2383) * C139589 +
             (C554 * C1767 + C139457 * C2376) * C2702) +
            C2409 * C139590 - C2410 * C2704 - C2411 * C2699) *
               C139286 * C63378 +
           (C4916 * C2703 - (C19107 * C139589 + C19108 * C2702) +
            C4917 * C139590 - C4918 * C2704 - C4919 * C2699) *
               C139286 * C63379 +
           (C19109 * C2703 - (C24776 * C139589 + C24775 * C2702) +
            C19110 * C139590 - (C554 * C8752 + C139457 * C9232) * C2704 -
            (C554 * C8755 + C139457 * C9235) * C2699) *
               C139286 * C63380) *
              C139403) *
         C139328) /
        (p * q * std::sqrt(p + q));
    d2eezy[63] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139457 * C555) * C181 +
             (C554 * C182 + C139457 * C641) * C139328) *
                C139286 * C63378 +
            (C15060 * C181 + C15179 * C139328) * C139286 * C63379 +
            (C15063 * C181 + C15180 * C139328) * C139286 * C63380) *
               C139589 -
           ((C1579 * C139328 + C1476 * C181) * C139286 * C63380 +
            (C14135 + C14134) * C139286 * C63379 +
            (C664 + C648) * C139286 * C63378) *
               C139590 +
           (C668 * C139286 * C63378 + (C14137 + C14136) * C139286 * C63379 +
            (C1478 * C181 + C1581 * C139328) * C139286 * C63380) *
               C2699) *
              C139561 +
          (((C2498 + C2514) * C139286 * C63378 +
            (C16138 + C16139) * C139286 * C63379 +
            (C19109 * C181 + C19251 * C139328) * C139286 * C63380) *
               C139590 -
           ((C24881 * C139328 + C24775 * C181) * C139286 * C63380 +
            (C19250 * C139328 + C19108 * C181) * C139286 * C63379 +
            ((C554 * C1873 + C139457 * C2492) * C139328 +
             (C554 * C1767 + C139457 * C2376) * C181) *
                C139286 * C63378) *
               C139589 -
           (((C554 * C8838 + C139457 * C9314) * C139328 +
             (C554 * C8752 + C139457 * C9232) * C181) *
                C139286 * C63380 +
            (C18012 + C18011) * C139286 * C63379 + C4030 * C139286 * C63378) *
               C2699) *
              C139403)) /
        (p * q * std::sqrt(p + q));
    d2eezz[63] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C554 * C107 + C139457 * C555) * C3607 +
                      (C554 * C245 + C139457 * C719) * C139561 -
                      (C554 * C1767 + C139457 * C2376) * C3608 -
                      (C554 * C1965 + C139457 * C2591) * C139403) *
                         C139286 * C63378 +
                     (C19383 + C19384 - C19385 - C19399) * C139286 * C63379 +
                     (C24984 + C24983 - C24982 - C24988) * C139286 * C63380) *
                        C139328 * C139589 +
                    ((C4110 - (C4109 + C4108) + C4111) * C139286 * C63378 +
                     C19401 * C139286 * C63379 +
                     (C19390 - (C19391 + C19392) + C19402) * C139286 * C63380) *
                        C139328 * C139590 +
                    (C4125 * C139286 * C63378 +
                     (C5145 + C5144 - C5143 - C5151) * C139286 * C63379 +
                     (C1478 * C3607 + C1683 * C139561 -
                      (C554 * C8752 + C139457 * C9232) * C3608 -
                      (C554 * C8918 + C139457 * C9391) * C139403) *
                         C139286 * C63380) *
                        C139328 * C2699)) /
                  (p * q * std::sqrt(p + q));
    d2eexx[64] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C63381 * C107 + C139286 * C113) * C103 +
           (C63381 * C116 + C139286 * C125) * C92 -
           (C63381 * C108 + C139286 * C114) * C104 -
           (C63381 * C117 + C139286 * C126) * C93 +
           (C63381 * C109 + C139286 * C115) * C105 +
           (C63381 * C118 + C139286 * C127) * C94 -
           (C63381 * C110 + C139286 * C119) * C106 -
           (C63381 * C120 + C139286 * C128) * C95) *
              C63378 +
          ((C63381 * C831 + C139286 * C842) * C103 +
           (C63381 * C841 + C139286 * C854) * C92 -
           (C63381 * C828 + C139286 * C836) * C104 -
           (C63381 * C840 + C139286 * C853) * C93 +
           (C63381 * C829 + C139286 * C837) * C105 +
           (C63381 * C839 + C139286 * C852) * C94 -
           (C63381 * C830 + C139286 * C838) * C106 -
           (C63381 * C843 + C139286 * C855) * C95) *
              C63379 +
          ((C63381 * C832 + C139286 * C844) * C103 +
           (C63381 * C847 + C139286 * C856) * C92 -
           (C63381 * C833 + C139286 * C845) * C104 -
           (C63381 * C848 + C139286 * C857) * C93 +
           (C63381 * C834 + C139286 * C846) * C105 +
           (C63381 * C849 + C139286 * C858) * C94 -
           (C63381 * C835 + C139286 * C850) * C106 -
           (C63381 * C851 + C139286 * C859) * C95) *
              C63380) *
         C139457 * C139339 * C139328) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139286 * C113) * C826 +
            (C63381 * C116 + C139286 * C125) * C821 -
            (C63381 * C108 + C139286 * C114) * C827 -
            (C63381 * C117 + C139286 * C126) * C139305) *
               C63378 +
           (C63896 + C63897 - C63898 - C63899) * C63379 + C63910 * C63380) *
              C139457 * C139339 * C823 +
          ((C63898 - (C63897 + C63896) + C63899) * C63378 +
           (C63902 - (C63901 + C63900) + C63903) * C63379 +
           (C63904 - (C63905 + C63906) + C63907) * C63380) *
              C139457 * C139339 * C824 +
          (C63910 * C63378 + (C63906 + C63905 - C63904 - C63907) * C63379 +
           ((C63381 * C20371 + C139286 * C20375) * C826 +
            (C63381 * C20373 + C139286 * C20377) * C821 -
            (C63381 * C20370 + C139286 * C20374) * C827 -
            (C63381 * C20372 + C139286 * C20376) * C139305) *
               C63380) *
              C139457 * C139339 * C825)) /
            (p * q * std::sqrt(p + q));
    d2eexy[64] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139286 * C113) * C181 +
            (C63381 * C182 + C139286 * C188) * C139328) *
               C63378 +
           ((C63381 * C831 + C139286 * C842) * C181 +
            (C63381 * C939 + C139286 * C947) * C139328) *
               C63379 +
           ((C63381 * C832 + C139286 * C844) * C181 +
            (C63381 * C940 + C139286 * C948) * C139328) *
               C63380) *
              C139457 * C92 -
          (((C63381 * C941 + C139286 * C949) * C139328 +
            (C63381 * C833 + C139286 * C845) * C181) *
               C63380 +
           ((C63381 * C938 + C139286 * C946) * C139328 +
            (C63381 * C828 + C139286 * C836) * C181) *
               C63379 +
           ((C63381 * C183 + C139286 * C189) * C139328 +
            (C63381 * C108 + C139286 * C114) * C181) *
               C63378) *
              C139457 * C93 +
          (((C63381 * C109 + C139286 * C115) * C181 +
            (C63381 * C184 + C139286 * C190) * C139328) *
               C63378 +
           ((C63381 * C829 + C139286 * C837) * C181 +
            (C63381 * C937 + C139286 * C945) * C139328) *
               C63379 +
           ((C63381 * C834 + C139286 * C846) * C181 +
            (C63381 * C942 + C139286 * C950) * C139328) *
               C63380) *
              C139457 * C94 -
          (((C63381 * C944 + C139286 * C952) * C139328 +
            (C63381 * C835 + C139286 * C850) * C181) *
               C63380 +
           ((C63381 * C943 + C139286 * C951) * C139328 +
            (C63381 * C830 + C139286 * C838) * C181) *
               C63379 +
           ((C63381 * C185 + C139286 * C191) * C139328 +
            (C63381 * C110 + C139286 * C119) * C181) *
               C63378) *
              C139457 * C95) *
         C139339) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139286 * C113) * C934 +
            (C63381 * C182 + C139286 * C188) * C823 - C63884 * C935 -
            C63997 * C824 + C63888 * C936 + C63998 * C825) *
               C63378 +
           (C63884 * C934 + C63997 * C823 - C63888 * C935 - C63998 * C824 +
            C63894 * C936 + C63999 * C825) *
               C63379 +
           (C63888 * C934 + C63998 * C823 - C63894 * C935 - C63999 * C824 +
            (C63381 * C20371 + C139286 * C20375) * C936 +
            (C63381 * C20457 + C139286 * C20459) * C825) *
               C63380) *
              C139457 * C821 +
          ((C63886 * C935 -
            ((C63381 * C183 + C139286 * C189) * C823 +
             (C63381 * C108 + C139286 * C114) * C934) +
            C64000 * C824 - C63890 * C936 - C64001 * C825) *
               C63378 +
           (C63890 * C935 - (C64000 * C823 + C63886 * C934) + C64001 * C824 -
            C63892 * C936 - C64002 * C825) *
               C63379 +
           (C63892 * C935 - (C64001 * C823 + C63890 * C934) + C64002 * C824 -
            (C63381 * C20370 + C139286 * C20374) * C936 -
            (C63381 * C20456 + C139286 * C20458) * C825) *
               C63380) *
              C139457 * C139305) *
         C139339) /
            (p * q * std::sqrt(p + q));
    d2eexz[64] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C63381 * C107 + C139286 * C113) * C244 +
                      (C63381 * C245 + C139286 * C251) * C139339) *
                         C63378 +
                     ((C63381 * C831 + C139286 * C842) * C244 +
                      (C63381 * C1029 + C139286 * C1037) * C139339) *
                         C63379 +
                     ((C63381 * C832 + C139286 * C844) * C244 +
                      (C63381 * C1030 + C139286 * C1038) * C139339) *
                         C63380) *
                        C139457 * C139328 * C92 -
                    (((C63381 * C1031 + C139286 * C1039) * C139339 +
                      (C63381 * C833 + C139286 * C845) * C244) *
                         C63380 +
                     ((C63381 * C1028 + C139286 * C1036) * C139339 +
                      (C63381 * C828 + C139286 * C836) * C244) *
                         C63379 +
                     ((C63381 * C246 + C139286 * C252) * C139339 +
                      (C63381 * C108 + C139286 * C114) * C244) *
                         C63378) *
                        C139457 * C139328 * C93 +
                    (((C63381 * C109 + C139286 * C115) * C244 +
                      (C63381 * C247 + C139286 * C253) * C139339) *
                         C63378 +
                     ((C63381 * C829 + C139286 * C837) * C244 +
                      (C63381 * C1027 + C139286 * C1035) * C139339) *
                         C63379 +
                     ((C63381 * C834 + C139286 * C846) * C244 +
                      (C63381 * C1032 + C139286 * C1040) * C139339) *
                         C63380) *
                        C139457 * C139328 * C94 -
                    (((C63381 * C1034 + C139286 * C1042) * C139339 +
                      (C63381 * C835 + C139286 * C850) * C244) *
                         C63380 +
                     ((C63381 * C1033 + C139286 * C1041) * C139339 +
                      (C63381 * C830 + C139286 * C838) * C244) *
                         C63379 +
                     ((C63381 * C248 + C139286 * C254) * C139339 +
                      (C63381 * C110 + C139286 * C119) * C244) *
                         C63378) *
                        C139457 * C139328 * C95)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((((C63381 * C107 + C139286 * C113) * C244 +
                       (C63381 * C245 + C139286 * C251) * C139339) *
                          C63378 +
                      (C64077 + C64101) * C63379 + C64107 * C63380) *
                         C139457 * C823 -
                     ((C64103 + C64085) * C63380 + (C64102 + C64080) * C63379 +
                      (C64101 + C64077) * C63378) *
                         C139457 * C824 +
                     (C64107 * C63378 + (C64085 + C64103) * C63379 +
                      ((C63381 * C20371 + C139286 * C20375) * C244 +
                       (C63381 * C20533 + C139286 * C20535) * C139339) *
                          C63380) *
                         C139457 * C825) *
                        C821 +
                    (((C64086 + C64104) * C63378 + (C64089 + C64105) * C63379 +
                      (C64092 + C64106) * C63380) *
                         C139457 * C824 -
                     (C64108 * C63380 + (C64104 + C64086) * C63379 +
                      ((C63381 * C246 + C139286 * C252) * C139339 +
                       (C63381 * C108 + C139286 * C114) * C244) *
                          C63378) *
                         C139457 * C823 -
                     (((C63381 * C20532 + C139286 * C20534) * C139339 +
                       (C63381 * C20370 + C139286 * C20374) * C244) *
                          C63380 +
                      (C64106 + C64092) * C63379 + C64108 * C63378) *
                         C139457 * C825) *
                        C139305)) /
                      (p * q * std::sqrt(p + q));
    d2eeyx[64] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((C63532 * C107 + C63378 * C308 + C63533 * C831 +
                     C63379 * C1118 + C63534 * C832 + C63380 * C1121) *
                        C103 +
                    (C63532 * C116 + C63378 * C314 + C63533 * C841 +
                     C63379 * C1125 + C63534 * C847 + C63380 * C1129) *
                        C92 -
                    (C63534 * C833 + C63380 * C1122 + C63533 * C828 +
                     C63379 * C1117 + C63532 * C108 + C63378 * C309) *
                        C104 -
                    (C63534 * C848 + C63380 * C1130 + C63533 * C840 +
                     C63379 * C1126 + C63532 * C117 + C63378 * C315) *
                        C93 +
                    (C63532 * C109 + C63378 * C310 + C63533 * C829 +
                     C63379 * C1119 + C63534 * C834 + C63380 * C1123) *
                        C105 +
                    (C63532 * C118 + C63378 * C316 + C63533 * C839 +
                     C63379 * C1127 + C63534 * C849 + C63380 * C1131) *
                        C94 -
                    (C63534 * C835 + C63380 * C1124 + C63533 * C830 +
                     C63379 * C1120 + C63532 * C110 + C63378 * C311) *
                        C106 -
                    (C63534 * C851 + C63380 * C1132 + C63533 * C843 +
                     C63379 * C1128 + C63532 * C120 + C63378 * C317) *
                        C95) *
                   C139457 * C139286 * C139339 * C139328) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((C63532 * C107 + C63378 * C308 + C63533 * C831 +
                      C63379 * C1118 + C63534 * C832 + C63380 * C1121) *
                         C826 +
                     (C63532 * C116 + C63378 * C314 + C63533 * C841 +
                      C63379 * C1125 + C63534 * C847 + C63380 * C1129) *
                         C821 -
                     (C63534 * C833 + C63380 * C1122 + C63533 * C828 +
                      C63379 * C1117 + C63532 * C108 + C63378 * C309) *
                         C827 -
                     (C63534 * C848 + C63380 * C1130 + C63533 * C840 +
                      C63379 * C1126 + C63532 * C117 + C63378 * C315) *
                         C139305) *
                        C139457 * C139286 * C139339 * C823 +
                    ((C63532 * C828 + C63378 * C1117 + C63533 * C833 +
                      C63379 * C1122 + C63534 * C5915 + C63380 * C6093) *
                         C827 -
                     ((C63534 * C5919 + C63380 * C6097 + C63533 * C847 +
                       C63379 * C1129 + C63532 * C841 + C63378 * C1125) *
                          C821 +
                      (C63534 * C5916 + C63380 * C6094 + C63533 * C832 +
                       C63379 * C1121 + C63532 * C831 + C63378 * C1118) *
                          C826) +
                     (C63532 * C840 + C63378 * C1126 + C63533 * C848 +
                      C63379 * C1130 + C63534 * C5918 + C63380 * C6096) *
                         C139305) *
                        C139457 * C139286 * C139339 * C824 +
                    ((C63532 * C832 + C63378 * C1121 + C63533 * C5916 +
                      C63379 * C6094 + C63534 * C20371 + C63380 * C20609) *
                         C826 +
                     (C63532 * C847 + C63378 * C1129 + C63533 * C5919 +
                      C63379 * C6097 + C63534 * C20373 + C63380 * C20611) *
                         C821 -
                     (C63534 * C20370 + C63380 * C20608 + C63533 * C5915 +
                      C63379 * C6093 + C63532 * C833 + C63378 * C1122) *
                         C827 -
                     (C63534 * C20372 + C63380 * C20610 + C63533 * C5918 +
                      C63379 * C6096 + C63532 * C848 + C63378 * C1130) *
                         C139305) *
                        C139457 * C139286 * C139339 * C825)) /
                      (p * q * std::sqrt(p + q));
    d2eeyy[64] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((C63532 * C107 + C63378 * C308 + C63533 * C831 +
                      C63379 * C1118 + C63534 * C832 + C63380 * C1121) *
                         C181 +
                     (C63532 * C182 + C63378 * C394 + C63533 * C939 +
                      C63379 * C1231 + C63534 * C940 + C63380 * C1232) *
                         C139328) *
                        C139457 * C139286 * C92 -
                    ((C63534 * C941 + C63380 * C1234 + C63533 * C938 +
                      C63379 * C1233 + C63532 * C183 + C63378 * C395) *
                         C139328 +
                     (C63534 * C833 + C63380 * C1122 + C63533 * C828 +
                      C63379 * C1117 + C63532 * C108 + C63378 * C309) *
                         C181) *
                        C139457 * C139286 * C93 +
                    ((C63532 * C109 + C63378 * C310 + C63533 * C829 +
                      C63379 * C1119 + C63534 * C834 + C63380 * C1123) *
                         C181 +
                     (C63532 * C184 + C63378 * C396 + C63533 * C937 +
                      C63379 * C1235 + C63534 * C942 + C63380 * C1236) *
                         C139328) *
                        C139457 * C139286 * C94 -
                    ((C63534 * C944 + C63380 * C1238 + C63533 * C943 +
                      C63379 * C1237 + C63532 * C185 + C63378 * C397) *
                         C139328 +
                     (C63534 * C835 + C63380 * C1124 + C63533 * C830 +
                      C63379 * C1120 + C63532 * C110 + C63378 * C311) *
                         C181) *
                        C139457 * C139286 * C95) *
                   C139339) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((C63532 * C107 + C63378 * C308 + C63533 * C831 +
                      C63379 * C1118 + C63534 * C832 + C63380 * C1121) *
                         C934 +
                     (C63532 * C182 + C63378 * C394 + C63533 * C939 +
                      C63379 * C1231 + C63534 * C940 + C63380 * C1232) *
                         C823 -
                     (C63534 * C5916 + C63380 * C6094 + C63533 * C832 +
                      C63379 * C1121 + C63532 * C831 + C63378 * C1118) *
                         C935 -
                     (C63534 * C5982 + C63380 * C6148 + C63533 * C940 +
                      C63379 * C1232 + C63532 * C939 + C63378 * C1231) *
                         C824 +
                     (C63532 * C832 + C63378 * C1121 + C63533 * C5916 +
                      C63379 * C6094 + C63534 * C20371 + C63380 * C20609) *
                         C936 +
                     (C63532 * C940 + C63378 * C1232 + C63533 * C5982 +
                      C63379 * C6148 + C63534 * C20457 + C63380 * C20678) *
                         C825) *
                        C139457 * C139286 * C821 +
                    ((C63532 * C828 + C63378 * C1117 + C63533 * C833 +
                      C63379 * C1122 + C63534 * C5915 + C63380 * C6093) *
                         C935 -
                     ((C63534 * C941 + C63380 * C1234 + C63533 * C938 +
                       C63379 * C1233 + C63532 * C183 + C63378 * C395) *
                          C823 +
                      (C63534 * C833 + C63380 * C1122 + C63533 * C828 +
                       C63379 * C1117 + C63532 * C108 + C63378 * C309) *
                          C934) +
                     (C63532 * C938 + C63378 * C1233 + C63533 * C941 +
                      C63379 * C1234 + C63534 * C5981 + C63380 * C6149) *
                         C824 -
                     (C63534 * C20370 + C63380 * C20608 + C63533 * C5915 +
                      C63379 * C6093 + C63532 * C833 + C63378 * C1122) *
                         C936 -
                     (C63534 * C20456 + C63380 * C20679 + C63533 * C5981 +
                      C63379 * C6149 + C63532 * C941 + C63378 * C1234) *
                         C825) *
                        C139457 * C139286 * C139305) *
                   C139339) /
                      (p * q * std::sqrt(p + q));
    d2eeyz[64] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((C63532 * C107 + C63378 * C308 + C63533 * C831 +
                      C63379 * C1118 + C63534 * C832 + C63380 * C1121) *
                         C244 +
                     (C63532 * C245 + C63378 * C474 + C63533 * C1029 +
                      C63379 * C1339 + C63534 * C1030 + C63380 * C1340) *
                         C139339) *
                        C139457 * C139286 * C139328 * C92 -
                    ((C63534 * C1031 + C63380 * C1341 + C63533 * C1028 +
                      C63379 * C1338 + C63532 * C246 + C63378 * C475) *
                         C139339 +
                     (C63534 * C833 + C63380 * C1122 + C63533 * C828 +
                      C63379 * C1117 + C63532 * C108 + C63378 * C309) *
                         C244) *
                        C139457 * C139286 * C139328 * C93 +
                    ((C63532 * C109 + C63378 * C310 + C63533 * C829 +
                      C63379 * C1119 + C63534 * C834 + C63380 * C1123) *
                         C244 +
                     (C63532 * C247 + C63378 * C476 + C63533 * C1027 +
                      C63379 * C1337 + C63534 * C1032 + C63380 * C1342) *
                         C139339) *
                        C139457 * C139286 * C139328 * C94 -
                    ((C63534 * C1034 + C63380 * C1344 + C63533 * C1033 +
                      C63379 * C1343 + C63532 * C248 + C63378 * C477) *
                         C139339 +
                     (C63534 * C835 + C63380 * C1124 + C63533 * C830 +
                      C63379 * C1120 + C63532 * C110 + C63378 * C311) *
                         C244) *
                        C139457 * C139286 * C139328 * C95)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C63532 * C107 + C63378 * C308 + C63533 * C831 +
                       C63379 * C1118 + C63534 * C832 + C63380 * C1121) *
                          C244 +
                      (C63532 * C245 + C63378 * C474 + C63533 * C1029 +
                       C63379 * C1339 + C63534 * C1030 + C63380 * C1340) *
                          C139339) *
                         C139457 * C139286 * C823 -
                     ((C63534 * C6038 + C63380 * C6203 + C63533 * C1030 +
                       C63379 * C1340 + C63532 * C1029 + C63378 * C1339) *
                          C139339 +
                      (C63534 * C5916 + C63380 * C6094 + C63533 * C832 +
                       C63379 * C1121 + C63532 * C831 + C63378 * C1118) *
                          C244) *
                         C139457 * C139286 * C824 +
                     ((C63532 * C832 + C63378 * C1121 + C63533 * C5916 +
                       C63379 * C6094 + C63534 * C20371 + C63380 * C20609) *
                          C244 +
                      (C63532 * C1030 + C63378 * C1340 + C63533 * C6038 +
                       C63379 * C6203 + C63534 * C20533 + C63380 * C20747) *
                          C139339) *
                         C139457 * C139286 * C825) *
                        C821 +
                    (((C63532 * C828 + C63378 * C1117 + C63533 * C833 +
                       C63379 * C1122 + C63534 * C5915 + C63380 * C6093) *
                          C244 +
                      (C63532 * C1028 + C63378 * C1338 + C63533 * C1031 +
                       C63379 * C1341 + C63534 * C6037 + C63380 * C6202) *
                          C139339) *
                         C139457 * C139286 * C824 -
                     ((C63534 * C1031 + C63380 * C1341 + C63533 * C1028 +
                       C63379 * C1338 + C63532 * C246 + C63378 * C475) *
                          C139339 +
                      (C63534 * C833 + C63380 * C1122 + C63533 * C828 +
                       C63379 * C1117 + C63532 * C108 + C63378 * C309) *
                          C244) *
                         C139457 * C139286 * C823 -
                     ((C63534 * C20532 + C63380 * C20746 + C63533 * C6037 +
                       C63379 * C6202 + C63532 * C1031 + C63378 * C1341) *
                          C139339 +
                      (C63534 * C20370 + C63380 * C20608 + C63533 * C5915 +
                       C63379 * C6093 + C63532 * C833 + C63378 * C1122) *
                          C244) *
                         C139457 * C139286 * C825) *
                        C139305)) /
                      (p * q * std::sqrt(p + q));
    d2eezx[64] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C554 * C107 + C139457 * C555) * C103 +
           (C554 * C116 + C139457 * C561) * C92 - C584 * C104 - C585 * C93 +
           C586 * C105 + C587 * C94 - C588 * C106 - C589 * C95) *
              C139286 * C63378 +
          (C15060 * C103 + C15061 * C92 - C1472 * C104 - C1473 * C93 +
           C1474 * C105 + C1475 * C94 - C3202 * C106 - C3203 * C95) *
              C139286 * C63379 +
          (C15063 * C103 + C15062 * C92 - C1476 * C104 - C1477 * C93 +
           C1478 * C105 + C1479 * C94 - (C554 * C835 + C139457 * C1446) * C106 -
           (C554 * C851 + C139457 * C1454) * C95) *
              C139286 * C63380) *
         C139339 * C139328) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C139457 * C555) * C826 +
            (C554 * C116 + C139457 * C561) * C821 - C584 * C827 -
            C585 * C139305) *
               C139286 * C63378 +
           (C15066 + C15067 - C15040 - C15041) * C139286 * C63379 +
           C64412 * C63380) *
              C139339 * C823 +
          ((C15040 - (C15067 + C15066) + C15041) * C139286 * C63378 +
           (C15046 - (C15068 + C15069) + C15051) * C139286 * C63379 +
           (C64406 - (C64407 + C64408) + C64409) * C139286 * C63380) *
              C139339 * C824 +
          (C64412 * C63378 +
           (C64408 + C64407 - C64406 - C64409) * C139286 * C63379 +
           ((C554 * C20371 + C139457 * C20815) * C826 +
            (C554 * C20373 + C139457 * C20817) * C821 -
            (C554 * C20370 + C139457 * C20814) * C827 -
            (C554 * C20372 + C139457 * C20816) * C139305) *
               C139286 * C63380) *
              C139339 * C825)) /
            (p * q * std::sqrt(p + q));
    d2eezy[64] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C139457 * C555) * C181 +
            (C554 * C182 + C139457 * C641) * C139328) *
               C139286 * C63378 +
           (C15060 * C181 + C15179 * C139328) * C139286 * C63379 +
           (C15063 * C181 + C15180 * C139328) * C139286 * C63380) *
              C92 -
          ((C1579 * C139328 + C1476 * C181) * C139286 * C63380 +
           (C14135 + C14134) * C139286 * C63379 +
           (C664 + C648) * C139286 * C63378) *
              C93 +
          (C668 * C139286 * C63378 + (C14137 + C14136) * C139286 * C63379 +
           (C1478 * C181 + C1581 * C139328) * C139286 * C63380) *
              C94 -
          (((C554 * C944 + C139457 * C1560) * C139328 +
            (C554 * C835 + C139457 * C1446) * C181) *
               C139286 * C63380 +
           (C14139 + C14138) * C139286 * C63379 + C669 * C139286 * C63378) *
              C95) *
         C139339) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C139457 * C555) * C934 +
            (C554 * C182 + C139457 * C641) * C823 - C15060 * C935 -
            C15179 * C824 + C15063 * C936 + C15180 * C825) *
               C139286 * C63378 +
           (C15060 * C934 + C15179 * C823 - C15063 * C935 - C15180 * C824 +
            C20833 * C936 + C20907 * C825) *
               C139286 * C63379 +
           (C15063 * C934 + C15180 * C823 - C20833 * C935 - C20907 * C824 +
            (C554 * C20371 + C139457 * C20815) * C936 +
            (C554 * C20457 + C139457 * C20902) * C825) *
               C139286 * C63380) *
              C821 +
          ((C1564 - (C1563 + C1562) + C1582 - C1567 - C1583) * C139286 *
               C63378 +
           (C15174 - (C15173 + C15172) + C15175 - C15176 - C15182) * C139286 *
               C63379 +
           (C15064 * C935 - (C1579 * C823 + C1476 * C934) + C15181 * C824 -
            (C554 * C20370 + C139457 * C20814) * C936 -
            (C554 * C20456 + C139457 * C20903) * C825) *
               C139286 * C63380) *
              C139305) *
         C139339) /
            (p * q * std::sqrt(p + q));
    d2eezz[64] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C139457 * C555) * C244 +
            (C554 * C245 + C139457 * C719) * C139339) *
               C139286 * C63378 +
           (C15281 + C15297) * C139286 * C63379 +
           (C15288 + C15298) * C139286 * C63380) *
              C139328 * C92 -
          (C15285 * C139286 * C63380 + C15289 * C139286 * C63379 +
           (C742 + C726) * C139286 * C63378) *
              C139328 * C93 +
          (C746 * C139286 * C63378 + C17202 * C139286 * C63379 +
           (C1677 + C1687) * C139286 * C63380) *
              C139328 * C94 -
          (((C554 * C1034 + C139457 * C1666) * C139339 +
            (C554 * C835 + C139457 * C1446) * C244) *
               C139286 * C63380 +
           (C3377 + C3373) * C139286 * C63379 + C747 * C139286 * C63378) *
              C139328 * C95)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139457 * C555) * C244 +
             (C554 * C245 + C139457 * C719) * C139339) *
                C139286 * C63378 +
            (C15281 + C15297) * C139286 * C63379 + C64563 * C63380) *
               C823 -
           ((C20980 + C20976) * C139286 * C63380 +
            (C15298 + C15288) * C139286 * C63379 +
            (C15297 + C15281) * C139286 * C63378) *
               C824 +
           (C64563 * C63378 + (C20976 + C20980) * C139286 * C63379 +
            ((C554 * C20371 + C139457 * C20815) * C244 +
             (C554 * C20533 + C139457 * C20974) * C139339) *
                C139286 * C63380) *
               C825) *
              C821 +
          ((C15284 * C139286 * C63378 + C15290 * C139286 * C63379 +
            (C15291 + C15299) * C139286 * C63380) *
               C824 -
           (C64562 * C63380 + C15289 * C139286 * C63379 +
            (C742 + C726) * C139286 * C63378) *
               C823 -
           (((C554 * C20532 + C139457 * C20973) * C139339 +
             (C554 * C20370 + C139457 * C20814) * C244) *
                C139286 * C63380 +
            (C15299 + C15291) * C139286 * C63379 + C64562 * C63378) *
               C825) *
              C139305)) /
            (p * q * std::sqrt(p + q));
    d2eexx[65] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139286 * C113) * C137108 +
            (C63381 * C116 + C139286 * C125) * C139552 -
            (C63381 * C108 + C139286 * C114) * C137101 -
            (C63381 * C117 + C139286 * C126) * C139305) *
               C63378 +
           (C69583 + C69584 - C69585 - C69586) * C63379 + C69597 * C63380) *
              C139457 * C139339 * C139591 +
          ((C69585 - (C69584 + C69583) + C69586) * C63378 +
           (C69589 - (C69588 + C69587) + C69590) * C63379 +
           (C69591 - (C69592 + C69593) + C69594) * C63380) *
              C139457 * C139339 * C139592 +
          (C69597 * C63378 + (C69593 + C69592 - C69591 - C69594) * C63379 +
           (C68316 * C137108 + C68317 * C139552 -
            (C63381 * C20370 + C139286 * C20374) * C137101 -
            (C63381 * C20372 + C139286 * C20376) * C139305) *
               C63380) *
              C139457 * C139339 * C7158)) /
        (p * q * std::sqrt(p + q));
    d2eexy[65] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139286 * C113) * C7235 +
            (C63381 * C182 + C139286 * C188) * C139591 - C63884 * C7236 -
            C63997 * C139592 + C63888 * C7237 + C63998 * C7158) *
               C63378 +
           (C63884 * C7235 + C63997 * C139591 - C63888 * C7236 -
            C63998 * C139592 + C63894 * C7237 + C63999 * C7158) *
               C63379 +
           (C63888 * C7235 + C63998 * C139591 - C63894 * C7236 -
            C63999 * C139592 + C68316 * C7237 + C68374 * C7158) *
               C63380) *
              C139457 * C139552 +
          ((C63886 * C7236 -
            ((C63381 * C183 + C139286 * C189) * C139591 +
             (C63381 * C108 + C139286 * C114) * C7235) +
            C64000 * C139592 - C63890 * C7237 - C64001 * C7158) *
               C63378 +
           (C63890 * C7236 - (C64000 * C139591 + C63886 * C7235) +
            C64001 * C139592 - C63892 * C7237 - C64002 * C7158) *
               C63379 +
           (C63892 * C7236 - (C64001 * C139591 + C63890 * C7235) +
            C64002 * C139592 - (C63381 * C20370 + C139286 * C20374) * C7237 -
            (C63381 * C20456 + C139286 * C20458) * C7158) *
               C63380) *
              C139457 * C139305) *
         C139339) /
        (p * q * std::sqrt(p + q));
    d2eexz[65] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C63381 * C107 + C139286 * C113) * C244 +
                       (C63381 * C245 + C139286 * C251) * C139339) *
                          C63378 +
                      (C64077 + C64101) * C63379 + C64107 * C63380) *
                         C139457 * C139591 -
                     (C68427 * C63380 + (C64102 + C64080) * C63379 +
                      (C64101 + C64077) * C63378) *
                         C139457 * C139592 +
                     (C64107 * C63378 + (C64085 + C64103) * C63379 +
                      (C68428 + C68432) * C63380) *
                         C139457 * C7158) *
                        C139552 +
                    (((C64086 + C64104) * C63378 + (C64089 + C64105) * C63379 +
                      (C64092 + C64106) * C63380) *
                         C139457 * C139592 -
                     (C64108 * C63380 + (C64104 + C64086) * C63379 +
                      ((C63381 * C246 + C139286 * C252) * C139339 +
                       (C63381 * C108 + C139286 * C114) * C244) *
                          C63378) *
                         C139457 * C139591 -
                     (((C63381 * C20532 + C139286 * C20534) * C139339 +
                       (C63381 * C20370 + C139286 * C20374) * C244) *
                          C63380 +
                      (C64106 + C64092) * C63379 + C64108 * C63378) *
                         C139457 * C7158) *
                        C139305)) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[65] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((C63532 * C107 + C63378 * C308 + C63533 * C831 +
                      C63379 * C1118 + C63534 * C832 + C63380 * C1121) *
                         C137108 +
                     (C63532 * C116 + C63378 * C314 + C63533 * C841 +
                      C63379 * C1125 + C63534 * C847 + C63380 * C1129) *
                         C139552 -
                     (C63534 * C833 + C63380 * C1122 + C63533 * C828 +
                      C63379 * C1117 + C63532 * C108 + C63378 * C309) *
                         C137101 -
                     (C63534 * C848 + C63380 * C1130 + C63533 * C840 +
                      C63379 * C1126 + C63532 * C117 + C63378 * C315) *
                         C139305) *
                        C139457 * C139286 * C139339 * C139591 +
                    ((C63532 * C828 + C63378 * C1117 + C63533 * C833 +
                      C63379 * C1122 + C63534 * C5915 + C63380 * C6093) *
                         C137101 -
                     ((C63534 * C5919 + C63380 * C6097 + C63533 * C847 +
                       C63379 * C1129 + C63532 * C841 + C63378 * C1125) *
                          C139552 +
                      (C63534 * C5916 + C63380 * C6094 + C63533 * C832 +
                       C63379 * C1121 + C63532 * C831 + C63378 * C1118) *
                          C137108) +
                     (C63532 * C840 + C63378 * C1126 + C63533 * C848 +
                      C63379 * C1130 + C63534 * C5918 + C63380 * C6096) *
                         C139305) *
                        C139457 * C139286 * C139339 * C139592 +
                    ((C63532 * C832 + C63378 * C1121 + C63533 * C5916 +
                      C63379 * C6094 + C63534 * C20371 + C63380 * C20609) *
                         C137108 +
                     (C63532 * C847 + C63378 * C1129 + C63533 * C5919 +
                      C63379 * C6097 + C63534 * C20373 + C63380 * C20611) *
                         C139552 -
                     (C63534 * C20370 + C63380 * C20608 + C63533 * C5915 +
                      C63379 * C6093 + C63532 * C833 + C63378 * C1122) *
                         C137101 -
                     (C63534 * C20372 + C63380 * C20610 + C63533 * C5918 +
                      C63379 * C6096 + C63532 * C848 + C63378 * C1130) *
                         C139305) *
                        C139457 * C139286 * C139339 * C7158)) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[65] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((C63532 * C107 + C63378 * C308 + C63533 * C831 +
                      C63379 * C1118 + C63534 * C832 + C63380 * C1121) *
                         C7235 +
                     (C63532 * C182 + C63378 * C394 + C63533 * C939 +
                      C63379 * C1231 + C63534 * C940 + C63380 * C1232) *
                         C139591 -
                     (C63534 * C5916 + C63380 * C6094 + C63533 * C832 +
                      C63379 * C1121 + C63532 * C831 + C63378 * C1118) *
                         C7236 -
                     (C63534 * C5982 + C63380 * C6148 + C63533 * C940 +
                      C63379 * C1232 + C63532 * C939 + C63378 * C1231) *
                         C139592 +
                     (C63532 * C832 + C63378 * C1121 + C63533 * C5916 +
                      C63379 * C6094 + C63534 * C20371 + C63380 * C20609) *
                         C7237 +
                     (C63532 * C940 + C63378 * C1232 + C63533 * C5982 +
                      C63379 * C6148 + C63534 * C20457 + C63380 * C20678) *
                         C7158) *
                        C139457 * C139286 * C139552 +
                    ((C63532 * C828 + C63378 * C1117 + C63533 * C833 +
                      C63379 * C1122 + C63534 * C5915 + C63380 * C6093) *
                         C7236 -
                     ((C63534 * C941 + C63380 * C1234 + C63533 * C938 +
                       C63379 * C1233 + C63532 * C183 + C63378 * C395) *
                          C139591 +
                      (C63534 * C833 + C63380 * C1122 + C63533 * C828 +
                       C63379 * C1117 + C63532 * C108 + C63378 * C309) *
                          C7235) +
                     (C63532 * C938 + C63378 * C1233 + C63533 * C941 +
                      C63379 * C1234 + C63534 * C5981 + C63380 * C6149) *
                         C139592 -
                     (C63534 * C20370 + C63380 * C20608 + C63533 * C5915 +
                      C63379 * C6093 + C63532 * C833 + C63378 * C1122) *
                         C7237 -
                     (C63534 * C20456 + C63380 * C20679 + C63533 * C5981 +
                      C63379 * C6149 + C63532 * C941 + C63378 * C1234) *
                         C7158) *
                        C139457 * C139286 * C139305) *
                   C139339) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[65] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C63532 * C107 + C63378 * C308 + C63533 * C831 +
                       C63379 * C1118 + C63534 * C832 + C63380 * C1121) *
                          C244 +
                      (C63532 * C245 + C63378 * C474 + C63533 * C1029 +
                       C63379 * C1339 + C63534 * C1030 + C63380 * C1340) *
                          C139339) *
                         C139457 * C139286 * C139591 -
                     ((C63534 * C6038 + C63380 * C6203 + C63533 * C1030 +
                       C63379 * C1340 + C63532 * C1029 + C63378 * C1339) *
                          C139339 +
                      (C63534 * C5916 + C63380 * C6094 + C63533 * C832 +
                       C63379 * C1121 + C63532 * C831 + C63378 * C1118) *
                          C244) *
                         C139457 * C139286 * C139592 +
                     ((C63532 * C832 + C63378 * C1121 + C63533 * C5916 +
                       C63379 * C6094 + C63534 * C20371 + C63380 * C20609) *
                          C244 +
                      (C63532 * C1030 + C63378 * C1340 + C63533 * C6038 +
                       C63379 * C6203 + C63534 * C20533 + C63380 * C20747) *
                          C139339) *
                         C139457 * C139286 * C7158) *
                        C139552 +
                    (((C63532 * C828 + C63378 * C1117 + C63533 * C833 +
                       C63379 * C1122 + C63534 * C5915 + C63380 * C6093) *
                          C244 +
                      (C63532 * C1028 + C63378 * C1338 + C63533 * C1031 +
                       C63379 * C1341 + C63534 * C6037 + C63380 * C6202) *
                          C139339) *
                         C139457 * C139286 * C139592 -
                     ((C63534 * C1031 + C63380 * C1341 + C63533 * C1028 +
                       C63379 * C1338 + C63532 * C246 + C63378 * C475) *
                          C139339 +
                      (C63534 * C833 + C63380 * C1122 + C63533 * C828 +
                       C63379 * C1117 + C63532 * C108 + C63378 * C309) *
                          C244) *
                         C139457 * C139286 * C139591 -
                     ((C63534 * C20532 + C63380 * C20746 + C63533 * C6037 +
                       C63379 * C6202 + C63532 * C1031 + C63378 * C1341) *
                          C139339 +
                      (C63534 * C20370 + C63380 * C20608 + C63533 * C5915 +
                       C63379 * C6093 + C63532 * C833 + C63378 * C1122) *
                          C244) *
                         C139457 * C139286 * C7158) *
                        C139305)) /
                  (p * q * std::sqrt(p + q));
    d2eezx[65] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C554 * C107 + C139457 * C555) * C137108 +
                      (C554 * C116 + C139457 * C561) * C139552 -
                      C584 * C137101 - C585 * C139305) *
                         C139286 * C63378 +
                     (C22631 + C22632 - C22633 - C22634) * C139286 * C63379 +
                     C70049 * C63380) *
                        C139339 * C139591 +
                    ((C22633 - (C22632 + C22631) + C22634) * C139286 * C63378 +
                     (C22639 - (C22640 + C22641) + C22642) * C139286 * C63379 +
                     (C70043 - (C70044 + C70045) + C70046) * C139286 * C63380) *
                        C139339 * C139592 +
                    (C70049 * C63378 +
                     (C70045 + C70044 - C70043 - C70046) * C139286 * C63379 +
                     (C68647 * C137108 + C68648 * C139552 -
                      (C554 * C20370 + C139457 * C20814) * C137101 -
                      (C554 * C20372 + C139457 * C20816) * C139305) *
                         C139286 * C63380) *
                        C139339 * C7158)) /
                  (p * q * std::sqrt(p + q));
    d2eezy[65] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C139457 * C555) * C7235 +
            (C554 * C182 + C139457 * C641) * C139591 - C15060 * C7236 -
            C15179 * C139592 + C15063 * C7237 + C15180 * C7158) *
               C139286 * C63378 +
           (C15060 * C7235 + C15179 * C139591 - C15063 * C7236 -
            C15180 * C139592 + C20833 * C7237 + C20907 * C7158) *
               C139286 * C63379 +
           (C15063 * C7235 + C15180 * C139591 - C20833 * C7236 -
            C20907 * C139592 + C68647 * C7237 + C68704 * C7158) *
               C139286 * C63380) *
              C139552 +
          ((C7697 - (C7696 + C7695) + C7698 - C7699 - C7700) * C139286 *
               C63378 +
           (C22747 - (C22746 + C22745) + C22748 - C22749 - C22750) * C139286 *
               C63379 +
           (C15064 * C7236 - (C1579 * C139591 + C1476 * C7235) +
            C15181 * C139592 - (C554 * C20370 + C139457 * C20814) * C7237 -
            (C554 * C20456 + C139457 * C20903) * C7158) *
               C139286 * C63380) *
              C139305) *
         C139339) /
        (p * q * std::sqrt(p + q));
    d2eezz[65] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C554 * C107 + C139457 * C555) * C244 +
                       (C554 * C245 + C139457 * C719) * C139339) *
                          C139286 * C63378 +
                      (C15281 + C15297) * C139286 * C63379 + C64563 * C63380) *
                         C139591 -
                     (C68760 * C63380 + (C15298 + C15288) * C139286 * C63379 +
                      (C15297 + C15281) * C139286 * C63378) *
                         C139592 +
                     (C64563 * C63378 + (C20976 + C20980) * C139286 * C63379 +
                      (C68757 + C68762) * C139286 * C63380) *
                         C7158) *
                        C139552 +
                    ((C15284 * C139286 * C63378 + C15290 * C139286 * C63379 +
                      (C15291 + C15299) * C139286 * C63380) *
                         C139592 -
                     (C64562 * C63380 + C15289 * C139286 * C63379 +
                      (C742 + C726) * C139286 * C63378) *
                         C139591 -
                     (((C554 * C20532 + C139457 * C20973) * C139339 +
                       (C554 * C20370 + C139457 * C20814) * C244) *
                          C139286 * C63380 +
                      (C15299 + C15291) * C139286 * C63379 + C64562 * C63378) *
                         C7158) *
                        C139305)) /
                  (p * q * std::sqrt(p + q));
    d2eexx[66] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C63381 * C107 + C139286 * C113) * C5913 +
                       (C63381 * C116 + C139286 * C125) * C139300) *
                          C63378 +
                      (C68304 + C68305) * C63379 + C68314 * C63380) *
                         C139457 * C139561 -
                     (C71170 * C63380 + (C68843 + C68844) * C63379 +
                      ((C63381 * C1777 + C139286 * C1790) * C139300 +
                       (C63381 * C1767 + C139286 * C1778) * C5913) *
                          C63378) *
                         C139457 * C139403) *
                        C139591 +
                    (((C68844 + C68843) * C63378 + (C68842 + C68841) * C63379 +
                      (C71177 + C71178) * C63380) *
                         C139457 * C139403 -
                     (C68315 * C63380 + (C68307 + C68306) * C63379 +
                      (C68305 + C68304) * C63378) *
                         C139457 * C139561) *
                        C139592 +
                    ((C68314 * C63378 + (C68309 + C68308) * C63379 +
                      (C68318 + C68319) * C63380) *
                         C139457 * C139561 -
                     (((C63381 * C71166 + C139286 * C71168) * C139300 +
                       (C63381 * C71165 + C139286 * C71167) * C5913) *
                          C63380 +
                      (C71178 + C71177) * C63379 + C71170 * C63378) *
                         C139457 * C139403) *
                        C7158)) /
                  (p * q * std::sqrt(p + q));
    d2eexy[66] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139286 * C113) * C7235 +
            (C63381 * C182 + C139286 * C188) * C139591 - C63884 * C7236 -
            C63997 * C139592 + C63888 * C7237 + C63998 * C7158) *
               C63378 +
           (C63884 * C7235 + C63997 * C139591 - C63888 * C7236 -
            C63998 * C139592 + C63894 * C7237 + C63999 * C7158) *
               C63379 +
           (C63888 * C7235 + C63998 * C139591 - C63894 * C7236 -
            C63999 * C139592 + C68316 * C7237 + C68374 * C7158) *
               C63380) *
              C139457 * C139300 * C139561 +
          ((C66724 * C7236 -
            ((C63381 * C1873 + C139286 * C1881) * C139591 +
             (C63381 * C1767 + C139286 * C1778) * C7235) +
            C66844 * C139592 - C66728 * C7237 - C66845 * C7158) *
               C63378 +
           (C66728 * C7236 - (C66844 * C139591 + C66724 * C7235) +
            C66845 * C139592 - C71175 * C7237 - C71257 * C7158) *
               C63379 +
           (C71175 * C7236 - (C66845 * C139591 + C66728 * C7235) +
            C71257 * C139592 - (C63381 * C71165 + C139286 * C71167) * C7237 -
            (C63381 * C71252 + C139286 * C71253) * C7158) *
               C63380) *
              C139457 * C139300 * C139403)) /
        (p * q * std::sqrt(p + q));
    d2eexz[66] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139286 * C113) * C3607 +
            (C63381 * C245 + C139286 * C251) * C139561 -
            (C63381 * C1767 + C139286 * C1778) * C3608 -
            (C63381 * C1965 + C139286 * C1973) * C139403) *
               C63378 +
           (C66946 + C66947 - C66948 - C66970) * C63379 + C71342 * C63380) *
              C139457 * C139591 +
          ((C66948 - (C66947 + C66946) + C66970) * C63378 +
           (C66953 - (C66952 + C66951) + C66971) * C63379 +
           (C71335 - (C71336 + C71337) + C71343) * C63380) *
              C139457 * C139592 +
          (C71342 * C63378 + (C71337 + C71336 - C71335 - C71343) * C63379 +
           (C68316 * C3607 + C68431 * C139561 -
            (C63381 * C71165 + C139286 * C71167) * C3608 -
            (C63381 * C71331 + C139286 * C71332) * C139403) *
               C63380) *
              C139457 * C7158) *
         C139300) /
        (p * q * std::sqrt(p + q));
    d2eeyx[66] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C63532 * C107 + C63378 * C308 + C63533 * C831 +
                       C63379 * C1118 + C63534 * C832 + C63380 * C1121) *
                          C5913 +
                      (C63532 * C116 + C63378 * C314 + C63533 * C841 +
                       C63379 * C1125 + C63534 * C847 + C63380 * C1129) *
                          C139300) *
                         C139457 * C139286 * C139561 -
                     ((C63534 * C8757 + C63380 * C9003 + C63533 * C4230 +
                       C63379 * C4553 + C63532 * C1777 + C63378 * C2061) *
                          C139300 +
                      (C63534 * C8754 + C63380 * C9000 + C63533 * C4223 +
                       C63379 * C4549 + C63532 * C1767 + C63378 * C2054) *
                          C5913) *
                         C139457 * C139286 * C139403) *
                        C139591 +
                    (((C63532 * C4223 + C63378 * C4549 + C63533 * C8754 +
                       C63379 * C9000 + C63534 * C24129 + C63380 * C24463) *
                          C5913 +
                      (C63532 * C4230 + C63378 * C4553 + C63533 * C8757 +
                       C63379 * C9003 + C63534 * C24131 + C63380 * C24465) *
                          C139300) *
                         C139457 * C139286 * C139403 -
                     ((C63534 * C5919 + C63380 * C6097 + C63533 * C847 +
                       C63379 * C1129 + C63532 * C841 + C63378 * C1125) *
                          C139300 +
                      (C63534 * C5916 + C63380 * C6094 + C63533 * C832 +
                       C63379 * C1121 + C63532 * C831 + C63378 * C1118) *
                          C5913) *
                         C139457 * C139286 * C139561) *
                        C139592 +
                    (((C63532 * C832 + C63378 * C1121 + C63533 * C5916 +
                       C63379 * C6094 + C63534 * C20371 + C63380 * C20609) *
                          C5913 +
                      (C63532 * C847 + C63378 * C1129 + C63533 * C5919 +
                       C63379 * C6097 + C63534 * C20373 + C63380 * C20611) *
                          C139300) *
                         C139457 * C139286 * C139561 -
                     ((C63534 * C71166 + C63380 * C71418 + C63533 * C24131 +
                       C63379 * C24465 + C63532 * C8757 + C63378 * C9003) *
                          C139300 +
                      (C63534 * C71165 + C63380 * C71417 + C63533 * C24129 +
                       C63379 * C24463 + C63532 * C8754 + C63378 * C9000) *
                          C5913) *
                         C139457 * C139286 * C139403) *
                        C7158)) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[66] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((C63532 * C107 + C63378 * C308 + C63533 * C831 +
                      C63379 * C1118 + C63534 * C832 + C63380 * C1121) *
                         C7235 +
                     (C63532 * C182 + C63378 * C394 + C63533 * C939 +
                      C63379 * C1231 + C63534 * C940 + C63380 * C1232) *
                         C139591 -
                     (C63534 * C5916 + C63380 * C6094 + C63533 * C832 +
                      C63379 * C1121 + C63532 * C831 + C63378 * C1118) *
                         C7236 -
                     (C63534 * C5982 + C63380 * C6148 + C63533 * C940 +
                      C63379 * C1232 + C63532 * C939 + C63378 * C1231) *
                         C139592 +
                     (C63532 * C832 + C63378 * C1121 + C63533 * C5916 +
                      C63379 * C6094 + C63534 * C20371 + C63380 * C20609) *
                         C7237 +
                     (C63532 * C940 + C63378 * C1232 + C63533 * C5982 +
                      C63379 * C6148 + C63534 * C20457 + C63380 * C20678) *
                         C7158) *
                        C139457 * C139286 * C139300 * C139561 +
                    ((C63532 * C4223 + C63378 * C4549 + C63533 * C8754 +
                      C63379 * C9000 + C63534 * C24129 + C63380 * C24463) *
                         C7236 -
                     ((C63534 * C8840 + C63380 * C9078 + C63533 * C4337 +
                       C63379 * C4667 + C63532 * C1873 + C63378 * C2170) *
                          C139591 +
                      (C63534 * C8754 + C63380 * C9000 + C63533 * C4223 +
                       C63379 * C4549 + C63532 * C1767 + C63378 * C2054) *
                          C7235) +
                     (C63532 * C4337 + C63378 * C4667 + C63533 * C8840 +
                      C63379 * C9078 + C63534 * C24247 + C63380 * C24564) *
                         C139592 -
                     (C63534 * C71165 + C63380 * C71417 + C63533 * C24129 +
                      C63379 * C24463 + C63532 * C8754 + C63378 * C9000) *
                         C7237 -
                     (C63534 * C71252 + C63380 * C71493 + C63533 * C24247 +
                      C63379 * C24564 + C63532 * C8840 + C63378 * C9078) *
                         C7158) *
                        C139457 * C139286 * C139300 * C139403)) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[66] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((C63532 * C107 + C63378 * C308 + C63533 * C831 +
                      C63379 * C1118 + C63534 * C832 + C63380 * C1121) *
                         C3607 +
                     (C63532 * C245 + C63378 * C474 + C63533 * C1029 +
                      C63379 * C1339 + C63534 * C1030 + C63380 * C1340) *
                         C139561 -
                     (C63534 * C8754 + C63380 * C9000 + C63533 * C4223 +
                      C63379 * C4549 + C63532 * C1767 + C63378 * C2054) *
                         C3608 -
                     (C63534 * C8920 + C63380 * C9155 + C63533 * C4443 +
                      C63379 * C4783 + C63532 * C1965 + C63378 * C2269) *
                         C139403) *
                        C139457 * C139286 * C139591 +
                    ((C63532 * C4223 + C63378 * C4549 + C63533 * C8754 +
                      C63379 * C9000 + C63534 * C24129 + C63380 * C24463) *
                         C3608 -
                     ((C63534 * C6038 + C63380 * C6203 + C63533 * C1030 +
                       C63379 * C1340 + C63532 * C1029 + C63378 * C1339) *
                          C139561 +
                      (C63534 * C5916 + C63380 * C6094 + C63533 * C832 +
                       C63379 * C1121 + C63532 * C831 + C63378 * C1118) *
                          C3607) +
                     (C63532 * C4443 + C63378 * C4783 + C63533 * C8920 +
                      C63379 * C9155 + C63534 * C24355 + C63380 * C24664) *
                         C139403) *
                        C139457 * C139286 * C139592 +
                    ((C63532 * C832 + C63378 * C1121 + C63533 * C5916 +
                      C63379 * C6094 + C63534 * C20371 + C63380 * C20609) *
                         C3607 +
                     (C63532 * C1030 + C63378 * C1340 + C63533 * C6038 +
                      C63379 * C6203 + C63534 * C20533 + C63380 * C20747) *
                         C139561 -
                     (C63534 * C71165 + C63380 * C71417 + C63533 * C24129 +
                      C63379 * C24463 + C63532 * C8754 + C63378 * C9000) *
                         C3608 -
                     (C63534 * C71331 + C63380 * C71568 + C63533 * C24355 +
                      C63379 * C24664 + C63532 * C8920 + C63378 * C9155) *
                         C139403) *
                        C139457 * C139286 * C7158) *
                   C139300) /
                  (p * q * std::sqrt(p + q));
    d2eezx[66] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C554 * C107 + C139457 * C555) * C5913 +
                       (C554 * C116 + C139457 * C561) * C139300) *
                          C139286 * C63378 +
                      (C20819 + C20820) * C139286 * C63379 + C68645 * C63380) *
                         C139561 -
                     (C71651 * C63380 + (C21721 + C21722) * C139286 * C63379 +
                      ((C554 * C1777 + C139457 * C2383) * C139300 +
                       (C554 * C1767 + C139457 * C2376) * C5913) *
                          C139286 * C63378) *
                         C139403) *
                        C139591 +
                    (((C21722 + C21721) * C139286 * C63378 +
                      (C24777 + C24778) * C139286 * C63379 +
                      (C71654 + C71655) * C139286 * C63380) *
                         C139403 -
                     (C68646 * C63380 + (C20825 + C20826) * C139286 * C63379 +
                      (C20820 + C20819) * C139286 * C63378) *
                         C139561) *
                        C139592 +
                    ((C68645 * C63378 + (C20835 + C20836) * C139286 * C63379 +
                      (C68649 + C68650) * C139286 * C63380) *
                         C139561 -
                     (((C554 * C71166 + C139457 * C71644) * C139300 +
                       (C554 * C71165 + C139457 * C71643) * C5913) *
                          C139286 * C63380 +
                      (C71655 + C71654) * C139286 * C63379 + C71651 * C63378) *
                         C139403) *
                        C7158)) /
                  (p * q * std::sqrt(p + q));
    d2eezy[66] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C139457 * C555) * C7235 +
            (C554 * C182 + C139457 * C641) * C139591 - C15060 * C7236 -
            C15179 * C139592 + C15063 * C7237 + C15180 * C7158) *
               C139286 * C63378 +
           (C15060 * C7235 + C15179 * C139591 - C15063 * C7236 -
            C15180 * C139592 + C20833 * C7237 + C20907 * C7158) *
               C139286 * C63379 +
           (C15063 * C7235 + C15180 * C139591 - C20833 * C7236 -
            C20907 * C139592 + C68647 * C7237 + C68704 * C7158) *
               C139286 * C63380) *
              C139300 * C139561 +
          ((C19108 * C7236 -
            ((C554 * C1873 + C139457 * C2492) * C139591 +
             (C554 * C1767 + C139457 * C2376) * C7235) +
            C19250 * C139592 - C24775 * C7237 - C24881 * C7158) *
               C139286 * C63378 +
           (C24775 * C7236 - (C19250 * C139591 + C19108 * C7235) +
            C24881 * C139592 - C71652 * C7237 - C71733 * C7158) *
               C139286 * C63379 +
           (C71652 * C7236 - (C24881 * C139591 + C24775 * C7235) +
            C71733 * C139592 - (C554 * C71165 + C139457 * C71643) * C7237 -
            (C554 * C71252 + C139457 * C71729) * C7158) *
               C139286 * C63380) *
              C139300 * C139403)) /
        (p * q * std::sqrt(p + q));
    d2eezz[66] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C554 * C107 + C139457 * C555) * C3607 +
                      (C554 * C245 + C139457 * C719) * C139561 -
                      (C554 * C1767 + C139457 * C2376) * C3608 -
                      (C554 * C1965 + C139457 * C2591) * C139403) *
                         C139286 * C63378 +
                     (C19383 + C19384 - C19385 - C19399) * C139286 * C63379 +
                     C71819 * C63380) *
                        C139591 +
                    ((C19385 - (C19384 + C19383) + C19399) * C139286 * C63378 +
                     (C24982 - (C24983 + C24984) + C24988) * C139286 * C63379 +
                     (C71810 - (C71811 + C71812) + C71818) * C139286 * C63380) *
                        C139592 +
                    (C71819 * C63378 +
                     (C71812 + C71811 - C71810 - C71818) * C139286 * C63379 +
                     (C68647 * C3607 + C68761 * C139561 -
                      (C554 * C71165 + C139457 * C71643) * C3608 -
                      (C554 * C71331 + C139457 * C71807) * C139403) *
                         C139286 * C63380) *
                        C7158) *
                   C139300) /
                  (p * q * std::sqrt(p + q));
    d2eexx[67] +=
        (-std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139286 * C113) * C5913 +
            (C63381 * C116 + C139286 * C125) * C139300) *
               C63378 +
           (C68304 + C68305) * C63379 + C68314 * C63380) *
              C139457 * C139339 * C5909 -
          (C68315 * C63380 + (C68307 + C68306) * C63379 +
           (C68305 + C68304) * C63378) *
              C139457 * C139339 * C5910 +
          (C68314 * C63378 + (C68309 + C68308) * C63379 +
           (C68318 + C68319) * C63380) *
              C139457 * C139339 * C5911 -
          (((C63381 * C68300 + C139286 * C68302) * C139300 +
            (C63381 * C68299 + C139286 * C68301) * C5913) *
               C63380 +
           (C68319 + C68318) * C63379 + C68315 * C63378) *
              C139457 * C139339 * C5912)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139286 * C113) * C5230 +
            (C63381 * C116 + C139286 * C125) * C5225 -
            (C63381 * C108 + C139286 * C114) * C5231 -
            (C63381 * C117 + C139286 * C126) * C5226 +
            (C63381 * C109 + C139286 * C115) * C5232 +
            (C63381 * C118 + C139286 * C127) * C5227) *
               C63378 +
           (C67640 + C67641 - C67642 - C67643 + C67644 + C67645) * C63379 +
           (C67646 + C67647 - C67648 - C67649 + C67650 + C67651) * C63380) *
              C139457 * C139339 * C5228 +
          ((C67642 - (C67641 + C67640) + C67643 - C67644 - C67645) * C63378 +
           (C67648 - (C67647 + C67646) + C67649 - C67650 - C67651) * C63379 +
           (C63892 * C5231 - (C63893 * C5225 + C63894 * C5230) +
            C63895 * C5226 - (C63381 * C5914 + C139286 * C5920) * C5232 -
            (C63381 * C5917 + C139286 * C5923) * C5227) *
               C63380) *
              C139457 * C139339 * C139377)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139286 * C113) * C5913 +
             (C63381 * C116 + C139286 * C125) * C139300) *
                C63378 +
            (C68304 + C68305) * C63379 + C68314 * C63380) *
               C139457 * C1761 -
           ((C68841 + C68842) * C63380 + (C68843 + C68844) * C63379 +
            ((C63381 * C1777 + C139286 * C1790) * C139300 +
             (C63381 * C1767 + C139286 * C1778) * C5913) *
                C63378) *
               C139457 * C1762 +
           (((C63381 * C1768 + C139286 * C1780) * C5913 +
             (C63381 * C1783 + C139286 * C1792) * C139300) *
                C63378 +
            (C68857 + C68858) * C63379 + (C68859 + C68860) * C63380) *
               C139457 * C1763) *
              C5228 +
          (((C68844 + C68843) * C63378 + (C68842 + C68841) * C63379 +
            ((C63381 * C24129 + C139286 * C24133) * C5913 +
             (C63381 * C24131 + C139286 * C24135) * C139300) *
                C63380) *
               C139457 * C1762 -
           (C68315 * C63380 + (C68307 + C68306) * C63379 +
            (C68305 + C68304) * C63378) *
               C139457 * C1761 -
           (((C63381 * C68837 + C139286 * C68839) * C139300 +
             (C63381 * C68836 + C139286 * C68838) * C5913) *
                C63380 +
            (C68860 + C68859) * C63379 + (C68858 + C68857) * C63378) *
               C139457 * C1763) *
              C139377)) /
            (p * q * std::sqrt(p + q));
    d2eexy[67] +=
        (-std::pow(Pi, 2.5) *
         (((C63381 * C107 + C139286 * C113) * C5976 +
           (C63381 * C182 + C139286 * C188) * C5909 - C63884 * C5977 -
           C63997 * C5910 + C63888 * C5978 + C63998 * C5911 - C63894 * C5979 -
           C63999 * C5912) *
              C63378 +
          (C63884 * C5976 + C63997 * C5909 - C63888 * C5977 - C63998 * C5910 +
           C63894 * C5978 + C63999 * C5911 - C68316 * C5979 - C68374 * C5912) *
              C63379 +
          (C63888 * C5976 + C63998 * C5909 - C63894 * C5977 - C63999 * C5910 +
           C68316 * C5978 + C68374 * C5911 -
           (C63381 * C68299 + C139286 * C68301) * C5979 -
           (C63381 * C68369 + C139286 * C68370) * C5912) *
              C63380) *
         C139457 * C139300 * C139339) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139286 * C113) * C5307 +
            (C63381 * C182 + C139286 * C188) * C5228 - C63884 * C5308 -
            C63997 * C139377) *
               C63378 +
           (C63884 * C5307 + C63997 * C5228 - C63888 * C5308 -
            C63998 * C139377) *
               C63379 +
           (C63888 * C5307 + C63998 * C5228 - C63894 * C5308 -
            C63999 * C139377) *
               C63380) *
              C139457 * C5225 +
          ((C63886 * C5308 -
            ((C63381 * C183 + C139286 * C189) * C5228 +
             (C63381 * C108 + C139286 * C114) * C5307) +
            C64000 * C139377) *
               C63378 +
           (C63890 * C5308 - (C64000 * C5228 + C63886 * C5307) +
            C64001 * C139377) *
               C63379 +
           (C63892 * C5308 - (C64001 * C5228 + C63890 * C5307) +
            C64002 * C139377) *
               C63380) *
              C139457 * C5226 +
          (((C63381 * C109 + C139286 * C115) * C5307 +
            (C63381 * C184 + C139286 * C190) * C5228 - C65320 * C5308 -
            C65406 * C139377) *
               C63378 +
           (C65320 * C5307 + C65406 * C5228 - C65322 * C5308 -
            C65407 * C139377) *
               C63379 +
           (C65322 * C5307 + C65407 * C5228 -
            (C63381 * C5914 + C139286 * C5920) * C5308 -
            (C63381 * C5980 + C139286 * C5983) * C139377) *
               C63380) *
              C139457 * C5227) *
         C139339) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139286 * C113) * C5307 +
            (C63381 * C182 + C139286 * C188) * C5228 - C63884 * C5308 -
            C63997 * C139377) *
               C63378 +
           (C63884 * C5307 + C63997 * C5228 - C63888 * C5308 -
            C63998 * C139377) *
               C63379 +
           (C63888 * C5307 + C63998 * C5228 - C63894 * C5308 -
            C63999 * C139377) *
               C63380) *
              C139457 * C139300 * C1761 +
          ((C66724 * C5308 -
            ((C63381 * C1873 + C139286 * C1881) * C5228 +
             (C63381 * C1767 + C139286 * C1778) * C5307) +
            C66844 * C139377) *
               C63378 +
           (C66728 * C5308 - (C66844 * C5228 + C66724 * C5307) +
            C66845 * C139377) *
               C63379 +
           ((C63381 * C24129 + C139286 * C24133) * C5308 -
            (C66845 * C5228 + C66728 * C5307) +
            (C63381 * C24247 + C139286 * C24249) * C139377) *
               C63380) *
              C139457 * C139300 * C1762 +
          (((C63381 * C1768 + C139286 * C1780) * C5307 +
            (C63381 * C1874 + C139286 * C1882) * C5228 - C68853 * C5308 -
            C68941 * C139377) *
               C63378 +
           (C68853 * C5307 + C68941 * C5228 - C68855 * C5308 -
            C68942 * C139377) *
               C63379 +
           (C68855 * C5307 + C68942 * C5228 -
            (C63381 * C68836 + C139286 * C68838) * C5308 -
            (C63381 * C68934 + C139286 * C68935) * C139377) *
               C63380) *
              C139457 * C139300 * C1763)) /
            (p * q * std::sqrt(p + q));
    d2eexz[67] +=
        (-std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139286 * C113) * C244 +
            (C63381 * C245 + C139286 * C251) * C139339) *
               C63378 +
           (C64077 + C64101) * C63379 + C64107 * C63380) *
              C139457 * C5909 -
          (C68427 * C63380 + (C64102 + C64080) * C63379 +
           (C64101 + C64077) * C63378) *
              C139457 * C5910 +
          (C64107 * C63378 + (C64085 + C64103) * C63379 +
           (C68428 + C68432) * C63380) *
              C139457 * C5911 -
          (((C63381 * C68424 + C139286 * C68425) * C139339 +
            (C63381 * C68299 + C139286 * C68301) * C244) *
               C63380 +
           (C68432 + C68428) * C63379 + C68427 * C63378) *
              C139457 * C5912) *
         C139300) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139286 * C113) * C244 +
             (C63381 * C245 + C139286 * C251) * C139339) *
                C63378 +
            (C64077 + C64101) * C63379 + C64107 * C63380) *
               C139457 * C5228 -
           ((C64103 + C64085) * C63380 + (C64102 + C64080) * C63379 +
            (C64101 + C64077) * C63378) *
               C139457 * C139377) *
              C5225 +
          (((C64086 + C64104) * C63378 + (C64089 + C64105) * C63379 +
            (C64092 + C64106) * C63380) *
               C139457 * C139377 -
           (C64108 * C63380 + (C64104 + C64086) * C63379 +
            ((C63381 * C246 + C139286 * C252) * C139339 +
             (C63381 * C108 + C139286 * C114) * C244) *
                C63378) *
               C139457 * C5228) *
              C5226 +
          ((((C63381 * C109 + C139286 * C115) * C244 +
             (C63381 * C247 + C139286 * C253) * C139339) *
                C63378 +
            (C65482 + C65490) * C63379 + (C65485 + C65491) * C63380) *
               C139457 * C5228 -
           (((C63381 * C6036 + C139286 * C6039) * C139339 +
             (C63381 * C5914 + C139286 * C5920) * C244) *
                C63380 +
            (C65491 + C65485) * C63379 + (C65490 + C65482) * C63378) *
               C139457 * C139377) *
              C5227)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139286 * C113) * C1960 +
            (C63381 * C245 + C139286 * C251) * C1761 -
            (C63381 * C1767 + C139286 * C1778) * C1961 -
            (C63381 * C1965 + C139286 * C1973) * C1762 +
            (C63381 * C1768 + C139286 * C1780) * C1962 +
            (C63381 * C1966 + C139286 * C1974) * C1763) *
               C63378 +
           (C69019 + C69020 - C69021 - C69022 + C69023 + C69035) * C63379 +
           (C69026 + C69027 - C69028 - C69029 + C69030 + C69036) * C63380) *
              C139457 * C5228 +
          ((C69021 - (C69020 + C69019) + C69022 - C69023 - C69035) * C63378 +
           (C69028 - (C69027 + C69026) + C69029 - C69030 - C69036) * C63379 +
           ((C63381 * C24129 + C139286 * C24133) * C1961 -
            (C64097 * C1761 + C63894 * C1960) +
            (C63381 * C24355 + C139286 * C24357) * C1762 -
            (C63381 * C68836 + C139286 * C68838) * C1962 -
            (C63381 * C69016 + C139286 * C69017) * C1763) *
               C63380) *
              C139457 * C139377) *
         C139300) /
            (p * q * std::sqrt(p + q));
    d2eeyx[67] += (-std::pow(Pi, 2.5) *
                   (((C63532 * C107 + C63378 * C308 + C63533 * C831 +
                      C63379 * C1118 + C63534 * C832 + C63380 * C1121) *
                         C5913 +
                     (C63532 * C116 + C63378 * C314 + C63533 * C841 +
                      C63379 * C1125 + C63534 * C847 + C63380 * C1129) *
                         C139300) *
                        C139457 * C139286 * C139339 * C5909 -
                    ((C63534 * C5919 + C63380 * C6097 + C63533 * C847 +
                      C63379 * C1129 + C63532 * C841 + C63378 * C1125) *
                         C139300 +
                     (C63534 * C5916 + C63380 * C6094 + C63533 * C832 +
                      C63379 * C1121 + C63532 * C831 + C63378 * C1118) *
                         C5913) *
                        C139457 * C139286 * C139339 * C5910 +
                    ((C63532 * C832 + C63378 * C1121 + C63533 * C5916 +
                      C63379 * C6094 + C63534 * C20371 + C63380 * C20609) *
                         C5913 +
                     (C63532 * C847 + C63378 * C1129 + C63533 * C5919 +
                      C63379 * C6097 + C63534 * C20373 + C63380 * C20611) *
                         C139300) *
                        C139457 * C139286 * C139339 * C5911 -
                    ((C63534 * C68300 + C63380 * C68483 + C63533 * C20373 +
                      C63379 * C20611 + C63532 * C5919 + C63378 * C6097) *
                         C139300 +
                     (C63534 * C68299 + C63380 * C68482 + C63533 * C20371 +
                      C63379 * C20609 + C63532 * C5916 + C63378 * C6094) *
                         C5913) *
                        C139457 * C139286 * C139339 * C5912)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::pow(Pi, 2.5) *
                   (((C63532 * C107 + C63378 * C308 + C63533 * C831 +
                      C63379 * C1118 + C63534 * C832 + C63380 * C1121) *
                         C5230 +
                     (C63532 * C116 + C63378 * C314 + C63533 * C841 +
                      C63379 * C1125 + C63534 * C847 + C63380 * C1129) *
                         C5225 -
                     (C63534 * C833 + C63380 * C1122 + C63533 * C828 +
                      C63379 * C1117 + C63532 * C108 + C63378 * C309) *
                         C5231 -
                     (C63534 * C848 + C63380 * C1130 + C63533 * C840 +
                      C63379 * C1126 + C63532 * C117 + C63378 * C315) *
                         C5226 +
                     (C63532 * C109 + C63378 * C310 + C63533 * C829 +
                      C63379 * C1119 + C63534 * C834 + C63380 * C1123) *
                         C5232 +
                     (C63532 * C118 + C63378 * C316 + C63533 * C839 +
                      C63379 * C1127 + C63534 * C849 + C63380 * C1131) *
                         C5227) *
                        C139457 * C139286 * C139339 * C5228 +
                    ((C63532 * C828 + C63378 * C1117 + C63533 * C833 +
                      C63379 * C1122 + C63534 * C5915 + C63380 * C6093) *
                         C5231 -
                     ((C63534 * C5919 + C63380 * C6097 + C63533 * C847 +
                       C63379 * C1129 + C63532 * C841 + C63378 * C1125) *
                          C5225 +
                      (C63534 * C5916 + C63380 * C6094 + C63533 * C832 +
                       C63379 * C1121 + C63532 * C831 + C63378 * C1118) *
                          C5230) +
                     (C63532 * C840 + C63378 * C1126 + C63533 * C848 +
                      C63379 * C1130 + C63534 * C5918 + C63380 * C6096) *
                         C5226 -
                     (C63534 * C5914 + C63380 * C6092 + C63533 * C834 +
                      C63379 * C1123 + C63532 * C829 + C63378 * C1119) *
                         C5232 -
                     (C63534 * C5917 + C63380 * C6095 + C63533 * C849 +
                      C63379 * C1131 + C63532 * C839 + C63378 * C1127) *
                         C5227) *
                        C139457 * C139286 * C139339 * C139377)) /
                      (p * q * std::sqrt(p + q)) +
                  (2 * std::pow(Pi, 2.5) *
                   ((((C63532 * C107 + C63378 * C308 + C63533 * C831 +
                       C63379 * C1118 + C63534 * C832 + C63380 * C1121) *
                          C5913 +
                      (C63532 * C116 + C63378 * C314 + C63533 * C841 +
                       C63379 * C1125 + C63534 * C847 + C63380 * C1129) *
                          C139300) *
                         C139457 * C139286 * C1761 -
                     ((C63534 * C8757 + C63380 * C9003 + C63533 * C4230 +
                       C63379 * C4553 + C63532 * C1777 + C63378 * C2061) *
                          C139300 +
                      (C63534 * C8754 + C63380 * C9000 + C63533 * C4223 +
                       C63379 * C4549 + C63532 * C1767 + C63378 * C2054) *
                          C5913) *
                         C139457 * C139286 * C1762 +
                     ((C63532 * C1768 + C63378 * C2057 + C63533 * C6442 +
                       C63379 * C6688 + C63534 * C21079 + C63380 * C21413) *
                          C5913 +
                      (C63532 * C1783 + C63378 * C2065 + C63533 * C6445 +
                       C63379 * C6691 + C63534 * C21081 + C63380 * C21415) *
                          C139300) *
                         C139457 * C139286 * C1763) *
                        C5228 +
                    (((C63532 * C4223 + C63378 * C4549 + C63533 * C8754 +
                       C63379 * C9000 + C63534 * C24129 + C63380 * C24463) *
                          C5913 +
                      (C63532 * C4230 + C63378 * C4553 + C63533 * C8757 +
                       C63379 * C9003 + C63534 * C24131 + C63380 * C24465) *
                          C139300) *
                         C139457 * C139286 * C1762 -
                     ((C63534 * C5919 + C63380 * C6097 + C63533 * C847 +
                       C63379 * C1129 + C63532 * C841 + C63378 * C1125) *
                          C139300 +
                      (C63534 * C5916 + C63380 * C6094 + C63533 * C832 +
                       C63379 * C1121 + C63532 * C831 + C63378 * C1118) *
                          C5913) *
                         C139457 * C139286 * C1761 -
                     ((C63534 * C68837 + C63380 * C69111 + C63533 * C21081 +
                       C63379 * C21415 + C63532 * C6445 + C63378 * C6691) *
                          C139300 +
                      (C63534 * C68836 + C63380 * C69110 + C63533 * C21079 +
                       C63379 * C21413 + C63532 * C6442 + C63378 * C6688) *
                          C5913) *
                         C139457 * C139286 * C1763) *
                        C139377)) /
                      (p * q * std::sqrt(p + q));
    d2eeyy[67] += (-std::pow(Pi, 2.5) *
                   ((C63532 * C107 + C63378 * C308 + C63533 * C831 +
                     C63379 * C1118 + C63534 * C832 + C63380 * C1121) *
                        C5976 +
                    (C63532 * C182 + C63378 * C394 + C63533 * C939 +
                     C63379 * C1231 + C63534 * C940 + C63380 * C1232) *
                        C5909 -
                    (C63534 * C5916 + C63380 * C6094 + C63533 * C832 +
                     C63379 * C1121 + C63532 * C831 + C63378 * C1118) *
                        C5977 -
                    (C63534 * C5982 + C63380 * C6148 + C63533 * C940 +
                     C63379 * C1232 + C63532 * C939 + C63378 * C1231) *
                        C5910 +
                    (C63532 * C832 + C63378 * C1121 + C63533 * C5916 +
                     C63379 * C6094 + C63534 * C20371 + C63380 * C20609) *
                        C5978 +
                    (C63532 * C940 + C63378 * C1232 + C63533 * C5982 +
                     C63379 * C6148 + C63534 * C20457 + C63380 * C20678) *
                        C5911 -
                    (C63534 * C68299 + C63380 * C68482 + C63533 * C20371 +
                     C63379 * C20609 + C63532 * C5916 + C63378 * C6094) *
                        C5979 -
                    (C63534 * C68369 + C63380 * C68534 + C63533 * C20457 +
                     C63379 * C20678 + C63532 * C5982 + C63378 * C6148) *
                        C5912) *
                   C139457 * C139286 * C139300 * C139339) /
                      (p * q * std::sqrt(p + q)) -
                  (std::pow(Pi, 2.5) *
                   (((C63532 * C107 + C63378 * C308 + C63533 * C831 +
                      C63379 * C1118 + C63534 * C832 + C63380 * C1121) *
                         C5307 +
                     (C63532 * C182 + C63378 * C394 + C63533 * C939 +
                      C63379 * C1231 + C63534 * C940 + C63380 * C1232) *
                         C5228 -
                     (C63534 * C5916 + C63380 * C6094 + C63533 * C832 +
                      C63379 * C1121 + C63532 * C831 + C63378 * C1118) *
                         C5308 -
                     (C63534 * C5982 + C63380 * C6148 + C63533 * C940 +
                      C63379 * C1232 + C63532 * C939 + C63378 * C1231) *
                         C139377) *
                        C139457 * C139286 * C5225 +
                    ((C63532 * C828 + C63378 * C1117 + C63533 * C833 +
                      C63379 * C1122 + C63534 * C5915 + C63380 * C6093) *
                         C5308 -
                     ((C63534 * C941 + C63380 * C1234 + C63533 * C938 +
                       C63379 * C1233 + C63532 * C183 + C63378 * C395) *
                          C5228 +
                      (C63534 * C833 + C63380 * C1122 + C63533 * C828 +
                       C63379 * C1117 + C63532 * C108 + C63378 * C309) *
                          C5307) +
                     (C63532 * C938 + C63378 * C1233 + C63533 * C941 +
                      C63379 * C1234 + C63534 * C5981 + C63380 * C6149) *
                         C139377) *
                        C139457 * C139286 * C5226 +
                    ((C63532 * C109 + C63378 * C310 + C63533 * C829 +
                      C63379 * C1119 + C63534 * C834 + C63380 * C1123) *
                         C5307 +
                     (C63532 * C184 + C63378 * C396 + C63533 * C937 +
                      C63379 * C1235 + C63534 * C942 + C63380 * C1236) *
                         C5228 -
                     (C63534 * C5914 + C63380 * C6092 + C63533 * C834 +
                      C63379 * C1123 + C63532 * C829 + C63378 * C1119) *
                         C5308 -
                     (C63534 * C5980 + C63380 * C6150 + C63533 * C942 +
                      C63379 * C1236 + C63532 * C937 + C63378 * C1235) *
                         C139377) *
                        C139457 * C139286 * C5227) *
                   C139339) /
                      (p * q * std::sqrt(p + q)) +
                  (2 * std::pow(Pi, 2.5) *
                   (((C63532 * C107 + C63378 * C308 + C63533 * C831 +
                      C63379 * C1118 + C63534 * C832 + C63380 * C1121) *
                         C5307 +
                     (C63532 * C182 + C63378 * C394 + C63533 * C939 +
                      C63379 * C1231 + C63534 * C940 + C63380 * C1232) *
                         C5228 -
                     (C63534 * C5916 + C63380 * C6094 + C63533 * C832 +
                      C63379 * C1121 + C63532 * C831 + C63378 * C1118) *
                         C5308 -
                     (C63534 * C5982 + C63380 * C6148 + C63533 * C940 +
                      C63379 * C1232 + C63532 * C939 + C63378 * C1231) *
                         C139377) *
                        C139457 * C139286 * C139300 * C1761 +
                    ((C63532 * C4223 + C63378 * C4549 + C63533 * C8754 +
                      C63379 * C9000 + C63534 * C24129 + C63380 * C24463) *
                         C5308 -
                     ((C63534 * C8840 + C63380 * C9078 + C63533 * C4337 +
                       C63379 * C4667 + C63532 * C1873 + C63378 * C2170) *
                          C5228 +
                      (C63534 * C8754 + C63380 * C9000 + C63533 * C4223 +
                       C63379 * C4549 + C63532 * C1767 + C63378 * C2054) *
                          C5307) +
                     (C63532 * C4337 + C63378 * C4667 + C63533 * C8840 +
                      C63379 * C9078 + C63534 * C24247 + C63380 * C24564) *
                         C139377) *
                        C139457 * C139286 * C139300 * C1762 +
                    ((C63532 * C1768 + C63378 * C2057 + C63533 * C6442 +
                      C63379 * C6688 + C63534 * C21079 + C63380 * C21413) *
                         C5307 +
                     (C63532 * C1874 + C63378 * C2171 + C63533 * C6528 +
                      C63379 * C6766 + C63534 * C21197 + C63380 * C21514) *
                         C5228 -
                     (C63534 * C68836 + C63380 * C69110 + C63533 * C21079 +
                      C63379 * C21413 + C63532 * C6442 + C63378 * C6688) *
                         C5308 -
                     (C63534 * C68934 + C63380 * C69186 + C63533 * C21197 +
                      C63379 * C21514 + C63532 * C6528 + C63378 * C6766) *
                         C139377) *
                        C139457 * C139286 * C139300 * C1763)) /
                      (p * q * std::sqrt(p + q));
    d2eeyz[67] += (-std::pow(Pi, 2.5) *
                   (((C63532 * C107 + C63378 * C308 + C63533 * C831 +
                      C63379 * C1118 + C63534 * C832 + C63380 * C1121) *
                         C244 +
                     (C63532 * C245 + C63378 * C474 + C63533 * C1029 +
                      C63379 * C1339 + C63534 * C1030 + C63380 * C1340) *
                         C139339) *
                        C139457 * C139286 * C5909 -
                    ((C63534 * C6038 + C63380 * C6203 + C63533 * C1030 +
                      C63379 * C1340 + C63532 * C1029 + C63378 * C1339) *
                         C139339 +
                     (C63534 * C5916 + C63380 * C6094 + C63533 * C832 +
                      C63379 * C1121 + C63532 * C831 + C63378 * C1118) *
                         C244) *
                        C139457 * C139286 * C5910 +
                    ((C63532 * C832 + C63378 * C1121 + C63533 * C5916 +
                      C63379 * C6094 + C63534 * C20371 + C63380 * C20609) *
                         C244 +
                     (C63532 * C1030 + C63378 * C1340 + C63533 * C6038 +
                      C63379 * C6203 + C63534 * C20533 + C63380 * C20747) *
                         C139339) *
                        C139457 * C139286 * C5911 -
                    ((C63534 * C68424 + C63380 * C68585 + C63533 * C20533 +
                      C63379 * C20747 + C63532 * C6038 + C63378 * C6203) *
                         C139339 +
                     (C63534 * C68299 + C63380 * C68482 + C63533 * C20371 +
                      C63379 * C20609 + C63532 * C5916 + C63378 * C6094) *
                         C244) *
                        C139457 * C139286 * C5912) *
                   C139300) /
                      (p * q * std::sqrt(p + q)) -
                  (std::pow(Pi, 2.5) *
                   ((((C63532 * C107 + C63378 * C308 + C63533 * C831 +
                       C63379 * C1118 + C63534 * C832 + C63380 * C1121) *
                          C244 +
                      (C63532 * C245 + C63378 * C474 + C63533 * C1029 +
                       C63379 * C1339 + C63534 * C1030 + C63380 * C1340) *
                          C139339) *
                         C139457 * C139286 * C5228 -
                     ((C63534 * C6038 + C63380 * C6203 + C63533 * C1030 +
                       C63379 * C1340 + C63532 * C1029 + C63378 * C1339) *
                          C139339 +
                      (C63534 * C5916 + C63380 * C6094 + C63533 * C832 +
                       C63379 * C1121 + C63532 * C831 + C63378 * C1118) *
                          C244) *
                         C139457 * C139286 * C139377) *
                        C5225 +
                    (((C63532 * C828 + C63378 * C1117 + C63533 * C833 +
                       C63379 * C1122 + C63534 * C5915 + C63380 * C6093) *
                          C244 +
                      (C63532 * C1028 + C63378 * C1338 + C63533 * C1031 +
                       C63379 * C1341 + C63534 * C6037 + C63380 * C6202) *
                          C139339) *
                         C139457 * C139286 * C139377 -
                     ((C63534 * C1031 + C63380 * C1341 + C63533 * C1028 +
                       C63379 * C1338 + C63532 * C246 + C63378 * C475) *
                          C139339 +
                      (C63534 * C833 + C63380 * C1122 + C63533 * C828 +
                       C63379 * C1117 + C63532 * C108 + C63378 * C309) *
                          C244) *
                         C139457 * C139286 * C5228) *
                        C5226 +
                    (((C63532 * C109 + C63378 * C310 + C63533 * C829 +
                       C63379 * C1119 + C63534 * C834 + C63380 * C1123) *
                          C244 +
                      (C63532 * C247 + C63378 * C476 + C63533 * C1027 +
                       C63379 * C1337 + C63534 * C1032 + C63380 * C1342) *
                          C139339) *
                         C139457 * C139286 * C5228 -
                     ((C63534 * C6036 + C63380 * C6201 + C63533 * C1032 +
                       C63379 * C1342 + C63532 * C1027 + C63378 * C1337) *
                          C139339 +
                      (C63534 * C5914 + C63380 * C6092 + C63533 * C834 +
                       C63379 * C1123 + C63532 * C829 + C63378 * C1119) *
                          C244) *
                         C139457 * C139286 * C139377) *
                        C5227)) /
                      (p * q * std::sqrt(p + q)) +
                  (2 * std::pow(Pi, 2.5) *
                   (((C63532 * C107 + C63378 * C308 + C63533 * C831 +
                      C63379 * C1118 + C63534 * C832 + C63380 * C1121) *
                         C1960 +
                     (C63532 * C245 + C63378 * C474 + C63533 * C1029 +
                      C63379 * C1339 + C63534 * C1030 + C63380 * C1340) *
                         C1761 -
                     (C63534 * C8754 + C63380 * C9000 + C63533 * C4223 +
                      C63379 * C4549 + C63532 * C1767 + C63378 * C2054) *
                         C1961 -
                     (C63534 * C8920 + C63380 * C9155 + C63533 * C4443 +
                      C63379 * C4783 + C63532 * C1965 + C63378 * C2269) *
                         C1762 +
                     (C63532 * C1768 + C63378 * C2057 + C63533 * C6442 +
                      C63379 * C6688 + C63534 * C21079 + C63380 * C21413) *
                         C1962 +
                     (C63532 * C1966 + C63378 * C2270 + C63533 * C6608 +
                      C63379 * C6843 + C63534 * C21305 + C63380 * C21614) *
                         C1763) *
                        C139457 * C139286 * C5228 +
                    ((C63532 * C4223 + C63378 * C4549 + C63533 * C8754 +
                      C63379 * C9000 + C63534 * C24129 + C63380 * C24463) *
                         C1961 -
                     ((C63534 * C6038 + C63380 * C6203 + C63533 * C1030 +
                       C63379 * C1340 + C63532 * C1029 + C63378 * C1339) *
                          C1761 +
                      (C63534 * C5916 + C63380 * C6094 + C63533 * C832 +
                       C63379 * C1121 + C63532 * C831 + C63378 * C1118) *
                          C1960) +
                     (C63532 * C4443 + C63378 * C4783 + C63533 * C8920 +
                      C63379 * C9155 + C63534 * C24355 + C63380 * C24664) *
                         C1762 -
                     (C63534 * C68836 + C63380 * C69110 + C63533 * C21079 +
                      C63379 * C21413 + C63532 * C6442 + C63378 * C6688) *
                         C1962 -
                     (C63534 * C69016 + C63380 * C69261 + C63533 * C21305 +
                      C63379 * C21614 + C63532 * C6608 + C63378 * C6843) *
                         C1763) *
                        C139457 * C139286 * C139377) *
                   C139300) /
                      (p * q * std::sqrt(p + q));
    d2eezx[67] +=
        (-std::pow(Pi, 2.5) *
         ((((C554 * C107 + C139457 * C555) * C5913 +
            (C554 * C116 + C139457 * C561) * C139300) *
               C139286 * C63378 +
           (C20819 + C20820) * C139286 * C63379 + C68645 * C63380) *
              C139339 * C5909 -
          (C68646 * C63380 + (C20825 + C20826) * C139286 * C63379 +
           (C20820 + C20819) * C139286 * C63378) *
              C139339 * C5910 +
          (C68645 * C63378 + (C20835 + C20836) * C139286 * C63379 +
           (C68649 + C68650) * C139286 * C63380) *
              C139339 * C5911 -
          (((C554 * C68300 + C139457 * C68637) * C139300 +
            (C554 * C68299 + C139457 * C68636) * C5913) *
               C139286 * C63380 +
           (C68650 + C68649) * C139286 * C63379 + C68646 * C63378) *
              C139339 * C5912)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C554 * C107 + C139457 * C555) * C5230 +
            (C554 * C116 + C139457 * C561) * C5225 - C584 * C5231 -
            C585 * C5226 + C586 * C5232 + C587 * C5227) *
               C139286 * C63378 +
           (C20089 + C20090 - C20091 - C20092 + C20093 + C20094) * C139286 *
               C63379 +
           (C68096 + C68097 - C68098 - C68099 + C68100 + C68101) * C139286 *
               C63380) *
              C139339 * C5228 +
          ((C20091 - (C20090 + C20089) + C20092 - C20093 - C20094) * C139286 *
               C63378 +
           (C68098 - (C68097 + C68096) + C68099 - C68100 - C68101) * C139286 *
               C63379 +
           (C15064 * C5231 - (C20834 * C5225 + C20833 * C5230) +
            C15065 * C5226 - (C554 * C5914 + C139457 * C6254) * C5232 -
            (C554 * C5917 + C139457 * C6257) * C5227) *
               C139286 * C63380) *
              C139339 * C139377)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139457 * C555) * C5913 +
             (C554 * C116 + C139457 * C561) * C139300) *
                C139286 * C63378 +
            (C20819 + C20820) * C139286 * C63379 + C68645 * C63380) *
               C1761 -
           ((C24778 + C24777) * C139286 * C63380 +
            (C21721 + C21722) * C139286 * C63379 +
            ((C554 * C1777 + C139457 * C2383) * C139300 +
             (C554 * C1767 + C139457 * C2376) * C5913) *
                C139286 * C63378) *
               C1762 +
           (((C554 * C1768 + C139457 * C2379) * C5913 +
             (C554 * C1783 + C139457 * C2387) * C139300) *
                C139286 * C63378 +
            (C21731 + C21732) * C139286 * C63379 +
            (C69345 + C69346) * C139286 * C63380) *
               C1763) *
              C5228 +
          (((C21722 + C21721) * C139286 * C63378 +
            (C24777 + C24778) * C139286 * C63379 +
            ((C554 * C24129 + C139457 * C24765) * C5913 +
             (C554 * C24131 + C139457 * C24767) * C139300) *
                C139286 * C63380) *
               C1762 -
           (C68646 * C63380 + (C20825 + C20826) * C139286 * C63379 +
            (C20820 + C20819) * C139286 * C63378) *
               C1761 -
           (((C554 * C68837 + C139457 * C69337) * C139300 +
             (C554 * C68836 + C139457 * C69336) * C5913) *
                C139286 * C63380 +
            (C69346 + C69345) * C139286 * C63379 +
            (C21732 + C21731) * C139286 * C63378) *
               C1763) *
              C139377)) /
            (p * q * std::sqrt(p + q));
    d2eezy[67] +=
        (-std::pow(Pi, 2.5) *
         (((C554 * C107 + C139457 * C555) * C5976 +
           (C554 * C182 + C139457 * C641) * C5909 - C15060 * C5977 -
           C15179 * C5910 + C15063 * C5978 + C15180 * C5911 - C20833 * C5979 -
           C20907 * C5912) *
              C139286 * C63378 +
          (C15060 * C5976 + C15179 * C5909 - C15063 * C5977 - C15180 * C5910 +
           C20833 * C5978 + C20907 * C5911 - C68647 * C5979 - C68704 * C5912) *
              C139286 * C63379 +
          (C15063 * C5976 + C15180 * C5909 - C20833 * C5977 - C20907 * C5910 +
           C68647 * C5978 + C68704 * C5911 -
           (C554 * C68299 + C139457 * C68636) * C5979 -
           (C554 * C68369 + C139457 * C68700) * C5912) *
              C139286 * C63380) *
         C139300 * C139339) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C554 * C107 + C139457 * C555) * C5307 +
            (C554 * C182 + C139457 * C641) * C5228 - C15060 * C5308 -
            C15179 * C139377) *
               C139286 * C63378 +
           (C15060 * C5307 + C15179 * C5228 - C15063 * C5308 -
            C15180 * C139377) *
               C139286 * C63379 +
           (C15063 * C5307 + C15180 * C5228 - C20833 * C5308 -
            C20907 * C139377) *
               C139286 * C63380) *
              C5225 +
          ((C5772 - (C5771 + C5770) + C5773) * C139286 * C63378 +
           (C20201 - (C20200 + C20199) + C20202) * C139286 * C63379 +
           (C15064 * C5308 - (C1579 * C5228 + C1476 * C5307) +
            C15181 * C139377) *
               C139286 * C63380) *
              C5226 +
          (C5784 * C139286 * C63378 +
           (C20205 + C20204 - C20203 - C20206) * C139286 * C63379 +
           (C1478 * C5307 + C1581 * C5228 -
            (C554 * C5914 + C139457 * C6254) * C5308 -
            (C554 * C5980 + C139457 * C6312) * C139377) *
               C139286 * C63380) *
              C5227) *
         C139339) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C139457 * C555) * C5307 +
            (C554 * C182 + C139457 * C641) * C5228 - C15060 * C5308 -
            C15179 * C139377) *
               C139286 * C63378 +
           (C15060 * C5307 + C15179 * C5228 - C15063 * C5308 -
            C15180 * C139377) *
               C139286 * C63379 +
           (C15063 * C5307 + C15180 * C5228 - C20833 * C5308 -
            C20907 * C139377) *
               C139286 * C63380) *
              C139300 * C1761 +
          ((C19108 * C5308 -
            ((C554 * C1873 + C139457 * C2492) * C5228 +
             (C554 * C1767 + C139457 * C2376) * C5307) +
            C19250 * C139377) *
               C139286 * C63378 +
           (C24775 * C5308 - (C19250 * C5228 + C19108 * C5307) +
            C24881 * C139377) *
               C139286 * C63379 +
           ((C554 * C24129 + C139457 * C24765) * C5308 -
            (C24881 * C5228 + C24775 * C5307) +
            (C554 * C24247 + C139457 * C24876) * C139377) *
               C139286 * C63380) *
              C139300 * C1762 +
          (((C554 * C1768 + C139457 * C2379) * C5307 +
            (C554 * C1874 + C139457 * C2493) * C5228 - C21729 * C5308 -
            C21835 * C139377) *
               C139286 * C63378 +
           (C21729 * C5307 + C21835 * C5228 - C69343 * C5308 -
            C69424 * C139377) *
               C139286 * C63379 +
           (C69343 * C5307 + C69424 * C5228 -
            (C554 * C68836 + C139457 * C69336) * C5308 -
            (C554 * C68934 + C139457 * C69420) * C139377) *
               C139286 * C63380) *
              C139300 * C1763)) /
            (p * q * std::sqrt(p + q));
    d2eezz[67] +=
        (-std::pow(Pi, 2.5) *
         ((((C554 * C107 + C139457 * C555) * C244 +
            (C554 * C245 + C139457 * C719) * C139339) *
               C139286 * C63378 +
           (C15281 + C15297) * C139286 * C63379 + C64563 * C63380) *
              C5909 -
          (C68760 * C63380 + (C15298 + C15288) * C139286 * C63379 +
           (C15297 + C15281) * C139286 * C63378) *
              C5910 +
          (C64563 * C63378 + (C20976 + C20980) * C139286 * C63379 +
           (C68757 + C68762) * C139286 * C63380) *
              C5911 -
          (((C554 * C68424 + C139457 * C68754) * C139339 +
            (C554 * C68299 + C139457 * C68636) * C244) *
               C139286 * C63380 +
           (C68762 + C68757) * C139286 * C63379 + C68760 * C63378) *
              C5912) *
         C139300) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139457 * C555) * C244 +
             (C554 * C245 + C139457 * C719) * C139339) *
                C139286 * C63378 +
            (C15281 + C15297) * C139286 * C63379 + C64563 * C63380) *
               C5228 -
           ((C20980 + C20976) * C139286 * C63380 +
            (C15298 + C15288) * C139286 * C63379 +
            (C15297 + C15281) * C139286 * C63378) *
               C139377) *
              C5225 +
          ((C15284 * C139286 * C63378 + C15290 * C139286 * C63379 +
            (C15291 + C15299) * C139286 * C63380) *
               C139377 -
           (C64562 * C63380 + C15289 * C139286 * C63379 +
            (C742 + C726) * C139286 * C63378) *
               C5228) *
              C5226 +
          ((C746 * C139286 * C63378 + C17202 * C139286 * C63379 +
            (C1677 + C1687) * C139286 * C63380) *
               C5228 -
           (((C554 * C6036 + C139457 * C6363) * C139339 +
             (C554 * C5914 + C139457 * C6254) * C244) *
                C139286 * C63380 +
            (C1687 + C1677) * C139286 * C63379 + C3372 * C139286 * C63378) *
               C139377) *
              C5227)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C139457 * C555) * C1960 +
            (C554 * C245 + C139457 * C719) * C1761 -
            (C554 * C1767 + C139457 * C2376) * C1961 -
            (C554 * C1965 + C139457 * C2591) * C1762 +
            (C554 * C1768 + C139457 * C2379) * C1962 +
            (C554 * C1966 + C139457 * C2592) * C1763) *
               C139286 * C63378 +
           (C21936 + C21937 - C21938 - C21939 + C21940 + C21944) * C139286 *
               C63379 +
           (C69500 + C69501 - C69502 - C69503 + C69504 + C69508) * C139286 *
               C63380) *
              C5228 +
          ((C21938 - (C21937 + C21936) + C21939 - C21940 - C21944) * C139286 *
               C63378 +
           (C69502 - (C69501 + C69500) + C69503 - C69504 - C69508) * C139286 *
               C63379 +
           ((C554 * C24129 + C139457 * C24765) * C1961 -
            (C20979 * C1761 + C20833 * C1960) +
            (C554 * C24355 + C139457 * C24979) * C1762 -
            (C554 * C68836 + C139457 * C69336) * C1962 -
            (C554 * C69016 + C139457 * C69498) * C1763) *
               C139286 * C63380) *
              C139377) *
         C139300) /
            (p * q * std::sqrt(p + q));
    d2eexx[68] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139286 * C113) * C137108 +
             (C63381 * C116 + C139286 * C125) * C139552 -
             (C63381 * C108 + C139286 * C114) * C137101 -
             (C63381 * C117 + C139286 * C126) * C139305) *
                C63378 +
            (C69583 + C69584 - C69585 - C69586) * C63379 + C69597 * C63380) *
               C139457 * C139561 +
           (((C63381 * C1764 + C139286 * C1772) * C137101 -
             ((C63381 * C1777 + C139286 * C1790) * C139552 +
              (C63381 * C1767 + C139286 * C1778) * C137108) +
             (C63381 * C1776 + C139286 * C1789) * C139305) *
                C63378 +
            (C70296 - (C70297 + C70298) + C70299) * C63379 +
            (C70300 - (C70301 + C70302) + C70303) * C63380) *
               C139457 * C139403) *
              C5228 +
          (((C69585 - (C69584 + C69583) + C69586) * C63378 +
            (C69589 - (C69588 + C69587) + C69590) * C63379 +
            (C69591 - (C69592 + C69593) + C69594) * C63380) *
               C139457 * C139561 +
           ((C70298 + C70297 - C70296 - C70299) * C63378 +
            (C70302 + C70301 - C70300 - C70303) * C63379 +
            ((C63381 * C24129 + C139286 * C24133) * C137108 +
             (C63381 * C24131 + C139286 * C24135) * C139552 -
             (C63381 * C24128 + C139286 * C24132) * C137101 -
             (C63381 * C24130 + C139286 * C24134) * C139305) *
                C63380) *
               C139457 * C139403) *
              C139377)) /
        (p * q * std::sqrt(p + q));
    d2eexy[68] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C63381 * C107 + C139286 * C113) * C5307 +
                       (C63381 * C182 + C139286 * C188) * C5228 -
                       C63884 * C5308 - C63997 * C139377) *
                          C63378 +
                      (C63884 * C5307 + C63997 * C5228 - C63888 * C5308 -
                       C63998 * C139377) *
                          C63379 +
                      (C63888 * C5307 + C63998 * C5228 - C63894 * C5308 -
                       C63999 * C139377) *
                          C63380) *
                         C139457 * C139552 +
                     ((C63886 * C5308 -
                       ((C63381 * C183 + C139286 * C189) * C5228 +
                        (C63381 * C108 + C139286 * C114) * C5307) +
                       C64000 * C139377) *
                          C63378 +
                      (C63890 * C5308 - (C64000 * C5228 + C63886 * C5307) +
                       C64001 * C139377) *
                          C63379 +
                      (C63892 * C5308 - (C64001 * C5228 + C63890 * C5307) +
                       C64002 * C139377) *
                          C63380) *
                         C139457 * C139305) *
                        C139561 +
                    (((C66724 * C5308 -
                       ((C63381 * C1873 + C139286 * C1881) * C5228 +
                        (C63381 * C1767 + C139286 * C1778) * C5307) +
                       C66844 * C139377) *
                          C63378 +
                      (C66728 * C5308 - (C66844 * C5228 + C66724 * C5307) +
                       C66845 * C139377) *
                          C63379 +
                      ((C63381 * C24129 + C139286 * C24133) * C5308 -
                       (C66845 * C5228 + C66728 * C5307) +
                       (C63381 * C24247 + C139286 * C24249) * C139377) *
                          C63380) *
                         C139457 * C139552 +
                     (((C63381 * C1764 + C139286 * C1772) * C5307 +
                       (C63381 * C1870 + C139286 * C1878) * C5228 -
                       C66722 * C5308 - C66846 * C139377) *
                          C63378 +
                      (C66722 * C5307 + C66846 * C5228 - C66726 * C5308 -
                       C66847 * C139377) *
                          C63379 +
                      (C66726 * C5307 + C66847 * C5228 -
                       (C63381 * C24128 + C139286 * C24132) * C5308 -
                       (C63381 * C24246 + C139286 * C24248) * C139377) *
                          C63380) *
                         C139457 * C139305) *
                        C139403)) /
                  (p * q * std::sqrt(p + q));
    d2eexz[68] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C63381 * C107 + C139286 * C113) * C3607 +
                       (C63381 * C245 + C139286 * C251) * C139561 -
                       (C63381 * C1767 + C139286 * C1778) * C3608 -
                       (C63381 * C1965 + C139286 * C1973) * C139403) *
                          C63378 +
                      (C66946 + C66947 - C66948 - C66970) * C63379 +
                      (C66951 + C66952 - C66953 - C66971) * C63380) *
                         C139457 * C5228 +
                     ((C66948 - (C66947 + C66946) + C66970) * C63378 +
                      (C66953 - (C66952 + C66951) + C66971) * C63379 +
                      ((C63381 * C24129 + C139286 * C24133) * C3608 -
                       (C64097 * C139561 + C63894 * C3607) +
                       (C63381 * C24355 + C139286 * C24357) * C139403) *
                          C63380) *
                         C139457 * C139377) *
                        C139552 +
                    ((((C63381 * C1764 + C139286 * C1772) * C3608 -
                       ((C63381 * C246 + C139286 * C252) * C139561 +
                        (C63381 * C108 + C139286 * C114) * C3607) +
                       (C63381 * C1964 + C139286 * C1972) * C139403) *
                          C63378 +
                      (C66956 - (C66957 + C66958) + C66972) * C63379 +
                      (C66961 - (C66962 + C66963) + C66973) * C63380) *
                         C139457 * C5228 +
                     ((C66958 + C66957 - C66956 - C66972) * C63378 +
                      (C66963 + C66962 - C66961 - C66973) * C63379 +
                      (C63892 * C3607 + C64100 * C139561 -
                       (C63381 * C24128 + C139286 * C24132) * C3608 -
                       (C63381 * C24354 + C139286 * C24356) * C139403) *
                          C63380) *
                         C139457 * C139377) *
                        C139305)) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[68] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C63532 * C107 + C63378 * C308 + C63533 * C831 +
                       C63379 * C1118 + C63534 * C832 + C63380 * C1121) *
                          C137108 +
                      (C63532 * C116 + C63378 * C314 + C63533 * C841 +
                       C63379 * C1125 + C63534 * C847 + C63380 * C1129) *
                          C139552 -
                      (C63534 * C833 + C63380 * C1122 + C63533 * C828 +
                       C63379 * C1117 + C63532 * C108 + C63378 * C309) *
                          C137101 -
                      (C63534 * C848 + C63380 * C1130 + C63533 * C840 +
                       C63379 * C1126 + C63532 * C117 + C63378 * C315) *
                          C139305) *
                         C139457 * C139286 * C139561 +
                     ((C63532 * C1764 + C63378 * C2053 + C63533 * C4224 +
                       C63379 * C4550 + C63534 * C8753 + C63380 * C8999) *
                          C137101 -
                      ((C63534 * C8757 + C63380 * C9003 + C63533 * C4230 +
                        C63379 * C4553 + C63532 * C1777 + C63378 * C2061) *
                           C139552 +
                       (C63534 * C8754 + C63380 * C9000 + C63533 * C4223 +
                        C63379 * C4549 + C63532 * C1767 + C63378 * C2054) *
                           C137108) +
                      (C63532 * C1776 + C63378 * C2062 + C63533 * C4231 +
                       C63379 * C4554 + C63534 * C8756 + C63380 * C9002) *
                          C139305) *
                         C139457 * C139286 * C139403) *
                        C5228 +
                    (((C63532 * C828 + C63378 * C1117 + C63533 * C833 +
                       C63379 * C1122 + C63534 * C5915 + C63380 * C6093) *
                          C137101 -
                      ((C63534 * C5919 + C63380 * C6097 + C63533 * C847 +
                        C63379 * C1129 + C63532 * C841 + C63378 * C1125) *
                           C139552 +
                       (C63534 * C5916 + C63380 * C6094 + C63533 * C832 +
                        C63379 * C1121 + C63532 * C831 + C63378 * C1118) *
                           C137108) +
                      (C63532 * C840 + C63378 * C1126 + C63533 * C848 +
                       C63379 * C1130 + C63534 * C5918 + C63380 * C6096) *
                          C139305) *
                         C139457 * C139286 * C139561 +
                     ((C63532 * C4223 + C63378 * C4549 + C63533 * C8754 +
                       C63379 * C9000 + C63534 * C24129 + C63380 * C24463) *
                          C137108 +
                      (C63532 * C4230 + C63378 * C4553 + C63533 * C8757 +
                       C63379 * C9003 + C63534 * C24131 + C63380 * C24465) *
                          C139552 -
                      (C63534 * C24128 + C63380 * C24462 + C63533 * C8753 +
                       C63379 * C8999 + C63532 * C4224 + C63378 * C4550) *
                          C137101 -
                      (C63534 * C24130 + C63380 * C24464 + C63533 * C8756 +
                       C63379 * C9002 + C63532 * C4231 + C63378 * C4554) *
                          C139305) *
                         C139457 * C139286 * C139403) *
                        C139377)) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[68] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C63532 * C107 + C63378 * C308 + C63533 * C831 +
                       C63379 * C1118 + C63534 * C832 + C63380 * C1121) *
                          C5307 +
                      (C63532 * C182 + C63378 * C394 + C63533 * C939 +
                       C63379 * C1231 + C63534 * C940 + C63380 * C1232) *
                          C5228 -
                      (C63534 * C5916 + C63380 * C6094 + C63533 * C832 +
                       C63379 * C1121 + C63532 * C831 + C63378 * C1118) *
                          C5308 -
                      (C63534 * C5982 + C63380 * C6148 + C63533 * C940 +
                       C63379 * C1232 + C63532 * C939 + C63378 * C1231) *
                          C139377) *
                         C139457 * C139286 * C139552 +
                     ((C63532 * C828 + C63378 * C1117 + C63533 * C833 +
                       C63379 * C1122 + C63534 * C5915 + C63380 * C6093) *
                          C5308 -
                      ((C63534 * C941 + C63380 * C1234 + C63533 * C938 +
                        C63379 * C1233 + C63532 * C183 + C63378 * C395) *
                           C5228 +
                       (C63534 * C833 + C63380 * C1122 + C63533 * C828 +
                        C63379 * C1117 + C63532 * C108 + C63378 * C309) *
                           C5307) +
                      (C63532 * C938 + C63378 * C1233 + C63533 * C941 +
                       C63379 * C1234 + C63534 * C5981 + C63380 * C6149) *
                          C139377) *
                         C139457 * C139286 * C139305) *
                        C139561 +
                    (((C63532 * C4223 + C63378 * C4549 + C63533 * C8754 +
                       C63379 * C9000 + C63534 * C24129 + C63380 * C24463) *
                          C5308 -
                      ((C63534 * C8840 + C63380 * C9078 + C63533 * C4337 +
                        C63379 * C4667 + C63532 * C1873 + C63378 * C2170) *
                           C5228 +
                       (C63534 * C8754 + C63380 * C9000 + C63533 * C4223 +
                        C63379 * C4549 + C63532 * C1767 + C63378 * C2054) *
                           C5307) +
                      (C63532 * C4337 + C63378 * C4667 + C63533 * C8840 +
                       C63379 * C9078 + C63534 * C24247 + C63380 * C24564) *
                          C139377) *
                         C139457 * C139286 * C139552 +
                     ((C63532 * C1764 + C63378 * C2053 + C63533 * C4224 +
                       C63379 * C4550 + C63534 * C8753 + C63380 * C8999) *
                          C5307 +
                      (C63532 * C1870 + C63378 * C2167 + C63533 * C4338 +
                       C63379 * C4668 + C63534 * C8839 + C63380 * C9079) *
                          C5228 -
                      (C63534 * C24128 + C63380 * C24462 + C63533 * C8753 +
                       C63379 * C8999 + C63532 * C4224 + C63378 * C4550) *
                          C5308 -
                      (C63534 * C24246 + C63380 * C24565 + C63533 * C8839 +
                       C63379 * C9079 + C63532 * C4338 + C63378 * C4668) *
                          C139377) *
                         C139457 * C139286 * C139305) *
                        C139403)) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[68] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C63532 * C107 + C63378 * C308 + C63533 * C831 +
                       C63379 * C1118 + C63534 * C832 + C63380 * C1121) *
                          C3607 +
                      (C63532 * C245 + C63378 * C474 + C63533 * C1029 +
                       C63379 * C1339 + C63534 * C1030 + C63380 * C1340) *
                          C139561 -
                      (C63534 * C8754 + C63380 * C9000 + C63533 * C4223 +
                       C63379 * C4549 + C63532 * C1767 + C63378 * C2054) *
                          C3608 -
                      (C63534 * C8920 + C63380 * C9155 + C63533 * C4443 +
                       C63379 * C4783 + C63532 * C1965 + C63378 * C2269) *
                          C139403) *
                         C139457 * C139286 * C5228 +
                     ((C63532 * C4223 + C63378 * C4549 + C63533 * C8754 +
                       C63379 * C9000 + C63534 * C24129 + C63380 * C24463) *
                          C3608 -
                      ((C63534 * C6038 + C63380 * C6203 + C63533 * C1030 +
                        C63379 * C1340 + C63532 * C1029 + C63378 * C1339) *
                           C139561 +
                       (C63534 * C5916 + C63380 * C6094 + C63533 * C832 +
                        C63379 * C1121 + C63532 * C831 + C63378 * C1118) *
                           C3607) +
                      (C63532 * C4443 + C63378 * C4783 + C63533 * C8920 +
                       C63379 * C9155 + C63534 * C24355 + C63380 * C24664) *
                          C139403) *
                         C139457 * C139286 * C139377) *
                        C139552 +
                    (((C63532 * C1764 + C63378 * C2053 + C63533 * C4224 +
                       C63379 * C4550 + C63534 * C8753 + C63380 * C8999) *
                          C3608 -
                      ((C63534 * C1031 + C63380 * C1341 + C63533 * C1028 +
                        C63379 * C1338 + C63532 * C246 + C63378 * C475) *
                           C139561 +
                       (C63534 * C833 + C63380 * C1122 + C63533 * C828 +
                        C63379 * C1117 + C63532 * C108 + C63378 * C309) *
                           C3607) +
                      (C63532 * C1964 + C63378 * C2271 + C63533 * C4444 +
                       C63379 * C4784 + C63534 * C8919 + C63380 * C9156) *
                          C139403) *
                         C139457 * C139286 * C5228 +
                     ((C63532 * C828 + C63378 * C1117 + C63533 * C833 +
                       C63379 * C1122 + C63534 * C5915 + C63380 * C6093) *
                          C3607 +
                      (C63532 * C1028 + C63378 * C1338 + C63533 * C1031 +
                       C63379 * C1341 + C63534 * C6037 + C63380 * C6202) *
                          C139561 -
                      (C63534 * C24128 + C63380 * C24462 + C63533 * C8753 +
                       C63379 * C8999 + C63532 * C4224 + C63378 * C4550) *
                          C3608 -
                      (C63534 * C24354 + C63380 * C24665 + C63533 * C8919 +
                       C63379 * C9156 + C63532 * C4444 + C63378 * C4784) *
                          C139403) *
                         C139457 * C139286 * C139377) *
                        C139305)) /
                  (p * q * std::sqrt(p + q));
    d2eezx[68] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139457 * C555) * C137108 +
             (C554 * C116 + C139457 * C561) * C139552 - C584 * C137101 -
             C585 * C139305) *
                C139286 * C63378 +
            (C22631 + C22632 - C22633 - C22634) * C139286 * C63379 +
            C70049 * C63380) *
               C139561 +
           ((C2408 * C137101 -
             ((C554 * C1777 + C139457 * C2383) * C139552 +
              (C554 * C1767 + C139457 * C2376) * C137108) +
             C2409 * C139305) *
                C139286 * C63378 +
            (C23759 - (C23760 + C23761) + C23762) * C139286 * C63379 +
            (C70892 - (C70893 + C70894) + C70895) * C139286 * C63380) *
               C139403) *
              C5228 +
          (((C22633 - (C22632 + C22631) + C22634) * C139286 * C63378 +
            (C22639 - (C22640 + C22641) + C22642) * C139286 * C63379 +
            (C70043 - (C70044 + C70045) + C70046) * C139286 * C63380) *
               C139561 +
           ((C23761 + C23760 - C23759 - C23762) * C139286 * C63378 +
            (C70894 + C70893 - C70892 - C70895) * C139286 * C63379 +
            ((C554 * C24129 + C139457 * C24765) * C137108 +
             (C554 * C24131 + C139457 * C24767) * C139552 -
             (C554 * C24128 + C139457 * C24764) * C137101 -
             (C554 * C24130 + C139457 * C24766) * C139305) *
                C139286 * C63380) *
               C139403) *
              C139377)) /
        (p * q * std::sqrt(p + q));
    d2eezy[68] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C554 * C107 + C139457 * C555) * C5307 +
                       (C554 * C182 + C139457 * C641) * C5228 - C15060 * C5308 -
                       C15179 * C139377) *
                          C139286 * C63378 +
                      (C15060 * C5307 + C15179 * C5228 - C15063 * C5308 -
                       C15180 * C139377) *
                          C139286 * C63379 +
                      (C15063 * C5307 + C15180 * C5228 - C20833 * C5308 -
                       C20907 * C139377) *
                          C139286 * C63380) *
                         C139552 +
                     ((C5772 - (C5771 + C5770) + C5773) * C139286 * C63378 +
                      (C20201 - (C20200 + C20199) + C20202) * C139286 * C63379 +
                      (C15064 * C5308 - (C1579 * C5228 + C1476 * C5307) +
                       C15181 * C139377) *
                          C139286 * C63380) *
                         C139305) *
                        C139561 +
                    (((C19108 * C5308 -
                       ((C554 * C1873 + C139457 * C2492) * C5228 +
                        (C554 * C1767 + C139457 * C2376) * C5307) +
                       C19250 * C139377) *
                          C139286 * C63378 +
                      (C24775 * C5308 - (C19250 * C5228 + C19108 * C5307) +
                       C24881 * C139377) *
                          C139286 * C63379 +
                      ((C554 * C24129 + C139457 * C24765) * C5308 -
                       (C24881 * C5228 + C24775 * C5307) +
                       (C554 * C24247 + C139457 * C24876) * C139377) *
                          C139286 * C63380) *
                         C139552 +
                     ((C8575 + C8574 - C8573 - C8576) * C139286 * C63378 +
                      (C23899 + C23898 - C23897 - C23900) * C139286 * C63379 +
                      (C19109 * C5307 + C19251 * C5228 -
                       (C554 * C24128 + C139457 * C24764) * C5308 -
                       (C554 * C24246 + C139457 * C24877) * C139377) *
                          C139286 * C63380) *
                         C139305) *
                        C139403)) /
                  (p * q * std::sqrt(p + q));
    d2eezz[68] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139457 * C555) * C3607 +
             (C554 * C245 + C139457 * C719) * C139561 -
             (C554 * C1767 + C139457 * C2376) * C3608 -
             (C554 * C1965 + C139457 * C2591) * C139403) *
                C139286 * C63378 +
            (C19383 + C19384 - C19385 - C19399) * C139286 * C63379 +
            (C24984 + C24983 - C24982 - C24988) * C139286 * C63380) *
               C5228 +
           ((C19385 - (C19384 + C19383) + C19399) * C139286 * C63378 +
            (C24982 - (C24983 + C24984) + C24988) * C139286 * C63379 +
            ((C554 * C24129 + C139457 * C24765) * C3608 -
             (C20979 * C139561 + C20833 * C3607) +
             (C554 * C24355 + C139457 * C24979) * C139403) *
                C139286 * C63380) *
               C139377) *
              C139552 +
          (((C4110 - (C4109 + C4108) + C4111) * C139286 * C63378 +
            C19401 * C139286 * C63379 +
            (C19390 - (C19391 + C19392) + C19402) * C139286 * C63380) *
               C5228 +
           (C19400 * C139286 * C63378 +
            (C19392 + C19391 - C19390 - C19402) * C139286 * C63379 +
            (C15064 * C3607 + C15296 * C139561 -
             (C554 * C24128 + C139457 * C24764) * C3608 -
             (C554 * C24354 + C139457 * C24980) * C139403) *
                C139286 * C63380) *
               C139377) *
              C139305)) /
        (p * q * std::sqrt(p + q));
    d2eexx[69] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139286 * C113) * C5230 +
            (C63381 * C116 + C139286 * C125) * C5225 -
            (C63381 * C108 + C139286 * C114) * C5231 -
            (C63381 * C117 + C139286 * C126) * C5226 +
            (C63381 * C109 + C139286 * C115) * C5232 +
            (C63381 * C118 + C139286 * C127) * C5227) *
               C63378 +
           (C67640 + C67641 - C67642 - C67643 + C67644 + C67645) * C63379 +
           (C67646 + C67647 - C67648 - C67649 + C67650 + C67651) * C63380) *
              C139457 * C139339 * C5228 +
          ((C67642 - (C67641 + C67640) + C67643 - C67644 - C67645) * C63378 +
           (C67648 - (C67647 + C67646) + C67649 - C67650 - C67651) * C63379 +
           (C63892 * C5231 - (C63893 * C5225 + C63894 * C5230) +
            C63895 * C5226 - (C63381 * C5914 + C139286 * C5920) * C5232 -
            (C63381 * C5917 + C139286 * C5923) * C5227) *
               C63380) *
              C139457 * C139339 * C139377)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139286 * C113) * C5913 +
            (C63381 * C116 + C139286 * C125) * C139300) *
               C63378 +
           (C68304 + C68305) * C63379 + C68314 * C63380) *
              C139457 * C139339 * C5909 -
          (C68315 * C63380 + (C68307 + C68306) * C63379 +
           (C68305 + C68304) * C63378) *
              C139457 * C139339 * C5910 +
          (C68314 * C63378 + (C68309 + C68308) * C63379 +
           (C68318 + C68319) * C63380) *
              C139457 * C139339 * C5911 -
          (((C63381 * C68300 + C139286 * C68302) * C139300 +
            (C63381 * C68299 + C139286 * C68301) * C5913) *
               C63380 +
           (C68319 + C68318) * C63379 + C68315 * C63378) *
              C139457 * C139339 * C5912)) /
            (p * q * std::sqrt(p + q));
    d2eexy[69] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139286 * C113) * C5307 +
            (C63381 * C182 + C139286 * C188) * C5228 - C63884 * C5308 -
            C63997 * C139377) *
               C63378 +
           (C63884 * C5307 + C63997 * C5228 - C63888 * C5308 -
            C63998 * C139377) *
               C63379 +
           (C63888 * C5307 + C63998 * C5228 - C63894 * C5308 -
            C63999 * C139377) *
               C63380) *
              C139457 * C5225 +
          ((C63886 * C5308 -
            ((C63381 * C183 + C139286 * C189) * C5228 +
             (C63381 * C108 + C139286 * C114) * C5307) +
            C64000 * C139377) *
               C63378 +
           (C63890 * C5308 - (C64000 * C5228 + C63886 * C5307) +
            C64001 * C139377) *
               C63379 +
           (C63892 * C5308 - (C64001 * C5228 + C63890 * C5307) +
            C64002 * C139377) *
               C63380) *
              C139457 * C5226 +
          (((C63381 * C109 + C139286 * C115) * C5307 +
            (C63381 * C184 + C139286 * C190) * C5228 - C65320 * C5308 -
            C65406 * C139377) *
               C63378 +
           (C65320 * C5307 + C65406 * C5228 - C65322 * C5308 -
            C65407 * C139377) *
               C63379 +
           (C65322 * C5307 + C65407 * C5228 -
            (C63381 * C5914 + C139286 * C5920) * C5308 -
            (C63381 * C5980 + C139286 * C5983) * C139377) *
               C63380) *
              C139457 * C5227) *
         C139339) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C63381 * C107 + C139286 * C113) * C5976 +
           (C63381 * C182 + C139286 * C188) * C5909 - C63884 * C5977 -
           C63997 * C5910 + C63888 * C5978 + C63998 * C5911 - C63894 * C5979 -
           C63999 * C5912) *
              C63378 +
          (C63884 * C5976 + C63997 * C5909 - C63888 * C5977 - C63998 * C5910 +
           C63894 * C5978 + C63999 * C5911 - C68316 * C5979 - C68374 * C5912) *
              C63379 +
          (C63888 * C5976 + C63998 * C5909 - C63894 * C5977 - C63999 * C5910 +
           C68316 * C5978 + C68374 * C5911 -
           (C63381 * C68299 + C139286 * C68301) * C5979 -
           (C63381 * C68369 + C139286 * C68370) * C5912) *
              C63380) *
         C139457 * C139300 * C139339) /
            (p * q * std::sqrt(p + q));
    d2eexz[69] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((((C63381 * C107 + C139286 * C113) * C244 +
                       (C63381 * C245 + C139286 * C251) * C139339) *
                          C63378 +
                      (C64077 + C64101) * C63379 + C64107 * C63380) *
                         C139457 * C5228 -
                     ((C64103 + C64085) * C63380 + (C64102 + C64080) * C63379 +
                      (C64101 + C64077) * C63378) *
                         C139457 * C139377) *
                        C5225 +
                    (((C64086 + C64104) * C63378 + (C64089 + C64105) * C63379 +
                      (C64092 + C64106) * C63380) *
                         C139457 * C139377 -
                     (C64108 * C63380 + (C64104 + C64086) * C63379 +
                      ((C63381 * C246 + C139286 * C252) * C139339 +
                       (C63381 * C108 + C139286 * C114) * C244) *
                          C63378) *
                         C139457 * C5228) *
                        C5226 +
                    ((((C63381 * C109 + C139286 * C115) * C244 +
                       (C63381 * C247 + C139286 * C253) * C139339) *
                          C63378 +
                      (C65482 + C65490) * C63379 + (C65485 + C65491) * C63380) *
                         C139457 * C5228 -
                     (((C63381 * C6036 + C139286 * C6039) * C139339 +
                       (C63381 * C5914 + C139286 * C5920) * C244) *
                          C63380 +
                      (C65491 + C65485) * C63379 + (C65490 + C65482) * C63378) *
                         C139457 * C139377) *
                        C5227)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C63381 * C107 + C139286 * C113) * C244 +
                      (C63381 * C245 + C139286 * C251) * C139339) *
                         C63378 +
                     (C64077 + C64101) * C63379 + C64107 * C63380) *
                        C139457 * C5909 -
                    (C68427 * C63380 + (C64102 + C64080) * C63379 +
                     (C64101 + C64077) * C63378) *
                        C139457 * C5910 +
                    (C64107 * C63378 + (C64085 + C64103) * C63379 +
                     (C68428 + C68432) * C63380) *
                        C139457 * C5911 -
                    (((C63381 * C68424 + C139286 * C68425) * C139339 +
                      (C63381 * C68299 + C139286 * C68301) * C244) *
                         C63380 +
                     (C68432 + C68428) * C63379 + C68427 * C63378) *
                        C139457 * C5912) *
                   C139300) /
                      (p * q * std::sqrt(p + q));
    d2eeyx[69] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((C63532 * C107 + C63378 * C308 + C63533 * C831 +
                      C63379 * C1118 + C63534 * C832 + C63380 * C1121) *
                         C5230 +
                     (C63532 * C116 + C63378 * C314 + C63533 * C841 +
                      C63379 * C1125 + C63534 * C847 + C63380 * C1129) *
                         C5225 -
                     (C63534 * C833 + C63380 * C1122 + C63533 * C828 +
                      C63379 * C1117 + C63532 * C108 + C63378 * C309) *
                         C5231 -
                     (C63534 * C848 + C63380 * C1130 + C63533 * C840 +
                      C63379 * C1126 + C63532 * C117 + C63378 * C315) *
                         C5226 +
                     (C63532 * C109 + C63378 * C310 + C63533 * C829 +
                      C63379 * C1119 + C63534 * C834 + C63380 * C1123) *
                         C5232 +
                     (C63532 * C118 + C63378 * C316 + C63533 * C839 +
                      C63379 * C1127 + C63534 * C849 + C63380 * C1131) *
                         C5227) *
                        C139457 * C139286 * C139339 * C5228 +
                    ((C63532 * C828 + C63378 * C1117 + C63533 * C833 +
                      C63379 * C1122 + C63534 * C5915 + C63380 * C6093) *
                         C5231 -
                     ((C63534 * C5919 + C63380 * C6097 + C63533 * C847 +
                       C63379 * C1129 + C63532 * C841 + C63378 * C1125) *
                          C5225 +
                      (C63534 * C5916 + C63380 * C6094 + C63533 * C832 +
                       C63379 * C1121 + C63532 * C831 + C63378 * C1118) *
                          C5230) +
                     (C63532 * C840 + C63378 * C1126 + C63533 * C848 +
                      C63379 * C1130 + C63534 * C5918 + C63380 * C6096) *
                         C5226 -
                     (C63534 * C5914 + C63380 * C6092 + C63533 * C834 +
                      C63379 * C1123 + C63532 * C829 + C63378 * C1119) *
                         C5232 -
                     (C63534 * C5917 + C63380 * C6095 + C63533 * C849 +
                      C63379 * C1131 + C63532 * C839 + C63378 * C1127) *
                         C5227) *
                        C139457 * C139286 * C139339 * C139377)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((C63532 * C107 + C63378 * C308 + C63533 * C831 +
                      C63379 * C1118 + C63534 * C832 + C63380 * C1121) *
                         C5913 +
                     (C63532 * C116 + C63378 * C314 + C63533 * C841 +
                      C63379 * C1125 + C63534 * C847 + C63380 * C1129) *
                         C139300) *
                        C139457 * C139286 * C139339 * C5909 -
                    ((C63534 * C5919 + C63380 * C6097 + C63533 * C847 +
                      C63379 * C1129 + C63532 * C841 + C63378 * C1125) *
                         C139300 +
                     (C63534 * C5916 + C63380 * C6094 + C63533 * C832 +
                      C63379 * C1121 + C63532 * C831 + C63378 * C1118) *
                         C5913) *
                        C139457 * C139286 * C139339 * C5910 +
                    ((C63532 * C832 + C63378 * C1121 + C63533 * C5916 +
                      C63379 * C6094 + C63534 * C20371 + C63380 * C20609) *
                         C5913 +
                     (C63532 * C847 + C63378 * C1129 + C63533 * C5919 +
                      C63379 * C6097 + C63534 * C20373 + C63380 * C20611) *
                         C139300) *
                        C139457 * C139286 * C139339 * C5911 -
                    ((C63534 * C68300 + C63380 * C68483 + C63533 * C20373 +
                      C63379 * C20611 + C63532 * C5919 + C63378 * C6097) *
                         C139300 +
                     (C63534 * C68299 + C63380 * C68482 + C63533 * C20371 +
                      C63379 * C20609 + C63532 * C5916 + C63378 * C6094) *
                         C5913) *
                        C139457 * C139286 * C139339 * C5912)) /
                      (p * q * std::sqrt(p + q));
    d2eeyy[69] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((C63532 * C107 + C63378 * C308 + C63533 * C831 +
                      C63379 * C1118 + C63534 * C832 + C63380 * C1121) *
                         C5307 +
                     (C63532 * C182 + C63378 * C394 + C63533 * C939 +
                      C63379 * C1231 + C63534 * C940 + C63380 * C1232) *
                         C5228 -
                     (C63534 * C5916 + C63380 * C6094 + C63533 * C832 +
                      C63379 * C1121 + C63532 * C831 + C63378 * C1118) *
                         C5308 -
                     (C63534 * C5982 + C63380 * C6148 + C63533 * C940 +
                      C63379 * C1232 + C63532 * C939 + C63378 * C1231) *
                         C139377) *
                        C139457 * C139286 * C5225 +
                    ((C63532 * C828 + C63378 * C1117 + C63533 * C833 +
                      C63379 * C1122 + C63534 * C5915 + C63380 * C6093) *
                         C5308 -
                     ((C63534 * C941 + C63380 * C1234 + C63533 * C938 +
                       C63379 * C1233 + C63532 * C183 + C63378 * C395) *
                          C5228 +
                      (C63534 * C833 + C63380 * C1122 + C63533 * C828 +
                       C63379 * C1117 + C63532 * C108 + C63378 * C309) *
                          C5307) +
                     (C63532 * C938 + C63378 * C1233 + C63533 * C941 +
                      C63379 * C1234 + C63534 * C5981 + C63380 * C6149) *
                         C139377) *
                        C139457 * C139286 * C5226 +
                    ((C63532 * C109 + C63378 * C310 + C63533 * C829 +
                      C63379 * C1119 + C63534 * C834 + C63380 * C1123) *
                         C5307 +
                     (C63532 * C184 + C63378 * C396 + C63533 * C937 +
                      C63379 * C1235 + C63534 * C942 + C63380 * C1236) *
                         C5228 -
                     (C63534 * C5914 + C63380 * C6092 + C63533 * C834 +
                      C63379 * C1123 + C63532 * C829 + C63378 * C1119) *
                         C5308 -
                     (C63534 * C5980 + C63380 * C6150 + C63533 * C942 +
                      C63379 * C1236 + C63532 * C937 + C63378 * C1235) *
                         C139377) *
                        C139457 * C139286 * C5227) *
                   C139339) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((C63532 * C107 + C63378 * C308 + C63533 * C831 +
                     C63379 * C1118 + C63534 * C832 + C63380 * C1121) *
                        C5976 +
                    (C63532 * C182 + C63378 * C394 + C63533 * C939 +
                     C63379 * C1231 + C63534 * C940 + C63380 * C1232) *
                        C5909 -
                    (C63534 * C5916 + C63380 * C6094 + C63533 * C832 +
                     C63379 * C1121 + C63532 * C831 + C63378 * C1118) *
                        C5977 -
                    (C63534 * C5982 + C63380 * C6148 + C63533 * C940 +
                     C63379 * C1232 + C63532 * C939 + C63378 * C1231) *
                        C5910 +
                    (C63532 * C832 + C63378 * C1121 + C63533 * C5916 +
                     C63379 * C6094 + C63534 * C20371 + C63380 * C20609) *
                        C5978 +
                    (C63532 * C940 + C63378 * C1232 + C63533 * C5982 +
                     C63379 * C6148 + C63534 * C20457 + C63380 * C20678) *
                        C5911 -
                    (C63534 * C68299 + C63380 * C68482 + C63533 * C20371 +
                     C63379 * C20609 + C63532 * C5916 + C63378 * C6094) *
                        C5979 -
                    (C63534 * C68369 + C63380 * C68534 + C63533 * C20457 +
                     C63379 * C20678 + C63532 * C5982 + C63378 * C6148) *
                        C5912) *
                   C139457 * C139286 * C139300 * C139339) /
                      (p * q * std::sqrt(p + q));
    d2eeyz[69] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C63532 * C107 + C63378 * C308 + C63533 * C831 +
                       C63379 * C1118 + C63534 * C832 + C63380 * C1121) *
                          C244 +
                      (C63532 * C245 + C63378 * C474 + C63533 * C1029 +
                       C63379 * C1339 + C63534 * C1030 + C63380 * C1340) *
                          C139339) *
                         C139457 * C139286 * C5228 -
                     ((C63534 * C6038 + C63380 * C6203 + C63533 * C1030 +
                       C63379 * C1340 + C63532 * C1029 + C63378 * C1339) *
                          C139339 +
                      (C63534 * C5916 + C63380 * C6094 + C63533 * C832 +
                       C63379 * C1121 + C63532 * C831 + C63378 * C1118) *
                          C244) *
                         C139457 * C139286 * C139377) *
                        C5225 +
                    (((C63532 * C828 + C63378 * C1117 + C63533 * C833 +
                       C63379 * C1122 + C63534 * C5915 + C63380 * C6093) *
                          C244 +
                      (C63532 * C1028 + C63378 * C1338 + C63533 * C1031 +
                       C63379 * C1341 + C63534 * C6037 + C63380 * C6202) *
                          C139339) *
                         C139457 * C139286 * C139377 -
                     ((C63534 * C1031 + C63380 * C1341 + C63533 * C1028 +
                       C63379 * C1338 + C63532 * C246 + C63378 * C475) *
                          C139339 +
                      (C63534 * C833 + C63380 * C1122 + C63533 * C828 +
                       C63379 * C1117 + C63532 * C108 + C63378 * C309) *
                          C244) *
                         C139457 * C139286 * C5228) *
                        C5226 +
                    (((C63532 * C109 + C63378 * C310 + C63533 * C829 +
                       C63379 * C1119 + C63534 * C834 + C63380 * C1123) *
                          C244 +
                      (C63532 * C247 + C63378 * C476 + C63533 * C1027 +
                       C63379 * C1337 + C63534 * C1032 + C63380 * C1342) *
                          C139339) *
                         C139457 * C139286 * C5228 -
                     ((C63534 * C6036 + C63380 * C6201 + C63533 * C1032 +
                       C63379 * C1342 + C63532 * C1027 + C63378 * C1337) *
                          C139339 +
                      (C63534 * C5914 + C63380 * C6092 + C63533 * C834 +
                       C63379 * C1123 + C63532 * C829 + C63378 * C1119) *
                          C244) *
                         C139457 * C139286 * C139377) *
                        C5227)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((C63532 * C107 + C63378 * C308 + C63533 * C831 +
                      C63379 * C1118 + C63534 * C832 + C63380 * C1121) *
                         C244 +
                     (C63532 * C245 + C63378 * C474 + C63533 * C1029 +
                      C63379 * C1339 + C63534 * C1030 + C63380 * C1340) *
                         C139339) *
                        C139457 * C139286 * C5909 -
                    ((C63534 * C6038 + C63380 * C6203 + C63533 * C1030 +
                      C63379 * C1340 + C63532 * C1029 + C63378 * C1339) *
                         C139339 +
                     (C63534 * C5916 + C63380 * C6094 + C63533 * C832 +
                      C63379 * C1121 + C63532 * C831 + C63378 * C1118) *
                         C244) *
                        C139457 * C139286 * C5910 +
                    ((C63532 * C832 + C63378 * C1121 + C63533 * C5916 +
                      C63379 * C6094 + C63534 * C20371 + C63380 * C20609) *
                         C244 +
                     (C63532 * C1030 + C63378 * C1340 + C63533 * C6038 +
                      C63379 * C6203 + C63534 * C20533 + C63380 * C20747) *
                         C139339) *
                        C139457 * C139286 * C5911 -
                    ((C63534 * C68424 + C63380 * C68585 + C63533 * C20533 +
                      C63379 * C20747 + C63532 * C6038 + C63378 * C6203) *
                         C139339 +
                     (C63534 * C68299 + C63380 * C68482 + C63533 * C20371 +
                      C63379 * C20609 + C63532 * C5916 + C63378 * C6094) *
                         C244) *
                        C139457 * C139286 * C5912) *
                   C139300) /
                      (p * q * std::sqrt(p + q));
    d2eezx[69] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C139457 * C555) * C5230 +
            (C554 * C116 + C139457 * C561) * C5225 - C584 * C5231 -
            C585 * C5226 + C586 * C5232 + C587 * C5227) *
               C139286 * C63378 +
           (C20089 + C20090 - C20091 - C20092 + C20093 + C20094) * C139286 *
               C63379 +
           (C68096 + C68097 - C68098 - C68099 + C68100 + C68101) * C139286 *
               C63380) *
              C139339 * C5228 +
          ((C20091 - (C20090 + C20089) + C20092 - C20093 - C20094) * C139286 *
               C63378 +
           (C68098 - (C68097 + C68096) + C68099 - C68100 - C68101) * C139286 *
               C63379 +
           (C15064 * C5231 - (C20834 * C5225 + C20833 * C5230) +
            C15065 * C5226 - (C554 * C5914 + C139457 * C6254) * C5232 -
            (C554 * C5917 + C139457 * C6257) * C5227) *
               C139286 * C63380) *
              C139339 * C139377)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C139457 * C555) * C5913 +
            (C554 * C116 + C139457 * C561) * C139300) *
               C139286 * C63378 +
           (C20819 + C20820) * C139286 * C63379 + C68645 * C63380) *
              C139339 * C5909 -
          (C68646 * C63380 + (C20825 + C20826) * C139286 * C63379 +
           (C20820 + C20819) * C139286 * C63378) *
              C139339 * C5910 +
          (C68645 * C63378 + (C20835 + C20836) * C139286 * C63379 +
           (C68649 + C68650) * C139286 * C63380) *
              C139339 * C5911 -
          (((C554 * C68300 + C139457 * C68637) * C139300 +
            (C554 * C68299 + C139457 * C68636) * C5913) *
               C139286 * C63380 +
           (C68650 + C68649) * C139286 * C63379 + C68646 * C63378) *
              C139339 * C5912)) /
            (p * q * std::sqrt(p + q));
    d2eezy[69] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C139457 * C555) * C5307 +
            (C554 * C182 + C139457 * C641) * C5228 - C15060 * C5308 -
            C15179 * C139377) *
               C139286 * C63378 +
           (C15060 * C5307 + C15179 * C5228 - C15063 * C5308 -
            C15180 * C139377) *
               C139286 * C63379 +
           (C15063 * C5307 + C15180 * C5228 - C20833 * C5308 -
            C20907 * C139377) *
               C139286 * C63380) *
              C5225 +
          ((C5772 - (C5771 + C5770) + C5773) * C139286 * C63378 +
           (C20201 - (C20200 + C20199) + C20202) * C139286 * C63379 +
           (C15064 * C5308 - (C1579 * C5228 + C1476 * C5307) +
            C15181 * C139377) *
               C139286 * C63380) *
              C5226 +
          (C5784 * C139286 * C63378 +
           (C20205 + C20204 - C20203 - C20206) * C139286 * C63379 +
           (C1478 * C5307 + C1581 * C5228 -
            (C554 * C5914 + C139457 * C6254) * C5308 -
            (C554 * C5980 + C139457 * C6312) * C139377) *
               C139286 * C63380) *
              C5227) *
         C139339) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C554 * C107 + C139457 * C555) * C5976 +
           (C554 * C182 + C139457 * C641) * C5909 - C15060 * C5977 -
           C15179 * C5910 + C15063 * C5978 + C15180 * C5911 - C20833 * C5979 -
           C20907 * C5912) *
              C139286 * C63378 +
          (C15060 * C5976 + C15179 * C5909 - C15063 * C5977 - C15180 * C5910 +
           C20833 * C5978 + C20907 * C5911 - C68647 * C5979 - C68704 * C5912) *
              C139286 * C63379 +
          (C15063 * C5976 + C15180 * C5909 - C20833 * C5977 - C20907 * C5910 +
           C68647 * C5978 + C68704 * C5911 -
           (C554 * C68299 + C139457 * C68636) * C5979 -
           (C554 * C68369 + C139457 * C68700) * C5912) *
              C139286 * C63380) *
         C139300 * C139339) /
            (p * q * std::sqrt(p + q));
    d2eezz[69] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139457 * C555) * C244 +
             (C554 * C245 + C139457 * C719) * C139339) *
                C139286 * C63378 +
            (C15281 + C15297) * C139286 * C63379 + C64563 * C63380) *
               C5228 -
           ((C20980 + C20976) * C139286 * C63380 +
            (C15298 + C15288) * C139286 * C63379 +
            (C15297 + C15281) * C139286 * C63378) *
               C139377) *
              C5225 +
          ((C15284 * C139286 * C63378 + C15290 * C139286 * C63379 +
            (C15291 + C15299) * C139286 * C63380) *
               C139377 -
           (C64562 * C63380 + C15289 * C139286 * C63379 +
            (C742 + C726) * C139286 * C63378) *
               C5228) *
              C5226 +
          ((C746 * C139286 * C63378 + C17202 * C139286 * C63379 +
            (C1677 + C1687) * C139286 * C63380) *
               C5228 -
           (((C554 * C6036 + C139457 * C6363) * C139339 +
             (C554 * C5914 + C139457 * C6254) * C244) *
                C139286 * C63380 +
            (C1687 + C1677) * C139286 * C63379 + C3372 * C139286 * C63378) *
               C139377) *
              C5227)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C139457 * C555) * C244 +
            (C554 * C245 + C139457 * C719) * C139339) *
               C139286 * C63378 +
           (C15281 + C15297) * C139286 * C63379 + C64563 * C63380) *
              C5909 -
          (C68760 * C63380 + (C15298 + C15288) * C139286 * C63379 +
           (C15297 + C15281) * C139286 * C63378) *
              C5910 +
          (C64563 * C63378 + (C20976 + C20980) * C139286 * C63379 +
           (C68757 + C68762) * C139286 * C63380) *
              C5911 -
          (((C554 * C68424 + C139457 * C68754) * C139339 +
            (C554 * C68299 + C139457 * C68636) * C244) *
               C139286 * C63380 +
           (C68762 + C68757) * C139286 * C63379 + C68760 * C63378) *
              C5912) *
         C139300) /
            (p * q * std::sqrt(p + q));
    d2eexx[70] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139286 * C113) * C137108 +
             (C63381 * C116 + C139286 * C125) * C139552 -
             (C63381 * C108 + C139286 * C114) * C137101 -
             (C63381 * C117 + C139286 * C126) * C139305) *
                C63378 +
            (C69583 + C69584 - C69585 - C69586) * C63379 + C69597 * C63380) *
               C139457 * C9466 +
           (((C63381 * C1764 + C139286 * C1772) * C137101 -
             ((C63381 * C1777 + C139286 * C1790) * C139552 +
              (C63381 * C1767 + C139286 * C1778) * C137108) +
             (C63381 * C1776 + C139286 * C1789) * C139305) *
                C63378 +
            (C70296 - (C70297 + C70298) + C70299) * C63379 +
            (C70300 - (C70301 + C70302) + C70303) * C63380) *
               C139457 * C139403) *
              C139560 +
          (((C69585 - (C69584 + C69583) + C69586) * C63378 +
            (C69589 - (C69588 + C69587) + C69590) * C63379 +
            (C69591 - (C69592 + C69593) + C69594) * C63380) *
               C139457 * C9466 +
           ((C70298 + C70297 - C70296 - C70299) * C63378 +
            (C70302 + C70301 - C70300 - C70303) * C63379 +
            (C71175 * C137108 + C71176 * C139552 -
             (C63381 * C24128 + C139286 * C24132) * C137101 -
             (C63381 * C24130 + C139286 * C24134) * C139305) *
                C63380) *
               C139457 * C139403) *
              C139377)) /
        (p * q * std::sqrt(p + q));
    d2eexy[70] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C63381 * C107 + C139286 * C113) * C2783 +
                       (C63381 * C182 + C139286 * C188) * C139560 -
                       C63884 * C2784 - C63997 * C139377) *
                          C63378 +
                      (C63884 * C2783 + C63997 * C139560 - C63888 * C2784 -
                       C63998 * C139377) *
                          C63379 +
                      (C63888 * C2783 + C63998 * C139560 - C63894 * C2784 -
                       C63999 * C139377) *
                          C63380) *
                         C139457 * C139552 +
                     ((C63886 * C2784 -
                       ((C63381 * C183 + C139286 * C189) * C139560 +
                        (C63381 * C108 + C139286 * C114) * C2783) +
                       C64000 * C139377) *
                          C63378 +
                      (C63890 * C2784 - (C64000 * C139560 + C63886 * C2783) +
                       C64001 * C139377) *
                          C63379 +
                      (C63892 * C2784 - (C64001 * C139560 + C63890 * C2783) +
                       C64002 * C139377) *
                          C63380) *
                         C139457 * C139305) *
                        C9466 +
                    (((C66724 * C2784 -
                       ((C63381 * C1873 + C139286 * C1881) * C139560 +
                        (C63381 * C1767 + C139286 * C1778) * C2783) +
                       C66844 * C139377) *
                          C63378 +
                      (C66728 * C2784 - (C66844 * C139560 + C66724 * C2783) +
                       C66845 * C139377) *
                          C63379 +
                      (C71175 * C2784 - (C66845 * C139560 + C66728 * C2783) +
                       C71257 * C139377) *
                          C63380) *
                         C139457 * C139552 +
                     (((C63381 * C1764 + C139286 * C1772) * C2783 +
                       (C63381 * C1870 + C139286 * C1878) * C139560 -
                       C66722 * C2784 - C66846 * C139377) *
                          C63378 +
                      (C66722 * C2783 + C66846 * C139560 - C66726 * C2784 -
                       C66847 * C139377) *
                          C63379 +
                      (C66726 * C2783 + C66847 * C139560 -
                       (C63381 * C24128 + C139286 * C24132) * C2784 -
                       (C63381 * C24246 + C139286 * C24248) * C139377) *
                          C63380) *
                         C139457 * C139305) *
                        C139403)) /
                  (p * q * std::sqrt(p + q));
    d2eexz[70] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139286 * C113) * C9616 +
             (C63381 * C245 + C139286 * C251) * C9466 -
             (C63381 * C1767 + C139286 * C1778) * C9617 -
             (C63381 * C1965 + C139286 * C1973) * C139403) *
                C63378 +
            (C72708 + C72709 - C72710 - C72711) * C63379 + C72722 * C63380) *
               C139457 * C139560 +
           ((C72710 - (C72709 + C72708) + C72711) * C63378 +
            (C72714 - (C72713 + C72712) + C72715) * C63379 +
            (C72716 - (C72717 + C72718) + C72719) * C63380) *
               C139457 * C139377) *
              C139552 +
          ((((C63381 * C1764 + C139286 * C1772) * C9617 -
             ((C63381 * C246 + C139286 * C252) * C9466 +
              (C63381 * C108 + C139286 * C114) * C9616) +
             (C63381 * C1964 + C139286 * C1972) * C139403) *
                C63378 +
            (C73935 - (C73936 + C73937) + C73938) * C63379 +
            (C73939 - (C73940 + C73941) + C73942) * C63380) *
               C139457 * C139560 +
           ((C73937 + C73936 - C73935 - C73938) * C63378 +
            (C73941 + C73940 - C73939 - C73942) * C63379 +
            (C63892 * C9616 + C64100 * C9466 -
             (C63381 * C24128 + C139286 * C24132) * C9617 -
             (C63381 * C24354 + C139286 * C24356) * C139403) *
                C63380) *
               C139457 * C139377) *
              C139305)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[70] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C63532 * C107 + C63378 * C308 + C63533 * C831 +
                       C63379 * C1118 + C63534 * C832 + C63380 * C1121) *
                          C137108 +
                      (C63532 * C116 + C63378 * C314 + C63533 * C841 +
                       C63379 * C1125 + C63534 * C847 + C63380 * C1129) *
                          C139552 -
                      (C63534 * C833 + C63380 * C1122 + C63533 * C828 +
                       C63379 * C1117 + C63532 * C108 + C63378 * C309) *
                          C137101 -
                      (C63534 * C848 + C63380 * C1130 + C63533 * C840 +
                       C63379 * C1126 + C63532 * C117 + C63378 * C315) *
                          C139305) *
                         C139457 * C139286 * C9466 +
                     ((C63532 * C1764 + C63378 * C2053 + C63533 * C4224 +
                       C63379 * C4550 + C63534 * C8753 + C63380 * C8999) *
                          C137101 -
                      ((C63534 * C8757 + C63380 * C9003 + C63533 * C4230 +
                        C63379 * C4553 + C63532 * C1777 + C63378 * C2061) *
                           C139552 +
                       (C63534 * C8754 + C63380 * C9000 + C63533 * C4223 +
                        C63379 * C4549 + C63532 * C1767 + C63378 * C2054) *
                           C137108) +
                      (C63532 * C1776 + C63378 * C2062 + C63533 * C4231 +
                       C63379 * C4554 + C63534 * C8756 + C63380 * C9002) *
                          C139305) *
                         C139457 * C139286 * C139403) *
                        C139560 +
                    (((C63532 * C828 + C63378 * C1117 + C63533 * C833 +
                       C63379 * C1122 + C63534 * C5915 + C63380 * C6093) *
                          C137101 -
                      ((C63534 * C5919 + C63380 * C6097 + C63533 * C847 +
                        C63379 * C1129 + C63532 * C841 + C63378 * C1125) *
                           C139552 +
                       (C63534 * C5916 + C63380 * C6094 + C63533 * C832 +
                        C63379 * C1121 + C63532 * C831 + C63378 * C1118) *
                           C137108) +
                      (C63532 * C840 + C63378 * C1126 + C63533 * C848 +
                       C63379 * C1130 + C63534 * C5918 + C63380 * C6096) *
                          C139305) *
                         C139457 * C139286 * C9466 +
                     ((C63532 * C4223 + C63378 * C4549 + C63533 * C8754 +
                       C63379 * C9000 + C63534 * C24129 + C63380 * C24463) *
                          C137108 +
                      (C63532 * C4230 + C63378 * C4553 + C63533 * C8757 +
                       C63379 * C9003 + C63534 * C24131 + C63380 * C24465) *
                          C139552 -
                      (C63534 * C24128 + C63380 * C24462 + C63533 * C8753 +
                       C63379 * C8999 + C63532 * C4224 + C63378 * C4550) *
                          C137101 -
                      (C63534 * C24130 + C63380 * C24464 + C63533 * C8756 +
                       C63379 * C9002 + C63532 * C4231 + C63378 * C4554) *
                          C139305) *
                         C139457 * C139286 * C139403) *
                        C139377)) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[70] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C63532 * C107 + C63378 * C308 + C63533 * C831 +
                       C63379 * C1118 + C63534 * C832 + C63380 * C1121) *
                          C2783 +
                      (C63532 * C182 + C63378 * C394 + C63533 * C939 +
                       C63379 * C1231 + C63534 * C940 + C63380 * C1232) *
                          C139560 -
                      (C63534 * C5916 + C63380 * C6094 + C63533 * C832 +
                       C63379 * C1121 + C63532 * C831 + C63378 * C1118) *
                          C2784 -
                      (C63534 * C5982 + C63380 * C6148 + C63533 * C940 +
                       C63379 * C1232 + C63532 * C939 + C63378 * C1231) *
                          C139377) *
                         C139457 * C139286 * C139552 +
                     ((C63532 * C828 + C63378 * C1117 + C63533 * C833 +
                       C63379 * C1122 + C63534 * C5915 + C63380 * C6093) *
                          C2784 -
                      ((C63534 * C941 + C63380 * C1234 + C63533 * C938 +
                        C63379 * C1233 + C63532 * C183 + C63378 * C395) *
                           C139560 +
                       (C63534 * C833 + C63380 * C1122 + C63533 * C828 +
                        C63379 * C1117 + C63532 * C108 + C63378 * C309) *
                           C2783) +
                      (C63532 * C938 + C63378 * C1233 + C63533 * C941 +
                       C63379 * C1234 + C63534 * C5981 + C63380 * C6149) *
                          C139377) *
                         C139457 * C139286 * C139305) *
                        C9466 +
                    (((C63532 * C4223 + C63378 * C4549 + C63533 * C8754 +
                       C63379 * C9000 + C63534 * C24129 + C63380 * C24463) *
                          C2784 -
                      ((C63534 * C8840 + C63380 * C9078 + C63533 * C4337 +
                        C63379 * C4667 + C63532 * C1873 + C63378 * C2170) *
                           C139560 +
                       (C63534 * C8754 + C63380 * C9000 + C63533 * C4223 +
                        C63379 * C4549 + C63532 * C1767 + C63378 * C2054) *
                           C2783) +
                      (C63532 * C4337 + C63378 * C4667 + C63533 * C8840 +
                       C63379 * C9078 + C63534 * C24247 + C63380 * C24564) *
                          C139377) *
                         C139457 * C139286 * C139552 +
                     ((C63532 * C1764 + C63378 * C2053 + C63533 * C4224 +
                       C63379 * C4550 + C63534 * C8753 + C63380 * C8999) *
                          C2783 +
                      (C63532 * C1870 + C63378 * C2167 + C63533 * C4338 +
                       C63379 * C4668 + C63534 * C8839 + C63380 * C9079) *
                          C139560 -
                      (C63534 * C24128 + C63380 * C24462 + C63533 * C8753 +
                       C63379 * C8999 + C63532 * C4224 + C63378 * C4550) *
                          C2784 -
                      (C63534 * C24246 + C63380 * C24565 + C63533 * C8839 +
                       C63379 * C9079 + C63532 * C4338 + C63378 * C4668) *
                          C139377) *
                         C139457 * C139286 * C139305) *
                        C139403)) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[70] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C63532 * C107 + C63378 * C308 + C63533 * C831 +
                       C63379 * C1118 + C63534 * C832 + C63380 * C1121) *
                          C9616 +
                      (C63532 * C245 + C63378 * C474 + C63533 * C1029 +
                       C63379 * C1339 + C63534 * C1030 + C63380 * C1340) *
                          C9466 -
                      (C63534 * C8754 + C63380 * C9000 + C63533 * C4223 +
                       C63379 * C4549 + C63532 * C1767 + C63378 * C2054) *
                          C9617 -
                      (C63534 * C8920 + C63380 * C9155 + C63533 * C4443 +
                       C63379 * C4783 + C63532 * C1965 + C63378 * C2269) *
                          C139403) *
                         C139457 * C139286 * C139560 +
                     ((C63532 * C4223 + C63378 * C4549 + C63533 * C8754 +
                       C63379 * C9000 + C63534 * C24129 + C63380 * C24463) *
                          C9617 -
                      ((C63534 * C6038 + C63380 * C6203 + C63533 * C1030 +
                        C63379 * C1340 + C63532 * C1029 + C63378 * C1339) *
                           C9466 +
                       (C63534 * C5916 + C63380 * C6094 + C63533 * C832 +
                        C63379 * C1121 + C63532 * C831 + C63378 * C1118) *
                           C9616) +
                      (C63532 * C4443 + C63378 * C4783 + C63533 * C8920 +
                       C63379 * C9155 + C63534 * C24355 + C63380 * C24664) *
                          C139403) *
                         C139457 * C139286 * C139377) *
                        C139552 +
                    (((C63532 * C1764 + C63378 * C2053 + C63533 * C4224 +
                       C63379 * C4550 + C63534 * C8753 + C63380 * C8999) *
                          C9617 -
                      ((C63534 * C1031 + C63380 * C1341 + C63533 * C1028 +
                        C63379 * C1338 + C63532 * C246 + C63378 * C475) *
                           C9466 +
                       (C63534 * C833 + C63380 * C1122 + C63533 * C828 +
                        C63379 * C1117 + C63532 * C108 + C63378 * C309) *
                           C9616) +
                      (C63532 * C1964 + C63378 * C2271 + C63533 * C4444 +
                       C63379 * C4784 + C63534 * C8919 + C63380 * C9156) *
                          C139403) *
                         C139457 * C139286 * C139560 +
                     ((C63532 * C828 + C63378 * C1117 + C63533 * C833 +
                       C63379 * C1122 + C63534 * C5915 + C63380 * C6093) *
                          C9616 +
                      (C63532 * C1028 + C63378 * C1338 + C63533 * C1031 +
                       C63379 * C1341 + C63534 * C6037 + C63380 * C6202) *
                          C9466 -
                      (C63534 * C24128 + C63380 * C24462 + C63533 * C8753 +
                       C63379 * C8999 + C63532 * C4224 + C63378 * C4550) *
                          C9617 -
                      (C63534 * C24354 + C63380 * C24665 + C63533 * C8919 +
                       C63379 * C9156 + C63532 * C4444 + C63378 * C4784) *
                          C139403) *
                         C139457 * C139286 * C139377) *
                        C139305)) /
                  (p * q * std::sqrt(p + q));
    d2eezx[70] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139457 * C555) * C137108 +
             (C554 * C116 + C139457 * C561) * C139552 - C584 * C137101 -
             C585 * C139305) *
                C139286 * C63378 +
            (C22631 + C22632 - C22633 - C22634) * C139286 * C63379 +
            C70049 * C63380) *
               C9466 +
           ((C2408 * C137101 -
             ((C554 * C1777 + C139457 * C2383) * C139552 +
              (C554 * C1767 + C139457 * C2376) * C137108) +
             C2409 * C139305) *
                C139286 * C63378 +
            (C23759 - (C23760 + C23761) + C23762) * C139286 * C63379 +
            (C70892 - (C70893 + C70894) + C70895) * C139286 * C63380) *
               C139403) *
              C139560 +
          (((C22633 - (C22632 + C22631) + C22634) * C139286 * C63378 +
            (C22639 - (C22640 + C22641) + C22642) * C139286 * C63379 +
            (C70043 - (C70044 + C70045) + C70046) * C139286 * C63380) *
               C9466 +
           ((C23761 + C23760 - C23759 - C23762) * C139286 * C63378 +
            (C70894 + C70893 - C70892 - C70895) * C139286 * C63379 +
            (C71652 * C137108 + C71653 * C139552 -
             (C554 * C24128 + C139457 * C24764) * C137101 -
             (C554 * C24130 + C139457 * C24766) * C139305) *
                C139286 * C63380) *
               C139403) *
              C139377)) /
        (p * q * std::sqrt(p + q));
    d2eezy[70] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C554 * C107 + C139457 * C555) * C2783 +
                       (C554 * C182 + C139457 * C641) * C139560 -
                       C15060 * C2784 - C15179 * C139377) *
                          C139286 * C63378 +
                      (C15060 * C2783 + C15179 * C139560 - C15063 * C2784 -
                       C15180 * C139377) *
                          C139286 * C63379 +
                      (C15063 * C2783 + C15180 * C139560 - C20833 * C2784 -
                       C20907 * C139377) *
                          C139286 * C63380) *
                         C139552 +
                     ((C3281 - (C3280 + C3279) + C3282) * C139286 * C63378 +
                      (C17098 - (C17097 + C17096) + C17099) * C139286 * C63379 +
                      (C15064 * C2784 - (C1579 * C139560 + C1476 * C2783) +
                       C15181 * C139377) *
                          C139286 * C63380) *
                         C139305) *
                        C9466 +
                    (((C19108 * C2784 -
                       ((C554 * C1873 + C139457 * C2492) * C139560 +
                        (C554 * C1767 + C139457 * C2376) * C2783) +
                       C19250 * C139377) *
                          C139286 * C63378 +
                      (C24775 * C2784 - (C19250 * C139560 + C19108 * C2783) +
                       C24881 * C139377) *
                          C139286 * C63379 +
                      (C71652 * C2784 - (C24881 * C139560 + C24775 * C2783) +
                       C71733 * C139377) *
                          C139286 * C63380) *
                         C139552 +
                     ((C5024 + C5023 - C5022 - C5034) * C139286 * C63378 +
                      (C19247 + C19246 - C19245 - C19252) * C139286 * C63379 +
                      (C19109 * C2783 + C19251 * C139560 -
                       (C554 * C24128 + C139457 * C24764) * C2784 -
                       (C554 * C24246 + C139457 * C24877) * C139377) *
                          C139286 * C63380) *
                         C139305) *
                        C139403)) /
                  (p * q * std::sqrt(p + q));
    d2eezz[70] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139457 * C555) * C9616 +
             (C554 * C245 + C139457 * C719) * C9466 -
             (C554 * C1767 + C139457 * C2376) * C9617 -
             (C554 * C1965 + C139457 * C2591) * C139403) *
                C139286 * C63378 +
            (C26753 + C26754 - C26755 - C26756) * C139286 * C63379 +
            C73174 * C63380) *
               C139560 +
           ((C26755 - (C26754 + C26753) + C26756) * C139286 * C63378 +
            (C26757 - (C26758 + C26759) + C26760) * C139286 * C63379 +
            (C73168 - (C73169 + C73170) + C73171) * C139286 * C63380) *
               C139377) *
              C139552 +
          (((C10081 - (C10080 + C10079) + C10082) * C139286 * C63378 +
            C28566 * C139286 * C63379 +
            (C26761 - (C26762 + C26763) + C26764) * C139286 * C63380) *
               C139560 +
           (C28565 * C139286 * C63378 +
            (C26763 + C26762 - C26761 - C26764) * C139286 * C63379 +
            (C15064 * C9616 + C15296 * C9466 -
             (C554 * C24128 + C139457 * C24764) * C9617 -
             (C554 * C24354 + C139457 * C24980) * C139403) *
                C139286 * C63380) *
               C139377) *
              C139305)) /
        (p * q * std::sqrt(p + q));
    d2eexx[71] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C63381 * C107 + C139286 * C113) * C5913 +
                       (C63381 * C116 + C139286 * C125) * C139300) *
                          C63378 +
                      (C68304 + C68305) * C63379 + C68314 * C63380) *
                         C139457 * C139593 -
                     (C71170 * C63380 + (C68843 + C68844) * C63379 +
                      ((C63381 * C1777 + C139286 * C1790) * C139300 +
                       (C63381 * C1767 + C139286 * C1778) * C5913) *
                          C63378) *
                         C139457 * C139594 +
                     (((C63381 * C1768 + C139286 * C1780) * C5913 +
                       (C63381 * C1783 + C139286 * C1792) * C139300) *
                          C63378 +
                      (C68857 + C68858) * C63379 + (C68859 + C68860) * C63380) *
                         C139457 * C12239) *
                        C139560 +
                    (((C68844 + C68843) * C63378 + (C68842 + C68841) * C63379 +
                      (C71177 + C71178) * C63380) *
                         C139457 * C139594 -
                     (C68315 * C63380 + (C68307 + C68306) * C63379 +
                      (C68305 + C68304) * C63378) *
                         C139457 * C139593 -
                     (((C63381 * C68837 + C139286 * C68839) * C139300 +
                       (C63381 * C68836 + C139286 * C68838) * C5913) *
                          C63380 +
                      (C68860 + C68859) * C63379 + (C68858 + C68857) * C63378) *
                         C139457 * C12239) *
                        C139377)) /
                  (p * q * std::sqrt(p + q));
    d2eexy[71] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C63381 * C107 + C139286 * C113) * C2783 +
                      (C63381 * C182 + C139286 * C188) * C139560 -
                      C63884 * C2784 - C63997 * C139377) *
                         C63378 +
                     (C63884 * C2783 + C63997 * C139560 - C63888 * C2784 -
                      C63998 * C139377) *
                         C63379 +
                     (C63888 * C2783 + C63998 * C139560 - C63894 * C2784 -
                      C63999 * C139377) *
                         C63380) *
                        C139457 * C139300 * C139593 +
                    ((C66724 * C2784 -
                      ((C63381 * C1873 + C139286 * C1881) * C139560 +
                       (C63381 * C1767 + C139286 * C1778) * C2783) +
                      C66844 * C139377) *
                         C63378 +
                     (C66728 * C2784 - (C66844 * C139560 + C66724 * C2783) +
                      C66845 * C139377) *
                         C63379 +
                     (C71175 * C2784 - (C66845 * C139560 + C66728 * C2783) +
                      C71257 * C139377) *
                         C63380) *
                        C139457 * C139300 * C139594 +
                    (((C63381 * C1768 + C139286 * C1780) * C2783 +
                      (C63381 * C1874 + C139286 * C1882) * C139560 -
                      C68853 * C2784 - C68941 * C139377) *
                         C63378 +
                     (C68853 * C2783 + C68941 * C139560 - C68855 * C2784 -
                      C68942 * C139377) *
                         C63379 +
                     (C68855 * C2783 + C68942 * C139560 -
                      (C63381 * C68836 + C139286 * C68838) * C2784 -
                      (C63381 * C68934 + C139286 * C68935) * C139377) *
                         C63380) *
                        C139457 * C139300 * C12239)) /
                  (p * q * std::sqrt(p + q));
    d2eexz[71] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139286 * C113) * C12388 +
            (C63381 * C245 + C139286 * C251) * C139593 -
            (C63381 * C1767 + C139286 * C1778) * C12389 -
            (C63381 * C1965 + C139286 * C1973) * C139594 +
            (C63381 * C1768 + C139286 * C1780) * C12390 +
            (C63381 * C1966 + C139286 * C1974) * C12239) *
               C63378 +
           (C75419 + C75420 - C75421 - C75422 + C75423 + C75424) * C63379 +
           (C75425 + C75426 - C75427 - C75428 + C75429 + C75430) * C63380) *
              C139457 * C139560 +
          ((C75421 - (C75420 + C75419) + C75422 - C75423 - C75424) * C63378 +
           (C75427 - (C75426 + C75425) + C75428 - C75429 - C75430) * C63379 +
           (C71175 * C12389 - (C64097 * C139593 + C63894 * C12388) +
            C71341 * C139594 - (C63381 * C68836 + C139286 * C68838) * C12390 -
            (C63381 * C69016 + C139286 * C69017) * C12239) *
               C63380) *
              C139457 * C139377) *
         C139300) /
        (p * q * std::sqrt(p + q));
    d2eeyx[71] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C63532 * C107 + C63378 * C308 + C63533 * C831 +
                       C63379 * C1118 + C63534 * C832 + C63380 * C1121) *
                          C5913 +
                      (C63532 * C116 + C63378 * C314 + C63533 * C841 +
                       C63379 * C1125 + C63534 * C847 + C63380 * C1129) *
                          C139300) *
                         C139457 * C139286 * C139593 -
                     ((C63534 * C8757 + C63380 * C9003 + C63533 * C4230 +
                       C63379 * C4553 + C63532 * C1777 + C63378 * C2061) *
                          C139300 +
                      (C63534 * C8754 + C63380 * C9000 + C63533 * C4223 +
                       C63379 * C4549 + C63532 * C1767 + C63378 * C2054) *
                          C5913) *
                         C139457 * C139286 * C139594 +
                     ((C63532 * C1768 + C63378 * C2057 + C63533 * C6442 +
                       C63379 * C6688 + C63534 * C21079 + C63380 * C21413) *
                          C5913 +
                      (C63532 * C1783 + C63378 * C2065 + C63533 * C6445 +
                       C63379 * C6691 + C63534 * C21081 + C63380 * C21415) *
                          C139300) *
                         C139457 * C139286 * C12239) *
                        C139560 +
                    (((C63532 * C4223 + C63378 * C4549 + C63533 * C8754 +
                       C63379 * C9000 + C63534 * C24129 + C63380 * C24463) *
                          C5913 +
                      (C63532 * C4230 + C63378 * C4553 + C63533 * C8757 +
                       C63379 * C9003 + C63534 * C24131 + C63380 * C24465) *
                          C139300) *
                         C139457 * C139286 * C139594 -
                     ((C63534 * C5919 + C63380 * C6097 + C63533 * C847 +
                       C63379 * C1129 + C63532 * C841 + C63378 * C1125) *
                          C139300 +
                      (C63534 * C5916 + C63380 * C6094 + C63533 * C832 +
                       C63379 * C1121 + C63532 * C831 + C63378 * C1118) *
                          C5913) *
                         C139457 * C139286 * C139593 -
                     ((C63534 * C68837 + C63380 * C69111 + C63533 * C21081 +
                       C63379 * C21415 + C63532 * C6445 + C63378 * C6691) *
                          C139300 +
                      (C63534 * C68836 + C63380 * C69110 + C63533 * C21079 +
                       C63379 * C21413 + C63532 * C6442 + C63378 * C6688) *
                          C5913) *
                         C139457 * C139286 * C12239) *
                        C139377)) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[71] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((C63532 * C107 + C63378 * C308 + C63533 * C831 +
                      C63379 * C1118 + C63534 * C832 + C63380 * C1121) *
                         C2783 +
                     (C63532 * C182 + C63378 * C394 + C63533 * C939 +
                      C63379 * C1231 + C63534 * C940 + C63380 * C1232) *
                         C139560 -
                     (C63534 * C5916 + C63380 * C6094 + C63533 * C832 +
                      C63379 * C1121 + C63532 * C831 + C63378 * C1118) *
                         C2784 -
                     (C63534 * C5982 + C63380 * C6148 + C63533 * C940 +
                      C63379 * C1232 + C63532 * C939 + C63378 * C1231) *
                         C139377) *
                        C139457 * C139286 * C139300 * C139593 +
                    ((C63532 * C4223 + C63378 * C4549 + C63533 * C8754 +
                      C63379 * C9000 + C63534 * C24129 + C63380 * C24463) *
                         C2784 -
                     ((C63534 * C8840 + C63380 * C9078 + C63533 * C4337 +
                       C63379 * C4667 + C63532 * C1873 + C63378 * C2170) *
                          C139560 +
                      (C63534 * C8754 + C63380 * C9000 + C63533 * C4223 +
                       C63379 * C4549 + C63532 * C1767 + C63378 * C2054) *
                          C2783) +
                     (C63532 * C4337 + C63378 * C4667 + C63533 * C8840 +
                      C63379 * C9078 + C63534 * C24247 + C63380 * C24564) *
                         C139377) *
                        C139457 * C139286 * C139300 * C139594 +
                    ((C63532 * C1768 + C63378 * C2057 + C63533 * C6442 +
                      C63379 * C6688 + C63534 * C21079 + C63380 * C21413) *
                         C2783 +
                     (C63532 * C1874 + C63378 * C2171 + C63533 * C6528 +
                      C63379 * C6766 + C63534 * C21197 + C63380 * C21514) *
                         C139560 -
                     (C63534 * C68836 + C63380 * C69110 + C63533 * C21079 +
                      C63379 * C21413 + C63532 * C6442 + C63378 * C6688) *
                         C2784 -
                     (C63534 * C68934 + C63380 * C69186 + C63533 * C21197 +
                      C63379 * C21514 + C63532 * C6528 + C63378 * C6766) *
                         C139377) *
                        C139457 * C139286 * C139300 * C12239)) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[71] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((C63532 * C107 + C63378 * C308 + C63533 * C831 +
                      C63379 * C1118 + C63534 * C832 + C63380 * C1121) *
                         C12388 +
                     (C63532 * C245 + C63378 * C474 + C63533 * C1029 +
                      C63379 * C1339 + C63534 * C1030 + C63380 * C1340) *
                         C139593 -
                     (C63534 * C8754 + C63380 * C9000 + C63533 * C4223 +
                      C63379 * C4549 + C63532 * C1767 + C63378 * C2054) *
                         C12389 -
                     (C63534 * C8920 + C63380 * C9155 + C63533 * C4443 +
                      C63379 * C4783 + C63532 * C1965 + C63378 * C2269) *
                         C139594 +
                     (C63532 * C1768 + C63378 * C2057 + C63533 * C6442 +
                      C63379 * C6688 + C63534 * C21079 + C63380 * C21413) *
                         C12390 +
                     (C63532 * C1966 + C63378 * C2270 + C63533 * C6608 +
                      C63379 * C6843 + C63534 * C21305 + C63380 * C21614) *
                         C12239) *
                        C139457 * C139286 * C139560 +
                    ((C63532 * C4223 + C63378 * C4549 + C63533 * C8754 +
                      C63379 * C9000 + C63534 * C24129 + C63380 * C24463) *
                         C12389 -
                     ((C63534 * C6038 + C63380 * C6203 + C63533 * C1030 +
                       C63379 * C1340 + C63532 * C1029 + C63378 * C1339) *
                          C139593 +
                      (C63534 * C5916 + C63380 * C6094 + C63533 * C832 +
                       C63379 * C1121 + C63532 * C831 + C63378 * C1118) *
                          C12388) +
                     (C63532 * C4443 + C63378 * C4783 + C63533 * C8920 +
                      C63379 * C9155 + C63534 * C24355 + C63380 * C24664) *
                         C139594 -
                     (C63534 * C68836 + C63380 * C69110 + C63533 * C21079 +
                      C63379 * C21413 + C63532 * C6442 + C63378 * C6688) *
                         C12390 -
                     (C63534 * C69016 + C63380 * C69261 + C63533 * C21305 +
                      C63379 * C21614 + C63532 * C6608 + C63378 * C6843) *
                         C12239) *
                        C139457 * C139286 * C139377) *
                   C139300) /
                  (p * q * std::sqrt(p + q));
    d2eezx[71] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C554 * C107 + C139457 * C555) * C5913 +
                       (C554 * C116 + C139457 * C561) * C139300) *
                          C139286 * C63378 +
                      (C20819 + C20820) * C139286 * C63379 + C68645 * C63380) *
                         C139593 -
                     (C71651 * C63380 + (C21721 + C21722) * C139286 * C63379 +
                      ((C554 * C1777 + C139457 * C2383) * C139300 +
                       (C554 * C1767 + C139457 * C2376) * C5913) *
                          C139286 * C63378) *
                         C139594 +
                     (((C554 * C1768 + C139457 * C2379) * C5913 +
                       (C554 * C1783 + C139457 * C2387) * C139300) *
                          C139286 * C63378 +
                      (C21731 + C21732) * C139286 * C63379 +
                      (C69345 + C69346) * C139286 * C63380) *
                         C12239) *
                        C139560 +
                    (((C21722 + C21721) * C139286 * C63378 +
                      (C24777 + C24778) * C139286 * C63379 +
                      (C71654 + C71655) * C139286 * C63380) *
                         C139594 -
                     (C68646 * C63380 + (C20825 + C20826) * C139286 * C63379 +
                      (C20820 + C20819) * C139286 * C63378) *
                         C139593 -
                     (((C554 * C68837 + C139457 * C69337) * C139300 +
                       (C554 * C68836 + C139457 * C69336) * C5913) *
                          C139286 * C63380 +
                      (C69346 + C69345) * C139286 * C63379 +
                      (C21732 + C21731) * C139286 * C63378) *
                         C12239) *
                        C139377)) /
                  (p * q * std::sqrt(p + q));
    d2eezy[71] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C554 * C107 + C139457 * C555) * C2783 +
                      (C554 * C182 + C139457 * C641) * C139560 -
                      C15060 * C2784 - C15179 * C139377) *
                         C139286 * C63378 +
                     (C15060 * C2783 + C15179 * C139560 - C15063 * C2784 -
                      C15180 * C139377) *
                         C139286 * C63379 +
                     (C15063 * C2783 + C15180 * C139560 - C20833 * C2784 -
                      C20907 * C139377) *
                         C139286 * C63380) *
                        C139300 * C139593 +
                    ((C19108 * C2784 -
                      ((C554 * C1873 + C139457 * C2492) * C139560 +
                       (C554 * C1767 + C139457 * C2376) * C2783) +
                      C19250 * C139377) *
                         C139286 * C63378 +
                     (C24775 * C2784 - (C19250 * C139560 + C19108 * C2783) +
                      C24881 * C139377) *
                         C139286 * C63379 +
                     (C71652 * C2784 - (C24881 * C139560 + C24775 * C2783) +
                      C71733 * C139377) *
                         C139286 * C63380) *
                        C139300 * C139594 +
                    (((C554 * C1768 + C139457 * C2379) * C2783 +
                      (C554 * C1874 + C139457 * C2493) * C139560 -
                      C21729 * C2784 - C21835 * C139377) *
                         C139286 * C63378 +
                     (C21729 * C2783 + C21835 * C139560 - C69343 * C2784 -
                      C69424 * C139377) *
                         C139286 * C63379 +
                     (C69343 * C2783 + C69424 * C139560 -
                      (C554 * C68836 + C139457 * C69336) * C2784 -
                      (C554 * C68934 + C139457 * C69420) * C139377) *
                         C139286 * C63380) *
                        C139300 * C12239)) /
                  (p * q * std::sqrt(p + q));
    d2eezz[71] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C139457 * C555) * C12388 +
            (C554 * C245 + C139457 * C719) * C139593 -
            (C554 * C1767 + C139457 * C2376) * C12389 -
            (C554 * C1965 + C139457 * C2591) * C139594 +
            (C554 * C1768 + C139457 * C2379) * C12390 +
            (C554 * C1966 + C139457 * C2592) * C12239) *
               C139286 * C63378 +
           (C30337 + C30338 - C30339 - C30340 + C30341 + C30342) * C139286 *
               C63379 +
           (C75875 + C75876 - C75877 - C75878 + C75879 + C75880) * C139286 *
               C63380) *
              C139560 +
          ((C30339 - (C30338 + C30337) + C30340 - C30341 - C30342) * C139286 *
               C63378 +
           (C75877 - (C75876 + C75875) + C75878 - C75879 - C75880) * C139286 *
               C63379 +
           (C71652 * C12389 - (C20979 * C139593 + C20833 * C12388) +
            C71816 * C139594 - (C554 * C68836 + C139457 * C69336) * C12390 -
            (C554 * C69016 + C139457 * C69498) * C12239) *
               C139286 * C63380) *
              C139377) *
         C139300) /
        (p * q * std::sqrt(p + q));
    d2eexx[72] +=
        (-std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139286 * C113) * C5913 +
             (C63381 * C116 + C139286 * C125) * C139300) *
                C63378 +
            (C68304 + C68305) * C63379 + C68314 * C63380) *
               C139457 * C9466 -
           (C71170 * C63380 + (C68843 + C68844) * C63379 +
            ((C63381 * C1777 + C139286 * C1790) * C139300 +
             (C63381 * C1767 + C139286 * C1778) * C5913) *
                C63378) *
               C139457 * C139403) *
              C823 +
          (((C68844 + C68843) * C63378 + (C68842 + C68841) * C63379 +
            (C71177 + C71178) * C63380) *
               C139457 * C139403 -
           (C68315 * C63380 + (C68307 + C68306) * C63379 +
            (C68305 + C68304) * C63378) *
               C139457 * C9466) *
              C824 +
          ((C68314 * C63378 + (C68309 + C68308) * C63379 +
            (C68318 + C68319) * C63380) *
               C139457 * C9466 -
           (((C63381 * C71166 + C139286 * C71168) * C139300 +
             (C63381 * C71165 + C139286 * C71167) * C5913) *
                C63380 +
            (C71178 + C71177) * C63379 + C71170 * C63378) *
               C139457 * C139403) *
              C825)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139286 * C113) * C5230 +
            (C63381 * C116 + C139286 * C125) * C5225 -
            (C63381 * C108 + C139286 * C114) * C5231 -
            (C63381 * C117 + C139286 * C126) * C5226 +
            (C63381 * C109 + C139286 * C115) * C5232 +
            (C63381 * C118 + C139286 * C127) * C5227) *
               C63378 +
           (C67640 + C67641 - C67642 - C67643 + C67644 + C67645) * C63379 +
           (C67646 + C67647 - C67648 - C67649 + C67650 + C67651) * C63380) *
              C139457 * C9466 +
          (((C63381 * C1764 + C139286 * C1772) * C5231 -
            ((C63381 * C1777 + C139286 * C1790) * C5225 +
             (C63381 * C1767 + C139286 * C1778) * C5230) +
            (C63381 * C1776 + C139286 * C1789) * C5226 -
            (C63381 * C1765 + C139286 * C1773) * C5232 -
            (C63381 * C1775 + C139286 * C1788) * C5227) *
               C63378 +
           (C66722 * C5231 - (C66723 * C5225 + C66724 * C5230) +
            C66725 * C5226 - (C63381 * C4225 + C139286 * C4229) * C5232 -
            (C63381 * C4232 + C139286 * C4237) * C5227) *
               C63379 +
           (C66726 * C5231 - (C66727 * C5225 + C66728 * C5230) +
            C66729 * C5226 - (C63381 * C8752 + C139286 * C8758) * C5232 -
            (C63381 * C8755 + C139286 * C8761) * C5227) *
               C63380) *
              C139457 * C139403) *
         C139328) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139286 * C113) * C5913 +
            (C63381 * C116 + C139286 * C125) * C139300) *
               C63378 +
           (C68304 + C68305) * C63379 + C68314 * C63380) *
              C139457 * C10809 -
          (C71170 * C63380 + (C68843 + C68844) * C63379 +
           ((C63381 * C1777 + C139286 * C1790) * C139300 +
            (C63381 * C1767 + C139286 * C1778) * C5913) *
               C63378) *
              C139457 * C10810 +
          (((C63381 * C1768 + C139286 * C1780) * C5913 +
            (C63381 * C1783 + C139286 * C1792) * C139300) *
               C63378 +
           (C68857 + C68858) * C63379 + (C68859 + C68860) * C63380) *
              C139457 * C10811 -
          (((C63381 * C73225 + C139286 * C73227) * C139300 +
            (C63381 * C73224 + C139286 * C73226) * C5913) *
               C63380 +
           ((C63381 * C26833 + C139286 * C26837) * C139300 +
            (C63381 * C26831 + C139286 * C26835) * C5913) *
               C63379 +
           ((C63381 * C10818 + C139286 * C10824) * C139300 +
            (C63381 * C10815 + C139286 * C10821) * C5913) *
               C63378) *
              C139457 * C10812) *
         C139328) /
            (p * q * std::sqrt(p + q));
    d2eexy[72] +=
        (-std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139286 * C113) * C934 +
            (C63381 * C182 + C139286 * C188) * C823 - C63884 * C935 -
            C63997 * C824 + C63888 * C936 + C63998 * C825) *
               C63378 +
           (C63884 * C934 + C63997 * C823 - C63888 * C935 - C63998 * C824 +
            C63894 * C936 + C63999 * C825) *
               C63379 +
           (C63888 * C934 + C63998 * C823 - C63894 * C935 - C63999 * C824 +
            C68316 * C936 + C68374 * C825) *
               C63380) *
              C139457 * C139300 * C9466 +
          ((C66724 * C935 -
            ((C63381 * C1873 + C139286 * C1881) * C823 +
             (C63381 * C1767 + C139286 * C1778) * C934) +
            C66844 * C824 - C66728 * C936 - C66845 * C825) *
               C63378 +
           (C66728 * C935 - (C66844 * C823 + C66724 * C934) + C66845 * C824 -
            C71175 * C936 - C71257 * C825) *
               C63379 +
           (C71175 * C935 - (C66845 * C823 + C66728 * C934) + C71257 * C824 -
            (C63381 * C71165 + C139286 * C71167) * C936 -
            (C63381 * C71252 + C139286 * C71253) * C825) *
               C63380) *
              C139457 * C139300 * C139403)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * (((((C63381 * C107 + C139286 * C113) * C181 +
                                 (C63381 * C182 + C139286 * C188) * C139328) *
                                    C63378 +
                                (C63884 * C181 + C63997 * C139328) * C63379 +
                                (C63888 * C181 + C63998 * C139328) * C63380) *
                                   C139457 * C5225 -
                               ((C64001 * C139328 + C63890 * C181) * C63380 +
                                (C64000 * C139328 + C63886 * C181) * C63379 +
                                ((C63381 * C183 + C139286 * C189) * C139328 +
                                 (C63381 * C108 + C139286 * C114) * C181) *
                                    C63378) *
                                   C139457 * C5226 +
                               (((C63381 * C109 + C139286 * C115) * C181 +
                                 (C63381 * C184 + C139286 * C190) * C139328) *
                                    C63378 +
                                (C65320 * C181 + C65406 * C139328) * C63379 +
                                (C65322 * C181 + C65407 * C139328) * C63380) *
                                   C139457 * C5227) *
                                  C9466 +
                              ((((C63381 * C1764 + C139286 * C1772) * C181 +
                                 (C63381 * C1870 + C139286 * C1878) * C139328) *
                                    C63378 +
                                (C66722 * C181 + C66846 * C139328) * C63379 +
                                (C66726 * C181 + C66847 * C139328) * C63380) *
                                   C139457 * C5226 -
                               ((C66845 * C139328 + C66728 * C181) * C63380 +
                                (C66844 * C139328 + C66724 * C181) * C63379 +
                                ((C63381 * C1873 + C139286 * C1881) * C139328 +
                                 (C63381 * C1767 + C139286 * C1778) * C181) *
                                    C63378) *
                                   C139457 * C5225 -
                               (((C63381 * C8838 + C139286 * C8841) * C139328 +
                                 (C63381 * C8752 + C139286 * C8758) * C181) *
                                    C63380 +
                                ((C63381 * C4339 + C139286 * C4343) * C139328 +
                                 (C63381 * C4225 + C139286 * C4229) * C181) *
                                    C63379 +
                                ((C63381 * C1871 + C139286 * C1879) * C139328 +
                                 (C63381 * C1765 + C139286 * C1773) * C181) *
                                    C63378) *
                                   C139457 * C5227) *
                                  C139403)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139286 * C113) * C181 +
            (C63381 * C182 + C139286 * C188) * C139328) *
               C63378 +
           (C63884 * C181 + C63997 * C139328) * C63379 +
           (C63888 * C181 + C63998 * C139328) * C63380) *
              C139457 * C139300 * C10809 -
          ((C66845 * C139328 + C66728 * C181) * C63380 +
           (C66844 * C139328 + C66724 * C181) * C63379 +
           ((C63381 * C1873 + C139286 * C1881) * C139328 +
            (C63381 * C1767 + C139286 * C1778) * C181) *
               C63378) *
              C139457 * C139300 * C10810 +
          (((C63381 * C1768 + C139286 * C1780) * C181 +
            (C63381 * C1874 + C139286 * C1882) * C139328) *
               C63378 +
           (C68853 * C181 + C68941 * C139328) * C63379 +
           (C68855 * C181 + C68942 * C139328) * C63380) *
              C139457 * C139300 * C10811 -
          (((C63381 * C73278 + C139286 * C73279) * C139328 +
            (C63381 * C73224 + C139286 * C73226) * C181) *
               C63380 +
           ((C63381 * C26905 + C139286 * C26907) * C139328 +
            (C63381 * C26831 + C139286 * C26835) * C181) *
               C63379 +
           ((C63381 * C10877 + C139286 * C10880) * C139328 +
            (C63381 * C10815 + C139286 * C10821) * C181) *
               C63378) *
              C139457 * C139300 * C10812)) /
            (p * q * std::sqrt(p + q));
    d2eexz[72] +=
        (-std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139286 * C113) * C9616 +
            (C63381 * C245 + C139286 * C251) * C9466 -
            (C63381 * C1767 + C139286 * C1778) * C9617 -
            (C63381 * C1965 + C139286 * C1973) * C139403) *
               C63378 +
           (C72708 + C72709 - C72710 - C72711) * C63379 + C72722 * C63380) *
              C139457 * C823 +
          ((C72710 - (C72709 + C72708) + C72711) * C63378 +
           (C72714 - (C72713 + C72712) + C72715) * C63379 +
           (C72716 - (C72717 + C72718) + C72719) * C63380) *
              C139457 * C824 +
          (C72722 * C63378 + (C72718 + C72717 - C72716 - C72719) * C63379 +
           (C68316 * C9616 + C68431 * C9466 -
            (C63381 * C71165 + C139286 * C71167) * C9617 -
            (C63381 * C71331 + C139286 * C71332) * C139403) *
               C63380) *
              C139457 * C825) *
         C139300) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139286 * C113) * C9616 +
            (C63381 * C245 + C139286 * C251) * C9466 -
            (C63381 * C1767 + C139286 * C1778) * C9617 -
            (C63381 * C1965 + C139286 * C1973) * C139403) *
               C63378 +
           (C63884 * C9616 + C64095 * C9466 - C66724 * C9617 -
            C66966 * C139403) *
               C63379 +
           (C63888 * C9616 + C64096 * C9466 - C66728 * C9617 -
            C66967 * C139403) *
               C63380) *
              C139457 * C139328 * C5225 +
          (((C63381 * C1764 + C139286 * C1772) * C9617 -
            ((C63381 * C246 + C139286 * C252) * C9466 +
             (C63381 * C108 + C139286 * C114) * C9616) +
            (C63381 * C1964 + C139286 * C1972) * C139403) *
               C63378 +
           (C66722 * C9617 - (C64098 * C9466 + C63886 * C9616) +
            C66968 * C139403) *
               C63379 +
           (C66726 * C9617 - (C64099 * C9466 + C63890 * C9616) +
            C66969 * C139403) *
               C63380) *
              C139457 * C139328 * C5226 +
          (((C63381 * C109 + C139286 * C115) * C9616 +
            (C63381 * C247 + C139286 * C253) * C9466 -
            (C63381 * C1765 + C139286 * C1773) * C9617 -
            (C63381 * C1963 + C139286 * C1971) * C139403) *
               C63378 +
           (C65320 * C9616 + C65488 * C9466 -
            (C63381 * C4225 + C139286 * C4229) * C9617 -
            (C63381 * C4445 + C139286 * C4449) * C139403) *
               C63379 +
           (C65322 * C9616 + C65489 * C9466 -
            (C63381 * C8752 + C139286 * C8758) * C9617 -
            (C63381 * C8918 + C139286 * C8921) * C139403) *
               C63380) *
              C139457 * C139328 * C5227)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C63381 * C107 + C139286 * C113) * C10931 +
           (C63381 * C245 + C139286 * C251) * C10809 -
           (C63381 * C1767 + C139286 * C1778) * C10932 -
           (C63381 * C1965 + C139286 * C1973) * C10810 +
           (C63381 * C1768 + C139286 * C1780) * C10933 +
           (C63381 * C1966 + C139286 * C1974) * C10811 -
           (C63381 * C10815 + C139286 * C10821) * C10934 -
           (C63381 * C10937 + C139286 * C10940) * C10812) *
              C63378 +
          (C63884 * C10931 + C64095 * C10809 - C66724 * C10932 -
           C66966 * C10810 + C68853 * C10933 + C69033 * C10811 -
           (C63381 * C26831 + C139286 * C26835) * C10934 -
           (C63381 * C26975 + C139286 * C26977) * C10812) *
              C63379 +
          (C63888 * C10931 + C64096 * C10809 - C66728 * C10932 -
           C66967 * C10810 + C68855 * C10933 + C69034 * C10811 -
           (C63381 * C73224 + C139286 * C73226) * C10934 -
           (C63381 * C73330 + C139286 * C73331) * C10812) *
              C63380) *
         C139457 * C139328 * C139300) /
            (p * q * std::sqrt(p + q));
    d2eeyx[72] += (-std::pow(Pi, 2.5) *
                   ((((C63532 * C107 + C63378 * C308 + C63533 * C831 +
                       C63379 * C1118 + C63534 * C832 + C63380 * C1121) *
                          C5913 +
                      (C63532 * C116 + C63378 * C314 + C63533 * C841 +
                       C63379 * C1125 + C63534 * C847 + C63380 * C1129) *
                          C139300) *
                         C139457 * C139286 * C9466 -
                     ((C63534 * C8757 + C63380 * C9003 + C63533 * C4230 +
                       C63379 * C4553 + C63532 * C1777 + C63378 * C2061) *
                          C139300 +
                      (C63534 * C8754 + C63380 * C9000 + C63533 * C4223 +
                       C63379 * C4549 + C63532 * C1767 + C63378 * C2054) *
                          C5913) *
                         C139457 * C139286 * C139403) *
                        C823 +
                    (((C63532 * C4223 + C63378 * C4549 + C63533 * C8754 +
                       C63379 * C9000 + C63534 * C24129 + C63380 * C24463) *
                          C5913 +
                      (C63532 * C4230 + C63378 * C4553 + C63533 * C8757 +
                       C63379 * C9003 + C63534 * C24131 + C63380 * C24465) *
                          C139300) *
                         C139457 * C139286 * C139403 -
                     ((C63534 * C5919 + C63380 * C6097 + C63533 * C847 +
                       C63379 * C1129 + C63532 * C841 + C63378 * C1125) *
                          C139300 +
                      (C63534 * C5916 + C63380 * C6094 + C63533 * C832 +
                       C63379 * C1121 + C63532 * C831 + C63378 * C1118) *
                          C5913) *
                         C139457 * C139286 * C9466) *
                        C824 +
                    (((C63532 * C832 + C63378 * C1121 + C63533 * C5916 +
                       C63379 * C6094 + C63534 * C20371 + C63380 * C20609) *
                          C5913 +
                      (C63532 * C847 + C63378 * C1129 + C63533 * C5919 +
                       C63379 * C6097 + C63534 * C20373 + C63380 * C20611) *
                          C139300) *
                         C139457 * C139286 * C9466 -
                     ((C63534 * C71166 + C63380 * C71418 + C63533 * C24131 +
                       C63379 * C24465 + C63532 * C8757 + C63378 * C9003) *
                          C139300 +
                      (C63534 * C71165 + C63380 * C71417 + C63533 * C24129 +
                       C63379 * C24463 + C63532 * C8754 + C63378 * C9000) *
                          C5913) *
                         C139457 * C139286 * C139403) *
                        C825)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::pow(Pi, 2.5) *
                   (((C63532 * C107 + C63378 * C308 + C63533 * C831 +
                      C63379 * C1118 + C63534 * C832 + C63380 * C1121) *
                         C5230 +
                     (C63532 * C116 + C63378 * C314 + C63533 * C841 +
                      C63379 * C1125 + C63534 * C847 + C63380 * C1129) *
                         C5225 -
                     (C63534 * C833 + C63380 * C1122 + C63533 * C828 +
                      C63379 * C1117 + C63532 * C108 + C63378 * C309) *
                         C5231 -
                     (C63534 * C848 + C63380 * C1130 + C63533 * C840 +
                      C63379 * C1126 + C63532 * C117 + C63378 * C315) *
                         C5226 +
                     (C63532 * C109 + C63378 * C310 + C63533 * C829 +
                      C63379 * C1119 + C63534 * C834 + C63380 * C1123) *
                         C5232 +
                     (C63532 * C118 + C63378 * C316 + C63533 * C839 +
                      C63379 * C1127 + C63534 * C849 + C63380 * C1131) *
                         C5227) *
                        C139457 * C139286 * C9466 +
                    ((C63532 * C1764 + C63378 * C2053 + C63533 * C4224 +
                      C63379 * C4550 + C63534 * C8753 + C63380 * C8999) *
                         C5231 -
                     ((C63534 * C8757 + C63380 * C9003 + C63533 * C4230 +
                       C63379 * C4553 + C63532 * C1777 + C63378 * C2061) *
                          C5225 +
                      (C63534 * C8754 + C63380 * C9000 + C63533 * C4223 +
                       C63379 * C4549 + C63532 * C1767 + C63378 * C2054) *
                          C5230) +
                     (C63532 * C1776 + C63378 * C2062 + C63533 * C4231 +
                      C63379 * C4554 + C63534 * C8756 + C63380 * C9002) *
                         C5226 -
                     (C63534 * C8752 + C63380 * C8998 + C63533 * C4225 +
                      C63379 * C4551 + C63532 * C1765 + C63378 * C2055) *
                         C5232 -
                     (C63534 * C8755 + C63380 * C9001 + C63533 * C4232 +
                      C63379 * C4555 + C63532 * C1775 + C63378 * C2063) *
                         C5227) *
                        C139457 * C139286 * C139403) *
                   C139328) /
                      (p * q * std::sqrt(p + q)) +
                  (2 * std::pow(Pi, 2.5) *
                   (((C63532 * C107 + C63378 * C308 + C63533 * C831 +
                      C63379 * C1118 + C63534 * C832 + C63380 * C1121) *
                         C5913 +
                     (C63532 * C116 + C63378 * C314 + C63533 * C841 +
                      C63379 * C1125 + C63534 * C847 + C63380 * C1129) *
                         C139300) *
                        C139457 * C139286 * C10809 -
                    ((C63534 * C8757 + C63380 * C9003 + C63533 * C4230 +
                      C63379 * C4553 + C63532 * C1777 + C63378 * C2061) *
                         C139300 +
                     (C63534 * C8754 + C63380 * C9000 + C63533 * C4223 +
                      C63379 * C4549 + C63532 * C1767 + C63378 * C2054) *
                         C5913) *
                        C139457 * C139286 * C10810 +
                    ((C63532 * C1768 + C63378 * C2057 + C63533 * C6442 +
                      C63379 * C6688 + C63534 * C21079 + C63380 * C21413) *
                         C5913 +
                     (C63532 * C1783 + C63378 * C2065 + C63533 * C6445 +
                      C63379 * C6691 + C63534 * C21081 + C63380 * C21415) *
                         C139300) *
                        C139457 * C139286 * C10811 -
                    ((C63534 * C73225 + C63380 * C73383 + C63533 * C26833 +
                      C63379 * C27047 + C63532 * C10818 + C63378 * C10996) *
                         C139300 +
                     (C63534 * C73224 + C63380 * C73382 + C63533 * C26831 +
                      C63379 * C27045 + C63532 * C10815 + C63378 * C10993) *
                         C5913) *
                        C139457 * C139286 * C10812) *
                   C139328) /
                      (p * q * std::sqrt(p + q));
    d2eeyy[72] += (-std::pow(Pi, 2.5) *
                   (((C63532 * C107 + C63378 * C308 + C63533 * C831 +
                      C63379 * C1118 + C63534 * C832 + C63380 * C1121) *
                         C934 +
                     (C63532 * C182 + C63378 * C394 + C63533 * C939 +
                      C63379 * C1231 + C63534 * C940 + C63380 * C1232) *
                         C823 -
                     (C63534 * C5916 + C63380 * C6094 + C63533 * C832 +
                      C63379 * C1121 + C63532 * C831 + C63378 * C1118) *
                         C935 -
                     (C63534 * C5982 + C63380 * C6148 + C63533 * C940 +
                      C63379 * C1232 + C63532 * C939 + C63378 * C1231) *
                         C824 +
                     (C63532 * C832 + C63378 * C1121 + C63533 * C5916 +
                      C63379 * C6094 + C63534 * C20371 + C63380 * C20609) *
                         C936 +
                     (C63532 * C940 + C63378 * C1232 + C63533 * C5982 +
                      C63379 * C6148 + C63534 * C20457 + C63380 * C20678) *
                         C825) *
                        C139457 * C139286 * C139300 * C9466 +
                    ((C63532 * C4223 + C63378 * C4549 + C63533 * C8754 +
                      C63379 * C9000 + C63534 * C24129 + C63380 * C24463) *
                         C935 -
                     ((C63534 * C8840 + C63380 * C9078 + C63533 * C4337 +
                       C63379 * C4667 + C63532 * C1873 + C63378 * C2170) *
                          C823 +
                      (C63534 * C8754 + C63380 * C9000 + C63533 * C4223 +
                       C63379 * C4549 + C63532 * C1767 + C63378 * C2054) *
                          C934) +
                     (C63532 * C4337 + C63378 * C4667 + C63533 * C8840 +
                      C63379 * C9078 + C63534 * C24247 + C63380 * C24564) *
                         C824 -
                     (C63534 * C71165 + C63380 * C71417 + C63533 * C24129 +
                      C63379 * C24463 + C63532 * C8754 + C63378 * C9000) *
                         C936 -
                     (C63534 * C71252 + C63380 * C71493 + C63533 * C24247 +
                      C63379 * C24564 + C63532 * C8840 + C63378 * C9078) *
                         C825) *
                        C139457 * C139286 * C139300 * C139403)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::pow(Pi, 2.5) *
                   ((((C63532 * C107 + C63378 * C308 + C63533 * C831 +
                       C63379 * C1118 + C63534 * C832 + C63380 * C1121) *
                          C181 +
                      (C63532 * C182 + C63378 * C394 + C63533 * C939 +
                       C63379 * C1231 + C63534 * C940 + C63380 * C1232) *
                          C139328) *
                         C139457 * C139286 * C5225 -
                     ((C63534 * C941 + C63380 * C1234 + C63533 * C938 +
                       C63379 * C1233 + C63532 * C183 + C63378 * C395) *
                          C139328 +
                      (C63534 * C833 + C63380 * C1122 + C63533 * C828 +
                       C63379 * C1117 + C63532 * C108 + C63378 * C309) *
                          C181) *
                         C139457 * C139286 * C5226 +
                     ((C63532 * C109 + C63378 * C310 + C63533 * C829 +
                       C63379 * C1119 + C63534 * C834 + C63380 * C1123) *
                          C181 +
                      (C63532 * C184 + C63378 * C396 + C63533 * C937 +
                       C63379 * C1235 + C63534 * C942 + C63380 * C1236) *
                          C139328) *
                         C139457 * C139286 * C5227) *
                        C9466 +
                    (((C63532 * C1764 + C63378 * C2053 + C63533 * C4224 +
                       C63379 * C4550 + C63534 * C8753 + C63380 * C8999) *
                          C181 +
                      (C63532 * C1870 + C63378 * C2167 + C63533 * C4338 +
                       C63379 * C4668 + C63534 * C8839 + C63380 * C9079) *
                          C139328) *
                         C139457 * C139286 * C5226 -
                     ((C63534 * C8840 + C63380 * C9078 + C63533 * C4337 +
                       C63379 * C4667 + C63532 * C1873 + C63378 * C2170) *
                          C139328 +
                      (C63534 * C8754 + C63380 * C9000 + C63533 * C4223 +
                       C63379 * C4549 + C63532 * C1767 + C63378 * C2054) *
                          C181) *
                         C139457 * C139286 * C5225 -
                     ((C63534 * C8838 + C63380 * C9080 + C63533 * C4339 +
                       C63379 * C4669 + C63532 * C1871 + C63378 * C2168) *
                          C139328 +
                      (C63534 * C8752 + C63380 * C8998 + C63533 * C4225 +
                       C63379 * C4551 + C63532 * C1765 + C63378 * C2055) *
                          C181) *
                         C139457 * C139286 * C5227) *
                        C139403)) /
                      (p * q * std::sqrt(p + q)) +
                  (2 * std::pow(Pi, 2.5) *
                   (((C63532 * C107 + C63378 * C308 + C63533 * C831 +
                      C63379 * C1118 + C63534 * C832 + C63380 * C1121) *
                         C181 +
                     (C63532 * C182 + C63378 * C394 + C63533 * C939 +
                      C63379 * C1231 + C63534 * C940 + C63380 * C1232) *
                         C139328) *
                        C139457 * C139286 * C139300 * C10809 -
                    ((C63534 * C8840 + C63380 * C9078 + C63533 * C4337 +
                      C63379 * C4667 + C63532 * C1873 + C63378 * C2170) *
                         C139328 +
                     (C63534 * C8754 + C63380 * C9000 + C63533 * C4223 +
                      C63379 * C4549 + C63532 * C1767 + C63378 * C2054) *
                         C181) *
                        C139457 * C139286 * C139300 * C10810 +
                    ((C63532 * C1768 + C63378 * C2057 + C63533 * C6442 +
                      C63379 * C6688 + C63534 * C21079 + C63380 * C21413) *
                         C181 +
                     (C63532 * C1874 + C63378 * C2171 + C63533 * C6528 +
                      C63379 * C6766 + C63534 * C21197 + C63380 * C21514) *
                         C139328) *
                        C139457 * C139286 * C139300 * C10811 -
                    ((C63534 * C73278 + C63380 * C73434 + C63533 * C26905 +
                      C63379 * C27115 + C63532 * C10877 + C63378 * C11049) *
                         C139328 +
                     (C63534 * C73224 + C63380 * C73382 + C63533 * C26831 +
                      C63379 * C27045 + C63532 * C10815 + C63378 * C10993) *
                         C181) *
                        C139457 * C139286 * C139300 * C10812)) /
                      (p * q * std::sqrt(p + q));
    d2eeyz[72] += (-std::pow(Pi, 2.5) *
                   (((C63532 * C107 + C63378 * C308 + C63533 * C831 +
                      C63379 * C1118 + C63534 * C832 + C63380 * C1121) *
                         C9616 +
                     (C63532 * C245 + C63378 * C474 + C63533 * C1029 +
                      C63379 * C1339 + C63534 * C1030 + C63380 * C1340) *
                         C9466 -
                     (C63534 * C8754 + C63380 * C9000 + C63533 * C4223 +
                      C63379 * C4549 + C63532 * C1767 + C63378 * C2054) *
                         C9617 -
                     (C63534 * C8920 + C63380 * C9155 + C63533 * C4443 +
                      C63379 * C4783 + C63532 * C1965 + C63378 * C2269) *
                         C139403) *
                        C139457 * C139286 * C823 +
                    ((C63532 * C4223 + C63378 * C4549 + C63533 * C8754 +
                      C63379 * C9000 + C63534 * C24129 + C63380 * C24463) *
                         C9617 -
                     ((C63534 * C6038 + C63380 * C6203 + C63533 * C1030 +
                       C63379 * C1340 + C63532 * C1029 + C63378 * C1339) *
                          C9466 +
                      (C63534 * C5916 + C63380 * C6094 + C63533 * C832 +
                       C63379 * C1121 + C63532 * C831 + C63378 * C1118) *
                          C9616) +
                     (C63532 * C4443 + C63378 * C4783 + C63533 * C8920 +
                      C63379 * C9155 + C63534 * C24355 + C63380 * C24664) *
                         C139403) *
                        C139457 * C139286 * C824 +
                    ((C63532 * C832 + C63378 * C1121 + C63533 * C5916 +
                      C63379 * C6094 + C63534 * C20371 + C63380 * C20609) *
                         C9616 +
                     (C63532 * C1030 + C63378 * C1340 + C63533 * C6038 +
                      C63379 * C6203 + C63534 * C20533 + C63380 * C20747) *
                         C9466 -
                     (C63534 * C71165 + C63380 * C71417 + C63533 * C24129 +
                      C63379 * C24463 + C63532 * C8754 + C63378 * C9000) *
                         C9617 -
                     (C63534 * C71331 + C63380 * C71568 + C63533 * C24355 +
                      C63379 * C24664 + C63532 * C8920 + C63378 * C9155) *
                         C139403) *
                        C139457 * C139286 * C825) *
                   C139300) /
                      (p * q * std::sqrt(p + q)) -
                  (std::pow(Pi, 2.5) *
                   (((C63532 * C107 + C63378 * C308 + C63533 * C831 +
                      C63379 * C1118 + C63534 * C832 + C63380 * C1121) *
                         C9616 +
                     (C63532 * C245 + C63378 * C474 + C63533 * C1029 +
                      C63379 * C1339 + C63534 * C1030 + C63380 * C1340) *
                         C9466 -
                     (C63534 * C8754 + C63380 * C9000 + C63533 * C4223 +
                      C63379 * C4549 + C63532 * C1767 + C63378 * C2054) *
                         C9617 -
                     (C63534 * C8920 + C63380 * C9155 + C63533 * C4443 +
                      C63379 * C4783 + C63532 * C1965 + C63378 * C2269) *
                         C139403) *
                        C139457 * C139286 * C139328 * C5225 +
                    ((C63532 * C1764 + C63378 * C2053 + C63533 * C4224 +
                      C63379 * C4550 + C63534 * C8753 + C63380 * C8999) *
                         C9617 -
                     ((C63534 * C1031 + C63380 * C1341 + C63533 * C1028 +
                       C63379 * C1338 + C63532 * C246 + C63378 * C475) *
                          C9466 +
                      (C63534 * C833 + C63380 * C1122 + C63533 * C828 +
                       C63379 * C1117 + C63532 * C108 + C63378 * C309) *
                          C9616) +
                     (C63532 * C1964 + C63378 * C2271 + C63533 * C4444 +
                      C63379 * C4784 + C63534 * C8919 + C63380 * C9156) *
                         C139403) *
                        C139457 * C139286 * C139328 * C5226 +
                    ((C63532 * C109 + C63378 * C310 + C63533 * C829 +
                      C63379 * C1119 + C63534 * C834 + C63380 * C1123) *
                         C9616 +
                     (C63532 * C247 + C63378 * C476 + C63533 * C1027 +
                      C63379 * C1337 + C63534 * C1032 + C63380 * C1342) *
                         C9466 -
                     (C63534 * C8752 + C63380 * C8998 + C63533 * C4225 +
                      C63379 * C4551 + C63532 * C1765 + C63378 * C2055) *
                         C9617 -
                     (C63534 * C8918 + C63380 * C9157 + C63533 * C4445 +
                      C63379 * C4785 + C63532 * C1963 + C63378 * C2273) *
                         C139403) *
                        C139457 * C139286 * C139328 * C5227)) /
                      (p * q * std::sqrt(p + q)) +
                  (2 * std::pow(Pi, 2.5) *
                   ((C63532 * C107 + C63378 * C308 + C63533 * C831 +
                     C63379 * C1118 + C63534 * C832 + C63380 * C1121) *
                        C10931 +
                    (C63532 * C245 + C63378 * C474 + C63533 * C1029 +
                     C63379 * C1339 + C63534 * C1030 + C63380 * C1340) *
                        C10809 -
                    (C63534 * C8754 + C63380 * C9000 + C63533 * C4223 +
                     C63379 * C4549 + C63532 * C1767 + C63378 * C2054) *
                        C10932 -
                    (C63534 * C8920 + C63380 * C9155 + C63533 * C4443 +
                     C63379 * C4783 + C63532 * C1965 + C63378 * C2269) *
                        C10810 +
                    (C63532 * C1768 + C63378 * C2057 + C63533 * C6442 +
                     C63379 * C6688 + C63534 * C21079 + C63380 * C21413) *
                        C10933 +
                    (C63532 * C1966 + C63378 * C2270 + C63533 * C6608 +
                     C63379 * C6843 + C63534 * C21305 + C63380 * C21614) *
                        C10811 -
                    (C63534 * C73224 + C63380 * C73382 + C63533 * C26831 +
                     C63379 * C27045 + C63532 * C10815 + C63378 * C10993) *
                        C10934 -
                    (C63534 * C73330 + C63380 * C73485 + C63533 * C26975 +
                     C63379 * C27182 + C63532 * C10937 + C63378 * C11100) *
                        C10812) *
                   C139457 * C139286 * C139328 * C139300) /
                      (p * q * std::sqrt(p + q));
    d2eezx[72] +=
        (-std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139457 * C555) * C5913 +
             (C554 * C116 + C139457 * C561) * C139300) *
                C139286 * C63378 +
            (C20819 + C20820) * C139286 * C63379 + C68645 * C63380) *
               C9466 -
           (C71651 * C63380 + (C21721 + C21722) * C139286 * C63379 +
            ((C554 * C1777 + C139457 * C2383) * C139300 +
             (C554 * C1767 + C139457 * C2376) * C5913) *
                C139286 * C63378) *
               C139403) *
              C823 +
          (((C21722 + C21721) * C139286 * C63378 +
            (C24777 + C24778) * C139286 * C63379 +
            (C71654 + C71655) * C139286 * C63380) *
               C139403 -
           (C68646 * C63380 + (C20825 + C20826) * C139286 * C63379 +
            (C20820 + C20819) * C139286 * C63378) *
               C9466) *
              C824 +
          ((C68645 * C63378 + (C20835 + C20836) * C139286 * C63379 +
            (C68649 + C68650) * C139286 * C63380) *
               C9466 -
           (((C554 * C71166 + C139457 * C71644) * C139300 +
             (C554 * C71165 + C139457 * C71643) * C5913) *
                C139286 * C63380 +
            (C71655 + C71654) * C139286 * C63379 + C71651 * C63378) *
               C139403) *
              C825)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C554 * C107 + C139457 * C555) * C5230 +
            (C554 * C116 + C139457 * C561) * C5225 - C584 * C5231 -
            C585 * C5226 + C586 * C5232 + C587 * C5227) *
               C139286 * C63378 +
           (C20089 + C20090 - C20091 - C20092 + C20093 + C20094) * C139286 *
               C63379 +
           (C68096 + C68097 - C68098 - C68099 + C68100 + C68101) * C139286 *
               C63380) *
              C9466 +
          ((C2408 * C5231 -
            ((C554 * C1777 + C139457 * C2383) * C5225 +
             (C554 * C1767 + C139457 * C2376) * C5230) +
            C2409 * C5226 - C2410 * C5232 - C2411 * C5227) *
               C139286 * C63378 +
           (C4916 * C5231 - (C19107 * C5225 + C19108 * C5230) + C4917 * C5226 -
            C4918 * C5232 - C4919 * C5227) *
               C139286 * C63379 +
           (C19109 * C5231 - (C24776 * C5225 + C24775 * C5230) +
            C19110 * C5226 - (C554 * C8752 + C139457 * C9232) * C5232 -
            (C554 * C8755 + C139457 * C9235) * C5227) *
               C139286 * C63380) *
              C139403) *
         C139328) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C139457 * C555) * C5913 +
            (C554 * C116 + C139457 * C561) * C139300) *
               C139286 * C63378 +
           (C20819 + C20820) * C139286 * C63379 + C68645 * C63380) *
              C10809 -
          (C71651 * C63380 + (C21721 + C21722) * C139286 * C63379 +
           ((C554 * C1777 + C139457 * C2383) * C139300 +
            (C554 * C1767 + C139457 * C2376) * C5913) *
               C139286 * C63378) *
              C10810 +
          (((C554 * C1768 + C139457 * C2379) * C5913 +
            (C554 * C1783 + C139457 * C2387) * C139300) *
               C139286 * C63378 +
           (C21731 + C21732) * C139286 * C63379 +
           (C69345 + C69346) * C139286 * C63380) *
              C10811 -
          (((C554 * C73225 + C139457 * C73537) * C139300 +
            (C554 * C73224 + C139457 * C73536) * C5913) *
               C139286 * C63380 +
           ((C554 * C26833 + C139457 * C27253) * C139300 +
            (C554 * C26831 + C139457 * C27251) * C5913) *
               C139286 * C63379 +
           ((C554 * C10818 + C139457 * C11158) * C139300 +
            (C554 * C10815 + C139457 * C11155) * C5913) *
               C139286 * C63378) *
              C10812) *
         C139328) /
            (p * q * std::sqrt(p + q));
    d2eezy[72] +=
        (-std::pow(Pi, 2.5) *
         ((((C554 * C107 + C139457 * C555) * C934 +
            (C554 * C182 + C139457 * C641) * C823 - C15060 * C935 -
            C15179 * C824 + C15063 * C936 + C15180 * C825) *
               C139286 * C63378 +
           (C15060 * C934 + C15179 * C823 - C15063 * C935 - C15180 * C824 +
            C20833 * C936 + C20907 * C825) *
               C139286 * C63379 +
           (C15063 * C934 + C15180 * C823 - C20833 * C935 - C20907 * C824 +
            C68647 * C936 + C68704 * C825) *
               C139286 * C63380) *
              C139300 * C9466 +
          ((C19108 * C935 -
            ((C554 * C1873 + C139457 * C2492) * C823 +
             (C554 * C1767 + C139457 * C2376) * C934) +
            C19250 * C824 - C24775 * C936 - C24881 * C825) *
               C139286 * C63378 +
           (C24775 * C935 - (C19250 * C823 + C19108 * C934) + C24881 * C824 -
            C71652 * C936 - C71733 * C825) *
               C139286 * C63379 +
           (C71652 * C935 - (C24881 * C823 + C24775 * C934) + C71733 * C824 -
            (C554 * C71165 + C139457 * C71643) * C936 -
            (C554 * C71252 + C139457 * C71729) * C825) *
               C139286 * C63380) *
              C139300 * C139403)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139457 * C555) * C181 +
             (C554 * C182 + C139457 * C641) * C139328) *
                C139286 * C63378 +
            (C15060 * C181 + C15179 * C139328) * C139286 * C63379 +
            (C15063 * C181 + C15180 * C139328) * C139286 * C63380) *
               C5225 -
           ((C1579 * C139328 + C1476 * C181) * C139286 * C63380 +
            (C14135 + C14134) * C139286 * C63379 +
            (C664 + C648) * C139286 * C63378) *
               C5226 +
           (C668 * C139286 * C63378 + (C14137 + C14136) * C139286 * C63379 +
            (C1478 * C181 + C1581 * C139328) * C139286 * C63380) *
               C5227) *
              C9466 +
          (((C2498 + C2514) * C139286 * C63378 +
            (C16138 + C16139) * C139286 * C63379 +
            (C19109 * C181 + C19251 * C139328) * C139286 * C63380) *
               C5226 -
           ((C24881 * C139328 + C24775 * C181) * C139286 * C63380 +
            (C19250 * C139328 + C19108 * C181) * C139286 * C63379 +
            ((C554 * C1873 + C139457 * C2492) * C139328 +
             (C554 * C1767 + C139457 * C2376) * C181) *
                C139286 * C63378) *
               C5225 -
           (((C554 * C8838 + C139457 * C9314) * C139328 +
             (C554 * C8752 + C139457 * C9232) * C181) *
                C139286 * C63380 +
            (C18012 + C18011) * C139286 * C63379 + C4030 * C139286 * C63378) *
               C5227) *
              C139403)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C139457 * C555) * C181 +
            (C554 * C182 + C139457 * C641) * C139328) *
               C139286 * C63378 +
           (C15060 * C181 + C15179 * C139328) * C139286 * C63379 +
           (C15063 * C181 + C15180 * C139328) * C139286 * C63380) *
              C139300 * C10809 -
          ((C24881 * C139328 + C24775 * C181) * C139286 * C63380 +
           (C19250 * C139328 + C19108 * C181) * C139286 * C63379 +
           ((C554 * C1873 + C139457 * C2492) * C139328 +
            (C554 * C1767 + C139457 * C2376) * C181) *
               C139286 * C63378) *
              C139300 * C10810 +
          (((C554 * C1768 + C139457 * C2379) * C181 +
            (C554 * C1874 + C139457 * C2493) * C139328) *
               C139286 * C63378 +
           (C21729 * C181 + C21835 * C139328) * C139286 * C63379 +
           (C69343 * C181 + C69424 * C139328) * C139286 * C63380) *
              C139300 * C10811 -
          (((C554 * C73278 + C139457 * C73588) * C139328 +
            (C554 * C73224 + C139457 * C73536) * C181) *
               C139286 * C63380 +
           ((C554 * C26905 + C139457 * C27321) * C139328 +
            (C554 * C26831 + C139457 * C27251) * C181) *
               C139286 * C63379 +
           ((C554 * C10877 + C139457 * C11211) * C139328 +
            (C554 * C10815 + C139457 * C11155) * C181) *
               C139286 * C63378) *
              C139300 * C10812)) /
            (p * q * std::sqrt(p + q));
    d2eezz[72] += (-std::pow(Pi, 2.5) *
                   ((((C554 * C107 + C139457 * C555) * C9616 +
                      (C554 * C245 + C139457 * C719) * C9466 -
                      (C554 * C1767 + C139457 * C2376) * C9617 -
                      (C554 * C1965 + C139457 * C2591) * C139403) *
                         C139286 * C63378 +
                     (C26753 + C26754 - C26755 - C26756) * C139286 * C63379 +
                     C73174 * C63380) *
                        C823 +
                    ((C26755 - (C26754 + C26753) + C26756) * C139286 * C63378 +
                     (C26757 - (C26758 + C26759) + C26760) * C139286 * C63379 +
                     (C73168 - (C73169 + C73170) + C73171) * C139286 * C63380) *
                        C824 +
                    (C73174 * C63378 +
                     (C73170 + C73169 - C73168 - C73171) * C139286 * C63379 +
                     (C68647 * C9616 + C68761 * C9466 -
                      (C554 * C71165 + C139457 * C71643) * C9617 -
                      (C554 * C71331 + C139457 * C71807) * C139403) *
                         C139286 * C63380) *
                        C825) *
                   C139300) /
                      (p * q * std::sqrt(p + q)) -
                  (std::pow(Pi, 2.5) *
                   ((((C554 * C107 + C139457 * C555) * C9616 +
                      (C554 * C245 + C139457 * C719) * C9466 -
                      (C554 * C1767 + C139457 * C2376) * C9617 -
                      (C554 * C1965 + C139457 * C2591) * C139403) *
                         C139286 * C63378 +
                     (C26753 + C26754 - C26755 - C26756) * C139286 * C63379 +
                     (C26759 + C26758 - C26757 - C26760) * C139286 * C63380) *
                        C139328 * C5225 +
                    ((C10081 - (C10080 + C10079) + C10082) * C139286 * C63378 +
                     C28566 * C139286 * C63379 +
                     (C26761 - (C26762 + C26763) + C26764) * C139286 * C63380) *
                        C139328 * C5226 +
                    (C10093 * C139286 * C63378 +
                     (C12162 + C12161 - C12160 - C12163) * C139286 * C63379 +
                     (C1478 * C9616 + C1683 * C9466 -
                      (C554 * C8752 + C139457 * C9232) * C9617 -
                      (C554 * C8918 + C139457 * C9391) * C139403) *
                         C139286 * C63380) *
                        C139328 * C5227)) /
                      (p * q * std::sqrt(p + q)) +
                  (2 * std::pow(Pi, 2.5) *
                   (((C554 * C107 + C139457 * C555) * C10931 +
                     (C554 * C245 + C139457 * C719) * C10809 -
                     (C554 * C1767 + C139457 * C2376) * C10932 -
                     (C554 * C1965 + C139457 * C2591) * C10810 +
                     (C554 * C1768 + C139457 * C2379) * C10933 +
                     (C554 * C1966 + C139457 * C2592) * C10811 -
                     (C554 * C10815 + C139457 * C11155) * C10934 -
                     (C554 * C10937 + C139457 * C11262) * C10812) *
                        C139286 * C63378 +
                    (C15060 * C10931 + C15294 * C10809 - C19108 * C10932 -
                     C19395 * C10810 + C21729 * C10933 + C21943 * C10811 -
                     (C554 * C26831 + C139457 * C27251) * C10934 -
                     (C554 * C26975 + C139457 * C27388) * C10812) *
                        C139286 * C63379 +
                    (C15063 * C10931 + C15295 * C10809 - C24775 * C10932 -
                     C24987 * C10810 + C69343 * C10933 + C69507 * C10811 -
                     (C554 * C73224 + C139457 * C73536) * C10934 -
                     (C554 * C73330 + C139457 * C73639) * C10812) *
                        C139286 * C63380) *
                   C139328 * C139300) /
                      (p * q * std::sqrt(p + q));
    d2eexx[73] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139286 * C113) * C137108 +
            (C63381 * C116 + C139286 * C125) * C139552 -
            (C63381 * C108 + C139286 * C114) * C137101 -
            (C63381 * C117 + C139286 * C126) * C139305) *
               C63378 +
           (C69583 + C69584 - C69585 - C69586) * C63379 + C69597 * C63380) *
              C139457 * C139593 +
          (((C63381 * C1764 + C139286 * C1772) * C137101 -
            ((C63381 * C1777 + C139286 * C1790) * C139552 +
             (C63381 * C1767 + C139286 * C1778) * C137108) +
            (C63381 * C1776 + C139286 * C1789) * C139305) *
               C63378 +
           (C70296 - (C70297 + C70298) + C70299) * C63379 +
           (C70300 - (C70301 + C70302) + C70303) * C63380) *
              C139457 * C139594 +
          (((C63381 * C1768 + C139286 * C1780) * C137108 +
            (C63381 * C1783 + C139286 * C1792) * C139552 -
            (C63381 * C1769 + C139286 * C1781) * C137101 -
            (C63381 * C1784 + C139286 * C1793) * C139305) *
               C63378 +
           (C68853 * C137108 + C68854 * C139552 -
            (C63381 * C6441 + C139286 * C6447) * C137101 -
            (C63381 * C6444 + C139286 * C6450) * C139305) *
               C63379 +
           (C68855 * C137108 + C68856 * C139552 -
            (C63381 * C21078 + C139286 * C21082) * C137101 -
            (C63381 * C21080 + C139286 * C21084) * C139305) *
               C63380) *
              C139457 * C12239) *
         C139328) /
        (p * q * std::sqrt(p + q));
    d2eexy[73] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C63381 * C107 + C139286 * C113) * C181 +
                       (C63381 * C182 + C139286 * C188) * C139328) *
                          C63378 +
                      (C63884 * C181 + C63997 * C139328) * C63379 +
                      (C63888 * C181 + C63998 * C139328) * C63380) *
                         C139457 * C139552 -
                     ((C64001 * C139328 + C63890 * C181) * C63380 +
                      (C64000 * C139328 + C63886 * C181) * C63379 +
                      ((C63381 * C183 + C139286 * C189) * C139328 +
                       (C63381 * C108 + C139286 * C114) * C181) *
                          C63378) *
                         C139457 * C139305) *
                        C139593 +
                    ((((C63381 * C1764 + C139286 * C1772) * C181 +
                       (C63381 * C1870 + C139286 * C1878) * C139328) *
                          C63378 +
                      (C66722 * C181 + C66846 * C139328) * C63379 +
                      (C66726 * C181 + C66847 * C139328) * C63380) *
                         C139457 * C139305 -
                     ((C66845 * C139328 + C66728 * C181) * C63380 +
                      (C66844 * C139328 + C66724 * C181) * C63379 +
                      ((C63381 * C1873 + C139286 * C1881) * C139328 +
                       (C63381 * C1767 + C139286 * C1778) * C181) *
                          C63378) *
                         C139457 * C139552) *
                        C139594 +
                    ((((C63381 * C1768 + C139286 * C1780) * C181 +
                       (C63381 * C1874 + C139286 * C1882) * C139328) *
                          C63378 +
                      (C68853 * C181 + C68941 * C139328) * C63379 +
                      (C68855 * C181 + C68942 * C139328) * C63380) *
                         C139457 * C139552 -
                     (((C63381 * C21196 + C139286 * C21198) * C139328 +
                       (C63381 * C21078 + C139286 * C21082) * C181) *
                          C63380 +
                      ((C63381 * C6527 + C139286 * C6530) * C139328 +
                       (C63381 * C6441 + C139286 * C6447) * C181) *
                          C63379 +
                      ((C63381 * C1875 + C139286 * C1883) * C139328 +
                       (C63381 * C1769 + C139286 * C1781) * C181) *
                          C63378) *
                         C139457 * C139305) *
                        C12239)) /
                  (p * q * std::sqrt(p + q));
    d2eexz[73] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139286 * C113) * C12388 +
            (C63381 * C245 + C139286 * C251) * C139593 -
            (C63381 * C1767 + C139286 * C1778) * C12389 -
            (C63381 * C1965 + C139286 * C1973) * C139594 +
            (C63381 * C1768 + C139286 * C1780) * C12390 +
            (C63381 * C1966 + C139286 * C1974) * C12239) *
               C63378 +
           (C63884 * C12388 + C64095 * C139593 - C66724 * C12389 -
            C66966 * C139594 + C68853 * C12390 + C69033 * C12239) *
               C63379 +
           (C63888 * C12388 + C64096 * C139593 - C66728 * C12389 -
            C66967 * C139594 + C68855 * C12390 + C69034 * C12239) *
               C63380) *
              C139457 * C139328 * C139552 +
          (((C63381 * C1764 + C139286 * C1772) * C12389 -
            ((C63381 * C246 + C139286 * C252) * C139593 +
             (C63381 * C108 + C139286 * C114) * C12388) +
            (C63381 * C1964 + C139286 * C1972) * C139594 -
            (C63381 * C1769 + C139286 * C1781) * C12390 -
            (C63381 * C1967 + C139286 * C1975) * C12239) *
               C63378 +
           (C66722 * C12389 - (C64098 * C139593 + C63886 * C12388) +
            C66968 * C139594 - (C63381 * C6441 + C139286 * C6447) * C12390 -
            (C63381 * C6607 + C139286 * C6610) * C12239) *
               C63379 +
           (C66726 * C12389 - (C64099 * C139593 + C63890 * C12388) +
            C66969 * C139594 - (C63381 * C21078 + C139286 * C21082) * C12390 -
            (C63381 * C21304 + C139286 * C21306) * C12239) *
               C63380) *
              C139457 * C139328 * C139305)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[73] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((C63532 * C107 + C63378 * C308 + C63533 * C831 +
                      C63379 * C1118 + C63534 * C832 + C63380 * C1121) *
                         C137108 +
                     (C63532 * C116 + C63378 * C314 + C63533 * C841 +
                      C63379 * C1125 + C63534 * C847 + C63380 * C1129) *
                         C139552 -
                     (C63534 * C833 + C63380 * C1122 + C63533 * C828 +
                      C63379 * C1117 + C63532 * C108 + C63378 * C309) *
                         C137101 -
                     (C63534 * C848 + C63380 * C1130 + C63533 * C840 +
                      C63379 * C1126 + C63532 * C117 + C63378 * C315) *
                         C139305) *
                        C139457 * C139286 * C139593 +
                    ((C63532 * C1764 + C63378 * C2053 + C63533 * C4224 +
                      C63379 * C4550 + C63534 * C8753 + C63380 * C8999) *
                         C137101 -
                     ((C63534 * C8757 + C63380 * C9003 + C63533 * C4230 +
                       C63379 * C4553 + C63532 * C1777 + C63378 * C2061) *
                          C139552 +
                      (C63534 * C8754 + C63380 * C9000 + C63533 * C4223 +
                       C63379 * C4549 + C63532 * C1767 + C63378 * C2054) *
                          C137108) +
                     (C63532 * C1776 + C63378 * C2062 + C63533 * C4231 +
                      C63379 * C4554 + C63534 * C8756 + C63380 * C9002) *
                         C139305) *
                        C139457 * C139286 * C139594 +
                    ((C63532 * C1768 + C63378 * C2057 + C63533 * C6442 +
                      C63379 * C6688 + C63534 * C21079 + C63380 * C21413) *
                         C137108 +
                     (C63532 * C1783 + C63378 * C2065 + C63533 * C6445 +
                      C63379 * C6691 + C63534 * C21081 + C63380 * C21415) *
                         C139552 -
                     (C63534 * C21078 + C63380 * C21412 + C63533 * C6441 +
                      C63379 * C6687 + C63532 * C1769 + C63378 * C2058) *
                         C137101 -
                     (C63534 * C21080 + C63380 * C21414 + C63533 * C6444 +
                      C63379 * C6690 + C63532 * C1784 + C63378 * C2066) *
                         C139305) *
                        C139457 * C139286 * C12239) *
                   C139328) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[73] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C63532 * C107 + C63378 * C308 + C63533 * C831 +
                       C63379 * C1118 + C63534 * C832 + C63380 * C1121) *
                          C181 +
                      (C63532 * C182 + C63378 * C394 + C63533 * C939 +
                       C63379 * C1231 + C63534 * C940 + C63380 * C1232) *
                          C139328) *
                         C139457 * C139286 * C139552 -
                     ((C63534 * C941 + C63380 * C1234 + C63533 * C938 +
                       C63379 * C1233 + C63532 * C183 + C63378 * C395) *
                          C139328 +
                      (C63534 * C833 + C63380 * C1122 + C63533 * C828 +
                       C63379 * C1117 + C63532 * C108 + C63378 * C309) *
                          C181) *
                         C139457 * C139286 * C139305) *
                        C139593 +
                    (((C63532 * C1764 + C63378 * C2053 + C63533 * C4224 +
                       C63379 * C4550 + C63534 * C8753 + C63380 * C8999) *
                          C181 +
                      (C63532 * C1870 + C63378 * C2167 + C63533 * C4338 +
                       C63379 * C4668 + C63534 * C8839 + C63380 * C9079) *
                          C139328) *
                         C139457 * C139286 * C139305 -
                     ((C63534 * C8840 + C63380 * C9078 + C63533 * C4337 +
                       C63379 * C4667 + C63532 * C1873 + C63378 * C2170) *
                          C139328 +
                      (C63534 * C8754 + C63380 * C9000 + C63533 * C4223 +
                       C63379 * C4549 + C63532 * C1767 + C63378 * C2054) *
                          C181) *
                         C139457 * C139286 * C139552) *
                        C139594 +
                    (((C63532 * C1768 + C63378 * C2057 + C63533 * C6442 +
                       C63379 * C6688 + C63534 * C21079 + C63380 * C21413) *
                          C181 +
                      (C63532 * C1874 + C63378 * C2171 + C63533 * C6528 +
                       C63379 * C6766 + C63534 * C21197 + C63380 * C21514) *
                          C139328) *
                         C139457 * C139286 * C139552 -
                     ((C63534 * C21196 + C63380 * C21515 + C63533 * C6527 +
                       C63379 * C6767 + C63532 * C1875 + C63378 * C2172) *
                          C139328 +
                      (C63534 * C21078 + C63380 * C21412 + C63533 * C6441 +
                       C63379 * C6687 + C63532 * C1769 + C63378 * C2058) *
                          C181) *
                         C139457 * C139286 * C139305) *
                        C12239)) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[73] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((C63532 * C107 + C63378 * C308 + C63533 * C831 +
                      C63379 * C1118 + C63534 * C832 + C63380 * C1121) *
                         C12388 +
                     (C63532 * C245 + C63378 * C474 + C63533 * C1029 +
                      C63379 * C1339 + C63534 * C1030 + C63380 * C1340) *
                         C139593 -
                     (C63534 * C8754 + C63380 * C9000 + C63533 * C4223 +
                      C63379 * C4549 + C63532 * C1767 + C63378 * C2054) *
                         C12389 -
                     (C63534 * C8920 + C63380 * C9155 + C63533 * C4443 +
                      C63379 * C4783 + C63532 * C1965 + C63378 * C2269) *
                         C139594 +
                     (C63532 * C1768 + C63378 * C2057 + C63533 * C6442 +
                      C63379 * C6688 + C63534 * C21079 + C63380 * C21413) *
                         C12390 +
                     (C63532 * C1966 + C63378 * C2270 + C63533 * C6608 +
                      C63379 * C6843 + C63534 * C21305 + C63380 * C21614) *
                         C12239) *
                        C139457 * C139286 * C139328 * C139552 +
                    ((C63532 * C1764 + C63378 * C2053 + C63533 * C4224 +
                      C63379 * C4550 + C63534 * C8753 + C63380 * C8999) *
                         C12389 -
                     ((C63534 * C1031 + C63380 * C1341 + C63533 * C1028 +
                       C63379 * C1338 + C63532 * C246 + C63378 * C475) *
                          C139593 +
                      (C63534 * C833 + C63380 * C1122 + C63533 * C828 +
                       C63379 * C1117 + C63532 * C108 + C63378 * C309) *
                          C12388) +
                     (C63532 * C1964 + C63378 * C2271 + C63533 * C4444 +
                      C63379 * C4784 + C63534 * C8919 + C63380 * C9156) *
                         C139594 -
                     (C63534 * C21078 + C63380 * C21412 + C63533 * C6441 +
                      C63379 * C6687 + C63532 * C1769 + C63378 * C2058) *
                         C12390 -
                     (C63534 * C21304 + C63380 * C21615 + C63533 * C6607 +
                      C63379 * C6844 + C63532 * C1967 + C63378 * C2272) *
                         C12239) *
                        C139457 * C139286 * C139328 * C139305)) /
                  (p * q * std::sqrt(p + q));
    d2eezx[73] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C554 * C107 + C139457 * C555) * C137108 +
                      (C554 * C116 + C139457 * C561) * C139552 -
                      C584 * C137101 - C585 * C139305) *
                         C139286 * C63378 +
                     (C22631 + C22632 - C22633 - C22634) * C139286 * C63379 +
                     C70049 * C63380) *
                        C139593 +
                    ((C2408 * C137101 -
                      ((C554 * C1777 + C139457 * C2383) * C139552 +
                       (C554 * C1767 + C139457 * C2376) * C137108) +
                      C2409 * C139305) *
                         C139286 * C63378 +
                     (C23759 - (C23760 + C23761) + C23762) * C139286 * C63379 +
                     (C70892 - (C70893 + C70894) + C70895) * C139286 * C63380) *
                        C139594 +
                    (((C554 * C1768 + C139457 * C2379) * C137108 +
                      (C554 * C1783 + C139457 * C2387) * C139552 -
                      C2412 * C137101 - C2413 * C139305) *
                         C139286 * C63378 +
                     (C21729 * C137108 + C21730 * C139552 - C16038 * C137101 -
                      C16039 * C139305) *
                         C139286 * C63379 +
                     (C69343 * C137108 + C69344 * C139552 -
                      (C554 * C21078 + C139457 * C21714) * C137101 -
                      (C554 * C21080 + C139457 * C21716) * C139305) *
                         C139286 * C63380) *
                        C12239) *
                   C139328) /
                  (p * q * std::sqrt(p + q));
    d2eezy[73] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C554 * C107 + C139457 * C555) * C181 +
                       (C554 * C182 + C139457 * C641) * C139328) *
                          C139286 * C63378 +
                      (C15060 * C181 + C15179 * C139328) * C139286 * C63379 +
                      (C15063 * C181 + C15180 * C139328) * C139286 * C63380) *
                         C139552 -
                     ((C1579 * C139328 + C1476 * C181) * C139286 * C63380 +
                      (C14135 + C14134) * C139286 * C63379 +
                      (C664 + C648) * C139286 * C63378) *
                         C139305) *
                        C139593 +
                    (((C2498 + C2514) * C139286 * C63378 +
                      (C16138 + C16139) * C139286 * C63379 +
                      (C19109 * C181 + C19251 * C139328) * C139286 * C63380) *
                         C139305 -
                     ((C24881 * C139328 + C24775 * C181) * C139286 * C63380 +
                      (C19250 * C139328 + C19108 * C181) * C139286 * C63379 +
                      ((C554 * C1873 + C139457 * C2492) * C139328 +
                       (C554 * C1767 + C139457 * C2376) * C181) *
                          C139286 * C63378) *
                         C139552) *
                        C139594 +
                    ((((C554 * C1768 + C139457 * C2379) * C181 +
                       (C554 * C1874 + C139457 * C2493) * C139328) *
                          C139286 * C63378 +
                      (C21729 * C181 + C21835 * C139328) * C139286 * C63379 +
                      (C69343 * C181 + C69424 * C139328) * C139286 * C63380) *
                         C139552 -
                     (((C554 * C21196 + C139457 * C21831) * C139328 +
                       (C554 * C21078 + C139457 * C21714) * C181) *
                          C139286 * C63380 +
                      (C16144 + C16140) * C139286 * C63379 +
                      (C2516 + C2504) * C139286 * C63378) *
                         C139305) *
                        C12239)) /
                  (p * q * std::sqrt(p + q));
    d2eezz[73] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C139457 * C555) * C12388 +
            (C554 * C245 + C139457 * C719) * C139593 -
            (C554 * C1767 + C139457 * C2376) * C12389 -
            (C554 * C1965 + C139457 * C2591) * C139594 +
            (C554 * C1768 + C139457 * C2379) * C12390 +
            (C554 * C1966 + C139457 * C2592) * C12239) *
               C139286 * C63378 +
           (C30337 + C30338 - C30339 - C30340 + C30341 + C30342) * C139286 *
               C63379 +
           (C15063 * C12388 + C15295 * C139593 - C24775 * C12389 -
            C24987 * C139594 + C69343 * C12390 + C69507 * C12239) *
               C139286 * C63380) *
              C139328 * C139552 +
          ((C12850 - (C12849 + C12848) + C12851 - C12852 - C12853) * C139286 *
               C63378 +
           (C29451 - (C29450 + C29449) + C29452 - C29453 - C29454) * C139286 *
               C63379 +
           (C19109 * C12389 - (C1682 * C139593 + C1476 * C12388) +
            C19398 * C139594 - (C554 * C21078 + C139457 * C21714) * C12390 -
            (C554 * C21304 + C139457 * C21934) * C12239) *
               C139286 * C63380) *
              C139328 * C139305)) /
        (p * q * std::sqrt(p + q));
    d2eexx[74] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139286 * C113) * C5230 +
            (C63381 * C116 + C139286 * C125) * C5225 -
            (C63381 * C108 + C139286 * C114) * C5231 -
            (C63381 * C117 + C139286 * C126) * C5226 +
            (C63381 * C109 + C139286 * C115) * C5232 +
            (C63381 * C118 + C139286 * C127) * C5227) *
               C63378 +
           (C67640 + C67641 - C67642 - C67643 + C67644 + C67645) * C63379 +
           (C67646 + C67647 - C67648 - C67649 + C67650 + C67651) * C63380) *
              C139457 * C9466 +
          (((C63381 * C1764 + C139286 * C1772) * C5231 -
            ((C63381 * C1777 + C139286 * C1790) * C5225 +
             (C63381 * C1767 + C139286 * C1778) * C5230) +
            (C63381 * C1776 + C139286 * C1789) * C5226 -
            (C63381 * C1765 + C139286 * C1773) * C5232 -
            (C63381 * C1775 + C139286 * C1788) * C5227) *
               C63378 +
           (C66722 * C5231 - (C66723 * C5225 + C66724 * C5230) +
            C66725 * C5226 - (C63381 * C4225 + C139286 * C4229) * C5232 -
            (C63381 * C4232 + C139286 * C4237) * C5227) *
               C63379 +
           (C66726 * C5231 - (C66727 * C5225 + C66728 * C5230) +
            C66729 * C5226 - (C63381 * C8752 + C139286 * C8758) * C5232 -
            (C63381 * C8755 + C139286 * C8761) * C5227) *
               C63380) *
              C139457 * C139403) *
         C139328) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139286 * C113) * C5913 +
             (C63381 * C116 + C139286 * C125) * C139300) *
                C63378 +
            (C68304 + C68305) * C63379 + C68314 * C63380) *
               C139457 * C9466 -
           (C71170 * C63380 + (C68843 + C68844) * C63379 +
            ((C63381 * C1777 + C139286 * C1790) * C139300 +
             (C63381 * C1767 + C139286 * C1778) * C5913) *
                C63378) *
               C139457 * C139403) *
              C823 +
          (((C68844 + C68843) * C63378 + (C68842 + C68841) * C63379 +
            (C71177 + C71178) * C63380) *
               C139457 * C139403 -
           (C68315 * C63380 + (C68307 + C68306) * C63379 +
            (C68305 + C68304) * C63378) *
               C139457 * C9466) *
              C824 +
          ((C68314 * C63378 + (C68309 + C68308) * C63379 +
            (C68318 + C68319) * C63380) *
               C139457 * C9466 -
           (((C63381 * C71166 + C139286 * C71168) * C139300 +
             (C63381 * C71165 + C139286 * C71167) * C5913) *
                C63380 +
            (C71178 + C71177) * C63379 + C71170 * C63378) *
               C139457 * C139403) *
              C825)) /
            (p * q * std::sqrt(p + q));
    d2eexy[74] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139286 * C113) * C181 +
             (C63381 * C182 + C139286 * C188) * C139328) *
                C63378 +
            (C63884 * C181 + C63997 * C139328) * C63379 +
            (C63888 * C181 + C63998 * C139328) * C63380) *
               C139457 * C5225 -
           ((C64001 * C139328 + C63890 * C181) * C63380 +
            (C64000 * C139328 + C63886 * C181) * C63379 +
            ((C63381 * C183 + C139286 * C189) * C139328 +
             (C63381 * C108 + C139286 * C114) * C181) *
                C63378) *
               C139457 * C5226 +
           (((C63381 * C109 + C139286 * C115) * C181 +
             (C63381 * C184 + C139286 * C190) * C139328) *
                C63378 +
            (C65320 * C181 + C65406 * C139328) * C63379 +
            (C65322 * C181 + C65407 * C139328) * C63380) *
               C139457 * C5227) *
              C9466 +
          ((((C63381 * C1764 + C139286 * C1772) * C181 +
             (C63381 * C1870 + C139286 * C1878) * C139328) *
                C63378 +
            (C66722 * C181 + C66846 * C139328) * C63379 +
            (C66726 * C181 + C66847 * C139328) * C63380) *
               C139457 * C5226 -
           ((C66845 * C139328 + C66728 * C181) * C63380 +
            (C66844 * C139328 + C66724 * C181) * C63379 +
            ((C63381 * C1873 + C139286 * C1881) * C139328 +
             (C63381 * C1767 + C139286 * C1778) * C181) *
                C63378) *
               C139457 * C5225 -
           (((C63381 * C8838 + C139286 * C8841) * C139328 +
             (C63381 * C8752 + C139286 * C8758) * C181) *
                C63380 +
            ((C63381 * C4339 + C139286 * C4343) * C139328 +
             (C63381 * C4225 + C139286 * C4229) * C181) *
                C63379 +
            ((C63381 * C1871 + C139286 * C1879) * C139328 +
             (C63381 * C1765 + C139286 * C1773) * C181) *
                C63378) *
               C139457 * C5227) *
              C139403)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139286 * C113) * C934 +
            (C63381 * C182 + C139286 * C188) * C823 - C63884 * C935 -
            C63997 * C824 + C63888 * C936 + C63998 * C825) *
               C63378 +
           (C63884 * C934 + C63997 * C823 - C63888 * C935 - C63998 * C824 +
            C63894 * C936 + C63999 * C825) *
               C63379 +
           (C63888 * C934 + C63998 * C823 - C63894 * C935 - C63999 * C824 +
            C68316 * C936 + C68374 * C825) *
               C63380) *
              C139457 * C139300 * C9466 +
          ((C66724 * C935 -
            ((C63381 * C1873 + C139286 * C1881) * C823 +
             (C63381 * C1767 + C139286 * C1778) * C934) +
            C66844 * C824 - C66728 * C936 - C66845 * C825) *
               C63378 +
           (C66728 * C935 - (C66844 * C823 + C66724 * C934) + C66845 * C824 -
            C71175 * C936 - C71257 * C825) *
               C63379 +
           (C71175 * C935 - (C66845 * C823 + C66728 * C934) + C71257 * C824 -
            (C63381 * C71165 + C139286 * C71167) * C936 -
            (C63381 * C71252 + C139286 * C71253) * C825) *
               C63380) *
              C139457 * C139300 * C139403)) /
            (p * q * std::sqrt(p + q));
    d2eexz[74] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139286 * C113) * C9616 +
            (C63381 * C245 + C139286 * C251) * C9466 -
            (C63381 * C1767 + C139286 * C1778) * C9617 -
            (C63381 * C1965 + C139286 * C1973) * C139403) *
               C63378 +
           (C63884 * C9616 + C64095 * C9466 - C66724 * C9617 -
            C66966 * C139403) *
               C63379 +
           (C63888 * C9616 + C64096 * C9466 - C66728 * C9617 -
            C66967 * C139403) *
               C63380) *
              C139457 * C139328 * C5225 +
          (((C63381 * C1764 + C139286 * C1772) * C9617 -
            ((C63381 * C246 + C139286 * C252) * C9466 +
             (C63381 * C108 + C139286 * C114) * C9616) +
            (C63381 * C1964 + C139286 * C1972) * C139403) *
               C63378 +
           (C66722 * C9617 - (C64098 * C9466 + C63886 * C9616) +
            C66968 * C139403) *
               C63379 +
           (C66726 * C9617 - (C64099 * C9466 + C63890 * C9616) +
            C66969 * C139403) *
               C63380) *
              C139457 * C139328 * C5226 +
          (((C63381 * C109 + C139286 * C115) * C9616 +
            (C63381 * C247 + C139286 * C253) * C9466 -
            (C63381 * C1765 + C139286 * C1773) * C9617 -
            (C63381 * C1963 + C139286 * C1971) * C139403) *
               C63378 +
           (C65320 * C9616 + C65488 * C9466 -
            (C63381 * C4225 + C139286 * C4229) * C9617 -
            (C63381 * C4445 + C139286 * C4449) * C139403) *
               C63379 +
           (C65322 * C9616 + C65489 * C9466 -
            (C63381 * C8752 + C139286 * C8758) * C9617 -
            (C63381 * C8918 + C139286 * C8921) * C139403) *
               C63380) *
              C139457 * C139328 * C5227)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139286 * C113) * C9616 +
            (C63381 * C245 + C139286 * C251) * C9466 -
            (C63381 * C1767 + C139286 * C1778) * C9617 -
            (C63381 * C1965 + C139286 * C1973) * C139403) *
               C63378 +
           (C72708 + C72709 - C72710 - C72711) * C63379 + C72722 * C63380) *
              C139457 * C823 +
          ((C72710 - (C72709 + C72708) + C72711) * C63378 +
           (C72714 - (C72713 + C72712) + C72715) * C63379 +
           (C72716 - (C72717 + C72718) + C72719) * C63380) *
              C139457 * C824 +
          (C72722 * C63378 + (C72718 + C72717 - C72716 - C72719) * C63379 +
           (C68316 * C9616 + C68431 * C9466 -
            (C63381 * C71165 + C139286 * C71167) * C9617 -
            (C63381 * C71331 + C139286 * C71332) * C139403) *
               C63380) *
              C139457 * C825) *
         C139300) /
            (p * q * std::sqrt(p + q));
    d2eeyx[74] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((C63532 * C107 + C63378 * C308 + C63533 * C831 +
                      C63379 * C1118 + C63534 * C832 + C63380 * C1121) *
                         C5230 +
                     (C63532 * C116 + C63378 * C314 + C63533 * C841 +
                      C63379 * C1125 + C63534 * C847 + C63380 * C1129) *
                         C5225 -
                     (C63534 * C833 + C63380 * C1122 + C63533 * C828 +
                      C63379 * C1117 + C63532 * C108 + C63378 * C309) *
                         C5231 -
                     (C63534 * C848 + C63380 * C1130 + C63533 * C840 +
                      C63379 * C1126 + C63532 * C117 + C63378 * C315) *
                         C5226 +
                     (C63532 * C109 + C63378 * C310 + C63533 * C829 +
                      C63379 * C1119 + C63534 * C834 + C63380 * C1123) *
                         C5232 +
                     (C63532 * C118 + C63378 * C316 + C63533 * C839 +
                      C63379 * C1127 + C63534 * C849 + C63380 * C1131) *
                         C5227) *
                        C139457 * C139286 * C9466 +
                    ((C63532 * C1764 + C63378 * C2053 + C63533 * C4224 +
                      C63379 * C4550 + C63534 * C8753 + C63380 * C8999) *
                         C5231 -
                     ((C63534 * C8757 + C63380 * C9003 + C63533 * C4230 +
                       C63379 * C4553 + C63532 * C1777 + C63378 * C2061) *
                          C5225 +
                      (C63534 * C8754 + C63380 * C9000 + C63533 * C4223 +
                       C63379 * C4549 + C63532 * C1767 + C63378 * C2054) *
                          C5230) +
                     (C63532 * C1776 + C63378 * C2062 + C63533 * C4231 +
                      C63379 * C4554 + C63534 * C8756 + C63380 * C9002) *
                         C5226 -
                     (C63534 * C8752 + C63380 * C8998 + C63533 * C4225 +
                      C63379 * C4551 + C63532 * C1765 + C63378 * C2055) *
                         C5232 -
                     (C63534 * C8755 + C63380 * C9001 + C63533 * C4232 +
                      C63379 * C4555 + C63532 * C1775 + C63378 * C2063) *
                         C5227) *
                        C139457 * C139286 * C139403) *
                   C139328) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C63532 * C107 + C63378 * C308 + C63533 * C831 +
                       C63379 * C1118 + C63534 * C832 + C63380 * C1121) *
                          C5913 +
                      (C63532 * C116 + C63378 * C314 + C63533 * C841 +
                       C63379 * C1125 + C63534 * C847 + C63380 * C1129) *
                          C139300) *
                         C139457 * C139286 * C9466 -
                     ((C63534 * C8757 + C63380 * C9003 + C63533 * C4230 +
                       C63379 * C4553 + C63532 * C1777 + C63378 * C2061) *
                          C139300 +
                      (C63534 * C8754 + C63380 * C9000 + C63533 * C4223 +
                       C63379 * C4549 + C63532 * C1767 + C63378 * C2054) *
                          C5913) *
                         C139457 * C139286 * C139403) *
                        C823 +
                    (((C63532 * C4223 + C63378 * C4549 + C63533 * C8754 +
                       C63379 * C9000 + C63534 * C24129 + C63380 * C24463) *
                          C5913 +
                      (C63532 * C4230 + C63378 * C4553 + C63533 * C8757 +
                       C63379 * C9003 + C63534 * C24131 + C63380 * C24465) *
                          C139300) *
                         C139457 * C139286 * C139403 -
                     ((C63534 * C5919 + C63380 * C6097 + C63533 * C847 +
                       C63379 * C1129 + C63532 * C841 + C63378 * C1125) *
                          C139300 +
                      (C63534 * C5916 + C63380 * C6094 + C63533 * C832 +
                       C63379 * C1121 + C63532 * C831 + C63378 * C1118) *
                          C5913) *
                         C139457 * C139286 * C9466) *
                        C824 +
                    (((C63532 * C832 + C63378 * C1121 + C63533 * C5916 +
                       C63379 * C6094 + C63534 * C20371 + C63380 * C20609) *
                          C5913 +
                      (C63532 * C847 + C63378 * C1129 + C63533 * C5919 +
                       C63379 * C6097 + C63534 * C20373 + C63380 * C20611) *
                          C139300) *
                         C139457 * C139286 * C9466 -
                     ((C63534 * C71166 + C63380 * C71418 + C63533 * C24131 +
                       C63379 * C24465 + C63532 * C8757 + C63378 * C9003) *
                          C139300 +
                      (C63534 * C71165 + C63380 * C71417 + C63533 * C24129 +
                       C63379 * C24463 + C63532 * C8754 + C63378 * C9000) *
                          C5913) *
                         C139457 * C139286 * C139403) *
                        C825)) /
                      (p * q * std::sqrt(p + q));
    d2eeyy[74] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C63532 * C107 + C63378 * C308 + C63533 * C831 +
                       C63379 * C1118 + C63534 * C832 + C63380 * C1121) *
                          C181 +
                      (C63532 * C182 + C63378 * C394 + C63533 * C939 +
                       C63379 * C1231 + C63534 * C940 + C63380 * C1232) *
                          C139328) *
                         C139457 * C139286 * C5225 -
                     ((C63534 * C941 + C63380 * C1234 + C63533 * C938 +
                       C63379 * C1233 + C63532 * C183 + C63378 * C395) *
                          C139328 +
                      (C63534 * C833 + C63380 * C1122 + C63533 * C828 +
                       C63379 * C1117 + C63532 * C108 + C63378 * C309) *
                          C181) *
                         C139457 * C139286 * C5226 +
                     ((C63532 * C109 + C63378 * C310 + C63533 * C829 +
                       C63379 * C1119 + C63534 * C834 + C63380 * C1123) *
                          C181 +
                      (C63532 * C184 + C63378 * C396 + C63533 * C937 +
                       C63379 * C1235 + C63534 * C942 + C63380 * C1236) *
                          C139328) *
                         C139457 * C139286 * C5227) *
                        C9466 +
                    (((C63532 * C1764 + C63378 * C2053 + C63533 * C4224 +
                       C63379 * C4550 + C63534 * C8753 + C63380 * C8999) *
                          C181 +
                      (C63532 * C1870 + C63378 * C2167 + C63533 * C4338 +
                       C63379 * C4668 + C63534 * C8839 + C63380 * C9079) *
                          C139328) *
                         C139457 * C139286 * C5226 -
                     ((C63534 * C8840 + C63380 * C9078 + C63533 * C4337 +
                       C63379 * C4667 + C63532 * C1873 + C63378 * C2170) *
                          C139328 +
                      (C63534 * C8754 + C63380 * C9000 + C63533 * C4223 +
                       C63379 * C4549 + C63532 * C1767 + C63378 * C2054) *
                          C181) *
                         C139457 * C139286 * C5225 -
                     ((C63534 * C8838 + C63380 * C9080 + C63533 * C4339 +
                       C63379 * C4669 + C63532 * C1871 + C63378 * C2168) *
                          C139328 +
                      (C63534 * C8752 + C63380 * C8998 + C63533 * C4225 +
                       C63379 * C4551 + C63532 * C1765 + C63378 * C2055) *
                          C181) *
                         C139457 * C139286 * C5227) *
                        C139403)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((C63532 * C107 + C63378 * C308 + C63533 * C831 +
                      C63379 * C1118 + C63534 * C832 + C63380 * C1121) *
                         C934 +
                     (C63532 * C182 + C63378 * C394 + C63533 * C939 +
                      C63379 * C1231 + C63534 * C940 + C63380 * C1232) *
                         C823 -
                     (C63534 * C5916 + C63380 * C6094 + C63533 * C832 +
                      C63379 * C1121 + C63532 * C831 + C63378 * C1118) *
                         C935 -
                     (C63534 * C5982 + C63380 * C6148 + C63533 * C940 +
                      C63379 * C1232 + C63532 * C939 + C63378 * C1231) *
                         C824 +
                     (C63532 * C832 + C63378 * C1121 + C63533 * C5916 +
                      C63379 * C6094 + C63534 * C20371 + C63380 * C20609) *
                         C936 +
                     (C63532 * C940 + C63378 * C1232 + C63533 * C5982 +
                      C63379 * C6148 + C63534 * C20457 + C63380 * C20678) *
                         C825) *
                        C139457 * C139286 * C139300 * C9466 +
                    ((C63532 * C4223 + C63378 * C4549 + C63533 * C8754 +
                      C63379 * C9000 + C63534 * C24129 + C63380 * C24463) *
                         C935 -
                     ((C63534 * C8840 + C63380 * C9078 + C63533 * C4337 +
                       C63379 * C4667 + C63532 * C1873 + C63378 * C2170) *
                          C823 +
                      (C63534 * C8754 + C63380 * C9000 + C63533 * C4223 +
                       C63379 * C4549 + C63532 * C1767 + C63378 * C2054) *
                          C934) +
                     (C63532 * C4337 + C63378 * C4667 + C63533 * C8840 +
                      C63379 * C9078 + C63534 * C24247 + C63380 * C24564) *
                         C824 -
                     (C63534 * C71165 + C63380 * C71417 + C63533 * C24129 +
                      C63379 * C24463 + C63532 * C8754 + C63378 * C9000) *
                         C936 -
                     (C63534 * C71252 + C63380 * C71493 + C63533 * C24247 +
                      C63379 * C24564 + C63532 * C8840 + C63378 * C9078) *
                         C825) *
                        C139457 * C139286 * C139300 * C139403)) /
                      (p * q * std::sqrt(p + q));
    d2eeyz[74] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((C63532 * C107 + C63378 * C308 + C63533 * C831 +
                      C63379 * C1118 + C63534 * C832 + C63380 * C1121) *
                         C9616 +
                     (C63532 * C245 + C63378 * C474 + C63533 * C1029 +
                      C63379 * C1339 + C63534 * C1030 + C63380 * C1340) *
                         C9466 -
                     (C63534 * C8754 + C63380 * C9000 + C63533 * C4223 +
                      C63379 * C4549 + C63532 * C1767 + C63378 * C2054) *
                         C9617 -
                     (C63534 * C8920 + C63380 * C9155 + C63533 * C4443 +
                      C63379 * C4783 + C63532 * C1965 + C63378 * C2269) *
                         C139403) *
                        C139457 * C139286 * C139328 * C5225 +
                    ((C63532 * C1764 + C63378 * C2053 + C63533 * C4224 +
                      C63379 * C4550 + C63534 * C8753 + C63380 * C8999) *
                         C9617 -
                     ((C63534 * C1031 + C63380 * C1341 + C63533 * C1028 +
                       C63379 * C1338 + C63532 * C246 + C63378 * C475) *
                          C9466 +
                      (C63534 * C833 + C63380 * C1122 + C63533 * C828 +
                       C63379 * C1117 + C63532 * C108 + C63378 * C309) *
                          C9616) +
                     (C63532 * C1964 + C63378 * C2271 + C63533 * C4444 +
                      C63379 * C4784 + C63534 * C8919 + C63380 * C9156) *
                         C139403) *
                        C139457 * C139286 * C139328 * C5226 +
                    ((C63532 * C109 + C63378 * C310 + C63533 * C829 +
                      C63379 * C1119 + C63534 * C834 + C63380 * C1123) *
                         C9616 +
                     (C63532 * C247 + C63378 * C476 + C63533 * C1027 +
                      C63379 * C1337 + C63534 * C1032 + C63380 * C1342) *
                         C9466 -
                     (C63534 * C8752 + C63380 * C8998 + C63533 * C4225 +
                      C63379 * C4551 + C63532 * C1765 + C63378 * C2055) *
                         C9617 -
                     (C63534 * C8918 + C63380 * C9157 + C63533 * C4445 +
                      C63379 * C4785 + C63532 * C1963 + C63378 * C2273) *
                         C139403) *
                        C139457 * C139286 * C139328 * C5227)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((C63532 * C107 + C63378 * C308 + C63533 * C831 +
                      C63379 * C1118 + C63534 * C832 + C63380 * C1121) *
                         C9616 +
                     (C63532 * C245 + C63378 * C474 + C63533 * C1029 +
                      C63379 * C1339 + C63534 * C1030 + C63380 * C1340) *
                         C9466 -
                     (C63534 * C8754 + C63380 * C9000 + C63533 * C4223 +
                      C63379 * C4549 + C63532 * C1767 + C63378 * C2054) *
                         C9617 -
                     (C63534 * C8920 + C63380 * C9155 + C63533 * C4443 +
                      C63379 * C4783 + C63532 * C1965 + C63378 * C2269) *
                         C139403) *
                        C139457 * C139286 * C823 +
                    ((C63532 * C4223 + C63378 * C4549 + C63533 * C8754 +
                      C63379 * C9000 + C63534 * C24129 + C63380 * C24463) *
                         C9617 -
                     ((C63534 * C6038 + C63380 * C6203 + C63533 * C1030 +
                       C63379 * C1340 + C63532 * C1029 + C63378 * C1339) *
                          C9466 +
                      (C63534 * C5916 + C63380 * C6094 + C63533 * C832 +
                       C63379 * C1121 + C63532 * C831 + C63378 * C1118) *
                          C9616) +
                     (C63532 * C4443 + C63378 * C4783 + C63533 * C8920 +
                      C63379 * C9155 + C63534 * C24355 + C63380 * C24664) *
                         C139403) *
                        C139457 * C139286 * C824 +
                    ((C63532 * C832 + C63378 * C1121 + C63533 * C5916 +
                      C63379 * C6094 + C63534 * C20371 + C63380 * C20609) *
                         C9616 +
                     (C63532 * C1030 + C63378 * C1340 + C63533 * C6038 +
                      C63379 * C6203 + C63534 * C20533 + C63380 * C20747) *
                         C9466 -
                     (C63534 * C71165 + C63380 * C71417 + C63533 * C24129 +
                      C63379 * C24463 + C63532 * C8754 + C63378 * C9000) *
                         C9617 -
                     (C63534 * C71331 + C63380 * C71568 + C63533 * C24355 +
                      C63379 * C24664 + C63532 * C8920 + C63378 * C9155) *
                         C139403) *
                        C139457 * C139286 * C825) *
                   C139300) /
                      (p * q * std::sqrt(p + q));
    d2eezx[74] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C139457 * C555) * C5230 +
            (C554 * C116 + C139457 * C561) * C5225 - C584 * C5231 -
            C585 * C5226 + C586 * C5232 + C587 * C5227) *
               C139286 * C63378 +
           (C20089 + C20090 - C20091 - C20092 + C20093 + C20094) * C139286 *
               C63379 +
           (C68096 + C68097 - C68098 - C68099 + C68100 + C68101) * C139286 *
               C63380) *
              C9466 +
          ((C2408 * C5231 -
            ((C554 * C1777 + C139457 * C2383) * C5225 +
             (C554 * C1767 + C139457 * C2376) * C5230) +
            C2409 * C5226 - C2410 * C5232 - C2411 * C5227) *
               C139286 * C63378 +
           (C4916 * C5231 - (C19107 * C5225 + C19108 * C5230) + C4917 * C5226 -
            C4918 * C5232 - C4919 * C5227) *
               C139286 * C63379 +
           (C19109 * C5231 - (C24776 * C5225 + C24775 * C5230) +
            C19110 * C5226 - (C554 * C8752 + C139457 * C9232) * C5232 -
            (C554 * C8755 + C139457 * C9235) * C5227) *
               C139286 * C63380) *
              C139403) *
         C139328) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139457 * C555) * C5913 +
             (C554 * C116 + C139457 * C561) * C139300) *
                C139286 * C63378 +
            (C20819 + C20820) * C139286 * C63379 + C68645 * C63380) *
               C9466 -
           (C71651 * C63380 + (C21721 + C21722) * C139286 * C63379 +
            ((C554 * C1777 + C139457 * C2383) * C139300 +
             (C554 * C1767 + C139457 * C2376) * C5913) *
                C139286 * C63378) *
               C139403) *
              C823 +
          (((C21722 + C21721) * C139286 * C63378 +
            (C24777 + C24778) * C139286 * C63379 +
            (C71654 + C71655) * C139286 * C63380) *
               C139403 -
           (C68646 * C63380 + (C20825 + C20826) * C139286 * C63379 +
            (C20820 + C20819) * C139286 * C63378) *
               C9466) *
              C824 +
          ((C68645 * C63378 + (C20835 + C20836) * C139286 * C63379 +
            (C68649 + C68650) * C139286 * C63380) *
               C9466 -
           (((C554 * C71166 + C139457 * C71644) * C139300 +
             (C554 * C71165 + C139457 * C71643) * C5913) *
                C139286 * C63380 +
            (C71655 + C71654) * C139286 * C63379 + C71651 * C63378) *
               C139403) *
              C825)) /
            (p * q * std::sqrt(p + q));
    d2eezy[74] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139457 * C555) * C181 +
             (C554 * C182 + C139457 * C641) * C139328) *
                C139286 * C63378 +
            (C15060 * C181 + C15179 * C139328) * C139286 * C63379 +
            (C15063 * C181 + C15180 * C139328) * C139286 * C63380) *
               C5225 -
           ((C1579 * C139328 + C1476 * C181) * C139286 * C63380 +
            (C14135 + C14134) * C139286 * C63379 +
            (C664 + C648) * C139286 * C63378) *
               C5226 +
           (C668 * C139286 * C63378 + (C14137 + C14136) * C139286 * C63379 +
            (C1478 * C181 + C1581 * C139328) * C139286 * C63380) *
               C5227) *
              C9466 +
          (((C2498 + C2514) * C139286 * C63378 +
            (C16138 + C16139) * C139286 * C63379 +
            (C19109 * C181 + C19251 * C139328) * C139286 * C63380) *
               C5226 -
           ((C24881 * C139328 + C24775 * C181) * C139286 * C63380 +
            (C19250 * C139328 + C19108 * C181) * C139286 * C63379 +
            ((C554 * C1873 + C139457 * C2492) * C139328 +
             (C554 * C1767 + C139457 * C2376) * C181) *
                C139286 * C63378) *
               C5225 -
           (((C554 * C8838 + C139457 * C9314) * C139328 +
             (C554 * C8752 + C139457 * C9232) * C181) *
                C139286 * C63380 +
            (C18012 + C18011) * C139286 * C63379 + C4030 * C139286 * C63378) *
               C5227) *
              C139403)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C139457 * C555) * C934 +
            (C554 * C182 + C139457 * C641) * C823 - C15060 * C935 -
            C15179 * C824 + C15063 * C936 + C15180 * C825) *
               C139286 * C63378 +
           (C15060 * C934 + C15179 * C823 - C15063 * C935 - C15180 * C824 +
            C20833 * C936 + C20907 * C825) *
               C139286 * C63379 +
           (C15063 * C934 + C15180 * C823 - C20833 * C935 - C20907 * C824 +
            C68647 * C936 + C68704 * C825) *
               C139286 * C63380) *
              C139300 * C9466 +
          ((C19108 * C935 -
            ((C554 * C1873 + C139457 * C2492) * C823 +
             (C554 * C1767 + C139457 * C2376) * C934) +
            C19250 * C824 - C24775 * C936 - C24881 * C825) *
               C139286 * C63378 +
           (C24775 * C935 - (C19250 * C823 + C19108 * C934) + C24881 * C824 -
            C71652 * C936 - C71733 * C825) *
               C139286 * C63379 +
           (C71652 * C935 - (C24881 * C823 + C24775 * C934) + C71733 * C824 -
            (C554 * C71165 + C139457 * C71643) * C936 -
            (C554 * C71252 + C139457 * C71729) * C825) *
               C139286 * C63380) *
              C139300 * C139403)) /
            (p * q * std::sqrt(p + q));
    d2eezz[74] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C554 * C107 + C139457 * C555) * C9616 +
                      (C554 * C245 + C139457 * C719) * C9466 -
                      (C554 * C1767 + C139457 * C2376) * C9617 -
                      (C554 * C1965 + C139457 * C2591) * C139403) *
                         C139286 * C63378 +
                     (C26753 + C26754 - C26755 - C26756) * C139286 * C63379 +
                     (C26759 + C26758 - C26757 - C26760) * C139286 * C63380) *
                        C139328 * C5225 +
                    ((C10081 - (C10080 + C10079) + C10082) * C139286 * C63378 +
                     C28566 * C139286 * C63379 +
                     (C26761 - (C26762 + C26763) + C26764) * C139286 * C63380) *
                        C139328 * C5226 +
                    (C10093 * C139286 * C63378 +
                     (C12162 + C12161 - C12160 - C12163) * C139286 * C63379 +
                     (C1478 * C9616 + C1683 * C9466 -
                      (C554 * C8752 + C139457 * C9232) * C9617 -
                      (C554 * C8918 + C139457 * C9391) * C139403) *
                         C139286 * C63380) *
                        C139328 * C5227)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C554 * C107 + C139457 * C555) * C9616 +
                      (C554 * C245 + C139457 * C719) * C9466 -
                      (C554 * C1767 + C139457 * C2376) * C9617 -
                      (C554 * C1965 + C139457 * C2591) * C139403) *
                         C139286 * C63378 +
                     (C26753 + C26754 - C26755 - C26756) * C139286 * C63379 +
                     C73174 * C63380) *
                        C823 +
                    ((C26755 - (C26754 + C26753) + C26756) * C139286 * C63378 +
                     (C26757 - (C26758 + C26759) + C26760) * C139286 * C63379 +
                     (C73168 - (C73169 + C73170) + C73171) * C139286 * C63380) *
                        C824 +
                    (C73174 * C63378 +
                     (C73170 + C73169 - C73168 - C73171) * C139286 * C63379 +
                     (C68647 * C9616 + C68761 * C9466 -
                      (C554 * C71165 + C139457 * C71643) * C9617 -
                      (C554 * C71331 + C139457 * C71807) * C139403) *
                         C139286 * C63380) *
                        C825) *
                   C139300) /
                      (p * q * std::sqrt(p + q));
    d2eexx[75] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139286 * C113) * C2702 +
             (C63381 * C116 + C139286 * C125) * C139589 -
             (C63381 * C108 + C139286 * C114) * C2703 -
             (C63381 * C117 + C139286 * C126) * C139590 +
             (C63381 * C109 + C139286 * C115) * C2704 +
             (C63381 * C118 + C139286 * C127) * C2699) *
                C47031 +
            (C65304 + C65305 - C65306 - C65307 + C65324 + C65325) * C139586) *
               C30408 +
           ((C77533 * C2702 + C77534 * C139589 - C77535 * C2703 -
             C77536 * C139590 + (C63381 * C1765 + C139286 * C1773) * C2704 +
             (C63381 * C1775 + C139286 * C1788) * C2699) *
                C47031 +
            (C78529 + C78530 - C78531 - C78532 + C78539 + C78540) * C139586) *
               C139588) *
              C139339 * C139560 +
          (((C65306 - (C65305 + C65304) + C65307 - C65324 - C65325) * C47031 +
            (C65314 - (C65313 + C65312) + C65315 - C65326 - C65327) * C139586) *
               C30408 +
           ((C78531 - (C78530 + C78529) + C78532 - C78539 - C78540) * C47031 +
            (C66726 * C2703 - (C66727 * C139589 + C66728 * C2702) +
             C66729 * C139590 - (C63381 * C8752 + C139286 * C8758) * C2704 -
             (C63381 * C8755 + C139286 * C8761) * C2699) *
                C139586) *
               C139588) *
              C139339 * C139377)) /
        (p * q * std::sqrt(p + q));
    d2eexy[75] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C63381 * C107 + C139286 * C113) * C2783 +
                       (C63381 * C182 + C139286 * C188) * C139560 -
                       C63884 * C2784 - C63997 * C139377) *
                          C47031 +
                      (C63884 * C2783 + C63997 * C139560 - C63888 * C2784 -
                       C63998 * C139377) *
                          C139586) *
                         C30408 +
                     ((C77533 * C2783 + C77672 * C139560 - C66724 * C2784 -
                       C66844 * C139377) *
                          C47031 +
                      (C66724 * C2783 + C66844 * C139560 - C66728 * C2784 -
                       C66845 * C139377) *
                          C139586) *
                         C139588) *
                        C139589 +
                    (((C63886 * C2784 -
                       ((C63381 * C183 + C139286 * C189) * C139560 +
                        (C63381 * C108 + C139286 * C114) * C2783) +
                       C64000 * C139377) *
                          C47031 +
                      (C63890 * C2784 - (C64000 * C139560 + C63886 * C2783) +
                       C64001 * C139377) *
                          C139586) *
                         C30408 +
                     ((C66722 * C2784 - (C77673 * C139560 + C77535 * C2783) +
                       C66846 * C139377) *
                          C47031 +
                      (C66726 * C2784 - (C66846 * C139560 + C66722 * C2783) +
                       C66847 * C139377) *
                          C139586) *
                         C139588) *
                        C139590 +
                    ((((C63381 * C109 + C139286 * C115) * C2783 +
                       (C63381 * C184 + C139286 * C190) * C139560 -
                       C65320 * C2784 - C65406 * C139377) *
                          C47031 +
                      (C65320 * C2783 + C65406 * C139560 - C65322 * C2784 -
                       C65407 * C139377) *
                          C139586) *
                         C30408 +
                     (((C63381 * C1765 + C139286 * C1773) * C2783 +
                       (C63381 * C1871 + C139286 * C1879) * C139560 -
                       C78537 * C2784 - C78641 * C139377) *
                          C47031 +
                      (C78537 * C2783 + C78641 * C139560 -
                       (C63381 * C8752 + C139286 * C8758) * C2784 -
                       (C63381 * C8838 + C139286 * C8841) * C139377) *
                          C139586) *
                         C139588) *
                        C2699) *
                   C139339) /
                  (p * q * std::sqrt(p + q));
    d2eexz[75] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C63381 * C107 + C139286 * C113) * C244 +
              (C63381 * C245 + C139286 * C251) * C139339) *
                 C47031 +
             (C64077 + C64101) * C139586) *
                C30408 +
            ((C77533 * C244 + C77790 * C139339) * C47031 +
             (C76769 + C76770) * C139586) *
                C139588) *
               C139560 -
           (((C76771 + C76772) * C139586 + (C76770 + C76769) * C47031) *
                C139588 +
            ((C64102 + C64080) * C139586 + (C64101 + C64077) * C47031) *
                C30408) *
               C139377) *
              C139589 +
          ((((C64086 + C64104) * C47031 + (C64089 + C64105) * C139586) *
                C30408 +
            ((C76773 + C76774) * C47031 + (C76775 + C76776) * C139586) *
                C139588) *
               C139377 -
           (((C76774 + C76773) * C139586 +
             (C77792 * C139339 + C77535 * C244) * C47031) *
                C139588 +
            ((C64104 + C64086) * C139586 +
             ((C63381 * C246 + C139286 * C252) * C139339 +
              (C63381 * C108 + C139286 * C114) * C244) *
                 C47031) *
                C30408) *
               C139560) *
              C139590 +
          (((((C63381 * C109 + C139286 * C115) * C244 +
              (C63381 * C247 + C139286 * C253) * C139339) *
                 C47031 +
             (C65482 + C65490) * C139586) *
                C30408 +
            (((C63381 * C1765 + C139286 * C1773) * C244 +
              (C63381 * C1963 + C139286 * C1971) * C139339) *
                 C47031 +
             (C78740 + C78744) * C139586) *
                C139588) *
               C139560 -
           ((((C63381 * C8918 + C139286 * C8921) * C139339 +
              (C63381 * C8752 + C139286 * C8758) * C244) *
                 C139586 +
             (C78744 + C78740) * C47031) *
                C139588 +
            ((C65491 + C65485) * C139586 + (C65490 + C65482) * C47031) *
                C30408) *
               C139377) *
              C2699)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[75] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C831 + C139586 * C1118) *
                C2702 +
            (C47233 * C116 + C47031 * C314 + C47234 * C841 + C139586 * C1125) *
                C139589 -
            (C47260 + C47261) * C2703 - (C47262 + C47263) * C139590 +
            (C47264 + C47265) * C2704 + (C47266 + C47267) * C2699) *
               C30408 +
           ((C77909 + C77910) * C2702 + (C77911 + C77912) * C139589 -
            (C49073 + C49072) * C2703 - (C49075 + C49074) * C139590 +
            (C50925 + C50924) * C2704 + (C50927 + C50926) * C2699) *
               C139588) *
              C139286 * C139339 * C139560 +
          (((C48142 + C48143) * C2703 -
            ((C47234 * C847 + C139586 * C1129 + C47233 * C841 +
              C47031 * C1125) *
                 C139589 +
             (C47234 * C832 + C139586 * C1121 + C47233 * C831 +
              C47031 * C1118) *
                 C2702) +
            (C48144 + C48145) * C139590 - (C50018 + C50019) * C2704 -
            (C50020 + C50021) * C2699) *
               C30408 +
           ((C52007 + C52006) * C2703 -
            ((C47234 * C8757 + C139586 * C9003 + C47233 * C4230 +
              C47031 * C4553) *
                 C139589 +
             (C47234 * C8754 + C139586 * C9000 + C47233 * C4223 +
              C47031 * C4549) *
                 C2702) +
            (C52009 + C52008) * C139590 -
            (C47234 * C8752 + C139586 * C8998 + C47233 * C4225 +
             C47031 * C4551) *
                C2704 -
            (C47234 * C8755 + C139586 * C9001 + C47233 * C4232 +
             C47031 * C4555) *
                C2699) *
               C139588) *
              C139286 * C139339 * C139377)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[75] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C831 + C139586 * C1118) *
                C2783 +
            (C47233 * C182 + C47031 * C394 + C47234 * C939 + C139586 * C1231) *
                C139560 -
            (C47234 * C832 + C139586 * C1121 + C47233 * C831 + C47031 * C1118) *
                C2784 -
            (C47234 * C940 + C139586 * C1232 + C47233 * C939 + C47031 * C1231) *
                C139377) *
               C30408 +
           ((C77909 + C77910) * C2783 + (C78023 + C78024) * C139560 -
            (C47234 * C8754 + C139586 * C9000 + C47233 * C4223 +
             C47031 * C4549) *
                C2784 -
            (C47234 * C8840 + C139586 * C9078 + C47233 * C4337 +
             C47031 * C4667) *
                C139377) *
               C139588) *
              C139286 * C139589 +
          (((C48142 + C48143) * C2784 -
            ((C47351 + C47350) * C139560 + (C47260 + C47261) * C2783) +
            (C48257 + C48256) * C139377) *
               C30408 +
           ((C52007 + C52006) * C2784 -
            ((C49187 + C49186) * C139560 + (C49073 + C49072) * C2783) +
            (C52144 + C52145) * C139377) *
               C139588) *
              C139286 * C139590 +
          (((C47264 + C47265) * C2783 + (C47353 + C47352) * C139560 -
            (C50018 + C50019) * C2784 - (C50125 + C50124) * C139377) *
               C30408 +
           ((C50925 + C50924) * C2783 + (C51030 + C51031) * C139560 -
            (C47234 * C8752 + C139586 * C8998 + C47233 * C4225 +
             C47031 * C4551) *
                C2784 -
            (C47234 * C8838 + C139586 * C9080 + C47233 * C4339 +
             C47031 * C4669) *
                C139377) *
               C139588) *
              C139286 * C2699) *
         C139339) /
        (p * q * std::sqrt(p + q));
    d2eeyz[75] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47233 * C107 + C47031 * C308 + C47234 * C831 + C139586 * C1118) *
                 C244 +
             (C47233 * C245 + C47031 * C474 + C47234 * C1029 +
              C139586 * C1339) *
                 C139339) *
                C30408 +
            ((C77909 + C77910) * C244 + (C78134 + C78133) * C139339) *
                C139588) *
               C139286 * C139560 -
           (((C47234 * C8920 + C139586 * C9155 + C47233 * C4443 +
              C47031 * C4783) *
                 C139339 +
             (C47234 * C8754 + C139586 * C9000 + C47233 * C4223 +
              C47031 * C4549) *
                 C244) *
                C139588 +
            ((C47234 * C1030 + C139586 * C1340 + C47233 * C1029 +
              C47031 * C1339) *
                 C139339 +
             (C47234 * C832 + C139586 * C1121 + C47233 * C831 +
              C47031 * C1118) *
                 C244) *
                C30408) *
               C139286 * C139377) *
              C139589 +
          ((((C48142 + C48143) * C244 + (C48367 + C48366) * C139339) * C30408 +
            ((C52007 + C52006) * C244 + (C52280 + C52281) * C139339) *
                C139588) *
               C139286 * C139377 -
           (((C49296 + C49297) * C139339 + (C49073 + C49072) * C244) * C139588 +
            ((C47435 + C47434) * C139339 + (C47260 + C47261) * C244) * C30408) *
               C139286 * C139560) *
              C139590 +
          ((((C47264 + C47265) * C244 + (C47437 + C47436) * C139339) * C30408 +
            ((C50925 + C50924) * C244 + (C51134 + C51135) * C139339) *
                C139588) *
               C139286 * C139560 -
           (((C47234 * C8918 + C139586 * C9157 + C47233 * C4445 +
              C47031 * C4785) *
                 C139339 +
             (C47234 * C8752 + C139586 * C8998 + C47233 * C4225 +
              C47031 * C4551) *
                 C244) *
                C139588 +
            ((C50229 + C50228) * C139339 + (C50018 + C50019) * C244) * C30408) *
               C139286 * C139377) *
              C2699)) /
        (p * q * std::sqrt(p + q));
    d2eezx[75] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1767 + C139588 * C2376) *
                C2702 +
            (C30812 * C116 + C30408 * C561 + C30813 * C1777 + C139588 * C2383) *
                C139589 -
            (C30839 + C30840) * C2703 - (C30841 + C30842) * C139590 +
            (C30843 + C30844) * C2704 + (C30845 + C30846) * C2699) *
               C139286 * C47031 +
           ((C77185 + C77186) * C2702 + (C77187 + C77188) * C139589 -
            (C31744 + C31743) * C2703 - (C31746 + C31745) * C139590 +
            (C33762 + C33761) * C2704 + (C33764 + C33763) * C2699) *
               C139286 * C139586) *
              C139339 * C139560 +
          (((C31743 + C31744) * C2703 -
            ((C77188 + C77187) * C139589 + (C77186 + C77185) * C2702) +
            (C31745 + C31746) * C139590 - (C33761 + C33762) * C2704 -
            (C33763 + C33764) * C2699) *
               C139286 * C47031 +
           ((C31748 + C31747) * C2703 -
            ((C77189 + C77190) * C139589 + (C77191 + C77192) * C2702) +
            (C31750 + C31749) * C139590 -
            (C30813 * C8752 + C139588 * C9232 + C30812 * C834 +
             C30408 * C1445) *
                C2704 -
            (C30813 * C8755 + C139588 * C9235 + C30812 * C849 +
             C30408 * C1453) *
                C2699) *
               C139286 * C139586) *
              C139339 * C139377)) /
        (p * q * std::sqrt(p + q));
    d2eezy[75] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1767 + C139588 * C2376) *
                C2783 +
            (C30812 * C182 + C30408 * C641 + C30813 * C1873 + C139588 * C2492) *
                C139560 -
            (C77186 + C77185) * C2784 - (C77299 + C77300) * C139377) *
               C139286 * C47031 +
           ((C77185 + C77186) * C2783 + (C77300 + C77299) * C139560 -
            (C77191 + C77192) * C2784 - (C77302 + C77301) * C139377) *
               C139286 * C139586) *
              C139589 +
          (((C31743 + C31744) * C2784 -
            ((C30930 + C30929) * C139560 + (C30839 + C30840) * C2783) +
            (C31858 + C31857) * C139377) *
               C139286 * C47031 +
           ((C31748 + C31747) * C2784 -
            ((C31857 + C31858) * C139560 + (C31744 + C31743) * C2783) +
            (C31859 + C31860) * C139377) *
               C139286 * C139586) *
              C139590 +
          (((C30843 + C30844) * C2783 + (C30932 + C30931) * C139560 -
            (C33761 + C33762) * C2784 - (C33868 + C33867) * C139377) *
               C139286 * C47031 +
           ((C33762 + C33761) * C2783 + (C33867 + C33868) * C139560 -
            (C30813 * C8752 + C139588 * C9232 + C30812 * C834 +
             C30408 * C1445) *
                C2784 -
            (C30813 * C8838 + C139588 * C9314 + C30812 * C942 +
             C30408 * C1558) *
                C139377) *
               C139286 * C139586) *
              C2699) *
         C139339) /
        (p * q * std::sqrt(p + q));
    d2eezz[75] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C30812 * C107 + C30408 * C555 + C30813 * C1767 +
                        C139588 * C2376) *
                           C244 +
                       (C30812 * C245 + C30408 * C719 + C30813 * C1965 +
                        C139588 * C2591) *
                           C139339) *
                          C139286 * C47031 +
                      ((C77185 + C77186) * C244 + (C77409 + C77410) * C139339) *
                          C139286 * C139586) *
                         C139560 -
                     (((C77411 + C77412) * C139339 + (C77191 + C77192) * C244) *
                          C139286 * C139586 +
                      ((C77410 + C77409) * C139339 + (C77186 + C77185) * C244) *
                          C139286 * C47031) *
                         C139377) *
                        C139589 +
                    ((((C31743 + C31744) * C244 + (C31968 + C31967) * C139339) *
                          C139286 * C47031 +
                      ((C31748 + C31747) * C244 + (C31969 + C31970) * C139339) *
                          C139286 * C139586) *
                         C139377 -
                     (((C31967 + C31968) * C139339 + (C31744 + C31743) * C244) *
                          C139286 * C139586 +
                      ((C31014 + C31013) * C139339 + (C30839 + C30840) * C244) *
                          C139286 * C47031) *
                         C139560) *
                        C139590 +
                    ((((C30843 + C30844) * C244 + (C31016 + C31015) * C139339) *
                          C139286 * C47031 +
                      ((C33762 + C33761) * C244 + (C33971 + C33972) * C139339) *
                          C139286 * C139586) *
                         C139560 -
                     (((C30813 * C8918 + C139588 * C9391 + C30812 * C1032 +
                        C30408 * C1664) *
                           C139339 +
                       (C30813 * C8752 + C139588 * C9232 + C30812 * C834 +
                        C30408 * C1445) *
                           C244) *
                          C139286 * C139586 +
                      ((C33972 + C33971) * C139339 + (C33761 + C33762) * C244) *
                          C139286 * C47031) *
                         C139377) *
                        C2699)) /
                  (p * q * std::sqrt(p + q));
    d2eexx[76] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C63381 * C107 + C139286 * C113) * C826 +
              (C63381 * C116 + C139286 * C125) * C821 -
              (C63381 * C108 + C139286 * C114) * C827 -
              (C63381 * C117 + C139286 * C126) * C139305) *
                 C47031 +
             (C63896 + C63897 - C63898 - C63899) * C139586) *
                C30408 +
            ((C77543 + C77544 - C77545 - C77546) * C47031 + C80371 * C139586) *
                C139588) *
               C139561 +
           (((C77545 - (C77544 + C77543) + C77546) * C47031 +
             C80372 * C139586) *
                C30408 +
            ((C77547 - (C77548 + C77549) + C77550) * C47031 +
             (C77551 - (C77529 + C77530) + C77552) * C139586) *
                C139588) *
               C139403) *
              C139560 +
          ((((C63898 - (C63897 + C63896) + C63899) * C47031 +
             (C63902 - (C63901 + C63900) + C63903) * C139586) *
                C30408 +
            (C80372 * C47031 +
             (C66734 - (C66735 + C66736) + C66737) * C139586) *
                C139588) *
               C139561 +
           ((C80371 * C47031 + (C66736 + C66735 - C66734 - C66737) * C139586) *
                C30408 +
            ((C77530 + C77529 - C77551 - C77552) * C47031 +
             (C68855 * C826 + C68856 * C821 -
              (C63381 * C21078 + C139286 * C21082) * C827 -
              (C63381 * C21080 + C139286 * C21084) * C139305) *
                 C139586) *
                C139588) *
               C139403) *
              C139377)) /
        (p * q * std::sqrt(p + q));
    d2eexy[76] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((((C63381 * C107 + C139286 * C113) * C2783 +
                        (C63381 * C182 + C139286 * C188) * C139560 -
                        C63884 * C2784 - C63997 * C139377) *
                           C47031 +
                       (C63884 * C2783 + C63997 * C139560 - C63888 * C2784 -
                        C63998 * C139377) *
                           C139586) *
                          C30408 +
                      ((C80503 + C80504 - C80505 - C80506) * C47031 +
                       (C80507 + C80508 - C80509 - C80510) * C139586) *
                          C139588) *
                         C821 +
                     (((C63886 * C2784 -
                        ((C63381 * C183 + C139286 * C189) * C139560 +
                         (C63381 * C108 + C139286 * C114) * C2783) +
                        C64000 * C139377) *
                           C47031 +
                       (C63890 * C2784 - (C64000 * C139560 + C63886 * C2783) +
                        C64001 * C139377) *
                           C139586) *
                          C30408 +
                      ((C80511 - (C80512 + C80513) + C80514) * C47031 +
                       (C80515 - (C80516 + C80517) + C80518) * C139586) *
                          C139588) *
                         C139305) *
                        C139561 +
                    ((((C80505 - (C80504 + C80503) + C80506) * C47031 +
                       (C80509 - (C80508 + C80507) + C80510) * C139586) *
                          C30408 +
                      ((C68853 * C2784 - (C77676 * C139560 + C77539 * C2783) +
                        C68941 * C139377) *
                           C47031 +
                       (C68855 * C2784 - (C68941 * C139560 + C68853 * C2783) +
                        C68942 * C139377) *
                           C139586) *
                          C139588) *
                         C821 +
                     (((C80513 + C80512 - C80511 - C80514) * C47031 +
                       (C80517 + C80516 - C80515 - C80518) * C139586) *
                          C30408 +
                      ((C77537 * C2783 + C77674 * C139560 - C77541 * C2784 -
                        C77675 * C139377) *
                           C47031 +
                       (C77541 * C2783 + C77675 * C139560 -
                        (C63381 * C21078 + C139286 * C21082) * C2784 -
                        (C63381 * C21196 + C139286 * C21198) * C139377) *
                           C139586) *
                          C139588) *
                         C139305) *
                        C139403)) /
                  (p * q * std::sqrt(p + q));
    d2eexz[76] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((((C63381 * C107 + C139286 * C113) * C3607 +
                        (C63381 * C245 + C139286 * C251) * C139561 -
                        C77533 * C3608 - C77790 * C139403) *
                           C47031 +
                       (C66946 + C66947 - C66948 - C66970) * C139586) *
                          C30408 +
                      ((C77533 * C3607 + C77790 * C139561 - C77539 * C3608 -
                        C77791 * C139403) *
                           C47031 +
                       (C80649 + C80650 - C80651 - C80652) * C139586) *
                          C139588) *
                         C139560 +
                     (((C66948 - (C66947 + C66946) + C66970) * C47031 +
                       (C66953 - (C66952 + C66951) + C66971) * C139586) *
                          C30408 +
                      ((C80651 - (C80650 + C80649) + C80652) * C47031 +
                       (C68855 * C3608 - (C66967 * C139561 + C66728 * C3607) +
                        C69034 * C139403) *
                           C139586) *
                          C139588) *
                         C139377) *
                        C821 +
                    ((((C77535 * C3608 -
                        ((C63381 * C246 + C139286 * C252) * C139561 +
                         (C63381 * C108 + C139286 * C114) * C3607) +
                        C77792 * C139403) *
                           C47031 +
                       (C66956 - (C66957 + C66958) + C66972) * C139586) *
                          C30408 +
                      ((C77537 * C3608 - (C77792 * C139561 + C77535 * C3607) +
                        C77793 * C139403) *
                           C47031 +
                       (C80653 - (C80654 + C80655) + C80656) * C139586) *
                          C139588) *
                         C139560 +
                     (((C66958 + C66957 - C66956 - C66972) * C47031 +
                       (C66963 + C66962 - C66961 - C66973) * C139586) *
                          C30408 +
                      ((C80655 + C80654 - C80653 - C80656) * C47031 +
                       (C66726 * C3607 + C66969 * C139561 -
                        (C63381 * C21078 + C139286 * C21082) * C3608 -
                        (C63381 * C21304 + C139286 * C21306) * C139403) *
                           C139586) *
                          C139588) *
                         C139377) *
                        C139305)) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[76] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47233 * C107 + C47031 * C308 + C47234 * C831 + C139586 * C1118) *
                 C826 +
             (C47233 * C116 + C47031 * C314 + C47234 * C841 + C139586 * C1125) *
                 C821 -
             (C47260 + C47261) * C827 - (C47262 + C47263) * C139305) *
                C30408 +
            ((C77909 + C77910) * C826 + (C77911 + C77912) * C821 -
             (C49073 + C49072) * C827 - (C49075 + C49074) * C139305) *
                C139588) *
               C139286 * C139561 +
           (((C49072 + C49073) * C827 -
             ((C77912 + C77911) * C821 + (C77910 + C77909) * C826) +
             (C49074 + C49075) * C139305) *
                C30408 +
            ((C49077 + C49076) * C827 -
             ((C77913 + C77914) * C821 + (C77915 + C77916) * C826) +
             (C49079 + C49078) * C139305) *
                C139588) *
               C139286 * C139403) *
              C139560 +
          ((((C48142 + C48143) * C827 -
             ((C47234 * C847 + C139586 * C1129 + C47233 * C841 +
               C47031 * C1125) *
                  C821 +
              (C47234 * C832 + C139586 * C1121 + C47233 * C831 +
               C47031 * C1118) *
                  C826) +
             (C48144 + C48145) * C139305) *
                C30408 +
            ((C52007 + C52006) * C827 -
             ((C80795 + C80796) * C821 + (C80797 + C80798) * C826) +
             (C52009 + C52008) * C139305) *
                C139588) *
               C139286 * C139561 +
           (((C80798 + C80797) * C826 + (C80796 + C80795) * C821 -
             (C52006 + C52007) * C827 - (C52008 + C52009) * C139305) *
                C30408 +
            ((C47233 * C6442 + C47031 * C6688 + C47234 * C21079 +
              C139586 * C21413) *
                 C826 +
             (C47233 * C6445 + C47031 * C6691 + C47234 * C21081 +
              C139586 * C21415) *
                 C821 -
             (C47234 * C21078 + C139586 * C21412 + C47233 * C6441 +
              C47031 * C6687) *
                 C827 -
             (C47234 * C21080 + C139586 * C21414 + C47233 * C6444 +
              C47031 * C6690) *
                 C139305) *
                C139588) *
               C139286 * C139403) *
              C139377)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[76] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47233 * C107 + C47031 * C308 + C47234 * C831 + C139586 * C1118) *
                 C2783 +
             (C47233 * C182 + C47031 * C394 + C47234 * C939 + C139586 * C1231) *
                 C139560 -
             (C47234 * C832 + C139586 * C1121 + C47233 * C831 +
              C47031 * C1118) *
                 C2784 -
             (C47234 * C940 + C139586 * C1232 + C47233 * C939 +
              C47031 * C1231) *
                 C139377) *
                C30408 +
            ((C77909 + C77910) * C2783 + (C78023 + C78024) * C139560 -
             (C80797 + C80798) * C2784 - (C80933 + C80934) * C139377) *
                C139588) *
               C139286 * C821 +
           (((C48142 + C48143) * C2784 -
             ((C47351 + C47350) * C139560 + (C47260 + C47261) * C2783) +
             (C48257 + C48256) * C139377) *
                C30408 +
            ((C52007 + C52006) * C2784 -
             ((C49187 + C49186) * C139560 + (C49073 + C49072) * C2783) +
             (C52144 + C52145) * C139377) *
                C139588) *
               C139286 * C139305) *
              C139561 +
          ((((C80798 + C80797) * C2784 -
             ((C78024 + C78023) * C139560 + (C77910 + C77909) * C2783) +
             (C80934 + C80933) * C139377) *
                C30408 +
            ((C47233 * C6442 + C47031 * C6688 + C47234 * C21079 +
              C139586 * C21413) *
                 C2784 -
             ((C78025 + C78026) * C139560 + (C77915 + C77916) * C2783) +
             (C47233 * C6528 + C47031 * C6766 + C47234 * C21197 +
              C139586 * C21514) *
                 C139377) *
                C139588) *
               C139286 * C821 +
           (((C49072 + C49073) * C2783 + (C49186 + C49187) * C139560 -
             (C52006 + C52007) * C2784 - (C52145 + C52144) * C139377) *
                C30408 +
            ((C49077 + C49076) * C2783 + (C49188 + C49189) * C139560 -
             (C47234 * C21078 + C139586 * C21412 + C47233 * C6441 +
              C47031 * C6687) *
                 C2784 -
             (C47234 * C21196 + C139586 * C21515 + C47233 * C6527 +
              C47031 * C6767) *
                 C139377) *
                C139588) *
               C139286 * C139305) *
              C139403)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[76] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47233 * C107 + C47031 * C308 + C47234 * C831 + C139586 * C1118) *
                 C3607 +
             (C47233 * C245 + C47031 * C474 + C47234 * C1029 +
              C139586 * C1339) *
                 C139561 -
             (C77910 + C77909) * C3608 - (C78133 + C78134) * C139403) *
                C30408 +
            ((C77909 + C77910) * C3607 + (C78134 + C78133) * C139561 -
             (C77915 + C77916) * C3608 - (C78136 + C78135) * C139403) *
                C139588) *
               C139286 * C139560 +
           (((C80798 + C80797) * C3608 -
             ((C47234 * C1030 + C139586 * C1340 + C47233 * C1029 +
               C47031 * C1339) *
                  C139561 +
              (C47234 * C832 + C139586 * C1121 + C47233 * C831 +
               C47031 * C1118) *
                  C3607) +
             (C81069 + C81070) * C139403) *
                C30408 +
            ((C47233 * C6442 + C47031 * C6688 + C47234 * C21079 +
              C139586 * C21413) *
                 C3608 -
             ((C81070 + C81069) * C139561 + (C80797 + C80798) * C3607) +
             (C47233 * C6608 + C47031 * C6843 + C47234 * C21305 +
              C139586 * C21614) *
                 C139403) *
                C139588) *
               C139286 * C139377) *
              C821 +
          ((((C49072 + C49073) * C3608 -
             ((C47435 + C47434) * C139561 + (C47260 + C47261) * C3607) +
             (C49297 + C49296) * C139403) *
                C30408 +
            ((C49077 + C49076) * C3608 -
             ((C49296 + C49297) * C139561 + (C49073 + C49072) * C3607) +
             (C49298 + C49299) * C139403) *
                C139588) *
               C139286 * C139560 +
           (((C48142 + C48143) * C3607 + (C48367 + C48366) * C139561 -
             (C52006 + C52007) * C3608 - (C52281 + C52280) * C139403) *
                C30408 +
            ((C52007 + C52006) * C3607 + (C52280 + C52281) * C139561 -
             (C47234 * C21078 + C139586 * C21412 + C47233 * C6441 +
              C47031 * C6687) *
                 C3608 -
             (C47234 * C21304 + C139586 * C21615 + C47233 * C6607 +
              C47031 * C6844) *
                 C139403) *
                C139588) *
               C139286 * C139377) *
              C139305)) /
        (p * q * std::sqrt(p + q));
    d2eezx[76] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C30812 * C107 + C30408 * C555 + C30813 * C1767 +
                        C139588 * C2376) *
                           C826 +
                       (C30812 * C116 + C30408 * C561 + C30813 * C1777 +
                        C139588 * C2383) *
                           C821 -
                       (C30839 + C30840) * C827 - (C30841 + C30842) * C139305) *
                          C139286 * C47031 +
                      ((C77185 + C77186) * C826 + (C77187 + C77188) * C821 -
                       (C31744 + C31743) * C827 - (C31746 + C31745) * C139305) *
                          C139286 * C139586) *
                         C139561 +
                     (((C32837 + C32838) * C827 -
                       ((C30813 * C1783 + C139588 * C2387 + C30812 * C1777 +
                         C30408 * C2383) *
                            C821 +
                        (C30813 * C1768 + C139588 * C2379 + C30812 * C1767 +
                         C30408 * C2376) *
                            C826) +
                       (C32839 + C32840) * C139305) *
                          C139286 * C47031 +
                      ((C35893 + C35892) * C827 -
                       ((C81209 + C81210) * C821 + (C81211 + C81212) * C826) +
                       (C35895 + C35894) * C139305) *
                          C139286 * C139586) *
                         C139403) *
                        C139560 +
                    ((((C31743 + C31744) * C827 -
                       ((C77188 + C77187) * C821 + (C77186 + C77185) * C826) +
                       (C31745 + C31746) * C139305) *
                          C139286 * C47031 +
                      ((C31748 + C31747) * C827 -
                       ((C77189 + C77190) * C821 + (C77191 + C77192) * C826) +
                       (C31750 + C31749) * C139305) *
                          C139286 * C139586) *
                         C139561 +
                     (((C81212 + C81211) * C826 + (C81210 + C81209) * C821 -
                       (C35892 + C35893) * C827 - (C35894 + C35895) * C139305) *
                          C139286 * C47031 +
                      ((C30812 * C8754 + C30408 * C9234 + C30813 * C21079 +
                        C139588 * C21715) *
                           C826 +
                       (C30812 * C8757 + C30408 * C9237 + C30813 * C21081 +
                        C139588 * C21717) *
                           C821 -
                       (C30813 * C21078 + C139588 * C21714 + C30812 * C8753 +
                        C30408 * C9233) *
                           C827 -
                       (C30813 * C21080 + C139588 * C21716 + C30812 * C8756 +
                        C30408 * C9236) *
                           C139305) *
                          C139286 * C139586) *
                         C139403) *
                        C139377)) /
                  (p * q * std::sqrt(p + q));
    d2eezy[76] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C30812 * C107 + C30408 * C555 + C30813 * C1767 +
              C139588 * C2376) *
                 C2783 +
             (C30812 * C182 + C30408 * C641 + C30813 * C1873 +
              C139588 * C2492) *
                 C139560 -
             (C77186 + C77185) * C2784 - (C77299 + C77300) * C139377) *
                C139286 * C47031 +
            ((C77185 + C77186) * C2783 + (C77300 + C77299) * C139560 -
             (C77191 + C77192) * C2784 - (C77302 + C77301) * C139377) *
                C139286 * C139586) *
               C821 +
           (((C31743 + C31744) * C2784 -
             ((C30930 + C30929) * C139560 + (C30839 + C30840) * C2783) +
             (C31858 + C31857) * C139377) *
                C139286 * C47031 +
            ((C31748 + C31747) * C2784 -
             ((C31857 + C31858) * C139560 + (C31744 + C31743) * C2783) +
             (C31859 + C31860) * C139377) *
                C139286 * C139586) *
               C139305) *
              C139561 +
          ((((C81212 + C81211) * C2784 -
             ((C30813 * C1874 + C139588 * C2493 + C30812 * C1873 +
               C30408 * C2492) *
                  C139560 +
              (C30813 * C1768 + C139588 * C2379 + C30812 * C1767 +
               C30408 * C2376) *
                  C2783) +
             (C81347 + C81348) * C139377) *
                C139286 * C47031 +
            ((C30812 * C8754 + C30408 * C9234 + C30813 * C21079 +
              C139588 * C21715) *
                 C2784 -
             ((C81348 + C81347) * C139560 + (C81211 + C81212) * C2783) +
             (C30812 * C8840 + C30408 * C9312 + C30813 * C21197 +
              C139588 * C21830) *
                 C139377) *
                C139286 * C139586) *
               C821 +
           (((C32837 + C32838) * C2783 + (C32951 + C32952) * C139560 -
             (C35892 + C35893) * C2784 - (C36031 + C36030) * C139377) *
                C139286 * C47031 +
            ((C35893 + C35892) * C2783 + (C36030 + C36031) * C139560 -
             (C30813 * C21078 + C139588 * C21714 + C30812 * C8753 +
              C30408 * C9233) *
                 C2784 -
             (C30813 * C21196 + C139588 * C21831 + C30812 * C8839 +
              C30408 * C9313) *
                 C139377) *
                C139286 * C139586) *
               C139305) *
              C139403)) /
        (p * q * std::sqrt(p + q));
    d2eezz[76] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C30812 * C107 + C30408 * C555 + C30813 * C1767 +
              C139588 * C2376) *
                 C3607 +
             (C30812 * C245 + C30408 * C719 + C30813 * C1965 +
              C139588 * C2591) *
                 C139561 -
             (C30813 * C1768 + C139588 * C2379 + C30812 * C1767 +
              C30408 * C2376) *
                 C3608 -
             (C30813 * C1966 + C139588 * C2592 + C30812 * C1965 +
              C30408 * C2591) *
                 C139403) *
                C139286 * C47031 +
            ((C77185 + C77186) * C3607 + (C77409 + C77410) * C139561 -
             (C81211 + C81212) * C3608 - (C81483 + C81484) * C139403) *
                C139286 * C139586) *
               C139560 +
           (((C81212 + C81211) * C3608 -
             ((C77410 + C77409) * C139561 + (C77186 + C77185) * C3607) +
             (C81484 + C81483) * C139403) *
                C139286 * C47031 +
            ((C30812 * C8754 + C30408 * C9234 + C30813 * C21079 +
              C139588 * C21715) *
                 C3608 -
             ((C77411 + C77412) * C139561 + (C77191 + C77192) * C3607) +
             (C30812 * C8920 + C30408 * C9389 + C30813 * C21305 +
              C139588 * C21933) *
                 C139403) *
                C139286 * C139586) *
               C139377) *
              C821 +
          ((((C32837 + C32838) * C3608 -
             ((C31014 + C31013) * C139561 + (C30839 + C30840) * C3607) +
             (C33062 + C33061) * C139403) *
                C139286 * C47031 +
            ((C35893 + C35892) * C3608 -
             ((C31967 + C31968) * C139561 + (C31744 + C31743) * C3607) +
             (C36166 + C36167) * C139403) *
                C139286 * C139586) *
               C139560 +
           (((C31743 + C31744) * C3607 + (C31968 + C31967) * C139561 -
             (C35892 + C35893) * C3608 - (C36167 + C36166) * C139403) *
                C139286 * C47031 +
            ((C31748 + C31747) * C3607 + (C31969 + C31970) * C139561 -
             (C30813 * C21078 + C139588 * C21714 + C30812 * C8753 +
              C30408 * C9233) *
                 C3608 -
             (C30813 * C21304 + C139588 * C21934 + C30812 * C8919 +
              C30408 * C9390) *
                 C139403) *
                C139286 * C139586) *
               C139377) *
              C139305)) /
        (p * q * std::sqrt(p + q));
    d2eexx[77] +=
        (-std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139286 * C113) * C826 +
             (C63381 * C116 + C139286 * C125) * C821 -
             (C63381 * C108 + C139286 * C114) * C827 -
             (C63381 * C117 + C139286 * C126) * C139305) *
                C47031 +
            (C63896 + C63897 - C63898 - C63899) * C139586) *
               C30408 +
           (((C63381 * C1767 + C139286 * C1778) * C826 +
             (C63381 * C1777 + C139286 * C1790) * C821 -
             (C63381 * C1764 + C139286 * C1772) * C827 -
             (C63381 * C1776 + C139286 * C1789) * C139305) *
                C47031 +
            (C66732 + C66731 - C66730 - C66733) * C139586) *
               C139588) *
              C139339 * C823 +
          (((C63898 - (C63897 + C63896) + C63899) * C47031 +
            (C63902 - (C63901 + C63900) + C63903) * C139586) *
               C30408 +
           ((C66730 - (C66731 + C66732) + C66733) * C47031 +
            (C66734 - (C66735 + C66736) + C66737) * C139586) *
               C139588) *
              C139339 * C824 +
          ((C63910 * C47031 + (C63906 + C63905 - C63904 - C63907) * C139586) *
               C30408 +
           ((C66736 + C66735 - C66734 - C66737) * C47031 +
            (C71175 * C826 + C71176 * C821 -
             (C63381 * C24128 + C139286 * C24132) * C827 -
             (C63381 * C24130 + C139286 * C24134) * C139305) *
                C139586) *
               C139588) *
              C139339 * C825)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139286 * C113) * C103 +
            (C63381 * C116 + C139286 * C125) * C92 -
            (C63381 * C108 + C139286 * C114) * C104 -
            (C63381 * C117 + C139286 * C126) * C93 +
            (C63381 * C109 + C139286 * C115) * C105 +
            (C63381 * C118 + C139286 * C127) * C94 -
            (C63381 * C110 + C139286 * C119) * C106 -
            (C63381 * C120 + C139286 * C128) * C95) *
               C47031 +
           (C63884 * C103 + C63885 * C92 - C63886 * C104 - C63887 * C93 +
            C65320 * C105 + C65321 * C94 -
            (C63381 * C830 + C139286 * C838) * C106 -
            (C63381 * C843 + C139286 * C855) * C95) *
               C139586) *
              C30408 +
          (((C63381 * C1767 + C139286 * C1778) * C103 +
            (C63381 * C1777 + C139286 * C1790) * C92 -
            (C63381 * C1764 + C139286 * C1772) * C104 -
            (C63381 * C1776 + C139286 * C1789) * C93 +
            (C63381 * C1765 + C139286 * C1773) * C105 +
            (C63381 * C1775 + C139286 * C1788) * C94 -
            (C63381 * C1766 + C139286 * C1774) * C106 -
            (C63381 * C1779 + C139286 * C1791) * C95) *
               C47031 +
           (C66724 * C103 + C66723 * C92 - C66722 * C104 - C66725 * C93 +
            (C63381 * C4225 + C139286 * C4229) * C105 +
            (C63381 * C4232 + C139286 * C4237) * C94 -
            (C63381 * C4226 + C139286 * C4233) * C106 -
            (C63381 * C4234 + C139286 * C4238) * C95) *
               C139586) *
              C139588) *
         C139339 * C139328) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139286 * C113) * C826 +
             (C63381 * C116 + C139286 * C125) * C821 -
             (C63381 * C108 + C139286 * C114) * C827 -
             (C63381 * C117 + C139286 * C126) * C139305) *
                C47031 +
            (C63896 + C63897 - C63898 - C63899) * C139586) *
               C30408 +
           ((C77543 + C77544 - C77545 - C77546) * C47031 +
            (C66732 + C66731 - C66730 - C66733) * C139586) *
               C139588) *
              C1761 +
          (((C77545 - (C77544 + C77543) + C77546) * C47031 +
            (C66730 - (C66731 + C66732) + C66733) * C139586) *
               C30408 +
           ((C77547 - (C77548 + C77549) + C77550) * C47031 +
            (C77551 - (C77529 + C77530) + C77552) * C139586) *
               C139588) *
              C1762 +
          (((C77549 + C77548 - C77547 - C77550) * C47031 +
            (C77530 + C77529 - C77551 - C77552) * C139586) *
               C30408 +
           (((C63381 * C10815 + C139286 * C10821) * C826 +
             (C63381 * C10818 + C139286 * C10824) * C821 -
             (C63381 * C10814 + C139286 * C10820) * C827 -
             (C63381 * C10817 + C139286 * C10823) * C139305) *
                C47031 +
            ((C63381 * C26831 + C139286 * C26835) * C826 +
             (C63381 * C26833 + C139286 * C26837) * C821 -
             (C63381 * C26830 + C139286 * C26834) * C827 -
             (C63381 * C26832 + C139286 * C26836) * C139305) *
                C139586) *
               C139588) *
              C1763) *
         C139328) /
            (p * q * std::sqrt(p + q));
    d2eexy[77] +=
        (-std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139286 * C113) * C934 +
             (C63381 * C182 + C139286 * C188) * C823 - C63884 * C935 -
             C63997 * C824 + C63888 * C936 + C63998 * C825) *
                C47031 +
            (C63884 * C934 + C63997 * C823 - C63888 * C935 - C63998 * C824 +
             C63894 * C936 + C63999 * C825) *
                C139586) *
               C30408 +
           (((C63381 * C1767 + C139286 * C1778) * C934 +
             (C63381 * C1873 + C139286 * C1881) * C823 - C66724 * C935 -
             C66844 * C824 + C66728 * C936 + C66845 * C825) *
                C47031 +
            (C66724 * C934 + C66844 * C823 - C66728 * C935 - C66845 * C824 +
             C71175 * C936 + C71257 * C825) *
                C139586) *
               C139588) *
              C821 +
          (((C63886 * C935 -
             ((C63381 * C183 + C139286 * C189) * C823 +
              (C63381 * C108 + C139286 * C114) * C934) +
             C64000 * C824 - C63890 * C936 - C64001 * C825) *
                C47031 +
            (C63890 * C935 - (C64000 * C823 + C63886 * C934) + C64001 * C824 -
             C63892 * C936 - C64002 * C825) *
                C139586) *
               C30408 +
           ((C66722 * C935 -
             ((C63381 * C1870 + C139286 * C1878) * C823 +
              (C63381 * C1764 + C139286 * C1772) * C934) +
             C66846 * C824 - C66726 * C936 - C66847 * C825) *
                C47031 +
            (C66726 * C935 - (C66846 * C823 + C66722 * C934) + C66847 * C824 -
             (C63381 * C24128 + C139286 * C24132) * C936 -
             (C63381 * C24246 + C139286 * C24248) * C825) *
                C139586) *
               C139588) *
              C139305) *
         C139339) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139286 * C113) * C181 +
             (C63381 * C182 + C139286 * C188) * C139328) *
                C47031 +
            (C63884 * C181 + C63997 * C139328) * C139586) *
               C30408 +
           (((C63381 * C1767 + C139286 * C1778) * C181 +
             (C63381 * C1873 + C139286 * C1881) * C139328) *
                C47031 +
            (C66724 * C181 + C66844 * C139328) * C139586) *
               C139588) *
              C92 -
          (((C66846 * C139328 + C66722 * C181) * C139586 +
            ((C63381 * C1870 + C139286 * C1878) * C139328 +
             (C63381 * C1764 + C139286 * C1772) * C181) *
                C47031) *
               C139588 +
           ((C64000 * C139328 + C63886 * C181) * C139586 +
            ((C63381 * C183 + C139286 * C189) * C139328 +
             (C63381 * C108 + C139286 * C114) * C181) *
                C47031) *
               C30408) *
              C93 +
          ((((C63381 * C109 + C139286 * C115) * C181 +
             (C63381 * C184 + C139286 * C190) * C139328) *
                C47031 +
            (C65320 * C181 + C65406 * C139328) * C139586) *
               C30408 +
           (((C63381 * C1765 + C139286 * C1773) * C181 +
             (C63381 * C1871 + C139286 * C1879) * C139328) *
                C47031 +
            ((C63381 * C4225 + C139286 * C4229) * C181 +
             (C63381 * C4339 + C139286 * C4343) * C139328) *
                C139586) *
               C139588) *
              C94 -
          ((((C63381 * C4340 + C139286 * C4344) * C139328 +
             (C63381 * C4226 + C139286 * C4233) * C181) *
                C139586 +
            ((C63381 * C1872 + C139286 * C1880) * C139328 +
             (C63381 * C1766 + C139286 * C1774) * C181) *
                C47031) *
               C139588 +
           (((C63381 * C943 + C139286 * C951) * C139328 +
             (C63381 * C830 + C139286 * C838) * C181) *
                C139586 +
            ((C63381 * C185 + C139286 * C191) * C139328 +
             (C63381 * C110 + C139286 * C119) * C181) *
                C47031) *
               C30408) *
              C95) *
         C139339) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((((C63381 * C107 + C139286 * C113) * C181 +
              (C63381 * C182 + C139286 * C188) * C139328) *
                 C47031 +
             (C63884 * C181 + C63997 * C139328) * C139586) *
                C30408 +
            ((C77651 + C77677) * C47031 + (C77654 + C77655) * C139586) *
                C139588) *
               C821 -
           (((C77656 + C77657) * C139586 + (C77678 + C77660) * C47031) *
                C139588 +
            ((C64000 * C139328 + C63886 * C181) * C139586 +
             ((C63381 * C183 + C139286 * C189) * C139328 +
              (C63381 * C108 + C139286 * C114) * C181) *
                 C47031) *
                C30408) *
               C139305) *
              C1761 +
          ((((C77660 + C77678) * C47031 + (C77657 + C77656) * C139586) *
                C30408 +
            ((C77661 + C77679) * C47031 + (C77664 + C77680) * C139586) *
                C139588) *
               C139305 -
           (((C77667 + C77668) * C139586 + (C77681 + C77671) * C47031) *
                C139588 +
            ((C77655 + C77654) * C139586 + (C77677 + C77651) * C47031) *
                C30408) *
               C821) *
              C1762 +
          ((((C77671 + C77681) * C47031 + (C77668 + C77667) * C139586) *
                C30408 +
            (((C63381 * C10815 + C139286 * C10821) * C181 +
              (C63381 * C10877 + C139286 * C10880) * C139328) *
                 C47031 +
             ((C63381 * C26831 + C139286 * C26835) * C181 +
              (C63381 * C26905 + C139286 * C26907) * C139328) *
                 C139586) *
                C139588) *
               C821 -
           ((((C63381 * C26904 + C139286 * C26906) * C139328 +
              (C63381 * C26830 + C139286 * C26834) * C181) *
                 C139586 +
             ((C63381 * C10876 + C139286 * C10879) * C139328 +
              (C63381 * C10814 + C139286 * C10820) * C181) *
                 C47031) *
                C139588 +
            ((C77680 + C77664) * C139586 + (C77679 + C77661) * C47031) *
                C30408) *
               C139305) *
              C1763)) /
            (p * q * std::sqrt(p + q));
    d2eexz[77] +=
        (-std::pow(Pi, 2.5) *
         ((((((C63381 * C107 + C139286 * C113) * C244 +
              (C63381 * C245 + C139286 * C251) * C139339) *
                 C47031 +
             (C64077 + C64101) * C139586) *
                C30408 +
            (((C63381 * C1767 + C139286 * C1778) * C244 +
              (C63381 * C1965 + C139286 * C1973) * C139339) *
                 C47031 +
             (C76769 + C76770) * C139586) *
                C139588) *
               C823 -
           (((C76771 + C76772) * C139586 + (C76770 + C76769) * C47031) *
                C139588 +
            ((C64102 + C64080) * C139586 + (C64101 + C64077) * C47031) *
                C30408) *
               C824 +
           ((C64107 * C47031 + (C64085 + C64103) * C139586) * C30408 +
            ((C76772 + C76771) * C47031 +
             (C71175 * C244 + C71341 * C139339) * C139586) *
                C139588) *
               C825) *
              C821 +
          ((((C64086 + C64104) * C47031 + (C64089 + C64105) * C139586) *
                C30408 +
            ((C76773 + C76774) * C47031 + (C76775 + C76776) * C139586) *
                C139588) *
               C824 -
           (((C76774 + C76773) * C139586 +
             ((C63381 * C1964 + C139286 * C1972) * C139339 +
              (C63381 * C1764 + C139286 * C1772) * C244) *
                 C47031) *
                C139588 +
            ((C64104 + C64086) * C139586 +
             ((C63381 * C246 + C139286 * C252) * C139339 +
              (C63381 * C108 + C139286 * C114) * C244) *
                 C47031) *
                C30408) *
               C823 -
           ((((C63381 * C24354 + C139286 * C24356) * C139339 +
              (C63381 * C24128 + C139286 * C24132) * C244) *
                 C139586 +
             (C76776 + C76775) * C47031) *
                C139588 +
            ((C64106 + C64092) * C139586 + C64108 * C47031) * C30408) *
               C825) *
              C139305)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * (((((C63381 * C107 + C139286 * C113) * C244 +
                                 (C63381 * C245 + C139286 * C251) * C139339) *
                                    C47031 +
                                (C64077 + C64101) * C139586) *
                                   C30408 +
                               (((C63381 * C1767 + C139286 * C1778) * C244 +
                                 (C63381 * C1965 + C139286 * C1973) * C139339) *
                                    C47031 +
                                (C66724 * C244 + C66966 * C139339) * C139586) *
                                   C139588) *
                                  C139328 * C92 -
                              (((C66968 * C139339 + C66722 * C244) * C139586 +
                                ((C63381 * C1964 + C139286 * C1972) * C139339 +
                                 (C63381 * C1764 + C139286 * C1772) * C244) *
                                    C47031) *
                                   C139588 +
                               ((C64104 + C64086) * C139586 +
                                ((C63381 * C246 + C139286 * C252) * C139339 +
                                 (C63381 * C108 + C139286 * C114) * C244) *
                                    C47031) *
                                   C30408) *
                                  C139328 * C93 +
                              ((((C63381 * C109 + C139286 * C115) * C244 +
                                 (C63381 * C247 + C139286 * C253) * C139339) *
                                    C47031 +
                                (C65482 + C65490) * C139586) *
                                   C30408 +
                               (((C63381 * C1765 + C139286 * C1773) * C244 +
                                 (C63381 * C1963 + C139286 * C1971) * C139339) *
                                    C47031 +
                                ((C63381 * C4225 + C139286 * C4229) * C244 +
                                 (C63381 * C4445 + C139286 * C4449) * C139339) *
                                    C139586) *
                                   C139588) *
                                  C139328 * C94 -
                              ((((C63381 * C4446 + C139286 * C4450) * C139339 +
                                 (C63381 * C4226 + C139286 * C4233) * C244) *
                                    C139586 +
                                ((C63381 * C1969 + C139286 * C1977) * C139339 +
                                 (C63381 * C1766 + C139286 * C1774) * C244) *
                                    C47031) *
                                   C139588 +
                               (((C63381 * C1033 + C139286 * C1041) * C139339 +
                                 (C63381 * C830 + C139286 * C838) * C244) *
                                    C139586 +
                                ((C63381 * C248 + C139286 * C254) * C139339 +
                                 (C63381 * C110 + C139286 * C119) * C244) *
                                    C47031) *
                                   C30408) *
                                  C139328 * C95)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139286 * C113) * C1960 +
             (C63381 * C245 + C139286 * C251) * C1761 - C77533 * C1961 -
             C77790 * C1762 + C77539 * C1962 + C77791 * C1763) *
                C47031 +
            (C69019 + C69020 - C69021 - C69022 + C69023 + C69035) * C139586) *
               C30408 +
           ((C77533 * C1960 + C77790 * C1761 - C77539 * C1961 - C77791 * C1762 +
             (C63381 * C10815 + C139286 * C10821) * C1962 +
             (C63381 * C10937 + C139286 * C10940) * C1763) *
                C47031 +
            (C66724 * C1960 + C66966 * C1761 - C68853 * C1961 - C69033 * C1762 +
             (C63381 * C26831 + C139286 * C26835) * C1962 +
             (C63381 * C26975 + C139286 * C26977) * C1763) *
                C139586) *
               C139588) *
              C139328 * C821 +
          (((C77535 * C1961 -
             ((C63381 * C246 + C139286 * C252) * C1761 +
              (C63381 * C108 + C139286 * C114) * C1960) +
             C77792 * C1762 - C77537 * C1962 - C77793 * C1763) *
                C47031 +
            (C66722 * C1961 - (C64098 * C1761 + C63886 * C1960) +
             C66968 * C1762 - C77541 * C1962 - C77794 * C1763) *
                C139586) *
               C30408 +
           ((C77537 * C1961 - (C77792 * C1761 + C77535 * C1960) +
             C77793 * C1762 - (C63381 * C10814 + C139286 * C10820) * C1962 -
             (C63381 * C10936 + C139286 * C10939) * C1763) *
                C47031 +
            (C77541 * C1961 - (C66968 * C1761 + C66722 * C1960) +
             C77794 * C1762 - (C63381 * C26830 + C139286 * C26834) * C1962 -
             (C63381 * C26974 + C139286 * C26976) * C1763) *
                C139586) *
               C139588) *
              C139328 * C139305)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[77] +=
        (-std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C831 + C139586 * C1118) *
                C826 +
            (C47233 * C116 + C47031 * C314 + C47234 * C841 + C139586 * C1125) *
                C821 -
            (C47260 + C47261) * C827 - (C47262 + C47263) * C139305) *
               C30408 +
           ((C47233 * C1767 + C47031 * C2054 + C47234 * C4223 +
             C139586 * C4549) *
                C826 +
            (C47233 * C1777 + C47031 * C2061 + C47234 * C4230 +
             C139586 * C4553) *
                C821 -
            (C49073 + C49072) * C827 - (C49075 + C49074) * C139305) *
               C139588) *
              C139286 * C139339 * C823 +
          (((C48142 + C48143) * C827 -
            ((C47234 * C847 + C139586 * C1129 + C47233 * C841 +
              C47031 * C1125) *
                 C821 +
             (C47234 * C832 + C139586 * C1121 + C47233 * C831 +
              C47031 * C1118) *
                 C826) +
            (C48144 + C48145) * C139305) *
               C30408 +
           ((C52007 + C52006) * C827 -
            ((C47234 * C8757 + C139586 * C9003 + C47233 * C4230 +
              C47031 * C4553) *
                 C821 +
             (C47234 * C8754 + C139586 * C9000 + C47233 * C4223 +
              C47031 * C4549) *
                 C826) +
            (C52009 + C52008) * C139305) *
               C139588) *
              C139286 * C139339 * C824 +
          (((C47233 * C832 + C47031 * C1121 + C47234 * C5916 +
             C139586 * C6094) *
                C826 +
            (C47233 * C847 + C47031 * C1129 + C47234 * C5919 +
             C139586 * C6097) *
                C821 -
            (C48146 + C48147) * C827 - (C48148 + C48149) * C139305) *
               C30408 +
           ((C47233 * C8754 + C47031 * C9000 + C47234 * C24129 +
             C139586 * C24463) *
                C826 +
            (C47233 * C8757 + C47031 * C9003 + C47234 * C24131 +
             C139586 * C24465) *
                C821 -
            (C47234 * C24128 + C139586 * C24462 + C47233 * C8753 +
             C47031 * C8999) *
                C827 -
            (C47234 * C24130 + C139586 * C24464 + C47233 * C8756 +
             C47031 * C9002) *
                C139305) *
               C139588) *
              C139286 * C139339 * C825)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C47233 * C107 + C47031 * C308 + C47234 * C831 + C139586 * C1118) *
               C103 +
           (C47233 * C116 + C47031 * C314 + C47234 * C841 + C139586 * C1125) *
               C92 -
           (C47260 + C47261) * C104 - (C47262 + C47263) * C93 +
           (C47264 + C47265) * C105 + (C47266 + C47267) * C94 -
           (C47268 + C47269) * C106 - (C47270 + C47271) * C95) *
              C30408 +
          ((C47233 * C1767 + C47031 * C2054 + C47234 * C4223 +
            C139586 * C4549) *
               C103 +
           (C47233 * C1777 + C47031 * C2061 + C47234 * C4230 +
            C139586 * C4553) *
               C92 -
           (C49073 + C49072) * C104 - (C49075 + C49074) * C93 +
           (C50925 + C50924) * C105 + (C50927 + C50926) * C94 -
           (C47234 * C4226 + C139586 * C4552 + C47233 * C1766 +
            C47031 * C2056) *
               C106 -
           (C47234 * C4234 + C139586 * C4556 + C47233 * C1779 +
            C47031 * C2064) *
               C95) *
              C139588) *
         C139286 * C139339 * C139328) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C831 + C139586 * C1118) *
                C826 +
            (C47233 * C116 + C47031 * C314 + C47234 * C841 + C139586 * C1125) *
                C821 -
            (C47260 + C47261) * C827 - (C47262 + C47263) * C139305) *
               C30408 +
           ((C77909 + C77910) * C826 + (C77911 + C77912) * C821 -
            (C49073 + C49072) * C827 - (C49075 + C49074) * C139305) *
               C139588) *
              C139286 * C1761 +
          (((C49072 + C49073) * C827 -
            ((C77912 + C77911) * C821 + (C77910 + C77909) * C826) +
            (C49074 + C49075) * C139305) *
               C30408 +
           ((C49077 + C49076) * C827 -
            ((C77913 + C77914) * C821 + (C77915 + C77916) * C826) +
            (C49079 + C49078) * C139305) *
               C139588) *
              C139286 * C1762 +
          (((C77916 + C77915) * C826 + (C77914 + C77913) * C821 -
            (C49076 + C49077) * C827 - (C49078 + C49079) * C139305) *
               C30408 +
           ((C47233 * C10815 + C47031 * C10993 + C47234 * C26831 +
             C139586 * C27045) *
                C826 +
            (C47233 * C10818 + C47031 * C10996 + C47234 * C26833 +
             C139586 * C27047) *
                C821 -
            (C47234 * C26830 + C139586 * C27044 + C47233 * C10814 +
             C47031 * C10992) *
                C827 -
            (C47234 * C26832 + C139586 * C27046 + C47233 * C10817 +
             C47031 * C10995) *
                C139305) *
               C139588) *
              C139286 * C1763) *
         C139328) /
            (p * q * std::sqrt(p + q));
    d2eeyy[77] +=
        (-std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C831 + C139586 * C1118) *
                C934 +
            (C47233 * C182 + C47031 * C394 + C47234 * C939 + C139586 * C1231) *
                C823 -
            (C47234 * C832 + C139586 * C1121 + C47233 * C831 + C47031 * C1118) *
                C935 -
            (C47234 * C940 + C139586 * C1232 + C47233 * C939 + C47031 * C1231) *
                C824 +
            (C47233 * C832 + C47031 * C1121 + C47234 * C5916 +
             C139586 * C6094) *
                C936 +
            (C47233 * C940 + C47031 * C1232 + C47234 * C5982 +
             C139586 * C6148) *
                C825) *
               C30408 +
           ((C47233 * C1767 + C47031 * C2054 + C47234 * C4223 +
             C139586 * C4549) *
                C934 +
            (C47233 * C1873 + C47031 * C2170 + C47234 * C4337 +
             C139586 * C4667) *
                C823 -
            (C47234 * C8754 + C139586 * C9000 + C47233 * C4223 +
             C47031 * C4549) *
                C935 -
            (C47234 * C8840 + C139586 * C9078 + C47233 * C4337 +
             C47031 * C4667) *
                C824 +
            (C47233 * C8754 + C47031 * C9000 + C47234 * C24129 +
             C139586 * C24463) *
                C936 +
            (C47233 * C8840 + C47031 * C9078 + C47234 * C24247 +
             C139586 * C24564) *
                C825) *
               C139588) *
              C139286 * C821 +
          (((C48142 + C48143) * C935 -
            ((C47351 + C47350) * C823 + (C47260 + C47261) * C934) +
            (C48257 + C48256) * C824 - (C48146 + C48147) * C936 -
            (C48259 + C48258) * C825) *
               C30408 +
           ((C52007 + C52006) * C935 -
            ((C49187 + C49186) * C823 + (C49073 + C49072) * C934) +
            (C52144 + C52145) * C824 -
            (C47234 * C24128 + C139586 * C24462 + C47233 * C8753 +
             C47031 * C8999) *
                C936 -
            (C47234 * C24246 + C139586 * C24565 + C47233 * C8839 +
             C47031 * C9079) *
                C825) *
               C139588) *
              C139286 * C139305) *
         C139339) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C831 + C139586 * C1118) *
                C181 +
            (C47233 * C182 + C47031 * C394 + C47234 * C939 + C139586 * C1231) *
                C139328) *
               C30408 +
           ((C47233 * C1767 + C47031 * C2054 + C47234 * C4223 +
             C139586 * C4549) *
                C181 +
            (C47233 * C1873 + C47031 * C2170 + C47234 * C4337 +
             C139586 * C4667) *
                C139328) *
               C139588) *
              C139286 * C92 -
          (((C49187 + C49186) * C139328 + (C49073 + C49072) * C181) * C139588 +
           ((C47351 + C47350) * C139328 + (C47260 + C47261) * C181) * C30408) *
              C139286 * C93 +
          (((C47264 + C47265) * C181 + (C47353 + C47352) * C139328) * C30408 +
           ((C50925 + C50924) * C181 + (C51030 + C51031) * C139328) * C139588) *
              C139286 * C94 -
          (((C47234 * C4340 + C139586 * C4670 + C47233 * C1872 +
             C47031 * C2169) *
                C139328 +
            (C47234 * C4226 + C139586 * C4552 + C47233 * C1766 +
             C47031 * C2056) *
                C181) *
               C139588 +
           ((C47355 + C47354) * C139328 + (C47268 + C47269) * C181) * C30408) *
              C139286 * C95) *
         C139339) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C47233 * C107 + C47031 * C308 + C47234 * C831 + C139586 * C1118) *
                 C181 +
             (C47233 * C182 + C47031 * C394 + C47234 * C939 + C139586 * C1231) *
                 C139328) *
                C30408 +
            ((C77909 + C77910) * C181 + (C78023 + C78024) * C139328) *
                C139588) *
               C139286 * C821 -
           (((C49187 + C49186) * C139328 + (C49073 + C49072) * C181) * C139588 +
            ((C47351 + C47350) * C139328 + (C47260 + C47261) * C181) * C30408) *
               C139286 * C139305) *
              C1761 +
          ((((C49072 + C49073) * C181 + (C49186 + C49187) * C139328) * C30408 +
            ((C49077 + C49076) * C181 + (C49188 + C49189) * C139328) *
                C139588) *
               C139286 * C139305 -
           (((C78025 + C78026) * C139328 + (C77915 + C77916) * C181) * C139588 +
            ((C78024 + C78023) * C139328 + (C77910 + C77909) * C181) * C30408) *
               C139286 * C821) *
              C1762 +
          ((((C77916 + C77915) * C181 + (C78026 + C78025) * C139328) * C30408 +
            ((C47233 * C10815 + C47031 * C10993 + C47234 * C26831 +
              C139586 * C27045) *
                 C181 +
             (C47233 * C10877 + C47031 * C11049 + C47234 * C26905 +
              C139586 * C27115) *
                 C139328) *
                C139588) *
               C139286 * C821 -
           (((C47234 * C26904 + C139586 * C27114 + C47233 * C10876 +
              C47031 * C11048) *
                 C139328 +
             (C47234 * C26830 + C139586 * C27044 + C47233 * C10814 +
              C47031 * C10992) *
                 C181) *
                C139588 +
            ((C49189 + C49188) * C139328 + (C49076 + C49077) * C181) * C30408) *
               C139286 * C139305) *
              C1763)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[77] +=
        (-std::pow(Pi, 2.5) *
         (((((C47233 * C107 + C47031 * C308 + C47234 * C831 + C139586 * C1118) *
                 C244 +
             (C47233 * C245 + C47031 * C474 + C47234 * C1029 +
              C139586 * C1339) *
                 C139339) *
                C30408 +
            ((C47233 * C1767 + C47031 * C2054 + C47234 * C4223 +
              C139586 * C4549) *
                 C244 +
             (C47233 * C1965 + C47031 * C2269 + C47234 * C4443 +
              C139586 * C4783) *
                 C139339) *
                C139588) *
               C139286 * C823 -
           (((C47234 * C8920 + C139586 * C9155 + C47233 * C4443 +
              C47031 * C4783) *
                 C139339 +
             (C47234 * C8754 + C139586 * C9000 + C47233 * C4223 +
              C47031 * C4549) *
                 C244) *
                C139588 +
            ((C47234 * C1030 + C139586 * C1340 + C47233 * C1029 +
              C47031 * C1339) *
                 C139339 +
             (C47234 * C832 + C139586 * C1121 + C47233 * C831 +
              C47031 * C1118) *
                 C244) *
                C30408) *
               C139286 * C824 +
           (((C47233 * C832 + C47031 * C1121 + C47234 * C5916 +
              C139586 * C6094) *
                 C244 +
             (C47233 * C1030 + C47031 * C1340 + C47234 * C6038 +
              C139586 * C6203) *
                 C139339) *
                C30408 +
            ((C47233 * C8754 + C47031 * C9000 + C47234 * C24129 +
              C139586 * C24463) *
                 C244 +
             (C47233 * C8920 + C47031 * C9155 + C47234 * C24355 +
              C139586 * C24664) *
                 C139339) *
                C139588) *
               C139286 * C825) *
              C821 +
          ((((C48142 + C48143) * C244 + (C48367 + C48366) * C139339) * C30408 +
            ((C52007 + C52006) * C244 + (C52280 + C52281) * C139339) *
                C139588) *
               C139286 * C824 -
           (((C49296 + C49297) * C139339 + (C49073 + C49072) * C244) * C139588 +
            ((C47435 + C47434) * C139339 + (C47260 + C47261) * C244) * C30408) *
               C139286 * C823 -
           (((C47234 * C24354 + C139586 * C24665 + C47233 * C8919 +
              C47031 * C9156) *
                 C139339 +
             (C47234 * C24128 + C139586 * C24462 + C47233 * C8753 +
              C47031 * C8999) *
                 C244) *
                C139588 +
            ((C48369 + C48368) * C139339 + (C48146 + C48147) * C244) * C30408) *
               C139286 * C825) *
              C139305)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C831 + C139586 * C1118) *
                C244 +
            (C47233 * C245 + C47031 * C474 + C47234 * C1029 + C139586 * C1339) *
                C139339) *
               C30408 +
           ((C47233 * C1767 + C47031 * C2054 + C47234 * C4223 +
             C139586 * C4549) *
                C244 +
            (C47233 * C1965 + C47031 * C2269 + C47234 * C4443 +
             C139586 * C4783) *
                C139339) *
               C139588) *
              C139286 * C139328 * C92 -
          (((C49296 + C49297) * C139339 + (C49073 + C49072) * C244) * C139588 +
           ((C47435 + C47434) * C139339 + (C47260 + C47261) * C244) * C30408) *
              C139286 * C139328 * C93 +
          (((C47264 + C47265) * C244 + (C47437 + C47436) * C139339) * C30408 +
           ((C50925 + C50924) * C244 + (C51134 + C51135) * C139339) * C139588) *
              C139286 * C139328 * C94 -
          (((C47234 * C4446 + C139586 * C4786 + C47233 * C1969 +
             C47031 * C2275) *
                C139339 +
            (C47234 * C4226 + C139586 * C4552 + C47233 * C1766 +
             C47031 * C2056) *
                C244) *
               C139588 +
           ((C47439 + C47438) * C139339 + (C47268 + C47269) * C244) * C30408) *
              C139286 * C139328 * C95)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C831 + C139586 * C1118) *
                C1960 +
            (C47233 * C245 + C47031 * C474 + C47234 * C1029 + C139586 * C1339) *
                C1761 -
            (C77910 + C77909) * C1961 - (C78133 + C78134) * C1762 +
            (C77916 + C77915) * C1962 + (C78135 + C78136) * C1763) *
               C30408 +
           ((C77909 + C77910) * C1960 + (C78134 + C78133) * C1761 -
            (C77915 + C77916) * C1961 - (C78136 + C78135) * C1762 +
            (C47233 * C10815 + C47031 * C10993 + C47234 * C26831 +
             C139586 * C27045) *
                C1962 +
            (C47233 * C10937 + C47031 * C11100 + C47234 * C26975 +
             C139586 * C27182) *
                C1763) *
               C139588) *
              C139286 * C139328 * C821 +
          (((C49072 + C49073) * C1961 -
            ((C47435 + C47434) * C1761 + (C47260 + C47261) * C1960) +
            (C49297 + C49296) * C1762 - (C49076 + C49077) * C1962 -
            (C49299 + C49298) * C1763) *
               C30408 +
           ((C49077 + C49076) * C1961 -
            ((C49296 + C49297) * C1761 + (C49073 + C49072) * C1960) +
            (C49298 + C49299) * C1762 -
            (C47234 * C26830 + C139586 * C27044 + C47233 * C10814 +
             C47031 * C10992) *
                C1962 -
            (C47234 * C26974 + C139586 * C27183 + C47233 * C10936 +
             C47031 * C11101) *
                C1763) *
               C139588) *
              C139286 * C139328 * C139305)) /
            (p * q * std::sqrt(p + q));
    d2eezx[77] +=
        (-std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1767 + C139588 * C2376) *
                C826 +
            (C30812 * C116 + C30408 * C561 + C30813 * C1777 + C139588 * C2383) *
                C821 -
            (C30839 + C30840) * C827 - (C30841 + C30842) * C139305) *
               C139286 * C47031 +
           ((C77185 + C77186) * C826 + (C77187 + C77188) * C821 -
            (C31744 + C31743) * C827 - (C31746 + C31745) * C139305) *
               C139286 * C139586) *
              C139339 * C823 +
          (((C31743 + C31744) * C827 -
            ((C77188 + C77187) * C821 + (C77186 + C77185) * C826) +
            (C31745 + C31746) * C139305) *
               C139286 * C47031 +
           ((C31748 + C31747) * C827 -
            ((C77189 + C77190) * C821 + (C77191 + C77192) * C826) +
            (C31750 + C31749) * C139305) *
               C139286 * C139586) *
              C139339 * C824 +
          (((C77192 + C77191) * C826 + (C77190 + C77189) * C821 -
            (C31747 + C31748) * C827 - (C31749 + C31750) * C139305) *
               C139286 * C47031 +
           ((C30812 * C5916 + C30408 * C6256 + C30813 * C24129 +
             C139588 * C24765) *
                C826 +
            (C30812 * C5919 + C30408 * C6259 + C30813 * C24131 +
             C139588 * C24767) *
                C821 -
            (C30813 * C24128 + C139588 * C24764 + C30812 * C5915 +
             C30408 * C6255) *
                C827 -
            (C30813 * C24130 + C139588 * C24766 + C30812 * C5918 +
             C30408 * C6258) *
                C139305) *
               C139286 * C139586) *
              C139339 * C825)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C30812 * C107 + C30408 * C555 + C30813 * C1767 + C139588 * C2376) *
               C103 +
           (C30812 * C116 + C30408 * C561 + C30813 * C1777 + C139588 * C2383) *
               C92 -
           (C30839 + C30840) * C104 - (C30841 + C30842) * C93 +
           (C30843 + C30844) * C105 + (C30845 + C30846) * C94 -
           (C30847 + C30848) * C106 - (C30849 + C30850) * C95) *
              C139286 * C47031 +
          ((C30812 * C831 + C30408 * C1440 + C30813 * C4223 + C139588 * C4899) *
               C103 +
           (C30812 * C841 + C30408 * C1447 + C30813 * C4230 + C139588 * C4903) *
               C92 -
           (C31744 + C31743) * C104 - (C31746 + C31745) * C93 +
           (C33762 + C33761) * C105 + (C33764 + C33763) * C94 -
           (C30813 * C4226 + C139588 * C4902 + C30812 * C830 + C30408 * C1442) *
               C106 -
           (C30813 * C4234 + C139588 * C4906 + C30812 * C843 + C30408 * C1450) *
               C95) *
              C139286 * C139586) *
         C139339 * C139328) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1767 + C139588 * C2376) *
                C826 +
            (C30812 * C116 + C30408 * C561 + C30813 * C1777 + C139588 * C2383) *
                C821 -
            (C30839 + C30840) * C827 - (C30841 + C30842) * C139305) *
               C139286 * C47031 +
           ((C77185 + C77186) * C826 + (C77187 + C77188) * C821 -
            (C31744 + C31743) * C827 - (C31746 + C31745) * C139305) *
               C139286 * C139586) *
              C1761 +
          (((C32837 + C32838) * C827 -
            ((C30813 * C1783 + C139588 * C2387 + C30812 * C1777 +
              C30408 * C2383) *
                 C821 +
             (C30813 * C1768 + C139588 * C2379 + C30812 * C1767 +
              C30408 * C2376) *
                 C826) +
            (C32839 + C32840) * C139305) *
               C139286 * C47031 +
           ((C35893 + C35892) * C827 -
            ((C30813 * C6445 + C139588 * C6925 + C30812 * C4230 +
              C30408 * C4903) *
                 C821 +
             (C30813 * C6442 + C139588 * C6922 + C30812 * C4223 +
              C30408 * C4899) *
                 C826) +
            (C35895 + C35894) * C139305) *
               C139286 * C139586) *
              C1762 +
          (((C30812 * C1768 + C30408 * C2379 + C30813 * C10815 +
             C139588 * C11155) *
                C826 +
            (C30812 * C1783 + C30408 * C2387 + C30813 * C10818 +
             C139588 * C11158) *
                C821 -
            (C32841 + C32842) * C827 - (C32843 + C32844) * C139305) *
               C139286 * C47031 +
           ((C30812 * C6442 + C30408 * C6922 + C30813 * C26831 +
             C139588 * C27251) *
                C826 +
            (C30812 * C6445 + C30408 * C6925 + C30813 * C26833 +
             C139588 * C27253) *
                C821 -
            (C30813 * C26830 + C139588 * C27250 + C30812 * C6441 +
             C30408 * C6921) *
                C827 -
            (C30813 * C26832 + C139588 * C27252 + C30812 * C6444 +
             C30408 * C6924) *
                C139305) *
               C139286 * C139586) *
              C1763) *
         C139328) /
            (p * q * std::sqrt(p + q));
    d2eezy[77] +=
        (-std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1767 + C139588 * C2376) *
                C934 +
            (C30812 * C182 + C30408 * C641 + C30813 * C1873 + C139588 * C2492) *
                C823 -
            (C77186 + C77185) * C935 - (C77299 + C77300) * C824 +
            (C77192 + C77191) * C936 + (C77301 + C77302) * C825) *
               C139286 * C47031 +
           ((C77185 + C77186) * C934 + (C77300 + C77299) * C823 -
            (C77191 + C77192) * C935 - (C77302 + C77301) * C824 +
            (C30812 * C5916 + C30408 * C6256 + C30813 * C24129 +
             C139588 * C24765) *
                C936 +
            (C30812 * C5982 + C30408 * C6310 + C30813 * C24247 +
             C139588 * C24876) *
                C825) *
               C139286 * C139586) *
              C821 +
          (((C31743 + C31744) * C935 -
            ((C30930 + C30929) * C823 + (C30839 + C30840) * C934) +
            (C31858 + C31857) * C824 - (C31747 + C31748) * C936 -
            (C31860 + C31859) * C825) *
               C139286 * C47031 +
           ((C31748 + C31747) * C935 -
            ((C31857 + C31858) * C823 + (C31744 + C31743) * C934) +
            (C31859 + C31860) * C824 -
            (C30813 * C24128 + C139588 * C24764 + C30812 * C5915 +
             C30408 * C6255) *
                C936 -
            (C30813 * C24246 + C139588 * C24877 + C30812 * C5981 +
             C30408 * C6311) *
                C825) *
               C139286 * C139586) *
              C139305) *
         C139339) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1767 + C139588 * C2376) *
                C181 +
            (C30812 * C182 + C30408 * C641 + C30813 * C1873 + C139588 * C2492) *
                C139328) *
               C139286 * C47031 +
           ((C30812 * C831 + C30408 * C1440 + C30813 * C4223 +
             C139588 * C4899) *
                C181 +
            (C30812 * C939 + C30408 * C1553 + C30813 * C4337 +
             C139588 * C5017) *
                C139328) *
               C139286 * C139586) *
              C92 -
          (((C31857 + C31858) * C139328 + (C31744 + C31743) * C181) * C139286 *
               C139586 +
           ((C30930 + C30929) * C139328 + (C30839 + C30840) * C181) * C139286 *
               C47031) *
              C93 +
          (((C30843 + C30844) * C181 + (C30932 + C30931) * C139328) * C139286 *
               C47031 +
           ((C33762 + C33761) * C181 + (C33867 + C33868) * C139328) * C139286 *
               C139586) *
              C94 -
          (((C30813 * C4340 + C139588 * C5020 + C30812 * C943 +
             C30408 * C1559) *
                C139328 +
            (C30813 * C4226 + C139588 * C4902 + C30812 * C830 +
             C30408 * C1442) *
                C181) *
               C139286 * C139586 +
           ((C30934 + C30933) * C139328 + (C30847 + C30848) * C181) * C139286 *
               C47031) *
              C95) *
         C139339) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C30812 * C107 + C30408 * C555 + C30813 * C1767 +
              C139588 * C2376) *
                 C181 +
             (C30812 * C182 + C30408 * C641 + C30813 * C1873 +
              C139588 * C2492) *
                 C139328) *
                C139286 * C47031 +
            ((C77185 + C77186) * C181 + (C77300 + C77299) * C139328) * C139286 *
                C139586) *
               C821 -
           (((C31857 + C31858) * C139328 + (C31744 + C31743) * C181) * C139286 *
                C139586 +
            ((C30930 + C30929) * C139328 + (C30839 + C30840) * C181) * C139286 *
                C47031) *
               C139305) *
              C1761 +
          ((((C32837 + C32838) * C181 + (C32951 + C32952) * C139328) * C139286 *
                C47031 +
            ((C35893 + C35892) * C181 + (C36030 + C36031) * C139328) * C139286 *
                C139586) *
               C139305 -
           (((C30813 * C6528 + C139588 * C7000 + C30812 * C4337 +
              C30408 * C5017) *
                 C139328 +
             (C30813 * C6442 + C139588 * C6922 + C30812 * C4223 +
              C30408 * C4899) *
                 C181) *
                C139286 * C139586 +
            ((C30813 * C1874 + C139588 * C2493 + C30812 * C1873 +
              C30408 * C2492) *
                 C139328 +
             (C30813 * C1768 + C139588 * C2379 + C30812 * C1767 +
              C30408 * C2376) *
                 C181) *
                C139286 * C47031) *
               C821) *
              C1762 +
          ((((C30812 * C1768 + C30408 * C2379 + C30813 * C10815 +
              C139588 * C11155) *
                 C181 +
             (C30812 * C1874 + C30408 * C2493 + C30813 * C10877 +
              C139588 * C11211) *
                 C139328) *
                C139286 * C47031 +
            ((C30812 * C6442 + C30408 * C6922 + C30813 * C26831 +
              C139588 * C27251) *
                 C181 +
             (C30812 * C6528 + C30408 * C7000 + C30813 * C26905 +
              C139588 * C27321) *
                 C139328) *
                C139286 * C139586) *
               C821 -
           (((C30813 * C26904 + C139588 * C27320 + C30812 * C6527 +
              C30408 * C7001) *
                 C139328 +
             (C30813 * C26830 + C139588 * C27250 + C30812 * C6441 +
              C30408 * C6921) *
                 C181) *
                C139286 * C139586 +
            ((C32954 + C32953) * C139328 + (C32841 + C32842) * C181) * C139286 *
                C47031) *
               C139305) *
              C1763)) /
            (p * q * std::sqrt(p + q));
    d2eezz[77] +=
        (-std::pow(Pi, 2.5) *
         (((((C30812 * C107 + C30408 * C555 + C30813 * C1767 +
              C139588 * C2376) *
                 C244 +
             (C30812 * C245 + C30408 * C719 + C30813 * C1965 +
              C139588 * C2591) *
                 C139339) *
                C139286 * C47031 +
            ((C77185 + C77186) * C244 + (C77409 + C77410) * C139339) * C139286 *
                C139586) *
               C823 -
           (((C77411 + C77412) * C139339 + (C77191 + C77192) * C244) * C139286 *
                C139586 +
            ((C77410 + C77409) * C139339 + (C77186 + C77185) * C244) * C139286 *
                C47031) *
               C824 +
           (((C77192 + C77191) * C244 + (C77412 + C77411) * C139339) * C139286 *
                C47031 +
            ((C30812 * C5916 + C30408 * C6256 + C30813 * C24129 +
              C139588 * C24765) *
                 C244 +
             (C30812 * C6038 + C30408 * C6365 + C30813 * C24355 +
              C139588 * C24979) *
                 C139339) *
                C139286 * C139586) *
               C825) *
              C821 +
          ((((C31743 + C31744) * C244 + (C31968 + C31967) * C139339) * C139286 *
                C47031 +
            ((C31748 + C31747) * C244 + (C31969 + C31970) * C139339) * C139286 *
                C139586) *
               C824 -
           (((C31967 + C31968) * C139339 + (C31744 + C31743) * C244) * C139286 *
                C139586 +
            ((C31014 + C31013) * C139339 + (C30839 + C30840) * C244) * C139286 *
                C47031) *
               C823 -
           (((C30813 * C24354 + C139588 * C24980 + C30812 * C6037 +
              C30408 * C6364) *
                 C139339 +
             (C30813 * C24128 + C139588 * C24764 + C30812 * C5915 +
              C30408 * C6255) *
                 C244) *
                C139286 * C139586 +
            ((C31970 + C31969) * C139339 + (C31747 + C31748) * C244) * C139286 *
                C47031) *
               C825) *
              C139305)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1767 + C139588 * C2376) *
                C244 +
            (C30812 * C245 + C30408 * C719 + C30813 * C1965 + C139588 * C2591) *
                C139339) *
               C139286 * C47031 +
           ((C30812 * C831 + C30408 * C1440 + C30813 * C4223 +
             C139588 * C4899) *
                C244 +
            (C30812 * C1029 + C30408 * C1661 + C30813 * C4443 +
             C139588 * C5133) *
                C139339) *
               C139286 * C139586) *
              C139328 * C92 -
          (((C31967 + C31968) * C139339 + (C31744 + C31743) * C244) * C139286 *
               C139586 +
           ((C31014 + C31013) * C139339 + (C30839 + C30840) * C244) * C139286 *
               C47031) *
              C139328 * C93 +
          (((C30843 + C30844) * C244 + (C31016 + C31015) * C139339) * C139286 *
               C47031 +
           ((C33762 + C33761) * C244 + (C33971 + C33972) * C139339) * C139286 *
               C139586) *
              C139328 * C94 -
          (((C30813 * C4446 + C139588 * C5136 + C30812 * C1033 +
             C30408 * C1665) *
                C139339 +
            (C30813 * C4226 + C139588 * C4902 + C30812 * C830 +
             C30408 * C1442) *
                C244) *
               C139286 * C139586 +
           ((C31018 + C31017) * C139339 + (C30847 + C30848) * C244) * C139286 *
               C47031) *
              C139328 * C95)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1767 + C139588 * C2376) *
                C1960 +
            (C30812 * C245 + C30408 * C719 + C30813 * C1965 + C139588 * C2591) *
                C1761 -
            (C30813 * C1768 + C139588 * C2379 + C30812 * C1767 +
             C30408 * C2376) *
                C1961 -
            (C30813 * C1966 + C139588 * C2592 + C30812 * C1965 +
             C30408 * C2591) *
                C1762 +
            (C30812 * C1768 + C30408 * C2379 + C30813 * C10815 +
             C139588 * C11155) *
                C1962 +
            (C30812 * C1966 + C30408 * C2592 + C30813 * C10937 +
             C139588 * C11262) *
                C1763) *
               C139286 * C47031 +
           ((C77185 + C77186) * C1960 + (C77409 + C77410) * C1761 -
            (C30813 * C6442 + C139588 * C6922 + C30812 * C4223 +
             C30408 * C4899) *
                C1961 -
            (C30813 * C6608 + C139588 * C7077 + C30812 * C4443 +
             C30408 * C5133) *
                C1762 +
            (C30812 * C6442 + C30408 * C6922 + C30813 * C26831 +
             C139588 * C27251) *
                C1962 +
            (C30812 * C6608 + C30408 * C7077 + C30813 * C26975 +
             C139588 * C27388) *
                C1763) *
               C139286 * C139586) *
              C139328 * C821 +
          (((C32837 + C32838) * C1961 -
            ((C31014 + C31013) * C1761 + (C30839 + C30840) * C1960) +
            (C33062 + C33061) * C1762 - (C32841 + C32842) * C1962 -
            (C33064 + C33063) * C1763) *
               C139286 * C47031 +
           ((C35893 + C35892) * C1961 -
            ((C31967 + C31968) * C1761 + (C31744 + C31743) * C1960) +
            (C36166 + C36167) * C1762 -
            (C30813 * C26830 + C139588 * C27250 + C30812 * C6441 +
             C30408 * C6921) *
                C1962 -
            (C30813 * C26974 + C139588 * C27389 + C30812 * C6607 +
             C30408 * C7078) *
                C1763) *
               C139286 * C139586) *
              C139328 * C139305)) /
            (p * q * std::sqrt(p + q));
    d2eexx[78] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139286 * C113) * C2702 +
             (C63381 * C116 + C139286 * C125) * C139589 -
             (C63381 * C108 + C139286 * C114) * C2703 -
             (C63381 * C117 + C139286 * C126) * C139590 +
             (C63381 * C109 + C139286 * C115) * C2704 +
             (C63381 * C118 + C139286 * C127) * C2699) *
                C47031 +
            (C65304 + C65305 - C65306 - C65307 + C65324 + C65325) * C139586) *
               C30408 +
           ((C79431 + C79432 - C79433 - C79434 + C79441 + C79442) * C47031 +
            (C78529 + C78530 - C78531 - C78532 + C78539 + C78540) * C139586) *
               C139588) *
              C139561 +
          (((C79433 - (C79432 + C79431) + C79434 - C79441 - C79442) * C47031 +
            (C78531 - (C78530 + C78529) + C78532 - C78539 - C78540) * C139586) *
               C30408 +
           ((C77537 * C2703 - (C77538 * C139589 + C77539 * C2702) +
             C77540 * C139590 - (C63381 * C1770 + C139286 * C1782) * C2704 -
             (C63381 * C1785 + C139286 * C1794) * C2699) *
                C47031 +
            (C77541 * C2703 - (C68854 * C139589 + C68853 * C2702) +
             C77542 * C139590 - (C63381 * C6440 + C139286 * C6446) * C2704 -
             (C63381 * C6443 + C139286 * C6449) * C2699) *
                C139586) *
               C139588) *
              C139403) *
         C139328) /
        (p * q * std::sqrt(p + q));
    d2eexy[78] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C63381 * C107 + C139286 * C113) * C181 +
              (C63381 * C182 + C139286 * C188) * C139328) *
                 C47031 +
             (C63884 * C181 + C63997 * C139328) * C139586) *
                C30408 +
            ((C77651 + C77677) * C47031 + (C77654 + C77655) * C139586) *
                C139588) *
               C139589 -
           (((C77656 + C77657) * C139586 + (C77678 + C77660) * C47031) *
                C139588 +
            ((C64000 * C139328 + C63886 * C181) * C139586 +
             ((C63381 * C183 + C139286 * C189) * C139328 +
              (C63381 * C108 + C139286 * C114) * C181) *
                 C47031) *
                C30408) *
               C139590 +
           ((((C63381 * C109 + C139286 * C115) * C181 +
              (C63381 * C184 + C139286 * C190) * C139328) *
                 C47031 +
             (C65320 * C181 + C65406 * C139328) * C139586) *
                C30408 +
            ((C79541 + C79547) * C47031 + (C79544 + C79545) * C139586) *
                C139588) *
               C2699) *
              C139561 +
          ((((C77660 + C77678) * C47031 + (C77657 + C77656) * C139586) *
                C30408 +
            ((C77661 + C77679) * C47031 + (C77664 + C77680) * C139586) *
                C139588) *
               C139590 -
           (((C77667 + C77668) * C139586 + (C77681 + C77671) * C47031) *
                C139588 +
            ((C77655 + C77654) * C139586 + (C77677 + C77651) * C47031) *
                C30408) *
               C139589 -
           ((((C63381 * C6526 + C139286 * C6529) * C139328 +
              (C63381 * C6440 + C139286 * C6446) * C181) *
                 C139586 +
             ((C63381 * C1876 + C139286 * C1884) * C139328 +
              (C63381 * C1770 + C139286 * C1782) * C181) *
                 C47031) *
                C139588 +
            ((C79545 + C79544) * C139586 + (C79547 + C79541) * C47031) *
                C30408) *
               C2699) *
              C139403)) /
        (p * q * std::sqrt(p + q));
    d2eexz[78] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C63381 * C107 + C139286 * C113) * C3607 +
                       (C63381 * C245 + C139286 * C251) * C139561 -
                       C77533 * C3608 - C77790 * C139403) *
                          C47031 +
                      (C66946 + C66947 - C66948 - C66970) * C139586) *
                         C30408 +
                     ((C77533 * C3607 + C77790 * C139561 - C77539 * C3608 -
                       C77791 * C139403) *
                          C47031 +
                      (C66724 * C3607 + C66966 * C139561 - C68853 * C3608 -
                       C69033 * C139403) *
                          C139586) *
                         C139588) *
                        C139328 * C139589 +
                    (((C77535 * C3608 -
                       ((C63381 * C246 + C139286 * C252) * C139561 +
                        (C63381 * C108 + C139286 * C114) * C3607) +
                       C77792 * C139403) *
                          C47031 +
                      (C66956 - (C66957 + C66958) + C66972) * C139586) *
                         C30408 +
                     ((C77537 * C3608 - (C77792 * C139561 + C77535 * C3607) +
                       C77793 * C139403) *
                          C47031 +
                      (C77541 * C3608 - (C66968 * C139561 + C66722 * C3607) +
                       C77794 * C139403) *
                          C139586) *
                         C139588) *
                        C139328 * C139590 +
                    ((((C63381 * C109 + C139286 * C115) * C3607 +
                       (C63381 * C247 + C139286 * C253) * C139561 -
                       C79439 * C3608 - C79648 * C139403) *
                          C47031 +
                      (C65320 * C3607 + C65488 * C139561 - C78537 * C3608 -
                       C78743 * C139403) *
                          C139586) *
                         C30408 +
                     ((C79439 * C3607 + C79648 * C139561 -
                       (C63381 * C1770 + C139286 * C1782) * C3608 -
                       (C63381 * C1968 + C139286 * C1976) * C139403) *
                          C47031 +
                      (C78537 * C3607 + C78743 * C139561 -
                       (C63381 * C6440 + C139286 * C6446) * C3608 -
                       (C63381 * C6606 + C139286 * C6609) * C139403) *
                          C139586) *
                         C139588) *
                        C139328 * C2699)) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[78] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C831 + C139586 * C1118) *
                C2702 +
            (C47233 * C116 + C47031 * C314 + C47234 * C841 + C139586 * C1125) *
                C139589 -
            (C47260 + C47261) * C2703 - (C47262 + C47263) * C139590 +
            (C47264 + C47265) * C2704 + (C47266 + C47267) * C2699) *
               C30408 +
           ((C77909 + C77910) * C2702 + (C77911 + C77912) * C139589 -
            (C49073 + C49072) * C2703 - (C49075 + C49074) * C139590 +
            (C50925 + C50924) * C2704 + (C50927 + C50926) * C2699) *
               C139588) *
              C139286 * C139561 +
          (((C49072 + C49073) * C2703 -
            ((C77912 + C77911) * C139589 + (C77910 + C77909) * C2702) +
            (C49074 + C49075) * C139590 - (C50924 + C50925) * C2704 -
            (C50926 + C50927) * C2699) *
               C30408 +
           ((C49077 + C49076) * C2703 -
            ((C77913 + C77914) * C139589 + (C77915 + C77916) * C2702) +
            (C49079 + C49078) * C139590 -
            (C47234 * C6440 + C139586 * C6686 + C47233 * C1770 +
             C47031 * C2059) *
                C2704 -
            (C47234 * C6443 + C139586 * C6689 + C47233 * C1785 +
             C47031 * C2067) *
                C2699) *
               C139588) *
              C139286 * C139403) *
         C139328) /
        (p * q * std::sqrt(p + q));
    d2eeyy[78] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47233 * C107 + C47031 * C308 + C47234 * C831 + C139586 * C1118) *
                 C181 +
             (C47233 * C182 + C47031 * C394 + C47234 * C939 + C139586 * C1231) *
                 C139328) *
                C30408 +
            ((C77909 + C77910) * C181 + (C78023 + C78024) * C139328) *
                C139588) *
               C139286 * C139589 -
           (((C49187 + C49186) * C139328 + (C49073 + C49072) * C181) * C139588 +
            ((C47351 + C47350) * C139328 + (C47260 + C47261) * C181) * C30408) *
               C139286 * C139590 +
           (((C47264 + C47265) * C181 + (C47353 + C47352) * C139328) * C30408 +
            ((C50925 + C50924) * C181 + (C51030 + C51031) * C139328) *
                C139588) *
               C139286 * C2699) *
              C139561 +
          ((((C49072 + C49073) * C181 + (C49186 + C49187) * C139328) * C30408 +
            ((C49077 + C49076) * C181 + (C49188 + C49189) * C139328) *
                C139588) *
               C139286 * C139590 -
           (((C78025 + C78026) * C139328 + (C77915 + C77916) * C181) * C139588 +
            ((C78024 + C78023) * C139328 + (C77910 + C77909) * C181) * C30408) *
               C139286 * C139589 -
           (((C47234 * C6526 + C139586 * C6768 + C47233 * C1876 +
              C47031 * C2173) *
                 C139328 +
             (C47234 * C6440 + C139586 * C6686 + C47233 * C1770 +
              C47031 * C2059) *
                 C181) *
                C139588 +
            ((C51031 + C51030) * C139328 + (C50924 + C50925) * C181) * C30408) *
               C139286 * C2699) *
              C139403)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[78] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C831 + C139586 * C1118) *
                C3607 +
            (C47233 * C245 + C47031 * C474 + C47234 * C1029 + C139586 * C1339) *
                C139561 -
            (C77910 + C77909) * C3608 - (C78133 + C78134) * C139403) *
               C30408 +
           ((C77909 + C77910) * C3607 + (C78134 + C78133) * C139561 -
            (C77915 + C77916) * C3608 - (C78136 + C78135) * C139403) *
               C139588) *
              C139286 * C139328 * C139589 +
          (((C49072 + C49073) * C3608 -
            ((C47435 + C47434) * C139561 + (C47260 + C47261) * C3607) +
            (C49297 + C49296) * C139403) *
               C30408 +
           ((C49077 + C49076) * C3608 -
            ((C49296 + C49297) * C139561 + (C49073 + C49072) * C3607) +
            (C49298 + C49299) * C139403) *
               C139588) *
              C139286 * C139328 * C139590 +
          (((C47264 + C47265) * C3607 + (C47437 + C47436) * C139561 -
            (C50924 + C50925) * C3608 - (C51135 + C51134) * C139403) *
               C30408 +
           ((C50925 + C50924) * C3607 + (C51134 + C51135) * C139561 -
            (C47234 * C6440 + C139586 * C6686 + C47233 * C1770 +
             C47031 * C2059) *
                C3608 -
            (C47234 * C6606 + C139586 * C6845 + C47233 * C1968 +
             C47031 * C2274) *
                C139403) *
               C139588) *
              C139286 * C139328 * C2699)) /
        (p * q * std::sqrt(p + q));
    d2eezx[78] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1767 + C139588 * C2376) *
                C2702 +
            (C30812 * C116 + C30408 * C561 + C30813 * C1777 + C139588 * C2383) *
                C139589 -
            (C30839 + C30840) * C2703 - (C30841 + C30842) * C139590 +
            (C30843 + C30844) * C2704 + (C30845 + C30846) * C2699) *
               C139286 * C47031 +
           ((C77185 + C77186) * C2702 + (C77187 + C77188) * C139589 -
            (C31744 + C31743) * C2703 - (C31746 + C31745) * C139590 +
            (C33762 + C33761) * C2704 + (C33764 + C33763) * C2699) *
               C139286 * C139586) *
              C139561 +
          (((C32837 + C32838) * C2703 -
            ((C30813 * C1783 + C139588 * C2387 + C30812 * C1777 +
              C30408 * C2383) *
                 C139589 +
             (C30813 * C1768 + C139588 * C2379 + C30812 * C1767 +
              C30408 * C2376) *
                 C2702) +
            (C32839 + C32840) * C139590 - (C34712 + C34713) * C2704 -
            (C34714 + C34715) * C2699) *
               C139286 * C47031 +
           ((C35893 + C35892) * C2703 -
            ((C30813 * C6445 + C139588 * C6925 + C30812 * C4230 +
              C30408 * C4903) *
                 C139589 +
             (C30813 * C6442 + C139588 * C6922 + C30812 * C4223 +
              C30408 * C4899) *
                 C2702) +
            (C35895 + C35894) * C139590 -
            (C30813 * C6440 + C139588 * C6920 + C30812 * C4225 +
             C30408 * C4901) *
                C2704 -
            (C30813 * C6443 + C139588 * C6923 + C30812 * C4232 +
             C30408 * C4905) *
                C2699) *
               C139286 * C139586) *
              C139403) *
         C139328) /
        (p * q * std::sqrt(p + q));
    d2eezy[78] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C30812 * C107 + C30408 * C555 + C30813 * C1767 +
                        C139588 * C2376) *
                           C181 +
                       (C30812 * C182 + C30408 * C641 + C30813 * C1873 +
                        C139588 * C2492) *
                           C139328) *
                          C139286 * C47031 +
                      ((C77185 + C77186) * C181 + (C77300 + C77299) * C139328) *
                          C139286 * C139586) *
                         C139589 -
                     (((C31857 + C31858) * C139328 + (C31744 + C31743) * C181) *
                          C139286 * C139586 +
                      ((C30930 + C30929) * C139328 + (C30839 + C30840) * C181) *
                          C139286 * C47031) *
                         C139590 +
                     (((C30843 + C30844) * C181 + (C30932 + C30931) * C139328) *
                          C139286 * C47031 +
                      ((C33762 + C33761) * C181 + (C33867 + C33868) * C139328) *
                          C139286 * C139586) *
                         C2699) *
                        C139561 +
                    ((((C32837 + C32838) * C181 + (C32951 + C32952) * C139328) *
                          C139286 * C47031 +
                      ((C35893 + C35892) * C181 + (C36030 + C36031) * C139328) *
                          C139286 * C139586) *
                         C139590 -
                     (((C30813 * C6528 + C139588 * C7000 + C30812 * C4337 +
                        C30408 * C5017) *
                           C139328 +
                       (C30813 * C6442 + C139588 * C6922 + C30812 * C4223 +
                        C30408 * C4899) *
                           C181) *
                          C139286 * C139586 +
                      ((C30813 * C1874 + C139588 * C2493 + C30812 * C1873 +
                        C30408 * C2492) *
                           C139328 +
                       (C30813 * C1768 + C139588 * C2379 + C30812 * C1767 +
                        C30408 * C2376) *
                           C181) *
                          C139286 * C47031) *
                         C139589 -
                     (((C30813 * C6526 + C139588 * C7002 + C30812 * C4339 +
                        C30408 * C5019) *
                           C139328 +
                       (C30813 * C6440 + C139588 * C6920 + C30812 * C4225 +
                        C30408 * C4901) *
                           C181) *
                          C139286 * C139586 +
                      ((C34819 + C34818) * C139328 + (C34712 + C34713) * C181) *
                          C139286 * C47031) *
                         C2699) *
                        C139403)) /
                  (p * q * std::sqrt(p + q));
    d2eezz[78] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1767 + C139588 * C2376) *
                C3607 +
            (C30812 * C245 + C30408 * C719 + C30813 * C1965 + C139588 * C2591) *
                C139561 -
            (C30813 * C1768 + C139588 * C2379 + C30812 * C1767 +
             C30408 * C2376) *
                C3608 -
            (C30813 * C1966 + C139588 * C2592 + C30812 * C1965 +
             C30408 * C2591) *
                C139403) *
               C139286 * C47031 +
           ((C77185 + C77186) * C3607 + (C77409 + C77410) * C139561 -
            (C30813 * C6442 + C139588 * C6922 + C30812 * C4223 +
             C30408 * C4899) *
                C3608 -
            (C30813 * C6608 + C139588 * C7077 + C30812 * C4443 +
             C30408 * C5133) *
                C139403) *
               C139286 * C139586) *
              C139328 * C139589 +
          (((C32837 + C32838) * C3608 -
            ((C31014 + C31013) * C139561 + (C30839 + C30840) * C3607) +
            (C33062 + C33061) * C139403) *
               C139286 * C47031 +
           ((C35893 + C35892) * C3608 -
            ((C31967 + C31968) * C139561 + (C31744 + C31743) * C3607) +
            (C36166 + C36167) * C139403) *
               C139286 * C139586) *
              C139328 * C139590 +
          (((C30843 + C30844) * C3607 + (C31016 + C31015) * C139561 -
            (C34712 + C34713) * C3608 - (C34923 + C34922) * C139403) *
               C139286 * C47031 +
           ((C33762 + C33761) * C3607 + (C33971 + C33972) * C139561 -
            (C30813 * C6440 + C139588 * C6920 + C30812 * C4225 +
             C30408 * C4901) *
                C3608 -
            (C30813 * C6606 + C139588 * C7079 + C30812 * C4445 +
             C30408 * C5135) *
                C139403) *
               C139286 * C139586) *
              C139328 * C2699)) /
        (p * q * std::sqrt(p + q));
    d2eexx[79] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139286 * C113) * C103 +
            (C63381 * C116 + C139286 * C125) * C92 -
            (C63381 * C108 + C139286 * C114) * C104 -
            (C63381 * C117 + C139286 * C126) * C93 +
            (C63381 * C109 + C139286 * C115) * C105 +
            (C63381 * C118 + C139286 * C127) * C94 -
            (C63381 * C110 + C139286 * C119) * C106 -
            (C63381 * C120 + C139286 * C128) * C95) *
               C47031 +
           (C63884 * C103 + C63885 * C92 - C63886 * C104 - C63887 * C93 +
            C65320 * C105 + C65321 * C94 -
            (C63381 * C830 + C139286 * C838) * C106 -
            (C63381 * C843 + C139286 * C855) * C95) *
               C139586) *
              C30408 +
          (((C63381 * C1767 + C139286 * C1778) * C103 +
            (C63381 * C1777 + C139286 * C1790) * C92 -
            (C63381 * C1764 + C139286 * C1772) * C104 -
            (C63381 * C1776 + C139286 * C1789) * C93 +
            (C63381 * C1765 + C139286 * C1773) * C105 +
            (C63381 * C1775 + C139286 * C1788) * C94 -
            (C63381 * C1766 + C139286 * C1774) * C106 -
            (C63381 * C1779 + C139286 * C1791) * C95) *
               C47031 +
           (C66724 * C103 + C66723 * C92 - C66722 * C104 - C66725 * C93 +
            (C63381 * C4225 + C139286 * C4229) * C105 +
            (C63381 * C4232 + C139286 * C4237) * C94 -
            (C63381 * C4226 + C139286 * C4233) * C106 -
            (C63381 * C4234 + C139286 * C4238) * C95) *
               C139586) *
              C139588) *
         C139339 * C139328) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139286 * C113) * C826 +
             (C63381 * C116 + C139286 * C125) * C821 -
             (C63381 * C108 + C139286 * C114) * C827 -
             (C63381 * C117 + C139286 * C126) * C139305) *
                C47031 +
            (C63896 + C63897 - C63898 - C63899) * C139586) *
               C30408 +
           (((C63381 * C1767 + C139286 * C1778) * C826 +
             (C63381 * C1777 + C139286 * C1790) * C821 -
             (C63381 * C1764 + C139286 * C1772) * C827 -
             (C63381 * C1776 + C139286 * C1789) * C139305) *
                C47031 +
            (C66732 + C66731 - C66730 - C66733) * C139586) *
               C139588) *
              C139339 * C823 +
          (((C63898 - (C63897 + C63896) + C63899) * C47031 +
            (C63902 - (C63901 + C63900) + C63903) * C139586) *
               C30408 +
           ((C66730 - (C66731 + C66732) + C66733) * C47031 +
            (C66734 - (C66735 + C66736) + C66737) * C139586) *
               C139588) *
              C139339 * C824 +
          ((C63910 * C47031 + (C63906 + C63905 - C63904 - C63907) * C139586) *
               C30408 +
           ((C66736 + C66735 - C66734 - C66737) * C47031 +
            (C71175 * C826 + C71176 * C821 -
             (C63381 * C24128 + C139286 * C24132) * C827 -
             (C63381 * C24130 + C139286 * C24134) * C139305) *
                C139586) *
               C139588) *
              C139339 * C825)) /
            (p * q * std::sqrt(p + q));
    d2eexy[79] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139286 * C113) * C181 +
             (C63381 * C182 + C139286 * C188) * C139328) *
                C47031 +
            (C63884 * C181 + C63997 * C139328) * C139586) *
               C30408 +
           (((C63381 * C1767 + C139286 * C1778) * C181 +
             (C63381 * C1873 + C139286 * C1881) * C139328) *
                C47031 +
            (C66724 * C181 + C66844 * C139328) * C139586) *
               C139588) *
              C92 -
          (((C66846 * C139328 + C66722 * C181) * C139586 +
            ((C63381 * C1870 + C139286 * C1878) * C139328 +
             (C63381 * C1764 + C139286 * C1772) * C181) *
                C47031) *
               C139588 +
           ((C64000 * C139328 + C63886 * C181) * C139586 +
            ((C63381 * C183 + C139286 * C189) * C139328 +
             (C63381 * C108 + C139286 * C114) * C181) *
                C47031) *
               C30408) *
              C93 +
          ((((C63381 * C109 + C139286 * C115) * C181 +
             (C63381 * C184 + C139286 * C190) * C139328) *
                C47031 +
            (C65320 * C181 + C65406 * C139328) * C139586) *
               C30408 +
           (((C63381 * C1765 + C139286 * C1773) * C181 +
             (C63381 * C1871 + C139286 * C1879) * C139328) *
                C47031 +
            ((C63381 * C4225 + C139286 * C4229) * C181 +
             (C63381 * C4339 + C139286 * C4343) * C139328) *
                C139586) *
               C139588) *
              C94 -
          ((((C63381 * C4340 + C139286 * C4344) * C139328 +
             (C63381 * C4226 + C139286 * C4233) * C181) *
                C139586 +
            ((C63381 * C1872 + C139286 * C1880) * C139328 +
             (C63381 * C1766 + C139286 * C1774) * C181) *
                C47031) *
               C139588 +
           (((C63381 * C943 + C139286 * C951) * C139328 +
             (C63381 * C830 + C139286 * C838) * C181) *
                C139586 +
            ((C63381 * C185 + C139286 * C191) * C139328 +
             (C63381 * C110 + C139286 * C119) * C181) *
                C47031) *
               C30408) *
              C95) *
         C139339) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139286 * C113) * C934 +
             (C63381 * C182 + C139286 * C188) * C823 - C63884 * C935 -
             C63997 * C824 + C63888 * C936 + C63998 * C825) *
                C47031 +
            (C63884 * C934 + C63997 * C823 - C63888 * C935 - C63998 * C824 +
             C63894 * C936 + C63999 * C825) *
                C139586) *
               C30408 +
           (((C63381 * C1767 + C139286 * C1778) * C934 +
             (C63381 * C1873 + C139286 * C1881) * C823 - C66724 * C935 -
             C66844 * C824 + C66728 * C936 + C66845 * C825) *
                C47031 +
            (C66724 * C934 + C66844 * C823 - C66728 * C935 - C66845 * C824 +
             C71175 * C936 + C71257 * C825) *
                C139586) *
               C139588) *
              C821 +
          (((C63886 * C935 -
             ((C63381 * C183 + C139286 * C189) * C823 +
              (C63381 * C108 + C139286 * C114) * C934) +
             C64000 * C824 - C63890 * C936 - C64001 * C825) *
                C47031 +
            (C63890 * C935 - (C64000 * C823 + C63886 * C934) + C64001 * C824 -
             C63892 * C936 - C64002 * C825) *
                C139586) *
               C30408 +
           ((C66722 * C935 -
             ((C63381 * C1870 + C139286 * C1878) * C823 +
              (C63381 * C1764 + C139286 * C1772) * C934) +
             C66846 * C824 - C66726 * C936 - C66847 * C825) *
                C47031 +
            (C66726 * C935 - (C66846 * C823 + C66722 * C934) + C66847 * C824 -
             (C63381 * C24128 + C139286 * C24132) * C936 -
             (C63381 * C24246 + C139286 * C24248) * C825) *
                C139586) *
               C139588) *
              C139305) *
         C139339) /
            (p * q * std::sqrt(p + q));
    d2eexz[79] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139286 * C113) * C244 +
             (C63381 * C245 + C139286 * C251) * C139339) *
                C47031 +
            (C64077 + C64101) * C139586) *
               C30408 +
           (((C63381 * C1767 + C139286 * C1778) * C244 +
             (C63381 * C1965 + C139286 * C1973) * C139339) *
                C47031 +
            (C66724 * C244 + C66966 * C139339) * C139586) *
               C139588) *
              C139328 * C92 -
          (((C66968 * C139339 + C66722 * C244) * C139586 +
            ((C63381 * C1964 + C139286 * C1972) * C139339 +
             (C63381 * C1764 + C139286 * C1772) * C244) *
                C47031) *
               C139588 +
           ((C64104 + C64086) * C139586 +
            ((C63381 * C246 + C139286 * C252) * C139339 +
             (C63381 * C108 + C139286 * C114) * C244) *
                C47031) *
               C30408) *
              C139328 * C93 +
          ((((C63381 * C109 + C139286 * C115) * C244 +
             (C63381 * C247 + C139286 * C253) * C139339) *
                C47031 +
            (C65482 + C65490) * C139586) *
               C30408 +
           (((C63381 * C1765 + C139286 * C1773) * C244 +
             (C63381 * C1963 + C139286 * C1971) * C139339) *
                C47031 +
            ((C63381 * C4225 + C139286 * C4229) * C244 +
             (C63381 * C4445 + C139286 * C4449) * C139339) *
                C139586) *
               C139588) *
              C139328 * C94 -
          ((((C63381 * C4446 + C139286 * C4450) * C139339 +
             (C63381 * C4226 + C139286 * C4233) * C244) *
                C139586 +
            ((C63381 * C1969 + C139286 * C1977) * C139339 +
             (C63381 * C1766 + C139286 * C1774) * C244) *
                C47031) *
               C139588 +
           (((C63381 * C1033 + C139286 * C1041) * C139339 +
             (C63381 * C830 + C139286 * C838) * C244) *
                C139586 +
            ((C63381 * C248 + C139286 * C254) * C139339 +
             (C63381 * C110 + C139286 * C119) * C244) *
                C47031) *
               C30408) *
              C139328 * C95)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C63381 * C107 + C139286 * C113) * C244 +
              (C63381 * C245 + C139286 * C251) * C139339) *
                 C47031 +
             (C64077 + C64101) * C139586) *
                C30408 +
            (((C63381 * C1767 + C139286 * C1778) * C244 +
              (C63381 * C1965 + C139286 * C1973) * C139339) *
                 C47031 +
             (C76769 + C76770) * C139586) *
                C139588) *
               C823 -
           (((C76771 + C76772) * C139586 + (C76770 + C76769) * C47031) *
                C139588 +
            ((C64102 + C64080) * C139586 + (C64101 + C64077) * C47031) *
                C30408) *
               C824 +
           ((C64107 * C47031 + (C64085 + C64103) * C139586) * C30408 +
            ((C76772 + C76771) * C47031 +
             (C71175 * C244 + C71341 * C139339) * C139586) *
                C139588) *
               C825) *
              C821 +
          ((((C64086 + C64104) * C47031 + (C64089 + C64105) * C139586) *
                C30408 +
            ((C76773 + C76774) * C47031 + (C76775 + C76776) * C139586) *
                C139588) *
               C824 -
           (((C76774 + C76773) * C139586 +
             ((C63381 * C1964 + C139286 * C1972) * C139339 +
              (C63381 * C1764 + C139286 * C1772) * C244) *
                 C47031) *
                C139588 +
            ((C64104 + C64086) * C139586 +
             ((C63381 * C246 + C139286 * C252) * C139339 +
              (C63381 * C108 + C139286 * C114) * C244) *
                 C47031) *
                C30408) *
               C823 -
           ((((C63381 * C24354 + C139286 * C24356) * C139339 +
              (C63381 * C24128 + C139286 * C24132) * C244) *
                 C139586 +
             (C76776 + C76775) * C47031) *
                C139588 +
            ((C64106 + C64092) * C139586 + C64108 * C47031) * C30408) *
               C825) *
              C139305)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[79] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C47233 * C107 + C47031 * C308 + C47234 * C831 + C139586 * C1118) *
               C103 +
           (C47233 * C116 + C47031 * C314 + C47234 * C841 + C139586 * C1125) *
               C92 -
           (C47260 + C47261) * C104 - (C47262 + C47263) * C93 +
           (C47264 + C47265) * C105 + (C47266 + C47267) * C94 -
           (C47268 + C47269) * C106 - (C47270 + C47271) * C95) *
              C30408 +
          ((C47233 * C1767 + C47031 * C2054 + C47234 * C4223 +
            C139586 * C4549) *
               C103 +
           (C47233 * C1777 + C47031 * C2061 + C47234 * C4230 +
            C139586 * C4553) *
               C92 -
           (C49073 + C49072) * C104 - (C49075 + C49074) * C93 +
           (C50925 + C50924) * C105 + (C50927 + C50926) * C94 -
           (C47234 * C4226 + C139586 * C4552 + C47233 * C1766 +
            C47031 * C2056) *
               C106 -
           (C47234 * C4234 + C139586 * C4556 + C47233 * C1779 +
            C47031 * C2064) *
               C95) *
              C139588) *
         C139286 * C139339 * C139328) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C831 + C139586 * C1118) *
                C826 +
            (C47233 * C116 + C47031 * C314 + C47234 * C841 + C139586 * C1125) *
                C821 -
            (C47260 + C47261) * C827 - (C47262 + C47263) * C139305) *
               C30408 +
           ((C47233 * C1767 + C47031 * C2054 + C47234 * C4223 +
             C139586 * C4549) *
                C826 +
            (C47233 * C1777 + C47031 * C2061 + C47234 * C4230 +
             C139586 * C4553) *
                C821 -
            (C49073 + C49072) * C827 - (C49075 + C49074) * C139305) *
               C139588) *
              C139286 * C139339 * C823 +
          (((C48142 + C48143) * C827 -
            ((C47234 * C847 + C139586 * C1129 + C47233 * C841 +
              C47031 * C1125) *
                 C821 +
             (C47234 * C832 + C139586 * C1121 + C47233 * C831 +
              C47031 * C1118) *
                 C826) +
            (C48144 + C48145) * C139305) *
               C30408 +
           ((C52007 + C52006) * C827 -
            ((C47234 * C8757 + C139586 * C9003 + C47233 * C4230 +
              C47031 * C4553) *
                 C821 +
             (C47234 * C8754 + C139586 * C9000 + C47233 * C4223 +
              C47031 * C4549) *
                 C826) +
            (C52009 + C52008) * C139305) *
               C139588) *
              C139286 * C139339 * C824 +
          (((C47233 * C832 + C47031 * C1121 + C47234 * C5916 +
             C139586 * C6094) *
                C826 +
            (C47233 * C847 + C47031 * C1129 + C47234 * C5919 +
             C139586 * C6097) *
                C821 -
            (C48146 + C48147) * C827 - (C48148 + C48149) * C139305) *
               C30408 +
           ((C47233 * C8754 + C47031 * C9000 + C47234 * C24129 +
             C139586 * C24463) *
                C826 +
            (C47233 * C8757 + C47031 * C9003 + C47234 * C24131 +
             C139586 * C24465) *
                C821 -
            (C47234 * C24128 + C139586 * C24462 + C47233 * C8753 +
             C47031 * C8999) *
                C827 -
            (C47234 * C24130 + C139586 * C24464 + C47233 * C8756 +
             C47031 * C9002) *
                C139305) *
               C139588) *
              C139286 * C139339 * C825)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[79] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C831 + C139586 * C1118) *
                C181 +
            (C47233 * C182 + C47031 * C394 + C47234 * C939 + C139586 * C1231) *
                C139328) *
               C30408 +
           ((C47233 * C1767 + C47031 * C2054 + C47234 * C4223 +
             C139586 * C4549) *
                C181 +
            (C47233 * C1873 + C47031 * C2170 + C47234 * C4337 +
             C139586 * C4667) *
                C139328) *
               C139588) *
              C139286 * C92 -
          (((C49187 + C49186) * C139328 + (C49073 + C49072) * C181) * C139588 +
           ((C47351 + C47350) * C139328 + (C47260 + C47261) * C181) * C30408) *
              C139286 * C93 +
          (((C47264 + C47265) * C181 + (C47353 + C47352) * C139328) * C30408 +
           ((C50925 + C50924) * C181 + (C51030 + C51031) * C139328) * C139588) *
              C139286 * C94 -
          (((C47234 * C4340 + C139586 * C4670 + C47233 * C1872 +
             C47031 * C2169) *
                C139328 +
            (C47234 * C4226 + C139586 * C4552 + C47233 * C1766 +
             C47031 * C2056) *
                C181) *
               C139588 +
           ((C47355 + C47354) * C139328 + (C47268 + C47269) * C181) * C30408) *
              C139286 * C95) *
         C139339) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C831 + C139586 * C1118) *
                C934 +
            (C47233 * C182 + C47031 * C394 + C47234 * C939 + C139586 * C1231) *
                C823 -
            (C47234 * C832 + C139586 * C1121 + C47233 * C831 + C47031 * C1118) *
                C935 -
            (C47234 * C940 + C139586 * C1232 + C47233 * C939 + C47031 * C1231) *
                C824 +
            (C47233 * C832 + C47031 * C1121 + C47234 * C5916 +
             C139586 * C6094) *
                C936 +
            (C47233 * C940 + C47031 * C1232 + C47234 * C5982 +
             C139586 * C6148) *
                C825) *
               C30408 +
           ((C47233 * C1767 + C47031 * C2054 + C47234 * C4223 +
             C139586 * C4549) *
                C934 +
            (C47233 * C1873 + C47031 * C2170 + C47234 * C4337 +
             C139586 * C4667) *
                C823 -
            (C47234 * C8754 + C139586 * C9000 + C47233 * C4223 +
             C47031 * C4549) *
                C935 -
            (C47234 * C8840 + C139586 * C9078 + C47233 * C4337 +
             C47031 * C4667) *
                C824 +
            (C47233 * C8754 + C47031 * C9000 + C47234 * C24129 +
             C139586 * C24463) *
                C936 +
            (C47233 * C8840 + C47031 * C9078 + C47234 * C24247 +
             C139586 * C24564) *
                C825) *
               C139588) *
              C139286 * C821 +
          (((C48142 + C48143) * C935 -
            ((C47351 + C47350) * C823 + (C47260 + C47261) * C934) +
            (C48257 + C48256) * C824 - (C48146 + C48147) * C936 -
            (C48259 + C48258) * C825) *
               C30408 +
           ((C52007 + C52006) * C935 -
            ((C49187 + C49186) * C823 + (C49073 + C49072) * C934) +
            (C52144 + C52145) * C824 -
            (C47234 * C24128 + C139586 * C24462 + C47233 * C8753 +
             C47031 * C8999) *
                C936 -
            (C47234 * C24246 + C139586 * C24565 + C47233 * C8839 +
             C47031 * C9079) *
                C825) *
               C139588) *
              C139286 * C139305) *
         C139339) /
            (p * q * std::sqrt(p + q));
    d2eeyz[79] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C831 + C139586 * C1118) *
                C244 +
            (C47233 * C245 + C47031 * C474 + C47234 * C1029 + C139586 * C1339) *
                C139339) *
               C30408 +
           ((C47233 * C1767 + C47031 * C2054 + C47234 * C4223 +
             C139586 * C4549) *
                C244 +
            (C47233 * C1965 + C47031 * C2269 + C47234 * C4443 +
             C139586 * C4783) *
                C139339) *
               C139588) *
              C139286 * C139328 * C92 -
          (((C49296 + C49297) * C139339 + (C49073 + C49072) * C244) * C139588 +
           ((C47435 + C47434) * C139339 + (C47260 + C47261) * C244) * C30408) *
              C139286 * C139328 * C93 +
          (((C47264 + C47265) * C244 + (C47437 + C47436) * C139339) * C30408 +
           ((C50925 + C50924) * C244 + (C51134 + C51135) * C139339) * C139588) *
              C139286 * C139328 * C94 -
          (((C47234 * C4446 + C139586 * C4786 + C47233 * C1969 +
             C47031 * C2275) *
                C139339 +
            (C47234 * C4226 + C139586 * C4552 + C47233 * C1766 +
             C47031 * C2056) *
                C244) *
               C139588 +
           ((C47439 + C47438) * C139339 + (C47268 + C47269) * C244) * C30408) *
              C139286 * C139328 * C95)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47233 * C107 + C47031 * C308 + C47234 * C831 + C139586 * C1118) *
                 C244 +
             (C47233 * C245 + C47031 * C474 + C47234 * C1029 +
              C139586 * C1339) *
                 C139339) *
                C30408 +
            ((C47233 * C1767 + C47031 * C2054 + C47234 * C4223 +
              C139586 * C4549) *
                 C244 +
             (C47233 * C1965 + C47031 * C2269 + C47234 * C4443 +
              C139586 * C4783) *
                 C139339) *
                C139588) *
               C139286 * C823 -
           (((C47234 * C8920 + C139586 * C9155 + C47233 * C4443 +
              C47031 * C4783) *
                 C139339 +
             (C47234 * C8754 + C139586 * C9000 + C47233 * C4223 +
              C47031 * C4549) *
                 C244) *
                C139588 +
            ((C47234 * C1030 + C139586 * C1340 + C47233 * C1029 +
              C47031 * C1339) *
                 C139339 +
             (C47234 * C832 + C139586 * C1121 + C47233 * C831 +
              C47031 * C1118) *
                 C244) *
                C30408) *
               C139286 * C824 +
           (((C47233 * C832 + C47031 * C1121 + C47234 * C5916 +
              C139586 * C6094) *
                 C244 +
             (C47233 * C1030 + C47031 * C1340 + C47234 * C6038 +
              C139586 * C6203) *
                 C139339) *
                C30408 +
            ((C47233 * C8754 + C47031 * C9000 + C47234 * C24129 +
              C139586 * C24463) *
                 C244 +
             (C47233 * C8920 + C47031 * C9155 + C47234 * C24355 +
              C139586 * C24664) *
                 C139339) *
                C139588) *
               C139286 * C825) *
              C821 +
          ((((C48142 + C48143) * C244 + (C48367 + C48366) * C139339) * C30408 +
            ((C52007 + C52006) * C244 + (C52280 + C52281) * C139339) *
                C139588) *
               C139286 * C824 -
           (((C49296 + C49297) * C139339 + (C49073 + C49072) * C244) * C139588 +
            ((C47435 + C47434) * C139339 + (C47260 + C47261) * C244) * C30408) *
               C139286 * C823 -
           (((C47234 * C24354 + C139586 * C24665 + C47233 * C8919 +
              C47031 * C9156) *
                 C139339 +
             (C47234 * C24128 + C139586 * C24462 + C47233 * C8753 +
              C47031 * C8999) *
                 C244) *
                C139588 +
            ((C48369 + C48368) * C139339 + (C48146 + C48147) * C244) * C30408) *
               C139286 * C825) *
              C139305)) /
            (p * q * std::sqrt(p + q));
    d2eezx[79] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C30812 * C107 + C30408 * C555 + C30813 * C1767 + C139588 * C2376) *
               C103 +
           (C30812 * C116 + C30408 * C561 + C30813 * C1777 + C139588 * C2383) *
               C92 -
           (C30839 + C30840) * C104 - (C30841 + C30842) * C93 +
           (C30843 + C30844) * C105 + (C30845 + C30846) * C94 -
           (C30847 + C30848) * C106 - (C30849 + C30850) * C95) *
              C139286 * C47031 +
          ((C30812 * C831 + C30408 * C1440 + C30813 * C4223 + C139588 * C4899) *
               C103 +
           (C30812 * C841 + C30408 * C1447 + C30813 * C4230 + C139588 * C4903) *
               C92 -
           (C31744 + C31743) * C104 - (C31746 + C31745) * C93 +
           (C33762 + C33761) * C105 + (C33764 + C33763) * C94 -
           (C30813 * C4226 + C139588 * C4902 + C30812 * C830 + C30408 * C1442) *
               C106 -
           (C30813 * C4234 + C139588 * C4906 + C30812 * C843 + C30408 * C1450) *
               C95) *
              C139286 * C139586) *
         C139339 * C139328) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1767 + C139588 * C2376) *
                C826 +
            (C30812 * C116 + C30408 * C561 + C30813 * C1777 + C139588 * C2383) *
                C821 -
            (C30839 + C30840) * C827 - (C30841 + C30842) * C139305) *
               C139286 * C47031 +
           ((C77185 + C77186) * C826 + (C77187 + C77188) * C821 -
            (C31744 + C31743) * C827 - (C31746 + C31745) * C139305) *
               C139286 * C139586) *
              C139339 * C823 +
          (((C31743 + C31744) * C827 -
            ((C77188 + C77187) * C821 + (C77186 + C77185) * C826) +
            (C31745 + C31746) * C139305) *
               C139286 * C47031 +
           ((C31748 + C31747) * C827 -
            ((C77189 + C77190) * C821 + (C77191 + C77192) * C826) +
            (C31750 + C31749) * C139305) *
               C139286 * C139586) *
              C139339 * C824 +
          (((C77192 + C77191) * C826 + (C77190 + C77189) * C821 -
            (C31747 + C31748) * C827 - (C31749 + C31750) * C139305) *
               C139286 * C47031 +
           ((C30812 * C5916 + C30408 * C6256 + C30813 * C24129 +
             C139588 * C24765) *
                C826 +
            (C30812 * C5919 + C30408 * C6259 + C30813 * C24131 +
             C139588 * C24767) *
                C821 -
            (C30813 * C24128 + C139588 * C24764 + C30812 * C5915 +
             C30408 * C6255) *
                C827 -
            (C30813 * C24130 + C139588 * C24766 + C30812 * C5918 +
             C30408 * C6258) *
                C139305) *
               C139286 * C139586) *
              C139339 * C825)) /
            (p * q * std::sqrt(p + q));
    d2eezy[79] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1767 + C139588 * C2376) *
                C181 +
            (C30812 * C182 + C30408 * C641 + C30813 * C1873 + C139588 * C2492) *
                C139328) *
               C139286 * C47031 +
           ((C30812 * C831 + C30408 * C1440 + C30813 * C4223 +
             C139588 * C4899) *
                C181 +
            (C30812 * C939 + C30408 * C1553 + C30813 * C4337 +
             C139588 * C5017) *
                C139328) *
               C139286 * C139586) *
              C92 -
          (((C31857 + C31858) * C139328 + (C31744 + C31743) * C181) * C139286 *
               C139586 +
           ((C30930 + C30929) * C139328 + (C30839 + C30840) * C181) * C139286 *
               C47031) *
              C93 +
          (((C30843 + C30844) * C181 + (C30932 + C30931) * C139328) * C139286 *
               C47031 +
           ((C33762 + C33761) * C181 + (C33867 + C33868) * C139328) * C139286 *
               C139586) *
              C94 -
          (((C30813 * C4340 + C139588 * C5020 + C30812 * C943 +
             C30408 * C1559) *
                C139328 +
            (C30813 * C4226 + C139588 * C4902 + C30812 * C830 +
             C30408 * C1442) *
                C181) *
               C139286 * C139586 +
           ((C30934 + C30933) * C139328 + (C30847 + C30848) * C181) * C139286 *
               C47031) *
              C95) *
         C139339) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1767 + C139588 * C2376) *
                C934 +
            (C30812 * C182 + C30408 * C641 + C30813 * C1873 + C139588 * C2492) *
                C823 -
            (C77186 + C77185) * C935 - (C77299 + C77300) * C824 +
            (C77192 + C77191) * C936 + (C77301 + C77302) * C825) *
               C139286 * C47031 +
           ((C77185 + C77186) * C934 + (C77300 + C77299) * C823 -
            (C77191 + C77192) * C935 - (C77302 + C77301) * C824 +
            (C30812 * C5916 + C30408 * C6256 + C30813 * C24129 +
             C139588 * C24765) *
                C936 +
            (C30812 * C5982 + C30408 * C6310 + C30813 * C24247 +
             C139588 * C24876) *
                C825) *
               C139286 * C139586) *
              C821 +
          (((C31743 + C31744) * C935 -
            ((C30930 + C30929) * C823 + (C30839 + C30840) * C934) +
            (C31858 + C31857) * C824 - (C31747 + C31748) * C936 -
            (C31860 + C31859) * C825) *
               C139286 * C47031 +
           ((C31748 + C31747) * C935 -
            ((C31857 + C31858) * C823 + (C31744 + C31743) * C934) +
            (C31859 + C31860) * C824 -
            (C30813 * C24128 + C139588 * C24764 + C30812 * C5915 +
             C30408 * C6255) *
                C936 -
            (C30813 * C24246 + C139588 * C24877 + C30812 * C5981 +
             C30408 * C6311) *
                C825) *
               C139286 * C139586) *
              C139305) *
         C139339) /
            (p * q * std::sqrt(p + q));
    d2eezz[79] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1767 + C139588 * C2376) *
                C244 +
            (C30812 * C245 + C30408 * C719 + C30813 * C1965 + C139588 * C2591) *
                C139339) *
               C139286 * C47031 +
           ((C30812 * C831 + C30408 * C1440 + C30813 * C4223 +
             C139588 * C4899) *
                C244 +
            (C30812 * C1029 + C30408 * C1661 + C30813 * C4443 +
             C139588 * C5133) *
                C139339) *
               C139286 * C139586) *
              C139328 * C92 -
          (((C31967 + C31968) * C139339 + (C31744 + C31743) * C244) * C139286 *
               C139586 +
           ((C31014 + C31013) * C139339 + (C30839 + C30840) * C244) * C139286 *
               C47031) *
              C139328 * C93 +
          (((C30843 + C30844) * C244 + (C31016 + C31015) * C139339) * C139286 *
               C47031 +
           ((C33762 + C33761) * C244 + (C33971 + C33972) * C139339) * C139286 *
               C139586) *
              C139328 * C94 -
          (((C30813 * C4446 + C139588 * C5136 + C30812 * C1033 +
             C30408 * C1665) *
                C139339 +
            (C30813 * C4226 + C139588 * C4902 + C30812 * C830 +
             C30408 * C1442) *
                C244) *
               C139286 * C139586 +
           ((C31018 + C31017) * C139339 + (C30847 + C30848) * C244) * C139286 *
               C47031) *
              C139328 * C95)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30812 * C107 + C30408 * C555 + C30813 * C1767 +
              C139588 * C2376) *
                 C244 +
             (C30812 * C245 + C30408 * C719 + C30813 * C1965 +
              C139588 * C2591) *
                 C139339) *
                C139286 * C47031 +
            ((C77185 + C77186) * C244 + (C77409 + C77410) * C139339) * C139286 *
                C139586) *
               C823 -
           (((C77411 + C77412) * C139339 + (C77191 + C77192) * C244) * C139286 *
                C139586 +
            ((C77410 + C77409) * C139339 + (C77186 + C77185) * C244) * C139286 *
                C47031) *
               C824 +
           (((C77192 + C77191) * C244 + (C77412 + C77411) * C139339) * C139286 *
                C47031 +
            ((C30812 * C5916 + C30408 * C6256 + C30813 * C24129 +
              C139588 * C24765) *
                 C244 +
             (C30812 * C6038 + C30408 * C6365 + C30813 * C24355 +
              C139588 * C24979) *
                 C139339) *
                C139286 * C139586) *
               C825) *
              C821 +
          ((((C31743 + C31744) * C244 + (C31968 + C31967) * C139339) * C139286 *
                C47031 +
            ((C31748 + C31747) * C244 + (C31969 + C31970) * C139339) * C139286 *
                C139586) *
               C824 -
           (((C31967 + C31968) * C139339 + (C31744 + C31743) * C244) * C139286 *
                C139586 +
            ((C31014 + C31013) * C139339 + (C30839 + C30840) * C244) * C139286 *
                C47031) *
               C823 -
           (((C30813 * C24354 + C139588 * C24980 + C30812 * C6037 +
              C30408 * C6364) *
                 C139339 +
             (C30813 * C24128 + C139588 * C24764 + C30812 * C5915 +
              C30408 * C6255) *
                 C244) *
                C139286 * C139586 +
            ((C31970 + C31969) * C139339 + (C31747 + C31748) * C244) * C139286 *
                C47031) *
               C825) *
              C139305)) /
            (p * q * std::sqrt(p + q));
    d2eexx[80] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139286 * C113) * C137108 +
             (C63381 * C116 + C139286 * C125) * C139552 -
             (C63381 * C108 + C139286 * C114) * C137101 -
             (C63381 * C117 + C139286 * C126) * C139305) *
                C47031 +
            (C69583 + C69584 - C69585 - C69586) * C139586) *
               C30408 +
           ((C77533 * C137108 + C77534 * C139552 - C77535 * C137101 -
             C77536 * C139305) *
                C47031 +
            (C70298 + C70297 - C70296 - C70299) * C139586) *
               C139588) *
              C139339 * C139591 +
          (((C69585 - (C69584 + C69583) + C69586) * C47031 +
            (C69589 - (C69588 + C69587) + C69590) * C139586) *
               C30408 +
           ((C70296 - (C70297 + C70298) + C70299) * C47031 +
            (C70300 - (C70301 + C70302) + C70303) * C139586) *
               C139588) *
              C139339 * C139592 +
          ((C69597 * C47031 + (C69593 + C69592 - C69591 - C69594) * C139586) *
               C30408 +
           ((C70302 + C70301 - C70300 - C70303) * C47031 +
            (C71175 * C137108 + C71176 * C139552 -
             (C63381 * C24128 + C139286 * C24132) * C137101 -
             (C63381 * C24130 + C139286 * C24134) * C139305) *
                C139586) *
               C139588) *
              C139339 * C7158)) /
        (p * q * std::sqrt(p + q));
    d2eexy[80] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139286 * C113) * C7235 +
             (C63381 * C182 + C139286 * C188) * C139591 - C63884 * C7236 -
             C63997 * C139592 + C63888 * C7237 + C63998 * C7158) *
                C47031 +
            (C63884 * C7235 + C63997 * C139591 - C63888 * C7236 -
             C63998 * C139592 + C63894 * C7237 + C63999 * C7158) *
                C139586) *
               C30408 +
           ((C77533 * C7235 + C77672 * C139591 - C66724 * C7236 -
             C66844 * C139592 + C66728 * C7237 + C66845 * C7158) *
                C47031 +
            (C66724 * C7235 + C66844 * C139591 - C66728 * C7236 -
             C66845 * C139592 + C71175 * C7237 + C71257 * C7158) *
                C139586) *
               C139588) *
              C139552 +
          (((C63886 * C7236 -
             ((C63381 * C183 + C139286 * C189) * C139591 +
              (C63381 * C108 + C139286 * C114) * C7235) +
             C64000 * C139592 - C63890 * C7237 - C64001 * C7158) *
                C47031 +
            (C63890 * C7236 - (C64000 * C139591 + C63886 * C7235) +
             C64001 * C139592 - C63892 * C7237 - C64002 * C7158) *
                C139586) *
               C30408 +
           ((C66722 * C7236 - (C77673 * C139591 + C77535 * C7235) +
             C66846 * C139592 - C66726 * C7237 - C66847 * C7158) *
                C47031 +
            (C66726 * C7236 - (C66846 * C139591 + C66722 * C7235) +
             C66847 * C139592 - (C63381 * C24128 + C139286 * C24132) * C7237 -
             (C63381 * C24246 + C139286 * C24248) * C7158) *
                C139586) *
               C139588) *
              C139305) *
         C139339) /
        (p * q * std::sqrt(p + q));
    d2eexz[80] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C63381 * C107 + C139286 * C113) * C244 +
              (C63381 * C245 + C139286 * C251) * C139339) *
                 C47031 +
             (C64077 + C64101) * C139586) *
                C30408 +
            ((C77533 * C244 + C77790 * C139339) * C47031 +
             (C76769 + C76770) * C139586) *
                C139588) *
               C139591 -
           (((C76771 + C76772) * C139586 + (C76770 + C76769) * C47031) *
                C139588 +
            ((C64102 + C64080) * C139586 + (C64101 + C64077) * C47031) *
                C30408) *
               C139592 +
           ((C64107 * C47031 + (C64085 + C64103) * C139586) * C30408 +
            ((C76772 + C76771) * C47031 + (C82571 + C82572) * C139586) *
                C139588) *
               C7158) *
              C139552 +
          ((((C64086 + C64104) * C47031 + (C64089 + C64105) * C139586) *
                C30408 +
            ((C76773 + C76774) * C47031 + (C76775 + C76776) * C139586) *
                C139588) *
               C139592 -
           (((C76774 + C76773) * C139586 +
             (C77792 * C139339 + C77535 * C244) * C47031) *
                C139588 +
            ((C64104 + C64086) * C139586 +
             ((C63381 * C246 + C139286 * C252) * C139339 +
              (C63381 * C108 + C139286 * C114) * C244) *
                 C47031) *
                C30408) *
               C139591 -
           ((((C63381 * C24354 + C139286 * C24356) * C139339 +
              (C63381 * C24128 + C139286 * C24132) * C244) *
                 C139586 +
             (C76776 + C76775) * C47031) *
                C139588 +
            ((C64106 + C64092) * C139586 + C64108 * C47031) * C30408) *
               C7158) *
              C139305)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[80] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C831 + C139586 * C1118) *
                C137108 +
            (C47233 * C116 + C47031 * C314 + C47234 * C841 + C139586 * C1125) *
                C139552 -
            (C47260 + C47261) * C137101 - (C47262 + C47263) * C139305) *
               C30408 +
           ((C77909 + C77910) * C137108 + (C77911 + C77912) * C139552 -
            (C49073 + C49072) * C137101 - (C49075 + C49074) * C139305) *
               C139588) *
              C139286 * C139339 * C139591 +
          (((C48142 + C48143) * C137101 -
            ((C47234 * C847 + C139586 * C1129 + C47233 * C841 +
              C47031 * C1125) *
                 C139552 +
             (C47234 * C832 + C139586 * C1121 + C47233 * C831 +
              C47031 * C1118) *
                 C137108) +
            (C48144 + C48145) * C139305) *
               C30408 +
           ((C52007 + C52006) * C137101 -
            ((C80795 + C80796) * C139552 + (C80797 + C80798) * C137108) +
            (C52009 + C52008) * C139305) *
               C139588) *
              C139286 * C139339 * C139592 +
          (((C47233 * C832 + C47031 * C1121 + C47234 * C5916 +
             C139586 * C6094) *
                C137108 +
            (C47233 * C847 + C47031 * C1129 + C47234 * C5919 +
             C139586 * C6097) *
                C139552 -
            (C48146 + C48147) * C137101 - (C48148 + C48149) * C139305) *
               C30408 +
           ((C47233 * C8754 + C47031 * C9000 + C47234 * C24129 +
             C139586 * C24463) *
                C137108 +
            (C47233 * C8757 + C47031 * C9003 + C47234 * C24131 +
             C139586 * C24465) *
                C139552 -
            (C47234 * C24128 + C139586 * C24462 + C47233 * C8753 +
             C47031 * C8999) *
                C137101 -
            (C47234 * C24130 + C139586 * C24464 + C47233 * C8756 +
             C47031 * C9002) *
                C139305) *
               C139588) *
              C139286 * C139339 * C7158)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[80] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C831 + C139586 * C1118) *
                C7235 +
            (C47233 * C182 + C47031 * C394 + C47234 * C939 + C139586 * C1231) *
                C139591 -
            (C47234 * C832 + C139586 * C1121 + C47233 * C831 + C47031 * C1118) *
                C7236 -
            (C47234 * C940 + C139586 * C1232 + C47233 * C939 + C47031 * C1231) *
                C139592 +
            (C47233 * C832 + C47031 * C1121 + C47234 * C5916 +
             C139586 * C6094) *
                C7237 +
            (C47233 * C940 + C47031 * C1232 + C47234 * C5982 +
             C139586 * C6148) *
                C7158) *
               C30408 +
           ((C77909 + C77910) * C7235 + (C78023 + C78024) * C139591 -
            (C80797 + C80798) * C7236 - (C80933 + C80934) * C139592 +
            (C47233 * C8754 + C47031 * C9000 + C47234 * C24129 +
             C139586 * C24463) *
                C7237 +
            (C47233 * C8840 + C47031 * C9078 + C47234 * C24247 +
             C139586 * C24564) *
                C7158) *
               C139588) *
              C139286 * C139552 +
          (((C48142 + C48143) * C7236 -
            ((C47351 + C47350) * C139591 + (C47260 + C47261) * C7235) +
            (C48257 + C48256) * C139592 - (C48146 + C48147) * C7237 -
            (C48259 + C48258) * C7158) *
               C30408 +
           ((C52007 + C52006) * C7236 -
            ((C49187 + C49186) * C139591 + (C49073 + C49072) * C7235) +
            (C52144 + C52145) * C139592 -
            (C47234 * C24128 + C139586 * C24462 + C47233 * C8753 +
             C47031 * C8999) *
                C7237 -
            (C47234 * C24246 + C139586 * C24565 + C47233 * C8839 +
             C47031 * C9079) *
                C7158) *
               C139588) *
              C139286 * C139305) *
         C139339) /
        (p * q * std::sqrt(p + q));
    d2eeyz[80] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47233 * C107 + C47031 * C308 + C47234 * C831 + C139586 * C1118) *
                 C244 +
             (C47233 * C245 + C47031 * C474 + C47234 * C1029 +
              C139586 * C1339) *
                 C139339) *
                C30408 +
            ((C77909 + C77910) * C244 + (C78134 + C78133) * C139339) *
                C139588) *
               C139286 * C139591 -
           (((C81070 + C81069) * C139339 + (C80797 + C80798) * C244) * C139588 +
            ((C47234 * C1030 + C139586 * C1340 + C47233 * C1029 +
              C47031 * C1339) *
                 C139339 +
             (C47234 * C832 + C139586 * C1121 + C47233 * C831 +
              C47031 * C1118) *
                 C244) *
                C30408) *
               C139286 * C139592 +
           (((C47233 * C832 + C47031 * C1121 + C47234 * C5916 +
              C139586 * C6094) *
                 C244 +
             (C47233 * C1030 + C47031 * C1340 + C47234 * C6038 +
              C139586 * C6203) *
                 C139339) *
                C30408 +
            ((C47233 * C8754 + C47031 * C9000 + C47234 * C24129 +
              C139586 * C24463) *
                 C244 +
             (C47233 * C8920 + C47031 * C9155 + C47234 * C24355 +
              C139586 * C24664) *
                 C139339) *
                C139588) *
               C139286 * C7158) *
              C139552 +
          ((((C48142 + C48143) * C244 + (C48367 + C48366) * C139339) * C30408 +
            ((C52007 + C52006) * C244 + (C52280 + C52281) * C139339) *
                C139588) *
               C139286 * C139592 -
           (((C49296 + C49297) * C139339 + (C49073 + C49072) * C244) * C139588 +
            ((C47435 + C47434) * C139339 + (C47260 + C47261) * C244) * C30408) *
               C139286 * C139591 -
           (((C47234 * C24354 + C139586 * C24665 + C47233 * C8919 +
              C47031 * C9156) *
                 C139339 +
             (C47234 * C24128 + C139586 * C24462 + C47233 * C8753 +
              C47031 * C8999) *
                 C244) *
                C139588 +
            ((C48369 + C48368) * C139339 + (C48146 + C48147) * C244) * C30408) *
               C139286 * C7158) *
              C139305)) /
        (p * q * std::sqrt(p + q));
    d2eezx[80] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1767 + C139588 * C2376) *
                C137108 +
            (C30812 * C116 + C30408 * C561 + C30813 * C1777 + C139588 * C2383) *
                C139552 -
            (C30839 + C30840) * C137101 - (C30841 + C30842) * C139305) *
               C139286 * C47031 +
           ((C77185 + C77186) * C137108 + (C77187 + C77188) * C139552 -
            (C31744 + C31743) * C137101 - (C31746 + C31745) * C139305) *
               C139286 * C139586) *
              C139339 * C139591 +
          (((C31743 + C31744) * C137101 -
            ((C77188 + C77187) * C139552 + (C77186 + C77185) * C137108) +
            (C31745 + C31746) * C139305) *
               C139286 * C47031 +
           ((C31748 + C31747) * C137101 -
            ((C77189 + C77190) * C139552 + (C77191 + C77192) * C137108) +
            (C31750 + C31749) * C139305) *
               C139286 * C139586) *
              C139339 * C139592 +
          (((C77192 + C77191) * C137108 + (C77190 + C77189) * C139552 -
            (C31747 + C31748) * C137101 - (C31749 + C31750) * C139305) *
               C139286 * C47031 +
           ((C82845 + C82846) * C137108 + (C82847 + C82848) * C139552 -
            (C30813 * C24128 + C139588 * C24764 + C30812 * C5915 +
             C30408 * C6255) *
                C137101 -
            (C30813 * C24130 + C139588 * C24766 + C30812 * C5918 +
             C30408 * C6258) *
                C139305) *
               C139286 * C139586) *
              C139339 * C7158)) /
        (p * q * std::sqrt(p + q));
    d2eezy[80] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1767 + C139588 * C2376) *
                C7235 +
            (C30812 * C182 + C30408 * C641 + C30813 * C1873 + C139588 * C2492) *
                C139591 -
            (C77186 + C77185) * C7236 - (C77299 + C77300) * C139592 +
            (C77192 + C77191) * C7237 + (C77301 + C77302) * C7158) *
               C139286 * C47031 +
           ((C77185 + C77186) * C7235 + (C77300 + C77299) * C139591 -
            (C77191 + C77192) * C7236 - (C77302 + C77301) * C139592 +
            (C82845 + C82846) * C7237 + (C82920 + C82919) * C7158) *
               C139286 * C139586) *
              C139552 +
          (((C31743 + C31744) * C7236 -
            ((C30930 + C30929) * C139591 + (C30839 + C30840) * C7235) +
            (C31858 + C31857) * C139592 - (C31747 + C31748) * C7237 -
            (C31860 + C31859) * C7158) *
               C139286 * C47031 +
           ((C31748 + C31747) * C7236 -
            ((C31857 + C31858) * C139591 + (C31744 + C31743) * C7235) +
            (C31859 + C31860) * C139592 -
            (C30813 * C24128 + C139588 * C24764 + C30812 * C5915 +
             C30408 * C6255) *
                C7237 -
            (C30813 * C24246 + C139588 * C24877 + C30812 * C5981 +
             C30408 * C6311) *
                C7158) *
               C139286 * C139586) *
              C139305) *
         C139339) /
        (p * q * std::sqrt(p + q));
    d2eezz[80] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C30812 * C107 + C30408 * C555 + C30813 * C1767 +
                        C139588 * C2376) *
                           C244 +
                       (C30812 * C245 + C30408 * C719 + C30813 * C1965 +
                        C139588 * C2591) *
                           C139339) *
                          C139286 * C47031 +
                      ((C77185 + C77186) * C244 + (C77409 + C77410) * C139339) *
                          C139286 * C139586) *
                         C139591 -
                     (((C77411 + C77412) * C139339 + (C77191 + C77192) * C244) *
                          C139286 * C139586 +
                      ((C77410 + C77409) * C139339 + (C77186 + C77185) * C244) *
                          C139286 * C47031) *
                         C139592 +
                     (((C77192 + C77191) * C244 + (C77412 + C77411) * C139339) *
                          C139286 * C47031 +
                      ((C82845 + C82846) * C244 + (C82991 + C82992) * C139339) *
                          C139286 * C139586) *
                         C7158) *
                        C139552 +
                    ((((C31743 + C31744) * C244 + (C31968 + C31967) * C139339) *
                          C139286 * C47031 +
                      ((C31748 + C31747) * C244 + (C31969 + C31970) * C139339) *
                          C139286 * C139586) *
                         C139592 -
                     (((C31967 + C31968) * C139339 + (C31744 + C31743) * C244) *
                          C139286 * C139586 +
                      ((C31014 + C31013) * C139339 + (C30839 + C30840) * C244) *
                          C139286 * C47031) *
                         C139591 -
                     (((C30813 * C24354 + C139588 * C24980 + C30812 * C6037 +
                        C30408 * C6364) *
                           C139339 +
                       (C30813 * C24128 + C139588 * C24764 + C30812 * C5915 +
                        C30408 * C6255) *
                           C244) *
                          C139286 * C139586 +
                      ((C31970 + C31969) * C139339 + (C31747 + C31748) * C244) *
                          C139286 * C47031) *
                         C7158) *
                        C139305)) /
                  (p * q * std::sqrt(p + q));
    d2eexx[81] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C63381 * C107 + C139286 * C113) * C5913 +
              (C63381 * C116 + C139286 * C125) * C139300) *
                 C47031 +
             (C68304 + C68305) * C139586) *
                C30408 +
            ((C83091 + C83092) * C47031 + C83093 * C139586) * C139588) *
               C139561 -
           ((C83094 * C139586 + (C83095 + C83096) * C47031) * C139588 +
            (C83097 * C139586 + (C83092 + C83091) * C47031) * C30408) *
               C139403) *
              C139591 +
          (((C83093 * C47031 + C86139 * C139586) * C30408 +
            (C83098 * C47031 + (C68859 + C68860) * C139586) * C139588) *
               C139403 -
           ((C71170 * C139586 + C83097 * C47031) * C139588 +
            ((C68307 + C68306) * C139586 + (C68305 + C68304) * C47031) *
                C30408) *
               C139561) *
              C139592 +
          (((C68314 * C47031 + (C68309 + C68308) * C139586) * C30408 +
            (C86139 * C47031 + (C71177 + C71178) * C139586) * C139588) *
               C139561 -
           ((((C63381 * C68837 + C139286 * C68839) * C139300 +
              (C63381 * C68836 + C139286 * C68838) * C5913) *
                 C139586 +
             (C68860 + C68859) * C47031) *
                C139588 +
            ((C71178 + C71177) * C139586 + C71170 * C47031) * C30408) *
               C139403) *
              C7158)) /
        (p * q * std::sqrt(p + q));
    d2eexy[81] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139286 * C113) * C7235 +
             (C63381 * C182 + C139286 * C188) * C139591 - C63884 * C7236 -
             C63997 * C139592 + C63888 * C7237 + C63998 * C7158) *
                C47031 +
            (C63884 * C7235 + C63997 * C139591 - C63888 * C7236 -
             C63998 * C139592 + C63894 * C7237 + C63999 * C7158) *
                C139586) *
               C30408 +
           ((C86238 + C86239 - C86240 - C86241 + C86242 + C86243) * C47031 +
            (C86244 + C86245 - C86246 - C86247 + C86248 + C86249) * C139586) *
               C139588) *
              C139300 * C139561 +
          (((C86240 - (C86239 + C86238) + C86241 - C86242 - C86243) * C47031 +
            (C86246 - (C86245 + C86244) + C86247 - C86248 - C86249) * C139586) *
               C30408 +
           ((C68853 * C7236 - (C77676 * C139591 + C77539 * C7235) +
             C68941 * C139592 - C68855 * C7237 - C68942 * C7158) *
                C47031 +
            (C68855 * C7236 - (C68941 * C139591 + C68853 * C7235) +
             C68942 * C139592 - (C63381 * C68836 + C139286 * C68838) * C7237 -
             (C63381 * C68934 + C139286 * C68935) * C7158) *
                C139586) *
               C139588) *
              C139300 * C139403)) /
        (p * q * std::sqrt(p + q));
    d2eexz[81] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139286 * C113) * C3607 +
             (C63381 * C245 + C139286 * C251) * C139561 - C77533 * C3608 -
             C77790 * C139403) *
                C47031 +
            (C66946 + C66947 - C66948 - C66970) * C139586) *
               C30408 +
           ((C77533 * C3607 + C77790 * C139561 - C77539 * C3608 -
             C77791 * C139403) *
                C47031 +
            (C80649 + C80650 - C80651 - C80652) * C139586) *
               C139588) *
              C139591 +
          (((C66948 - (C66947 + C66946) + C66970) * C47031 +
            (C66953 - (C66952 + C66951) + C66971) * C139586) *
               C30408 +
           ((C80651 - (C80650 + C80649) + C80652) * C47031 +
            (C86348 - (C86349 + C86350) + C86351) * C139586) *
               C139588) *
              C139592 +
          ((C71342 * C47031 + (C71337 + C71336 - C71335 - C71343) * C139586) *
               C30408 +
           ((C86350 + C86349 - C86348 - C86351) * C47031 +
            (C71175 * C3607 + C71341 * C139561 -
             (C63381 * C68836 + C139286 * C68838) * C3608 -
             (C63381 * C69016 + C139286 * C69017) * C139403) *
                C139586) *
               C139588) *
              C7158) *
         C139300) /
        (p * q * std::sqrt(p + q));
    d2eeyx[81] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47233 * C107 + C47031 * C308 + C47234 * C831 + C139586 * C1118) *
                 C5913 +
             (C47233 * C116 + C47031 * C314 + C47234 * C841 + C139586 * C1125) *
                 C139300) *
                C30408 +
            ((C77909 + C77910) * C5913 + (C77911 + C77912) * C139300) *
                C139588) *
               C139286 * C139561 -
           (((C77913 + C77914) * C139300 + (C77915 + C77916) * C5913) *
                C139588 +
            ((C77912 + C77911) * C139300 + (C77910 + C77909) * C5913) *
                C30408) *
               C139286 * C139403) *
              C139591 +
          ((((C80798 + C80797) * C5913 + (C80796 + C80795) * C139300) * C30408 +
            ((C83437 + C83438) * C5913 + (C83439 + C83440) * C139300) *
                C139588) *
               C139286 * C139403 -
           (((C80795 + C80796) * C139300 + (C80797 + C80798) * C5913) *
                C139588 +
            ((C47234 * C847 + C139586 * C1129 + C47233 * C841 +
              C47031 * C1125) *
                 C139300 +
             (C47234 * C832 + C139586 * C1121 + C47233 * C831 +
              C47031 * C1118) *
                 C5913) *
                C30408) *
               C139286 * C139561) *
              C139592 +
          ((((C47233 * C832 + C47031 * C1121 + C47234 * C5916 +
              C139586 * C6094) *
                 C5913 +
             (C47233 * C847 + C47031 * C1129 + C47234 * C5919 +
              C139586 * C6097) *
                 C139300) *
                C30408 +
            ((C86458 + C86459) * C5913 + (C86460 + C86461) * C139300) *
                C139588) *
               C139286 * C139561 -
           (((C47234 * C68837 + C139586 * C69111 + C47233 * C21081 +
              C47031 * C21415) *
                 C139300 +
             (C47234 * C68836 + C139586 * C69110 + C47233 * C21079 +
              C47031 * C21413) *
                 C5913) *
                C139588 +
            ((C86461 + C86460) * C139300 + (C86459 + C86458) * C5913) *
                C30408) *
               C139286 * C139403) *
              C7158)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[81] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C831 + C139586 * C1118) *
                C7235 +
            (C47233 * C182 + C47031 * C394 + C47234 * C939 + C139586 * C1231) *
                C139591 -
            (C47234 * C832 + C139586 * C1121 + C47233 * C831 + C47031 * C1118) *
                C7236 -
            (C47234 * C940 + C139586 * C1232 + C47233 * C939 + C47031 * C1231) *
                C139592 +
            (C47233 * C832 + C47031 * C1121 + C47234 * C5916 +
             C139586 * C6094) *
                C7237 +
            (C47233 * C940 + C47031 * C1232 + C47234 * C5982 +
             C139586 * C6148) *
                C7158) *
               C30408 +
           ((C77909 + C77910) * C7235 + (C78023 + C78024) * C139591 -
            (C80797 + C80798) * C7236 - (C80933 + C80934) * C139592 +
            (C86458 + C86459) * C7237 + (C86564 + C86565) * C7158) *
               C139588) *
              C139286 * C139300 * C139561 +
          (((C80798 + C80797) * C7236 -
            ((C78024 + C78023) * C139591 + (C77910 + C77909) * C7235) +
            (C80934 + C80933) * C139592 - (C86459 + C86458) * C7237 -
            (C86565 + C86564) * C7158) *
               C30408 +
           ((C83437 + C83438) * C7236 -
            ((C78025 + C78026) * C139591 + (C77915 + C77916) * C7235) +
            (C83543 + C83544) * C139592 -
            (C47234 * C68836 + C139586 * C69110 + C47233 * C21079 +
             C47031 * C21413) *
                C7237 -
            (C47234 * C68934 + C139586 * C69186 + C47233 * C21197 +
             C47031 * C21514) *
                C7158) *
               C139588) *
              C139286 * C139300 * C139403)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[81] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C831 + C139586 * C1118) *
                C3607 +
            (C47233 * C245 + C47031 * C474 + C47234 * C1029 + C139586 * C1339) *
                C139561 -
            (C77910 + C77909) * C3608 - (C78133 + C78134) * C139403) *
               C30408 +
           ((C77909 + C77910) * C3607 + (C78134 + C78133) * C139561 -
            (C77915 + C77916) * C3608 - (C78136 + C78135) * C139403) *
               C139588) *
              C139286 * C139591 +
          (((C80798 + C80797) * C3608 -
            ((C47234 * C1030 + C139586 * C1340 + C47233 * C1029 +
              C47031 * C1339) *
                 C139561 +
             (C47234 * C832 + C139586 * C1121 + C47233 * C831 +
              C47031 * C1118) *
                 C3607) +
            (C81069 + C81070) * C139403) *
               C30408 +
           ((C83437 + C83438) * C3608 -
            ((C81070 + C81069) * C139561 + (C80797 + C80798) * C3607) +
            (C83648 + C83647) * C139403) *
               C139588) *
              C139286 * C139592 +
          (((C47233 * C832 + C47031 * C1121 + C47234 * C5916 +
             C139586 * C6094) *
                C3607 +
            (C47233 * C1030 + C47031 * C1340 + C47234 * C6038 +
             C139586 * C6203) *
                C139561 -
            (C86459 + C86458) * C3608 - (C86668 + C86669) * C139403) *
               C30408 +
           ((C86458 + C86459) * C3607 + (C86669 + C86668) * C139561 -
            (C47234 * C68836 + C139586 * C69110 + C47233 * C21079 +
             C47031 * C21413) *
                C3608 -
            (C47234 * C69016 + C139586 * C69261 + C47233 * C21305 +
             C47031 * C21614) *
                C139403) *
               C139588) *
              C139286 * C7158) *
         C139300) /
        (p * q * std::sqrt(p + q));
    d2eezx[81] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C30812 * C107 + C30408 * C555 + C30813 * C1767 +
              C139588 * C2376) *
                 C5913 +
             (C30812 * C116 + C30408 * C561 + C30813 * C1777 +
              C139588 * C2383) *
                 C139300) *
                C139286 * C47031 +
            ((C77185 + C77186) * C5913 + (C77187 + C77188) * C139300) *
                C139286 * C139586) *
               C139561 -
           (((C81209 + C81210) * C139300 + (C81211 + C81212) * C5913) *
                C139286 * C139586 +
            ((C30813 * C1783 + C139588 * C2387 + C30812 * C1777 +
              C30408 * C2383) *
                 C139300 +
             (C30813 * C1768 + C139588 * C2379 + C30812 * C1767 +
              C30408 * C2376) *
                 C5913) *
                C139286 * C47031) *
               C139403) *
              C139591 +
          ((((C81212 + C81211) * C5913 + (C81210 + C81209) * C139300) *
                C139286 * C47031 +
            ((C86776 + C86777) * C5913 + (C86778 + C86779) * C139300) *
                C139286 * C139586) *
               C139403 -
           (((C77189 + C77190) * C139300 + (C77191 + C77192) * C5913) *
                C139286 * C139586 +
            ((C77188 + C77187) * C139300 + (C77186 + C77185) * C5913) *
                C139286 * C47031) *
               C139561) *
              C139592 +
          ((((C77192 + C77191) * C5913 + (C77190 + C77189) * C139300) *
                C139286 * C47031 +
            ((C82845 + C82846) * C5913 + (C82847 + C82848) * C139300) *
                C139286 * C139586) *
               C139561 -
           (((C30813 * C68837 + C139588 * C69337 + C30812 * C24131 +
              C30408 * C24767) *
                 C139300 +
             (C30813 * C68836 + C139588 * C69336 + C30812 * C24129 +
              C30408 * C24765) *
                 C5913) *
                C139286 * C139586 +
            ((C86779 + C86778) * C139300 + (C86777 + C86776) * C5913) *
                C139286 * C47031) *
               C139403) *
              C7158)) /
        (p * q * std::sqrt(p + q));
    d2eezy[81] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1767 + C139588 * C2376) *
                C7235 +
            (C30812 * C182 + C30408 * C641 + C30813 * C1873 + C139588 * C2492) *
                C139591 -
            (C77186 + C77185) * C7236 - (C77299 + C77300) * C139592 +
            (C77192 + C77191) * C7237 + (C77301 + C77302) * C7158) *
               C139286 * C47031 +
           ((C77185 + C77186) * C7235 + (C77300 + C77299) * C139591 -
            (C77191 + C77192) * C7236 - (C77302 + C77301) * C139592 +
            (C82845 + C82846) * C7237 + (C82920 + C82919) * C7158) *
               C139286 * C139586) *
              C139300 * C139561 +
          (((C81212 + C81211) * C7236 -
            ((C30813 * C1874 + C139588 * C2493 + C30812 * C1873 +
              C30408 * C2492) *
                 C139591 +
             (C30813 * C1768 + C139588 * C2379 + C30812 * C1767 +
              C30408 * C2376) *
                 C7235) +
            (C81347 + C81348) * C139592 - (C86777 + C86776) * C7237 -
            (C86882 + C86883) * C7158) *
               C139286 * C47031 +
           ((C86776 + C86777) * C7236 -
            ((C81348 + C81347) * C139591 + (C81211 + C81212) * C7235) +
            (C86883 + C86882) * C139592 -
            (C30813 * C68836 + C139588 * C69336 + C30812 * C24129 +
             C30408 * C24765) *
                C7237 -
            (C30813 * C68934 + C139588 * C69420 + C30812 * C24247 +
             C30408 * C24876) *
                C7158) *
               C139286 * C139586) *
              C139300 * C139403)) /
        (p * q * std::sqrt(p + q));
    d2eezz[81] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1767 + C139588 * C2376) *
                C3607 +
            (C30812 * C245 + C30408 * C719 + C30813 * C1965 + C139588 * C2591) *
                C139561 -
            (C30813 * C1768 + C139588 * C2379 + C30812 * C1767 +
             C30408 * C2376) *
                C3608 -
            (C30813 * C1966 + C139588 * C2592 + C30812 * C1965 +
             C30408 * C2591) *
                C139403) *
               C139286 * C47031 +
           ((C77185 + C77186) * C3607 + (C77409 + C77410) * C139561 -
            (C81211 + C81212) * C3608 - (C81483 + C81484) * C139403) *
               C139286 * C139586) *
              C139591 +
          (((C81212 + C81211) * C3608 -
            ((C77410 + C77409) * C139561 + (C77186 + C77185) * C3607) +
            (C81484 + C81483) * C139403) *
               C139286 * C47031 +
           ((C86776 + C86777) * C3608 -
            ((C77411 + C77412) * C139561 + (C77191 + C77192) * C3607) +
            (C86986 + C86987) * C139403) *
               C139286 * C139586) *
              C139592 +
          (((C77192 + C77191) * C3607 + (C77412 + C77411) * C139561 -
            (C86777 + C86776) * C3608 - (C86987 + C86986) * C139403) *
               C139286 * C47031 +
           ((C82845 + C82846) * C3607 + (C82991 + C82992) * C139561 -
            (C30813 * C68836 + C139588 * C69336 + C30812 * C24129 +
             C30408 * C24765) *
                C3608 -
            (C30813 * C69016 + C139588 * C69498 + C30812 * C24355 +
             C30408 * C24979) *
                C139403) *
               C139286 * C139586) *
              C7158) *
         C139300) /
        (p * q * std::sqrt(p + q));
    d2eexx[82] +=
        (-std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139286 * C113) * C5913 +
             (C63381 * C116 + C139286 * C125) * C139300) *
                C47031 +
            (C68304 + C68305) * C139586) *
               C30408 +
           ((C77533 * C5913 + C77534 * C139300) * C47031 +
            (C68844 + C68843) * C139586) *
               C139588) *
              C139339 * C5909 -
          ((C71170 * C139586 + (C68843 + C68844) * C47031) * C139588 +
           ((C68307 + C68306) * C139586 + (C68305 + C68304) * C47031) *
               C30408) *
              C139339 * C5910 +
          ((C68314 * C47031 + (C68309 + C68308) * C139586) * C30408 +
           ((C68842 + C68841) * C47031 + (C71177 + C71178) * C139586) *
               C139588) *
              C139339 * C5911 -
          ((((C63381 * C71166 + C139286 * C71168) * C139300 +
             (C63381 * C71165 + C139286 * C71167) * C5913) *
                C139586 +
            (C71178 + C71177) * C47031) *
               C139588 +
           ((C68319 + C68318) * C139586 + C68315 * C47031) * C30408) *
              C139339 * C5912)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139286 * C113) * C5230 +
             (C63381 * C116 + C139286 * C125) * C5225 -
             (C63381 * C108 + C139286 * C114) * C5231 -
             (C63381 * C117 + C139286 * C126) * C5226 +
             (C63381 * C109 + C139286 * C115) * C5232 +
             (C63381 * C118 + C139286 * C127) * C5227) *
                C47031 +
            (C67640 + C67641 - C67642 - C67643 + C67644 + C67645) * C139586) *
               C30408 +
           ((C77533 * C5230 + C77534 * C5225 - C77535 * C5231 - C77536 * C5226 +
             C79439 * C5232 + C79440 * C5227) *
                C47031 +
            (C81583 + C81584 - C81585 - C81586 + C81587 + C81588) * C139586) *
               C139588) *
              C139339 * C5228 +
          (((C67642 - (C67641 + C67640) + C67643 - C67644 - C67645) * C47031 +
            (C67648 - (C67647 + C67646) + C67649 - C67650 - C67651) * C139586) *
               C30408 +
           ((C81585 - (C81584 + C81583) + C81586 - C81587 - C81588) * C47031 +
            (C66726 * C5231 - (C66727 * C5225 + C66728 * C5230) +
             C66729 * C5226 - (C63381 * C8752 + C139286 * C8758) * C5232 -
             (C63381 * C8755 + C139286 * C8761) * C5227) *
                C139586) *
               C139588) *
              C139339 * C139377)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((((C63381 * C107 + C139286 * C113) * C5913 +
              (C63381 * C116 + C139286 * C125) * C139300) *
                 C47031 +
             (C68304 + C68305) * C139586) *
                C30408 +
            ((C83091 + C83092) * C47031 + C83093 * C139586) * C139588) *
               C1761 -
           ((C83094 * C139586 + (C83095 + C83096) * C47031) * C139588 +
            (C83097 * C139586 + (C83092 + C83091) * C47031) * C30408) *
               C1762 +
           (((C83096 + C83095) * C47031 + C83098 * C139586) * C30408 +
            (((C63381 * C10815 + C139286 * C10821) * C5913 +
              (C63381 * C10818 + C139286 * C10824) * C139300) *
                 C47031 +
             (C83105 + C83106) * C139586) *
                C139588) *
               C1763) *
              C5228 +
          (((C83093 * C47031 + (C68842 + C68841) * C139586) * C30408 +
            (C83098 * C47031 + (C68859 + C68860) * C139586) * C139588) *
               C1762 -
           ((C71170 * C139586 + C83097 * C47031) * C139588 +
            ((C68307 + C68306) * C139586 + (C68305 + C68304) * C47031) *
                C30408) *
               C1761 -
           ((((C63381 * C73225 + C139286 * C73227) * C139300 +
              (C63381 * C73224 + C139286 * C73226) * C5913) *
                 C139586 +
             (C83106 + C83105) * C47031) *
                C139588 +
            ((C68860 + C68859) * C139586 + C83094 * C47031) * C30408) *
               C1763) *
              C139377)) /
            (p * q * std::sqrt(p + q));
    d2eexy[82] +=
        (-std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139286 * C113) * C5976 +
            (C63381 * C182 + C139286 * C188) * C5909 - C63884 * C5977 -
            C63997 * C5910 + C63888 * C5978 + C63998 * C5911 - C63894 * C5979 -
            C63999 * C5912) *
               C47031 +
           (C63884 * C5976 + C63997 * C5909 - C63888 * C5977 - C63998 * C5910 +
            C63894 * C5978 + C63999 * C5911 - C68316 * C5979 - C68374 * C5912) *
               C139586) *
              C30408 +
          ((C77533 * C5976 + C77672 * C5909 - C66724 * C5977 - C66844 * C5910 +
            C66728 * C5978 + C66845 * C5911 - C71175 * C5979 - C71257 * C5912) *
               C47031 +
           (C66724 * C5976 + C66844 * C5909 - C66728 * C5977 - C66845 * C5910 +
            C71175 * C5978 + C71257 * C5911 -
            (C63381 * C71165 + C139286 * C71167) * C5979 -
            (C63381 * C71252 + C139286 * C71253) * C5912) *
               C139586) *
              C139588) *
         C139300 * C139339) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139286 * C113) * C5307 +
             (C63381 * C182 + C139286 * C188) * C5228 - C63884 * C5308 -
             C63997 * C139377) *
                C47031 +
            (C63884 * C5307 + C63997 * C5228 - C63888 * C5308 -
             C63998 * C139377) *
                C139586) *
               C30408 +
           ((C77533 * C5307 + C77672 * C5228 - C66724 * C5308 -
             C66844 * C139377) *
                C47031 +
            (C66724 * C5307 + C66844 * C5228 - C66728 * C5308 -
             C66845 * C139377) *
                C139586) *
               C139588) *
              C5225 +
          (((C63886 * C5308 -
             ((C63381 * C183 + C139286 * C189) * C5228 +
              (C63381 * C108 + C139286 * C114) * C5307) +
             C64000 * C139377) *
                C47031 +
            (C63890 * C5308 - (C64000 * C5228 + C63886 * C5307) +
             C64001 * C139377) *
                C139586) *
               C30408 +
           ((C66722 * C5308 - (C77673 * C5228 + C77535 * C5307) +
             C66846 * C139377) *
                C47031 +
            (C66726 * C5308 - (C66846 * C5228 + C66722 * C5307) +
             C66847 * C139377) *
                C139586) *
               C139588) *
              C5226 +
          ((((C63381 * C109 + C139286 * C115) * C5307 +
             (C63381 * C184 + C139286 * C190) * C5228 - C65320 * C5308 -
             C65406 * C139377) *
                C47031 +
            (C65320 * C5307 + C65406 * C5228 - C65322 * C5308 -
             C65407 * C139377) *
                C139586) *
               C30408 +
           ((C79439 * C5307 + C79546 * C5228 - C78537 * C5308 -
             C78641 * C139377) *
                C47031 +
            (C78537 * C5307 + C78641 * C5228 -
             (C63381 * C8752 + C139286 * C8758) * C5308 -
             (C63381 * C8838 + C139286 * C8841) * C139377) *
                C139586) *
               C139588) *
              C5227) *
         C139339) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139286 * C113) * C5307 +
             (C63381 * C182 + C139286 * C188) * C5228 - C63884 * C5308 -
             C63997 * C139377) *
                C47031 +
            (C63884 * C5307 + C63997 * C5228 - C63888 * C5308 -
             C63998 * C139377) *
                C139586) *
               C30408 +
           ((C83205 + C83206 - C83207 - C83208) * C47031 +
            (C83209 + C83210 - C83211 - C83212) * C139586) *
               C139588) *
              C139300 * C1761 +
          (((C83207 - (C83206 + C83205) + C83208) * C47031 +
            (C83211 - (C83210 + C83209) + C83212) * C139586) *
               C30408 +
           ((C83213 - (C83214 + C83215) + C83216) * C47031 +
            (C83217 - (C83218 + C83219) + C83220) * C139586) *
               C139588) *
              C139300 * C1762 +
          (((C83215 + C83214 - C83213 - C83216) * C47031 +
            (C83219 + C83218 - C83217 - C83220) * C139586) *
               C30408 +
           (((C63381 * C10815 + C139286 * C10821) * C5307 +
             (C63381 * C10877 + C139286 * C10880) * C5228 - C83103 * C5308 -
             C83223 * C139377) *
                C47031 +
            (C83103 * C5307 + C83223 * C5228 -
             (C63381 * C73224 + C139286 * C73226) * C5308 -
             (C63381 * C73278 + C139286 * C73279) * C139377) *
                C139586) *
               C139588) *
              C139300 * C1763)) /
            (p * q * std::sqrt(p + q));
    d2eexz[82] +=
        (-std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139286 * C113) * C244 +
             (C63381 * C245 + C139286 * C251) * C139339) *
                C47031 +
            (C64077 + C64101) * C139586) *
               C30408 +
           ((C77533 * C244 + C77790 * C139339) * C47031 +
            (C76769 + C76770) * C139586) *
               C139588) *
              C5909 -
          (((C76771 + C76772) * C139586 + (C76770 + C76769) * C47031) *
               C139588 +
           ((C64102 + C64080) * C139586 + (C64101 + C64077) * C47031) *
               C30408) *
              C5910 +
          ((C64107 * C47031 + (C64085 + C64103) * C139586) * C30408 +
           ((C76772 + C76771) * C47031 + (C82571 + C82572) * C139586) *
               C139588) *
              C5911 -
          ((((C63381 * C71331 + C139286 * C71332) * C139339 +
             (C63381 * C71165 + C139286 * C71167) * C244) *
                C139586 +
            (C82572 + C82571) * C47031) *
               C139588 +
           ((C68432 + C68428) * C139586 + C68427 * C47031) * C30408) *
              C5912) *
         C139300) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((((C63381 * C107 + C139286 * C113) * C244 +
              (C63381 * C245 + C139286 * C251) * C139339) *
                 C47031 +
             (C64077 + C64101) * C139586) *
                C30408 +
            ((C77533 * C244 + C77790 * C139339) * C47031 +
             (C76769 + C76770) * C139586) *
                C139588) *
               C5228 -
           (((C76771 + C76772) * C139586 + (C76770 + C76769) * C47031) *
                C139588 +
            ((C64102 + C64080) * C139586 + (C64101 + C64077) * C47031) *
                C30408) *
               C139377) *
              C5225 +
          ((((C64086 + C64104) * C47031 + (C64089 + C64105) * C139586) *
                C30408 +
            ((C76773 + C76774) * C47031 + (C76775 + C76776) * C139586) *
                C139588) *
               C139377 -
           (((C76774 + C76773) * C139586 +
             (C77792 * C139339 + C77535 * C244) * C47031) *
                C139588 +
            ((C64104 + C64086) * C139586 +
             ((C63381 * C246 + C139286 * C252) * C139339 +
              (C63381 * C108 + C139286 * C114) * C244) *
                 C47031) *
                C30408) *
               C5228) *
              C5226 +
          (((((C63381 * C109 + C139286 * C115) * C244 +
              (C63381 * C247 + C139286 * C253) * C139339) *
                 C47031 +
             (C65482 + C65490) * C139586) *
                C30408 +
            ((C79439 * C244 + C79648 * C139339) * C47031 +
             (C78740 + C78744) * C139586) *
                C139588) *
               C5228 -
           ((((C63381 * C8918 + C139286 * C8921) * C139339 +
              (C63381 * C8752 + C139286 * C8758) * C244) *
                 C139586 +
             (C78744 + C78740) * C47031) *
                C139588 +
            ((C65491 + C65485) * C139586 + (C65490 + C65482) * C47031) *
                C30408) *
               C139377) *
              C5227)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139286 * C113) * C1960 +
             (C63381 * C245 + C139286 * C251) * C1761 - C77533 * C1961 -
             C77790 * C1762 + C77539 * C1962 + C77791 * C1763) *
                C47031 +
            (C69019 + C69020 - C69021 - C69022 + C69023 + C69035) * C139586) *
               C30408 +
           ((C77533 * C1960 + C77790 * C1761 - C77539 * C1961 - C77791 * C1762 +
             (C63381 * C10815 + C139286 * C10821) * C1962 +
             (C63381 * C10937 + C139286 * C10940) * C1763) *
                C47031 +
            (C83322 + C83323 - C83324 - C83325 + C83326 + C83330) * C139586) *
               C139588) *
              C5228 +
          (((C69021 - (C69020 + C69019) + C69022 - C69023 - C69035) * C47031 +
            (C69028 - (C69027 + C69026) + C69029 - C69030 - C69036) * C139586) *
               C30408 +
           ((C83324 - (C83323 + C83322) + C83325 - C83326 - C83330) * C47031 +
            (C68855 * C1961 - (C66967 * C1761 + C66728 * C1960) +
             C69034 * C1762 - (C63381 * C73224 + C139286 * C73226) * C1962 -
             (C63381 * C73330 + C139286 * C73331) * C1763) *
                C139586) *
               C139588) *
              C139377) *
         C139300) /
            (p * q * std::sqrt(p + q));
    d2eeyx[82] +=
        (-std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C831 + C139586 * C1118) *
                C5913 +
            (C47233 * C116 + C47031 * C314 + C47234 * C841 + C139586 * C1125) *
                C139300) *
               C30408 +
           ((C77909 + C77910) * C5913 + (C77911 + C77912) * C139300) *
               C139588) *
              C139286 * C139339 * C5909 -
          (((C80795 + C80796) * C139300 + (C80797 + C80798) * C5913) * C139588 +
           ((C47234 * C847 + C139586 * C1129 + C47233 * C841 + C47031 * C1125) *
                C139300 +
            (C47234 * C832 + C139586 * C1121 + C47233 * C831 + C47031 * C1118) *
                C5913) *
               C30408) *
              C139286 * C139339 * C5910 +
          (((C47233 * C832 + C47031 * C1121 + C47234 * C5916 +
             C139586 * C6094) *
                C5913 +
            (C47233 * C847 + C47031 * C1129 + C47234 * C5919 +
             C139586 * C6097) *
                C139300) *
               C30408 +
           ((C47233 * C8754 + C47031 * C9000 + C47234 * C24129 +
             C139586 * C24463) *
                C5913 +
            (C47233 * C8757 + C47031 * C9003 + C47234 * C24131 +
             C139586 * C24465) *
                C139300) *
               C139588) *
              C139286 * C139339 * C5911 -
          (((C47234 * C71166 + C139586 * C71418 + C47233 * C24131 +
             C47031 * C24465) *
                C139300 +
            (C47234 * C71165 + C139586 * C71417 + C47233 * C24129 +
             C47031 * C24463) *
                C5913) *
               C139588 +
           ((C47234 * C20373 + C139586 * C20611 + C47233 * C5919 +
             C47031 * C6097) *
                C139300 +
            (C47234 * C20371 + C139586 * C20609 + C47233 * C5916 +
             C47031 * C6094) *
                C5913) *
               C30408) *
              C139286 * C139339 * C5912)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C831 + C139586 * C1118) *
                C5230 +
            (C47233 * C116 + C47031 * C314 + C47234 * C841 + C139586 * C1125) *
                C5225 -
            (C47260 + C47261) * C5231 - (C47262 + C47263) * C5226 +
            (C47264 + C47265) * C5232 + (C47266 + C47267) * C5227) *
               C30408 +
           ((C77909 + C77910) * C5230 + (C77911 + C77912) * C5225 -
            (C49073 + C49072) * C5231 - (C49075 + C49074) * C5226 +
            (C50925 + C50924) * C5232 + (C50927 + C50926) * C5227) *
               C139588) *
              C139286 * C139339 * C5228 +
          (((C48142 + C48143) * C5231 -
            ((C47234 * C847 + C139586 * C1129 + C47233 * C841 +
              C47031 * C1125) *
                 C5225 +
             (C47234 * C832 + C139586 * C1121 + C47233 * C831 +
              C47031 * C1118) *
                 C5230) +
            (C48144 + C48145) * C5226 - (C50018 + C50019) * C5232 -
            (C50020 + C50021) * C5227) *
               C30408 +
           ((C52007 + C52006) * C5231 -
            ((C80795 + C80796) * C5225 + (C80797 + C80798) * C5230) +
            (C52009 + C52008) * C5226 -
            (C47234 * C8752 + C139586 * C8998 + C47233 * C4225 +
             C47031 * C4551) *
                C5232 -
            (C47234 * C8755 + C139586 * C9001 + C47233 * C4232 +
             C47031 * C4555) *
                C5227) *
               C139588) *
              C139286 * C139339 * C139377)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C47233 * C107 + C47031 * C308 + C47234 * C831 + C139586 * C1118) *
                 C5913 +
             (C47233 * C116 + C47031 * C314 + C47234 * C841 + C139586 * C1125) *
                 C139300) *
                C30408 +
            ((C77909 + C77910) * C5913 + (C77911 + C77912) * C139300) *
                C139588) *
               C139286 * C1761 -
           (((C77913 + C77914) * C139300 + (C77915 + C77916) * C5913) *
                C139588 +
            ((C77912 + C77911) * C139300 + (C77910 + C77909) * C5913) *
                C30408) *
               C139286 * C1762 +
           (((C77916 + C77915) * C5913 + (C77914 + C77913) * C139300) * C30408 +
            ((C47233 * C10815 + C47031 * C10993 + C47234 * C26831 +
              C139586 * C27045) *
                 C5913 +
             (C47233 * C10818 + C47031 * C10996 + C47234 * C26833 +
              C139586 * C27047) *
                 C139300) *
                C139588) *
               C139286 * C1763) *
              C5228 +
          ((((C80798 + C80797) * C5913 + (C80796 + C80795) * C139300) * C30408 +
            ((C83437 + C83438) * C5913 + (C83439 + C83440) * C139300) *
                C139588) *
               C139286 * C1762 -
           (((C80795 + C80796) * C139300 + (C80797 + C80798) * C5913) *
                C139588 +
            ((C47234 * C847 + C139586 * C1129 + C47233 * C841 +
              C47031 * C1125) *
                 C139300 +
             (C47234 * C832 + C139586 * C1121 + C47233 * C831 +
              C47031 * C1118) *
                 C5913) *
                C30408) *
               C139286 * C1761 -
           (((C47234 * C73225 + C139586 * C73383 + C47233 * C26833 +
              C47031 * C27047) *
                 C139300 +
             (C47234 * C73224 + C139586 * C73382 + C47233 * C26831 +
              C47031 * C27045) *
                 C5913) *
                C139588 +
            ((C83440 + C83439) * C139300 + (C83438 + C83437) * C5913) *
                C30408) *
               C139286 * C1763) *
              C139377)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[82] +=
        (-std::pow(Pi, 2.5) *
         (((C47233 * C107 + C47031 * C308 + C47234 * C831 + C139586 * C1118) *
               C5976 +
           (C47233 * C182 + C47031 * C394 + C47234 * C939 + C139586 * C1231) *
               C5909 -
           (C47234 * C832 + C139586 * C1121 + C47233 * C831 + C47031 * C1118) *
               C5977 -
           (C47234 * C940 + C139586 * C1232 + C47233 * C939 + C47031 * C1231) *
               C5910 +
           (C47233 * C832 + C47031 * C1121 + C47234 * C5916 + C139586 * C6094) *
               C5978 +
           (C47233 * C940 + C47031 * C1232 + C47234 * C5982 + C139586 * C6148) *
               C5911 -
           (C47234 * C20371 + C139586 * C20609 + C47233 * C5916 +
            C47031 * C6094) *
               C5979 -
           (C47234 * C20457 + C139586 * C20678 + C47233 * C5982 +
            C47031 * C6148) *
               C5912) *
              C30408 +
          ((C77909 + C77910) * C5976 + (C78023 + C78024) * C5909 -
           (C80797 + C80798) * C5977 - (C80933 + C80934) * C5910 +
           (C47233 * C8754 + C47031 * C9000 + C47234 * C24129 +
            C139586 * C24463) *
               C5978 +
           (C47233 * C8840 + C47031 * C9078 + C47234 * C24247 +
            C139586 * C24564) *
               C5911 -
           (C47234 * C71165 + C139586 * C71417 + C47233 * C24129 +
            C47031 * C24463) *
               C5979 -
           (C47234 * C71252 + C139586 * C71493 + C47233 * C24247 +
            C47031 * C24564) *
               C5912) *
              C139588) *
         C139286 * C139300 * C139339) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C831 + C139586 * C1118) *
                C5307 +
            (C47233 * C182 + C47031 * C394 + C47234 * C939 + C139586 * C1231) *
                C5228 -
            (C47234 * C832 + C139586 * C1121 + C47233 * C831 + C47031 * C1118) *
                C5308 -
            (C47234 * C940 + C139586 * C1232 + C47233 * C939 + C47031 * C1231) *
                C139377) *
               C30408 +
           ((C77909 + C77910) * C5307 + (C78023 + C78024) * C5228 -
            (C80797 + C80798) * C5308 - (C80933 + C80934) * C139377) *
               C139588) *
              C139286 * C5225 +
          (((C48142 + C48143) * C5308 -
            ((C47351 + C47350) * C5228 + (C47260 + C47261) * C5307) +
            (C48257 + C48256) * C139377) *
               C30408 +
           ((C52007 + C52006) * C5308 -
            ((C49187 + C49186) * C5228 + (C49073 + C49072) * C5307) +
            (C52144 + C52145) * C139377) *
               C139588) *
              C139286 * C5226 +
          (((C47264 + C47265) * C5307 + (C47353 + C47352) * C5228 -
            (C50018 + C50019) * C5308 - (C50125 + C50124) * C139377) *
               C30408 +
           ((C50925 + C50924) * C5307 + (C51030 + C51031) * C5228 -
            (C47234 * C8752 + C139586 * C8998 + C47233 * C4225 +
             C47031 * C4551) *
                C5308 -
            (C47234 * C8838 + C139586 * C9080 + C47233 * C4339 +
             C47031 * C4669) *
                C139377) *
               C139588) *
              C139286 * C5227) *
         C139339) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C831 + C139586 * C1118) *
                C5307 +
            (C47233 * C182 + C47031 * C394 + C47234 * C939 + C139586 * C1231) *
                C5228 -
            (C47234 * C832 + C139586 * C1121 + C47233 * C831 + C47031 * C1118) *
                C5308 -
            (C47234 * C940 + C139586 * C1232 + C47233 * C939 + C47031 * C1231) *
                C139377) *
               C30408 +
           ((C77909 + C77910) * C5307 + (C78023 + C78024) * C5228 -
            (C80797 + C80798) * C5308 - (C80933 + C80934) * C139377) *
               C139588) *
              C139286 * C139300 * C1761 +
          (((C80798 + C80797) * C5308 -
            ((C78024 + C78023) * C5228 + (C77910 + C77909) * C5307) +
            (C80934 + C80933) * C139377) *
               C30408 +
           ((C83437 + C83438) * C5308 -
            ((C78025 + C78026) * C5228 + (C77915 + C77916) * C5307) +
            (C83543 + C83544) * C139377) *
               C139588) *
              C139286 * C139300 * C1762 +
          (((C77916 + C77915) * C5307 + (C78026 + C78025) * C5228 -
            (C83438 + C83437) * C5308 - (C83544 + C83543) * C139377) *
               C30408 +
           ((C47233 * C10815 + C47031 * C10993 + C47234 * C26831 +
             C139586 * C27045) *
                C5307 +
            (C47233 * C10877 + C47031 * C11049 + C47234 * C26905 +
             C139586 * C27115) *
                C5228 -
            (C47234 * C73224 + C139586 * C73382 + C47233 * C26831 +
             C47031 * C27045) *
                C5308 -
            (C47234 * C73278 + C139586 * C73434 + C47233 * C26905 +
             C47031 * C27115) *
                C139377) *
               C139588) *
              C139286 * C139300 * C1763)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[82] +=
        (-std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C831 + C139586 * C1118) *
                C244 +
            (C47233 * C245 + C47031 * C474 + C47234 * C1029 + C139586 * C1339) *
                C139339) *
               C30408 +
           ((C77909 + C77910) * C244 + (C78134 + C78133) * C139339) * C139588) *
              C139286 * C5909 -
          (((C81070 + C81069) * C139339 + (C80797 + C80798) * C244) * C139588 +
           ((C47234 * C1030 + C139586 * C1340 + C47233 * C1029 +
             C47031 * C1339) *
                C139339 +
            (C47234 * C832 + C139586 * C1121 + C47233 * C831 + C47031 * C1118) *
                C244) *
               C30408) *
              C139286 * C5910 +
          (((C47233 * C832 + C47031 * C1121 + C47234 * C5916 +
             C139586 * C6094) *
                C244 +
            (C47233 * C1030 + C47031 * C1340 + C47234 * C6038 +
             C139586 * C6203) *
                C139339) *
               C30408 +
           ((C47233 * C8754 + C47031 * C9000 + C47234 * C24129 +
             C139586 * C24463) *
                C244 +
            (C47233 * C8920 + C47031 * C9155 + C47234 * C24355 +
             C139586 * C24664) *
                C139339) *
               C139588) *
              C139286 * C5911 -
          (((C47234 * C71331 + C139586 * C71568 + C47233 * C24355 +
             C47031 * C24664) *
                C139339 +
            (C47234 * C71165 + C139586 * C71417 + C47233 * C24129 +
             C47031 * C24463) *
                C244) *
               C139588 +
           ((C47234 * C20533 + C139586 * C20747 + C47233 * C6038 +
             C47031 * C6203) *
                C139339 +
            (C47234 * C20371 + C139586 * C20609 + C47233 * C5916 +
             C47031 * C6094) *
                C244) *
               C30408) *
              C139286 * C5912) *
         C139300) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C47233 * C107 + C47031 * C308 + C47234 * C831 + C139586 * C1118) *
                 C244 +
             (C47233 * C245 + C47031 * C474 + C47234 * C1029 +
              C139586 * C1339) *
                 C139339) *
                C30408 +
            ((C77909 + C77910) * C244 + (C78134 + C78133) * C139339) *
                C139588) *
               C139286 * C5228 -
           (((C81070 + C81069) * C139339 + (C80797 + C80798) * C244) * C139588 +
            ((C47234 * C1030 + C139586 * C1340 + C47233 * C1029 +
              C47031 * C1339) *
                 C139339 +
             (C47234 * C832 + C139586 * C1121 + C47233 * C831 +
              C47031 * C1118) *
                 C244) *
                C30408) *
               C139286 * C139377) *
              C5225 +
          ((((C48142 + C48143) * C244 + (C48367 + C48366) * C139339) * C30408 +
            ((C52007 + C52006) * C244 + (C52280 + C52281) * C139339) *
                C139588) *
               C139286 * C139377 -
           (((C49296 + C49297) * C139339 + (C49073 + C49072) * C244) * C139588 +
            ((C47435 + C47434) * C139339 + (C47260 + C47261) * C244) * C30408) *
               C139286 * C5228) *
              C5226 +
          ((((C47264 + C47265) * C244 + (C47437 + C47436) * C139339) * C30408 +
            ((C50925 + C50924) * C244 + (C51134 + C51135) * C139339) *
                C139588) *
               C139286 * C5228 -
           (((C47234 * C8918 + C139586 * C9157 + C47233 * C4445 +
              C47031 * C4785) *
                 C139339 +
             (C47234 * C8752 + C139586 * C8998 + C47233 * C4225 +
              C47031 * C4551) *
                 C244) *
                C139588 +
            ((C50229 + C50228) * C139339 + (C50018 + C50019) * C244) * C30408) *
               C139286 * C139377) *
              C5227)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C831 + C139586 * C1118) *
                C1960 +
            (C47233 * C245 + C47031 * C474 + C47234 * C1029 + C139586 * C1339) *
                C1761 -
            (C77910 + C77909) * C1961 - (C78133 + C78134) * C1762 +
            (C77916 + C77915) * C1962 + (C78135 + C78136) * C1763) *
               C30408 +
           ((C77909 + C77910) * C1960 + (C78134 + C78133) * C1761 -
            (C77915 + C77916) * C1961 - (C78136 + C78135) * C1762 +
            (C47233 * C10815 + C47031 * C10993 + C47234 * C26831 +
             C139586 * C27045) *
                C1962 +
            (C47233 * C10937 + C47031 * C11100 + C47234 * C26975 +
             C139586 * C27182) *
                C1763) *
               C139588) *
              C139286 * C5228 +
          (((C80798 + C80797) * C1961 -
            ((C47234 * C1030 + C139586 * C1340 + C47233 * C1029 +
              C47031 * C1339) *
                 C1761 +
             (C47234 * C832 + C139586 * C1121 + C47233 * C831 +
              C47031 * C1118) *
                 C1960) +
            (C81069 + C81070) * C1762 - (C83438 + C83437) * C1962 -
            (C83647 + C83648) * C1763) *
               C30408 +
           ((C83437 + C83438) * C1961 -
            ((C81070 + C81069) * C1761 + (C80797 + C80798) * C1960) +
            (C83648 + C83647) * C1762 -
            (C47234 * C73224 + C139586 * C73382 + C47233 * C26831 +
             C47031 * C27045) *
                C1962 -
            (C47234 * C73330 + C139586 * C73485 + C47233 * C26975 +
             C47031 * C27182) *
                C1763) *
               C139588) *
              C139286 * C139377) *
         C139300) /
            (p * q * std::sqrt(p + q));
    d2eezx[82] +=
        (-std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1767 + C139588 * C2376) *
                C5913 +
            (C30812 * C116 + C30408 * C561 + C30813 * C1777 + C139588 * C2383) *
                C139300) *
               C139286 * C47031 +
           ((C77185 + C77186) * C5913 + (C77187 + C77188) * C139300) * C139286 *
               C139586) *
              C139339 * C5909 -
          (((C77189 + C77190) * C139300 + (C77191 + C77192) * C5913) * C139286 *
               C139586 +
           ((C77188 + C77187) * C139300 + (C77186 + C77185) * C5913) * C139286 *
               C47031) *
              C139339 * C5910 +
          (((C77192 + C77191) * C5913 + (C77190 + C77189) * C139300) * C139286 *
               C47031 +
           ((C82845 + C82846) * C5913 + (C82847 + C82848) * C139300) * C139286 *
               C139586) *
              C139339 * C5911 -
          (((C30813 * C71166 + C139588 * C71644 + C30812 * C20373 +
             C30408 * C20817) *
                C139300 +
            (C30813 * C71165 + C139588 * C71643 + C30812 * C20371 +
             C30408 * C20815) *
                C5913) *
               C139286 * C139586 +
           ((C82848 + C82847) * C139300 + (C82846 + C82845) * C5913) * C139286 *
               C47031) *
              C139339 * C5912)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1767 + C139588 * C2376) *
                C5230 +
            (C30812 * C116 + C30408 * C561 + C30813 * C1777 + C139588 * C2383) *
                C5225 -
            (C30839 + C30840) * C5231 - (C30841 + C30842) * C5226 +
            (C30843 + C30844) * C5232 + (C30845 + C30846) * C5227) *
               C139286 * C47031 +
           ((C77185 + C77186) * C5230 + (C77187 + C77188) * C5225 -
            (C31744 + C31743) * C5231 - (C31746 + C31745) * C5226 +
            (C33762 + C33761) * C5232 + (C33764 + C33763) * C5227) *
               C139286 * C139586) *
              C139339 * C5228 +
          (((C31743 + C31744) * C5231 -
            ((C77188 + C77187) * C5225 + (C77186 + C77185) * C5230) +
            (C31745 + C31746) * C5226 - (C33761 + C33762) * C5232 -
            (C33763 + C33764) * C5227) *
               C139286 * C47031 +
           ((C31748 + C31747) * C5231 -
            ((C77189 + C77190) * C5225 + (C77191 + C77192) * C5230) +
            (C31750 + C31749) * C5226 -
            (C30813 * C8752 + C139588 * C9232 + C30812 * C834 +
             C30408 * C1445) *
                C5232 -
            (C30813 * C8755 + C139588 * C9235 + C30812 * C849 +
             C30408 * C1453) *
                C5227) *
               C139286 * C139586) *
              C139339 * C139377)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C30812 * C107 + C30408 * C555 + C30813 * C1767 +
              C139588 * C2376) *
                 C5913 +
             (C30812 * C116 + C30408 * C561 + C30813 * C1777 +
              C139588 * C2383) *
                 C139300) *
                C139286 * C47031 +
            ((C77185 + C77186) * C5913 + (C77187 + C77188) * C139300) *
                C139286 * C139586) *
               C1761 -
           (((C81209 + C81210) * C139300 + (C81211 + C81212) * C5913) *
                C139286 * C139586 +
            ((C30813 * C1783 + C139588 * C2387 + C30812 * C1777 +
              C30408 * C2383) *
                 C139300 +
             (C30813 * C1768 + C139588 * C2379 + C30812 * C1767 +
              C30408 * C2376) *
                 C5913) *
                C139286 * C47031) *
               C1762 +
           (((C30812 * C1768 + C30408 * C2379 + C30813 * C10815 +
              C139588 * C11155) *
                 C5913 +
             (C30812 * C1783 + C30408 * C2387 + C30813 * C10818 +
              C139588 * C11158) *
                 C139300) *
                C139286 * C47031 +
            ((C83755 + C83756) * C5913 + (C83757 + C83758) * C139300) *
                C139286 * C139586) *
               C1763) *
              C5228 +
          ((((C81212 + C81211) * C5913 + (C81210 + C81209) * C139300) *
                C139286 * C47031 +
            ((C30812 * C8754 + C30408 * C9234 + C30813 * C21079 +
              C139588 * C21715) *
                 C5913 +
             (C30812 * C8757 + C30408 * C9237 + C30813 * C21081 +
              C139588 * C21717) *
                 C139300) *
                C139286 * C139586) *
               C1762 -
           (((C77189 + C77190) * C139300 + (C77191 + C77192) * C5913) *
                C139286 * C139586 +
            ((C77188 + C77187) * C139300 + (C77186 + C77185) * C5913) *
                C139286 * C47031) *
               C1761 -
           (((C30813 * C73225 + C139588 * C73537 + C30812 * C21081 +
              C30408 * C21717) *
                 C139300 +
             (C30813 * C73224 + C139588 * C73536 + C30812 * C21079 +
              C30408 * C21715) *
                 C5913) *
                C139286 * C139586 +
            ((C83758 + C83757) * C139300 + (C83756 + C83755) * C5913) *
                C139286 * C47031) *
               C1763) *
              C139377)) /
            (p * q * std::sqrt(p + q));
    d2eezy[82] +=
        (-std::pow(Pi, 2.5) *
         (((C30812 * C107 + C30408 * C555 + C30813 * C1767 + C139588 * C2376) *
               C5976 +
           (C30812 * C182 + C30408 * C641 + C30813 * C1873 + C139588 * C2492) *
               C5909 -
           (C77186 + C77185) * C5977 - (C77299 + C77300) * C5910 +
           (C77192 + C77191) * C5978 + (C77301 + C77302) * C5911 -
           (C82846 + C82845) * C5979 - (C82919 + C82920) * C5912) *
              C139286 * C47031 +
          ((C77185 + C77186) * C5976 + (C77300 + C77299) * C5909 -
           (C77191 + C77192) * C5977 - (C77302 + C77301) * C5910 +
           (C82845 + C82846) * C5978 + (C82920 + C82919) * C5911 -
           (C30813 * C71165 + C139588 * C71643 + C30812 * C20371 +
            C30408 * C20815) *
               C5979 -
           (C30813 * C71252 + C139588 * C71729 + C30812 * C20457 +
            C30408 * C20902) *
               C5912) *
              C139286 * C139586) *
         C139300 * C139339) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1767 + C139588 * C2376) *
                C5307 +
            (C30812 * C182 + C30408 * C641 + C30813 * C1873 + C139588 * C2492) *
                C5228 -
            (C77186 + C77185) * C5308 - (C77299 + C77300) * C139377) *
               C139286 * C47031 +
           ((C77185 + C77186) * C5307 + (C77300 + C77299) * C5228 -
            (C77191 + C77192) * C5308 - (C77302 + C77301) * C139377) *
               C139286 * C139586) *
              C5225 +
          (((C31743 + C31744) * C5308 -
            ((C30930 + C30929) * C5228 + (C30839 + C30840) * C5307) +
            (C31858 + C31857) * C139377) *
               C139286 * C47031 +
           ((C31748 + C31747) * C5308 -
            ((C31857 + C31858) * C5228 + (C31744 + C31743) * C5307) +
            (C31859 + C31860) * C139377) *
               C139286 * C139586) *
              C5226 +
          (((C30843 + C30844) * C5307 + (C30932 + C30931) * C5228 -
            (C33761 + C33762) * C5308 - (C33868 + C33867) * C139377) *
               C139286 * C47031 +
           ((C33762 + C33761) * C5307 + (C33867 + C33868) * C5228 -
            (C30813 * C8752 + C139588 * C9232 + C30812 * C834 +
             C30408 * C1445) *
                C5308 -
            (C30813 * C8838 + C139588 * C9314 + C30812 * C942 +
             C30408 * C1558) *
                C139377) *
               C139286 * C139586) *
              C5227) *
         C139339) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1767 + C139588 * C2376) *
                C5307 +
            (C30812 * C182 + C30408 * C641 + C30813 * C1873 + C139588 * C2492) *
                C5228 -
            (C77186 + C77185) * C5308 - (C77299 + C77300) * C139377) *
               C139286 * C47031 +
           ((C77185 + C77186) * C5307 + (C77300 + C77299) * C5228 -
            (C77191 + C77192) * C5308 - (C77302 + C77301) * C139377) *
               C139286 * C139586) *
              C139300 * C1761 +
          (((C81212 + C81211) * C5308 -
            ((C30813 * C1874 + C139588 * C2493 + C30812 * C1873 +
              C30408 * C2492) *
                 C5228 +
             (C30813 * C1768 + C139588 * C2379 + C30812 * C1767 +
              C30408 * C2376) *
                 C5307) +
            (C81347 + C81348) * C139377) *
               C139286 * C47031 +
           ((C30812 * C8754 + C30408 * C9234 + C30813 * C21079 +
             C139588 * C21715) *
                C5308 -
            ((C81348 + C81347) * C5228 + (C81211 + C81212) * C5307) +
            (C30812 * C8840 + C30408 * C9312 + C30813 * C21197 +
             C139588 * C21830) *
                C139377) *
               C139286 * C139586) *
              C139300 * C1762 +
          (((C30812 * C1768 + C30408 * C2379 + C30813 * C10815 +
             C139588 * C11155) *
                C5307 +
            (C30812 * C1874 + C30408 * C2493 + C30813 * C10877 +
             C139588 * C11211) *
                C5228 -
            (C83756 + C83755) * C5308 - (C83861 + C83862) * C139377) *
               C139286 * C47031 +
           ((C83755 + C83756) * C5307 + (C83862 + C83861) * C5228 -
            (C30813 * C73224 + C139588 * C73536 + C30812 * C21079 +
             C30408 * C21715) *
                C5308 -
            (C30813 * C73278 + C139588 * C73588 + C30812 * C21197 +
             C30408 * C21830) *
                C139377) *
               C139286 * C139586) *
              C139300 * C1763)) /
            (p * q * std::sqrt(p + q));
    d2eezz[82] +=
        (-std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1767 + C139588 * C2376) *
                C244 +
            (C30812 * C245 + C30408 * C719 + C30813 * C1965 + C139588 * C2591) *
                C139339) *
               C139286 * C47031 +
           ((C77185 + C77186) * C244 + (C77409 + C77410) * C139339) * C139286 *
               C139586) *
              C5909 -
          (((C77411 + C77412) * C139339 + (C77191 + C77192) * C244) * C139286 *
               C139586 +
           ((C77410 + C77409) * C139339 + (C77186 + C77185) * C244) * C139286 *
               C47031) *
              C5910 +
          (((C77192 + C77191) * C244 + (C77412 + C77411) * C139339) * C139286 *
               C47031 +
           ((C82845 + C82846) * C244 + (C82991 + C82992) * C139339) * C139286 *
               C139586) *
              C5911 -
          (((C30813 * C71331 + C139588 * C71807 + C30812 * C20533 +
             C30408 * C20974) *
                C139339 +
            (C30813 * C71165 + C139588 * C71643 + C30812 * C20371 +
             C30408 * C20815) *
                C244) *
               C139286 * C139586 +
           ((C82992 + C82991) * C139339 + (C82846 + C82845) * C244) * C139286 *
               C47031) *
              C5912) *
         C139300) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C30812 * C107 + C30408 * C555 + C30813 * C1767 +
              C139588 * C2376) *
                 C244 +
             (C30812 * C245 + C30408 * C719 + C30813 * C1965 +
              C139588 * C2591) *
                 C139339) *
                C139286 * C47031 +
            ((C77185 + C77186) * C244 + (C77409 + C77410) * C139339) * C139286 *
                C139586) *
               C5228 -
           (((C77411 + C77412) * C139339 + (C77191 + C77192) * C244) * C139286 *
                C139586 +
            ((C77410 + C77409) * C139339 + (C77186 + C77185) * C244) * C139286 *
                C47031) *
               C139377) *
              C5225 +
          ((((C31743 + C31744) * C244 + (C31968 + C31967) * C139339) * C139286 *
                C47031 +
            ((C31748 + C31747) * C244 + (C31969 + C31970) * C139339) * C139286 *
                C139586) *
               C139377 -
           (((C31967 + C31968) * C139339 + (C31744 + C31743) * C244) * C139286 *
                C139586 +
            ((C31014 + C31013) * C139339 + (C30839 + C30840) * C244) * C139286 *
                C47031) *
               C5228) *
              C5226 +
          ((((C30843 + C30844) * C244 + (C31016 + C31015) * C139339) * C139286 *
                C47031 +
            ((C33762 + C33761) * C244 + (C33971 + C33972) * C139339) * C139286 *
                C139586) *
               C5228 -
           (((C30813 * C8918 + C139588 * C9391 + C30812 * C1032 +
              C30408 * C1664) *
                 C139339 +
             (C30813 * C8752 + C139588 * C9232 + C30812 * C834 +
              C30408 * C1445) *
                 C244) *
                C139286 * C139586 +
            ((C33972 + C33971) * C139339 + (C33761 + C33762) * C244) * C139286 *
                C47031) *
               C139377) *
              C5227)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1767 + C139588 * C2376) *
                C1960 +
            (C30812 * C245 + C30408 * C719 + C30813 * C1965 + C139588 * C2591) *
                C1761 -
            (C30813 * C1768 + C139588 * C2379 + C30812 * C1767 +
             C30408 * C2376) *
                C1961 -
            (C30813 * C1966 + C139588 * C2592 + C30812 * C1965 +
             C30408 * C2591) *
                C1762 +
            (C30812 * C1768 + C30408 * C2379 + C30813 * C10815 +
             C139588 * C11155) *
                C1962 +
            (C30812 * C1966 + C30408 * C2592 + C30813 * C10937 +
             C139588 * C11262) *
                C1763) *
               C139286 * C47031 +
           ((C77185 + C77186) * C1960 + (C77409 + C77410) * C1761 -
            (C81211 + C81212) * C1961 - (C81483 + C81484) * C1762 +
            (C83755 + C83756) * C1962 + (C83965 + C83966) * C1763) *
               C139286 * C139586) *
              C5228 +
          (((C81212 + C81211) * C1961 -
            ((C77410 + C77409) * C1761 + (C77186 + C77185) * C1960) +
            (C81484 + C81483) * C1762 - (C83756 + C83755) * C1962 -
            (C83966 + C83965) * C1763) *
               C139286 * C47031 +
           ((C30812 * C8754 + C30408 * C9234 + C30813 * C21079 +
             C139588 * C21715) *
                C1961 -
            ((C77411 + C77412) * C1761 + (C77191 + C77192) * C1960) +
            (C30812 * C8920 + C30408 * C9389 + C30813 * C21305 +
             C139588 * C21933) *
                C1762 -
            (C30813 * C73224 + C139588 * C73536 + C30812 * C21079 +
             C30408 * C21715) *
                C1962 -
            (C30813 * C73330 + C139588 * C73639 + C30812 * C21305 +
             C30408 * C21933) *
                C1763) *
               C139286 * C139586) *
              C139377) *
         C139300) /
            (p * q * std::sqrt(p + q));
    d2eexx[83] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C63381 * C107 + C139286 * C113) * C137108 +
              (C63381 * C116 + C139286 * C125) * C139552 -
              (C63381 * C108 + C139286 * C114) * C137101 -
              (C63381 * C117 + C139286 * C126) * C139305) *
                 C47031 +
             (C69583 + C69584 - C69585 - C69586) * C139586) *
                C30408 +
            ((C84979 + C84980 - C84981 - C84982) * C47031 + C84991 * C139586) *
                C139588) *
               C139561 +
           (((C84981 - (C84980 + C84979) + C84982) * C47031 +
             C84992 * C139586) *
                C30408 +
            ((C77537 * C137101 - (C77538 * C139552 + C77539 * C137108) +
              C77540 * C139305) *
                 C47031 +
             (C84985 - (C84986 + C84987) + C84988) * C139586) *
                C139588) *
               C139403) *
              C5228 +
          ((((C69585 - (C69584 + C69583) + C69586) * C47031 +
             (C69589 - (C69588 + C69587) + C69590) * C139586) *
                C30408 +
            (C84992 * C47031 +
             (C70300 - (C70301 + C70302) + C70303) * C139586) *
                C139588) *
               C139561 +
           ((C84991 * C47031 + (C70302 + C70301 - C70300 - C70303) * C139586) *
                C30408 +
            ((C84987 + C84986 - C84985 - C84988) * C47031 +
             (C68855 * C137108 + C68856 * C139552 -
              (C63381 * C21078 + C139286 * C21082) * C137101 -
              (C63381 * C21080 + C139286 * C21084) * C139305) *
                 C139586) *
                C139588) *
               C139403) *
              C139377)) /
        (p * q * std::sqrt(p + q));
    d2eexy[83] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((((C63381 * C107 + C139286 * C113) * C5307 +
                        (C63381 * C182 + C139286 * C188) * C5228 -
                        C63884 * C5308 - C63997 * C139377) *
                           C47031 +
                       (C63884 * C5307 + C63997 * C5228 - C63888 * C5308 -
                        C63998 * C139377) *
                           C139586) *
                          C30408 +
                      ((C83205 + C83206 - C83207 - C83208) * C47031 +
                       (C83209 + C83210 - C83211 - C83212) * C139586) *
                          C139588) *
                         C139552 +
                     (((C63886 * C5308 -
                        ((C63381 * C183 + C139286 * C189) * C5228 +
                         (C63381 * C108 + C139286 * C114) * C5307) +
                        C64000 * C139377) *
                           C47031 +
                       (C63890 * C5308 - (C64000 * C5228 + C63886 * C5307) +
                        C64001 * C139377) *
                           C139586) *
                          C30408 +
                      ((C85123 - (C85124 + C85125) + C85126) * C47031 +
                       (C85127 - (C85128 + C85129) + C85130) * C139586) *
                          C139588) *
                         C139305) *
                        C139561 +
                    ((((C83207 - (C83206 + C83205) + C83208) * C47031 +
                       (C83211 - (C83210 + C83209) + C83212) * C139586) *
                          C30408 +
                      ((C83213 - (C83214 + C83215) + C83216) * C47031 +
                       (C83217 - (C83218 + C83219) + C83220) * C139586) *
                          C139588) *
                         C139552 +
                     (((C85125 + C85124 - C85123 - C85126) * C47031 +
                       (C85129 + C85128 - C85127 - C85130) * C139586) *
                          C30408 +
                      ((C77537 * C5307 + C77674 * C5228 - C77541 * C5308 -
                        C77675 * C139377) *
                           C47031 +
                       (C77541 * C5307 + C77675 * C5228 -
                        (C63381 * C21078 + C139286 * C21082) * C5308 -
                        (C63381 * C21196 + C139286 * C21198) * C139377) *
                           C139586) *
                          C139588) *
                         C139305) *
                        C139403)) /
                  (p * q * std::sqrt(p + q));
    d2eexz[83] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((((C63381 * C107 + C139286 * C113) * C3607 +
                        (C63381 * C245 + C139286 * C251) * C139561 -
                        C77533 * C3608 - C77790 * C139403) *
                           C47031 +
                       (C66946 + C66947 - C66948 - C66970) * C139586) *
                          C30408 +
                      ((C77533 * C3607 + C77790 * C139561 - C77539 * C3608 -
                        C77791 * C139403) *
                           C47031 +
                       (C80649 + C80650 - C80651 - C80652) * C139586) *
                          C139588) *
                         C5228 +
                     (((C66948 - (C66947 + C66946) + C66970) * C47031 +
                       (C66953 - (C66952 + C66951) + C66971) * C139586) *
                          C30408 +
                      ((C80651 - (C80650 + C80649) + C80652) * C47031 +
                       (C68855 * C3608 - (C66967 * C139561 + C66728 * C3607) +
                        C69034 * C139403) *
                           C139586) *
                          C139588) *
                         C139377) *
                        C139552 +
                    ((((C77535 * C3608 -
                        ((C63381 * C246 + C139286 * C252) * C139561 +
                         (C63381 * C108 + C139286 * C114) * C3607) +
                        C77792 * C139403) *
                           C47031 +
                       (C66956 - (C66957 + C66958) + C66972) * C139586) *
                          C30408 +
                      ((C77537 * C3608 - (C77792 * C139561 + C77535 * C3607) +
                        C77793 * C139403) *
                           C47031 +
                       (C80653 - (C80654 + C80655) + C80656) * C139586) *
                          C139588) *
                         C5228 +
                     (((C66958 + C66957 - C66956 - C66972) * C47031 +
                       (C66963 + C66962 - C66961 - C66973) * C139586) *
                          C30408 +
                      ((C80655 + C80654 - C80653 - C80656) * C47031 +
                       (C66726 * C3607 + C66969 * C139561 -
                        (C63381 * C21078 + C139286 * C21082) * C3608 -
                        (C63381 * C21304 + C139286 * C21306) * C139403) *
                           C139586) *
                          C139588) *
                         C139377) *
                        C139305)) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[83] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47233 * C107 + C47031 * C308 + C47234 * C831 + C139586 * C1118) *
                 C137108 +
             (C47233 * C116 + C47031 * C314 + C47234 * C841 + C139586 * C1125) *
                 C139552 -
             (C47260 + C47261) * C137101 - (C47262 + C47263) * C139305) *
                C30408 +
            ((C77909 + C77910) * C137108 + (C77911 + C77912) * C139552 -
             (C49073 + C49072) * C137101 - (C49075 + C49074) * C139305) *
                C139588) *
               C139286 * C139561 +
           (((C49072 + C49073) * C137101 -
             ((C77912 + C77911) * C139552 + (C77910 + C77909) * C137108) +
             (C49074 + C49075) * C139305) *
                C30408 +
            ((C49077 + C49076) * C137101 -
             ((C77913 + C77914) * C139552 + (C77915 + C77916) * C137108) +
             (C49079 + C49078) * C139305) *
                C139588) *
               C139286 * C139403) *
              C5228 +
          ((((C48142 + C48143) * C137101 -
             ((C47234 * C847 + C139586 * C1129 + C47233 * C841 +
               C47031 * C1125) *
                  C139552 +
              (C47234 * C832 + C139586 * C1121 + C47233 * C831 +
               C47031 * C1118) *
                  C137108) +
             (C48144 + C48145) * C139305) *
                C30408 +
            ((C52007 + C52006) * C137101 -
             ((C80795 + C80796) * C139552 + (C80797 + C80798) * C137108) +
             (C52009 + C52008) * C139305) *
                C139588) *
               C139286 * C139561 +
           (((C80798 + C80797) * C137108 + (C80796 + C80795) * C139552 -
             (C52006 + C52007) * C137101 - (C52008 + C52009) * C139305) *
                C30408 +
            ((C83437 + C83438) * C137108 + (C83439 + C83440) * C139552 -
             (C47234 * C21078 + C139586 * C21412 + C47233 * C6441 +
              C47031 * C6687) *
                 C137101 -
             (C47234 * C21080 + C139586 * C21414 + C47233 * C6444 +
              C47031 * C6690) *
                 C139305) *
                C139588) *
               C139286 * C139403) *
              C139377)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[83] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47233 * C107 + C47031 * C308 + C47234 * C831 + C139586 * C1118) *
                 C5307 +
             (C47233 * C182 + C47031 * C394 + C47234 * C939 + C139586 * C1231) *
                 C5228 -
             (C47234 * C832 + C139586 * C1121 + C47233 * C831 +
              C47031 * C1118) *
                 C5308 -
             (C47234 * C940 + C139586 * C1232 + C47233 * C939 +
              C47031 * C1231) *
                 C139377) *
                C30408 +
            ((C77909 + C77910) * C5307 + (C78023 + C78024) * C5228 -
             (C80797 + C80798) * C5308 - (C80933 + C80934) * C139377) *
                C139588) *
               C139286 * C139552 +
           (((C48142 + C48143) * C5308 -
             ((C47351 + C47350) * C5228 + (C47260 + C47261) * C5307) +
             (C48257 + C48256) * C139377) *
                C30408 +
            ((C52007 + C52006) * C5308 -
             ((C49187 + C49186) * C5228 + (C49073 + C49072) * C5307) +
             (C52144 + C52145) * C139377) *
                C139588) *
               C139286 * C139305) *
              C139561 +
          ((((C80798 + C80797) * C5308 -
             ((C78024 + C78023) * C5228 + (C77910 + C77909) * C5307) +
             (C80934 + C80933) * C139377) *
                C30408 +
            ((C83437 + C83438) * C5308 -
             ((C78025 + C78026) * C5228 + (C77915 + C77916) * C5307) +
             (C83543 + C83544) * C139377) *
                C139588) *
               C139286 * C139552 +
           (((C49072 + C49073) * C5307 + (C49186 + C49187) * C5228 -
             (C52006 + C52007) * C5308 - (C52145 + C52144) * C139377) *
                C30408 +
            ((C49077 + C49076) * C5307 + (C49188 + C49189) * C5228 -
             (C47234 * C21078 + C139586 * C21412 + C47233 * C6441 +
              C47031 * C6687) *
                 C5308 -
             (C47234 * C21196 + C139586 * C21515 + C47233 * C6527 +
              C47031 * C6767) *
                 C139377) *
                C139588) *
               C139286 * C139305) *
              C139403)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[83] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47233 * C107 + C47031 * C308 + C47234 * C831 + C139586 * C1118) *
                 C3607 +
             (C47233 * C245 + C47031 * C474 + C47234 * C1029 +
              C139586 * C1339) *
                 C139561 -
             (C77910 + C77909) * C3608 - (C78133 + C78134) * C139403) *
                C30408 +
            ((C77909 + C77910) * C3607 + (C78134 + C78133) * C139561 -
             (C77915 + C77916) * C3608 - (C78136 + C78135) * C139403) *
                C139588) *
               C139286 * C5228 +
           (((C80798 + C80797) * C3608 -
             ((C47234 * C1030 + C139586 * C1340 + C47233 * C1029 +
               C47031 * C1339) *
                  C139561 +
              (C47234 * C832 + C139586 * C1121 + C47233 * C831 +
               C47031 * C1118) *
                  C3607) +
             (C81069 + C81070) * C139403) *
                C30408 +
            ((C83437 + C83438) * C3608 -
             ((C81070 + C81069) * C139561 + (C80797 + C80798) * C3607) +
             (C83648 + C83647) * C139403) *
                C139588) *
               C139286 * C139377) *
              C139552 +
          ((((C49072 + C49073) * C3608 -
             ((C47435 + C47434) * C139561 + (C47260 + C47261) * C3607) +
             (C49297 + C49296) * C139403) *
                C30408 +
            ((C49077 + C49076) * C3608 -
             ((C49296 + C49297) * C139561 + (C49073 + C49072) * C3607) +
             (C49298 + C49299) * C139403) *
                C139588) *
               C139286 * C5228 +
           (((C48142 + C48143) * C3607 + (C48367 + C48366) * C139561 -
             (C52006 + C52007) * C3608 - (C52281 + C52280) * C139403) *
                C30408 +
            ((C52007 + C52006) * C3607 + (C52280 + C52281) * C139561 -
             (C47234 * C21078 + C139586 * C21412 + C47233 * C6441 +
              C47031 * C6687) *
                 C3608 -
             (C47234 * C21304 + C139586 * C21615 + C47233 * C6607 +
              C47031 * C6844) *
                 C139403) *
                C139588) *
               C139286 * C139377) *
              C139305)) /
        (p * q * std::sqrt(p + q));
    d2eezx[83] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C30812 * C107 + C30408 * C555 + C30813 * C1767 +
              C139588 * C2376) *
                 C137108 +
             (C30812 * C116 + C30408 * C561 + C30813 * C1777 +
              C139588 * C2383) *
                 C139552 -
             (C30839 + C30840) * C137101 - (C30841 + C30842) * C139305) *
                C139286 * C47031 +
            ((C77185 + C77186) * C137108 + (C77187 + C77188) * C139552 -
             (C31744 + C31743) * C137101 - (C31746 + C31745) * C139305) *
                C139286 * C139586) *
               C139561 +
           (((C32837 + C32838) * C137101 -
             ((C30813 * C1783 + C139588 * C2387 + C30812 * C1777 +
               C30408 * C2383) *
                  C139552 +
              (C30813 * C1768 + C139588 * C2379 + C30812 * C1767 +
               C30408 * C2376) *
                  C137108) +
             (C32839 + C32840) * C139305) *
                C139286 * C47031 +
            ((C35893 + C35892) * C137101 -
             ((C81209 + C81210) * C139552 + (C81211 + C81212) * C137108) +
             (C35895 + C35894) * C139305) *
                C139286 * C139586) *
               C139403) *
              C5228 +
          ((((C31743 + C31744) * C137101 -
             ((C77188 + C77187) * C139552 + (C77186 + C77185) * C137108) +
             (C31745 + C31746) * C139305) *
                C139286 * C47031 +
            ((C31748 + C31747) * C137101 -
             ((C77189 + C77190) * C139552 + (C77191 + C77192) * C137108) +
             (C31750 + C31749) * C139305) *
                C139286 * C139586) *
               C139561 +
           (((C81212 + C81211) * C137108 + (C81210 + C81209) * C139552 -
             (C35892 + C35893) * C137101 - (C35894 + C35895) * C139305) *
                C139286 * C47031 +
            ((C30812 * C8754 + C30408 * C9234 + C30813 * C21079 +
              C139588 * C21715) *
                 C137108 +
             (C30812 * C8757 + C30408 * C9237 + C30813 * C21081 +
              C139588 * C21717) *
                 C139552 -
             (C30813 * C21078 + C139588 * C21714 + C30812 * C8753 +
              C30408 * C9233) *
                 C137101 -
             (C30813 * C21080 + C139588 * C21716 + C30812 * C8756 +
              C30408 * C9236) *
                 C139305) *
                C139286 * C139586) *
               C139403) *
              C139377)) /
        (p * q * std::sqrt(p + q));
    d2eezy[83] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C30812 * C107 + C30408 * C555 + C30813 * C1767 +
              C139588 * C2376) *
                 C5307 +
             (C30812 * C182 + C30408 * C641 + C30813 * C1873 +
              C139588 * C2492) *
                 C5228 -
             (C77186 + C77185) * C5308 - (C77299 + C77300) * C139377) *
                C139286 * C47031 +
            ((C77185 + C77186) * C5307 + (C77300 + C77299) * C5228 -
             (C77191 + C77192) * C5308 - (C77302 + C77301) * C139377) *
                C139286 * C139586) *
               C139552 +
           (((C31743 + C31744) * C5308 -
             ((C30930 + C30929) * C5228 + (C30839 + C30840) * C5307) +
             (C31858 + C31857) * C139377) *
                C139286 * C47031 +
            ((C31748 + C31747) * C5308 -
             ((C31857 + C31858) * C5228 + (C31744 + C31743) * C5307) +
             (C31859 + C31860) * C139377) *
                C139286 * C139586) *
               C139305) *
              C139561 +
          ((((C81212 + C81211) * C5308 -
             ((C30813 * C1874 + C139588 * C2493 + C30812 * C1873 +
               C30408 * C2492) *
                  C5228 +
              (C30813 * C1768 + C139588 * C2379 + C30812 * C1767 +
               C30408 * C2376) *
                  C5307) +
             (C81347 + C81348) * C139377) *
                C139286 * C47031 +
            ((C30812 * C8754 + C30408 * C9234 + C30813 * C21079 +
              C139588 * C21715) *
                 C5308 -
             ((C81348 + C81347) * C5228 + (C81211 + C81212) * C5307) +
             (C30812 * C8840 + C30408 * C9312 + C30813 * C21197 +
              C139588 * C21830) *
                 C139377) *
                C139286 * C139586) *
               C139552 +
           (((C32837 + C32838) * C5307 + (C32951 + C32952) * C5228 -
             (C35892 + C35893) * C5308 - (C36031 + C36030) * C139377) *
                C139286 * C47031 +
            ((C35893 + C35892) * C5307 + (C36030 + C36031) * C5228 -
             (C30813 * C21078 + C139588 * C21714 + C30812 * C8753 +
              C30408 * C9233) *
                 C5308 -
             (C30813 * C21196 + C139588 * C21831 + C30812 * C8839 +
              C30408 * C9313) *
                 C139377) *
                C139286 * C139586) *
               C139305) *
              C139403)) /
        (p * q * std::sqrt(p + q));
    d2eezz[83] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C30812 * C107 + C30408 * C555 + C30813 * C1767 +
              C139588 * C2376) *
                 C3607 +
             (C30812 * C245 + C30408 * C719 + C30813 * C1965 +
              C139588 * C2591) *
                 C139561 -
             (C30813 * C1768 + C139588 * C2379 + C30812 * C1767 +
              C30408 * C2376) *
                 C3608 -
             (C30813 * C1966 + C139588 * C2592 + C30812 * C1965 +
              C30408 * C2591) *
                 C139403) *
                C139286 * C47031 +
            ((C77185 + C77186) * C3607 + (C77409 + C77410) * C139561 -
             (C81211 + C81212) * C3608 - (C81483 + C81484) * C139403) *
                C139286 * C139586) *
               C5228 +
           (((C81212 + C81211) * C3608 -
             ((C77410 + C77409) * C139561 + (C77186 + C77185) * C3607) +
             (C81484 + C81483) * C139403) *
                C139286 * C47031 +
            ((C30812 * C8754 + C30408 * C9234 + C30813 * C21079 +
              C139588 * C21715) *
                 C3608 -
             ((C77411 + C77412) * C139561 + (C77191 + C77192) * C3607) +
             (C30812 * C8920 + C30408 * C9389 + C30813 * C21305 +
              C139588 * C21933) *
                 C139403) *
                C139286 * C139586) *
               C139377) *
              C139552 +
          ((((C32837 + C32838) * C3608 -
             ((C31014 + C31013) * C139561 + (C30839 + C30840) * C3607) +
             (C33062 + C33061) * C139403) *
                C139286 * C47031 +
            ((C35893 + C35892) * C3608 -
             ((C31967 + C31968) * C139561 + (C31744 + C31743) * C3607) +
             (C36166 + C36167) * C139403) *
                C139286 * C139586) *
               C5228 +
           (((C31743 + C31744) * C3607 + (C31968 + C31967) * C139561 -
             (C35892 + C35893) * C3608 - (C36167 + C36166) * C139403) *
                C139286 * C47031 +
            ((C31748 + C31747) * C3607 + (C31969 + C31970) * C139561 -
             (C30813 * C21078 + C139588 * C21714 + C30812 * C8753 +
              C30408 * C9233) *
                 C3608 -
             (C30813 * C21304 + C139588 * C21934 + C30812 * C8919 +
              C30408 * C9390) *
                 C139403) *
                C139286 * C139586) *
               C139377) *
              C139305)) /
        (p * q * std::sqrt(p + q));
    d2eexx[84] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139286 * C113) * C5230 +
             (C63381 * C116 + C139286 * C125) * C5225 -
             (C63381 * C108 + C139286 * C114) * C5231 -
             (C63381 * C117 + C139286 * C126) * C5226 +
             (C63381 * C109 + C139286 * C115) * C5232 +
             (C63381 * C118 + C139286 * C127) * C5227) *
                C47031 +
            (C67640 + C67641 - C67642 - C67643 + C67644 + C67645) * C139586) *
               C30408 +
           ((C77533 * C5230 + C77534 * C5225 - C77535 * C5231 - C77536 * C5226 +
             C79439 * C5232 + C79440 * C5227) *
                C47031 +
            (C81583 + C81584 - C81585 - C81586 + C81587 + C81588) * C139586) *
               C139588) *
              C139339 * C5228 +
          (((C67642 - (C67641 + C67640) + C67643 - C67644 - C67645) * C47031 +
            (C67648 - (C67647 + C67646) + C67649 - C67650 - C67651) * C139586) *
               C30408 +
           ((C81585 - (C81584 + C81583) + C81586 - C81587 - C81588) * C47031 +
            (C66726 * C5231 - (C66727 * C5225 + C66728 * C5230) +
             C66729 * C5226 - (C63381 * C8752 + C139286 * C8758) * C5232 -
             (C63381 * C8755 + C139286 * C8761) * C5227) *
                C139586) *
               C139588) *
              C139339 * C139377)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139286 * C113) * C5913 +
             (C63381 * C116 + C139286 * C125) * C139300) *
                C47031 +
            (C68304 + C68305) * C139586) *
               C30408 +
           ((C77533 * C5913 + C77534 * C139300) * C47031 +
            (C68844 + C68843) * C139586) *
               C139588) *
              C139339 * C5909 -
          ((C71170 * C139586 + (C68843 + C68844) * C47031) * C139588 +
           ((C68307 + C68306) * C139586 + (C68305 + C68304) * C47031) *
               C30408) *
              C139339 * C5910 +
          ((C68314 * C47031 + (C68309 + C68308) * C139586) * C30408 +
           ((C68842 + C68841) * C47031 + (C71177 + C71178) * C139586) *
               C139588) *
              C139339 * C5911 -
          ((((C63381 * C71166 + C139286 * C71168) * C139300 +
             (C63381 * C71165 + C139286 * C71167) * C5913) *
                C139586 +
            (C71178 + C71177) * C47031) *
               C139588 +
           ((C68319 + C68318) * C139586 + C68315 * C47031) * C30408) *
              C139339 * C5912)) /
            (p * q * std::sqrt(p + q));
    d2eexy[84] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139286 * C113) * C5307 +
             (C63381 * C182 + C139286 * C188) * C5228 - C63884 * C5308 -
             C63997 * C139377) *
                C47031 +
            (C63884 * C5307 + C63997 * C5228 - C63888 * C5308 -
             C63998 * C139377) *
                C139586) *
               C30408 +
           ((C77533 * C5307 + C77672 * C5228 - C66724 * C5308 -
             C66844 * C139377) *
                C47031 +
            (C66724 * C5307 + C66844 * C5228 - C66728 * C5308 -
             C66845 * C139377) *
                C139586) *
               C139588) *
              C5225 +
          (((C63886 * C5308 -
             ((C63381 * C183 + C139286 * C189) * C5228 +
              (C63381 * C108 + C139286 * C114) * C5307) +
             C64000 * C139377) *
                C47031 +
            (C63890 * C5308 - (C64000 * C5228 + C63886 * C5307) +
             C64001 * C139377) *
                C139586) *
               C30408 +
           ((C66722 * C5308 - (C77673 * C5228 + C77535 * C5307) +
             C66846 * C139377) *
                C47031 +
            (C66726 * C5308 - (C66846 * C5228 + C66722 * C5307) +
             C66847 * C139377) *
                C139586) *
               C139588) *
              C5226 +
          ((((C63381 * C109 + C139286 * C115) * C5307 +
             (C63381 * C184 + C139286 * C190) * C5228 - C65320 * C5308 -
             C65406 * C139377) *
                C47031 +
            (C65320 * C5307 + C65406 * C5228 - C65322 * C5308 -
             C65407 * C139377) *
                C139586) *
               C30408 +
           ((C79439 * C5307 + C79546 * C5228 - C78537 * C5308 -
             C78641 * C139377) *
                C47031 +
            (C78537 * C5307 + C78641 * C5228 -
             (C63381 * C8752 + C139286 * C8758) * C5308 -
             (C63381 * C8838 + C139286 * C8841) * C139377) *
                C139586) *
               C139588) *
              C5227) *
         C139339) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139286 * C113) * C5976 +
            (C63381 * C182 + C139286 * C188) * C5909 - C63884 * C5977 -
            C63997 * C5910 + C63888 * C5978 + C63998 * C5911 - C63894 * C5979 -
            C63999 * C5912) *
               C47031 +
           (C63884 * C5976 + C63997 * C5909 - C63888 * C5977 - C63998 * C5910 +
            C63894 * C5978 + C63999 * C5911 - C68316 * C5979 - C68374 * C5912) *
               C139586) *
              C30408 +
          ((C77533 * C5976 + C77672 * C5909 - C66724 * C5977 - C66844 * C5910 +
            C66728 * C5978 + C66845 * C5911 - C71175 * C5979 - C71257 * C5912) *
               C47031 +
           (C66724 * C5976 + C66844 * C5909 - C66728 * C5977 - C66845 * C5910 +
            C71175 * C5978 + C71257 * C5911 -
            (C63381 * C71165 + C139286 * C71167) * C5979 -
            (C63381 * C71252 + C139286 * C71253) * C5912) *
               C139586) *
              C139588) *
         C139300 * C139339) /
            (p * q * std::sqrt(p + q));
    d2eexz[84] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C63381 * C107 + C139286 * C113) * C244 +
              (C63381 * C245 + C139286 * C251) * C139339) *
                 C47031 +
             (C64077 + C64101) * C139586) *
                C30408 +
            ((C77533 * C244 + C77790 * C139339) * C47031 +
             (C76769 + C76770) * C139586) *
                C139588) *
               C5228 -
           (((C76771 + C76772) * C139586 + (C76770 + C76769) * C47031) *
                C139588 +
            ((C64102 + C64080) * C139586 + (C64101 + C64077) * C47031) *
                C30408) *
               C139377) *
              C5225 +
          ((((C64086 + C64104) * C47031 + (C64089 + C64105) * C139586) *
                C30408 +
            ((C76773 + C76774) * C47031 + (C76775 + C76776) * C139586) *
                C139588) *
               C139377 -
           (((C76774 + C76773) * C139586 +
             (C77792 * C139339 + C77535 * C244) * C47031) *
                C139588 +
            ((C64104 + C64086) * C139586 +
             ((C63381 * C246 + C139286 * C252) * C139339 +
              (C63381 * C108 + C139286 * C114) * C244) *
                 C47031) *
                C30408) *
               C5228) *
              C5226 +
          (((((C63381 * C109 + C139286 * C115) * C244 +
              (C63381 * C247 + C139286 * C253) * C139339) *
                 C47031 +
             (C65482 + C65490) * C139586) *
                C30408 +
            ((C79439 * C244 + C79648 * C139339) * C47031 +
             (C78740 + C78744) * C139586) *
                C139588) *
               C5228 -
           ((((C63381 * C8918 + C139286 * C8921) * C139339 +
              (C63381 * C8752 + C139286 * C8758) * C244) *
                 C139586 +
             (C78744 + C78740) * C47031) *
                C139588 +
            ((C65491 + C65485) * C139586 + (C65490 + C65482) * C47031) *
                C30408) *
               C139377) *
              C5227)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139286 * C113) * C244 +
             (C63381 * C245 + C139286 * C251) * C139339) *
                C47031 +
            (C64077 + C64101) * C139586) *
               C30408 +
           ((C77533 * C244 + C77790 * C139339) * C47031 +
            (C76769 + C76770) * C139586) *
               C139588) *
              C5909 -
          (((C76771 + C76772) * C139586 + (C76770 + C76769) * C47031) *
               C139588 +
           ((C64102 + C64080) * C139586 + (C64101 + C64077) * C47031) *
               C30408) *
              C5910 +
          ((C64107 * C47031 + (C64085 + C64103) * C139586) * C30408 +
           ((C76772 + C76771) * C47031 + (C82571 + C82572) * C139586) *
               C139588) *
              C5911 -
          ((((C63381 * C71331 + C139286 * C71332) * C139339 +
             (C63381 * C71165 + C139286 * C71167) * C244) *
                C139586 +
            (C82572 + C82571) * C47031) *
               C139588 +
           ((C68432 + C68428) * C139586 + C68427 * C47031) * C30408) *
              C5912) *
         C139300) /
            (p * q * std::sqrt(p + q));
    d2eeyx[84] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C831 + C139586 * C1118) *
                C5230 +
            (C47233 * C116 + C47031 * C314 + C47234 * C841 + C139586 * C1125) *
                C5225 -
            (C47260 + C47261) * C5231 - (C47262 + C47263) * C5226 +
            (C47264 + C47265) * C5232 + (C47266 + C47267) * C5227) *
               C30408 +
           ((C77909 + C77910) * C5230 + (C77911 + C77912) * C5225 -
            (C49073 + C49072) * C5231 - (C49075 + C49074) * C5226 +
            (C50925 + C50924) * C5232 + (C50927 + C50926) * C5227) *
               C139588) *
              C139286 * C139339 * C5228 +
          (((C48142 + C48143) * C5231 -
            ((C47234 * C847 + C139586 * C1129 + C47233 * C841 +
              C47031 * C1125) *
                 C5225 +
             (C47234 * C832 + C139586 * C1121 + C47233 * C831 +
              C47031 * C1118) *
                 C5230) +
            (C48144 + C48145) * C5226 - (C50018 + C50019) * C5232 -
            (C50020 + C50021) * C5227) *
               C30408 +
           ((C52007 + C52006) * C5231 -
            ((C80795 + C80796) * C5225 + (C80797 + C80798) * C5230) +
            (C52009 + C52008) * C5226 -
            (C47234 * C8752 + C139586 * C8998 + C47233 * C4225 +
             C47031 * C4551) *
                C5232 -
            (C47234 * C8755 + C139586 * C9001 + C47233 * C4232 +
             C47031 * C4555) *
                C5227) *
               C139588) *
              C139286 * C139339 * C139377)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C831 + C139586 * C1118) *
                C5913 +
            (C47233 * C116 + C47031 * C314 + C47234 * C841 + C139586 * C1125) *
                C139300) *
               C30408 +
           ((C77909 + C77910) * C5913 + (C77911 + C77912) * C139300) *
               C139588) *
              C139286 * C139339 * C5909 -
          (((C80795 + C80796) * C139300 + (C80797 + C80798) * C5913) * C139588 +
           ((C47234 * C847 + C139586 * C1129 + C47233 * C841 + C47031 * C1125) *
                C139300 +
            (C47234 * C832 + C139586 * C1121 + C47233 * C831 + C47031 * C1118) *
                C5913) *
               C30408) *
              C139286 * C139339 * C5910 +
          (((C47233 * C832 + C47031 * C1121 + C47234 * C5916 +
             C139586 * C6094) *
                C5913 +
            (C47233 * C847 + C47031 * C1129 + C47234 * C5919 +
             C139586 * C6097) *
                C139300) *
               C30408 +
           ((C47233 * C8754 + C47031 * C9000 + C47234 * C24129 +
             C139586 * C24463) *
                C5913 +
            (C47233 * C8757 + C47031 * C9003 + C47234 * C24131 +
             C139586 * C24465) *
                C139300) *
               C139588) *
              C139286 * C139339 * C5911 -
          (((C47234 * C71166 + C139586 * C71418 + C47233 * C24131 +
             C47031 * C24465) *
                C139300 +
            (C47234 * C71165 + C139586 * C71417 + C47233 * C24129 +
             C47031 * C24463) *
                C5913) *
               C139588 +
           ((C47234 * C20373 + C139586 * C20611 + C47233 * C5919 +
             C47031 * C6097) *
                C139300 +
            (C47234 * C20371 + C139586 * C20609 + C47233 * C5916 +
             C47031 * C6094) *
                C5913) *
               C30408) *
              C139286 * C139339 * C5912)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[84] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C831 + C139586 * C1118) *
                C5307 +
            (C47233 * C182 + C47031 * C394 + C47234 * C939 + C139586 * C1231) *
                C5228 -
            (C47234 * C832 + C139586 * C1121 + C47233 * C831 + C47031 * C1118) *
                C5308 -
            (C47234 * C940 + C139586 * C1232 + C47233 * C939 + C47031 * C1231) *
                C139377) *
               C30408 +
           ((C77909 + C77910) * C5307 + (C78023 + C78024) * C5228 -
            (C80797 + C80798) * C5308 - (C80933 + C80934) * C139377) *
               C139588) *
              C139286 * C5225 +
          (((C48142 + C48143) * C5308 -
            ((C47351 + C47350) * C5228 + (C47260 + C47261) * C5307) +
            (C48257 + C48256) * C139377) *
               C30408 +
           ((C52007 + C52006) * C5308 -
            ((C49187 + C49186) * C5228 + (C49073 + C49072) * C5307) +
            (C52144 + C52145) * C139377) *
               C139588) *
              C139286 * C5226 +
          (((C47264 + C47265) * C5307 + (C47353 + C47352) * C5228 -
            (C50018 + C50019) * C5308 - (C50125 + C50124) * C139377) *
               C30408 +
           ((C50925 + C50924) * C5307 + (C51030 + C51031) * C5228 -
            (C47234 * C8752 + C139586 * C8998 + C47233 * C4225 +
             C47031 * C4551) *
                C5308 -
            (C47234 * C8838 + C139586 * C9080 + C47233 * C4339 +
             C47031 * C4669) *
                C139377) *
               C139588) *
              C139286 * C5227) *
         C139339) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C47233 * C107 + C47031 * C308 + C47234 * C831 + C139586 * C1118) *
               C5976 +
           (C47233 * C182 + C47031 * C394 + C47234 * C939 + C139586 * C1231) *
               C5909 -
           (C47234 * C832 + C139586 * C1121 + C47233 * C831 + C47031 * C1118) *
               C5977 -
           (C47234 * C940 + C139586 * C1232 + C47233 * C939 + C47031 * C1231) *
               C5910 +
           (C47233 * C832 + C47031 * C1121 + C47234 * C5916 + C139586 * C6094) *
               C5978 +
           (C47233 * C940 + C47031 * C1232 + C47234 * C5982 + C139586 * C6148) *
               C5911 -
           (C47234 * C20371 + C139586 * C20609 + C47233 * C5916 +
            C47031 * C6094) *
               C5979 -
           (C47234 * C20457 + C139586 * C20678 + C47233 * C5982 +
            C47031 * C6148) *
               C5912) *
              C30408 +
          ((C77909 + C77910) * C5976 + (C78023 + C78024) * C5909 -
           (C80797 + C80798) * C5977 - (C80933 + C80934) * C5910 +
           (C47233 * C8754 + C47031 * C9000 + C47234 * C24129 +
            C139586 * C24463) *
               C5978 +
           (C47233 * C8840 + C47031 * C9078 + C47234 * C24247 +
            C139586 * C24564) *
               C5911 -
           (C47234 * C71165 + C139586 * C71417 + C47233 * C24129 +
            C47031 * C24463) *
               C5979 -
           (C47234 * C71252 + C139586 * C71493 + C47233 * C24247 +
            C47031 * C24564) *
               C5912) *
              C139588) *
         C139286 * C139300 * C139339) /
            (p * q * std::sqrt(p + q));
    d2eeyz[84] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47233 * C107 + C47031 * C308 + C47234 * C831 + C139586 * C1118) *
                 C244 +
             (C47233 * C245 + C47031 * C474 + C47234 * C1029 +
              C139586 * C1339) *
                 C139339) *
                C30408 +
            ((C77909 + C77910) * C244 + (C78134 + C78133) * C139339) *
                C139588) *
               C139286 * C5228 -
           (((C81070 + C81069) * C139339 + (C80797 + C80798) * C244) * C139588 +
            ((C47234 * C1030 + C139586 * C1340 + C47233 * C1029 +
              C47031 * C1339) *
                 C139339 +
             (C47234 * C832 + C139586 * C1121 + C47233 * C831 +
              C47031 * C1118) *
                 C244) *
                C30408) *
               C139286 * C139377) *
              C5225 +
          ((((C48142 + C48143) * C244 + (C48367 + C48366) * C139339) * C30408 +
            ((C52007 + C52006) * C244 + (C52280 + C52281) * C139339) *
                C139588) *
               C139286 * C139377 -
           (((C49296 + C49297) * C139339 + (C49073 + C49072) * C244) * C139588 +
            ((C47435 + C47434) * C139339 + (C47260 + C47261) * C244) * C30408) *
               C139286 * C5228) *
              C5226 +
          ((((C47264 + C47265) * C244 + (C47437 + C47436) * C139339) * C30408 +
            ((C50925 + C50924) * C244 + (C51134 + C51135) * C139339) *
                C139588) *
               C139286 * C5228 -
           (((C47234 * C8918 + C139586 * C9157 + C47233 * C4445 +
              C47031 * C4785) *
                 C139339 +
             (C47234 * C8752 + C139586 * C8998 + C47233 * C4225 +
              C47031 * C4551) *
                 C244) *
                C139588 +
            ((C50229 + C50228) * C139339 + (C50018 + C50019) * C244) * C30408) *
               C139286 * C139377) *
              C5227)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C831 + C139586 * C1118) *
                C244 +
            (C47233 * C245 + C47031 * C474 + C47234 * C1029 + C139586 * C1339) *
                C139339) *
               C30408 +
           ((C77909 + C77910) * C244 + (C78134 + C78133) * C139339) * C139588) *
              C139286 * C5909 -
          (((C81070 + C81069) * C139339 + (C80797 + C80798) * C244) * C139588 +
           ((C47234 * C1030 + C139586 * C1340 + C47233 * C1029 +
             C47031 * C1339) *
                C139339 +
            (C47234 * C832 + C139586 * C1121 + C47233 * C831 + C47031 * C1118) *
                C244) *
               C30408) *
              C139286 * C5910 +
          (((C47233 * C832 + C47031 * C1121 + C47234 * C5916 +
             C139586 * C6094) *
                C244 +
            (C47233 * C1030 + C47031 * C1340 + C47234 * C6038 +
             C139586 * C6203) *
                C139339) *
               C30408 +
           ((C47233 * C8754 + C47031 * C9000 + C47234 * C24129 +
             C139586 * C24463) *
                C244 +
            (C47233 * C8920 + C47031 * C9155 + C47234 * C24355 +
             C139586 * C24664) *
                C139339) *
               C139588) *
              C139286 * C5911 -
          (((C47234 * C71331 + C139586 * C71568 + C47233 * C24355 +
             C47031 * C24664) *
                C139339 +
            (C47234 * C71165 + C139586 * C71417 + C47233 * C24129 +
             C47031 * C24463) *
                C244) *
               C139588 +
           ((C47234 * C20533 + C139586 * C20747 + C47233 * C6038 +
             C47031 * C6203) *
                C139339 +
            (C47234 * C20371 + C139586 * C20609 + C47233 * C5916 +
             C47031 * C6094) *
                C244) *
               C30408) *
              C139286 * C5912) *
         C139300) /
            (p * q * std::sqrt(p + q));
    d2eezx[84] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1767 + C139588 * C2376) *
                C5230 +
            (C30812 * C116 + C30408 * C561 + C30813 * C1777 + C139588 * C2383) *
                C5225 -
            (C30839 + C30840) * C5231 - (C30841 + C30842) * C5226 +
            (C30843 + C30844) * C5232 + (C30845 + C30846) * C5227) *
               C139286 * C47031 +
           ((C77185 + C77186) * C5230 + (C77187 + C77188) * C5225 -
            (C31744 + C31743) * C5231 - (C31746 + C31745) * C5226 +
            (C33762 + C33761) * C5232 + (C33764 + C33763) * C5227) *
               C139286 * C139586) *
              C139339 * C5228 +
          (((C31743 + C31744) * C5231 -
            ((C77188 + C77187) * C5225 + (C77186 + C77185) * C5230) +
            (C31745 + C31746) * C5226 - (C33761 + C33762) * C5232 -
            (C33763 + C33764) * C5227) *
               C139286 * C47031 +
           ((C31748 + C31747) * C5231 -
            ((C77189 + C77190) * C5225 + (C77191 + C77192) * C5230) +
            (C31750 + C31749) * C5226 -
            (C30813 * C8752 + C139588 * C9232 + C30812 * C834 +
             C30408 * C1445) *
                C5232 -
            (C30813 * C8755 + C139588 * C9235 + C30812 * C849 +
             C30408 * C1453) *
                C5227) *
               C139286 * C139586) *
              C139339 * C139377)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1767 + C139588 * C2376) *
                C5913 +
            (C30812 * C116 + C30408 * C561 + C30813 * C1777 + C139588 * C2383) *
                C139300) *
               C139286 * C47031 +
           ((C77185 + C77186) * C5913 + (C77187 + C77188) * C139300) * C139286 *
               C139586) *
              C139339 * C5909 -
          (((C77189 + C77190) * C139300 + (C77191 + C77192) * C5913) * C139286 *
               C139586 +
           ((C77188 + C77187) * C139300 + (C77186 + C77185) * C5913) * C139286 *
               C47031) *
              C139339 * C5910 +
          (((C77192 + C77191) * C5913 + (C77190 + C77189) * C139300) * C139286 *
               C47031 +
           ((C82845 + C82846) * C5913 + (C82847 + C82848) * C139300) * C139286 *
               C139586) *
              C139339 * C5911 -
          (((C30813 * C71166 + C139588 * C71644 + C30812 * C20373 +
             C30408 * C20817) *
                C139300 +
            (C30813 * C71165 + C139588 * C71643 + C30812 * C20371 +
             C30408 * C20815) *
                C5913) *
               C139286 * C139586 +
           ((C82848 + C82847) * C139300 + (C82846 + C82845) * C5913) * C139286 *
               C47031) *
              C139339 * C5912)) /
            (p * q * std::sqrt(p + q));
    d2eezy[84] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1767 + C139588 * C2376) *
                C5307 +
            (C30812 * C182 + C30408 * C641 + C30813 * C1873 + C139588 * C2492) *
                C5228 -
            (C77186 + C77185) * C5308 - (C77299 + C77300) * C139377) *
               C139286 * C47031 +
           ((C77185 + C77186) * C5307 + (C77300 + C77299) * C5228 -
            (C77191 + C77192) * C5308 - (C77302 + C77301) * C139377) *
               C139286 * C139586) *
              C5225 +
          (((C31743 + C31744) * C5308 -
            ((C30930 + C30929) * C5228 + (C30839 + C30840) * C5307) +
            (C31858 + C31857) * C139377) *
               C139286 * C47031 +
           ((C31748 + C31747) * C5308 -
            ((C31857 + C31858) * C5228 + (C31744 + C31743) * C5307) +
            (C31859 + C31860) * C139377) *
               C139286 * C139586) *
              C5226 +
          (((C30843 + C30844) * C5307 + (C30932 + C30931) * C5228 -
            (C33761 + C33762) * C5308 - (C33868 + C33867) * C139377) *
               C139286 * C47031 +
           ((C33762 + C33761) * C5307 + (C33867 + C33868) * C5228 -
            (C30813 * C8752 + C139588 * C9232 + C30812 * C834 +
             C30408 * C1445) *
                C5308 -
            (C30813 * C8838 + C139588 * C9314 + C30812 * C942 +
             C30408 * C1558) *
                C139377) *
               C139286 * C139586) *
              C5227) *
         C139339) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C30812 * C107 + C30408 * C555 + C30813 * C1767 + C139588 * C2376) *
               C5976 +
           (C30812 * C182 + C30408 * C641 + C30813 * C1873 + C139588 * C2492) *
               C5909 -
           (C77186 + C77185) * C5977 - (C77299 + C77300) * C5910 +
           (C77192 + C77191) * C5978 + (C77301 + C77302) * C5911 -
           (C82846 + C82845) * C5979 - (C82919 + C82920) * C5912) *
              C139286 * C47031 +
          ((C77185 + C77186) * C5976 + (C77300 + C77299) * C5909 -
           (C77191 + C77192) * C5977 - (C77302 + C77301) * C5910 +
           (C82845 + C82846) * C5978 + (C82920 + C82919) * C5911 -
           (C30813 * C71165 + C139588 * C71643 + C30812 * C20371 +
            C30408 * C20815) *
               C5979 -
           (C30813 * C71252 + C139588 * C71729 + C30812 * C20457 +
            C30408 * C20902) *
               C5912) *
              C139286 * C139586) *
         C139300 * C139339) /
            (p * q * std::sqrt(p + q));
    d2eezz[84] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30812 * C107 + C30408 * C555 + C30813 * C1767 +
              C139588 * C2376) *
                 C244 +
             (C30812 * C245 + C30408 * C719 + C30813 * C1965 +
              C139588 * C2591) *
                 C139339) *
                C139286 * C47031 +
            ((C77185 + C77186) * C244 + (C77409 + C77410) * C139339) * C139286 *
                C139586) *
               C5228 -
           (((C77411 + C77412) * C139339 + (C77191 + C77192) * C244) * C139286 *
                C139586 +
            ((C77410 + C77409) * C139339 + (C77186 + C77185) * C244) * C139286 *
                C47031) *
               C139377) *
              C5225 +
          ((((C31743 + C31744) * C244 + (C31968 + C31967) * C139339) * C139286 *
                C47031 +
            ((C31748 + C31747) * C244 + (C31969 + C31970) * C139339) * C139286 *
                C139586) *
               C139377 -
           (((C31967 + C31968) * C139339 + (C31744 + C31743) * C244) * C139286 *
                C139586 +
            ((C31014 + C31013) * C139339 + (C30839 + C30840) * C244) * C139286 *
                C47031) *
               C5228) *
              C5226 +
          ((((C30843 + C30844) * C244 + (C31016 + C31015) * C139339) * C139286 *
                C47031 +
            ((C33762 + C33761) * C244 + (C33971 + C33972) * C139339) * C139286 *
                C139586) *
               C5228 -
           (((C30813 * C8918 + C139588 * C9391 + C30812 * C1032 +
              C30408 * C1664) *
                 C139339 +
             (C30813 * C8752 + C139588 * C9232 + C30812 * C834 +
              C30408 * C1445) *
                 C244) *
                C139286 * C139586 +
            ((C33972 + C33971) * C139339 + (C33761 + C33762) * C244) * C139286 *
                C47031) *
               C139377) *
              C5227)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1767 + C139588 * C2376) *
                C244 +
            (C30812 * C245 + C30408 * C719 + C30813 * C1965 + C139588 * C2591) *
                C139339) *
               C139286 * C47031 +
           ((C77185 + C77186) * C244 + (C77409 + C77410) * C139339) * C139286 *
               C139586) *
              C5909 -
          (((C77411 + C77412) * C139339 + (C77191 + C77192) * C244) * C139286 *
               C139586 +
           ((C77410 + C77409) * C139339 + (C77186 + C77185) * C244) * C139286 *
               C47031) *
              C5910 +
          (((C77192 + C77191) * C244 + (C77412 + C77411) * C139339) * C139286 *
               C47031 +
           ((C82845 + C82846) * C244 + (C82991 + C82992) * C139339) * C139286 *
               C139586) *
              C5911 -
          (((C30813 * C71331 + C139588 * C71807 + C30812 * C20533 +
             C30408 * C20974) *
                C139339 +
            (C30813 * C71165 + C139588 * C71643 + C30812 * C20371 +
             C30408 * C20815) *
                C244) *
               C139286 * C139586 +
           ((C82992 + C82991) * C139339 + (C82846 + C82845) * C244) * C139286 *
               C47031) *
              C5912) *
         C139300) /
            (p * q * std::sqrt(p + q));
    d2eexx[85] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C63381 * C107 + C139286 * C113) * C137108 +
              (C63381 * C116 + C139286 * C125) * C139552 -
              (C63381 * C108 + C139286 * C114) * C137101 -
              (C63381 * C117 + C139286 * C126) * C139305) *
                 C47031 +
             (C69583 + C69584 - C69585 - C69586) * C139586) *
                C30408 +
            ((C84979 + C84980 - C84981 - C84982) * C47031 + C84991 * C139586) *
                C139588) *
               C9466 +
           (((C84981 - (C84980 + C84979) + C84982) * C47031 +
             C84992 * C139586) *
                C30408 +
            ((C77537 * C137101 - (C77538 * C139552 + C77539 * C137108) +
              C77540 * C139305) *
                 C47031 +
             (C84985 - (C84986 + C84987) + C84988) * C139586) *
                C139588) *
               C139403) *
              C139560 +
          ((((C69585 - (C69584 + C69583) + C69586) * C47031 +
             (C69589 - (C69588 + C69587) + C69590) * C139586) *
                C30408 +
            (C84992 * C47031 +
             (C70300 - (C70301 + C70302) + C70303) * C139586) *
                C139588) *
               C9466 +
           ((C84991 * C47031 + (C70302 + C70301 - C70300 - C70303) * C139586) *
                C30408 +
            ((C84987 + C84986 - C84985 - C84988) * C47031 +
             (C68855 * C137108 + C68856 * C139552 -
              (C63381 * C21078 + C139286 * C21082) * C137101 -
              (C63381 * C21080 + C139286 * C21084) * C139305) *
                 C139586) *
                C139588) *
               C139403) *
              C139377)) /
        (p * q * std::sqrt(p + q));
    d2eexy[85] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((((C63381 * C107 + C139286 * C113) * C2783 +
                        (C63381 * C182 + C139286 * C188) * C139560 -
                        C63884 * C2784 - C63997 * C139377) *
                           C47031 +
                       (C63884 * C2783 + C63997 * C139560 - C63888 * C2784 -
                        C63998 * C139377) *
                           C139586) *
                          C30408 +
                      ((C80503 + C80504 - C80505 - C80506) * C47031 +
                       (C80507 + C80508 - C80509 - C80510) * C139586) *
                          C139588) *
                         C139552 +
                     (((C63886 * C2784 -
                        ((C63381 * C183 + C139286 * C189) * C139560 +
                         (C63381 * C108 + C139286 * C114) * C2783) +
                        C64000 * C139377) *
                           C47031 +
                       (C63890 * C2784 - (C64000 * C139560 + C63886 * C2783) +
                        C64001 * C139377) *
                           C139586) *
                          C30408 +
                      ((C80511 - (C80512 + C80513) + C80514) * C47031 +
                       (C80515 - (C80516 + C80517) + C80518) * C139586) *
                          C139588) *
                         C139305) *
                        C9466 +
                    ((((C80505 - (C80504 + C80503) + C80506) * C47031 +
                       (C80509 - (C80508 + C80507) + C80510) * C139586) *
                          C30408 +
                      ((C68853 * C2784 - (C77676 * C139560 + C77539 * C2783) +
                        C68941 * C139377) *
                           C47031 +
                       (C68855 * C2784 - (C68941 * C139560 + C68853 * C2783) +
                        C68942 * C139377) *
                           C139586) *
                          C139588) *
                         C139552 +
                     (((C80513 + C80512 - C80511 - C80514) * C47031 +
                       (C80517 + C80516 - C80515 - C80518) * C139586) *
                          C30408 +
                      ((C77537 * C2783 + C77674 * C139560 - C77541 * C2784 -
                        C77675 * C139377) *
                           C47031 +
                       (C77541 * C2783 + C77675 * C139560 -
                        (C63381 * C21078 + C139286 * C21082) * C2784 -
                        (C63381 * C21196 + C139286 * C21198) * C139377) *
                           C139586) *
                          C139588) *
                         C139305) *
                        C139403)) /
                  (p * q * std::sqrt(p + q));
    d2eexz[85] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((((C63381 * C107 + C139286 * C113) * C9616 +
                        (C63381 * C245 + C139286 * C251) * C9466 -
                        C77533 * C9617 - C77790 * C139403) *
                           C47031 +
                       (C72708 + C72709 - C72710 - C72711) * C139586) *
                          C30408 +
                      ((C77533 * C9616 + C77790 * C9466 - C77539 * C9617 -
                        C77791 * C139403) *
                           C47031 +
                       (C88182 + C88183 - C88184 - C88185) * C139586) *
                          C139588) *
                         C139560 +
                     (((C72710 - (C72709 + C72708) + C72711) * C47031 +
                       (C72714 - (C72713 + C72712) + C72715) * C139586) *
                          C30408 +
                      ((C88184 - (C88183 + C88182) + C88185) * C47031 +
                       (C88186 - (C88187 + C88188) + C88189) * C139586) *
                          C139588) *
                         C139377) *
                        C139552 +
                    ((((C77535 * C9617 -
                        ((C63381 * C246 + C139286 * C252) * C9466 +
                         (C63381 * C108 + C139286 * C114) * C9616) +
                        C77792 * C139403) *
                           C47031 +
                       (C73935 - (C73936 + C73937) + C73938) * C139586) *
                          C30408 +
                      ((C77537 * C9617 - (C77792 * C9466 + C77535 * C9616) +
                        C77793 * C139403) *
                           C47031 +
                       (C89820 - (C89821 + C89822) + C89823) * C139586) *
                          C139588) *
                         C139560 +
                     (((C73937 + C73936 - C73935 - C73938) * C47031 +
                       (C73941 + C73940 - C73939 - C73942) * C139586) *
                          C30408 +
                      ((C89822 + C89821 - C89820 - C89823) * C47031 +
                       (C66726 * C9616 + C66969 * C9466 -
                        (C63381 * C21078 + C139286 * C21082) * C9617 -
                        (C63381 * C21304 + C139286 * C21306) * C139403) *
                           C139586) *
                          C139588) *
                         C139377) *
                        C139305)) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[85] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47233 * C107 + C47031 * C308 + C47234 * C831 + C139586 * C1118) *
                 C137108 +
             (C47233 * C116 + C47031 * C314 + C47234 * C841 + C139586 * C1125) *
                 C139552 -
             (C47260 + C47261) * C137101 - (C47262 + C47263) * C139305) *
                C30408 +
            ((C77909 + C77910) * C137108 + (C77911 + C77912) * C139552 -
             (C49073 + C49072) * C137101 - (C49075 + C49074) * C139305) *
                C139588) *
               C139286 * C9466 +
           (((C49072 + C49073) * C137101 -
             ((C77912 + C77911) * C139552 + (C77910 + C77909) * C137108) +
             (C49074 + C49075) * C139305) *
                C30408 +
            ((C49077 + C49076) * C137101 -
             ((C77913 + C77914) * C139552 + (C77915 + C77916) * C137108) +
             (C49079 + C49078) * C139305) *
                C139588) *
               C139286 * C139403) *
              C139560 +
          ((((C48142 + C48143) * C137101 -
             ((C47234 * C847 + C139586 * C1129 + C47233 * C841 +
               C47031 * C1125) *
                  C139552 +
              (C47234 * C832 + C139586 * C1121 + C47233 * C831 +
               C47031 * C1118) *
                  C137108) +
             (C48144 + C48145) * C139305) *
                C30408 +
            ((C52007 + C52006) * C137101 -
             ((C80795 + C80796) * C139552 + (C80797 + C80798) * C137108) +
             (C52009 + C52008) * C139305) *
                C139588) *
               C139286 * C9466 +
           (((C80798 + C80797) * C137108 + (C80796 + C80795) * C139552 -
             (C52006 + C52007) * C137101 - (C52008 + C52009) * C139305) *
                C30408 +
            ((C83437 + C83438) * C137108 + (C83439 + C83440) * C139552 -
             (C47234 * C21078 + C139586 * C21412 + C47233 * C6441 +
              C47031 * C6687) *
                 C137101 -
             (C47234 * C21080 + C139586 * C21414 + C47233 * C6444 +
              C47031 * C6690) *
                 C139305) *
                C139588) *
               C139286 * C139403) *
              C139377)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[85] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47233 * C107 + C47031 * C308 + C47234 * C831 + C139586 * C1118) *
                 C2783 +
             (C47233 * C182 + C47031 * C394 + C47234 * C939 + C139586 * C1231) *
                 C139560 -
             (C47234 * C832 + C139586 * C1121 + C47233 * C831 +
              C47031 * C1118) *
                 C2784 -
             (C47234 * C940 + C139586 * C1232 + C47233 * C939 +
              C47031 * C1231) *
                 C139377) *
                C30408 +
            ((C77909 + C77910) * C2783 + (C78023 + C78024) * C139560 -
             (C80797 + C80798) * C2784 - (C80933 + C80934) * C139377) *
                C139588) *
               C139286 * C139552 +
           (((C48142 + C48143) * C2784 -
             ((C47351 + C47350) * C139560 + (C47260 + C47261) * C2783) +
             (C48257 + C48256) * C139377) *
                C30408 +
            ((C52007 + C52006) * C2784 -
             ((C49187 + C49186) * C139560 + (C49073 + C49072) * C2783) +
             (C52144 + C52145) * C139377) *
                C139588) *
               C139286 * C139305) *
              C9466 +
          ((((C80798 + C80797) * C2784 -
             ((C78024 + C78023) * C139560 + (C77910 + C77909) * C2783) +
             (C80934 + C80933) * C139377) *
                C30408 +
            ((C83437 + C83438) * C2784 -
             ((C78025 + C78026) * C139560 + (C77915 + C77916) * C2783) +
             (C83543 + C83544) * C139377) *
                C139588) *
               C139286 * C139552 +
           (((C49072 + C49073) * C2783 + (C49186 + C49187) * C139560 -
             (C52006 + C52007) * C2784 - (C52145 + C52144) * C139377) *
                C30408 +
            ((C49077 + C49076) * C2783 + (C49188 + C49189) * C139560 -
             (C47234 * C21078 + C139586 * C21412 + C47233 * C6441 +
              C47031 * C6687) *
                 C2784 -
             (C47234 * C21196 + C139586 * C21515 + C47233 * C6527 +
              C47031 * C6767) *
                 C139377) *
                C139588) *
               C139286 * C139305) *
              C139403)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[85] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47233 * C107 + C47031 * C308 + C47234 * C831 + C139586 * C1118) *
                 C9616 +
             (C47233 * C245 + C47031 * C474 + C47234 * C1029 +
              C139586 * C1339) *
                 C9466 -
             (C77910 + C77909) * C9617 - (C78133 + C78134) * C139403) *
                C30408 +
            ((C77909 + C77910) * C9616 + (C78134 + C78133) * C9466 -
             (C77915 + C77916) * C9617 - (C78136 + C78135) * C139403) *
                C139588) *
               C139286 * C139560 +
           (((C80798 + C80797) * C9617 -
             ((C47234 * C1030 + C139586 * C1340 + C47233 * C1029 +
               C47031 * C1339) *
                  C9466 +
              (C47234 * C832 + C139586 * C1121 + C47233 * C831 +
               C47031 * C1118) *
                  C9616) +
             (C81069 + C81070) * C139403) *
                C30408 +
            ((C83437 + C83438) * C9617 -
             ((C81070 + C81069) * C9466 + (C80797 + C80798) * C9616) +
             (C83648 + C83647) * C139403) *
                C139588) *
               C139286 * C139377) *
              C139552 +
          ((((C49072 + C49073) * C9617 -
             ((C47435 + C47434) * C9466 + (C47260 + C47261) * C9616) +
             (C49297 + C49296) * C139403) *
                C30408 +
            ((C49077 + C49076) * C9617 -
             ((C49296 + C49297) * C9466 + (C49073 + C49072) * C9616) +
             (C49298 + C49299) * C139403) *
                C139588) *
               C139286 * C139560 +
           (((C48142 + C48143) * C9616 + (C48367 + C48366) * C9466 -
             (C52006 + C52007) * C9617 - (C52281 + C52280) * C139403) *
                C30408 +
            ((C52007 + C52006) * C9616 + (C52280 + C52281) * C9466 -
             (C47234 * C21078 + C139586 * C21412 + C47233 * C6441 +
              C47031 * C6687) *
                 C9617 -
             (C47234 * C21304 + C139586 * C21615 + C47233 * C6607 +
              C47031 * C6844) *
                 C139403) *
                C139588) *
               C139286 * C139377) *
              C139305)) /
        (p * q * std::sqrt(p + q));
    d2eezx[85] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C30812 * C107 + C30408 * C555 + C30813 * C1767 +
              C139588 * C2376) *
                 C137108 +
             (C30812 * C116 + C30408 * C561 + C30813 * C1777 +
              C139588 * C2383) *
                 C139552 -
             (C30839 + C30840) * C137101 - (C30841 + C30842) * C139305) *
                C139286 * C47031 +
            ((C77185 + C77186) * C137108 + (C77187 + C77188) * C139552 -
             (C31744 + C31743) * C137101 - (C31746 + C31745) * C139305) *
                C139286 * C139586) *
               C9466 +
           (((C32837 + C32838) * C137101 -
             ((C30813 * C1783 + C139588 * C2387 + C30812 * C1777 +
               C30408 * C2383) *
                  C139552 +
              (C30813 * C1768 + C139588 * C2379 + C30812 * C1767 +
               C30408 * C2376) *
                  C137108) +
             (C32839 + C32840) * C139305) *
                C139286 * C47031 +
            ((C35893 + C35892) * C137101 -
             ((C81209 + C81210) * C139552 + (C81211 + C81212) * C137108) +
             (C35895 + C35894) * C139305) *
                C139286 * C139586) *
               C139403) *
              C139560 +
          ((((C31743 + C31744) * C137101 -
             ((C77188 + C77187) * C139552 + (C77186 + C77185) * C137108) +
             (C31745 + C31746) * C139305) *
                C139286 * C47031 +
            ((C31748 + C31747) * C137101 -
             ((C77189 + C77190) * C139552 + (C77191 + C77192) * C137108) +
             (C31750 + C31749) * C139305) *
                C139286 * C139586) *
               C9466 +
           (((C81212 + C81211) * C137108 + (C81210 + C81209) * C139552 -
             (C35892 + C35893) * C137101 - (C35894 + C35895) * C139305) *
                C139286 * C47031 +
            ((C86776 + C86777) * C137108 + (C86778 + C86779) * C139552 -
             (C30813 * C21078 + C139588 * C21714 + C30812 * C8753 +
              C30408 * C9233) *
                 C137101 -
             (C30813 * C21080 + C139588 * C21716 + C30812 * C8756 +
              C30408 * C9236) *
                 C139305) *
                C139286 * C139586) *
               C139403) *
              C139377)) /
        (p * q * std::sqrt(p + q));
    d2eezy[85] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C30812 * C107 + C30408 * C555 + C30813 * C1767 +
              C139588 * C2376) *
                 C2783 +
             (C30812 * C182 + C30408 * C641 + C30813 * C1873 +
              C139588 * C2492) *
                 C139560 -
             (C77186 + C77185) * C2784 - (C77299 + C77300) * C139377) *
                C139286 * C47031 +
            ((C77185 + C77186) * C2783 + (C77300 + C77299) * C139560 -
             (C77191 + C77192) * C2784 - (C77302 + C77301) * C139377) *
                C139286 * C139586) *
               C139552 +
           (((C31743 + C31744) * C2784 -
             ((C30930 + C30929) * C139560 + (C30839 + C30840) * C2783) +
             (C31858 + C31857) * C139377) *
                C139286 * C47031 +
            ((C31748 + C31747) * C2784 -
             ((C31857 + C31858) * C139560 + (C31744 + C31743) * C2783) +
             (C31859 + C31860) * C139377) *
                C139286 * C139586) *
               C139305) *
              C9466 +
          ((((C81212 + C81211) * C2784 -
             ((C30813 * C1874 + C139588 * C2493 + C30812 * C1873 +
               C30408 * C2492) *
                  C139560 +
              (C30813 * C1768 + C139588 * C2379 + C30812 * C1767 +
               C30408 * C2376) *
                  C2783) +
             (C81347 + C81348) * C139377) *
                C139286 * C47031 +
            ((C86776 + C86777) * C2784 -
             ((C81348 + C81347) * C139560 + (C81211 + C81212) * C2783) +
             (C86883 + C86882) * C139377) *
                C139286 * C139586) *
               C139552 +
           (((C32837 + C32838) * C2783 + (C32951 + C32952) * C139560 -
             (C35892 + C35893) * C2784 - (C36031 + C36030) * C139377) *
                C139286 * C47031 +
            ((C35893 + C35892) * C2783 + (C36030 + C36031) * C139560 -
             (C30813 * C21078 + C139588 * C21714 + C30812 * C8753 +
              C30408 * C9233) *
                 C2784 -
             (C30813 * C21196 + C139588 * C21831 + C30812 * C8839 +
              C30408 * C9313) *
                 C139377) *
                C139286 * C139586) *
               C139305) *
              C139403)) /
        (p * q * std::sqrt(p + q));
    d2eezz[85] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C30812 * C107 + C30408 * C555 + C30813 * C1767 +
              C139588 * C2376) *
                 C9616 +
             (C30812 * C245 + C30408 * C719 + C30813 * C1965 +
              C139588 * C2591) *
                 C9466 -
             (C30813 * C1768 + C139588 * C2379 + C30812 * C1767 +
              C30408 * C2376) *
                 C9617 -
             (C30813 * C1966 + C139588 * C2592 + C30812 * C1965 +
              C30408 * C2591) *
                 C139403) *
                C139286 * C47031 +
            ((C77185 + C77186) * C9616 + (C77409 + C77410) * C9466 -
             (C81211 + C81212) * C9617 - (C81483 + C81484) * C139403) *
                C139286 * C139586) *
               C139560 +
           (((C81212 + C81211) * C9617 -
             ((C77410 + C77409) * C9466 + (C77186 + C77185) * C9616) +
             (C81484 + C81483) * C139403) *
                C139286 * C47031 +
            ((C86776 + C86777) * C9617 -
             ((C77411 + C77412) * C9466 + (C77191 + C77192) * C9616) +
             (C86986 + C86987) * C139403) *
                C139286 * C139586) *
               C139377) *
              C139552 +
          ((((C32837 + C32838) * C9617 -
             ((C31014 + C31013) * C9466 + (C30839 + C30840) * C9616) +
             (C33062 + C33061) * C139403) *
                C139286 * C47031 +
            ((C35893 + C35892) * C9617 -
             ((C31967 + C31968) * C9466 + (C31744 + C31743) * C9616) +
             (C36166 + C36167) * C139403) *
                C139286 * C139586) *
               C139560 +
           (((C31743 + C31744) * C9616 + (C31968 + C31967) * C9466 -
             (C35892 + C35893) * C9617 - (C36167 + C36166) * C139403) *
                C139286 * C47031 +
            ((C31748 + C31747) * C9616 + (C31969 + C31970) * C9466 -
             (C30813 * C21078 + C139588 * C21714 + C30812 * C8753 +
              C30408 * C9233) *
                 C9617 -
             (C30813 * C21304 + C139588 * C21934 + C30812 * C8919 +
              C30408 * C9390) *
                 C139403) *
                C139286 * C139586) *
               C139377) *
              C139305)) /
        (p * q * std::sqrt(p + q));
    d2eexx[86] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C63381 * C107 + C139286 * C113) * C5913 +
              (C63381 * C116 + C139286 * C125) * C139300) *
                 C47031 +
             (C68304 + C68305) * C139586) *
                C30408 +
            ((C83091 + C83092) * C47031 + C83093 * C139586) * C139588) *
               C139593 -
           ((C83094 * C139586 + (C83095 + C83096) * C47031) * C139588 +
            (C83097 * C139586 + (C83092 + C83091) * C47031) * C30408) *
               C139594 +
           (((C83096 + C83095) * C47031 + C83098 * C139586) * C30408 +
            ((C88854 + C88855) * C47031 + (C83105 + C83106) * C139586) *
                C139588) *
               C12239) *
              C139560 +
          (((C83093 * C47031 + C86139 * C139586) * C30408 +
            (C83098 * C47031 + (C68859 + C68860) * C139586) * C139588) *
               C139594 -
           ((C71170 * C139586 + C83097 * C47031) * C139588 +
            ((C68307 + C68306) * C139586 + (C68305 + C68304) * C47031) *
                C30408) *
               C139593 -
           ((((C63381 * C73225 + C139286 * C73227) * C139300 +
              (C63381 * C73224 + C139286 * C73226) * C5913) *
                 C139586 +
             (C83106 + C83105) * C47031) *
                C139588 +
            ((C68860 + C68859) * C139586 + C83094 * C47031) * C30408) *
               C12239) *
              C139377)) /
        (p * q * std::sqrt(p + q));
    d2eexy[86] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C63381 * C107 + C139286 * C113) * C2783 +
                       (C63381 * C182 + C139286 * C188) * C139560 -
                       C63884 * C2784 - C63997 * C139377) *
                          C47031 +
                      (C63884 * C2783 + C63997 * C139560 - C63888 * C2784 -
                       C63998 * C139377) *
                          C139586) *
                         C30408 +
                     ((C80503 + C80504 - C80505 - C80506) * C47031 +
                      (C80507 + C80508 - C80509 - C80510) * C139586) *
                         C139588) *
                        C139300 * C139593 +
                    (((C80505 - (C80504 + C80503) + C80506) * C47031 +
                      (C80509 - (C80508 + C80507) + C80510) * C139586) *
                         C30408 +
                     ((C91686 - (C91687 + C91688) + C91689) * C47031 +
                      (C91690 - (C91691 + C91692) + C91693) * C139586) *
                         C139588) *
                        C139300 * C139594 +
                    (((C91688 + C91687 - C91686 - C91689) * C47031 +
                      (C91692 + C91691 - C91690 - C91693) * C139586) *
                         C30408 +
                     ((C88852 * C2783 + C88929 * C139560 - C83103 * C2784 -
                       C83223 * C139377) *
                          C47031 +
                      (C83103 * C2783 + C83223 * C139560 -
                       (C63381 * C73224 + C139286 * C73226) * C2784 -
                       (C63381 * C73278 + C139286 * C73279) * C139377) *
                          C139586) *
                         C139588) *
                        C139300 * C12239)) /
                  (p * q * std::sqrt(p + q));
    d2eexz[86] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139286 * C113) * C12388 +
             (C63381 * C245 + C139286 * C251) * C139593 - C77533 * C12389 -
             C77790 * C139594 + C77539 * C12390 + C77791 * C12239) *
                C47031 +
            (C75419 + C75420 - C75421 - C75422 + C75423 + C75424) * C139586) *
               C30408 +
           ((C77533 * C12388 + C77790 * C139593 - C77539 * C12389 -
             C77791 * C139594 + C88852 * C12390 + C89001 * C12239) *
                C47031 +
            (C91792 + C91793 - C91794 - C91795 + C91796 + C91797) * C139586) *
               C139588) *
              C139560 +
          (((C75421 - (C75420 + C75419) + C75422 - C75423 - C75424) * C47031 +
            (C75427 - (C75426 + C75425) + C75428 - C75429 - C75430) * C139586) *
               C30408 +
           ((C91794 - (C91793 + C91792) + C91795 - C91796 - C91797) * C47031 +
            (C68855 * C12389 - (C66967 * C139593 + C66728 * C12388) +
             C69034 * C139594 - (C63381 * C73224 + C139286 * C73226) * C12390 -
             (C63381 * C73330 + C139286 * C73331) * C12239) *
                C139586) *
               C139588) *
              C139377) *
         C139300) /
        (p * q * std::sqrt(p + q));
    d2eeyx[86] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47233 * C107 + C47031 * C308 + C47234 * C831 + C139586 * C1118) *
                 C5913 +
             (C47233 * C116 + C47031 * C314 + C47234 * C841 + C139586 * C1125) *
                 C139300) *
                C30408 +
            ((C77909 + C77910) * C5913 + (C77911 + C77912) * C139300) *
                C139588) *
               C139286 * C139593 -
           (((C77913 + C77914) * C139300 + (C77915 + C77916) * C5913) *
                C139588 +
            ((C77912 + C77911) * C139300 + (C77910 + C77909) * C5913) *
                C30408) *
               C139286 * C139594 +
           (((C77916 + C77915) * C5913 + (C77914 + C77913) * C139300) * C30408 +
            ((C89078 + C89079) * C5913 + (C89080 + C89081) * C139300) *
                C139588) *
               C139286 * C12239) *
              C139560 +
          ((((C80798 + C80797) * C5913 + (C80796 + C80795) * C139300) * C30408 +
            ((C83437 + C83438) * C5913 + (C83439 + C83440) * C139300) *
                C139588) *
               C139286 * C139594 -
           (((C80795 + C80796) * C139300 + (C80797 + C80798) * C5913) *
                C139588 +
            ((C47234 * C847 + C139586 * C1129 + C47233 * C841 +
              C47031 * C1125) *
                 C139300 +
             (C47234 * C832 + C139586 * C1121 + C47233 * C831 +
              C47031 * C1118) *
                 C5913) *
                C30408) *
               C139286 * C139593 -
           (((C47234 * C73225 + C139586 * C73383 + C47233 * C26833 +
              C47031 * C27047) *
                 C139300 +
             (C47234 * C73224 + C139586 * C73382 + C47233 * C26831 +
              C47031 * C27045) *
                 C5913) *
                C139588 +
            ((C83440 + C83439) * C139300 + (C83438 + C83437) * C5913) *
                C30408) *
               C139286 * C12239) *
              C139377)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[86] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C831 + C139586 * C1118) *
                C2783 +
            (C47233 * C182 + C47031 * C394 + C47234 * C939 + C139586 * C1231) *
                C139560 -
            (C47234 * C832 + C139586 * C1121 + C47233 * C831 + C47031 * C1118) *
                C2784 -
            (C47234 * C940 + C139586 * C1232 + C47233 * C939 + C47031 * C1231) *
                C139377) *
               C30408 +
           ((C77909 + C77910) * C2783 + (C78023 + C78024) * C139560 -
            (C80797 + C80798) * C2784 - (C80933 + C80934) * C139377) *
               C139588) *
              C139286 * C139300 * C139593 +
          (((C80798 + C80797) * C2784 -
            ((C78024 + C78023) * C139560 + (C77910 + C77909) * C2783) +
            (C80934 + C80933) * C139377) *
               C30408 +
           ((C83437 + C83438) * C2784 -
            ((C78025 + C78026) * C139560 + (C77915 + C77916) * C2783) +
            (C83543 + C83544) * C139377) *
               C139588) *
              C139286 * C139300 * C139594 +
          (((C77916 + C77915) * C2783 + (C78026 + C78025) * C139560 -
            (C83438 + C83437) * C2784 - (C83544 + C83543) * C139377) *
               C30408 +
           ((C89078 + C89079) * C2783 + (C89153 + C89154) * C139560 -
            (C47234 * C73224 + C139586 * C73382 + C47233 * C26831 +
             C47031 * C27045) *
                C2784 -
            (C47234 * C73278 + C139586 * C73434 + C47233 * C26905 +
             C47031 * C27115) *
                C139377) *
               C139588) *
              C139286 * C139300 * C12239)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[86] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C831 + C139586 * C1118) *
                C12388 +
            (C47233 * C245 + C47031 * C474 + C47234 * C1029 + C139586 * C1339) *
                C139593 -
            (C77910 + C77909) * C12389 - (C78133 + C78134) * C139594 +
            (C77916 + C77915) * C12390 + (C78135 + C78136) * C12239) *
               C30408 +
           ((C77909 + C77910) * C12388 + (C78134 + C78133) * C139593 -
            (C77915 + C77916) * C12389 - (C78136 + C78135) * C139594 +
            (C89078 + C89079) * C12390 + (C89227 + C89226) * C12239) *
               C139588) *
              C139286 * C139560 +
          (((C80798 + C80797) * C12389 -
            ((C47234 * C1030 + C139586 * C1340 + C47233 * C1029 +
              C47031 * C1339) *
                 C139593 +
             (C47234 * C832 + C139586 * C1121 + C47233 * C831 +
              C47031 * C1118) *
                 C12388) +
            (C81069 + C81070) * C139594 - (C83438 + C83437) * C12390 -
            (C83647 + C83648) * C12239) *
               C30408 +
           ((C83437 + C83438) * C12389 -
            ((C81070 + C81069) * C139593 + (C80797 + C80798) * C12388) +
            (C83648 + C83647) * C139594 -
            (C47234 * C73224 + C139586 * C73382 + C47233 * C26831 +
             C47031 * C27045) *
                C12390 -
            (C47234 * C73330 + C139586 * C73485 + C47233 * C26975 +
             C47031 * C27182) *
                C12239) *
               C139588) *
              C139286 * C139377) *
         C139300) /
        (p * q * std::sqrt(p + q));
    d2eezx[86] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C30812 * C107 + C30408 * C555 + C30813 * C1767 +
              C139588 * C2376) *
                 C5913 +
             (C30812 * C116 + C30408 * C561 + C30813 * C1777 +
              C139588 * C2383) *
                 C139300) *
                C139286 * C47031 +
            ((C77185 + C77186) * C5913 + (C77187 + C77188) * C139300) *
                C139286 * C139586) *
               C139593 -
           (((C81209 + C81210) * C139300 + (C81211 + C81212) * C5913) *
                C139286 * C139586 +
            ((C30813 * C1783 + C139588 * C2387 + C30812 * C1777 +
              C30408 * C2383) *
                 C139300 +
             (C30813 * C1768 + C139588 * C2379 + C30812 * C1767 +
              C30408 * C2376) *
                 C5913) *
                C139286 * C47031) *
               C139594 +
           (((C30812 * C1768 + C30408 * C2379 + C30813 * C10815 +
              C139588 * C11155) *
                 C5913 +
             (C30812 * C1783 + C30408 * C2387 + C30813 * C10818 +
              C139588 * C11158) *
                 C139300) *
                C139286 * C47031 +
            ((C83755 + C83756) * C5913 + (C83757 + C83758) * C139300) *
                C139286 * C139586) *
               C12239) *
              C139560 +
          ((((C81212 + C81211) * C5913 + (C81210 + C81209) * C139300) *
                C139286 * C47031 +
            ((C86776 + C86777) * C5913 + (C86778 + C86779) * C139300) *
                C139286 * C139586) *
               C139594 -
           (((C77189 + C77190) * C139300 + (C77191 + C77192) * C5913) *
                C139286 * C139586 +
            ((C77188 + C77187) * C139300 + (C77186 + C77185) * C5913) *
                C139286 * C47031) *
               C139593 -
           (((C30813 * C73225 + C139588 * C73537 + C30812 * C21081 +
              C30408 * C21717) *
                 C139300 +
             (C30813 * C73224 + C139588 * C73536 + C30812 * C21079 +
              C30408 * C21715) *
                 C5913) *
                C139286 * C139586 +
            ((C83758 + C83757) * C139300 + (C83756 + C83755) * C5913) *
                C139286 * C47031) *
               C12239) *
              C139377)) /
        (p * q * std::sqrt(p + q));
    d2eezy[86] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1767 + C139588 * C2376) *
                C2783 +
            (C30812 * C182 + C30408 * C641 + C30813 * C1873 + C139588 * C2492) *
                C139560 -
            (C77186 + C77185) * C2784 - (C77299 + C77300) * C139377) *
               C139286 * C47031 +
           ((C77185 + C77186) * C2783 + (C77300 + C77299) * C139560 -
            (C77191 + C77192) * C2784 - (C77302 + C77301) * C139377) *
               C139286 * C139586) *
              C139300 * C139593 +
          (((C81212 + C81211) * C2784 -
            ((C30813 * C1874 + C139588 * C2493 + C30812 * C1873 +
              C30408 * C2492) *
                 C139560 +
             (C30813 * C1768 + C139588 * C2379 + C30812 * C1767 +
              C30408 * C2376) *
                 C2783) +
            (C81347 + C81348) * C139377) *
               C139286 * C47031 +
           ((C86776 + C86777) * C2784 -
            ((C81348 + C81347) * C139560 + (C81211 + C81212) * C2783) +
            (C86883 + C86882) * C139377) *
               C139286 * C139586) *
              C139300 * C139594 +
          (((C30812 * C1768 + C30408 * C2379 + C30813 * C10815 +
             C139588 * C11155) *
                C2783 +
            (C30812 * C1874 + C30408 * C2493 + C30813 * C10877 +
             C139588 * C11211) *
                C139560 -
            (C83756 + C83755) * C2784 - (C83861 + C83862) * C139377) *
               C139286 * C47031 +
           ((C83755 + C83756) * C2783 + (C83862 + C83861) * C139560 -
            (C30813 * C73224 + C139588 * C73536 + C30812 * C21079 +
             C30408 * C21715) *
                C2784 -
            (C30813 * C73278 + C139588 * C73588 + C30812 * C21197 +
             C30408 * C21830) *
                C139377) *
               C139286 * C139586) *
              C139300 * C12239)) /
        (p * q * std::sqrt(p + q));
    d2eezz[86] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1767 + C139588 * C2376) *
                C12388 +
            (C30812 * C245 + C30408 * C719 + C30813 * C1965 + C139588 * C2591) *
                C139593 -
            (C30813 * C1768 + C139588 * C2379 + C30812 * C1767 +
             C30408 * C2376) *
                C12389 -
            (C30813 * C1966 + C139588 * C2592 + C30812 * C1965 +
             C30408 * C2591) *
                C139594 +
            (C30812 * C1768 + C30408 * C2379 + C30813 * C10815 +
             C139588 * C11155) *
                C12390 +
            (C30812 * C1966 + C30408 * C2592 + C30813 * C10937 +
             C139588 * C11262) *
                C12239) *
               C139286 * C47031 +
           ((C77185 + C77186) * C12388 + (C77409 + C77410) * C139593 -
            (C81211 + C81212) * C12389 - (C81483 + C81484) * C139594 +
            (C83755 + C83756) * C12390 + (C83965 + C83966) * C12239) *
               C139286 * C139586) *
              C139560 +
          (((C81212 + C81211) * C12389 -
            ((C77410 + C77409) * C139593 + (C77186 + C77185) * C12388) +
            (C81484 + C81483) * C139594 - (C83756 + C83755) * C12390 -
            (C83966 + C83965) * C12239) *
               C139286 * C47031 +
           ((C86776 + C86777) * C12389 -
            ((C77411 + C77412) * C139593 + (C77191 + C77192) * C12388) +
            (C86986 + C86987) * C139594 -
            (C30813 * C73224 + C139588 * C73536 + C30812 * C21079 +
             C30408 * C21715) *
                C12390 -
            (C30813 * C73330 + C139588 * C73639 + C30812 * C21305 +
             C30408 * C21933) *
                C12239) *
               C139286 * C139586) *
              C139377) *
         C139300) /
        (p * q * std::sqrt(p + q));
    d2eexx[87] +=
        (-std::pow(Pi, 2.5) *
         ((((((C63381 * C107 + C139286 * C113) * C5913 +
              (C63381 * C116 + C139286 * C125) * C139300) *
                 C47031 +
             (C68304 + C68305) * C139586) *
                C30408 +
            ((C83091 + C83092) * C47031 + C83093 * C139586) * C139588) *
               C9466 -
           ((C83094 * C139586 + (C83095 + C83096) * C47031) * C139588 +
            (C83097 * C139586 + (C83092 + C83091) * C47031) * C30408) *
               C139403) *
              C823 +
          (((C83093 * C47031 + C86139 * C139586) * C30408 +
            (C83098 * C47031 + (C68859 + C68860) * C139586) * C139588) *
               C139403 -
           ((C71170 * C139586 + C83097 * C47031) * C139588 +
            ((C68307 + C68306) * C139586 + (C68305 + C68304) * C47031) *
                C30408) *
               C9466) *
              C824 +
          (((C68314 * C47031 + (C68309 + C68308) * C139586) * C30408 +
            (C86139 * C47031 + (C71177 + C71178) * C139586) * C139588) *
               C9466 -
           ((((C63381 * C68837 + C139286 * C68839) * C139300 +
              (C63381 * C68836 + C139286 * C68838) * C5913) *
                 C139586 +
             (C68860 + C68859) * C47031) *
                C139588 +
            ((C71178 + C71177) * C139586 + C71170 * C47031) * C30408) *
               C139403) *
              C825)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139286 * C113) * C5230 +
             (C63381 * C116 + C139286 * C125) * C5225 -
             (C63381 * C108 + C139286 * C114) * C5231 -
             (C63381 * C117 + C139286 * C126) * C5226 +
             (C63381 * C109 + C139286 * C115) * C5232 +
             (C63381 * C118 + C139286 * C127) * C5227) *
                C47031 +
            (C67640 + C67641 - C67642 - C67643 + C67644 + C67645) * C139586) *
               C30408 +
           ((C87086 + C87087 - C87088 - C87089 + C87090 + C87091) * C47031 +
            (C81583 + C81584 - C81585 - C81586 + C81587 + C81588) * C139586) *
               C139588) *
              C9466 +
          (((C87088 - (C87087 + C87086) + C87089 - C87090 - C87091) * C47031 +
            (C81585 - (C81584 + C81583) + C81586 - C81587 - C81588) * C139586) *
               C30408 +
           ((C77537 * C5231 - (C77538 * C5225 + C77539 * C5230) +
             C77540 * C5226 - (C63381 * C1770 + C139286 * C1782) * C5232 -
             (C63381 * C1785 + C139286 * C1794) * C5227) *
                C47031 +
            (C77541 * C5231 - (C68854 * C5225 + C68853 * C5230) +
             C77542 * C5226 - (C63381 * C6440 + C139286 * C6446) * C5232 -
             (C63381 * C6443 + C139286 * C6449) * C5227) *
                C139586) *
               C139588) *
              C139403) *
         C139328) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139286 * C113) * C5913 +
             (C63381 * C116 + C139286 * C125) * C139300) *
                C47031 +
            (C68304 + C68305) * C139586) *
               C30408 +
           ((C83091 + C83092) * C47031 + C83093 * C139586) * C139588) *
              C10809 -
          ((C83094 * C139586 + (C83095 + C83096) * C47031) * C139588 +
           (C83097 * C139586 + (C83092 + C83091) * C47031) * C30408) *
              C10810 +
          (((C83096 + C83095) * C47031 + C83098 * C139586) * C30408 +
           ((C88854 + C88855) * C47031 + (C83105 + C83106) * C139586) *
               C139588) *
              C10811 -
          ((((C63381 * C88844 + C139286 * C88846) * C139300 +
             (C63381 * C88843 + C139286 * C88845) * C5913) *
                C139586 +
            ((C63381 * C43408 + C139286 * C43412) * C139300 +
             (C63381 * C43406 + C139286 * C43410) * C5913) *
                C47031) *
               C139588 +
           ((C83106 + C83105) * C139586 + (C88855 + C88854) * C47031) *
               C30408) *
              C10812) *
         C139328) /
            (p * q * std::sqrt(p + q));
    d2eexy[87] +=
        (-std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139286 * C113) * C934 +
             (C63381 * C182 + C139286 * C188) * C823 - C63884 * C935 -
             C63997 * C824 + C63888 * C936 + C63998 * C825) *
                C47031 +
            (C63884 * C934 + C63997 * C823 - C63888 * C935 - C63998 * C824 +
             C63894 * C936 + C63999 * C825) *
                C139586) *
               C30408 +
           ((C88072 + C88073 - C88074 - C88075 + C88076 + C88077) * C47031 +
            (C88078 + C88079 - C88080 - C88081 + C88082 + C88083) * C139586) *
               C139588) *
              C139300 * C9466 +
          (((C88074 - (C88073 + C88072) + C88075 - C88076 - C88077) * C47031 +
            (C88080 - (C88079 + C88078) + C88081 - C88082 - C88083) * C139586) *
               C30408 +
           ((C68853 * C935 - (C77676 * C823 + C77539 * C934) + C68941 * C824 -
             C68855 * C936 - C68942 * C825) *
                C47031 +
            (C68855 * C935 - (C68941 * C823 + C68853 * C934) + C68942 * C824 -
             (C63381 * C68836 + C139286 * C68838) * C936 -
             (C63381 * C68934 + C139286 * C68935) * C825) *
                C139586) *
               C139588) *
              C139300 * C139403)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((((C63381 * C107 + C139286 * C113) * C181 +
              (C63381 * C182 + C139286 * C188) * C139328) *
                 C47031 +
             (C63884 * C181 + C63997 * C139328) * C139586) *
                C30408 +
            ((C77651 + C77677) * C47031 + (C77654 + C77655) * C139586) *
                C139588) *
               C5225 -
           (((C77656 + C77657) * C139586 + (C77678 + C77660) * C47031) *
                C139588 +
            ((C64000 * C139328 + C63886 * C181) * C139586 +
             ((C63381 * C183 + C139286 * C189) * C139328 +
              (C63381 * C108 + C139286 * C114) * C181) *
                 C47031) *
                C30408) *
               C5226 +
           ((((C63381 * C109 + C139286 * C115) * C181 +
              (C63381 * C184 + C139286 * C190) * C139328) *
                 C47031 +
             (C65320 * C181 + C65406 * C139328) * C139586) *
                C30408 +
            ((C79541 + C79547) * C47031 + (C79544 + C79545) * C139586) *
                C139588) *
               C5227) *
              C9466 +
          ((((C77660 + C77678) * C47031 + (C77657 + C77656) * C139586) *
                C30408 +
            ((C77661 + C77679) * C47031 + (C77664 + C77680) * C139586) *
                C139588) *
               C5226 -
           (((C77667 + C77668) * C139586 + (C77681 + C77671) * C47031) *
                C139588 +
            ((C77655 + C77654) * C139586 + (C77677 + C77651) * C47031) *
                C30408) *
               C5225 -
           ((((C63381 * C6526 + C139286 * C6529) * C139328 +
              (C63381 * C6440 + C139286 * C6446) * C181) *
                 C139586 +
             ((C63381 * C1876 + C139286 * C1884) * C139328 +
              (C63381 * C1770 + C139286 * C1782) * C181) *
                 C47031) *
                C139588 +
            ((C79545 + C79544) * C139586 + (C79547 + C79541) * C47031) *
                C30408) *
               C5227) *
              C139403)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139286 * C113) * C181 +
             (C63381 * C182 + C139286 * C188) * C139328) *
                C47031 +
            (C63884 * C181 + C63997 * C139328) * C139586) *
               C30408 +
           ((C77651 + C77677) * C47031 + (C77654 + C77655) * C139586) *
               C139588) *
              C139300 * C10809 -
          (((C77667 + C77668) * C139586 + (C77681 + C77671) * C47031) *
               C139588 +
           ((C77655 + C77654) * C139586 + (C77677 + C77651) * C47031) *
               C30408) *
              C139300 * C10810 +
          (((C77671 + C77681) * C47031 + (C77668 + C77667) * C139586) * C30408 +
           ((C88924 + C88930) * C47031 + (C88927 + C88928) * C139586) *
               C139588) *
              C139300 * C10811 -
          ((((C63381 * C88921 + C139286 * C88922) * C139328 +
             (C63381 * C88843 + C139286 * C88845) * C181) *
                C139586 +
            ((C63381 * C43492 + C139286 * C43494) * C139328 +
             (C63381 * C43406 + C139286 * C43410) * C181) *
                C47031) *
               C139588 +
           ((C88928 + C88927) * C139586 + (C88930 + C88924) * C47031) *
               C30408) *
              C139300 * C10812)) /
            (p * q * std::sqrt(p + q));
    d2eexz[87] +=
        (-std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139286 * C113) * C9616 +
             (C63381 * C245 + C139286 * C251) * C9466 - C77533 * C9617 -
             C77790 * C139403) *
                C47031 +
            (C72708 + C72709 - C72710 - C72711) * C139586) *
               C30408 +
           ((C77533 * C9616 + C77790 * C9466 - C77539 * C9617 -
             C77791 * C139403) *
                C47031 +
            (C88182 + C88183 - C88184 - C88185) * C139586) *
               C139588) *
              C823 +
          (((C72710 - (C72709 + C72708) + C72711) * C47031 +
            (C72714 - (C72713 + C72712) + C72715) * C139586) *
               C30408 +
           ((C88184 - (C88183 + C88182) + C88185) * C47031 +
            (C88186 - (C88187 + C88188) + C88189) * C139586) *
               C139588) *
              C824 +
          ((C72722 * C47031 + (C72718 + C72717 - C72716 - C72719) * C139586) *
               C30408 +
           ((C88188 + C88187 - C88186 - C88189) * C47031 +
            (C71175 * C9616 + C71341 * C9466 -
             (C63381 * C68836 + C139286 * C68838) * C9617 -
             (C63381 * C69016 + C139286 * C69017) * C139403) *
                C139586) *
               C139588) *
              C825) *
         C139300) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139286 * C113) * C9616 +
             (C63381 * C245 + C139286 * C251) * C9466 - C77533 * C9617 -
             C77790 * C139403) *
                C47031 +
            (C72708 + C72709 - C72710 - C72711) * C139586) *
               C30408 +
           ((C77533 * C9616 + C77790 * C9466 - C77539 * C9617 -
             C77791 * C139403) *
                C47031 +
            (C66724 * C9616 + C66966 * C9466 - C68853 * C9617 -
             C69033 * C139403) *
                C139586) *
               C139588) *
              C139328 * C5225 +
          (((C77535 * C9617 -
             ((C63381 * C246 + C139286 * C252) * C9466 +
              (C63381 * C108 + C139286 * C114) * C9616) +
             C77792 * C139403) *
                C47031 +
            (C73935 - (C73936 + C73937) + C73938) * C139586) *
               C30408 +
           ((C77537 * C9617 - (C77792 * C9466 + C77535 * C9616) +
             C77793 * C139403) *
                C47031 +
            (C77541 * C9617 - (C66968 * C9466 + C66722 * C9616) +
             C77794 * C139403) *
                C139586) *
               C139588) *
              C139328 * C5226 +
          ((((C63381 * C109 + C139286 * C115) * C9616 +
             (C63381 * C247 + C139286 * C253) * C9466 - C79439 * C9617 -
             C79648 * C139403) *
                C47031 +
            (C65320 * C9616 + C65488 * C9466 - C78537 * C9617 -
             C78743 * C139403) *
                C139586) *
               C30408 +
           ((C79439 * C9616 + C79648 * C9466 -
             (C63381 * C1770 + C139286 * C1782) * C9617 -
             (C63381 * C1968 + C139286 * C1976) * C139403) *
                C47031 +
            (C78537 * C9616 + C78743 * C9466 -
             (C63381 * C6440 + C139286 * C6446) * C9617 -
             (C63381 * C6606 + C139286 * C6609) * C139403) *
                C139586) *
               C139588) *
              C139328 * C5227)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139286 * C113) * C10931 +
            (C63381 * C245 + C139286 * C251) * C10809 - C77533 * C10932 -
            C77790 * C10810 + C77539 * C10933 + C77791 * C10811 -
            C88852 * C10934 - C89001 * C10812) *
               C47031 +
           (C63884 * C10931 + C64095 * C10809 - C66724 * C10932 -
            C66966 * C10810 + C68853 * C10933 + C69033 * C10811 -
            C83103 * C10934 - C83329 * C10812) *
               C139586) *
              C30408 +
          ((C77533 * C10931 + C77790 * C10809 - C77539 * C10932 -
            C77791 * C10810 + C88852 * C10933 + C89001 * C10811 -
            (C63381 * C43406 + C139286 * C43410) * C10934 -
            (C63381 * C43568 + C139286 * C43570) * C10812) *
               C47031 +
           (C66724 * C10931 + C66966 * C10809 - C68853 * C10932 -
            C69033 * C10810 + C83103 * C10933 + C83329 * C10811 -
            (C63381 * C88843 + C139286 * C88845) * C10934 -
            (C63381 * C88996 + C139286 * C88997) * C10812) *
               C139586) *
              C139588) *
         C139328 * C139300) /
            (p * q * std::sqrt(p + q));
    d2eeyx[87] +=
        (-std::pow(Pi, 2.5) *
         (((((C47233 * C107 + C47031 * C308 + C47234 * C831 + C139586 * C1118) *
                 C5913 +
             (C47233 * C116 + C47031 * C314 + C47234 * C841 + C139586 * C1125) *
                 C139300) *
                C30408 +
            ((C77909 + C77910) * C5913 + (C77911 + C77912) * C139300) *
                C139588) *
               C139286 * C9466 -
           (((C77913 + C77914) * C139300 + (C77915 + C77916) * C5913) *
                C139588 +
            ((C77912 + C77911) * C139300 + (C77910 + C77909) * C5913) *
                C30408) *
               C139286 * C139403) *
              C823 +
          ((((C80798 + C80797) * C5913 + (C80796 + C80795) * C139300) * C30408 +
            ((C83437 + C83438) * C5913 + (C83439 + C83440) * C139300) *
                C139588) *
               C139286 * C139403 -
           (((C80795 + C80796) * C139300 + (C80797 + C80798) * C5913) *
                C139588 +
            ((C47234 * C847 + C139586 * C1129 + C47233 * C841 +
              C47031 * C1125) *
                 C139300 +
             (C47234 * C832 + C139586 * C1121 + C47233 * C831 +
              C47031 * C1118) *
                 C5913) *
                C30408) *
               C139286 * C9466) *
              C824 +
          ((((C47233 * C832 + C47031 * C1121 + C47234 * C5916 +
              C139586 * C6094) *
                 C5913 +
             (C47233 * C847 + C47031 * C1129 + C47234 * C5919 +
              C139586 * C6097) *
                 C139300) *
                C30408 +
            ((C86458 + C86459) * C5913 + (C86460 + C86461) * C139300) *
                C139588) *
               C139286 * C9466 -
           (((C47234 * C68837 + C139586 * C69111 + C47233 * C21081 +
              C47031 * C21415) *
                 C139300 +
             (C47234 * C68836 + C139586 * C69110 + C47233 * C21079 +
              C47031 * C21413) *
                 C5913) *
                C139588 +
            ((C86461 + C86460) * C139300 + (C86459 + C86458) * C5913) *
                C30408) *
               C139286 * C139403) *
              C825)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C831 + C139586 * C1118) *
                C5230 +
            (C47233 * C116 + C47031 * C314 + C47234 * C841 + C139586 * C1125) *
                C5225 -
            (C47260 + C47261) * C5231 - (C47262 + C47263) * C5226 +
            (C47264 + C47265) * C5232 + (C47266 + C47267) * C5227) *
               C30408 +
           ((C77909 + C77910) * C5230 + (C77911 + C77912) * C5225 -
            (C49073 + C49072) * C5231 - (C49075 + C49074) * C5226 +
            (C50925 + C50924) * C5232 + (C50927 + C50926) * C5227) *
               C139588) *
              C139286 * C9466 +
          (((C49072 + C49073) * C5231 -
            ((C77912 + C77911) * C5225 + (C77910 + C77909) * C5230) +
            (C49074 + C49075) * C5226 - (C50924 + C50925) * C5232 -
            (C50926 + C50927) * C5227) *
               C30408 +
           ((C49077 + C49076) * C5231 -
            ((C77913 + C77914) * C5225 + (C77915 + C77916) * C5230) +
            (C49079 + C49078) * C5226 -
            (C47234 * C6440 + C139586 * C6686 + C47233 * C1770 +
             C47031 * C2059) *
                C5232 -
            (C47234 * C6443 + C139586 * C6689 + C47233 * C1785 +
             C47031 * C2067) *
                C5227) *
               C139588) *
              C139286 * C139403) *
         C139328) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C831 + C139586 * C1118) *
                C5913 +
            (C47233 * C116 + C47031 * C314 + C47234 * C841 + C139586 * C1125) *
                C139300) *
               C30408 +
           ((C77909 + C77910) * C5913 + (C77911 + C77912) * C139300) *
               C139588) *
              C139286 * C10809 -
          (((C77913 + C77914) * C139300 + (C77915 + C77916) * C5913) * C139588 +
           ((C77912 + C77911) * C139300 + (C77910 + C77909) * C5913) * C30408) *
              C139286 * C10810 +
          (((C77916 + C77915) * C5913 + (C77914 + C77913) * C139300) * C30408 +
           ((C89078 + C89079) * C5913 + (C89080 + C89081) * C139300) *
               C139588) *
              C139286 * C10811 -
          (((C47234 * C88844 + C139586 * C89068 + C47233 * C43408 +
             C47031 * C43646) *
                C139300 +
            (C47234 * C88843 + C139586 * C89067 + C47233 * C43406 +
             C47031 * C43644) *
                C5913) *
               C139588 +
           ((C89081 + C89080) * C139300 + (C89079 + C89078) * C5913) * C30408) *
              C139286 * C10812) *
         C139328) /
            (p * q * std::sqrt(p + q));
    d2eeyy[87] +=
        (-std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C831 + C139586 * C1118) *
                C934 +
            (C47233 * C182 + C47031 * C394 + C47234 * C939 + C139586 * C1231) *
                C823 -
            (C47234 * C832 + C139586 * C1121 + C47233 * C831 + C47031 * C1118) *
                C935 -
            (C47234 * C940 + C139586 * C1232 + C47233 * C939 + C47031 * C1231) *
                C824 +
            (C47233 * C832 + C47031 * C1121 + C47234 * C5916 +
             C139586 * C6094) *
                C936 +
            (C47233 * C940 + C47031 * C1232 + C47234 * C5982 +
             C139586 * C6148) *
                C825) *
               C30408 +
           ((C77909 + C77910) * C934 + (C78023 + C78024) * C823 -
            (C80797 + C80798) * C935 - (C80933 + C80934) * C824 +
            (C86458 + C86459) * C936 + (C86564 + C86565) * C825) *
               C139588) *
              C139286 * C139300 * C9466 +
          (((C80798 + C80797) * C935 -
            ((C78024 + C78023) * C823 + (C77910 + C77909) * C934) +
            (C80934 + C80933) * C824 - (C86459 + C86458) * C936 -
            (C86565 + C86564) * C825) *
               C30408 +
           ((C83437 + C83438) * C935 -
            ((C78025 + C78026) * C823 + (C77915 + C77916) * C934) +
            (C83543 + C83544) * C824 -
            (C47234 * C68836 + C139586 * C69110 + C47233 * C21079 +
             C47031 * C21413) *
                C936 -
            (C47234 * C68934 + C139586 * C69186 + C47233 * C21197 +
             C47031 * C21514) *
                C825) *
               C139588) *
              C139286 * C139300 * C139403)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C47233 * C107 + C47031 * C308 + C47234 * C831 + C139586 * C1118) *
                 C181 +
             (C47233 * C182 + C47031 * C394 + C47234 * C939 + C139586 * C1231) *
                 C139328) *
                C30408 +
            ((C77909 + C77910) * C181 + (C78023 + C78024) * C139328) *
                C139588) *
               C139286 * C5225 -
           (((C49187 + C49186) * C139328 + (C49073 + C49072) * C181) * C139588 +
            ((C47351 + C47350) * C139328 + (C47260 + C47261) * C181) * C30408) *
               C139286 * C5226 +
           (((C47264 + C47265) * C181 + (C47353 + C47352) * C139328) * C30408 +
            ((C50925 + C50924) * C181 + (C51030 + C51031) * C139328) *
                C139588) *
               C139286 * C5227) *
              C9466 +
          ((((C49072 + C49073) * C181 + (C49186 + C49187) * C139328) * C30408 +
            ((C49077 + C49076) * C181 + (C49188 + C49189) * C139328) *
                C139588) *
               C139286 * C5226 -
           (((C78025 + C78026) * C139328 + (C77915 + C77916) * C181) * C139588 +
            ((C78024 + C78023) * C139328 + (C77910 + C77909) * C181) * C30408) *
               C139286 * C5225 -
           (((C47234 * C6526 + C139586 * C6768 + C47233 * C1876 +
              C47031 * C2173) *
                 C139328 +
             (C47234 * C6440 + C139586 * C6686 + C47233 * C1770 +
              C47031 * C2059) *
                 C181) *
                C139588 +
            ((C51031 + C51030) * C139328 + (C50924 + C50925) * C181) * C30408) *
               C139286 * C5227) *
              C139403)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C831 + C139586 * C1118) *
                C181 +
            (C47233 * C182 + C47031 * C394 + C47234 * C939 + C139586 * C1231) *
                C139328) *
               C30408 +
           ((C77909 + C77910) * C181 + (C78023 + C78024) * C139328) * C139588) *
              C139286 * C139300 * C10809 -
          (((C78025 + C78026) * C139328 + (C77915 + C77916) * C181) * C139588 +
           ((C78024 + C78023) * C139328 + (C77910 + C77909) * C181) * C30408) *
              C139286 * C139300 * C10810 +
          (((C77916 + C77915) * C181 + (C78026 + C78025) * C139328) * C30408 +
           ((C89078 + C89079) * C181 + (C89153 + C89154) * C139328) * C139588) *
              C139286 * C139300 * C10811 -
          (((C47234 * C88921 + C139586 * C89147 + C47233 * C43492 +
             C47031 * C43724) *
                C139328 +
            (C47234 * C88843 + C139586 * C89067 + C47233 * C43406 +
             C47031 * C43644) *
                C181) *
               C139588 +
           ((C89154 + C89153) * C139328 + (C89079 + C89078) * C181) * C30408) *
              C139286 * C139300 * C10812)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[87] +=
        (-std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C831 + C139586 * C1118) *
                C9616 +
            (C47233 * C245 + C47031 * C474 + C47234 * C1029 + C139586 * C1339) *
                C9466 -
            (C77910 + C77909) * C9617 - (C78133 + C78134) * C139403) *
               C30408 +
           ((C77909 + C77910) * C9616 + (C78134 + C78133) * C9466 -
            (C77915 + C77916) * C9617 - (C78136 + C78135) * C139403) *
               C139588) *
              C139286 * C823 +
          (((C80798 + C80797) * C9617 -
            ((C47234 * C1030 + C139586 * C1340 + C47233 * C1029 +
              C47031 * C1339) *
                 C9466 +
             (C47234 * C832 + C139586 * C1121 + C47233 * C831 +
              C47031 * C1118) *
                 C9616) +
            (C81069 + C81070) * C139403) *
               C30408 +
           ((C83437 + C83438) * C9617 -
            ((C81070 + C81069) * C9466 + (C80797 + C80798) * C9616) +
            (C83648 + C83647) * C139403) *
               C139588) *
              C139286 * C824 +
          (((C47233 * C832 + C47031 * C1121 + C47234 * C5916 +
             C139586 * C6094) *
                C9616 +
            (C47233 * C1030 + C47031 * C1340 + C47234 * C6038 +
             C139586 * C6203) *
                C9466 -
            (C86459 + C86458) * C9617 - (C86668 + C86669) * C139403) *
               C30408 +
           ((C86458 + C86459) * C9616 + (C86669 + C86668) * C9466 -
            (C47234 * C68836 + C139586 * C69110 + C47233 * C21079 +
             C47031 * C21413) *
                C9617 -
            (C47234 * C69016 + C139586 * C69261 + C47233 * C21305 +
             C47031 * C21614) *
                C139403) *
               C139588) *
              C139286 * C825) *
         C139300) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C831 + C139586 * C1118) *
                C9616 +
            (C47233 * C245 + C47031 * C474 + C47234 * C1029 + C139586 * C1339) *
                C9466 -
            (C77910 + C77909) * C9617 - (C78133 + C78134) * C139403) *
               C30408 +
           ((C77909 + C77910) * C9616 + (C78134 + C78133) * C9466 -
            (C77915 + C77916) * C9617 - (C78136 + C78135) * C139403) *
               C139588) *
              C139286 * C139328 * C5225 +
          (((C49072 + C49073) * C9617 -
            ((C47435 + C47434) * C9466 + (C47260 + C47261) * C9616) +
            (C49297 + C49296) * C139403) *
               C30408 +
           ((C49077 + C49076) * C9617 -
            ((C49296 + C49297) * C9466 + (C49073 + C49072) * C9616) +
            (C49298 + C49299) * C139403) *
               C139588) *
              C139286 * C139328 * C5226 +
          (((C47264 + C47265) * C9616 + (C47437 + C47436) * C9466 -
            (C50924 + C50925) * C9617 - (C51135 + C51134) * C139403) *
               C30408 +
           ((C50925 + C50924) * C9616 + (C51134 + C51135) * C9466 -
            (C47234 * C6440 + C139586 * C6686 + C47233 * C1770 +
             C47031 * C2059) *
                C9617 -
            (C47234 * C6606 + C139586 * C6845 + C47233 * C1968 +
             C47031 * C2274) *
                C139403) *
               C139588) *
              C139286 * C139328 * C5227)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C47233 * C107 + C47031 * C308 + C47234 * C831 + C139586 * C1118) *
               C10931 +
           (C47233 * C245 + C47031 * C474 + C47234 * C1029 + C139586 * C1339) *
               C10809 -
           (C77910 + C77909) * C10932 - (C78133 + C78134) * C10810 +
           (C77916 + C77915) * C10933 + (C78135 + C78136) * C10811 -
           (C89079 + C89078) * C10934 - (C89226 + C89227) * C10812) *
              C30408 +
          ((C77909 + C77910) * C10931 + (C78134 + C78133) * C10809 -
           (C77915 + C77916) * C10932 - (C78136 + C78135) * C10810 +
           (C89078 + C89079) * C10933 + (C89227 + C89226) * C10811 -
           (C47234 * C88843 + C139586 * C89067 + C47233 * C43406 +
            C47031 * C43644) *
               C10934 -
           (C47234 * C88996 + C139586 * C89220 + C47233 * C43568 +
            C47031 * C43796) *
               C10812) *
              C139588) *
         C139286 * C139328 * C139300) /
            (p * q * std::sqrt(p + q));
    d2eezx[87] +=
        (-std::pow(Pi, 2.5) *
         (((((C30812 * C107 + C30408 * C555 + C30813 * C1767 +
              C139588 * C2376) *
                 C5913 +
             (C30812 * C116 + C30408 * C561 + C30813 * C1777 +
              C139588 * C2383) *
                 C139300) *
                C139286 * C47031 +
            ((C77185 + C77186) * C5913 + (C77187 + C77188) * C139300) *
                C139286 * C139586) *
               C9466 -
           (((C81209 + C81210) * C139300 + (C81211 + C81212) * C5913) *
                C139286 * C139586 +
            ((C30813 * C1783 + C139588 * C2387 + C30812 * C1777 +
              C30408 * C2383) *
                 C139300 +
             (C30813 * C1768 + C139588 * C2379 + C30812 * C1767 +
              C30408 * C2376) *
                 C5913) *
                C139286 * C47031) *
               C139403) *
              C823 +
          ((((C81212 + C81211) * C5913 + (C81210 + C81209) * C139300) *
                C139286 * C47031 +
            ((C86776 + C86777) * C5913 + (C86778 + C86779) * C139300) *
                C139286 * C139586) *
               C139403 -
           (((C77189 + C77190) * C139300 + (C77191 + C77192) * C5913) *
                C139286 * C139586 +
            ((C77188 + C77187) * C139300 + (C77186 + C77185) * C5913) *
                C139286 * C47031) *
               C9466) *
              C824 +
          ((((C77192 + C77191) * C5913 + (C77190 + C77189) * C139300) *
                C139286 * C47031 +
            ((C82845 + C82846) * C5913 + (C82847 + C82848) * C139300) *
                C139286 * C139586) *
               C9466 -
           (((C30813 * C68837 + C139588 * C69337 + C30812 * C24131 +
              C30408 * C24767) *
                 C139300 +
             (C30813 * C68836 + C139588 * C69336 + C30812 * C24129 +
              C30408 * C24765) *
                 C5913) *
                C139286 * C139586 +
            ((C86779 + C86778) * C139300 + (C86777 + C86776) * C5913) *
                C139286 * C47031) *
               C139403) *
              C825)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1767 + C139588 * C2376) *
                C5230 +
            (C30812 * C116 + C30408 * C561 + C30813 * C1777 + C139588 * C2383) *
                C5225 -
            (C30839 + C30840) * C5231 - (C30841 + C30842) * C5226 +
            (C30843 + C30844) * C5232 + (C30845 + C30846) * C5227) *
               C139286 * C47031 +
           ((C77185 + C77186) * C5230 + (C77187 + C77188) * C5225 -
            (C31744 + C31743) * C5231 - (C31746 + C31745) * C5226 +
            (C33762 + C33761) * C5232 + (C33764 + C33763) * C5227) *
               C139286 * C139586) *
              C9466 +
          (((C32837 + C32838) * C5231 -
            ((C30813 * C1783 + C139588 * C2387 + C30812 * C1777 +
              C30408 * C2383) *
                 C5225 +
             (C30813 * C1768 + C139588 * C2379 + C30812 * C1767 +
              C30408 * C2376) *
                 C5230) +
            (C32839 + C32840) * C5226 - (C34712 + C34713) * C5232 -
            (C34714 + C34715) * C5227) *
               C139286 * C47031 +
           ((C35893 + C35892) * C5231 -
            ((C81209 + C81210) * C5225 + (C81211 + C81212) * C5230) +
            (C35895 + C35894) * C5226 -
            (C30813 * C6440 + C139588 * C6920 + C30812 * C4225 +
             C30408 * C4901) *
                C5232 -
            (C30813 * C6443 + C139588 * C6923 + C30812 * C4232 +
             C30408 * C4905) *
                C5227) *
               C139286 * C139586) *
              C139403) *
         C139328) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1767 + C139588 * C2376) *
                C5913 +
            (C30812 * C116 + C30408 * C561 + C30813 * C1777 + C139588 * C2383) *
                C139300) *
               C139286 * C47031 +
           ((C77185 + C77186) * C5913 + (C77187 + C77188) * C139300) * C139286 *
               C139586) *
              C10809 -
          (((C81209 + C81210) * C139300 + (C81211 + C81212) * C5913) * C139286 *
               C139586 +
           ((C30813 * C1783 + C139588 * C2387 + C30812 * C1777 +
             C30408 * C2383) *
                C139300 +
            (C30813 * C1768 + C139588 * C2379 + C30812 * C1767 +
             C30408 * C2376) *
                C5913) *
               C139286 * C47031) *
              C10810 +
          (((C30812 * C1768 + C30408 * C2379 + C30813 * C10815 +
             C139588 * C11155) *
                C5913 +
            (C30812 * C1783 + C30408 * C2387 + C30813 * C10818 +
             C139588 * C11158) *
                C139300) *
               C139286 * C47031 +
           ((C83755 + C83756) * C5913 + (C83757 + C83758) * C139300) * C139286 *
               C139586) *
              C10811 -
          (((C30813 * C88844 + C139588 * C89294 + C30812 * C26833 +
             C30408 * C27253) *
                C139300 +
            (C30813 * C88843 + C139588 * C89293 + C30812 * C26831 +
             C30408 * C27251) *
                C5913) *
               C139286 * C139586 +
           ((C30813 * C43408 + C139588 * C43870 + C30812 * C10818 +
             C30408 * C11158) *
                C139300 +
            (C30813 * C43406 + C139588 * C43868 + C30812 * C10815 +
             C30408 * C11155) *
                C5913) *
               C139286 * C47031) *
              C10812) *
         C139328) /
            (p * q * std::sqrt(p + q));
    d2eezy[87] +=
        (-std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1767 + C139588 * C2376) *
                C934 +
            (C30812 * C182 + C30408 * C641 + C30813 * C1873 + C139588 * C2492) *
                C823 -
            (C77186 + C77185) * C935 - (C77299 + C77300) * C824 +
            (C77192 + C77191) * C936 + (C77301 + C77302) * C825) *
               C139286 * C47031 +
           ((C77185 + C77186) * C934 + (C77300 + C77299) * C823 -
            (C77191 + C77192) * C935 - (C77302 + C77301) * C824 +
            (C82845 + C82846) * C936 + (C82920 + C82919) * C825) *
               C139286 * C139586) *
              C139300 * C9466 +
          (((C81212 + C81211) * C935 -
            ((C30813 * C1874 + C139588 * C2493 + C30812 * C1873 +
              C30408 * C2492) *
                 C823 +
             (C30813 * C1768 + C139588 * C2379 + C30812 * C1767 +
              C30408 * C2376) *
                 C934) +
            (C81347 + C81348) * C824 - (C86777 + C86776) * C936 -
            (C86882 + C86883) * C825) *
               C139286 * C47031 +
           ((C86776 + C86777) * C935 -
            ((C81348 + C81347) * C823 + (C81211 + C81212) * C934) +
            (C86883 + C86882) * C824 -
            (C30813 * C68836 + C139588 * C69336 + C30812 * C24129 +
             C30408 * C24765) *
                C936 -
            (C30813 * C68934 + C139588 * C69420 + C30812 * C24247 +
             C30408 * C24876) *
                C825) *
               C139286 * C139586) *
              C139300 * C139403)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C30812 * C107 + C30408 * C555 + C30813 * C1767 +
              C139588 * C2376) *
                 C181 +
             (C30812 * C182 + C30408 * C641 + C30813 * C1873 +
              C139588 * C2492) *
                 C139328) *
                C139286 * C47031 +
            ((C77185 + C77186) * C181 + (C77300 + C77299) * C139328) * C139286 *
                C139586) *
               C5225 -
           (((C31857 + C31858) * C139328 + (C31744 + C31743) * C181) * C139286 *
                C139586 +
            ((C30930 + C30929) * C139328 + (C30839 + C30840) * C181) * C139286 *
                C47031) *
               C5226 +
           (((C30843 + C30844) * C181 + (C30932 + C30931) * C139328) * C139286 *
                C47031 +
            ((C33762 + C33761) * C181 + (C33867 + C33868) * C139328) * C139286 *
                C139586) *
               C5227) *
              C9466 +
          ((((C32837 + C32838) * C181 + (C32951 + C32952) * C139328) * C139286 *
                C47031 +
            ((C35893 + C35892) * C181 + (C36030 + C36031) * C139328) * C139286 *
                C139586) *
               C5226 -
           (((C81348 + C81347) * C139328 + (C81211 + C81212) * C181) * C139286 *
                C139586 +
            ((C30813 * C1874 + C139588 * C2493 + C30812 * C1873 +
              C30408 * C2492) *
                 C139328 +
             (C30813 * C1768 + C139588 * C2379 + C30812 * C1767 +
              C30408 * C2376) *
                 C181) *
                C139286 * C47031) *
               C5225 -
           (((C30813 * C6526 + C139588 * C7002 + C30812 * C4339 +
              C30408 * C5019) *
                 C139328 +
             (C30813 * C6440 + C139588 * C6920 + C30812 * C4225 +
              C30408 * C4901) *
                 C181) *
                C139286 * C139586 +
            ((C34819 + C34818) * C139328 + (C34712 + C34713) * C181) * C139286 *
                C47031) *
               C5227) *
              C139403)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1767 + C139588 * C2376) *
                C181 +
            (C30812 * C182 + C30408 * C641 + C30813 * C1873 + C139588 * C2492) *
                C139328) *
               C139286 * C47031 +
           ((C77185 + C77186) * C181 + (C77300 + C77299) * C139328) * C139286 *
               C139586) *
              C139300 * C10809 -
          (((C81348 + C81347) * C139328 + (C81211 + C81212) * C181) * C139286 *
               C139586 +
           ((C30813 * C1874 + C139588 * C2493 + C30812 * C1873 +
             C30408 * C2492) *
                C139328 +
            (C30813 * C1768 + C139588 * C2379 + C30812 * C1767 +
             C30408 * C2376) *
                C181) *
               C139286 * C47031) *
              C139300 * C10810 +
          (((C30812 * C1768 + C30408 * C2379 + C30813 * C10815 +
             C139588 * C11155) *
                C181 +
            (C30812 * C1874 + C30408 * C2493 + C30813 * C10877 +
             C139588 * C11211) *
                C139328) *
               C139286 * C47031 +
           ((C83755 + C83756) * C181 + (C83862 + C83861) * C139328) * C139286 *
               C139586) *
              C139300 * C10811 -
          (((C30813 * C88921 + C139588 * C89361 + C30812 * C26905 +
             C30408 * C27321) *
                C139328 +
            (C30813 * C88843 + C139588 * C89293 + C30812 * C26831 +
             C30408 * C27251) *
                C181) *
               C139286 * C139586 +
           ((C30813 * C43492 + C139588 * C43938 + C30812 * C10877 +
             C30408 * C11211) *
                C139328 +
            (C30813 * C43406 + C139588 * C43868 + C30812 * C10815 +
             C30408 * C11155) *
                C181) *
               C139286 * C47031) *
              C139300 * C10812)) /
            (p * q * std::sqrt(p + q));
    d2eezz[87] +=
        (-std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1767 + C139588 * C2376) *
                C9616 +
            (C30812 * C245 + C30408 * C719 + C30813 * C1965 + C139588 * C2591) *
                C9466 -
            (C30813 * C1768 + C139588 * C2379 + C30812 * C1767 +
             C30408 * C2376) *
                C9617 -
            (C30813 * C1966 + C139588 * C2592 + C30812 * C1965 +
             C30408 * C2591) *
                C139403) *
               C139286 * C47031 +
           ((C77185 + C77186) * C9616 + (C77409 + C77410) * C9466 -
            (C81211 + C81212) * C9617 - (C81483 + C81484) * C139403) *
               C139286 * C139586) *
              C823 +
          (((C81212 + C81211) * C9617 -
            ((C77410 + C77409) * C9466 + (C77186 + C77185) * C9616) +
            (C81484 + C81483) * C139403) *
               C139286 * C47031 +
           ((C86776 + C86777) * C9617 -
            ((C77411 + C77412) * C9466 + (C77191 + C77192) * C9616) +
            (C86986 + C86987) * C139403) *
               C139286 * C139586) *
              C824 +
          (((C77192 + C77191) * C9616 + (C77412 + C77411) * C9466 -
            (C86777 + C86776) * C9617 - (C86987 + C86986) * C139403) *
               C139286 * C47031 +
           ((C82845 + C82846) * C9616 + (C82991 + C82992) * C9466 -
            (C30813 * C68836 + C139588 * C69336 + C30812 * C24129 +
             C30408 * C24765) *
                C9617 -
            (C30813 * C69016 + C139588 * C69498 + C30812 * C24355 +
             C30408 * C24979) *
                C139403) *
               C139286 * C139586) *
              C825) *
         C139300) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1767 + C139588 * C2376) *
                C9616 +
            (C30812 * C245 + C30408 * C719 + C30813 * C1965 + C139588 * C2591) *
                C9466 -
            (C30813 * C1768 + C139588 * C2379 + C30812 * C1767 +
             C30408 * C2376) *
                C9617 -
            (C30813 * C1966 + C139588 * C2592 + C30812 * C1965 +
             C30408 * C2591) *
                C139403) *
               C139286 * C47031 +
           ((C77185 + C77186) * C9616 + (C77409 + C77410) * C9466 -
            (C81211 + C81212) * C9617 - (C81483 + C81484) * C139403) *
               C139286 * C139586) *
              C139328 * C5225 +
          (((C32837 + C32838) * C9617 -
            ((C31014 + C31013) * C9466 + (C30839 + C30840) * C9616) +
            (C33062 + C33061) * C139403) *
               C139286 * C47031 +
           ((C35893 + C35892) * C9617 -
            ((C31967 + C31968) * C9466 + (C31744 + C31743) * C9616) +
            (C36166 + C36167) * C139403) *
               C139286 * C139586) *
              C139328 * C5226 +
          (((C30843 + C30844) * C9616 + (C31016 + C31015) * C9466 -
            (C34712 + C34713) * C9617 - (C34923 + C34922) * C139403) *
               C139286 * C47031 +
           ((C33762 + C33761) * C9616 + (C33971 + C33972) * C9466 -
            (C30813 * C6440 + C139588 * C6920 + C30812 * C4225 +
             C30408 * C4901) *
                C9617 -
            (C30813 * C6606 + C139588 * C7079 + C30812 * C4445 +
             C30408 * C5135) *
                C139403) *
               C139286 * C139586) *
              C139328 * C5227)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C30812 * C107 + C30408 * C555 + C30813 * C1767 + C139588 * C2376) *
               C10931 +
           (C30812 * C245 + C30408 * C719 + C30813 * C1965 + C139588 * C2591) *
               C10809 -
           (C30813 * C1768 + C139588 * C2379 + C30812 * C1767 +
            C30408 * C2376) *
               C10932 -
           (C30813 * C1966 + C139588 * C2592 + C30812 * C1965 +
            C30408 * C2591) *
               C10810 +
           (C30812 * C1768 + C30408 * C2379 + C30813 * C10815 +
            C139588 * C11155) *
               C10933 +
           (C30812 * C1966 + C30408 * C2592 + C30813 * C10937 +
            C139588 * C11262) *
               C10811 -
           (C30813 * C43406 + C139588 * C43868 + C30812 * C10815 +
            C30408 * C11155) *
               C10934 -
           (C30813 * C43568 + C139588 * C44005 + C30812 * C10937 +
            C30408 * C11262) *
               C10812) *
              C139286 * C47031 +
          ((C77185 + C77186) * C10931 + (C77409 + C77410) * C10809 -
           (C81211 + C81212) * C10932 - (C81483 + C81484) * C10810 +
           (C83755 + C83756) * C10933 + (C83965 + C83966) * C10811 -
           (C30813 * C88843 + C139588 * C89293 + C30812 * C26831 +
            C30408 * C27251) *
               C10934 -
           (C30813 * C88996 + C139588 * C89428 + C30812 * C26975 +
            C30408 * C27388) *
               C10812) *
              C139286 * C139586) *
         C139328 * C139300) /
            (p * q * std::sqrt(p + q));
    d2eexx[88] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139286 * C113) * C137108 +
             (C63381 * C116 + C139286 * C125) * C139552 -
             (C63381 * C108 + C139286 * C114) * C137101 -
             (C63381 * C117 + C139286 * C126) * C139305) *
                C47031 +
            (C69583 + C69584 - C69585 - C69586) * C139586) *
               C30408 +
           ((C84979 + C84980 - C84981 - C84982) * C47031 + C84991 * C139586) *
               C139588) *
              C139593 +
          (((C84981 - (C84980 + C84979) + C84982) * C47031 + C84992 * C139586) *
               C30408 +
           ((C90702 - (C90703 + C90704) + C90705) * C47031 +
            (C84985 - (C84986 + C84987) + C84988) * C139586) *
               C139588) *
              C139594 +
          (((C90704 + C90703 - C90702 - C90705) * C47031 +
            (C84987 + C84986 - C84985 - C84988) * C139586) *
               C30408 +
           ((C88852 * C137108 + C88853 * C139552 -
             (C63381 * C10814 + C139286 * C10820) * C137101 -
             (C63381 * C10817 + C139286 * C10823) * C139305) *
                C47031 +
            (C83103 * C137108 + C83104 * C139552 -
             (C63381 * C26830 + C139286 * C26834) * C137101 -
             (C63381 * C26832 + C139286 * C26836) * C139305) *
                C139586) *
               C139588) *
              C12239) *
         C139328) /
        (p * q * std::sqrt(p + q));
    d2eexy[88] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C63381 * C107 + C139286 * C113) * C181 +
              (C63381 * C182 + C139286 * C188) * C139328) *
                 C47031 +
             (C63884 * C181 + C63997 * C139328) * C139586) *
                C30408 +
            ((C77651 + C77677) * C47031 + (C77654 + C77655) * C139586) *
                C139588) *
               C139552 -
           (((C77656 + C77657) * C139586 + (C77678 + C77660) * C47031) *
                C139588 +
            ((C64000 * C139328 + C63886 * C181) * C139586 +
             ((C63381 * C183 + C139286 * C189) * C139328 +
              (C63381 * C108 + C139286 * C114) * C181) *
                 C47031) *
                C30408) *
               C139305) *
              C139593 +
          ((((C77660 + C77678) * C47031 + (C77657 + C77656) * C139586) *
                C30408 +
            ((C77661 + C77679) * C47031 + (C77664 + C77680) * C139586) *
                C139588) *
               C139305 -
           (((C77667 + C77668) * C139586 + (C77681 + C77671) * C47031) *
                C139588 +
            ((C77655 + C77654) * C139586 + (C77677 + C77651) * C47031) *
                C30408) *
               C139552) *
              C139594 +
          ((((C77671 + C77681) * C47031 + (C77668 + C77667) * C139586) *
                C30408 +
            ((C88924 + C88930) * C47031 + (C88927 + C88928) * C139586) *
                C139588) *
               C139552 -
           ((((C63381 * C26904 + C139286 * C26906) * C139328 +
              (C63381 * C26830 + C139286 * C26834) * C181) *
                 C139586 +
             ((C63381 * C10876 + C139286 * C10879) * C139328 +
              (C63381 * C10814 + C139286 * C10820) * C181) *
                 C47031) *
                C139588 +
            ((C77680 + C77664) * C139586 + (C77679 + C77661) * C47031) *
                C30408) *
               C139305) *
              C12239)) /
        (p * q * std::sqrt(p + q));
    d2eexz[88] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139286 * C113) * C12388 +
             (C63381 * C245 + C139286 * C251) * C139593 - C77533 * C12389 -
             C77790 * C139594 + C77539 * C12390 + C77791 * C12239) *
                C47031 +
            (C75419 + C75420 - C75421 - C75422 + C75423 + C75424) * C139586) *
               C30408 +
           ((C77533 * C12388 + C77790 * C139593 - C77539 * C12389 -
             C77791 * C139594 + C88852 * C12390 + C89001 * C12239) *
                C47031 +
            (C66724 * C12388 + C66966 * C139593 - C68853 * C12389 -
             C69033 * C139594 + C83103 * C12390 + C83329 * C12239) *
                C139586) *
               C139588) *
              C139328 * C139552 +
          (((C77535 * C12389 -
             ((C63381 * C246 + C139286 * C252) * C139593 +
              (C63381 * C108 + C139286 * C114) * C12388) +
             C77792 * C139594 - C77537 * C12390 - C77793 * C12239) *
                C47031 +
            (C66722 * C12389 - (C64098 * C139593 + C63886 * C12388) +
             C66968 * C139594 - C77541 * C12390 - C77794 * C12239) *
                C139586) *
               C30408 +
           ((C77537 * C12389 - (C77792 * C139593 + C77535 * C12388) +
             C77793 * C139594 - (C63381 * C10814 + C139286 * C10820) * C12390 -
             (C63381 * C10936 + C139286 * C10939) * C12239) *
                C47031 +
            (C77541 * C12389 - (C66968 * C139593 + C66722 * C12388) +
             C77794 * C139594 - (C63381 * C26830 + C139286 * C26834) * C12390 -
             (C63381 * C26974 + C139286 * C26976) * C12239) *
                C139586) *
               C139588) *
              C139328 * C139305)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[88] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C831 + C139586 * C1118) *
                C137108 +
            (C47233 * C116 + C47031 * C314 + C47234 * C841 + C139586 * C1125) *
                C139552 -
            (C47260 + C47261) * C137101 - (C47262 + C47263) * C139305) *
               C30408 +
           ((C77909 + C77910) * C137108 + (C77911 + C77912) * C139552 -
            (C49073 + C49072) * C137101 - (C49075 + C49074) * C139305) *
               C139588) *
              C139286 * C139593 +
          (((C49072 + C49073) * C137101 -
            ((C77912 + C77911) * C139552 + (C77910 + C77909) * C137108) +
            (C49074 + C49075) * C139305) *
               C30408 +
           ((C49077 + C49076) * C137101 -
            ((C77913 + C77914) * C139552 + (C77915 + C77916) * C137108) +
            (C49079 + C49078) * C139305) *
               C139588) *
              C139286 * C139594 +
          (((C77916 + C77915) * C137108 + (C77914 + C77913) * C139552 -
            (C49076 + C49077) * C137101 - (C49078 + C49079) * C139305) *
               C30408 +
           ((C89078 + C89079) * C137108 + (C89080 + C89081) * C139552 -
            (C47234 * C26830 + C139586 * C27044 + C47233 * C10814 +
             C47031 * C10992) *
                C137101 -
            (C47234 * C26832 + C139586 * C27046 + C47233 * C10817 +
             C47031 * C10995) *
                C139305) *
               C139588) *
              C139286 * C12239) *
         C139328) /
        (p * q * std::sqrt(p + q));
    d2eeyy[88] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47233 * C107 + C47031 * C308 + C47234 * C831 + C139586 * C1118) *
                 C181 +
             (C47233 * C182 + C47031 * C394 + C47234 * C939 + C139586 * C1231) *
                 C139328) *
                C30408 +
            ((C77909 + C77910) * C181 + (C78023 + C78024) * C139328) *
                C139588) *
               C139286 * C139552 -
           (((C49187 + C49186) * C139328 + (C49073 + C49072) * C181) * C139588 +
            ((C47351 + C47350) * C139328 + (C47260 + C47261) * C181) * C30408) *
               C139286 * C139305) *
              C139593 +
          ((((C49072 + C49073) * C181 + (C49186 + C49187) * C139328) * C30408 +
            ((C49077 + C49076) * C181 + (C49188 + C49189) * C139328) *
                C139588) *
               C139286 * C139305 -
           (((C78025 + C78026) * C139328 + (C77915 + C77916) * C181) * C139588 +
            ((C78024 + C78023) * C139328 + (C77910 + C77909) * C181) * C30408) *
               C139286 * C139552) *
              C139594 +
          ((((C77916 + C77915) * C181 + (C78026 + C78025) * C139328) * C30408 +
            ((C89078 + C89079) * C181 + (C89153 + C89154) * C139328) *
                C139588) *
               C139286 * C139552 -
           (((C47234 * C26904 + C139586 * C27114 + C47233 * C10876 +
              C47031 * C11048) *
                 C139328 +
             (C47234 * C26830 + C139586 * C27044 + C47233 * C10814 +
              C47031 * C10992) *
                 C181) *
                C139588 +
            ((C49189 + C49188) * C139328 + (C49076 + C49077) * C181) * C30408) *
               C139286 * C139305) *
              C12239)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[88] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C831 + C139586 * C1118) *
                C12388 +
            (C47233 * C245 + C47031 * C474 + C47234 * C1029 + C139586 * C1339) *
                C139593 -
            (C77910 + C77909) * C12389 - (C78133 + C78134) * C139594 +
            (C77916 + C77915) * C12390 + (C78135 + C78136) * C12239) *
               C30408 +
           ((C77909 + C77910) * C12388 + (C78134 + C78133) * C139593 -
            (C77915 + C77916) * C12389 - (C78136 + C78135) * C139594 +
            (C89078 + C89079) * C12390 + (C89227 + C89226) * C12239) *
               C139588) *
              C139286 * C139328 * C139552 +
          (((C49072 + C49073) * C12389 -
            ((C47435 + C47434) * C139593 + (C47260 + C47261) * C12388) +
            (C49297 + C49296) * C139594 - (C49076 + C49077) * C12390 -
            (C49299 + C49298) * C12239) *
               C30408 +
           ((C49077 + C49076) * C12389 -
            ((C49296 + C49297) * C139593 + (C49073 + C49072) * C12388) +
            (C49298 + C49299) * C139594 -
            (C47234 * C26830 + C139586 * C27044 + C47233 * C10814 +
             C47031 * C10992) *
                C12390 -
            (C47234 * C26974 + C139586 * C27183 + C47233 * C10936 +
             C47031 * C11101) *
                C12239) *
               C139588) *
              C139286 * C139328 * C139305)) /
        (p * q * std::sqrt(p + q));
    d2eezx[88] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1767 + C139588 * C2376) *
                C137108 +
            (C30812 * C116 + C30408 * C561 + C30813 * C1777 + C139588 * C2383) *
                C139552 -
            (C30839 + C30840) * C137101 - (C30841 + C30842) * C139305) *
               C139286 * C47031 +
           ((C77185 + C77186) * C137108 + (C77187 + C77188) * C139552 -
            (C31744 + C31743) * C137101 - (C31746 + C31745) * C139305) *
               C139286 * C139586) *
              C139593 +
          (((C32837 + C32838) * C137101 -
            ((C30813 * C1783 + C139588 * C2387 + C30812 * C1777 +
              C30408 * C2383) *
                 C139552 +
             (C30813 * C1768 + C139588 * C2379 + C30812 * C1767 +
              C30408 * C2376) *
                 C137108) +
            (C32839 + C32840) * C139305) *
               C139286 * C47031 +
           ((C35893 + C35892) * C137101 -
            ((C81209 + C81210) * C139552 + (C81211 + C81212) * C137108) +
            (C35895 + C35894) * C139305) *
               C139286 * C139586) *
              C139594 +
          (((C30812 * C1768 + C30408 * C2379 + C30813 * C10815 +
             C139588 * C11155) *
                C137108 +
            (C30812 * C1783 + C30408 * C2387 + C30813 * C10818 +
             C139588 * C11158) *
                C139552 -
            (C32841 + C32842) * C137101 - (C32843 + C32844) * C139305) *
               C139286 * C47031 +
           ((C83755 + C83756) * C137108 + (C83757 + C83758) * C139552 -
            (C30813 * C26830 + C139588 * C27250 + C30812 * C6441 +
             C30408 * C6921) *
                C137101 -
            (C30813 * C26832 + C139588 * C27252 + C30812 * C6444 +
             C30408 * C6924) *
                C139305) *
               C139286 * C139586) *
              C12239) *
         C139328) /
        (p * q * std::sqrt(p + q));
    d2eezy[88] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C30812 * C107 + C30408 * C555 + C30813 * C1767 +
                        C139588 * C2376) *
                           C181 +
                       (C30812 * C182 + C30408 * C641 + C30813 * C1873 +
                        C139588 * C2492) *
                           C139328) *
                          C139286 * C47031 +
                      ((C77185 + C77186) * C181 + (C77300 + C77299) * C139328) *
                          C139286 * C139586) *
                         C139552 -
                     (((C31857 + C31858) * C139328 + (C31744 + C31743) * C181) *
                          C139286 * C139586 +
                      ((C30930 + C30929) * C139328 + (C30839 + C30840) * C181) *
                          C139286 * C47031) *
                         C139305) *
                        C139593 +
                    ((((C32837 + C32838) * C181 + (C32951 + C32952) * C139328) *
                          C139286 * C47031 +
                      ((C35893 + C35892) * C181 + (C36030 + C36031) * C139328) *
                          C139286 * C139586) *
                         C139305 -
                     (((C81348 + C81347) * C139328 + (C81211 + C81212) * C181) *
                          C139286 * C139586 +
                      ((C30813 * C1874 + C139588 * C2493 + C30812 * C1873 +
                        C30408 * C2492) *
                           C139328 +
                       (C30813 * C1768 + C139588 * C2379 + C30812 * C1767 +
                        C30408 * C2376) *
                           C181) *
                          C139286 * C47031) *
                         C139552) *
                        C139594 +
                    ((((C30812 * C1768 + C30408 * C2379 + C30813 * C10815 +
                        C139588 * C11155) *
                           C181 +
                       (C30812 * C1874 + C30408 * C2493 + C30813 * C10877 +
                        C139588 * C11211) *
                           C139328) *
                          C139286 * C47031 +
                      ((C83755 + C83756) * C181 + (C83862 + C83861) * C139328) *
                          C139286 * C139586) *
                         C139552 -
                     (((C30813 * C26904 + C139588 * C27320 + C30812 * C6527 +
                        C30408 * C7001) *
                           C139328 +
                       (C30813 * C26830 + C139588 * C27250 + C30812 * C6441 +
                        C30408 * C6921) *
                           C181) *
                          C139286 * C139586 +
                      ((C32954 + C32953) * C139328 + (C32841 + C32842) * C181) *
                          C139286 * C47031) *
                         C139305) *
                        C12239)) /
                  (p * q * std::sqrt(p + q));
    d2eezz[88] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1767 + C139588 * C2376) *
                C12388 +
            (C30812 * C245 + C30408 * C719 + C30813 * C1965 + C139588 * C2591) *
                C139593 -
            (C30813 * C1768 + C139588 * C2379 + C30812 * C1767 +
             C30408 * C2376) *
                C12389 -
            (C30813 * C1966 + C139588 * C2592 + C30812 * C1965 +
             C30408 * C2591) *
                C139594 +
            (C30812 * C1768 + C30408 * C2379 + C30813 * C10815 +
             C139588 * C11155) *
                C12390 +
            (C30812 * C1966 + C30408 * C2592 + C30813 * C10937 +
             C139588 * C11262) *
                C12239) *
               C139286 * C47031 +
           ((C77185 + C77186) * C12388 + (C77409 + C77410) * C139593 -
            (C81211 + C81212) * C12389 - (C81483 + C81484) * C139594 +
            (C83755 + C83756) * C12390 + (C83965 + C83966) * C12239) *
               C139286 * C139586) *
              C139328 * C139552 +
          (((C32837 + C32838) * C12389 -
            ((C31014 + C31013) * C139593 + (C30839 + C30840) * C12388) +
            (C33062 + C33061) * C139594 - (C32841 + C32842) * C12390 -
            (C33064 + C33063) * C12239) *
               C139286 * C47031 +
           ((C35893 + C35892) * C12389 -
            ((C31967 + C31968) * C139593 + (C31744 + C31743) * C12388) +
            (C36166 + C36167) * C139594 -
            (C30813 * C26830 + C139588 * C27250 + C30812 * C6441 +
             C30408 * C6921) *
                C12390 -
            (C30813 * C26974 + C139588 * C27389 + C30812 * C6607 +
             C30408 * C7078) *
                C12239) *
               C139286 * C139586) *
              C139328 * C139305)) /
        (p * q * std::sqrt(p + q));
    d2eexx[89] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139286 * C113) * C5230 +
             (C63381 * C116 + C139286 * C125) * C5225 -
             (C63381 * C108 + C139286 * C114) * C5231 -
             (C63381 * C117 + C139286 * C126) * C5226 +
             (C63381 * C109 + C139286 * C115) * C5232 +
             (C63381 * C118 + C139286 * C127) * C5227) *
                C47031 +
            (C67640 + C67641 - C67642 - C67643 + C67644 + C67645) * C139586) *
               C30408 +
           ((C87086 + C87087 - C87088 - C87089 + C87090 + C87091) * C47031 +
            (C81583 + C81584 - C81585 - C81586 + C81587 + C81588) * C139586) *
               C139588) *
              C9466 +
          (((C87088 - (C87087 + C87086) + C87089 - C87090 - C87091) * C47031 +
            (C81585 - (C81584 + C81583) + C81586 - C81587 - C81588) * C139586) *
               C30408 +
           ((C77537 * C5231 - (C77538 * C5225 + C77539 * C5230) +
             C77540 * C5226 - (C63381 * C1770 + C139286 * C1782) * C5232 -
             (C63381 * C1785 + C139286 * C1794) * C5227) *
                C47031 +
            (C77541 * C5231 - (C68854 * C5225 + C68853 * C5230) +
             C77542 * C5226 - (C63381 * C6440 + C139286 * C6446) * C5232 -
             (C63381 * C6443 + C139286 * C6449) * C5227) *
                C139586) *
               C139588) *
              C139403) *
         C139328) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C63381 * C107 + C139286 * C113) * C5913 +
              (C63381 * C116 + C139286 * C125) * C139300) *
                 C47031 +
             (C68304 + C68305) * C139586) *
                C30408 +
            ((C83091 + C83092) * C47031 + C83093 * C139586) * C139588) *
               C9466 -
           ((C83094 * C139586 + (C83095 + C83096) * C47031) * C139588 +
            (C83097 * C139586 + (C83092 + C83091) * C47031) * C30408) *
               C139403) *
              C823 +
          (((C83093 * C47031 + C86139 * C139586) * C30408 +
            (C83098 * C47031 + (C68859 + C68860) * C139586) * C139588) *
               C139403 -
           ((C71170 * C139586 + C83097 * C47031) * C139588 +
            ((C68307 + C68306) * C139586 + (C68305 + C68304) * C47031) *
                C30408) *
               C9466) *
              C824 +
          (((C68314 * C47031 + (C68309 + C68308) * C139586) * C30408 +
            (C86139 * C47031 + (C71177 + C71178) * C139586) * C139588) *
               C9466 -
           ((((C63381 * C68837 + C139286 * C68839) * C139300 +
              (C63381 * C68836 + C139286 * C68838) * C5913) *
                 C139586 +
             (C68860 + C68859) * C47031) *
                C139588 +
            ((C71178 + C71177) * C139586 + C71170 * C47031) * C30408) *
               C139403) *
              C825)) /
            (p * q * std::sqrt(p + q));
    d2eexy[89] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C63381 * C107 + C139286 * C113) * C181 +
              (C63381 * C182 + C139286 * C188) * C139328) *
                 C47031 +
             (C63884 * C181 + C63997 * C139328) * C139586) *
                C30408 +
            ((C77651 + C77677) * C47031 + (C77654 + C77655) * C139586) *
                C139588) *
               C5225 -
           (((C77656 + C77657) * C139586 + (C77678 + C77660) * C47031) *
                C139588 +
            ((C64000 * C139328 + C63886 * C181) * C139586 +
             ((C63381 * C183 + C139286 * C189) * C139328 +
              (C63381 * C108 + C139286 * C114) * C181) *
                 C47031) *
                C30408) *
               C5226 +
           ((((C63381 * C109 + C139286 * C115) * C181 +
              (C63381 * C184 + C139286 * C190) * C139328) *
                 C47031 +
             (C65320 * C181 + C65406 * C139328) * C139586) *
                C30408 +
            ((C79541 + C79547) * C47031 + (C79544 + C79545) * C139586) *
                C139588) *
               C5227) *
              C9466 +
          ((((C77660 + C77678) * C47031 + (C77657 + C77656) * C139586) *
                C30408 +
            ((C77661 + C77679) * C47031 + (C77664 + C77680) * C139586) *
                C139588) *
               C5226 -
           (((C77667 + C77668) * C139586 + (C77681 + C77671) * C47031) *
                C139588 +
            ((C77655 + C77654) * C139586 + (C77677 + C77651) * C47031) *
                C30408) *
               C5225 -
           ((((C63381 * C6526 + C139286 * C6529) * C139328 +
              (C63381 * C6440 + C139286 * C6446) * C181) *
                 C139586 +
             ((C63381 * C1876 + C139286 * C1884) * C139328 +
              (C63381 * C1770 + C139286 * C1782) * C181) *
                 C47031) *
                C139588 +
            ((C79545 + C79544) * C139586 + (C79547 + C79541) * C47031) *
                C30408) *
               C5227) *
              C139403)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139286 * C113) * C934 +
             (C63381 * C182 + C139286 * C188) * C823 - C63884 * C935 -
             C63997 * C824 + C63888 * C936 + C63998 * C825) *
                C47031 +
            (C63884 * C934 + C63997 * C823 - C63888 * C935 - C63998 * C824 +
             C63894 * C936 + C63999 * C825) *
                C139586) *
               C30408 +
           ((C88072 + C88073 - C88074 - C88075 + C88076 + C88077) * C47031 +
            (C88078 + C88079 - C88080 - C88081 + C88082 + C88083) * C139586) *
               C139588) *
              C139300 * C9466 +
          (((C88074 - (C88073 + C88072) + C88075 - C88076 - C88077) * C47031 +
            (C88080 - (C88079 + C88078) + C88081 - C88082 - C88083) * C139586) *
               C30408 +
           ((C68853 * C935 - (C77676 * C823 + C77539 * C934) + C68941 * C824 -
             C68855 * C936 - C68942 * C825) *
                C47031 +
            (C68855 * C935 - (C68941 * C823 + C68853 * C934) + C68942 * C824 -
             (C63381 * C68836 + C139286 * C68838) * C936 -
             (C63381 * C68934 + C139286 * C68935) * C825) *
                C139586) *
               C139588) *
              C139300 * C139403)) /
            (p * q * std::sqrt(p + q));
    d2eexz[89] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139286 * C113) * C9616 +
             (C63381 * C245 + C139286 * C251) * C9466 - C77533 * C9617 -
             C77790 * C139403) *
                C47031 +
            (C72708 + C72709 - C72710 - C72711) * C139586) *
               C30408 +
           ((C77533 * C9616 + C77790 * C9466 - C77539 * C9617 -
             C77791 * C139403) *
                C47031 +
            (C66724 * C9616 + C66966 * C9466 - C68853 * C9617 -
             C69033 * C139403) *
                C139586) *
               C139588) *
              C139328 * C5225 +
          (((C77535 * C9617 -
             ((C63381 * C246 + C139286 * C252) * C9466 +
              (C63381 * C108 + C139286 * C114) * C9616) +
             C77792 * C139403) *
                C47031 +
            (C73935 - (C73936 + C73937) + C73938) * C139586) *
               C30408 +
           ((C77537 * C9617 - (C77792 * C9466 + C77535 * C9616) +
             C77793 * C139403) *
                C47031 +
            (C77541 * C9617 - (C66968 * C9466 + C66722 * C9616) +
             C77794 * C139403) *
                C139586) *
               C139588) *
              C139328 * C5226 +
          ((((C63381 * C109 + C139286 * C115) * C9616 +
             (C63381 * C247 + C139286 * C253) * C9466 - C79439 * C9617 -
             C79648 * C139403) *
                C47031 +
            (C65320 * C9616 + C65488 * C9466 - C78537 * C9617 -
             C78743 * C139403) *
                C139586) *
               C30408 +
           ((C79439 * C9616 + C79648 * C9466 -
             (C63381 * C1770 + C139286 * C1782) * C9617 -
             (C63381 * C1968 + C139286 * C1976) * C139403) *
                C47031 +
            (C78537 * C9616 + C78743 * C9466 -
             (C63381 * C6440 + C139286 * C6446) * C9617 -
             (C63381 * C6606 + C139286 * C6609) * C139403) *
                C139586) *
               C139588) *
              C139328 * C5227)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139286 * C113) * C9616 +
             (C63381 * C245 + C139286 * C251) * C9466 - C77533 * C9617 -
             C77790 * C139403) *
                C47031 +
            (C72708 + C72709 - C72710 - C72711) * C139586) *
               C30408 +
           ((C77533 * C9616 + C77790 * C9466 - C77539 * C9617 -
             C77791 * C139403) *
                C47031 +
            (C88182 + C88183 - C88184 - C88185) * C139586) *
               C139588) *
              C823 +
          (((C72710 - (C72709 + C72708) + C72711) * C47031 +
            (C72714 - (C72713 + C72712) + C72715) * C139586) *
               C30408 +
           ((C88184 - (C88183 + C88182) + C88185) * C47031 +
            (C88186 - (C88187 + C88188) + C88189) * C139586) *
               C139588) *
              C824 +
          ((C72722 * C47031 + (C72718 + C72717 - C72716 - C72719) * C139586) *
               C30408 +
           ((C88188 + C88187 - C88186 - C88189) * C47031 +
            (C71175 * C9616 + C71341 * C9466 -
             (C63381 * C68836 + C139286 * C68838) * C9617 -
             (C63381 * C69016 + C139286 * C69017) * C139403) *
                C139586) *
               C139588) *
              C825) *
         C139300) /
            (p * q * std::sqrt(p + q));
    d2eeyx[89] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C831 + C139586 * C1118) *
                C5230 +
            (C47233 * C116 + C47031 * C314 + C47234 * C841 + C139586 * C1125) *
                C5225 -
            (C47260 + C47261) * C5231 - (C47262 + C47263) * C5226 +
            (C47264 + C47265) * C5232 + (C47266 + C47267) * C5227) *
               C30408 +
           ((C77909 + C77910) * C5230 + (C77911 + C77912) * C5225 -
            (C49073 + C49072) * C5231 - (C49075 + C49074) * C5226 +
            (C50925 + C50924) * C5232 + (C50927 + C50926) * C5227) *
               C139588) *
              C139286 * C9466 +
          (((C49072 + C49073) * C5231 -
            ((C77912 + C77911) * C5225 + (C77910 + C77909) * C5230) +
            (C49074 + C49075) * C5226 - (C50924 + C50925) * C5232 -
            (C50926 + C50927) * C5227) *
               C30408 +
           ((C49077 + C49076) * C5231 -
            ((C77913 + C77914) * C5225 + (C77915 + C77916) * C5230) +
            (C49079 + C49078) * C5226 -
            (C47234 * C6440 + C139586 * C6686 + C47233 * C1770 +
             C47031 * C2059) *
                C5232 -
            (C47234 * C6443 + C139586 * C6689 + C47233 * C1785 +
             C47031 * C2067) *
                C5227) *
               C139588) *
              C139286 * C139403) *
         C139328) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47233 * C107 + C47031 * C308 + C47234 * C831 + C139586 * C1118) *
                 C5913 +
             (C47233 * C116 + C47031 * C314 + C47234 * C841 + C139586 * C1125) *
                 C139300) *
                C30408 +
            ((C77909 + C77910) * C5913 + (C77911 + C77912) * C139300) *
                C139588) *
               C139286 * C9466 -
           (((C77913 + C77914) * C139300 + (C77915 + C77916) * C5913) *
                C139588 +
            ((C77912 + C77911) * C139300 + (C77910 + C77909) * C5913) *
                C30408) *
               C139286 * C139403) *
              C823 +
          ((((C80798 + C80797) * C5913 + (C80796 + C80795) * C139300) * C30408 +
            ((C83437 + C83438) * C5913 + (C83439 + C83440) * C139300) *
                C139588) *
               C139286 * C139403 -
           (((C80795 + C80796) * C139300 + (C80797 + C80798) * C5913) *
                C139588 +
            ((C47234 * C847 + C139586 * C1129 + C47233 * C841 +
              C47031 * C1125) *
                 C139300 +
             (C47234 * C832 + C139586 * C1121 + C47233 * C831 +
              C47031 * C1118) *
                 C5913) *
                C30408) *
               C139286 * C9466) *
              C824 +
          ((((C47233 * C832 + C47031 * C1121 + C47234 * C5916 +
              C139586 * C6094) *
                 C5913 +
             (C47233 * C847 + C47031 * C1129 + C47234 * C5919 +
              C139586 * C6097) *
                 C139300) *
                C30408 +
            ((C86458 + C86459) * C5913 + (C86460 + C86461) * C139300) *
                C139588) *
               C139286 * C9466 -
           (((C47234 * C68837 + C139586 * C69111 + C47233 * C21081 +
              C47031 * C21415) *
                 C139300 +
             (C47234 * C68836 + C139586 * C69110 + C47233 * C21079 +
              C47031 * C21413) *
                 C5913) *
                C139588 +
            ((C86461 + C86460) * C139300 + (C86459 + C86458) * C5913) *
                C30408) *
               C139286 * C139403) *
              C825)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[89] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47233 * C107 + C47031 * C308 + C47234 * C831 + C139586 * C1118) *
                 C181 +
             (C47233 * C182 + C47031 * C394 + C47234 * C939 + C139586 * C1231) *
                 C139328) *
                C30408 +
            ((C77909 + C77910) * C181 + (C78023 + C78024) * C139328) *
                C139588) *
               C139286 * C5225 -
           (((C49187 + C49186) * C139328 + (C49073 + C49072) * C181) * C139588 +
            ((C47351 + C47350) * C139328 + (C47260 + C47261) * C181) * C30408) *
               C139286 * C5226 +
           (((C47264 + C47265) * C181 + (C47353 + C47352) * C139328) * C30408 +
            ((C50925 + C50924) * C181 + (C51030 + C51031) * C139328) *
                C139588) *
               C139286 * C5227) *
              C9466 +
          ((((C49072 + C49073) * C181 + (C49186 + C49187) * C139328) * C30408 +
            ((C49077 + C49076) * C181 + (C49188 + C49189) * C139328) *
                C139588) *
               C139286 * C5226 -
           (((C78025 + C78026) * C139328 + (C77915 + C77916) * C181) * C139588 +
            ((C78024 + C78023) * C139328 + (C77910 + C77909) * C181) * C30408) *
               C139286 * C5225 -
           (((C47234 * C6526 + C139586 * C6768 + C47233 * C1876 +
              C47031 * C2173) *
                 C139328 +
             (C47234 * C6440 + C139586 * C6686 + C47233 * C1770 +
              C47031 * C2059) *
                 C181) *
                C139588 +
            ((C51031 + C51030) * C139328 + (C50924 + C50925) * C181) * C30408) *
               C139286 * C5227) *
              C139403)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C831 + C139586 * C1118) *
                C934 +
            (C47233 * C182 + C47031 * C394 + C47234 * C939 + C139586 * C1231) *
                C823 -
            (C47234 * C832 + C139586 * C1121 + C47233 * C831 + C47031 * C1118) *
                C935 -
            (C47234 * C940 + C139586 * C1232 + C47233 * C939 + C47031 * C1231) *
                C824 +
            (C47233 * C832 + C47031 * C1121 + C47234 * C5916 +
             C139586 * C6094) *
                C936 +
            (C47233 * C940 + C47031 * C1232 + C47234 * C5982 +
             C139586 * C6148) *
                C825) *
               C30408 +
           ((C77909 + C77910) * C934 + (C78023 + C78024) * C823 -
            (C80797 + C80798) * C935 - (C80933 + C80934) * C824 +
            (C86458 + C86459) * C936 + (C86564 + C86565) * C825) *
               C139588) *
              C139286 * C139300 * C9466 +
          (((C80798 + C80797) * C935 -
            ((C78024 + C78023) * C823 + (C77910 + C77909) * C934) +
            (C80934 + C80933) * C824 - (C86459 + C86458) * C936 -
            (C86565 + C86564) * C825) *
               C30408 +
           ((C83437 + C83438) * C935 -
            ((C78025 + C78026) * C823 + (C77915 + C77916) * C934) +
            (C83543 + C83544) * C824 -
            (C47234 * C68836 + C139586 * C69110 + C47233 * C21079 +
             C47031 * C21413) *
                C936 -
            (C47234 * C68934 + C139586 * C69186 + C47233 * C21197 +
             C47031 * C21514) *
                C825) *
               C139588) *
              C139286 * C139300 * C139403)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[89] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C831 + C139586 * C1118) *
                C9616 +
            (C47233 * C245 + C47031 * C474 + C47234 * C1029 + C139586 * C1339) *
                C9466 -
            (C77910 + C77909) * C9617 - (C78133 + C78134) * C139403) *
               C30408 +
           ((C77909 + C77910) * C9616 + (C78134 + C78133) * C9466 -
            (C77915 + C77916) * C9617 - (C78136 + C78135) * C139403) *
               C139588) *
              C139286 * C139328 * C5225 +
          (((C49072 + C49073) * C9617 -
            ((C47435 + C47434) * C9466 + (C47260 + C47261) * C9616) +
            (C49297 + C49296) * C139403) *
               C30408 +
           ((C49077 + C49076) * C9617 -
            ((C49296 + C49297) * C9466 + (C49073 + C49072) * C9616) +
            (C49298 + C49299) * C139403) *
               C139588) *
              C139286 * C139328 * C5226 +
          (((C47264 + C47265) * C9616 + (C47437 + C47436) * C9466 -
            (C50924 + C50925) * C9617 - (C51135 + C51134) * C139403) *
               C30408 +
           ((C50925 + C50924) * C9616 + (C51134 + C51135) * C9466 -
            (C47234 * C6440 + C139586 * C6686 + C47233 * C1770 +
             C47031 * C2059) *
                C9617 -
            (C47234 * C6606 + C139586 * C6845 + C47233 * C1968 +
             C47031 * C2274) *
                C139403) *
               C139588) *
              C139286 * C139328 * C5227)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C831 + C139586 * C1118) *
                C9616 +
            (C47233 * C245 + C47031 * C474 + C47234 * C1029 + C139586 * C1339) *
                C9466 -
            (C77910 + C77909) * C9617 - (C78133 + C78134) * C139403) *
               C30408 +
           ((C77909 + C77910) * C9616 + (C78134 + C78133) * C9466 -
            (C77915 + C77916) * C9617 - (C78136 + C78135) * C139403) *
               C139588) *
              C139286 * C823 +
          (((C80798 + C80797) * C9617 -
            ((C47234 * C1030 + C139586 * C1340 + C47233 * C1029 +
              C47031 * C1339) *
                 C9466 +
             (C47234 * C832 + C139586 * C1121 + C47233 * C831 +
              C47031 * C1118) *
                 C9616) +
            (C81069 + C81070) * C139403) *
               C30408 +
           ((C83437 + C83438) * C9617 -
            ((C81070 + C81069) * C9466 + (C80797 + C80798) * C9616) +
            (C83648 + C83647) * C139403) *
               C139588) *
              C139286 * C824 +
          (((C47233 * C832 + C47031 * C1121 + C47234 * C5916 +
             C139586 * C6094) *
                C9616 +
            (C47233 * C1030 + C47031 * C1340 + C47234 * C6038 +
             C139586 * C6203) *
                C9466 -
            (C86459 + C86458) * C9617 - (C86668 + C86669) * C139403) *
               C30408 +
           ((C86458 + C86459) * C9616 + (C86669 + C86668) * C9466 -
            (C47234 * C68836 + C139586 * C69110 + C47233 * C21079 +
             C47031 * C21413) *
                C9617 -
            (C47234 * C69016 + C139586 * C69261 + C47233 * C21305 +
             C47031 * C21614) *
                C139403) *
               C139588) *
              C139286 * C825) *
         C139300) /
            (p * q * std::sqrt(p + q));
    d2eezx[89] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1767 + C139588 * C2376) *
                C5230 +
            (C30812 * C116 + C30408 * C561 + C30813 * C1777 + C139588 * C2383) *
                C5225 -
            (C30839 + C30840) * C5231 - (C30841 + C30842) * C5226 +
            (C30843 + C30844) * C5232 + (C30845 + C30846) * C5227) *
               C139286 * C47031 +
           ((C77185 + C77186) * C5230 + (C77187 + C77188) * C5225 -
            (C31744 + C31743) * C5231 - (C31746 + C31745) * C5226 +
            (C33762 + C33761) * C5232 + (C33764 + C33763) * C5227) *
               C139286 * C139586) *
              C9466 +
          (((C32837 + C32838) * C5231 -
            ((C30813 * C1783 + C139588 * C2387 + C30812 * C1777 +
              C30408 * C2383) *
                 C5225 +
             (C30813 * C1768 + C139588 * C2379 + C30812 * C1767 +
              C30408 * C2376) *
                 C5230) +
            (C32839 + C32840) * C5226 - (C34712 + C34713) * C5232 -
            (C34714 + C34715) * C5227) *
               C139286 * C47031 +
           ((C35893 + C35892) * C5231 -
            ((C81209 + C81210) * C5225 + (C81211 + C81212) * C5230) +
            (C35895 + C35894) * C5226 -
            (C30813 * C6440 + C139588 * C6920 + C30812 * C4225 +
             C30408 * C4901) *
                C5232 -
            (C30813 * C6443 + C139588 * C6923 + C30812 * C4232 +
             C30408 * C4905) *
                C5227) *
               C139286 * C139586) *
              C139403) *
         C139328) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30812 * C107 + C30408 * C555 + C30813 * C1767 +
              C139588 * C2376) *
                 C5913 +
             (C30812 * C116 + C30408 * C561 + C30813 * C1777 +
              C139588 * C2383) *
                 C139300) *
                C139286 * C47031 +
            ((C77185 + C77186) * C5913 + (C77187 + C77188) * C139300) *
                C139286 * C139586) *
               C9466 -
           (((C81209 + C81210) * C139300 + (C81211 + C81212) * C5913) *
                C139286 * C139586 +
            ((C30813 * C1783 + C139588 * C2387 + C30812 * C1777 +
              C30408 * C2383) *
                 C139300 +
             (C30813 * C1768 + C139588 * C2379 + C30812 * C1767 +
              C30408 * C2376) *
                 C5913) *
                C139286 * C47031) *
               C139403) *
              C823 +
          ((((C81212 + C81211) * C5913 + (C81210 + C81209) * C139300) *
                C139286 * C47031 +
            ((C86776 + C86777) * C5913 + (C86778 + C86779) * C139300) *
                C139286 * C139586) *
               C139403 -
           (((C77189 + C77190) * C139300 + (C77191 + C77192) * C5913) *
                C139286 * C139586 +
            ((C77188 + C77187) * C139300 + (C77186 + C77185) * C5913) *
                C139286 * C47031) *
               C9466) *
              C824 +
          ((((C77192 + C77191) * C5913 + (C77190 + C77189) * C139300) *
                C139286 * C47031 +
            ((C82845 + C82846) * C5913 + (C82847 + C82848) * C139300) *
                C139286 * C139586) *
               C9466 -
           (((C30813 * C68837 + C139588 * C69337 + C30812 * C24131 +
              C30408 * C24767) *
                 C139300 +
             (C30813 * C68836 + C139588 * C69336 + C30812 * C24129 +
              C30408 * C24765) *
                 C5913) *
                C139286 * C139586 +
            ((C86779 + C86778) * C139300 + (C86777 + C86776) * C5913) *
                C139286 * C47031) *
               C139403) *
              C825)) /
            (p * q * std::sqrt(p + q));
    d2eezy[89] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30812 * C107 + C30408 * C555 + C30813 * C1767 +
              C139588 * C2376) *
                 C181 +
             (C30812 * C182 + C30408 * C641 + C30813 * C1873 +
              C139588 * C2492) *
                 C139328) *
                C139286 * C47031 +
            ((C77185 + C77186) * C181 + (C77300 + C77299) * C139328) * C139286 *
                C139586) *
               C5225 -
           (((C31857 + C31858) * C139328 + (C31744 + C31743) * C181) * C139286 *
                C139586 +
            ((C30930 + C30929) * C139328 + (C30839 + C30840) * C181) * C139286 *
                C47031) *
               C5226 +
           (((C30843 + C30844) * C181 + (C30932 + C30931) * C139328) * C139286 *
                C47031 +
            ((C33762 + C33761) * C181 + (C33867 + C33868) * C139328) * C139286 *
                C139586) *
               C5227) *
              C9466 +
          ((((C32837 + C32838) * C181 + (C32951 + C32952) * C139328) * C139286 *
                C47031 +
            ((C35893 + C35892) * C181 + (C36030 + C36031) * C139328) * C139286 *
                C139586) *
               C5226 -
           (((C81348 + C81347) * C139328 + (C81211 + C81212) * C181) * C139286 *
                C139586 +
            ((C30813 * C1874 + C139588 * C2493 + C30812 * C1873 +
              C30408 * C2492) *
                 C139328 +
             (C30813 * C1768 + C139588 * C2379 + C30812 * C1767 +
              C30408 * C2376) *
                 C181) *
                C139286 * C47031) *
               C5225 -
           (((C30813 * C6526 + C139588 * C7002 + C30812 * C4339 +
              C30408 * C5019) *
                 C139328 +
             (C30813 * C6440 + C139588 * C6920 + C30812 * C4225 +
              C30408 * C4901) *
                 C181) *
                C139286 * C139586 +
            ((C34819 + C34818) * C139328 + (C34712 + C34713) * C181) * C139286 *
                C47031) *
               C5227) *
              C139403)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1767 + C139588 * C2376) *
                C934 +
            (C30812 * C182 + C30408 * C641 + C30813 * C1873 + C139588 * C2492) *
                C823 -
            (C77186 + C77185) * C935 - (C77299 + C77300) * C824 +
            (C77192 + C77191) * C936 + (C77301 + C77302) * C825) *
               C139286 * C47031 +
           ((C77185 + C77186) * C934 + (C77300 + C77299) * C823 -
            (C77191 + C77192) * C935 - (C77302 + C77301) * C824 +
            (C82845 + C82846) * C936 + (C82920 + C82919) * C825) *
               C139286 * C139586) *
              C139300 * C9466 +
          (((C81212 + C81211) * C935 -
            ((C30813 * C1874 + C139588 * C2493 + C30812 * C1873 +
              C30408 * C2492) *
                 C823 +
             (C30813 * C1768 + C139588 * C2379 + C30812 * C1767 +
              C30408 * C2376) *
                 C934) +
            (C81347 + C81348) * C824 - (C86777 + C86776) * C936 -
            (C86882 + C86883) * C825) *
               C139286 * C47031 +
           ((C86776 + C86777) * C935 -
            ((C81348 + C81347) * C823 + (C81211 + C81212) * C934) +
            (C86883 + C86882) * C824 -
            (C30813 * C68836 + C139588 * C69336 + C30812 * C24129 +
             C30408 * C24765) *
                C936 -
            (C30813 * C68934 + C139588 * C69420 + C30812 * C24247 +
             C30408 * C24876) *
                C825) *
               C139286 * C139586) *
              C139300 * C139403)) /
            (p * q * std::sqrt(p + q));
    d2eezz[89] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1767 + C139588 * C2376) *
                C9616 +
            (C30812 * C245 + C30408 * C719 + C30813 * C1965 + C139588 * C2591) *
                C9466 -
            (C30813 * C1768 + C139588 * C2379 + C30812 * C1767 +
             C30408 * C2376) *
                C9617 -
            (C30813 * C1966 + C139588 * C2592 + C30812 * C1965 +
             C30408 * C2591) *
                C139403) *
               C139286 * C47031 +
           ((C77185 + C77186) * C9616 + (C77409 + C77410) * C9466 -
            (C81211 + C81212) * C9617 - (C81483 + C81484) * C139403) *
               C139286 * C139586) *
              C139328 * C5225 +
          (((C32837 + C32838) * C9617 -
            ((C31014 + C31013) * C9466 + (C30839 + C30840) * C9616) +
            (C33062 + C33061) * C139403) *
               C139286 * C47031 +
           ((C35893 + C35892) * C9617 -
            ((C31967 + C31968) * C9466 + (C31744 + C31743) * C9616) +
            (C36166 + C36167) * C139403) *
               C139286 * C139586) *
              C139328 * C5226 +
          (((C30843 + C30844) * C9616 + (C31016 + C31015) * C9466 -
            (C34712 + C34713) * C9617 - (C34923 + C34922) * C139403) *
               C139286 * C47031 +
           ((C33762 + C33761) * C9616 + (C33971 + C33972) * C9466 -
            (C30813 * C6440 + C139588 * C6920 + C30812 * C4225 +
             C30408 * C4901) *
                C9617 -
            (C30813 * C6606 + C139588 * C7079 + C30812 * C4445 +
             C30408 * C5135) *
                C139403) *
               C139286 * C139586) *
              C139328 * C5227)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1767 + C139588 * C2376) *
                C9616 +
            (C30812 * C245 + C30408 * C719 + C30813 * C1965 + C139588 * C2591) *
                C9466 -
            (C30813 * C1768 + C139588 * C2379 + C30812 * C1767 +
             C30408 * C2376) *
                C9617 -
            (C30813 * C1966 + C139588 * C2592 + C30812 * C1965 +
             C30408 * C2591) *
                C139403) *
               C139286 * C47031 +
           ((C77185 + C77186) * C9616 + (C77409 + C77410) * C9466 -
            (C81211 + C81212) * C9617 - (C81483 + C81484) * C139403) *
               C139286 * C139586) *
              C823 +
          (((C81212 + C81211) * C9617 -
            ((C77410 + C77409) * C9466 + (C77186 + C77185) * C9616) +
            (C81484 + C81483) * C139403) *
               C139286 * C47031 +
           ((C86776 + C86777) * C9617 -
            ((C77411 + C77412) * C9466 + (C77191 + C77192) * C9616) +
            (C86986 + C86987) * C139403) *
               C139286 * C139586) *
              C824 +
          (((C77192 + C77191) * C9616 + (C77412 + C77411) * C9466 -
            (C86777 + C86776) * C9617 - (C86987 + C86986) * C139403) *
               C139286 * C47031 +
           ((C82845 + C82846) * C9616 + (C82991 + C82992) * C9466 -
            (C30813 * C68836 + C139588 * C69336 + C30812 * C24129 +
             C30408 * C24765) *
                C9617 -
            (C30813 * C69016 + C139588 * C69498 + C30812 * C24355 +
             C30408 * C24979) *
                C139403) *
               C139286 * C139586) *
              C825) *
         C139300) /
            (p * q * std::sqrt(p + q));
    d2eexx[90] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139575 * C114) *
                C2702 +
            (C47033 * C116 + C47029 * C125 + C47034 * C117 + C139575 * C126) *
                C139589 -
            (C47034 * C109 + C139575 * C115 + C47033 * C108 + C47029 * C114) *
                C2703 -
            (C47034 * C118 + C139575 * C127 + C47033 * C117 + C47029 * C126) *
                C139590 +
            (C47033 * C109 + C47029 * C115 + C47034 * C110 + C139575 * C119) *
                C2704 +
            (C47033 * C118 + C47029 * C127 + C47034 * C120 + C139575 * C128) *
                C2699) *
               C139442 * C92451 +
           ((C94116 + C94117) * C2702 + (C94118 + C94119) * C139589 -
            (C94120 + C94121) * C2703 - (C94122 + C94123) * C139590 +
            (C47033 * C1765 + C47029 * C1773 + C47034 * C1766 +
             C139575 * C1774) *
                C2704 +
            (C47033 * C1775 + C47029 * C1788 + C47034 * C1779 +
             C139575 * C1791) *
                C2699) *
               C139442 * C139588) *
              C139339 * C139560 +
          (((C47773 + C47772) * C2703 -
            ((C47771 + C47770) * C139589 + (C47769 + C47768) * C2702) +
            (C47775 + C47774) * C139590 - (C49701 + C49700) * C2704 -
            (C49703 + C49702) * C2699) *
               C139442 * C92451 +
           ((C51576 + C51577) * C2703 -
            ((C51578 + C51579) * C139589 + (C51580 + C51581) * C2702) +
            (C51582 + C51583) * C139590 -
            (C47034 * C4226 + C139575 * C4233 + C47033 * C4225 +
             C47029 * C4229) *
                C2704 -
            (C47034 * C4234 + C139575 * C4238 + C47033 * C4232 +
             C47029 * C4237) *
                C2699) *
               C139442 * C139588) *
              C139339 * C139377)) /
        (p * q * std::sqrt(p + q));
    d2eexy[90] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139575 * C114) *
                C2783 +
            (C47033 * C182 + C47029 * C188 + C47034 * C183 + C139575 * C189) *
                C139560 -
            (C47769 + C47768) * C2784 - (C47898 + C47899) * C139377) *
               C139442 * C92451 +
           ((C94116 + C94117) * C2783 + (C94246 + C94247) * C139560 -
            (C51580 + C51581) * C2784 - (C51723 + C51722) * C139377) *
               C139442 * C139588) *
              C139589 +
          (((C47773 + C47772) * C2784 -
            ((C47034 * C184 + C139575 * C190 + C47033 * C183 + C47029 * C189) *
                 C139560 +
             (C47034 * C109 + C139575 * C115 + C47033 * C108 + C47029 * C114) *
                 C2783) +
            (C47902 + C47903) * C139377) *
               C139442 * C92451 +
           ((C51576 + C51577) * C2784 -
            ((C94248 + C94249) * C139560 + (C94120 + C94121) * C2783) +
            (C51725 + C51724) * C139377) *
               C139442 * C139588) *
              C139590 +
          (((C47033 * C109 + C47029 * C115 + C47034 * C110 + C139575 * C119) *
                C2783 +
            (C47033 * C184 + C47029 * C190 + C47034 * C185 + C139575 * C191) *
                C139560 -
            (C49701 + C49700) * C2784 - (C49806 + C49807) * C139377) *
               C139442 * C92451 +
           ((C47033 * C1765 + C47029 * C1773 + C47034 * C1766 +
             C139575 * C1774) *
                C2783 +
            (C47033 * C1871 + C47029 * C1879 + C47034 * C1872 +
             C139575 * C1880) *
                C139560 -
            (C47034 * C4226 + C139575 * C4233 + C47033 * C4225 +
             C47029 * C4229) *
                C2784 -
            (C47034 * C4340 + C139575 * C4344 + C47033 * C4339 +
             C47029 * C4343) *
                C139377) *
               C139442 * C139588) *
              C2699) *
         C139339) /
        (p * q * std::sqrt(p + q));
    d2eexz[90] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139575 * C114) *
                 C244 +
             (C47033 * C245 + C47029 * C251 + C47034 * C246 + C139575 * C252) *
                 C139339) *
                C139442 * C92451 +
            ((C94116 + C94117) * C244 + (C94369 + C94368) * C139339) * C139442 *
                C139588) *
               C139560 -
           (((C51864 + C51865) * C139339 + (C51580 + C51581) * C244) * C139442 *
                C139588 +
            ((C48021 + C48020) * C139339 + (C47769 + C47768) * C244) * C139442 *
                C92451) *
               C139377) *
              C139589 +
          ((((C47773 + C47772) * C244 + (C48024 + C48025) * C139339) * C139442 *
                C92451 +
            ((C51576 + C51577) * C244 + (C51866 + C51867) * C139339) * C139442 *
                C139588) *
               C139377 -
           (((C94373 + C94372) * C139339 + (C94120 + C94121) * C244) * C139442 *
                C139588 +
            ((C47034 * C247 + C139575 * C253 + C47033 * C246 + C47029 * C252) *
                 C139339 +
             (C47034 * C109 + C139575 * C115 + C47033 * C108 + C47029 * C114) *
                 C244) *
                C139442 * C92451) *
               C139560) *
              C139590 +
          ((((C47033 * C109 + C47029 * C115 + C47034 * C110 + C139575 * C119) *
                 C244 +
             (C47033 * C247 + C47029 * C253 + C47034 * C248 + C139575 * C254) *
                 C139339) *
                C139442 * C92451 +
            ((C47033 * C1765 + C47029 * C1773 + C47034 * C1766 +
              C139575 * C1774) *
                 C244 +
             (C47033 * C1963 + C47029 * C1971 + C47034 * C1969 +
              C139575 * C1977) *
                 C139339) *
                C139442 * C139588) *
               C139560 -
           (((C47034 * C4446 + C139575 * C4450 + C47033 * C4445 +
              C47029 * C4449) *
                 C139339 +
             (C47034 * C4226 + C139575 * C4233 + C47033 * C4225 +
              C47029 * C4229) *
                 C244) *
                C139442 * C139588 +
            ((C49911 + C49910) * C139339 + (C49701 + C49700) * C244) * C139442 *
                C92451) *
               C139377) *
              C2699)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[90] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139442 * C308) * C2702 +
             (C307 * C116 + C139442 * C314) * C139589 - C337 * C2703 -
             C338 * C139590 + C339 * C2704 + C340 * C2699) *
                C92451 +
            (C34389 + C34390 - C34391 - C34392 + C34393 + C34394) * C139588) *
               C47029 +
           ((C337 * C2702 + C338 * C139589 - C339 * C2703 - C340 * C139590 +
             C341 * C2704 + C342 * C2699) *
                C92451 +
            (C34395 + C34396 - C34397 - C34398 + C34399 + C34400) * C139588) *
               C139575) *
              C139339 * C139560 +
          (((C1150 * C2703 -
             ((C307 * C841 + C139442 * C1125) * C139589 +
              (C307 * C831 + C139442 * C1118) * C2702) +
             C1151 * C139590 - C1152 * C2704 - C1153 * C2699) *
                C92451 +
            (C4566 * C2703 - (C35458 * C139589 + C35459 * C2702) +
             C4567 * C139590 - C4568 * C2704 - C4569 * C2699) *
                C139588) *
               C47029 +
           ((C1152 * C2703 - (C1151 * C139589 + C1150 * C2702) +
             C1153 * C139590 - C2944 * C2704 - C2945 * C2699) *
                C92451 +
            (C4568 * C2703 - (C4567 * C139589 + C4566 * C2702) +
             C4569 * C139590 - (C307 * C4226 + C139442 * C4552) * C2704 -
             (C307 * C4234 + C139442 * C4556) * C2699) *
                C139588) *
               C139575) *
              C139339 * C139377)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[90] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139442 * C308) * C2783 +
             (C307 * C182 + C139442 * C394) * C139560 -
             (C307 * C831 + C139442 * C1118) * C2784 -
             (C307 * C939 + C139442 * C1231) * C139377) *
                C92451 +
            (C35594 + C35595 - C35596 - C35610) * C139588) *
               C47029 +
           ((C3021 + C3022 - C3023 - C3024) * C92451 + C35611 * C139588) *
               C139575) *
              C139589 +
          (((C3023 - (C3022 + C3021) + C3024) * C92451 + C35612 * C139588) *
               C47029 +
           ((C3027 - (C3026 + C3025) + C3028) * C92451 +
            (C4677 - (C4678 + C4679) + C4685) * C139588) *
               C139575) *
              C139590 +
          ((C3038 * C92451 + (C4679 + C4678 - C4677 - C4685) * C139588) *
               C47029 +
           ((C3031 + C3030 - C3029 - C3037) * C92451 +
            (C3692 * C2783 + C3773 * C139560 -
             (C307 * C4226 + C139442 * C4552) * C2784 -
             (C307 * C4340 + C139442 * C4670) * C139377) *
                C139588) *
               C139575) *
              C2699) *
         C139339) /
        (p * q * std::sqrt(p + q));
    d2eeyz[90] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C307 * C107 + C139442 * C308) * C244 +
              (C307 * C245 + C139442 * C474) * C139339) *
                 C92451 +
             (C32483 * C244 + C32719 * C139339) * C139588) *
                C47029 +
            ((C481 + C497) * C92451 + (C30741 + C30742) * C139588) * C139575) *
               C139560 -
           (((C31622 + C31623) * C139588 + (C1363 + C1351) * C92451) * C139575 +
            ((C35751 * C139339 + C35459 * C244) * C139588 +
             ((C307 * C1029 + C139442 * C1339) * C139339 +
              (C307 * C831 + C139442 * C1118) * C244) *
                 C92451) *
                C47029) *
               C139377) *
              C139589 +
          ((((C1351 + C1363) * C92451 + (C31623 + C31622) * C139588) * C47029 +
            ((C1348 + C1362) * C92451 + (C33653 + C33654) * C139588) *
                C139575) *
               C139377 -
           (((C30743 + C30744) * C139588 + (C498 + C484) * C92451) * C139575 +
            ((C30742 + C30741) * C139588 + (C497 + C481) * C92451) * C47029) *
               C139560) *
              C139590 +
          (((C501 * C92451 + (C30744 + C30743) * C139588) * C47029 +
            ((C489 + C499) * C92451 + (C30745 + C30746) * C139588) * C139575) *
               C139560 -
           ((((C307 * C4446 + C139442 * C4786) * C139339 +
              (C307 * C4226 + C139442 * C4552) * C244) *
                 C139588 +
             (C3121 + C3116) * C92451) *
                C139575 +
            ((C33654 + C33653) * C139588 + C3115 * C92451) * C47029) *
               C139377) *
              C2699)) /
        (p * q * std::sqrt(p + q));
    d2eezx[90] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1767 + C139588 * C2376) *
                C2702 +
            (C92849 * C116 + C92451 * C561 + C92850 * C1777 + C139588 * C2383) *
                C139589 -
            (C92876 + C92877) * C2703 - (C92878 + C92879) * C139590 +
            (C92880 + C92881) * C2704 + (C92882 + C92883) * C2699) *
               C47029 +
           ((C92877 + C92876) * C2702 + (C92879 + C92878) * C139589 -
            (C92881 + C92880) * C2703 - (C92883 + C92882) * C139590 +
            (C92885 + C92884) * C2704 + (C92887 + C92886) * C2699) *
               C139575) *
              C139442 * C139339 * C139560 +
          (((C93758 + C93759) * C2703 -
            ((C92850 * C4230 + C139588 * C4903 + C92849 * C841 +
              C92451 * C1447) *
                 C139589 +
             (C92850 * C4223 + C139588 * C4899 + C92849 * C831 +
              C92451 * C1440) *
                 C2702) +
            (C93760 + C93761) * C139590 - (C95706 + C95707) * C2704 -
            (C95708 + C95709) * C2699) *
               C47029 +
           ((C95707 + C95706) * C2703 -
            ((C93761 + C93760) * C139589 + (C93759 + C93758) * C2702) +
            (C95709 + C95708) * C139590 -
            (C92850 * C4226 + C139588 * C4902 + C92849 * C830 +
             C92451 * C1442) *
                C2704 -
            (C92850 * C4234 + C139588 * C4906 + C92849 * C843 +
             C92451 * C1450) *
                C2699) *
               C139575) *
              C139442 * C139339 * C139377)) /
        (p * q * std::sqrt(p + q));
    d2eezy[90] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1767 + C139588 * C2376) *
                C2783 +
            (C92849 * C182 + C92451 * C641 + C92850 * C1873 + C139588 * C2492) *
                C139560 -
            (C92850 * C4223 + C139588 * C4899 + C92849 * C831 +
             C92451 * C1440) *
                C2784 -
            (C92850 * C4337 + C139588 * C5017 + C92849 * C939 +
             C92451 * C1553) *
                C139377) *
               C47029 +
           ((C92877 + C92876) * C2783 + (C92966 + C92967) * C139560 -
            (C93759 + C93758) * C2784 - (C93872 + C93873) * C139377) *
               C139575) *
              C139442 * C139589 +
          (((C93758 + C93759) * C2784 -
            ((C92967 + C92966) * C139560 + (C92876 + C92877) * C2783) +
            (C93873 + C93872) * C139377) *
               C47029 +
           ((C95707 + C95706) * C2784 -
            ((C92968 + C92969) * C139560 + (C92881 + C92880) * C2783) +
            (C95812 + C95813) * C139377) *
               C139575) *
              C139442 * C139590 +
          (((C92880 + C92881) * C2783 + (C92969 + C92968) * C139560 -
            (C95706 + C95707) * C2784 - (C95813 + C95812) * C139377) *
               C47029 +
           ((C92885 + C92884) * C2783 + (C92970 + C92971) * C139560 -
            (C92850 * C4226 + C139588 * C4902 + C92849 * C830 +
             C92451 * C1442) *
                C2784 -
            (C92850 * C4340 + C139588 * C5020 + C92849 * C943 +
             C92451 * C1559) *
                C139377) *
               C139575) *
              C139442 * C2699) *
         C139339) /
        (p * q * std::sqrt(p + q));
    d2eezz[90] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C92849 * C107 + C92451 * C555 + C92850 * C1767 +
              C139588 * C2376) *
                 C244 +
             (C92849 * C245 + C92451 * C719 + C92850 * C1965 +
              C139588 * C2591) *
                 C139339) *
                C47029 +
            ((C92877 + C92876) * C244 + (C93050 + C93051) * C139339) *
                C139575) *
               C139442 * C139560 -
           (((C93982 + C93983) * C139339 + (C93759 + C93758) * C244) * C139575 +
            ((C92850 * C4443 + C139588 * C5133 + C92849 * C1029 +
              C92451 * C1661) *
                 C139339 +
             (C92850 * C4223 + C139588 * C4899 + C92849 * C831 +
              C92451 * C1440) *
                 C244) *
                C47029) *
               C139442 * C139377) *
              C139589 +
          ((((C93758 + C93759) * C244 + (C93983 + C93982) * C139339) * C47029 +
            ((C95707 + C95706) * C244 + (C95916 + C95917) * C139339) *
                C139575) *
               C139442 * C139377 -
           (((C93052 + C93053) * C139339 + (C92881 + C92880) * C244) * C139575 +
            ((C93051 + C93050) * C139339 + (C92876 + C92877) * C244) * C47029) *
               C139442 * C139560) *
              C139590 +
          ((((C92880 + C92881) * C244 + (C93053 + C93052) * C139339) * C47029 +
            ((C92885 + C92884) * C244 + (C93054 + C93055) * C139339) *
                C139575) *
               C139442 * C139560 -
           (((C92850 * C4446 + C139588 * C5136 + C92849 * C1033 +
              C92451 * C1665) *
                 C139339 +
             (C92850 * C4226 + C139588 * C4902 + C92849 * C830 +
              C92451 * C1442) *
                 C244) *
                C139575 +
            ((C95917 + C95916) * C139339 + (C95706 + C95707) * C244) * C47029) *
               C139442 * C139377) *
              C2699)) /
        (p * q * std::sqrt(p + q));
    d2eexx[91] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139575 * C114) *
                 C826 +
             (C47033 * C116 + C47029 * C125 + C47034 * C117 + C139575 * C126) *
                 C821 -
             (C47034 * C109 + C139575 * C115 + C47033 * C108 + C47029 * C114) *
                 C827 -
             (C47034 * C118 + C139575 * C127 + C47033 * C117 + C47029 * C126) *
                 C139305) *
                C139442 * C92451 +
            ((C94116 + C94117) * C826 + (C94118 + C94119) * C821 -
             (C94120 + C94121) * C827 - (C94122 + C94123) * C139305) *
                C139442 * C139588) *
               C139561 +
           (((C94121 + C94120) * C827 -
             ((C94119 + C94118) * C821 + (C94117 + C94116) * C826) +
             (C94123 + C94122) * C139305) *
                C139442 * C92451 +
            ((C94124 + C94125) * C827 -
             ((C94126 + C94127) * C821 + (C94128 + C94129) * C826) +
             (C94130 + C94131) * C139305) *
                C139442 * C139588) *
               C139403) *
              C139560 +
          ((((C47773 + C47772) * C827 -
             ((C47771 + C47770) * C821 + (C47769 + C47768) * C826) +
             (C47775 + C47774) * C139305) *
                C139442 * C92451 +
            ((C51576 + C51577) * C827 -
             ((C51578 + C51579) * C821 + (C51580 + C51581) * C826) +
             (C51582 + C51583) * C139305) *
                C139442 * C139588) *
               C139561 +
           (((C51581 + C51580) * C826 + (C51579 + C51578) * C821 -
             (C51577 + C51576) * C827 - (C51583 + C51582) * C139305) *
                C139442 * C92451 +
            ((C54278 + C54279) * C826 + (C54280 + C54281) * C821 -
             (C47034 * C6440 + C139575 * C6446 + C47033 * C6441 +
              C47029 * C6447) *
                 C827 -
             (C47034 * C6443 + C139575 * C6449 + C47033 * C6444 +
              C47029 * C6450) *
                 C139305) *
                C139442 * C139588) *
               C139403) *
              C139377)) /
        (p * q * std::sqrt(p + q));
    d2eexy[91] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139575 * C114) *
                 C2783 +
             (C47033 * C182 + C47029 * C188 + C47034 * C183 + C139575 * C189) *
                 C139560 -
             (C47769 + C47768) * C2784 - (C47898 + C47899) * C139377) *
                C139442 * C92451 +
            ((C94116 + C94117) * C2783 + (C94246 + C94247) * C139560 -
             (C51580 + C51581) * C2784 - (C51723 + C51722) * C139377) *
                C139442 * C139588) *
               C821 +
           (((C47773 + C47772) * C2784 -
             ((C47034 * C184 + C139575 * C190 + C47033 * C183 + C47029 * C189) *
                  C139560 +
              (C47034 * C109 + C139575 * C115 + C47033 * C108 + C47029 * C114) *
                  C2783) +
             (C47902 + C47903) * C139377) *
                C139442 * C92451 +
            ((C51576 + C51577) * C2784 -
             ((C94248 + C94249) * C139560 + (C94120 + C94121) * C2783) +
             (C51725 + C51724) * C139377) *
                C139442 * C139588) *
               C139305) *
              C139561 +
          ((((C51581 + C51580) * C2784 -
             ((C94247 + C94246) * C139560 + (C94117 + C94116) * C2783) +
             (C51722 + C51723) * C139377) *
                C139442 * C92451 +
            ((C54278 + C54279) * C2784 -
             ((C94252 + C94253) * C139560 + (C94128 + C94129) * C2783) +
             (C54385 + C54384) * C139377) *
                C139442 * C139588) *
               C821 +
           (((C94121 + C94120) * C2783 + (C94249 + C94248) * C139560 -
             (C51577 + C51576) * C2784 - (C51724 + C51725) * C139377) *
                C139442 * C92451 +
            ((C94124 + C94125) * C2783 + (C94250 + C94251) * C139560 -
             (C47034 * C6440 + C139575 * C6446 + C47033 * C6441 +
              C47029 * C6447) *
                 C2784 -
             (C47034 * C6526 + C139575 * C6529 + C47033 * C6527 +
              C47029 * C6530) *
                 C139377) *
                C139442 * C139588) *
               C139305) *
              C139403)) /
        (p * q * std::sqrt(p + q));
    d2eexz[91] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139575 * C114) *
                 C3607 +
             (C47033 * C245 + C47029 * C251 + C47034 * C246 + C139575 * C252) *
                 C139561 -
             (C94117 + C94116) * C3608 - (C94368 + C94369) * C139403) *
                C139442 * C92451 +
            ((C94116 + C94117) * C3607 + (C94369 + C94368) * C139561 -
             (C94128 + C94129) * C3608 - (C94371 + C94370) * C139403) *
                C139442 * C139588) *
               C139560 +
           (((C51581 + C51580) * C3608 -
             ((C48021 + C48020) * C139561 + (C47769 + C47768) * C3607) +
             (C51865 + C51864) * C139403) *
                C139442 * C92451 +
            ((C54278 + C54279) * C3608 -
             ((C51864 + C51865) * C139561 + (C51580 + C51581) * C3607) +
             (C54488 + C54489) * C139403) *
                C139442 * C139588) *
               C139377) *
              C821 +
          ((((C94121 + C94120) * C3608 -
             ((C47034 * C247 + C139575 * C253 + C47033 * C246 + C47029 * C252) *
                  C139561 +
              (C47034 * C109 + C139575 * C115 + C47033 * C108 + C47029 * C114) *
                  C3607) +
             (C94372 + C94373) * C139403) *
                C139442 * C92451 +
            ((C94124 + C94125) * C3608 -
             ((C94373 + C94372) * C139561 + (C94120 + C94121) * C3607) +
             (C94375 + C94374) * C139403) *
                C139442 * C139588) *
               C139560 +
           (((C47773 + C47772) * C3607 + (C48024 + C48025) * C139561 -
             (C51577 + C51576) * C3608 - (C51867 + C51866) * C139403) *
                C139442 * C92451 +
            ((C51576 + C51577) * C3607 + (C51866 + C51867) * C139561 -
             (C47034 * C6440 + C139575 * C6446 + C47033 * C6441 +
              C47029 * C6447) *
                 C3608 -
             (C47034 * C6606 + C139575 * C6609 + C47033 * C6607 +
              C47029 * C6610) *
                 C139403) *
                C139442 * C139588) *
               C139377) *
              C139305)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[91] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C307 * C107 + C139442 * C308) * C826 +
              (C307 * C116 + C139442 * C314) * C821 - C337 * C827 -
              C338 * C139305) *
                 C92451 +
             (C32489 + C32490 - C32463 - C32464) * C139588) *
                C47029 +
            ((C337 * C826 + C338 * C821 - C339 * C827 - C340 * C139305) *
                 C92451 +
             (C32465 + C32466 - C32467 - C32468) * C139588) *
                C139575) *
               C139561 +
           (((C32463 - (C32490 + C32489) + C32464) * C92451 +
             (C32469 - (C32491 + C32492) + C32474) * C139588) *
                C47029 +
            ((C32467 - (C32466 + C32465) + C32468) * C92451 +
             (C32475 - (C32476 + C32477) + C32478) * C139588) *
                C139575) *
               C139403) *
              C139560 +
          ((((C1150 * C827 -
              ((C307 * C841 + C139442 * C1125) * C821 +
               (C307 * C831 + C139442 * C1118) * C826) +
              C1151 * C139305) *
                 C92451 +
             (C35444 - (C35462 + C35463) + C35449) * C139588) *
                C47029 +
            ((C1152 * C827 - (C1151 * C821 + C1150 * C826) + C1153 * C139305) *
                 C92451 +
             (C35450 - (C35451 + C35452) + C35453) * C139588) *
                C139575) *
               C139561 +
           (((C35463 + C35462 - C35444 - C35449) * C92451 +
             (C38054 * C826 + C38055 * C821 - C35460 * C827 -
              C35461 * C139305) *
                 C139588) *
                C47029 +
            ((C35452 + C35451 - C35450 - C35453) * C92451 +
             (C35460 * C826 + C35461 * C821 -
              (C307 * C6440 + C139442 * C6686) * C827 -
              (C307 * C6443 + C139442 * C6689) * C139305) *
                 C139588) *
                C139575) *
               C139403) *
              C139377)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[91] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C307 * C107 + C139442 * C308) * C2783 +
              (C307 * C182 + C139442 * C394) * C139560 -
              (C307 * C831 + C139442 * C1118) * C2784 -
              (C307 * C939 + C139442 * C1231) * C139377) *
                 C92451 +
             (C35594 + C35595 - C35596 - C35610) * C139588) *
                C47029 +
            ((C3021 + C3022 - C3023 - C3024) * C92451 + C35611 * C139588) *
                C139575) *
               C821 +
           (((C3023 - (C3022 + C3021) + C3024) * C92451 + C35612 * C139588) *
                C47029 +
            ((C3027 - (C3026 + C3025) + C3028) * C92451 +
             (C4677 - (C4678 + C4679) + C4685) * C139588) *
                C139575) *
               C139305) *
              C139561 +
          ((((C35596 - (C35595 + C35594) + C35610) * C92451 +
             (C46568 - (C46569 + C46570) + C46571) * C139588) *
                C47029 +
            (C35612 * C92451 +
             (C35601 - (C35602 + C35603) + C35613) * C139588) *
                C139575) *
               C821 +
           ((C35611 * C92451 + (C35603 + C35602 - C35601 - C35613) * C139588) *
                C47029 +
            ((C4679 + C4678 - C4677 - C4685) * C92451 +
             (C2092 * C2783 + C2191 * C139560 -
              (C307 * C6440 + C139442 * C6686) * C2784 -
              (C307 * C6526 + C139442 * C6768) * C139377) *
                 C139588) *
                C139575) *
               C139305) *
              C139403)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[91] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((((C307 * C107 + C139442 * C308) * C3607 +
                        (C307 * C245 + C139442 * C474) * C139561 -
                        C32483 * C3608 - C32719 * C139403) *
                           C92451 +
                       (C32483 * C3607 + C32719 * C139561 - C32486 * C3608 -
                        C32720 * C139403) *
                           C139588) *
                          C47029 +
                      ((C3851 + C3852 - C3853 - C3854) * C92451 +
                       (C34598 + C34599 - C34600 - C34601) * C139588) *
                          C139575) *
                         C139560 +
                     (((C35459 * C3608 -
                        ((C307 * C1029 + C139442 * C1339) * C139561 +
                         (C307 * C831 + C139442 * C1118) * C3607) +
                        C35751 * C139403) *
                           C92451 +
                       (C38054 * C3608 - (C35751 * C139561 + C35459 * C3607) +
                        C38271 * C139403) *
                           C139588) *
                          C47029 +
                      ((C4788 - (C4789 + C4790) + C4800) * C92451 +
                       (C35746 - (C35747 + C35748) + C35753) * C139588) *
                          C139575) *
                         C139377) *
                        C821 +
                    ((((C3853 - (C3852 + C3851) + C3854) * C92451 +
                       (C34600 - (C34599 + C34598) + C34601) * C139588) *
                          C47029 +
                      ((C3857 - (C3856 + C3855) + C3858) * C92451 +
                       (C34602 - (C34603 + C34604) + C34605) * C139588) *
                          C139575) *
                         C139560 +
                     (((C4790 + C4789 - C4788 - C4800) * C92451 +
                       (C35748 + C35747 - C35746 - C35753) * C139588) *
                          C47029 +
                      ((C4795 + C4794 - C4793 - C4801) * C92451 +
                       (C4568 * C3607 + C4799 * C139561 -
                        (C307 * C6440 + C139442 * C6686) * C3608 -
                        (C307 * C6606 + C139442 * C6845) * C139403) *
                           C139588) *
                          C139575) *
                         C139377) *
                        C139305)) /
                  (p * q * std::sqrt(p + q));
    d2eezx[91] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C92849 * C107 + C92451 * C555 + C92850 * C1767 +
                        C139588 * C2376) *
                           C826 +
                       (C92849 * C116 + C92451 * C561 + C92850 * C1777 +
                        C139588 * C2383) *
                           C821 -
                       (C92876 + C92877) * C827 - (C92878 + C92879) * C139305) *
                          C47029 +
                      ((C92877 + C92876) * C826 + (C92879 + C92878) * C821 -
                       (C92881 + C92880) * C827 - (C92883 + C92882) * C139305) *
                          C139575) *
                         C139442 * C139561 +
                     (((C94784 + C94785) * C827 -
                       ((C92850 * C1783 + C139588 * C2387 + C92849 * C1777 +
                         C92451 * C2383) *
                            C821 +
                        (C92850 * C1768 + C139588 * C2379 + C92849 * C1767 +
                         C92451 * C2376) *
                            C826) +
                       (C94786 + C94787) * C139305) *
                          C47029 +
                      ((C96637 + C96636) * C827 -
                       ((C94787 + C94786) * C821 + (C94785 + C94784) * C826) +
                       (C96639 + C96638) * C139305) *
                          C139575) *
                         C139442 * C139403) *
                        C139560 +
                    ((((C93758 + C93759) * C827 -
                       ((C92850 * C4230 + C139588 * C4903 + C92849 * C841 +
                         C92451 * C1447) *
                            C821 +
                        (C92850 * C4223 + C139588 * C4899 + C92849 * C831 +
                         C92451 * C1440) *
                            C826) +
                       (C93760 + C93761) * C139305) *
                          C47029 +
                      ((C95707 + C95706) * C827 -
                       ((C93761 + C93760) * C821 + (C93759 + C93758) * C826) +
                       (C95709 + C95708) * C139305) *
                          C139575) *
                         C139442 * C139561 +
                     (((C92849 * C4223 + C92451 * C4899 + C92850 * C6442 +
                        C139588 * C6922) *
                           C826 +
                       (C92849 * C4230 + C92451 * C4903 + C92850 * C6445 +
                        C139588 * C6925) *
                           C821 -
                       (C97766 + C97767) * C827 - (C97768 + C97769) * C139305) *
                          C47029 +
                      ((C97767 + C97766) * C826 + (C97769 + C97768) * C821 -
                       (C92850 * C6440 + C139588 * C6920 + C92849 * C4225 +
                        C92451 * C4901) *
                           C827 -
                       (C92850 * C6443 + C139588 * C6923 + C92849 * C4232 +
                        C92451 * C4905) *
                           C139305) *
                          C139575) *
                         C139442 * C139403) *
                        C139377)) /
                  (p * q * std::sqrt(p + q));
    d2eezy[91] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C92849 * C107 + C92451 * C555 + C92850 * C1767 +
              C139588 * C2376) *
                 C2783 +
             (C92849 * C182 + C92451 * C641 + C92850 * C1873 +
              C139588 * C2492) *
                 C139560 -
             (C92850 * C4223 + C139588 * C4899 + C92849 * C831 +
              C92451 * C1440) *
                 C2784 -
             (C92850 * C4337 + C139588 * C5017 + C92849 * C939 +
              C92451 * C1553) *
                 C139377) *
                C47029 +
            ((C92877 + C92876) * C2783 + (C92966 + C92967) * C139560 -
             (C93759 + C93758) * C2784 - (C93872 + C93873) * C139377) *
                C139575) *
               C139442 * C821 +
           (((C93758 + C93759) * C2784 -
             ((C92967 + C92966) * C139560 + (C92876 + C92877) * C2783) +
             (C93873 + C93872) * C139377) *
                C47029 +
            ((C95707 + C95706) * C2784 -
             ((C92968 + C92969) * C139560 + (C92881 + C92880) * C2783) +
             (C95812 + C95813) * C139377) *
                C139575) *
               C139442 * C139305) *
              C139561 +
          ((((C92849 * C4223 + C92451 * C4899 + C92850 * C6442 +
              C139588 * C6922) *
                 C2784 -
             ((C92850 * C1874 + C139588 * C2493 + C92849 * C1873 +
               C92451 * C2492) *
                  C139560 +
              (C92850 * C1768 + C139588 * C2379 + C92849 * C1767 +
               C92451 * C2376) *
                  C2783) +
             (C92849 * C4337 + C92451 * C5017 + C92850 * C6528 +
              C139588 * C7000) *
                 C139377) *
                C47029 +
            ((C97767 + C97766) * C2784 -
             ((C94899 + C94898) * C139560 + (C94785 + C94784) * C2783) +
             (C97904 + C97905) * C139377) *
                C139575) *
               C139442 * C821 +
           (((C94784 + C94785) * C2783 + (C94898 + C94899) * C139560 -
             (C97766 + C97767) * C2784 - (C97905 + C97904) * C139377) *
                C47029 +
            ((C96637 + C96636) * C2783 + (C96742 + C96743) * C139560 -
             (C92850 * C6440 + C139588 * C6920 + C92849 * C4225 +
              C92451 * C4901) *
                 C2784 -
             (C92850 * C6526 + C139588 * C7002 + C92849 * C4339 +
              C92451 * C5019) *
                 C139377) *
                C139575) *
               C139442 * C139305) *
              C139403)) /
        (p * q * std::sqrt(p + q));
    d2eezz[91] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C92849 * C107 + C92451 * C555 + C92850 * C1767 +
              C139588 * C2376) *
                 C3607 +
             (C92849 * C245 + C92451 * C719 + C92850 * C1965 +
              C139588 * C2591) *
                 C139561 -
             (C92850 * C1768 + C139588 * C2379 + C92849 * C1767 +
              C92451 * C2376) *
                 C3608 -
             (C92850 * C1966 + C139588 * C2592 + C92849 * C1965 +
              C92451 * C2591) *
                 C139403) *
                C47029 +
            ((C92877 + C92876) * C3607 + (C93050 + C93051) * C139561 -
             (C94785 + C94784) * C3608 - (C95008 + C95009) * C139403) *
                C139575) *
               C139442 * C139560 +
           (((C92849 * C4223 + C92451 * C4899 + C92850 * C6442 +
              C139588 * C6922) *
                 C3608 -
             ((C92850 * C4443 + C139588 * C5133 + C92849 * C1029 +
               C92451 * C1661) *
                  C139561 +
              (C92850 * C4223 + C139588 * C4899 + C92849 * C831 +
               C92451 * C1440) *
                  C3607) +
             (C92849 * C4443 + C92451 * C5133 + C92850 * C6608 +
              C139588 * C7077) *
                 C139403) *
                C47029 +
            ((C97767 + C97766) * C3608 -
             ((C93982 + C93983) * C139561 + (C93759 + C93758) * C3607) +
             (C98040 + C98041) * C139403) *
                C139575) *
               C139442 * C139377) *
              C821 +
          ((((C94784 + C94785) * C3608 -
             ((C93051 + C93050) * C139561 + (C92876 + C92877) * C3607) +
             (C95009 + C95008) * C139403) *
                C47029 +
            ((C96637 + C96636) * C3608 -
             ((C93052 + C93053) * C139561 + (C92881 + C92880) * C3607) +
             (C96846 + C96847) * C139403) *
                C139575) *
               C139442 * C139560 +
           (((C93758 + C93759) * C3607 + (C93983 + C93982) * C139561 -
             (C97766 + C97767) * C3608 - (C98041 + C98040) * C139403) *
                C47029 +
            ((C95707 + C95706) * C3607 + (C95916 + C95917) * C139561 -
             (C92850 * C6440 + C139588 * C6920 + C92849 * C4225 +
              C92451 * C4901) *
                 C3608 -
             (C92850 * C6606 + C139588 * C7079 + C92849 * C4445 +
              C92451 * C5135) *
                 C139403) *
                C139575) *
               C139442 * C139377) *
              C139305)) /
        (p * q * std::sqrt(p + q));
    d2eexx[92] +=
        (-std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139575 * C114) *
                C826 +
            (C47033 * C116 + C47029 * C125 + C47034 * C117 + C139575 * C126) *
                C821 -
            (C47034 * C109 + C139575 * C115 + C47033 * C108 + C47029 * C114) *
                C827 -
            (C47034 * C118 + C139575 * C127 + C47033 * C117 + C47029 * C126) *
                C139305) *
               C139442 * C92451 +
           ((C47033 * C1767 + C47029 * C1778 + C47034 * C1764 +
             C139575 * C1772) *
                C826 +
            (C47033 * C1777 + C47029 * C1790 + C47034 * C1776 +
             C139575 * C1789) *
                C821 -
            (C47034 * C1765 + C139575 * C1773 + C47033 * C1764 +
             C47029 * C1772) *
                C827 -
            (C47034 * C1775 + C139575 * C1788 + C47033 * C1776 +
             C47029 * C1789) *
                C139305) *
               C139442 * C139588) *
              C139339 * C823 +
          (((C47773 + C47772) * C827 -
            ((C47771 + C47770) * C821 + (C47769 + C47768) * C826) +
            (C47775 + C47774) * C139305) *
               C139442 * C92451 +
           ((C51576 + C51577) * C827 -
            ((C51578 + C51579) * C821 + (C51580 + C51581) * C826) +
            (C51582 + C51583) * C139305) *
               C139442 * C139588) *
              C139339 * C824 +
          (((C47781 + C47780) * C826 + (C47779 + C47778) * C821 -
            (C47777 + C47776) * C827 - (C47783 + C47782) * C139305) *
               C139442 * C92451 +
           ((C57236 + C57237) * C826 + (C57238 + C57239) * C821 -
            (C47034 * C8752 + C139575 * C8758 + C47033 * C8753 +
             C47029 * C8759) *
                C827 -
            (C47034 * C8755 + C139575 * C8761 + C47033 * C8756 +
             C47029 * C8762) *
                C139305) *
               C139442 * C139588) *
              C139339 * C825)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139575 * C114) *
               C103 +
           (C47033 * C116 + C47029 * C125 + C47034 * C117 + C139575 * C126) *
               C92 -
           (C47034 * C109 + C139575 * C115 + C47033 * C108 + C47029 * C114) *
               C104 -
           (C47034 * C118 + C139575 * C127 + C47033 * C117 + C47029 * C126) *
               C93 +
           (C47033 * C109 + C47029 * C115 + C47034 * C110 + C139575 * C119) *
               C105 +
           (C47033 * C118 + C47029 * C127 + C47034 * C120 + C139575 * C128) *
               C94 -
           (C47034 * C111 + C139575 * C121 + C47033 * C110 + C47029 * C119) *
               C106 -
           (C47034 * C122 + C139575 * C129 + C47033 * C120 + C47029 * C128) *
               C95) *
              C139442 * C92451 +
          ((C47033 * C1767 + C47029 * C1778 + C47034 * C1764 +
            C139575 * C1772) *
               C103 +
           (C47033 * C1777 + C47029 * C1790 + C47034 * C1776 +
            C139575 * C1789) *
               C92 -
           (C47034 * C1765 + C139575 * C1773 + C47033 * C1764 +
            C47029 * C1772) *
               C104 -
           (C47034 * C1775 + C139575 * C1788 + C47033 * C1776 +
            C47029 * C1789) *
               C93 +
           (C47033 * C1765 + C47029 * C1773 + C47034 * C1766 +
            C139575 * C1774) *
               C105 +
           (C47033 * C1775 + C47029 * C1788 + C47034 * C1779 +
            C139575 * C1791) *
               C94 -
           (C47034 * C3453 + C139575 * C3454 + C47033 * C1766 +
            C47029 * C1774) *
               C106 -
           (C47034 * C3455 + C139575 * C3456 + C47033 * C1779 +
            C47029 * C1791) *
               C95) *
              C139442 * C139588) *
         C139339 * C139328) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139575 * C114) *
                C826 +
            (C47033 * C116 + C47029 * C125 + C47034 * C117 + C139575 * C126) *
                C821 -
            (C47034 * C109 + C139575 * C115 + C47033 * C108 + C47029 * C114) *
                C827 -
            (C47034 * C118 + C139575 * C127 + C47033 * C117 + C47029 * C126) *
                C139305) *
               C139442 * C92451 +
           ((C94116 + C94117) * C826 + (C94118 + C94119) * C821 -
            (C94120 + C94121) * C827 - (C94122 + C94123) * C139305) *
               C139442 * C139588) *
              C1761 +
          (((C94121 + C94120) * C827 -
            ((C94119 + C94118) * C821 + (C94117 + C94116) * C826) +
            (C94123 + C94122) * C139305) *
               C139442 * C92451 +
           ((C94124 + C94125) * C827 -
            ((C94126 + C94127) * C821 + (C94128 + C94129) * C826) +
            (C94130 + C94131) * C139305) *
               C139442 * C139588) *
              C1762 +
          (((C94129 + C94128) * C826 + (C94127 + C94126) * C821 -
            (C94125 + C94124) * C827 - (C94131 + C94130) * C139305) *
               C139442 * C92451 +
           ((C47033 * C10815 + C47029 * C10821 + C47034 * C10814 +
             C139575 * C10820) *
                C826 +
            (C47033 * C10818 + C47029 * C10824 + C47034 * C10817 +
             C139575 * C10823) *
                C821 -
            (C47034 * C10813 + C139575 * C10819 + C47033 * C10814 +
             C47029 * C10820) *
                C827 -
            (C47034 * C10816 + C139575 * C10822 + C47033 * C10817 +
             C47029 * C10823) *
                C139305) *
               C139442 * C139588) *
              C1763) *
         C139328) /
            (p * q * std::sqrt(p + q));
    d2eexy[92] +=
        (-std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139575 * C114) *
                C934 +
            (C47033 * C182 + C47029 * C188 + C47034 * C183 + C139575 * C189) *
                C823 -
            (C47769 + C47768) * C935 - (C47898 + C47899) * C824 +
            (C47781 + C47780) * C936 + (C47900 + C47901) * C825) *
               C139442 * C92451 +
           ((C47033 * C1767 + C47029 * C1778 + C47034 * C1764 +
             C139575 * C1772) *
                C934 +
            (C47033 * C1873 + C47029 * C1881 + C47034 * C1870 +
             C139575 * C1878) *
                C823 -
            (C51580 + C51581) * C935 - (C51723 + C51722) * C824 +
            (C57236 + C57237) * C936 + (C57343 + C57342) * C825) *
               C139442 * C139588) *
              C821 +
          (((C47773 + C47772) * C935 -
            ((C47034 * C184 + C139575 * C190 + C47033 * C183 + C47029 * C189) *
                 C823 +
             (C47034 * C109 + C139575 * C115 + C47033 * C108 + C47029 * C114) *
                 C934) +
            (C47902 + C47903) * C824 - (C47777 + C47776) * C936 -
            (C47904 + C47905) * C825) *
               C139442 * C92451 +
           ((C51576 + C51577) * C935 -
            ((C47034 * C1871 + C139575 * C1879 + C47033 * C1870 +
              C47029 * C1878) *
                 C823 +
             (C47034 * C1765 + C139575 * C1773 + C47033 * C1764 +
              C47029 * C1772) *
                 C934) +
            (C51725 + C51724) * C824 -
            (C47034 * C8752 + C139575 * C8758 + C47033 * C8753 +
             C47029 * C8759) *
                C936 -
            (C47034 * C8838 + C139575 * C8841 + C47033 * C8839 +
             C47029 * C8842) *
                C825) *
               C139442 * C139588) *
              C139305) *
         C139339) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139575 * C114) *
                C181 +
            (C47033 * C182 + C47029 * C188 + C47034 * C183 + C139575 * C189) *
                C139328) *
               C139442 * C92451 +
           ((C47033 * C1767 + C47029 * C1778 + C47034 * C1764 +
             C139575 * C1772) *
                C181 +
            (C47033 * C1873 + C47029 * C1881 + C47034 * C1870 +
             C139575 * C1878) *
                C139328) *
               C139442 * C139588) *
              C92 -
          (((C47034 * C1871 + C139575 * C1879 + C47033 * C1870 +
             C47029 * C1878) *
                C139328 +
            (C47034 * C1765 + C139575 * C1773 + C47033 * C1764 +
             C47029 * C1772) *
                C181) *
               C139442 * C139588 +
           ((C47034 * C184 + C139575 * C190 + C47033 * C183 + C47029 * C189) *
                C139328 +
            (C47034 * C109 + C139575 * C115 + C47033 * C108 + C47029 * C114) *
                C181) *
               C139442 * C92451) *
              C93 +
          (((C47033 * C109 + C47029 * C115 + C47034 * C110 + C139575 * C119) *
                C181 +
            (C47033 * C184 + C47029 * C190 + C47034 * C185 + C139575 * C191) *
                C139328) *
               C139442 * C92451 +
           ((C47033 * C1765 + C47029 * C1773 + C47034 * C1766 +
             C139575 * C1774) *
                C181 +
            (C47033 * C1871 + C47029 * C1879 + C47034 * C1872 +
             C139575 * C1880) *
                C139328) *
               C139442 * C139588) *
              C94 -
          (((C47034 * C3531 + C139575 * C3532 + C47033 * C1872 +
             C47029 * C1880) *
                C139328 +
            (C47034 * C3453 + C139575 * C3454 + C47033 * C1766 +
             C47029 * C1774) *
                C181) *
               C139442 * C139588 +
           ((C47034 * C186 + C139575 * C192 + C47033 * C185 + C47029 * C191) *
                C139328 +
            (C47034 * C111 + C139575 * C121 + C47033 * C110 + C47029 * C119) *
                C181) *
               C139442 * C92451) *
              C95) *
         C139339) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139575 * C114) *
                 C181 +
             (C47033 * C182 + C47029 * C188 + C47034 * C183 + C139575 * C189) *
                 C139328) *
                C139442 * C92451 +
            ((C94116 + C94117) * C181 + (C94246 + C94247) * C139328) * C139442 *
                C139588) *
               C821 -
           (((C94248 + C94249) * C139328 + (C94120 + C94121) * C181) * C139442 *
                C139588 +
            ((C47034 * C184 + C139575 * C190 + C47033 * C183 + C47029 * C189) *
                 C139328 +
             (C47034 * C109 + C139575 * C115 + C47033 * C108 + C47029 * C114) *
                 C181) *
                C139442 * C92451) *
               C139305) *
              C1761 +
          ((((C94121 + C94120) * C181 + (C94249 + C94248) * C139328) * C139442 *
                C92451 +
            ((C94124 + C94125) * C181 + (C94250 + C94251) * C139328) * C139442 *
                C139588) *
               C139305 -
           (((C94252 + C94253) * C139328 + (C94128 + C94129) * C181) * C139442 *
                C139588 +
            ((C94247 + C94246) * C139328 + (C94117 + C94116) * C181) * C139442 *
                C92451) *
               C821) *
              C1762 +
          ((((C94129 + C94128) * C181 + (C94253 + C94252) * C139328) * C139442 *
                C92451 +
            ((C47033 * C10815 + C47029 * C10821 + C47034 * C10814 +
              C139575 * C10820) *
                 C181 +
             (C47033 * C10877 + C47029 * C10880 + C47034 * C10876 +
              C139575 * C10879) *
                 C139328) *
                C139442 * C139588) *
               C821 -
           (((C47034 * C10875 + C139575 * C10878 + C47033 * C10876 +
              C47029 * C10879) *
                 C139328 +
             (C47034 * C10813 + C139575 * C10819 + C47033 * C10814 +
              C47029 * C10820) *
                 C181) *
                C139442 * C139588 +
            ((C94251 + C94250) * C139328 + (C94125 + C94124) * C181) * C139442 *
                C92451) *
               C139305) *
              C1763)) /
            (p * q * std::sqrt(p + q));
    d2eexz[92] +=
        (-std::pow(Pi, 2.5) *
         (((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139575 * C114) *
                 C244 +
             (C47033 * C245 + C47029 * C251 + C47034 * C246 + C139575 * C252) *
                 C139339) *
                C139442 * C92451 +
            ((C47033 * C1767 + C47029 * C1778 + C47034 * C1764 +
              C139575 * C1772) *
                 C244 +
             (C47033 * C1965 + C47029 * C1973 + C47034 * C1964 +
              C139575 * C1972) *
                 C139339) *
                C139442 * C139588) *
               C823 -
           (((C51864 + C51865) * C139339 + (C51580 + C51581) * C244) * C139442 *
                C139588 +
            ((C48021 + C48020) * C139339 + (C47769 + C47768) * C244) * C139442 *
                C92451) *
               C824 +
           (((C47781 + C47780) * C244 + (C48023 + C48022) * C139339) * C139442 *
                C92451 +
            ((C57236 + C57237) * C244 + (C57446 + C57447) * C139339) * C139442 *
                C139588) *
               C825) *
              C821 +
          ((((C47773 + C47772) * C244 + (C48024 + C48025) * C139339) * C139442 *
                C92451 +
            ((C51576 + C51577) * C244 + (C51866 + C51867) * C139339) * C139442 *
                C139588) *
               C824 -
           (((C47034 * C1963 + C139575 * C1971 + C47033 * C1964 +
              C47029 * C1972) *
                 C139339 +
             (C47034 * C1765 + C139575 * C1773 + C47033 * C1764 +
              C47029 * C1772) *
                 C244) *
                C139442 * C139588 +
            ((C47034 * C247 + C139575 * C253 + C47033 * C246 + C47029 * C252) *
                 C139339 +
             (C47034 * C109 + C139575 * C115 + C47033 * C108 + C47029 * C114) *
                 C244) *
                C139442 * C92451) *
               C823 -
           (((C47034 * C8918 + C139575 * C8921 + C47033 * C8919 +
              C47029 * C8922) *
                 C139339 +
             (C47034 * C8752 + C139575 * C8758 + C47033 * C8753 +
              C47029 * C8759) *
                 C244) *
                C139442 * C139588 +
            ((C48027 + C48026) * C139339 + (C47777 + C47776) * C244) * C139442 *
                C92451) *
               C825) *
              C139305)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139575 * C114) *
                C244 +
            (C47033 * C245 + C47029 * C251 + C47034 * C246 + C139575 * C252) *
                C139339) *
               C139442 * C92451 +
           ((C47033 * C1767 + C47029 * C1778 + C47034 * C1764 +
             C139575 * C1772) *
                C244 +
            (C47033 * C1965 + C47029 * C1973 + C47034 * C1964 +
             C139575 * C1972) *
                C139339) *
               C139442 * C139588) *
              C139328 * C92 -
          (((C47034 * C1963 + C139575 * C1971 + C47033 * C1964 +
             C47029 * C1972) *
                C139339 +
            (C47034 * C1765 + C139575 * C1773 + C47033 * C1764 +
             C47029 * C1772) *
                C244) *
               C139442 * C139588 +
           ((C47034 * C247 + C139575 * C253 + C47033 * C246 + C47029 * C252) *
                C139339 +
            (C47034 * C109 + C139575 * C115 + C47033 * C108 + C47029 * C114) *
                C244) *
               C139442 * C92451) *
              C139328 * C93 +
          (((C47033 * C109 + C47029 * C115 + C47034 * C110 + C139575 * C119) *
                C244 +
            (C47033 * C247 + C47029 * C253 + C47034 * C248 + C139575 * C254) *
                C139339) *
               C139442 * C92451 +
           ((C47033 * C1765 + C47029 * C1773 + C47034 * C1766 +
             C139575 * C1774) *
                C244 +
            (C47033 * C1963 + C47029 * C1971 + C47034 * C1969 +
             C139575 * C1977) *
                C139339) *
               C139442 * C139588) *
              C139328 * C94 -
          (((C47034 * C3609 + C139575 * C3610 + C47033 * C1969 +
             C47029 * C1977) *
                C139339 +
            (C47034 * C3453 + C139575 * C3454 + C47033 * C1766 +
             C47029 * C1774) *
                C244) *
               C139442 * C139588 +
           ((C47034 * C249 + C139575 * C255 + C47033 * C248 + C47029 * C254) *
                C139339 +
            (C47034 * C111 + C139575 * C121 + C47033 * C110 + C47029 * C119) *
                C244) *
               C139442 * C92451) *
              C139328 * C95)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139575 * C114) *
                C1960 +
            (C47033 * C245 + C47029 * C251 + C47034 * C246 + C139575 * C252) *
                C1761 -
            (C94117 + C94116) * C1961 - (C94368 + C94369) * C1762 +
            (C94129 + C94128) * C1962 + (C94370 + C94371) * C1763) *
               C139442 * C92451 +
           ((C94116 + C94117) * C1960 + (C94369 + C94368) * C1761 -
            (C94128 + C94129) * C1961 - (C94371 + C94370) * C1762 +
            (C47033 * C10815 + C47029 * C10821 + C47034 * C10814 +
             C139575 * C10820) *
                C1962 +
            (C47033 * C10937 + C47029 * C10940 + C47034 * C10936 +
             C139575 * C10939) *
                C1763) *
               C139442 * C139588) *
              C139328 * C821 +
          (((C94121 + C94120) * C1961 -
            ((C47034 * C247 + C139575 * C253 + C47033 * C246 + C47029 * C252) *
                 C1761 +
             (C47034 * C109 + C139575 * C115 + C47033 * C108 + C47029 * C114) *
                 C1960) +
            (C94372 + C94373) * C1762 - (C94125 + C94124) * C1962 -
            (C94374 + C94375) * C1763) *
               C139442 * C92451 +
           ((C94124 + C94125) * C1961 -
            ((C94373 + C94372) * C1761 + (C94120 + C94121) * C1960) +
            (C94375 + C94374) * C1762 -
            (C47034 * C10813 + C139575 * C10819 + C47033 * C10814 +
             C47029 * C10820) *
                C1962 -
            (C47034 * C10935 + C139575 * C10938 + C47033 * C10936 +
             C47029 * C10939) *
                C1763) *
               C139442 * C139588) *
              C139328 * C139305)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[92] +=
        (-std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139442 * C308) * C826 +
             (C307 * C116 + C139442 * C314) * C821 - C337 * C827 -
             C338 * C139305) *
                C92451 +
            (C32489 + C32490 - C32463 - C32464) * C139588) *
               C47029 +
           ((C337 * C826 + C338 * C821 - C339 * C827 - C340 * C139305) *
                C92451 +
            (C32465 + C32466 - C32467 - C32468) * C139588) *
               C139575) *
              C139339 * C823 +
          (((C1150 * C827 -
             ((C307 * C841 + C139442 * C1125) * C821 +
              (C307 * C831 + C139442 * C1118) * C826) +
             C1151 * C139305) *
                C92451 +
            (C35444 - (C35462 + C35463) + C35449) * C139588) *
               C47029 +
           ((C1152 * C827 - (C1151 * C821 + C1150 * C826) + C1153 * C139305) *
                C92451 +
            (C35450 - (C35451 + C35452) + C35453) * C139588) *
               C139575) *
              C139339 * C824 +
          ((((C307 * C832 + C139442 * C1121) * C826 +
             (C307 * C847 + C139442 * C1129) * C821 - C1154 * C827 -
             C1155 * C139305) *
                C92451 +
            (C41044 * C826 + C41045 * C821 - C31415 * C827 - C31416 * C139305) *
                C139588) *
               C47029 +
           ((C1154 * C826 + C1155 * C821 - C1156 * C827 - C1157 * C139305) *
                C92451 +
            (C31415 * C826 + C31416 * C821 -
             (C307 * C8752 + C139442 * C8998) * C827 -
             (C307 * C8755 + C139442 * C9001) * C139305) *
                C139588) *
               C139575) *
              C139339 * C825)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139442 * C308) * C103 +
            (C307 * C116 + C139442 * C314) * C92 - C337 * C104 - C338 * C93 +
            C339 * C105 + C340 * C94 - C341 * C106 - C342 * C95) *
               C92451 +
           (C32483 * C103 + C32484 * C92 - C2086 * C104 - C2087 * C93 +
            C2088 * C105 + C2089 * C94 - C3692 * C106 - C3693 * C95) *
               C139588) *
              C47029 +
          ((C337 * C103 + C338 * C92 - C339 * C104 - C340 * C93 + C341 * C105 +
            C342 * C94 - C343 * C106 - C344 * C95) *
               C92451 +
           (C2086 * C103 + C2087 * C92 - C2088 * C104 - C2089 * C93 +
            C3692 * C105 + C3693 * C94 -
            (C307 * C3453 + C139442 * C3685) * C106 -
            (C307 * C3455 + C139442 * C3686) * C95) *
               C139588) *
              C139575) *
         C139339 * C139328) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139442 * C308) * C826 +
             (C307 * C116 + C139442 * C314) * C821 - C337 * C827 -
             C338 * C139305) *
                C92451 +
            (C32489 + C32490 - C32463 - C32464) * C139588) *
               C47029 +
           ((C337 * C826 + C338 * C821 - C339 * C827 - C340 * C139305) *
                C92451 +
            (C32465 + C32466 - C32467 - C32468) * C139588) *
               C139575) *
              C1761 +
          (((C32463 - (C32490 + C32489) + C32464) * C92451 +
            (C32469 - (C32491 + C32492) + C32474) * C139588) *
               C47029 +
           ((C32467 - (C32466 + C32465) + C32468) * C92451 +
            (C32475 - (C32476 + C32477) + C32478) * C139588) *
               C139575) *
              C1762 +
          (((C32492 + C32491 - C32469 - C32474) * C92451 +
            (C43654 * C826 + C43655 * C821 - C32487 * C827 - C32488 * C139305) *
                C139588) *
               C47029 +
           ((C32477 + C32476 - C32475 - C32478) * C92451 +
            (C32487 * C826 + C32488 * C821 -
             (C307 * C10813 + C139442 * C10991) * C827 -
             (C307 * C10816 + C139442 * C10994) * C139305) *
                C139588) *
               C139575) *
              C1763) *
         C139328) /
            (p * q * std::sqrt(p + q));
    d2eeyy[92] +=
        (-std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139442 * C308) * C934 +
             (C307 * C182 + C139442 * C394) * C823 -
             (C307 * C831 + C139442 * C1118) * C935 -
             (C307 * C939 + C139442 * C1231) * C824 +
             (C307 * C832 + C139442 * C1121) * C936 +
             (C307 * C940 + C139442 * C1232) * C825) *
                C92451 +
            (C42942 + C42943 - C42944 - C42945 + C42946 + C42947) * C139588) *
               C47029 +
           ((C1240 + C1241 - C1242 - C1260 + C1245 + C1261) * C92451 +
            (C31515 + C31516 - C31517 - C31518 + C31519 + C31523) * C139588) *
               C139575) *
              C821 +
          (((C1242 - (C1241 + C1240) + C1260 - C1245 - C1261) * C92451 +
            (C31517 - (C31516 + C31515) + C31518 - C31519 - C31523) * C139588) *
               C47029 +
           ((C1250 - (C1249 + C1248) + C1262 - C1253 - C1263) * C92451 +
            (C4568 * C935 - (C2189 * C823 + C2088 * C934) + C4683 * C824 -
             (C307 * C8752 + C139442 * C8998) * C936 -
             (C307 * C8838 + C139442 * C9080) * C825) *
                C139588) *
               C139575) *
              C139305) *
         C139339) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139442 * C308) * C181 +
             (C307 * C182 + C139442 * C394) * C139328) *
                C92451 +
            (C32591 + C32607) * C139588) *
               C47029 +
           ((C401 + C417) * C92451 + C32594 * C139588) * C139575) *
              C92 -
          ((C3772 * C139588 + (C418 + C404) * C92451) * C139575 +
           (C32595 * C139588 + (C417 + C401) * C92451) * C47029) *
              C93 +
          ((C421 * C92451 + C34499 * C139588) * C47029 +
           ((C409 + C419) * C92451 + (C3769 + C3775) * C139588) * C139575) *
              C94 -
          ((((C307 * C3531 + C139442 * C3767) * C139328 +
             (C307 * C3453 + C139442 * C3685) * C181) *
                C139588 +
            (C420 + C410) * C92451) *
               C139575 +
           ((C3775 + C3769) * C139588 + C422 * C92451) * C47029) *
              C95) *
         C139339) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((((C307 * C107 + C139442 * C308) * C181 +
              (C307 * C182 + C139442 * C394) * C139328) *
                 C92451 +
             (C32591 + C32607) * C139588) *
                C47029 +
            ((C401 + C417) * C92451 + C32594 * C139588) * C139575) *
               C821 -
           ((C3772 * C139588 + (C418 + C404) * C92451) * C139575 +
            (C32595 * C139588 + (C417 + C401) * C92451) * C47029) *
               C139305) *
              C1761 +
          (((C32594 * C92451 + C32596 * C139588) * C47029 +
            (C34499 * C92451 + (C2185 + C2195) * C139588) * C139575) *
               C139305 -
           ((C32597 * C139588 + C32595 * C92451) * C139575 +
            ((C32608 + C32600) * C139588 + (C32607 + C32591) * C92451) *
                C47029) *
               C821) *
              C1762 +
          ((((C32600 + C32608) * C92451 + (C43726 + C43730) * C139588) *
                C47029 +
            (C32596 * C92451 + (C32601 + C32609) * C139588) * C139575) *
               C821 -
           ((((C307 * C10875 + C139442 * C11047) * C139328 +
              (C307 * C10813 + C139442 * C10991) * C181) *
                 C139588 +
             (C2195 + C2185) * C92451) *
                C139575 +
            ((C32609 + C32601) * C139588 + C32597 * C92451) * C47029) *
               C139305) *
              C1763)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[92] +=
        (-std::pow(Pi, 2.5) *
         ((((((C307 * C107 + C139442 * C308) * C244 +
              (C307 * C245 + C139442 * C474) * C139339) *
                 C92451 +
             (C32483 * C244 + C32719 * C139339) * C139588) *
                C47029 +
            ((C481 + C497) * C92451 + (C30741 + C30742) * C139588) * C139575) *
               C823 -
           (((C31622 + C31623) * C139588 + (C1363 + C1351) * C92451) * C139575 +
            ((C35751 * C139339 + C35459 * C244) * C139588 +
             ((C307 * C1029 + C139442 * C1339) * C139339 +
              (C307 * C831 + C139442 * C1118) * C244) *
                 C92451) *
                C47029) *
               C824 +
           ((((C307 * C832 + C139442 * C1121) * C244 +
              (C307 * C1030 + C139442 * C1340) * C139339) *
                 C92451 +
             (C41044 * C244 + C41255 * C139339) * C139588) *
                C47029 +
            ((C1352 + C1364) * C92451 + (C31624 + C31628) * C139588) *
                C139575) *
               C825) *
              C821 +
          ((((C1351 + C1363) * C92451 + (C31623 + C31622) * C139588) * C47029 +
            ((C1348 + C1362) * C92451 + (C33653 + C33654) * C139588) *
                C139575) *
               C824 -
           (((C30743 + C30744) * C139588 + (C498 + C484) * C92451) * C139575 +
            ((C30742 + C30741) * C139588 + (C497 + C481) * C92451) * C47029) *
               C823 -
           ((((C307 * C8918 + C139442 * C9157) * C139339 +
              (C307 * C8752 + C139442 * C8998) * C244) *
                 C139588 +
             (C1365 + C1355) * C92451) *
                C139575 +
            ((C31628 + C31624) * C139588 + (C1364 + C1352) * C92451) * C47029) *
               C825) *
              C139305)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139442 * C308) * C244 +
             (C307 * C245 + C139442 * C474) * C139339) *
                C92451 +
            (C32483 * C244 + C32719 * C139339) * C139588) *
               C47029 +
           ((C481 + C497) * C92451 + (C30741 + C30742) * C139588) * C139575) *
              C139328 * C92 -
          (((C30743 + C30744) * C139588 + (C498 + C484) * C92451) * C139575 +
           ((C30742 + C30741) * C139588 + (C497 + C481) * C92451) * C47029) *
              C139328 * C93 +
          ((C501 * C92451 + (C30744 + C30743) * C139588) * C47029 +
           ((C489 + C499) * C92451 + (C30745 + C30746) * C139588) * C139575) *
              C139328 * C94 -
          ((((C307 * C3609 + C139442 * C3849) * C139339 +
             (C307 * C3453 + C139442 * C3685) * C244) *
                C139588 +
            (C500 + C490) * C92451) *
               C139575 +
           ((C30746 + C30745) * C139588 + C502 * C92451) * C47029) *
              C139328 * C95)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139442 * C308) * C1960 +
             (C307 * C245 + C139442 * C474) * C1761 - C32483 * C1961 -
             C32719 * C1762 + C32486 * C1962 + C32720 * C1763) *
                C92451 +
            (C32483 * C1960 + C32719 * C1761 - C32486 * C1961 - C32720 * C1762 +
             C43654 * C1962 + C43801 * C1763) *
                C139588) *
               C47029 +
           ((C2278 + C2279 - C2280 - C2298 + C2283 + C2299) * C92451 +
            (C32712 + C32713 - C32714 - C32715 + C32716 + C32722) * C139588) *
               C139575) *
              C139328 * C821 +
          (((C2280 - (C2279 + C2278) + C2298 - C2283 - C2299) * C92451 +
            (C32714 - (C32713 + C32712) + C32715 - C32716 - C32722) * C139588) *
               C47029 +
           ((C2288 - (C2287 + C2286) + C2300 - C2291 - C2301) * C92451 +
            (C2092 * C1961 - (C2296 * C1761 + C2088 * C1960) + C2297 * C1762 -
             (C307 * C10813 + C139442 * C10991) * C1962 -
             (C307 * C10935 + C139442 * C11102) * C1763) *
                C139588) *
               C139575) *
              C139328 * C139305)) /
            (p * q * std::sqrt(p + q));
    d2eezx[92] +=
        (-std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1767 + C139588 * C2376) *
                C826 +
            (C92849 * C116 + C92451 * C561 + C92850 * C1777 + C139588 * C2383) *
                C821 -
            (C92876 + C92877) * C827 - (C92878 + C92879) * C139305) *
               C47029 +
           ((C92877 + C92876) * C826 + (C92879 + C92878) * C821 -
            (C92881 + C92880) * C827 - (C92883 + C92882) * C139305) *
               C139575) *
              C139442 * C139339 * C823 +
          (((C93758 + C93759) * C827 -
            ((C92850 * C4230 + C139588 * C4903 + C92849 * C841 +
              C92451 * C1447) *
                 C821 +
             (C92850 * C4223 + C139588 * C4899 + C92849 * C831 +
              C92451 * C1440) *
                 C826) +
            (C93760 + C93761) * C139305) *
               C47029 +
           ((C92849 * C829 + C92451 * C1441 + C92850 * C4225 +
             C139588 * C4901) *
                C827 -
            ((C93761 + C93760) * C821 + (C93759 + C93758) * C826) +
            (C92849 * C839 + C92451 * C1449 + C92850 * C4232 +
             C139588 * C4905) *
                C139305) *
               C139575) *
              C139442 * C139339 * C824 +
          (((C92849 * C832 + C92451 * C1443 + C92850 * C8754 +
             C139588 * C9234) *
                C826 +
            (C92849 * C847 + C92451 * C1451 + C92850 * C8757 +
             C139588 * C9237) *
                C821 -
            (C93762 + C93763) * C827 - (C93764 + C93765) * C139305) *
               C47029 +
           ((C93763 + C93762) * C826 + (C93765 + C93764) * C821 -
            (C92850 * C8752 + C139588 * C9232 + C92849 * C834 +
             C92451 * C1445) *
                C827 -
            (C92850 * C8755 + C139588 * C9235 + C92849 * C849 +
             C92451 * C1453) *
                C139305) *
               C139575) *
              C139442 * C139339 * C825)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C92849 * C107 + C92451 * C555 + C92850 * C1767 + C139588 * C2376) *
               C103 +
           (C92849 * C116 + C92451 * C561 + C92850 * C1777 + C139588 * C2383) *
               C92 -
           (C92876 + C92877) * C104 - (C92878 + C92879) * C93 +
           (C92880 + C92881) * C105 + (C92882 + C92883) * C94 -
           (C92884 + C92885) * C106 - (C92886 + C92887) * C95) *
              C47029 +
          ((C92877 + C92876) * C103 + (C92879 + C92878) * C92 -
           (C92881 + C92880) * C104 - (C92883 + C92882) * C93 +
           (C92885 + C92884) * C105 + (C92887 + C92886) * C94 -
           (C92850 * C3453 + C139588 * C3943 + C92849 * C111 + C92451 * C559) *
               C106 -
           (C92850 * C3455 + C139588 * C3944 + C92849 * C122 + C92451 * C565) *
               C95) *
              C139575) *
         C139442 * C139339 * C139328) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1767 + C139588 * C2376) *
                C826 +
            (C92849 * C116 + C92451 * C561 + C92850 * C1777 + C139588 * C2383) *
                C821 -
            (C92876 + C92877) * C827 - (C92878 + C92879) * C139305) *
               C47029 +
           ((C92877 + C92876) * C826 + (C92879 + C92878) * C821 -
            (C92881 + C92880) * C827 - (C92883 + C92882) * C139305) *
               C139575) *
              C139442 * C1761 +
          (((C94784 + C94785) * C827 -
            ((C92850 * C1783 + C139588 * C2387 + C92849 * C1777 +
              C92451 * C2383) *
                 C821 +
             (C92850 * C1768 + C139588 * C2379 + C92849 * C1767 +
              C92451 * C2376) *
                 C826) +
            (C94786 + C94787) * C139305) *
               C47029 +
           ((C92849 * C1765 + C92451 * C2377 + C92850 * C1770 +
             C139588 * C2381) *
                C827 -
            ((C94787 + C94786) * C821 + (C94785 + C94784) * C826) +
            (C92849 * C1775 + C92451 * C2385 + C92850 * C1785 +
             C139588 * C2389) *
                C139305) *
               C139575) *
              C139442 * C1762 +
          (((C92849 * C1768 + C92451 * C2379 + C92850 * C10815 +
             C139588 * C11155) *
                C826 +
            (C92849 * C1783 + C92451 * C2387 + C92850 * C10818 +
             C139588 * C11158) *
                C821 -
            (C94788 + C94789) * C827 - (C94790 + C94791) * C139305) *
               C47029 +
           ((C94789 + C94788) * C826 + (C94791 + C94790) * C821 -
            (C92850 * C10813 + C139588 * C11153 + C92849 * C1770 +
             C92451 * C2381) *
                C827 -
            (C92850 * C10816 + C139588 * C11156 + C92849 * C1785 +
             C92451 * C2389) *
                C139305) *
               C139575) *
              C139442 * C1763) *
         C139328) /
            (p * q * std::sqrt(p + q));
    d2eezy[92] +=
        (-std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1767 + C139588 * C2376) *
                C934 +
            (C92849 * C182 + C92451 * C641 + C92850 * C1873 + C139588 * C2492) *
                C823 -
            (C92850 * C4223 + C139588 * C4899 + C92849 * C831 +
             C92451 * C1440) *
                C935 -
            (C92850 * C4337 + C139588 * C5017 + C92849 * C939 +
             C92451 * C1553) *
                C824 +
            (C92849 * C832 + C92451 * C1443 + C92850 * C8754 +
             C139588 * C9234) *
                C936 +
            (C92849 * C940 + C92451 * C1554 + C92850 * C8840 +
             C139588 * C9312) *
                C825) *
               C47029 +
           ((C92877 + C92876) * C934 + (C92966 + C92967) * C823 -
            (C93759 + C93758) * C935 - (C93872 + C93873) * C824 +
            (C93763 + C93762) * C936 + (C93874 + C93875) * C825) *
               C139575) *
              C139442 * C821 +
          (((C93758 + C93759) * C935 -
            ((C92967 + C92966) * C823 + (C92876 + C92877) * C934) +
            (C93873 + C93872) * C824 - (C93762 + C93763) * C936 -
            (C93875 + C93874) * C825) *
               C47029 +
           ((C92849 * C829 + C92451 * C1441 + C92850 * C4225 +
             C139588 * C4901) *
                C935 -
            ((C92968 + C92969) * C823 + (C92881 + C92880) * C934) +
            (C92849 * C937 + C92451 * C1557 + C92850 * C4339 +
             C139588 * C5019) *
                C824 -
            (C92850 * C8752 + C139588 * C9232 + C92849 * C834 +
             C92451 * C1445) *
                C936 -
            (C92850 * C8838 + C139588 * C9314 + C92849 * C942 +
             C92451 * C1558) *
                C825) *
               C139575) *
              C139442 * C139305) *
         C139339) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1767 + C139588 * C2376) *
                C181 +
            (C92849 * C182 + C92451 * C641 + C92850 * C1873 + C139588 * C2492) *
                C139328) *
               C47029 +
           ((C92877 + C92876) * C181 + (C92966 + C92967) * C139328) * C139575) *
              C139442 * C92 -
          (((C92968 + C92969) * C139328 + (C92881 + C92880) * C181) * C139575 +
           ((C92967 + C92966) * C139328 + (C92876 + C92877) * C181) * C47029) *
              C139442 * C93 +
          (((C92880 + C92881) * C181 + (C92969 + C92968) * C139328) * C47029 +
           ((C92885 + C92884) * C181 + (C92970 + C92971) * C139328) * C139575) *
              C139442 * C94 -
          (((C92850 * C3531 + C139588 * C4025 + C92849 * C186 + C92451 * C645) *
                C139328 +
            (C92850 * C3453 + C139588 * C3943 + C92849 * C111 + C92451 * C559) *
                C181) *
               C139575 +
           ((C92971 + C92970) * C139328 + (C92884 + C92885) * C181) * C47029) *
              C139442 * C95) *
         C139339) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C92849 * C107 + C92451 * C555 + C92850 * C1767 +
              C139588 * C2376) *
                 C181 +
             (C92849 * C182 + C92451 * C641 + C92850 * C1873 +
              C139588 * C2492) *
                 C139328) *
                C47029 +
            ((C92877 + C92876) * C181 + (C92966 + C92967) * C139328) *
                C139575) *
               C139442 * C821 -
           (((C92968 + C92969) * C139328 + (C92881 + C92880) * C181) * C139575 +
            ((C92967 + C92966) * C139328 + (C92876 + C92877) * C181) * C47029) *
               C139442 * C139305) *
              C1761 +
          ((((C94784 + C94785) * C181 + (C94898 + C94899) * C139328) * C47029 +
            ((C92849 * C1765 + C92451 * C2377 + C92850 * C1770 +
              C139588 * C2381) *
                 C181 +
             (C92849 * C1871 + C92451 * C2490 + C92850 * C1876 +
              C139588 * C2495) *
                 C139328) *
                C139575) *
               C139442 * C139305 -
           (((C94899 + C94898) * C139328 + (C94785 + C94784) * C181) * C139575 +
            ((C92850 * C1874 + C139588 * C2493 + C92849 * C1873 +
              C92451 * C2492) *
                 C139328 +
             (C92850 * C1768 + C139588 * C2379 + C92849 * C1767 +
              C92451 * C2376) *
                 C181) *
                C47029) *
               C139442 * C821) *
              C1762 +
          ((((C92849 * C1768 + C92451 * C2379 + C92850 * C10815 +
              C139588 * C11155) *
                 C181 +
             (C92849 * C1874 + C92451 * C2493 + C92850 * C10877 +
              C139588 * C11211) *
                 C139328) *
                C47029 +
            ((C94789 + C94788) * C181 + (C94900 + C94901) * C139328) *
                C139575) *
               C139442 * C821 -
           (((C92850 * C10875 + C139588 * C11209 + C92849 * C1876 +
              C92451 * C2495) *
                 C139328 +
             (C92850 * C10813 + C139588 * C11153 + C92849 * C1770 +
              C92451 * C2381) *
                 C181) *
                C139575 +
            ((C94901 + C94900) * C139328 + (C94788 + C94789) * C181) * C47029) *
               C139442 * C139305) *
              C1763)) /
            (p * q * std::sqrt(p + q));
    d2eezz[92] +=
        (-std::pow(Pi, 2.5) *
         (((((C92849 * C107 + C92451 * C555 + C92850 * C1767 +
              C139588 * C2376) *
                 C244 +
             (C92849 * C245 + C92451 * C719 + C92850 * C1965 +
              C139588 * C2591) *
                 C139339) *
                C47029 +
            ((C92877 + C92876) * C244 + (C93050 + C93051) * C139339) *
                C139575) *
               C139442 * C823 -
           (((C93982 + C93983) * C139339 + (C93759 + C93758) * C244) * C139575 +
            ((C92850 * C4443 + C139588 * C5133 + C92849 * C1029 +
              C92451 * C1661) *
                 C139339 +
             (C92850 * C4223 + C139588 * C4899 + C92849 * C831 +
              C92451 * C1440) *
                 C244) *
                C47029) *
               C139442 * C824 +
           (((C92849 * C832 + C92451 * C1443 + C92850 * C8754 +
              C139588 * C9234) *
                 C244 +
             (C92849 * C1030 + C92451 * C1662 + C92850 * C8920 +
              C139588 * C9389) *
                 C139339) *
                C47029 +
            ((C93763 + C93762) * C244 + (C93984 + C93985) * C139339) *
                C139575) *
               C139442 * C825) *
              C821 +
          ((((C93758 + C93759) * C244 + (C93983 + C93982) * C139339) * C47029 +
            ((C92849 * C829 + C92451 * C1441 + C92850 * C4225 +
              C139588 * C4901) *
                 C244 +
             (C92849 * C1027 + C92451 * C1659 + C92850 * C4445 +
              C139588 * C5135) *
                 C139339) *
                C139575) *
               C139442 * C824 -
           (((C93052 + C93053) * C139339 + (C92881 + C92880) * C244) * C139575 +
            ((C93051 + C93050) * C139339 + (C92876 + C92877) * C244) * C47029) *
               C139442 * C823 -
           (((C92850 * C8918 + C139588 * C9391 + C92849 * C1032 +
              C92451 * C1664) *
                 C139339 +
             (C92850 * C8752 + C139588 * C9232 + C92849 * C834 +
              C92451 * C1445) *
                 C244) *
                C139575 +
            ((C93985 + C93984) * C139339 + (C93762 + C93763) * C244) * C47029) *
               C139442 * C825) *
              C139305)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1767 + C139588 * C2376) *
                C244 +
            (C92849 * C245 + C92451 * C719 + C92850 * C1965 + C139588 * C2591) *
                C139339) *
               C47029 +
           ((C92877 + C92876) * C244 + (C93050 + C93051) * C139339) * C139575) *
              C139442 * C139328 * C92 -
          (((C93052 + C93053) * C139339 + (C92881 + C92880) * C244) * C139575 +
           ((C93051 + C93050) * C139339 + (C92876 + C92877) * C244) * C47029) *
              C139442 * C139328 * C93 +
          (((C92880 + C92881) * C244 + (C93053 + C93052) * C139339) * C47029 +
           ((C92885 + C92884) * C244 + (C93054 + C93055) * C139339) * C139575) *
              C139442 * C139328 * C94 -
          (((C92850 * C3609 + C139588 * C4106 + C92849 * C249 + C92451 * C723) *
                C139339 +
            (C92850 * C3453 + C139588 * C3943 + C92849 * C111 + C92451 * C559) *
                C244) *
               C139575 +
           ((C93055 + C93054) * C139339 + (C92884 + C92885) * C244) * C47029) *
              C139442 * C139328 * C95)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1767 + C139588 * C2376) *
                C1960 +
            (C92849 * C245 + C92451 * C719 + C92850 * C1965 + C139588 * C2591) *
                C1761 -
            (C92850 * C1768 + C139588 * C2379 + C92849 * C1767 +
             C92451 * C2376) *
                C1961 -
            (C92850 * C1966 + C139588 * C2592 + C92849 * C1965 +
             C92451 * C2591) *
                C1762 +
            (C92849 * C1768 + C92451 * C2379 + C92850 * C10815 +
             C139588 * C11155) *
                C1962 +
            (C92849 * C1966 + C92451 * C2592 + C92850 * C10937 +
             C139588 * C11262) *
                C1763) *
               C47029 +
           ((C92877 + C92876) * C1960 + (C93050 + C93051) * C1761 -
            (C94785 + C94784) * C1961 - (C95008 + C95009) * C1762 +
            (C94789 + C94788) * C1962 + (C95010 + C95011) * C1763) *
               C139575) *
              C139442 * C139328 * C821 +
          (((C94784 + C94785) * C1961 -
            ((C93051 + C93050) * C1761 + (C92876 + C92877) * C1960) +
            (C95009 + C95008) * C1762 - (C94788 + C94789) * C1962 -
            (C95011 + C95010) * C1763) *
               C47029 +
           ((C92849 * C1765 + C92451 * C2377 + C92850 * C1770 +
             C139588 * C2381) *
                C1961 -
            ((C93052 + C93053) * C1761 + (C92881 + C92880) * C1960) +
            (C92849 * C1963 + C92451 * C2595 + C92850 * C1968 +
             C139588 * C2596) *
                C1762 -
            (C92850 * C10813 + C139588 * C11153 + C92849 * C1770 +
             C92451 * C2381) *
                C1962 -
            (C92850 * C10935 + C139588 * C11264 + C92849 * C1968 +
             C92451 * C2596) *
                C1763) *
               C139575) *
              C139442 * C139328 * C139305)) /
            (p * q * std::sqrt(p + q));
    d2eexx[93] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139575 * C114) *
                C2702 +
            (C47033 * C116 + C47029 * C125 + C47034 * C117 + C139575 * C126) *
                C139589 -
            (C47034 * C109 + C139575 * C115 + C47033 * C108 + C47029 * C114) *
                C2703 -
            (C47034 * C118 + C139575 * C127 + C47033 * C117 + C47029 * C126) *
                C139590 +
            (C47033 * C109 + C47029 * C115 + C47034 * C110 + C139575 * C119) *
                C2704 +
            (C47033 * C118 + C47029 * C127 + C47034 * C120 + C139575 * C128) *
                C2699) *
               C139442 * C92451 +
           ((C94116 + C94117) * C2702 + (C94118 + C94119) * C139589 -
            (C94120 + C94121) * C2703 - (C94122 + C94123) * C139590 +
            (C96024 + C96025) * C2704 + (C96026 + C96027) * C2699) *
               C139442 * C139588) *
              C139561 +
          (((C94121 + C94120) * C2703 -
            ((C94119 + C94118) * C139589 + (C94117 + C94116) * C2702) +
            (C94123 + C94122) * C139590 - (C96025 + C96024) * C2704 -
            (C96027 + C96026) * C2699) *
               C139442 * C92451 +
           ((C94124 + C94125) * C2703 -
            ((C94126 + C94127) * C139589 + (C94128 + C94129) * C2702) +
            (C94130 + C94131) * C139590 -
            (C47034 * C1771 + C139575 * C1786 + C47033 * C1770 +
             C47029 * C1782) *
                C2704 -
            (C47034 * C1787 + C139575 * C1795 + C47033 * C1785 +
             C47029 * C1794) *
                C2699) *
               C139442 * C139588) *
              C139403) *
         C139328) /
        (p * q * std::sqrt(p + q));
    d2eexy[93] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139575 * C114) *
                 C181 +
             (C47033 * C182 + C47029 * C188 + C47034 * C183 + C139575 * C189) *
                 C139328) *
                C139442 * C92451 +
            ((C94116 + C94117) * C181 + (C94246 + C94247) * C139328) * C139442 *
                C139588) *
               C139589 -
           (((C94248 + C94249) * C139328 + (C94120 + C94121) * C181) * C139442 *
                C139588 +
            ((C47034 * C184 + C139575 * C190 + C47033 * C183 + C47029 * C189) *
                 C139328 +
             (C47034 * C109 + C139575 * C115 + C47033 * C108 + C47029 * C114) *
                 C181) *
                C139442 * C92451) *
               C139590 +
           (((C47033 * C109 + C47029 * C115 + C47034 * C110 + C139575 * C119) *
                 C181 +
             (C47033 * C184 + C47029 * C190 + C47034 * C185 + C139575 * C191) *
                 C139328) *
                C139442 * C92451 +
            ((C96024 + C96025) * C181 + (C96130 + C96131) * C139328) * C139442 *
                C139588) *
               C2699) *
              C139561 +
          ((((C94121 + C94120) * C181 + (C94249 + C94248) * C139328) * C139442 *
                C92451 +
            ((C94124 + C94125) * C181 + (C94250 + C94251) * C139328) * C139442 *
                C139588) *
               C139590 -
           (((C94252 + C94253) * C139328 + (C94128 + C94129) * C181) * C139442 *
                C139588 +
            ((C94247 + C94246) * C139328 + (C94117 + C94116) * C181) * C139442 *
                C92451) *
               C139589 -
           (((C47034 * C1877 + C139575 * C1885 + C47033 * C1876 +
              C47029 * C1884) *
                 C139328 +
             (C47034 * C1771 + C139575 * C1786 + C47033 * C1770 +
              C47029 * C1782) *
                 C181) *
                C139442 * C139588 +
            ((C96131 + C96130) * C139328 + (C96025 + C96024) * C181) * C139442 *
                C92451) *
               C2699) *
              C139403)) /
        (p * q * std::sqrt(p + q));
    d2eexz[93] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139575 * C114) *
                C3607 +
            (C47033 * C245 + C47029 * C251 + C47034 * C246 + C139575 * C252) *
                C139561 -
            (C94117 + C94116) * C3608 - (C94368 + C94369) * C139403) *
               C139442 * C92451 +
           ((C94116 + C94117) * C3607 + (C94369 + C94368) * C139561 -
            (C94128 + C94129) * C3608 - (C94371 + C94370) * C139403) *
               C139442 * C139588) *
              C139328 * C139589 +
          (((C94121 + C94120) * C3608 -
            ((C47034 * C247 + C139575 * C253 + C47033 * C246 + C47029 * C252) *
                 C139561 +
             (C47034 * C109 + C139575 * C115 + C47033 * C108 + C47029 * C114) *
                 C3607) +
            (C94372 + C94373) * C139403) *
               C139442 * C92451 +
           ((C94124 + C94125) * C3608 -
            ((C94373 + C94372) * C139561 + (C94120 + C94121) * C3607) +
            (C94375 + C94374) * C139403) *
               C139442 * C139588) *
              C139328 * C139590 +
          (((C47033 * C109 + C47029 * C115 + C47034 * C110 + C139575 * C119) *
                C3607 +
            (C47033 * C247 + C47029 * C253 + C47034 * C248 + C139575 * C254) *
                C139561 -
            (C96025 + C96024) * C3608 - (C96234 + C96235) * C139403) *
               C139442 * C92451 +
           ((C96024 + C96025) * C3607 + (C96235 + C96234) * C139561 -
            (C47034 * C1771 + C139575 * C1786 + C47033 * C1770 +
             C47029 * C1782) *
                C3608 -
            (C47034 * C1970 + C139575 * C1978 + C47033 * C1968 +
             C47029 * C1976) *
                C139403) *
               C139442 * C139588) *
              C139328 * C2699)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[93] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139442 * C308) * C2702 +
             (C307 * C116 + C139442 * C314) * C139589 - C337 * C2703 -
             C338 * C139590 + C339 * C2704 + C340 * C2699) *
                C92451 +
            (C34389 + C34390 - C34391 - C34392 + C34393 + C34394) * C139588) *
               C47029 +
           ((C337 * C2702 + C338 * C139589 - C339 * C2703 - C340 * C139590 +
             C341 * C2704 + C342 * C2699) *
                C92451 +
            (C34395 + C34396 - C34397 - C34398 + C34399 + C34400) * C139588) *
               C139575) *
              C139561 +
          (((C34391 - (C34390 + C34389) + C34392 - C34393 - C34394) * C92451 +
            (C2090 * C2703 - (C32485 * C139589 + C32486 * C2702) +
             C2091 * C139590 - C2092 * C2704 - C2093 * C2699) *
                C139588) *
               C47029 +
           ((C34397 - (C34396 + C34395) + C34398 - C34399 - C34400) * C92451 +
            (C2092 * C2703 - (C2091 * C139589 + C2090 * C2702) +
             C2093 * C139590 - (C307 * C1771 + C139442 * C2060) * C2704 -
             (C307 * C1787 + C139442 * C2068) * C2699) *
                C139588) *
               C139575) *
              C139403) *
         C139328) /
        (p * q * std::sqrt(p + q));
    d2eeyy[93] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C307 * C107 + C139442 * C308) * C181 +
              (C307 * C182 + C139442 * C394) * C139328) *
                 C92451 +
             (C32591 + C32607) * C139588) *
                C47029 +
            ((C401 + C417) * C92451 + C32594 * C139588) * C139575) *
               C139589 -
           ((C3772 * C139588 + (C418 + C404) * C92451) * C139575 +
            (C32595 * C139588 + (C417 + C401) * C92451) * C47029) *
               C139590 +
           ((C421 * C92451 + C34499 * C139588) * C47029 +
            ((C409 + C419) * C92451 + (C3769 + C3775) * C139588) * C139575) *
               C2699) *
              C139561 +
          (((C32594 * C92451 + C32596 * C139588) * C47029 +
            (C34499 * C92451 + (C2185 + C2195) * C139588) * C139575) *
               C139590 -
           ((C32597 * C139588 + C32595 * C92451) * C139575 +
            ((C32608 + C32600) * C139588 + (C32607 + C32591) * C92451) *
                C47029) *
               C139589 -
           ((((C307 * C1877 + C139442 * C2174) * C139328 +
              (C307 * C1771 + C139442 * C2060) * C181) *
                 C139588 +
             (C3775 + C3769) * C92451) *
                C139575 +
            ((C2195 + C2185) * C139588 + C3772 * C92451) * C47029) *
               C2699) *
              C139403)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[93] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139442 * C308) * C3607 +
             (C307 * C245 + C139442 * C474) * C139561 - C32483 * C3608 -
             C32719 * C139403) *
                C92451 +
            (C32483 * C3607 + C32719 * C139561 - C32486 * C3608 -
             C32720 * C139403) *
                C139588) *
               C47029 +
           ((C3851 + C3852 - C3853 - C3854) * C92451 +
            (C34598 + C34599 - C34600 - C34601) * C139588) *
               C139575) *
              C139328 * C139589 +
          (((C3853 - (C3852 + C3851) + C3854) * C92451 +
            (C34600 - (C34599 + C34598) + C34601) * C139588) *
               C47029 +
           ((C3857 - (C3856 + C3855) + C3858) * C92451 +
            (C34602 - (C34603 + C34604) + C34605) * C139588) *
               C139575) *
              C139328 * C139590 +
          ((C3868 * C92451 + (C34604 + C34603 - C34602 - C34605) * C139588) *
               C47029 +
           ((C3861 + C3860 - C3859 - C3867) * C92451 +
            (C3692 * C3607 + C3865 * C139561 -
             (C307 * C1771 + C139442 * C2060) * C3608 -
             (C307 * C1970 + C139442 * C2276) * C139403) *
                C139588) *
               C139575) *
              C139328 * C2699)) /
        (p * q * std::sqrt(p + q));
    d2eezx[93] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1767 + C139588 * C2376) *
                C2702 +
            (C92849 * C116 + C92451 * C561 + C92850 * C1777 + C139588 * C2383) *
                C139589 -
            (C92876 + C92877) * C2703 - (C92878 + C92879) * C139590 +
            (C92880 + C92881) * C2704 + (C92882 + C92883) * C2699) *
               C47029 +
           ((C92877 + C92876) * C2702 + (C92879 + C92878) * C139589 -
            (C92881 + C92880) * C2703 - (C92883 + C92882) * C139590 +
            (C92885 + C92884) * C2704 + (C92887 + C92886) * C2699) *
               C139575) *
              C139442 * C139561 +
          (((C94784 + C94785) * C2703 -
            ((C92850 * C1783 + C139588 * C2387 + C92849 * C1777 +
              C92451 * C2383) *
                 C139589 +
             (C92850 * C1768 + C139588 * C2379 + C92849 * C1767 +
              C92451 * C2376) *
                 C2702) +
            (C94786 + C94787) * C139590 - (C96636 + C96637) * C2704 -
            (C96638 + C96639) * C2699) *
               C47029 +
           ((C96637 + C96636) * C2703 -
            ((C94787 + C94786) * C139589 + (C94785 + C94784) * C2702) +
            (C96639 + C96638) * C139590 -
            (C92850 * C1771 + C139588 * C2382 + C92849 * C1766 +
             C92451 * C2378) *
                C2704 -
            (C92850 * C1787 + C139588 * C2390 + C92849 * C1779 +
             C92451 * C2386) *
                C2699) *
               C139575) *
              C139442 * C139403) *
         C139328) /
        (p * q * std::sqrt(p + q));
    d2eezy[93] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C92849 * C107 + C92451 * C555 + C92850 * C1767 +
              C139588 * C2376) *
                 C181 +
             (C92849 * C182 + C92451 * C641 + C92850 * C1873 +
              C139588 * C2492) *
                 C139328) *
                C47029 +
            ((C92877 + C92876) * C181 + (C92966 + C92967) * C139328) *
                C139575) *
               C139442 * C139589 -
           (((C92968 + C92969) * C139328 + (C92881 + C92880) * C181) * C139575 +
            ((C92967 + C92966) * C139328 + (C92876 + C92877) * C181) * C47029) *
               C139442 * C139590 +
           (((C92880 + C92881) * C181 + (C92969 + C92968) * C139328) * C47029 +
            ((C92885 + C92884) * C181 + (C92970 + C92971) * C139328) *
                C139575) *
               C139442 * C2699) *
              C139561 +
          ((((C94784 + C94785) * C181 + (C94898 + C94899) * C139328) * C47029 +
            ((C96637 + C96636) * C181 + (C96742 + C96743) * C139328) *
                C139575) *
               C139442 * C139590 -
           (((C94899 + C94898) * C139328 + (C94785 + C94784) * C181) * C139575 +
            ((C92850 * C1874 + C139588 * C2493 + C92849 * C1873 +
              C92451 * C2492) *
                 C139328 +
             (C92850 * C1768 + C139588 * C2379 + C92849 * C1767 +
              C92451 * C2376) *
                 C181) *
                C47029) *
               C139442 * C139589 -
           (((C92850 * C1877 + C139588 * C2496 + C92849 * C1872 +
              C92451 * C2491) *
                 C139328 +
             (C92850 * C1771 + C139588 * C2382 + C92849 * C1766 +
              C92451 * C2378) *
                 C181) *
                C139575 +
            ((C96743 + C96742) * C139328 + (C96636 + C96637) * C181) * C47029) *
               C139442 * C2699) *
              C139403)) /
        (p * q * std::sqrt(p + q));
    d2eezz[93] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1767 + C139588 * C2376) *
                C3607 +
            (C92849 * C245 + C92451 * C719 + C92850 * C1965 + C139588 * C2591) *
                C139561 -
            (C92850 * C1768 + C139588 * C2379 + C92849 * C1767 +
             C92451 * C2376) *
                C3608 -
            (C92850 * C1966 + C139588 * C2592 + C92849 * C1965 +
             C92451 * C2591) *
                C139403) *
               C47029 +
           ((C92877 + C92876) * C3607 + (C93050 + C93051) * C139561 -
            (C94785 + C94784) * C3608 - (C95008 + C95009) * C139403) *
               C139575) *
              C139442 * C139328 * C139589 +
          (((C94784 + C94785) * C3608 -
            ((C93051 + C93050) * C139561 + (C92876 + C92877) * C3607) +
            (C95009 + C95008) * C139403) *
               C47029 +
           ((C96637 + C96636) * C3608 -
            ((C93052 + C93053) * C139561 + (C92881 + C92880) * C3607) +
            (C96846 + C96847) * C139403) *
               C139575) *
              C139442 * C139328 * C139590 +
          (((C92880 + C92881) * C3607 + (C93053 + C93052) * C139561 -
            (C96636 + C96637) * C3608 - (C96847 + C96846) * C139403) *
               C47029 +
           ((C92885 + C92884) * C3607 + (C93054 + C93055) * C139561 -
            (C92850 * C1771 + C139588 * C2382 + C92849 * C1766 +
             C92451 * C2378) *
                C3608 -
            (C92850 * C1970 + C139588 * C2598 + C92849 * C1969 +
             C92451 * C2597) *
                C139403) *
               C139575) *
              C139442 * C139328 * C2699)) /
        (p * q * std::sqrt(p + q));
    d2eexx[94] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139575 * C114) *
               C103 +
           (C47033 * C116 + C47029 * C125 + C47034 * C117 + C139575 * C126) *
               C92 -
           (C47034 * C109 + C139575 * C115 + C47033 * C108 + C47029 * C114) *
               C104 -
           (C47034 * C118 + C139575 * C127 + C47033 * C117 + C47029 * C126) *
               C93 +
           (C47033 * C109 + C47029 * C115 + C47034 * C110 + C139575 * C119) *
               C105 +
           (C47033 * C118 + C47029 * C127 + C47034 * C120 + C139575 * C128) *
               C94 -
           (C47034 * C111 + C139575 * C121 + C47033 * C110 + C47029 * C119) *
               C106 -
           (C47034 * C122 + C139575 * C129 + C47033 * C120 + C47029 * C128) *
               C95) *
              C139442 * C92451 +
          ((C47033 * C1767 + C47029 * C1778 + C47034 * C1764 +
            C139575 * C1772) *
               C103 +
           (C47033 * C1777 + C47029 * C1790 + C47034 * C1776 +
            C139575 * C1789) *
               C92 -
           (C47034 * C1765 + C139575 * C1773 + C47033 * C1764 +
            C47029 * C1772) *
               C104 -
           (C47034 * C1775 + C139575 * C1788 + C47033 * C1776 +
            C47029 * C1789) *
               C93 +
           (C47033 * C1765 + C47029 * C1773 + C47034 * C1766 +
            C139575 * C1774) *
               C105 +
           (C47033 * C1775 + C47029 * C1788 + C47034 * C1779 +
            C139575 * C1791) *
               C94 -
           (C47034 * C3453 + C139575 * C3454 + C47033 * C1766 +
            C47029 * C1774) *
               C106 -
           (C47034 * C3455 + C139575 * C3456 + C47033 * C1779 +
            C47029 * C1791) *
               C95) *
              C139442 * C139588) *
         C139339 * C139328) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139575 * C114) *
                C826 +
            (C47033 * C116 + C47029 * C125 + C47034 * C117 + C139575 * C126) *
                C821 -
            (C47034 * C109 + C139575 * C115 + C47033 * C108 + C47029 * C114) *
                C827 -
            (C47034 * C118 + C139575 * C127 + C47033 * C117 + C47029 * C126) *
                C139305) *
               C139442 * C92451 +
           ((C47033 * C1767 + C47029 * C1778 + C47034 * C1764 +
             C139575 * C1772) *
                C826 +
            (C47033 * C1777 + C47029 * C1790 + C47034 * C1776 +
             C139575 * C1789) *
                C821 -
            (C47034 * C1765 + C139575 * C1773 + C47033 * C1764 +
             C47029 * C1772) *
                C827 -
            (C47034 * C1775 + C139575 * C1788 + C47033 * C1776 +
             C47029 * C1789) *
                C139305) *
               C139442 * C139588) *
              C139339 * C823 +
          (((C47773 + C47772) * C827 -
            ((C47771 + C47770) * C821 + (C47769 + C47768) * C826) +
            (C47775 + C47774) * C139305) *
               C139442 * C92451 +
           ((C51576 + C51577) * C827 -
            ((C51578 + C51579) * C821 + (C51580 + C51581) * C826) +
            (C51582 + C51583) * C139305) *
               C139442 * C139588) *
              C139339 * C824 +
          (((C47781 + C47780) * C826 + (C47779 + C47778) * C821 -
            (C47777 + C47776) * C827 - (C47783 + C47782) * C139305) *
               C139442 * C92451 +
           ((C57236 + C57237) * C826 + (C57238 + C57239) * C821 -
            (C47034 * C8752 + C139575 * C8758 + C47033 * C8753 +
             C47029 * C8759) *
                C827 -
            (C47034 * C8755 + C139575 * C8761 + C47033 * C8756 +
             C47029 * C8762) *
                C139305) *
               C139442 * C139588) *
              C139339 * C825)) /
            (p * q * std::sqrt(p + q));
    d2eexy[94] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139575 * C114) *
                C181 +
            (C47033 * C182 + C47029 * C188 + C47034 * C183 + C139575 * C189) *
                C139328) *
               C139442 * C92451 +
           ((C47033 * C1767 + C47029 * C1778 + C47034 * C1764 +
             C139575 * C1772) *
                C181 +
            (C47033 * C1873 + C47029 * C1881 + C47034 * C1870 +
             C139575 * C1878) *
                C139328) *
               C139442 * C139588) *
              C92 -
          (((C47034 * C1871 + C139575 * C1879 + C47033 * C1870 +
             C47029 * C1878) *
                C139328 +
            (C47034 * C1765 + C139575 * C1773 + C47033 * C1764 +
             C47029 * C1772) *
                C181) *
               C139442 * C139588 +
           ((C47034 * C184 + C139575 * C190 + C47033 * C183 + C47029 * C189) *
                C139328 +
            (C47034 * C109 + C139575 * C115 + C47033 * C108 + C47029 * C114) *
                C181) *
               C139442 * C92451) *
              C93 +
          (((C47033 * C109 + C47029 * C115 + C47034 * C110 + C139575 * C119) *
                C181 +
            (C47033 * C184 + C47029 * C190 + C47034 * C185 + C139575 * C191) *
                C139328) *
               C139442 * C92451 +
           ((C47033 * C1765 + C47029 * C1773 + C47034 * C1766 +
             C139575 * C1774) *
                C181 +
            (C47033 * C1871 + C47029 * C1879 + C47034 * C1872 +
             C139575 * C1880) *
                C139328) *
               C139442 * C139588) *
              C94 -
          (((C47034 * C3531 + C139575 * C3532 + C47033 * C1872 +
             C47029 * C1880) *
                C139328 +
            (C47034 * C3453 + C139575 * C3454 + C47033 * C1766 +
             C47029 * C1774) *
                C181) *
               C139442 * C139588 +
           ((C47034 * C186 + C139575 * C192 + C47033 * C185 + C47029 * C191) *
                C139328 +
            (C47034 * C111 + C139575 * C121 + C47033 * C110 + C47029 * C119) *
                C181) *
               C139442 * C92451) *
              C95) *
         C139339) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139575 * C114) *
                C934 +
            (C47033 * C182 + C47029 * C188 + C47034 * C183 + C139575 * C189) *
                C823 -
            (C47769 + C47768) * C935 - (C47898 + C47899) * C824 +
            (C47781 + C47780) * C936 + (C47900 + C47901) * C825) *
               C139442 * C92451 +
           ((C47033 * C1767 + C47029 * C1778 + C47034 * C1764 +
             C139575 * C1772) *
                C934 +
            (C47033 * C1873 + C47029 * C1881 + C47034 * C1870 +
             C139575 * C1878) *
                C823 -
            (C51580 + C51581) * C935 - (C51723 + C51722) * C824 +
            (C57236 + C57237) * C936 + (C57343 + C57342) * C825) *
               C139442 * C139588) *
              C821 +
          (((C47773 + C47772) * C935 -
            ((C47034 * C184 + C139575 * C190 + C47033 * C183 + C47029 * C189) *
                 C823 +
             (C47034 * C109 + C139575 * C115 + C47033 * C108 + C47029 * C114) *
                 C934) +
            (C47902 + C47903) * C824 - (C47777 + C47776) * C936 -
            (C47904 + C47905) * C825) *
               C139442 * C92451 +
           ((C51576 + C51577) * C935 -
            ((C47034 * C1871 + C139575 * C1879 + C47033 * C1870 +
              C47029 * C1878) *
                 C823 +
             (C47034 * C1765 + C139575 * C1773 + C47033 * C1764 +
              C47029 * C1772) *
                 C934) +
            (C51725 + C51724) * C824 -
            (C47034 * C8752 + C139575 * C8758 + C47033 * C8753 +
             C47029 * C8759) *
                C936 -
            (C47034 * C8838 + C139575 * C8841 + C47033 * C8839 +
             C47029 * C8842) *
                C825) *
               C139442 * C139588) *
              C139305) *
         C139339) /
            (p * q * std::sqrt(p + q));
    d2eexz[94] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139575 * C114) *
                C244 +
            (C47033 * C245 + C47029 * C251 + C47034 * C246 + C139575 * C252) *
                C139339) *
               C139442 * C92451 +
           ((C47033 * C1767 + C47029 * C1778 + C47034 * C1764 +
             C139575 * C1772) *
                C244 +
            (C47033 * C1965 + C47029 * C1973 + C47034 * C1964 +
             C139575 * C1972) *
                C139339) *
               C139442 * C139588) *
              C139328 * C92 -
          (((C47034 * C1963 + C139575 * C1971 + C47033 * C1964 +
             C47029 * C1972) *
                C139339 +
            (C47034 * C1765 + C139575 * C1773 + C47033 * C1764 +
             C47029 * C1772) *
                C244) *
               C139442 * C139588 +
           ((C47034 * C247 + C139575 * C253 + C47033 * C246 + C47029 * C252) *
                C139339 +
            (C47034 * C109 + C139575 * C115 + C47033 * C108 + C47029 * C114) *
                C244) *
               C139442 * C92451) *
              C139328 * C93 +
          (((C47033 * C109 + C47029 * C115 + C47034 * C110 + C139575 * C119) *
                C244 +
            (C47033 * C247 + C47029 * C253 + C47034 * C248 + C139575 * C254) *
                C139339) *
               C139442 * C92451 +
           ((C47033 * C1765 + C47029 * C1773 + C47034 * C1766 +
             C139575 * C1774) *
                C244 +
            (C47033 * C1963 + C47029 * C1971 + C47034 * C1969 +
             C139575 * C1977) *
                C139339) *
               C139442 * C139588) *
              C139328 * C94 -
          (((C47034 * C3609 + C139575 * C3610 + C47033 * C1969 +
             C47029 * C1977) *
                C139339 +
            (C47034 * C3453 + C139575 * C3454 + C47033 * C1766 +
             C47029 * C1774) *
                C244) *
               C139442 * C139588 +
           ((C47034 * C249 + C139575 * C255 + C47033 * C248 + C47029 * C254) *
                C139339 +
            (C47034 * C111 + C139575 * C121 + C47033 * C110 + C47029 * C119) *
                C244) *
               C139442 * C92451) *
              C139328 * C95)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139575 * C114) *
                 C244 +
             (C47033 * C245 + C47029 * C251 + C47034 * C246 + C139575 * C252) *
                 C139339) *
                C139442 * C92451 +
            ((C47033 * C1767 + C47029 * C1778 + C47034 * C1764 +
              C139575 * C1772) *
                 C244 +
             (C47033 * C1965 + C47029 * C1973 + C47034 * C1964 +
              C139575 * C1972) *
                 C139339) *
                C139442 * C139588) *
               C823 -
           (((C51864 + C51865) * C139339 + (C51580 + C51581) * C244) * C139442 *
                C139588 +
            ((C48021 + C48020) * C139339 + (C47769 + C47768) * C244) * C139442 *
                C92451) *
               C824 +
           (((C47781 + C47780) * C244 + (C48023 + C48022) * C139339) * C139442 *
                C92451 +
            ((C57236 + C57237) * C244 + (C57446 + C57447) * C139339) * C139442 *
                C139588) *
               C825) *
              C821 +
          ((((C47773 + C47772) * C244 + (C48024 + C48025) * C139339) * C139442 *
                C92451 +
            ((C51576 + C51577) * C244 + (C51866 + C51867) * C139339) * C139442 *
                C139588) *
               C824 -
           (((C47034 * C1963 + C139575 * C1971 + C47033 * C1964 +
              C47029 * C1972) *
                 C139339 +
             (C47034 * C1765 + C139575 * C1773 + C47033 * C1764 +
              C47029 * C1772) *
                 C244) *
                C139442 * C139588 +
            ((C47034 * C247 + C139575 * C253 + C47033 * C246 + C47029 * C252) *
                 C139339 +
             (C47034 * C109 + C139575 * C115 + C47033 * C108 + C47029 * C114) *
                 C244) *
                C139442 * C92451) *
               C823 -
           (((C47034 * C8918 + C139575 * C8921 + C47033 * C8919 +
              C47029 * C8922) *
                 C139339 +
             (C47034 * C8752 + C139575 * C8758 + C47033 * C8753 +
              C47029 * C8759) *
                 C244) *
                C139442 * C139588 +
            ((C48027 + C48026) * C139339 + (C47777 + C47776) * C244) * C139442 *
                C92451) *
               C825) *
              C139305)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[94] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139442 * C308) * C103 +
            (C307 * C116 + C139442 * C314) * C92 - C337 * C104 - C338 * C93 +
            C339 * C105 + C340 * C94 - C341 * C106 - C342 * C95) *
               C92451 +
           (C32483 * C103 + C32484 * C92 - C2086 * C104 - C2087 * C93 +
            C2088 * C105 + C2089 * C94 - C3692 * C106 - C3693 * C95) *
               C139588) *
              C47029 +
          ((C337 * C103 + C338 * C92 - C339 * C104 - C340 * C93 + C341 * C105 +
            C342 * C94 - C343 * C106 - C344 * C95) *
               C92451 +
           (C2086 * C103 + C2087 * C92 - C2088 * C104 - C2089 * C93 +
            C3692 * C105 + C3693 * C94 -
            (C307 * C3453 + C139442 * C3685) * C106 -
            (C307 * C3455 + C139442 * C3686) * C95) *
               C139588) *
              C139575) *
         C139339 * C139328) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139442 * C308) * C826 +
             (C307 * C116 + C139442 * C314) * C821 - C337 * C827 -
             C338 * C139305) *
                C92451 +
            (C32489 + C32490 - C32463 - C32464) * C139588) *
               C47029 +
           ((C337 * C826 + C338 * C821 - C339 * C827 - C340 * C139305) *
                C92451 +
            (C32465 + C32466 - C32467 - C32468) * C139588) *
               C139575) *
              C139339 * C823 +
          (((C1150 * C827 -
             ((C307 * C841 + C139442 * C1125) * C821 +
              (C307 * C831 + C139442 * C1118) * C826) +
             C1151 * C139305) *
                C92451 +
            (C35444 - (C35462 + C35463) + C35449) * C139588) *
               C47029 +
           ((C1152 * C827 - (C1151 * C821 + C1150 * C826) + C1153 * C139305) *
                C92451 +
            (C35450 - (C35451 + C35452) + C35453) * C139588) *
               C139575) *
              C139339 * C824 +
          ((((C307 * C832 + C139442 * C1121) * C826 +
             (C307 * C847 + C139442 * C1129) * C821 - C1154 * C827 -
             C1155 * C139305) *
                C92451 +
            (C41044 * C826 + C41045 * C821 - C31415 * C827 - C31416 * C139305) *
                C139588) *
               C47029 +
           ((C1154 * C826 + C1155 * C821 - C1156 * C827 - C1157 * C139305) *
                C92451 +
            (C31415 * C826 + C31416 * C821 -
             (C307 * C8752 + C139442 * C8998) * C827 -
             (C307 * C8755 + C139442 * C9001) * C139305) *
                C139588) *
               C139575) *
              C139339 * C825)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[94] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139442 * C308) * C181 +
             (C307 * C182 + C139442 * C394) * C139328) *
                C92451 +
            (C32591 + C32607) * C139588) *
               C47029 +
           ((C401 + C417) * C92451 + C32594 * C139588) * C139575) *
              C92 -
          ((C3772 * C139588 + (C418 + C404) * C92451) * C139575 +
           (C32595 * C139588 + (C417 + C401) * C92451) * C47029) *
              C93 +
          ((C421 * C92451 + C34499 * C139588) * C47029 +
           ((C409 + C419) * C92451 + (C3769 + C3775) * C139588) * C139575) *
              C94 -
          ((((C307 * C3531 + C139442 * C3767) * C139328 +
             (C307 * C3453 + C139442 * C3685) * C181) *
                C139588 +
            (C420 + C410) * C92451) *
               C139575 +
           ((C3775 + C3769) * C139588 + C422 * C92451) * C47029) *
              C95) *
         C139339) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139442 * C308) * C934 +
             (C307 * C182 + C139442 * C394) * C823 -
             (C307 * C831 + C139442 * C1118) * C935 -
             (C307 * C939 + C139442 * C1231) * C824 +
             (C307 * C832 + C139442 * C1121) * C936 +
             (C307 * C940 + C139442 * C1232) * C825) *
                C92451 +
            (C42942 + C42943 - C42944 - C42945 + C42946 + C42947) * C139588) *
               C47029 +
           ((C1240 + C1241 - C1242 - C1260 + C1245 + C1261) * C92451 +
            (C31515 + C31516 - C31517 - C31518 + C31519 + C31523) * C139588) *
               C139575) *
              C821 +
          (((C1242 - (C1241 + C1240) + C1260 - C1245 - C1261) * C92451 +
            (C31517 - (C31516 + C31515) + C31518 - C31519 - C31523) * C139588) *
               C47029 +
           ((C1250 - (C1249 + C1248) + C1262 - C1253 - C1263) * C92451 +
            (C4568 * C935 - (C2189 * C823 + C2088 * C934) + C4683 * C824 -
             (C307 * C8752 + C139442 * C8998) * C936 -
             (C307 * C8838 + C139442 * C9080) * C825) *
                C139588) *
               C139575) *
              C139305) *
         C139339) /
            (p * q * std::sqrt(p + q));
    d2eeyz[94] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139442 * C308) * C244 +
             (C307 * C245 + C139442 * C474) * C139339) *
                C92451 +
            (C32483 * C244 + C32719 * C139339) * C139588) *
               C47029 +
           ((C481 + C497) * C92451 + (C30741 + C30742) * C139588) * C139575) *
              C139328 * C92 -
          (((C30743 + C30744) * C139588 + (C498 + C484) * C92451) * C139575 +
           ((C30742 + C30741) * C139588 + (C497 + C481) * C92451) * C47029) *
              C139328 * C93 +
          ((C501 * C92451 + (C30744 + C30743) * C139588) * C47029 +
           ((C489 + C499) * C92451 + (C30745 + C30746) * C139588) * C139575) *
              C139328 * C94 -
          ((((C307 * C3609 + C139442 * C3849) * C139339 +
             (C307 * C3453 + C139442 * C3685) * C244) *
                C139588 +
            (C500 + C490) * C92451) *
               C139575 +
           ((C30746 + C30745) * C139588 + C502 * C92451) * C47029) *
              C139328 * C95)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C307 * C107 + C139442 * C308) * C244 +
              (C307 * C245 + C139442 * C474) * C139339) *
                 C92451 +
             (C32483 * C244 + C32719 * C139339) * C139588) *
                C47029 +
            ((C481 + C497) * C92451 + (C30741 + C30742) * C139588) * C139575) *
               C823 -
           (((C31622 + C31623) * C139588 + (C1363 + C1351) * C92451) * C139575 +
            ((C35751 * C139339 + C35459 * C244) * C139588 +
             ((C307 * C1029 + C139442 * C1339) * C139339 +
              (C307 * C831 + C139442 * C1118) * C244) *
                 C92451) *
                C47029) *
               C824 +
           ((((C307 * C832 + C139442 * C1121) * C244 +
              (C307 * C1030 + C139442 * C1340) * C139339) *
                 C92451 +
             (C41044 * C244 + C41255 * C139339) * C139588) *
                C47029 +
            ((C1352 + C1364) * C92451 + (C31624 + C31628) * C139588) *
                C139575) *
               C825) *
              C821 +
          ((((C1351 + C1363) * C92451 + (C31623 + C31622) * C139588) * C47029 +
            ((C1348 + C1362) * C92451 + (C33653 + C33654) * C139588) *
                C139575) *
               C824 -
           (((C30743 + C30744) * C139588 + (C498 + C484) * C92451) * C139575 +
            ((C30742 + C30741) * C139588 + (C497 + C481) * C92451) * C47029) *
               C823 -
           ((((C307 * C8918 + C139442 * C9157) * C139339 +
              (C307 * C8752 + C139442 * C8998) * C244) *
                 C139588 +
             (C1365 + C1355) * C92451) *
                C139575 +
            ((C31628 + C31624) * C139588 + (C1364 + C1352) * C92451) * C47029) *
               C825) *
              C139305)) /
            (p * q * std::sqrt(p + q));
    d2eezx[94] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C92849 * C107 + C92451 * C555 + C92850 * C1767 + C139588 * C2376) *
               C103 +
           (C92849 * C116 + C92451 * C561 + C92850 * C1777 + C139588 * C2383) *
               C92 -
           (C92876 + C92877) * C104 - (C92878 + C92879) * C93 +
           (C92880 + C92881) * C105 + (C92882 + C92883) * C94 -
           (C92884 + C92885) * C106 - (C92886 + C92887) * C95) *
              C47029 +
          ((C92877 + C92876) * C103 + (C92879 + C92878) * C92 -
           (C92881 + C92880) * C104 - (C92883 + C92882) * C93 +
           (C92885 + C92884) * C105 + (C92887 + C92886) * C94 -
           (C92850 * C3453 + C139588 * C3943 + C92849 * C111 + C92451 * C559) *
               C106 -
           (C92850 * C3455 + C139588 * C3944 + C92849 * C122 + C92451 * C565) *
               C95) *
              C139575) *
         C139442 * C139339 * C139328) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1767 + C139588 * C2376) *
                C826 +
            (C92849 * C116 + C92451 * C561 + C92850 * C1777 + C139588 * C2383) *
                C821 -
            (C92876 + C92877) * C827 - (C92878 + C92879) * C139305) *
               C47029 +
           ((C92877 + C92876) * C826 + (C92879 + C92878) * C821 -
            (C92881 + C92880) * C827 - (C92883 + C92882) * C139305) *
               C139575) *
              C139442 * C139339 * C823 +
          (((C93758 + C93759) * C827 -
            ((C92850 * C4230 + C139588 * C4903 + C92849 * C841 +
              C92451 * C1447) *
                 C821 +
             (C92850 * C4223 + C139588 * C4899 + C92849 * C831 +
              C92451 * C1440) *
                 C826) +
            (C93760 + C93761) * C139305) *
               C47029 +
           ((C92849 * C829 + C92451 * C1441 + C92850 * C4225 +
             C139588 * C4901) *
                C827 -
            ((C93761 + C93760) * C821 + (C93759 + C93758) * C826) +
            (C92849 * C839 + C92451 * C1449 + C92850 * C4232 +
             C139588 * C4905) *
                C139305) *
               C139575) *
              C139442 * C139339 * C824 +
          (((C92849 * C832 + C92451 * C1443 + C92850 * C8754 +
             C139588 * C9234) *
                C826 +
            (C92849 * C847 + C92451 * C1451 + C92850 * C8757 +
             C139588 * C9237) *
                C821 -
            (C93762 + C93763) * C827 - (C93764 + C93765) * C139305) *
               C47029 +
           ((C93763 + C93762) * C826 + (C93765 + C93764) * C821 -
            (C92850 * C8752 + C139588 * C9232 + C92849 * C834 +
             C92451 * C1445) *
                C827 -
            (C92850 * C8755 + C139588 * C9235 + C92849 * C849 +
             C92451 * C1453) *
                C139305) *
               C139575) *
              C139442 * C139339 * C825)) /
            (p * q * std::sqrt(p + q));
    d2eezy[94] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1767 + C139588 * C2376) *
                C181 +
            (C92849 * C182 + C92451 * C641 + C92850 * C1873 + C139588 * C2492) *
                C139328) *
               C47029 +
           ((C92877 + C92876) * C181 + (C92966 + C92967) * C139328) * C139575) *
              C139442 * C92 -
          (((C92968 + C92969) * C139328 + (C92881 + C92880) * C181) * C139575 +
           ((C92967 + C92966) * C139328 + (C92876 + C92877) * C181) * C47029) *
              C139442 * C93 +
          (((C92880 + C92881) * C181 + (C92969 + C92968) * C139328) * C47029 +
           ((C92885 + C92884) * C181 + (C92970 + C92971) * C139328) * C139575) *
              C139442 * C94 -
          (((C92850 * C3531 + C139588 * C4025 + C92849 * C186 + C92451 * C645) *
                C139328 +
            (C92850 * C3453 + C139588 * C3943 + C92849 * C111 + C92451 * C559) *
                C181) *
               C139575 +
           ((C92971 + C92970) * C139328 + (C92884 + C92885) * C181) * C47029) *
              C139442 * C95) *
         C139339) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1767 + C139588 * C2376) *
                C934 +
            (C92849 * C182 + C92451 * C641 + C92850 * C1873 + C139588 * C2492) *
                C823 -
            (C92850 * C4223 + C139588 * C4899 + C92849 * C831 +
             C92451 * C1440) *
                C935 -
            (C92850 * C4337 + C139588 * C5017 + C92849 * C939 +
             C92451 * C1553) *
                C824 +
            (C92849 * C832 + C92451 * C1443 + C92850 * C8754 +
             C139588 * C9234) *
                C936 +
            (C92849 * C940 + C92451 * C1554 + C92850 * C8840 +
             C139588 * C9312) *
                C825) *
               C47029 +
           ((C92877 + C92876) * C934 + (C92966 + C92967) * C823 -
            (C93759 + C93758) * C935 - (C93872 + C93873) * C824 +
            (C93763 + C93762) * C936 + (C93874 + C93875) * C825) *
               C139575) *
              C139442 * C821 +
          (((C93758 + C93759) * C935 -
            ((C92967 + C92966) * C823 + (C92876 + C92877) * C934) +
            (C93873 + C93872) * C824 - (C93762 + C93763) * C936 -
            (C93875 + C93874) * C825) *
               C47029 +
           ((C92849 * C829 + C92451 * C1441 + C92850 * C4225 +
             C139588 * C4901) *
                C935 -
            ((C92968 + C92969) * C823 + (C92881 + C92880) * C934) +
            (C92849 * C937 + C92451 * C1557 + C92850 * C4339 +
             C139588 * C5019) *
                C824 -
            (C92850 * C8752 + C139588 * C9232 + C92849 * C834 +
             C92451 * C1445) *
                C936 -
            (C92850 * C8838 + C139588 * C9314 + C92849 * C942 +
             C92451 * C1558) *
                C825) *
               C139575) *
              C139442 * C139305) *
         C139339) /
            (p * q * std::sqrt(p + q));
    d2eezz[94] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1767 + C139588 * C2376) *
                C244 +
            (C92849 * C245 + C92451 * C719 + C92850 * C1965 + C139588 * C2591) *
                C139339) *
               C47029 +
           ((C92877 + C92876) * C244 + (C93050 + C93051) * C139339) * C139575) *
              C139442 * C139328 * C92 -
          (((C93052 + C93053) * C139339 + (C92881 + C92880) * C244) * C139575 +
           ((C93051 + C93050) * C139339 + (C92876 + C92877) * C244) * C47029) *
              C139442 * C139328 * C93 +
          (((C92880 + C92881) * C244 + (C93053 + C93052) * C139339) * C47029 +
           ((C92885 + C92884) * C244 + (C93054 + C93055) * C139339) * C139575) *
              C139442 * C139328 * C94 -
          (((C92850 * C3609 + C139588 * C4106 + C92849 * C249 + C92451 * C723) *
                C139339 +
            (C92850 * C3453 + C139588 * C3943 + C92849 * C111 + C92451 * C559) *
                C244) *
               C139575 +
           ((C93055 + C93054) * C139339 + (C92884 + C92885) * C244) * C47029) *
              C139442 * C139328 * C95)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C92849 * C107 + C92451 * C555 + C92850 * C1767 +
              C139588 * C2376) *
                 C244 +
             (C92849 * C245 + C92451 * C719 + C92850 * C1965 +
              C139588 * C2591) *
                 C139339) *
                C47029 +
            ((C92877 + C92876) * C244 + (C93050 + C93051) * C139339) *
                C139575) *
               C139442 * C823 -
           (((C93982 + C93983) * C139339 + (C93759 + C93758) * C244) * C139575 +
            ((C92850 * C4443 + C139588 * C5133 + C92849 * C1029 +
              C92451 * C1661) *
                 C139339 +
             (C92850 * C4223 + C139588 * C4899 + C92849 * C831 +
              C92451 * C1440) *
                 C244) *
                C47029) *
               C139442 * C824 +
           (((C92849 * C832 + C92451 * C1443 + C92850 * C8754 +
              C139588 * C9234) *
                 C244 +
             (C92849 * C1030 + C92451 * C1662 + C92850 * C8920 +
              C139588 * C9389) *
                 C139339) *
                C47029 +
            ((C93763 + C93762) * C244 + (C93984 + C93985) * C139339) *
                C139575) *
               C139442 * C825) *
              C821 +
          ((((C93758 + C93759) * C244 + (C93983 + C93982) * C139339) * C47029 +
            ((C92849 * C829 + C92451 * C1441 + C92850 * C4225 +
              C139588 * C4901) *
                 C244 +
             (C92849 * C1027 + C92451 * C1659 + C92850 * C4445 +
              C139588 * C5135) *
                 C139339) *
                C139575) *
               C139442 * C824 -
           (((C93052 + C93053) * C139339 + (C92881 + C92880) * C244) * C139575 +
            ((C93051 + C93050) * C139339 + (C92876 + C92877) * C244) * C47029) *
               C139442 * C823 -
           (((C92850 * C8918 + C139588 * C9391 + C92849 * C1032 +
              C92451 * C1664) *
                 C139339 +
             (C92850 * C8752 + C139588 * C9232 + C92849 * C834 +
              C92451 * C1445) *
                 C244) *
                C139575 +
            ((C93985 + C93984) * C139339 + (C93762 + C93763) * C244) * C47029) *
               C139442 * C825) *
              C139305)) /
            (p * q * std::sqrt(p + q));
    d2eexx[95] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139575 * C114) *
                C137108 +
            (C47033 * C116 + C47029 * C125 + C47034 * C117 + C139575 * C126) *
                C139552 -
            (C47034 * C109 + C139575 * C115 + C47033 * C108 + C47029 * C114) *
                C137101 -
            (C47034 * C118 + C139575 * C127 + C47033 * C117 + C47029 * C126) *
                C139305) *
               C139442 * C92451 +
           ((C94116 + C94117) * C137108 + (C94118 + C94119) * C139552 -
            (C94120 + C94121) * C137101 - (C94122 + C94123) * C139305) *
               C139442 * C139588) *
              C139339 * C139591 +
          (((C47773 + C47772) * C137101 -
            ((C47771 + C47770) * C139552 + (C47769 + C47768) * C137108) +
            (C47775 + C47774) * C139305) *
               C139442 * C92451 +
           ((C51576 + C51577) * C137101 -
            ((C51578 + C51579) * C139552 + (C51580 + C51581) * C137108) +
            (C51582 + C51583) * C139305) *
               C139442 * C139588) *
              C139339 * C139592 +
          (((C47781 + C47780) * C137108 + (C47779 + C47778) * C139552 -
            (C47777 + C47776) * C137101 - (C47783 + C47782) * C139305) *
               C139442 * C92451 +
           ((C57236 + C57237) * C137108 + (C57238 + C57239) * C139552 -
            (C47034 * C8752 + C139575 * C8758 + C47033 * C8753 +
             C47029 * C8759) *
                C137101 -
            (C47034 * C8755 + C139575 * C8761 + C47033 * C8756 +
             C47029 * C8762) *
                C139305) *
               C139442 * C139588) *
              C139339 * C7158)) /
        (p * q * std::sqrt(p + q));
    d2eexy[95] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139575 * C114) *
                C7235 +
            (C47033 * C182 + C47029 * C188 + C47034 * C183 + C139575 * C189) *
                C139591 -
            (C47769 + C47768) * C7236 - (C47898 + C47899) * C139592 +
            (C47781 + C47780) * C7237 + (C47900 + C47901) * C7158) *
               C139442 * C92451 +
           ((C94116 + C94117) * C7235 + (C94246 + C94247) * C139591 -
            (C51580 + C51581) * C7236 - (C51723 + C51722) * C139592 +
            (C57236 + C57237) * C7237 + (C57343 + C57342) * C7158) *
               C139442 * C139588) *
              C139552 +
          (((C47773 + C47772) * C7236 -
            ((C47034 * C184 + C139575 * C190 + C47033 * C183 + C47029 * C189) *
                 C139591 +
             (C47034 * C109 + C139575 * C115 + C47033 * C108 + C47029 * C114) *
                 C7235) +
            (C47902 + C47903) * C139592 - (C47777 + C47776) * C7237 -
            (C47904 + C47905) * C7158) *
               C139442 * C92451 +
           ((C51576 + C51577) * C7236 -
            ((C94248 + C94249) * C139591 + (C94120 + C94121) * C7235) +
            (C51725 + C51724) * C139592 -
            (C47034 * C8752 + C139575 * C8758 + C47033 * C8753 +
             C47029 * C8759) *
                C7237 -
            (C47034 * C8838 + C139575 * C8841 + C47033 * C8839 +
             C47029 * C8842) *
                C7158) *
               C139442 * C139588) *
              C139305) *
         C139339) /
        (p * q * std::sqrt(p + q));
    d2eexz[95] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139575 * C114) *
                 C244 +
             (C47033 * C245 + C47029 * C251 + C47034 * C246 + C139575 * C252) *
                 C139339) *
                C139442 * C92451 +
            ((C94116 + C94117) * C244 + (C94369 + C94368) * C139339) * C139442 *
                C139588) *
               C139591 -
           (((C51864 + C51865) * C139339 + (C51580 + C51581) * C244) * C139442 *
                C139588 +
            ((C48021 + C48020) * C139339 + (C47769 + C47768) * C244) * C139442 *
                C92451) *
               C139592 +
           (((C47781 + C47780) * C244 + (C48023 + C48022) * C139339) * C139442 *
                C92451 +
            ((C57236 + C57237) * C244 + (C57446 + C57447) * C139339) * C139442 *
                C139588) *
               C7158) *
              C139552 +
          ((((C47773 + C47772) * C244 + (C48024 + C48025) * C139339) * C139442 *
                C92451 +
            ((C51576 + C51577) * C244 + (C51866 + C51867) * C139339) * C139442 *
                C139588) *
               C139592 -
           (((C94373 + C94372) * C139339 + (C94120 + C94121) * C244) * C139442 *
                C139588 +
            ((C47034 * C247 + C139575 * C253 + C47033 * C246 + C47029 * C252) *
                 C139339 +
             (C47034 * C109 + C139575 * C115 + C47033 * C108 + C47029 * C114) *
                 C244) *
                C139442 * C92451) *
               C139591 -
           (((C47034 * C8918 + C139575 * C8921 + C47033 * C8919 +
              C47029 * C8922) *
                 C139339 +
             (C47034 * C8752 + C139575 * C8758 + C47033 * C8753 +
              C47029 * C8759) *
                 C244) *
                C139442 * C139588 +
            ((C48027 + C48026) * C139339 + (C47777 + C47776) * C244) * C139442 *
                C92451) *
               C7158) *
              C139305)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[95] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C307 * C107 + C139442 * C308) * C137108 +
                       (C307 * C116 + C139442 * C314) * C139552 -
                       C337 * C137101 - C338 * C139305) *
                          C92451 +
                      (C39974 + C39975 - C39976 - C39977) * C139588) *
                         C47029 +
                     ((C337 * C137108 + C338 * C139552 - C339 * C137101 -
                       C340 * C139305) *
                          C92451 +
                      (C39978 + C39979 - C39980 - C39981) * C139588) *
                         C139575) *
                        C139339 * C139591 +
                    (((C1150 * C137101 -
                       ((C307 * C841 + C139442 * C1125) * C139552 +
                        (C307 * C831 + C139442 * C1118) * C137108) +
                       C1151 * C139305) *
                          C92451 +
                      (C39982 - (C39983 + C39984) + C39985) * C139588) *
                         C47029 +
                     ((C1152 * C137101 - (C1151 * C139552 + C1150 * C137108) +
                       C1153 * C139305) *
                          C92451 +
                      (C39986 - (C39987 + C39988) + C39989) * C139588) *
                         C139575) *
                        C139339 * C139592 +
                    ((((C307 * C832 + C139442 * C1121) * C137108 +
                       (C307 * C847 + C139442 * C1129) * C139552 -
                       C1154 * C137101 - C1155 * C139305) *
                          C92451 +
                      (C41044 * C137108 + C41045 * C139552 - C31415 * C137101 -
                       C31416 * C139305) *
                          C139588) *
                         C47029 +
                     ((C1154 * C137108 + C1155 * C139552 - C1156 * C137101 -
                       C1157 * C139305) *
                          C92451 +
                      (C31415 * C137108 + C31416 * C139552 -
                       (C307 * C8752 + C139442 * C8998) * C137101 -
                       (C307 * C8755 + C139442 * C9001) * C139305) *
                          C139588) *
                         C139575) *
                        C139339 * C7158)) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[95] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139442 * C308) * C7235 +
             (C307 * C182 + C139442 * C394) * C139591 -
             (C307 * C831 + C139442 * C1118) * C7236 -
             (C307 * C939 + C139442 * C1231) * C139592 +
             (C307 * C832 + C139442 * C1121) * C7237 +
             (C307 * C940 + C139442 * C1232) * C7158) *
                C92451 +
            (C41146 + C41147 - C41148 - C41149 + C41150 + C41154) * C139588) *
               C47029 +
           ((C7461 + C7462 - C7463 - C7464 + C7465 + C7466) * C92451 +
            (C39056 + C39057 - C39058 - C39059 + C39060 + C39061) * C139588) *
               C139575) *
              C139552 +
          (((C7463 - (C7462 + C7461) + C7464 - C7465 - C7466) * C92451 +
            (C39058 - (C39057 + C39056) + C39059 - C39060 - C39061) * C139588) *
               C47029 +
           ((C7469 - (C7468 + C7467) + C7470 - C7471 - C7472) * C92451 +
            (C4568 * C7236 - (C2189 * C139591 + C2088 * C7235) +
             C4683 * C139592 - (C307 * C8752 + C139442 * C8998) * C7237 -
             (C307 * C8838 + C139442 * C9080) * C7158) *
                C139588) *
               C139575) *
              C139305) *
         C139339) /
        (p * q * std::sqrt(p + q));
    d2eeyz[95] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C307 * C107 + C139442 * C308) * C244 +
              (C307 * C245 + C139442 * C474) * C139339) *
                 C92451 +
             (C32483 * C244 + C32719 * C139339) * C139588) *
                C47029 +
            ((C481 + C497) * C92451 + (C30741 + C30742) * C139588) * C139575) *
               C139591 -
           (((C31622 + C31623) * C139588 + (C1363 + C1351) * C92451) * C139575 +
            ((C35751 * C139339 + C35459 * C244) * C139588 +
             ((C307 * C1029 + C139442 * C1339) * C139339 +
              (C307 * C831 + C139442 * C1118) * C244) *
                 C92451) *
                C47029) *
               C139592 +
           ((((C307 * C832 + C139442 * C1121) * C244 +
              (C307 * C1030 + C139442 * C1340) * C139339) *
                 C92451 +
             (C41044 * C244 + C41255 * C139339) * C139588) *
                C47029 +
            ((C1352 + C1364) * C92451 + (C31624 + C31628) * C139588) *
                C139575) *
               C7158) *
              C139552 +
          ((((C1351 + C1363) * C92451 + (C31623 + C31622) * C139588) * C47029 +
            ((C1348 + C1362) * C92451 + (C33653 + C33654) * C139588) *
                C139575) *
               C139592 -
           (((C30743 + C30744) * C139588 + (C498 + C484) * C92451) * C139575 +
            ((C30742 + C30741) * C139588 + (C497 + C481) * C92451) * C47029) *
               C139591 -
           ((((C307 * C8918 + C139442 * C9157) * C139339 +
              (C307 * C8752 + C139442 * C8998) * C244) *
                 C139588 +
             (C1365 + C1355) * C92451) *
                C139575 +
            ((C31628 + C31624) * C139588 + (C1364 + C1352) * C92451) * C47029) *
               C7158) *
              C139305)) /
        (p * q * std::sqrt(p + q));
    d2eezx[95] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1767 + C139588 * C2376) *
                C137108 +
            (C92849 * C116 + C92451 * C561 + C92850 * C1777 + C139588 * C2383) *
                C139552 -
            (C92876 + C92877) * C137101 - (C92878 + C92879) * C139305) *
               C47029 +
           ((C92877 + C92876) * C137108 + (C92879 + C92878) * C139552 -
            (C92881 + C92880) * C137101 - (C92883 + C92882) * C139305) *
               C139575) *
              C139442 * C139339 * C139591 +
          (((C93758 + C93759) * C137101 -
            ((C92850 * C4230 + C139588 * C4903 + C92849 * C841 +
              C92451 * C1447) *
                 C139552 +
             (C92850 * C4223 + C139588 * C4899 + C92849 * C831 +
              C92451 * C1440) *
                 C137108) +
            (C93760 + C93761) * C139305) *
               C47029 +
           ((C95707 + C95706) * C137101 -
            ((C93761 + C93760) * C139552 + (C93759 + C93758) * C137108) +
            (C95709 + C95708) * C139305) *
               C139575) *
              C139442 * C139339 * C139592 +
          (((C92849 * C832 + C92451 * C1443 + C92850 * C8754 +
             C139588 * C9234) *
                C137108 +
            (C92849 * C847 + C92451 * C1451 + C92850 * C8757 +
             C139588 * C9237) *
                C139552 -
            (C93762 + C93763) * C137101 - (C93764 + C93765) * C139305) *
               C47029 +
           ((C93763 + C93762) * C137108 + (C93765 + C93764) * C139552 -
            (C92850 * C8752 + C139588 * C9232 + C92849 * C834 +
             C92451 * C1445) *
                C137101 -
            (C92850 * C8755 + C139588 * C9235 + C92849 * C849 +
             C92451 * C1453) *
                C139305) *
               C139575) *
              C139442 * C139339 * C7158)) /
        (p * q * std::sqrt(p + q));
    d2eezy[95] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1767 + C139588 * C2376) *
                C7235 +
            (C92849 * C182 + C92451 * C641 + C92850 * C1873 + C139588 * C2492) *
                C139591 -
            (C92850 * C4223 + C139588 * C4899 + C92849 * C831 +
             C92451 * C1440) *
                C7236 -
            (C92850 * C4337 + C139588 * C5017 + C92849 * C939 +
             C92451 * C1553) *
                C139592 +
            (C92849 * C832 + C92451 * C1443 + C92850 * C8754 +
             C139588 * C9234) *
                C7237 +
            (C92849 * C940 + C92451 * C1554 + C92850 * C8840 +
             C139588 * C9312) *
                C7158) *
               C47029 +
           ((C92877 + C92876) * C7235 + (C92966 + C92967) * C139591 -
            (C93759 + C93758) * C7236 - (C93872 + C93873) * C139592 +
            (C93763 + C93762) * C7237 + (C93874 + C93875) * C7158) *
               C139575) *
              C139442 * C139552 +
          (((C93758 + C93759) * C7236 -
            ((C92967 + C92966) * C139591 + (C92876 + C92877) * C7235) +
            (C93873 + C93872) * C139592 - (C93762 + C93763) * C7237 -
            (C93875 + C93874) * C7158) *
               C47029 +
           ((C95707 + C95706) * C7236 -
            ((C92968 + C92969) * C139591 + (C92881 + C92880) * C7235) +
            (C95812 + C95813) * C139592 -
            (C92850 * C8752 + C139588 * C9232 + C92849 * C834 +
             C92451 * C1445) *
                C7237 -
            (C92850 * C8838 + C139588 * C9314 + C92849 * C942 +
             C92451 * C1558) *
                C7158) *
               C139575) *
              C139442 * C139305) *
         C139339) /
        (p * q * std::sqrt(p + q));
    d2eezz[95] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C92849 * C107 + C92451 * C555 + C92850 * C1767 +
              C139588 * C2376) *
                 C244 +
             (C92849 * C245 + C92451 * C719 + C92850 * C1965 +
              C139588 * C2591) *
                 C139339) *
                C47029 +
            ((C92877 + C92876) * C244 + (C93050 + C93051) * C139339) *
                C139575) *
               C139442 * C139591 -
           (((C93982 + C93983) * C139339 + (C93759 + C93758) * C244) * C139575 +
            ((C92850 * C4443 + C139588 * C5133 + C92849 * C1029 +
              C92451 * C1661) *
                 C139339 +
             (C92850 * C4223 + C139588 * C4899 + C92849 * C831 +
              C92451 * C1440) *
                 C244) *
                C47029) *
               C139442 * C139592 +
           (((C92849 * C832 + C92451 * C1443 + C92850 * C8754 +
              C139588 * C9234) *
                 C244 +
             (C92849 * C1030 + C92451 * C1662 + C92850 * C8920 +
              C139588 * C9389) *
                 C139339) *
                C47029 +
            ((C93763 + C93762) * C244 + (C93984 + C93985) * C139339) *
                C139575) *
               C139442 * C7158) *
              C139552 +
          ((((C93758 + C93759) * C244 + (C93983 + C93982) * C139339) * C47029 +
            ((C95707 + C95706) * C244 + (C95916 + C95917) * C139339) *
                C139575) *
               C139442 * C139592 -
           (((C93052 + C93053) * C139339 + (C92881 + C92880) * C244) * C139575 +
            ((C93051 + C93050) * C139339 + (C92876 + C92877) * C244) * C47029) *
               C139442 * C139591 -
           (((C92850 * C8918 + C139588 * C9391 + C92849 * C1032 +
              C92451 * C1664) *
                 C139339 +
             (C92850 * C8752 + C139588 * C9232 + C92849 * C834 +
              C92451 * C1445) *
                 C244) *
                C139575 +
            ((C93985 + C93984) * C139339 + (C93762 + C93763) * C244) * C47029) *
               C139442 * C7158) *
              C139305)) /
        (p * q * std::sqrt(p + q));
    d2eexx[96] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139575 * C114) *
                 C5913 +
             (C47033 * C116 + C47029 * C125 + C47034 * C117 + C139575 * C126) *
                 C139300) *
                C139442 * C92451 +
            ((C94116 + C94117) * C5913 + (C94118 + C94119) * C139300) *
                C139442 * C139588) *
               C139561 -
           (((C94126 + C94127) * C139300 + (C94128 + C94129) * C5913) *
                C139442 * C139588 +
            ((C94119 + C94118) * C139300 + (C94117 + C94116) * C5913) *
                C139442 * C92451) *
               C139403) *
              C139591 +
          ((((C51581 + C51580) * C5913 + (C51579 + C51578) * C139300) *
                C139442 * C92451 +
            ((C54278 + C54279) * C5913 + (C54280 + C54281) * C139300) *
                C139442 * C139588) *
               C139403 -
           (((C51578 + C51579) * C139300 + (C51580 + C51581) * C5913) *
                C139442 * C139588 +
            ((C47771 + C47770) * C139300 + (C47769 + C47768) * C5913) *
                C139442 * C92451) *
               C139561) *
              C139592 +
          ((((C47781 + C47780) * C5913 + (C47779 + C47778) * C139300) *
                C139442 * C92451 +
            ((C57236 + C57237) * C5913 + (C57238 + C57239) * C139300) *
                C139442 * C139588) *
               C139561 -
           (((C47034 * C21080 + C139575 * C21084 + C47033 * C21081 +
              C47029 * C21085) *
                 C139300 +
             (C47034 * C21078 + C139575 * C21082 + C47033 * C21079 +
              C47029 * C21083) *
                 C5913) *
                C139442 * C139588 +
            ((C57239 + C57238) * C139300 + (C57237 + C57236) * C5913) *
                C139442 * C92451) *
               C139403) *
              C7158)) /
        (p * q * std::sqrt(p + q));
    d2eexy[96] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139575 * C114) *
                C7235 +
            (C47033 * C182 + C47029 * C188 + C47034 * C183 + C139575 * C189) *
                C139591 -
            (C47769 + C47768) * C7236 - (C47898 + C47899) * C139592 +
            (C47781 + C47780) * C7237 + (C47900 + C47901) * C7158) *
               C139442 * C92451 +
           ((C94116 + C94117) * C7235 + (C94246 + C94247) * C139591 -
            (C51580 + C51581) * C7236 - (C51723 + C51722) * C139592 +
            (C57236 + C57237) * C7237 + (C57343 + C57342) * C7158) *
               C139442 * C139588) *
              C139300 * C139561 +
          (((C51581 + C51580) * C7236 -
            ((C94247 + C94246) * C139591 + (C94117 + C94116) * C7235) +
            (C51722 + C51723) * C139592 - (C57237 + C57236) * C7237 -
            (C57342 + C57343) * C7158) *
               C139442 * C92451 +
           ((C54278 + C54279) * C7236 -
            ((C94252 + C94253) * C139591 + (C94128 + C94129) * C7235) +
            (C54385 + C54384) * C139592 -
            (C47034 * C21078 + C139575 * C21082 + C47033 * C21079 +
             C47029 * C21083) *
                C7237 -
            (C47034 * C21196 + C139575 * C21198 + C47033 * C21197 +
             C47029 * C21199) *
                C7158) *
               C139442 * C139588) *
              C139300 * C139403)) /
        (p * q * std::sqrt(p + q));
    d2eexz[96] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139575 * C114) *
                C3607 +
            (C47033 * C245 + C47029 * C251 + C47034 * C246 + C139575 * C252) *
                C139561 -
            (C94117 + C94116) * C3608 - (C94368 + C94369) * C139403) *
               C139442 * C92451 +
           ((C94116 + C94117) * C3607 + (C94369 + C94368) * C139561 -
            (C94128 + C94129) * C3608 - (C94371 + C94370) * C139403) *
               C139442 * C139588) *
              C139591 +
          (((C51581 + C51580) * C3608 -
            ((C48021 + C48020) * C139561 + (C47769 + C47768) * C3607) +
            (C51865 + C51864) * C139403) *
               C139442 * C92451 +
           ((C54278 + C54279) * C3608 -
            ((C51864 + C51865) * C139561 + (C51580 + C51581) * C3607) +
            (C54488 + C54489) * C139403) *
               C139442 * C139588) *
              C139592 +
          (((C47781 + C47780) * C3607 + (C48023 + C48022) * C139561 -
            (C57237 + C57236) * C3608 - (C57447 + C57446) * C139403) *
               C139442 * C92451 +
           ((C57236 + C57237) * C3607 + (C57446 + C57447) * C139561 -
            (C47034 * C21078 + C139575 * C21082 + C47033 * C21079 +
             C47029 * C21083) *
                C3608 -
            (C47034 * C21304 + C139575 * C21306 + C47033 * C21305 +
             C47029 * C21307) *
                C139403) *
               C139442 * C139588) *
              C7158) *
         C139300) /
        (p * q * std::sqrt(p + q));
    d2eeyx[96] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C307 * C107 + C139442 * C308) * C5913 +
              (C307 * C116 + C139442 * C314) * C139300) *
                 C92451 +
             (C38036 + C38037) * C139588) *
                C47029 +
            ((C337 * C5913 + C338 * C139300) * C92451 +
             (C38038 + C38039) * C139588) *
                C139575) *
               C139561 -
           (((C38040 + C38041) * C139588 + (C38039 + C38038) * C92451) *
                C139575 +
            ((C38042 + C38043) * C139588 + (C38037 + C38036) * C92451) *
                C47029) *
               C139403) *
              C139591 +
          ((((C38044 + C38045) * C92451 + (C38056 + C38057) * C139588) *
                C47029 +
            ((C38050 + C38051) * C92451 + (C38052 + C38053) * C139588) *
                C139575) *
               C139403 -
           (((C38051 + C38050) * C139588 +
             (C1151 * C139300 + C1150 * C5913) * C92451) *
                C139575 +
            ((C38045 + C38044) * C139588 +
             ((C307 * C841 + C139442 * C1125) * C139300 +
              (C307 * C831 + C139442 * C1118) * C5913) *
                 C92451) *
                C47029) *
               C139561) *
              C139592 +
          (((((C307 * C832 + C139442 * C1121) * C5913 +
              (C307 * C847 + C139442 * C1129) * C139300) *
                 C92451 +
             (C41046 + C41047) * C139588) *
                C47029 +
            ((C1154 * C5913 + C1155 * C139300) * C92451 +
             (C41042 + C41043) * C139588) *
                C139575) *
               C139561 -
           ((((C307 * C21080 + C139442 * C21414) * C139300 +
              (C307 * C21078 + C139442 * C21412) * C5913) *
                 C139588 +
             (C41043 + C41042) * C92451) *
                C139575 +
            (((C307 * C21081 + C139442 * C21415) * C139300 +
              (C307 * C21079 + C139442 * C21413) * C5913) *
                 C139588 +
             (C41047 + C41046) * C92451) *
                C47029) *
               C139403) *
              C7158)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[96] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139442 * C308) * C7235 +
             (C307 * C182 + C139442 * C394) * C139591 -
             (C307 * C831 + C139442 * C1118) * C7236 -
             (C307 * C939 + C139442 * C1231) * C139592 +
             (C307 * C832 + C139442 * C1121) * C7237 +
             (C307 * C940 + C139442 * C1232) * C7158) *
                C92451 +
            (C41146 + C41147 - C41148 - C41149 + C41150 + C41154) * C139588) *
               C47029 +
           ((C7461 + C7462 - C7463 - C7464 + C7465 + C7466) * C92451 +
            (C39056 + C39057 - C39058 - C39059 + C39060 + C39061) * C139588) *
               C139575) *
              C139300 * C139561 +
          (((C41148 - (C41147 + C41146) + C41149 - C41150 - C41154) * C92451 +
            (C38054 * C7236 - (C32605 * C139591 + C32486 * C7235) +
             C38169 * C139592 - (C307 * C21079 + C139442 * C21413) * C7237 -
             (C307 * C21197 + C139442 * C21514) * C7158) *
                C139588) *
               C47029 +
           ((C39058 - (C39057 + C39056) + C39059 - C39060 - C39061) * C92451 +
            (C35460 * C7236 - (C2190 * C139591 + C2090 * C7235) +
             C35609 * C139592 - (C307 * C21078 + C139442 * C21412) * C7237 -
             (C307 * C21196 + C139442 * C21515) * C7158) *
                C139588) *
               C139575) *
              C139300 * C139403)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[96] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C307 * C107 + C139442 * C308) * C3607 +
                       (C307 * C245 + C139442 * C474) * C139561 -
                       C32483 * C3608 - C32719 * C139403) *
                          C92451 +
                      (C32483 * C3607 + C32719 * C139561 - C32486 * C3608 -
                       C32720 * C139403) *
                          C139588) *
                         C47029 +
                     ((C3851 + C3852 - C3853 - C3854) * C92451 +
                      (C34598 + C34599 - C34600 - C34601) * C139588) *
                         C139575) *
                        C139591 +
                    (((C35459 * C3608 -
                       ((C307 * C1029 + C139442 * C1339) * C139561 +
                        (C307 * C831 + C139442 * C1118) * C3607) +
                       C35751 * C139403) *
                          C92451 +
                      (C38054 * C3608 - (C35751 * C139561 + C35459 * C3607) +
                       C38271 * C139403) *
                          C139588) *
                         C47029 +
                     ((C4788 - (C4789 + C4790) + C4800) * C92451 +
                      (C35746 - (C35747 + C35748) + C35753) * C139588) *
                         C139575) *
                        C139592 +
                    ((((C307 * C832 + C139442 * C1121) * C3607 +
                       (C307 * C1030 + C139442 * C1340) * C139561 -
                       C41044 * C3608 - C41255 * C139403) *
                          C92451 +
                      (C41044 * C3607 + C41255 * C139561 -
                       (C307 * C21079 + C139442 * C21413) * C3608 -
                       (C307 * C21305 + C139442 * C21614) * C139403) *
                          C139588) *
                         C47029 +
                     ((C1154 * C3607 + C1360 * C139561 - C31415 * C3608 -
                       C31627 * C139403) *
                          C92451 +
                      (C31415 * C3607 + C31627 * C139561 -
                       (C307 * C21078 + C139442 * C21412) * C3608 -
                       (C307 * C21304 + C139442 * C21615) * C139403) *
                          C139588) *
                         C139575) *
                        C7158) *
                   C139300) /
                  (p * q * std::sqrt(p + q));
    d2eezx[96] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C92849 * C107 + C92451 * C555 + C92850 * C1767 +
              C139588 * C2376) *
                 C5913 +
             (C92849 * C116 + C92451 * C561 + C92850 * C1777 +
              C139588 * C2383) *
                 C139300) *
                C47029 +
            ((C92877 + C92876) * C5913 + (C92879 + C92878) * C139300) *
                C139575) *
               C139442 * C139561 -
           (((C94787 + C94786) * C139300 + (C94785 + C94784) * C5913) *
                C139575 +
            ((C92850 * C1783 + C139588 * C2387 + C92849 * C1777 +
              C92451 * C2383) *
                 C139300 +
             (C92850 * C1768 + C139588 * C2379 + C92849 * C1767 +
              C92451 * C2376) *
                 C5913) *
                C47029) *
               C139442 * C139403) *
              C139591 +
          ((((C92849 * C4223 + C92451 * C4899 + C92850 * C6442 +
              C139588 * C6922) *
                 C5913 +
             (C92849 * C4230 + C92451 * C4903 + C92850 * C6445 +
              C139588 * C6925) *
                 C139300) *
                C47029 +
            ((C97767 + C97766) * C5913 + (C97769 + C97768) * C139300) *
                C139575) *
               C139442 * C139403 -
           (((C93761 + C93760) * C139300 + (C93759 + C93758) * C5913) *
                C139575 +
            ((C92850 * C4230 + C139588 * C4903 + C92849 * C841 +
              C92451 * C1447) *
                 C139300 +
             (C92850 * C4223 + C139588 * C4899 + C92849 * C831 +
              C92451 * C1440) *
                 C5913) *
                C47029) *
               C139442 * C139561) *
              C139592 +
          ((((C92849 * C832 + C92451 * C1443 + C92850 * C8754 +
              C139588 * C9234) *
                 C5913 +
             (C92849 * C847 + C92451 * C1451 + C92850 * C8757 +
              C139588 * C9237) *
                 C139300) *
                C47029 +
            ((C93763 + C93762) * C5913 + (C93765 + C93764) * C139300) *
                C139575) *
               C139442 * C139561 -
           (((C92850 * C21080 + C139588 * C21716 + C92849 * C8756 +
              C92451 * C9236) *
                 C139300 +
             (C92850 * C21078 + C139588 * C21714 + C92849 * C8753 +
              C92451 * C9233) *
                 C5913) *
                C139575 +
            ((C92850 * C21081 + C139588 * C21717 + C92849 * C8757 +
              C92451 * C9237) *
                 C139300 +
             (C92850 * C21079 + C139588 * C21715 + C92849 * C8754 +
              C92451 * C9234) *
                 C5913) *
                C47029) *
               C139442 * C139403) *
              C7158)) /
        (p * q * std::sqrt(p + q));
    d2eezy[96] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1767 + C139588 * C2376) *
                C7235 +
            (C92849 * C182 + C92451 * C641 + C92850 * C1873 + C139588 * C2492) *
                C139591 -
            (C92850 * C4223 + C139588 * C4899 + C92849 * C831 +
             C92451 * C1440) *
                C7236 -
            (C92850 * C4337 + C139588 * C5017 + C92849 * C939 +
             C92451 * C1553) *
                C139592 +
            (C92849 * C832 + C92451 * C1443 + C92850 * C8754 +
             C139588 * C9234) *
                C7237 +
            (C92849 * C940 + C92451 * C1554 + C92850 * C8840 +
             C139588 * C9312) *
                C7158) *
               C47029 +
           ((C92877 + C92876) * C7235 + (C92966 + C92967) * C139591 -
            (C93759 + C93758) * C7236 - (C93872 + C93873) * C139592 +
            (C93763 + C93762) * C7237 + (C93874 + C93875) * C7158) *
               C139575) *
              C139442 * C139300 * C139561 +
          (((C92849 * C4223 + C92451 * C4899 + C92850 * C6442 +
             C139588 * C6922) *
                C7236 -
            ((C92850 * C1874 + C139588 * C2493 + C92849 * C1873 +
              C92451 * C2492) *
                 C139591 +
             (C92850 * C1768 + C139588 * C2379 + C92849 * C1767 +
              C92451 * C2376) *
                 C7235) +
            (C92849 * C4337 + C92451 * C5017 + C92850 * C6528 +
             C139588 * C7000) *
                C139592 -
            (C92850 * C21079 + C139588 * C21715 + C92849 * C8754 +
             C92451 * C9234) *
                C7237 -
            (C92850 * C21197 + C139588 * C21830 + C92849 * C8840 +
             C92451 * C9312) *
                C7158) *
               C47029 +
           ((C97767 + C97766) * C7236 -
            ((C94899 + C94898) * C139591 + (C94785 + C94784) * C7235) +
            (C97904 + C97905) * C139592 -
            (C92850 * C21078 + C139588 * C21714 + C92849 * C8753 +
             C92451 * C9233) *
                C7237 -
            (C92850 * C21196 + C139588 * C21831 + C92849 * C8839 +
             C92451 * C9313) *
                C7158) *
               C139575) *
              C139442 * C139300 * C139403)) /
        (p * q * std::sqrt(p + q));
    d2eezz[96] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1767 + C139588 * C2376) *
                C3607 +
            (C92849 * C245 + C92451 * C719 + C92850 * C1965 + C139588 * C2591) *
                C139561 -
            (C92850 * C1768 + C139588 * C2379 + C92849 * C1767 +
             C92451 * C2376) *
                C3608 -
            (C92850 * C1966 + C139588 * C2592 + C92849 * C1965 +
             C92451 * C2591) *
                C139403) *
               C47029 +
           ((C92877 + C92876) * C3607 + (C93050 + C93051) * C139561 -
            (C94785 + C94784) * C3608 - (C95008 + C95009) * C139403) *
               C139575) *
              C139442 * C139591 +
          (((C92849 * C4223 + C92451 * C4899 + C92850 * C6442 +
             C139588 * C6922) *
                C3608 -
            ((C92850 * C4443 + C139588 * C5133 + C92849 * C1029 +
              C92451 * C1661) *
                 C139561 +
             (C92850 * C4223 + C139588 * C4899 + C92849 * C831 +
              C92451 * C1440) *
                 C3607) +
            (C92849 * C4443 + C92451 * C5133 + C92850 * C6608 +
             C139588 * C7077) *
                C139403) *
               C47029 +
           ((C97767 + C97766) * C3608 -
            ((C93982 + C93983) * C139561 + (C93759 + C93758) * C3607) +
            (C98040 + C98041) * C139403) *
               C139575) *
              C139442 * C139592 +
          (((C92849 * C832 + C92451 * C1443 + C92850 * C8754 +
             C139588 * C9234) *
                C3607 +
            (C92849 * C1030 + C92451 * C1662 + C92850 * C8920 +
             C139588 * C9389) *
                C139561 -
            (C92850 * C21079 + C139588 * C21715 + C92849 * C8754 +
             C92451 * C9234) *
                C3608 -
            (C92850 * C21305 + C139588 * C21933 + C92849 * C8920 +
             C92451 * C9389) *
                C139403) *
               C47029 +
           ((C93763 + C93762) * C3607 + (C93984 + C93985) * C139561 -
            (C92850 * C21078 + C139588 * C21714 + C92849 * C8753 +
             C92451 * C9233) *
                C3608 -
            (C92850 * C21304 + C139588 * C21934 + C92849 * C8919 +
             C92451 * C9390) *
                C139403) *
               C139575) *
              C139442 * C7158) *
         C139300) /
        (p * q * std::sqrt(p + q));
    d2eexx[97] +=
        (-std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139575 * C114) *
                C5913 +
            (C47033 * C116 + C47029 * C125 + C47034 * C117 + C139575 * C126) *
                C139300) *
               C139442 * C92451 +
           ((C94116 + C94117) * C5913 + (C94118 + C94119) * C139300) * C139442 *
               C139588) *
              C139339 * C5909 -
          (((C51578 + C51579) * C139300 + (C51580 + C51581) * C5913) * C139442 *
               C139588 +
           ((C47771 + C47770) * C139300 + (C47769 + C47768) * C5913) * C139442 *
               C92451) *
              C139339 * C5910 +
          (((C47781 + C47780) * C5913 + (C47779 + C47778) * C139300) * C139442 *
               C92451 +
           ((C57236 + C57237) * C5913 + (C57238 + C57239) * C139300) * C139442 *
               C139588) *
              C139339 * C5911 -
          (((C47034 * C24130 + C139575 * C24134 + C47033 * C24131 +
             C47029 * C24135) *
                C139300 +
            (C47034 * C24128 + C139575 * C24132 + C47033 * C24129 +
             C47029 * C24133) *
                C5913) *
               C139442 * C139588 +
           ((C53631 + C53630) * C139300 + (C53629 + C53628) * C5913) * C139442 *
               C92451) *
              C139339 * C5912)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139575 * C114) *
                C5230 +
            (C47033 * C116 + C47029 * C125 + C47034 * C117 + C139575 * C126) *
                C5225 -
            (C47034 * C109 + C139575 * C115 + C47033 * C108 + C47029 * C114) *
                C5231 -
            (C47034 * C118 + C139575 * C127 + C47033 * C117 + C47029 * C126) *
                C5226 +
            (C47033 * C109 + C47029 * C115 + C47034 * C110 + C139575 * C119) *
                C5232 +
            (C47033 * C118 + C47029 * C127 + C47034 * C120 + C139575 * C128) *
                C5227) *
               C139442 * C92451 +
           ((C94116 + C94117) * C5230 + (C94118 + C94119) * C5225 -
            (C94120 + C94121) * C5231 - (C94122 + C94123) * C5226 +
            (C96024 + C96025) * C5232 + (C96026 + C96027) * C5227) *
               C139442 * C139588) *
              C139339 * C5228 +
          (((C47773 + C47772) * C5231 -
            ((C47771 + C47770) * C5225 + (C47769 + C47768) * C5230) +
            (C47775 + C47774) * C5226 - (C49701 + C49700) * C5232 -
            (C49703 + C49702) * C5227) *
               C139442 * C92451 +
           ((C51576 + C51577) * C5231 -
            ((C51578 + C51579) * C5225 + (C51580 + C51581) * C5230) +
            (C51582 + C51583) * C5226 -
            (C47034 * C4226 + C139575 * C4233 + C47033 * C4225 +
             C47029 * C4229) *
                C5232 -
            (C47034 * C4234 + C139575 * C4238 + C47033 * C4232 +
             C47029 * C4237) *
                C5227) *
               C139442 * C139588) *
              C139339 * C139377)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139575 * C114) *
                 C5913 +
             (C47033 * C116 + C47029 * C125 + C47034 * C117 + C139575 * C126) *
                 C139300) *
                C139442 * C92451 +
            ((C94116 + C94117) * C5913 + (C94118 + C94119) * C139300) *
                C139442 * C139588) *
               C1761 -
           (((C94126 + C94127) * C139300 + (C94128 + C94129) * C5913) *
                C139442 * C139588 +
            ((C94119 + C94118) * C139300 + (C94117 + C94116) * C5913) *
                C139442 * C92451) *
               C1762 +
           (((C94129 + C94128) * C5913 + (C94127 + C94126) * C139300) *
                C139442 * C92451 +
            ((C47033 * C10815 + C47029 * C10821 + C47034 * C10814 +
              C139575 * C10820) *
                 C5913 +
             (C47033 * C10818 + C47029 * C10824 + C47034 * C10817 +
              C139575 * C10823) *
                 C139300) *
                C139442 * C139588) *
               C1763) *
              C5228 +
          ((((C51581 + C51580) * C5913 + (C51579 + C51578) * C139300) *
                C139442 * C92451 +
            ((C54278 + C54279) * C5913 + (C54280 + C54281) * C139300) *
                C139442 * C139588) *
               C1762 -
           (((C51578 + C51579) * C139300 + (C51580 + C51581) * C5913) *
                C139442 * C139588 +
            ((C47771 + C47770) * C139300 + (C47769 + C47768) * C5913) *
                C139442 * C92451) *
               C1761 -
           (((C47034 * C26832 + C139575 * C26836 + C47033 * C26833 +
              C47029 * C26837) *
                 C139300 +
             (C47034 * C26830 + C139575 * C26834 + C47033 * C26831 +
              C47029 * C26835) *
                 C5913) *
                C139442 * C139588 +
            ((C54281 + C54280) * C139300 + (C54279 + C54278) * C5913) *
                C139442 * C92451) *
               C1763) *
              C139377)) /
            (p * q * std::sqrt(p + q));
    d2eexy[97] +=
        (-std::pow(Pi, 2.5) *
         (((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139575 * C114) *
               C5976 +
           (C47033 * C182 + C47029 * C188 + C47034 * C183 + C139575 * C189) *
               C5909 -
           (C47769 + C47768) * C5977 - (C47898 + C47899) * C5910 +
           (C47781 + C47780) * C5978 + (C47900 + C47901) * C5911 -
           (C53629 + C53628) * C5979 - (C53702 + C53703) * C5912) *
              C139442 * C92451 +
          ((C94116 + C94117) * C5976 + (C94246 + C94247) * C5909 -
           (C51580 + C51581) * C5977 - (C51723 + C51722) * C5910 +
           (C57236 + C57237) * C5978 + (C57343 + C57342) * C5911 -
           (C47034 * C24128 + C139575 * C24132 + C47033 * C24129 +
            C47029 * C24133) *
               C5979 -
           (C47034 * C24246 + C139575 * C24248 + C47033 * C24247 +
            C47029 * C24249) *
               C5912) *
              C139442 * C139588) *
         C139300 * C139339) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139575 * C114) *
                C5307 +
            (C47033 * C182 + C47029 * C188 + C47034 * C183 + C139575 * C189) *
                C5228 -
            (C47769 + C47768) * C5308 - (C47898 + C47899) * C139377) *
               C139442 * C92451 +
           ((C94116 + C94117) * C5307 + (C94246 + C94247) * C5228 -
            (C51580 + C51581) * C5308 - (C51723 + C51722) * C139377) *
               C139442 * C139588) *
              C5225 +
          (((C47773 + C47772) * C5308 -
            ((C47034 * C184 + C139575 * C190 + C47033 * C183 + C47029 * C189) *
                 C5228 +
             (C47034 * C109 + C139575 * C115 + C47033 * C108 + C47029 * C114) *
                 C5307) +
            (C47902 + C47903) * C139377) *
               C139442 * C92451 +
           ((C51576 + C51577) * C5308 -
            ((C94248 + C94249) * C5228 + (C94120 + C94121) * C5307) +
            (C51725 + C51724) * C139377) *
               C139442 * C139588) *
              C5226 +
          (((C47033 * C109 + C47029 * C115 + C47034 * C110 + C139575 * C119) *
                C5307 +
            (C47033 * C184 + C47029 * C190 + C47034 * C185 + C139575 * C191) *
                C5228 -
            (C49701 + C49700) * C5308 - (C49806 + C49807) * C139377) *
               C139442 * C92451 +
           ((C96024 + C96025) * C5307 + (C96130 + C96131) * C5228 -
            (C47034 * C4226 + C139575 * C4233 + C47033 * C4225 +
             C47029 * C4229) *
                C5308 -
            (C47034 * C4340 + C139575 * C4344 + C47033 * C4339 +
             C47029 * C4343) *
                C139377) *
               C139442 * C139588) *
              C5227) *
         C139339) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139575 * C114) *
                C5307 +
            (C47033 * C182 + C47029 * C188 + C47034 * C183 + C139575 * C189) *
                C5228 -
            (C47769 + C47768) * C5308 - (C47898 + C47899) * C139377) *
               C139442 * C92451 +
           ((C94116 + C94117) * C5307 + (C94246 + C94247) * C5228 -
            (C51580 + C51581) * C5308 - (C51723 + C51722) * C139377) *
               C139442 * C139588) *
              C139300 * C1761 +
          (((C51581 + C51580) * C5308 -
            ((C94247 + C94246) * C5228 + (C94117 + C94116) * C5307) +
            (C51722 + C51723) * C139377) *
               C139442 * C92451 +
           ((C54278 + C54279) * C5308 -
            ((C94252 + C94253) * C5228 + (C94128 + C94129) * C5307) +
            (C54385 + C54384) * C139377) *
               C139442 * C139588) *
              C139300 * C1762 +
          (((C94129 + C94128) * C5307 + (C94253 + C94252) * C5228 -
            (C54279 + C54278) * C5308 - (C54384 + C54385) * C139377) *
               C139442 * C92451 +
           ((C47033 * C10815 + C47029 * C10821 + C47034 * C10814 +
             C139575 * C10820) *
                C5307 +
            (C47033 * C10877 + C47029 * C10880 + C47034 * C10876 +
             C139575 * C10879) *
                C5228 -
            (C47034 * C26830 + C139575 * C26834 + C47033 * C26831 +
             C47029 * C26835) *
                C5308 -
            (C47034 * C26904 + C139575 * C26906 + C47033 * C26905 +
             C47029 * C26907) *
                C139377) *
               C139442 * C139588) *
              C139300 * C1763)) /
            (p * q * std::sqrt(p + q));
    d2eexz[97] +=
        (-std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139575 * C114) *
                C244 +
            (C47033 * C245 + C47029 * C251 + C47034 * C246 + C139575 * C252) *
                C139339) *
               C139442 * C92451 +
           ((C94116 + C94117) * C244 + (C94369 + C94368) * C139339) * C139442 *
               C139588) *
              C5909 -
          (((C51864 + C51865) * C139339 + (C51580 + C51581) * C244) * C139442 *
               C139588 +
           ((C48021 + C48020) * C139339 + (C47769 + C47768) * C244) * C139442 *
               C92451) *
              C5910 +
          (((C47781 + C47780) * C244 + (C48023 + C48022) * C139339) * C139442 *
               C92451 +
           ((C57236 + C57237) * C244 + (C57446 + C57447) * C139339) * C139442 *
               C139588) *
              C5911 -
          (((C47034 * C24354 + C139575 * C24356 + C47033 * C24355 +
             C47029 * C24357) *
                C139339 +
            (C47034 * C24128 + C139575 * C24132 + C47033 * C24129 +
             C47029 * C24133) *
                C244) *
               C139442 * C139588 +
           ((C53775 + C53774) * C139339 + (C53629 + C53628) * C244) * C139442 *
               C92451) *
              C5912) *
         C139300) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139575 * C114) *
                 C244 +
             (C47033 * C245 + C47029 * C251 + C47034 * C246 + C139575 * C252) *
                 C139339) *
                C139442 * C92451 +
            ((C94116 + C94117) * C244 + (C94369 + C94368) * C139339) * C139442 *
                C139588) *
               C5228 -
           (((C51864 + C51865) * C139339 + (C51580 + C51581) * C244) * C139442 *
                C139588 +
            ((C48021 + C48020) * C139339 + (C47769 + C47768) * C244) * C139442 *
                C92451) *
               C139377) *
              C5225 +
          ((((C47773 + C47772) * C244 + (C48024 + C48025) * C139339) * C139442 *
                C92451 +
            ((C51576 + C51577) * C244 + (C51866 + C51867) * C139339) * C139442 *
                C139588) *
               C139377 -
           (((C94373 + C94372) * C139339 + (C94120 + C94121) * C244) * C139442 *
                C139588 +
            ((C47034 * C247 + C139575 * C253 + C47033 * C246 + C47029 * C252) *
                 C139339 +
             (C47034 * C109 + C139575 * C115 + C47033 * C108 + C47029 * C114) *
                 C244) *
                C139442 * C92451) *
               C5228) *
              C5226 +
          ((((C47033 * C109 + C47029 * C115 + C47034 * C110 + C139575 * C119) *
                 C244 +
             (C47033 * C247 + C47029 * C253 + C47034 * C248 + C139575 * C254) *
                 C139339) *
                C139442 * C92451 +
            ((C96024 + C96025) * C244 + (C96235 + C96234) * C139339) * C139442 *
                C139588) *
               C5228 -
           (((C47034 * C4446 + C139575 * C4450 + C47033 * C4445 +
              C47029 * C4449) *
                 C139339 +
             (C47034 * C4226 + C139575 * C4233 + C47033 * C4225 +
              C47029 * C4229) *
                 C244) *
                C139442 * C139588 +
            ((C49911 + C49910) * C139339 + (C49701 + C49700) * C244) * C139442 *
                C92451) *
               C139377) *
              C5227)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139575 * C114) *
                C1960 +
            (C47033 * C245 + C47029 * C251 + C47034 * C246 + C139575 * C252) *
                C1761 -
            (C94117 + C94116) * C1961 - (C94368 + C94369) * C1762 +
            (C94129 + C94128) * C1962 + (C94370 + C94371) * C1763) *
               C139442 * C92451 +
           ((C94116 + C94117) * C1960 + (C94369 + C94368) * C1761 -
            (C94128 + C94129) * C1961 - (C94371 + C94370) * C1762 +
            (C47033 * C10815 + C47029 * C10821 + C47034 * C10814 +
             C139575 * C10820) *
                C1962 +
            (C47033 * C10937 + C47029 * C10940 + C47034 * C10936 +
             C139575 * C10939) *
                C1763) *
               C139442 * C139588) *
              C5228 +
          (((C51581 + C51580) * C1961 -
            ((C48021 + C48020) * C1761 + (C47769 + C47768) * C1960) +
            (C51865 + C51864) * C1762 - (C54279 + C54278) * C1962 -
            (C54489 + C54488) * C1763) *
               C139442 * C92451 +
           ((C54278 + C54279) * C1961 -
            ((C51864 + C51865) * C1761 + (C51580 + C51581) * C1960) +
            (C54488 + C54489) * C1762 -
            (C47034 * C26830 + C139575 * C26834 + C47033 * C26831 +
             C47029 * C26835) *
                C1962 -
            (C47034 * C26974 + C139575 * C26976 + C47033 * C26975 +
             C47029 * C26977) *
                C1763) *
               C139442 * C139588) *
              C139377) *
         C139300) /
            (p * q * std::sqrt(p + q));
    d2eeyx[97] +=
        (-std::pow(Pi, 2.5) * (((((C307 * C107 + C139442 * C308) * C5913 +
                                  (C307 * C116 + C139442 * C314) * C139300) *
                                     C92451 +
                                 (C38036 + C38037) * C139588) *
                                    C47029 +
                                ((C337 * C5913 + C338 * C139300) * C92451 +
                                 (C38038 + C38039) * C139588) *
                                    C139575) *
                                   C139339 * C5909 -
                               (((C38051 + C38050) * C139588 +
                                 (C1151 * C139300 + C1150 * C5913) * C92451) *
                                    C139575 +
                                ((C38045 + C38044) * C139588 +
                                 ((C307 * C841 + C139442 * C1125) * C139300 +
                                  (C307 * C831 + C139442 * C1118) * C5913) *
                                     C92451) *
                                    C47029) *
                                   C139339 * C5910 +
                               ((((C307 * C832 + C139442 * C1121) * C5913 +
                                  (C307 * C847 + C139442 * C1129) * C139300) *
                                     C92451 +
                                 (C41046 + C41047) * C139588) *
                                    C47029 +
                                ((C1154 * C5913 + C1155 * C139300) * C92451 +
                                 (C41042 + C41043) * C139588) *
                                    C139575) *
                                   C139339 * C5911 -
                               ((((C307 * C24130 + C139442 * C24464) * C139300 +
                                  (C307 * C24128 + C139442 * C24462) * C5913) *
                                     C139588 +
                                 ((C307 * C5918 + C139442 * C6096) * C139300 +
                                  (C307 * C5915 + C139442 * C6093) * C5913) *
                                     C92451) *
                                    C139575 +
                                (((C307 * C24131 + C139442 * C24465) * C139300 +
                                  (C307 * C24129 + C139442 * C24463) * C5913) *
                                     C139588 +
                                 ((C307 * C5919 + C139442 * C6097) * C139300 +
                                  (C307 * C5916 + C139442 * C6094) * C5913) *
                                     C92451) *
                                    C47029) *
                                   C139339 * C5912)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139442 * C308) * C5230 +
             (C307 * C116 + C139442 * C314) * C5225 - C337 * C5231 -
             C338 * C5226 + C339 * C5232 + C340 * C5227) *
                C92451 +
            (C41942 + C41943 - C41944 - C41945 + C41946 + C41947) * C139588) *
               C47029 +
           ((C337 * C5230 + C338 * C5225 - C339 * C5231 - C340 * C5226 +
             C341 * C5232 + C342 * C5227) *
                C92451 +
            (C41948 + C41949 - C41950 - C41951 + C41952 + C41953) * C139588) *
               C139575) *
              C139339 * C5228 +
          (((C1150 * C5231 -
             ((C307 * C841 + C139442 * C1125) * C5225 +
              (C307 * C831 + C139442 * C1118) * C5230) +
             C1151 * C5226 - C1152 * C5232 - C1153 * C5227) *
                C92451 +
            (C4566 * C5231 - (C35458 * C5225 + C35459 * C5230) + C4567 * C5226 -
             C4568 * C5232 - C4569 * C5227) *
                C139588) *
               C47029 +
           ((C1152 * C5231 - (C1151 * C5225 + C1150 * C5230) + C1153 * C5226 -
             C2944 * C5232 - C2945 * C5227) *
                C92451 +
            (C4568 * C5231 - (C4567 * C5225 + C4566 * C5230) + C4569 * C5226 -
             (C307 * C4226 + C139442 * C4552) * C5232 -
             (C307 * C4234 + C139442 * C4556) * C5227) *
                C139588) *
               C139575) *
              C139339 * C139377)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((((C307 * C107 + C139442 * C308) * C5913 +
              (C307 * C116 + C139442 * C314) * C139300) *
                 C92451 +
             (C38036 + C38037) * C139588) *
                C47029 +
            ((C337 * C5913 + C338 * C139300) * C92451 +
             (C38038 + C38039) * C139588) *
                C139575) *
               C1761 -
           (((C38040 + C38041) * C139588 + (C38039 + C38038) * C92451) *
                C139575 +
            ((C38042 + C38043) * C139588 + (C38037 + C38036) * C92451) *
                C47029) *
               C1762 +
           (((C38043 + C38042) * C92451 + (C43656 + C43657) * C139588) *
                C47029 +
            ((C38041 + C38040) * C92451 + (C43652 + C43653) * C139588) *
                C139575) *
               C1763) *
              C5228 +
          ((((C38044 + C38045) * C92451 + (C38056 + C38057) * C139588) *
                C47029 +
            ((C38050 + C38051) * C92451 + (C38052 + C38053) * C139588) *
                C139575) *
               C1762 -
           (((C38051 + C38050) * C139588 +
             (C1151 * C139300 + C1150 * C5913) * C92451) *
                C139575 +
            ((C38045 + C38044) * C139588 +
             ((C307 * C841 + C139442 * C1125) * C139300 +
              (C307 * C831 + C139442 * C1118) * C5913) *
                 C92451) *
                C47029) *
               C1761 -
           ((((C307 * C26832 + C139442 * C27046) * C139300 +
              (C307 * C26830 + C139442 * C27044) * C5913) *
                 C139588 +
             (C38053 + C38052) * C92451) *
                C139575 +
            (((C307 * C26833 + C139442 * C27047) * C139300 +
              (C307 * C26831 + C139442 * C27045) * C5913) *
                 C139588 +
             (C38057 + C38056) * C92451) *
                C47029) *
               C1763) *
              C139377)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[97] +=
        (-std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139442 * C308) * C5976 +
            (C307 * C182 + C139442 * C394) * C5909 -
            (C307 * C831 + C139442 * C1118) * C5977 -
            (C307 * C939 + C139442 * C1231) * C5910 +
            (C307 * C832 + C139442 * C1121) * C5978 +
            (C307 * C940 + C139442 * C1232) * C5911 -
            (C307 * C5916 + C139442 * C6094) * C5979 -
            (C307 * C5982 + C139442 * C6148) * C5912) *
               C92451 +
           (C32483 * C5976 + C32604 * C5909 - C35459 * C5977 - C35606 * C5910 +
            C41044 * C5978 + C41153 * C5911 -
            (C307 * C24129 + C139442 * C24463) * C5979 -
            (C307 * C24247 + C139442 * C24564) * C5912) *
               C139588) *
              C47029 +
          ((C337 * C5976 + C413 * C5909 - C1150 * C5977 - C1256 * C5910 +
            C1154 * C5978 + C1257 * C5911 -
            (C307 * C5915 + C139442 * C6093) * C5979 -
            (C307 * C5981 + C139442 * C6149) * C5912) *
               C92451 +
           (C2086 * C5976 + C2188 * C5909 - C4566 * C5977 - C4682 * C5910 +
            C31415 * C5978 + C31522 * C5911 -
            (C307 * C24128 + C139442 * C24462) * C5979 -
            (C307 * C24246 + C139442 * C24565) * C5912) *
               C139588) *
              C139575) *
         C139300 * C139339) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139442 * C308) * C5307 +
             (C307 * C182 + C139442 * C394) * C5228 -
             (C307 * C831 + C139442 * C1118) * C5308 -
             (C307 * C939 + C139442 * C1231) * C139377) *
                C92451 +
            (C38156 + C38157 - C38158 - C38159) * C139588) *
               C47029 +
           ((C5532 + C5533 - C5534 - C5535) * C92451 + C40124 * C139588) *
               C139575) *
              C5225 +
          (((C5534 - (C5533 + C5532) + C5535) * C92451 + C40125 * C139588) *
               C47029 +
           ((C5538 - (C5537 + C5536) + C5539) * C92451 +
            (C8275 - (C8276 + C8277) + C8278) * C139588) *
               C139575) *
              C5226 +
          ((C5546 * C92451 + (C8277 + C8276 - C8275 - C8278) * C139588) *
               C47029 +
           ((C5542 + C5541 - C5540 - C5543) * C92451 +
            (C3692 * C5307 + C3773 * C5228 -
             (C307 * C4226 + C139442 * C4552) * C5308 -
             (C307 * C4340 + C139442 * C4670) * C139377) *
                C139588) *
               C139575) *
              C5227) *
         C139339) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139442 * C308) * C5307 +
             (C307 * C182 + C139442 * C394) * C5228 -
             (C307 * C831 + C139442 * C1118) * C5308 -
             (C307 * C939 + C139442 * C1231) * C139377) *
                C92451 +
            (C38156 + C38157 - C38158 - C38159) * C139588) *
               C47029 +
           ((C5532 + C5533 - C5534 - C5535) * C92451 + C40124 * C139588) *
               C139575) *
              C139300 * C1761 +
          (((C38158 - (C38157 + C38156) + C38159) * C92451 +
            (C38160 - (C38161 + C38162) + C38170) * C139588) *
               C47029 +
           (C40125 * C92451 + (C38165 - (C38166 + C38167) + C38168) * C139588) *
               C139575) *
              C139300 * C1762 +
          (((C38162 + C38161 - C38160 - C38170) * C92451 +
            (C43654 * C5307 + C43729 * C5228 -
             (C307 * C26831 + C139442 * C27045) * C5308 -
             (C307 * C26905 + C139442 * C27115) * C139377) *
                C139588) *
               C47029 +
           ((C38167 + C38166 - C38165 - C38168) * C92451 +
            (C32487 * C5307 + C32606 * C5228 -
             (C307 * C26830 + C139442 * C27044) * C5308 -
             (C307 * C26904 + C139442 * C27114) * C139377) *
                C139588) *
               C139575) *
              C139300 * C1763)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[97] +=
        (-std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139442 * C308) * C244 +
             (C307 * C245 + C139442 * C474) * C139339) *
                C92451 +
            (C32483 * C244 + C32719 * C139339) * C139588) *
               C47029 +
           ((C481 + C497) * C92451 + (C30741 + C30742) * C139588) * C139575) *
              C5909 -
          (((C31622 + C31623) * C139588 + (C1363 + C1351) * C92451) * C139575 +
           ((C35751 * C139339 + C35459 * C244) * C139588 +
            ((C307 * C1029 + C139442 * C1339) * C139339 +
             (C307 * C831 + C139442 * C1118) * C244) *
                C92451) *
               C47029) *
              C5910 +
          ((((C307 * C832 + C139442 * C1121) * C244 +
             (C307 * C1030 + C139442 * C1340) * C139339) *
                C92451 +
            (C41044 * C244 + C41255 * C139339) * C139588) *
               C47029 +
           ((C1352 + C1364) * C92451 + (C31624 + C31628) * C139588) * C139575) *
              C5911 -
          ((((C307 * C24354 + C139442 * C24665) * C139339 +
             (C307 * C24128 + C139442 * C24462) * C244) *
                C139588 +
            ((C307 * C6037 + C139442 * C6202) * C139339 +
             (C307 * C5915 + C139442 * C6093) * C244) *
                C92451) *
               C139575 +
           (((C307 * C24355 + C139442 * C24664) * C139339 +
             (C307 * C24129 + C139442 * C24463) * C244) *
                C139588 +
            ((C307 * C6038 + C139442 * C6203) * C139339 +
             (C307 * C5916 + C139442 * C6094) * C244) *
                C92451) *
               C47029) *
              C5912) *
         C139300) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((((C307 * C107 + C139442 * C308) * C244 +
              (C307 * C245 + C139442 * C474) * C139339) *
                 C92451 +
             (C32483 * C244 + C32719 * C139339) * C139588) *
                C47029 +
            ((C481 + C497) * C92451 + (C30741 + C30742) * C139588) * C139575) *
               C5228 -
           (((C31622 + C31623) * C139588 + (C1363 + C1351) * C92451) * C139575 +
            ((C35751 * C139339 + C35459 * C244) * C139588 +
             ((C307 * C1029 + C139442 * C1339) * C139339 +
              (C307 * C831 + C139442 * C1118) * C244) *
                 C92451) *
                C47029) *
               C139377) *
              C5225 +
          ((((C1351 + C1363) * C92451 + (C31623 + C31622) * C139588) * C47029 +
            ((C1348 + C1362) * C92451 + (C33653 + C33654) * C139588) *
                C139575) *
               C139377 -
           (((C30743 + C30744) * C139588 + (C498 + C484) * C92451) * C139575 +
            ((C30742 + C30741) * C139588 + (C497 + C481) * C92451) * C47029) *
               C5228) *
              C5226 +
          (((C501 * C92451 + (C30744 + C30743) * C139588) * C47029 +
            ((C489 + C499) * C92451 + (C30745 + C30746) * C139588) * C139575) *
               C5228 -
           ((((C307 * C4446 + C139442 * C4786) * C139339 +
              (C307 * C4226 + C139442 * C4552) * C244) *
                 C139588 +
             (C3121 + C3116) * C92451) *
                C139575 +
            ((C33654 + C33653) * C139588 + C3115 * C92451) * C47029) *
               C139377) *
              C5227)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139442 * C308) * C1960 +
             (C307 * C245 + C139442 * C474) * C1761 - C32483 * C1961 -
             C32719 * C1762 + C32486 * C1962 + C32720 * C1763) *
                C92451 +
            (C32483 * C1960 + C32719 * C1761 - C32486 * C1961 - C32720 * C1762 +
             C43654 * C1962 + C43801 * C1763) *
                C139588) *
               C47029 +
           ((C2278 + C2279 - C2280 - C2298 + C2283 + C2299) * C92451 +
            (C32712 + C32713 - C32714 - C32715 + C32716 + C32722) * C139588) *
               C139575) *
              C5228 +
          (((C35459 * C1961 -
             ((C307 * C1029 + C139442 * C1339) * C1761 +
              (C307 * C831 + C139442 * C1118) * C1960) +
             C35751 * C1762 - C38054 * C1962 - C38271 * C1763) *
                C92451 +
            (C38054 * C1961 - (C35751 * C1761 + C35459 * C1960) +
             C38271 * C1762 - (C307 * C26831 + C139442 * C27045) * C1962 -
             (C307 * C26975 + C139442 * C27182) * C1763) *
                C139588) *
               C47029 +
           ((C4566 * C1961 - (C1359 * C1761 + C1150 * C1960) + C4798 * C1762 -
             C35460 * C1962 - C35752 * C1763) *
                C92451 +
            (C35460 * C1961 - (C4798 * C1761 + C4566 * C1960) + C35752 * C1762 -
             (C307 * C26830 + C139442 * C27044) * C1962 -
             (C307 * C26974 + C139442 * C27183) * C1763) *
                C139588) *
               C139575) *
              C139377) *
         C139300) /
            (p * q * std::sqrt(p + q));
    d2eezx[97] +=
        (-std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1767 + C139588 * C2376) *
                C5913 +
            (C92849 * C116 + C92451 * C561 + C92850 * C1777 + C139588 * C2383) *
                C139300) *
               C47029 +
           ((C92877 + C92876) * C5913 + (C92879 + C92878) * C139300) *
               C139575) *
              C139442 * C139339 * C5909 -
          (((C93761 + C93760) * C139300 + (C93759 + C93758) * C5913) * C139575 +
           ((C92850 * C4230 + C139588 * C4903 + C92849 * C841 +
             C92451 * C1447) *
                C139300 +
            (C92850 * C4223 + C139588 * C4899 + C92849 * C831 +
             C92451 * C1440) *
                C5913) *
               C47029) *
              C139442 * C139339 * C5910 +
          (((C92849 * C832 + C92451 * C1443 + C92850 * C8754 +
             C139588 * C9234) *
                C5913 +
            (C92849 * C847 + C92451 * C1451 + C92850 * C8757 +
             C139588 * C9237) *
                C139300) *
               C47029 +
           ((C93763 + C93762) * C5913 + (C93765 + C93764) * C139300) *
               C139575) *
              C139442 * C139339 * C5911 -
          (((C92850 * C24130 + C139588 * C24766 + C92849 * C5918 +
             C92451 * C6258) *
                C139300 +
            (C92850 * C24128 + C139588 * C24764 + C92849 * C5915 +
             C92451 * C6255) *
                C5913) *
               C139575 +
           ((C92850 * C24131 + C139588 * C24767 + C92849 * C5919 +
             C92451 * C6259) *
                C139300 +
            (C92850 * C24129 + C139588 * C24765 + C92849 * C5916 +
             C92451 * C6256) *
                C5913) *
               C47029) *
              C139442 * C139339 * C5912)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1767 + C139588 * C2376) *
                C5230 +
            (C92849 * C116 + C92451 * C561 + C92850 * C1777 + C139588 * C2383) *
                C5225 -
            (C92876 + C92877) * C5231 - (C92878 + C92879) * C5226 +
            (C92880 + C92881) * C5232 + (C92882 + C92883) * C5227) *
               C47029 +
           ((C92877 + C92876) * C5230 + (C92879 + C92878) * C5225 -
            (C92881 + C92880) * C5231 - (C92883 + C92882) * C5226 +
            (C92885 + C92884) * C5232 + (C92887 + C92886) * C5227) *
               C139575) *
              C139442 * C139339 * C5228 +
          (((C93758 + C93759) * C5231 -
            ((C92850 * C4230 + C139588 * C4903 + C92849 * C841 +
              C92451 * C1447) *
                 C5225 +
             (C92850 * C4223 + C139588 * C4899 + C92849 * C831 +
              C92451 * C1440) *
                 C5230) +
            (C93760 + C93761) * C5226 - (C95706 + C95707) * C5232 -
            (C95708 + C95709) * C5227) *
               C47029 +
           ((C95707 + C95706) * C5231 -
            ((C93761 + C93760) * C5225 + (C93759 + C93758) * C5230) +
            (C95709 + C95708) * C5226 -
            (C92850 * C4226 + C139588 * C4902 + C92849 * C830 +
             C92451 * C1442) *
                C5232 -
            (C92850 * C4234 + C139588 * C4906 + C92849 * C843 +
             C92451 * C1450) *
                C5227) *
               C139575) *
              C139442 * C139339 * C139377)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C92849 * C107 + C92451 * C555 + C92850 * C1767 +
              C139588 * C2376) *
                 C5913 +
             (C92849 * C116 + C92451 * C561 + C92850 * C1777 +
              C139588 * C2383) *
                 C139300) *
                C47029 +
            ((C92877 + C92876) * C5913 + (C92879 + C92878) * C139300) *
                C139575) *
               C139442 * C1761 -
           (((C94787 + C94786) * C139300 + (C94785 + C94784) * C5913) *
                C139575 +
            ((C92850 * C1783 + C139588 * C2387 + C92849 * C1777 +
              C92451 * C2383) *
                 C139300 +
             (C92850 * C1768 + C139588 * C2379 + C92849 * C1767 +
              C92451 * C2376) *
                 C5913) *
                C47029) *
               C139442 * C1762 +
           (((C92849 * C1768 + C92451 * C2379 + C92850 * C10815 +
              C139588 * C11155) *
                 C5913 +
             (C92849 * C1783 + C92451 * C2387 + C92850 * C10818 +
              C139588 * C11158) *
                 C139300) *
                C47029 +
            ((C94789 + C94788) * C5913 + (C94791 + C94790) * C139300) *
                C139575) *
               C139442 * C1763) *
              C5228 +
          ((((C92849 * C4223 + C92451 * C4899 + C92850 * C6442 +
              C139588 * C6922) *
                 C5913 +
             (C92849 * C4230 + C92451 * C4903 + C92850 * C6445 +
              C139588 * C6925) *
                 C139300) *
                C47029 +
            ((C97767 + C97766) * C5913 + (C97769 + C97768) * C139300) *
                C139575) *
               C139442 * C1762 -
           (((C93761 + C93760) * C139300 + (C93759 + C93758) * C5913) *
                C139575 +
            ((C92850 * C4230 + C139588 * C4903 + C92849 * C841 +
              C92451 * C1447) *
                 C139300 +
             (C92850 * C4223 + C139588 * C4899 + C92849 * C831 +
              C92451 * C1440) *
                 C5913) *
                C47029) *
               C139442 * C1761 -
           (((C92850 * C26832 + C139588 * C27252 + C92849 * C6444 +
              C92451 * C6924) *
                 C139300 +
             (C92850 * C26830 + C139588 * C27250 + C92849 * C6441 +
              C92451 * C6921) *
                 C5913) *
                C139575 +
            ((C92850 * C26833 + C139588 * C27253 + C92849 * C6445 +
              C92451 * C6925) *
                 C139300 +
             (C92850 * C26831 + C139588 * C27251 + C92849 * C6442 +
              C92451 * C6922) *
                 C5913) *
                C47029) *
               C139442 * C1763) *
              C139377)) /
            (p * q * std::sqrt(p + q));
    d2eezy[97] +=
        (-std::pow(Pi, 2.5) *
         (((C92849 * C107 + C92451 * C555 + C92850 * C1767 + C139588 * C2376) *
               C5976 +
           (C92849 * C182 + C92451 * C641 + C92850 * C1873 + C139588 * C2492) *
               C5909 -
           (C92850 * C4223 + C139588 * C4899 + C92849 * C831 + C92451 * C1440) *
               C5977 -
           (C92850 * C4337 + C139588 * C5017 + C92849 * C939 + C92451 * C1553) *
               C5910 +
           (C92849 * C832 + C92451 * C1443 + C92850 * C8754 + C139588 * C9234) *
               C5978 +
           (C92849 * C940 + C92451 * C1554 + C92850 * C8840 + C139588 * C9312) *
               C5911 -
           (C92850 * C24129 + C139588 * C24765 + C92849 * C5916 +
            C92451 * C6256) *
               C5979 -
           (C92850 * C24247 + C139588 * C24876 + C92849 * C5982 +
            C92451 * C6310) *
               C5912) *
              C47029 +
          ((C92877 + C92876) * C5976 + (C92966 + C92967) * C5909 -
           (C93759 + C93758) * C5977 - (C93872 + C93873) * C5910 +
           (C93763 + C93762) * C5978 + (C93874 + C93875) * C5911 -
           (C92850 * C24128 + C139588 * C24764 + C92849 * C5915 +
            C92451 * C6255) *
               C5979 -
           (C92850 * C24246 + C139588 * C24877 + C92849 * C5981 +
            C92451 * C6311) *
               C5912) *
              C139575) *
         C139442 * C139300 * C139339) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1767 + C139588 * C2376) *
                C5307 +
            (C92849 * C182 + C92451 * C641 + C92850 * C1873 + C139588 * C2492) *
                C5228 -
            (C92850 * C4223 + C139588 * C4899 + C92849 * C831 +
             C92451 * C1440) *
                C5308 -
            (C92850 * C4337 + C139588 * C5017 + C92849 * C939 +
             C92451 * C1553) *
                C139377) *
               C47029 +
           ((C92877 + C92876) * C5307 + (C92966 + C92967) * C5228 -
            (C93759 + C93758) * C5308 - (C93872 + C93873) * C139377) *
               C139575) *
              C139442 * C5225 +
          (((C93758 + C93759) * C5308 -
            ((C92967 + C92966) * C5228 + (C92876 + C92877) * C5307) +
            (C93873 + C93872) * C139377) *
               C47029 +
           ((C95707 + C95706) * C5308 -
            ((C92968 + C92969) * C5228 + (C92881 + C92880) * C5307) +
            (C95812 + C95813) * C139377) *
               C139575) *
              C139442 * C5226 +
          (((C92880 + C92881) * C5307 + (C92969 + C92968) * C5228 -
            (C95706 + C95707) * C5308 - (C95813 + C95812) * C139377) *
               C47029 +
           ((C92885 + C92884) * C5307 + (C92970 + C92971) * C5228 -
            (C92850 * C4226 + C139588 * C4902 + C92849 * C830 +
             C92451 * C1442) *
                C5308 -
            (C92850 * C4340 + C139588 * C5020 + C92849 * C943 +
             C92451 * C1559) *
                C139377) *
               C139575) *
              C139442 * C5227) *
         C139339) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1767 + C139588 * C2376) *
                C5307 +
            (C92849 * C182 + C92451 * C641 + C92850 * C1873 + C139588 * C2492) *
                C5228 -
            (C92850 * C4223 + C139588 * C4899 + C92849 * C831 +
             C92451 * C1440) *
                C5308 -
            (C92850 * C4337 + C139588 * C5017 + C92849 * C939 +
             C92451 * C1553) *
                C139377) *
               C47029 +
           ((C92877 + C92876) * C5307 + (C92966 + C92967) * C5228 -
            (C93759 + C93758) * C5308 - (C93872 + C93873) * C139377) *
               C139575) *
              C139442 * C139300 * C1761 +
          (((C92849 * C4223 + C92451 * C4899 + C92850 * C6442 +
             C139588 * C6922) *
                C5308 -
            ((C92850 * C1874 + C139588 * C2493 + C92849 * C1873 +
              C92451 * C2492) *
                 C5228 +
             (C92850 * C1768 + C139588 * C2379 + C92849 * C1767 +
              C92451 * C2376) *
                 C5307) +
            (C92849 * C4337 + C92451 * C5017 + C92850 * C6528 +
             C139588 * C7000) *
                C139377) *
               C47029 +
           ((C97767 + C97766) * C5308 -
            ((C94899 + C94898) * C5228 + (C94785 + C94784) * C5307) +
            (C97904 + C97905) * C139377) *
               C139575) *
              C139442 * C139300 * C1762 +
          (((C92849 * C1768 + C92451 * C2379 + C92850 * C10815 +
             C139588 * C11155) *
                C5307 +
            (C92849 * C1874 + C92451 * C2493 + C92850 * C10877 +
             C139588 * C11211) *
                C5228 -
            (C92850 * C26831 + C139588 * C27251 + C92849 * C6442 +
             C92451 * C6922) *
                C5308 -
            (C92850 * C26905 + C139588 * C27321 + C92849 * C6528 +
             C92451 * C7000) *
                C139377) *
               C47029 +
           ((C94789 + C94788) * C5307 + (C94900 + C94901) * C5228 -
            (C92850 * C26830 + C139588 * C27250 + C92849 * C6441 +
             C92451 * C6921) *
                C5308 -
            (C92850 * C26904 + C139588 * C27320 + C92849 * C6527 +
             C92451 * C7001) *
                C139377) *
               C139575) *
              C139442 * C139300 * C1763)) /
            (p * q * std::sqrt(p + q));
    d2eezz[97] +=
        (-std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1767 + C139588 * C2376) *
                C244 +
            (C92849 * C245 + C92451 * C719 + C92850 * C1965 + C139588 * C2591) *
                C139339) *
               C47029 +
           ((C92877 + C92876) * C244 + (C93050 + C93051) * C139339) * C139575) *
              C139442 * C5909 -
          (((C93982 + C93983) * C139339 + (C93759 + C93758) * C244) * C139575 +
           ((C92850 * C4443 + C139588 * C5133 + C92849 * C1029 +
             C92451 * C1661) *
                C139339 +
            (C92850 * C4223 + C139588 * C4899 + C92849 * C831 +
             C92451 * C1440) *
                C244) *
               C47029) *
              C139442 * C5910 +
          (((C92849 * C832 + C92451 * C1443 + C92850 * C8754 +
             C139588 * C9234) *
                C244 +
            (C92849 * C1030 + C92451 * C1662 + C92850 * C8920 +
             C139588 * C9389) *
                C139339) *
               C47029 +
           ((C93763 + C93762) * C244 + (C93984 + C93985) * C139339) * C139575) *
              C139442 * C5911 -
          (((C92850 * C24354 + C139588 * C24980 + C92849 * C6037 +
             C92451 * C6364) *
                C139339 +
            (C92850 * C24128 + C139588 * C24764 + C92849 * C5915 +
             C92451 * C6255) *
                C244) *
               C139575 +
           ((C92850 * C24355 + C139588 * C24979 + C92849 * C6038 +
             C92451 * C6365) *
                C139339 +
            (C92850 * C24129 + C139588 * C24765 + C92849 * C5916 +
             C92451 * C6256) *
                C244) *
               C47029) *
              C139442 * C5912) *
         C139300) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C92849 * C107 + C92451 * C555 + C92850 * C1767 +
              C139588 * C2376) *
                 C244 +
             (C92849 * C245 + C92451 * C719 + C92850 * C1965 +
              C139588 * C2591) *
                 C139339) *
                C47029 +
            ((C92877 + C92876) * C244 + (C93050 + C93051) * C139339) *
                C139575) *
               C139442 * C5228 -
           (((C93982 + C93983) * C139339 + (C93759 + C93758) * C244) * C139575 +
            ((C92850 * C4443 + C139588 * C5133 + C92849 * C1029 +
              C92451 * C1661) *
                 C139339 +
             (C92850 * C4223 + C139588 * C4899 + C92849 * C831 +
              C92451 * C1440) *
                 C244) *
                C47029) *
               C139442 * C139377) *
              C5225 +
          ((((C93758 + C93759) * C244 + (C93983 + C93982) * C139339) * C47029 +
            ((C95707 + C95706) * C244 + (C95916 + C95917) * C139339) *
                C139575) *
               C139442 * C139377 -
           (((C93052 + C93053) * C139339 + (C92881 + C92880) * C244) * C139575 +
            ((C93051 + C93050) * C139339 + (C92876 + C92877) * C244) * C47029) *
               C139442 * C5228) *
              C5226 +
          ((((C92880 + C92881) * C244 + (C93053 + C93052) * C139339) * C47029 +
            ((C92885 + C92884) * C244 + (C93054 + C93055) * C139339) *
                C139575) *
               C139442 * C5228 -
           (((C92850 * C4446 + C139588 * C5136 + C92849 * C1033 +
              C92451 * C1665) *
                 C139339 +
             (C92850 * C4226 + C139588 * C4902 + C92849 * C830 +
              C92451 * C1442) *
                 C244) *
                C139575 +
            ((C95917 + C95916) * C139339 + (C95706 + C95707) * C244) * C47029) *
               C139442 * C139377) *
              C5227)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1767 + C139588 * C2376) *
                C1960 +
            (C92849 * C245 + C92451 * C719 + C92850 * C1965 + C139588 * C2591) *
                C1761 -
            (C92850 * C1768 + C139588 * C2379 + C92849 * C1767 +
             C92451 * C2376) *
                C1961 -
            (C92850 * C1966 + C139588 * C2592 + C92849 * C1965 +
             C92451 * C2591) *
                C1762 +
            (C92849 * C1768 + C92451 * C2379 + C92850 * C10815 +
             C139588 * C11155) *
                C1962 +
            (C92849 * C1966 + C92451 * C2592 + C92850 * C10937 +
             C139588 * C11262) *
                C1763) *
               C47029 +
           ((C92877 + C92876) * C1960 + (C93050 + C93051) * C1761 -
            (C94785 + C94784) * C1961 - (C95008 + C95009) * C1762 +
            (C94789 + C94788) * C1962 + (C95010 + C95011) * C1763) *
               C139575) *
              C139442 * C5228 +
          (((C92849 * C4223 + C92451 * C4899 + C92850 * C6442 +
             C139588 * C6922) *
                C1961 -
            ((C92850 * C4443 + C139588 * C5133 + C92849 * C1029 +
              C92451 * C1661) *
                 C1761 +
             (C92850 * C4223 + C139588 * C4899 + C92849 * C831 +
              C92451 * C1440) *
                 C1960) +
            (C92849 * C4443 + C92451 * C5133 + C92850 * C6608 +
             C139588 * C7077) *
                C1762 -
            (C92850 * C26831 + C139588 * C27251 + C92849 * C6442 +
             C92451 * C6922) *
                C1962 -
            (C92850 * C26975 + C139588 * C27388 + C92849 * C6608 +
             C92451 * C7077) *
                C1763) *
               C47029 +
           ((C97767 + C97766) * C1961 -
            ((C93982 + C93983) * C1761 + (C93759 + C93758) * C1960) +
            (C98040 + C98041) * C1762 -
            (C92850 * C26830 + C139588 * C27250 + C92849 * C6441 +
             C92451 * C6921) *
                C1962 -
            (C92850 * C26974 + C139588 * C27389 + C92849 * C6607 +
             C92451 * C7078) *
                C1763) *
               C139575) *
              C139442 * C139377) *
         C139300) /
            (p * q * std::sqrt(p + q));
    d2eexx[98] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139575 * C114) *
                 C137108 +
             (C47033 * C116 + C47029 * C125 + C47034 * C117 + C139575 * C126) *
                 C139552 -
             (C47034 * C109 + C139575 * C115 + C47033 * C108 + C47029 * C114) *
                 C137101 -
             (C47034 * C118 + C139575 * C127 + C47033 * C117 + C47029 * C126) *
                 C139305) *
                C139442 * C92451 +
            ((C94116 + C94117) * C137108 + (C94118 + C94119) * C139552 -
             (C94120 + C94121) * C137101 - (C94122 + C94123) * C139305) *
                C139442 * C139588) *
               C139561 +
           (((C94121 + C94120) * C137101 -
             ((C94119 + C94118) * C139552 + (C94117 + C94116) * C137108) +
             (C94123 + C94122) * C139305) *
                C139442 * C92451 +
            ((C94124 + C94125) * C137101 -
             ((C94126 + C94127) * C139552 + (C94128 + C94129) * C137108) +
             (C94130 + C94131) * C139305) *
                C139442 * C139588) *
               C139403) *
              C5228 +
          ((((C47773 + C47772) * C137101 -
             ((C47771 + C47770) * C139552 + (C47769 + C47768) * C137108) +
             (C47775 + C47774) * C139305) *
                C139442 * C92451 +
            ((C51576 + C51577) * C137101 -
             ((C51578 + C51579) * C139552 + (C51580 + C51581) * C137108) +
             (C51582 + C51583) * C139305) *
                C139442 * C139588) *
               C139561 +
           (((C51581 + C51580) * C137108 + (C51579 + C51578) * C139552 -
             (C51577 + C51576) * C137101 - (C51583 + C51582) * C139305) *
                C139442 * C92451 +
            ((C54278 + C54279) * C137108 + (C54280 + C54281) * C139552 -
             (C47034 * C6440 + C139575 * C6446 + C47033 * C6441 +
              C47029 * C6447) *
                 C137101 -
             (C47034 * C6443 + C139575 * C6449 + C47033 * C6444 +
              C47029 * C6450) *
                 C139305) *
                C139442 * C139588) *
               C139403) *
              C139377)) /
        (p * q * std::sqrt(p + q));
    d2eexy[98] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139575 * C114) *
                 C5307 +
             (C47033 * C182 + C47029 * C188 + C47034 * C183 + C139575 * C189) *
                 C5228 -
             (C47769 + C47768) * C5308 - (C47898 + C47899) * C139377) *
                C139442 * C92451 +
            ((C94116 + C94117) * C5307 + (C94246 + C94247) * C5228 -
             (C51580 + C51581) * C5308 - (C51723 + C51722) * C139377) *
                C139442 * C139588) *
               C139552 +
           (((C47773 + C47772) * C5308 -
             ((C47034 * C184 + C139575 * C190 + C47033 * C183 + C47029 * C189) *
                  C5228 +
              (C47034 * C109 + C139575 * C115 + C47033 * C108 + C47029 * C114) *
                  C5307) +
             (C47902 + C47903) * C139377) *
                C139442 * C92451 +
            ((C51576 + C51577) * C5308 -
             ((C94248 + C94249) * C5228 + (C94120 + C94121) * C5307) +
             (C51725 + C51724) * C139377) *
                C139442 * C139588) *
               C139305) *
              C139561 +
          ((((C51581 + C51580) * C5308 -
             ((C94247 + C94246) * C5228 + (C94117 + C94116) * C5307) +
             (C51722 + C51723) * C139377) *
                C139442 * C92451 +
            ((C54278 + C54279) * C5308 -
             ((C94252 + C94253) * C5228 + (C94128 + C94129) * C5307) +
             (C54385 + C54384) * C139377) *
                C139442 * C139588) *
               C139552 +
           (((C94121 + C94120) * C5307 + (C94249 + C94248) * C5228 -
             (C51577 + C51576) * C5308 - (C51724 + C51725) * C139377) *
                C139442 * C92451 +
            ((C94124 + C94125) * C5307 + (C94250 + C94251) * C5228 -
             (C47034 * C6440 + C139575 * C6446 + C47033 * C6441 +
              C47029 * C6447) *
                 C5308 -
             (C47034 * C6526 + C139575 * C6529 + C47033 * C6527 +
              C47029 * C6530) *
                 C139377) *
                C139442 * C139588) *
               C139305) *
              C139403)) /
        (p * q * std::sqrt(p + q));
    d2eexz[98] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139575 * C114) *
                 C3607 +
             (C47033 * C245 + C47029 * C251 + C47034 * C246 + C139575 * C252) *
                 C139561 -
             (C94117 + C94116) * C3608 - (C94368 + C94369) * C139403) *
                C139442 * C92451 +
            ((C94116 + C94117) * C3607 + (C94369 + C94368) * C139561 -
             (C94128 + C94129) * C3608 - (C94371 + C94370) * C139403) *
                C139442 * C139588) *
               C5228 +
           (((C51581 + C51580) * C3608 -
             ((C48021 + C48020) * C139561 + (C47769 + C47768) * C3607) +
             (C51865 + C51864) * C139403) *
                C139442 * C92451 +
            ((C54278 + C54279) * C3608 -
             ((C51864 + C51865) * C139561 + (C51580 + C51581) * C3607) +
             (C54488 + C54489) * C139403) *
                C139442 * C139588) *
               C139377) *
              C139552 +
          ((((C94121 + C94120) * C3608 -
             ((C47034 * C247 + C139575 * C253 + C47033 * C246 + C47029 * C252) *
                  C139561 +
              (C47034 * C109 + C139575 * C115 + C47033 * C108 + C47029 * C114) *
                  C3607) +
             (C94372 + C94373) * C139403) *
                C139442 * C92451 +
            ((C94124 + C94125) * C3608 -
             ((C94373 + C94372) * C139561 + (C94120 + C94121) * C3607) +
             (C94375 + C94374) * C139403) *
                C139442 * C139588) *
               C5228 +
           (((C47773 + C47772) * C3607 + (C48024 + C48025) * C139561 -
             (C51577 + C51576) * C3608 - (C51867 + C51866) * C139403) *
                C139442 * C92451 +
            ((C51576 + C51577) * C3607 + (C51866 + C51867) * C139561 -
             (C47034 * C6440 + C139575 * C6446 + C47033 * C6441 +
              C47029 * C6447) *
                 C3608 -
             (C47034 * C6606 + C139575 * C6609 + C47033 * C6607 +
              C47029 * C6610) *
                 C139403) *
                C139442 * C139588) *
               C139377) *
              C139305)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[98] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((((C307 * C107 + C139442 * C308) * C137108 +
                        (C307 * C116 + C139442 * C314) * C139552 -
                        C337 * C137101 - C338 * C139305) *
                           C92451 +
                       (C39974 + C39975 - C39976 - C39977) * C139588) *
                          C47029 +
                      ((C337 * C137108 + C338 * C139552 - C339 * C137101 -
                        C340 * C139305) *
                           C92451 +
                       (C39978 + C39979 - C39980 - C39981) * C139588) *
                          C139575) *
                         C139561 +
                     (((C39976 - (C39975 + C39974) + C39977) * C92451 +
                       (C45574 - (C45575 + C45576) + C45577) * C139588) *
                          C47029 +
                      ((C39980 - (C39979 + C39978) + C39981) * C92451 +
                       (C45578 - (C45579 + C45580) + C45581) * C139588) *
                          C139575) *
                         C139403) *
                        C5228 +
                    ((((C1150 * C137101 -
                        ((C307 * C841 + C139442 * C1125) * C139552 +
                         (C307 * C831 + C139442 * C1118) * C137108) +
                        C1151 * C139305) *
                           C92451 +
                       (C39982 - (C39983 + C39984) + C39985) * C139588) *
                          C47029 +
                      ((C1152 * C137101 - (C1151 * C139552 + C1150 * C137108) +
                        C1153 * C139305) *
                           C92451 +
                       (C39986 - (C39987 + C39988) + C39989) * C139588) *
                          C139575) *
                         C139561 +
                     (((C39984 + C39983 - C39982 - C39985) * C92451 +
                       (C38054 * C137108 + C38055 * C139552 - C35460 * C137101 -
                        C35461 * C139305) *
                           C139588) *
                          C47029 +
                      ((C39988 + C39987 - C39986 - C39989) * C92451 +
                       (C35460 * C137108 + C35461 * C139552 -
                        (C307 * C6440 + C139442 * C6686) * C137101 -
                        (C307 * C6443 + C139442 * C6689) * C139305) *
                           C139588) *
                          C139575) *
                         C139403) *
                        C139377)) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[98] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C307 * C107 + C139442 * C308) * C5307 +
              (C307 * C182 + C139442 * C394) * C5228 -
              (C307 * C831 + C139442 * C1118) * C5308 -
              (C307 * C939 + C139442 * C1231) * C139377) *
                 C92451 +
             (C38156 + C38157 - C38158 - C38159) * C139588) *
                C47029 +
            ((C5532 + C5533 - C5534 - C5535) * C92451 + C40124 * C139588) *
                C139575) *
               C139552 +
           (((C5534 - (C5533 + C5532) + C5535) * C92451 + C40125 * C139588) *
                C47029 +
            ((C5538 - (C5537 + C5536) + C5539) * C92451 +
             (C8275 - (C8276 + C8277) + C8278) * C139588) *
                C139575) *
               C139305) *
              C139561 +
          ((((C38158 - (C38157 + C38156) + C38159) * C92451 +
             (C38160 - (C38161 + C38162) + C38170) * C139588) *
                C47029 +
            (C40125 * C92451 +
             (C38165 - (C38166 + C38167) + C38168) * C139588) *
                C139575) *
               C139552 +
           ((C40124 * C92451 + (C38167 + C38166 - C38165 - C38168) * C139588) *
                C47029 +
            ((C8277 + C8276 - C8275 - C8278) * C92451 +
             (C2092 * C5307 + C2191 * C5228 -
              (C307 * C6440 + C139442 * C6686) * C5308 -
              (C307 * C6526 + C139442 * C6768) * C139377) *
                 C139588) *
                C139575) *
               C139305) *
              C139403)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[98] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((((C307 * C107 + C139442 * C308) * C3607 +
                        (C307 * C245 + C139442 * C474) * C139561 -
                        C32483 * C3608 - C32719 * C139403) *
                           C92451 +
                       (C32483 * C3607 + C32719 * C139561 - C32486 * C3608 -
                        C32720 * C139403) *
                           C139588) *
                          C47029 +
                      ((C3851 + C3852 - C3853 - C3854) * C92451 +
                       (C34598 + C34599 - C34600 - C34601) * C139588) *
                          C139575) *
                         C5228 +
                     (((C35459 * C3608 -
                        ((C307 * C1029 + C139442 * C1339) * C139561 +
                         (C307 * C831 + C139442 * C1118) * C3607) +
                        C35751 * C139403) *
                           C92451 +
                       (C38054 * C3608 - (C35751 * C139561 + C35459 * C3607) +
                        C38271 * C139403) *
                           C139588) *
                          C47029 +
                      ((C4788 - (C4789 + C4790) + C4800) * C92451 +
                       (C35746 - (C35747 + C35748) + C35753) * C139588) *
                          C139575) *
                         C139377) *
                        C139552 +
                    ((((C3853 - (C3852 + C3851) + C3854) * C92451 +
                       (C34600 - (C34599 + C34598) + C34601) * C139588) *
                          C47029 +
                      ((C3857 - (C3856 + C3855) + C3858) * C92451 +
                       (C34602 - (C34603 + C34604) + C34605) * C139588) *
                          C139575) *
                         C5228 +
                     (((C4790 + C4789 - C4788 - C4800) * C92451 +
                       (C35748 + C35747 - C35746 - C35753) * C139588) *
                          C47029 +
                      ((C4795 + C4794 - C4793 - C4801) * C92451 +
                       (C4568 * C3607 + C4799 * C139561 -
                        (C307 * C6440 + C139442 * C6686) * C3608 -
                        (C307 * C6606 + C139442 * C6845) * C139403) *
                           C139588) *
                          C139575) *
                         C139377) *
                        C139305)) /
                  (p * q * std::sqrt(p + q));
    d2eezx[98] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C92849 * C107 + C92451 * C555 + C92850 * C1767 +
              C139588 * C2376) *
                 C137108 +
             (C92849 * C116 + C92451 * C561 + C92850 * C1777 +
              C139588 * C2383) *
                 C139552 -
             (C92876 + C92877) * C137101 - (C92878 + C92879) * C139305) *
                C47029 +
            ((C92877 + C92876) * C137108 + (C92879 + C92878) * C139552 -
             (C92881 + C92880) * C137101 - (C92883 + C92882) * C139305) *
                C139575) *
               C139442 * C139561 +
           (((C94784 + C94785) * C137101 -
             ((C92850 * C1783 + C139588 * C2387 + C92849 * C1777 +
               C92451 * C2383) *
                  C139552 +
              (C92850 * C1768 + C139588 * C2379 + C92849 * C1767 +
               C92451 * C2376) *
                  C137108) +
             (C94786 + C94787) * C139305) *
                C47029 +
            ((C96637 + C96636) * C137101 -
             ((C94787 + C94786) * C139552 + (C94785 + C94784) * C137108) +
             (C96639 + C96638) * C139305) *
                C139575) *
               C139442 * C139403) *
              C5228 +
          ((((C93758 + C93759) * C137101 -
             ((C92850 * C4230 + C139588 * C4903 + C92849 * C841 +
               C92451 * C1447) *
                  C139552 +
              (C92850 * C4223 + C139588 * C4899 + C92849 * C831 +
               C92451 * C1440) *
                  C137108) +
             (C93760 + C93761) * C139305) *
                C47029 +
            ((C95707 + C95706) * C137101 -
             ((C93761 + C93760) * C139552 + (C93759 + C93758) * C137108) +
             (C95709 + C95708) * C139305) *
                C139575) *
               C139442 * C139561 +
           (((C92849 * C4223 + C92451 * C4899 + C92850 * C6442 +
              C139588 * C6922) *
                 C137108 +
             (C92849 * C4230 + C92451 * C4903 + C92850 * C6445 +
              C139588 * C6925) *
                 C139552 -
             (C97766 + C97767) * C137101 - (C97768 + C97769) * C139305) *
                C47029 +
            ((C97767 + C97766) * C137108 + (C97769 + C97768) * C139552 -
             (C92850 * C6440 + C139588 * C6920 + C92849 * C4225 +
              C92451 * C4901) *
                 C137101 -
             (C92850 * C6443 + C139588 * C6923 + C92849 * C4232 +
              C92451 * C4905) *
                 C139305) *
                C139575) *
               C139442 * C139403) *
              C139377)) /
        (p * q * std::sqrt(p + q));
    d2eezy[98] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C92849 * C107 + C92451 * C555 + C92850 * C1767 +
              C139588 * C2376) *
                 C5307 +
             (C92849 * C182 + C92451 * C641 + C92850 * C1873 +
              C139588 * C2492) *
                 C5228 -
             (C92850 * C4223 + C139588 * C4899 + C92849 * C831 +
              C92451 * C1440) *
                 C5308 -
             (C92850 * C4337 + C139588 * C5017 + C92849 * C939 +
              C92451 * C1553) *
                 C139377) *
                C47029 +
            ((C92877 + C92876) * C5307 + (C92966 + C92967) * C5228 -
             (C93759 + C93758) * C5308 - (C93872 + C93873) * C139377) *
                C139575) *
               C139442 * C139552 +
           (((C93758 + C93759) * C5308 -
             ((C92967 + C92966) * C5228 + (C92876 + C92877) * C5307) +
             (C93873 + C93872) * C139377) *
                C47029 +
            ((C95707 + C95706) * C5308 -
             ((C92968 + C92969) * C5228 + (C92881 + C92880) * C5307) +
             (C95812 + C95813) * C139377) *
                C139575) *
               C139442 * C139305) *
              C139561 +
          ((((C92849 * C4223 + C92451 * C4899 + C92850 * C6442 +
              C139588 * C6922) *
                 C5308 -
             ((C92850 * C1874 + C139588 * C2493 + C92849 * C1873 +
               C92451 * C2492) *
                  C5228 +
              (C92850 * C1768 + C139588 * C2379 + C92849 * C1767 +
               C92451 * C2376) *
                  C5307) +
             (C92849 * C4337 + C92451 * C5017 + C92850 * C6528 +
              C139588 * C7000) *
                 C139377) *
                C47029 +
            ((C97767 + C97766) * C5308 -
             ((C94899 + C94898) * C5228 + (C94785 + C94784) * C5307) +
             (C97904 + C97905) * C139377) *
                C139575) *
               C139442 * C139552 +
           (((C94784 + C94785) * C5307 + (C94898 + C94899) * C5228 -
             (C97766 + C97767) * C5308 - (C97905 + C97904) * C139377) *
                C47029 +
            ((C96637 + C96636) * C5307 + (C96742 + C96743) * C5228 -
             (C92850 * C6440 + C139588 * C6920 + C92849 * C4225 +
              C92451 * C4901) *
                 C5308 -
             (C92850 * C6526 + C139588 * C7002 + C92849 * C4339 +
              C92451 * C5019) *
                 C139377) *
                C139575) *
               C139442 * C139305) *
              C139403)) /
        (p * q * std::sqrt(p + q));
    d2eezz[98] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C92849 * C107 + C92451 * C555 + C92850 * C1767 +
              C139588 * C2376) *
                 C3607 +
             (C92849 * C245 + C92451 * C719 + C92850 * C1965 +
              C139588 * C2591) *
                 C139561 -
             (C92850 * C1768 + C139588 * C2379 + C92849 * C1767 +
              C92451 * C2376) *
                 C3608 -
             (C92850 * C1966 + C139588 * C2592 + C92849 * C1965 +
              C92451 * C2591) *
                 C139403) *
                C47029 +
            ((C92877 + C92876) * C3607 + (C93050 + C93051) * C139561 -
             (C94785 + C94784) * C3608 - (C95008 + C95009) * C139403) *
                C139575) *
               C139442 * C5228 +
           (((C92849 * C4223 + C92451 * C4899 + C92850 * C6442 +
              C139588 * C6922) *
                 C3608 -
             ((C92850 * C4443 + C139588 * C5133 + C92849 * C1029 +
               C92451 * C1661) *
                  C139561 +
              (C92850 * C4223 + C139588 * C4899 + C92849 * C831 +
               C92451 * C1440) *
                  C3607) +
             (C92849 * C4443 + C92451 * C5133 + C92850 * C6608 +
              C139588 * C7077) *
                 C139403) *
                C47029 +
            ((C97767 + C97766) * C3608 -
             ((C93982 + C93983) * C139561 + (C93759 + C93758) * C3607) +
             (C98040 + C98041) * C139403) *
                C139575) *
               C139442 * C139377) *
              C139552 +
          ((((C94784 + C94785) * C3608 -
             ((C93051 + C93050) * C139561 + (C92876 + C92877) * C3607) +
             (C95009 + C95008) * C139403) *
                C47029 +
            ((C96637 + C96636) * C3608 -
             ((C93052 + C93053) * C139561 + (C92881 + C92880) * C3607) +
             (C96846 + C96847) * C139403) *
                C139575) *
               C139442 * C5228 +
           (((C93758 + C93759) * C3607 + (C93983 + C93982) * C139561 -
             (C97766 + C97767) * C3608 - (C98041 + C98040) * C139403) *
                C47029 +
            ((C95707 + C95706) * C3607 + (C95916 + C95917) * C139561 -
             (C92850 * C6440 + C139588 * C6920 + C92849 * C4225 +
              C92451 * C4901) *
                 C3608 -
             (C92850 * C6606 + C139588 * C7079 + C92849 * C4445 +
              C92451 * C5135) *
                 C139403) *
                C139575) *
               C139442 * C139377) *
              C139305)) /
        (p * q * std::sqrt(p + q));
    d2eexx[99] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139575 * C114) *
                C5230 +
            (C47033 * C116 + C47029 * C125 + C47034 * C117 + C139575 * C126) *
                C5225 -
            (C47034 * C109 + C139575 * C115 + C47033 * C108 + C47029 * C114) *
                C5231 -
            (C47034 * C118 + C139575 * C127 + C47033 * C117 + C47029 * C126) *
                C5226 +
            (C47033 * C109 + C47029 * C115 + C47034 * C110 + C139575 * C119) *
                C5232 +
            (C47033 * C118 + C47029 * C127 + C47034 * C120 + C139575 * C128) *
                C5227) *
               C139442 * C92451 +
           ((C94116 + C94117) * C5230 + (C94118 + C94119) * C5225 -
            (C94120 + C94121) * C5231 - (C94122 + C94123) * C5226 +
            (C96024 + C96025) * C5232 + (C96026 + C96027) * C5227) *
               C139442 * C139588) *
              C139339 * C5228 +
          (((C47773 + C47772) * C5231 -
            ((C47771 + C47770) * C5225 + (C47769 + C47768) * C5230) +
            (C47775 + C47774) * C5226 - (C49701 + C49700) * C5232 -
            (C49703 + C49702) * C5227) *
               C139442 * C92451 +
           ((C51576 + C51577) * C5231 -
            ((C51578 + C51579) * C5225 + (C51580 + C51581) * C5230) +
            (C51582 + C51583) * C5226 -
            (C47034 * C4226 + C139575 * C4233 + C47033 * C4225 +
             C47029 * C4229) *
                C5232 -
            (C47034 * C4234 + C139575 * C4238 + C47033 * C4232 +
             C47029 * C4237) *
                C5227) *
               C139442 * C139588) *
              C139339 * C139377)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139575 * C114) *
                C5913 +
            (C47033 * C116 + C47029 * C125 + C47034 * C117 + C139575 * C126) *
                C139300) *
               C139442 * C92451 +
           ((C94116 + C94117) * C5913 + (C94118 + C94119) * C139300) * C139442 *
               C139588) *
              C139339 * C5909 -
          (((C51578 + C51579) * C139300 + (C51580 + C51581) * C5913) * C139442 *
               C139588 +
           ((C47771 + C47770) * C139300 + (C47769 + C47768) * C5913) * C139442 *
               C92451) *
              C139339 * C5910 +
          (((C47781 + C47780) * C5913 + (C47779 + C47778) * C139300) * C139442 *
               C92451 +
           ((C57236 + C57237) * C5913 + (C57238 + C57239) * C139300) * C139442 *
               C139588) *
              C139339 * C5911 -
          (((C47034 * C24130 + C139575 * C24134 + C47033 * C24131 +
             C47029 * C24135) *
                C139300 +
            (C47034 * C24128 + C139575 * C24132 + C47033 * C24129 +
             C47029 * C24133) *
                C5913) *
               C139442 * C139588 +
           ((C53631 + C53630) * C139300 + (C53629 + C53628) * C5913) * C139442 *
               C92451) *
              C139339 * C5912)) /
            (p * q * std::sqrt(p + q));
    d2eexy[99] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139575 * C114) *
                C5307 +
            (C47033 * C182 + C47029 * C188 + C47034 * C183 + C139575 * C189) *
                C5228 -
            (C47769 + C47768) * C5308 - (C47898 + C47899) * C139377) *
               C139442 * C92451 +
           ((C94116 + C94117) * C5307 + (C94246 + C94247) * C5228 -
            (C51580 + C51581) * C5308 - (C51723 + C51722) * C139377) *
               C139442 * C139588) *
              C5225 +
          (((C47773 + C47772) * C5308 -
            ((C47034 * C184 + C139575 * C190 + C47033 * C183 + C47029 * C189) *
                 C5228 +
             (C47034 * C109 + C139575 * C115 + C47033 * C108 + C47029 * C114) *
                 C5307) +
            (C47902 + C47903) * C139377) *
               C139442 * C92451 +
           ((C51576 + C51577) * C5308 -
            ((C94248 + C94249) * C5228 + (C94120 + C94121) * C5307) +
            (C51725 + C51724) * C139377) *
               C139442 * C139588) *
              C5226 +
          (((C47033 * C109 + C47029 * C115 + C47034 * C110 + C139575 * C119) *
                C5307 +
            (C47033 * C184 + C47029 * C190 + C47034 * C185 + C139575 * C191) *
                C5228 -
            (C49701 + C49700) * C5308 - (C49806 + C49807) * C139377) *
               C139442 * C92451 +
           ((C96024 + C96025) * C5307 + (C96130 + C96131) * C5228 -
            (C47034 * C4226 + C139575 * C4233 + C47033 * C4225 +
             C47029 * C4229) *
                C5308 -
            (C47034 * C4340 + C139575 * C4344 + C47033 * C4339 +
             C47029 * C4343) *
                C139377) *
               C139442 * C139588) *
              C5227) *
         C139339) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139575 * C114) *
               C5976 +
           (C47033 * C182 + C47029 * C188 + C47034 * C183 + C139575 * C189) *
               C5909 -
           (C47769 + C47768) * C5977 - (C47898 + C47899) * C5910 +
           (C47781 + C47780) * C5978 + (C47900 + C47901) * C5911 -
           (C53629 + C53628) * C5979 - (C53702 + C53703) * C5912) *
              C139442 * C92451 +
          ((C94116 + C94117) * C5976 + (C94246 + C94247) * C5909 -
           (C51580 + C51581) * C5977 - (C51723 + C51722) * C5910 +
           (C57236 + C57237) * C5978 + (C57343 + C57342) * C5911 -
           (C47034 * C24128 + C139575 * C24132 + C47033 * C24129 +
            C47029 * C24133) *
               C5979 -
           (C47034 * C24246 + C139575 * C24248 + C47033 * C24247 +
            C47029 * C24249) *
               C5912) *
              C139442 * C139588) *
         C139300 * C139339) /
            (p * q * std::sqrt(p + q));
    d2eexz[99] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139575 * C114) *
                 C244 +
             (C47033 * C245 + C47029 * C251 + C47034 * C246 + C139575 * C252) *
                 C139339) *
                C139442 * C92451 +
            ((C94116 + C94117) * C244 + (C94369 + C94368) * C139339) * C139442 *
                C139588) *
               C5228 -
           (((C51864 + C51865) * C139339 + (C51580 + C51581) * C244) * C139442 *
                C139588 +
            ((C48021 + C48020) * C139339 + (C47769 + C47768) * C244) * C139442 *
                C92451) *
               C139377) *
              C5225 +
          ((((C47773 + C47772) * C244 + (C48024 + C48025) * C139339) * C139442 *
                C92451 +
            ((C51576 + C51577) * C244 + (C51866 + C51867) * C139339) * C139442 *
                C139588) *
               C139377 -
           (((C94373 + C94372) * C139339 + (C94120 + C94121) * C244) * C139442 *
                C139588 +
            ((C47034 * C247 + C139575 * C253 + C47033 * C246 + C47029 * C252) *
                 C139339 +
             (C47034 * C109 + C139575 * C115 + C47033 * C108 + C47029 * C114) *
                 C244) *
                C139442 * C92451) *
               C5228) *
              C5226 +
          ((((C47033 * C109 + C47029 * C115 + C47034 * C110 + C139575 * C119) *
                 C244 +
             (C47033 * C247 + C47029 * C253 + C47034 * C248 + C139575 * C254) *
                 C139339) *
                C139442 * C92451 +
            ((C96024 + C96025) * C244 + (C96235 + C96234) * C139339) * C139442 *
                C139588) *
               C5228 -
           (((C47034 * C4446 + C139575 * C4450 + C47033 * C4445 +
              C47029 * C4449) *
                 C139339 +
             (C47034 * C4226 + C139575 * C4233 + C47033 * C4225 +
              C47029 * C4229) *
                 C244) *
                C139442 * C139588 +
            ((C49911 + C49910) * C139339 + (C49701 + C49700) * C244) * C139442 *
                C92451) *
               C139377) *
              C5227)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139575 * C114) *
                C244 +
            (C47033 * C245 + C47029 * C251 + C47034 * C246 + C139575 * C252) *
                C139339) *
               C139442 * C92451 +
           ((C94116 + C94117) * C244 + (C94369 + C94368) * C139339) * C139442 *
               C139588) *
              C5909 -
          (((C51864 + C51865) * C139339 + (C51580 + C51581) * C244) * C139442 *
               C139588 +
           ((C48021 + C48020) * C139339 + (C47769 + C47768) * C244) * C139442 *
               C92451) *
              C5910 +
          (((C47781 + C47780) * C244 + (C48023 + C48022) * C139339) * C139442 *
               C92451 +
           ((C57236 + C57237) * C244 + (C57446 + C57447) * C139339) * C139442 *
               C139588) *
              C5911 -
          (((C47034 * C24354 + C139575 * C24356 + C47033 * C24355 +
             C47029 * C24357) *
                C139339 +
            (C47034 * C24128 + C139575 * C24132 + C47033 * C24129 +
             C47029 * C24133) *
                C244) *
               C139442 * C139588 +
           ((C53775 + C53774) * C139339 + (C53629 + C53628) * C244) * C139442 *
               C92451) *
              C5912) *
         C139300) /
            (p * q * std::sqrt(p + q));
    d2eeyx[99] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139442 * C308) * C5230 +
             (C307 * C116 + C139442 * C314) * C5225 - C337 * C5231 -
             C338 * C5226 + C339 * C5232 + C340 * C5227) *
                C92451 +
            (C41942 + C41943 - C41944 - C41945 + C41946 + C41947) * C139588) *
               C47029 +
           ((C337 * C5230 + C338 * C5225 - C339 * C5231 - C340 * C5226 +
             C341 * C5232 + C342 * C5227) *
                C92451 +
            (C41948 + C41949 - C41950 - C41951 + C41952 + C41953) * C139588) *
               C139575) *
              C139339 * C5228 +
          (((C1150 * C5231 -
             ((C307 * C841 + C139442 * C1125) * C5225 +
              (C307 * C831 + C139442 * C1118) * C5230) +
             C1151 * C5226 - C1152 * C5232 - C1153 * C5227) *
                C92451 +
            (C4566 * C5231 - (C35458 * C5225 + C35459 * C5230) + C4567 * C5226 -
             C4568 * C5232 - C4569 * C5227) *
                C139588) *
               C47029 +
           ((C1152 * C5231 - (C1151 * C5225 + C1150 * C5230) + C1153 * C5226 -
             C2944 * C5232 - C2945 * C5227) *
                C92451 +
            (C4568 * C5231 - (C4567 * C5225 + C4566 * C5230) + C4569 * C5226 -
             (C307 * C4226 + C139442 * C4552) * C5232 -
             (C307 * C4234 + C139442 * C4556) * C5227) *
                C139588) *
               C139575) *
              C139339 * C139377)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139442 * C308) * C5913 +
             (C307 * C116 + C139442 * C314) * C139300) *
                C92451 +
            (C38036 + C38037) * C139588) *
               C47029 +
           ((C337 * C5913 + C338 * C139300) * C92451 +
            (C38038 + C38039) * C139588) *
               C139575) *
              C139339 * C5909 -
          (((C38051 + C38050) * C139588 +
            (C1151 * C139300 + C1150 * C5913) * C92451) *
               C139575 +
           ((C38045 + C38044) * C139588 +
            ((C307 * C841 + C139442 * C1125) * C139300 +
             (C307 * C831 + C139442 * C1118) * C5913) *
                C92451) *
               C47029) *
              C139339 * C5910 +
          ((((C307 * C832 + C139442 * C1121) * C5913 +
             (C307 * C847 + C139442 * C1129) * C139300) *
                C92451 +
            (C41046 + C41047) * C139588) *
               C47029 +
           ((C1154 * C5913 + C1155 * C139300) * C92451 +
            (C41042 + C41043) * C139588) *
               C139575) *
              C139339 * C5911 -
          ((((C307 * C24130 + C139442 * C24464) * C139300 +
             (C307 * C24128 + C139442 * C24462) * C5913) *
                C139588 +
            ((C307 * C5918 + C139442 * C6096) * C139300 +
             (C307 * C5915 + C139442 * C6093) * C5913) *
                C92451) *
               C139575 +
           (((C307 * C24131 + C139442 * C24465) * C139300 +
             (C307 * C24129 + C139442 * C24463) * C5913) *
                C139588 +
            ((C307 * C5919 + C139442 * C6097) * C139300 +
             (C307 * C5916 + C139442 * C6094) * C5913) *
                C92451) *
               C47029) *
              C139339 * C5912)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[99] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139442 * C308) * C5307 +
             (C307 * C182 + C139442 * C394) * C5228 -
             (C307 * C831 + C139442 * C1118) * C5308 -
             (C307 * C939 + C139442 * C1231) * C139377) *
                C92451 +
            (C38156 + C38157 - C38158 - C38159) * C139588) *
               C47029 +
           ((C5532 + C5533 - C5534 - C5535) * C92451 + C40124 * C139588) *
               C139575) *
              C5225 +
          (((C5534 - (C5533 + C5532) + C5535) * C92451 + C40125 * C139588) *
               C47029 +
           ((C5538 - (C5537 + C5536) + C5539) * C92451 +
            (C8275 - (C8276 + C8277) + C8278) * C139588) *
               C139575) *
              C5226 +
          ((C5546 * C92451 + (C8277 + C8276 - C8275 - C8278) * C139588) *
               C47029 +
           ((C5542 + C5541 - C5540 - C5543) * C92451 +
            (C3692 * C5307 + C3773 * C5228 -
             (C307 * C4226 + C139442 * C4552) * C5308 -
             (C307 * C4340 + C139442 * C4670) * C139377) *
                C139588) *
               C139575) *
              C5227) *
         C139339) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139442 * C308) * C5976 +
            (C307 * C182 + C139442 * C394) * C5909 -
            (C307 * C831 + C139442 * C1118) * C5977 -
            (C307 * C939 + C139442 * C1231) * C5910 +
            (C307 * C832 + C139442 * C1121) * C5978 +
            (C307 * C940 + C139442 * C1232) * C5911 -
            (C307 * C5916 + C139442 * C6094) * C5979 -
            (C307 * C5982 + C139442 * C6148) * C5912) *
               C92451 +
           (C32483 * C5976 + C32604 * C5909 - C35459 * C5977 - C35606 * C5910 +
            C41044 * C5978 + C41153 * C5911 -
            (C307 * C24129 + C139442 * C24463) * C5979 -
            (C307 * C24247 + C139442 * C24564) * C5912) *
               C139588) *
              C47029 +
          ((C337 * C5976 + C413 * C5909 - C1150 * C5977 - C1256 * C5910 +
            C1154 * C5978 + C1257 * C5911 -
            (C307 * C5915 + C139442 * C6093) * C5979 -
            (C307 * C5981 + C139442 * C6149) * C5912) *
               C92451 +
           (C2086 * C5976 + C2188 * C5909 - C4566 * C5977 - C4682 * C5910 +
            C31415 * C5978 + C31522 * C5911 -
            (C307 * C24128 + C139442 * C24462) * C5979 -
            (C307 * C24246 + C139442 * C24565) * C5912) *
               C139588) *
              C139575) *
         C139300 * C139339) /
            (p * q * std::sqrt(p + q));
    d2eeyz[99] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C307 * C107 + C139442 * C308) * C244 +
              (C307 * C245 + C139442 * C474) * C139339) *
                 C92451 +
             (C32483 * C244 + C32719 * C139339) * C139588) *
                C47029 +
            ((C481 + C497) * C92451 + (C30741 + C30742) * C139588) * C139575) *
               C5228 -
           (((C31622 + C31623) * C139588 + (C1363 + C1351) * C92451) * C139575 +
            ((C35751 * C139339 + C35459 * C244) * C139588 +
             ((C307 * C1029 + C139442 * C1339) * C139339 +
              (C307 * C831 + C139442 * C1118) * C244) *
                 C92451) *
                C47029) *
               C139377) *
              C5225 +
          ((((C1351 + C1363) * C92451 + (C31623 + C31622) * C139588) * C47029 +
            ((C1348 + C1362) * C92451 + (C33653 + C33654) * C139588) *
                C139575) *
               C139377 -
           (((C30743 + C30744) * C139588 + (C498 + C484) * C92451) * C139575 +
            ((C30742 + C30741) * C139588 + (C497 + C481) * C92451) * C47029) *
               C5228) *
              C5226 +
          (((C501 * C92451 + (C30744 + C30743) * C139588) * C47029 +
            ((C489 + C499) * C92451 + (C30745 + C30746) * C139588) * C139575) *
               C5228 -
           ((((C307 * C4446 + C139442 * C4786) * C139339 +
              (C307 * C4226 + C139442 * C4552) * C244) *
                 C139588 +
             (C3121 + C3116) * C92451) *
                C139575 +
            ((C33654 + C33653) * C139588 + C3115 * C92451) * C47029) *
               C139377) *
              C5227)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139442 * C308) * C244 +
             (C307 * C245 + C139442 * C474) * C139339) *
                C92451 +
            (C32483 * C244 + C32719 * C139339) * C139588) *
               C47029 +
           ((C481 + C497) * C92451 + (C30741 + C30742) * C139588) * C139575) *
              C5909 -
          (((C31622 + C31623) * C139588 + (C1363 + C1351) * C92451) * C139575 +
           ((C35751 * C139339 + C35459 * C244) * C139588 +
            ((C307 * C1029 + C139442 * C1339) * C139339 +
             (C307 * C831 + C139442 * C1118) * C244) *
                C92451) *
               C47029) *
              C5910 +
          ((((C307 * C832 + C139442 * C1121) * C244 +
             (C307 * C1030 + C139442 * C1340) * C139339) *
                C92451 +
            (C41044 * C244 + C41255 * C139339) * C139588) *
               C47029 +
           ((C1352 + C1364) * C92451 + (C31624 + C31628) * C139588) * C139575) *
              C5911 -
          ((((C307 * C24354 + C139442 * C24665) * C139339 +
             (C307 * C24128 + C139442 * C24462) * C244) *
                C139588 +
            ((C307 * C6037 + C139442 * C6202) * C139339 +
             (C307 * C5915 + C139442 * C6093) * C244) *
                C92451) *
               C139575 +
           (((C307 * C24355 + C139442 * C24664) * C139339 +
             (C307 * C24129 + C139442 * C24463) * C244) *
                C139588 +
            ((C307 * C6038 + C139442 * C6203) * C139339 +
             (C307 * C5916 + C139442 * C6094) * C244) *
                C92451) *
               C47029) *
              C5912) *
         C139300) /
            (p * q * std::sqrt(p + q));
    d2eezx[99] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1767 + C139588 * C2376) *
                C5230 +
            (C92849 * C116 + C92451 * C561 + C92850 * C1777 + C139588 * C2383) *
                C5225 -
            (C92876 + C92877) * C5231 - (C92878 + C92879) * C5226 +
            (C92880 + C92881) * C5232 + (C92882 + C92883) * C5227) *
               C47029 +
           ((C92877 + C92876) * C5230 + (C92879 + C92878) * C5225 -
            (C92881 + C92880) * C5231 - (C92883 + C92882) * C5226 +
            (C92885 + C92884) * C5232 + (C92887 + C92886) * C5227) *
               C139575) *
              C139442 * C139339 * C5228 +
          (((C93758 + C93759) * C5231 -
            ((C92850 * C4230 + C139588 * C4903 + C92849 * C841 +
              C92451 * C1447) *
                 C5225 +
             (C92850 * C4223 + C139588 * C4899 + C92849 * C831 +
              C92451 * C1440) *
                 C5230) +
            (C93760 + C93761) * C5226 - (C95706 + C95707) * C5232 -
            (C95708 + C95709) * C5227) *
               C47029 +
           ((C95707 + C95706) * C5231 -
            ((C93761 + C93760) * C5225 + (C93759 + C93758) * C5230) +
            (C95709 + C95708) * C5226 -
            (C92850 * C4226 + C139588 * C4902 + C92849 * C830 +
             C92451 * C1442) *
                C5232 -
            (C92850 * C4234 + C139588 * C4906 + C92849 * C843 +
             C92451 * C1450) *
                C5227) *
               C139575) *
              C139442 * C139339 * C139377)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1767 + C139588 * C2376) *
                C5913 +
            (C92849 * C116 + C92451 * C561 + C92850 * C1777 + C139588 * C2383) *
                C139300) *
               C47029 +
           ((C92877 + C92876) * C5913 + (C92879 + C92878) * C139300) *
               C139575) *
              C139442 * C139339 * C5909 -
          (((C93761 + C93760) * C139300 + (C93759 + C93758) * C5913) * C139575 +
           ((C92850 * C4230 + C139588 * C4903 + C92849 * C841 +
             C92451 * C1447) *
                C139300 +
            (C92850 * C4223 + C139588 * C4899 + C92849 * C831 +
             C92451 * C1440) *
                C5913) *
               C47029) *
              C139442 * C139339 * C5910 +
          (((C92849 * C832 + C92451 * C1443 + C92850 * C8754 +
             C139588 * C9234) *
                C5913 +
            (C92849 * C847 + C92451 * C1451 + C92850 * C8757 +
             C139588 * C9237) *
                C139300) *
               C47029 +
           ((C93763 + C93762) * C5913 + (C93765 + C93764) * C139300) *
               C139575) *
              C139442 * C139339 * C5911 -
          (((C92850 * C24130 + C139588 * C24766 + C92849 * C5918 +
             C92451 * C6258) *
                C139300 +
            (C92850 * C24128 + C139588 * C24764 + C92849 * C5915 +
             C92451 * C6255) *
                C5913) *
               C139575 +
           ((C92850 * C24131 + C139588 * C24767 + C92849 * C5919 +
             C92451 * C6259) *
                C139300 +
            (C92850 * C24129 + C139588 * C24765 + C92849 * C5916 +
             C92451 * C6256) *
                C5913) *
               C47029) *
              C139442 * C139339 * C5912)) /
            (p * q * std::sqrt(p + q));
    d2eezy[99] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1767 + C139588 * C2376) *
                C5307 +
            (C92849 * C182 + C92451 * C641 + C92850 * C1873 + C139588 * C2492) *
                C5228 -
            (C92850 * C4223 + C139588 * C4899 + C92849 * C831 +
             C92451 * C1440) *
                C5308 -
            (C92850 * C4337 + C139588 * C5017 + C92849 * C939 +
             C92451 * C1553) *
                C139377) *
               C47029 +
           ((C92877 + C92876) * C5307 + (C92966 + C92967) * C5228 -
            (C93759 + C93758) * C5308 - (C93872 + C93873) * C139377) *
               C139575) *
              C139442 * C5225 +
          (((C93758 + C93759) * C5308 -
            ((C92967 + C92966) * C5228 + (C92876 + C92877) * C5307) +
            (C93873 + C93872) * C139377) *
               C47029 +
           ((C95707 + C95706) * C5308 -
            ((C92968 + C92969) * C5228 + (C92881 + C92880) * C5307) +
            (C95812 + C95813) * C139377) *
               C139575) *
              C139442 * C5226 +
          (((C92880 + C92881) * C5307 + (C92969 + C92968) * C5228 -
            (C95706 + C95707) * C5308 - (C95813 + C95812) * C139377) *
               C47029 +
           ((C92885 + C92884) * C5307 + (C92970 + C92971) * C5228 -
            (C92850 * C4226 + C139588 * C4902 + C92849 * C830 +
             C92451 * C1442) *
                C5308 -
            (C92850 * C4340 + C139588 * C5020 + C92849 * C943 +
             C92451 * C1559) *
                C139377) *
               C139575) *
              C139442 * C5227) *
         C139339) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C92849 * C107 + C92451 * C555 + C92850 * C1767 + C139588 * C2376) *
               C5976 +
           (C92849 * C182 + C92451 * C641 + C92850 * C1873 + C139588 * C2492) *
               C5909 -
           (C92850 * C4223 + C139588 * C4899 + C92849 * C831 + C92451 * C1440) *
               C5977 -
           (C92850 * C4337 + C139588 * C5017 + C92849 * C939 + C92451 * C1553) *
               C5910 +
           (C92849 * C832 + C92451 * C1443 + C92850 * C8754 + C139588 * C9234) *
               C5978 +
           (C92849 * C940 + C92451 * C1554 + C92850 * C8840 + C139588 * C9312) *
               C5911 -
           (C92850 * C24129 + C139588 * C24765 + C92849 * C5916 +
            C92451 * C6256) *
               C5979 -
           (C92850 * C24247 + C139588 * C24876 + C92849 * C5982 +
            C92451 * C6310) *
               C5912) *
              C47029 +
          ((C92877 + C92876) * C5976 + (C92966 + C92967) * C5909 -
           (C93759 + C93758) * C5977 - (C93872 + C93873) * C5910 +
           (C93763 + C93762) * C5978 + (C93874 + C93875) * C5911 -
           (C92850 * C24128 + C139588 * C24764 + C92849 * C5915 +
            C92451 * C6255) *
               C5979 -
           (C92850 * C24246 + C139588 * C24877 + C92849 * C5981 +
            C92451 * C6311) *
               C5912) *
              C139575) *
         C139442 * C139300 * C139339) /
            (p * q * std::sqrt(p + q));
    d2eezz[99] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C92849 * C107 + C92451 * C555 + C92850 * C1767 +
              C139588 * C2376) *
                 C244 +
             (C92849 * C245 + C92451 * C719 + C92850 * C1965 +
              C139588 * C2591) *
                 C139339) *
                C47029 +
            ((C92877 + C92876) * C244 + (C93050 + C93051) * C139339) *
                C139575) *
               C139442 * C5228 -
           (((C93982 + C93983) * C139339 + (C93759 + C93758) * C244) * C139575 +
            ((C92850 * C4443 + C139588 * C5133 + C92849 * C1029 +
              C92451 * C1661) *
                 C139339 +
             (C92850 * C4223 + C139588 * C4899 + C92849 * C831 +
              C92451 * C1440) *
                 C244) *
                C47029) *
               C139442 * C139377) *
              C5225 +
          ((((C93758 + C93759) * C244 + (C93983 + C93982) * C139339) * C47029 +
            ((C95707 + C95706) * C244 + (C95916 + C95917) * C139339) *
                C139575) *
               C139442 * C139377 -
           (((C93052 + C93053) * C139339 + (C92881 + C92880) * C244) * C139575 +
            ((C93051 + C93050) * C139339 + (C92876 + C92877) * C244) * C47029) *
               C139442 * C5228) *
              C5226 +
          ((((C92880 + C92881) * C244 + (C93053 + C93052) * C139339) * C47029 +
            ((C92885 + C92884) * C244 + (C93054 + C93055) * C139339) *
                C139575) *
               C139442 * C5228 -
           (((C92850 * C4446 + C139588 * C5136 + C92849 * C1033 +
              C92451 * C1665) *
                 C139339 +
             (C92850 * C4226 + C139588 * C4902 + C92849 * C830 +
              C92451 * C1442) *
                 C244) *
                C139575 +
            ((C95917 + C95916) * C139339 + (C95706 + C95707) * C244) * C47029) *
               C139442 * C139377) *
              C5227)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1767 + C139588 * C2376) *
                C244 +
            (C92849 * C245 + C92451 * C719 + C92850 * C1965 + C139588 * C2591) *
                C139339) *
               C47029 +
           ((C92877 + C92876) * C244 + (C93050 + C93051) * C139339) * C139575) *
              C139442 * C5909 -
          (((C93982 + C93983) * C139339 + (C93759 + C93758) * C244) * C139575 +
           ((C92850 * C4443 + C139588 * C5133 + C92849 * C1029 +
             C92451 * C1661) *
                C139339 +
            (C92850 * C4223 + C139588 * C4899 + C92849 * C831 +
             C92451 * C1440) *
                C244) *
               C47029) *
              C139442 * C5910 +
          (((C92849 * C832 + C92451 * C1443 + C92850 * C8754 +
             C139588 * C9234) *
                C244 +
            (C92849 * C1030 + C92451 * C1662 + C92850 * C8920 +
             C139588 * C9389) *
                C139339) *
               C47029 +
           ((C93763 + C93762) * C244 + (C93984 + C93985) * C139339) * C139575) *
              C139442 * C5911 -
          (((C92850 * C24354 + C139588 * C24980 + C92849 * C6037 +
             C92451 * C6364) *
                C139339 +
            (C92850 * C24128 + C139588 * C24764 + C92849 * C5915 +
             C92451 * C6255) *
                C244) *
               C139575 +
           ((C92850 * C24355 + C139588 * C24979 + C92849 * C6038 +
             C92451 * C6365) *
                C139339 +
            (C92850 * C24129 + C139588 * C24765 + C92849 * C5916 +
             C92451 * C6256) *
                C244) *
               C47029) *
              C139442 * C5912) *
         C139300) /
            (p * q * std::sqrt(p + q));
    d2eexx[100] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139575 * C114) *
                 C137108 +
             (C47033 * C116 + C47029 * C125 + C47034 * C117 + C139575 * C126) *
                 C139552 -
             (C47034 * C109 + C139575 * C115 + C47033 * C108 + C47029 * C114) *
                 C137101 -
             (C47034 * C118 + C139575 * C127 + C47033 * C117 + C47029 * C126) *
                 C139305) *
                C139442 * C92451 +
            ((C94116 + C94117) * C137108 + (C94118 + C94119) * C139552 -
             (C94120 + C94121) * C137101 - (C94122 + C94123) * C139305) *
                C139442 * C139588) *
               C9466 +
           (((C94121 + C94120) * C137101 -
             ((C94119 + C94118) * C139552 + (C94117 + C94116) * C137108) +
             (C94123 + C94122) * C139305) *
                C139442 * C92451 +
            ((C94124 + C94125) * C137101 -
             ((C94126 + C94127) * C139552 + (C94128 + C94129) * C137108) +
             (C94130 + C94131) * C139305) *
                C139442 * C139588) *
               C139403) *
              C139560 +
          ((((C47773 + C47772) * C137101 -
             ((C47771 + C47770) * C139552 + (C47769 + C47768) * C137108) +
             (C47775 + C47774) * C139305) *
                C139442 * C92451 +
            ((C51576 + C51577) * C137101 -
             ((C51578 + C51579) * C139552 + (C51580 + C51581) * C137108) +
             (C51582 + C51583) * C139305) *
                C139442 * C139588) *
               C9466 +
           (((C51581 + C51580) * C137108 + (C51579 + C51578) * C139552 -
             (C51577 + C51576) * C137101 - (C51583 + C51582) * C139305) *
                C139442 * C92451 +
            ((C54278 + C54279) * C137108 + (C54280 + C54281) * C139552 -
             (C47034 * C6440 + C139575 * C6446 + C47033 * C6441 +
              C47029 * C6447) *
                 C137101 -
             (C47034 * C6443 + C139575 * C6449 + C47033 * C6444 +
              C47029 * C6450) *
                 C139305) *
                C139442 * C139588) *
               C139403) *
              C139377)) /
        (p * q * std::sqrt(p + q));
    d2eexy[100] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139575 * C114) *
                 C2783 +
             (C47033 * C182 + C47029 * C188 + C47034 * C183 + C139575 * C189) *
                 C139560 -
             (C47769 + C47768) * C2784 - (C47898 + C47899) * C139377) *
                C139442 * C92451 +
            ((C94116 + C94117) * C2783 + (C94246 + C94247) * C139560 -
             (C51580 + C51581) * C2784 - (C51723 + C51722) * C139377) *
                C139442 * C139588) *
               C139552 +
           (((C47773 + C47772) * C2784 -
             ((C47034 * C184 + C139575 * C190 + C47033 * C183 + C47029 * C189) *
                  C139560 +
              (C47034 * C109 + C139575 * C115 + C47033 * C108 + C47029 * C114) *
                  C2783) +
             (C47902 + C47903) * C139377) *
                C139442 * C92451 +
            ((C51576 + C51577) * C2784 -
             ((C94248 + C94249) * C139560 + (C94120 + C94121) * C2783) +
             (C51725 + C51724) * C139377) *
                C139442 * C139588) *
               C139305) *
              C9466 +
          ((((C51581 + C51580) * C2784 -
             ((C94247 + C94246) * C139560 + (C94117 + C94116) * C2783) +
             (C51722 + C51723) * C139377) *
                C139442 * C92451 +
            ((C54278 + C54279) * C2784 -
             ((C94252 + C94253) * C139560 + (C94128 + C94129) * C2783) +
             (C54385 + C54384) * C139377) *
                C139442 * C139588) *
               C139552 +
           (((C94121 + C94120) * C2783 + (C94249 + C94248) * C139560 -
             (C51577 + C51576) * C2784 - (C51724 + C51725) * C139377) *
                C139442 * C92451 +
            ((C94124 + C94125) * C2783 + (C94250 + C94251) * C139560 -
             (C47034 * C6440 + C139575 * C6446 + C47033 * C6441 +
              C47029 * C6447) *
                 C2784 -
             (C47034 * C6526 + C139575 * C6529 + C47033 * C6527 +
              C47029 * C6530) *
                 C139377) *
                C139442 * C139588) *
               C139305) *
              C139403)) /
        (p * q * std::sqrt(p + q));
    d2eexz[100] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139575 * C114) *
                 C9616 +
             (C47033 * C245 + C47029 * C251 + C47034 * C246 + C139575 * C252) *
                 C9466 -
             (C94117 + C94116) * C9617 - (C94368 + C94369) * C139403) *
                C139442 * C92451 +
            ((C94116 + C94117) * C9616 + (C94369 + C94368) * C9466 -
             (C94128 + C94129) * C9617 - (C94371 + C94370) * C139403) *
                C139442 * C139588) *
               C139560 +
           (((C51581 + C51580) * C9617 -
             ((C48021 + C48020) * C9466 + (C47769 + C47768) * C9616) +
             (C51865 + C51864) * C139403) *
                C139442 * C92451 +
            ((C54278 + C54279) * C9617 -
             ((C51864 + C51865) * C9466 + (C51580 + C51581) * C9616) +
             (C54488 + C54489) * C139403) *
                C139442 * C139588) *
               C139377) *
              C139552 +
          ((((C94121 + C94120) * C9617 -
             ((C47034 * C247 + C139575 * C253 + C47033 * C246 + C47029 * C252) *
                  C9466 +
              (C47034 * C109 + C139575 * C115 + C47033 * C108 + C47029 * C114) *
                  C9616) +
             (C94372 + C94373) * C139403) *
                C139442 * C92451 +
            ((C94124 + C94125) * C9617 -
             ((C94373 + C94372) * C9466 + (C94120 + C94121) * C9616) +
             (C94375 + C94374) * C139403) *
                C139442 * C139588) *
               C139560 +
           (((C47773 + C47772) * C9616 + (C48024 + C48025) * C9466 -
             (C51577 + C51576) * C9617 - (C51867 + C51866) * C139403) *
                C139442 * C92451 +
            ((C51576 + C51577) * C9616 + (C51866 + C51867) * C9466 -
             (C47034 * C6440 + C139575 * C6446 + C47033 * C6441 +
              C47029 * C6447) *
                 C9617 -
             (C47034 * C6606 + C139575 * C6609 + C47033 * C6607 +
              C47029 * C6610) *
                 C139403) *
                C139442 * C139588) *
               C139377) *
              C139305)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[100] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    ((((((C307 * C107 + C139442 * C308) * C137108 +
                         (C307 * C116 + C139442 * C314) * C139552 -
                         C337 * C137101 - C338 * C139305) *
                            C92451 +
                        (C39974 + C39975 - C39976 - C39977) * C139588) *
                           C47029 +
                       ((C337 * C137108 + C338 * C139552 - C339 * C137101 -
                         C340 * C139305) *
                            C92451 +
                        (C39978 + C39979 - C39980 - C39981) * C139588) *
                           C139575) *
                          C9466 +
                      (((C39976 - (C39975 + C39974) + C39977) * C92451 +
                        (C45574 - (C45575 + C45576) + C45577) * C139588) *
                           C47029 +
                       ((C39980 - (C39979 + C39978) + C39981) * C92451 +
                        (C45578 - (C45579 + C45580) + C45581) * C139588) *
                           C139575) *
                          C139403) *
                         C139560 +
                     ((((C1150 * C137101 -
                         ((C307 * C841 + C139442 * C1125) * C139552 +
                          (C307 * C831 + C139442 * C1118) * C137108) +
                         C1151 * C139305) *
                            C92451 +
                        (C39982 - (C39983 + C39984) + C39985) * C139588) *
                           C47029 +
                       ((C1152 * C137101 - (C1151 * C139552 + C1150 * C137108) +
                         C1153 * C139305) *
                            C92451 +
                        (C39986 - (C39987 + C39988) + C39989) * C139588) *
                           C139575) *
                          C9466 +
                      (((C39984 + C39983 - C39982 - C39985) * C92451 +
                        (C38054 * C137108 + C38055 * C139552 -
                         C35460 * C137101 - C35461 * C139305) *
                            C139588) *
                           C47029 +
                       ((C39988 + C39987 - C39986 - C39989) * C92451 +
                        (C35460 * C137108 + C35461 * C139552 -
                         (C307 * C6440 + C139442 * C6686) * C137101 -
                         (C307 * C6443 + C139442 * C6689) * C139305) *
                            C139588) *
                           C139575) *
                          C139403) *
                         C139377)) /
                   (p * q * std::sqrt(p + q));
    d2eeyy[100] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C307 * C107 + C139442 * C308) * C2783 +
              (C307 * C182 + C139442 * C394) * C139560 -
              (C307 * C831 + C139442 * C1118) * C2784 -
              (C307 * C939 + C139442 * C1231) * C139377) *
                 C92451 +
             (C35594 + C35595 - C35596 - C35610) * C139588) *
                C47029 +
            ((C3021 + C3022 - C3023 - C3024) * C92451 + C35611 * C139588) *
                C139575) *
               C139552 +
           (((C3023 - (C3022 + C3021) + C3024) * C92451 + C35612 * C139588) *
                C47029 +
            ((C3027 - (C3026 + C3025) + C3028) * C92451 +
             (C4677 - (C4678 + C4679) + C4685) * C139588) *
                C139575) *
               C139305) *
              C9466 +
          ((((C35596 - (C35595 + C35594) + C35610) * C92451 +
             (C46568 - (C46569 + C46570) + C46571) * C139588) *
                C47029 +
            (C35612 * C92451 +
             (C35601 - (C35602 + C35603) + C35613) * C139588) *
                C139575) *
               C139552 +
           ((C35611 * C92451 + (C35603 + C35602 - C35601 - C35613) * C139588) *
                C47029 +
            ((C4679 + C4678 - C4677 - C4685) * C92451 +
             (C2092 * C2783 + C2191 * C139560 -
              (C307 * C6440 + C139442 * C6686) * C2784 -
              (C307 * C6526 + C139442 * C6768) * C139377) *
                 C139588) *
                C139575) *
               C139305) *
              C139403)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[100] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    ((((((C307 * C107 + C139442 * C308) * C9616 +
                         (C307 * C245 + C139442 * C474) * C9466 -
                         C32483 * C9617 - C32719 * C139403) *
                            C92451 +
                        (C32483 * C9616 + C32719 * C9466 - C32486 * C9617 -
                         C32720 * C139403) *
                            C139588) *
                           C47029 +
                       ((C9841 + C9842 - C9843 - C9844) * C92451 +
                        (C42150 + C42151 - C42152 - C42153) * C139588) *
                           C139575) *
                          C139560 +
                      (((C35459 * C9617 -
                         ((C307 * C1029 + C139442 * C1339) * C9466 +
                          (C307 * C831 + C139442 * C1118) * C9616) +
                         C35751 * C139403) *
                            C92451 +
                        (C38054 * C9617 - (C35751 * C9466 + C35459 * C9616) +
                         C38271 * C139403) *
                            C139588) *
                           C47029 +
                       ((C11854 - (C11855 + C11856) + C11857) * C92451 +
                        (C44788 - (C44789 + C44790) + C44791) * C139588) *
                           C139575) *
                          C139377) *
                         C139552 +
                     ((((C9843 - (C9842 + C9841) + C9844) * C92451 +
                        (C42152 - (C42151 + C42150) + C42153) * C139588) *
                           C47029 +
                       ((C9847 - (C9846 + C9845) + C9848) * C92451 +
                        (C42154 - (C42155 + C42156) + C42157) * C139588) *
                           C139575) *
                          C139560 +
                      (((C11856 + C11855 - C11854 - C11857) * C92451 +
                        (C44790 + C44789 - C44788 - C44791) * C139588) *
                           C47029 +
                       ((C11860 + C11859 - C11858 - C11861) * C92451 +
                        (C4568 * C9616 + C4799 * C9466 -
                         (C307 * C6440 + C139442 * C6686) * C9617 -
                         (C307 * C6606 + C139442 * C6845) * C139403) *
                            C139588) *
                           C139575) *
                          C139377) *
                         C139305)) /
                   (p * q * std::sqrt(p + q));
    d2eezx[100] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C92849 * C107 + C92451 * C555 + C92850 * C1767 +
              C139588 * C2376) *
                 C137108 +
             (C92849 * C116 + C92451 * C561 + C92850 * C1777 +
              C139588 * C2383) *
                 C139552 -
             (C92876 + C92877) * C137101 - (C92878 + C92879) * C139305) *
                C47029 +
            ((C92877 + C92876) * C137108 + (C92879 + C92878) * C139552 -
             (C92881 + C92880) * C137101 - (C92883 + C92882) * C139305) *
                C139575) *
               C139442 * C9466 +
           (((C94784 + C94785) * C137101 -
             ((C92850 * C1783 + C139588 * C2387 + C92849 * C1777 +
               C92451 * C2383) *
                  C139552 +
              (C92850 * C1768 + C139588 * C2379 + C92849 * C1767 +
               C92451 * C2376) *
                  C137108) +
             (C94786 + C94787) * C139305) *
                C47029 +
            ((C96637 + C96636) * C137101 -
             ((C94787 + C94786) * C139552 + (C94785 + C94784) * C137108) +
             (C96639 + C96638) * C139305) *
                C139575) *
               C139442 * C139403) *
              C139560 +
          ((((C93758 + C93759) * C137101 -
             ((C92850 * C4230 + C139588 * C4903 + C92849 * C841 +
               C92451 * C1447) *
                  C139552 +
              (C92850 * C4223 + C139588 * C4899 + C92849 * C831 +
               C92451 * C1440) *
                  C137108) +
             (C93760 + C93761) * C139305) *
                C47029 +
            ((C95707 + C95706) * C137101 -
             ((C93761 + C93760) * C139552 + (C93759 + C93758) * C137108) +
             (C95709 + C95708) * C139305) *
                C139575) *
               C139442 * C9466 +
           (((C92849 * C4223 + C92451 * C4899 + C92850 * C6442 +
              C139588 * C6922) *
                 C137108 +
             (C92849 * C4230 + C92451 * C4903 + C92850 * C6445 +
              C139588 * C6925) *
                 C139552 -
             (C97766 + C97767) * C137101 - (C97768 + C97769) * C139305) *
                C47029 +
            ((C97767 + C97766) * C137108 + (C97769 + C97768) * C139552 -
             (C92850 * C6440 + C139588 * C6920 + C92849 * C4225 +
              C92451 * C4901) *
                 C137101 -
             (C92850 * C6443 + C139588 * C6923 + C92849 * C4232 +
              C92451 * C4905) *
                 C139305) *
                C139575) *
               C139442 * C139403) *
              C139377)) /
        (p * q * std::sqrt(p + q));
    d2eezy[100] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C92849 * C107 + C92451 * C555 + C92850 * C1767 +
              C139588 * C2376) *
                 C2783 +
             (C92849 * C182 + C92451 * C641 + C92850 * C1873 +
              C139588 * C2492) *
                 C139560 -
             (C92850 * C4223 + C139588 * C4899 + C92849 * C831 +
              C92451 * C1440) *
                 C2784 -
             (C92850 * C4337 + C139588 * C5017 + C92849 * C939 +
              C92451 * C1553) *
                 C139377) *
                C47029 +
            ((C92877 + C92876) * C2783 + (C92966 + C92967) * C139560 -
             (C93759 + C93758) * C2784 - (C93872 + C93873) * C139377) *
                C139575) *
               C139442 * C139552 +
           (((C93758 + C93759) * C2784 -
             ((C92967 + C92966) * C139560 + (C92876 + C92877) * C2783) +
             (C93873 + C93872) * C139377) *
                C47029 +
            ((C95707 + C95706) * C2784 -
             ((C92968 + C92969) * C139560 + (C92881 + C92880) * C2783) +
             (C95812 + C95813) * C139377) *
                C139575) *
               C139442 * C139305) *
              C9466 +
          ((((C92849 * C4223 + C92451 * C4899 + C92850 * C6442 +
              C139588 * C6922) *
                 C2784 -
             ((C92850 * C1874 + C139588 * C2493 + C92849 * C1873 +
               C92451 * C2492) *
                  C139560 +
              (C92850 * C1768 + C139588 * C2379 + C92849 * C1767 +
               C92451 * C2376) *
                  C2783) +
             (C92849 * C4337 + C92451 * C5017 + C92850 * C6528 +
              C139588 * C7000) *
                 C139377) *
                C47029 +
            ((C97767 + C97766) * C2784 -
             ((C94899 + C94898) * C139560 + (C94785 + C94784) * C2783) +
             (C97904 + C97905) * C139377) *
                C139575) *
               C139442 * C139552 +
           (((C94784 + C94785) * C2783 + (C94898 + C94899) * C139560 -
             (C97766 + C97767) * C2784 - (C97905 + C97904) * C139377) *
                C47029 +
            ((C96637 + C96636) * C2783 + (C96742 + C96743) * C139560 -
             (C92850 * C6440 + C139588 * C6920 + C92849 * C4225 +
              C92451 * C4901) *
                 C2784 -
             (C92850 * C6526 + C139588 * C7002 + C92849 * C4339 +
              C92451 * C5019) *
                 C139377) *
                C139575) *
               C139442 * C139305) *
              C139403)) /
        (p * q * std::sqrt(p + q));
    d2eezz[100] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C92849 * C107 + C92451 * C555 + C92850 * C1767 +
              C139588 * C2376) *
                 C9616 +
             (C92849 * C245 + C92451 * C719 + C92850 * C1965 +
              C139588 * C2591) *
                 C9466 -
             (C92850 * C1768 + C139588 * C2379 + C92849 * C1767 +
              C92451 * C2376) *
                 C9617 -
             (C92850 * C1966 + C139588 * C2592 + C92849 * C1965 +
              C92451 * C2591) *
                 C139403) *
                C47029 +
            ((C92877 + C92876) * C9616 + (C93050 + C93051) * C9466 -
             (C94785 + C94784) * C9617 - (C95008 + C95009) * C139403) *
                C139575) *
               C139442 * C139560 +
           (((C92849 * C4223 + C92451 * C4899 + C92850 * C6442 +
              C139588 * C6922) *
                 C9617 -
             ((C92850 * C4443 + C139588 * C5133 + C92849 * C1029 +
               C92451 * C1661) *
                  C9466 +
              (C92850 * C4223 + C139588 * C4899 + C92849 * C831 +
               C92451 * C1440) *
                  C9616) +
             (C92849 * C4443 + C92451 * C5133 + C92850 * C6608 +
              C139588 * C7077) *
                 C139403) *
                C47029 +
            ((C97767 + C97766) * C9617 -
             ((C93982 + C93983) * C9466 + (C93759 + C93758) * C9616) +
             (C98040 + C98041) * C139403) *
                C139575) *
               C139442 * C139377) *
              C139552 +
          ((((C94784 + C94785) * C9617 -
             ((C93051 + C93050) * C9466 + (C92876 + C92877) * C9616) +
             (C95009 + C95008) * C139403) *
                C47029 +
            ((C96637 + C96636) * C9617 -
             ((C93052 + C93053) * C9466 + (C92881 + C92880) * C9616) +
             (C96846 + C96847) * C139403) *
                C139575) *
               C139442 * C139560 +
           (((C93758 + C93759) * C9616 + (C93983 + C93982) * C9466 -
             (C97766 + C97767) * C9617 - (C98041 + C98040) * C139403) *
                C47029 +
            ((C95707 + C95706) * C9616 + (C95916 + C95917) * C9466 -
             (C92850 * C6440 + C139588 * C6920 + C92849 * C4225 +
              C92451 * C4901) *
                 C9617 -
             (C92850 * C6606 + C139588 * C7079 + C92849 * C4445 +
              C92451 * C5135) *
                 C139403) *
                C139575) *
               C139442 * C139377) *
              C139305)) /
        (p * q * std::sqrt(p + q));
    d2eexx[101] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139575 * C114) *
                 C5913 +
             (C47033 * C116 + C47029 * C125 + C47034 * C117 + C139575 * C126) *
                 C139300) *
                C139442 * C92451 +
            ((C94116 + C94117) * C5913 + (C94118 + C94119) * C139300) *
                C139442 * C139588) *
               C139593 -
           (((C94126 + C94127) * C139300 + (C94128 + C94129) * C5913) *
                C139442 * C139588 +
            ((C94119 + C94118) * C139300 + (C94117 + C94116) * C5913) *
                C139442 * C92451) *
               C139594 +
           (((C94129 + C94128) * C5913 + (C94127 + C94126) * C139300) *
                C139442 * C92451 +
            ((C105172 + C105173) * C5913 + (C105174 + C105175) * C139300) *
                C139442 * C139588) *
               C12239) *
              C139560 +
          ((((C51581 + C51580) * C5913 + (C51579 + C51578) * C139300) *
                C139442 * C92451 +
            ((C54278 + C54279) * C5913 + (C54280 + C54281) * C139300) *
                C139442 * C139588) *
               C139594 -
           (((C51578 + C51579) * C139300 + (C51580 + C51581) * C5913) *
                C139442 * C139588 +
            ((C47771 + C47770) * C139300 + (C47769 + C47768) * C5913) *
                C139442 * C92451) *
               C139593 -
           (((C47034 * C26832 + C139575 * C26836 + C47033 * C26833 +
              C47029 * C26837) *
                 C139300 +
             (C47034 * C26830 + C139575 * C26834 + C47033 * C26831 +
              C47029 * C26835) *
                 C5913) *
                C139442 * C139588 +
            ((C54281 + C54280) * C139300 + (C54279 + C54278) * C5913) *
                C139442 * C92451) *
               C12239) *
              C139377)) /
        (p * q * std::sqrt(p + q));
    d2eexy[101] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139575 * C114) *
                C2783 +
            (C47033 * C182 + C47029 * C188 + C47034 * C183 + C139575 * C189) *
                C139560 -
            (C47769 + C47768) * C2784 - (C47898 + C47899) * C139377) *
               C139442 * C92451 +
           ((C94116 + C94117) * C2783 + (C94246 + C94247) * C139560 -
            (C51580 + C51581) * C2784 - (C51723 + C51722) * C139377) *
               C139442 * C139588) *
              C139300 * C139593 +
          (((C51581 + C51580) * C2784 -
            ((C94247 + C94246) * C139560 + (C94117 + C94116) * C2783) +
            (C51722 + C51723) * C139377) *
               C139442 * C92451 +
           ((C54278 + C54279) * C2784 -
            ((C94252 + C94253) * C139560 + (C94128 + C94129) * C2783) +
            (C54385 + C54384) * C139377) *
               C139442 * C139588) *
              C139300 * C139594 +
          (((C94129 + C94128) * C2783 + (C94253 + C94252) * C139560 -
            (C54279 + C54278) * C2784 - (C54384 + C54385) * C139377) *
               C139442 * C92451 +
           ((C105172 + C105173) * C2783 + (C105246 + C105247) * C139560 -
            (C47034 * C26830 + C139575 * C26834 + C47033 * C26831 +
             C47029 * C26835) *
                C2784 -
            (C47034 * C26904 + C139575 * C26906 + C47033 * C26905 +
             C47029 * C26907) *
                C139377) *
               C139442 * C139588) *
              C139300 * C12239)) /
        (p * q * std::sqrt(p + q));
    d2eexz[101] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139575 * C114) *
                C12388 +
            (C47033 * C245 + C47029 * C251 + C47034 * C246 + C139575 * C252) *
                C139593 -
            (C94117 + C94116) * C12389 - (C94368 + C94369) * C139594 +
            (C94129 + C94128) * C12390 + (C94370 + C94371) * C12239) *
               C139442 * C92451 +
           ((C94116 + C94117) * C12388 + (C94369 + C94368) * C139593 -
            (C94128 + C94129) * C12389 - (C94371 + C94370) * C139594 +
            (C105172 + C105173) * C12390 + (C105319 + C105318) * C12239) *
               C139442 * C139588) *
              C139560 +
          (((C51581 + C51580) * C12389 -
            ((C48021 + C48020) * C139593 + (C47769 + C47768) * C12388) +
            (C51865 + C51864) * C139594 - (C54279 + C54278) * C12390 -
            (C54489 + C54488) * C12239) *
               C139442 * C92451 +
           ((C54278 + C54279) * C12389 -
            ((C51864 + C51865) * C139593 + (C51580 + C51581) * C12388) +
            (C54488 + C54489) * C139594 -
            (C47034 * C26830 + C139575 * C26834 + C47033 * C26831 +
             C47029 * C26835) *
                C12390 -
            (C47034 * C26974 + C139575 * C26976 + C47033 * C26975 +
             C47029 * C26977) *
                C12239) *
               C139442 * C139588) *
              C139377) *
         C139300) /
        (p * q * std::sqrt(p + q));
    d2eeyx[101] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C307 * C107 + C139442 * C308) * C5913 +
              (C307 * C116 + C139442 * C314) * C139300) *
                 C92451 +
             (C38036 + C38037) * C139588) *
                C47029 +
            ((C337 * C5913 + C338 * C139300) * C92451 +
             (C38038 + C38039) * C139588) *
                C139575) *
               C139593 -
           (((C38040 + C38041) * C139588 + (C38039 + C38038) * C92451) *
                C139575 +
            ((C38042 + C38043) * C139588 + (C38037 + C38036) * C92451) *
                C47029) *
               C139594 +
           (((C38043 + C38042) * C92451 + (C43656 + C43657) * C139588) *
                C47029 +
            ((C38041 + C38040) * C92451 + (C43652 + C43653) * C139588) *
                C139575) *
               C12239) *
              C139560 +
          ((((C38044 + C38045) * C92451 + (C38056 + C38057) * C139588) *
                C47029 +
            ((C38050 + C38051) * C92451 + (C38052 + C38053) * C139588) *
                C139575) *
               C139594 -
           (((C38051 + C38050) * C139588 +
             (C1151 * C139300 + C1150 * C5913) * C92451) *
                C139575 +
            ((C38045 + C38044) * C139588 +
             ((C307 * C841 + C139442 * C1125) * C139300 +
              (C307 * C831 + C139442 * C1118) * C5913) *
                 C92451) *
                C47029) *
               C139593 -
           ((((C307 * C26832 + C139442 * C27046) * C139300 +
              (C307 * C26830 + C139442 * C27044) * C5913) *
                 C139588 +
             (C38053 + C38052) * C92451) *
                C139575 +
            (((C307 * C26833 + C139442 * C27047) * C139300 +
              (C307 * C26831 + C139442 * C27045) * C5913) *
                 C139588 +
             (C38057 + C38056) * C92451) *
                C47029) *
               C12239) *
              C139377)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[101] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139442 * C308) * C2783 +
             (C307 * C182 + C139442 * C394) * C139560 -
             (C307 * C831 + C139442 * C1118) * C2784 -
             (C307 * C939 + C139442 * C1231) * C139377) *
                C92451 +
            (C35594 + C35595 - C35596 - C35610) * C139588) *
               C47029 +
           ((C3021 + C3022 - C3023 - C3024) * C92451 + C35611 * C139588) *
               C139575) *
              C139300 * C139593 +
          (((C35596 - (C35595 + C35594) + C35610) * C92451 +
            (C46568 - (C46569 + C46570) + C46571) * C139588) *
               C47029 +
           (C35612 * C92451 + (C35601 - (C35602 + C35603) + C35613) * C139588) *
               C139575) *
              C139300 * C139594 +
          (((C46570 + C46569 - C46568 - C46571) * C92451 +
            (C43654 * C2783 + C43729 * C139560 -
             (C307 * C26831 + C139442 * C27045) * C2784 -
             (C307 * C26905 + C139442 * C27115) * C139377) *
                C139588) *
               C47029 +
           ((C35603 + C35602 - C35601 - C35613) * C92451 +
            (C32487 * C2783 + C32606 * C139560 -
             (C307 * C26830 + C139442 * C27044) * C2784 -
             (C307 * C26904 + C139442 * C27114) * C139377) *
                C139588) *
               C139575) *
              C139300 * C12239)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[101] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139442 * C308) * C12388 +
             (C307 * C245 + C139442 * C474) * C139593 - C32483 * C12389 -
             C32719 * C139594 + C32486 * C12390 + C32720 * C12239) *
                C92451 +
            (C32483 * C12388 + C32719 * C139593 - C32486 * C12389 -
             C32720 * C139594 + C43654 * C12390 + C43801 * C12239) *
                C139588) *
               C47029 +
           ((C12614 + C12615 - C12616 - C12617 + C12618 + C12619) * C92451 +
            (C45778 + C45779 - C45780 - C45781 + C45782 + C45783) * C139588) *
               C139575) *
              C139560 +
          (((C35459 * C12389 -
             ((C307 * C1029 + C139442 * C1339) * C139593 +
              (C307 * C831 + C139442 * C1118) * C12388) +
             C35751 * C139594 - C38054 * C12390 - C38271 * C12239) *
                C92451 +
            (C38054 * C12389 - (C35751 * C139593 + C35459 * C12388) +
             C38271 * C139594 - (C307 * C26831 + C139442 * C27045) * C12390 -
             (C307 * C26975 + C139442 * C27182) * C12239) *
                C139588) *
               C47029 +
           ((C4566 * C12389 - (C1359 * C139593 + C1150 * C12388) +
             C4798 * C139594 - C35460 * C12390 - C35752 * C12239) *
                C92451 +
            (C35460 * C12389 - (C4798 * C139593 + C4566 * C12388) +
             C35752 * C139594 - (C307 * C26830 + C139442 * C27044) * C12390 -
             (C307 * C26974 + C139442 * C27183) * C12239) *
                C139588) *
               C139575) *
              C139377) *
         C139300) /
        (p * q * std::sqrt(p + q));
    d2eezx[101] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C92849 * C107 + C92451 * C555 + C92850 * C1767 +
              C139588 * C2376) *
                 C5913 +
             (C92849 * C116 + C92451 * C561 + C92850 * C1777 +
              C139588 * C2383) *
                 C139300) *
                C47029 +
            ((C92877 + C92876) * C5913 + (C92879 + C92878) * C139300) *
                C139575) *
               C139442 * C139593 -
           (((C94787 + C94786) * C139300 + (C94785 + C94784) * C5913) *
                C139575 +
            ((C92850 * C1783 + C139588 * C2387 + C92849 * C1777 +
              C92451 * C2383) *
                 C139300 +
             (C92850 * C1768 + C139588 * C2379 + C92849 * C1767 +
              C92451 * C2376) *
                 C5913) *
                C47029) *
               C139442 * C139594 +
           (((C92849 * C1768 + C92451 * C2379 + C92850 * C10815 +
              C139588 * C11155) *
                 C5913 +
             (C92849 * C1783 + C92451 * C2387 + C92850 * C10818 +
              C139588 * C11158) *
                 C139300) *
                C47029 +
            ((C94789 + C94788) * C5913 + (C94791 + C94790) * C139300) *
                C139575) *
               C139442 * C12239) *
              C139560 +
          ((((C92849 * C4223 + C92451 * C4899 + C92850 * C6442 +
              C139588 * C6922) *
                 C5913 +
             (C92849 * C4230 + C92451 * C4903 + C92850 * C6445 +
              C139588 * C6925) *
                 C139300) *
                C47029 +
            ((C97767 + C97766) * C5913 + (C97769 + C97768) * C139300) *
                C139575) *
               C139442 * C139594 -
           (((C93761 + C93760) * C139300 + (C93759 + C93758) * C5913) *
                C139575 +
            ((C92850 * C4230 + C139588 * C4903 + C92849 * C841 +
              C92451 * C1447) *
                 C139300 +
             (C92850 * C4223 + C139588 * C4899 + C92849 * C831 +
              C92451 * C1440) *
                 C5913) *
                C47029) *
               C139442 * C139593 -
           (((C92850 * C26832 + C139588 * C27252 + C92849 * C6444 +
              C92451 * C6924) *
                 C139300 +
             (C92850 * C26830 + C139588 * C27250 + C92849 * C6441 +
              C92451 * C6921) *
                 C5913) *
                C139575 +
            ((C92850 * C26833 + C139588 * C27253 + C92849 * C6445 +
              C92451 * C6925) *
                 C139300 +
             (C92850 * C26831 + C139588 * C27251 + C92849 * C6442 +
              C92451 * C6922) *
                 C5913) *
                C47029) *
               C139442 * C12239) *
              C139377)) /
        (p * q * std::sqrt(p + q));
    d2eezy[101] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1767 + C139588 * C2376) *
                C2783 +
            (C92849 * C182 + C92451 * C641 + C92850 * C1873 + C139588 * C2492) *
                C139560 -
            (C92850 * C4223 + C139588 * C4899 + C92849 * C831 +
             C92451 * C1440) *
                C2784 -
            (C92850 * C4337 + C139588 * C5017 + C92849 * C939 +
             C92451 * C1553) *
                C139377) *
               C47029 +
           ((C92877 + C92876) * C2783 + (C92966 + C92967) * C139560 -
            (C93759 + C93758) * C2784 - (C93872 + C93873) * C139377) *
               C139575) *
              C139442 * C139300 * C139593 +
          (((C92849 * C4223 + C92451 * C4899 + C92850 * C6442 +
             C139588 * C6922) *
                C2784 -
            ((C92850 * C1874 + C139588 * C2493 + C92849 * C1873 +
              C92451 * C2492) *
                 C139560 +
             (C92850 * C1768 + C139588 * C2379 + C92849 * C1767 +
              C92451 * C2376) *
                 C2783) +
            (C92849 * C4337 + C92451 * C5017 + C92850 * C6528 +
             C139588 * C7000) *
                C139377) *
               C47029 +
           ((C97767 + C97766) * C2784 -
            ((C94899 + C94898) * C139560 + (C94785 + C94784) * C2783) +
            (C97904 + C97905) * C139377) *
               C139575) *
              C139442 * C139300 * C139594 +
          (((C92849 * C1768 + C92451 * C2379 + C92850 * C10815 +
             C139588 * C11155) *
                C2783 +
            (C92849 * C1874 + C92451 * C2493 + C92850 * C10877 +
             C139588 * C11211) *
                C139560 -
            (C92850 * C26831 + C139588 * C27251 + C92849 * C6442 +
             C92451 * C6922) *
                C2784 -
            (C92850 * C26905 + C139588 * C27321 + C92849 * C6528 +
             C92451 * C7000) *
                C139377) *
               C47029 +
           ((C94789 + C94788) * C2783 + (C94900 + C94901) * C139560 -
            (C92850 * C26830 + C139588 * C27250 + C92849 * C6441 +
             C92451 * C6921) *
                C2784 -
            (C92850 * C26904 + C139588 * C27320 + C92849 * C6527 +
             C92451 * C7001) *
                C139377) *
               C139575) *
              C139442 * C139300 * C12239)) /
        (p * q * std::sqrt(p + q));
    d2eezz[101] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1767 + C139588 * C2376) *
                C12388 +
            (C92849 * C245 + C92451 * C719 + C92850 * C1965 + C139588 * C2591) *
                C139593 -
            (C92850 * C1768 + C139588 * C2379 + C92849 * C1767 +
             C92451 * C2376) *
                C12389 -
            (C92850 * C1966 + C139588 * C2592 + C92849 * C1965 +
             C92451 * C2591) *
                C139594 +
            (C92849 * C1768 + C92451 * C2379 + C92850 * C10815 +
             C139588 * C11155) *
                C12390 +
            (C92849 * C1966 + C92451 * C2592 + C92850 * C10937 +
             C139588 * C11262) *
                C12239) *
               C47029 +
           ((C92877 + C92876) * C12388 + (C93050 + C93051) * C139593 -
            (C94785 + C94784) * C12389 - (C95008 + C95009) * C139594 +
            (C94789 + C94788) * C12390 + (C95010 + C95011) * C12239) *
               C139575) *
              C139442 * C139560 +
          (((C92849 * C4223 + C92451 * C4899 + C92850 * C6442 +
             C139588 * C6922) *
                C12389 -
            ((C92850 * C4443 + C139588 * C5133 + C92849 * C1029 +
              C92451 * C1661) *
                 C139593 +
             (C92850 * C4223 + C139588 * C4899 + C92849 * C831 +
              C92451 * C1440) *
                 C12388) +
            (C92849 * C4443 + C92451 * C5133 + C92850 * C6608 +
             C139588 * C7077) *
                C139594 -
            (C92850 * C26831 + C139588 * C27251 + C92849 * C6442 +
             C92451 * C6922) *
                C12390 -
            (C92850 * C26975 + C139588 * C27388 + C92849 * C6608 +
             C92451 * C7077) *
                C12239) *
               C47029 +
           ((C97767 + C97766) * C12389 -
            ((C93982 + C93983) * C139593 + (C93759 + C93758) * C12388) +
            (C98040 + C98041) * C139594 -
            (C92850 * C26830 + C139588 * C27250 + C92849 * C6441 +
             C92451 * C6921) *
                C12390 -
            (C92850 * C26974 + C139588 * C27389 + C92849 * C6607 +
             C92451 * C7078) *
                C12239) *
               C139575) *
              C139442 * C139377) *
         C139300) /
        (p * q * std::sqrt(p + q));
    d2eexx[102] +=
        (-std::pow(Pi, 2.5) *
         (((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139575 * C114) *
                 C5913 +
             (C47033 * C116 + C47029 * C125 + C47034 * C117 + C139575 * C126) *
                 C139300) *
                C139442 * C92451 +
            ((C94116 + C94117) * C5913 + (C94118 + C94119) * C139300) *
                C139442 * C139588) *
               C9466 -
           (((C94126 + C94127) * C139300 + (C94128 + C94129) * C5913) *
                C139442 * C139588 +
            ((C94119 + C94118) * C139300 + (C94117 + C94116) * C5913) *
                C139442 * C92451) *
               C139403) *
              C823 +
          ((((C51581 + C51580) * C5913 + (C51579 + C51578) * C139300) *
                C139442 * C92451 +
            ((C54278 + C54279) * C5913 + (C54280 + C54281) * C139300) *
                C139442 * C139588) *
               C139403 -
           (((C51578 + C51579) * C139300 + (C51580 + C51581) * C5913) *
                C139442 * C139588 +
            ((C47771 + C47770) * C139300 + (C47769 + C47768) * C5913) *
                C139442 * C92451) *
               C9466) *
              C824 +
          ((((C47781 + C47780) * C5913 + (C47779 + C47778) * C139300) *
                C139442 * C92451 +
            ((C57236 + C57237) * C5913 + (C57238 + C57239) * C139300) *
                C139442 * C139588) *
               C9466 -
           (((C47034 * C21080 + C139575 * C21084 + C47033 * C21081 +
              C47029 * C21085) *
                 C139300 +
             (C47034 * C21078 + C139575 * C21082 + C47033 * C21079 +
              C47029 * C21083) *
                 C5913) *
                C139442 * C139588 +
            ((C57239 + C57238) * C139300 + (C57237 + C57236) * C5913) *
                C139442 * C92451) *
               C139403) *
              C825)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139575 * C114) *
                C5230 +
            (C47033 * C116 + C47029 * C125 + C47034 * C117 + C139575 * C126) *
                C5225 -
            (C47034 * C109 + C139575 * C115 + C47033 * C108 + C47029 * C114) *
                C5231 -
            (C47034 * C118 + C139575 * C127 + C47033 * C117 + C47029 * C126) *
                C5226 +
            (C47033 * C109 + C47029 * C115 + C47034 * C110 + C139575 * C119) *
                C5232 +
            (C47033 * C118 + C47029 * C127 + C47034 * C120 + C139575 * C128) *
                C5227) *
               C139442 * C92451 +
           ((C94116 + C94117) * C5230 + (C94118 + C94119) * C5225 -
            (C94120 + C94121) * C5231 - (C94122 + C94123) * C5226 +
            (C96024 + C96025) * C5232 + (C96026 + C96027) * C5227) *
               C139442 * C139588) *
              C9466 +
          (((C94121 + C94120) * C5231 -
            ((C94119 + C94118) * C5225 + (C94117 + C94116) * C5230) +
            (C94123 + C94122) * C5226 - (C96025 + C96024) * C5232 -
            (C96027 + C96026) * C5227) *
               C139442 * C92451 +
           ((C94124 + C94125) * C5231 -
            ((C94126 + C94127) * C5225 + (C94128 + C94129) * C5230) +
            (C94130 + C94131) * C5226 -
            (C47034 * C1771 + C139575 * C1786 + C47033 * C1770 +
             C47029 * C1782) *
                C5232 -
            (C47034 * C1787 + C139575 * C1795 + C47033 * C1785 +
             C47029 * C1794) *
                C5227) *
               C139442 * C139588) *
              C139403) *
         C139328) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139575 * C114) *
                C5913 +
            (C47033 * C116 + C47029 * C125 + C47034 * C117 + C139575 * C126) *
                C139300) *
               C139442 * C92451 +
           ((C94116 + C94117) * C5913 + (C94118 + C94119) * C139300) * C139442 *
               C139588) *
              C10809 -
          (((C94126 + C94127) * C139300 + (C94128 + C94129) * C5913) * C139442 *
               C139588 +
           ((C94119 + C94118) * C139300 + (C94117 + C94116) * C5913) * C139442 *
               C92451) *
              C10810 +
          (((C94129 + C94128) * C5913 + (C94127 + C94126) * C139300) * C139442 *
               C92451 +
           ((C105172 + C105173) * C5913 + (C105174 + C105175) * C139300) *
               C139442 * C139588) *
              C10811 -
          (((C47034 * C43407 + C139575 * C43411 + C47033 * C43408 +
             C47029 * C43412) *
                C139300 +
            (C47034 * C43405 + C139575 * C43409 + C47033 * C43406 +
             C47029 * C43410) *
                C5913) *
               C139442 * C139588 +
           ((C105175 + C105174) * C139300 + (C105173 + C105172) * C5913) *
               C139442 * C92451) *
              C10812) *
         C139328) /
            (p * q * std::sqrt(p + q));
    d2eexy[102] +=
        (-std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139575 * C114) *
                C934 +
            (C47033 * C182 + C47029 * C188 + C47034 * C183 + C139575 * C189) *
                C823 -
            (C47769 + C47768) * C935 - (C47898 + C47899) * C824 +
            (C47781 + C47780) * C936 + (C47900 + C47901) * C825) *
               C139442 * C92451 +
           ((C94116 + C94117) * C934 + (C94246 + C94247) * C823 -
            (C51580 + C51581) * C935 - (C51723 + C51722) * C824 +
            (C57236 + C57237) * C936 + (C57343 + C57342) * C825) *
               C139442 * C139588) *
              C139300 * C9466 +
          (((C51581 + C51580) * C935 -
            ((C94247 + C94246) * C823 + (C94117 + C94116) * C934) +
            (C51722 + C51723) * C824 - (C57237 + C57236) * C936 -
            (C57342 + C57343) * C825) *
               C139442 * C92451 +
           ((C54278 + C54279) * C935 -
            ((C94252 + C94253) * C823 + (C94128 + C94129) * C934) +
            (C54385 + C54384) * C824 -
            (C47034 * C21078 + C139575 * C21082 + C47033 * C21079 +
             C47029 * C21083) *
                C936 -
            (C47034 * C21196 + C139575 * C21198 + C47033 * C21197 +
             C47029 * C21199) *
                C825) *
               C139442 * C139588) *
              C139300 * C139403)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139575 * C114) *
                 C181 +
             (C47033 * C182 + C47029 * C188 + C47034 * C183 + C139575 * C189) *
                 C139328) *
                C139442 * C92451 +
            ((C94116 + C94117) * C181 + (C94246 + C94247) * C139328) * C139442 *
                C139588) *
               C5225 -
           (((C94248 + C94249) * C139328 + (C94120 + C94121) * C181) * C139442 *
                C139588 +
            ((C47034 * C184 + C139575 * C190 + C47033 * C183 + C47029 * C189) *
                 C139328 +
             (C47034 * C109 + C139575 * C115 + C47033 * C108 + C47029 * C114) *
                 C181) *
                C139442 * C92451) *
               C5226 +
           (((C47033 * C109 + C47029 * C115 + C47034 * C110 + C139575 * C119) *
                 C181 +
             (C47033 * C184 + C47029 * C190 + C47034 * C185 + C139575 * C191) *
                 C139328) *
                C139442 * C92451 +
            ((C96024 + C96025) * C181 + (C96130 + C96131) * C139328) * C139442 *
                C139588) *
               C5227) *
              C9466 +
          ((((C94121 + C94120) * C181 + (C94249 + C94248) * C139328) * C139442 *
                C92451 +
            ((C94124 + C94125) * C181 + (C94250 + C94251) * C139328) * C139442 *
                C139588) *
               C5226 -
           (((C94252 + C94253) * C139328 + (C94128 + C94129) * C181) * C139442 *
                C139588 +
            ((C94247 + C94246) * C139328 + (C94117 + C94116) * C181) * C139442 *
                C92451) *
               C5225 -
           (((C47034 * C1877 + C139575 * C1885 + C47033 * C1876 +
              C47029 * C1884) *
                 C139328 +
             (C47034 * C1771 + C139575 * C1786 + C47033 * C1770 +
              C47029 * C1782) *
                 C181) *
                C139442 * C139588 +
            ((C96131 + C96130) * C139328 + (C96025 + C96024) * C181) * C139442 *
                C92451) *
               C5227) *
              C139403)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139575 * C114) *
                C181 +
            (C47033 * C182 + C47029 * C188 + C47034 * C183 + C139575 * C189) *
                C139328) *
               C139442 * C92451 +
           ((C94116 + C94117) * C181 + (C94246 + C94247) * C139328) * C139442 *
               C139588) *
              C139300 * C10809 -
          (((C94252 + C94253) * C139328 + (C94128 + C94129) * C181) * C139442 *
               C139588 +
           ((C94247 + C94246) * C139328 + (C94117 + C94116) * C181) * C139442 *
               C92451) *
              C139300 * C10810 +
          (((C94129 + C94128) * C181 + (C94253 + C94252) * C139328) * C139442 *
               C92451 +
           ((C105172 + C105173) * C181 + (C105246 + C105247) * C139328) *
               C139442 * C139588) *
              C139300 * C10811 -
          (((C47034 * C43491 + C139575 * C43493 + C47033 * C43492 +
             C47029 * C43494) *
                C139328 +
            (C47034 * C43405 + C139575 * C43409 + C47033 * C43406 +
             C47029 * C43410) *
                C181) *
               C139442 * C139588 +
           ((C105247 + C105246) * C139328 + (C105173 + C105172) * C181) *
               C139442 * C92451) *
              C139300 * C10812)) /
            (p * q * std::sqrt(p + q));
    d2eexz[102] +=
        (-std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139575 * C114) *
                C9616 +
            (C47033 * C245 + C47029 * C251 + C47034 * C246 + C139575 * C252) *
                C9466 -
            (C94117 + C94116) * C9617 - (C94368 + C94369) * C139403) *
               C139442 * C92451 +
           ((C94116 + C94117) * C9616 + (C94369 + C94368) * C9466 -
            (C94128 + C94129) * C9617 - (C94371 + C94370) * C139403) *
               C139442 * C139588) *
              C823 +
          (((C51581 + C51580) * C9617 -
            ((C48021 + C48020) * C9466 + (C47769 + C47768) * C9616) +
            (C51865 + C51864) * C139403) *
               C139442 * C92451 +
           ((C54278 + C54279) * C9617 -
            ((C51864 + C51865) * C9466 + (C51580 + C51581) * C9616) +
            (C54488 + C54489) * C139403) *
               C139442 * C139588) *
              C824 +
          (((C47781 + C47780) * C9616 + (C48023 + C48022) * C9466 -
            (C57237 + C57236) * C9617 - (C57447 + C57446) * C139403) *
               C139442 * C92451 +
           ((C57236 + C57237) * C9616 + (C57446 + C57447) * C9466 -
            (C47034 * C21078 + C139575 * C21082 + C47033 * C21079 +
             C47029 * C21083) *
                C9617 -
            (C47034 * C21304 + C139575 * C21306 + C47033 * C21305 +
             C47029 * C21307) *
                C139403) *
               C139442 * C139588) *
              C825) *
         C139300) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139575 * C114) *
                C9616 +
            (C47033 * C245 + C47029 * C251 + C47034 * C246 + C139575 * C252) *
                C9466 -
            (C94117 + C94116) * C9617 - (C94368 + C94369) * C139403) *
               C139442 * C92451 +
           ((C94116 + C94117) * C9616 + (C94369 + C94368) * C9466 -
            (C94128 + C94129) * C9617 - (C94371 + C94370) * C139403) *
               C139442 * C139588) *
              C139328 * C5225 +
          (((C94121 + C94120) * C9617 -
            ((C47034 * C247 + C139575 * C253 + C47033 * C246 + C47029 * C252) *
                 C9466 +
             (C47034 * C109 + C139575 * C115 + C47033 * C108 + C47029 * C114) *
                 C9616) +
            (C94372 + C94373) * C139403) *
               C139442 * C92451 +
           ((C94124 + C94125) * C9617 -
            ((C94373 + C94372) * C9466 + (C94120 + C94121) * C9616) +
            (C94375 + C94374) * C139403) *
               C139442 * C139588) *
              C139328 * C5226 +
          (((C47033 * C109 + C47029 * C115 + C47034 * C110 + C139575 * C119) *
                C9616 +
            (C47033 * C247 + C47029 * C253 + C47034 * C248 + C139575 * C254) *
                C9466 -
            (C96025 + C96024) * C9617 - (C96234 + C96235) * C139403) *
               C139442 * C92451 +
           ((C96024 + C96025) * C9616 + (C96235 + C96234) * C9466 -
            (C47034 * C1771 + C139575 * C1786 + C47033 * C1770 +
             C47029 * C1782) *
                C9617 -
            (C47034 * C1970 + C139575 * C1978 + C47033 * C1968 +
             C47029 * C1976) *
                C139403) *
               C139442 * C139588) *
              C139328 * C5227)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139575 * C114) *
               C10931 +
           (C47033 * C245 + C47029 * C251 + C47034 * C246 + C139575 * C252) *
               C10809 -
           (C94117 + C94116) * C10932 - (C94368 + C94369) * C10810 +
           (C94129 + C94128) * C10933 + (C94370 + C94371) * C10811 -
           (C105173 + C105172) * C10934 - (C105318 + C105319) * C10812) *
              C139442 * C92451 +
          ((C94116 + C94117) * C10931 + (C94369 + C94368) * C10809 -
           (C94128 + C94129) * C10932 - (C94371 + C94370) * C10810 +
           (C105172 + C105173) * C10933 + (C105319 + C105318) * C10811 -
           (C47034 * C43405 + C139575 * C43409 + C47033 * C43406 +
            C47029 * C43410) *
               C10934 -
           (C47034 * C43567 + C139575 * C43569 + C47033 * C43568 +
            C47029 * C43570) *
               C10812) *
              C139442 * C139588) *
         C139328 * C139300) /
            (p * q * std::sqrt(p + q));
    d2eeyx[102] +=
        (-std::pow(Pi, 2.5) *
         ((((((C307 * C107 + C139442 * C308) * C5913 +
              (C307 * C116 + C139442 * C314) * C139300) *
                 C92451 +
             (C38036 + C38037) * C139588) *
                C47029 +
            ((C337 * C5913 + C338 * C139300) * C92451 +
             (C38038 + C38039) * C139588) *
                C139575) *
               C9466 -
           (((C38040 + C38041) * C139588 + (C38039 + C38038) * C92451) *
                C139575 +
            ((C38042 + C38043) * C139588 + (C38037 + C38036) * C92451) *
                C47029) *
               C139403) *
              C823 +
          ((((C38044 + C38045) * C92451 + (C38056 + C38057) * C139588) *
                C47029 +
            ((C38050 + C38051) * C92451 + (C38052 + C38053) * C139588) *
                C139575) *
               C139403 -
           (((C38051 + C38050) * C139588 +
             (C1151 * C139300 + C1150 * C5913) * C92451) *
                C139575 +
            ((C38045 + C38044) * C139588 +
             ((C307 * C841 + C139442 * C1125) * C139300 +
              (C307 * C831 + C139442 * C1118) * C5913) *
                 C92451) *
                C47029) *
               C9466) *
              C824 +
          (((((C307 * C832 + C139442 * C1121) * C5913 +
              (C307 * C847 + C139442 * C1129) * C139300) *
                 C92451 +
             (C41046 + C41047) * C139588) *
                C47029 +
            ((C1154 * C5913 + C1155 * C139300) * C92451 +
             (C41042 + C41043) * C139588) *
                C139575) *
               C9466 -
           ((((C307 * C21080 + C139442 * C21414) * C139300 +
              (C307 * C21078 + C139442 * C21412) * C5913) *
                 C139588 +
             (C41043 + C41042) * C92451) *
                C139575 +
            (((C307 * C21081 + C139442 * C21415) * C139300 +
              (C307 * C21079 + C139442 * C21413) * C5913) *
                 C139588 +
             (C41047 + C41046) * C92451) *
                C47029) *
               C139403) *
              C825)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139442 * C308) * C5230 +
             (C307 * C116 + C139442 * C314) * C5225 - C337 * C5231 -
             C338 * C5226 + C339 * C5232 + C340 * C5227) *
                C92451 +
            (C41942 + C41943 - C41944 - C41945 + C41946 + C41947) * C139588) *
               C47029 +
           ((C337 * C5230 + C338 * C5225 - C339 * C5231 - C340 * C5226 +
             C341 * C5232 + C342 * C5227) *
                C92451 +
            (C41948 + C41949 - C41950 - C41951 + C41952 + C41953) * C139588) *
               C139575) *
              C9466 +
          (((C41944 - (C41943 + C41942) + C41945 - C41946 - C41947) * C92451 +
            (C2090 * C5231 - (C32485 * C5225 + C32486 * C5230) + C2091 * C5226 -
             C2092 * C5232 - C2093 * C5227) *
                C139588) *
               C47029 +
           ((C41950 - (C41949 + C41948) + C41951 - C41952 - C41953) * C92451 +
            (C2092 * C5231 - (C2091 * C5225 + C2090 * C5230) + C2093 * C5226 -
             (C307 * C1771 + C139442 * C2060) * C5232 -
             (C307 * C1787 + C139442 * C2068) * C5227) *
                C139588) *
               C139575) *
              C139403) *
         C139328) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139442 * C308) * C5913 +
             (C307 * C116 + C139442 * C314) * C139300) *
                C92451 +
            (C38036 + C38037) * C139588) *
               C47029 +
           ((C337 * C5913 + C338 * C139300) * C92451 +
            (C38038 + C38039) * C139588) *
               C139575) *
              C10809 -
          (((C38040 + C38041) * C139588 + (C38039 + C38038) * C92451) *
               C139575 +
           ((C38042 + C38043) * C139588 + (C38037 + C38036) * C92451) *
               C47029) *
              C10810 +
          (((C38043 + C38042) * C92451 + (C43656 + C43657) * C139588) * C47029 +
           ((C38041 + C38040) * C92451 + (C43652 + C43653) * C139588) *
               C139575) *
              C10811 -
          ((((C307 * C43407 + C139442 * C43645) * C139300 +
             (C307 * C43405 + C139442 * C43643) * C5913) *
                C139588 +
            (C43653 + C43652) * C92451) *
               C139575 +
           (((C307 * C43408 + C139442 * C43646) * C139300 +
             (C307 * C43406 + C139442 * C43644) * C5913) *
                C139588 +
            (C43657 + C43656) * C92451) *
               C47029) *
              C10812) *
         C139328) /
            (p * q * std::sqrt(p + q));
    d2eeyy[102] +=
        (-std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139442 * C308) * C934 +
             (C307 * C182 + C139442 * C394) * C823 -
             (C307 * C831 + C139442 * C1118) * C935 -
             (C307 * C939 + C139442 * C1231) * C824 +
             (C307 * C832 + C139442 * C1121) * C936 +
             (C307 * C940 + C139442 * C1232) * C825) *
                C92451 +
            (C42942 + C42943 - C42944 - C42945 + C42946 + C42947) * C139588) *
               C47029 +
           ((C1240 + C1241 - C1242 - C1260 + C1245 + C1261) * C92451 +
            (C31515 + C31516 - C31517 - C31518 + C31519 + C31523) * C139588) *
               C139575) *
              C139300 * C9466 +
          (((C42944 - (C42943 + C42942) + C42945 - C42946 - C42947) * C92451 +
            (C38054 * C935 - (C32605 * C823 + C32486 * C934) + C38169 * C824 -
             (C307 * C21079 + C139442 * C21413) * C936 -
             (C307 * C21197 + C139442 * C21514) * C825) *
                C139588) *
               C47029 +
           ((C31517 - (C31516 + C31515) + C31518 - C31519 - C31523) * C92451 +
            (C35460 * C935 - (C2190 * C823 + C2090 * C934) + C35609 * C824 -
             (C307 * C21078 + C139442 * C21412) * C936 -
             (C307 * C21196 + C139442 * C21515) * C825) *
                C139588) *
               C139575) *
              C139300 * C139403)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((((C307 * C107 + C139442 * C308) * C181 +
              (C307 * C182 + C139442 * C394) * C139328) *
                 C92451 +
             (C32591 + C32607) * C139588) *
                C47029 +
            ((C401 + C417) * C92451 + C32594 * C139588) * C139575) *
               C5225 -
           ((C3772 * C139588 + (C418 + C404) * C92451) * C139575 +
            (C32595 * C139588 + (C417 + C401) * C92451) * C47029) *
               C5226 +
           ((C421 * C92451 + C34499 * C139588) * C47029 +
            ((C409 + C419) * C92451 + (C3769 + C3775) * C139588) * C139575) *
               C5227) *
              C9466 +
          (((C32594 * C92451 + C32596 * C139588) * C47029 +
            (C34499 * C92451 + (C2185 + C2195) * C139588) * C139575) *
               C5226 -
           ((C32597 * C139588 + C32595 * C92451) * C139575 +
            ((C32608 + C32600) * C139588 + (C32607 + C32591) * C92451) *
                C47029) *
               C5225 -
           ((((C307 * C1877 + C139442 * C2174) * C139328 +
              (C307 * C1771 + C139442 * C2060) * C181) *
                 C139588 +
             (C3775 + C3769) * C92451) *
                C139575 +
            ((C2195 + C2185) * C139588 + C3772 * C92451) * C47029) *
               C5227) *
              C139403)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139442 * C308) * C181 +
             (C307 * C182 + C139442 * C394) * C139328) *
                C92451 +
            (C32591 + C32607) * C139588) *
               C47029 +
           ((C401 + C417) * C92451 + C32594 * C139588) * C139575) *
              C139300 * C10809 -
          ((C32597 * C139588 + C32595 * C92451) * C139575 +
           ((C32608 + C32600) * C139588 + (C32607 + C32591) * C92451) *
               C47029) *
              C139300 * C10810 +
          (((C32600 + C32608) * C92451 + (C43726 + C43730) * C139588) * C47029 +
           (C32596 * C92451 + (C32601 + C32609) * C139588) * C139575) *
              C139300 * C10811 -
          ((((C307 * C43491 + C139442 * C43723) * C139328 +
             (C307 * C43405 + C139442 * C43643) * C181) *
                C139588 +
            (C32609 + C32601) * C92451) *
               C139575 +
           (((C307 * C43492 + C139442 * C43724) * C139328 +
             (C307 * C43406 + C139442 * C43644) * C181) *
                C139588 +
            (C43730 + C43726) * C92451) *
               C47029) *
              C139300 * C10812)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[102] +=
        (-std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139442 * C308) * C9616 +
             (C307 * C245 + C139442 * C474) * C9466 - C32483 * C9617 -
             C32719 * C139403) *
                C92451 +
            (C32483 * C9616 + C32719 * C9466 - C32486 * C9617 -
             C32720 * C139403) *
                C139588) *
               C47029 +
           ((C9841 + C9842 - C9843 - C9844) * C92451 +
            (C42150 + C42151 - C42152 - C42153) * C139588) *
               C139575) *
              C823 +
          (((C35459 * C9617 -
             ((C307 * C1029 + C139442 * C1339) * C9466 +
              (C307 * C831 + C139442 * C1118) * C9616) +
             C35751 * C139403) *
                C92451 +
            (C38054 * C9617 - (C35751 * C9466 + C35459 * C9616) +
             C38271 * C139403) *
                C139588) *
               C47029 +
           ((C11854 - (C11855 + C11856) + C11857) * C92451 +
            (C44788 - (C44789 + C44790) + C44791) * C139588) *
               C139575) *
              C824 +
          ((((C307 * C832 + C139442 * C1121) * C9616 +
             (C307 * C1030 + C139442 * C1340) * C9466 - C41044 * C9617 -
             C41255 * C139403) *
                C92451 +
            (C41044 * C9616 + C41255 * C9466 -
             (C307 * C21079 + C139442 * C21413) * C9617 -
             (C307 * C21305 + C139442 * C21614) * C139403) *
                C139588) *
               C47029 +
           ((C1154 * C9616 + C1360 * C9466 - C31415 * C9617 -
             C31627 * C139403) *
                C92451 +
            (C31415 * C9616 + C31627 * C9466 -
             (C307 * C21078 + C139442 * C21412) * C9617 -
             (C307 * C21304 + C139442 * C21615) * C139403) *
                C139588) *
               C139575) *
              C825) *
         C139300) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139442 * C308) * C9616 +
             (C307 * C245 + C139442 * C474) * C9466 - C32483 * C9617 -
             C32719 * C139403) *
                C92451 +
            (C32483 * C9616 + C32719 * C9466 - C32486 * C9617 -
             C32720 * C139403) *
                C139588) *
               C47029 +
           ((C9841 + C9842 - C9843 - C9844) * C92451 +
            (C42150 + C42151 - C42152 - C42153) * C139588) *
               C139575) *
              C139328 * C5225 +
          (((C9843 - (C9842 + C9841) + C9844) * C92451 +
            (C42152 - (C42151 + C42150) + C42153) * C139588) *
               C47029 +
           ((C9847 - (C9846 + C9845) + C9848) * C92451 +
            (C42154 - (C42155 + C42156) + C42157) * C139588) *
               C139575) *
              C139328 * C5226 +
          ((C9855 * C92451 + (C42156 + C42155 - C42154 - C42157) * C139588) *
               C47029 +
           ((C9851 + C9850 - C9849 - C9852) * C92451 +
            (C3692 * C9616 + C3865 * C9466 -
             (C307 * C1771 + C139442 * C2060) * C9617 -
             (C307 * C1970 + C139442 * C2276) * C139403) *
                C139588) *
               C139575) *
              C139328 * C5227)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139442 * C308) * C10931 +
            (C307 * C245 + C139442 * C474) * C10809 - C32483 * C10932 -
            C32719 * C10810 + C32486 * C10933 + C32720 * C10811 -
            C43654 * C10934 - C43801 * C10812) *
               C92451 +
           (C32483 * C10931 + C32719 * C10809 - C32486 * C10932 -
            C32720 * C10810 + C43654 * C10933 + C43801 * C10811 -
            (C307 * C43406 + C139442 * C43644) * C10934 -
            (C307 * C43568 + C139442 * C43796) * C10812) *
               C139588) *
              C47029 +
          ((C337 * C10931 + C493 * C10809 - C2086 * C10932 - C2294 * C10810 +
            C2090 * C10933 + C2295 * C10811 - C32487 * C10934 -
            C32721 * C10812) *
               C92451 +
           (C2086 * C10931 + C2294 * C10809 - C2090 * C10932 - C2295 * C10810 +
            C32487 * C10933 + C32721 * C10811 -
            (C307 * C43405 + C139442 * C43643) * C10934 -
            (C307 * C43567 + C139442 * C43797) * C10812) *
               C139588) *
              C139575) *
         C139328 * C139300) /
            (p * q * std::sqrt(p + q));
    d2eezx[102] +=
        (-std::pow(Pi, 2.5) *
         (((((C92849 * C107 + C92451 * C555 + C92850 * C1767 +
              C139588 * C2376) *
                 C5913 +
             (C92849 * C116 + C92451 * C561 + C92850 * C1777 +
              C139588 * C2383) *
                 C139300) *
                C47029 +
            ((C92877 + C92876) * C5913 + (C92879 + C92878) * C139300) *
                C139575) *
               C139442 * C9466 -
           (((C94787 + C94786) * C139300 + (C94785 + C94784) * C5913) *
                C139575 +
            ((C92850 * C1783 + C139588 * C2387 + C92849 * C1777 +
              C92451 * C2383) *
                 C139300 +
             (C92850 * C1768 + C139588 * C2379 + C92849 * C1767 +
              C92451 * C2376) *
                 C5913) *
                C47029) *
               C139442 * C139403) *
              C823 +
          ((((C92849 * C4223 + C92451 * C4899 + C92850 * C6442 +
              C139588 * C6922) *
                 C5913 +
             (C92849 * C4230 + C92451 * C4903 + C92850 * C6445 +
              C139588 * C6925) *
                 C139300) *
                C47029 +
            ((C97767 + C97766) * C5913 + (C97769 + C97768) * C139300) *
                C139575) *
               C139442 * C139403 -
           (((C93761 + C93760) * C139300 + (C93759 + C93758) * C5913) *
                C139575 +
            ((C92850 * C4230 + C139588 * C4903 + C92849 * C841 +
              C92451 * C1447) *
                 C139300 +
             (C92850 * C4223 + C139588 * C4899 + C92849 * C831 +
              C92451 * C1440) *
                 C5913) *
                C47029) *
               C139442 * C9466) *
              C824 +
          ((((C92849 * C832 + C92451 * C1443 + C92850 * C8754 +
              C139588 * C9234) *
                 C5913 +
             (C92849 * C847 + C92451 * C1451 + C92850 * C8757 +
              C139588 * C9237) *
                 C139300) *
                C47029 +
            ((C93763 + C93762) * C5913 + (C93765 + C93764) * C139300) *
                C139575) *
               C139442 * C9466 -
           (((C92850 * C21080 + C139588 * C21716 + C92849 * C8756 +
              C92451 * C9236) *
                 C139300 +
             (C92850 * C21078 + C139588 * C21714 + C92849 * C8753 +
              C92451 * C9233) *
                 C5913) *
                C139575 +
            ((C92850 * C21081 + C139588 * C21717 + C92849 * C8757 +
              C92451 * C9237) *
                 C139300 +
             (C92850 * C21079 + C139588 * C21715 + C92849 * C8754 +
              C92451 * C9234) *
                 C5913) *
                C47029) *
               C139442 * C139403) *
              C825)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1767 + C139588 * C2376) *
                C5230 +
            (C92849 * C116 + C92451 * C561 + C92850 * C1777 + C139588 * C2383) *
                C5225 -
            (C92876 + C92877) * C5231 - (C92878 + C92879) * C5226 +
            (C92880 + C92881) * C5232 + (C92882 + C92883) * C5227) *
               C47029 +
           ((C92877 + C92876) * C5230 + (C92879 + C92878) * C5225 -
            (C92881 + C92880) * C5231 - (C92883 + C92882) * C5226 +
            (C92885 + C92884) * C5232 + (C92887 + C92886) * C5227) *
               C139575) *
              C139442 * C9466 +
          (((C94784 + C94785) * C5231 -
            ((C92850 * C1783 + C139588 * C2387 + C92849 * C1777 +
              C92451 * C2383) *
                 C5225 +
             (C92850 * C1768 + C139588 * C2379 + C92849 * C1767 +
              C92451 * C2376) *
                 C5230) +
            (C94786 + C94787) * C5226 - (C96636 + C96637) * C5232 -
            (C96638 + C96639) * C5227) *
               C47029 +
           ((C96637 + C96636) * C5231 -
            ((C94787 + C94786) * C5225 + (C94785 + C94784) * C5230) +
            (C96639 + C96638) * C5226 -
            (C92850 * C1771 + C139588 * C2382 + C92849 * C1766 +
             C92451 * C2378) *
                C5232 -
            (C92850 * C1787 + C139588 * C2390 + C92849 * C1779 +
             C92451 * C2386) *
                C5227) *
               C139575) *
              C139442 * C139403) *
         C139328) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1767 + C139588 * C2376) *
                C5913 +
            (C92849 * C116 + C92451 * C561 + C92850 * C1777 + C139588 * C2383) *
                C139300) *
               C47029 +
           ((C92877 + C92876) * C5913 + (C92879 + C92878) * C139300) *
               C139575) *
              C139442 * C10809 -
          (((C94787 + C94786) * C139300 + (C94785 + C94784) * C5913) * C139575 +
           ((C92850 * C1783 + C139588 * C2387 + C92849 * C1777 +
             C92451 * C2383) *
                C139300 +
            (C92850 * C1768 + C139588 * C2379 + C92849 * C1767 +
             C92451 * C2376) *
                C5913) *
               C47029) *
              C139442 * C10810 +
          (((C92849 * C1768 + C92451 * C2379 + C92850 * C10815 +
             C139588 * C11155) *
                C5913 +
            (C92849 * C1783 + C92451 * C2387 + C92850 * C10818 +
             C139588 * C11158) *
                C139300) *
               C47029 +
           ((C94789 + C94788) * C5913 + (C94791 + C94790) * C139300) *
               C139575) *
              C139442 * C10811 -
          (((C92850 * C43407 + C139588 * C43869 + C92849 * C10817 +
             C92451 * C11157) *
                C139300 +
            (C92850 * C43405 + C139588 * C43867 + C92849 * C10814 +
             C92451 * C11154) *
                C5913) *
               C139575 +
           ((C92850 * C43408 + C139588 * C43870 + C92849 * C10818 +
             C92451 * C11158) *
                C139300 +
            (C92850 * C43406 + C139588 * C43868 + C92849 * C10815 +
             C92451 * C11155) *
                C5913) *
               C47029) *
              C139442 * C10812) *
         C139328) /
            (p * q * std::sqrt(p + q));
    d2eezy[102] +=
        (-std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1767 + C139588 * C2376) *
                C934 +
            (C92849 * C182 + C92451 * C641 + C92850 * C1873 + C139588 * C2492) *
                C823 -
            (C92850 * C4223 + C139588 * C4899 + C92849 * C831 +
             C92451 * C1440) *
                C935 -
            (C92850 * C4337 + C139588 * C5017 + C92849 * C939 +
             C92451 * C1553) *
                C824 +
            (C92849 * C832 + C92451 * C1443 + C92850 * C8754 +
             C139588 * C9234) *
                C936 +
            (C92849 * C940 + C92451 * C1554 + C92850 * C8840 +
             C139588 * C9312) *
                C825) *
               C47029 +
           ((C92877 + C92876) * C934 + (C92966 + C92967) * C823 -
            (C93759 + C93758) * C935 - (C93872 + C93873) * C824 +
            (C93763 + C93762) * C936 + (C93874 + C93875) * C825) *
               C139575) *
              C139442 * C139300 * C9466 +
          (((C92849 * C4223 + C92451 * C4899 + C92850 * C6442 +
             C139588 * C6922) *
                C935 -
            ((C92850 * C1874 + C139588 * C2493 + C92849 * C1873 +
              C92451 * C2492) *
                 C823 +
             (C92850 * C1768 + C139588 * C2379 + C92849 * C1767 +
              C92451 * C2376) *
                 C934) +
            (C92849 * C4337 + C92451 * C5017 + C92850 * C6528 +
             C139588 * C7000) *
                C824 -
            (C92850 * C21079 + C139588 * C21715 + C92849 * C8754 +
             C92451 * C9234) *
                C936 -
            (C92850 * C21197 + C139588 * C21830 + C92849 * C8840 +
             C92451 * C9312) *
                C825) *
               C47029 +
           ((C97767 + C97766) * C935 -
            ((C94899 + C94898) * C823 + (C94785 + C94784) * C934) +
            (C97904 + C97905) * C824 -
            (C92850 * C21078 + C139588 * C21714 + C92849 * C8753 +
             C92451 * C9233) *
                C936 -
            (C92850 * C21196 + C139588 * C21831 + C92849 * C8839 +
             C92451 * C9313) *
                C825) *
               C139575) *
              C139442 * C139300 * C139403)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C92849 * C107 + C92451 * C555 + C92850 * C1767 +
              C139588 * C2376) *
                 C181 +
             (C92849 * C182 + C92451 * C641 + C92850 * C1873 +
              C139588 * C2492) *
                 C139328) *
                C47029 +
            ((C92877 + C92876) * C181 + (C92966 + C92967) * C139328) *
                C139575) *
               C139442 * C5225 -
           (((C92968 + C92969) * C139328 + (C92881 + C92880) * C181) * C139575 +
            ((C92967 + C92966) * C139328 + (C92876 + C92877) * C181) * C47029) *
               C139442 * C5226 +
           (((C92880 + C92881) * C181 + (C92969 + C92968) * C139328) * C47029 +
            ((C92885 + C92884) * C181 + (C92970 + C92971) * C139328) *
                C139575) *
               C139442 * C5227) *
              C9466 +
          ((((C94784 + C94785) * C181 + (C94898 + C94899) * C139328) * C47029 +
            ((C96637 + C96636) * C181 + (C96742 + C96743) * C139328) *
                C139575) *
               C139442 * C5226 -
           (((C94899 + C94898) * C139328 + (C94785 + C94784) * C181) * C139575 +
            ((C92850 * C1874 + C139588 * C2493 + C92849 * C1873 +
              C92451 * C2492) *
                 C139328 +
             (C92850 * C1768 + C139588 * C2379 + C92849 * C1767 +
              C92451 * C2376) *
                 C181) *
                C47029) *
               C139442 * C5225 -
           (((C92850 * C1877 + C139588 * C2496 + C92849 * C1872 +
              C92451 * C2491) *
                 C139328 +
             (C92850 * C1771 + C139588 * C2382 + C92849 * C1766 +
              C92451 * C2378) *
                 C181) *
                C139575 +
            ((C96743 + C96742) * C139328 + (C96636 + C96637) * C181) * C47029) *
               C139442 * C5227) *
              C139403)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1767 + C139588 * C2376) *
                C181 +
            (C92849 * C182 + C92451 * C641 + C92850 * C1873 + C139588 * C2492) *
                C139328) *
               C47029 +
           ((C92877 + C92876) * C181 + (C92966 + C92967) * C139328) * C139575) *
              C139442 * C139300 * C10809 -
          (((C94899 + C94898) * C139328 + (C94785 + C94784) * C181) * C139575 +
           ((C92850 * C1874 + C139588 * C2493 + C92849 * C1873 +
             C92451 * C2492) *
                C139328 +
            (C92850 * C1768 + C139588 * C2379 + C92849 * C1767 +
             C92451 * C2376) *
                C181) *
               C47029) *
              C139442 * C139300 * C10810 +
          (((C92849 * C1768 + C92451 * C2379 + C92850 * C10815 +
             C139588 * C11155) *
                C181 +
            (C92849 * C1874 + C92451 * C2493 + C92850 * C10877 +
             C139588 * C11211) *
                C139328) *
               C47029 +
           ((C94789 + C94788) * C181 + (C94900 + C94901) * C139328) * C139575) *
              C139442 * C139300 * C10811 -
          (((C92850 * C43491 + C139588 * C43937 + C92849 * C10876 +
             C92451 * C11210) *
                C139328 +
            (C92850 * C43405 + C139588 * C43867 + C92849 * C10814 +
             C92451 * C11154) *
                C181) *
               C139575 +
           ((C92850 * C43492 + C139588 * C43938 + C92849 * C10877 +
             C92451 * C11211) *
                C139328 +
            (C92850 * C43406 + C139588 * C43868 + C92849 * C10815 +
             C92451 * C11155) *
                C181) *
               C47029) *
              C139442 * C139300 * C10812)) /
            (p * q * std::sqrt(p + q));
    d2eezz[102] +=
        (-std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1767 + C139588 * C2376) *
                C9616 +
            (C92849 * C245 + C92451 * C719 + C92850 * C1965 + C139588 * C2591) *
                C9466 -
            (C92850 * C1768 + C139588 * C2379 + C92849 * C1767 +
             C92451 * C2376) *
                C9617 -
            (C92850 * C1966 + C139588 * C2592 + C92849 * C1965 +
             C92451 * C2591) *
                C139403) *
               C47029 +
           ((C92877 + C92876) * C9616 + (C93050 + C93051) * C9466 -
            (C94785 + C94784) * C9617 - (C95008 + C95009) * C139403) *
               C139575) *
              C139442 * C823 +
          (((C92849 * C4223 + C92451 * C4899 + C92850 * C6442 +
             C139588 * C6922) *
                C9617 -
            ((C92850 * C4443 + C139588 * C5133 + C92849 * C1029 +
              C92451 * C1661) *
                 C9466 +
             (C92850 * C4223 + C139588 * C4899 + C92849 * C831 +
              C92451 * C1440) *
                 C9616) +
            (C92849 * C4443 + C92451 * C5133 + C92850 * C6608 +
             C139588 * C7077) *
                C139403) *
               C47029 +
           ((C97767 + C97766) * C9617 -
            ((C93982 + C93983) * C9466 + (C93759 + C93758) * C9616) +
            (C98040 + C98041) * C139403) *
               C139575) *
              C139442 * C824 +
          (((C92849 * C832 + C92451 * C1443 + C92850 * C8754 +
             C139588 * C9234) *
                C9616 +
            (C92849 * C1030 + C92451 * C1662 + C92850 * C8920 +
             C139588 * C9389) *
                C9466 -
            (C92850 * C21079 + C139588 * C21715 + C92849 * C8754 +
             C92451 * C9234) *
                C9617 -
            (C92850 * C21305 + C139588 * C21933 + C92849 * C8920 +
             C92451 * C9389) *
                C139403) *
               C47029 +
           ((C93763 + C93762) * C9616 + (C93984 + C93985) * C9466 -
            (C92850 * C21078 + C139588 * C21714 + C92849 * C8753 +
             C92451 * C9233) *
                C9617 -
            (C92850 * C21304 + C139588 * C21934 + C92849 * C8919 +
             C92451 * C9390) *
                C139403) *
               C139575) *
              C139442 * C825) *
         C139300) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1767 + C139588 * C2376) *
                C9616 +
            (C92849 * C245 + C92451 * C719 + C92850 * C1965 + C139588 * C2591) *
                C9466 -
            (C92850 * C1768 + C139588 * C2379 + C92849 * C1767 +
             C92451 * C2376) *
                C9617 -
            (C92850 * C1966 + C139588 * C2592 + C92849 * C1965 +
             C92451 * C2591) *
                C139403) *
               C47029 +
           ((C92877 + C92876) * C9616 + (C93050 + C93051) * C9466 -
            (C94785 + C94784) * C9617 - (C95008 + C95009) * C139403) *
               C139575) *
              C139442 * C139328 * C5225 +
          (((C94784 + C94785) * C9617 -
            ((C93051 + C93050) * C9466 + (C92876 + C92877) * C9616) +
            (C95009 + C95008) * C139403) *
               C47029 +
           ((C96637 + C96636) * C9617 -
            ((C93052 + C93053) * C9466 + (C92881 + C92880) * C9616) +
            (C96846 + C96847) * C139403) *
               C139575) *
              C139442 * C139328 * C5226 +
          (((C92880 + C92881) * C9616 + (C93053 + C93052) * C9466 -
            (C96636 + C96637) * C9617 - (C96847 + C96846) * C139403) *
               C47029 +
           ((C92885 + C92884) * C9616 + (C93054 + C93055) * C9466 -
            (C92850 * C1771 + C139588 * C2382 + C92849 * C1766 +
             C92451 * C2378) *
                C9617 -
            (C92850 * C1970 + C139588 * C2598 + C92849 * C1969 +
             C92451 * C2597) *
                C139403) *
               C139575) *
              C139442 * C139328 * C5227)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C92849 * C107 + C92451 * C555 + C92850 * C1767 + C139588 * C2376) *
               C10931 +
           (C92849 * C245 + C92451 * C719 + C92850 * C1965 + C139588 * C2591) *
               C10809 -
           (C92850 * C1768 + C139588 * C2379 + C92849 * C1767 +
            C92451 * C2376) *
               C10932 -
           (C92850 * C1966 + C139588 * C2592 + C92849 * C1965 +
            C92451 * C2591) *
               C10810 +
           (C92849 * C1768 + C92451 * C2379 + C92850 * C10815 +
            C139588 * C11155) *
               C10933 +
           (C92849 * C1966 + C92451 * C2592 + C92850 * C10937 +
            C139588 * C11262) *
               C10811 -
           (C92850 * C43406 + C139588 * C43868 + C92849 * C10815 +
            C92451 * C11155) *
               C10934 -
           (C92850 * C43568 + C139588 * C44005 + C92849 * C10937 +
            C92451 * C11262) *
               C10812) *
              C47029 +
          ((C92877 + C92876) * C10931 + (C93050 + C93051) * C10809 -
           (C94785 + C94784) * C10932 - (C95008 + C95009) * C10810 +
           (C94789 + C94788) * C10933 + (C95010 + C95011) * C10811 -
           (C92850 * C43405 + C139588 * C43867 + C92849 * C10814 +
            C92451 * C11154) *
               C10934 -
           (C92850 * C43567 + C139588 * C44006 + C92849 * C10936 +
            C92451 * C11263) *
               C10812) *
              C139575) *
         C139442 * C139328 * C139300) /
            (p * q * std::sqrt(p + q));
    d2eexx[103] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139575 * C114) *
                C137108 +
            (C47033 * C116 + C47029 * C125 + C47034 * C117 + C139575 * C126) *
                C139552 -
            (C47034 * C109 + C139575 * C115 + C47033 * C108 + C47029 * C114) *
                C137101 -
            (C47034 * C118 + C139575 * C127 + C47033 * C117 + C47029 * C126) *
                C139305) *
               C139442 * C92451 +
           ((C94116 + C94117) * C137108 + (C94118 + C94119) * C139552 -
            (C94120 + C94121) * C137101 - (C94122 + C94123) * C139305) *
               C139442 * C139588) *
              C139593 +
          (((C94121 + C94120) * C137101 -
            ((C94119 + C94118) * C139552 + (C94117 + C94116) * C137108) +
            (C94123 + C94122) * C139305) *
               C139442 * C92451 +
           ((C94124 + C94125) * C137101 -
            ((C94126 + C94127) * C139552 + (C94128 + C94129) * C137108) +
            (C94130 + C94131) * C139305) *
               C139442 * C139588) *
              C139594 +
          (((C94129 + C94128) * C137108 + (C94127 + C94126) * C139552 -
            (C94125 + C94124) * C137101 - (C94131 + C94130) * C139305) *
               C139442 * C92451 +
           ((C105172 + C105173) * C137108 + (C105174 + C105175) * C139552 -
            (C47034 * C10813 + C139575 * C10819 + C47033 * C10814 +
             C47029 * C10820) *
                C137101 -
            (C47034 * C10816 + C139575 * C10822 + C47033 * C10817 +
             C47029 * C10823) *
                C139305) *
               C139442 * C139588) *
              C12239) *
         C139328) /
        (p * q * std::sqrt(p + q));
    d2eexy[103] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139575 * C114) *
                 C181 +
             (C47033 * C182 + C47029 * C188 + C47034 * C183 + C139575 * C189) *
                 C139328) *
                C139442 * C92451 +
            ((C94116 + C94117) * C181 + (C94246 + C94247) * C139328) * C139442 *
                C139588) *
               C139552 -
           (((C94248 + C94249) * C139328 + (C94120 + C94121) * C181) * C139442 *
                C139588 +
            ((C47034 * C184 + C139575 * C190 + C47033 * C183 + C47029 * C189) *
                 C139328 +
             (C47034 * C109 + C139575 * C115 + C47033 * C108 + C47029 * C114) *
                 C181) *
                C139442 * C92451) *
               C139305) *
              C139593 +
          ((((C94121 + C94120) * C181 + (C94249 + C94248) * C139328) * C139442 *
                C92451 +
            ((C94124 + C94125) * C181 + (C94250 + C94251) * C139328) * C139442 *
                C139588) *
               C139305 -
           (((C94252 + C94253) * C139328 + (C94128 + C94129) * C181) * C139442 *
                C139588 +
            ((C94247 + C94246) * C139328 + (C94117 + C94116) * C181) * C139442 *
                C92451) *
               C139552) *
              C139594 +
          ((((C94129 + C94128) * C181 + (C94253 + C94252) * C139328) * C139442 *
                C92451 +
            ((C105172 + C105173) * C181 + (C105246 + C105247) * C139328) *
                C139442 * C139588) *
               C139552 -
           (((C47034 * C10875 + C139575 * C10878 + C47033 * C10876 +
              C47029 * C10879) *
                 C139328 +
             (C47034 * C10813 + C139575 * C10819 + C47033 * C10814 +
              C47029 * C10820) *
                 C181) *
                C139442 * C139588 +
            ((C94251 + C94250) * C139328 + (C94125 + C94124) * C181) * C139442 *
                C92451) *
               C139305) *
              C12239)) /
        (p * q * std::sqrt(p + q));
    d2eexz[103] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139575 * C114) *
                C12388 +
            (C47033 * C245 + C47029 * C251 + C47034 * C246 + C139575 * C252) *
                C139593 -
            (C94117 + C94116) * C12389 - (C94368 + C94369) * C139594 +
            (C94129 + C94128) * C12390 + (C94370 + C94371) * C12239) *
               C139442 * C92451 +
           ((C94116 + C94117) * C12388 + (C94369 + C94368) * C139593 -
            (C94128 + C94129) * C12389 - (C94371 + C94370) * C139594 +
            (C105172 + C105173) * C12390 + (C105319 + C105318) * C12239) *
               C139442 * C139588) *
              C139328 * C139552 +
          (((C94121 + C94120) * C12389 -
            ((C47034 * C247 + C139575 * C253 + C47033 * C246 + C47029 * C252) *
                 C139593 +
             (C47034 * C109 + C139575 * C115 + C47033 * C108 + C47029 * C114) *
                 C12388) +
            (C94372 + C94373) * C139594 - (C94125 + C94124) * C12390 -
            (C94374 + C94375) * C12239) *
               C139442 * C92451 +
           ((C94124 + C94125) * C12389 -
            ((C94373 + C94372) * C139593 + (C94120 + C94121) * C12388) +
            (C94375 + C94374) * C139594 -
            (C47034 * C10813 + C139575 * C10819 + C47033 * C10814 +
             C47029 * C10820) *
                C12390 -
            (C47034 * C10935 + C139575 * C10938 + C47033 * C10936 +
             C47029 * C10939) *
                C12239) *
               C139442 * C139588) *
              C139328 * C139305)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[103] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    (((((C307 * C107 + C139442 * C308) * C137108 +
                        (C307 * C116 + C139442 * C314) * C139552 -
                        C337 * C137101 - C338 * C139305) *
                           C92451 +
                       (C39974 + C39975 - C39976 - C39977) * C139588) *
                          C47029 +
                      ((C337 * C137108 + C338 * C139552 - C339 * C137101 -
                        C340 * C139305) *
                           C92451 +
                       (C39978 + C39979 - C39980 - C39981) * C139588) *
                          C139575) *
                         C139593 +
                     (((C39976 - (C39975 + C39974) + C39977) * C92451 +
                       (C45574 - (C45575 + C45576) + C45577) * C139588) *
                          C47029 +
                      ((C39980 - (C39979 + C39978) + C39981) * C92451 +
                       (C45578 - (C45579 + C45580) + C45581) * C139588) *
                          C139575) *
                         C139594 +
                     (((C45576 + C45575 - C45574 - C45577) * C92451 +
                       (C43654 * C137108 + C43655 * C139552 - C32487 * C137101 -
                        C32488 * C139305) *
                           C139588) *
                          C47029 +
                      ((C45580 + C45579 - C45578 - C45581) * C92451 +
                       (C32487 * C137108 + C32488 * C139552 -
                        (C307 * C10813 + C139442 * C10991) * C137101 -
                        (C307 * C10816 + C139442 * C10994) * C139305) *
                           C139588) *
                          C139575) *
                         C12239) *
                    C139328) /
                   (p * q * std::sqrt(p + q));
    d2eeyy[103] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C307 * C107 + C139442 * C308) * C181 +
              (C307 * C182 + C139442 * C394) * C139328) *
                 C92451 +
             (C32591 + C32607) * C139588) *
                C47029 +
            ((C401 + C417) * C92451 + C32594 * C139588) * C139575) *
               C139552 -
           ((C3772 * C139588 + (C418 + C404) * C92451) * C139575 +
            (C32595 * C139588 + (C417 + C401) * C92451) * C47029) *
               C139305) *
              C139593 +
          (((C32594 * C92451 + C32596 * C139588) * C47029 +
            (C34499 * C92451 + (C2185 + C2195) * C139588) * C139575) *
               C139305 -
           ((C32597 * C139588 + C32595 * C92451) * C139575 +
            ((C32608 + C32600) * C139588 + (C32607 + C32591) * C92451) *
                C47029) *
               C139552) *
              C139594 +
          ((((C32600 + C32608) * C92451 + (C43726 + C43730) * C139588) *
                C47029 +
            (C32596 * C92451 + (C32601 + C32609) * C139588) * C139575) *
               C139552 -
           ((((C307 * C10875 + C139442 * C11047) * C139328 +
              (C307 * C10813 + C139442 * C10991) * C181) *
                 C139588 +
             (C2195 + C2185) * C92451) *
                C139575 +
            ((C32609 + C32601) * C139588 + C32597 * C92451) * C47029) *
               C139305) *
              C12239)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[103] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139442 * C308) * C12388 +
             (C307 * C245 + C139442 * C474) * C139593 - C32483 * C12389 -
             C32719 * C139594 + C32486 * C12390 + C32720 * C12239) *
                C92451 +
            (C32483 * C12388 + C32719 * C139593 - C32486 * C12389 -
             C32720 * C139594 + C43654 * C12390 + C43801 * C12239) *
                C139588) *
               C47029 +
           ((C12614 + C12615 - C12616 - C12617 + C12618 + C12619) * C92451 +
            (C45778 + C45779 - C45780 - C45781 + C45782 + C45783) * C139588) *
               C139575) *
              C139328 * C139552 +
          (((C12616 - (C12615 + C12614) + C12617 - C12618 - C12619) * C92451 +
            (C45780 - (C45779 + C45778) + C45781 - C45782 - C45783) * C139588) *
               C47029 +
           ((C12622 - (C12621 + C12620) + C12623 - C12624 - C12625) * C92451 +
            (C2092 * C12389 - (C2296 * C139593 + C2088 * C12388) +
             C2297 * C139594 - (C307 * C10813 + C139442 * C10991) * C12390 -
             (C307 * C10935 + C139442 * C11102) * C12239) *
                C139588) *
               C139575) *
              C139328 * C139305)) /
        (p * q * std::sqrt(p + q));
    d2eezx[103] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1767 + C139588 * C2376) *
                C137108 +
            (C92849 * C116 + C92451 * C561 + C92850 * C1777 + C139588 * C2383) *
                C139552 -
            (C92876 + C92877) * C137101 - (C92878 + C92879) * C139305) *
               C47029 +
           ((C92877 + C92876) * C137108 + (C92879 + C92878) * C139552 -
            (C92881 + C92880) * C137101 - (C92883 + C92882) * C139305) *
               C139575) *
              C139442 * C139593 +
          (((C94784 + C94785) * C137101 -
            ((C92850 * C1783 + C139588 * C2387 + C92849 * C1777 +
              C92451 * C2383) *
                 C139552 +
             (C92850 * C1768 + C139588 * C2379 + C92849 * C1767 +
              C92451 * C2376) *
                 C137108) +
            (C94786 + C94787) * C139305) *
               C47029 +
           ((C96637 + C96636) * C137101 -
            ((C94787 + C94786) * C139552 + (C94785 + C94784) * C137108) +
            (C96639 + C96638) * C139305) *
               C139575) *
              C139442 * C139594 +
          (((C92849 * C1768 + C92451 * C2379 + C92850 * C10815 +
             C139588 * C11155) *
                C137108 +
            (C92849 * C1783 + C92451 * C2387 + C92850 * C10818 +
             C139588 * C11158) *
                C139552 -
            (C94788 + C94789) * C137101 - (C94790 + C94791) * C139305) *
               C47029 +
           ((C94789 + C94788) * C137108 + (C94791 + C94790) * C139552 -
            (C92850 * C10813 + C139588 * C11153 + C92849 * C1770 +
             C92451 * C2381) *
                C137101 -
            (C92850 * C10816 + C139588 * C11156 + C92849 * C1785 +
             C92451 * C2389) *
                C139305) *
               C139575) *
              C139442 * C12239) *
         C139328) /
        (p * q * std::sqrt(p + q));
    d2eezy[103] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C92849 * C107 + C92451 * C555 + C92850 * C1767 +
              C139588 * C2376) *
                 C181 +
             (C92849 * C182 + C92451 * C641 + C92850 * C1873 +
              C139588 * C2492) *
                 C139328) *
                C47029 +
            ((C92877 + C92876) * C181 + (C92966 + C92967) * C139328) *
                C139575) *
               C139442 * C139552 -
           (((C92968 + C92969) * C139328 + (C92881 + C92880) * C181) * C139575 +
            ((C92967 + C92966) * C139328 + (C92876 + C92877) * C181) * C47029) *
               C139442 * C139305) *
              C139593 +
          ((((C94784 + C94785) * C181 + (C94898 + C94899) * C139328) * C47029 +
            ((C96637 + C96636) * C181 + (C96742 + C96743) * C139328) *
                C139575) *
               C139442 * C139305 -
           (((C94899 + C94898) * C139328 + (C94785 + C94784) * C181) * C139575 +
            ((C92850 * C1874 + C139588 * C2493 + C92849 * C1873 +
              C92451 * C2492) *
                 C139328 +
             (C92850 * C1768 + C139588 * C2379 + C92849 * C1767 +
              C92451 * C2376) *
                 C181) *
                C47029) *
               C139442 * C139552) *
              C139594 +
          ((((C92849 * C1768 + C92451 * C2379 + C92850 * C10815 +
              C139588 * C11155) *
                 C181 +
             (C92849 * C1874 + C92451 * C2493 + C92850 * C10877 +
              C139588 * C11211) *
                 C139328) *
                C47029 +
            ((C94789 + C94788) * C181 + (C94900 + C94901) * C139328) *
                C139575) *
               C139442 * C139552 -
           (((C92850 * C10875 + C139588 * C11209 + C92849 * C1876 +
              C92451 * C2495) *
                 C139328 +
             (C92850 * C10813 + C139588 * C11153 + C92849 * C1770 +
              C92451 * C2381) *
                 C181) *
                C139575 +
            ((C94901 + C94900) * C139328 + (C94788 + C94789) * C181) * C47029) *
               C139442 * C139305) *
              C12239)) /
        (p * q * std::sqrt(p + q));
    d2eezz[103] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1767 + C139588 * C2376) *
                C12388 +
            (C92849 * C245 + C92451 * C719 + C92850 * C1965 + C139588 * C2591) *
                C139593 -
            (C92850 * C1768 + C139588 * C2379 + C92849 * C1767 +
             C92451 * C2376) *
                C12389 -
            (C92850 * C1966 + C139588 * C2592 + C92849 * C1965 +
             C92451 * C2591) *
                C139594 +
            (C92849 * C1768 + C92451 * C2379 + C92850 * C10815 +
             C139588 * C11155) *
                C12390 +
            (C92849 * C1966 + C92451 * C2592 + C92850 * C10937 +
             C139588 * C11262) *
                C12239) *
               C47029 +
           ((C92877 + C92876) * C12388 + (C93050 + C93051) * C139593 -
            (C94785 + C94784) * C12389 - (C95008 + C95009) * C139594 +
            (C94789 + C94788) * C12390 + (C95010 + C95011) * C12239) *
               C139575) *
              C139442 * C139328 * C139552 +
          (((C94784 + C94785) * C12389 -
            ((C93051 + C93050) * C139593 + (C92876 + C92877) * C12388) +
            (C95009 + C95008) * C139594 - (C94788 + C94789) * C12390 -
            (C95011 + C95010) * C12239) *
               C47029 +
           ((C96637 + C96636) * C12389 -
            ((C93052 + C93053) * C139593 + (C92881 + C92880) * C12388) +
            (C96846 + C96847) * C139594 -
            (C92850 * C10813 + C139588 * C11153 + C92849 * C1770 +
             C92451 * C2381) *
                C12390 -
            (C92850 * C10935 + C139588 * C11264 + C92849 * C1968 +
             C92451 * C2596) *
                C12239) *
               C139575) *
              C139442 * C139328 * C139305)) /
        (p * q * std::sqrt(p + q));
    d2eexx[104] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139575 * C114) *
                C5230 +
            (C47033 * C116 + C47029 * C125 + C47034 * C117 + C139575 * C126) *
                C5225 -
            (C47034 * C109 + C139575 * C115 + C47033 * C108 + C47029 * C114) *
                C5231 -
            (C47034 * C118 + C139575 * C127 + C47033 * C117 + C47029 * C126) *
                C5226 +
            (C47033 * C109 + C47029 * C115 + C47034 * C110 + C139575 * C119) *
                C5232 +
            (C47033 * C118 + C47029 * C127 + C47034 * C120 + C139575 * C128) *
                C5227) *
               C139442 * C92451 +
           ((C94116 + C94117) * C5230 + (C94118 + C94119) * C5225 -
            (C94120 + C94121) * C5231 - (C94122 + C94123) * C5226 +
            (C96024 + C96025) * C5232 + (C96026 + C96027) * C5227) *
               C139442 * C139588) *
              C9466 +
          (((C94121 + C94120) * C5231 -
            ((C94119 + C94118) * C5225 + (C94117 + C94116) * C5230) +
            (C94123 + C94122) * C5226 - (C96025 + C96024) * C5232 -
            (C96027 + C96026) * C5227) *
               C139442 * C92451 +
           ((C94124 + C94125) * C5231 -
            ((C94126 + C94127) * C5225 + (C94128 + C94129) * C5230) +
            (C94130 + C94131) * C5226 -
            (C47034 * C1771 + C139575 * C1786 + C47033 * C1770 +
             C47029 * C1782) *
                C5232 -
            (C47034 * C1787 + C139575 * C1795 + C47033 * C1785 +
             C47029 * C1794) *
                C5227) *
               C139442 * C139588) *
              C139403) *
         C139328) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139575 * C114) *
                 C5913 +
             (C47033 * C116 + C47029 * C125 + C47034 * C117 + C139575 * C126) *
                 C139300) *
                C139442 * C92451 +
            ((C94116 + C94117) * C5913 + (C94118 + C94119) * C139300) *
                C139442 * C139588) *
               C9466 -
           (((C94126 + C94127) * C139300 + (C94128 + C94129) * C5913) *
                C139442 * C139588 +
            ((C94119 + C94118) * C139300 + (C94117 + C94116) * C5913) *
                C139442 * C92451) *
               C139403) *
              C823 +
          ((((C51581 + C51580) * C5913 + (C51579 + C51578) * C139300) *
                C139442 * C92451 +
            ((C54278 + C54279) * C5913 + (C54280 + C54281) * C139300) *
                C139442 * C139588) *
               C139403 -
           (((C51578 + C51579) * C139300 + (C51580 + C51581) * C5913) *
                C139442 * C139588 +
            ((C47771 + C47770) * C139300 + (C47769 + C47768) * C5913) *
                C139442 * C92451) *
               C9466) *
              C824 +
          ((((C47781 + C47780) * C5913 + (C47779 + C47778) * C139300) *
                C139442 * C92451 +
            ((C57236 + C57237) * C5913 + (C57238 + C57239) * C139300) *
                C139442 * C139588) *
               C9466 -
           (((C47034 * C21080 + C139575 * C21084 + C47033 * C21081 +
              C47029 * C21085) *
                 C139300 +
             (C47034 * C21078 + C139575 * C21082 + C47033 * C21079 +
              C47029 * C21083) *
                 C5913) *
                C139442 * C139588 +
            ((C57239 + C57238) * C139300 + (C57237 + C57236) * C5913) *
                C139442 * C92451) *
               C139403) *
              C825)) /
            (p * q * std::sqrt(p + q));
    d2eexy[104] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139575 * C114) *
                 C181 +
             (C47033 * C182 + C47029 * C188 + C47034 * C183 + C139575 * C189) *
                 C139328) *
                C139442 * C92451 +
            ((C94116 + C94117) * C181 + (C94246 + C94247) * C139328) * C139442 *
                C139588) *
               C5225 -
           (((C94248 + C94249) * C139328 + (C94120 + C94121) * C181) * C139442 *
                C139588 +
            ((C47034 * C184 + C139575 * C190 + C47033 * C183 + C47029 * C189) *
                 C139328 +
             (C47034 * C109 + C139575 * C115 + C47033 * C108 + C47029 * C114) *
                 C181) *
                C139442 * C92451) *
               C5226 +
           (((C47033 * C109 + C47029 * C115 + C47034 * C110 + C139575 * C119) *
                 C181 +
             (C47033 * C184 + C47029 * C190 + C47034 * C185 + C139575 * C191) *
                 C139328) *
                C139442 * C92451 +
            ((C96024 + C96025) * C181 + (C96130 + C96131) * C139328) * C139442 *
                C139588) *
               C5227) *
              C9466 +
          ((((C94121 + C94120) * C181 + (C94249 + C94248) * C139328) * C139442 *
                C92451 +
            ((C94124 + C94125) * C181 + (C94250 + C94251) * C139328) * C139442 *
                C139588) *
               C5226 -
           (((C94252 + C94253) * C139328 + (C94128 + C94129) * C181) * C139442 *
                C139588 +
            ((C94247 + C94246) * C139328 + (C94117 + C94116) * C181) * C139442 *
                C92451) *
               C5225 -
           (((C47034 * C1877 + C139575 * C1885 + C47033 * C1876 +
              C47029 * C1884) *
                 C139328 +
             (C47034 * C1771 + C139575 * C1786 + C47033 * C1770 +
              C47029 * C1782) *
                 C181) *
                C139442 * C139588 +
            ((C96131 + C96130) * C139328 + (C96025 + C96024) * C181) * C139442 *
                C92451) *
               C5227) *
              C139403)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139575 * C114) *
                C934 +
            (C47033 * C182 + C47029 * C188 + C47034 * C183 + C139575 * C189) *
                C823 -
            (C47769 + C47768) * C935 - (C47898 + C47899) * C824 +
            (C47781 + C47780) * C936 + (C47900 + C47901) * C825) *
               C139442 * C92451 +
           ((C94116 + C94117) * C934 + (C94246 + C94247) * C823 -
            (C51580 + C51581) * C935 - (C51723 + C51722) * C824 +
            (C57236 + C57237) * C936 + (C57343 + C57342) * C825) *
               C139442 * C139588) *
              C139300 * C9466 +
          (((C51581 + C51580) * C935 -
            ((C94247 + C94246) * C823 + (C94117 + C94116) * C934) +
            (C51722 + C51723) * C824 - (C57237 + C57236) * C936 -
            (C57342 + C57343) * C825) *
               C139442 * C92451 +
           ((C54278 + C54279) * C935 -
            ((C94252 + C94253) * C823 + (C94128 + C94129) * C934) +
            (C54385 + C54384) * C824 -
            (C47034 * C21078 + C139575 * C21082 + C47033 * C21079 +
             C47029 * C21083) *
                C936 -
            (C47034 * C21196 + C139575 * C21198 + C47033 * C21197 +
             C47029 * C21199) *
                C825) *
               C139442 * C139588) *
              C139300 * C139403)) /
            (p * q * std::sqrt(p + q));
    d2eexz[104] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139575 * C114) *
                C9616 +
            (C47033 * C245 + C47029 * C251 + C47034 * C246 + C139575 * C252) *
                C9466 -
            (C94117 + C94116) * C9617 - (C94368 + C94369) * C139403) *
               C139442 * C92451 +
           ((C94116 + C94117) * C9616 + (C94369 + C94368) * C9466 -
            (C94128 + C94129) * C9617 - (C94371 + C94370) * C139403) *
               C139442 * C139588) *
              C139328 * C5225 +
          (((C94121 + C94120) * C9617 -
            ((C47034 * C247 + C139575 * C253 + C47033 * C246 + C47029 * C252) *
                 C9466 +
             (C47034 * C109 + C139575 * C115 + C47033 * C108 + C47029 * C114) *
                 C9616) +
            (C94372 + C94373) * C139403) *
               C139442 * C92451 +
           ((C94124 + C94125) * C9617 -
            ((C94373 + C94372) * C9466 + (C94120 + C94121) * C9616) +
            (C94375 + C94374) * C139403) *
               C139442 * C139588) *
              C139328 * C5226 +
          (((C47033 * C109 + C47029 * C115 + C47034 * C110 + C139575 * C119) *
                C9616 +
            (C47033 * C247 + C47029 * C253 + C47034 * C248 + C139575 * C254) *
                C9466 -
            (C96025 + C96024) * C9617 - (C96234 + C96235) * C139403) *
               C139442 * C92451 +
           ((C96024 + C96025) * C9616 + (C96235 + C96234) * C9466 -
            (C47034 * C1771 + C139575 * C1786 + C47033 * C1770 +
             C47029 * C1782) *
                C9617 -
            (C47034 * C1970 + C139575 * C1978 + C47033 * C1968 +
             C47029 * C1976) *
                C139403) *
               C139442 * C139588) *
              C139328 * C5227)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139575 * C114) *
                C9616 +
            (C47033 * C245 + C47029 * C251 + C47034 * C246 + C139575 * C252) *
                C9466 -
            (C94117 + C94116) * C9617 - (C94368 + C94369) * C139403) *
               C139442 * C92451 +
           ((C94116 + C94117) * C9616 + (C94369 + C94368) * C9466 -
            (C94128 + C94129) * C9617 - (C94371 + C94370) * C139403) *
               C139442 * C139588) *
              C823 +
          (((C51581 + C51580) * C9617 -
            ((C48021 + C48020) * C9466 + (C47769 + C47768) * C9616) +
            (C51865 + C51864) * C139403) *
               C139442 * C92451 +
           ((C54278 + C54279) * C9617 -
            ((C51864 + C51865) * C9466 + (C51580 + C51581) * C9616) +
            (C54488 + C54489) * C139403) *
               C139442 * C139588) *
              C824 +
          (((C47781 + C47780) * C9616 + (C48023 + C48022) * C9466 -
            (C57237 + C57236) * C9617 - (C57447 + C57446) * C139403) *
               C139442 * C92451 +
           ((C57236 + C57237) * C9616 + (C57446 + C57447) * C9466 -
            (C47034 * C21078 + C139575 * C21082 + C47033 * C21079 +
             C47029 * C21083) *
                C9617 -
            (C47034 * C21304 + C139575 * C21306 + C47033 * C21305 +
             C47029 * C21307) *
                C139403) *
               C139442 * C139588) *
              C825) *
         C139300) /
            (p * q * std::sqrt(p + q));
    d2eeyx[104] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139442 * C308) * C5230 +
             (C307 * C116 + C139442 * C314) * C5225 - C337 * C5231 -
             C338 * C5226 + C339 * C5232 + C340 * C5227) *
                C92451 +
            (C41942 + C41943 - C41944 - C41945 + C41946 + C41947) * C139588) *
               C47029 +
           ((C337 * C5230 + C338 * C5225 - C339 * C5231 - C340 * C5226 +
             C341 * C5232 + C342 * C5227) *
                C92451 +
            (C41948 + C41949 - C41950 - C41951 + C41952 + C41953) * C139588) *
               C139575) *
              C9466 +
          (((C41944 - (C41943 + C41942) + C41945 - C41946 - C41947) * C92451 +
            (C2090 * C5231 - (C32485 * C5225 + C32486 * C5230) + C2091 * C5226 -
             C2092 * C5232 - C2093 * C5227) *
                C139588) *
               C47029 +
           ((C41950 - (C41949 + C41948) + C41951 - C41952 - C41953) * C92451 +
            (C2092 * C5231 - (C2091 * C5225 + C2090 * C5230) + C2093 * C5226 -
             (C307 * C1771 + C139442 * C2060) * C5232 -
             (C307 * C1787 + C139442 * C2068) * C5227) *
                C139588) *
               C139575) *
              C139403) *
         C139328) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C307 * C107 + C139442 * C308) * C5913 +
              (C307 * C116 + C139442 * C314) * C139300) *
                 C92451 +
             (C38036 + C38037) * C139588) *
                C47029 +
            ((C337 * C5913 + C338 * C139300) * C92451 +
             (C38038 + C38039) * C139588) *
                C139575) *
               C9466 -
           (((C38040 + C38041) * C139588 + (C38039 + C38038) * C92451) *
                C139575 +
            ((C38042 + C38043) * C139588 + (C38037 + C38036) * C92451) *
                C47029) *
               C139403) *
              C823 +
          ((((C38044 + C38045) * C92451 + (C38056 + C38057) * C139588) *
                C47029 +
            ((C38050 + C38051) * C92451 + (C38052 + C38053) * C139588) *
                C139575) *
               C139403 -
           (((C38051 + C38050) * C139588 +
             (C1151 * C139300 + C1150 * C5913) * C92451) *
                C139575 +
            ((C38045 + C38044) * C139588 +
             ((C307 * C841 + C139442 * C1125) * C139300 +
              (C307 * C831 + C139442 * C1118) * C5913) *
                 C92451) *
                C47029) *
               C9466) *
              C824 +
          (((((C307 * C832 + C139442 * C1121) * C5913 +
              (C307 * C847 + C139442 * C1129) * C139300) *
                 C92451 +
             (C41046 + C41047) * C139588) *
                C47029 +
            ((C1154 * C5913 + C1155 * C139300) * C92451 +
             (C41042 + C41043) * C139588) *
                C139575) *
               C9466 -
           ((((C307 * C21080 + C139442 * C21414) * C139300 +
              (C307 * C21078 + C139442 * C21412) * C5913) *
                 C139588 +
             (C41043 + C41042) * C92451) *
                C139575 +
            (((C307 * C21081 + C139442 * C21415) * C139300 +
              (C307 * C21079 + C139442 * C21413) * C5913) *
                 C139588 +
             (C41047 + C41046) * C92451) *
                C47029) *
               C139403) *
              C825)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[104] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C307 * C107 + C139442 * C308) * C181 +
              (C307 * C182 + C139442 * C394) * C139328) *
                 C92451 +
             (C32591 + C32607) * C139588) *
                C47029 +
            ((C401 + C417) * C92451 + C32594 * C139588) * C139575) *
               C5225 -
           ((C3772 * C139588 + (C418 + C404) * C92451) * C139575 +
            (C32595 * C139588 + (C417 + C401) * C92451) * C47029) *
               C5226 +
           ((C421 * C92451 + C34499 * C139588) * C47029 +
            ((C409 + C419) * C92451 + (C3769 + C3775) * C139588) * C139575) *
               C5227) *
              C9466 +
          (((C32594 * C92451 + C32596 * C139588) * C47029 +
            (C34499 * C92451 + (C2185 + C2195) * C139588) * C139575) *
               C5226 -
           ((C32597 * C139588 + C32595 * C92451) * C139575 +
            ((C32608 + C32600) * C139588 + (C32607 + C32591) * C92451) *
                C47029) *
               C5225 -
           ((((C307 * C1877 + C139442 * C2174) * C139328 +
              (C307 * C1771 + C139442 * C2060) * C181) *
                 C139588 +
             (C3775 + C3769) * C92451) *
                C139575 +
            ((C2195 + C2185) * C139588 + C3772 * C92451) * C47029) *
               C5227) *
              C139403)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139442 * C308) * C934 +
             (C307 * C182 + C139442 * C394) * C823 -
             (C307 * C831 + C139442 * C1118) * C935 -
             (C307 * C939 + C139442 * C1231) * C824 +
             (C307 * C832 + C139442 * C1121) * C936 +
             (C307 * C940 + C139442 * C1232) * C825) *
                C92451 +
            (C42942 + C42943 - C42944 - C42945 + C42946 + C42947) * C139588) *
               C47029 +
           ((C1240 + C1241 - C1242 - C1260 + C1245 + C1261) * C92451 +
            (C31515 + C31516 - C31517 - C31518 + C31519 + C31523) * C139588) *
               C139575) *
              C139300 * C9466 +
          (((C42944 - (C42943 + C42942) + C42945 - C42946 - C42947) * C92451 +
            (C38054 * C935 - (C32605 * C823 + C32486 * C934) + C38169 * C824 -
             (C307 * C21079 + C139442 * C21413) * C936 -
             (C307 * C21197 + C139442 * C21514) * C825) *
                C139588) *
               C47029 +
           ((C31517 - (C31516 + C31515) + C31518 - C31519 - C31523) * C92451 +
            (C35460 * C935 - (C2190 * C823 + C2090 * C934) + C35609 * C824 -
             (C307 * C21078 + C139442 * C21412) * C936 -
             (C307 * C21196 + C139442 * C21515) * C825) *
                C139588) *
               C139575) *
              C139300 * C139403)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[104] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139442 * C308) * C9616 +
             (C307 * C245 + C139442 * C474) * C9466 - C32483 * C9617 -
             C32719 * C139403) *
                C92451 +
            (C32483 * C9616 + C32719 * C9466 - C32486 * C9617 -
             C32720 * C139403) *
                C139588) *
               C47029 +
           ((C9841 + C9842 - C9843 - C9844) * C92451 +
            (C42150 + C42151 - C42152 - C42153) * C139588) *
               C139575) *
              C139328 * C5225 +
          (((C9843 - (C9842 + C9841) + C9844) * C92451 +
            (C42152 - (C42151 + C42150) + C42153) * C139588) *
               C47029 +
           ((C9847 - (C9846 + C9845) + C9848) * C92451 +
            (C42154 - (C42155 + C42156) + C42157) * C139588) *
               C139575) *
              C139328 * C5226 +
          ((C9855 * C92451 + (C42156 + C42155 - C42154 - C42157) * C139588) *
               C47029 +
           ((C9851 + C9850 - C9849 - C9852) * C92451 +
            (C3692 * C9616 + C3865 * C9466 -
             (C307 * C1771 + C139442 * C2060) * C9617 -
             (C307 * C1970 + C139442 * C2276) * C139403) *
                C139588) *
               C139575) *
              C139328 * C5227)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139442 * C308) * C9616 +
             (C307 * C245 + C139442 * C474) * C9466 - C32483 * C9617 -
             C32719 * C139403) *
                C92451 +
            (C32483 * C9616 + C32719 * C9466 - C32486 * C9617 -
             C32720 * C139403) *
                C139588) *
               C47029 +
           ((C9841 + C9842 - C9843 - C9844) * C92451 +
            (C42150 + C42151 - C42152 - C42153) * C139588) *
               C139575) *
              C823 +
          (((C35459 * C9617 -
             ((C307 * C1029 + C139442 * C1339) * C9466 +
              (C307 * C831 + C139442 * C1118) * C9616) +
             C35751 * C139403) *
                C92451 +
            (C38054 * C9617 - (C35751 * C9466 + C35459 * C9616) +
             C38271 * C139403) *
                C139588) *
               C47029 +
           ((C11854 - (C11855 + C11856) + C11857) * C92451 +
            (C44788 - (C44789 + C44790) + C44791) * C139588) *
               C139575) *
              C824 +
          ((((C307 * C832 + C139442 * C1121) * C9616 +
             (C307 * C1030 + C139442 * C1340) * C9466 - C41044 * C9617 -
             C41255 * C139403) *
                C92451 +
            (C41044 * C9616 + C41255 * C9466 -
             (C307 * C21079 + C139442 * C21413) * C9617 -
             (C307 * C21305 + C139442 * C21614) * C139403) *
                C139588) *
               C47029 +
           ((C1154 * C9616 + C1360 * C9466 - C31415 * C9617 -
             C31627 * C139403) *
                C92451 +
            (C31415 * C9616 + C31627 * C9466 -
             (C307 * C21078 + C139442 * C21412) * C9617 -
             (C307 * C21304 + C139442 * C21615) * C139403) *
                C139588) *
               C139575) *
              C825) *
         C139300) /
            (p * q * std::sqrt(p + q));
    d2eezx[104] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1767 + C139588 * C2376) *
                C5230 +
            (C92849 * C116 + C92451 * C561 + C92850 * C1777 + C139588 * C2383) *
                C5225 -
            (C92876 + C92877) * C5231 - (C92878 + C92879) * C5226 +
            (C92880 + C92881) * C5232 + (C92882 + C92883) * C5227) *
               C47029 +
           ((C92877 + C92876) * C5230 + (C92879 + C92878) * C5225 -
            (C92881 + C92880) * C5231 - (C92883 + C92882) * C5226 +
            (C92885 + C92884) * C5232 + (C92887 + C92886) * C5227) *
               C139575) *
              C139442 * C9466 +
          (((C94784 + C94785) * C5231 -
            ((C92850 * C1783 + C139588 * C2387 + C92849 * C1777 +
              C92451 * C2383) *
                 C5225 +
             (C92850 * C1768 + C139588 * C2379 + C92849 * C1767 +
              C92451 * C2376) *
                 C5230) +
            (C94786 + C94787) * C5226 - (C96636 + C96637) * C5232 -
            (C96638 + C96639) * C5227) *
               C47029 +
           ((C96637 + C96636) * C5231 -
            ((C94787 + C94786) * C5225 + (C94785 + C94784) * C5230) +
            (C96639 + C96638) * C5226 -
            (C92850 * C1771 + C139588 * C2382 + C92849 * C1766 +
             C92451 * C2378) *
                C5232 -
            (C92850 * C1787 + C139588 * C2390 + C92849 * C1779 +
             C92451 * C2386) *
                C5227) *
               C139575) *
              C139442 * C139403) *
         C139328) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C92849 * C107 + C92451 * C555 + C92850 * C1767 +
              C139588 * C2376) *
                 C5913 +
             (C92849 * C116 + C92451 * C561 + C92850 * C1777 +
              C139588 * C2383) *
                 C139300) *
                C47029 +
            ((C92877 + C92876) * C5913 + (C92879 + C92878) * C139300) *
                C139575) *
               C139442 * C9466 -
           (((C94787 + C94786) * C139300 + (C94785 + C94784) * C5913) *
                C139575 +
            ((C92850 * C1783 + C139588 * C2387 + C92849 * C1777 +
              C92451 * C2383) *
                 C139300 +
             (C92850 * C1768 + C139588 * C2379 + C92849 * C1767 +
              C92451 * C2376) *
                 C5913) *
                C47029) *
               C139442 * C139403) *
              C823 +
          ((((C92849 * C4223 + C92451 * C4899 + C92850 * C6442 +
              C139588 * C6922) *
                 C5913 +
             (C92849 * C4230 + C92451 * C4903 + C92850 * C6445 +
              C139588 * C6925) *
                 C139300) *
                C47029 +
            ((C97767 + C97766) * C5913 + (C97769 + C97768) * C139300) *
                C139575) *
               C139442 * C139403 -
           (((C93761 + C93760) * C139300 + (C93759 + C93758) * C5913) *
                C139575 +
            ((C92850 * C4230 + C139588 * C4903 + C92849 * C841 +
              C92451 * C1447) *
                 C139300 +
             (C92850 * C4223 + C139588 * C4899 + C92849 * C831 +
              C92451 * C1440) *
                 C5913) *
                C47029) *
               C139442 * C9466) *
              C824 +
          ((((C92849 * C832 + C92451 * C1443 + C92850 * C8754 +
              C139588 * C9234) *
                 C5913 +
             (C92849 * C847 + C92451 * C1451 + C92850 * C8757 +
              C139588 * C9237) *
                 C139300) *
                C47029 +
            ((C93763 + C93762) * C5913 + (C93765 + C93764) * C139300) *
                C139575) *
               C139442 * C9466 -
           (((C92850 * C21080 + C139588 * C21716 + C92849 * C8756 +
              C92451 * C9236) *
                 C139300 +
             (C92850 * C21078 + C139588 * C21714 + C92849 * C8753 +
              C92451 * C9233) *
                 C5913) *
                C139575 +
            ((C92850 * C21081 + C139588 * C21717 + C92849 * C8757 +
              C92451 * C9237) *
                 C139300 +
             (C92850 * C21079 + C139588 * C21715 + C92849 * C8754 +
              C92451 * C9234) *
                 C5913) *
                C47029) *
               C139442 * C139403) *
              C825)) /
            (p * q * std::sqrt(p + q));
    d2eezy[104] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C92849 * C107 + C92451 * C555 + C92850 * C1767 +
              C139588 * C2376) *
                 C181 +
             (C92849 * C182 + C92451 * C641 + C92850 * C1873 +
              C139588 * C2492) *
                 C139328) *
                C47029 +
            ((C92877 + C92876) * C181 + (C92966 + C92967) * C139328) *
                C139575) *
               C139442 * C5225 -
           (((C92968 + C92969) * C139328 + (C92881 + C92880) * C181) * C139575 +
            ((C92967 + C92966) * C139328 + (C92876 + C92877) * C181) * C47029) *
               C139442 * C5226 +
           (((C92880 + C92881) * C181 + (C92969 + C92968) * C139328) * C47029 +
            ((C92885 + C92884) * C181 + (C92970 + C92971) * C139328) *
                C139575) *
               C139442 * C5227) *
              C9466 +
          ((((C94784 + C94785) * C181 + (C94898 + C94899) * C139328) * C47029 +
            ((C96637 + C96636) * C181 + (C96742 + C96743) * C139328) *
                C139575) *
               C139442 * C5226 -
           (((C94899 + C94898) * C139328 + (C94785 + C94784) * C181) * C139575 +
            ((C92850 * C1874 + C139588 * C2493 + C92849 * C1873 +
              C92451 * C2492) *
                 C139328 +
             (C92850 * C1768 + C139588 * C2379 + C92849 * C1767 +
              C92451 * C2376) *
                 C181) *
                C47029) *
               C139442 * C5225 -
           (((C92850 * C1877 + C139588 * C2496 + C92849 * C1872 +
              C92451 * C2491) *
                 C139328 +
             (C92850 * C1771 + C139588 * C2382 + C92849 * C1766 +
              C92451 * C2378) *
                 C181) *
                C139575 +
            ((C96743 + C96742) * C139328 + (C96636 + C96637) * C181) * C47029) *
               C139442 * C5227) *
              C139403)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1767 + C139588 * C2376) *
                C934 +
            (C92849 * C182 + C92451 * C641 + C92850 * C1873 + C139588 * C2492) *
                C823 -
            (C92850 * C4223 + C139588 * C4899 + C92849 * C831 +
             C92451 * C1440) *
                C935 -
            (C92850 * C4337 + C139588 * C5017 + C92849 * C939 +
             C92451 * C1553) *
                C824 +
            (C92849 * C832 + C92451 * C1443 + C92850 * C8754 +
             C139588 * C9234) *
                C936 +
            (C92849 * C940 + C92451 * C1554 + C92850 * C8840 +
             C139588 * C9312) *
                C825) *
               C47029 +
           ((C92877 + C92876) * C934 + (C92966 + C92967) * C823 -
            (C93759 + C93758) * C935 - (C93872 + C93873) * C824 +
            (C93763 + C93762) * C936 + (C93874 + C93875) * C825) *
               C139575) *
              C139442 * C139300 * C9466 +
          (((C92849 * C4223 + C92451 * C4899 + C92850 * C6442 +
             C139588 * C6922) *
                C935 -
            ((C92850 * C1874 + C139588 * C2493 + C92849 * C1873 +
              C92451 * C2492) *
                 C823 +
             (C92850 * C1768 + C139588 * C2379 + C92849 * C1767 +
              C92451 * C2376) *
                 C934) +
            (C92849 * C4337 + C92451 * C5017 + C92850 * C6528 +
             C139588 * C7000) *
                C824 -
            (C92850 * C21079 + C139588 * C21715 + C92849 * C8754 +
             C92451 * C9234) *
                C936 -
            (C92850 * C21197 + C139588 * C21830 + C92849 * C8840 +
             C92451 * C9312) *
                C825) *
               C47029 +
           ((C97767 + C97766) * C935 -
            ((C94899 + C94898) * C823 + (C94785 + C94784) * C934) +
            (C97904 + C97905) * C824 -
            (C92850 * C21078 + C139588 * C21714 + C92849 * C8753 +
             C92451 * C9233) *
                C936 -
            (C92850 * C21196 + C139588 * C21831 + C92849 * C8839 +
             C92451 * C9313) *
                C825) *
               C139575) *
              C139442 * C139300 * C139403)) /
            (p * q * std::sqrt(p + q));
    d2eezz[104] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1767 + C139588 * C2376) *
                C9616 +
            (C92849 * C245 + C92451 * C719 + C92850 * C1965 + C139588 * C2591) *
                C9466 -
            (C92850 * C1768 + C139588 * C2379 + C92849 * C1767 +
             C92451 * C2376) *
                C9617 -
            (C92850 * C1966 + C139588 * C2592 + C92849 * C1965 +
             C92451 * C2591) *
                C139403) *
               C47029 +
           ((C92877 + C92876) * C9616 + (C93050 + C93051) * C9466 -
            (C94785 + C94784) * C9617 - (C95008 + C95009) * C139403) *
               C139575) *
              C139442 * C139328 * C5225 +
          (((C94784 + C94785) * C9617 -
            ((C93051 + C93050) * C9466 + (C92876 + C92877) * C9616) +
            (C95009 + C95008) * C139403) *
               C47029 +
           ((C96637 + C96636) * C9617 -
            ((C93052 + C93053) * C9466 + (C92881 + C92880) * C9616) +
            (C96846 + C96847) * C139403) *
               C139575) *
              C139442 * C139328 * C5226 +
          (((C92880 + C92881) * C9616 + (C93053 + C93052) * C9466 -
            (C96636 + C96637) * C9617 - (C96847 + C96846) * C139403) *
               C47029 +
           ((C92885 + C92884) * C9616 + (C93054 + C93055) * C9466 -
            (C92850 * C1771 + C139588 * C2382 + C92849 * C1766 +
             C92451 * C2378) *
                C9617 -
            (C92850 * C1970 + C139588 * C2598 + C92849 * C1969 +
             C92451 * C2597) *
                C139403) *
               C139575) *
              C139442 * C139328 * C5227)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1767 + C139588 * C2376) *
                C9616 +
            (C92849 * C245 + C92451 * C719 + C92850 * C1965 + C139588 * C2591) *
                C9466 -
            (C92850 * C1768 + C139588 * C2379 + C92849 * C1767 +
             C92451 * C2376) *
                C9617 -
            (C92850 * C1966 + C139588 * C2592 + C92849 * C1965 +
             C92451 * C2591) *
                C139403) *
               C47029 +
           ((C92877 + C92876) * C9616 + (C93050 + C93051) * C9466 -
            (C94785 + C94784) * C9617 - (C95008 + C95009) * C139403) *
               C139575) *
              C139442 * C823 +
          (((C92849 * C4223 + C92451 * C4899 + C92850 * C6442 +
             C139588 * C6922) *
                C9617 -
            ((C92850 * C4443 + C139588 * C5133 + C92849 * C1029 +
              C92451 * C1661) *
                 C9466 +
             (C92850 * C4223 + C139588 * C4899 + C92849 * C831 +
              C92451 * C1440) *
                 C9616) +
            (C92849 * C4443 + C92451 * C5133 + C92850 * C6608 +
             C139588 * C7077) *
                C139403) *
               C47029 +
           ((C97767 + C97766) * C9617 -
            ((C93982 + C93983) * C9466 + (C93759 + C93758) * C9616) +
            (C98040 + C98041) * C139403) *
               C139575) *
              C139442 * C824 +
          (((C92849 * C832 + C92451 * C1443 + C92850 * C8754 +
             C139588 * C9234) *
                C9616 +
            (C92849 * C1030 + C92451 * C1662 + C92850 * C8920 +
             C139588 * C9389) *
                C9466 -
            (C92850 * C21079 + C139588 * C21715 + C92849 * C8754 +
             C92451 * C9234) *
                C9617 -
            (C92850 * C21305 + C139588 * C21933 + C92849 * C8920 +
             C92451 * C9389) *
                C139403) *
               C47029 +
           ((C93763 + C93762) * C9616 + (C93984 + C93985) * C9466 -
            (C92850 * C21078 + C139588 * C21714 + C92849 * C8753 +
             C92451 * C9233) *
                C9617 -
            (C92850 * C21304 + C139588 * C21934 + C92849 * C8919 +
             C92451 * C9390) *
                C139403) *
               C139575) *
              C139442 * C825) *
         C139300) /
            (p * q * std::sqrt(p + q));
    d2eexx[105] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139286 * C113) * C2702 +
             (C63381 * C116 + C139286 * C125) * C139589 -
             (C63381 * C108 + C139286 * C114) * C2703 -
             (C63381 * C117 + C139286 * C126) * C139590 +
             (C63381 * C109 + C139286 * C115) * C2704 +
             (C63381 * C118 + C139286 * C127) * C2699) *
                C13593 +
            (C65304 + C65305 - C65306 - C65307 + C65324 + C65325) * C139586) *
               C92451 +
           ((C79431 + C79432 - C79433 - C79434 + C79441 + C79442) * C13593 +
            (C78529 + C78530 - C78531 - C78532 + C78539 + C78540) * C139586) *
               C139588) *
              C139339 * C139560 +
          (((C65306 - (C65305 + C65304) + C65307 - C65324 - C65325) * C13593 +
            (C65314 - (C65313 + C65312) + C65315 - C65326 - C65327) * C139586) *
               C92451 +
           ((C78531 - (C78530 + C78529) + C78532 - C78539 - C78540) * C13593 +
            (C66726 * C2703 - (C66727 * C139589 + C66728 * C2702) +
             C66729 * C139590 - (C63381 * C8752 + C139286 * C8758) * C2704 -
             (C63381 * C8755 + C139286 * C8761) * C2699) *
                C139586) *
               C139588) *
              C139339 * C139377)) /
        (p * q * std::sqrt(p + q));
    d2eexy[105] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    (((((C63381 * C107 + C139286 * C113) * C2783 +
                        (C63381 * C182 + C139286 * C188) * C139560 -
                        C63884 * C2784 - C63997 * C139377) *
                           C13593 +
                       (C63884 * C2783 + C63997 * C139560 - C63888 * C2784 -
                        C63998 * C139377) *
                           C139586) *
                          C92451 +
                      ((C80503 + C80504 - C80505 - C80506) * C13593 +
                       (C80507 + C80508 - C80509 - C80510) * C139586) *
                          C139588) *
                         C139589 +
                     (((C63886 * C2784 -
                        ((C63381 * C183 + C139286 * C189) * C139560 +
                         (C63381 * C108 + C139286 * C114) * C2783) +
                        C64000 * C139377) *
                           C13593 +
                       (C63890 * C2784 - (C64000 * C139560 + C63886 * C2783) +
                        C64001 * C139377) *
                           C139586) *
                          C92451 +
                      ((C80511 - (C80512 + C80513) + C80514) * C13593 +
                       (C80515 - (C80516 + C80517) + C80518) * C139586) *
                          C139588) *
                         C139590 +
                     ((((C63381 * C109 + C139286 * C115) * C2783 +
                        (C63381 * C184 + C139286 * C190) * C139560 -
                        C65320 * C2784 - C65406 * C139377) *
                           C13593 +
                       (C65320 * C2783 + C65406 * C139560 - C65322 * C2784 -
                        C65407 * C139377) *
                           C139586) *
                          C92451 +
                      ((C79439 * C2783 + C79546 * C139560 - C78537 * C2784 -
                        C78641 * C139377) *
                           C13593 +
                       (C78537 * C2783 + C78641 * C139560 -
                        (C63381 * C8752 + C139286 * C8758) * C2784 -
                        (C63381 * C8838 + C139286 * C8841) * C139377) *
                           C139586) *
                          C139588) *
                         C2699) *
                    C139339) /
                   (p * q * std::sqrt(p + q));
    d2eexz[105] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C63381 * C107 + C139286 * C113) * C244 +
              (C63381 * C245 + C139286 * C251) * C139339) *
                 C13593 +
             (C64077 + C64101) * C139586) *
                C92451 +
            ((C77533 * C244 + C77790 * C139339) * C13593 +
             (C76769 + C76770) * C139586) *
                C139588) *
               C139560 -
           (((C76771 + C76772) * C139586 + (C76770 + C76769) * C13593) *
                C139588 +
            ((C64102 + C64080) * C139586 + (C64101 + C64077) * C13593) *
                C92451) *
               C139377) *
              C139589 +
          ((((C64086 + C64104) * C13593 + (C64089 + C64105) * C139586) *
                C92451 +
            ((C76773 + C76774) * C13593 + (C76775 + C76776) * C139586) *
                C139588) *
               C139377 -
           (((C76774 + C76773) * C139586 +
             (C77792 * C139339 + C77535 * C244) * C13593) *
                C139588 +
            ((C64104 + C64086) * C139586 +
             ((C63381 * C246 + C139286 * C252) * C139339 +
              (C63381 * C108 + C139286 * C114) * C244) *
                 C13593) *
                C92451) *
               C139560) *
              C139590 +
          (((((C63381 * C109 + C139286 * C115) * C244 +
              (C63381 * C247 + C139286 * C253) * C139339) *
                 C13593 +
             (C65482 + C65490) * C139586) *
                C92451 +
            ((C79439 * C244 + C79648 * C139339) * C13593 +
             (C78740 + C78744) * C139586) *
                C139588) *
               C139560 -
           ((((C63381 * C8918 + C139286 * C8921) * C139339 +
              (C63381 * C8752 + C139286 * C8758) * C244) *
                 C139586 +
             (C78744 + C78740) * C13593) *
                C139588 +
            ((C65491 + C65485) * C139586 + (C65490 + C65482) * C13593) *
                C92451) *
               C139377) *
              C2699)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[105] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C831 + C139586 * C1118) *
                C2702 +
            (C13795 * C116 + C13593 * C314 + C13796 * C841 + C139586 * C1125) *
                C139589 -
            (C13822 + C13823) * C2703 - (C13824 + C13825) * C139590 +
            (C13826 + C13827) * C2704 + (C13828 + C13829) * C2699) *
               C92451 +
           ((C110582 + C110583) * C2702 + (C110584 + C110585) * C139589 -
            (C15709 + C15708) * C2703 - (C15711 + C15710) * C139590 +
            (C17604 + C17603) * C2704 + (C17606 + C17605) * C2699) *
               C139588) *
              C139286 * C139339 * C139560 +
          (((C14710 + C14711) * C2703 -
            ((C13796 * C847 + C139586 * C1129 + C13795 * C841 +
              C13593 * C1125) *
                 C139589 +
             (C13796 * C832 + C139586 * C1121 + C13795 * C831 +
              C13593 * C1118) *
                 C2702) +
            (C14712 + C14713) * C139590 - (C16676 + C16677) * C2704 -
            (C16678 + C16679) * C2699) *
               C92451 +
           ((C18688 + C18687) * C2703 -
            ((C13796 * C8757 + C139586 * C9003 + C13795 * C4230 +
              C13593 * C4553) *
                 C139589 +
             (C13796 * C8754 + C139586 * C9000 + C13795 * C4223 +
              C13593 * C4549) *
                 C2702) +
            (C18690 + C18689) * C139590 -
            (C13796 * C8752 + C139586 * C8998 + C13795 * C4225 +
             C13593 * C4551) *
                C2704 -
            (C13796 * C8755 + C139586 * C9001 + C13795 * C4232 +
             C13593 * C4555) *
                C2699) *
               C139588) *
              C139286 * C139339 * C139377)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[105] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C831 + C139586 * C1118) *
                C2783 +
            (C13795 * C182 + C13593 * C394 + C13796 * C939 + C139586 * C1231) *
                C139560 -
            (C13796 * C832 + C139586 * C1121 + C13795 * C831 + C13593 * C1118) *
                C2784 -
            (C13796 * C940 + C139586 * C1232 + C13795 * C939 + C13593 * C1231) *
                C139377) *
               C92451 +
           ((C110582 + C110583) * C2783 + (C110696 + C110697) * C139560 -
            (C13796 * C8754 + C139586 * C9000 + C13795 * C4223 +
             C13593 * C4549) *
                C2784 -
            (C13796 * C8840 + C139586 * C9078 + C13795 * C4337 +
             C13593 * C4667) *
                C139377) *
               C139588) *
              C139286 * C139589 +
          (((C14710 + C14711) * C2784 -
            ((C13913 + C13912) * C139560 + (C13822 + C13823) * C2783) +
            (C14825 + C14824) * C139377) *
               C92451 +
           ((C18688 + C18687) * C2784 -
            ((C15823 + C15822) * C139560 + (C15709 + C15708) * C2783) +
            (C18825 + C18826) * C139377) *
               C139588) *
              C139286 * C139590 +
          (((C13826 + C13827) * C2783 + (C13915 + C13914) * C139560 -
            (C16676 + C16677) * C2784 - (C16783 + C16782) * C139377) *
               C92451 +
           ((C17604 + C17603) * C2783 + (C17709 + C17710) * C139560 -
            (C13796 * C8752 + C139586 * C8998 + C13795 * C4225 +
             C13593 * C4551) *
                C2784 -
            (C13796 * C8838 + C139586 * C9080 + C13795 * C4339 +
             C13593 * C4669) *
                C139377) *
               C139588) *
              C139286 * C2699) *
         C139339) /
        (p * q * std::sqrt(p + q));
    d2eeyz[105] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13795 * C107 + C13593 * C308 + C13796 * C831 + C139586 * C1118) *
                 C244 +
             (C13795 * C245 + C13593 * C474 + C13796 * C1029 +
              C139586 * C1339) *
                 C139339) *
                C92451 +
            ((C110582 + C110583) * C244 + (C110807 + C110806) * C139339) *
                C139588) *
               C139286 * C139560 -
           (((C13796 * C8920 + C139586 * C9155 + C13795 * C4443 +
              C13593 * C4783) *
                 C139339 +
             (C13796 * C8754 + C139586 * C9000 + C13795 * C4223 +
              C13593 * C4549) *
                 C244) *
                C139588 +
            ((C13796 * C1030 + C139586 * C1340 + C13795 * C1029 +
              C13593 * C1339) *
                 C139339 +
             (C13796 * C832 + C139586 * C1121 + C13795 * C831 +
              C13593 * C1118) *
                 C244) *
                C92451) *
               C139286 * C139377) *
              C139589 +
          ((((C14710 + C14711) * C244 + (C14935 + C14934) * C139339) * C92451 +
            ((C18688 + C18687) * C244 + (C18961 + C18962) * C139339) *
                C139588) *
               C139286 * C139377 -
           (((C15932 + C15933) * C139339 + (C15709 + C15708) * C244) * C139588 +
            ((C13997 + C13996) * C139339 + (C13822 + C13823) * C244) * C92451) *
               C139286 * C139560) *
              C139590 +
          ((((C13826 + C13827) * C244 + (C13999 + C13998) * C139339) * C92451 +
            ((C17604 + C17603) * C244 + (C17813 + C17814) * C139339) *
                C139588) *
               C139286 * C139560 -
           (((C13796 * C8918 + C139586 * C9157 + C13795 * C4445 +
              C13593 * C4785) *
                 C139339 +
             (C13796 * C8752 + C139586 * C8998 + C13795 * C4225 +
              C13593 * C4551) *
                 C244) *
                C139588 +
            ((C16887 + C16886) * C139339 + (C16676 + C16677) * C244) * C92451) *
               C139286 * C139377) *
              C2699)) /
        (p * q * std::sqrt(p + q));
    d2eezx[105] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1767 + C139588 * C2376) *
                C2702 +
            (C92849 * C116 + C92451 * C561 + C92850 * C1777 + C139588 * C2383) *
                C139589 -
            (C92876 + C92877) * C2703 - (C92878 + C92879) * C139590 +
            (C92880 + C92881) * C2704 + (C92882 + C92883) * C2699) *
               C139286 * C13593 +
           ((C109946 + C109947) * C2702 + (C109948 + C109949) * C139589 -
            (C93759 + C93758) * C2703 - (C93761 + C93760) * C139590 +
            (C95707 + C95706) * C2704 + (C95709 + C95708) * C2699) *
               C139286 * C139586) *
              C139339 * C139560 +
          (((C93758 + C93759) * C2703 -
            ((C109949 + C109948) * C139589 + (C109947 + C109946) * C2702) +
            (C93760 + C93761) * C139590 - (C95706 + C95707) * C2704 -
            (C95708 + C95709) * C2699) *
               C139286 * C13593 +
           ((C93763 + C93762) * C2703 -
            ((C109950 + C109951) * C139589 + (C109952 + C109953) * C2702) +
            (C93765 + C93764) * C139590 -
            (C92850 * C8752 + C139588 * C9232 + C92849 * C834 +
             C92451 * C1445) *
                C2704 -
            (C92850 * C8755 + C139588 * C9235 + C92849 * C849 +
             C92451 * C1453) *
                C2699) *
               C139286 * C139586) *
              C139339 * C139377)) /
        (p * q * std::sqrt(p + q));
    d2eezy[105] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1767 + C139588 * C2376) *
                C2783 +
            (C92849 * C182 + C92451 * C641 + C92850 * C1873 + C139588 * C2492) *
                C139560 -
            (C109947 + C109946) * C2784 - (C110060 + C110061) * C139377) *
               C139286 * C13593 +
           ((C109946 + C109947) * C2783 + (C110061 + C110060) * C139560 -
            (C109952 + C109953) * C2784 - (C110063 + C110062) * C139377) *
               C139286 * C139586) *
              C139589 +
          (((C93758 + C93759) * C2784 -
            ((C92967 + C92966) * C139560 + (C92876 + C92877) * C2783) +
            (C93873 + C93872) * C139377) *
               C139286 * C13593 +
           ((C93763 + C93762) * C2784 -
            ((C93872 + C93873) * C139560 + (C93759 + C93758) * C2783) +
            (C93874 + C93875) * C139377) *
               C139286 * C139586) *
              C139590 +
          (((C92880 + C92881) * C2783 + (C92969 + C92968) * C139560 -
            (C95706 + C95707) * C2784 - (C95813 + C95812) * C139377) *
               C139286 * C13593 +
           ((C95707 + C95706) * C2783 + (C95812 + C95813) * C139560 -
            (C92850 * C8752 + C139588 * C9232 + C92849 * C834 +
             C92451 * C1445) *
                C2784 -
            (C92850 * C8838 + C139588 * C9314 + C92849 * C942 +
             C92451 * C1558) *
                C139377) *
               C139286 * C139586) *
              C2699) *
         C139339) /
        (p * q * std::sqrt(p + q));
    d2eezz[105] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C92849 * C107 + C92451 * C555 + C92850 * C1767 +
              C139588 * C2376) *
                 C244 +
             (C92849 * C245 + C92451 * C719 + C92850 * C1965 +
              C139588 * C2591) *
                 C139339) *
                C139286 * C13593 +
            ((C109946 + C109947) * C244 + (C110170 + C110171) * C139339) *
                C139286 * C139586) *
               C139560 -
           (((C110172 + C110173) * C139339 + (C109952 + C109953) * C244) *
                C139286 * C139586 +
            ((C110171 + C110170) * C139339 + (C109947 + C109946) * C244) *
                C139286 * C13593) *
               C139377) *
              C139589 +
          ((((C93758 + C93759) * C244 + (C93983 + C93982) * C139339) * C139286 *
                C13593 +
            ((C93763 + C93762) * C244 + (C93984 + C93985) * C139339) * C139286 *
                C139586) *
               C139377 -
           (((C93982 + C93983) * C139339 + (C93759 + C93758) * C244) * C139286 *
                C139586 +
            ((C93051 + C93050) * C139339 + (C92876 + C92877) * C244) * C139286 *
                C13593) *
               C139560) *
              C139590 +
          ((((C92880 + C92881) * C244 + (C93053 + C93052) * C139339) * C139286 *
                C13593 +
            ((C95707 + C95706) * C244 + (C95916 + C95917) * C139339) * C139286 *
                C139586) *
               C139560 -
           (((C92850 * C8918 + C139588 * C9391 + C92849 * C1032 +
              C92451 * C1664) *
                 C139339 +
             (C92850 * C8752 + C139588 * C9232 + C92849 * C834 +
              C92451 * C1445) *
                 C244) *
                C139286 * C139586 +
            ((C95917 + C95916) * C139339 + (C95706 + C95707) * C244) * C139286 *
                C13593) *
               C139377) *
              C2699)) /
        (p * q * std::sqrt(p + q));
    d2eexx[106] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C63381 * C107 + C139286 * C113) * C826 +
              (C63381 * C116 + C139286 * C125) * C821 -
              (C63381 * C108 + C139286 * C114) * C827 -
              (C63381 * C117 + C139286 * C126) * C139305) *
                 C13593 +
             (C63896 + C63897 - C63898 - C63899) * C139586) *
                C92451 +
            ((C77543 + C77544 - C77545 - C77546) * C13593 + C80371 * C139586) *
                C139588) *
               C139561 +
           (((C77545 - (C77544 + C77543) + C77546) * C13593 +
             C80372 * C139586) *
                C92451 +
            ((C77547 - (C77548 + C77549) + C77550) * C13593 +
             (C77551 - (C77529 + C77530) + C77552) * C139586) *
                C139588) *
               C139403) *
              C139560 +
          ((((C63898 - (C63897 + C63896) + C63899) * C13593 +
             (C63902 - (C63901 + C63900) + C63903) * C139586) *
                C92451 +
            (C80372 * C13593 +
             (C66734 - (C66735 + C66736) + C66737) * C139586) *
                C139588) *
               C139561 +
           ((C80371 * C13593 + (C66736 + C66735 - C66734 - C66737) * C139586) *
                C92451 +
            ((C77530 + C77529 - C77551 - C77552) * C13593 +
             (C68855 * C826 + C68856 * C821 -
              (C63381 * C21078 + C139286 * C21082) * C827 -
              (C63381 * C21080 + C139286 * C21084) * C139305) *
                 C139586) *
                C139588) *
               C139403) *
              C139377)) /
        (p * q * std::sqrt(p + q));
    d2eexy[106] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    ((((((C63381 * C107 + C139286 * C113) * C2783 +
                         (C63381 * C182 + C139286 * C188) * C139560 -
                         C63884 * C2784 - C63997 * C139377) *
                            C13593 +
                        (C63884 * C2783 + C63997 * C139560 - C63888 * C2784 -
                         C63998 * C139377) *
                            C139586) *
                           C92451 +
                       ((C80503 + C80504 - C80505 - C80506) * C13593 +
                        (C80507 + C80508 - C80509 - C80510) * C139586) *
                           C139588) *
                          C821 +
                      (((C63886 * C2784 -
                         ((C63381 * C183 + C139286 * C189) * C139560 +
                          (C63381 * C108 + C139286 * C114) * C2783) +
                         C64000 * C139377) *
                            C13593 +
                        (C63890 * C2784 - (C64000 * C139560 + C63886 * C2783) +
                         C64001 * C139377) *
                            C139586) *
                           C92451 +
                       ((C80511 - (C80512 + C80513) + C80514) * C13593 +
                        (C80515 - (C80516 + C80517) + C80518) * C139586) *
                           C139588) *
                          C139305) *
                         C139561 +
                     ((((C80505 - (C80504 + C80503) + C80506) * C13593 +
                        (C80509 - (C80508 + C80507) + C80510) * C139586) *
                           C92451 +
                       ((C91686 - (C91687 + C91688) + C91689) * C13593 +
                        (C91690 - (C91691 + C91692) + C91693) * C139586) *
                           C139588) *
                          C821 +
                      (((C80513 + C80512 - C80511 - C80514) * C13593 +
                        (C80517 + C80516 - C80515 - C80518) * C139586) *
                           C92451 +
                       ((C77537 * C2783 + C77674 * C139560 - C77541 * C2784 -
                         C77675 * C139377) *
                            C13593 +
                        (C77541 * C2783 + C77675 * C139560 -
                         (C63381 * C21078 + C139286 * C21082) * C2784 -
                         (C63381 * C21196 + C139286 * C21198) * C139377) *
                            C139586) *
                           C139588) *
                          C139305) *
                         C139403)) /
                   (p * q * std::sqrt(p + q));
    d2eexz[106] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    ((((((C63381 * C107 + C139286 * C113) * C3607 +
                         (C63381 * C245 + C139286 * C251) * C139561 -
                         C77533 * C3608 - C77790 * C139403) *
                            C13593 +
                        (C66946 + C66947 - C66948 - C66970) * C139586) *
                           C92451 +
                       ((C77533 * C3607 + C77790 * C139561 - C77539 * C3608 -
                         C77791 * C139403) *
                            C13593 +
                        (C80649 + C80650 - C80651 - C80652) * C139586) *
                           C139588) *
                          C139560 +
                      (((C66948 - (C66947 + C66946) + C66970) * C13593 +
                        (C66953 - (C66952 + C66951) + C66971) * C139586) *
                           C92451 +
                       ((C80651 - (C80650 + C80649) + C80652) * C13593 +
                        (C86348 - (C86349 + C86350) + C86351) * C139586) *
                           C139588) *
                          C139377) *
                         C821 +
                     ((((C77535 * C3608 -
                         ((C63381 * C246 + C139286 * C252) * C139561 +
                          (C63381 * C108 + C139286 * C114) * C3607) +
                         C77792 * C139403) *
                            C13593 +
                        (C66956 - (C66957 + C66958) + C66972) * C139586) *
                           C92451 +
                       ((C77537 * C3608 - (C77792 * C139561 + C77535 * C3607) +
                         C77793 * C139403) *
                            C13593 +
                        (C80653 - (C80654 + C80655) + C80656) * C139586) *
                           C139588) *
                          C139560 +
                      (((C66958 + C66957 - C66956 - C66972) * C13593 +
                        (C66963 + C66962 - C66961 - C66973) * C139586) *
                           C92451 +
                       ((C80655 + C80654 - C80653 - C80656) * C13593 +
                        (C66726 * C3607 + C66969 * C139561 -
                         (C63381 * C21078 + C139286 * C21082) * C3608 -
                         (C63381 * C21304 + C139286 * C21306) * C139403) *
                            C139586) *
                           C139588) *
                          C139377) *
                         C139305)) /
                   (p * q * std::sqrt(p + q));
    d2eeyx[106] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13795 * C107 + C13593 * C308 + C13796 * C831 + C139586 * C1118) *
                 C826 +
             (C13795 * C116 + C13593 * C314 + C13796 * C841 + C139586 * C1125) *
                 C821 -
             (C13822 + C13823) * C827 - (C13824 + C13825) * C139305) *
                C92451 +
            ((C110582 + C110583) * C826 + (C110584 + C110585) * C821 -
             (C15709 + C15708) * C827 - (C15711 + C15710) * C139305) *
                C139588) *
               C139286 * C139561 +
           (((C15708 + C15709) * C827 -
             ((C110585 + C110584) * C821 + (C110583 + C110582) * C826) +
             (C15710 + C15711) * C139305) *
                C92451 +
            ((C15713 + C15712) * C827 -
             ((C110586 + C110587) * C821 + (C110588 + C110589) * C826) +
             (C15715 + C15714) * C139305) *
                C139588) *
               C139286 * C139403) *
              C139560 +
          ((((C14710 + C14711) * C827 -
             ((C13796 * C847 + C139586 * C1129 + C13795 * C841 +
               C13593 * C1125) *
                  C821 +
              (C13796 * C832 + C139586 * C1121 + C13795 * C831 +
               C13593 * C1118) *
                  C826) +
             (C14712 + C14713) * C139305) *
                C92451 +
            ((C18688 + C18687) * C827 -
             ((C113396 + C113397) * C821 + (C113398 + C113399) * C826) +
             (C18690 + C18689) * C139305) *
                C139588) *
               C139286 * C139561 +
           (((C113399 + C113398) * C826 + (C113397 + C113396) * C821 -
             (C18687 + C18688) * C827 - (C18689 + C18690) * C139305) *
                C92451 +
            ((C13795 * C6442 + C13593 * C6688 + C13796 * C21079 +
              C139586 * C21413) *
                 C826 +
             (C13795 * C6445 + C13593 * C6691 + C13796 * C21081 +
              C139586 * C21415) *
                 C821 -
             (C13796 * C21078 + C139586 * C21412 + C13795 * C6441 +
              C13593 * C6687) *
                 C827 -
             (C13796 * C21080 + C139586 * C21414 + C13795 * C6444 +
              C13593 * C6690) *
                 C139305) *
                C139588) *
               C139286 * C139403) *
              C139377)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[106] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13795 * C107 + C13593 * C308 + C13796 * C831 + C139586 * C1118) *
                 C2783 +
             (C13795 * C182 + C13593 * C394 + C13796 * C939 + C139586 * C1231) *
                 C139560 -
             (C13796 * C832 + C139586 * C1121 + C13795 * C831 +
              C13593 * C1118) *
                 C2784 -
             (C13796 * C940 + C139586 * C1232 + C13795 * C939 +
              C13593 * C1231) *
                 C139377) *
                C92451 +
            ((C110582 + C110583) * C2783 + (C110696 + C110697) * C139560 -
             (C113398 + C113399) * C2784 - (C113534 + C113535) * C139377) *
                C139588) *
               C139286 * C821 +
           (((C14710 + C14711) * C2784 -
             ((C13913 + C13912) * C139560 + (C13822 + C13823) * C2783) +
             (C14825 + C14824) * C139377) *
                C92451 +
            ((C18688 + C18687) * C2784 -
             ((C15823 + C15822) * C139560 + (C15709 + C15708) * C2783) +
             (C18825 + C18826) * C139377) *
                C139588) *
               C139286 * C139305) *
              C139561 +
          ((((C113399 + C113398) * C2784 -
             ((C110697 + C110696) * C139560 + (C110583 + C110582) * C2783) +
             (C113535 + C113534) * C139377) *
                C92451 +
            ((C13795 * C6442 + C13593 * C6688 + C13796 * C21079 +
              C139586 * C21413) *
                 C2784 -
             ((C110698 + C110699) * C139560 + (C110588 + C110589) * C2783) +
             (C13795 * C6528 + C13593 * C6766 + C13796 * C21197 +
              C139586 * C21514) *
                 C139377) *
                C139588) *
               C139286 * C821 +
           (((C15708 + C15709) * C2783 + (C15822 + C15823) * C139560 -
             (C18687 + C18688) * C2784 - (C18826 + C18825) * C139377) *
                C92451 +
            ((C15713 + C15712) * C2783 + (C15824 + C15825) * C139560 -
             (C13796 * C21078 + C139586 * C21412 + C13795 * C6441 +
              C13593 * C6687) *
                 C2784 -
             (C13796 * C21196 + C139586 * C21515 + C13795 * C6527 +
              C13593 * C6767) *
                 C139377) *
                C139588) *
               C139286 * C139305) *
              C139403)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[106] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13795 * C107 + C13593 * C308 + C13796 * C831 + C139586 * C1118) *
                 C3607 +
             (C13795 * C245 + C13593 * C474 + C13796 * C1029 +
              C139586 * C1339) *
                 C139561 -
             (C110583 + C110582) * C3608 - (C110806 + C110807) * C139403) *
                C92451 +
            ((C110582 + C110583) * C3607 + (C110807 + C110806) * C139561 -
             (C110588 + C110589) * C3608 - (C110809 + C110808) * C139403) *
                C139588) *
               C139286 * C139560 +
           (((C113399 + C113398) * C3608 -
             ((C13796 * C1030 + C139586 * C1340 + C13795 * C1029 +
               C13593 * C1339) *
                  C139561 +
              (C13796 * C832 + C139586 * C1121 + C13795 * C831 +
               C13593 * C1118) *
                  C3607) +
             (C113670 + C113671) * C139403) *
                C92451 +
            ((C13795 * C6442 + C13593 * C6688 + C13796 * C21079 +
              C139586 * C21413) *
                 C3608 -
             ((C113671 + C113670) * C139561 + (C113398 + C113399) * C3607) +
             (C13795 * C6608 + C13593 * C6843 + C13796 * C21305 +
              C139586 * C21614) *
                 C139403) *
                C139588) *
               C139286 * C139377) *
              C821 +
          ((((C15708 + C15709) * C3608 -
             ((C13997 + C13996) * C139561 + (C13822 + C13823) * C3607) +
             (C15933 + C15932) * C139403) *
                C92451 +
            ((C15713 + C15712) * C3608 -
             ((C15932 + C15933) * C139561 + (C15709 + C15708) * C3607) +
             (C15934 + C15935) * C139403) *
                C139588) *
               C139286 * C139560 +
           (((C14710 + C14711) * C3607 + (C14935 + C14934) * C139561 -
             (C18687 + C18688) * C3608 - (C18962 + C18961) * C139403) *
                C92451 +
            ((C18688 + C18687) * C3607 + (C18961 + C18962) * C139561 -
             (C13796 * C21078 + C139586 * C21412 + C13795 * C6441 +
              C13593 * C6687) *
                 C3608 -
             (C13796 * C21304 + C139586 * C21615 + C13795 * C6607 +
              C13593 * C6844) *
                 C139403) *
                C139588) *
               C139286 * C139377) *
              C139305)) /
        (p * q * std::sqrt(p + q));
    d2eezx[106] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C92849 * C107 + C92451 * C555 + C92850 * C1767 +
              C139588 * C2376) *
                 C826 +
             (C92849 * C116 + C92451 * C561 + C92850 * C1777 +
              C139588 * C2383) *
                 C821 -
             (C92876 + C92877) * C827 - (C92878 + C92879) * C139305) *
                C139286 * C13593 +
            ((C109946 + C109947) * C826 + (C109948 + C109949) * C821 -
             (C93759 + C93758) * C827 - (C93761 + C93760) * C139305) *
                C139286 * C139586) *
               C139561 +
           (((C94784 + C94785) * C827 -
             ((C92850 * C1783 + C139588 * C2387 + C92849 * C1777 +
               C92451 * C2383) *
                  C821 +
              (C92850 * C1768 + C139588 * C2379 + C92849 * C1767 +
               C92451 * C2376) *
                  C826) +
             (C94786 + C94787) * C139305) *
                C139286 * C13593 +
            ((C97767 + C97766) * C827 -
             ((C113810 + C113811) * C821 + (C113812 + C113813) * C826) +
             (C97769 + C97768) * C139305) *
                C139286 * C139586) *
               C139403) *
              C139560 +
          ((((C93758 + C93759) * C827 -
             ((C109949 + C109948) * C821 + (C109947 + C109946) * C826) +
             (C93760 + C93761) * C139305) *
                C139286 * C13593 +
            ((C93763 + C93762) * C827 -
             ((C109950 + C109951) * C821 + (C109952 + C109953) * C826) +
             (C93765 + C93764) * C139305) *
                C139286 * C139586) *
               C139561 +
           (((C113813 + C113812) * C826 + (C113811 + C113810) * C821 -
             (C97766 + C97767) * C827 - (C97768 + C97769) * C139305) *
                C139286 * C13593 +
            ((C92849 * C8754 + C92451 * C9234 + C92850 * C21079 +
              C139588 * C21715) *
                 C826 +
             (C92849 * C8757 + C92451 * C9237 + C92850 * C21081 +
              C139588 * C21717) *
                 C821 -
             (C92850 * C21078 + C139588 * C21714 + C92849 * C8753 +
              C92451 * C9233) *
                 C827 -
             (C92850 * C21080 + C139588 * C21716 + C92849 * C8756 +
              C92451 * C9236) *
                 C139305) *
                C139286 * C139586) *
               C139403) *
              C139377)) /
        (p * q * std::sqrt(p + q));
    d2eezy[106] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C92849 * C107 + C92451 * C555 + C92850 * C1767 +
              C139588 * C2376) *
                 C2783 +
             (C92849 * C182 + C92451 * C641 + C92850 * C1873 +
              C139588 * C2492) *
                 C139560 -
             (C109947 + C109946) * C2784 - (C110060 + C110061) * C139377) *
                C139286 * C13593 +
            ((C109946 + C109947) * C2783 + (C110061 + C110060) * C139560 -
             (C109952 + C109953) * C2784 - (C110063 + C110062) * C139377) *
                C139286 * C139586) *
               C821 +
           (((C93758 + C93759) * C2784 -
             ((C92967 + C92966) * C139560 + (C92876 + C92877) * C2783) +
             (C93873 + C93872) * C139377) *
                C139286 * C13593 +
            ((C93763 + C93762) * C2784 -
             ((C93872 + C93873) * C139560 + (C93759 + C93758) * C2783) +
             (C93874 + C93875) * C139377) *
                C139286 * C139586) *
               C139305) *
              C139561 +
          ((((C113813 + C113812) * C2784 -
             ((C92850 * C1874 + C139588 * C2493 + C92849 * C1873 +
               C92451 * C2492) *
                  C139560 +
              (C92850 * C1768 + C139588 * C2379 + C92849 * C1767 +
               C92451 * C2376) *
                  C2783) +
             (C113948 + C113949) * C139377) *
                C139286 * C13593 +
            ((C92849 * C8754 + C92451 * C9234 + C92850 * C21079 +
              C139588 * C21715) *
                 C2784 -
             ((C113949 + C113948) * C139560 + (C113812 + C113813) * C2783) +
             (C92849 * C8840 + C92451 * C9312 + C92850 * C21197 +
              C139588 * C21830) *
                 C139377) *
                C139286 * C139586) *
               C821 +
           (((C94784 + C94785) * C2783 + (C94898 + C94899) * C139560 -
             (C97766 + C97767) * C2784 - (C97905 + C97904) * C139377) *
                C139286 * C13593 +
            ((C97767 + C97766) * C2783 + (C97904 + C97905) * C139560 -
             (C92850 * C21078 + C139588 * C21714 + C92849 * C8753 +
              C92451 * C9233) *
                 C2784 -
             (C92850 * C21196 + C139588 * C21831 + C92849 * C8839 +
              C92451 * C9313) *
                 C139377) *
                C139286 * C139586) *
               C139305) *
              C139403)) /
        (p * q * std::sqrt(p + q));
    d2eezz[106] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C92849 * C107 + C92451 * C555 + C92850 * C1767 +
              C139588 * C2376) *
                 C3607 +
             (C92849 * C245 + C92451 * C719 + C92850 * C1965 +
              C139588 * C2591) *
                 C139561 -
             (C92850 * C1768 + C139588 * C2379 + C92849 * C1767 +
              C92451 * C2376) *
                 C3608 -
             (C92850 * C1966 + C139588 * C2592 + C92849 * C1965 +
              C92451 * C2591) *
                 C139403) *
                C139286 * C13593 +
            ((C109946 + C109947) * C3607 + (C110170 + C110171) * C139561 -
             (C113812 + C113813) * C3608 - (C114084 + C114085) * C139403) *
                C139286 * C139586) *
               C139560 +
           (((C113813 + C113812) * C3608 -
             ((C110171 + C110170) * C139561 + (C109947 + C109946) * C3607) +
             (C114085 + C114084) * C139403) *
                C139286 * C13593 +
            ((C92849 * C8754 + C92451 * C9234 + C92850 * C21079 +
              C139588 * C21715) *
                 C3608 -
             ((C110172 + C110173) * C139561 + (C109952 + C109953) * C3607) +
             (C92849 * C8920 + C92451 * C9389 + C92850 * C21305 +
              C139588 * C21933) *
                 C139403) *
                C139286 * C139586) *
               C139377) *
              C821 +
          ((((C94784 + C94785) * C3608 -
             ((C93051 + C93050) * C139561 + (C92876 + C92877) * C3607) +
             (C95009 + C95008) * C139403) *
                C139286 * C13593 +
            ((C97767 + C97766) * C3608 -
             ((C93982 + C93983) * C139561 + (C93759 + C93758) * C3607) +
             (C98040 + C98041) * C139403) *
                C139286 * C139586) *
               C139560 +
           (((C93758 + C93759) * C3607 + (C93983 + C93982) * C139561 -
             (C97766 + C97767) * C3608 - (C98041 + C98040) * C139403) *
                C139286 * C13593 +
            ((C93763 + C93762) * C3607 + (C93984 + C93985) * C139561 -
             (C92850 * C21078 + C139588 * C21714 + C92849 * C8753 +
              C92451 * C9233) *
                 C3608 -
             (C92850 * C21304 + C139588 * C21934 + C92849 * C8919 +
              C92451 * C9390) *
                 C139403) *
                C139286 * C139586) *
               C139377) *
              C139305)) /
        (p * q * std::sqrt(p + q));
    d2eexx[107] +=
        (-std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139286 * C113) * C826 +
             (C63381 * C116 + C139286 * C125) * C821 -
             (C63381 * C108 + C139286 * C114) * C827 -
             (C63381 * C117 + C139286 * C126) * C139305) *
                C13593 +
            (C63896 + C63897 - C63898 - C63899) * C139586) *
               C92451 +
           ((C77543 + C77544 - C77545 - C77546) * C13593 + C80371 * C139586) *
               C139588) *
              C139339 * C823 +
          (((C63898 - (C63897 + C63896) + C63899) * C13593 +
            (C63902 - (C63901 + C63900) + C63903) * C139586) *
               C92451 +
           (C80372 * C13593 + (C66734 - (C66735 + C66736) + C66737) * C139586) *
               C139588) *
              C139339 * C824 +
          ((C63910 * C13593 + (C63906 + C63905 - C63904 - C63907) * C139586) *
               C92451 +
           ((C66736 + C66735 - C66734 - C66737) * C13593 +
            (C71175 * C826 + C71176 * C821 -
             (C63381 * C24128 + C139286 * C24132) * C827 -
             (C63381 * C24130 + C139286 * C24134) * C139305) *
                C139586) *
               C139588) *
              C139339 * C825)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139286 * C113) * C103 +
            (C63381 * C116 + C139286 * C125) * C92 -
            (C63381 * C108 + C139286 * C114) * C104 -
            (C63381 * C117 + C139286 * C126) * C93 +
            (C63381 * C109 + C139286 * C115) * C105 +
            (C63381 * C118 + C139286 * C127) * C94 -
            (C63381 * C110 + C139286 * C119) * C106 -
            (C63381 * C120 + C139286 * C128) * C95) *
               C13593 +
           (C63884 * C103 + C63885 * C92 - C63886 * C104 - C63887 * C93 +
            C65320 * C105 + C65321 * C94 -
            (C63381 * C830 + C139286 * C838) * C106 -
            (C63381 * C843 + C139286 * C855) * C95) *
               C139586) *
              C92451 +
          ((C77533 * C103 + C77534 * C92 - C77535 * C104 - C77536 * C93 +
            C79439 * C105 + C79440 * C94 -
            (C63381 * C1766 + C139286 * C1774) * C106 -
            (C63381 * C1779 + C139286 * C1791) * C95) *
               C13593 +
           (C66724 * C103 + C66723 * C92 - C66722 * C104 - C66725 * C93 +
            C78537 * C105 + C78538 * C94 -
            (C63381 * C4226 + C139286 * C4233) * C106 -
            (C63381 * C4234 + C139286 * C4238) * C95) *
               C139586) *
              C139588) *
         C139339 * C139328) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139286 * C113) * C826 +
             (C63381 * C116 + C139286 * C125) * C821 -
             (C63381 * C108 + C139286 * C114) * C827 -
             (C63381 * C117 + C139286 * C126) * C139305) *
                C13593 +
            (C63896 + C63897 - C63898 - C63899) * C139586) *
               C92451 +
           ((C77543 + C77544 - C77545 - C77546) * C13593 + C80371 * C139586) *
               C139588) *
              C1761 +
          (((C77545 - (C77544 + C77543) + C77546) * C13593 + C80372 * C139586) *
               C92451 +
           ((C77547 - (C77548 + C77549) + C77550) * C13593 +
            (C77551 - (C77529 + C77530) + C77552) * C139586) *
               C139588) *
              C1762 +
          (((C77549 + C77548 - C77547 - C77550) * C13593 +
            (C77530 + C77529 - C77551 - C77552) * C139586) *
               C92451 +
           ((C88852 * C826 + C88853 * C821 -
             (C63381 * C10814 + C139286 * C10820) * C827 -
             (C63381 * C10817 + C139286 * C10823) * C139305) *
                C13593 +
            (C83103 * C826 + C83104 * C821 -
             (C63381 * C26830 + C139286 * C26834) * C827 -
             (C63381 * C26832 + C139286 * C26836) * C139305) *
                C139586) *
               C139588) *
              C1763) *
         C139328) /
            (p * q * std::sqrt(p + q));
    d2eexy[107] +=
        (-std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139286 * C113) * C934 +
             (C63381 * C182 + C139286 * C188) * C823 - C63884 * C935 -
             C63997 * C824 + C63888 * C936 + C63998 * C825) *
                C13593 +
            (C63884 * C934 + C63997 * C823 - C63888 * C935 - C63998 * C824 +
             C63894 * C936 + C63999 * C825) *
                C139586) *
               C92451 +
           ((C88072 + C88073 - C88074 - C88075 + C88076 + C88077) * C13593 +
            (C88078 + C88079 - C88080 - C88081 + C88082 + C88083) * C139586) *
               C139588) *
              C821 +
          (((C63886 * C935 -
             ((C63381 * C183 + C139286 * C189) * C823 +
              (C63381 * C108 + C139286 * C114) * C934) +
             C64000 * C824 - C63890 * C936 - C64001 * C825) *
                C13593 +
            (C63890 * C935 - (C64000 * C823 + C63886 * C934) + C64001 * C824 -
             C63892 * C936 - C64002 * C825) *
                C139586) *
               C92451 +
           ((C66722 * C935 - (C77673 * C823 + C77535 * C934) + C66846 * C824 -
             C66726 * C936 - C66847 * C825) *
                C13593 +
            (C66726 * C935 - (C66846 * C823 + C66722 * C934) + C66847 * C824 -
             (C63381 * C24128 + C139286 * C24132) * C936 -
             (C63381 * C24246 + C139286 * C24248) * C825) *
                C139586) *
               C139588) *
              C139305) *
         C139339) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139286 * C113) * C181 +
             (C63381 * C182 + C139286 * C188) * C139328) *
                C13593 +
            (C63884 * C181 + C63997 * C139328) * C139586) *
               C92451 +
           ((C77651 + C77677) * C13593 + (C77654 + C77655) * C139586) *
               C139588) *
              C92 -
          (((C77656 + C77657) * C139586 + (C77678 + C77660) * C13593) *
               C139588 +
           ((C64000 * C139328 + C63886 * C181) * C139586 +
            ((C63381 * C183 + C139286 * C189) * C139328 +
             (C63381 * C108 + C139286 * C114) * C181) *
                C13593) *
               C92451) *
              C93 +
          ((((C63381 * C109 + C139286 * C115) * C181 +
             (C63381 * C184 + C139286 * C190) * C139328) *
                C13593 +
            (C65320 * C181 + C65406 * C139328) * C139586) *
               C92451 +
           ((C79541 + C79547) * C13593 + (C79544 + C79545) * C139586) *
               C139588) *
              C94 -
          ((((C63381 * C4340 + C139286 * C4344) * C139328 +
             (C63381 * C4226 + C139286 * C4233) * C181) *
                C139586 +
            ((C63381 * C1872 + C139286 * C1880) * C139328 +
             (C63381 * C1766 + C139286 * C1774) * C181) *
                C13593) *
               C139588 +
           (((C63381 * C943 + C139286 * C951) * C139328 +
             (C63381 * C830 + C139286 * C838) * C181) *
                C139586 +
            ((C63381 * C185 + C139286 * C191) * C139328 +
             (C63381 * C110 + C139286 * C119) * C181) *
                C13593) *
               C92451) *
              C95) *
         C139339) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((((C63381 * C107 + C139286 * C113) * C181 +
              (C63381 * C182 + C139286 * C188) * C139328) *
                 C13593 +
             (C63884 * C181 + C63997 * C139328) * C139586) *
                C92451 +
            ((C77651 + C77677) * C13593 + (C77654 + C77655) * C139586) *
                C139588) *
               C821 -
           (((C77656 + C77657) * C139586 + (C77678 + C77660) * C13593) *
                C139588 +
            ((C64000 * C139328 + C63886 * C181) * C139586 +
             ((C63381 * C183 + C139286 * C189) * C139328 +
              (C63381 * C108 + C139286 * C114) * C181) *
                 C13593) *
                C92451) *
               C139305) *
              C1761 +
          ((((C77660 + C77678) * C13593 + (C77657 + C77656) * C139586) *
                C92451 +
            ((C77661 + C77679) * C13593 + (C77664 + C77680) * C139586) *
                C139588) *
               C139305 -
           (((C77667 + C77668) * C139586 + (C77681 + C77671) * C13593) *
                C139588 +
            ((C77655 + C77654) * C139586 + (C77677 + C77651) * C13593) *
                C92451) *
               C821) *
              C1762 +
          ((((C77671 + C77681) * C13593 + (C77668 + C77667) * C139586) *
                C92451 +
            ((C88924 + C88930) * C13593 + (C88927 + C88928) * C139586) *
                C139588) *
               C821 -
           ((((C63381 * C26904 + C139286 * C26906) * C139328 +
              (C63381 * C26830 + C139286 * C26834) * C181) *
                 C139586 +
             ((C63381 * C10876 + C139286 * C10879) * C139328 +
              (C63381 * C10814 + C139286 * C10820) * C181) *
                 C13593) *
                C139588 +
            ((C77680 + C77664) * C139586 + (C77679 + C77661) * C13593) *
                C92451) *
               C139305) *
              C1763)) /
            (p * q * std::sqrt(p + q));
    d2eexz[107] +=
        (-std::pow(Pi, 2.5) *
         ((((((C63381 * C107 + C139286 * C113) * C244 +
              (C63381 * C245 + C139286 * C251) * C139339) *
                 C13593 +
             (C64077 + C64101) * C139586) *
                C92451 +
            ((C77533 * C244 + C77790 * C139339) * C13593 +
             (C76769 + C76770) * C139586) *
                C139588) *
               C823 -
           (((C76771 + C76772) * C139586 + (C76770 + C76769) * C13593) *
                C139588 +
            ((C64102 + C64080) * C139586 + (C64101 + C64077) * C13593) *
                C92451) *
               C824 +
           ((C64107 * C13593 + (C64085 + C64103) * C139586) * C92451 +
            ((C76772 + C76771) * C13593 + (C82571 + C82572) * C139586) *
                C139588) *
               C825) *
              C821 +
          ((((C64086 + C64104) * C13593 + (C64089 + C64105) * C139586) *
                C92451 +
            ((C76773 + C76774) * C13593 + (C76775 + C76776) * C139586) *
                C139588) *
               C824 -
           (((C76774 + C76773) * C139586 +
             (C77792 * C139339 + C77535 * C244) * C13593) *
                C139588 +
            ((C64104 + C64086) * C139586 +
             ((C63381 * C246 + C139286 * C252) * C139339 +
              (C63381 * C108 + C139286 * C114) * C244) *
                 C13593) *
                C92451) *
               C823 -
           ((((C63381 * C24354 + C139286 * C24356) * C139339 +
              (C63381 * C24128 + C139286 * C24132) * C244) *
                 C139586 +
             (C76776 + C76775) * C13593) *
                C139588 +
            ((C64106 + C64092) * C139586 + C64108 * C13593) * C92451) *
               C825) *
              C139305)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * (((((C63381 * C107 + C139286 * C113) * C244 +
                                 (C63381 * C245 + C139286 * C251) * C139339) *
                                    C13593 +
                                (C64077 + C64101) * C139586) *
                                   C92451 +
                               ((C77533 * C244 + C77790 * C139339) * C13593 +
                                (C76769 + C76770) * C139586) *
                                   C139588) *
                                  C139328 * C92 -
                              (((C76774 + C76773) * C139586 +
                                (C77792 * C139339 + C77535 * C244) * C13593) *
                                   C139588 +
                               ((C64104 + C64086) * C139586 +
                                ((C63381 * C246 + C139286 * C252) * C139339 +
                                 (C63381 * C108 + C139286 * C114) * C244) *
                                    C13593) *
                                   C92451) *
                                  C139328 * C93 +
                              ((((C63381 * C109 + C139286 * C115) * C244 +
                                 (C63381 * C247 + C139286 * C253) * C139339) *
                                    C13593 +
                                (C65482 + C65490) * C139586) *
                                   C92451 +
                               ((C79439 * C244 + C79648 * C139339) * C13593 +
                                (C78740 + C78744) * C139586) *
                                   C139588) *
                                  C139328 * C94 -
                              ((((C63381 * C4446 + C139286 * C4450) * C139339 +
                                 (C63381 * C4226 + C139286 * C4233) * C244) *
                                    C139586 +
                                ((C63381 * C1969 + C139286 * C1977) * C139339 +
                                 (C63381 * C1766 + C139286 * C1774) * C244) *
                                    C13593) *
                                   C139588 +
                               (((C63381 * C1033 + C139286 * C1041) * C139339 +
                                 (C63381 * C830 + C139286 * C838) * C244) *
                                    C139586 +
                                ((C63381 * C248 + C139286 * C254) * C139339 +
                                 (C63381 * C110 + C139286 * C119) * C244) *
                                    C13593) *
                                   C92451) *
                                  C139328 * C95)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139286 * C113) * C1960 +
             (C63381 * C245 + C139286 * C251) * C1761 - C77533 * C1961 -
             C77790 * C1762 + C77539 * C1962 + C77791 * C1763) *
                C13593 +
            (C69019 + C69020 - C69021 - C69022 + C69023 + C69035) * C139586) *
               C92451 +
           ((C77533 * C1960 + C77790 * C1761 - C77539 * C1961 - C77791 * C1762 +
             C88852 * C1962 + C89001 * C1763) *
                C13593 +
            (C83322 + C83323 - C83324 - C83325 + C83326 + C83330) * C139586) *
               C139588) *
              C139328 * C821 +
          (((C77535 * C1961 -
             ((C63381 * C246 + C139286 * C252) * C1761 +
              (C63381 * C108 + C139286 * C114) * C1960) +
             C77792 * C1762 - C77537 * C1962 - C77793 * C1763) *
                C13593 +
            (C66722 * C1961 - (C64098 * C1761 + C63886 * C1960) +
             C66968 * C1762 - C77541 * C1962 - C77794 * C1763) *
                C139586) *
               C92451 +
           ((C77537 * C1961 - (C77792 * C1761 + C77535 * C1960) +
             C77793 * C1762 - (C63381 * C10814 + C139286 * C10820) * C1962 -
             (C63381 * C10936 + C139286 * C10939) * C1763) *
                C13593 +
            (C77541 * C1961 - (C66968 * C1761 + C66722 * C1960) +
             C77794 * C1762 - (C63381 * C26830 + C139286 * C26834) * C1962 -
             (C63381 * C26974 + C139286 * C26976) * C1763) *
                C139586) *
               C139588) *
              C139328 * C139305)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[107] +=
        (-std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C831 + C139586 * C1118) *
                C826 +
            (C13795 * C116 + C13593 * C314 + C13796 * C841 + C139586 * C1125) *
                C821 -
            (C13822 + C13823) * C827 - (C13824 + C13825) * C139305) *
               C92451 +
           ((C13795 * C1767 + C13593 * C2054 + C13796 * C4223 +
             C139586 * C4549) *
                C826 +
            (C13795 * C1777 + C13593 * C2061 + C13796 * C4230 +
             C139586 * C4553) *
                C821 -
            (C15709 + C15708) * C827 - (C15711 + C15710) * C139305) *
               C139588) *
              C139286 * C139339 * C823 +
          (((C14710 + C14711) * C827 -
            ((C13796 * C847 + C139586 * C1129 + C13795 * C841 +
              C13593 * C1125) *
                 C821 +
             (C13796 * C832 + C139586 * C1121 + C13795 * C831 +
              C13593 * C1118) *
                 C826) +
            (C14712 + C14713) * C139305) *
               C92451 +
           ((C18688 + C18687) * C827 -
            ((C13796 * C8757 + C139586 * C9003 + C13795 * C4230 +
              C13593 * C4553) *
                 C821 +
             (C13796 * C8754 + C139586 * C9000 + C13795 * C4223 +
              C13593 * C4549) *
                 C826) +
            (C18690 + C18689) * C139305) *
               C139588) *
              C139286 * C139339 * C824 +
          (((C13795 * C832 + C13593 * C1121 + C13796 * C5916 +
             C139586 * C6094) *
                C826 +
            (C13795 * C847 + C13593 * C1129 + C13796 * C5919 +
             C139586 * C6097) *
                C821 -
            (C14714 + C14715) * C827 - (C14716 + C14717) * C139305) *
               C92451 +
           ((C13795 * C8754 + C13593 * C9000 + C13796 * C24129 +
             C139586 * C24463) *
                C826 +
            (C13795 * C8757 + C13593 * C9003 + C13796 * C24131 +
             C139586 * C24465) *
                C821 -
            (C13796 * C24128 + C139586 * C24462 + C13795 * C8753 +
             C13593 * C8999) *
                C827 -
            (C13796 * C24130 + C139586 * C24464 + C13795 * C8756 +
             C13593 * C9002) *
                C139305) *
               C139588) *
              C139286 * C139339 * C825)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C13795 * C107 + C13593 * C308 + C13796 * C831 + C139586 * C1118) *
               C103 +
           (C13795 * C116 + C13593 * C314 + C13796 * C841 + C139586 * C1125) *
               C92 -
           (C13822 + C13823) * C104 - (C13824 + C13825) * C93 +
           (C13826 + C13827) * C105 + (C13828 + C13829) * C94 -
           (C13830 + C13831) * C106 - (C13832 + C13833) * C95) *
              C92451 +
          ((C13795 * C1767 + C13593 * C2054 + C13796 * C4223 +
            C139586 * C4549) *
               C103 +
           (C13795 * C1777 + C13593 * C2061 + C13796 * C4230 +
            C139586 * C4553) *
               C92 -
           (C15709 + C15708) * C104 - (C15711 + C15710) * C93 +
           (C17604 + C17603) * C105 + (C17606 + C17605) * C94 -
           (C13796 * C4226 + C139586 * C4552 + C13795 * C1766 +
            C13593 * C2056) *
               C106 -
           (C13796 * C4234 + C139586 * C4556 + C13795 * C1779 +
            C13593 * C2064) *
               C95) *
              C139588) *
         C139286 * C139339 * C139328) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C831 + C139586 * C1118) *
                C826 +
            (C13795 * C116 + C13593 * C314 + C13796 * C841 + C139586 * C1125) *
                C821 -
            (C13822 + C13823) * C827 - (C13824 + C13825) * C139305) *
               C92451 +
           ((C110582 + C110583) * C826 + (C110584 + C110585) * C821 -
            (C15709 + C15708) * C827 - (C15711 + C15710) * C139305) *
               C139588) *
              C139286 * C1761 +
          (((C15708 + C15709) * C827 -
            ((C110585 + C110584) * C821 + (C110583 + C110582) * C826) +
            (C15710 + C15711) * C139305) *
               C92451 +
           ((C15713 + C15712) * C827 -
            ((C110586 + C110587) * C821 + (C110588 + C110589) * C826) +
            (C15715 + C15714) * C139305) *
               C139588) *
              C139286 * C1762 +
          (((C110589 + C110588) * C826 + (C110587 + C110586) * C821 -
            (C15712 + C15713) * C827 - (C15714 + C15715) * C139305) *
               C92451 +
           ((C13795 * C10815 + C13593 * C10993 + C13796 * C26831 +
             C139586 * C27045) *
                C826 +
            (C13795 * C10818 + C13593 * C10996 + C13796 * C26833 +
             C139586 * C27047) *
                C821 -
            (C13796 * C26830 + C139586 * C27044 + C13795 * C10814 +
             C13593 * C10992) *
                C827 -
            (C13796 * C26832 + C139586 * C27046 + C13795 * C10817 +
             C13593 * C10995) *
                C139305) *
               C139588) *
              C139286 * C1763) *
         C139328) /
            (p * q * std::sqrt(p + q));
    d2eeyy[107] +=
        (-std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C831 + C139586 * C1118) *
                C934 +
            (C13795 * C182 + C13593 * C394 + C13796 * C939 + C139586 * C1231) *
                C823 -
            (C13796 * C832 + C139586 * C1121 + C13795 * C831 + C13593 * C1118) *
                C935 -
            (C13796 * C940 + C139586 * C1232 + C13795 * C939 + C13593 * C1231) *
                C824 +
            (C13795 * C832 + C13593 * C1121 + C13796 * C5916 +
             C139586 * C6094) *
                C936 +
            (C13795 * C940 + C13593 * C1232 + C13796 * C5982 +
             C139586 * C6148) *
                C825) *
               C92451 +
           ((C13795 * C1767 + C13593 * C2054 + C13796 * C4223 +
             C139586 * C4549) *
                C934 +
            (C13795 * C1873 + C13593 * C2170 + C13796 * C4337 +
             C139586 * C4667) *
                C823 -
            (C13796 * C8754 + C139586 * C9000 + C13795 * C4223 +
             C13593 * C4549) *
                C935 -
            (C13796 * C8840 + C139586 * C9078 + C13795 * C4337 +
             C13593 * C4667) *
                C824 +
            (C13795 * C8754 + C13593 * C9000 + C13796 * C24129 +
             C139586 * C24463) *
                C936 +
            (C13795 * C8840 + C13593 * C9078 + C13796 * C24247 +
             C139586 * C24564) *
                C825) *
               C139588) *
              C139286 * C821 +
          (((C14710 + C14711) * C935 -
            ((C13913 + C13912) * C823 + (C13822 + C13823) * C934) +
            (C14825 + C14824) * C824 - (C14714 + C14715) * C936 -
            (C14827 + C14826) * C825) *
               C92451 +
           ((C18688 + C18687) * C935 -
            ((C15823 + C15822) * C823 + (C15709 + C15708) * C934) +
            (C18825 + C18826) * C824 -
            (C13796 * C24128 + C139586 * C24462 + C13795 * C8753 +
             C13593 * C8999) *
                C936 -
            (C13796 * C24246 + C139586 * C24565 + C13795 * C8839 +
             C13593 * C9079) *
                C825) *
               C139588) *
              C139286 * C139305) *
         C139339) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C831 + C139586 * C1118) *
                C181 +
            (C13795 * C182 + C13593 * C394 + C13796 * C939 + C139586 * C1231) *
                C139328) *
               C92451 +
           ((C13795 * C1767 + C13593 * C2054 + C13796 * C4223 +
             C139586 * C4549) *
                C181 +
            (C13795 * C1873 + C13593 * C2170 + C13796 * C4337 +
             C139586 * C4667) *
                C139328) *
               C139588) *
              C139286 * C92 -
          (((C15823 + C15822) * C139328 + (C15709 + C15708) * C181) * C139588 +
           ((C13913 + C13912) * C139328 + (C13822 + C13823) * C181) * C92451) *
              C139286 * C93 +
          (((C13826 + C13827) * C181 + (C13915 + C13914) * C139328) * C92451 +
           ((C17604 + C17603) * C181 + (C17709 + C17710) * C139328) * C139588) *
              C139286 * C94 -
          (((C13796 * C4340 + C139586 * C4670 + C13795 * C1872 +
             C13593 * C2169) *
                C139328 +
            (C13796 * C4226 + C139586 * C4552 + C13795 * C1766 +
             C13593 * C2056) *
                C181) *
               C139588 +
           ((C13917 + C13916) * C139328 + (C13830 + C13831) * C181) * C92451) *
              C139286 * C95) *
         C139339) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C13795 * C107 + C13593 * C308 + C13796 * C831 + C139586 * C1118) *
                 C181 +
             (C13795 * C182 + C13593 * C394 + C13796 * C939 + C139586 * C1231) *
                 C139328) *
                C92451 +
            ((C110582 + C110583) * C181 + (C110696 + C110697) * C139328) *
                C139588) *
               C139286 * C821 -
           (((C15823 + C15822) * C139328 + (C15709 + C15708) * C181) * C139588 +
            ((C13913 + C13912) * C139328 + (C13822 + C13823) * C181) * C92451) *
               C139286 * C139305) *
              C1761 +
          ((((C15708 + C15709) * C181 + (C15822 + C15823) * C139328) * C92451 +
            ((C15713 + C15712) * C181 + (C15824 + C15825) * C139328) *
                C139588) *
               C139286 * C139305 -
           (((C110698 + C110699) * C139328 + (C110588 + C110589) * C181) *
                C139588 +
            ((C110697 + C110696) * C139328 + (C110583 + C110582) * C181) *
                C92451) *
               C139286 * C821) *
              C1762 +
          ((((C110589 + C110588) * C181 + (C110699 + C110698) * C139328) *
                C92451 +
            ((C13795 * C10815 + C13593 * C10993 + C13796 * C26831 +
              C139586 * C27045) *
                 C181 +
             (C13795 * C10877 + C13593 * C11049 + C13796 * C26905 +
              C139586 * C27115) *
                 C139328) *
                C139588) *
               C139286 * C821 -
           (((C13796 * C26904 + C139586 * C27114 + C13795 * C10876 +
              C13593 * C11048) *
                 C139328 +
             (C13796 * C26830 + C139586 * C27044 + C13795 * C10814 +
              C13593 * C10992) *
                 C181) *
                C139588 +
            ((C15825 + C15824) * C139328 + (C15712 + C15713) * C181) * C92451) *
               C139286 * C139305) *
              C1763)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[107] +=
        (-std::pow(Pi, 2.5) *
         (((((C13795 * C107 + C13593 * C308 + C13796 * C831 + C139586 * C1118) *
                 C244 +
             (C13795 * C245 + C13593 * C474 + C13796 * C1029 +
              C139586 * C1339) *
                 C139339) *
                C92451 +
            ((C13795 * C1767 + C13593 * C2054 + C13796 * C4223 +
              C139586 * C4549) *
                 C244 +
             (C13795 * C1965 + C13593 * C2269 + C13796 * C4443 +
              C139586 * C4783) *
                 C139339) *
                C139588) *
               C139286 * C823 -
           (((C13796 * C8920 + C139586 * C9155 + C13795 * C4443 +
              C13593 * C4783) *
                 C139339 +
             (C13796 * C8754 + C139586 * C9000 + C13795 * C4223 +
              C13593 * C4549) *
                 C244) *
                C139588 +
            ((C13796 * C1030 + C139586 * C1340 + C13795 * C1029 +
              C13593 * C1339) *
                 C139339 +
             (C13796 * C832 + C139586 * C1121 + C13795 * C831 +
              C13593 * C1118) *
                 C244) *
                C92451) *
               C139286 * C824 +
           (((C13795 * C832 + C13593 * C1121 + C13796 * C5916 +
              C139586 * C6094) *
                 C244 +
             (C13795 * C1030 + C13593 * C1340 + C13796 * C6038 +
              C139586 * C6203) *
                 C139339) *
                C92451 +
            ((C13795 * C8754 + C13593 * C9000 + C13796 * C24129 +
              C139586 * C24463) *
                 C244 +
             (C13795 * C8920 + C13593 * C9155 + C13796 * C24355 +
              C139586 * C24664) *
                 C139339) *
                C139588) *
               C139286 * C825) *
              C821 +
          ((((C14710 + C14711) * C244 + (C14935 + C14934) * C139339) * C92451 +
            ((C18688 + C18687) * C244 + (C18961 + C18962) * C139339) *
                C139588) *
               C139286 * C824 -
           (((C15932 + C15933) * C139339 + (C15709 + C15708) * C244) * C139588 +
            ((C13997 + C13996) * C139339 + (C13822 + C13823) * C244) * C92451) *
               C139286 * C823 -
           (((C13796 * C24354 + C139586 * C24665 + C13795 * C8919 +
              C13593 * C9156) *
                 C139339 +
             (C13796 * C24128 + C139586 * C24462 + C13795 * C8753 +
              C13593 * C8999) *
                 C244) *
                C139588 +
            ((C14937 + C14936) * C139339 + (C14714 + C14715) * C244) * C92451) *
               C139286 * C825) *
              C139305)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C831 + C139586 * C1118) *
                C244 +
            (C13795 * C245 + C13593 * C474 + C13796 * C1029 + C139586 * C1339) *
                C139339) *
               C92451 +
           ((C13795 * C1767 + C13593 * C2054 + C13796 * C4223 +
             C139586 * C4549) *
                C244 +
            (C13795 * C1965 + C13593 * C2269 + C13796 * C4443 +
             C139586 * C4783) *
                C139339) *
               C139588) *
              C139286 * C139328 * C92 -
          (((C15932 + C15933) * C139339 + (C15709 + C15708) * C244) * C139588 +
           ((C13997 + C13996) * C139339 + (C13822 + C13823) * C244) * C92451) *
              C139286 * C139328 * C93 +
          (((C13826 + C13827) * C244 + (C13999 + C13998) * C139339) * C92451 +
           ((C17604 + C17603) * C244 + (C17813 + C17814) * C139339) * C139588) *
              C139286 * C139328 * C94 -
          (((C13796 * C4446 + C139586 * C4786 + C13795 * C1969 +
             C13593 * C2275) *
                C139339 +
            (C13796 * C4226 + C139586 * C4552 + C13795 * C1766 +
             C13593 * C2056) *
                C244) *
               C139588 +
           ((C14001 + C14000) * C139339 + (C13830 + C13831) * C244) * C92451) *
              C139286 * C139328 * C95)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C831 + C139586 * C1118) *
                C1960 +
            (C13795 * C245 + C13593 * C474 + C13796 * C1029 + C139586 * C1339) *
                C1761 -
            (C110583 + C110582) * C1961 - (C110806 + C110807) * C1762 +
            (C110589 + C110588) * C1962 + (C110808 + C110809) * C1763) *
               C92451 +
           ((C110582 + C110583) * C1960 + (C110807 + C110806) * C1761 -
            (C110588 + C110589) * C1961 - (C110809 + C110808) * C1762 +
            (C13795 * C10815 + C13593 * C10993 + C13796 * C26831 +
             C139586 * C27045) *
                C1962 +
            (C13795 * C10937 + C13593 * C11100 + C13796 * C26975 +
             C139586 * C27182) *
                C1763) *
               C139588) *
              C139286 * C139328 * C821 +
          (((C15708 + C15709) * C1961 -
            ((C13997 + C13996) * C1761 + (C13822 + C13823) * C1960) +
            (C15933 + C15932) * C1762 - (C15712 + C15713) * C1962 -
            (C15935 + C15934) * C1763) *
               C92451 +
           ((C15713 + C15712) * C1961 -
            ((C15932 + C15933) * C1761 + (C15709 + C15708) * C1960) +
            (C15934 + C15935) * C1762 -
            (C13796 * C26830 + C139586 * C27044 + C13795 * C10814 +
             C13593 * C10992) *
                C1962 -
            (C13796 * C26974 + C139586 * C27183 + C13795 * C10936 +
             C13593 * C11101) *
                C1763) *
               C139588) *
              C139286 * C139328 * C139305)) /
            (p * q * std::sqrt(p + q));
    d2eezx[107] +=
        (-std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1767 + C139588 * C2376) *
                C826 +
            (C92849 * C116 + C92451 * C561 + C92850 * C1777 + C139588 * C2383) *
                C821 -
            (C92876 + C92877) * C827 - (C92878 + C92879) * C139305) *
               C139286 * C13593 +
           ((C109946 + C109947) * C826 + (C109948 + C109949) * C821 -
            (C93759 + C93758) * C827 - (C93761 + C93760) * C139305) *
               C139286 * C139586) *
              C139339 * C823 +
          (((C93758 + C93759) * C827 -
            ((C109949 + C109948) * C821 + (C109947 + C109946) * C826) +
            (C93760 + C93761) * C139305) *
               C139286 * C13593 +
           ((C93763 + C93762) * C827 -
            ((C109950 + C109951) * C821 + (C109952 + C109953) * C826) +
            (C93765 + C93764) * C139305) *
               C139286 * C139586) *
              C139339 * C824 +
          (((C109953 + C109952) * C826 + (C109951 + C109950) * C821 -
            (C93762 + C93763) * C827 - (C93764 + C93765) * C139305) *
               C139286 * C13593 +
           ((C92849 * C5916 + C92451 * C6256 + C92850 * C24129 +
             C139588 * C24765) *
                C826 +
            (C92849 * C5919 + C92451 * C6259 + C92850 * C24131 +
             C139588 * C24767) *
                C821 -
            (C92850 * C24128 + C139588 * C24764 + C92849 * C5915 +
             C92451 * C6255) *
                C827 -
            (C92850 * C24130 + C139588 * C24766 + C92849 * C5918 +
             C92451 * C6258) *
                C139305) *
               C139286 * C139586) *
              C139339 * C825)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C92849 * C107 + C92451 * C555 + C92850 * C1767 + C139588 * C2376) *
               C103 +
           (C92849 * C116 + C92451 * C561 + C92850 * C1777 + C139588 * C2383) *
               C92 -
           (C92876 + C92877) * C104 - (C92878 + C92879) * C93 +
           (C92880 + C92881) * C105 + (C92882 + C92883) * C94 -
           (C92884 + C92885) * C106 - (C92886 + C92887) * C95) *
              C139286 * C13593 +
          ((C92849 * C831 + C92451 * C1440 + C92850 * C4223 + C139588 * C4899) *
               C103 +
           (C92849 * C841 + C92451 * C1447 + C92850 * C4230 + C139588 * C4903) *
               C92 -
           (C93759 + C93758) * C104 - (C93761 + C93760) * C93 +
           (C95707 + C95706) * C105 + (C95709 + C95708) * C94 -
           (C92850 * C4226 + C139588 * C4902 + C92849 * C830 + C92451 * C1442) *
               C106 -
           (C92850 * C4234 + C139588 * C4906 + C92849 * C843 + C92451 * C1450) *
               C95) *
              C139286 * C139586) *
         C139339 * C139328) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1767 + C139588 * C2376) *
                C826 +
            (C92849 * C116 + C92451 * C561 + C92850 * C1777 + C139588 * C2383) *
                C821 -
            (C92876 + C92877) * C827 - (C92878 + C92879) * C139305) *
               C139286 * C13593 +
           ((C109946 + C109947) * C826 + (C109948 + C109949) * C821 -
            (C93759 + C93758) * C827 - (C93761 + C93760) * C139305) *
               C139286 * C139586) *
              C1761 +
          (((C94784 + C94785) * C827 -
            ((C92850 * C1783 + C139588 * C2387 + C92849 * C1777 +
              C92451 * C2383) *
                 C821 +
             (C92850 * C1768 + C139588 * C2379 + C92849 * C1767 +
              C92451 * C2376) *
                 C826) +
            (C94786 + C94787) * C139305) *
               C139286 * C13593 +
           ((C97767 + C97766) * C827 -
            ((C92850 * C6445 + C139588 * C6925 + C92849 * C4230 +
              C92451 * C4903) *
                 C821 +
             (C92850 * C6442 + C139588 * C6922 + C92849 * C4223 +
              C92451 * C4899) *
                 C826) +
            (C97769 + C97768) * C139305) *
               C139286 * C139586) *
              C1762 +
          (((C92849 * C1768 + C92451 * C2379 + C92850 * C10815 +
             C139588 * C11155) *
                C826 +
            (C92849 * C1783 + C92451 * C2387 + C92850 * C10818 +
             C139588 * C11158) *
                C821 -
            (C94788 + C94789) * C827 - (C94790 + C94791) * C139305) *
               C139286 * C13593 +
           ((C92849 * C6442 + C92451 * C6922 + C92850 * C26831 +
             C139588 * C27251) *
                C826 +
            (C92849 * C6445 + C92451 * C6925 + C92850 * C26833 +
             C139588 * C27253) *
                C821 -
            (C92850 * C26830 + C139588 * C27250 + C92849 * C6441 +
             C92451 * C6921) *
                C827 -
            (C92850 * C26832 + C139588 * C27252 + C92849 * C6444 +
             C92451 * C6924) *
                C139305) *
               C139286 * C139586) *
              C1763) *
         C139328) /
            (p * q * std::sqrt(p + q));
    d2eezy[107] +=
        (-std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1767 + C139588 * C2376) *
                C934 +
            (C92849 * C182 + C92451 * C641 + C92850 * C1873 + C139588 * C2492) *
                C823 -
            (C109947 + C109946) * C935 - (C110060 + C110061) * C824 +
            (C109953 + C109952) * C936 + (C110062 + C110063) * C825) *
               C139286 * C13593 +
           ((C109946 + C109947) * C934 + (C110061 + C110060) * C823 -
            (C109952 + C109953) * C935 - (C110063 + C110062) * C824 +
            (C92849 * C5916 + C92451 * C6256 + C92850 * C24129 +
             C139588 * C24765) *
                C936 +
            (C92849 * C5982 + C92451 * C6310 + C92850 * C24247 +
             C139588 * C24876) *
                C825) *
               C139286 * C139586) *
              C821 +
          (((C93758 + C93759) * C935 -
            ((C92967 + C92966) * C823 + (C92876 + C92877) * C934) +
            (C93873 + C93872) * C824 - (C93762 + C93763) * C936 -
            (C93875 + C93874) * C825) *
               C139286 * C13593 +
           ((C93763 + C93762) * C935 -
            ((C93872 + C93873) * C823 + (C93759 + C93758) * C934) +
            (C93874 + C93875) * C824 -
            (C92850 * C24128 + C139588 * C24764 + C92849 * C5915 +
             C92451 * C6255) *
                C936 -
            (C92850 * C24246 + C139588 * C24877 + C92849 * C5981 +
             C92451 * C6311) *
                C825) *
               C139286 * C139586) *
              C139305) *
         C139339) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1767 + C139588 * C2376) *
                C181 +
            (C92849 * C182 + C92451 * C641 + C92850 * C1873 + C139588 * C2492) *
                C139328) *
               C139286 * C13593 +
           ((C92849 * C831 + C92451 * C1440 + C92850 * C4223 +
             C139588 * C4899) *
                C181 +
            (C92849 * C939 + C92451 * C1553 + C92850 * C4337 +
             C139588 * C5017) *
                C139328) *
               C139286 * C139586) *
              C92 -
          (((C93872 + C93873) * C139328 + (C93759 + C93758) * C181) * C139286 *
               C139586 +
           ((C92967 + C92966) * C139328 + (C92876 + C92877) * C181) * C139286 *
               C13593) *
              C93 +
          (((C92880 + C92881) * C181 + (C92969 + C92968) * C139328) * C139286 *
               C13593 +
           ((C95707 + C95706) * C181 + (C95812 + C95813) * C139328) * C139286 *
               C139586) *
              C94 -
          (((C92850 * C4340 + C139588 * C5020 + C92849 * C943 +
             C92451 * C1559) *
                C139328 +
            (C92850 * C4226 + C139588 * C4902 + C92849 * C830 +
             C92451 * C1442) *
                C181) *
               C139286 * C139586 +
           ((C92971 + C92970) * C139328 + (C92884 + C92885) * C181) * C139286 *
               C13593) *
              C95) *
         C139339) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C92849 * C107 + C92451 * C555 + C92850 * C1767 +
              C139588 * C2376) *
                 C181 +
             (C92849 * C182 + C92451 * C641 + C92850 * C1873 +
              C139588 * C2492) *
                 C139328) *
                C139286 * C13593 +
            ((C109946 + C109947) * C181 + (C110061 + C110060) * C139328) *
                C139286 * C139586) *
               C821 -
           (((C93872 + C93873) * C139328 + (C93759 + C93758) * C181) * C139286 *
                C139586 +
            ((C92967 + C92966) * C139328 + (C92876 + C92877) * C181) * C139286 *
                C13593) *
               C139305) *
              C1761 +
          ((((C94784 + C94785) * C181 + (C94898 + C94899) * C139328) * C139286 *
                C13593 +
            ((C97767 + C97766) * C181 + (C97904 + C97905) * C139328) * C139286 *
                C139586) *
               C139305 -
           (((C92850 * C6528 + C139588 * C7000 + C92849 * C4337 +
              C92451 * C5017) *
                 C139328 +
             (C92850 * C6442 + C139588 * C6922 + C92849 * C4223 +
              C92451 * C4899) *
                 C181) *
                C139286 * C139586 +
            ((C92850 * C1874 + C139588 * C2493 + C92849 * C1873 +
              C92451 * C2492) *
                 C139328 +
             (C92850 * C1768 + C139588 * C2379 + C92849 * C1767 +
              C92451 * C2376) *
                 C181) *
                C139286 * C13593) *
               C821) *
              C1762 +
          ((((C92849 * C1768 + C92451 * C2379 + C92850 * C10815 +
              C139588 * C11155) *
                 C181 +
             (C92849 * C1874 + C92451 * C2493 + C92850 * C10877 +
              C139588 * C11211) *
                 C139328) *
                C139286 * C13593 +
            ((C92849 * C6442 + C92451 * C6922 + C92850 * C26831 +
              C139588 * C27251) *
                 C181 +
             (C92849 * C6528 + C92451 * C7000 + C92850 * C26905 +
              C139588 * C27321) *
                 C139328) *
                C139286 * C139586) *
               C821 -
           (((C92850 * C26904 + C139588 * C27320 + C92849 * C6527 +
              C92451 * C7001) *
                 C139328 +
             (C92850 * C26830 + C139588 * C27250 + C92849 * C6441 +
              C92451 * C6921) *
                 C181) *
                C139286 * C139586 +
            ((C94901 + C94900) * C139328 + (C94788 + C94789) * C181) * C139286 *
                C13593) *
               C139305) *
              C1763)) /
            (p * q * std::sqrt(p + q));
    d2eezz[107] +=
        (-std::pow(Pi, 2.5) *
         (((((C92849 * C107 + C92451 * C555 + C92850 * C1767 +
              C139588 * C2376) *
                 C244 +
             (C92849 * C245 + C92451 * C719 + C92850 * C1965 +
              C139588 * C2591) *
                 C139339) *
                C139286 * C13593 +
            ((C109946 + C109947) * C244 + (C110170 + C110171) * C139339) *
                C139286 * C139586) *
               C823 -
           (((C110172 + C110173) * C139339 + (C109952 + C109953) * C244) *
                C139286 * C139586 +
            ((C110171 + C110170) * C139339 + (C109947 + C109946) * C244) *
                C139286 * C13593) *
               C824 +
           (((C109953 + C109952) * C244 + (C110173 + C110172) * C139339) *
                C139286 * C13593 +
            ((C92849 * C5916 + C92451 * C6256 + C92850 * C24129 +
              C139588 * C24765) *
                 C244 +
             (C92849 * C6038 + C92451 * C6365 + C92850 * C24355 +
              C139588 * C24979) *
                 C139339) *
                C139286 * C139586) *
               C825) *
              C821 +
          ((((C93758 + C93759) * C244 + (C93983 + C93982) * C139339) * C139286 *
                C13593 +
            ((C93763 + C93762) * C244 + (C93984 + C93985) * C139339) * C139286 *
                C139586) *
               C824 -
           (((C93982 + C93983) * C139339 + (C93759 + C93758) * C244) * C139286 *
                C139586 +
            ((C93051 + C93050) * C139339 + (C92876 + C92877) * C244) * C139286 *
                C13593) *
               C823 -
           (((C92850 * C24354 + C139588 * C24980 + C92849 * C6037 +
              C92451 * C6364) *
                 C139339 +
             (C92850 * C24128 + C139588 * C24764 + C92849 * C5915 +
              C92451 * C6255) *
                 C244) *
                C139286 * C139586 +
            ((C93985 + C93984) * C139339 + (C93762 + C93763) * C244) * C139286 *
                C13593) *
               C825) *
              C139305)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1767 + C139588 * C2376) *
                C244 +
            (C92849 * C245 + C92451 * C719 + C92850 * C1965 + C139588 * C2591) *
                C139339) *
               C139286 * C13593 +
           ((C92849 * C831 + C92451 * C1440 + C92850 * C4223 +
             C139588 * C4899) *
                C244 +
            (C92849 * C1029 + C92451 * C1661 + C92850 * C4443 +
             C139588 * C5133) *
                C139339) *
               C139286 * C139586) *
              C139328 * C92 -
          (((C93982 + C93983) * C139339 + (C93759 + C93758) * C244) * C139286 *
               C139586 +
           ((C93051 + C93050) * C139339 + (C92876 + C92877) * C244) * C139286 *
               C13593) *
              C139328 * C93 +
          (((C92880 + C92881) * C244 + (C93053 + C93052) * C139339) * C139286 *
               C13593 +
           ((C95707 + C95706) * C244 + (C95916 + C95917) * C139339) * C139286 *
               C139586) *
              C139328 * C94 -
          (((C92850 * C4446 + C139588 * C5136 + C92849 * C1033 +
             C92451 * C1665) *
                C139339 +
            (C92850 * C4226 + C139588 * C4902 + C92849 * C830 +
             C92451 * C1442) *
                C244) *
               C139286 * C139586 +
           ((C93055 + C93054) * C139339 + (C92884 + C92885) * C244) * C139286 *
               C13593) *
              C139328 * C95)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1767 + C139588 * C2376) *
                C1960 +
            (C92849 * C245 + C92451 * C719 + C92850 * C1965 + C139588 * C2591) *
                C1761 -
            (C92850 * C1768 + C139588 * C2379 + C92849 * C1767 +
             C92451 * C2376) *
                C1961 -
            (C92850 * C1966 + C139588 * C2592 + C92849 * C1965 +
             C92451 * C2591) *
                C1762 +
            (C92849 * C1768 + C92451 * C2379 + C92850 * C10815 +
             C139588 * C11155) *
                C1962 +
            (C92849 * C1966 + C92451 * C2592 + C92850 * C10937 +
             C139588 * C11262) *
                C1763) *
               C139286 * C13593 +
           ((C109946 + C109947) * C1960 + (C110170 + C110171) * C1761 -
            (C92850 * C6442 + C139588 * C6922 + C92849 * C4223 +
             C92451 * C4899) *
                C1961 -
            (C92850 * C6608 + C139588 * C7077 + C92849 * C4443 +
             C92451 * C5133) *
                C1762 +
            (C92849 * C6442 + C92451 * C6922 + C92850 * C26831 +
             C139588 * C27251) *
                C1962 +
            (C92849 * C6608 + C92451 * C7077 + C92850 * C26975 +
             C139588 * C27388) *
                C1763) *
               C139286 * C139586) *
              C139328 * C821 +
          (((C94784 + C94785) * C1961 -
            ((C93051 + C93050) * C1761 + (C92876 + C92877) * C1960) +
            (C95009 + C95008) * C1762 - (C94788 + C94789) * C1962 -
            (C95011 + C95010) * C1763) *
               C139286 * C13593 +
           ((C97767 + C97766) * C1961 -
            ((C93982 + C93983) * C1761 + (C93759 + C93758) * C1960) +
            (C98040 + C98041) * C1762 -
            (C92850 * C26830 + C139588 * C27250 + C92849 * C6441 +
             C92451 * C6921) *
                C1962 -
            (C92850 * C26974 + C139588 * C27389 + C92849 * C6607 +
             C92451 * C7078) *
                C1763) *
               C139286 * C139586) *
              C139328 * C139305)) /
            (p * q * std::sqrt(p + q));
    d2eexx[108] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139286 * C113) * C2702 +
             (C63381 * C116 + C139286 * C125) * C139589 -
             (C63381 * C108 + C139286 * C114) * C2703 -
             (C63381 * C117 + C139286 * C126) * C139590 +
             (C63381 * C109 + C139286 * C115) * C2704 +
             (C63381 * C118 + C139286 * C127) * C2699) *
                C13593 +
            (C65304 + C65305 - C65306 - C65307 + C65324 + C65325) * C139586) *
               C92451 +
           ((C79431 + C79432 - C79433 - C79434 + C79441 + C79442) * C13593 +
            (C78529 + C78530 - C78531 - C78532 + C78539 + C78540) * C139586) *
               C139588) *
              C139561 +
          (((C79433 - (C79432 + C79431) + C79434 - C79441 - C79442) * C13593 +
            (C78531 - (C78530 + C78529) + C78532 - C78539 - C78540) * C139586) *
               C92451 +
           ((C77537 * C2703 - (C77538 * C139589 + C77539 * C2702) +
             C77540 * C139590 - (C63381 * C1770 + C139286 * C1782) * C2704 -
             (C63381 * C1785 + C139286 * C1794) * C2699) *
                C13593 +
            (C77541 * C2703 - (C68854 * C139589 + C68853 * C2702) +
             C77542 * C139590 - (C63381 * C6440 + C139286 * C6446) * C2704 -
             (C63381 * C6443 + C139286 * C6449) * C2699) *
                C139586) *
               C139588) *
              C139403) *
         C139328) /
        (p * q * std::sqrt(p + q));
    d2eexy[108] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C63381 * C107 + C139286 * C113) * C181 +
              (C63381 * C182 + C139286 * C188) * C139328) *
                 C13593 +
             (C63884 * C181 + C63997 * C139328) * C139586) *
                C92451 +
            ((C77651 + C77677) * C13593 + (C77654 + C77655) * C139586) *
                C139588) *
               C139589 -
           (((C77656 + C77657) * C139586 + (C77678 + C77660) * C13593) *
                C139588 +
            ((C64000 * C139328 + C63886 * C181) * C139586 +
             ((C63381 * C183 + C139286 * C189) * C139328 +
              (C63381 * C108 + C139286 * C114) * C181) *
                 C13593) *
                C92451) *
               C139590 +
           ((((C63381 * C109 + C139286 * C115) * C181 +
              (C63381 * C184 + C139286 * C190) * C139328) *
                 C13593 +
             (C65320 * C181 + C65406 * C139328) * C139586) *
                C92451 +
            ((C79541 + C79547) * C13593 + (C79544 + C79545) * C139586) *
                C139588) *
               C2699) *
              C139561 +
          ((((C77660 + C77678) * C13593 + (C77657 + C77656) * C139586) *
                C92451 +
            ((C77661 + C77679) * C13593 + (C77664 + C77680) * C139586) *
                C139588) *
               C139590 -
           (((C77667 + C77668) * C139586 + (C77681 + C77671) * C13593) *
                C139588 +
            ((C77655 + C77654) * C139586 + (C77677 + C77651) * C13593) *
                C92451) *
               C139589 -
           ((((C63381 * C6526 + C139286 * C6529) * C139328 +
              (C63381 * C6440 + C139286 * C6446) * C181) *
                 C139586 +
             ((C63381 * C1876 + C139286 * C1884) * C139328 +
              (C63381 * C1770 + C139286 * C1782) * C181) *
                 C13593) *
                C139588 +
            ((C79545 + C79544) * C139586 + (C79547 + C79541) * C13593) *
                C92451) *
               C2699) *
              C139403)) /
        (p * q * std::sqrt(p + q));
    d2eexz[108] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    (((((C63381 * C107 + C139286 * C113) * C3607 +
                        (C63381 * C245 + C139286 * C251) * C139561 -
                        C77533 * C3608 - C77790 * C139403) *
                           C13593 +
                       (C66946 + C66947 - C66948 - C66970) * C139586) *
                          C92451 +
                      ((C77533 * C3607 + C77790 * C139561 - C77539 * C3608 -
                        C77791 * C139403) *
                           C13593 +
                       (C80649 + C80650 - C80651 - C80652) * C139586) *
                          C139588) *
                         C139328 * C139589 +
                     (((C77535 * C3608 -
                        ((C63381 * C246 + C139286 * C252) * C139561 +
                         (C63381 * C108 + C139286 * C114) * C3607) +
                        C77792 * C139403) *
                           C13593 +
                       (C66956 - (C66957 + C66958) + C66972) * C139586) *
                          C92451 +
                      ((C77537 * C3608 - (C77792 * C139561 + C77535 * C3607) +
                        C77793 * C139403) *
                           C13593 +
                       (C80653 - (C80654 + C80655) + C80656) * C139586) *
                          C139588) *
                         C139328 * C139590 +
                     ((((C63381 * C109 + C139286 * C115) * C3607 +
                        (C63381 * C247 + C139286 * C253) * C139561 -
                        C79439 * C3608 - C79648 * C139403) *
                           C13593 +
                       (C65320 * C3607 + C65488 * C139561 - C78537 * C3608 -
                        C78743 * C139403) *
                           C139586) *
                          C92451 +
                      ((C79439 * C3607 + C79648 * C139561 -
                        (C63381 * C1770 + C139286 * C1782) * C3608 -
                        (C63381 * C1968 + C139286 * C1976) * C139403) *
                           C13593 +
                       (C78537 * C3607 + C78743 * C139561 -
                        (C63381 * C6440 + C139286 * C6446) * C3608 -
                        (C63381 * C6606 + C139286 * C6609) * C139403) *
                           C139586) *
                          C139588) *
                         C139328 * C2699)) /
                   (p * q * std::sqrt(p + q));
    d2eeyx[108] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C831 + C139586 * C1118) *
                C2702 +
            (C13795 * C116 + C13593 * C314 + C13796 * C841 + C139586 * C1125) *
                C139589 -
            (C13822 + C13823) * C2703 - (C13824 + C13825) * C139590 +
            (C13826 + C13827) * C2704 + (C13828 + C13829) * C2699) *
               C92451 +
           ((C110582 + C110583) * C2702 + (C110584 + C110585) * C139589 -
            (C15709 + C15708) * C2703 - (C15711 + C15710) * C139590 +
            (C17604 + C17603) * C2704 + (C17606 + C17605) * C2699) *
               C139588) *
              C139286 * C139561 +
          (((C15708 + C15709) * C2703 -
            ((C110585 + C110584) * C139589 + (C110583 + C110582) * C2702) +
            (C15710 + C15711) * C139590 - (C17603 + C17604) * C2704 -
            (C17605 + C17606) * C2699) *
               C92451 +
           ((C15713 + C15712) * C2703 -
            ((C110586 + C110587) * C139589 + (C110588 + C110589) * C2702) +
            (C15715 + C15714) * C139590 -
            (C13796 * C6440 + C139586 * C6686 + C13795 * C1770 +
             C13593 * C2059) *
                C2704 -
            (C13796 * C6443 + C139586 * C6689 + C13795 * C1785 +
             C13593 * C2067) *
                C2699) *
               C139588) *
              C139286 * C139403) *
         C139328) /
        (p * q * std::sqrt(p + q));
    d2eeyy[108] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13795 * C107 + C13593 * C308 + C13796 * C831 + C139586 * C1118) *
                 C181 +
             (C13795 * C182 + C13593 * C394 + C13796 * C939 + C139586 * C1231) *
                 C139328) *
                C92451 +
            ((C110582 + C110583) * C181 + (C110696 + C110697) * C139328) *
                C139588) *
               C139286 * C139589 -
           (((C15823 + C15822) * C139328 + (C15709 + C15708) * C181) * C139588 +
            ((C13913 + C13912) * C139328 + (C13822 + C13823) * C181) * C92451) *
               C139286 * C139590 +
           (((C13826 + C13827) * C181 + (C13915 + C13914) * C139328) * C92451 +
            ((C17604 + C17603) * C181 + (C17709 + C17710) * C139328) *
                C139588) *
               C139286 * C2699) *
              C139561 +
          ((((C15708 + C15709) * C181 + (C15822 + C15823) * C139328) * C92451 +
            ((C15713 + C15712) * C181 + (C15824 + C15825) * C139328) *
                C139588) *
               C139286 * C139590 -
           (((C110698 + C110699) * C139328 + (C110588 + C110589) * C181) *
                C139588 +
            ((C110697 + C110696) * C139328 + (C110583 + C110582) * C181) *
                C92451) *
               C139286 * C139589 -
           (((C13796 * C6526 + C139586 * C6768 + C13795 * C1876 +
              C13593 * C2173) *
                 C139328 +
             (C13796 * C6440 + C139586 * C6686 + C13795 * C1770 +
              C13593 * C2059) *
                 C181) *
                C139588 +
            ((C17710 + C17709) * C139328 + (C17603 + C17604) * C181) * C92451) *
               C139286 * C2699) *
              C139403)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[108] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C831 + C139586 * C1118) *
                C3607 +
            (C13795 * C245 + C13593 * C474 + C13796 * C1029 + C139586 * C1339) *
                C139561 -
            (C110583 + C110582) * C3608 - (C110806 + C110807) * C139403) *
               C92451 +
           ((C110582 + C110583) * C3607 + (C110807 + C110806) * C139561 -
            (C110588 + C110589) * C3608 - (C110809 + C110808) * C139403) *
               C139588) *
              C139286 * C139328 * C139589 +
          (((C15708 + C15709) * C3608 -
            ((C13997 + C13996) * C139561 + (C13822 + C13823) * C3607) +
            (C15933 + C15932) * C139403) *
               C92451 +
           ((C15713 + C15712) * C3608 -
            ((C15932 + C15933) * C139561 + (C15709 + C15708) * C3607) +
            (C15934 + C15935) * C139403) *
               C139588) *
              C139286 * C139328 * C139590 +
          (((C13826 + C13827) * C3607 + (C13999 + C13998) * C139561 -
            (C17603 + C17604) * C3608 - (C17814 + C17813) * C139403) *
               C92451 +
           ((C17604 + C17603) * C3607 + (C17813 + C17814) * C139561 -
            (C13796 * C6440 + C139586 * C6686 + C13795 * C1770 +
             C13593 * C2059) *
                C3608 -
            (C13796 * C6606 + C139586 * C6845 + C13795 * C1968 +
             C13593 * C2274) *
                C139403) *
               C139588) *
              C139286 * C139328 * C2699)) /
        (p * q * std::sqrt(p + q));
    d2eezx[108] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1767 + C139588 * C2376) *
                C2702 +
            (C92849 * C116 + C92451 * C561 + C92850 * C1777 + C139588 * C2383) *
                C139589 -
            (C92876 + C92877) * C2703 - (C92878 + C92879) * C139590 +
            (C92880 + C92881) * C2704 + (C92882 + C92883) * C2699) *
               C139286 * C13593 +
           ((C109946 + C109947) * C2702 + (C109948 + C109949) * C139589 -
            (C93759 + C93758) * C2703 - (C93761 + C93760) * C139590 +
            (C95707 + C95706) * C2704 + (C95709 + C95708) * C2699) *
               C139286 * C139586) *
              C139561 +
          (((C94784 + C94785) * C2703 -
            ((C92850 * C1783 + C139588 * C2387 + C92849 * C1777 +
              C92451 * C2383) *
                 C139589 +
             (C92850 * C1768 + C139588 * C2379 + C92849 * C1767 +
              C92451 * C2376) *
                 C2702) +
            (C94786 + C94787) * C139590 - (C96636 + C96637) * C2704 -
            (C96638 + C96639) * C2699) *
               C139286 * C13593 +
           ((C97767 + C97766) * C2703 -
            ((C92850 * C6445 + C139588 * C6925 + C92849 * C4230 +
              C92451 * C4903) *
                 C139589 +
             (C92850 * C6442 + C139588 * C6922 + C92849 * C4223 +
              C92451 * C4899) *
                 C2702) +
            (C97769 + C97768) * C139590 -
            (C92850 * C6440 + C139588 * C6920 + C92849 * C4225 +
             C92451 * C4901) *
                C2704 -
            (C92850 * C6443 + C139588 * C6923 + C92849 * C4232 +
             C92451 * C4905) *
                C2699) *
               C139286 * C139586) *
              C139403) *
         C139328) /
        (p * q * std::sqrt(p + q));
    d2eezy[108] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C92849 * C107 + C92451 * C555 + C92850 * C1767 +
              C139588 * C2376) *
                 C181 +
             (C92849 * C182 + C92451 * C641 + C92850 * C1873 +
              C139588 * C2492) *
                 C139328) *
                C139286 * C13593 +
            ((C109946 + C109947) * C181 + (C110061 + C110060) * C139328) *
                C139286 * C139586) *
               C139589 -
           (((C93872 + C93873) * C139328 + (C93759 + C93758) * C181) * C139286 *
                C139586 +
            ((C92967 + C92966) * C139328 + (C92876 + C92877) * C181) * C139286 *
                C13593) *
               C139590 +
           (((C92880 + C92881) * C181 + (C92969 + C92968) * C139328) * C139286 *
                C13593 +
            ((C95707 + C95706) * C181 + (C95812 + C95813) * C139328) * C139286 *
                C139586) *
               C2699) *
              C139561 +
          ((((C94784 + C94785) * C181 + (C94898 + C94899) * C139328) * C139286 *
                C13593 +
            ((C97767 + C97766) * C181 + (C97904 + C97905) * C139328) * C139286 *
                C139586) *
               C139590 -
           (((C92850 * C6528 + C139588 * C7000 + C92849 * C4337 +
              C92451 * C5017) *
                 C139328 +
             (C92850 * C6442 + C139588 * C6922 + C92849 * C4223 +
              C92451 * C4899) *
                 C181) *
                C139286 * C139586 +
            ((C92850 * C1874 + C139588 * C2493 + C92849 * C1873 +
              C92451 * C2492) *
                 C139328 +
             (C92850 * C1768 + C139588 * C2379 + C92849 * C1767 +
              C92451 * C2376) *
                 C181) *
                C139286 * C13593) *
               C139589 -
           (((C92850 * C6526 + C139588 * C7002 + C92849 * C4339 +
              C92451 * C5019) *
                 C139328 +
             (C92850 * C6440 + C139588 * C6920 + C92849 * C4225 +
              C92451 * C4901) *
                 C181) *
                C139286 * C139586 +
            ((C96743 + C96742) * C139328 + (C96636 + C96637) * C181) * C139286 *
                C13593) *
               C2699) *
              C139403)) /
        (p * q * std::sqrt(p + q));
    d2eezz[108] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1767 + C139588 * C2376) *
                C3607 +
            (C92849 * C245 + C92451 * C719 + C92850 * C1965 + C139588 * C2591) *
                C139561 -
            (C92850 * C1768 + C139588 * C2379 + C92849 * C1767 +
             C92451 * C2376) *
                C3608 -
            (C92850 * C1966 + C139588 * C2592 + C92849 * C1965 +
             C92451 * C2591) *
                C139403) *
               C139286 * C13593 +
           ((C109946 + C109947) * C3607 + (C110170 + C110171) * C139561 -
            (C92850 * C6442 + C139588 * C6922 + C92849 * C4223 +
             C92451 * C4899) *
                C3608 -
            (C92850 * C6608 + C139588 * C7077 + C92849 * C4443 +
             C92451 * C5133) *
                C139403) *
               C139286 * C139586) *
              C139328 * C139589 +
          (((C94784 + C94785) * C3608 -
            ((C93051 + C93050) * C139561 + (C92876 + C92877) * C3607) +
            (C95009 + C95008) * C139403) *
               C139286 * C13593 +
           ((C97767 + C97766) * C3608 -
            ((C93982 + C93983) * C139561 + (C93759 + C93758) * C3607) +
            (C98040 + C98041) * C139403) *
               C139286 * C139586) *
              C139328 * C139590 +
          (((C92880 + C92881) * C3607 + (C93053 + C93052) * C139561 -
            (C96636 + C96637) * C3608 - (C96847 + C96846) * C139403) *
               C139286 * C13593 +
           ((C95707 + C95706) * C3607 + (C95916 + C95917) * C139561 -
            (C92850 * C6440 + C139588 * C6920 + C92849 * C4225 +
             C92451 * C4901) *
                C3608 -
            (C92850 * C6606 + C139588 * C7079 + C92849 * C4445 +
             C92451 * C5135) *
                C139403) *
               C139286 * C139586) *
              C139328 * C2699)) /
        (p * q * std::sqrt(p + q));
    d2eexx[109] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139286 * C113) * C103 +
            (C63381 * C116 + C139286 * C125) * C92 -
            (C63381 * C108 + C139286 * C114) * C104 -
            (C63381 * C117 + C139286 * C126) * C93 +
            (C63381 * C109 + C139286 * C115) * C105 +
            (C63381 * C118 + C139286 * C127) * C94 -
            (C63381 * C110 + C139286 * C119) * C106 -
            (C63381 * C120 + C139286 * C128) * C95) *
               C13593 +
           (C63884 * C103 + C63885 * C92 - C63886 * C104 - C63887 * C93 +
            C65320 * C105 + C65321 * C94 -
            (C63381 * C830 + C139286 * C838) * C106 -
            (C63381 * C843 + C139286 * C855) * C95) *
               C139586) *
              C92451 +
          ((C77533 * C103 + C77534 * C92 - C77535 * C104 - C77536 * C93 +
            C79439 * C105 + C79440 * C94 -
            (C63381 * C1766 + C139286 * C1774) * C106 -
            (C63381 * C1779 + C139286 * C1791) * C95) *
               C13593 +
           (C66724 * C103 + C66723 * C92 - C66722 * C104 - C66725 * C93 +
            C78537 * C105 + C78538 * C94 -
            (C63381 * C4226 + C139286 * C4233) * C106 -
            (C63381 * C4234 + C139286 * C4238) * C95) *
               C139586) *
              C139588) *
         C139339 * C139328) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139286 * C113) * C826 +
             (C63381 * C116 + C139286 * C125) * C821 -
             (C63381 * C108 + C139286 * C114) * C827 -
             (C63381 * C117 + C139286 * C126) * C139305) *
                C13593 +
            (C63896 + C63897 - C63898 - C63899) * C139586) *
               C92451 +
           ((C77543 + C77544 - C77545 - C77546) * C13593 + C80371 * C139586) *
               C139588) *
              C139339 * C823 +
          (((C63898 - (C63897 + C63896) + C63899) * C13593 +
            (C63902 - (C63901 + C63900) + C63903) * C139586) *
               C92451 +
           (C80372 * C13593 + (C66734 - (C66735 + C66736) + C66737) * C139586) *
               C139588) *
              C139339 * C824 +
          ((C63910 * C13593 + (C63906 + C63905 - C63904 - C63907) * C139586) *
               C92451 +
           ((C66736 + C66735 - C66734 - C66737) * C13593 +
            (C71175 * C826 + C71176 * C821 -
             (C63381 * C24128 + C139286 * C24132) * C827 -
             (C63381 * C24130 + C139286 * C24134) * C139305) *
                C139586) *
               C139588) *
              C139339 * C825)) /
            (p * q * std::sqrt(p + q));
    d2eexy[109] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139286 * C113) * C181 +
             (C63381 * C182 + C139286 * C188) * C139328) *
                C13593 +
            (C63884 * C181 + C63997 * C139328) * C139586) *
               C92451 +
           ((C77651 + C77677) * C13593 + (C77654 + C77655) * C139586) *
               C139588) *
              C92 -
          (((C77656 + C77657) * C139586 + (C77678 + C77660) * C13593) *
               C139588 +
           ((C64000 * C139328 + C63886 * C181) * C139586 +
            ((C63381 * C183 + C139286 * C189) * C139328 +
             (C63381 * C108 + C139286 * C114) * C181) *
                C13593) *
               C92451) *
              C93 +
          ((((C63381 * C109 + C139286 * C115) * C181 +
             (C63381 * C184 + C139286 * C190) * C139328) *
                C13593 +
            (C65320 * C181 + C65406 * C139328) * C139586) *
               C92451 +
           ((C79541 + C79547) * C13593 + (C79544 + C79545) * C139586) *
               C139588) *
              C94 -
          ((((C63381 * C4340 + C139286 * C4344) * C139328 +
             (C63381 * C4226 + C139286 * C4233) * C181) *
                C139586 +
            ((C63381 * C1872 + C139286 * C1880) * C139328 +
             (C63381 * C1766 + C139286 * C1774) * C181) *
                C13593) *
               C139588 +
           (((C63381 * C943 + C139286 * C951) * C139328 +
             (C63381 * C830 + C139286 * C838) * C181) *
                C139586 +
            ((C63381 * C185 + C139286 * C191) * C139328 +
             (C63381 * C110 + C139286 * C119) * C181) *
                C13593) *
               C92451) *
              C95) *
         C139339) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139286 * C113) * C934 +
             (C63381 * C182 + C139286 * C188) * C823 - C63884 * C935 -
             C63997 * C824 + C63888 * C936 + C63998 * C825) *
                C13593 +
            (C63884 * C934 + C63997 * C823 - C63888 * C935 - C63998 * C824 +
             C63894 * C936 + C63999 * C825) *
                C139586) *
               C92451 +
           ((C88072 + C88073 - C88074 - C88075 + C88076 + C88077) * C13593 +
            (C88078 + C88079 - C88080 - C88081 + C88082 + C88083) * C139586) *
               C139588) *
              C821 +
          (((C63886 * C935 -
             ((C63381 * C183 + C139286 * C189) * C823 +
              (C63381 * C108 + C139286 * C114) * C934) +
             C64000 * C824 - C63890 * C936 - C64001 * C825) *
                C13593 +
            (C63890 * C935 - (C64000 * C823 + C63886 * C934) + C64001 * C824 -
             C63892 * C936 - C64002 * C825) *
                C139586) *
               C92451 +
           ((C66722 * C935 - (C77673 * C823 + C77535 * C934) + C66846 * C824 -
             C66726 * C936 - C66847 * C825) *
                C13593 +
            (C66726 * C935 - (C66846 * C823 + C66722 * C934) + C66847 * C824 -
             (C63381 * C24128 + C139286 * C24132) * C936 -
             (C63381 * C24246 + C139286 * C24248) * C825) *
                C139586) *
               C139588) *
              C139305) *
         C139339) /
            (p * q * std::sqrt(p + q));
    d2eexz[109] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139286 * C113) * C244 +
             (C63381 * C245 + C139286 * C251) * C139339) *
                C13593 +
            (C64077 + C64101) * C139586) *
               C92451 +
           ((C77533 * C244 + C77790 * C139339) * C13593 +
            (C76769 + C76770) * C139586) *
               C139588) *
              C139328 * C92 -
          (((C76774 + C76773) * C139586 +
            (C77792 * C139339 + C77535 * C244) * C13593) *
               C139588 +
           ((C64104 + C64086) * C139586 +
            ((C63381 * C246 + C139286 * C252) * C139339 +
             (C63381 * C108 + C139286 * C114) * C244) *
                C13593) *
               C92451) *
              C139328 * C93 +
          ((((C63381 * C109 + C139286 * C115) * C244 +
             (C63381 * C247 + C139286 * C253) * C139339) *
                C13593 +
            (C65482 + C65490) * C139586) *
               C92451 +
           ((C79439 * C244 + C79648 * C139339) * C13593 +
            (C78740 + C78744) * C139586) *
               C139588) *
              C139328 * C94 -
          ((((C63381 * C4446 + C139286 * C4450) * C139339 +
             (C63381 * C4226 + C139286 * C4233) * C244) *
                C139586 +
            ((C63381 * C1969 + C139286 * C1977) * C139339 +
             (C63381 * C1766 + C139286 * C1774) * C244) *
                C13593) *
               C139588 +
           (((C63381 * C1033 + C139286 * C1041) * C139339 +
             (C63381 * C830 + C139286 * C838) * C244) *
                C139586 +
            ((C63381 * C248 + C139286 * C254) * C139339 +
             (C63381 * C110 + C139286 * C119) * C244) *
                C13593) *
               C92451) *
              C139328 * C95)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C63381 * C107 + C139286 * C113) * C244 +
              (C63381 * C245 + C139286 * C251) * C139339) *
                 C13593 +
             (C64077 + C64101) * C139586) *
                C92451 +
            ((C77533 * C244 + C77790 * C139339) * C13593 +
             (C76769 + C76770) * C139586) *
                C139588) *
               C823 -
           (((C76771 + C76772) * C139586 + (C76770 + C76769) * C13593) *
                C139588 +
            ((C64102 + C64080) * C139586 + (C64101 + C64077) * C13593) *
                C92451) *
               C824 +
           ((C64107 * C13593 + (C64085 + C64103) * C139586) * C92451 +
            ((C76772 + C76771) * C13593 + (C82571 + C82572) * C139586) *
                C139588) *
               C825) *
              C821 +
          ((((C64086 + C64104) * C13593 + (C64089 + C64105) * C139586) *
                C92451 +
            ((C76773 + C76774) * C13593 + (C76775 + C76776) * C139586) *
                C139588) *
               C824 -
           (((C76774 + C76773) * C139586 +
             (C77792 * C139339 + C77535 * C244) * C13593) *
                C139588 +
            ((C64104 + C64086) * C139586 +
             ((C63381 * C246 + C139286 * C252) * C139339 +
              (C63381 * C108 + C139286 * C114) * C244) *
                 C13593) *
                C92451) *
               C823 -
           ((((C63381 * C24354 + C139286 * C24356) * C139339 +
              (C63381 * C24128 + C139286 * C24132) * C244) *
                 C139586 +
             (C76776 + C76775) * C13593) *
                C139588 +
            ((C64106 + C64092) * C139586 + C64108 * C13593) * C92451) *
               C825) *
              C139305)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[109] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C13795 * C107 + C13593 * C308 + C13796 * C831 + C139586 * C1118) *
               C103 +
           (C13795 * C116 + C13593 * C314 + C13796 * C841 + C139586 * C1125) *
               C92 -
           (C13822 + C13823) * C104 - (C13824 + C13825) * C93 +
           (C13826 + C13827) * C105 + (C13828 + C13829) * C94 -
           (C13830 + C13831) * C106 - (C13832 + C13833) * C95) *
              C92451 +
          ((C13795 * C1767 + C13593 * C2054 + C13796 * C4223 +
            C139586 * C4549) *
               C103 +
           (C13795 * C1777 + C13593 * C2061 + C13796 * C4230 +
            C139586 * C4553) *
               C92 -
           (C15709 + C15708) * C104 - (C15711 + C15710) * C93 +
           (C17604 + C17603) * C105 + (C17606 + C17605) * C94 -
           (C13796 * C4226 + C139586 * C4552 + C13795 * C1766 +
            C13593 * C2056) *
               C106 -
           (C13796 * C4234 + C139586 * C4556 + C13795 * C1779 +
            C13593 * C2064) *
               C95) *
              C139588) *
         C139286 * C139339 * C139328) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C831 + C139586 * C1118) *
                C826 +
            (C13795 * C116 + C13593 * C314 + C13796 * C841 + C139586 * C1125) *
                C821 -
            (C13822 + C13823) * C827 - (C13824 + C13825) * C139305) *
               C92451 +
           ((C13795 * C1767 + C13593 * C2054 + C13796 * C4223 +
             C139586 * C4549) *
                C826 +
            (C13795 * C1777 + C13593 * C2061 + C13796 * C4230 +
             C139586 * C4553) *
                C821 -
            (C15709 + C15708) * C827 - (C15711 + C15710) * C139305) *
               C139588) *
              C139286 * C139339 * C823 +
          (((C14710 + C14711) * C827 -
            ((C13796 * C847 + C139586 * C1129 + C13795 * C841 +
              C13593 * C1125) *
                 C821 +
             (C13796 * C832 + C139586 * C1121 + C13795 * C831 +
              C13593 * C1118) *
                 C826) +
            (C14712 + C14713) * C139305) *
               C92451 +
           ((C18688 + C18687) * C827 -
            ((C13796 * C8757 + C139586 * C9003 + C13795 * C4230 +
              C13593 * C4553) *
                 C821 +
             (C13796 * C8754 + C139586 * C9000 + C13795 * C4223 +
              C13593 * C4549) *
                 C826) +
            (C18690 + C18689) * C139305) *
               C139588) *
              C139286 * C139339 * C824 +
          (((C13795 * C832 + C13593 * C1121 + C13796 * C5916 +
             C139586 * C6094) *
                C826 +
            (C13795 * C847 + C13593 * C1129 + C13796 * C5919 +
             C139586 * C6097) *
                C821 -
            (C14714 + C14715) * C827 - (C14716 + C14717) * C139305) *
               C92451 +
           ((C13795 * C8754 + C13593 * C9000 + C13796 * C24129 +
             C139586 * C24463) *
                C826 +
            (C13795 * C8757 + C13593 * C9003 + C13796 * C24131 +
             C139586 * C24465) *
                C821 -
            (C13796 * C24128 + C139586 * C24462 + C13795 * C8753 +
             C13593 * C8999) *
                C827 -
            (C13796 * C24130 + C139586 * C24464 + C13795 * C8756 +
             C13593 * C9002) *
                C139305) *
               C139588) *
              C139286 * C139339 * C825)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[109] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C831 + C139586 * C1118) *
                C181 +
            (C13795 * C182 + C13593 * C394 + C13796 * C939 + C139586 * C1231) *
                C139328) *
               C92451 +
           ((C13795 * C1767 + C13593 * C2054 + C13796 * C4223 +
             C139586 * C4549) *
                C181 +
            (C13795 * C1873 + C13593 * C2170 + C13796 * C4337 +
             C139586 * C4667) *
                C139328) *
               C139588) *
              C139286 * C92 -
          (((C15823 + C15822) * C139328 + (C15709 + C15708) * C181) * C139588 +
           ((C13913 + C13912) * C139328 + (C13822 + C13823) * C181) * C92451) *
              C139286 * C93 +
          (((C13826 + C13827) * C181 + (C13915 + C13914) * C139328) * C92451 +
           ((C17604 + C17603) * C181 + (C17709 + C17710) * C139328) * C139588) *
              C139286 * C94 -
          (((C13796 * C4340 + C139586 * C4670 + C13795 * C1872 +
             C13593 * C2169) *
                C139328 +
            (C13796 * C4226 + C139586 * C4552 + C13795 * C1766 +
             C13593 * C2056) *
                C181) *
               C139588 +
           ((C13917 + C13916) * C139328 + (C13830 + C13831) * C181) * C92451) *
              C139286 * C95) *
         C139339) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C831 + C139586 * C1118) *
                C934 +
            (C13795 * C182 + C13593 * C394 + C13796 * C939 + C139586 * C1231) *
                C823 -
            (C13796 * C832 + C139586 * C1121 + C13795 * C831 + C13593 * C1118) *
                C935 -
            (C13796 * C940 + C139586 * C1232 + C13795 * C939 + C13593 * C1231) *
                C824 +
            (C13795 * C832 + C13593 * C1121 + C13796 * C5916 +
             C139586 * C6094) *
                C936 +
            (C13795 * C940 + C13593 * C1232 + C13796 * C5982 +
             C139586 * C6148) *
                C825) *
               C92451 +
           ((C13795 * C1767 + C13593 * C2054 + C13796 * C4223 +
             C139586 * C4549) *
                C934 +
            (C13795 * C1873 + C13593 * C2170 + C13796 * C4337 +
             C139586 * C4667) *
                C823 -
            (C13796 * C8754 + C139586 * C9000 + C13795 * C4223 +
             C13593 * C4549) *
                C935 -
            (C13796 * C8840 + C139586 * C9078 + C13795 * C4337 +
             C13593 * C4667) *
                C824 +
            (C13795 * C8754 + C13593 * C9000 + C13796 * C24129 +
             C139586 * C24463) *
                C936 +
            (C13795 * C8840 + C13593 * C9078 + C13796 * C24247 +
             C139586 * C24564) *
                C825) *
               C139588) *
              C139286 * C821 +
          (((C14710 + C14711) * C935 -
            ((C13913 + C13912) * C823 + (C13822 + C13823) * C934) +
            (C14825 + C14824) * C824 - (C14714 + C14715) * C936 -
            (C14827 + C14826) * C825) *
               C92451 +
           ((C18688 + C18687) * C935 -
            ((C15823 + C15822) * C823 + (C15709 + C15708) * C934) +
            (C18825 + C18826) * C824 -
            (C13796 * C24128 + C139586 * C24462 + C13795 * C8753 +
             C13593 * C8999) *
                C936 -
            (C13796 * C24246 + C139586 * C24565 + C13795 * C8839 +
             C13593 * C9079) *
                C825) *
               C139588) *
              C139286 * C139305) *
         C139339) /
            (p * q * std::sqrt(p + q));
    d2eeyz[109] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C831 + C139586 * C1118) *
                C244 +
            (C13795 * C245 + C13593 * C474 + C13796 * C1029 + C139586 * C1339) *
                C139339) *
               C92451 +
           ((C13795 * C1767 + C13593 * C2054 + C13796 * C4223 +
             C139586 * C4549) *
                C244 +
            (C13795 * C1965 + C13593 * C2269 + C13796 * C4443 +
             C139586 * C4783) *
                C139339) *
               C139588) *
              C139286 * C139328 * C92 -
          (((C15932 + C15933) * C139339 + (C15709 + C15708) * C244) * C139588 +
           ((C13997 + C13996) * C139339 + (C13822 + C13823) * C244) * C92451) *
              C139286 * C139328 * C93 +
          (((C13826 + C13827) * C244 + (C13999 + C13998) * C139339) * C92451 +
           ((C17604 + C17603) * C244 + (C17813 + C17814) * C139339) * C139588) *
              C139286 * C139328 * C94 -
          (((C13796 * C4446 + C139586 * C4786 + C13795 * C1969 +
             C13593 * C2275) *
                C139339 +
            (C13796 * C4226 + C139586 * C4552 + C13795 * C1766 +
             C13593 * C2056) *
                C244) *
               C139588 +
           ((C14001 + C14000) * C139339 + (C13830 + C13831) * C244) * C92451) *
              C139286 * C139328 * C95)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13795 * C107 + C13593 * C308 + C13796 * C831 + C139586 * C1118) *
                 C244 +
             (C13795 * C245 + C13593 * C474 + C13796 * C1029 +
              C139586 * C1339) *
                 C139339) *
                C92451 +
            ((C13795 * C1767 + C13593 * C2054 + C13796 * C4223 +
              C139586 * C4549) *
                 C244 +
             (C13795 * C1965 + C13593 * C2269 + C13796 * C4443 +
              C139586 * C4783) *
                 C139339) *
                C139588) *
               C139286 * C823 -
           (((C13796 * C8920 + C139586 * C9155 + C13795 * C4443 +
              C13593 * C4783) *
                 C139339 +
             (C13796 * C8754 + C139586 * C9000 + C13795 * C4223 +
              C13593 * C4549) *
                 C244) *
                C139588 +
            ((C13796 * C1030 + C139586 * C1340 + C13795 * C1029 +
              C13593 * C1339) *
                 C139339 +
             (C13796 * C832 + C139586 * C1121 + C13795 * C831 +
              C13593 * C1118) *
                 C244) *
                C92451) *
               C139286 * C824 +
           (((C13795 * C832 + C13593 * C1121 + C13796 * C5916 +
              C139586 * C6094) *
                 C244 +
             (C13795 * C1030 + C13593 * C1340 + C13796 * C6038 +
              C139586 * C6203) *
                 C139339) *
                C92451 +
            ((C13795 * C8754 + C13593 * C9000 + C13796 * C24129 +
              C139586 * C24463) *
                 C244 +
             (C13795 * C8920 + C13593 * C9155 + C13796 * C24355 +
              C139586 * C24664) *
                 C139339) *
                C139588) *
               C139286 * C825) *
              C821 +
          ((((C14710 + C14711) * C244 + (C14935 + C14934) * C139339) * C92451 +
            ((C18688 + C18687) * C244 + (C18961 + C18962) * C139339) *
                C139588) *
               C139286 * C824 -
           (((C15932 + C15933) * C139339 + (C15709 + C15708) * C244) * C139588 +
            ((C13997 + C13996) * C139339 + (C13822 + C13823) * C244) * C92451) *
               C139286 * C823 -
           (((C13796 * C24354 + C139586 * C24665 + C13795 * C8919 +
              C13593 * C9156) *
                 C139339 +
             (C13796 * C24128 + C139586 * C24462 + C13795 * C8753 +
              C13593 * C8999) *
                 C244) *
                C139588 +
            ((C14937 + C14936) * C139339 + (C14714 + C14715) * C244) * C92451) *
               C139286 * C825) *
              C139305)) /
            (p * q * std::sqrt(p + q));
    d2eezx[109] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C92849 * C107 + C92451 * C555 + C92850 * C1767 + C139588 * C2376) *
               C103 +
           (C92849 * C116 + C92451 * C561 + C92850 * C1777 + C139588 * C2383) *
               C92 -
           (C92876 + C92877) * C104 - (C92878 + C92879) * C93 +
           (C92880 + C92881) * C105 + (C92882 + C92883) * C94 -
           (C92884 + C92885) * C106 - (C92886 + C92887) * C95) *
              C139286 * C13593 +
          ((C92849 * C831 + C92451 * C1440 + C92850 * C4223 + C139588 * C4899) *
               C103 +
           (C92849 * C841 + C92451 * C1447 + C92850 * C4230 + C139588 * C4903) *
               C92 -
           (C93759 + C93758) * C104 - (C93761 + C93760) * C93 +
           (C95707 + C95706) * C105 + (C95709 + C95708) * C94 -
           (C92850 * C4226 + C139588 * C4902 + C92849 * C830 + C92451 * C1442) *
               C106 -
           (C92850 * C4234 + C139588 * C4906 + C92849 * C843 + C92451 * C1450) *
               C95) *
              C139286 * C139586) *
         C139339 * C139328) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1767 + C139588 * C2376) *
                C826 +
            (C92849 * C116 + C92451 * C561 + C92850 * C1777 + C139588 * C2383) *
                C821 -
            (C92876 + C92877) * C827 - (C92878 + C92879) * C139305) *
               C139286 * C13593 +
           ((C109946 + C109947) * C826 + (C109948 + C109949) * C821 -
            (C93759 + C93758) * C827 - (C93761 + C93760) * C139305) *
               C139286 * C139586) *
              C139339 * C823 +
          (((C93758 + C93759) * C827 -
            ((C109949 + C109948) * C821 + (C109947 + C109946) * C826) +
            (C93760 + C93761) * C139305) *
               C139286 * C13593 +
           ((C93763 + C93762) * C827 -
            ((C109950 + C109951) * C821 + (C109952 + C109953) * C826) +
            (C93765 + C93764) * C139305) *
               C139286 * C139586) *
              C139339 * C824 +
          (((C109953 + C109952) * C826 + (C109951 + C109950) * C821 -
            (C93762 + C93763) * C827 - (C93764 + C93765) * C139305) *
               C139286 * C13593 +
           ((C92849 * C5916 + C92451 * C6256 + C92850 * C24129 +
             C139588 * C24765) *
                C826 +
            (C92849 * C5919 + C92451 * C6259 + C92850 * C24131 +
             C139588 * C24767) *
                C821 -
            (C92850 * C24128 + C139588 * C24764 + C92849 * C5915 +
             C92451 * C6255) *
                C827 -
            (C92850 * C24130 + C139588 * C24766 + C92849 * C5918 +
             C92451 * C6258) *
                C139305) *
               C139286 * C139586) *
              C139339 * C825)) /
            (p * q * std::sqrt(p + q));
    d2eezy[109] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1767 + C139588 * C2376) *
                C181 +
            (C92849 * C182 + C92451 * C641 + C92850 * C1873 + C139588 * C2492) *
                C139328) *
               C139286 * C13593 +
           ((C92849 * C831 + C92451 * C1440 + C92850 * C4223 +
             C139588 * C4899) *
                C181 +
            (C92849 * C939 + C92451 * C1553 + C92850 * C4337 +
             C139588 * C5017) *
                C139328) *
               C139286 * C139586) *
              C92 -
          (((C93872 + C93873) * C139328 + (C93759 + C93758) * C181) * C139286 *
               C139586 +
           ((C92967 + C92966) * C139328 + (C92876 + C92877) * C181) * C139286 *
               C13593) *
              C93 +
          (((C92880 + C92881) * C181 + (C92969 + C92968) * C139328) * C139286 *
               C13593 +
           ((C95707 + C95706) * C181 + (C95812 + C95813) * C139328) * C139286 *
               C139586) *
              C94 -
          (((C92850 * C4340 + C139588 * C5020 + C92849 * C943 +
             C92451 * C1559) *
                C139328 +
            (C92850 * C4226 + C139588 * C4902 + C92849 * C830 +
             C92451 * C1442) *
                C181) *
               C139286 * C139586 +
           ((C92971 + C92970) * C139328 + (C92884 + C92885) * C181) * C139286 *
               C13593) *
              C95) *
         C139339) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1767 + C139588 * C2376) *
                C934 +
            (C92849 * C182 + C92451 * C641 + C92850 * C1873 + C139588 * C2492) *
                C823 -
            (C109947 + C109946) * C935 - (C110060 + C110061) * C824 +
            (C109953 + C109952) * C936 + (C110062 + C110063) * C825) *
               C139286 * C13593 +
           ((C109946 + C109947) * C934 + (C110061 + C110060) * C823 -
            (C109952 + C109953) * C935 - (C110063 + C110062) * C824 +
            (C92849 * C5916 + C92451 * C6256 + C92850 * C24129 +
             C139588 * C24765) *
                C936 +
            (C92849 * C5982 + C92451 * C6310 + C92850 * C24247 +
             C139588 * C24876) *
                C825) *
               C139286 * C139586) *
              C821 +
          (((C93758 + C93759) * C935 -
            ((C92967 + C92966) * C823 + (C92876 + C92877) * C934) +
            (C93873 + C93872) * C824 - (C93762 + C93763) * C936 -
            (C93875 + C93874) * C825) *
               C139286 * C13593 +
           ((C93763 + C93762) * C935 -
            ((C93872 + C93873) * C823 + (C93759 + C93758) * C934) +
            (C93874 + C93875) * C824 -
            (C92850 * C24128 + C139588 * C24764 + C92849 * C5915 +
             C92451 * C6255) *
                C936 -
            (C92850 * C24246 + C139588 * C24877 + C92849 * C5981 +
             C92451 * C6311) *
                C825) *
               C139286 * C139586) *
              C139305) *
         C139339) /
            (p * q * std::sqrt(p + q));
    d2eezz[109] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1767 + C139588 * C2376) *
                C244 +
            (C92849 * C245 + C92451 * C719 + C92850 * C1965 + C139588 * C2591) *
                C139339) *
               C139286 * C13593 +
           ((C92849 * C831 + C92451 * C1440 + C92850 * C4223 +
             C139588 * C4899) *
                C244 +
            (C92849 * C1029 + C92451 * C1661 + C92850 * C4443 +
             C139588 * C5133) *
                C139339) *
               C139286 * C139586) *
              C139328 * C92 -
          (((C93982 + C93983) * C139339 + (C93759 + C93758) * C244) * C139286 *
               C139586 +
           ((C93051 + C93050) * C139339 + (C92876 + C92877) * C244) * C139286 *
               C13593) *
              C139328 * C93 +
          (((C92880 + C92881) * C244 + (C93053 + C93052) * C139339) * C139286 *
               C13593 +
           ((C95707 + C95706) * C244 + (C95916 + C95917) * C139339) * C139286 *
               C139586) *
              C139328 * C94 -
          (((C92850 * C4446 + C139588 * C5136 + C92849 * C1033 +
             C92451 * C1665) *
                C139339 +
            (C92850 * C4226 + C139588 * C4902 + C92849 * C830 +
             C92451 * C1442) *
                C244) *
               C139286 * C139586 +
           ((C93055 + C93054) * C139339 + (C92884 + C92885) * C244) * C139286 *
               C13593) *
              C139328 * C95)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C92849 * C107 + C92451 * C555 + C92850 * C1767 +
              C139588 * C2376) *
                 C244 +
             (C92849 * C245 + C92451 * C719 + C92850 * C1965 +
              C139588 * C2591) *
                 C139339) *
                C139286 * C13593 +
            ((C109946 + C109947) * C244 + (C110170 + C110171) * C139339) *
                C139286 * C139586) *
               C823 -
           (((C110172 + C110173) * C139339 + (C109952 + C109953) * C244) *
                C139286 * C139586 +
            ((C110171 + C110170) * C139339 + (C109947 + C109946) * C244) *
                C139286 * C13593) *
               C824 +
           (((C109953 + C109952) * C244 + (C110173 + C110172) * C139339) *
                C139286 * C13593 +
            ((C92849 * C5916 + C92451 * C6256 + C92850 * C24129 +
              C139588 * C24765) *
                 C244 +
             (C92849 * C6038 + C92451 * C6365 + C92850 * C24355 +
              C139588 * C24979) *
                 C139339) *
                C139286 * C139586) *
               C825) *
              C821 +
          ((((C93758 + C93759) * C244 + (C93983 + C93982) * C139339) * C139286 *
                C13593 +
            ((C93763 + C93762) * C244 + (C93984 + C93985) * C139339) * C139286 *
                C139586) *
               C824 -
           (((C93982 + C93983) * C139339 + (C93759 + C93758) * C244) * C139286 *
                C139586 +
            ((C93051 + C93050) * C139339 + (C92876 + C92877) * C244) * C139286 *
                C13593) *
               C823 -
           (((C92850 * C24354 + C139588 * C24980 + C92849 * C6037 +
              C92451 * C6364) *
                 C139339 +
             (C92850 * C24128 + C139588 * C24764 + C92849 * C5915 +
              C92451 * C6255) *
                 C244) *
                C139286 * C139586 +
            ((C93985 + C93984) * C139339 + (C93762 + C93763) * C244) * C139286 *
                C13593) *
               C825) *
              C139305)) /
            (p * q * std::sqrt(p + q));
    d2eexx[110] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139286 * C113) * C137108 +
             (C63381 * C116 + C139286 * C125) * C139552 -
             (C63381 * C108 + C139286 * C114) * C137101 -
             (C63381 * C117 + C139286 * C126) * C139305) *
                C13593 +
            (C69583 + C69584 - C69585 - C69586) * C139586) *
               C92451 +
           ((C84979 + C84980 - C84981 - C84982) * C13593 + C84991 * C139586) *
               C139588) *
              C139339 * C139591 +
          (((C69585 - (C69584 + C69583) + C69586) * C13593 +
            (C69589 - (C69588 + C69587) + C69590) * C139586) *
               C92451 +
           (C84992 * C13593 + (C70300 - (C70301 + C70302) + C70303) * C139586) *
               C139588) *
              C139339 * C139592 +
          ((C69597 * C13593 + (C69593 + C69592 - C69591 - C69594) * C139586) *
               C92451 +
           ((C70302 + C70301 - C70300 - C70303) * C13593 +
            (C71175 * C137108 + C71176 * C139552 -
             (C63381 * C24128 + C139286 * C24132) * C137101 -
             (C63381 * C24130 + C139286 * C24134) * C139305) *
                C139586) *
               C139588) *
              C139339 * C7158)) /
        (p * q * std::sqrt(p + q));
    d2eexy[110] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139286 * C113) * C7235 +
             (C63381 * C182 + C139286 * C188) * C139591 - C63884 * C7236 -
             C63997 * C139592 + C63888 * C7237 + C63998 * C7158) *
                C13593 +
            (C63884 * C7235 + C63997 * C139591 - C63888 * C7236 -
             C63998 * C139592 + C63894 * C7237 + C63999 * C7158) *
                C139586) *
               C92451 +
           ((C86238 + C86239 - C86240 - C86241 + C86242 + C86243) * C13593 +
            (C86244 + C86245 - C86246 - C86247 + C86248 + C86249) * C139586) *
               C139588) *
              C139552 +
          (((C63886 * C7236 -
             ((C63381 * C183 + C139286 * C189) * C139591 +
              (C63381 * C108 + C139286 * C114) * C7235) +
             C64000 * C139592 - C63890 * C7237 - C64001 * C7158) *
                C13593 +
            (C63890 * C7236 - (C64000 * C139591 + C63886 * C7235) +
             C64001 * C139592 - C63892 * C7237 - C64002 * C7158) *
                C139586) *
               C92451 +
           ((C66722 * C7236 - (C77673 * C139591 + C77535 * C7235) +
             C66846 * C139592 - C66726 * C7237 - C66847 * C7158) *
                C13593 +
            (C66726 * C7236 - (C66846 * C139591 + C66722 * C7235) +
             C66847 * C139592 - (C63381 * C24128 + C139286 * C24132) * C7237 -
             (C63381 * C24246 + C139286 * C24248) * C7158) *
                C139586) *
               C139588) *
              C139305) *
         C139339) /
        (p * q * std::sqrt(p + q));
    d2eexz[110] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C63381 * C107 + C139286 * C113) * C244 +
              (C63381 * C245 + C139286 * C251) * C139339) *
                 C13593 +
             (C64077 + C64101) * C139586) *
                C92451 +
            ((C77533 * C244 + C77790 * C139339) * C13593 +
             (C76769 + C76770) * C139586) *
                C139588) *
               C139591 -
           (((C76771 + C76772) * C139586 + (C76770 + C76769) * C13593) *
                C139588 +
            ((C64102 + C64080) * C139586 + (C64101 + C64077) * C13593) *
                C92451) *
               C139592 +
           ((C64107 * C13593 + (C64085 + C64103) * C139586) * C92451 +
            ((C76772 + C76771) * C13593 + (C82571 + C82572) * C139586) *
                C139588) *
               C7158) *
              C139552 +
          ((((C64086 + C64104) * C13593 + (C64089 + C64105) * C139586) *
                C92451 +
            ((C76773 + C76774) * C13593 + (C76775 + C76776) * C139586) *
                C139588) *
               C139592 -
           (((C76774 + C76773) * C139586 +
             (C77792 * C139339 + C77535 * C244) * C13593) *
                C139588 +
            ((C64104 + C64086) * C139586 +
             ((C63381 * C246 + C139286 * C252) * C139339 +
              (C63381 * C108 + C139286 * C114) * C244) *
                 C13593) *
                C92451) *
               C139591 -
           ((((C63381 * C24354 + C139286 * C24356) * C139339 +
              (C63381 * C24128 + C139286 * C24132) * C244) *
                 C139586 +
             (C76776 + C76775) * C13593) *
                C139588 +
            ((C64106 + C64092) * C139586 + C64108 * C13593) * C92451) *
               C7158) *
              C139305)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[110] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C831 + C139586 * C1118) *
                C137108 +
            (C13795 * C116 + C13593 * C314 + C13796 * C841 + C139586 * C1125) *
                C139552 -
            (C13822 + C13823) * C137101 - (C13824 + C13825) * C139305) *
               C92451 +
           ((C110582 + C110583) * C137108 + (C110584 + C110585) * C139552 -
            (C15709 + C15708) * C137101 - (C15711 + C15710) * C139305) *
               C139588) *
              C139286 * C139339 * C139591 +
          (((C14710 + C14711) * C137101 -
            ((C13796 * C847 + C139586 * C1129 + C13795 * C841 +
              C13593 * C1125) *
                 C139552 +
             (C13796 * C832 + C139586 * C1121 + C13795 * C831 +
              C13593 * C1118) *
                 C137108) +
            (C14712 + C14713) * C139305) *
               C92451 +
           ((C18688 + C18687) * C137101 -
            ((C113396 + C113397) * C139552 + (C113398 + C113399) * C137108) +
            (C18690 + C18689) * C139305) *
               C139588) *
              C139286 * C139339 * C139592 +
          (((C13795 * C832 + C13593 * C1121 + C13796 * C5916 +
             C139586 * C6094) *
                C137108 +
            (C13795 * C847 + C13593 * C1129 + C13796 * C5919 +
             C139586 * C6097) *
                C139552 -
            (C14714 + C14715) * C137101 - (C14716 + C14717) * C139305) *
               C92451 +
           ((C13795 * C8754 + C13593 * C9000 + C13796 * C24129 +
             C139586 * C24463) *
                C137108 +
            (C13795 * C8757 + C13593 * C9003 + C13796 * C24131 +
             C139586 * C24465) *
                C139552 -
            (C13796 * C24128 + C139586 * C24462 + C13795 * C8753 +
             C13593 * C8999) *
                C137101 -
            (C13796 * C24130 + C139586 * C24464 + C13795 * C8756 +
             C13593 * C9002) *
                C139305) *
               C139588) *
              C139286 * C139339 * C7158)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[110] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C831 + C139586 * C1118) *
                C7235 +
            (C13795 * C182 + C13593 * C394 + C13796 * C939 + C139586 * C1231) *
                C139591 -
            (C13796 * C832 + C139586 * C1121 + C13795 * C831 + C13593 * C1118) *
                C7236 -
            (C13796 * C940 + C139586 * C1232 + C13795 * C939 + C13593 * C1231) *
                C139592 +
            (C13795 * C832 + C13593 * C1121 + C13796 * C5916 +
             C139586 * C6094) *
                C7237 +
            (C13795 * C940 + C13593 * C1232 + C13796 * C5982 +
             C139586 * C6148) *
                C7158) *
               C92451 +
           ((C110582 + C110583) * C7235 + (C110696 + C110697) * C139591 -
            (C113398 + C113399) * C7236 - (C113534 + C113535) * C139592 +
            (C13795 * C8754 + C13593 * C9000 + C13796 * C24129 +
             C139586 * C24463) *
                C7237 +
            (C13795 * C8840 + C13593 * C9078 + C13796 * C24247 +
             C139586 * C24564) *
                C7158) *
               C139588) *
              C139286 * C139552 +
          (((C14710 + C14711) * C7236 -
            ((C13913 + C13912) * C139591 + (C13822 + C13823) * C7235) +
            (C14825 + C14824) * C139592 - (C14714 + C14715) * C7237 -
            (C14827 + C14826) * C7158) *
               C92451 +
           ((C18688 + C18687) * C7236 -
            ((C15823 + C15822) * C139591 + (C15709 + C15708) * C7235) +
            (C18825 + C18826) * C139592 -
            (C13796 * C24128 + C139586 * C24462 + C13795 * C8753 +
             C13593 * C8999) *
                C7237 -
            (C13796 * C24246 + C139586 * C24565 + C13795 * C8839 +
             C13593 * C9079) *
                C7158) *
               C139588) *
              C139286 * C139305) *
         C139339) /
        (p * q * std::sqrt(p + q));
    d2eeyz[110] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13795 * C107 + C13593 * C308 + C13796 * C831 + C139586 * C1118) *
                 C244 +
             (C13795 * C245 + C13593 * C474 + C13796 * C1029 +
              C139586 * C1339) *
                 C139339) *
                C92451 +
            ((C110582 + C110583) * C244 + (C110807 + C110806) * C139339) *
                C139588) *
               C139286 * C139591 -
           (((C113671 + C113670) * C139339 + (C113398 + C113399) * C244) *
                C139588 +
            ((C13796 * C1030 + C139586 * C1340 + C13795 * C1029 +
              C13593 * C1339) *
                 C139339 +
             (C13796 * C832 + C139586 * C1121 + C13795 * C831 +
              C13593 * C1118) *
                 C244) *
                C92451) *
               C139286 * C139592 +
           (((C13795 * C832 + C13593 * C1121 + C13796 * C5916 +
              C139586 * C6094) *
                 C244 +
             (C13795 * C1030 + C13593 * C1340 + C13796 * C6038 +
              C139586 * C6203) *
                 C139339) *
                C92451 +
            ((C13795 * C8754 + C13593 * C9000 + C13796 * C24129 +
              C139586 * C24463) *
                 C244 +
             (C13795 * C8920 + C13593 * C9155 + C13796 * C24355 +
              C139586 * C24664) *
                 C139339) *
                C139588) *
               C139286 * C7158) *
              C139552 +
          ((((C14710 + C14711) * C244 + (C14935 + C14934) * C139339) * C92451 +
            ((C18688 + C18687) * C244 + (C18961 + C18962) * C139339) *
                C139588) *
               C139286 * C139592 -
           (((C15932 + C15933) * C139339 + (C15709 + C15708) * C244) * C139588 +
            ((C13997 + C13996) * C139339 + (C13822 + C13823) * C244) * C92451) *
               C139286 * C139591 -
           (((C13796 * C24354 + C139586 * C24665 + C13795 * C8919 +
              C13593 * C9156) *
                 C139339 +
             (C13796 * C24128 + C139586 * C24462 + C13795 * C8753 +
              C13593 * C8999) *
                 C244) *
                C139588 +
            ((C14937 + C14936) * C139339 + (C14714 + C14715) * C244) * C92451) *
               C139286 * C7158) *
              C139305)) /
        (p * q * std::sqrt(p + q));
    d2eezx[110] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1767 + C139588 * C2376) *
                C137108 +
            (C92849 * C116 + C92451 * C561 + C92850 * C1777 + C139588 * C2383) *
                C139552 -
            (C92876 + C92877) * C137101 - (C92878 + C92879) * C139305) *
               C139286 * C13593 +
           ((C109946 + C109947) * C137108 + (C109948 + C109949) * C139552 -
            (C93759 + C93758) * C137101 - (C93761 + C93760) * C139305) *
               C139286 * C139586) *
              C139339 * C139591 +
          (((C93758 + C93759) * C137101 -
            ((C109949 + C109948) * C139552 + (C109947 + C109946) * C137108) +
            (C93760 + C93761) * C139305) *
               C139286 * C13593 +
           ((C93763 + C93762) * C137101 -
            ((C109950 + C109951) * C139552 + (C109952 + C109953) * C137108) +
            (C93765 + C93764) * C139305) *
               C139286 * C139586) *
              C139339 * C139592 +
          (((C109953 + C109952) * C137108 + (C109951 + C109950) * C139552 -
            (C93762 + C93763) * C137101 - (C93764 + C93765) * C139305) *
               C139286 * C13593 +
           ((C115438 + C115439) * C137108 + (C115440 + C115441) * C139552 -
            (C92850 * C24128 + C139588 * C24764 + C92849 * C5915 +
             C92451 * C6255) *
                C137101 -
            (C92850 * C24130 + C139588 * C24766 + C92849 * C5918 +
             C92451 * C6258) *
                C139305) *
               C139286 * C139586) *
              C139339 * C7158)) /
        (p * q * std::sqrt(p + q));
    d2eezy[110] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1767 + C139588 * C2376) *
                C7235 +
            (C92849 * C182 + C92451 * C641 + C92850 * C1873 + C139588 * C2492) *
                C139591 -
            (C109947 + C109946) * C7236 - (C110060 + C110061) * C139592 +
            (C109953 + C109952) * C7237 + (C110062 + C110063) * C7158) *
               C139286 * C13593 +
           ((C109946 + C109947) * C7235 + (C110061 + C110060) * C139591 -
            (C109952 + C109953) * C7236 - (C110063 + C110062) * C139592 +
            (C115438 + C115439) * C7237 + (C115513 + C115512) * C7158) *
               C139286 * C139586) *
              C139552 +
          (((C93758 + C93759) * C7236 -
            ((C92967 + C92966) * C139591 + (C92876 + C92877) * C7235) +
            (C93873 + C93872) * C139592 - (C93762 + C93763) * C7237 -
            (C93875 + C93874) * C7158) *
               C139286 * C13593 +
           ((C93763 + C93762) * C7236 -
            ((C93872 + C93873) * C139591 + (C93759 + C93758) * C7235) +
            (C93874 + C93875) * C139592 -
            (C92850 * C24128 + C139588 * C24764 + C92849 * C5915 +
             C92451 * C6255) *
                C7237 -
            (C92850 * C24246 + C139588 * C24877 + C92849 * C5981 +
             C92451 * C6311) *
                C7158) *
               C139286 * C139586) *
              C139305) *
         C139339) /
        (p * q * std::sqrt(p + q));
    d2eezz[110] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C92849 * C107 + C92451 * C555 + C92850 * C1767 +
              C139588 * C2376) *
                 C244 +
             (C92849 * C245 + C92451 * C719 + C92850 * C1965 +
              C139588 * C2591) *
                 C139339) *
                C139286 * C13593 +
            ((C109946 + C109947) * C244 + (C110170 + C110171) * C139339) *
                C139286 * C139586) *
               C139591 -
           (((C110172 + C110173) * C139339 + (C109952 + C109953) * C244) *
                C139286 * C139586 +
            ((C110171 + C110170) * C139339 + (C109947 + C109946) * C244) *
                C139286 * C13593) *
               C139592 +
           (((C109953 + C109952) * C244 + (C110173 + C110172) * C139339) *
                C139286 * C13593 +
            ((C115438 + C115439) * C244 + (C115584 + C115585) * C139339) *
                C139286 * C139586) *
               C7158) *
              C139552 +
          ((((C93758 + C93759) * C244 + (C93983 + C93982) * C139339) * C139286 *
                C13593 +
            ((C93763 + C93762) * C244 + (C93984 + C93985) * C139339) * C139286 *
                C139586) *
               C139592 -
           (((C93982 + C93983) * C139339 + (C93759 + C93758) * C244) * C139286 *
                C139586 +
            ((C93051 + C93050) * C139339 + (C92876 + C92877) * C244) * C139286 *
                C13593) *
               C139591 -
           (((C92850 * C24354 + C139588 * C24980 + C92849 * C6037 +
              C92451 * C6364) *
                 C139339 +
             (C92850 * C24128 + C139588 * C24764 + C92849 * C5915 +
              C92451 * C6255) *
                 C244) *
                C139286 * C139586 +
            ((C93985 + C93984) * C139339 + (C93762 + C93763) * C244) * C139286 *
                C13593) *
               C7158) *
              C139305)) /
        (p * q * std::sqrt(p + q));
    d2eexx[111] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C63381 * C107 + C139286 * C113) * C5913 +
              (C63381 * C116 + C139286 * C125) * C139300) *
                 C13593 +
             (C68304 + C68305) * C139586) *
                C92451 +
            ((C83091 + C83092) * C13593 + C83093 * C139586) * C139588) *
               C139561 -
           ((C83094 * C139586 + (C83095 + C83096) * C13593) * C139588 +
            (C83097 * C139586 + (C83092 + C83091) * C13593) * C92451) *
               C139403) *
              C139591 +
          (((C83093 * C13593 + C86139 * C139586) * C92451 +
            (C83098 * C13593 + (C68859 + C68860) * C139586) * C139588) *
               C139403 -
           ((C71170 * C139586 + C83097 * C13593) * C139588 +
            ((C68307 + C68306) * C139586 + (C68305 + C68304) * C13593) *
                C92451) *
               C139561) *
              C139592 +
          (((C68314 * C13593 + (C68309 + C68308) * C139586) * C92451 +
            (C86139 * C13593 + (C71177 + C71178) * C139586) * C139588) *
               C139561 -
           ((((C63381 * C68837 + C139286 * C68839) * C139300 +
              (C63381 * C68836 + C139286 * C68838) * C5913) *
                 C139586 +
             (C68860 + C68859) * C13593) *
                C139588 +
            ((C71178 + C71177) * C139586 + C71170 * C13593) * C92451) *
               C139403) *
              C7158)) /
        (p * q * std::sqrt(p + q));
    d2eexy[111] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139286 * C113) * C7235 +
             (C63381 * C182 + C139286 * C188) * C139591 - C63884 * C7236 -
             C63997 * C139592 + C63888 * C7237 + C63998 * C7158) *
                C13593 +
            (C63884 * C7235 + C63997 * C139591 - C63888 * C7236 -
             C63998 * C139592 + C63894 * C7237 + C63999 * C7158) *
                C139586) *
               C92451 +
           ((C86238 + C86239 - C86240 - C86241 + C86242 + C86243) * C13593 +
            (C86244 + C86245 - C86246 - C86247 + C86248 + C86249) * C139586) *
               C139588) *
              C139300 * C139561 +
          (((C86240 - (C86239 + C86238) + C86241 - C86242 - C86243) * C13593 +
            (C86246 - (C86245 + C86244) + C86247 - C86248 - C86249) * C139586) *
               C92451 +
           ((C68853 * C7236 - (C77676 * C139591 + C77539 * C7235) +
             C68941 * C139592 - C68855 * C7237 - C68942 * C7158) *
                C13593 +
            (C68855 * C7236 - (C68941 * C139591 + C68853 * C7235) +
             C68942 * C139592 - (C63381 * C68836 + C139286 * C68838) * C7237 -
             (C63381 * C68934 + C139286 * C68935) * C7158) *
                C139586) *
               C139588) *
              C139300 * C139403)) /
        (p * q * std::sqrt(p + q));
    d2eexz[111] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139286 * C113) * C3607 +
             (C63381 * C245 + C139286 * C251) * C139561 - C77533 * C3608 -
             C77790 * C139403) *
                C13593 +
            (C66946 + C66947 - C66948 - C66970) * C139586) *
               C92451 +
           ((C77533 * C3607 + C77790 * C139561 - C77539 * C3608 -
             C77791 * C139403) *
                C13593 +
            (C80649 + C80650 - C80651 - C80652) * C139586) *
               C139588) *
              C139591 +
          (((C66948 - (C66947 + C66946) + C66970) * C13593 +
            (C66953 - (C66952 + C66951) + C66971) * C139586) *
               C92451 +
           ((C80651 - (C80650 + C80649) + C80652) * C13593 +
            (C86348 - (C86349 + C86350) + C86351) * C139586) *
               C139588) *
              C139592 +
          ((C71342 * C13593 + (C71337 + C71336 - C71335 - C71343) * C139586) *
               C92451 +
           ((C86350 + C86349 - C86348 - C86351) * C13593 +
            (C71175 * C3607 + C71341 * C139561 -
             (C63381 * C68836 + C139286 * C68838) * C3608 -
             (C63381 * C69016 + C139286 * C69017) * C139403) *
                C139586) *
               C139588) *
              C7158) *
         C139300) /
        (p * q * std::sqrt(p + q));
    d2eeyx[111] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13795 * C107 + C13593 * C308 + C13796 * C831 + C139586 * C1118) *
                 C5913 +
             (C13795 * C116 + C13593 * C314 + C13796 * C841 + C139586 * C1125) *
                 C139300) *
                C92451 +
            ((C110582 + C110583) * C5913 + (C110584 + C110585) * C139300) *
                C139588) *
               C139286 * C139561 -
           (((C110586 + C110587) * C139300 + (C110588 + C110589) * C5913) *
                C139588 +
            ((C110585 + C110584) * C139300 + (C110583 + C110582) * C5913) *
                C92451) *
               C139286 * C139403) *
              C139591 +
          ((((C113399 + C113398) * C5913 + (C113397 + C113396) * C139300) *
                C92451 +
            ((C115986 + C115987) * C5913 + (C115988 + C115989) * C139300) *
                C139588) *
               C139286 * C139403 -
           (((C113396 + C113397) * C139300 + (C113398 + C113399) * C5913) *
                C139588 +
            ((C13796 * C847 + C139586 * C1129 + C13795 * C841 +
              C13593 * C1125) *
                 C139300 +
             (C13796 * C832 + C139586 * C1121 + C13795 * C831 +
              C13593 * C1118) *
                 C5913) *
                C92451) *
               C139286 * C139561) *
              C139592 +
          ((((C13795 * C832 + C13593 * C1121 + C13796 * C5916 +
              C139586 * C6094) *
                 C5913 +
             (C13795 * C847 + C13593 * C1129 + C13796 * C5919 +
              C139586 * C6097) *
                 C139300) *
                C92451 +
            ((C118968 + C118969) * C5913 + (C118970 + C118971) * C139300) *
                C139588) *
               C139286 * C139561 -
           (((C13796 * C68837 + C139586 * C69111 + C13795 * C21081 +
              C13593 * C21415) *
                 C139300 +
             (C13796 * C68836 + C139586 * C69110 + C13795 * C21079 +
              C13593 * C21413) *
                 C5913) *
                C139588 +
            ((C118971 + C118970) * C139300 + (C118969 + C118968) * C5913) *
                C92451) *
               C139286 * C139403) *
              C7158)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[111] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C831 + C139586 * C1118) *
                C7235 +
            (C13795 * C182 + C13593 * C394 + C13796 * C939 + C139586 * C1231) *
                C139591 -
            (C13796 * C832 + C139586 * C1121 + C13795 * C831 + C13593 * C1118) *
                C7236 -
            (C13796 * C940 + C139586 * C1232 + C13795 * C939 + C13593 * C1231) *
                C139592 +
            (C13795 * C832 + C13593 * C1121 + C13796 * C5916 +
             C139586 * C6094) *
                C7237 +
            (C13795 * C940 + C13593 * C1232 + C13796 * C5982 +
             C139586 * C6148) *
                C7158) *
               C92451 +
           ((C110582 + C110583) * C7235 + (C110696 + C110697) * C139591 -
            (C113398 + C113399) * C7236 - (C113534 + C113535) * C139592 +
            (C118968 + C118969) * C7237 + (C119074 + C119075) * C7158) *
               C139588) *
              C139286 * C139300 * C139561 +
          (((C113399 + C113398) * C7236 -
            ((C110697 + C110696) * C139591 + (C110583 + C110582) * C7235) +
            (C113535 + C113534) * C139592 - (C118969 + C118968) * C7237 -
            (C119075 + C119074) * C7158) *
               C92451 +
           ((C115986 + C115987) * C7236 -
            ((C110698 + C110699) * C139591 + (C110588 + C110589) * C7235) +
            (C116092 + C116093) * C139592 -
            (C13796 * C68836 + C139586 * C69110 + C13795 * C21079 +
             C13593 * C21413) *
                C7237 -
            (C13796 * C68934 + C139586 * C69186 + C13795 * C21197 +
             C13593 * C21514) *
                C7158) *
               C139588) *
              C139286 * C139300 * C139403)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[111] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C831 + C139586 * C1118) *
                C3607 +
            (C13795 * C245 + C13593 * C474 + C13796 * C1029 + C139586 * C1339) *
                C139561 -
            (C110583 + C110582) * C3608 - (C110806 + C110807) * C139403) *
               C92451 +
           ((C110582 + C110583) * C3607 + (C110807 + C110806) * C139561 -
            (C110588 + C110589) * C3608 - (C110809 + C110808) * C139403) *
               C139588) *
              C139286 * C139591 +
          (((C113399 + C113398) * C3608 -
            ((C13796 * C1030 + C139586 * C1340 + C13795 * C1029 +
              C13593 * C1339) *
                 C139561 +
             (C13796 * C832 + C139586 * C1121 + C13795 * C831 +
              C13593 * C1118) *
                 C3607) +
            (C113670 + C113671) * C139403) *
               C92451 +
           ((C115986 + C115987) * C3608 -
            ((C113671 + C113670) * C139561 + (C113398 + C113399) * C3607) +
            (C116197 + C116196) * C139403) *
               C139588) *
              C139286 * C139592 +
          (((C13795 * C832 + C13593 * C1121 + C13796 * C5916 +
             C139586 * C6094) *
                C3607 +
            (C13795 * C1030 + C13593 * C1340 + C13796 * C6038 +
             C139586 * C6203) *
                C139561 -
            (C118969 + C118968) * C3608 - (C119178 + C119179) * C139403) *
               C92451 +
           ((C118968 + C118969) * C3607 + (C119179 + C119178) * C139561 -
            (C13796 * C68836 + C139586 * C69110 + C13795 * C21079 +
             C13593 * C21413) *
                C3608 -
            (C13796 * C69016 + C139586 * C69261 + C13795 * C21305 +
             C13593 * C21614) *
                C139403) *
               C139588) *
              C139286 * C7158) *
         C139300) /
        (p * q * std::sqrt(p + q));
    d2eezx[111] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C92849 * C107 + C92451 * C555 + C92850 * C1767 +
              C139588 * C2376) *
                 C5913 +
             (C92849 * C116 + C92451 * C561 + C92850 * C1777 +
              C139588 * C2383) *
                 C139300) *
                C139286 * C13593 +
            ((C109946 + C109947) * C5913 + (C109948 + C109949) * C139300) *
                C139286 * C139586) *
               C139561 -
           (((C113810 + C113811) * C139300 + (C113812 + C113813) * C5913) *
                C139286 * C139586 +
            ((C92850 * C1783 + C139588 * C2387 + C92849 * C1777 +
              C92451 * C2383) *
                 C139300 +
             (C92850 * C1768 + C139588 * C2379 + C92849 * C1767 +
              C92451 * C2376) *
                 C5913) *
                C139286 * C13593) *
               C139403) *
              C139591 +
          ((((C113813 + C113812) * C5913 + (C113811 + C113810) * C139300) *
                C139286 * C13593 +
            ((C119286 + C119287) * C5913 + (C119288 + C119289) * C139300) *
                C139286 * C139586) *
               C139403 -
           (((C109950 + C109951) * C139300 + (C109952 + C109953) * C5913) *
                C139286 * C139586 +
            ((C109949 + C109948) * C139300 + (C109947 + C109946) * C5913) *
                C139286 * C13593) *
               C139561) *
              C139592 +
          ((((C109953 + C109952) * C5913 + (C109951 + C109950) * C139300) *
                C139286 * C13593 +
            ((C115438 + C115439) * C5913 + (C115440 + C115441) * C139300) *
                C139286 * C139586) *
               C139561 -
           (((C92850 * C68837 + C139588 * C69337 + C92849 * C24131 +
              C92451 * C24767) *
                 C139300 +
             (C92850 * C68836 + C139588 * C69336 + C92849 * C24129 +
              C92451 * C24765) *
                 C5913) *
                C139286 * C139586 +
            ((C119289 + C119288) * C139300 + (C119287 + C119286) * C5913) *
                C139286 * C13593) *
               C139403) *
              C7158)) /
        (p * q * std::sqrt(p + q));
    d2eezy[111] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1767 + C139588 * C2376) *
                C7235 +
            (C92849 * C182 + C92451 * C641 + C92850 * C1873 + C139588 * C2492) *
                C139591 -
            (C109947 + C109946) * C7236 - (C110060 + C110061) * C139592 +
            (C109953 + C109952) * C7237 + (C110062 + C110063) * C7158) *
               C139286 * C13593 +
           ((C109946 + C109947) * C7235 + (C110061 + C110060) * C139591 -
            (C109952 + C109953) * C7236 - (C110063 + C110062) * C139592 +
            (C115438 + C115439) * C7237 + (C115513 + C115512) * C7158) *
               C139286 * C139586) *
              C139300 * C139561 +
          (((C113813 + C113812) * C7236 -
            ((C92850 * C1874 + C139588 * C2493 + C92849 * C1873 +
              C92451 * C2492) *
                 C139591 +
             (C92850 * C1768 + C139588 * C2379 + C92849 * C1767 +
              C92451 * C2376) *
                 C7235) +
            (C113948 + C113949) * C139592 - (C119287 + C119286) * C7237 -
            (C119392 + C119393) * C7158) *
               C139286 * C13593 +
           ((C119286 + C119287) * C7236 -
            ((C113949 + C113948) * C139591 + (C113812 + C113813) * C7235) +
            (C119393 + C119392) * C139592 -
            (C92850 * C68836 + C139588 * C69336 + C92849 * C24129 +
             C92451 * C24765) *
                C7237 -
            (C92850 * C68934 + C139588 * C69420 + C92849 * C24247 +
             C92451 * C24876) *
                C7158) *
               C139286 * C139586) *
              C139300 * C139403)) /
        (p * q * std::sqrt(p + q));
    d2eezz[111] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1767 + C139588 * C2376) *
                C3607 +
            (C92849 * C245 + C92451 * C719 + C92850 * C1965 + C139588 * C2591) *
                C139561 -
            (C92850 * C1768 + C139588 * C2379 + C92849 * C1767 +
             C92451 * C2376) *
                C3608 -
            (C92850 * C1966 + C139588 * C2592 + C92849 * C1965 +
             C92451 * C2591) *
                C139403) *
               C139286 * C13593 +
           ((C109946 + C109947) * C3607 + (C110170 + C110171) * C139561 -
            (C113812 + C113813) * C3608 - (C114084 + C114085) * C139403) *
               C139286 * C139586) *
              C139591 +
          (((C113813 + C113812) * C3608 -
            ((C110171 + C110170) * C139561 + (C109947 + C109946) * C3607) +
            (C114085 + C114084) * C139403) *
               C139286 * C13593 +
           ((C119286 + C119287) * C3608 -
            ((C110172 + C110173) * C139561 + (C109952 + C109953) * C3607) +
            (C119496 + C119497) * C139403) *
               C139286 * C139586) *
              C139592 +
          (((C109953 + C109952) * C3607 + (C110173 + C110172) * C139561 -
            (C119287 + C119286) * C3608 - (C119497 + C119496) * C139403) *
               C139286 * C13593 +
           ((C115438 + C115439) * C3607 + (C115584 + C115585) * C139561 -
            (C92850 * C68836 + C139588 * C69336 + C92849 * C24129 +
             C92451 * C24765) *
                C3608 -
            (C92850 * C69016 + C139588 * C69498 + C92849 * C24355 +
             C92451 * C24979) *
                C139403) *
               C139286 * C139586) *
              C7158) *
         C139300) /
        (p * q * std::sqrt(p + q));
    d2eexx[112] +=
        (-std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139286 * C113) * C5913 +
             (C63381 * C116 + C139286 * C125) * C139300) *
                C13593 +
            (C68304 + C68305) * C139586) *
               C92451 +
           ((C83091 + C83092) * C13593 + C83093 * C139586) * C139588) *
              C139339 * C5909 -
          ((C71170 * C139586 + C83097 * C13593) * C139588 +
           ((C68307 + C68306) * C139586 + (C68305 + C68304) * C13593) *
               C92451) *
              C139339 * C5910 +
          ((C68314 * C13593 + (C68309 + C68308) * C139586) * C92451 +
           (C86139 * C13593 + (C71177 + C71178) * C139586) * C139588) *
              C139339 * C5911 -
          ((((C63381 * C71166 + C139286 * C71168) * C139300 +
             (C63381 * C71165 + C139286 * C71167) * C5913) *
                C139586 +
            (C71178 + C71177) * C13593) *
               C139588 +
           ((C68319 + C68318) * C139586 + C68315 * C13593) * C92451) *
              C139339 * C5912)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139286 * C113) * C5230 +
             (C63381 * C116 + C139286 * C125) * C5225 -
             (C63381 * C108 + C139286 * C114) * C5231 -
             (C63381 * C117 + C139286 * C126) * C5226 +
             (C63381 * C109 + C139286 * C115) * C5232 +
             (C63381 * C118 + C139286 * C127) * C5227) *
                C13593 +
            (C67640 + C67641 - C67642 - C67643 + C67644 + C67645) * C139586) *
               C92451 +
           ((C87086 + C87087 - C87088 - C87089 + C87090 + C87091) * C13593 +
            (C81583 + C81584 - C81585 - C81586 + C81587 + C81588) * C139586) *
               C139588) *
              C139339 * C5228 +
          (((C67642 - (C67641 + C67640) + C67643 - C67644 - C67645) * C13593 +
            (C67648 - (C67647 + C67646) + C67649 - C67650 - C67651) * C139586) *
               C92451 +
           ((C81585 - (C81584 + C81583) + C81586 - C81587 - C81588) * C13593 +
            (C66726 * C5231 - (C66727 * C5225 + C66728 * C5230) +
             C66729 * C5226 - (C63381 * C8752 + C139286 * C8758) * C5232 -
             (C63381 * C8755 + C139286 * C8761) * C5227) *
                C139586) *
               C139588) *
              C139339 * C139377)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((((C63381 * C107 + C139286 * C113) * C5913 +
              (C63381 * C116 + C139286 * C125) * C139300) *
                 C13593 +
             (C68304 + C68305) * C139586) *
                C92451 +
            ((C83091 + C83092) * C13593 + C83093 * C139586) * C139588) *
               C1761 -
           ((C83094 * C139586 + (C83095 + C83096) * C13593) * C139588 +
            (C83097 * C139586 + (C83092 + C83091) * C13593) * C92451) *
               C1762 +
           (((C83096 + C83095) * C13593 + C83098 * C139586) * C92451 +
            ((C88854 + C88855) * C13593 + (C83105 + C83106) * C139586) *
                C139588) *
               C1763) *
              C5228 +
          (((C83093 * C13593 + C86139 * C139586) * C92451 +
            (C83098 * C13593 + (C68859 + C68860) * C139586) * C139588) *
               C1762 -
           ((C71170 * C139586 + C83097 * C13593) * C139588 +
            ((C68307 + C68306) * C139586 + (C68305 + C68304) * C13593) *
                C92451) *
               C1761 -
           ((((C63381 * C73225 + C139286 * C73227) * C139300 +
              (C63381 * C73224 + C139286 * C73226) * C5913) *
                 C139586 +
             (C83106 + C83105) * C13593) *
                C139588 +
            ((C68860 + C68859) * C139586 + C83094 * C13593) * C92451) *
               C1763) *
              C139377)) /
            (p * q * std::sqrt(p + q));
    d2eexy[112] +=
        (-std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139286 * C113) * C5976 +
            (C63381 * C182 + C139286 * C188) * C5909 - C63884 * C5977 -
            C63997 * C5910 + C63888 * C5978 + C63998 * C5911 - C63894 * C5979 -
            C63999 * C5912) *
               C13593 +
           (C63884 * C5976 + C63997 * C5909 - C63888 * C5977 - C63998 * C5910 +
            C63894 * C5978 + C63999 * C5911 - C68316 * C5979 - C68374 * C5912) *
               C139586) *
              C92451 +
          ((C77533 * C5976 + C77672 * C5909 - C66724 * C5977 - C66844 * C5910 +
            C66728 * C5978 + C66845 * C5911 - C71175 * C5979 - C71257 * C5912) *
               C13593 +
           (C66724 * C5976 + C66844 * C5909 - C66728 * C5977 - C66845 * C5910 +
            C71175 * C5978 + C71257 * C5911 -
            (C63381 * C71165 + C139286 * C71167) * C5979 -
            (C63381 * C71252 + C139286 * C71253) * C5912) *
               C139586) *
              C139588) *
         C139300 * C139339) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139286 * C113) * C5307 +
             (C63381 * C182 + C139286 * C188) * C5228 - C63884 * C5308 -
             C63997 * C139377) *
                C13593 +
            (C63884 * C5307 + C63997 * C5228 - C63888 * C5308 -
             C63998 * C139377) *
                C139586) *
               C92451 +
           ((C83205 + C83206 - C83207 - C83208) * C13593 +
            (C83209 + C83210 - C83211 - C83212) * C139586) *
               C139588) *
              C5225 +
          (((C63886 * C5308 -
             ((C63381 * C183 + C139286 * C189) * C5228 +
              (C63381 * C108 + C139286 * C114) * C5307) +
             C64000 * C139377) *
                C13593 +
            (C63890 * C5308 - (C64000 * C5228 + C63886 * C5307) +
             C64001 * C139377) *
                C139586) *
               C92451 +
           ((C85123 - (C85124 + C85125) + C85126) * C13593 +
            (C85127 - (C85128 + C85129) + C85130) * C139586) *
               C139588) *
              C5226 +
          ((((C63381 * C109 + C139286 * C115) * C5307 +
             (C63381 * C184 + C139286 * C190) * C5228 - C65320 * C5308 -
             C65406 * C139377) *
                C13593 +
            (C65320 * C5307 + C65406 * C5228 - C65322 * C5308 -
             C65407 * C139377) *
                C139586) *
               C92451 +
           ((C79439 * C5307 + C79546 * C5228 - C78537 * C5308 -
             C78641 * C139377) *
                C13593 +
            (C78537 * C5307 + C78641 * C5228 -
             (C63381 * C8752 + C139286 * C8758) * C5308 -
             (C63381 * C8838 + C139286 * C8841) * C139377) *
                C139586) *
               C139588) *
              C5227) *
         C139339) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139286 * C113) * C5307 +
             (C63381 * C182 + C139286 * C188) * C5228 - C63884 * C5308 -
             C63997 * C139377) *
                C13593 +
            (C63884 * C5307 + C63997 * C5228 - C63888 * C5308 -
             C63998 * C139377) *
                C139586) *
               C92451 +
           ((C83205 + C83206 - C83207 - C83208) * C13593 +
            (C83209 + C83210 - C83211 - C83212) * C139586) *
               C139588) *
              C139300 * C1761 +
          (((C83207 - (C83206 + C83205) + C83208) * C13593 +
            (C83211 - (C83210 + C83209) + C83212) * C139586) *
               C92451 +
           ((C83213 - (C83214 + C83215) + C83216) * C13593 +
            (C83217 - (C83218 + C83219) + C83220) * C139586) *
               C139588) *
              C139300 * C1762 +
          (((C83215 + C83214 - C83213 - C83216) * C13593 +
            (C83219 + C83218 - C83217 - C83220) * C139586) *
               C92451 +
           ((C88852 * C5307 + C88929 * C5228 - C83103 * C5308 -
             C83223 * C139377) *
                C13593 +
            (C83103 * C5307 + C83223 * C5228 -
             (C63381 * C73224 + C139286 * C73226) * C5308 -
             (C63381 * C73278 + C139286 * C73279) * C139377) *
                C139586) *
               C139588) *
              C139300 * C1763)) /
            (p * q * std::sqrt(p + q));
    d2eexz[112] +=
        (-std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139286 * C113) * C244 +
             (C63381 * C245 + C139286 * C251) * C139339) *
                C13593 +
            (C64077 + C64101) * C139586) *
               C92451 +
           ((C77533 * C244 + C77790 * C139339) * C13593 +
            (C76769 + C76770) * C139586) *
               C139588) *
              C5909 -
          (((C76771 + C76772) * C139586 + (C76770 + C76769) * C13593) *
               C139588 +
           ((C64102 + C64080) * C139586 + (C64101 + C64077) * C13593) *
               C92451) *
              C5910 +
          ((C64107 * C13593 + (C64085 + C64103) * C139586) * C92451 +
           ((C76772 + C76771) * C13593 + (C82571 + C82572) * C139586) *
               C139588) *
              C5911 -
          ((((C63381 * C71331 + C139286 * C71332) * C139339 +
             (C63381 * C71165 + C139286 * C71167) * C244) *
                C139586 +
            (C82572 + C82571) * C13593) *
               C139588 +
           ((C68432 + C68428) * C139586 + C68427 * C13593) * C92451) *
              C5912) *
         C139300) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((((C63381 * C107 + C139286 * C113) * C244 +
              (C63381 * C245 + C139286 * C251) * C139339) *
                 C13593 +
             (C64077 + C64101) * C139586) *
                C92451 +
            ((C77533 * C244 + C77790 * C139339) * C13593 +
             (C76769 + C76770) * C139586) *
                C139588) *
               C5228 -
           (((C76771 + C76772) * C139586 + (C76770 + C76769) * C13593) *
                C139588 +
            ((C64102 + C64080) * C139586 + (C64101 + C64077) * C13593) *
                C92451) *
               C139377) *
              C5225 +
          ((((C64086 + C64104) * C13593 + (C64089 + C64105) * C139586) *
                C92451 +
            ((C76773 + C76774) * C13593 + (C76775 + C76776) * C139586) *
                C139588) *
               C139377 -
           (((C76774 + C76773) * C139586 +
             (C77792 * C139339 + C77535 * C244) * C13593) *
                C139588 +
            ((C64104 + C64086) * C139586 +
             ((C63381 * C246 + C139286 * C252) * C139339 +
              (C63381 * C108 + C139286 * C114) * C244) *
                 C13593) *
                C92451) *
               C5228) *
              C5226 +
          (((((C63381 * C109 + C139286 * C115) * C244 +
              (C63381 * C247 + C139286 * C253) * C139339) *
                 C13593 +
             (C65482 + C65490) * C139586) *
                C92451 +
            ((C79439 * C244 + C79648 * C139339) * C13593 +
             (C78740 + C78744) * C139586) *
                C139588) *
               C5228 -
           ((((C63381 * C8918 + C139286 * C8921) * C139339 +
              (C63381 * C8752 + C139286 * C8758) * C244) *
                 C139586 +
             (C78744 + C78740) * C13593) *
                C139588 +
            ((C65491 + C65485) * C139586 + (C65490 + C65482) * C13593) *
                C92451) *
               C139377) *
              C5227)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139286 * C113) * C1960 +
             (C63381 * C245 + C139286 * C251) * C1761 - C77533 * C1961 -
             C77790 * C1762 + C77539 * C1962 + C77791 * C1763) *
                C13593 +
            (C69019 + C69020 - C69021 - C69022 + C69023 + C69035) * C139586) *
               C92451 +
           ((C77533 * C1960 + C77790 * C1761 - C77539 * C1961 - C77791 * C1762 +
             C88852 * C1962 + C89001 * C1763) *
                C13593 +
            (C83322 + C83323 - C83324 - C83325 + C83326 + C83330) * C139586) *
               C139588) *
              C5228 +
          (((C69021 - (C69020 + C69019) + C69022 - C69023 - C69035) * C13593 +
            (C69028 - (C69027 + C69026) + C69029 - C69030 - C69036) * C139586) *
               C92451 +
           ((C83324 - (C83323 + C83322) + C83325 - C83326 - C83330) * C13593 +
            (C68855 * C1961 - (C66967 * C1761 + C66728 * C1960) +
             C69034 * C1762 - (C63381 * C73224 + C139286 * C73226) * C1962 -
             (C63381 * C73330 + C139286 * C73331) * C1763) *
                C139586) *
               C139588) *
              C139377) *
         C139300) /
            (p * q * std::sqrt(p + q));
    d2eeyx[112] +=
        (-std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C831 + C139586 * C1118) *
                C5913 +
            (C13795 * C116 + C13593 * C314 + C13796 * C841 + C139586 * C1125) *
                C139300) *
               C92451 +
           ((C110582 + C110583) * C5913 + (C110584 + C110585) * C139300) *
               C139588) *
              C139286 * C139339 * C5909 -
          (((C113396 + C113397) * C139300 + (C113398 + C113399) * C5913) *
               C139588 +
           ((C13796 * C847 + C139586 * C1129 + C13795 * C841 + C13593 * C1125) *
                C139300 +
            (C13796 * C832 + C139586 * C1121 + C13795 * C831 + C13593 * C1118) *
                C5913) *
               C92451) *
              C139286 * C139339 * C5910 +
          (((C13795 * C832 + C13593 * C1121 + C13796 * C5916 +
             C139586 * C6094) *
                C5913 +
            (C13795 * C847 + C13593 * C1129 + C13796 * C5919 +
             C139586 * C6097) *
                C139300) *
               C92451 +
           ((C13795 * C8754 + C13593 * C9000 + C13796 * C24129 +
             C139586 * C24463) *
                C5913 +
            (C13795 * C8757 + C13593 * C9003 + C13796 * C24131 +
             C139586 * C24465) *
                C139300) *
               C139588) *
              C139286 * C139339 * C5911 -
          (((C13796 * C71166 + C139586 * C71418 + C13795 * C24131 +
             C13593 * C24465) *
                C139300 +
            (C13796 * C71165 + C139586 * C71417 + C13795 * C24129 +
             C13593 * C24463) *
                C5913) *
               C139588 +
           ((C13796 * C20373 + C139586 * C20611 + C13795 * C5919 +
             C13593 * C6097) *
                C139300 +
            (C13796 * C20371 + C139586 * C20609 + C13795 * C5916 +
             C13593 * C6094) *
                C5913) *
               C92451) *
              C139286 * C139339 * C5912)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C831 + C139586 * C1118) *
                C5230 +
            (C13795 * C116 + C13593 * C314 + C13796 * C841 + C139586 * C1125) *
                C5225 -
            (C13822 + C13823) * C5231 - (C13824 + C13825) * C5226 +
            (C13826 + C13827) * C5232 + (C13828 + C13829) * C5227) *
               C92451 +
           ((C110582 + C110583) * C5230 + (C110584 + C110585) * C5225 -
            (C15709 + C15708) * C5231 - (C15711 + C15710) * C5226 +
            (C17604 + C17603) * C5232 + (C17606 + C17605) * C5227) *
               C139588) *
              C139286 * C139339 * C5228 +
          (((C14710 + C14711) * C5231 -
            ((C13796 * C847 + C139586 * C1129 + C13795 * C841 +
              C13593 * C1125) *
                 C5225 +
             (C13796 * C832 + C139586 * C1121 + C13795 * C831 +
              C13593 * C1118) *
                 C5230) +
            (C14712 + C14713) * C5226 - (C16676 + C16677) * C5232 -
            (C16678 + C16679) * C5227) *
               C92451 +
           ((C18688 + C18687) * C5231 -
            ((C113396 + C113397) * C5225 + (C113398 + C113399) * C5230) +
            (C18690 + C18689) * C5226 -
            (C13796 * C8752 + C139586 * C8998 + C13795 * C4225 +
             C13593 * C4551) *
                C5232 -
            (C13796 * C8755 + C139586 * C9001 + C13795 * C4232 +
             C13593 * C4555) *
                C5227) *
               C139588) *
              C139286 * C139339 * C139377)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C13795 * C107 + C13593 * C308 + C13796 * C831 + C139586 * C1118) *
                 C5913 +
             (C13795 * C116 + C13593 * C314 + C13796 * C841 + C139586 * C1125) *
                 C139300) *
                C92451 +
            ((C110582 + C110583) * C5913 + (C110584 + C110585) * C139300) *
                C139588) *
               C139286 * C1761 -
           (((C110586 + C110587) * C139300 + (C110588 + C110589) * C5913) *
                C139588 +
            ((C110585 + C110584) * C139300 + (C110583 + C110582) * C5913) *
                C92451) *
               C139286 * C1762 +
           (((C110589 + C110588) * C5913 + (C110587 + C110586) * C139300) *
                C92451 +
            ((C13795 * C10815 + C13593 * C10993 + C13796 * C26831 +
              C139586 * C27045) *
                 C5913 +
             (C13795 * C10818 + C13593 * C10996 + C13796 * C26833 +
              C139586 * C27047) *
                 C139300) *
                C139588) *
               C139286 * C1763) *
              C5228 +
          ((((C113399 + C113398) * C5913 + (C113397 + C113396) * C139300) *
                C92451 +
            ((C115986 + C115987) * C5913 + (C115988 + C115989) * C139300) *
                C139588) *
               C139286 * C1762 -
           (((C113396 + C113397) * C139300 + (C113398 + C113399) * C5913) *
                C139588 +
            ((C13796 * C847 + C139586 * C1129 + C13795 * C841 +
              C13593 * C1125) *
                 C139300 +
             (C13796 * C832 + C139586 * C1121 + C13795 * C831 +
              C13593 * C1118) *
                 C5913) *
                C92451) *
               C139286 * C1761 -
           (((C13796 * C73225 + C139586 * C73383 + C13795 * C26833 +
              C13593 * C27047) *
                 C139300 +
             (C13796 * C73224 + C139586 * C73382 + C13795 * C26831 +
              C13593 * C27045) *
                 C5913) *
                C139588 +
            ((C115989 + C115988) * C139300 + (C115987 + C115986) * C5913) *
                C92451) *
               C139286 * C1763) *
              C139377)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[112] +=
        (-std::pow(Pi, 2.5) *
         (((C13795 * C107 + C13593 * C308 + C13796 * C831 + C139586 * C1118) *
               C5976 +
           (C13795 * C182 + C13593 * C394 + C13796 * C939 + C139586 * C1231) *
               C5909 -
           (C13796 * C832 + C139586 * C1121 + C13795 * C831 + C13593 * C1118) *
               C5977 -
           (C13796 * C940 + C139586 * C1232 + C13795 * C939 + C13593 * C1231) *
               C5910 +
           (C13795 * C832 + C13593 * C1121 + C13796 * C5916 + C139586 * C6094) *
               C5978 +
           (C13795 * C940 + C13593 * C1232 + C13796 * C5982 + C139586 * C6148) *
               C5911 -
           (C13796 * C20371 + C139586 * C20609 + C13795 * C5916 +
            C13593 * C6094) *
               C5979 -
           (C13796 * C20457 + C139586 * C20678 + C13795 * C5982 +
            C13593 * C6148) *
               C5912) *
              C92451 +
          ((C110582 + C110583) * C5976 + (C110696 + C110697) * C5909 -
           (C113398 + C113399) * C5977 - (C113534 + C113535) * C5910 +
           (C13795 * C8754 + C13593 * C9000 + C13796 * C24129 +
            C139586 * C24463) *
               C5978 +
           (C13795 * C8840 + C13593 * C9078 + C13796 * C24247 +
            C139586 * C24564) *
               C5911 -
           (C13796 * C71165 + C139586 * C71417 + C13795 * C24129 +
            C13593 * C24463) *
               C5979 -
           (C13796 * C71252 + C139586 * C71493 + C13795 * C24247 +
            C13593 * C24564) *
               C5912) *
              C139588) *
         C139286 * C139300 * C139339) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C831 + C139586 * C1118) *
                C5307 +
            (C13795 * C182 + C13593 * C394 + C13796 * C939 + C139586 * C1231) *
                C5228 -
            (C13796 * C832 + C139586 * C1121 + C13795 * C831 + C13593 * C1118) *
                C5308 -
            (C13796 * C940 + C139586 * C1232 + C13795 * C939 + C13593 * C1231) *
                C139377) *
               C92451 +
           ((C110582 + C110583) * C5307 + (C110696 + C110697) * C5228 -
            (C113398 + C113399) * C5308 - (C113534 + C113535) * C139377) *
               C139588) *
              C139286 * C5225 +
          (((C14710 + C14711) * C5308 -
            ((C13913 + C13912) * C5228 + (C13822 + C13823) * C5307) +
            (C14825 + C14824) * C139377) *
               C92451 +
           ((C18688 + C18687) * C5308 -
            ((C15823 + C15822) * C5228 + (C15709 + C15708) * C5307) +
            (C18825 + C18826) * C139377) *
               C139588) *
              C139286 * C5226 +
          (((C13826 + C13827) * C5307 + (C13915 + C13914) * C5228 -
            (C16676 + C16677) * C5308 - (C16783 + C16782) * C139377) *
               C92451 +
           ((C17604 + C17603) * C5307 + (C17709 + C17710) * C5228 -
            (C13796 * C8752 + C139586 * C8998 + C13795 * C4225 +
             C13593 * C4551) *
                C5308 -
            (C13796 * C8838 + C139586 * C9080 + C13795 * C4339 +
             C13593 * C4669) *
                C139377) *
               C139588) *
              C139286 * C5227) *
         C139339) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C831 + C139586 * C1118) *
                C5307 +
            (C13795 * C182 + C13593 * C394 + C13796 * C939 + C139586 * C1231) *
                C5228 -
            (C13796 * C832 + C139586 * C1121 + C13795 * C831 + C13593 * C1118) *
                C5308 -
            (C13796 * C940 + C139586 * C1232 + C13795 * C939 + C13593 * C1231) *
                C139377) *
               C92451 +
           ((C110582 + C110583) * C5307 + (C110696 + C110697) * C5228 -
            (C113398 + C113399) * C5308 - (C113534 + C113535) * C139377) *
               C139588) *
              C139286 * C139300 * C1761 +
          (((C113399 + C113398) * C5308 -
            ((C110697 + C110696) * C5228 + (C110583 + C110582) * C5307) +
            (C113535 + C113534) * C139377) *
               C92451 +
           ((C115986 + C115987) * C5308 -
            ((C110698 + C110699) * C5228 + (C110588 + C110589) * C5307) +
            (C116092 + C116093) * C139377) *
               C139588) *
              C139286 * C139300 * C1762 +
          (((C110589 + C110588) * C5307 + (C110699 + C110698) * C5228 -
            (C115987 + C115986) * C5308 - (C116093 + C116092) * C139377) *
               C92451 +
           ((C13795 * C10815 + C13593 * C10993 + C13796 * C26831 +
             C139586 * C27045) *
                C5307 +
            (C13795 * C10877 + C13593 * C11049 + C13796 * C26905 +
             C139586 * C27115) *
                C5228 -
            (C13796 * C73224 + C139586 * C73382 + C13795 * C26831 +
             C13593 * C27045) *
                C5308 -
            (C13796 * C73278 + C139586 * C73434 + C13795 * C26905 +
             C13593 * C27115) *
                C139377) *
               C139588) *
              C139286 * C139300 * C1763)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[112] +=
        (-std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C831 + C139586 * C1118) *
                C244 +
            (C13795 * C245 + C13593 * C474 + C13796 * C1029 + C139586 * C1339) *
                C139339) *
               C92451 +
           ((C110582 + C110583) * C244 + (C110807 + C110806) * C139339) *
               C139588) *
              C139286 * C5909 -
          (((C113671 + C113670) * C139339 + (C113398 + C113399) * C244) *
               C139588 +
           ((C13796 * C1030 + C139586 * C1340 + C13795 * C1029 +
             C13593 * C1339) *
                C139339 +
            (C13796 * C832 + C139586 * C1121 + C13795 * C831 + C13593 * C1118) *
                C244) *
               C92451) *
              C139286 * C5910 +
          (((C13795 * C832 + C13593 * C1121 + C13796 * C5916 +
             C139586 * C6094) *
                C244 +
            (C13795 * C1030 + C13593 * C1340 + C13796 * C6038 +
             C139586 * C6203) *
                C139339) *
               C92451 +
           ((C13795 * C8754 + C13593 * C9000 + C13796 * C24129 +
             C139586 * C24463) *
                C244 +
            (C13795 * C8920 + C13593 * C9155 + C13796 * C24355 +
             C139586 * C24664) *
                C139339) *
               C139588) *
              C139286 * C5911 -
          (((C13796 * C71331 + C139586 * C71568 + C13795 * C24355 +
             C13593 * C24664) *
                C139339 +
            (C13796 * C71165 + C139586 * C71417 + C13795 * C24129 +
             C13593 * C24463) *
                C244) *
               C139588 +
           ((C13796 * C20533 + C139586 * C20747 + C13795 * C6038 +
             C13593 * C6203) *
                C139339 +
            (C13796 * C20371 + C139586 * C20609 + C13795 * C5916 +
             C13593 * C6094) *
                C244) *
               C92451) *
              C139286 * C5912) *
         C139300) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C13795 * C107 + C13593 * C308 + C13796 * C831 + C139586 * C1118) *
                 C244 +
             (C13795 * C245 + C13593 * C474 + C13796 * C1029 +
              C139586 * C1339) *
                 C139339) *
                C92451 +
            ((C110582 + C110583) * C244 + (C110807 + C110806) * C139339) *
                C139588) *
               C139286 * C5228 -
           (((C113671 + C113670) * C139339 + (C113398 + C113399) * C244) *
                C139588 +
            ((C13796 * C1030 + C139586 * C1340 + C13795 * C1029 +
              C13593 * C1339) *
                 C139339 +
             (C13796 * C832 + C139586 * C1121 + C13795 * C831 +
              C13593 * C1118) *
                 C244) *
                C92451) *
               C139286 * C139377) *
              C5225 +
          ((((C14710 + C14711) * C244 + (C14935 + C14934) * C139339) * C92451 +
            ((C18688 + C18687) * C244 + (C18961 + C18962) * C139339) *
                C139588) *
               C139286 * C139377 -
           (((C15932 + C15933) * C139339 + (C15709 + C15708) * C244) * C139588 +
            ((C13997 + C13996) * C139339 + (C13822 + C13823) * C244) * C92451) *
               C139286 * C5228) *
              C5226 +
          ((((C13826 + C13827) * C244 + (C13999 + C13998) * C139339) * C92451 +
            ((C17604 + C17603) * C244 + (C17813 + C17814) * C139339) *
                C139588) *
               C139286 * C5228 -
           (((C13796 * C8918 + C139586 * C9157 + C13795 * C4445 +
              C13593 * C4785) *
                 C139339 +
             (C13796 * C8752 + C139586 * C8998 + C13795 * C4225 +
              C13593 * C4551) *
                 C244) *
                C139588 +
            ((C16887 + C16886) * C139339 + (C16676 + C16677) * C244) * C92451) *
               C139286 * C139377) *
              C5227)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C831 + C139586 * C1118) *
                C1960 +
            (C13795 * C245 + C13593 * C474 + C13796 * C1029 + C139586 * C1339) *
                C1761 -
            (C110583 + C110582) * C1961 - (C110806 + C110807) * C1762 +
            (C110589 + C110588) * C1962 + (C110808 + C110809) * C1763) *
               C92451 +
           ((C110582 + C110583) * C1960 + (C110807 + C110806) * C1761 -
            (C110588 + C110589) * C1961 - (C110809 + C110808) * C1762 +
            (C13795 * C10815 + C13593 * C10993 + C13796 * C26831 +
             C139586 * C27045) *
                C1962 +
            (C13795 * C10937 + C13593 * C11100 + C13796 * C26975 +
             C139586 * C27182) *
                C1763) *
               C139588) *
              C139286 * C5228 +
          (((C113399 + C113398) * C1961 -
            ((C13796 * C1030 + C139586 * C1340 + C13795 * C1029 +
              C13593 * C1339) *
                 C1761 +
             (C13796 * C832 + C139586 * C1121 + C13795 * C831 +
              C13593 * C1118) *
                 C1960) +
            (C113670 + C113671) * C1762 - (C115987 + C115986) * C1962 -
            (C116196 + C116197) * C1763) *
               C92451 +
           ((C115986 + C115987) * C1961 -
            ((C113671 + C113670) * C1761 + (C113398 + C113399) * C1960) +
            (C116197 + C116196) * C1762 -
            (C13796 * C73224 + C139586 * C73382 + C13795 * C26831 +
             C13593 * C27045) *
                C1962 -
            (C13796 * C73330 + C139586 * C73485 + C13795 * C26975 +
             C13593 * C27182) *
                C1763) *
               C139588) *
              C139286 * C139377) *
         C139300) /
            (p * q * std::sqrt(p + q));
    d2eezx[112] +=
        (-std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1767 + C139588 * C2376) *
                C5913 +
            (C92849 * C116 + C92451 * C561 + C92850 * C1777 + C139588 * C2383) *
                C139300) *
               C139286 * C13593 +
           ((C109946 + C109947) * C5913 + (C109948 + C109949) * C139300) *
               C139286 * C139586) *
              C139339 * C5909 -
          (((C109950 + C109951) * C139300 + (C109952 + C109953) * C5913) *
               C139286 * C139586 +
           ((C109949 + C109948) * C139300 + (C109947 + C109946) * C5913) *
               C139286 * C13593) *
              C139339 * C5910 +
          (((C109953 + C109952) * C5913 + (C109951 + C109950) * C139300) *
               C139286 * C13593 +
           ((C115438 + C115439) * C5913 + (C115440 + C115441) * C139300) *
               C139286 * C139586) *
              C139339 * C5911 -
          (((C92850 * C71166 + C139588 * C71644 + C92849 * C20373 +
             C92451 * C20817) *
                C139300 +
            (C92850 * C71165 + C139588 * C71643 + C92849 * C20371 +
             C92451 * C20815) *
                C5913) *
               C139286 * C139586 +
           ((C115441 + C115440) * C139300 + (C115439 + C115438) * C5913) *
               C139286 * C13593) *
              C139339 * C5912)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1767 + C139588 * C2376) *
                C5230 +
            (C92849 * C116 + C92451 * C561 + C92850 * C1777 + C139588 * C2383) *
                C5225 -
            (C92876 + C92877) * C5231 - (C92878 + C92879) * C5226 +
            (C92880 + C92881) * C5232 + (C92882 + C92883) * C5227) *
               C139286 * C13593 +
           ((C109946 + C109947) * C5230 + (C109948 + C109949) * C5225 -
            (C93759 + C93758) * C5231 - (C93761 + C93760) * C5226 +
            (C95707 + C95706) * C5232 + (C95709 + C95708) * C5227) *
               C139286 * C139586) *
              C139339 * C5228 +
          (((C93758 + C93759) * C5231 -
            ((C109949 + C109948) * C5225 + (C109947 + C109946) * C5230) +
            (C93760 + C93761) * C5226 - (C95706 + C95707) * C5232 -
            (C95708 + C95709) * C5227) *
               C139286 * C13593 +
           ((C93763 + C93762) * C5231 -
            ((C109950 + C109951) * C5225 + (C109952 + C109953) * C5230) +
            (C93765 + C93764) * C5226 -
            (C92850 * C8752 + C139588 * C9232 + C92849 * C834 +
             C92451 * C1445) *
                C5232 -
            (C92850 * C8755 + C139588 * C9235 + C92849 * C849 +
             C92451 * C1453) *
                C5227) *
               C139286 * C139586) *
              C139339 * C139377)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C92849 * C107 + C92451 * C555 + C92850 * C1767 +
              C139588 * C2376) *
                 C5913 +
             (C92849 * C116 + C92451 * C561 + C92850 * C1777 +
              C139588 * C2383) *
                 C139300) *
                C139286 * C13593 +
            ((C109946 + C109947) * C5913 + (C109948 + C109949) * C139300) *
                C139286 * C139586) *
               C1761 -
           (((C113810 + C113811) * C139300 + (C113812 + C113813) * C5913) *
                C139286 * C139586 +
            ((C92850 * C1783 + C139588 * C2387 + C92849 * C1777 +
              C92451 * C2383) *
                 C139300 +
             (C92850 * C1768 + C139588 * C2379 + C92849 * C1767 +
              C92451 * C2376) *
                 C5913) *
                C139286 * C13593) *
               C1762 +
           (((C92849 * C1768 + C92451 * C2379 + C92850 * C10815 +
              C139588 * C11155) *
                 C5913 +
             (C92849 * C1783 + C92451 * C2387 + C92850 * C10818 +
              C139588 * C11158) *
                 C139300) *
                C139286 * C13593 +
            ((C116304 + C116305) * C5913 + (C116306 + C116307) * C139300) *
                C139286 * C139586) *
               C1763) *
              C5228 +
          ((((C113813 + C113812) * C5913 + (C113811 + C113810) * C139300) *
                C139286 * C13593 +
            ((C92849 * C8754 + C92451 * C9234 + C92850 * C21079 +
              C139588 * C21715) *
                 C5913 +
             (C92849 * C8757 + C92451 * C9237 + C92850 * C21081 +
              C139588 * C21717) *
                 C139300) *
                C139286 * C139586) *
               C1762 -
           (((C109950 + C109951) * C139300 + (C109952 + C109953) * C5913) *
                C139286 * C139586 +
            ((C109949 + C109948) * C139300 + (C109947 + C109946) * C5913) *
                C139286 * C13593) *
               C1761 -
           (((C92850 * C73225 + C139588 * C73537 + C92849 * C21081 +
              C92451 * C21717) *
                 C139300 +
             (C92850 * C73224 + C139588 * C73536 + C92849 * C21079 +
              C92451 * C21715) *
                 C5913) *
                C139286 * C139586 +
            ((C116307 + C116306) * C139300 + (C116305 + C116304) * C5913) *
                C139286 * C13593) *
               C1763) *
              C139377)) /
            (p * q * std::sqrt(p + q));
    d2eezy[112] +=
        (-std::pow(Pi, 2.5) *
         (((C92849 * C107 + C92451 * C555 + C92850 * C1767 + C139588 * C2376) *
               C5976 +
           (C92849 * C182 + C92451 * C641 + C92850 * C1873 + C139588 * C2492) *
               C5909 -
           (C109947 + C109946) * C5977 - (C110060 + C110061) * C5910 +
           (C109953 + C109952) * C5978 + (C110062 + C110063) * C5911 -
           (C115439 + C115438) * C5979 - (C115512 + C115513) * C5912) *
              C139286 * C13593 +
          ((C109946 + C109947) * C5976 + (C110061 + C110060) * C5909 -
           (C109952 + C109953) * C5977 - (C110063 + C110062) * C5910 +
           (C115438 + C115439) * C5978 + (C115513 + C115512) * C5911 -
           (C92850 * C71165 + C139588 * C71643 + C92849 * C20371 +
            C92451 * C20815) *
               C5979 -
           (C92850 * C71252 + C139588 * C71729 + C92849 * C20457 +
            C92451 * C20902) *
               C5912) *
              C139286 * C139586) *
         C139300 * C139339) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1767 + C139588 * C2376) *
                C5307 +
            (C92849 * C182 + C92451 * C641 + C92850 * C1873 + C139588 * C2492) *
                C5228 -
            (C109947 + C109946) * C5308 - (C110060 + C110061) * C139377) *
               C139286 * C13593 +
           ((C109946 + C109947) * C5307 + (C110061 + C110060) * C5228 -
            (C109952 + C109953) * C5308 - (C110063 + C110062) * C139377) *
               C139286 * C139586) *
              C5225 +
          (((C93758 + C93759) * C5308 -
            ((C92967 + C92966) * C5228 + (C92876 + C92877) * C5307) +
            (C93873 + C93872) * C139377) *
               C139286 * C13593 +
           ((C93763 + C93762) * C5308 -
            ((C93872 + C93873) * C5228 + (C93759 + C93758) * C5307) +
            (C93874 + C93875) * C139377) *
               C139286 * C139586) *
              C5226 +
          (((C92880 + C92881) * C5307 + (C92969 + C92968) * C5228 -
            (C95706 + C95707) * C5308 - (C95813 + C95812) * C139377) *
               C139286 * C13593 +
           ((C95707 + C95706) * C5307 + (C95812 + C95813) * C5228 -
            (C92850 * C8752 + C139588 * C9232 + C92849 * C834 +
             C92451 * C1445) *
                C5308 -
            (C92850 * C8838 + C139588 * C9314 + C92849 * C942 +
             C92451 * C1558) *
                C139377) *
               C139286 * C139586) *
              C5227) *
         C139339) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1767 + C139588 * C2376) *
                C5307 +
            (C92849 * C182 + C92451 * C641 + C92850 * C1873 + C139588 * C2492) *
                C5228 -
            (C109947 + C109946) * C5308 - (C110060 + C110061) * C139377) *
               C139286 * C13593 +
           ((C109946 + C109947) * C5307 + (C110061 + C110060) * C5228 -
            (C109952 + C109953) * C5308 - (C110063 + C110062) * C139377) *
               C139286 * C139586) *
              C139300 * C1761 +
          (((C113813 + C113812) * C5308 -
            ((C92850 * C1874 + C139588 * C2493 + C92849 * C1873 +
              C92451 * C2492) *
                 C5228 +
             (C92850 * C1768 + C139588 * C2379 + C92849 * C1767 +
              C92451 * C2376) *
                 C5307) +
            (C113948 + C113949) * C139377) *
               C139286 * C13593 +
           ((C92849 * C8754 + C92451 * C9234 + C92850 * C21079 +
             C139588 * C21715) *
                C5308 -
            ((C113949 + C113948) * C5228 + (C113812 + C113813) * C5307) +
            (C92849 * C8840 + C92451 * C9312 + C92850 * C21197 +
             C139588 * C21830) *
                C139377) *
               C139286 * C139586) *
              C139300 * C1762 +
          (((C92849 * C1768 + C92451 * C2379 + C92850 * C10815 +
             C139588 * C11155) *
                C5307 +
            (C92849 * C1874 + C92451 * C2493 + C92850 * C10877 +
             C139588 * C11211) *
                C5228 -
            (C116305 + C116304) * C5308 - (C116410 + C116411) * C139377) *
               C139286 * C13593 +
           ((C116304 + C116305) * C5307 + (C116411 + C116410) * C5228 -
            (C92850 * C73224 + C139588 * C73536 + C92849 * C21079 +
             C92451 * C21715) *
                C5308 -
            (C92850 * C73278 + C139588 * C73588 + C92849 * C21197 +
             C92451 * C21830) *
                C139377) *
               C139286 * C139586) *
              C139300 * C1763)) /
            (p * q * std::sqrt(p + q));
    d2eezz[112] +=
        (-std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1767 + C139588 * C2376) *
                C244 +
            (C92849 * C245 + C92451 * C719 + C92850 * C1965 + C139588 * C2591) *
                C139339) *
               C139286 * C13593 +
           ((C109946 + C109947) * C244 + (C110170 + C110171) * C139339) *
               C139286 * C139586) *
              C5909 -
          (((C110172 + C110173) * C139339 + (C109952 + C109953) * C244) *
               C139286 * C139586 +
           ((C110171 + C110170) * C139339 + (C109947 + C109946) * C244) *
               C139286 * C13593) *
              C5910 +
          (((C109953 + C109952) * C244 + (C110173 + C110172) * C139339) *
               C139286 * C13593 +
           ((C115438 + C115439) * C244 + (C115584 + C115585) * C139339) *
               C139286 * C139586) *
              C5911 -
          (((C92850 * C71331 + C139588 * C71807 + C92849 * C20533 +
             C92451 * C20974) *
                C139339 +
            (C92850 * C71165 + C139588 * C71643 + C92849 * C20371 +
             C92451 * C20815) *
                C244) *
               C139286 * C139586 +
           ((C115585 + C115584) * C139339 + (C115439 + C115438) * C244) *
               C139286 * C13593) *
              C5912) *
         C139300) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C92849 * C107 + C92451 * C555 + C92850 * C1767 +
              C139588 * C2376) *
                 C244 +
             (C92849 * C245 + C92451 * C719 + C92850 * C1965 +
              C139588 * C2591) *
                 C139339) *
                C139286 * C13593 +
            ((C109946 + C109947) * C244 + (C110170 + C110171) * C139339) *
                C139286 * C139586) *
               C5228 -
           (((C110172 + C110173) * C139339 + (C109952 + C109953) * C244) *
                C139286 * C139586 +
            ((C110171 + C110170) * C139339 + (C109947 + C109946) * C244) *
                C139286 * C13593) *
               C139377) *
              C5225 +
          ((((C93758 + C93759) * C244 + (C93983 + C93982) * C139339) * C139286 *
                C13593 +
            ((C93763 + C93762) * C244 + (C93984 + C93985) * C139339) * C139286 *
                C139586) *
               C139377 -
           (((C93982 + C93983) * C139339 + (C93759 + C93758) * C244) * C139286 *
                C139586 +
            ((C93051 + C93050) * C139339 + (C92876 + C92877) * C244) * C139286 *
                C13593) *
               C5228) *
              C5226 +
          ((((C92880 + C92881) * C244 + (C93053 + C93052) * C139339) * C139286 *
                C13593 +
            ((C95707 + C95706) * C244 + (C95916 + C95917) * C139339) * C139286 *
                C139586) *
               C5228 -
           (((C92850 * C8918 + C139588 * C9391 + C92849 * C1032 +
              C92451 * C1664) *
                 C139339 +
             (C92850 * C8752 + C139588 * C9232 + C92849 * C834 +
              C92451 * C1445) *
                 C244) *
                C139286 * C139586 +
            ((C95917 + C95916) * C139339 + (C95706 + C95707) * C244) * C139286 *
                C13593) *
               C139377) *
              C5227)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1767 + C139588 * C2376) *
                C1960 +
            (C92849 * C245 + C92451 * C719 + C92850 * C1965 + C139588 * C2591) *
                C1761 -
            (C92850 * C1768 + C139588 * C2379 + C92849 * C1767 +
             C92451 * C2376) *
                C1961 -
            (C92850 * C1966 + C139588 * C2592 + C92849 * C1965 +
             C92451 * C2591) *
                C1762 +
            (C92849 * C1768 + C92451 * C2379 + C92850 * C10815 +
             C139588 * C11155) *
                C1962 +
            (C92849 * C1966 + C92451 * C2592 + C92850 * C10937 +
             C139588 * C11262) *
                C1763) *
               C139286 * C13593 +
           ((C109946 + C109947) * C1960 + (C110170 + C110171) * C1761 -
            (C113812 + C113813) * C1961 - (C114084 + C114085) * C1762 +
            (C116304 + C116305) * C1962 + (C116514 + C116515) * C1763) *
               C139286 * C139586) *
              C5228 +
          (((C113813 + C113812) * C1961 -
            ((C110171 + C110170) * C1761 + (C109947 + C109946) * C1960) +
            (C114085 + C114084) * C1762 - (C116305 + C116304) * C1962 -
            (C116515 + C116514) * C1763) *
               C139286 * C13593 +
           ((C92849 * C8754 + C92451 * C9234 + C92850 * C21079 +
             C139588 * C21715) *
                C1961 -
            ((C110172 + C110173) * C1761 + (C109952 + C109953) * C1960) +
            (C92849 * C8920 + C92451 * C9389 + C92850 * C21305 +
             C139588 * C21933) *
                C1762 -
            (C92850 * C73224 + C139588 * C73536 + C92849 * C21079 +
             C92451 * C21715) *
                C1962 -
            (C92850 * C73330 + C139588 * C73639 + C92849 * C21305 +
             C92451 * C21933) *
                C1763) *
               C139286 * C139586) *
              C139377) *
         C139300) /
            (p * q * std::sqrt(p + q));
    d2eexx[113] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C63381 * C107 + C139286 * C113) * C137108 +
              (C63381 * C116 + C139286 * C125) * C139552 -
              (C63381 * C108 + C139286 * C114) * C137101 -
              (C63381 * C117 + C139286 * C126) * C139305) *
                 C13593 +
             (C69583 + C69584 - C69585 - C69586) * C139586) *
                C92451 +
            ((C84979 + C84980 - C84981 - C84982) * C13593 + C84991 * C139586) *
                C139588) *
               C139561 +
           (((C84981 - (C84980 + C84979) + C84982) * C13593 +
             C84992 * C139586) *
                C92451 +
            ((C90702 - (C90703 + C90704) + C90705) * C13593 +
             (C84985 - (C84986 + C84987) + C84988) * C139586) *
                C139588) *
               C139403) *
              C5228 +
          ((((C69585 - (C69584 + C69583) + C69586) * C13593 +
             (C69589 - (C69588 + C69587) + C69590) * C139586) *
                C92451 +
            (C84992 * C13593 +
             (C70300 - (C70301 + C70302) + C70303) * C139586) *
                C139588) *
               C139561 +
           ((C84991 * C13593 + (C70302 + C70301 - C70300 - C70303) * C139586) *
                C92451 +
            ((C84987 + C84986 - C84985 - C84988) * C13593 +
             (C68855 * C137108 + C68856 * C139552 -
              (C63381 * C21078 + C139286 * C21082) * C137101 -
              (C63381 * C21080 + C139286 * C21084) * C139305) *
                 C139586) *
                C139588) *
               C139403) *
              C139377)) /
        (p * q * std::sqrt(p + q));
    d2eexy[113] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    ((((((C63381 * C107 + C139286 * C113) * C5307 +
                         (C63381 * C182 + C139286 * C188) * C5228 -
                         C63884 * C5308 - C63997 * C139377) *
                            C13593 +
                        (C63884 * C5307 + C63997 * C5228 - C63888 * C5308 -
                         C63998 * C139377) *
                            C139586) *
                           C92451 +
                       ((C83205 + C83206 - C83207 - C83208) * C13593 +
                        (C83209 + C83210 - C83211 - C83212) * C139586) *
                           C139588) *
                          C139552 +
                      (((C63886 * C5308 -
                         ((C63381 * C183 + C139286 * C189) * C5228 +
                          (C63381 * C108 + C139286 * C114) * C5307) +
                         C64000 * C139377) *
                            C13593 +
                        (C63890 * C5308 - (C64000 * C5228 + C63886 * C5307) +
                         C64001 * C139377) *
                            C139586) *
                           C92451 +
                       ((C85123 - (C85124 + C85125) + C85126) * C13593 +
                        (C85127 - (C85128 + C85129) + C85130) * C139586) *
                           C139588) *
                          C139305) *
                         C139561 +
                     ((((C83207 - (C83206 + C83205) + C83208) * C13593 +
                        (C83211 - (C83210 + C83209) + C83212) * C139586) *
                           C92451 +
                       ((C83213 - (C83214 + C83215) + C83216) * C13593 +
                        (C83217 - (C83218 + C83219) + C83220) * C139586) *
                           C139588) *
                          C139552 +
                      (((C85125 + C85124 - C85123 - C85126) * C13593 +
                        (C85129 + C85128 - C85127 - C85130) * C139586) *
                           C92451 +
                       ((C77537 * C5307 + C77674 * C5228 - C77541 * C5308 -
                         C77675 * C139377) *
                            C13593 +
                        (C77541 * C5307 + C77675 * C5228 -
                         (C63381 * C21078 + C139286 * C21082) * C5308 -
                         (C63381 * C21196 + C139286 * C21198) * C139377) *
                            C139586) *
                           C139588) *
                          C139305) *
                         C139403)) /
                   (p * q * std::sqrt(p + q));
    d2eexz[113] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    ((((((C63381 * C107 + C139286 * C113) * C3607 +
                         (C63381 * C245 + C139286 * C251) * C139561 -
                         C77533 * C3608 - C77790 * C139403) *
                            C13593 +
                        (C66946 + C66947 - C66948 - C66970) * C139586) *
                           C92451 +
                       ((C77533 * C3607 + C77790 * C139561 - C77539 * C3608 -
                         C77791 * C139403) *
                            C13593 +
                        (C80649 + C80650 - C80651 - C80652) * C139586) *
                           C139588) *
                          C5228 +
                      (((C66948 - (C66947 + C66946) + C66970) * C13593 +
                        (C66953 - (C66952 + C66951) + C66971) * C139586) *
                           C92451 +
                       ((C80651 - (C80650 + C80649) + C80652) * C13593 +
                        (C86348 - (C86349 + C86350) + C86351) * C139586) *
                           C139588) *
                          C139377) *
                         C139552 +
                     ((((C77535 * C3608 -
                         ((C63381 * C246 + C139286 * C252) * C139561 +
                          (C63381 * C108 + C139286 * C114) * C3607) +
                         C77792 * C139403) *
                            C13593 +
                        (C66956 - (C66957 + C66958) + C66972) * C139586) *
                           C92451 +
                       ((C77537 * C3608 - (C77792 * C139561 + C77535 * C3607) +
                         C77793 * C139403) *
                            C13593 +
                        (C80653 - (C80654 + C80655) + C80656) * C139586) *
                           C139588) *
                          C5228 +
                      (((C66958 + C66957 - C66956 - C66972) * C13593 +
                        (C66963 + C66962 - C66961 - C66973) * C139586) *
                           C92451 +
                       ((C80655 + C80654 - C80653 - C80656) * C13593 +
                        (C66726 * C3607 + C66969 * C139561 -
                         (C63381 * C21078 + C139286 * C21082) * C3608 -
                         (C63381 * C21304 + C139286 * C21306) * C139403) *
                            C139586) *
                           C139588) *
                          C139377) *
                         C139305)) /
                   (p * q * std::sqrt(p + q));
    d2eeyx[113] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13795 * C107 + C13593 * C308 + C13796 * C831 + C139586 * C1118) *
                 C137108 +
             (C13795 * C116 + C13593 * C314 + C13796 * C841 + C139586 * C1125) *
                 C139552 -
             (C13822 + C13823) * C137101 - (C13824 + C13825) * C139305) *
                C92451 +
            ((C110582 + C110583) * C137108 + (C110584 + C110585) * C139552 -
             (C15709 + C15708) * C137101 - (C15711 + C15710) * C139305) *
                C139588) *
               C139286 * C139561 +
           (((C15708 + C15709) * C137101 -
             ((C110585 + C110584) * C139552 + (C110583 + C110582) * C137108) +
             (C15710 + C15711) * C139305) *
                C92451 +
            ((C15713 + C15712) * C137101 -
             ((C110586 + C110587) * C139552 + (C110588 + C110589) * C137108) +
             (C15715 + C15714) * C139305) *
                C139588) *
               C139286 * C139403) *
              C5228 +
          ((((C14710 + C14711) * C137101 -
             ((C13796 * C847 + C139586 * C1129 + C13795 * C841 +
               C13593 * C1125) *
                  C139552 +
              (C13796 * C832 + C139586 * C1121 + C13795 * C831 +
               C13593 * C1118) *
                  C137108) +
             (C14712 + C14713) * C139305) *
                C92451 +
            ((C18688 + C18687) * C137101 -
             ((C113396 + C113397) * C139552 + (C113398 + C113399) * C137108) +
             (C18690 + C18689) * C139305) *
                C139588) *
               C139286 * C139561 +
           (((C113399 + C113398) * C137108 + (C113397 + C113396) * C139552 -
             (C18687 + C18688) * C137101 - (C18689 + C18690) * C139305) *
                C92451 +
            ((C115986 + C115987) * C137108 + (C115988 + C115989) * C139552 -
             (C13796 * C21078 + C139586 * C21412 + C13795 * C6441 +
              C13593 * C6687) *
                 C137101 -
             (C13796 * C21080 + C139586 * C21414 + C13795 * C6444 +
              C13593 * C6690) *
                 C139305) *
                C139588) *
               C139286 * C139403) *
              C139377)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[113] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13795 * C107 + C13593 * C308 + C13796 * C831 + C139586 * C1118) *
                 C5307 +
             (C13795 * C182 + C13593 * C394 + C13796 * C939 + C139586 * C1231) *
                 C5228 -
             (C13796 * C832 + C139586 * C1121 + C13795 * C831 +
              C13593 * C1118) *
                 C5308 -
             (C13796 * C940 + C139586 * C1232 + C13795 * C939 +
              C13593 * C1231) *
                 C139377) *
                C92451 +
            ((C110582 + C110583) * C5307 + (C110696 + C110697) * C5228 -
             (C113398 + C113399) * C5308 - (C113534 + C113535) * C139377) *
                C139588) *
               C139286 * C139552 +
           (((C14710 + C14711) * C5308 -
             ((C13913 + C13912) * C5228 + (C13822 + C13823) * C5307) +
             (C14825 + C14824) * C139377) *
                C92451 +
            ((C18688 + C18687) * C5308 -
             ((C15823 + C15822) * C5228 + (C15709 + C15708) * C5307) +
             (C18825 + C18826) * C139377) *
                C139588) *
               C139286 * C139305) *
              C139561 +
          ((((C113399 + C113398) * C5308 -
             ((C110697 + C110696) * C5228 + (C110583 + C110582) * C5307) +
             (C113535 + C113534) * C139377) *
                C92451 +
            ((C115986 + C115987) * C5308 -
             ((C110698 + C110699) * C5228 + (C110588 + C110589) * C5307) +
             (C116092 + C116093) * C139377) *
                C139588) *
               C139286 * C139552 +
           (((C15708 + C15709) * C5307 + (C15822 + C15823) * C5228 -
             (C18687 + C18688) * C5308 - (C18826 + C18825) * C139377) *
                C92451 +
            ((C15713 + C15712) * C5307 + (C15824 + C15825) * C5228 -
             (C13796 * C21078 + C139586 * C21412 + C13795 * C6441 +
              C13593 * C6687) *
                 C5308 -
             (C13796 * C21196 + C139586 * C21515 + C13795 * C6527 +
              C13593 * C6767) *
                 C139377) *
                C139588) *
               C139286 * C139305) *
              C139403)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[113] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13795 * C107 + C13593 * C308 + C13796 * C831 + C139586 * C1118) *
                 C3607 +
             (C13795 * C245 + C13593 * C474 + C13796 * C1029 +
              C139586 * C1339) *
                 C139561 -
             (C110583 + C110582) * C3608 - (C110806 + C110807) * C139403) *
                C92451 +
            ((C110582 + C110583) * C3607 + (C110807 + C110806) * C139561 -
             (C110588 + C110589) * C3608 - (C110809 + C110808) * C139403) *
                C139588) *
               C139286 * C5228 +
           (((C113399 + C113398) * C3608 -
             ((C13796 * C1030 + C139586 * C1340 + C13795 * C1029 +
               C13593 * C1339) *
                  C139561 +
              (C13796 * C832 + C139586 * C1121 + C13795 * C831 +
               C13593 * C1118) *
                  C3607) +
             (C113670 + C113671) * C139403) *
                C92451 +
            ((C115986 + C115987) * C3608 -
             ((C113671 + C113670) * C139561 + (C113398 + C113399) * C3607) +
             (C116197 + C116196) * C139403) *
                C139588) *
               C139286 * C139377) *
              C139552 +
          ((((C15708 + C15709) * C3608 -
             ((C13997 + C13996) * C139561 + (C13822 + C13823) * C3607) +
             (C15933 + C15932) * C139403) *
                C92451 +
            ((C15713 + C15712) * C3608 -
             ((C15932 + C15933) * C139561 + (C15709 + C15708) * C3607) +
             (C15934 + C15935) * C139403) *
                C139588) *
               C139286 * C5228 +
           (((C14710 + C14711) * C3607 + (C14935 + C14934) * C139561 -
             (C18687 + C18688) * C3608 - (C18962 + C18961) * C139403) *
                C92451 +
            ((C18688 + C18687) * C3607 + (C18961 + C18962) * C139561 -
             (C13796 * C21078 + C139586 * C21412 + C13795 * C6441 +
              C13593 * C6687) *
                 C3608 -
             (C13796 * C21304 + C139586 * C21615 + C13795 * C6607 +
              C13593 * C6844) *
                 C139403) *
                C139588) *
               C139286 * C139377) *
              C139305)) /
        (p * q * std::sqrt(p + q));
    d2eezx[113] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C92849 * C107 + C92451 * C555 + C92850 * C1767 +
              C139588 * C2376) *
                 C137108 +
             (C92849 * C116 + C92451 * C561 + C92850 * C1777 +
              C139588 * C2383) *
                 C139552 -
             (C92876 + C92877) * C137101 - (C92878 + C92879) * C139305) *
                C139286 * C13593 +
            ((C109946 + C109947) * C137108 + (C109948 + C109949) * C139552 -
             (C93759 + C93758) * C137101 - (C93761 + C93760) * C139305) *
                C139286 * C139586) *
               C139561 +
           (((C94784 + C94785) * C137101 -
             ((C92850 * C1783 + C139588 * C2387 + C92849 * C1777 +
               C92451 * C2383) *
                  C139552 +
              (C92850 * C1768 + C139588 * C2379 + C92849 * C1767 +
               C92451 * C2376) *
                  C137108) +
             (C94786 + C94787) * C139305) *
                C139286 * C13593 +
            ((C97767 + C97766) * C137101 -
             ((C113810 + C113811) * C139552 + (C113812 + C113813) * C137108) +
             (C97769 + C97768) * C139305) *
                C139286 * C139586) *
               C139403) *
              C5228 +
          ((((C93758 + C93759) * C137101 -
             ((C109949 + C109948) * C139552 + (C109947 + C109946) * C137108) +
             (C93760 + C93761) * C139305) *
                C139286 * C13593 +
            ((C93763 + C93762) * C137101 -
             ((C109950 + C109951) * C139552 + (C109952 + C109953) * C137108) +
             (C93765 + C93764) * C139305) *
                C139286 * C139586) *
               C139561 +
           (((C113813 + C113812) * C137108 + (C113811 + C113810) * C139552 -
             (C97766 + C97767) * C137101 - (C97768 + C97769) * C139305) *
                C139286 * C13593 +
            ((C92849 * C8754 + C92451 * C9234 + C92850 * C21079 +
              C139588 * C21715) *
                 C137108 +
             (C92849 * C8757 + C92451 * C9237 + C92850 * C21081 +
              C139588 * C21717) *
                 C139552 -
             (C92850 * C21078 + C139588 * C21714 + C92849 * C8753 +
              C92451 * C9233) *
                 C137101 -
             (C92850 * C21080 + C139588 * C21716 + C92849 * C8756 +
              C92451 * C9236) *
                 C139305) *
                C139286 * C139586) *
               C139403) *
              C139377)) /
        (p * q * std::sqrt(p + q));
    d2eezy[113] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C92849 * C107 + C92451 * C555 + C92850 * C1767 +
              C139588 * C2376) *
                 C5307 +
             (C92849 * C182 + C92451 * C641 + C92850 * C1873 +
              C139588 * C2492) *
                 C5228 -
             (C109947 + C109946) * C5308 - (C110060 + C110061) * C139377) *
                C139286 * C13593 +
            ((C109946 + C109947) * C5307 + (C110061 + C110060) * C5228 -
             (C109952 + C109953) * C5308 - (C110063 + C110062) * C139377) *
                C139286 * C139586) *
               C139552 +
           (((C93758 + C93759) * C5308 -
             ((C92967 + C92966) * C5228 + (C92876 + C92877) * C5307) +
             (C93873 + C93872) * C139377) *
                C139286 * C13593 +
            ((C93763 + C93762) * C5308 -
             ((C93872 + C93873) * C5228 + (C93759 + C93758) * C5307) +
             (C93874 + C93875) * C139377) *
                C139286 * C139586) *
               C139305) *
              C139561 +
          ((((C113813 + C113812) * C5308 -
             ((C92850 * C1874 + C139588 * C2493 + C92849 * C1873 +
               C92451 * C2492) *
                  C5228 +
              (C92850 * C1768 + C139588 * C2379 + C92849 * C1767 +
               C92451 * C2376) *
                  C5307) +
             (C113948 + C113949) * C139377) *
                C139286 * C13593 +
            ((C92849 * C8754 + C92451 * C9234 + C92850 * C21079 +
              C139588 * C21715) *
                 C5308 -
             ((C113949 + C113948) * C5228 + (C113812 + C113813) * C5307) +
             (C92849 * C8840 + C92451 * C9312 + C92850 * C21197 +
              C139588 * C21830) *
                 C139377) *
                C139286 * C139586) *
               C139552 +
           (((C94784 + C94785) * C5307 + (C94898 + C94899) * C5228 -
             (C97766 + C97767) * C5308 - (C97905 + C97904) * C139377) *
                C139286 * C13593 +
            ((C97767 + C97766) * C5307 + (C97904 + C97905) * C5228 -
             (C92850 * C21078 + C139588 * C21714 + C92849 * C8753 +
              C92451 * C9233) *
                 C5308 -
             (C92850 * C21196 + C139588 * C21831 + C92849 * C8839 +
              C92451 * C9313) *
                 C139377) *
                C139286 * C139586) *
               C139305) *
              C139403)) /
        (p * q * std::sqrt(p + q));
    d2eezz[113] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C92849 * C107 + C92451 * C555 + C92850 * C1767 +
              C139588 * C2376) *
                 C3607 +
             (C92849 * C245 + C92451 * C719 + C92850 * C1965 +
              C139588 * C2591) *
                 C139561 -
             (C92850 * C1768 + C139588 * C2379 + C92849 * C1767 +
              C92451 * C2376) *
                 C3608 -
             (C92850 * C1966 + C139588 * C2592 + C92849 * C1965 +
              C92451 * C2591) *
                 C139403) *
                C139286 * C13593 +
            ((C109946 + C109947) * C3607 + (C110170 + C110171) * C139561 -
             (C113812 + C113813) * C3608 - (C114084 + C114085) * C139403) *
                C139286 * C139586) *
               C5228 +
           (((C113813 + C113812) * C3608 -
             ((C110171 + C110170) * C139561 + (C109947 + C109946) * C3607) +
             (C114085 + C114084) * C139403) *
                C139286 * C13593 +
            ((C92849 * C8754 + C92451 * C9234 + C92850 * C21079 +
              C139588 * C21715) *
                 C3608 -
             ((C110172 + C110173) * C139561 + (C109952 + C109953) * C3607) +
             (C92849 * C8920 + C92451 * C9389 + C92850 * C21305 +
              C139588 * C21933) *
                 C139403) *
                C139286 * C139586) *
               C139377) *
              C139552 +
          ((((C94784 + C94785) * C3608 -
             ((C93051 + C93050) * C139561 + (C92876 + C92877) * C3607) +
             (C95009 + C95008) * C139403) *
                C139286 * C13593 +
            ((C97767 + C97766) * C3608 -
             ((C93982 + C93983) * C139561 + (C93759 + C93758) * C3607) +
             (C98040 + C98041) * C139403) *
                C139286 * C139586) *
               C5228 +
           (((C93758 + C93759) * C3607 + (C93983 + C93982) * C139561 -
             (C97766 + C97767) * C3608 - (C98041 + C98040) * C139403) *
                C139286 * C13593 +
            ((C93763 + C93762) * C3607 + (C93984 + C93985) * C139561 -
             (C92850 * C21078 + C139588 * C21714 + C92849 * C8753 +
              C92451 * C9233) *
                 C3608 -
             (C92850 * C21304 + C139588 * C21934 + C92849 * C8919 +
              C92451 * C9390) *
                 C139403) *
                C139286 * C139586) *
               C139377) *
              C139305)) /
        (p * q * std::sqrt(p + q));
    d2eexx[114] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139286 * C113) * C5230 +
             (C63381 * C116 + C139286 * C125) * C5225 -
             (C63381 * C108 + C139286 * C114) * C5231 -
             (C63381 * C117 + C139286 * C126) * C5226 +
             (C63381 * C109 + C139286 * C115) * C5232 +
             (C63381 * C118 + C139286 * C127) * C5227) *
                C13593 +
            (C67640 + C67641 - C67642 - C67643 + C67644 + C67645) * C139586) *
               C92451 +
           ((C87086 + C87087 - C87088 - C87089 + C87090 + C87091) * C13593 +
            (C81583 + C81584 - C81585 - C81586 + C81587 + C81588) * C139586) *
               C139588) *
              C139339 * C5228 +
          (((C67642 - (C67641 + C67640) + C67643 - C67644 - C67645) * C13593 +
            (C67648 - (C67647 + C67646) + C67649 - C67650 - C67651) * C139586) *
               C92451 +
           ((C81585 - (C81584 + C81583) + C81586 - C81587 - C81588) * C13593 +
            (C66726 * C5231 - (C66727 * C5225 + C66728 * C5230) +
             C66729 * C5226 - (C63381 * C8752 + C139286 * C8758) * C5232 -
             (C63381 * C8755 + C139286 * C8761) * C5227) *
                C139586) *
               C139588) *
              C139339 * C139377)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139286 * C113) * C5913 +
             (C63381 * C116 + C139286 * C125) * C139300) *
                C13593 +
            (C68304 + C68305) * C139586) *
               C92451 +
           ((C83091 + C83092) * C13593 + C83093 * C139586) * C139588) *
              C139339 * C5909 -
          ((C71170 * C139586 + C83097 * C13593) * C139588 +
           ((C68307 + C68306) * C139586 + (C68305 + C68304) * C13593) *
               C92451) *
              C139339 * C5910 +
          ((C68314 * C13593 + (C68309 + C68308) * C139586) * C92451 +
           (C86139 * C13593 + (C71177 + C71178) * C139586) * C139588) *
              C139339 * C5911 -
          ((((C63381 * C71166 + C139286 * C71168) * C139300 +
             (C63381 * C71165 + C139286 * C71167) * C5913) *
                C139586 +
            (C71178 + C71177) * C13593) *
               C139588 +
           ((C68319 + C68318) * C139586 + C68315 * C13593) * C92451) *
              C139339 * C5912)) /
            (p * q * std::sqrt(p + q));
    d2eexy[114] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139286 * C113) * C5307 +
             (C63381 * C182 + C139286 * C188) * C5228 - C63884 * C5308 -
             C63997 * C139377) *
                C13593 +
            (C63884 * C5307 + C63997 * C5228 - C63888 * C5308 -
             C63998 * C139377) *
                C139586) *
               C92451 +
           ((C83205 + C83206 - C83207 - C83208) * C13593 +
            (C83209 + C83210 - C83211 - C83212) * C139586) *
               C139588) *
              C5225 +
          (((C63886 * C5308 -
             ((C63381 * C183 + C139286 * C189) * C5228 +
              (C63381 * C108 + C139286 * C114) * C5307) +
             C64000 * C139377) *
                C13593 +
            (C63890 * C5308 - (C64000 * C5228 + C63886 * C5307) +
             C64001 * C139377) *
                C139586) *
               C92451 +
           ((C85123 - (C85124 + C85125) + C85126) * C13593 +
            (C85127 - (C85128 + C85129) + C85130) * C139586) *
               C139588) *
              C5226 +
          ((((C63381 * C109 + C139286 * C115) * C5307 +
             (C63381 * C184 + C139286 * C190) * C5228 - C65320 * C5308 -
             C65406 * C139377) *
                C13593 +
            (C65320 * C5307 + C65406 * C5228 - C65322 * C5308 -
             C65407 * C139377) *
                C139586) *
               C92451 +
           ((C79439 * C5307 + C79546 * C5228 - C78537 * C5308 -
             C78641 * C139377) *
                C13593 +
            (C78537 * C5307 + C78641 * C5228 -
             (C63381 * C8752 + C139286 * C8758) * C5308 -
             (C63381 * C8838 + C139286 * C8841) * C139377) *
                C139586) *
               C139588) *
              C5227) *
         C139339) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139286 * C113) * C5976 +
            (C63381 * C182 + C139286 * C188) * C5909 - C63884 * C5977 -
            C63997 * C5910 + C63888 * C5978 + C63998 * C5911 - C63894 * C5979 -
            C63999 * C5912) *
               C13593 +
           (C63884 * C5976 + C63997 * C5909 - C63888 * C5977 - C63998 * C5910 +
            C63894 * C5978 + C63999 * C5911 - C68316 * C5979 - C68374 * C5912) *
               C139586) *
              C92451 +
          ((C77533 * C5976 + C77672 * C5909 - C66724 * C5977 - C66844 * C5910 +
            C66728 * C5978 + C66845 * C5911 - C71175 * C5979 - C71257 * C5912) *
               C13593 +
           (C66724 * C5976 + C66844 * C5909 - C66728 * C5977 - C66845 * C5910 +
            C71175 * C5978 + C71257 * C5911 -
            (C63381 * C71165 + C139286 * C71167) * C5979 -
            (C63381 * C71252 + C139286 * C71253) * C5912) *
               C139586) *
              C139588) *
         C139300 * C139339) /
            (p * q * std::sqrt(p + q));
    d2eexz[114] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C63381 * C107 + C139286 * C113) * C244 +
              (C63381 * C245 + C139286 * C251) * C139339) *
                 C13593 +
             (C64077 + C64101) * C139586) *
                C92451 +
            ((C77533 * C244 + C77790 * C139339) * C13593 +
             (C76769 + C76770) * C139586) *
                C139588) *
               C5228 -
           (((C76771 + C76772) * C139586 + (C76770 + C76769) * C13593) *
                C139588 +
            ((C64102 + C64080) * C139586 + (C64101 + C64077) * C13593) *
                C92451) *
               C139377) *
              C5225 +
          ((((C64086 + C64104) * C13593 + (C64089 + C64105) * C139586) *
                C92451 +
            ((C76773 + C76774) * C13593 + (C76775 + C76776) * C139586) *
                C139588) *
               C139377 -
           (((C76774 + C76773) * C139586 +
             (C77792 * C139339 + C77535 * C244) * C13593) *
                C139588 +
            ((C64104 + C64086) * C139586 +
             ((C63381 * C246 + C139286 * C252) * C139339 +
              (C63381 * C108 + C139286 * C114) * C244) *
                 C13593) *
                C92451) *
               C5228) *
              C5226 +
          (((((C63381 * C109 + C139286 * C115) * C244 +
              (C63381 * C247 + C139286 * C253) * C139339) *
                 C13593 +
             (C65482 + C65490) * C139586) *
                C92451 +
            ((C79439 * C244 + C79648 * C139339) * C13593 +
             (C78740 + C78744) * C139586) *
                C139588) *
               C5228 -
           ((((C63381 * C8918 + C139286 * C8921) * C139339 +
              (C63381 * C8752 + C139286 * C8758) * C244) *
                 C139586 +
             (C78744 + C78740) * C13593) *
                C139588 +
            ((C65491 + C65485) * C139586 + (C65490 + C65482) * C13593) *
                C92451) *
               C139377) *
              C5227)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139286 * C113) * C244 +
             (C63381 * C245 + C139286 * C251) * C139339) *
                C13593 +
            (C64077 + C64101) * C139586) *
               C92451 +
           ((C77533 * C244 + C77790 * C139339) * C13593 +
            (C76769 + C76770) * C139586) *
               C139588) *
              C5909 -
          (((C76771 + C76772) * C139586 + (C76770 + C76769) * C13593) *
               C139588 +
           ((C64102 + C64080) * C139586 + (C64101 + C64077) * C13593) *
               C92451) *
              C5910 +
          ((C64107 * C13593 + (C64085 + C64103) * C139586) * C92451 +
           ((C76772 + C76771) * C13593 + (C82571 + C82572) * C139586) *
               C139588) *
              C5911 -
          ((((C63381 * C71331 + C139286 * C71332) * C139339 +
             (C63381 * C71165 + C139286 * C71167) * C244) *
                C139586 +
            (C82572 + C82571) * C13593) *
               C139588 +
           ((C68432 + C68428) * C139586 + C68427 * C13593) * C92451) *
              C5912) *
         C139300) /
            (p * q * std::sqrt(p + q));
    d2eeyx[114] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C831 + C139586 * C1118) *
                C5230 +
            (C13795 * C116 + C13593 * C314 + C13796 * C841 + C139586 * C1125) *
                C5225 -
            (C13822 + C13823) * C5231 - (C13824 + C13825) * C5226 +
            (C13826 + C13827) * C5232 + (C13828 + C13829) * C5227) *
               C92451 +
           ((C110582 + C110583) * C5230 + (C110584 + C110585) * C5225 -
            (C15709 + C15708) * C5231 - (C15711 + C15710) * C5226 +
            (C17604 + C17603) * C5232 + (C17606 + C17605) * C5227) *
               C139588) *
              C139286 * C139339 * C5228 +
          (((C14710 + C14711) * C5231 -
            ((C13796 * C847 + C139586 * C1129 + C13795 * C841 +
              C13593 * C1125) *
                 C5225 +
             (C13796 * C832 + C139586 * C1121 + C13795 * C831 +
              C13593 * C1118) *
                 C5230) +
            (C14712 + C14713) * C5226 - (C16676 + C16677) * C5232 -
            (C16678 + C16679) * C5227) *
               C92451 +
           ((C18688 + C18687) * C5231 -
            ((C113396 + C113397) * C5225 + (C113398 + C113399) * C5230) +
            (C18690 + C18689) * C5226 -
            (C13796 * C8752 + C139586 * C8998 + C13795 * C4225 +
             C13593 * C4551) *
                C5232 -
            (C13796 * C8755 + C139586 * C9001 + C13795 * C4232 +
             C13593 * C4555) *
                C5227) *
               C139588) *
              C139286 * C139339 * C139377)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C831 + C139586 * C1118) *
                C5913 +
            (C13795 * C116 + C13593 * C314 + C13796 * C841 + C139586 * C1125) *
                C139300) *
               C92451 +
           ((C110582 + C110583) * C5913 + (C110584 + C110585) * C139300) *
               C139588) *
              C139286 * C139339 * C5909 -
          (((C113396 + C113397) * C139300 + (C113398 + C113399) * C5913) *
               C139588 +
           ((C13796 * C847 + C139586 * C1129 + C13795 * C841 + C13593 * C1125) *
                C139300 +
            (C13796 * C832 + C139586 * C1121 + C13795 * C831 + C13593 * C1118) *
                C5913) *
               C92451) *
              C139286 * C139339 * C5910 +
          (((C13795 * C832 + C13593 * C1121 + C13796 * C5916 +
             C139586 * C6094) *
                C5913 +
            (C13795 * C847 + C13593 * C1129 + C13796 * C5919 +
             C139586 * C6097) *
                C139300) *
               C92451 +
           ((C13795 * C8754 + C13593 * C9000 + C13796 * C24129 +
             C139586 * C24463) *
                C5913 +
            (C13795 * C8757 + C13593 * C9003 + C13796 * C24131 +
             C139586 * C24465) *
                C139300) *
               C139588) *
              C139286 * C139339 * C5911 -
          (((C13796 * C71166 + C139586 * C71418 + C13795 * C24131 +
             C13593 * C24465) *
                C139300 +
            (C13796 * C71165 + C139586 * C71417 + C13795 * C24129 +
             C13593 * C24463) *
                C5913) *
               C139588 +
           ((C13796 * C20373 + C139586 * C20611 + C13795 * C5919 +
             C13593 * C6097) *
                C139300 +
            (C13796 * C20371 + C139586 * C20609 + C13795 * C5916 +
             C13593 * C6094) *
                C5913) *
               C92451) *
              C139286 * C139339 * C5912)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[114] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C831 + C139586 * C1118) *
                C5307 +
            (C13795 * C182 + C13593 * C394 + C13796 * C939 + C139586 * C1231) *
                C5228 -
            (C13796 * C832 + C139586 * C1121 + C13795 * C831 + C13593 * C1118) *
                C5308 -
            (C13796 * C940 + C139586 * C1232 + C13795 * C939 + C13593 * C1231) *
                C139377) *
               C92451 +
           ((C110582 + C110583) * C5307 + (C110696 + C110697) * C5228 -
            (C113398 + C113399) * C5308 - (C113534 + C113535) * C139377) *
               C139588) *
              C139286 * C5225 +
          (((C14710 + C14711) * C5308 -
            ((C13913 + C13912) * C5228 + (C13822 + C13823) * C5307) +
            (C14825 + C14824) * C139377) *
               C92451 +
           ((C18688 + C18687) * C5308 -
            ((C15823 + C15822) * C5228 + (C15709 + C15708) * C5307) +
            (C18825 + C18826) * C139377) *
               C139588) *
              C139286 * C5226 +
          (((C13826 + C13827) * C5307 + (C13915 + C13914) * C5228 -
            (C16676 + C16677) * C5308 - (C16783 + C16782) * C139377) *
               C92451 +
           ((C17604 + C17603) * C5307 + (C17709 + C17710) * C5228 -
            (C13796 * C8752 + C139586 * C8998 + C13795 * C4225 +
             C13593 * C4551) *
                C5308 -
            (C13796 * C8838 + C139586 * C9080 + C13795 * C4339 +
             C13593 * C4669) *
                C139377) *
               C139588) *
              C139286 * C5227) *
         C139339) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C13795 * C107 + C13593 * C308 + C13796 * C831 + C139586 * C1118) *
               C5976 +
           (C13795 * C182 + C13593 * C394 + C13796 * C939 + C139586 * C1231) *
               C5909 -
           (C13796 * C832 + C139586 * C1121 + C13795 * C831 + C13593 * C1118) *
               C5977 -
           (C13796 * C940 + C139586 * C1232 + C13795 * C939 + C13593 * C1231) *
               C5910 +
           (C13795 * C832 + C13593 * C1121 + C13796 * C5916 + C139586 * C6094) *
               C5978 +
           (C13795 * C940 + C13593 * C1232 + C13796 * C5982 + C139586 * C6148) *
               C5911 -
           (C13796 * C20371 + C139586 * C20609 + C13795 * C5916 +
            C13593 * C6094) *
               C5979 -
           (C13796 * C20457 + C139586 * C20678 + C13795 * C5982 +
            C13593 * C6148) *
               C5912) *
              C92451 +
          ((C110582 + C110583) * C5976 + (C110696 + C110697) * C5909 -
           (C113398 + C113399) * C5977 - (C113534 + C113535) * C5910 +
           (C13795 * C8754 + C13593 * C9000 + C13796 * C24129 +
            C139586 * C24463) *
               C5978 +
           (C13795 * C8840 + C13593 * C9078 + C13796 * C24247 +
            C139586 * C24564) *
               C5911 -
           (C13796 * C71165 + C139586 * C71417 + C13795 * C24129 +
            C13593 * C24463) *
               C5979 -
           (C13796 * C71252 + C139586 * C71493 + C13795 * C24247 +
            C13593 * C24564) *
               C5912) *
              C139588) *
         C139286 * C139300 * C139339) /
            (p * q * std::sqrt(p + q));
    d2eeyz[114] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13795 * C107 + C13593 * C308 + C13796 * C831 + C139586 * C1118) *
                 C244 +
             (C13795 * C245 + C13593 * C474 + C13796 * C1029 +
              C139586 * C1339) *
                 C139339) *
                C92451 +
            ((C110582 + C110583) * C244 + (C110807 + C110806) * C139339) *
                C139588) *
               C139286 * C5228 -
           (((C113671 + C113670) * C139339 + (C113398 + C113399) * C244) *
                C139588 +
            ((C13796 * C1030 + C139586 * C1340 + C13795 * C1029 +
              C13593 * C1339) *
                 C139339 +
             (C13796 * C832 + C139586 * C1121 + C13795 * C831 +
              C13593 * C1118) *
                 C244) *
                C92451) *
               C139286 * C139377) *
              C5225 +
          ((((C14710 + C14711) * C244 + (C14935 + C14934) * C139339) * C92451 +
            ((C18688 + C18687) * C244 + (C18961 + C18962) * C139339) *
                C139588) *
               C139286 * C139377 -
           (((C15932 + C15933) * C139339 + (C15709 + C15708) * C244) * C139588 +
            ((C13997 + C13996) * C139339 + (C13822 + C13823) * C244) * C92451) *
               C139286 * C5228) *
              C5226 +
          ((((C13826 + C13827) * C244 + (C13999 + C13998) * C139339) * C92451 +
            ((C17604 + C17603) * C244 + (C17813 + C17814) * C139339) *
                C139588) *
               C139286 * C5228 -
           (((C13796 * C8918 + C139586 * C9157 + C13795 * C4445 +
              C13593 * C4785) *
                 C139339 +
             (C13796 * C8752 + C139586 * C8998 + C13795 * C4225 +
              C13593 * C4551) *
                 C244) *
                C139588 +
            ((C16887 + C16886) * C139339 + (C16676 + C16677) * C244) * C92451) *
               C139286 * C139377) *
              C5227)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C831 + C139586 * C1118) *
                C244 +
            (C13795 * C245 + C13593 * C474 + C13796 * C1029 + C139586 * C1339) *
                C139339) *
               C92451 +
           ((C110582 + C110583) * C244 + (C110807 + C110806) * C139339) *
               C139588) *
              C139286 * C5909 -
          (((C113671 + C113670) * C139339 + (C113398 + C113399) * C244) *
               C139588 +
           ((C13796 * C1030 + C139586 * C1340 + C13795 * C1029 +
             C13593 * C1339) *
                C139339 +
            (C13796 * C832 + C139586 * C1121 + C13795 * C831 + C13593 * C1118) *
                C244) *
               C92451) *
              C139286 * C5910 +
          (((C13795 * C832 + C13593 * C1121 + C13796 * C5916 +
             C139586 * C6094) *
                C244 +
            (C13795 * C1030 + C13593 * C1340 + C13796 * C6038 +
             C139586 * C6203) *
                C139339) *
               C92451 +
           ((C13795 * C8754 + C13593 * C9000 + C13796 * C24129 +
             C139586 * C24463) *
                C244 +
            (C13795 * C8920 + C13593 * C9155 + C13796 * C24355 +
             C139586 * C24664) *
                C139339) *
               C139588) *
              C139286 * C5911 -
          (((C13796 * C71331 + C139586 * C71568 + C13795 * C24355 +
             C13593 * C24664) *
                C139339 +
            (C13796 * C71165 + C139586 * C71417 + C13795 * C24129 +
             C13593 * C24463) *
                C244) *
               C139588 +
           ((C13796 * C20533 + C139586 * C20747 + C13795 * C6038 +
             C13593 * C6203) *
                C139339 +
            (C13796 * C20371 + C139586 * C20609 + C13795 * C5916 +
             C13593 * C6094) *
                C244) *
               C92451) *
              C139286 * C5912) *
         C139300) /
            (p * q * std::sqrt(p + q));
    d2eezx[114] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1767 + C139588 * C2376) *
                C5230 +
            (C92849 * C116 + C92451 * C561 + C92850 * C1777 + C139588 * C2383) *
                C5225 -
            (C92876 + C92877) * C5231 - (C92878 + C92879) * C5226 +
            (C92880 + C92881) * C5232 + (C92882 + C92883) * C5227) *
               C139286 * C13593 +
           ((C109946 + C109947) * C5230 + (C109948 + C109949) * C5225 -
            (C93759 + C93758) * C5231 - (C93761 + C93760) * C5226 +
            (C95707 + C95706) * C5232 + (C95709 + C95708) * C5227) *
               C139286 * C139586) *
              C139339 * C5228 +
          (((C93758 + C93759) * C5231 -
            ((C109949 + C109948) * C5225 + (C109947 + C109946) * C5230) +
            (C93760 + C93761) * C5226 - (C95706 + C95707) * C5232 -
            (C95708 + C95709) * C5227) *
               C139286 * C13593 +
           ((C93763 + C93762) * C5231 -
            ((C109950 + C109951) * C5225 + (C109952 + C109953) * C5230) +
            (C93765 + C93764) * C5226 -
            (C92850 * C8752 + C139588 * C9232 + C92849 * C834 +
             C92451 * C1445) *
                C5232 -
            (C92850 * C8755 + C139588 * C9235 + C92849 * C849 +
             C92451 * C1453) *
                C5227) *
               C139286 * C139586) *
              C139339 * C139377)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1767 + C139588 * C2376) *
                C5913 +
            (C92849 * C116 + C92451 * C561 + C92850 * C1777 + C139588 * C2383) *
                C139300) *
               C139286 * C13593 +
           ((C109946 + C109947) * C5913 + (C109948 + C109949) * C139300) *
               C139286 * C139586) *
              C139339 * C5909 -
          (((C109950 + C109951) * C139300 + (C109952 + C109953) * C5913) *
               C139286 * C139586 +
           ((C109949 + C109948) * C139300 + (C109947 + C109946) * C5913) *
               C139286 * C13593) *
              C139339 * C5910 +
          (((C109953 + C109952) * C5913 + (C109951 + C109950) * C139300) *
               C139286 * C13593 +
           ((C115438 + C115439) * C5913 + (C115440 + C115441) * C139300) *
               C139286 * C139586) *
              C139339 * C5911 -
          (((C92850 * C71166 + C139588 * C71644 + C92849 * C20373 +
             C92451 * C20817) *
                C139300 +
            (C92850 * C71165 + C139588 * C71643 + C92849 * C20371 +
             C92451 * C20815) *
                C5913) *
               C139286 * C139586 +
           ((C115441 + C115440) * C139300 + (C115439 + C115438) * C5913) *
               C139286 * C13593) *
              C139339 * C5912)) /
            (p * q * std::sqrt(p + q));
    d2eezy[114] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1767 + C139588 * C2376) *
                C5307 +
            (C92849 * C182 + C92451 * C641 + C92850 * C1873 + C139588 * C2492) *
                C5228 -
            (C109947 + C109946) * C5308 - (C110060 + C110061) * C139377) *
               C139286 * C13593 +
           ((C109946 + C109947) * C5307 + (C110061 + C110060) * C5228 -
            (C109952 + C109953) * C5308 - (C110063 + C110062) * C139377) *
               C139286 * C139586) *
              C5225 +
          (((C93758 + C93759) * C5308 -
            ((C92967 + C92966) * C5228 + (C92876 + C92877) * C5307) +
            (C93873 + C93872) * C139377) *
               C139286 * C13593 +
           ((C93763 + C93762) * C5308 -
            ((C93872 + C93873) * C5228 + (C93759 + C93758) * C5307) +
            (C93874 + C93875) * C139377) *
               C139286 * C139586) *
              C5226 +
          (((C92880 + C92881) * C5307 + (C92969 + C92968) * C5228 -
            (C95706 + C95707) * C5308 - (C95813 + C95812) * C139377) *
               C139286 * C13593 +
           ((C95707 + C95706) * C5307 + (C95812 + C95813) * C5228 -
            (C92850 * C8752 + C139588 * C9232 + C92849 * C834 +
             C92451 * C1445) *
                C5308 -
            (C92850 * C8838 + C139588 * C9314 + C92849 * C942 +
             C92451 * C1558) *
                C139377) *
               C139286 * C139586) *
              C5227) *
         C139339) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C92849 * C107 + C92451 * C555 + C92850 * C1767 + C139588 * C2376) *
               C5976 +
           (C92849 * C182 + C92451 * C641 + C92850 * C1873 + C139588 * C2492) *
               C5909 -
           (C109947 + C109946) * C5977 - (C110060 + C110061) * C5910 +
           (C109953 + C109952) * C5978 + (C110062 + C110063) * C5911 -
           (C115439 + C115438) * C5979 - (C115512 + C115513) * C5912) *
              C139286 * C13593 +
          ((C109946 + C109947) * C5976 + (C110061 + C110060) * C5909 -
           (C109952 + C109953) * C5977 - (C110063 + C110062) * C5910 +
           (C115438 + C115439) * C5978 + (C115513 + C115512) * C5911 -
           (C92850 * C71165 + C139588 * C71643 + C92849 * C20371 +
            C92451 * C20815) *
               C5979 -
           (C92850 * C71252 + C139588 * C71729 + C92849 * C20457 +
            C92451 * C20902) *
               C5912) *
              C139286 * C139586) *
         C139300 * C139339) /
            (p * q * std::sqrt(p + q));
    d2eezz[114] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C92849 * C107 + C92451 * C555 + C92850 * C1767 +
              C139588 * C2376) *
                 C244 +
             (C92849 * C245 + C92451 * C719 + C92850 * C1965 +
              C139588 * C2591) *
                 C139339) *
                C139286 * C13593 +
            ((C109946 + C109947) * C244 + (C110170 + C110171) * C139339) *
                C139286 * C139586) *
               C5228 -
           (((C110172 + C110173) * C139339 + (C109952 + C109953) * C244) *
                C139286 * C139586 +
            ((C110171 + C110170) * C139339 + (C109947 + C109946) * C244) *
                C139286 * C13593) *
               C139377) *
              C5225 +
          ((((C93758 + C93759) * C244 + (C93983 + C93982) * C139339) * C139286 *
                C13593 +
            ((C93763 + C93762) * C244 + (C93984 + C93985) * C139339) * C139286 *
                C139586) *
               C139377 -
           (((C93982 + C93983) * C139339 + (C93759 + C93758) * C244) * C139286 *
                C139586 +
            ((C93051 + C93050) * C139339 + (C92876 + C92877) * C244) * C139286 *
                C13593) *
               C5228) *
              C5226 +
          ((((C92880 + C92881) * C244 + (C93053 + C93052) * C139339) * C139286 *
                C13593 +
            ((C95707 + C95706) * C244 + (C95916 + C95917) * C139339) * C139286 *
                C139586) *
               C5228 -
           (((C92850 * C8918 + C139588 * C9391 + C92849 * C1032 +
              C92451 * C1664) *
                 C139339 +
             (C92850 * C8752 + C139588 * C9232 + C92849 * C834 +
              C92451 * C1445) *
                 C244) *
                C139286 * C139586 +
            ((C95917 + C95916) * C139339 + (C95706 + C95707) * C244) * C139286 *
                C13593) *
               C139377) *
              C5227)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1767 + C139588 * C2376) *
                C244 +
            (C92849 * C245 + C92451 * C719 + C92850 * C1965 + C139588 * C2591) *
                C139339) *
               C139286 * C13593 +
           ((C109946 + C109947) * C244 + (C110170 + C110171) * C139339) *
               C139286 * C139586) *
              C5909 -
          (((C110172 + C110173) * C139339 + (C109952 + C109953) * C244) *
               C139286 * C139586 +
           ((C110171 + C110170) * C139339 + (C109947 + C109946) * C244) *
               C139286 * C13593) *
              C5910 +
          (((C109953 + C109952) * C244 + (C110173 + C110172) * C139339) *
               C139286 * C13593 +
           ((C115438 + C115439) * C244 + (C115584 + C115585) * C139339) *
               C139286 * C139586) *
              C5911 -
          (((C92850 * C71331 + C139588 * C71807 + C92849 * C20533 +
             C92451 * C20974) *
                C139339 +
            (C92850 * C71165 + C139588 * C71643 + C92849 * C20371 +
             C92451 * C20815) *
                C244) *
               C139286 * C139586 +
           ((C115585 + C115584) * C139339 + (C115439 + C115438) * C244) *
               C139286 * C13593) *
              C5912) *
         C139300) /
            (p * q * std::sqrt(p + q));
    d2eexx[115] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C63381 * C107 + C139286 * C113) * C137108 +
              (C63381 * C116 + C139286 * C125) * C139552 -
              (C63381 * C108 + C139286 * C114) * C137101 -
              (C63381 * C117 + C139286 * C126) * C139305) *
                 C13593 +
             (C69583 + C69584 - C69585 - C69586) * C139586) *
                C92451 +
            ((C84979 + C84980 - C84981 - C84982) * C13593 + C84991 * C139586) *
                C139588) *
               C9466 +
           (((C84981 - (C84980 + C84979) + C84982) * C13593 +
             C84992 * C139586) *
                C92451 +
            ((C90702 - (C90703 + C90704) + C90705) * C13593 +
             (C84985 - (C84986 + C84987) + C84988) * C139586) *
                C139588) *
               C139403) *
              C139560 +
          ((((C69585 - (C69584 + C69583) + C69586) * C13593 +
             (C69589 - (C69588 + C69587) + C69590) * C139586) *
                C92451 +
            (C84992 * C13593 +
             (C70300 - (C70301 + C70302) + C70303) * C139586) *
                C139588) *
               C9466 +
           ((C84991 * C13593 + (C70302 + C70301 - C70300 - C70303) * C139586) *
                C92451 +
            ((C84987 + C84986 - C84985 - C84988) * C13593 +
             (C68855 * C137108 + C68856 * C139552 -
              (C63381 * C21078 + C139286 * C21082) * C137101 -
              (C63381 * C21080 + C139286 * C21084) * C139305) *
                 C139586) *
                C139588) *
               C139403) *
              C139377)) /
        (p * q * std::sqrt(p + q));
    d2eexy[115] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    ((((((C63381 * C107 + C139286 * C113) * C2783 +
                         (C63381 * C182 + C139286 * C188) * C139560 -
                         C63884 * C2784 - C63997 * C139377) *
                            C13593 +
                        (C63884 * C2783 + C63997 * C139560 - C63888 * C2784 -
                         C63998 * C139377) *
                            C139586) *
                           C92451 +
                       ((C80503 + C80504 - C80505 - C80506) * C13593 +
                        (C80507 + C80508 - C80509 - C80510) * C139586) *
                           C139588) *
                          C139552 +
                      (((C63886 * C2784 -
                         ((C63381 * C183 + C139286 * C189) * C139560 +
                          (C63381 * C108 + C139286 * C114) * C2783) +
                         C64000 * C139377) *
                            C13593 +
                        (C63890 * C2784 - (C64000 * C139560 + C63886 * C2783) +
                         C64001 * C139377) *
                            C139586) *
                           C92451 +
                       ((C80511 - (C80512 + C80513) + C80514) * C13593 +
                        (C80515 - (C80516 + C80517) + C80518) * C139586) *
                           C139588) *
                          C139305) *
                         C9466 +
                     ((((C80505 - (C80504 + C80503) + C80506) * C13593 +
                        (C80509 - (C80508 + C80507) + C80510) * C139586) *
                           C92451 +
                       ((C91686 - (C91687 + C91688) + C91689) * C13593 +
                        (C91690 - (C91691 + C91692) + C91693) * C139586) *
                           C139588) *
                          C139552 +
                      (((C80513 + C80512 - C80511 - C80514) * C13593 +
                        (C80517 + C80516 - C80515 - C80518) * C139586) *
                           C92451 +
                       ((C77537 * C2783 + C77674 * C139560 - C77541 * C2784 -
                         C77675 * C139377) *
                            C13593 +
                        (C77541 * C2783 + C77675 * C139560 -
                         (C63381 * C21078 + C139286 * C21082) * C2784 -
                         (C63381 * C21196 + C139286 * C21198) * C139377) *
                            C139586) *
                           C139588) *
                          C139305) *
                         C139403)) /
                   (p * q * std::sqrt(p + q));
    d2eexz[115] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    ((((((C63381 * C107 + C139286 * C113) * C9616 +
                         (C63381 * C245 + C139286 * C251) * C9466 -
                         C77533 * C9617 - C77790 * C139403) *
                            C13593 +
                        (C72708 + C72709 - C72710 - C72711) * C139586) *
                           C92451 +
                       ((C77533 * C9616 + C77790 * C9466 - C77539 * C9617 -
                         C77791 * C139403) *
                            C13593 +
                        (C88182 + C88183 - C88184 - C88185) * C139586) *
                           C139588) *
                          C139560 +
                      (((C72710 - (C72709 + C72708) + C72711) * C13593 +
                        (C72714 - (C72713 + C72712) + C72715) * C139586) *
                           C92451 +
                       ((C88184 - (C88183 + C88182) + C88185) * C13593 +
                        (C88186 - (C88187 + C88188) + C88189) * C139586) *
                           C139588) *
                          C139377) *
                         C139552 +
                     ((((C77535 * C9617 -
                         ((C63381 * C246 + C139286 * C252) * C9466 +
                          (C63381 * C108 + C139286 * C114) * C9616) +
                         C77792 * C139403) *
                            C13593 +
                        (C73935 - (C73936 + C73937) + C73938) * C139586) *
                           C92451 +
                       ((C77537 * C9617 - (C77792 * C9466 + C77535 * C9616) +
                         C77793 * C139403) *
                            C13593 +
                        (C89820 - (C89821 + C89822) + C89823) * C139586) *
                           C139588) *
                          C139560 +
                      (((C73937 + C73936 - C73935 - C73938) * C13593 +
                        (C73941 + C73940 - C73939 - C73942) * C139586) *
                           C92451 +
                       ((C89822 + C89821 - C89820 - C89823) * C13593 +
                        (C66726 * C9616 + C66969 * C9466 -
                         (C63381 * C21078 + C139286 * C21082) * C9617 -
                         (C63381 * C21304 + C139286 * C21306) * C139403) *
                            C139586) *
                           C139588) *
                          C139377) *
                         C139305)) /
                   (p * q * std::sqrt(p + q));
    d2eeyx[115] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13795 * C107 + C13593 * C308 + C13796 * C831 + C139586 * C1118) *
                 C137108 +
             (C13795 * C116 + C13593 * C314 + C13796 * C841 + C139586 * C1125) *
                 C139552 -
             (C13822 + C13823) * C137101 - (C13824 + C13825) * C139305) *
                C92451 +
            ((C110582 + C110583) * C137108 + (C110584 + C110585) * C139552 -
             (C15709 + C15708) * C137101 - (C15711 + C15710) * C139305) *
                C139588) *
               C139286 * C9466 +
           (((C15708 + C15709) * C137101 -
             ((C110585 + C110584) * C139552 + (C110583 + C110582) * C137108) +
             (C15710 + C15711) * C139305) *
                C92451 +
            ((C15713 + C15712) * C137101 -
             ((C110586 + C110587) * C139552 + (C110588 + C110589) * C137108) +
             (C15715 + C15714) * C139305) *
                C139588) *
               C139286 * C139403) *
              C139560 +
          ((((C14710 + C14711) * C137101 -
             ((C13796 * C847 + C139586 * C1129 + C13795 * C841 +
               C13593 * C1125) *
                  C139552 +
              (C13796 * C832 + C139586 * C1121 + C13795 * C831 +
               C13593 * C1118) *
                  C137108) +
             (C14712 + C14713) * C139305) *
                C92451 +
            ((C18688 + C18687) * C137101 -
             ((C113396 + C113397) * C139552 + (C113398 + C113399) * C137108) +
             (C18690 + C18689) * C139305) *
                C139588) *
               C139286 * C9466 +
           (((C113399 + C113398) * C137108 + (C113397 + C113396) * C139552 -
             (C18687 + C18688) * C137101 - (C18689 + C18690) * C139305) *
                C92451 +
            ((C115986 + C115987) * C137108 + (C115988 + C115989) * C139552 -
             (C13796 * C21078 + C139586 * C21412 + C13795 * C6441 +
              C13593 * C6687) *
                 C137101 -
             (C13796 * C21080 + C139586 * C21414 + C13795 * C6444 +
              C13593 * C6690) *
                 C139305) *
                C139588) *
               C139286 * C139403) *
              C139377)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[115] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13795 * C107 + C13593 * C308 + C13796 * C831 + C139586 * C1118) *
                 C2783 +
             (C13795 * C182 + C13593 * C394 + C13796 * C939 + C139586 * C1231) *
                 C139560 -
             (C13796 * C832 + C139586 * C1121 + C13795 * C831 +
              C13593 * C1118) *
                 C2784 -
             (C13796 * C940 + C139586 * C1232 + C13795 * C939 +
              C13593 * C1231) *
                 C139377) *
                C92451 +
            ((C110582 + C110583) * C2783 + (C110696 + C110697) * C139560 -
             (C113398 + C113399) * C2784 - (C113534 + C113535) * C139377) *
                C139588) *
               C139286 * C139552 +
           (((C14710 + C14711) * C2784 -
             ((C13913 + C13912) * C139560 + (C13822 + C13823) * C2783) +
             (C14825 + C14824) * C139377) *
                C92451 +
            ((C18688 + C18687) * C2784 -
             ((C15823 + C15822) * C139560 + (C15709 + C15708) * C2783) +
             (C18825 + C18826) * C139377) *
                C139588) *
               C139286 * C139305) *
              C9466 +
          ((((C113399 + C113398) * C2784 -
             ((C110697 + C110696) * C139560 + (C110583 + C110582) * C2783) +
             (C113535 + C113534) * C139377) *
                C92451 +
            ((C115986 + C115987) * C2784 -
             ((C110698 + C110699) * C139560 + (C110588 + C110589) * C2783) +
             (C116092 + C116093) * C139377) *
                C139588) *
               C139286 * C139552 +
           (((C15708 + C15709) * C2783 + (C15822 + C15823) * C139560 -
             (C18687 + C18688) * C2784 - (C18826 + C18825) * C139377) *
                C92451 +
            ((C15713 + C15712) * C2783 + (C15824 + C15825) * C139560 -
             (C13796 * C21078 + C139586 * C21412 + C13795 * C6441 +
              C13593 * C6687) *
                 C2784 -
             (C13796 * C21196 + C139586 * C21515 + C13795 * C6527 +
              C13593 * C6767) *
                 C139377) *
                C139588) *
               C139286 * C139305) *
              C139403)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[115] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13795 * C107 + C13593 * C308 + C13796 * C831 + C139586 * C1118) *
                 C9616 +
             (C13795 * C245 + C13593 * C474 + C13796 * C1029 +
              C139586 * C1339) *
                 C9466 -
             (C110583 + C110582) * C9617 - (C110806 + C110807) * C139403) *
                C92451 +
            ((C110582 + C110583) * C9616 + (C110807 + C110806) * C9466 -
             (C110588 + C110589) * C9617 - (C110809 + C110808) * C139403) *
                C139588) *
               C139286 * C139560 +
           (((C113399 + C113398) * C9617 -
             ((C13796 * C1030 + C139586 * C1340 + C13795 * C1029 +
               C13593 * C1339) *
                  C9466 +
              (C13796 * C832 + C139586 * C1121 + C13795 * C831 +
               C13593 * C1118) *
                  C9616) +
             (C113670 + C113671) * C139403) *
                C92451 +
            ((C115986 + C115987) * C9617 -
             ((C113671 + C113670) * C9466 + (C113398 + C113399) * C9616) +
             (C116197 + C116196) * C139403) *
                C139588) *
               C139286 * C139377) *
              C139552 +
          ((((C15708 + C15709) * C9617 -
             ((C13997 + C13996) * C9466 + (C13822 + C13823) * C9616) +
             (C15933 + C15932) * C139403) *
                C92451 +
            ((C15713 + C15712) * C9617 -
             ((C15932 + C15933) * C9466 + (C15709 + C15708) * C9616) +
             (C15934 + C15935) * C139403) *
                C139588) *
               C139286 * C139560 +
           (((C14710 + C14711) * C9616 + (C14935 + C14934) * C9466 -
             (C18687 + C18688) * C9617 - (C18962 + C18961) * C139403) *
                C92451 +
            ((C18688 + C18687) * C9616 + (C18961 + C18962) * C9466 -
             (C13796 * C21078 + C139586 * C21412 + C13795 * C6441 +
              C13593 * C6687) *
                 C9617 -
             (C13796 * C21304 + C139586 * C21615 + C13795 * C6607 +
              C13593 * C6844) *
                 C139403) *
                C139588) *
               C139286 * C139377) *
              C139305)) /
        (p * q * std::sqrt(p + q));
    d2eezx[115] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C92849 * C107 + C92451 * C555 + C92850 * C1767 +
              C139588 * C2376) *
                 C137108 +
             (C92849 * C116 + C92451 * C561 + C92850 * C1777 +
              C139588 * C2383) *
                 C139552 -
             (C92876 + C92877) * C137101 - (C92878 + C92879) * C139305) *
                C139286 * C13593 +
            ((C109946 + C109947) * C137108 + (C109948 + C109949) * C139552 -
             (C93759 + C93758) * C137101 - (C93761 + C93760) * C139305) *
                C139286 * C139586) *
               C9466 +
           (((C94784 + C94785) * C137101 -
             ((C92850 * C1783 + C139588 * C2387 + C92849 * C1777 +
               C92451 * C2383) *
                  C139552 +
              (C92850 * C1768 + C139588 * C2379 + C92849 * C1767 +
               C92451 * C2376) *
                  C137108) +
             (C94786 + C94787) * C139305) *
                C139286 * C13593 +
            ((C97767 + C97766) * C137101 -
             ((C113810 + C113811) * C139552 + (C113812 + C113813) * C137108) +
             (C97769 + C97768) * C139305) *
                C139286 * C139586) *
               C139403) *
              C139560 +
          ((((C93758 + C93759) * C137101 -
             ((C109949 + C109948) * C139552 + (C109947 + C109946) * C137108) +
             (C93760 + C93761) * C139305) *
                C139286 * C13593 +
            ((C93763 + C93762) * C137101 -
             ((C109950 + C109951) * C139552 + (C109952 + C109953) * C137108) +
             (C93765 + C93764) * C139305) *
                C139286 * C139586) *
               C9466 +
           (((C113813 + C113812) * C137108 + (C113811 + C113810) * C139552 -
             (C97766 + C97767) * C137101 - (C97768 + C97769) * C139305) *
                C139286 * C13593 +
            ((C119286 + C119287) * C137108 + (C119288 + C119289) * C139552 -
             (C92850 * C21078 + C139588 * C21714 + C92849 * C8753 +
              C92451 * C9233) *
                 C137101 -
             (C92850 * C21080 + C139588 * C21716 + C92849 * C8756 +
              C92451 * C9236) *
                 C139305) *
                C139286 * C139586) *
               C139403) *
              C139377)) /
        (p * q * std::sqrt(p + q));
    d2eezy[115] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C92849 * C107 + C92451 * C555 + C92850 * C1767 +
              C139588 * C2376) *
                 C2783 +
             (C92849 * C182 + C92451 * C641 + C92850 * C1873 +
              C139588 * C2492) *
                 C139560 -
             (C109947 + C109946) * C2784 - (C110060 + C110061) * C139377) *
                C139286 * C13593 +
            ((C109946 + C109947) * C2783 + (C110061 + C110060) * C139560 -
             (C109952 + C109953) * C2784 - (C110063 + C110062) * C139377) *
                C139286 * C139586) *
               C139552 +
           (((C93758 + C93759) * C2784 -
             ((C92967 + C92966) * C139560 + (C92876 + C92877) * C2783) +
             (C93873 + C93872) * C139377) *
                C139286 * C13593 +
            ((C93763 + C93762) * C2784 -
             ((C93872 + C93873) * C139560 + (C93759 + C93758) * C2783) +
             (C93874 + C93875) * C139377) *
                C139286 * C139586) *
               C139305) *
              C9466 +
          ((((C113813 + C113812) * C2784 -
             ((C92850 * C1874 + C139588 * C2493 + C92849 * C1873 +
               C92451 * C2492) *
                  C139560 +
              (C92850 * C1768 + C139588 * C2379 + C92849 * C1767 +
               C92451 * C2376) *
                  C2783) +
             (C113948 + C113949) * C139377) *
                C139286 * C13593 +
            ((C119286 + C119287) * C2784 -
             ((C113949 + C113948) * C139560 + (C113812 + C113813) * C2783) +
             (C119393 + C119392) * C139377) *
                C139286 * C139586) *
               C139552 +
           (((C94784 + C94785) * C2783 + (C94898 + C94899) * C139560 -
             (C97766 + C97767) * C2784 - (C97905 + C97904) * C139377) *
                C139286 * C13593 +
            ((C97767 + C97766) * C2783 + (C97904 + C97905) * C139560 -
             (C92850 * C21078 + C139588 * C21714 + C92849 * C8753 +
              C92451 * C9233) *
                 C2784 -
             (C92850 * C21196 + C139588 * C21831 + C92849 * C8839 +
              C92451 * C9313) *
                 C139377) *
                C139286 * C139586) *
               C139305) *
              C139403)) /
        (p * q * std::sqrt(p + q));
    d2eezz[115] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C92849 * C107 + C92451 * C555 + C92850 * C1767 +
              C139588 * C2376) *
                 C9616 +
             (C92849 * C245 + C92451 * C719 + C92850 * C1965 +
              C139588 * C2591) *
                 C9466 -
             (C92850 * C1768 + C139588 * C2379 + C92849 * C1767 +
              C92451 * C2376) *
                 C9617 -
             (C92850 * C1966 + C139588 * C2592 + C92849 * C1965 +
              C92451 * C2591) *
                 C139403) *
                C139286 * C13593 +
            ((C109946 + C109947) * C9616 + (C110170 + C110171) * C9466 -
             (C113812 + C113813) * C9617 - (C114084 + C114085) * C139403) *
                C139286 * C139586) *
               C139560 +
           (((C113813 + C113812) * C9617 -
             ((C110171 + C110170) * C9466 + (C109947 + C109946) * C9616) +
             (C114085 + C114084) * C139403) *
                C139286 * C13593 +
            ((C119286 + C119287) * C9617 -
             ((C110172 + C110173) * C9466 + (C109952 + C109953) * C9616) +
             (C119496 + C119497) * C139403) *
                C139286 * C139586) *
               C139377) *
              C139552 +
          ((((C94784 + C94785) * C9617 -
             ((C93051 + C93050) * C9466 + (C92876 + C92877) * C9616) +
             (C95009 + C95008) * C139403) *
                C139286 * C13593 +
            ((C97767 + C97766) * C9617 -
             ((C93982 + C93983) * C9466 + (C93759 + C93758) * C9616) +
             (C98040 + C98041) * C139403) *
                C139286 * C139586) *
               C139560 +
           (((C93758 + C93759) * C9616 + (C93983 + C93982) * C9466 -
             (C97766 + C97767) * C9617 - (C98041 + C98040) * C139403) *
                C139286 * C13593 +
            ((C93763 + C93762) * C9616 + (C93984 + C93985) * C9466 -
             (C92850 * C21078 + C139588 * C21714 + C92849 * C8753 +
              C92451 * C9233) *
                 C9617 -
             (C92850 * C21304 + C139588 * C21934 + C92849 * C8919 +
              C92451 * C9390) *
                 C139403) *
                C139286 * C139586) *
               C139377) *
              C139305)) /
        (p * q * std::sqrt(p + q));
    d2eexx[116] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C63381 * C107 + C139286 * C113) * C5913 +
              (C63381 * C116 + C139286 * C125) * C139300) *
                 C13593 +
             (C68304 + C68305) * C139586) *
                C92451 +
            ((C83091 + C83092) * C13593 + C83093 * C139586) * C139588) *
               C139593 -
           ((C83094 * C139586 + (C83095 + C83096) * C13593) * C139588 +
            (C83097 * C139586 + (C83092 + C83091) * C13593) * C92451) *
               C139594 +
           (((C83096 + C83095) * C13593 + C83098 * C139586) * C92451 +
            ((C88854 + C88855) * C13593 + (C83105 + C83106) * C139586) *
                C139588) *
               C12239) *
              C139560 +
          (((C83093 * C13593 + C86139 * C139586) * C92451 +
            (C83098 * C13593 + (C68859 + C68860) * C139586) * C139588) *
               C139594 -
           ((C71170 * C139586 + C83097 * C13593) * C139588 +
            ((C68307 + C68306) * C139586 + (C68305 + C68304) * C13593) *
                C92451) *
               C139593 -
           ((((C63381 * C73225 + C139286 * C73227) * C139300 +
              (C63381 * C73224 + C139286 * C73226) * C5913) *
                 C139586 +
             (C83106 + C83105) * C13593) *
                C139588 +
            ((C68860 + C68859) * C139586 + C83094 * C13593) * C92451) *
               C12239) *
              C139377)) /
        (p * q * std::sqrt(p + q));
    d2eexy[116] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    (((((C63381 * C107 + C139286 * C113) * C2783 +
                        (C63381 * C182 + C139286 * C188) * C139560 -
                        C63884 * C2784 - C63997 * C139377) *
                           C13593 +
                       (C63884 * C2783 + C63997 * C139560 - C63888 * C2784 -
                        C63998 * C139377) *
                           C139586) *
                          C92451 +
                      ((C80503 + C80504 - C80505 - C80506) * C13593 +
                       (C80507 + C80508 - C80509 - C80510) * C139586) *
                          C139588) *
                         C139300 * C139593 +
                     (((C80505 - (C80504 + C80503) + C80506) * C13593 +
                       (C80509 - (C80508 + C80507) + C80510) * C139586) *
                          C92451 +
                      ((C91686 - (C91687 + C91688) + C91689) * C13593 +
                       (C91690 - (C91691 + C91692) + C91693) * C139586) *
                          C139588) *
                         C139300 * C139594 +
                     (((C91688 + C91687 - C91686 - C91689) * C13593 +
                       (C91692 + C91691 - C91690 - C91693) * C139586) *
                          C92451 +
                      ((C88852 * C2783 + C88929 * C139560 - C83103 * C2784 -
                        C83223 * C139377) *
                           C13593 +
                       (C83103 * C2783 + C83223 * C139560 -
                        (C63381 * C73224 + C139286 * C73226) * C2784 -
                        (C63381 * C73278 + C139286 * C73279) * C139377) *
                           C139586) *
                          C139588) *
                         C139300 * C12239)) /
                   (p * q * std::sqrt(p + q));
    d2eexz[116] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139286 * C113) * C12388 +
             (C63381 * C245 + C139286 * C251) * C139593 - C77533 * C12389 -
             C77790 * C139594 + C77539 * C12390 + C77791 * C12239) *
                C13593 +
            (C75419 + C75420 - C75421 - C75422 + C75423 + C75424) * C139586) *
               C92451 +
           ((C77533 * C12388 + C77790 * C139593 - C77539 * C12389 -
             C77791 * C139594 + C88852 * C12390 + C89001 * C12239) *
                C13593 +
            (C91792 + C91793 - C91794 - C91795 + C91796 + C91797) * C139586) *
               C139588) *
              C139560 +
          (((C75421 - (C75420 + C75419) + C75422 - C75423 - C75424) * C13593 +
            (C75427 - (C75426 + C75425) + C75428 - C75429 - C75430) * C139586) *
               C92451 +
           ((C91794 - (C91793 + C91792) + C91795 - C91796 - C91797) * C13593 +
            (C68855 * C12389 - (C66967 * C139593 + C66728 * C12388) +
             C69034 * C139594 - (C63381 * C73224 + C139286 * C73226) * C12390 -
             (C63381 * C73330 + C139286 * C73331) * C12239) *
                C139586) *
               C139588) *
              C139377) *
         C139300) /
        (p * q * std::sqrt(p + q));
    d2eeyx[116] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13795 * C107 + C13593 * C308 + C13796 * C831 + C139586 * C1118) *
                 C5913 +
             (C13795 * C116 + C13593 * C314 + C13796 * C841 + C139586 * C1125) *
                 C139300) *
                C92451 +
            ((C110582 + C110583) * C5913 + (C110584 + C110585) * C139300) *
                C139588) *
               C139286 * C139593 -
           (((C110586 + C110587) * C139300 + (C110588 + C110589) * C5913) *
                C139588 +
            ((C110585 + C110584) * C139300 + (C110583 + C110582) * C5913) *
                C92451) *
               C139286 * C139594 +
           (((C110589 + C110588) * C5913 + (C110587 + C110586) * C139300) *
                C92451 +
            ((C121534 + C121535) * C5913 + (C121536 + C121537) * C139300) *
                C139588) *
               C139286 * C12239) *
              C139560 +
          ((((C113399 + C113398) * C5913 + (C113397 + C113396) * C139300) *
                C92451 +
            ((C115986 + C115987) * C5913 + (C115988 + C115989) * C139300) *
                C139588) *
               C139286 * C139594 -
           (((C113396 + C113397) * C139300 + (C113398 + C113399) * C5913) *
                C139588 +
            ((C13796 * C847 + C139586 * C1129 + C13795 * C841 +
              C13593 * C1125) *
                 C139300 +
             (C13796 * C832 + C139586 * C1121 + C13795 * C831 +
              C13593 * C1118) *
                 C5913) *
                C92451) *
               C139286 * C139593 -
           (((C13796 * C73225 + C139586 * C73383 + C13795 * C26833 +
              C13593 * C27047) *
                 C139300 +
             (C13796 * C73224 + C139586 * C73382 + C13795 * C26831 +
              C13593 * C27045) *
                 C5913) *
                C139588 +
            ((C115989 + C115988) * C139300 + (C115987 + C115986) * C5913) *
                C92451) *
               C139286 * C12239) *
              C139377)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[116] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C831 + C139586 * C1118) *
                C2783 +
            (C13795 * C182 + C13593 * C394 + C13796 * C939 + C139586 * C1231) *
                C139560 -
            (C13796 * C832 + C139586 * C1121 + C13795 * C831 + C13593 * C1118) *
                C2784 -
            (C13796 * C940 + C139586 * C1232 + C13795 * C939 + C13593 * C1231) *
                C139377) *
               C92451 +
           ((C110582 + C110583) * C2783 + (C110696 + C110697) * C139560 -
            (C113398 + C113399) * C2784 - (C113534 + C113535) * C139377) *
               C139588) *
              C139286 * C139300 * C139593 +
          (((C113399 + C113398) * C2784 -
            ((C110697 + C110696) * C139560 + (C110583 + C110582) * C2783) +
            (C113535 + C113534) * C139377) *
               C92451 +
           ((C115986 + C115987) * C2784 -
            ((C110698 + C110699) * C139560 + (C110588 + C110589) * C2783) +
            (C116092 + C116093) * C139377) *
               C139588) *
              C139286 * C139300 * C139594 +
          (((C110589 + C110588) * C2783 + (C110699 + C110698) * C139560 -
            (C115987 + C115986) * C2784 - (C116093 + C116092) * C139377) *
               C92451 +
           ((C121534 + C121535) * C2783 + (C121608 + C121609) * C139560 -
            (C13796 * C73224 + C139586 * C73382 + C13795 * C26831 +
             C13593 * C27045) *
                C2784 -
            (C13796 * C73278 + C139586 * C73434 + C13795 * C26905 +
             C13593 * C27115) *
                C139377) *
               C139588) *
              C139286 * C139300 * C12239)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[116] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C831 + C139586 * C1118) *
                C12388 +
            (C13795 * C245 + C13593 * C474 + C13796 * C1029 + C139586 * C1339) *
                C139593 -
            (C110583 + C110582) * C12389 - (C110806 + C110807) * C139594 +
            (C110589 + C110588) * C12390 + (C110808 + C110809) * C12239) *
               C92451 +
           ((C110582 + C110583) * C12388 + (C110807 + C110806) * C139593 -
            (C110588 + C110589) * C12389 - (C110809 + C110808) * C139594 +
            (C121534 + C121535) * C12390 + (C121681 + C121680) * C12239) *
               C139588) *
              C139286 * C139560 +
          (((C113399 + C113398) * C12389 -
            ((C13796 * C1030 + C139586 * C1340 + C13795 * C1029 +
              C13593 * C1339) *
                 C139593 +
             (C13796 * C832 + C139586 * C1121 + C13795 * C831 +
              C13593 * C1118) *
                 C12388) +
            (C113670 + C113671) * C139594 - (C115987 + C115986) * C12390 -
            (C116196 + C116197) * C12239) *
               C92451 +
           ((C115986 + C115987) * C12389 -
            ((C113671 + C113670) * C139593 + (C113398 + C113399) * C12388) +
            (C116197 + C116196) * C139594 -
            (C13796 * C73224 + C139586 * C73382 + C13795 * C26831 +
             C13593 * C27045) *
                C12390 -
            (C13796 * C73330 + C139586 * C73485 + C13795 * C26975 +
             C13593 * C27182) *
                C12239) *
               C139588) *
              C139286 * C139377) *
         C139300) /
        (p * q * std::sqrt(p + q));
    d2eezx[116] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C92849 * C107 + C92451 * C555 + C92850 * C1767 +
              C139588 * C2376) *
                 C5913 +
             (C92849 * C116 + C92451 * C561 + C92850 * C1777 +
              C139588 * C2383) *
                 C139300) *
                C139286 * C13593 +
            ((C109946 + C109947) * C5913 + (C109948 + C109949) * C139300) *
                C139286 * C139586) *
               C139593 -
           (((C113810 + C113811) * C139300 + (C113812 + C113813) * C5913) *
                C139286 * C139586 +
            ((C92850 * C1783 + C139588 * C2387 + C92849 * C1777 +
              C92451 * C2383) *
                 C139300 +
             (C92850 * C1768 + C139588 * C2379 + C92849 * C1767 +
              C92451 * C2376) *
                 C5913) *
                C139286 * C13593) *
               C139594 +
           (((C92849 * C1768 + C92451 * C2379 + C92850 * C10815 +
              C139588 * C11155) *
                 C5913 +
             (C92849 * C1783 + C92451 * C2387 + C92850 * C10818 +
              C139588 * C11158) *
                 C139300) *
                C139286 * C13593 +
            ((C116304 + C116305) * C5913 + (C116306 + C116307) * C139300) *
                C139286 * C139586) *
               C12239) *
              C139560 +
          ((((C113813 + C113812) * C5913 + (C113811 + C113810) * C139300) *
                C139286 * C13593 +
            ((C119286 + C119287) * C5913 + (C119288 + C119289) * C139300) *
                C139286 * C139586) *
               C139594 -
           (((C109950 + C109951) * C139300 + (C109952 + C109953) * C5913) *
                C139286 * C139586 +
            ((C109949 + C109948) * C139300 + (C109947 + C109946) * C5913) *
                C139286 * C13593) *
               C139593 -
           (((C92850 * C73225 + C139588 * C73537 + C92849 * C21081 +
              C92451 * C21717) *
                 C139300 +
             (C92850 * C73224 + C139588 * C73536 + C92849 * C21079 +
              C92451 * C21715) *
                 C5913) *
                C139286 * C139586 +
            ((C116307 + C116306) * C139300 + (C116305 + C116304) * C5913) *
                C139286 * C13593) *
               C12239) *
              C139377)) /
        (p * q * std::sqrt(p + q));
    d2eezy[116] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1767 + C139588 * C2376) *
                C2783 +
            (C92849 * C182 + C92451 * C641 + C92850 * C1873 + C139588 * C2492) *
                C139560 -
            (C109947 + C109946) * C2784 - (C110060 + C110061) * C139377) *
               C139286 * C13593 +
           ((C109946 + C109947) * C2783 + (C110061 + C110060) * C139560 -
            (C109952 + C109953) * C2784 - (C110063 + C110062) * C139377) *
               C139286 * C139586) *
              C139300 * C139593 +
          (((C113813 + C113812) * C2784 -
            ((C92850 * C1874 + C139588 * C2493 + C92849 * C1873 +
              C92451 * C2492) *
                 C139560 +
             (C92850 * C1768 + C139588 * C2379 + C92849 * C1767 +
              C92451 * C2376) *
                 C2783) +
            (C113948 + C113949) * C139377) *
               C139286 * C13593 +
           ((C119286 + C119287) * C2784 -
            ((C113949 + C113948) * C139560 + (C113812 + C113813) * C2783) +
            (C119393 + C119392) * C139377) *
               C139286 * C139586) *
              C139300 * C139594 +
          (((C92849 * C1768 + C92451 * C2379 + C92850 * C10815 +
             C139588 * C11155) *
                C2783 +
            (C92849 * C1874 + C92451 * C2493 + C92850 * C10877 +
             C139588 * C11211) *
                C139560 -
            (C116305 + C116304) * C2784 - (C116410 + C116411) * C139377) *
               C139286 * C13593 +
           ((C116304 + C116305) * C2783 + (C116411 + C116410) * C139560 -
            (C92850 * C73224 + C139588 * C73536 + C92849 * C21079 +
             C92451 * C21715) *
                C2784 -
            (C92850 * C73278 + C139588 * C73588 + C92849 * C21197 +
             C92451 * C21830) *
                C139377) *
               C139286 * C139586) *
              C139300 * C12239)) /
        (p * q * std::sqrt(p + q));
    d2eezz[116] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1767 + C139588 * C2376) *
                C12388 +
            (C92849 * C245 + C92451 * C719 + C92850 * C1965 + C139588 * C2591) *
                C139593 -
            (C92850 * C1768 + C139588 * C2379 + C92849 * C1767 +
             C92451 * C2376) *
                C12389 -
            (C92850 * C1966 + C139588 * C2592 + C92849 * C1965 +
             C92451 * C2591) *
                C139594 +
            (C92849 * C1768 + C92451 * C2379 + C92850 * C10815 +
             C139588 * C11155) *
                C12390 +
            (C92849 * C1966 + C92451 * C2592 + C92850 * C10937 +
             C139588 * C11262) *
                C12239) *
               C139286 * C13593 +
           ((C109946 + C109947) * C12388 + (C110170 + C110171) * C139593 -
            (C113812 + C113813) * C12389 - (C114084 + C114085) * C139594 +
            (C116304 + C116305) * C12390 + (C116514 + C116515) * C12239) *
               C139286 * C139586) *
              C139560 +
          (((C113813 + C113812) * C12389 -
            ((C110171 + C110170) * C139593 + (C109947 + C109946) * C12388) +
            (C114085 + C114084) * C139594 - (C116305 + C116304) * C12390 -
            (C116515 + C116514) * C12239) *
               C139286 * C13593 +
           ((C119286 + C119287) * C12389 -
            ((C110172 + C110173) * C139593 + (C109952 + C109953) * C12388) +
            (C119496 + C119497) * C139594 -
            (C92850 * C73224 + C139588 * C73536 + C92849 * C21079 +
             C92451 * C21715) *
                C12390 -
            (C92850 * C73330 + C139588 * C73639 + C92849 * C21305 +
             C92451 * C21933) *
                C12239) *
               C139286 * C139586) *
              C139377) *
         C139300) /
        (p * q * std::sqrt(p + q));
    d2eexx[117] +=
        (-std::pow(Pi, 2.5) *
         ((((((C63381 * C107 + C139286 * C113) * C5913 +
              (C63381 * C116 + C139286 * C125) * C139300) *
                 C13593 +
             (C68304 + C68305) * C139586) *
                C92451 +
            ((C83091 + C83092) * C13593 + C83093 * C139586) * C139588) *
               C9466 -
           ((C83094 * C139586 + (C83095 + C83096) * C13593) * C139588 +
            (C83097 * C139586 + (C83092 + C83091) * C13593) * C92451) *
               C139403) *
              C823 +
          (((C83093 * C13593 + C86139 * C139586) * C92451 +
            (C83098 * C13593 + (C68859 + C68860) * C139586) * C139588) *
               C139403 -
           ((C71170 * C139586 + C83097 * C13593) * C139588 +
            ((C68307 + C68306) * C139586 + (C68305 + C68304) * C13593) *
                C92451) *
               C9466) *
              C824 +
          (((C68314 * C13593 + (C68309 + C68308) * C139586) * C92451 +
            (C86139 * C13593 + (C71177 + C71178) * C139586) * C139588) *
               C9466 -
           ((((C63381 * C68837 + C139286 * C68839) * C139300 +
              (C63381 * C68836 + C139286 * C68838) * C5913) *
                 C139586 +
             (C68860 + C68859) * C13593) *
                C139588 +
            ((C71178 + C71177) * C139586 + C71170 * C13593) * C92451) *
               C139403) *
              C825)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139286 * C113) * C5230 +
             (C63381 * C116 + C139286 * C125) * C5225 -
             (C63381 * C108 + C139286 * C114) * C5231 -
             (C63381 * C117 + C139286 * C126) * C5226 +
             (C63381 * C109 + C139286 * C115) * C5232 +
             (C63381 * C118 + C139286 * C127) * C5227) *
                C13593 +
            (C67640 + C67641 - C67642 - C67643 + C67644 + C67645) * C139586) *
               C92451 +
           ((C87086 + C87087 - C87088 - C87089 + C87090 + C87091) * C13593 +
            (C81583 + C81584 - C81585 - C81586 + C81587 + C81588) * C139586) *
               C139588) *
              C9466 +
          (((C87088 - (C87087 + C87086) + C87089 - C87090 - C87091) * C13593 +
            (C81585 - (C81584 + C81583) + C81586 - C81587 - C81588) * C139586) *
               C92451 +
           ((C77537 * C5231 - (C77538 * C5225 + C77539 * C5230) +
             C77540 * C5226 - (C63381 * C1770 + C139286 * C1782) * C5232 -
             (C63381 * C1785 + C139286 * C1794) * C5227) *
                C13593 +
            (C77541 * C5231 - (C68854 * C5225 + C68853 * C5230) +
             C77542 * C5226 - (C63381 * C6440 + C139286 * C6446) * C5232 -
             (C63381 * C6443 + C139286 * C6449) * C5227) *
                C139586) *
               C139588) *
              C139403) *
         C139328) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139286 * C113) * C5913 +
             (C63381 * C116 + C139286 * C125) * C139300) *
                C13593 +
            (C68304 + C68305) * C139586) *
               C92451 +
           ((C83091 + C83092) * C13593 + C83093 * C139586) * C139588) *
              C10809 -
          ((C83094 * C139586 + (C83095 + C83096) * C13593) * C139588 +
           (C83097 * C139586 + (C83092 + C83091) * C13593) * C92451) *
              C10810 +
          (((C83096 + C83095) * C13593 + C83098 * C139586) * C92451 +
           ((C88854 + C88855) * C13593 + (C83105 + C83106) * C139586) *
               C139588) *
              C10811 -
          ((((C63381 * C88844 + C139286 * C88846) * C139300 +
             (C63381 * C88843 + C139286 * C88845) * C5913) *
                C139586 +
            ((C63381 * C43408 + C139286 * C43412) * C139300 +
             (C63381 * C43406 + C139286 * C43410) * C5913) *
                C13593) *
               C139588 +
           ((C83106 + C83105) * C139586 + (C88855 + C88854) * C13593) *
               C92451) *
              C10812) *
         C139328) /
            (p * q * std::sqrt(p + q));
    d2eexy[117] +=
        (-std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139286 * C113) * C934 +
             (C63381 * C182 + C139286 * C188) * C823 - C63884 * C935 -
             C63997 * C824 + C63888 * C936 + C63998 * C825) *
                C13593 +
            (C63884 * C934 + C63997 * C823 - C63888 * C935 - C63998 * C824 +
             C63894 * C936 + C63999 * C825) *
                C139586) *
               C92451 +
           ((C88072 + C88073 - C88074 - C88075 + C88076 + C88077) * C13593 +
            (C88078 + C88079 - C88080 - C88081 + C88082 + C88083) * C139586) *
               C139588) *
              C139300 * C9466 +
          (((C88074 - (C88073 + C88072) + C88075 - C88076 - C88077) * C13593 +
            (C88080 - (C88079 + C88078) + C88081 - C88082 - C88083) * C139586) *
               C92451 +
           ((C68853 * C935 - (C77676 * C823 + C77539 * C934) + C68941 * C824 -
             C68855 * C936 - C68942 * C825) *
                C13593 +
            (C68855 * C935 - (C68941 * C823 + C68853 * C934) + C68942 * C824 -
             (C63381 * C68836 + C139286 * C68838) * C936 -
             (C63381 * C68934 + C139286 * C68935) * C825) *
                C139586) *
               C139588) *
              C139300 * C139403)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((((C63381 * C107 + C139286 * C113) * C181 +
              (C63381 * C182 + C139286 * C188) * C139328) *
                 C13593 +
             (C63884 * C181 + C63997 * C139328) * C139586) *
                C92451 +
            ((C77651 + C77677) * C13593 + (C77654 + C77655) * C139586) *
                C139588) *
               C5225 -
           (((C77656 + C77657) * C139586 + (C77678 + C77660) * C13593) *
                C139588 +
            ((C64000 * C139328 + C63886 * C181) * C139586 +
             ((C63381 * C183 + C139286 * C189) * C139328 +
              (C63381 * C108 + C139286 * C114) * C181) *
                 C13593) *
                C92451) *
               C5226 +
           ((((C63381 * C109 + C139286 * C115) * C181 +
              (C63381 * C184 + C139286 * C190) * C139328) *
                 C13593 +
             (C65320 * C181 + C65406 * C139328) * C139586) *
                C92451 +
            ((C79541 + C79547) * C13593 + (C79544 + C79545) * C139586) *
                C139588) *
               C5227) *
              C9466 +
          ((((C77660 + C77678) * C13593 + (C77657 + C77656) * C139586) *
                C92451 +
            ((C77661 + C77679) * C13593 + (C77664 + C77680) * C139586) *
                C139588) *
               C5226 -
           (((C77667 + C77668) * C139586 + (C77681 + C77671) * C13593) *
                C139588 +
            ((C77655 + C77654) * C139586 + (C77677 + C77651) * C13593) *
                C92451) *
               C5225 -
           ((((C63381 * C6526 + C139286 * C6529) * C139328 +
              (C63381 * C6440 + C139286 * C6446) * C181) *
                 C139586 +
             ((C63381 * C1876 + C139286 * C1884) * C139328 +
              (C63381 * C1770 + C139286 * C1782) * C181) *
                 C13593) *
                C139588 +
            ((C79545 + C79544) * C139586 + (C79547 + C79541) * C13593) *
                C92451) *
               C5227) *
              C139403)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139286 * C113) * C181 +
             (C63381 * C182 + C139286 * C188) * C139328) *
                C13593 +
            (C63884 * C181 + C63997 * C139328) * C139586) *
               C92451 +
           ((C77651 + C77677) * C13593 + (C77654 + C77655) * C139586) *
               C139588) *
              C139300 * C10809 -
          (((C77667 + C77668) * C139586 + (C77681 + C77671) * C13593) *
               C139588 +
           ((C77655 + C77654) * C139586 + (C77677 + C77651) * C13593) *
               C92451) *
              C139300 * C10810 +
          (((C77671 + C77681) * C13593 + (C77668 + C77667) * C139586) * C92451 +
           ((C88924 + C88930) * C13593 + (C88927 + C88928) * C139586) *
               C139588) *
              C139300 * C10811 -
          ((((C63381 * C88921 + C139286 * C88922) * C139328 +
             (C63381 * C88843 + C139286 * C88845) * C181) *
                C139586 +
            ((C63381 * C43492 + C139286 * C43494) * C139328 +
             (C63381 * C43406 + C139286 * C43410) * C181) *
                C13593) *
               C139588 +
           ((C88928 + C88927) * C139586 + (C88930 + C88924) * C13593) *
               C92451) *
              C139300 * C10812)) /
            (p * q * std::sqrt(p + q));
    d2eexz[117] +=
        (-std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139286 * C113) * C9616 +
             (C63381 * C245 + C139286 * C251) * C9466 - C77533 * C9617 -
             C77790 * C139403) *
                C13593 +
            (C72708 + C72709 - C72710 - C72711) * C139586) *
               C92451 +
           ((C77533 * C9616 + C77790 * C9466 - C77539 * C9617 -
             C77791 * C139403) *
                C13593 +
            (C88182 + C88183 - C88184 - C88185) * C139586) *
               C139588) *
              C823 +
          (((C72710 - (C72709 + C72708) + C72711) * C13593 +
            (C72714 - (C72713 + C72712) + C72715) * C139586) *
               C92451 +
           ((C88184 - (C88183 + C88182) + C88185) * C13593 +
            (C88186 - (C88187 + C88188) + C88189) * C139586) *
               C139588) *
              C824 +
          ((C72722 * C13593 + (C72718 + C72717 - C72716 - C72719) * C139586) *
               C92451 +
           ((C88188 + C88187 - C88186 - C88189) * C13593 +
            (C71175 * C9616 + C71341 * C9466 -
             (C63381 * C68836 + C139286 * C68838) * C9617 -
             (C63381 * C69016 + C139286 * C69017) * C139403) *
                C139586) *
               C139588) *
              C825) *
         C139300) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139286 * C113) * C9616 +
             (C63381 * C245 + C139286 * C251) * C9466 - C77533 * C9617 -
             C77790 * C139403) *
                C13593 +
            (C72708 + C72709 - C72710 - C72711) * C139586) *
               C92451 +
           ((C77533 * C9616 + C77790 * C9466 - C77539 * C9617 -
             C77791 * C139403) *
                C13593 +
            (C88182 + C88183 - C88184 - C88185) * C139586) *
               C139588) *
              C139328 * C5225 +
          (((C77535 * C9617 -
             ((C63381 * C246 + C139286 * C252) * C9466 +
              (C63381 * C108 + C139286 * C114) * C9616) +
             C77792 * C139403) *
                C13593 +
            (C73935 - (C73936 + C73937) + C73938) * C139586) *
               C92451 +
           ((C77537 * C9617 - (C77792 * C9466 + C77535 * C9616) +
             C77793 * C139403) *
                C13593 +
            (C89820 - (C89821 + C89822) + C89823) * C139586) *
               C139588) *
              C139328 * C5226 +
          ((((C63381 * C109 + C139286 * C115) * C9616 +
             (C63381 * C247 + C139286 * C253) * C9466 - C79439 * C9617 -
             C79648 * C139403) *
                C13593 +
            (C65320 * C9616 + C65488 * C9466 - C78537 * C9617 -
             C78743 * C139403) *
                C139586) *
               C92451 +
           ((C79439 * C9616 + C79648 * C9466 -
             (C63381 * C1770 + C139286 * C1782) * C9617 -
             (C63381 * C1968 + C139286 * C1976) * C139403) *
                C13593 +
            (C78537 * C9616 + C78743 * C9466 -
             (C63381 * C6440 + C139286 * C6446) * C9617 -
             (C63381 * C6606 + C139286 * C6609) * C139403) *
                C139586) *
               C139588) *
              C139328 * C5227)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139286 * C113) * C10931 +
            (C63381 * C245 + C139286 * C251) * C10809 - C77533 * C10932 -
            C77790 * C10810 + C77539 * C10933 + C77791 * C10811 -
            C88852 * C10934 - C89001 * C10812) *
               C13593 +
           (C63884 * C10931 + C64095 * C10809 - C66724 * C10932 -
            C66966 * C10810 + C68853 * C10933 + C69033 * C10811 -
            C83103 * C10934 - C83329 * C10812) *
               C139586) *
              C92451 +
          ((C77533 * C10931 + C77790 * C10809 - C77539 * C10932 -
            C77791 * C10810 + C88852 * C10933 + C89001 * C10811 -
            (C63381 * C43406 + C139286 * C43410) * C10934 -
            (C63381 * C43568 + C139286 * C43570) * C10812) *
               C13593 +
           (C66724 * C10931 + C66966 * C10809 - C68853 * C10932 -
            C69033 * C10810 + C83103 * C10933 + C83329 * C10811 -
            (C63381 * C88843 + C139286 * C88845) * C10934 -
            (C63381 * C88996 + C139286 * C88997) * C10812) *
               C139586) *
              C139588) *
         C139328 * C139300) /
            (p * q * std::sqrt(p + q));
    d2eeyx[117] +=
        (-std::pow(Pi, 2.5) *
         (((((C13795 * C107 + C13593 * C308 + C13796 * C831 + C139586 * C1118) *
                 C5913 +
             (C13795 * C116 + C13593 * C314 + C13796 * C841 + C139586 * C1125) *
                 C139300) *
                C92451 +
            ((C110582 + C110583) * C5913 + (C110584 + C110585) * C139300) *
                C139588) *
               C139286 * C9466 -
           (((C110586 + C110587) * C139300 + (C110588 + C110589) * C5913) *
                C139588 +
            ((C110585 + C110584) * C139300 + (C110583 + C110582) * C5913) *
                C92451) *
               C139286 * C139403) *
              C823 +
          ((((C113399 + C113398) * C5913 + (C113397 + C113396) * C139300) *
                C92451 +
            ((C115986 + C115987) * C5913 + (C115988 + C115989) * C139300) *
                C139588) *
               C139286 * C139403 -
           (((C113396 + C113397) * C139300 + (C113398 + C113399) * C5913) *
                C139588 +
            ((C13796 * C847 + C139586 * C1129 + C13795 * C841 +
              C13593 * C1125) *
                 C139300 +
             (C13796 * C832 + C139586 * C1121 + C13795 * C831 +
              C13593 * C1118) *
                 C5913) *
                C92451) *
               C139286 * C9466) *
              C824 +
          ((((C13795 * C832 + C13593 * C1121 + C13796 * C5916 +
              C139586 * C6094) *
                 C5913 +
             (C13795 * C847 + C13593 * C1129 + C13796 * C5919 +
              C139586 * C6097) *
                 C139300) *
                C92451 +
            ((C118968 + C118969) * C5913 + (C118970 + C118971) * C139300) *
                C139588) *
               C139286 * C9466 -
           (((C13796 * C68837 + C139586 * C69111 + C13795 * C21081 +
              C13593 * C21415) *
                 C139300 +
             (C13796 * C68836 + C139586 * C69110 + C13795 * C21079 +
              C13593 * C21413) *
                 C5913) *
                C139588 +
            ((C118971 + C118970) * C139300 + (C118969 + C118968) * C5913) *
                C92451) *
               C139286 * C139403) *
              C825)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C831 + C139586 * C1118) *
                C5230 +
            (C13795 * C116 + C13593 * C314 + C13796 * C841 + C139586 * C1125) *
                C5225 -
            (C13822 + C13823) * C5231 - (C13824 + C13825) * C5226 +
            (C13826 + C13827) * C5232 + (C13828 + C13829) * C5227) *
               C92451 +
           ((C110582 + C110583) * C5230 + (C110584 + C110585) * C5225 -
            (C15709 + C15708) * C5231 - (C15711 + C15710) * C5226 +
            (C17604 + C17603) * C5232 + (C17606 + C17605) * C5227) *
               C139588) *
              C139286 * C9466 +
          (((C15708 + C15709) * C5231 -
            ((C110585 + C110584) * C5225 + (C110583 + C110582) * C5230) +
            (C15710 + C15711) * C5226 - (C17603 + C17604) * C5232 -
            (C17605 + C17606) * C5227) *
               C92451 +
           ((C15713 + C15712) * C5231 -
            ((C110586 + C110587) * C5225 + (C110588 + C110589) * C5230) +
            (C15715 + C15714) * C5226 -
            (C13796 * C6440 + C139586 * C6686 + C13795 * C1770 +
             C13593 * C2059) *
                C5232 -
            (C13796 * C6443 + C139586 * C6689 + C13795 * C1785 +
             C13593 * C2067) *
                C5227) *
               C139588) *
              C139286 * C139403) *
         C139328) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C831 + C139586 * C1118) *
                C5913 +
            (C13795 * C116 + C13593 * C314 + C13796 * C841 + C139586 * C1125) *
                C139300) *
               C92451 +
           ((C110582 + C110583) * C5913 + (C110584 + C110585) * C139300) *
               C139588) *
              C139286 * C10809 -
          (((C110586 + C110587) * C139300 + (C110588 + C110589) * C5913) *
               C139588 +
           ((C110585 + C110584) * C139300 + (C110583 + C110582) * C5913) *
               C92451) *
              C139286 * C10810 +
          (((C110589 + C110588) * C5913 + (C110587 + C110586) * C139300) *
               C92451 +
           ((C121534 + C121535) * C5913 + (C121536 + C121537) * C139300) *
               C139588) *
              C139286 * C10811 -
          (((C13796 * C88844 + C139586 * C89068 + C13795 * C43408 +
             C13593 * C43646) *
                C139300 +
            (C13796 * C88843 + C139586 * C89067 + C13795 * C43406 +
             C13593 * C43644) *
                C5913) *
               C139588 +
           ((C121537 + C121536) * C139300 + (C121535 + C121534) * C5913) *
               C92451) *
              C139286 * C10812) *
         C139328) /
            (p * q * std::sqrt(p + q));
    d2eeyy[117] +=
        (-std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C831 + C139586 * C1118) *
                C934 +
            (C13795 * C182 + C13593 * C394 + C13796 * C939 + C139586 * C1231) *
                C823 -
            (C13796 * C832 + C139586 * C1121 + C13795 * C831 + C13593 * C1118) *
                C935 -
            (C13796 * C940 + C139586 * C1232 + C13795 * C939 + C13593 * C1231) *
                C824 +
            (C13795 * C832 + C13593 * C1121 + C13796 * C5916 +
             C139586 * C6094) *
                C936 +
            (C13795 * C940 + C13593 * C1232 + C13796 * C5982 +
             C139586 * C6148) *
                C825) *
               C92451 +
           ((C110582 + C110583) * C934 + (C110696 + C110697) * C823 -
            (C113398 + C113399) * C935 - (C113534 + C113535) * C824 +
            (C118968 + C118969) * C936 + (C119074 + C119075) * C825) *
               C139588) *
              C139286 * C139300 * C9466 +
          (((C113399 + C113398) * C935 -
            ((C110697 + C110696) * C823 + (C110583 + C110582) * C934) +
            (C113535 + C113534) * C824 - (C118969 + C118968) * C936 -
            (C119075 + C119074) * C825) *
               C92451 +
           ((C115986 + C115987) * C935 -
            ((C110698 + C110699) * C823 + (C110588 + C110589) * C934) +
            (C116092 + C116093) * C824 -
            (C13796 * C68836 + C139586 * C69110 + C13795 * C21079 +
             C13593 * C21413) *
                C936 -
            (C13796 * C68934 + C139586 * C69186 + C13795 * C21197 +
             C13593 * C21514) *
                C825) *
               C139588) *
              C139286 * C139300 * C139403)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C13795 * C107 + C13593 * C308 + C13796 * C831 + C139586 * C1118) *
                 C181 +
             (C13795 * C182 + C13593 * C394 + C13796 * C939 + C139586 * C1231) *
                 C139328) *
                C92451 +
            ((C110582 + C110583) * C181 + (C110696 + C110697) * C139328) *
                C139588) *
               C139286 * C5225 -
           (((C15823 + C15822) * C139328 + (C15709 + C15708) * C181) * C139588 +
            ((C13913 + C13912) * C139328 + (C13822 + C13823) * C181) * C92451) *
               C139286 * C5226 +
           (((C13826 + C13827) * C181 + (C13915 + C13914) * C139328) * C92451 +
            ((C17604 + C17603) * C181 + (C17709 + C17710) * C139328) *
                C139588) *
               C139286 * C5227) *
              C9466 +
          ((((C15708 + C15709) * C181 + (C15822 + C15823) * C139328) * C92451 +
            ((C15713 + C15712) * C181 + (C15824 + C15825) * C139328) *
                C139588) *
               C139286 * C5226 -
           (((C110698 + C110699) * C139328 + (C110588 + C110589) * C181) *
                C139588 +
            ((C110697 + C110696) * C139328 + (C110583 + C110582) * C181) *
                C92451) *
               C139286 * C5225 -
           (((C13796 * C6526 + C139586 * C6768 + C13795 * C1876 +
              C13593 * C2173) *
                 C139328 +
             (C13796 * C6440 + C139586 * C6686 + C13795 * C1770 +
              C13593 * C2059) *
                 C181) *
                C139588 +
            ((C17710 + C17709) * C139328 + (C17603 + C17604) * C181) * C92451) *
               C139286 * C5227) *
              C139403)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C831 + C139586 * C1118) *
                C181 +
            (C13795 * C182 + C13593 * C394 + C13796 * C939 + C139586 * C1231) *
                C139328) *
               C92451 +
           ((C110582 + C110583) * C181 + (C110696 + C110697) * C139328) *
               C139588) *
              C139286 * C139300 * C10809 -
          (((C110698 + C110699) * C139328 + (C110588 + C110589) * C181) *
               C139588 +
           ((C110697 + C110696) * C139328 + (C110583 + C110582) * C181) *
               C92451) *
              C139286 * C139300 * C10810 +
          (((C110589 + C110588) * C181 + (C110699 + C110698) * C139328) *
               C92451 +
           ((C121534 + C121535) * C181 + (C121608 + C121609) * C139328) *
               C139588) *
              C139286 * C139300 * C10811 -
          (((C13796 * C88921 + C139586 * C89147 + C13795 * C43492 +
             C13593 * C43724) *
                C139328 +
            (C13796 * C88843 + C139586 * C89067 + C13795 * C43406 +
             C13593 * C43644) *
                C181) *
               C139588 +
           ((C121609 + C121608) * C139328 + (C121535 + C121534) * C181) *
               C92451) *
              C139286 * C139300 * C10812)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[117] +=
        (-std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C831 + C139586 * C1118) *
                C9616 +
            (C13795 * C245 + C13593 * C474 + C13796 * C1029 + C139586 * C1339) *
                C9466 -
            (C110583 + C110582) * C9617 - (C110806 + C110807) * C139403) *
               C92451 +
           ((C110582 + C110583) * C9616 + (C110807 + C110806) * C9466 -
            (C110588 + C110589) * C9617 - (C110809 + C110808) * C139403) *
               C139588) *
              C139286 * C823 +
          (((C113399 + C113398) * C9617 -
            ((C13796 * C1030 + C139586 * C1340 + C13795 * C1029 +
              C13593 * C1339) *
                 C9466 +
             (C13796 * C832 + C139586 * C1121 + C13795 * C831 +
              C13593 * C1118) *
                 C9616) +
            (C113670 + C113671) * C139403) *
               C92451 +
           ((C115986 + C115987) * C9617 -
            ((C113671 + C113670) * C9466 + (C113398 + C113399) * C9616) +
            (C116197 + C116196) * C139403) *
               C139588) *
              C139286 * C824 +
          (((C13795 * C832 + C13593 * C1121 + C13796 * C5916 +
             C139586 * C6094) *
                C9616 +
            (C13795 * C1030 + C13593 * C1340 + C13796 * C6038 +
             C139586 * C6203) *
                C9466 -
            (C118969 + C118968) * C9617 - (C119178 + C119179) * C139403) *
               C92451 +
           ((C118968 + C118969) * C9616 + (C119179 + C119178) * C9466 -
            (C13796 * C68836 + C139586 * C69110 + C13795 * C21079 +
             C13593 * C21413) *
                C9617 -
            (C13796 * C69016 + C139586 * C69261 + C13795 * C21305 +
             C13593 * C21614) *
                C139403) *
               C139588) *
              C139286 * C825) *
         C139300) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C831 + C139586 * C1118) *
                C9616 +
            (C13795 * C245 + C13593 * C474 + C13796 * C1029 + C139586 * C1339) *
                C9466 -
            (C110583 + C110582) * C9617 - (C110806 + C110807) * C139403) *
               C92451 +
           ((C110582 + C110583) * C9616 + (C110807 + C110806) * C9466 -
            (C110588 + C110589) * C9617 - (C110809 + C110808) * C139403) *
               C139588) *
              C139286 * C139328 * C5225 +
          (((C15708 + C15709) * C9617 -
            ((C13997 + C13996) * C9466 + (C13822 + C13823) * C9616) +
            (C15933 + C15932) * C139403) *
               C92451 +
           ((C15713 + C15712) * C9617 -
            ((C15932 + C15933) * C9466 + (C15709 + C15708) * C9616) +
            (C15934 + C15935) * C139403) *
               C139588) *
              C139286 * C139328 * C5226 +
          (((C13826 + C13827) * C9616 + (C13999 + C13998) * C9466 -
            (C17603 + C17604) * C9617 - (C17814 + C17813) * C139403) *
               C92451 +
           ((C17604 + C17603) * C9616 + (C17813 + C17814) * C9466 -
            (C13796 * C6440 + C139586 * C6686 + C13795 * C1770 +
             C13593 * C2059) *
                C9617 -
            (C13796 * C6606 + C139586 * C6845 + C13795 * C1968 +
             C13593 * C2274) *
                C139403) *
               C139588) *
              C139286 * C139328 * C5227)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C13795 * C107 + C13593 * C308 + C13796 * C831 + C139586 * C1118) *
               C10931 +
           (C13795 * C245 + C13593 * C474 + C13796 * C1029 + C139586 * C1339) *
               C10809 -
           (C110583 + C110582) * C10932 - (C110806 + C110807) * C10810 +
           (C110589 + C110588) * C10933 + (C110808 + C110809) * C10811 -
           (C121535 + C121534) * C10934 - (C121680 + C121681) * C10812) *
              C92451 +
          ((C110582 + C110583) * C10931 + (C110807 + C110806) * C10809 -
           (C110588 + C110589) * C10932 - (C110809 + C110808) * C10810 +
           (C121534 + C121535) * C10933 + (C121681 + C121680) * C10811 -
           (C13796 * C88843 + C139586 * C89067 + C13795 * C43406 +
            C13593 * C43644) *
               C10934 -
           (C13796 * C88996 + C139586 * C89220 + C13795 * C43568 +
            C13593 * C43796) *
               C10812) *
              C139588) *
         C139286 * C139328 * C139300) /
            (p * q * std::sqrt(p + q));
    d2eezx[117] +=
        (-std::pow(Pi, 2.5) *
         (((((C92849 * C107 + C92451 * C555 + C92850 * C1767 +
              C139588 * C2376) *
                 C5913 +
             (C92849 * C116 + C92451 * C561 + C92850 * C1777 +
              C139588 * C2383) *
                 C139300) *
                C139286 * C13593 +
            ((C109946 + C109947) * C5913 + (C109948 + C109949) * C139300) *
                C139286 * C139586) *
               C9466 -
           (((C113810 + C113811) * C139300 + (C113812 + C113813) * C5913) *
                C139286 * C139586 +
            ((C92850 * C1783 + C139588 * C2387 + C92849 * C1777 +
              C92451 * C2383) *
                 C139300 +
             (C92850 * C1768 + C139588 * C2379 + C92849 * C1767 +
              C92451 * C2376) *
                 C5913) *
                C139286 * C13593) *
               C139403) *
              C823 +
          ((((C113813 + C113812) * C5913 + (C113811 + C113810) * C139300) *
                C139286 * C13593 +
            ((C119286 + C119287) * C5913 + (C119288 + C119289) * C139300) *
                C139286 * C139586) *
               C139403 -
           (((C109950 + C109951) * C139300 + (C109952 + C109953) * C5913) *
                C139286 * C139586 +
            ((C109949 + C109948) * C139300 + (C109947 + C109946) * C5913) *
                C139286 * C13593) *
               C9466) *
              C824 +
          ((((C109953 + C109952) * C5913 + (C109951 + C109950) * C139300) *
                C139286 * C13593 +
            ((C115438 + C115439) * C5913 + (C115440 + C115441) * C139300) *
                C139286 * C139586) *
               C9466 -
           (((C92850 * C68837 + C139588 * C69337 + C92849 * C24131 +
              C92451 * C24767) *
                 C139300 +
             (C92850 * C68836 + C139588 * C69336 + C92849 * C24129 +
              C92451 * C24765) *
                 C5913) *
                C139286 * C139586 +
            ((C119289 + C119288) * C139300 + (C119287 + C119286) * C5913) *
                C139286 * C13593) *
               C139403) *
              C825)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1767 + C139588 * C2376) *
                C5230 +
            (C92849 * C116 + C92451 * C561 + C92850 * C1777 + C139588 * C2383) *
                C5225 -
            (C92876 + C92877) * C5231 - (C92878 + C92879) * C5226 +
            (C92880 + C92881) * C5232 + (C92882 + C92883) * C5227) *
               C139286 * C13593 +
           ((C109946 + C109947) * C5230 + (C109948 + C109949) * C5225 -
            (C93759 + C93758) * C5231 - (C93761 + C93760) * C5226 +
            (C95707 + C95706) * C5232 + (C95709 + C95708) * C5227) *
               C139286 * C139586) *
              C9466 +
          (((C94784 + C94785) * C5231 -
            ((C92850 * C1783 + C139588 * C2387 + C92849 * C1777 +
              C92451 * C2383) *
                 C5225 +
             (C92850 * C1768 + C139588 * C2379 + C92849 * C1767 +
              C92451 * C2376) *
                 C5230) +
            (C94786 + C94787) * C5226 - (C96636 + C96637) * C5232 -
            (C96638 + C96639) * C5227) *
               C139286 * C13593 +
           ((C97767 + C97766) * C5231 -
            ((C113810 + C113811) * C5225 + (C113812 + C113813) * C5230) +
            (C97769 + C97768) * C5226 -
            (C92850 * C6440 + C139588 * C6920 + C92849 * C4225 +
             C92451 * C4901) *
                C5232 -
            (C92850 * C6443 + C139588 * C6923 + C92849 * C4232 +
             C92451 * C4905) *
                C5227) *
               C139286 * C139586) *
              C139403) *
         C139328) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1767 + C139588 * C2376) *
                C5913 +
            (C92849 * C116 + C92451 * C561 + C92850 * C1777 + C139588 * C2383) *
                C139300) *
               C139286 * C13593 +
           ((C109946 + C109947) * C5913 + (C109948 + C109949) * C139300) *
               C139286 * C139586) *
              C10809 -
          (((C113810 + C113811) * C139300 + (C113812 + C113813) * C5913) *
               C139286 * C139586 +
           ((C92850 * C1783 + C139588 * C2387 + C92849 * C1777 +
             C92451 * C2383) *
                C139300 +
            (C92850 * C1768 + C139588 * C2379 + C92849 * C1767 +
             C92451 * C2376) *
                C5913) *
               C139286 * C13593) *
              C10810 +
          (((C92849 * C1768 + C92451 * C2379 + C92850 * C10815 +
             C139588 * C11155) *
                C5913 +
            (C92849 * C1783 + C92451 * C2387 + C92850 * C10818 +
             C139588 * C11158) *
                C139300) *
               C139286 * C13593 +
           ((C116304 + C116305) * C5913 + (C116306 + C116307) * C139300) *
               C139286 * C139586) *
              C10811 -
          (((C92850 * C88844 + C139588 * C89294 + C92849 * C26833 +
             C92451 * C27253) *
                C139300 +
            (C92850 * C88843 + C139588 * C89293 + C92849 * C26831 +
             C92451 * C27251) *
                C5913) *
               C139286 * C139586 +
           ((C92850 * C43408 + C139588 * C43870 + C92849 * C10818 +
             C92451 * C11158) *
                C139300 +
            (C92850 * C43406 + C139588 * C43868 + C92849 * C10815 +
             C92451 * C11155) *
                C5913) *
               C139286 * C13593) *
              C10812) *
         C139328) /
            (p * q * std::sqrt(p + q));
    d2eezy[117] +=
        (-std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1767 + C139588 * C2376) *
                C934 +
            (C92849 * C182 + C92451 * C641 + C92850 * C1873 + C139588 * C2492) *
                C823 -
            (C109947 + C109946) * C935 - (C110060 + C110061) * C824 +
            (C109953 + C109952) * C936 + (C110062 + C110063) * C825) *
               C139286 * C13593 +
           ((C109946 + C109947) * C934 + (C110061 + C110060) * C823 -
            (C109952 + C109953) * C935 - (C110063 + C110062) * C824 +
            (C115438 + C115439) * C936 + (C115513 + C115512) * C825) *
               C139286 * C139586) *
              C139300 * C9466 +
          (((C113813 + C113812) * C935 -
            ((C92850 * C1874 + C139588 * C2493 + C92849 * C1873 +
              C92451 * C2492) *
                 C823 +
             (C92850 * C1768 + C139588 * C2379 + C92849 * C1767 +
              C92451 * C2376) *
                 C934) +
            (C113948 + C113949) * C824 - (C119287 + C119286) * C936 -
            (C119392 + C119393) * C825) *
               C139286 * C13593 +
           ((C119286 + C119287) * C935 -
            ((C113949 + C113948) * C823 + (C113812 + C113813) * C934) +
            (C119393 + C119392) * C824 -
            (C92850 * C68836 + C139588 * C69336 + C92849 * C24129 +
             C92451 * C24765) *
                C936 -
            (C92850 * C68934 + C139588 * C69420 + C92849 * C24247 +
             C92451 * C24876) *
                C825) *
               C139286 * C139586) *
              C139300 * C139403)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C92849 * C107 + C92451 * C555 + C92850 * C1767 +
              C139588 * C2376) *
                 C181 +
             (C92849 * C182 + C92451 * C641 + C92850 * C1873 +
              C139588 * C2492) *
                 C139328) *
                C139286 * C13593 +
            ((C109946 + C109947) * C181 + (C110061 + C110060) * C139328) *
                C139286 * C139586) *
               C5225 -
           (((C93872 + C93873) * C139328 + (C93759 + C93758) * C181) * C139286 *
                C139586 +
            ((C92967 + C92966) * C139328 + (C92876 + C92877) * C181) * C139286 *
                C13593) *
               C5226 +
           (((C92880 + C92881) * C181 + (C92969 + C92968) * C139328) * C139286 *
                C13593 +
            ((C95707 + C95706) * C181 + (C95812 + C95813) * C139328) * C139286 *
                C139586) *
               C5227) *
              C9466 +
          ((((C94784 + C94785) * C181 + (C94898 + C94899) * C139328) * C139286 *
                C13593 +
            ((C97767 + C97766) * C181 + (C97904 + C97905) * C139328) * C139286 *
                C139586) *
               C5226 -
           (((C113949 + C113948) * C139328 + (C113812 + C113813) * C181) *
                C139286 * C139586 +
            ((C92850 * C1874 + C139588 * C2493 + C92849 * C1873 +
              C92451 * C2492) *
                 C139328 +
             (C92850 * C1768 + C139588 * C2379 + C92849 * C1767 +
              C92451 * C2376) *
                 C181) *
                C139286 * C13593) *
               C5225 -
           (((C92850 * C6526 + C139588 * C7002 + C92849 * C4339 +
              C92451 * C5019) *
                 C139328 +
             (C92850 * C6440 + C139588 * C6920 + C92849 * C4225 +
              C92451 * C4901) *
                 C181) *
                C139286 * C139586 +
            ((C96743 + C96742) * C139328 + (C96636 + C96637) * C181) * C139286 *
                C13593) *
               C5227) *
              C139403)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1767 + C139588 * C2376) *
                C181 +
            (C92849 * C182 + C92451 * C641 + C92850 * C1873 + C139588 * C2492) *
                C139328) *
               C139286 * C13593 +
           ((C109946 + C109947) * C181 + (C110061 + C110060) * C139328) *
               C139286 * C139586) *
              C139300 * C10809 -
          (((C113949 + C113948) * C139328 + (C113812 + C113813) * C181) *
               C139286 * C139586 +
           ((C92850 * C1874 + C139588 * C2493 + C92849 * C1873 +
             C92451 * C2492) *
                C139328 +
            (C92850 * C1768 + C139588 * C2379 + C92849 * C1767 +
             C92451 * C2376) *
                C181) *
               C139286 * C13593) *
              C139300 * C10810 +
          (((C92849 * C1768 + C92451 * C2379 + C92850 * C10815 +
             C139588 * C11155) *
                C181 +
            (C92849 * C1874 + C92451 * C2493 + C92850 * C10877 +
             C139588 * C11211) *
                C139328) *
               C139286 * C13593 +
           ((C116304 + C116305) * C181 + (C116411 + C116410) * C139328) *
               C139286 * C139586) *
              C139300 * C10811 -
          (((C92850 * C88921 + C139588 * C89361 + C92849 * C26905 +
             C92451 * C27321) *
                C139328 +
            (C92850 * C88843 + C139588 * C89293 + C92849 * C26831 +
             C92451 * C27251) *
                C181) *
               C139286 * C139586 +
           ((C92850 * C43492 + C139588 * C43938 + C92849 * C10877 +
             C92451 * C11211) *
                C139328 +
            (C92850 * C43406 + C139588 * C43868 + C92849 * C10815 +
             C92451 * C11155) *
                C181) *
               C139286 * C13593) *
              C139300 * C10812)) /
            (p * q * std::sqrt(p + q));
    d2eezz[117] +=
        (-std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1767 + C139588 * C2376) *
                C9616 +
            (C92849 * C245 + C92451 * C719 + C92850 * C1965 + C139588 * C2591) *
                C9466 -
            (C92850 * C1768 + C139588 * C2379 + C92849 * C1767 +
             C92451 * C2376) *
                C9617 -
            (C92850 * C1966 + C139588 * C2592 + C92849 * C1965 +
             C92451 * C2591) *
                C139403) *
               C139286 * C13593 +
           ((C109946 + C109947) * C9616 + (C110170 + C110171) * C9466 -
            (C113812 + C113813) * C9617 - (C114084 + C114085) * C139403) *
               C139286 * C139586) *
              C823 +
          (((C113813 + C113812) * C9617 -
            ((C110171 + C110170) * C9466 + (C109947 + C109946) * C9616) +
            (C114085 + C114084) * C139403) *
               C139286 * C13593 +
           ((C119286 + C119287) * C9617 -
            ((C110172 + C110173) * C9466 + (C109952 + C109953) * C9616) +
            (C119496 + C119497) * C139403) *
               C139286 * C139586) *
              C824 +
          (((C109953 + C109952) * C9616 + (C110173 + C110172) * C9466 -
            (C119287 + C119286) * C9617 - (C119497 + C119496) * C139403) *
               C139286 * C13593 +
           ((C115438 + C115439) * C9616 + (C115584 + C115585) * C9466 -
            (C92850 * C68836 + C139588 * C69336 + C92849 * C24129 +
             C92451 * C24765) *
                C9617 -
            (C92850 * C69016 + C139588 * C69498 + C92849 * C24355 +
             C92451 * C24979) *
                C139403) *
               C139286 * C139586) *
              C825) *
         C139300) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1767 + C139588 * C2376) *
                C9616 +
            (C92849 * C245 + C92451 * C719 + C92850 * C1965 + C139588 * C2591) *
                C9466 -
            (C92850 * C1768 + C139588 * C2379 + C92849 * C1767 +
             C92451 * C2376) *
                C9617 -
            (C92850 * C1966 + C139588 * C2592 + C92849 * C1965 +
             C92451 * C2591) *
                C139403) *
               C139286 * C13593 +
           ((C109946 + C109947) * C9616 + (C110170 + C110171) * C9466 -
            (C113812 + C113813) * C9617 - (C114084 + C114085) * C139403) *
               C139286 * C139586) *
              C139328 * C5225 +
          (((C94784 + C94785) * C9617 -
            ((C93051 + C93050) * C9466 + (C92876 + C92877) * C9616) +
            (C95009 + C95008) * C139403) *
               C139286 * C13593 +
           ((C97767 + C97766) * C9617 -
            ((C93982 + C93983) * C9466 + (C93759 + C93758) * C9616) +
            (C98040 + C98041) * C139403) *
               C139286 * C139586) *
              C139328 * C5226 +
          (((C92880 + C92881) * C9616 + (C93053 + C93052) * C9466 -
            (C96636 + C96637) * C9617 - (C96847 + C96846) * C139403) *
               C139286 * C13593 +
           ((C95707 + C95706) * C9616 + (C95916 + C95917) * C9466 -
            (C92850 * C6440 + C139588 * C6920 + C92849 * C4225 +
             C92451 * C4901) *
                C9617 -
            (C92850 * C6606 + C139588 * C7079 + C92849 * C4445 +
             C92451 * C5135) *
                C139403) *
               C139286 * C139586) *
              C139328 * C5227)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C92849 * C107 + C92451 * C555 + C92850 * C1767 + C139588 * C2376) *
               C10931 +
           (C92849 * C245 + C92451 * C719 + C92850 * C1965 + C139588 * C2591) *
               C10809 -
           (C92850 * C1768 + C139588 * C2379 + C92849 * C1767 +
            C92451 * C2376) *
               C10932 -
           (C92850 * C1966 + C139588 * C2592 + C92849 * C1965 +
            C92451 * C2591) *
               C10810 +
           (C92849 * C1768 + C92451 * C2379 + C92850 * C10815 +
            C139588 * C11155) *
               C10933 +
           (C92849 * C1966 + C92451 * C2592 + C92850 * C10937 +
            C139588 * C11262) *
               C10811 -
           (C92850 * C43406 + C139588 * C43868 + C92849 * C10815 +
            C92451 * C11155) *
               C10934 -
           (C92850 * C43568 + C139588 * C44005 + C92849 * C10937 +
            C92451 * C11262) *
               C10812) *
              C139286 * C13593 +
          ((C109946 + C109947) * C10931 + (C110170 + C110171) * C10809 -
           (C113812 + C113813) * C10932 - (C114084 + C114085) * C10810 +
           (C116304 + C116305) * C10933 + (C116514 + C116515) * C10811 -
           (C92850 * C88843 + C139588 * C89293 + C92849 * C26831 +
            C92451 * C27251) *
               C10934 -
           (C92850 * C88996 + C139588 * C89428 + C92849 * C26975 +
            C92451 * C27388) *
               C10812) *
              C139286 * C139586) *
         C139328 * C139300) /
            (p * q * std::sqrt(p + q));
    d2eexx[118] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139286 * C113) * C137108 +
             (C63381 * C116 + C139286 * C125) * C139552 -
             (C63381 * C108 + C139286 * C114) * C137101 -
             (C63381 * C117 + C139286 * C126) * C139305) *
                C13593 +
            (C69583 + C69584 - C69585 - C69586) * C139586) *
               C92451 +
           ((C84979 + C84980 - C84981 - C84982) * C13593 + C84991 * C139586) *
               C139588) *
              C139593 +
          (((C84981 - (C84980 + C84979) + C84982) * C13593 + C84992 * C139586) *
               C92451 +
           ((C90702 - (C90703 + C90704) + C90705) * C13593 +
            (C84985 - (C84986 + C84987) + C84988) * C139586) *
               C139588) *
              C139594 +
          (((C90704 + C90703 - C90702 - C90705) * C13593 +
            (C84987 + C84986 - C84985 - C84988) * C139586) *
               C92451 +
           ((C88852 * C137108 + C88853 * C139552 -
             (C63381 * C10814 + C139286 * C10820) * C137101 -
             (C63381 * C10817 + C139286 * C10823) * C139305) *
                C13593 +
            (C83103 * C137108 + C83104 * C139552 -
             (C63381 * C26830 + C139286 * C26834) * C137101 -
             (C63381 * C26832 + C139286 * C26836) * C139305) *
                C139586) *
               C139588) *
              C12239) *
         C139328) /
        (p * q * std::sqrt(p + q));
    d2eexy[118] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C63381 * C107 + C139286 * C113) * C181 +
              (C63381 * C182 + C139286 * C188) * C139328) *
                 C13593 +
             (C63884 * C181 + C63997 * C139328) * C139586) *
                C92451 +
            ((C77651 + C77677) * C13593 + (C77654 + C77655) * C139586) *
                C139588) *
               C139552 -
           (((C77656 + C77657) * C139586 + (C77678 + C77660) * C13593) *
                C139588 +
            ((C64000 * C139328 + C63886 * C181) * C139586 +
             ((C63381 * C183 + C139286 * C189) * C139328 +
              (C63381 * C108 + C139286 * C114) * C181) *
                 C13593) *
                C92451) *
               C139305) *
              C139593 +
          ((((C77660 + C77678) * C13593 + (C77657 + C77656) * C139586) *
                C92451 +
            ((C77661 + C77679) * C13593 + (C77664 + C77680) * C139586) *
                C139588) *
               C139305 -
           (((C77667 + C77668) * C139586 + (C77681 + C77671) * C13593) *
                C139588 +
            ((C77655 + C77654) * C139586 + (C77677 + C77651) * C13593) *
                C92451) *
               C139552) *
              C139594 +
          ((((C77671 + C77681) * C13593 + (C77668 + C77667) * C139586) *
                C92451 +
            ((C88924 + C88930) * C13593 + (C88927 + C88928) * C139586) *
                C139588) *
               C139552 -
           ((((C63381 * C26904 + C139286 * C26906) * C139328 +
              (C63381 * C26830 + C139286 * C26834) * C181) *
                 C139586 +
             ((C63381 * C10876 + C139286 * C10879) * C139328 +
              (C63381 * C10814 + C139286 * C10820) * C181) *
                 C13593) *
                C139588 +
            ((C77680 + C77664) * C139586 + (C77679 + C77661) * C13593) *
                C92451) *
               C139305) *
              C12239)) /
        (p * q * std::sqrt(p + q));
    d2eexz[118] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139286 * C113) * C12388 +
             (C63381 * C245 + C139286 * C251) * C139593 - C77533 * C12389 -
             C77790 * C139594 + C77539 * C12390 + C77791 * C12239) *
                C13593 +
            (C75419 + C75420 - C75421 - C75422 + C75423 + C75424) * C139586) *
               C92451 +
           ((C77533 * C12388 + C77790 * C139593 - C77539 * C12389 -
             C77791 * C139594 + C88852 * C12390 + C89001 * C12239) *
                C13593 +
            (C91792 + C91793 - C91794 - C91795 + C91796 + C91797) * C139586) *
               C139588) *
              C139328 * C139552 +
          (((C77535 * C12389 -
             ((C63381 * C246 + C139286 * C252) * C139593 +
              (C63381 * C108 + C139286 * C114) * C12388) +
             C77792 * C139594 - C77537 * C12390 - C77793 * C12239) *
                C13593 +
            (C66722 * C12389 - (C64098 * C139593 + C63886 * C12388) +
             C66968 * C139594 - C77541 * C12390 - C77794 * C12239) *
                C139586) *
               C92451 +
           ((C77537 * C12389 - (C77792 * C139593 + C77535 * C12388) +
             C77793 * C139594 - (C63381 * C10814 + C139286 * C10820) * C12390 -
             (C63381 * C10936 + C139286 * C10939) * C12239) *
                C13593 +
            (C77541 * C12389 - (C66968 * C139593 + C66722 * C12388) +
             C77794 * C139594 - (C63381 * C26830 + C139286 * C26834) * C12390 -
             (C63381 * C26974 + C139286 * C26976) * C12239) *
                C139586) *
               C139588) *
              C139328 * C139305)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[118] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C831 + C139586 * C1118) *
                C137108 +
            (C13795 * C116 + C13593 * C314 + C13796 * C841 + C139586 * C1125) *
                C139552 -
            (C13822 + C13823) * C137101 - (C13824 + C13825) * C139305) *
               C92451 +
           ((C110582 + C110583) * C137108 + (C110584 + C110585) * C139552 -
            (C15709 + C15708) * C137101 - (C15711 + C15710) * C139305) *
               C139588) *
              C139286 * C139593 +
          (((C15708 + C15709) * C137101 -
            ((C110585 + C110584) * C139552 + (C110583 + C110582) * C137108) +
            (C15710 + C15711) * C139305) *
               C92451 +
           ((C15713 + C15712) * C137101 -
            ((C110586 + C110587) * C139552 + (C110588 + C110589) * C137108) +
            (C15715 + C15714) * C139305) *
               C139588) *
              C139286 * C139594 +
          (((C110589 + C110588) * C137108 + (C110587 + C110586) * C139552 -
            (C15712 + C15713) * C137101 - (C15714 + C15715) * C139305) *
               C92451 +
           ((C121534 + C121535) * C137108 + (C121536 + C121537) * C139552 -
            (C13796 * C26830 + C139586 * C27044 + C13795 * C10814 +
             C13593 * C10992) *
                C137101 -
            (C13796 * C26832 + C139586 * C27046 + C13795 * C10817 +
             C13593 * C10995) *
                C139305) *
               C139588) *
              C139286 * C12239) *
         C139328) /
        (p * q * std::sqrt(p + q));
    d2eeyy[118] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13795 * C107 + C13593 * C308 + C13796 * C831 + C139586 * C1118) *
                 C181 +
             (C13795 * C182 + C13593 * C394 + C13796 * C939 + C139586 * C1231) *
                 C139328) *
                C92451 +
            ((C110582 + C110583) * C181 + (C110696 + C110697) * C139328) *
                C139588) *
               C139286 * C139552 -
           (((C15823 + C15822) * C139328 + (C15709 + C15708) * C181) * C139588 +
            ((C13913 + C13912) * C139328 + (C13822 + C13823) * C181) * C92451) *
               C139286 * C139305) *
              C139593 +
          ((((C15708 + C15709) * C181 + (C15822 + C15823) * C139328) * C92451 +
            ((C15713 + C15712) * C181 + (C15824 + C15825) * C139328) *
                C139588) *
               C139286 * C139305 -
           (((C110698 + C110699) * C139328 + (C110588 + C110589) * C181) *
                C139588 +
            ((C110697 + C110696) * C139328 + (C110583 + C110582) * C181) *
                C92451) *
               C139286 * C139552) *
              C139594 +
          ((((C110589 + C110588) * C181 + (C110699 + C110698) * C139328) *
                C92451 +
            ((C121534 + C121535) * C181 + (C121608 + C121609) * C139328) *
                C139588) *
               C139286 * C139552 -
           (((C13796 * C26904 + C139586 * C27114 + C13795 * C10876 +
              C13593 * C11048) *
                 C139328 +
             (C13796 * C26830 + C139586 * C27044 + C13795 * C10814 +
              C13593 * C10992) *
                 C181) *
                C139588 +
            ((C15825 + C15824) * C139328 + (C15712 + C15713) * C181) * C92451) *
               C139286 * C139305) *
              C12239)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[118] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C831 + C139586 * C1118) *
                C12388 +
            (C13795 * C245 + C13593 * C474 + C13796 * C1029 + C139586 * C1339) *
                C139593 -
            (C110583 + C110582) * C12389 - (C110806 + C110807) * C139594 +
            (C110589 + C110588) * C12390 + (C110808 + C110809) * C12239) *
               C92451 +
           ((C110582 + C110583) * C12388 + (C110807 + C110806) * C139593 -
            (C110588 + C110589) * C12389 - (C110809 + C110808) * C139594 +
            (C121534 + C121535) * C12390 + (C121681 + C121680) * C12239) *
               C139588) *
              C139286 * C139328 * C139552 +
          (((C15708 + C15709) * C12389 -
            ((C13997 + C13996) * C139593 + (C13822 + C13823) * C12388) +
            (C15933 + C15932) * C139594 - (C15712 + C15713) * C12390 -
            (C15935 + C15934) * C12239) *
               C92451 +
           ((C15713 + C15712) * C12389 -
            ((C15932 + C15933) * C139593 + (C15709 + C15708) * C12388) +
            (C15934 + C15935) * C139594 -
            (C13796 * C26830 + C139586 * C27044 + C13795 * C10814 +
             C13593 * C10992) *
                C12390 -
            (C13796 * C26974 + C139586 * C27183 + C13795 * C10936 +
             C13593 * C11101) *
                C12239) *
               C139588) *
              C139286 * C139328 * C139305)) /
        (p * q * std::sqrt(p + q));
    d2eezx[118] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1767 + C139588 * C2376) *
                C137108 +
            (C92849 * C116 + C92451 * C561 + C92850 * C1777 + C139588 * C2383) *
                C139552 -
            (C92876 + C92877) * C137101 - (C92878 + C92879) * C139305) *
               C139286 * C13593 +
           ((C109946 + C109947) * C137108 + (C109948 + C109949) * C139552 -
            (C93759 + C93758) * C137101 - (C93761 + C93760) * C139305) *
               C139286 * C139586) *
              C139593 +
          (((C94784 + C94785) * C137101 -
            ((C92850 * C1783 + C139588 * C2387 + C92849 * C1777 +
              C92451 * C2383) *
                 C139552 +
             (C92850 * C1768 + C139588 * C2379 + C92849 * C1767 +
              C92451 * C2376) *
                 C137108) +
            (C94786 + C94787) * C139305) *
               C139286 * C13593 +
           ((C97767 + C97766) * C137101 -
            ((C113810 + C113811) * C139552 + (C113812 + C113813) * C137108) +
            (C97769 + C97768) * C139305) *
               C139286 * C139586) *
              C139594 +
          (((C92849 * C1768 + C92451 * C2379 + C92850 * C10815 +
             C139588 * C11155) *
                C137108 +
            (C92849 * C1783 + C92451 * C2387 + C92850 * C10818 +
             C139588 * C11158) *
                C139552 -
            (C94788 + C94789) * C137101 - (C94790 + C94791) * C139305) *
               C139286 * C13593 +
           ((C116304 + C116305) * C137108 + (C116306 + C116307) * C139552 -
            (C92850 * C26830 + C139588 * C27250 + C92849 * C6441 +
             C92451 * C6921) *
                C137101 -
            (C92850 * C26832 + C139588 * C27252 + C92849 * C6444 +
             C92451 * C6924) *
                C139305) *
               C139286 * C139586) *
              C12239) *
         C139328) /
        (p * q * std::sqrt(p + q));
    d2eezy[118] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C92849 * C107 + C92451 * C555 + C92850 * C1767 +
              C139588 * C2376) *
                 C181 +
             (C92849 * C182 + C92451 * C641 + C92850 * C1873 +
              C139588 * C2492) *
                 C139328) *
                C139286 * C13593 +
            ((C109946 + C109947) * C181 + (C110061 + C110060) * C139328) *
                C139286 * C139586) *
               C139552 -
           (((C93872 + C93873) * C139328 + (C93759 + C93758) * C181) * C139286 *
                C139586 +
            ((C92967 + C92966) * C139328 + (C92876 + C92877) * C181) * C139286 *
                C13593) *
               C139305) *
              C139593 +
          ((((C94784 + C94785) * C181 + (C94898 + C94899) * C139328) * C139286 *
                C13593 +
            ((C97767 + C97766) * C181 + (C97904 + C97905) * C139328) * C139286 *
                C139586) *
               C139305 -
           (((C113949 + C113948) * C139328 + (C113812 + C113813) * C181) *
                C139286 * C139586 +
            ((C92850 * C1874 + C139588 * C2493 + C92849 * C1873 +
              C92451 * C2492) *
                 C139328 +
             (C92850 * C1768 + C139588 * C2379 + C92849 * C1767 +
              C92451 * C2376) *
                 C181) *
                C139286 * C13593) *
               C139552) *
              C139594 +
          ((((C92849 * C1768 + C92451 * C2379 + C92850 * C10815 +
              C139588 * C11155) *
                 C181 +
             (C92849 * C1874 + C92451 * C2493 + C92850 * C10877 +
              C139588 * C11211) *
                 C139328) *
                C139286 * C13593 +
            ((C116304 + C116305) * C181 + (C116411 + C116410) * C139328) *
                C139286 * C139586) *
               C139552 -
           (((C92850 * C26904 + C139588 * C27320 + C92849 * C6527 +
              C92451 * C7001) *
                 C139328 +
             (C92850 * C26830 + C139588 * C27250 + C92849 * C6441 +
              C92451 * C6921) *
                 C181) *
                C139286 * C139586 +
            ((C94901 + C94900) * C139328 + (C94788 + C94789) * C181) * C139286 *
                C13593) *
               C139305) *
              C12239)) /
        (p * q * std::sqrt(p + q));
    d2eezz[118] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1767 + C139588 * C2376) *
                C12388 +
            (C92849 * C245 + C92451 * C719 + C92850 * C1965 + C139588 * C2591) *
                C139593 -
            (C92850 * C1768 + C139588 * C2379 + C92849 * C1767 +
             C92451 * C2376) *
                C12389 -
            (C92850 * C1966 + C139588 * C2592 + C92849 * C1965 +
             C92451 * C2591) *
                C139594 +
            (C92849 * C1768 + C92451 * C2379 + C92850 * C10815 +
             C139588 * C11155) *
                C12390 +
            (C92849 * C1966 + C92451 * C2592 + C92850 * C10937 +
             C139588 * C11262) *
                C12239) *
               C139286 * C13593 +
           ((C109946 + C109947) * C12388 + (C110170 + C110171) * C139593 -
            (C113812 + C113813) * C12389 - (C114084 + C114085) * C139594 +
            (C116304 + C116305) * C12390 + (C116514 + C116515) * C12239) *
               C139286 * C139586) *
              C139328 * C139552 +
          (((C94784 + C94785) * C12389 -
            ((C93051 + C93050) * C139593 + (C92876 + C92877) * C12388) +
            (C95009 + C95008) * C139594 - (C94788 + C94789) * C12390 -
            (C95011 + C95010) * C12239) *
               C139286 * C13593 +
           ((C97767 + C97766) * C12389 -
            ((C93982 + C93983) * C139593 + (C93759 + C93758) * C12388) +
            (C98040 + C98041) * C139594 -
            (C92850 * C26830 + C139588 * C27250 + C92849 * C6441 +
             C92451 * C6921) *
                C12390 -
            (C92850 * C26974 + C139588 * C27389 + C92849 * C6607 +
             C92451 * C7078) *
                C12239) *
               C139286 * C139586) *
              C139328 * C139305)) /
        (p * q * std::sqrt(p + q));
    d2eexx[119] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139286 * C113) * C5230 +
             (C63381 * C116 + C139286 * C125) * C5225 -
             (C63381 * C108 + C139286 * C114) * C5231 -
             (C63381 * C117 + C139286 * C126) * C5226 +
             (C63381 * C109 + C139286 * C115) * C5232 +
             (C63381 * C118 + C139286 * C127) * C5227) *
                C13593 +
            (C67640 + C67641 - C67642 - C67643 + C67644 + C67645) * C139586) *
               C92451 +
           ((C87086 + C87087 - C87088 - C87089 + C87090 + C87091) * C13593 +
            (C81583 + C81584 - C81585 - C81586 + C81587 + C81588) * C139586) *
               C139588) *
              C9466 +
          (((C87088 - (C87087 + C87086) + C87089 - C87090 - C87091) * C13593 +
            (C81585 - (C81584 + C81583) + C81586 - C81587 - C81588) * C139586) *
               C92451 +
           ((C77537 * C5231 - (C77538 * C5225 + C77539 * C5230) +
             C77540 * C5226 - (C63381 * C1770 + C139286 * C1782) * C5232 -
             (C63381 * C1785 + C139286 * C1794) * C5227) *
                C13593 +
            (C77541 * C5231 - (C68854 * C5225 + C68853 * C5230) +
             C77542 * C5226 - (C63381 * C6440 + C139286 * C6446) * C5232 -
             (C63381 * C6443 + C139286 * C6449) * C5227) *
                C139586) *
               C139588) *
              C139403) *
         C139328) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C63381 * C107 + C139286 * C113) * C5913 +
              (C63381 * C116 + C139286 * C125) * C139300) *
                 C13593 +
             (C68304 + C68305) * C139586) *
                C92451 +
            ((C83091 + C83092) * C13593 + C83093 * C139586) * C139588) *
               C9466 -
           ((C83094 * C139586 + (C83095 + C83096) * C13593) * C139588 +
            (C83097 * C139586 + (C83092 + C83091) * C13593) * C92451) *
               C139403) *
              C823 +
          (((C83093 * C13593 + C86139 * C139586) * C92451 +
            (C83098 * C13593 + (C68859 + C68860) * C139586) * C139588) *
               C139403 -
           ((C71170 * C139586 + C83097 * C13593) * C139588 +
            ((C68307 + C68306) * C139586 + (C68305 + C68304) * C13593) *
                C92451) *
               C9466) *
              C824 +
          (((C68314 * C13593 + (C68309 + C68308) * C139586) * C92451 +
            (C86139 * C13593 + (C71177 + C71178) * C139586) * C139588) *
               C9466 -
           ((((C63381 * C68837 + C139286 * C68839) * C139300 +
              (C63381 * C68836 + C139286 * C68838) * C5913) *
                 C139586 +
             (C68860 + C68859) * C13593) *
                C139588 +
            ((C71178 + C71177) * C139586 + C71170 * C13593) * C92451) *
               C139403) *
              C825)) /
            (p * q * std::sqrt(p + q));
    d2eexy[119] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C63381 * C107 + C139286 * C113) * C181 +
              (C63381 * C182 + C139286 * C188) * C139328) *
                 C13593 +
             (C63884 * C181 + C63997 * C139328) * C139586) *
                C92451 +
            ((C77651 + C77677) * C13593 + (C77654 + C77655) * C139586) *
                C139588) *
               C5225 -
           (((C77656 + C77657) * C139586 + (C77678 + C77660) * C13593) *
                C139588 +
            ((C64000 * C139328 + C63886 * C181) * C139586 +
             ((C63381 * C183 + C139286 * C189) * C139328 +
              (C63381 * C108 + C139286 * C114) * C181) *
                 C13593) *
                C92451) *
               C5226 +
           ((((C63381 * C109 + C139286 * C115) * C181 +
              (C63381 * C184 + C139286 * C190) * C139328) *
                 C13593 +
             (C65320 * C181 + C65406 * C139328) * C139586) *
                C92451 +
            ((C79541 + C79547) * C13593 + (C79544 + C79545) * C139586) *
                C139588) *
               C5227) *
              C9466 +
          ((((C77660 + C77678) * C13593 + (C77657 + C77656) * C139586) *
                C92451 +
            ((C77661 + C77679) * C13593 + (C77664 + C77680) * C139586) *
                C139588) *
               C5226 -
           (((C77667 + C77668) * C139586 + (C77681 + C77671) * C13593) *
                C139588 +
            ((C77655 + C77654) * C139586 + (C77677 + C77651) * C13593) *
                C92451) *
               C5225 -
           ((((C63381 * C6526 + C139286 * C6529) * C139328 +
              (C63381 * C6440 + C139286 * C6446) * C181) *
                 C139586 +
             ((C63381 * C1876 + C139286 * C1884) * C139328 +
              (C63381 * C1770 + C139286 * C1782) * C181) *
                 C13593) *
                C139588 +
            ((C79545 + C79544) * C139586 + (C79547 + C79541) * C13593) *
                C92451) *
               C5227) *
              C139403)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139286 * C113) * C934 +
             (C63381 * C182 + C139286 * C188) * C823 - C63884 * C935 -
             C63997 * C824 + C63888 * C936 + C63998 * C825) *
                C13593 +
            (C63884 * C934 + C63997 * C823 - C63888 * C935 - C63998 * C824 +
             C63894 * C936 + C63999 * C825) *
                C139586) *
               C92451 +
           ((C88072 + C88073 - C88074 - C88075 + C88076 + C88077) * C13593 +
            (C88078 + C88079 - C88080 - C88081 + C88082 + C88083) * C139586) *
               C139588) *
              C139300 * C9466 +
          (((C88074 - (C88073 + C88072) + C88075 - C88076 - C88077) * C13593 +
            (C88080 - (C88079 + C88078) + C88081 - C88082 - C88083) * C139586) *
               C92451 +
           ((C68853 * C935 - (C77676 * C823 + C77539 * C934) + C68941 * C824 -
             C68855 * C936 - C68942 * C825) *
                C13593 +
            (C68855 * C935 - (C68941 * C823 + C68853 * C934) + C68942 * C824 -
             (C63381 * C68836 + C139286 * C68838) * C936 -
             (C63381 * C68934 + C139286 * C68935) * C825) *
                C139586) *
               C139588) *
              C139300 * C139403)) /
            (p * q * std::sqrt(p + q));
    d2eexz[119] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139286 * C113) * C9616 +
             (C63381 * C245 + C139286 * C251) * C9466 - C77533 * C9617 -
             C77790 * C139403) *
                C13593 +
            (C72708 + C72709 - C72710 - C72711) * C139586) *
               C92451 +
           ((C77533 * C9616 + C77790 * C9466 - C77539 * C9617 -
             C77791 * C139403) *
                C13593 +
            (C88182 + C88183 - C88184 - C88185) * C139586) *
               C139588) *
              C139328 * C5225 +
          (((C77535 * C9617 -
             ((C63381 * C246 + C139286 * C252) * C9466 +
              (C63381 * C108 + C139286 * C114) * C9616) +
             C77792 * C139403) *
                C13593 +
            (C73935 - (C73936 + C73937) + C73938) * C139586) *
               C92451 +
           ((C77537 * C9617 - (C77792 * C9466 + C77535 * C9616) +
             C77793 * C139403) *
                C13593 +
            (C89820 - (C89821 + C89822) + C89823) * C139586) *
               C139588) *
              C139328 * C5226 +
          ((((C63381 * C109 + C139286 * C115) * C9616 +
             (C63381 * C247 + C139286 * C253) * C9466 - C79439 * C9617 -
             C79648 * C139403) *
                C13593 +
            (C65320 * C9616 + C65488 * C9466 - C78537 * C9617 -
             C78743 * C139403) *
                C139586) *
               C92451 +
           ((C79439 * C9616 + C79648 * C9466 -
             (C63381 * C1770 + C139286 * C1782) * C9617 -
             (C63381 * C1968 + C139286 * C1976) * C139403) *
                C13593 +
            (C78537 * C9616 + C78743 * C9466 -
             (C63381 * C6440 + C139286 * C6446) * C9617 -
             (C63381 * C6606 + C139286 * C6609) * C139403) *
                C139586) *
               C139588) *
              C139328 * C5227)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139286 * C113) * C9616 +
             (C63381 * C245 + C139286 * C251) * C9466 - C77533 * C9617 -
             C77790 * C139403) *
                C13593 +
            (C72708 + C72709 - C72710 - C72711) * C139586) *
               C92451 +
           ((C77533 * C9616 + C77790 * C9466 - C77539 * C9617 -
             C77791 * C139403) *
                C13593 +
            (C88182 + C88183 - C88184 - C88185) * C139586) *
               C139588) *
              C823 +
          (((C72710 - (C72709 + C72708) + C72711) * C13593 +
            (C72714 - (C72713 + C72712) + C72715) * C139586) *
               C92451 +
           ((C88184 - (C88183 + C88182) + C88185) * C13593 +
            (C88186 - (C88187 + C88188) + C88189) * C139586) *
               C139588) *
              C824 +
          ((C72722 * C13593 + (C72718 + C72717 - C72716 - C72719) * C139586) *
               C92451 +
           ((C88188 + C88187 - C88186 - C88189) * C13593 +
            (C71175 * C9616 + C71341 * C9466 -
             (C63381 * C68836 + C139286 * C68838) * C9617 -
             (C63381 * C69016 + C139286 * C69017) * C139403) *
                C139586) *
               C139588) *
              C825) *
         C139300) /
            (p * q * std::sqrt(p + q));
    d2eeyx[119] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C831 + C139586 * C1118) *
                C5230 +
            (C13795 * C116 + C13593 * C314 + C13796 * C841 + C139586 * C1125) *
                C5225 -
            (C13822 + C13823) * C5231 - (C13824 + C13825) * C5226 +
            (C13826 + C13827) * C5232 + (C13828 + C13829) * C5227) *
               C92451 +
           ((C110582 + C110583) * C5230 + (C110584 + C110585) * C5225 -
            (C15709 + C15708) * C5231 - (C15711 + C15710) * C5226 +
            (C17604 + C17603) * C5232 + (C17606 + C17605) * C5227) *
               C139588) *
              C139286 * C9466 +
          (((C15708 + C15709) * C5231 -
            ((C110585 + C110584) * C5225 + (C110583 + C110582) * C5230) +
            (C15710 + C15711) * C5226 - (C17603 + C17604) * C5232 -
            (C17605 + C17606) * C5227) *
               C92451 +
           ((C15713 + C15712) * C5231 -
            ((C110586 + C110587) * C5225 + (C110588 + C110589) * C5230) +
            (C15715 + C15714) * C5226 -
            (C13796 * C6440 + C139586 * C6686 + C13795 * C1770 +
             C13593 * C2059) *
                C5232 -
            (C13796 * C6443 + C139586 * C6689 + C13795 * C1785 +
             C13593 * C2067) *
                C5227) *
               C139588) *
              C139286 * C139403) *
         C139328) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13795 * C107 + C13593 * C308 + C13796 * C831 + C139586 * C1118) *
                 C5913 +
             (C13795 * C116 + C13593 * C314 + C13796 * C841 + C139586 * C1125) *
                 C139300) *
                C92451 +
            ((C110582 + C110583) * C5913 + (C110584 + C110585) * C139300) *
                C139588) *
               C139286 * C9466 -
           (((C110586 + C110587) * C139300 + (C110588 + C110589) * C5913) *
                C139588 +
            ((C110585 + C110584) * C139300 + (C110583 + C110582) * C5913) *
                C92451) *
               C139286 * C139403) *
              C823 +
          ((((C113399 + C113398) * C5913 + (C113397 + C113396) * C139300) *
                C92451 +
            ((C115986 + C115987) * C5913 + (C115988 + C115989) * C139300) *
                C139588) *
               C139286 * C139403 -
           (((C113396 + C113397) * C139300 + (C113398 + C113399) * C5913) *
                C139588 +
            ((C13796 * C847 + C139586 * C1129 + C13795 * C841 +
              C13593 * C1125) *
                 C139300 +
             (C13796 * C832 + C139586 * C1121 + C13795 * C831 +
              C13593 * C1118) *
                 C5913) *
                C92451) *
               C139286 * C9466) *
              C824 +
          ((((C13795 * C832 + C13593 * C1121 + C13796 * C5916 +
              C139586 * C6094) *
                 C5913 +
             (C13795 * C847 + C13593 * C1129 + C13796 * C5919 +
              C139586 * C6097) *
                 C139300) *
                C92451 +
            ((C118968 + C118969) * C5913 + (C118970 + C118971) * C139300) *
                C139588) *
               C139286 * C9466 -
           (((C13796 * C68837 + C139586 * C69111 + C13795 * C21081 +
              C13593 * C21415) *
                 C139300 +
             (C13796 * C68836 + C139586 * C69110 + C13795 * C21079 +
              C13593 * C21413) *
                 C5913) *
                C139588 +
            ((C118971 + C118970) * C139300 + (C118969 + C118968) * C5913) *
                C92451) *
               C139286 * C139403) *
              C825)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[119] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13795 * C107 + C13593 * C308 + C13796 * C831 + C139586 * C1118) *
                 C181 +
             (C13795 * C182 + C13593 * C394 + C13796 * C939 + C139586 * C1231) *
                 C139328) *
                C92451 +
            ((C110582 + C110583) * C181 + (C110696 + C110697) * C139328) *
                C139588) *
               C139286 * C5225 -
           (((C15823 + C15822) * C139328 + (C15709 + C15708) * C181) * C139588 +
            ((C13913 + C13912) * C139328 + (C13822 + C13823) * C181) * C92451) *
               C139286 * C5226 +
           (((C13826 + C13827) * C181 + (C13915 + C13914) * C139328) * C92451 +
            ((C17604 + C17603) * C181 + (C17709 + C17710) * C139328) *
                C139588) *
               C139286 * C5227) *
              C9466 +
          ((((C15708 + C15709) * C181 + (C15822 + C15823) * C139328) * C92451 +
            ((C15713 + C15712) * C181 + (C15824 + C15825) * C139328) *
                C139588) *
               C139286 * C5226 -
           (((C110698 + C110699) * C139328 + (C110588 + C110589) * C181) *
                C139588 +
            ((C110697 + C110696) * C139328 + (C110583 + C110582) * C181) *
                C92451) *
               C139286 * C5225 -
           (((C13796 * C6526 + C139586 * C6768 + C13795 * C1876 +
              C13593 * C2173) *
                 C139328 +
             (C13796 * C6440 + C139586 * C6686 + C13795 * C1770 +
              C13593 * C2059) *
                 C181) *
                C139588 +
            ((C17710 + C17709) * C139328 + (C17603 + C17604) * C181) * C92451) *
               C139286 * C5227) *
              C139403)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C831 + C139586 * C1118) *
                C934 +
            (C13795 * C182 + C13593 * C394 + C13796 * C939 + C139586 * C1231) *
                C823 -
            (C13796 * C832 + C139586 * C1121 + C13795 * C831 + C13593 * C1118) *
                C935 -
            (C13796 * C940 + C139586 * C1232 + C13795 * C939 + C13593 * C1231) *
                C824 +
            (C13795 * C832 + C13593 * C1121 + C13796 * C5916 +
             C139586 * C6094) *
                C936 +
            (C13795 * C940 + C13593 * C1232 + C13796 * C5982 +
             C139586 * C6148) *
                C825) *
               C92451 +
           ((C110582 + C110583) * C934 + (C110696 + C110697) * C823 -
            (C113398 + C113399) * C935 - (C113534 + C113535) * C824 +
            (C118968 + C118969) * C936 + (C119074 + C119075) * C825) *
               C139588) *
              C139286 * C139300 * C9466 +
          (((C113399 + C113398) * C935 -
            ((C110697 + C110696) * C823 + (C110583 + C110582) * C934) +
            (C113535 + C113534) * C824 - (C118969 + C118968) * C936 -
            (C119075 + C119074) * C825) *
               C92451 +
           ((C115986 + C115987) * C935 -
            ((C110698 + C110699) * C823 + (C110588 + C110589) * C934) +
            (C116092 + C116093) * C824 -
            (C13796 * C68836 + C139586 * C69110 + C13795 * C21079 +
             C13593 * C21413) *
                C936 -
            (C13796 * C68934 + C139586 * C69186 + C13795 * C21197 +
             C13593 * C21514) *
                C825) *
               C139588) *
              C139286 * C139300 * C139403)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[119] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C831 + C139586 * C1118) *
                C9616 +
            (C13795 * C245 + C13593 * C474 + C13796 * C1029 + C139586 * C1339) *
                C9466 -
            (C110583 + C110582) * C9617 - (C110806 + C110807) * C139403) *
               C92451 +
           ((C110582 + C110583) * C9616 + (C110807 + C110806) * C9466 -
            (C110588 + C110589) * C9617 - (C110809 + C110808) * C139403) *
               C139588) *
              C139286 * C139328 * C5225 +
          (((C15708 + C15709) * C9617 -
            ((C13997 + C13996) * C9466 + (C13822 + C13823) * C9616) +
            (C15933 + C15932) * C139403) *
               C92451 +
           ((C15713 + C15712) * C9617 -
            ((C15932 + C15933) * C9466 + (C15709 + C15708) * C9616) +
            (C15934 + C15935) * C139403) *
               C139588) *
              C139286 * C139328 * C5226 +
          (((C13826 + C13827) * C9616 + (C13999 + C13998) * C9466 -
            (C17603 + C17604) * C9617 - (C17814 + C17813) * C139403) *
               C92451 +
           ((C17604 + C17603) * C9616 + (C17813 + C17814) * C9466 -
            (C13796 * C6440 + C139586 * C6686 + C13795 * C1770 +
             C13593 * C2059) *
                C9617 -
            (C13796 * C6606 + C139586 * C6845 + C13795 * C1968 +
             C13593 * C2274) *
                C139403) *
               C139588) *
              C139286 * C139328 * C5227)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C831 + C139586 * C1118) *
                C9616 +
            (C13795 * C245 + C13593 * C474 + C13796 * C1029 + C139586 * C1339) *
                C9466 -
            (C110583 + C110582) * C9617 - (C110806 + C110807) * C139403) *
               C92451 +
           ((C110582 + C110583) * C9616 + (C110807 + C110806) * C9466 -
            (C110588 + C110589) * C9617 - (C110809 + C110808) * C139403) *
               C139588) *
              C139286 * C823 +
          (((C113399 + C113398) * C9617 -
            ((C13796 * C1030 + C139586 * C1340 + C13795 * C1029 +
              C13593 * C1339) *
                 C9466 +
             (C13796 * C832 + C139586 * C1121 + C13795 * C831 +
              C13593 * C1118) *
                 C9616) +
            (C113670 + C113671) * C139403) *
               C92451 +
           ((C115986 + C115987) * C9617 -
            ((C113671 + C113670) * C9466 + (C113398 + C113399) * C9616) +
            (C116197 + C116196) * C139403) *
               C139588) *
              C139286 * C824 +
          (((C13795 * C832 + C13593 * C1121 + C13796 * C5916 +
             C139586 * C6094) *
                C9616 +
            (C13795 * C1030 + C13593 * C1340 + C13796 * C6038 +
             C139586 * C6203) *
                C9466 -
            (C118969 + C118968) * C9617 - (C119178 + C119179) * C139403) *
               C92451 +
           ((C118968 + C118969) * C9616 + (C119179 + C119178) * C9466 -
            (C13796 * C68836 + C139586 * C69110 + C13795 * C21079 +
             C13593 * C21413) *
                C9617 -
            (C13796 * C69016 + C139586 * C69261 + C13795 * C21305 +
             C13593 * C21614) *
                C139403) *
               C139588) *
              C139286 * C825) *
         C139300) /
            (p * q * std::sqrt(p + q));
    d2eezx[119] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1767 + C139588 * C2376) *
                C5230 +
            (C92849 * C116 + C92451 * C561 + C92850 * C1777 + C139588 * C2383) *
                C5225 -
            (C92876 + C92877) * C5231 - (C92878 + C92879) * C5226 +
            (C92880 + C92881) * C5232 + (C92882 + C92883) * C5227) *
               C139286 * C13593 +
           ((C109946 + C109947) * C5230 + (C109948 + C109949) * C5225 -
            (C93759 + C93758) * C5231 - (C93761 + C93760) * C5226 +
            (C95707 + C95706) * C5232 + (C95709 + C95708) * C5227) *
               C139286 * C139586) *
              C9466 +
          (((C94784 + C94785) * C5231 -
            ((C92850 * C1783 + C139588 * C2387 + C92849 * C1777 +
              C92451 * C2383) *
                 C5225 +
             (C92850 * C1768 + C139588 * C2379 + C92849 * C1767 +
              C92451 * C2376) *
                 C5230) +
            (C94786 + C94787) * C5226 - (C96636 + C96637) * C5232 -
            (C96638 + C96639) * C5227) *
               C139286 * C13593 +
           ((C97767 + C97766) * C5231 -
            ((C113810 + C113811) * C5225 + (C113812 + C113813) * C5230) +
            (C97769 + C97768) * C5226 -
            (C92850 * C6440 + C139588 * C6920 + C92849 * C4225 +
             C92451 * C4901) *
                C5232 -
            (C92850 * C6443 + C139588 * C6923 + C92849 * C4232 +
             C92451 * C4905) *
                C5227) *
               C139286 * C139586) *
              C139403) *
         C139328) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C92849 * C107 + C92451 * C555 + C92850 * C1767 +
              C139588 * C2376) *
                 C5913 +
             (C92849 * C116 + C92451 * C561 + C92850 * C1777 +
              C139588 * C2383) *
                 C139300) *
                C139286 * C13593 +
            ((C109946 + C109947) * C5913 + (C109948 + C109949) * C139300) *
                C139286 * C139586) *
               C9466 -
           (((C113810 + C113811) * C139300 + (C113812 + C113813) * C5913) *
                C139286 * C139586 +
            ((C92850 * C1783 + C139588 * C2387 + C92849 * C1777 +
              C92451 * C2383) *
                 C139300 +
             (C92850 * C1768 + C139588 * C2379 + C92849 * C1767 +
              C92451 * C2376) *
                 C5913) *
                C139286 * C13593) *
               C139403) *
              C823 +
          ((((C113813 + C113812) * C5913 + (C113811 + C113810) * C139300) *
                C139286 * C13593 +
            ((C119286 + C119287) * C5913 + (C119288 + C119289) * C139300) *
                C139286 * C139586) *
               C139403 -
           (((C109950 + C109951) * C139300 + (C109952 + C109953) * C5913) *
                C139286 * C139586 +
            ((C109949 + C109948) * C139300 + (C109947 + C109946) * C5913) *
                C139286 * C13593) *
               C9466) *
              C824 +
          ((((C109953 + C109952) * C5913 + (C109951 + C109950) * C139300) *
                C139286 * C13593 +
            ((C115438 + C115439) * C5913 + (C115440 + C115441) * C139300) *
                C139286 * C139586) *
               C9466 -
           (((C92850 * C68837 + C139588 * C69337 + C92849 * C24131 +
              C92451 * C24767) *
                 C139300 +
             (C92850 * C68836 + C139588 * C69336 + C92849 * C24129 +
              C92451 * C24765) *
                 C5913) *
                C139286 * C139586 +
            ((C119289 + C119288) * C139300 + (C119287 + C119286) * C5913) *
                C139286 * C13593) *
               C139403) *
              C825)) /
            (p * q * std::sqrt(p + q));
    d2eezy[119] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C92849 * C107 + C92451 * C555 + C92850 * C1767 +
              C139588 * C2376) *
                 C181 +
             (C92849 * C182 + C92451 * C641 + C92850 * C1873 +
              C139588 * C2492) *
                 C139328) *
                C139286 * C13593 +
            ((C109946 + C109947) * C181 + (C110061 + C110060) * C139328) *
                C139286 * C139586) *
               C5225 -
           (((C93872 + C93873) * C139328 + (C93759 + C93758) * C181) * C139286 *
                C139586 +
            ((C92967 + C92966) * C139328 + (C92876 + C92877) * C181) * C139286 *
                C13593) *
               C5226 +
           (((C92880 + C92881) * C181 + (C92969 + C92968) * C139328) * C139286 *
                C13593 +
            ((C95707 + C95706) * C181 + (C95812 + C95813) * C139328) * C139286 *
                C139586) *
               C5227) *
              C9466 +
          ((((C94784 + C94785) * C181 + (C94898 + C94899) * C139328) * C139286 *
                C13593 +
            ((C97767 + C97766) * C181 + (C97904 + C97905) * C139328) * C139286 *
                C139586) *
               C5226 -
           (((C113949 + C113948) * C139328 + (C113812 + C113813) * C181) *
                C139286 * C139586 +
            ((C92850 * C1874 + C139588 * C2493 + C92849 * C1873 +
              C92451 * C2492) *
                 C139328 +
             (C92850 * C1768 + C139588 * C2379 + C92849 * C1767 +
              C92451 * C2376) *
                 C181) *
                C139286 * C13593) *
               C5225 -
           (((C92850 * C6526 + C139588 * C7002 + C92849 * C4339 +
              C92451 * C5019) *
                 C139328 +
             (C92850 * C6440 + C139588 * C6920 + C92849 * C4225 +
              C92451 * C4901) *
                 C181) *
                C139286 * C139586 +
            ((C96743 + C96742) * C139328 + (C96636 + C96637) * C181) * C139286 *
                C13593) *
               C5227) *
              C139403)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1767 + C139588 * C2376) *
                C934 +
            (C92849 * C182 + C92451 * C641 + C92850 * C1873 + C139588 * C2492) *
                C823 -
            (C109947 + C109946) * C935 - (C110060 + C110061) * C824 +
            (C109953 + C109952) * C936 + (C110062 + C110063) * C825) *
               C139286 * C13593 +
           ((C109946 + C109947) * C934 + (C110061 + C110060) * C823 -
            (C109952 + C109953) * C935 - (C110063 + C110062) * C824 +
            (C115438 + C115439) * C936 + (C115513 + C115512) * C825) *
               C139286 * C139586) *
              C139300 * C9466 +
          (((C113813 + C113812) * C935 -
            ((C92850 * C1874 + C139588 * C2493 + C92849 * C1873 +
              C92451 * C2492) *
                 C823 +
             (C92850 * C1768 + C139588 * C2379 + C92849 * C1767 +
              C92451 * C2376) *
                 C934) +
            (C113948 + C113949) * C824 - (C119287 + C119286) * C936 -
            (C119392 + C119393) * C825) *
               C139286 * C13593 +
           ((C119286 + C119287) * C935 -
            ((C113949 + C113948) * C823 + (C113812 + C113813) * C934) +
            (C119393 + C119392) * C824 -
            (C92850 * C68836 + C139588 * C69336 + C92849 * C24129 +
             C92451 * C24765) *
                C936 -
            (C92850 * C68934 + C139588 * C69420 + C92849 * C24247 +
             C92451 * C24876) *
                C825) *
               C139286 * C139586) *
              C139300 * C139403)) /
            (p * q * std::sqrt(p + q));
    d2eezz[119] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1767 + C139588 * C2376) *
                C9616 +
            (C92849 * C245 + C92451 * C719 + C92850 * C1965 + C139588 * C2591) *
                C9466 -
            (C92850 * C1768 + C139588 * C2379 + C92849 * C1767 +
             C92451 * C2376) *
                C9617 -
            (C92850 * C1966 + C139588 * C2592 + C92849 * C1965 +
             C92451 * C2591) *
                C139403) *
               C139286 * C13593 +
           ((C109946 + C109947) * C9616 + (C110170 + C110171) * C9466 -
            (C113812 + C113813) * C9617 - (C114084 + C114085) * C139403) *
               C139286 * C139586) *
              C139328 * C5225 +
          (((C94784 + C94785) * C9617 -
            ((C93051 + C93050) * C9466 + (C92876 + C92877) * C9616) +
            (C95009 + C95008) * C139403) *
               C139286 * C13593 +
           ((C97767 + C97766) * C9617 -
            ((C93982 + C93983) * C9466 + (C93759 + C93758) * C9616) +
            (C98040 + C98041) * C139403) *
               C139286 * C139586) *
              C139328 * C5226 +
          (((C92880 + C92881) * C9616 + (C93053 + C93052) * C9466 -
            (C96636 + C96637) * C9617 - (C96847 + C96846) * C139403) *
               C139286 * C13593 +
           ((C95707 + C95706) * C9616 + (C95916 + C95917) * C9466 -
            (C92850 * C6440 + C139588 * C6920 + C92849 * C4225 +
             C92451 * C4901) *
                C9617 -
            (C92850 * C6606 + C139588 * C7079 + C92849 * C4445 +
             C92451 * C5135) *
                C139403) *
               C139286 * C139586) *
              C139328 * C5227)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1767 + C139588 * C2376) *
                C9616 +
            (C92849 * C245 + C92451 * C719 + C92850 * C1965 + C139588 * C2591) *
                C9466 -
            (C92850 * C1768 + C139588 * C2379 + C92849 * C1767 +
             C92451 * C2376) *
                C9617 -
            (C92850 * C1966 + C139588 * C2592 + C92849 * C1965 +
             C92451 * C2591) *
                C139403) *
               C139286 * C13593 +
           ((C109946 + C109947) * C9616 + (C110170 + C110171) * C9466 -
            (C113812 + C113813) * C9617 - (C114084 + C114085) * C139403) *
               C139286 * C139586) *
              C823 +
          (((C113813 + C113812) * C9617 -
            ((C110171 + C110170) * C9466 + (C109947 + C109946) * C9616) +
            (C114085 + C114084) * C139403) *
               C139286 * C13593 +
           ((C119286 + C119287) * C9617 -
            ((C110172 + C110173) * C9466 + (C109952 + C109953) * C9616) +
            (C119496 + C119497) * C139403) *
               C139286 * C139586) *
              C824 +
          (((C109953 + C109952) * C9616 + (C110173 + C110172) * C9466 -
            (C119287 + C119286) * C9617 - (C119497 + C119496) * C139403) *
               C139286 * C13593 +
           ((C115438 + C115439) * C9616 + (C115584 + C115585) * C9466 -
            (C92850 * C68836 + C139588 * C69336 + C92849 * C24129 +
             C92451 * C24765) *
                C9617 -
            (C92850 * C69016 + C139588 * C69498 + C92849 * C24355 +
             C92451 * C24979) *
                C139403) *
               C139286 * C139586) *
              C825) *
         C139300) /
            (p * q * std::sqrt(p + q));
    d2eexx[120] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139286 * C113) * C2702 +
            (C63381 * C116 + C139286 * C125) * C139589 -
            (C63381 * C108 + C139286 * C114) * C2703 -
            (C63381 * C117 + C139286 * C126) * C139590 +
            (C63381 * C109 + C139286 * C115) * C2704 +
            (C63381 * C118 + C139286 * C127) * C2699) *
               C139442 * C124863 +
           (C79431 + C79432 - C79433 - C79434 + C79441 + C79442) * C139442 *
               C124864 +
           (C77539 * C2702 + C77538 * C139589 - C77537 * C2703 -
            C77540 * C139590 + (C63381 * C1770 + C139286 * C1782) * C2704 +
            (C63381 * C1785 + C139286 * C1794) * C2699) *
               C139442 * C124865) *
              C139339 * C139560 +
          ((C65306 - (C65305 + C65304) + C65307 - C65324 - C65325) * C139442 *
               C124863 +
           (C78531 - (C78530 + C78529) + C78532 - C78539 - C78540) * C139442 *
               C124864 +
           (C77541 * C2703 - (C68854 * C139589 + C68853 * C2702) +
            C77542 * C139590 - (C63381 * C6440 + C139286 * C6446) * C2704 -
            (C63381 * C6443 + C139286 * C6449) * C2699) *
               C139442 * C124865) *
              C139339 * C139377)) /
        (p * q * std::sqrt(p + q));
    d2eexy[120] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139286 * C113) * C2783 +
            (C63381 * C182 + C139286 * C188) * C139560 - C63884 * C2784 -
            C63997 * C139377) *
               C139442 * C124863 +
           (C80503 + C80504 - C80505 - C80506) * C139442 * C124864 +
           (C91688 + C91687 - C91686 - C91689) * C139442 * C124865) *
              C139589 +
          ((C63886 * C2784 -
            ((C63381 * C183 + C139286 * C189) * C139560 +
             (C63381 * C108 + C139286 * C114) * C2783) +
            C64000 * C139377) *
               C139442 * C124863 +
           (C80511 - (C80512 + C80513) + C80514) * C139442 * C124864 +
           (C77541 * C2784 - (C77674 * C139560 + C77537 * C2783) +
            C77675 * C139377) *
               C139442 * C124865) *
              C139590 +
          (((C63381 * C109 + C139286 * C115) * C2783 +
            (C63381 * C184 + C139286 * C190) * C139560 - C65320 * C2784 -
            C65406 * C139377) *
               C139442 * C124863 +
           (C79439 * C2783 + C79546 * C139560 - C78537 * C2784 -
            C78641 * C139377) *
               C139442 * C124864 +
           ((C63381 * C1770 + C139286 * C1782) * C2783 +
            (C63381 * C1876 + C139286 * C1884) * C139560 -
            (C63381 * C6440 + C139286 * C6446) * C2784 -
            (C63381 * C6526 + C139286 * C6529) * C139377) *
               C139442 * C124865) *
              C2699) *
         C139339) /
        (p * q * std::sqrt(p + q));
    d2eexz[120] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    (((((C63381 * C107 + C139286 * C113) * C244 +
                        (C63381 * C245 + C139286 * C251) * C139339) *
                           C139442 * C124863 +
                       (C77533 * C244 + C77790 * C139339) * C139442 * C124864 +
                       (C77539 * C244 + C77791 * C139339) * C139442 * C124865) *
                          C139560 -
                      ((C69033 * C139339 + C68853 * C244) * C139442 * C124865 +
                       (C76770 + C76769) * C139442 * C124864 +
                       (C64101 + C64077) * C139442 * C124863) *
                          C139377) *
                         C139589 +
                     (((C64086 + C64104) * C139442 * C124863 +
                       (C76773 + C76774) * C139442 * C124864 +
                       (C77541 * C244 + C77794 * C139339) * C139442 * C124865) *
                          C139377 -
                      ((C77793 * C139339 + C77537 * C244) * C139442 * C124865 +
                       (C77792 * C139339 + C77535 * C244) * C139442 * C124864 +
                       ((C63381 * C246 + C139286 * C252) * C139339 +
                        (C63381 * C108 + C139286 * C114) * C244) *
                           C139442 * C124863) *
                          C139560) *
                         C139590 +
                     ((((C63381 * C109 + C139286 * C115) * C244 +
                        (C63381 * C247 + C139286 * C253) * C139339) *
                           C139442 * C124863 +
                       (C79439 * C244 + C79648 * C139339) * C139442 * C124864 +
                       ((C63381 * C1770 + C139286 * C1782) * C244 +
                        (C63381 * C1968 + C139286 * C1976) * C139339) *
                           C139442 * C124865) *
                          C139560 -
                      (((C63381 * C6606 + C139286 * C6609) * C139339 +
                        (C63381 * C6440 + C139286 * C6446) * C244) *
                           C139442 * C124865 +
                       (C78744 + C78740) * C139442 * C124864 +
                       (C65490 + C65482) * C139442 * C124863) *
                          C139377) *
                         C2699)) /
                   (p * q * std::sqrt(p + q));
    d2eeyx[120] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139442 * C308) * C2702 +
            (C307 * C116 + C139442 * C314) * C139589 - C337 * C2703 -
            C338 * C139590 + C339 * C2704 + C340 * C2699) *
               C124863 +
           (C34389 + C34390 - C34391 - C34392 + C34393 + C34394) * C124864 +
           (C32486 * C2702 + C32485 * C139589 - C2090 * C2703 -
            C2091 * C139590 + C2092 * C2704 + C2093 * C2699) *
               C124865) *
              C139286 * C139339 * C139560 +
          ((C1150 * C2703 -
            ((C307 * C841 + C139442 * C1125) * C139589 +
             (C307 * C831 + C139442 * C1118) * C2702) +
            C1151 * C139590 - C1152 * C2704 - C1153 * C2699) *
               C124863 +
           (C4566 * C2703 - (C35458 * C139589 + C35459 * C2702) +
            C4567 * C139590 - C4568 * C2704 - C4569 * C2699) *
               C124864 +
           (C35460 * C2703 - (C38055 * C139589 + C38054 * C2702) +
            C35461 * C139590 - (C307 * C6440 + C139442 * C6686) * C2704 -
            (C307 * C6443 + C139442 * C6689) * C2699) *
               C124865) *
              C139286 * C139339 * C139377)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[120] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139442 * C308) * C2783 +
            (C307 * C182 + C139442 * C394) * C139560 -
            (C307 * C831 + C139442 * C1118) * C2784 -
            (C307 * C939 + C139442 * C1231) * C139377) *
               C124863 +
           (C35594 + C35595 - C35596 - C35610) * C124864 +
           (C46570 + C46569 - C46568 - C46571) * C124865) *
              C139286 * C139589 +
          ((C3023 - (C3022 + C3021) + C3024) * C124863 + C35612 * C124864 +
           (C35601 - (C35602 + C35603) + C35613) * C124865) *
              C139286 * C139590 +
          (C3038 * C124863 + (C4679 + C4678 - C4677 - C4685) * C124864 +
           (C2092 * C2783 + C2191 * C139560 -
            (C307 * C6440 + C139442 * C6686) * C2784 -
            (C307 * C6526 + C139442 * C6768) * C139377) *
               C124865) *
              C139286 * C2699) *
         C139339) /
        (p * q * std::sqrt(p + q));
    d2eeyz[120] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    (((((C307 * C107 + C139442 * C308) * C244 +
                        (C307 * C245 + C139442 * C474) * C139339) *
                           C124863 +
                       (C32483 * C244 + C32719 * C139339) * C124864 +
                       (C32486 * C244 + C32720 * C139339) * C124865) *
                          C139286 * C139560 -
                      ((C38271 * C139339 + C38054 * C244) * C124865 +
                       (C35751 * C139339 + C35459 * C244) * C124864 +
                       ((C307 * C1029 + C139442 * C1339) * C139339 +
                        (C307 * C831 + C139442 * C1118) * C244) *
                           C124863) *
                          C139286 * C139377) *
                         C139589 +
                     (((C1351 + C1363) * C124863 + (C31623 + C31622) * C124864 +
                       (C35460 * C244 + C35752 * C139339) * C124865) *
                          C139286 * C139377 -
                      ((C2295 * C139339 + C2090 * C244) * C124865 +
                       (C30742 + C30741) * C124864 + (C497 + C481) * C124863) *
                          C139286 * C139560) *
                         C139590 +
                     ((C501 * C124863 + (C30744 + C30743) * C124864 +
                       (C2092 * C244 + C2297 * C139339) * C124865) *
                          C139286 * C139560 -
                      (((C307 * C6606 + C139442 * C6845) * C139339 +
                        (C307 * C6440 + C139442 * C6686) * C244) *
                           C124865 +
                       (C33654 + C33653) * C124864 + C3115 * C124863) *
                          C139286 * C139377) *
                         C2699)) /
                   (p * q * std::sqrt(p + q));
    d2eezx[120] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    (((C125166 * C107 + C124863 * C555 + C125167 * C1767 +
                       C124864 * C2376 + C125168 * C1768 + C124865 * C2379) *
                          C2702 +
                      (C125166 * C116 + C124863 * C561 + C125167 * C1777 +
                       C124864 * C2383 + C125168 * C1783 + C124865 * C2387) *
                          C139589 -
                      (C125168 * C1769 + C124865 * C2380 + C125167 * C1764 +
                       C124864 * C2375 + C125166 * C108 + C124863 * C556) *
                          C2703 -
                      (C125168 * C1784 + C124865 * C2388 + C125167 * C1776 +
                       C124864 * C2384 + C125166 * C117 + C124863 * C562) *
                          C139590 +
                      (C125166 * C109 + C124863 * C557 + C125167 * C1765 +
                       C124864 * C2377 + C125168 * C1770 + C124865 * C2381) *
                          C2704 +
                      (C125166 * C118 + C124863 * C563 + C125167 * C1775 +
                       C124864 * C2385 + C125168 * C1785 + C124865 * C2389) *
                          C2699) *
                         C139286 * C139442 * C139339 * C139560 +
                     ((C125166 * C828 + C124863 * C1439 + C125167 * C4224 +
                       C124864 * C4900 + C125168 * C6441 + C124865 * C6921) *
                          C2703 -
                      ((C125168 * C6445 + C124865 * C6925 + C125167 * C4230 +
                        C124864 * C4903 + C125166 * C841 + C124863 * C1447) *
                           C139589 +
                       (C125168 * C6442 + C124865 * C6922 + C125167 * C4223 +
                        C124864 * C4899 + C125166 * C831 + C124863 * C1440) *
                           C2702) +
                      (C125166 * C840 + C124863 * C1448 + C125167 * C4231 +
                       C124864 * C4904 + C125168 * C6444 + C124865 * C6924) *
                          C139590 -
                      (C125168 * C6440 + C124865 * C6920 + C125167 * C4225 +
                       C124864 * C4901 + C125166 * C829 + C124863 * C1441) *
                          C2704 -
                      (C125168 * C6443 + C124865 * C6923 + C125167 * C4232 +
                       C124864 * C4905 + C125166 * C839 + C124863 * C1449) *
                          C2699) *
                         C139286 * C139442 * C139339 * C139377)) /
                   (p * q * std::sqrt(p + q));
    d2eezy[120] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    (((C125166 * C107 + C124863 * C555 + C125167 * C1767 +
                       C124864 * C2376 + C125168 * C1768 + C124865 * C2379) *
                          C2783 +
                      (C125166 * C182 + C124863 * C641 + C125167 * C1873 +
                       C124864 * C2492 + C125168 * C1874 + C124865 * C2493) *
                          C139560 -
                      (C125168 * C6442 + C124865 * C6922 + C125167 * C4223 +
                       C124864 * C4899 + C125166 * C831 + C124863 * C1440) *
                          C2784 -
                      (C125168 * C6528 + C124865 * C7000 + C125167 * C4337 +
                       C124864 * C5017 + C125166 * C939 + C124863 * C1553) *
                          C139377) *
                         C139286 * C139442 * C139589 +
                     ((C125166 * C828 + C124863 * C1439 + C125167 * C4224 +
                       C124864 * C4900 + C125168 * C6441 + C124865 * C6921) *
                          C2784 -
                      ((C125168 * C1875 + C124865 * C2494 + C125167 * C1870 +
                        C124864 * C2489 + C125166 * C183 + C124863 * C642) *
                           C139560 +
                       (C125168 * C1769 + C124865 * C2380 + C125167 * C1764 +
                        C124864 * C2375 + C125166 * C108 + C124863 * C556) *
                           C2783) +
                      (C125166 * C938 + C124863 * C1555 + C125167 * C4338 +
                       C124864 * C5018 + C125168 * C6527 + C124865 * C7001) *
                          C139377) *
                         C139286 * C139442 * C139590 +
                     ((C125166 * C109 + C124863 * C557 + C125167 * C1765 +
                       C124864 * C2377 + C125168 * C1770 + C124865 * C2381) *
                          C2783 +
                      (C125166 * C184 + C124863 * C643 + C125167 * C1871 +
                       C124864 * C2490 + C125168 * C1876 + C124865 * C2495) *
                          C139560 -
                      (C125168 * C6440 + C124865 * C6920 + C125167 * C4225 +
                       C124864 * C4901 + C125166 * C829 + C124863 * C1441) *
                          C2784 -
                      (C125168 * C6526 + C124865 * C7002 + C125167 * C4339 +
                       C124864 * C5019 + C125166 * C937 + C124863 * C1557) *
                          C139377) *
                         C139286 * C139442 * C2699) *
                    C139339) /
                   (p * q * std::sqrt(p + q));
    d2eezz[120] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    ((((C125166 * C107 + C124863 * C555 + C125167 * C1767 +
                        C124864 * C2376 + C125168 * C1768 + C124865 * C2379) *
                           C244 +
                       (C125166 * C245 + C124863 * C719 + C125167 * C1965 +
                        C124864 * C2591 + C125168 * C1966 + C124865 * C2592) *
                           C139339) *
                          C139286 * C139442 * C139560 -
                      ((C125168 * C6608 + C124865 * C7077 + C125167 * C4443 +
                        C124864 * C5133 + C125166 * C1029 + C124863 * C1661) *
                           C139339 +
                       (C125168 * C6442 + C124865 * C6922 + C125167 * C4223 +
                        C124864 * C4899 + C125166 * C831 + C124863 * C1440) *
                           C244) *
                          C139286 * C139442 * C139377) *
                         C139589 +
                     (((C125166 * C828 + C124863 * C1439 + C125167 * C4224 +
                        C124864 * C4900 + C125168 * C6441 + C124865 * C6921) *
                           C244 +
                       (C125166 * C1028 + C124863 * C1660 + C125167 * C4444 +
                        C124864 * C5134 + C125168 * C6607 + C124865 * C7078) *
                           C139339) *
                          C139286 * C139442 * C139377 -
                      ((C125168 * C1967 + C124865 * C2594 + C125167 * C1964 +
                        C124864 * C2593 + C125166 * C246 + C124863 * C720) *
                           C139339 +
                       (C125168 * C1769 + C124865 * C2380 + C125167 * C1764 +
                        C124864 * C2375 + C125166 * C108 + C124863 * C556) *
                           C244) *
                          C139286 * C139442 * C139560) *
                         C139590 +
                     (((C125166 * C109 + C124863 * C557 + C125167 * C1765 +
                        C124864 * C2377 + C125168 * C1770 + C124865 * C2381) *
                           C244 +
                       (C125166 * C247 + C124863 * C721 + C125167 * C1963 +
                        C124864 * C2595 + C125168 * C1968 + C124865 * C2596) *
                           C139339) *
                          C139286 * C139442 * C139560 -
                      ((C125168 * C6606 + C124865 * C7079 + C125167 * C4445 +
                        C124864 * C5135 + C125166 * C1027 + C124863 * C1659) *
                           C139339 +
                       (C125168 * C6440 + C124865 * C6920 + C125167 * C4225 +
                        C124864 * C4901 + C125166 * C829 + C124863 * C1441) *
                           C244) *
                          C139286 * C139442 * C139377) *
                         C2699)) /
                   (p * q * std::sqrt(p + q));
    d2eexx[121] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139286 * C113) * C826 +
             (C63381 * C116 + C139286 * C125) * C821 -
             (C63381 * C108 + C139286 * C114) * C827 -
             (C63381 * C117 + C139286 * C126) * C139305) *
                C139442 * C124863 +
            (C77543 + C77544 - C77545 - C77546) * C139442 * C124864 +
            C126023 * C124865) *
               C139561 +
           ((C77545 - (C77544 + C77543) + C77546) * C139442 * C124863 +
            (C77547 - (C77548 + C77549) + C77550) * C139442 * C124864 +
            (C126021 - (C126013 + C126014) + C126022) * C139442 * C124865) *
               C139403) *
              C139560 +
          (((C63898 - (C63897 + C63896) + C63899) * C139442 * C124863 +
            C80372 * C139442 * C124864 +
            (C77551 - (C77529 + C77530) + C77552) * C139442 * C124865) *
               C139561 +
           (C80371 * C139442 * C124863 +
            (C77530 + C77529 - C77551 - C77552) * C139442 * C124864 +
            (C83103 * C826 + C83104 * C821 -
             (C63381 * C26830 + C139286 * C26834) * C827 -
             (C63381 * C26832 + C139286 * C26836) * C139305) *
                C139442 * C124865) *
               C139403) *
              C139377)) /
        (p * q * std::sqrt(p + q));
    d2eexy[121] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139286 * C113) * C2783 +
             (C63381 * C182 + C139286 * C188) * C139560 - C63884 * C2784 -
             C63997 * C139377) *
                C139442 * C124863 +
            (C80503 + C80504 - C80505 - C80506) * C139442 * C124864 +
            (C91688 + C91687 - C91686 - C91689) * C139442 * C124865) *
               C821 +
           ((C63886 * C2784 -
             ((C63381 * C183 + C139286 * C189) * C139560 +
              (C63381 * C108 + C139286 * C114) * C2783) +
             C64000 * C139377) *
                C139442 * C124863 +
            (C80511 - (C80512 + C80513) + C80514) * C139442 * C124864 +
            (C128190 - (C128191 + C128192) + C128193) * C139442 * C124865) *
               C139305) *
              C139561 +
          (((C80505 - (C80504 + C80503) + C80506) * C139442 * C124863 +
            (C91686 - (C91687 + C91688) + C91689) * C139442 * C124864 +
            (C83103 * C2784 - (C88929 * C139560 + C88852 * C2783) +
             C83223 * C139377) *
                C139442 * C124865) *
               C821 +
           ((C80513 + C80512 - C80511 - C80514) * C139442 * C124863 +
            (C128192 + C128191 - C128190 - C128193) * C139442 * C124864 +
            (C126018 * C2783 + C126105 * C139560 -
             (C63381 * C26830 + C139286 * C26834) * C2784 -
             (C63381 * C26904 + C139286 * C26906) * C139377) *
                C139442 * C124865) *
               C139305) *
              C139403)) /
        (p * q * std::sqrt(p + q));
    d2eexz[121] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139286 * C113) * C3607 +
             (C63381 * C245 + C139286 * C251) * C139561 - C77533 * C3608 -
             C77790 * C139403) *
                C139442 * C124863 +
            (C77533 * C3607 + C77790 * C139561 - C77539 * C3608 -
             C77791 * C139403) *
                C139442 * C124864 +
            (C77539 * C3607 + C77791 * C139561 - C88852 * C3608 -
             C89001 * C139403) *
                C139442 * C124865) *
               C139560 +
           ((C66948 - (C66947 + C66946) + C66970) * C139442 * C124863 +
            (C80651 - (C80650 + C80649) + C80652) * C139442 * C124864 +
            (C83103 * C3608 - (C69033 * C139561 + C68853 * C3607) +
             C83329 * C139403) *
                C139442 * C124865) *
               C139377) *
              C821 +
          (((C77535 * C3608 -
             ((C63381 * C246 + C139286 * C252) * C139561 +
              (C63381 * C108 + C139286 * C114) * C3607) +
             C77792 * C139403) *
                C139442 * C124863 +
            (C77537 * C3608 - (C77792 * C139561 + C77535 * C3607) +
             C77793 * C139403) *
                C139442 * C124864 +
            (C126018 * C3608 - (C77793 * C139561 + C77537 * C3607) +
             C126183 * C139403) *
                C139442 * C124865) *
               C139560 +
           ((C66958 + C66957 - C66956 - C66972) * C139442 * C124863 +
            (C80655 + C80654 - C80653 - C80656) * C139442 * C124864 +
            (C77541 * C3607 + C77794 * C139561 -
             (C63381 * C26830 + C139286 * C26834) * C3608 -
             (C63381 * C26974 + C139286 * C26976) * C139403) *
                C139442 * C124865) *
               C139377) *
              C139305)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[121] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139442 * C308) * C826 +
             (C307 * C116 + C139442 * C314) * C821 - C337 * C827 -
             C338 * C139305) *
                C124863 +
            (C32489 + C32490 - C32463 - C32464) * C124864 + C126264 * C124865) *
               C139286 * C139561 +
           ((C32463 - (C32490 + C32489) + C32464) * C124863 +
            (C32469 - (C32491 + C32492) + C32474) * C124864 +
            (C126259 - (C126260 + C126261) + C126262) * C124865) *
               C139286 * C139403) *
              C139560 +
          (((C1150 * C827 -
             ((C307 * C841 + C139442 * C1125) * C821 +
              (C307 * C831 + C139442 * C1118) * C826) +
             C1151 * C139305) *
                C124863 +
            (C35444 - (C35462 + C35463) + C35449) * C124864 +
            (C128390 - (C128391 + C128392) + C128393) * C124865) *
               C139286 * C139561 +
           ((C35463 + C35462 - C35444 - C35449) * C124863 +
            (C128392 + C128391 - C128390 - C128393) * C124864 +
            ((C307 * C26831 + C139442 * C27045) * C826 +
             (C307 * C26833 + C139442 * C27047) * C821 -
             (C307 * C26830 + C139442 * C27044) * C827 -
             (C307 * C26832 + C139442 * C27046) * C139305) *
                C124865) *
               C139286 * C139403) *
              C139377)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[121] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139442 * C308) * C2783 +
             (C307 * C182 + C139442 * C394) * C139560 -
             (C307 * C831 + C139442 * C1118) * C2784 -
             (C307 * C939 + C139442 * C1231) * C139377) *
                C124863 +
            (C35594 + C35595 - C35596 - C35610) * C124864 +
            (C46570 + C46569 - C46568 - C46571) * C124865) *
               C139286 * C821 +
           ((C3023 - (C3022 + C3021) + C3024) * C124863 + C35612 * C124864 +
            (C35601 - (C35602 + C35603) + C35613) * C124865) *
               C139286 * C139305) *
              C139561 +
          (((C35596 - (C35595 + C35594) + C35610) * C124863 +
            (C46568 - (C46569 + C46570) + C46571) * C124864 +
            ((C307 * C26831 + C139442 * C27045) * C2784 -
             (C43729 * C139560 + C43654 * C2783) +
             (C307 * C26905 + C139442 * C27115) * C139377) *
                C124865) *
               C139286 * C821 +
           (C35611 * C124863 + (C35603 + C35602 - C35601 - C35613) * C124864 +
            (C32487 * C2783 + C32606 * C139560 -
             (C307 * C26830 + C139442 * C27044) * C2784 -
             (C307 * C26904 + C139442 * C27114) * C139377) *
                C124865) *
               C139286 * C139305) *
              C139403)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[121] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    (((((C307 * C107 + C139442 * C308) * C3607 +
                        (C307 * C245 + C139442 * C474) * C139561 -
                        C32483 * C3608 - C32719 * C139403) *
                           C124863 +
                       (C32483 * C3607 + C32719 * C139561 - C32486 * C3608 -
                        C32720 * C139403) *
                           C124864 +
                       (C32486 * C3607 + C32720 * C139561 - C43654 * C3608 -
                        C43801 * C139403) *
                           C124865) *
                          C139286 * C139560 +
                      ((C35459 * C3608 -
                        ((C307 * C1029 + C139442 * C1339) * C139561 +
                         (C307 * C831 + C139442 * C1118) * C3607) +
                        C35751 * C139403) *
                           C124863 +
                       (C38054 * C3608 - (C35751 * C139561 + C35459 * C3607) +
                        C38271 * C139403) *
                           C124864 +
                       ((C307 * C26831 + C139442 * C27045) * C3608 -
                        (C38271 * C139561 + C38054 * C3607) +
                        (C307 * C26975 + C139442 * C27182) * C139403) *
                           C124865) *
                          C139286 * C139377) *
                         C821 +
                     (((C3853 - (C3852 + C3851) + C3854) * C124863 +
                       (C34600 - (C34599 + C34598) + C34601) * C124864 +
                       (C32487 * C3608 - (C2295 * C139561 + C2090 * C3607) +
                        C32721 * C139403) *
                           C124865) *
                          C139286 * C139560 +
                      ((C4790 + C4789 - C4788 - C4800) * C124863 +
                       (C35748 + C35747 - C35746 - C35753) * C124864 +
                       (C35460 * C3607 + C35752 * C139561 -
                        (C307 * C26830 + C139442 * C27044) * C3608 -
                        (C307 * C26974 + C139442 * C27183) * C139403) *
                           C124865) *
                          C139286 * C139377) *
                         C139305)) /
                   (p * q * std::sqrt(p + q));
    d2eezx[121] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    ((((C125166 * C107 + C124863 * C555 + C125167 * C1767 +
                        C124864 * C2376 + C125168 * C1768 + C124865 * C2379) *
                           C826 +
                       (C125166 * C116 + C124863 * C561 + C125167 * C1777 +
                        C124864 * C2383 + C125168 * C1783 + C124865 * C2387) *
                           C821 -
                       (C125168 * C1769 + C124865 * C2380 + C125167 * C1764 +
                        C124864 * C2375 + C125166 * C108 + C124863 * C556) *
                           C827 -
                       (C125168 * C1784 + C124865 * C2388 + C125167 * C1776 +
                        C124864 * C2384 + C125166 * C117 + C124863 * C562) *
                           C139305) *
                          C139286 * C139442 * C139561 +
                      ((C125166 * C1764 + C124863 * C2375 + C125167 * C1769 +
                        C124864 * C2380 + C125168 * C10814 + C124865 * C11154) *
                           C827 -
                       ((C125168 * C10818 + C124865 * C11158 + C125167 * C1783 +
                         C124864 * C2387 + C125166 * C1777 + C124863 * C2383) *
                            C821 +
                        (C125168 * C10815 + C124865 * C11155 + C125167 * C1768 +
                         C124864 * C2379 + C125166 * C1767 + C124863 * C2376) *
                            C826) +
                       (C125166 * C1776 + C124863 * C2384 + C125167 * C1784 +
                        C124864 * C2388 + C125168 * C10817 + C124865 * C11157) *
                           C139305) *
                          C139286 * C139442 * C139403) *
                         C139560 +
                     (((C125166 * C828 + C124863 * C1439 + C125167 * C4224 +
                        C124864 * C4900 + C125168 * C6441 + C124865 * C6921) *
                           C827 -
                       ((C125168 * C6445 + C124865 * C6925 + C125167 * C4230 +
                         C124864 * C4903 + C125166 * C841 + C124863 * C1447) *
                            C821 +
                        (C125168 * C6442 + C124865 * C6922 + C125167 * C4223 +
                         C124864 * C4899 + C125166 * C831 + C124863 * C1440) *
                            C826) +
                       (C125166 * C840 + C124863 * C1448 + C125167 * C4231 +
                        C124864 * C4904 + C125168 * C6444 + C124865 * C6924) *
                           C139305) *
                          C139286 * C139442 * C139561 +
                      ((C125166 * C4223 + C124863 * C4899 + C125167 * C6442 +
                        C124864 * C6922 + C125168 * C26831 + C124865 * C27251) *
                           C826 +
                       (C125166 * C4230 + C124863 * C4903 + C125167 * C6445 +
                        C124864 * C6925 + C125168 * C26833 + C124865 * C27253) *
                           C821 -
                       (C125168 * C26830 + C124865 * C27250 + C125167 * C6441 +
                        C124864 * C6921 + C125166 * C4224 + C124863 * C4900) *
                           C827 -
                       (C125168 * C26832 + C124865 * C27252 + C125167 * C6444 +
                        C124864 * C6924 + C125166 * C4231 + C124863 * C4904) *
                           C139305) *
                          C139286 * C139442 * C139403) *
                         C139377)) /
                   (p * q * std::sqrt(p + q));
    d2eezy[121] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    ((((C125166 * C107 + C124863 * C555 + C125167 * C1767 +
                        C124864 * C2376 + C125168 * C1768 + C124865 * C2379) *
                           C2783 +
                       (C125166 * C182 + C124863 * C641 + C125167 * C1873 +
                        C124864 * C2492 + C125168 * C1874 + C124865 * C2493) *
                           C139560 -
                       (C125168 * C6442 + C124865 * C6922 + C125167 * C4223 +
                        C124864 * C4899 + C125166 * C831 + C124863 * C1440) *
                           C2784 -
                       (C125168 * C6528 + C124865 * C7000 + C125167 * C4337 +
                        C124864 * C5017 + C125166 * C939 + C124863 * C1553) *
                           C139377) *
                          C139286 * C139442 * C821 +
                      ((C125166 * C828 + C124863 * C1439 + C125167 * C4224 +
                        C124864 * C4900 + C125168 * C6441 + C124865 * C6921) *
                           C2784 -
                       ((C125168 * C1875 + C124865 * C2494 + C125167 * C1870 +
                         C124864 * C2489 + C125166 * C183 + C124863 * C642) *
                            C139560 +
                        (C125168 * C1769 + C124865 * C2380 + C125167 * C1764 +
                         C124864 * C2375 + C125166 * C108 + C124863 * C556) *
                            C2783) +
                       (C125166 * C938 + C124863 * C1555 + C125167 * C4338 +
                        C124864 * C5018 + C125168 * C6527 + C124865 * C7001) *
                           C139377) *
                          C139286 * C139442 * C139305) *
                         C139561 +
                     (((C125166 * C4223 + C124863 * C4899 + C125167 * C6442 +
                        C124864 * C6922 + C125168 * C26831 + C124865 * C27251) *
                           C2784 -
                       ((C125168 * C10877 + C124865 * C11211 + C125167 * C1874 +
                         C124864 * C2493 + C125166 * C1873 + C124863 * C2492) *
                            C139560 +
                        (C125168 * C10815 + C124865 * C11155 + C125167 * C1768 +
                         C124864 * C2379 + C125166 * C1767 + C124863 * C2376) *
                            C2783) +
                       (C125166 * C4337 + C124863 * C5017 + C125167 * C6528 +
                        C124864 * C7000 + C125168 * C26905 + C124865 * C27321) *
                           C139377) *
                          C139286 * C139442 * C821 +
                      ((C125166 * C1764 + C124863 * C2375 + C125167 * C1769 +
                        C124864 * C2380 + C125168 * C10814 + C124865 * C11154) *
                           C2783 +
                       (C125166 * C1870 + C124863 * C2489 + C125167 * C1875 +
                        C124864 * C2494 + C125168 * C10876 + C124865 * C11210) *
                           C139560 -
                       (C125168 * C26830 + C124865 * C27250 + C125167 * C6441 +
                        C124864 * C6921 + C125166 * C4224 + C124863 * C4900) *
                           C2784 -
                       (C125168 * C26904 + C124865 * C27320 + C125167 * C6527 +
                        C124864 * C7001 + C125166 * C4338 + C124863 * C5018) *
                           C139377) *
                          C139286 * C139442 * C139305) *
                         C139403)) /
                   (p * q * std::sqrt(p + q));
    d2eezz[121] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    ((((C125166 * C107 + C124863 * C555 + C125167 * C1767 +
                        C124864 * C2376 + C125168 * C1768 + C124865 * C2379) *
                           C3607 +
                       (C125166 * C245 + C124863 * C719 + C125167 * C1965 +
                        C124864 * C2591 + C125168 * C1966 + C124865 * C2592) *
                           C139561 -
                       (C125168 * C10815 + C124865 * C11155 + C125167 * C1768 +
                        C124864 * C2379 + C125166 * C1767 + C124863 * C2376) *
                           C3608 -
                       (C125168 * C10937 + C124865 * C11262 + C125167 * C1966 +
                        C124864 * C2592 + C125166 * C1965 + C124863 * C2591) *
                           C139403) *
                          C139286 * C139442 * C139560 +
                      ((C125166 * C4223 + C124863 * C4899 + C125167 * C6442 +
                        C124864 * C6922 + C125168 * C26831 + C124865 * C27251) *
                           C3608 -
                       ((C125168 * C6608 + C124865 * C7077 + C125167 * C4443 +
                         C124864 * C5133 + C125166 * C1029 + C124863 * C1661) *
                            C139561 +
                        (C125168 * C6442 + C124865 * C6922 + C125167 * C4223 +
                         C124864 * C4899 + C125166 * C831 + C124863 * C1440) *
                            C3607) +
                       (C125166 * C4443 + C124863 * C5133 + C125167 * C6608 +
                        C124864 * C7077 + C125168 * C26975 + C124865 * C27388) *
                           C139403) *
                          C139286 * C139442 * C139377) *
                         C821 +
                     (((C125166 * C1764 + C124863 * C2375 + C125167 * C1769 +
                        C124864 * C2380 + C125168 * C10814 + C124865 * C11154) *
                           C3608 -
                       ((C125168 * C1967 + C124865 * C2594 + C125167 * C1964 +
                         C124864 * C2593 + C125166 * C246 + C124863 * C720) *
                            C139561 +
                        (C125168 * C1769 + C124865 * C2380 + C125167 * C1764 +
                         C124864 * C2375 + C125166 * C108 + C124863 * C556) *
                            C3607) +
                       (C125166 * C1964 + C124863 * C2593 + C125167 * C1967 +
                        C124864 * C2594 + C125168 * C10936 + C124865 * C11263) *
                           C139403) *
                          C139286 * C139442 * C139560 +
                      ((C125166 * C828 + C124863 * C1439 + C125167 * C4224 +
                        C124864 * C4900 + C125168 * C6441 + C124865 * C6921) *
                           C3607 +
                       (C125166 * C1028 + C124863 * C1660 + C125167 * C4444 +
                        C124864 * C5134 + C125168 * C6607 + C124865 * C7078) *
                           C139561 -
                       (C125168 * C26830 + C124865 * C27250 + C125167 * C6441 +
                        C124864 * C6921 + C125166 * C4224 + C124863 * C4900) *
                           C3608 -
                       (C125168 * C26974 + C124865 * C27389 + C125167 * C6607 +
                        C124864 * C7078 + C125166 * C4444 + C124863 * C5134) *
                           C139403) *
                          C139286 * C139442 * C139377) *
                         C139305)) /
                   (p * q * std::sqrt(p + q));
    d2eexx[122] +=
        (-std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139286 * C113) * C826 +
            (C63381 * C116 + C139286 * C125) * C821 -
            (C63381 * C108 + C139286 * C114) * C827 -
            (C63381 * C117 + C139286 * C126) * C139305) *
               C139442 * C124863 +
           (C77543 + C77544 - C77545 - C77546) * C139442 * C124864 +
           (C77549 + C77548 - C77547 - C77550) * C139442 * C124865) *
              C139339 * C823 +
          ((C63898 - (C63897 + C63896) + C63899) * C139442 * C124863 +
           C80372 * C139442 * C124864 +
           (C77551 - (C77529 + C77530) + C77552) * C139442 * C124865) *
              C139339 * C824 +
          (C63910 * C139442 * C124863 +
           (C66736 + C66735 - C66734 - C66737) * C139442 * C124864 +
           (C68855 * C826 + C68856 * C821 -
            (C63381 * C21078 + C139286 * C21082) * C827 -
            (C63381 * C21080 + C139286 * C21084) * C139305) *
               C139442 * C124865) *
              C139339 * C825)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C63381 * C107 + C139286 * C113) * C103 +
           (C63381 * C116 + C139286 * C125) * C92 -
           (C63381 * C108 + C139286 * C114) * C104 -
           (C63381 * C117 + C139286 * C126) * C93 +
           (C63381 * C109 + C139286 * C115) * C105 +
           (C63381 * C118 + C139286 * C127) * C94 -
           (C63381 * C110 + C139286 * C119) * C106 -
           (C63381 * C120 + C139286 * C128) * C95) *
              C139442 * C124863 +
          (C77533 * C103 + C77534 * C92 - C77535 * C104 - C77536 * C93 +
           C79439 * C105 + C79440 * C94 -
           (C63381 * C1766 + C139286 * C1774) * C106 -
           (C63381 * C1779 + C139286 * C1791) * C95) *
              C139442 * C124864 +
          (C77539 * C103 + C77538 * C92 - C77537 * C104 - C77540 * C93 +
           (C63381 * C1770 + C139286 * C1782) * C105 +
           (C63381 * C1785 + C139286 * C1794) * C94 -
           (C63381 * C1771 + C139286 * C1786) * C106 -
           (C63381 * C1787 + C139286 * C1795) * C95) *
              C139442 * C124865) *
         C139339 * C139328) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139286 * C113) * C826 +
            (C63381 * C116 + C139286 * C125) * C821 -
            (C63381 * C108 + C139286 * C114) * C827 -
            (C63381 * C117 + C139286 * C126) * C139305) *
               C139442 * C124863 +
           (C77543 + C77544 - C77545 - C77546) * C139442 * C124864 +
           C126023 * C124865) *
              C1761 +
          ((C77545 - (C77544 + C77543) + C77546) * C139442 * C124863 +
           (C77547 - (C77548 + C77549) + C77550) * C139442 * C124864 +
           (C126021 - (C126013 + C126014) + C126022) * C139442 * C124865) *
              C1762 +
          (C126023 * C124863 +
           (C126014 + C126013 - C126021 - C126022) * C139442 * C124864 +
           ((C63381 * C43406 + C139286 * C43410) * C826 +
            (C63381 * C43408 + C139286 * C43412) * C821 -
            (C63381 * C43405 + C139286 * C43409) * C827 -
            (C63381 * C43407 + C139286 * C43411) * C139305) *
               C139442 * C124865) *
              C1763) *
         C139328) /
            (p * q * std::sqrt(p + q));
    d2eexy[122] +=
        (-std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139286 * C113) * C934 +
            (C63381 * C182 + C139286 * C188) * C823 - C63884 * C935 -
            C63997 * C824 + C63888 * C936 + C63998 * C825) *
               C139442 * C124863 +
           (C88072 + C88073 - C88074 - C88075 + C88076 + C88077) * C139442 *
               C124864 +
           (C77539 * C934 + C77676 * C823 - C68853 * C935 - C68941 * C824 +
            C68855 * C936 + C68942 * C825) *
               C139442 * C124865) *
              C821 +
          ((C63886 * C935 -
            ((C63381 * C183 + C139286 * C189) * C823 +
             (C63381 * C108 + C139286 * C114) * C934) +
            C64000 * C824 - C63890 * C936 - C64001 * C825) *
               C139442 * C124863 +
           (C66722 * C935 - (C77673 * C823 + C77535 * C934) + C66846 * C824 -
            C66726 * C936 - C66847 * C825) *
               C139442 * C124864 +
           (C77541 * C935 - (C77674 * C823 + C77537 * C934) + C77675 * C824 -
            (C63381 * C21078 + C139286 * C21082) * C936 -
            (C63381 * C21196 + C139286 * C21198) * C825) *
               C139442 * C124865) *
              C139305) *
         C139339) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139286 * C113) * C181 +
            (C63381 * C182 + C139286 * C188) * C139328) *
               C139442 * C124863 +
           (C77651 + C77677) * C139442 * C124864 +
           (C77671 + C77681) * C139442 * C124865) *
              C92 -
          ((C77679 + C77661) * C139442 * C124865 +
           (C77678 + C77660) * C139442 * C124864 +
           ((C63381 * C183 + C139286 * C189) * C139328 +
            (C63381 * C108 + C139286 * C114) * C181) *
               C139442 * C124863) *
              C93 +
          (((C63381 * C109 + C139286 * C115) * C181 +
            (C63381 * C184 + C139286 * C190) * C139328) *
               C139442 * C124863 +
           (C79541 + C79547) * C139442 * C124864 +
           ((C63381 * C1770 + C139286 * C1782) * C181 +
            (C63381 * C1876 + C139286 * C1884) * C139328) *
               C139442 * C124865) *
              C94 -
          (((C63381 * C1877 + C139286 * C1885) * C139328 +
            (C63381 * C1771 + C139286 * C1786) * C181) *
               C139442 * C124865 +
           ((C63381 * C1872 + C139286 * C1880) * C139328 +
            (C63381 * C1766 + C139286 * C1774) * C181) *
               C139442 * C124864 +
           ((C63381 * C185 + C139286 * C191) * C139328 +
            (C63381 * C110 + C139286 * C119) * C181) *
               C139442 * C124863) *
              C95) *
         C139339) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139286 * C113) * C181 +
             (C63381 * C182 + C139286 * C188) * C139328) *
                C139442 * C124863 +
            (C77651 + C77677) * C139442 * C124864 + C126103 * C124865) *
               C821 -
           (C126104 * C124865 + (C77678 + C77660) * C139442 * C124864 +
            ((C63381 * C183 + C139286 * C189) * C139328 +
             (C63381 * C108 + C139286 * C114) * C181) *
                C139442 * C124863) *
               C139305) *
              C1761 +
          (((C77660 + C77678) * C139442 * C124863 +
            (C77661 + C77679) * C139442 * C124864 +
            (C126100 + C126106) * C139442 * C124865) *
               C139305 -
           ((C88930 + C88924) * C139442 * C124865 +
            (C77681 + C77671) * C139442 * C124864 +
            (C77677 + C77651) * C139442 * C124863) *
               C821) *
              C1762 +
          ((C126103 * C124863 + (C88924 + C88930) * C139442 * C124864 +
            ((C63381 * C43406 + C139286 * C43410) * C181 +
             (C63381 * C43492 + C139286 * C43494) * C139328) *
                C139442 * C124865) *
               C821 -
           (((C63381 * C43491 + C139286 * C43493) * C139328 +
             (C63381 * C43405 + C139286 * C43409) * C181) *
                C139442 * C124865 +
            (C126106 + C126100) * C139442 * C124864 + C126104 * C124863) *
               C139305) *
              C1763)) /
            (p * q * std::sqrt(p + q));
    d2eexz[122] +=
        (-std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139286 * C113) * C244 +
             (C63381 * C245 + C139286 * C251) * C139339) *
                C139442 * C124863 +
            (C77533 * C244 + C77790 * C139339) * C139442 * C124864 +
            (C77539 * C244 + C77791 * C139339) * C139442 * C124865) *
               C823 -
           ((C69033 * C139339 + C68853 * C244) * C139442 * C124865 +
            (C76770 + C76769) * C139442 * C124864 +
            (C64101 + C64077) * C139442 * C124863) *
               C824 +
           (C64107 * C139442 * C124863 + (C76772 + C76771) * C139442 * C124864 +
            (C68855 * C244 + C69034 * C139339) * C139442 * C124865) *
               C825) *
              C821 +
          (((C64086 + C64104) * C139442 * C124863 +
            (C76773 + C76774) * C139442 * C124864 +
            (C77541 * C244 + C77794 * C139339) * C139442 * C124865) *
               C824 -
           ((C77793 * C139339 + C77537 * C244) * C139442 * C124865 +
            (C77792 * C139339 + C77535 * C244) * C139442 * C124864 +
            ((C63381 * C246 + C139286 * C252) * C139339 +
             (C63381 * C108 + C139286 * C114) * C244) *
                C139442 * C124863) *
               C823 -
           (((C63381 * C21304 + C139286 * C21306) * C139339 +
             (C63381 * C21078 + C139286 * C21082) * C244) *
                C139442 * C124865 +
            (C76776 + C76775) * C139442 * C124864 +
            C64108 * C139442 * C124863) *
               C825) *
              C139305)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139286 * C113) * C244 +
            (C63381 * C245 + C139286 * C251) * C139339) *
               C139442 * C124863 +
           (C77533 * C244 + C77790 * C139339) * C139442 * C124864 +
           (C77539 * C244 + C77791 * C139339) * C139442 * C124865) *
              C139328 * C92 -
          ((C77793 * C139339 + C77537 * C244) * C139442 * C124865 +
           (C77792 * C139339 + C77535 * C244) * C139442 * C124864 +
           ((C63381 * C246 + C139286 * C252) * C139339 +
            (C63381 * C108 + C139286 * C114) * C244) *
               C139442 * C124863) *
              C139328 * C93 +
          (((C63381 * C109 + C139286 * C115) * C244 +
            (C63381 * C247 + C139286 * C253) * C139339) *
               C139442 * C124863 +
           (C79439 * C244 + C79648 * C139339) * C139442 * C124864 +
           ((C63381 * C1770 + C139286 * C1782) * C244 +
            (C63381 * C1968 + C139286 * C1976) * C139339) *
               C139442 * C124865) *
              C139328 * C94 -
          (((C63381 * C1970 + C139286 * C1978) * C139339 +
            (C63381 * C1771 + C139286 * C1786) * C244) *
               C139442 * C124865 +
           ((C63381 * C1969 + C139286 * C1977) * C139339 +
            (C63381 * C1766 + C139286 * C1774) * C244) *
               C139442 * C124864 +
           ((C63381 * C248 + C139286 * C254) * C139339 +
            (C63381 * C110 + C139286 * C119) * C244) *
               C139442 * C124863) *
              C139328 * C95)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139286 * C113) * C1960 +
            (C63381 * C245 + C139286 * C251) * C1761 - C77533 * C1961 -
            C77790 * C1762 + C77539 * C1962 + C77791 * C1763) *
               C139442 * C124863 +
           (C77533 * C1960 + C77790 * C1761 - C77539 * C1961 - C77791 * C1762 +
            C88852 * C1962 + C89001 * C1763) *
               C139442 * C124864 +
           (C77539 * C1960 + C77791 * C1761 - C88852 * C1961 - C89001 * C1762 +
            (C63381 * C43406 + C139286 * C43410) * C1962 +
            (C63381 * C43568 + C139286 * C43570) * C1763) *
               C139442 * C124865) *
              C139328 * C821 +
          ((C77535 * C1961 -
            ((C63381 * C246 + C139286 * C252) * C1761 +
             (C63381 * C108 + C139286 * C114) * C1960) +
            C77792 * C1762 - C77537 * C1962 - C77793 * C1763) *
               C139442 * C124863 +
           (C77537 * C1961 - (C77792 * C1761 + C77535 * C1960) +
            C77793 * C1762 - C126018 * C1962 - C126183 * C1763) *
               C139442 * C124864 +
           (C126018 * C1961 - (C77793 * C1761 + C77537 * C1960) +
            C126183 * C1762 - (C63381 * C43405 + C139286 * C43409) * C1962 -
            (C63381 * C43567 + C139286 * C43569) * C1763) *
               C139442 * C124865) *
              C139328 * C139305)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[122] +=
        (-std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139442 * C308) * C826 +
            (C307 * C116 + C139442 * C314) * C821 - C337 * C827 -
            C338 * C139305) *
               C124863 +
           (C32489 + C32490 - C32463 - C32464) * C124864 +
           (C32492 + C32491 - C32469 - C32474) * C124865) *
              C139286 * C139339 * C823 +
          ((C1150 * C827 -
            ((C307 * C841 + C139442 * C1125) * C821 +
             (C307 * C831 + C139442 * C1118) * C826) +
            C1151 * C139305) *
               C124863 +
           (C35444 - (C35462 + C35463) + C35449) * C124864 +
           (C35460 * C827 - (C38055 * C821 + C38054 * C826) +
            C35461 * C139305) *
               C124865) *
              C139286 * C139339 * C824 +
          (((C307 * C832 + C139442 * C1121) * C826 +
            (C307 * C847 + C139442 * C1129) * C821 - C1154 * C827 -
            C1155 * C139305) *
               C124863 +
           (C41044 * C826 + C41045 * C821 - C31415 * C827 - C31416 * C139305) *
               C124864 +
           ((C307 * C21079 + C139442 * C21413) * C826 +
            (C307 * C21081 + C139442 * C21415) * C821 -
            (C307 * C21078 + C139442 * C21412) * C827 -
            (C307 * C21080 + C139442 * C21414) * C139305) *
               C124865) *
              C139286 * C139339 * C825)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C307 * C107 + C139442 * C308) * C103 +
           (C307 * C116 + C139442 * C314) * C92 - C337 * C104 - C338 * C93 +
           C339 * C105 + C340 * C94 - C341 * C106 - C342 * C95) *
              C124863 +
          (C32483 * C103 + C32484 * C92 - C2086 * C104 - C2087 * C93 +
           C2088 * C105 + C2089 * C94 - C3692 * C106 - C3693 * C95) *
              C124864 +
          (C32486 * C103 + C32485 * C92 - C2090 * C104 - C2091 * C93 +
           C2092 * C105 + C2093 * C94 -
           (C307 * C1771 + C139442 * C2060) * C106 -
           (C307 * C1787 + C139442 * C2068) * C95) *
              C124865) *
         C139286 * C139339 * C139328) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139442 * C308) * C826 +
            (C307 * C116 + C139442 * C314) * C821 - C337 * C827 -
            C338 * C139305) *
               C124863 +
           (C32489 + C32490 - C32463 - C32464) * C124864 + C126264 * C124865) *
              C139286 * C1761 +
          ((C32463 - (C32490 + C32489) + C32464) * C124863 +
           (C32469 - (C32491 + C32492) + C32474) * C124864 +
           (C126259 - (C126260 + C126261) + C126262) * C124865) *
              C139286 * C1762 +
          (C126264 * C124863 +
           (C126261 + C126260 - C126259 - C126262) * C124864 +
           ((C307 * C43406 + C139442 * C43644) * C826 +
            (C307 * C43408 + C139442 * C43646) * C821 -
            (C307 * C43405 + C139442 * C43643) * C827 -
            (C307 * C43407 + C139442 * C43645) * C139305) *
               C124865) *
              C139286 * C1763) *
         C139328) /
            (p * q * std::sqrt(p + q));
    d2eeyy[122] +=
        (-std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139442 * C308) * C934 +
            (C307 * C182 + C139442 * C394) * C823 -
            (C307 * C831 + C139442 * C1118) * C935 -
            (C307 * C939 + C139442 * C1231) * C824 +
            (C307 * C832 + C139442 * C1121) * C936 +
            (C307 * C940 + C139442 * C1232) * C825) *
               C124863 +
           (C42942 + C42943 - C42944 - C42945 + C42946 + C42947) * C124864 +
           (C32486 * C934 + C32605 * C823 - C38054 * C935 - C38169 * C824 +
            (C307 * C21079 + C139442 * C21413) * C936 +
            (C307 * C21197 + C139442 * C21514) * C825) *
               C124865) *
              C139286 * C821 +
          ((C1242 - (C1241 + C1240) + C1260 - C1245 - C1261) * C124863 +
           (C31517 - (C31516 + C31515) + C31518 - C31519 - C31523) * C124864 +
           (C35460 * C935 - (C2190 * C823 + C2090 * C934) + C35609 * C824 -
            (C307 * C21078 + C139442 * C21412) * C936 -
            (C307 * C21196 + C139442 * C21515) * C825) *
               C124865) *
              C139286 * C139305) *
         C139339) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139442 * C308) * C181 +
            (C307 * C182 + C139442 * C394) * C139328) *
               C124863 +
           (C32591 + C32607) * C124864 + (C32600 + C32608) * C124865) *
              C139286 * C92 -
          (C32597 * C124865 + C32595 * C124864 + (C417 + C401) * C124863) *
              C139286 * C93 +
          (C421 * C124863 + C34499 * C124864 + (C2185 + C2195) * C124865) *
              C139286 * C94 -
          (((C307 * C1877 + C139442 * C2174) * C139328 +
            (C307 * C1771 + C139442 * C2060) * C181) *
               C124865 +
           (C3775 + C3769) * C124864 + C422 * C124863) *
              C139286 * C95) *
         C139339) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139442 * C308) * C181 +
             (C307 * C182 + C139442 * C394) * C139328) *
                C124863 +
            (C32591 + C32607) * C124864 + C126339 * C124865) *
               C139286 * C821 -
           (C32597 * C124865 + C32595 * C124864 + (C417 + C401) * C124863) *
               C139286 * C139305) *
              C1761 +
          ((C32594 * C124863 + C32596 * C124864 + (C32601 + C32609) * C124865) *
               C139286 * C139305 -
           ((C43730 + C43726) * C124865 + (C32608 + C32600) * C124864 +
            (C32607 + C32591) * C124863) *
               C139286 * C821) *
              C1762 +
          ((C126339 * C124863 + (C43726 + C43730) * C124864 +
            ((C307 * C43406 + C139442 * C43644) * C181 +
             (C307 * C43492 + C139442 * C43724) * C139328) *
                C124865) *
               C139286 * C821 -
           (((C307 * C43491 + C139442 * C43723) * C139328 +
             (C307 * C43405 + C139442 * C43643) * C181) *
                C124865 +
            (C32609 + C32601) * C124864 + C32597 * C124863) *
               C139286 * C139305) *
              C1763)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[122] +=
        (-std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139442 * C308) * C244 +
             (C307 * C245 + C139442 * C474) * C139339) *
                C124863 +
            (C32483 * C244 + C32719 * C139339) * C124864 +
            (C32486 * C244 + C32720 * C139339) * C124865) *
               C139286 * C823 -
           ((C38271 * C139339 + C38054 * C244) * C124865 +
            (C35751 * C139339 + C35459 * C244) * C124864 +
            ((C307 * C1029 + C139442 * C1339) * C139339 +
             (C307 * C831 + C139442 * C1118) * C244) *
                C124863) *
               C139286 * C824 +
           (((C307 * C832 + C139442 * C1121) * C244 +
             (C307 * C1030 + C139442 * C1340) * C139339) *
                C124863 +
            (C41044 * C244 + C41255 * C139339) * C124864 +
            ((C307 * C21079 + C139442 * C21413) * C244 +
             (C307 * C21305 + C139442 * C21614) * C139339) *
                C124865) *
               C139286 * C825) *
              C821 +
          (((C1351 + C1363) * C124863 + (C31623 + C31622) * C124864 +
            (C35460 * C244 + C35752 * C139339) * C124865) *
               C139286 * C824 -
           ((C2295 * C139339 + C2090 * C244) * C124865 +
            (C30742 + C30741) * C124864 + (C497 + C481) * C124863) *
               C139286 * C823 -
           (((C307 * C21304 + C139442 * C21615) * C139339 +
             (C307 * C21078 + C139442 * C21412) * C244) *
                C124865 +
            (C31628 + C31624) * C124864 + (C1364 + C1352) * C124863) *
               C139286 * C825) *
              C139305)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139442 * C308) * C244 +
            (C307 * C245 + C139442 * C474) * C139339) *
               C124863 +
           (C32483 * C244 + C32719 * C139339) * C124864 +
           (C32486 * C244 + C32720 * C139339) * C124865) *
              C139286 * C139328 * C92 -
          ((C2295 * C139339 + C2090 * C244) * C124865 +
           (C30742 + C30741) * C124864 + (C497 + C481) * C124863) *
              C139286 * C139328 * C93 +
          (C501 * C124863 + (C30744 + C30743) * C124864 +
           (C2092 * C244 + C2297 * C139339) * C124865) *
              C139286 * C139328 * C94 -
          (((C307 * C1970 + C139442 * C2276) * C139339 +
            (C307 * C1771 + C139442 * C2060) * C244) *
               C124865 +
           (C30746 + C30745) * C124864 + C502 * C124863) *
              C139286 * C139328 * C95)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139442 * C308) * C1960 +
            (C307 * C245 + C139442 * C474) * C1761 - C32483 * C1961 -
            C32719 * C1762 + C32486 * C1962 + C32720 * C1763) *
               C124863 +
           (C32483 * C1960 + C32719 * C1761 - C32486 * C1961 - C32720 * C1762 +
            C43654 * C1962 + C43801 * C1763) *
               C124864 +
           (C32486 * C1960 + C32720 * C1761 - C43654 * C1961 - C43801 * C1762 +
            (C307 * C43406 + C139442 * C43644) * C1962 +
            (C307 * C43568 + C139442 * C43796) * C1763) *
               C124865) *
              C139286 * C139328 * C821 +
          ((C2280 - (C2279 + C2278) + C2298 - C2283 - C2299) * C124863 +
           (C32714 - (C32713 + C32712) + C32715 - C32716 - C32722) * C124864 +
           (C32487 * C1961 - (C2295 * C1761 + C2090 * C1960) + C32721 * C1762 -
            (C307 * C43405 + C139442 * C43643) * C1962 -
            (C307 * C43567 + C139442 * C43797) * C1763) *
               C124865) *
              C139286 * C139328 * C139305)) /
            (p * q * std::sqrt(p + q));
    d2eezx[122] += (-std::pow(Pi, 2.5) *
                    (((C125166 * C107 + C124863 * C555 + C125167 * C1767 +
                       C124864 * C2376 + C125168 * C1768 + C124865 * C2379) *
                          C826 +
                      (C125166 * C116 + C124863 * C561 + C125167 * C1777 +
                       C124864 * C2383 + C125168 * C1783 + C124865 * C2387) *
                          C821 -
                      (C125168 * C1769 + C124865 * C2380 + C125167 * C1764 +
                       C124864 * C2375 + C125166 * C108 + C124863 * C556) *
                          C827 -
                      (C125168 * C1784 + C124865 * C2388 + C125167 * C1776 +
                       C124864 * C2384 + C125166 * C117 + C124863 * C562) *
                          C139305) *
                         C139286 * C139442 * C139339 * C823 +
                     ((C125166 * C828 + C124863 * C1439 + C125167 * C4224 +
                       C124864 * C4900 + C125168 * C6441 + C124865 * C6921) *
                          C827 -
                      ((C125168 * C6445 + C124865 * C6925 + C125167 * C4230 +
                        C124864 * C4903 + C125166 * C841 + C124863 * C1447) *
                           C821 +
                       (C125168 * C6442 + C124865 * C6922 + C125167 * C4223 +
                        C124864 * C4899 + C125166 * C831 + C124863 * C1440) *
                           C826) +
                      (C125166 * C840 + C124863 * C1448 + C125167 * C4231 +
                       C124864 * C4904 + C125168 * C6444 + C124865 * C6924) *
                          C139305) *
                         C139286 * C139442 * C139339 * C824 +
                     ((C125166 * C832 + C124863 * C1443 + C125167 * C8754 +
                       C124864 * C9234 + C125168 * C21079 + C124865 * C21715) *
                          C826 +
                      (C125166 * C847 + C124863 * C1451 + C125167 * C8757 +
                       C124864 * C9237 + C125168 * C21081 + C124865 * C21717) *
                          C821 -
                      (C125168 * C21078 + C124865 * C21714 + C125167 * C8753 +
                       C124864 * C9233 + C125166 * C833 + C124863 * C1444) *
                          C827 -
                      (C125168 * C21080 + C124865 * C21716 + C125167 * C8756 +
                       C124864 * C9236 + C125166 * C848 + C124863 * C1452) *
                          C139305) *
                         C139286 * C139442 * C139339 * C825)) /
                       (p * q * std::sqrt(p + q)) -
                   (std::pow(Pi, 2.5) *
                    ((C125166 * C107 + C124863 * C555 + C125167 * C1767 +
                      C124864 * C2376 + C125168 * C1768 + C124865 * C2379) *
                         C103 +
                     (C125166 * C116 + C124863 * C561 + C125167 * C1777 +
                      C124864 * C2383 + C125168 * C1783 + C124865 * C2387) *
                         C92 -
                     (C125168 * C1769 + C124865 * C2380 + C125167 * C1764 +
                      C124864 * C2375 + C125166 * C108 + C124863 * C556) *
                         C104 -
                     (C125168 * C1784 + C124865 * C2388 + C125167 * C1776 +
                      C124864 * C2384 + C125166 * C117 + C124863 * C562) *
                         C93 +
                     (C125166 * C109 + C124863 * C557 + C125167 * C1765 +
                      C124864 * C2377 + C125168 * C1770 + C124865 * C2381) *
                         C105 +
                     (C125166 * C118 + C124863 * C563 + C125167 * C1775 +
                      C124864 * C2385 + C125168 * C1785 + C124865 * C2389) *
                         C94 -
                     (C125168 * C1771 + C124865 * C2382 + C125167 * C1766 +
                      C124864 * C2378 + C125166 * C110 + C124863 * C558) *
                         C106 -
                     (C125168 * C1787 + C124865 * C2390 + C125167 * C1779 +
                      C124864 * C2386 + C125166 * C120 + C124863 * C564) *
                         C95) *
                    C139286 * C139442 * C139339 * C139328) /
                       (p * q * std::sqrt(p + q)) +
                   (2 * std::pow(Pi, 2.5) *
                    (((C125166 * C107 + C124863 * C555 + C125167 * C1767 +
                       C124864 * C2376 + C125168 * C1768 + C124865 * C2379) *
                          C826 +
                      (C125166 * C116 + C124863 * C561 + C125167 * C1777 +
                       C124864 * C2383 + C125168 * C1783 + C124865 * C2387) *
                          C821 -
                      (C125168 * C1769 + C124865 * C2380 + C125167 * C1764 +
                       C124864 * C2375 + C125166 * C108 + C124863 * C556) *
                          C827 -
                      (C125168 * C1784 + C124865 * C2388 + C125167 * C1776 +
                       C124864 * C2384 + C125166 * C117 + C124863 * C562) *
                          C139305) *
                         C139286 * C139442 * C1761 +
                     ((C125166 * C1764 + C124863 * C2375 + C125167 * C1769 +
                       C124864 * C2380 + C125168 * C10814 + C124865 * C11154) *
                          C827 -
                      ((C125168 * C10818 + C124865 * C11158 + C125167 * C1783 +
                        C124864 * C2387 + C125166 * C1777 + C124863 * C2383) *
                           C821 +
                       (C125168 * C10815 + C124865 * C11155 + C125167 * C1768 +
                        C124864 * C2379 + C125166 * C1767 + C124863 * C2376) *
                           C826) +
                      (C125166 * C1776 + C124863 * C2384 + C125167 * C1784 +
                       C124864 * C2388 + C125168 * C10817 + C124865 * C11157) *
                          C139305) *
                         C139286 * C139442 * C1762 +
                     ((C125166 * C1768 + C124863 * C2379 + C125167 * C10815 +
                       C124864 * C11155 + C125168 * C43406 + C124865 * C43868) *
                          C826 +
                      (C125166 * C1783 + C124863 * C2387 + C125167 * C10818 +
                       C124864 * C11158 + C125168 * C43408 + C124865 * C43870) *
                          C821 -
                      (C125168 * C43405 + C124865 * C43867 + C125167 * C10814 +
                       C124864 * C11154 + C125166 * C1769 + C124863 * C2380) *
                          C827 -
                      (C125168 * C43407 + C124865 * C43869 + C125167 * C10817 +
                       C124864 * C11157 + C125166 * C1784 + C124863 * C2388) *
                          C139305) *
                         C139286 * C139442 * C1763) *
                    C139328) /
                       (p * q * std::sqrt(p + q));
    d2eezy[122] +=
        (-std::pow(Pi, 2.5) *
         (((C125166 * C107 + C124863 * C555 + C125167 * C1767 +
            C124864 * C2376 + C125168 * C1768 + C124865 * C2379) *
               C934 +
           (C125166 * C182 + C124863 * C641 + C125167 * C1873 +
            C124864 * C2492 + C125168 * C1874 + C124865 * C2493) *
               C823 -
           (C125168 * C6442 + C124865 * C6922 + C125167 * C4223 +
            C124864 * C4899 + C125166 * C831 + C124863 * C1440) *
               C935 -
           (C125168 * C6528 + C124865 * C7000 + C125167 * C4337 +
            C124864 * C5017 + C125166 * C939 + C124863 * C1553) *
               C824 +
           (C125166 * C832 + C124863 * C1443 + C125167 * C8754 +
            C124864 * C9234 + C125168 * C21079 + C124865 * C21715) *
               C936 +
           (C125166 * C940 + C124863 * C1554 + C125167 * C8840 +
            C124864 * C9312 + C125168 * C21197 + C124865 * C21830) *
               C825) *
              C139286 * C139442 * C821 +
          ((C125166 * C828 + C124863 * C1439 + C125167 * C4224 +
            C124864 * C4900 + C125168 * C6441 + C124865 * C6921) *
               C935 -
           ((C125168 * C1875 + C124865 * C2494 + C125167 * C1870 +
             C124864 * C2489 + C125166 * C183 + C124863 * C642) *
                C823 +
            (C125168 * C1769 + C124865 * C2380 + C125167 * C1764 +
             C124864 * C2375 + C125166 * C108 + C124863 * C556) *
                C934) +
           (C125166 * C938 + C124863 * C1555 + C125167 * C4338 +
            C124864 * C5018 + C125168 * C6527 + C124865 * C7001) *
               C824 -
           (C125168 * C21078 + C124865 * C21714 + C125167 * C8753 +
            C124864 * C9233 + C125166 * C833 + C124863 * C1444) *
               C936 -
           (C125168 * C21196 + C124865 * C21831 + C125167 * C8839 +
            C124864 * C9313 + C125166 * C941 + C124863 * C1556) *
               C825) *
              C139286 * C139442 * C139305) *
         C139339) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C125166 * C107 + C124863 * C555 + C125167 * C1767 +
            C124864 * C2376 + C125168 * C1768 + C124865 * C2379) *
               C181 +
           (C125166 * C182 + C124863 * C641 + C125167 * C1873 +
            C124864 * C2492 + C125168 * C1874 + C124865 * C2493) *
               C139328) *
              C139286 * C139442 * C92 -
          ((C125168 * C1875 + C124865 * C2494 + C125167 * C1870 +
            C124864 * C2489 + C125166 * C183 + C124863 * C642) *
               C139328 +
           (C125168 * C1769 + C124865 * C2380 + C125167 * C1764 +
            C124864 * C2375 + C125166 * C108 + C124863 * C556) *
               C181) *
              C139286 * C139442 * C93 +
          ((C125166 * C109 + C124863 * C557 + C125167 * C1765 +
            C124864 * C2377 + C125168 * C1770 + C124865 * C2381) *
               C181 +
           (C125166 * C184 + C124863 * C643 + C125167 * C1871 +
            C124864 * C2490 + C125168 * C1876 + C124865 * C2495) *
               C139328) *
              C139286 * C139442 * C94 -
          ((C125168 * C1877 + C124865 * C2496 + C125167 * C1872 +
            C124864 * C2491 + C125166 * C185 + C124863 * C644) *
               C139328 +
           (C125168 * C1771 + C124865 * C2382 + C125167 * C1766 +
            C124864 * C2378 + C125166 * C110 + C124863 * C558) *
               C181) *
              C139286 * C139442 * C95) *
         C139339) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C125166 * C107 + C124863 * C555 + C125167 * C1767 +
             C124864 * C2376 + C125168 * C1768 + C124865 * C2379) *
                C181 +
            (C125166 * C182 + C124863 * C641 + C125167 * C1873 +
             C124864 * C2492 + C125168 * C1874 + C124865 * C2493) *
                C139328) *
               C139286 * C139442 * C821 -
           ((C125168 * C1875 + C124865 * C2494 + C125167 * C1870 +
             C124864 * C2489 + C125166 * C183 + C124863 * C642) *
                C139328 +
            (C125168 * C1769 + C124865 * C2380 + C125167 * C1764 +
             C124864 * C2375 + C125166 * C108 + C124863 * C556) *
                C181) *
               C139286 * C139442 * C139305) *
              C1761 +
          (((C125166 * C1764 + C124863 * C2375 + C125167 * C1769 +
             C124864 * C2380 + C125168 * C10814 + C124865 * C11154) *
                C181 +
            (C125166 * C1870 + C124863 * C2489 + C125167 * C1875 +
             C124864 * C2494 + C125168 * C10876 + C124865 * C11210) *
                C139328) *
               C139286 * C139442 * C139305 -
           ((C125168 * C10877 + C124865 * C11211 + C125167 * C1874 +
             C124864 * C2493 + C125166 * C1873 + C124863 * C2492) *
                C139328 +
            (C125168 * C10815 + C124865 * C11155 + C125167 * C1768 +
             C124864 * C2379 + C125166 * C1767 + C124863 * C2376) *
                C181) *
               C139286 * C139442 * C821) *
              C1762 +
          (((C125166 * C1768 + C124863 * C2379 + C125167 * C10815 +
             C124864 * C11155 + C125168 * C43406 + C124865 * C43868) *
                C181 +
            (C125166 * C1874 + C124863 * C2493 + C125167 * C10877 +
             C124864 * C11211 + C125168 * C43492 + C124865 * C43938) *
                C139328) *
               C139286 * C139442 * C821 -
           ((C125168 * C43491 + C124865 * C43937 + C125167 * C10876 +
             C124864 * C11210 + C125166 * C1875 + C124863 * C2494) *
                C139328 +
            (C125168 * C43405 + C124865 * C43867 + C125167 * C10814 +
             C124864 * C11154 + C125166 * C1769 + C124863 * C2380) *
                C181) *
               C139286 * C139442 * C139305) *
              C1763)) /
            (p * q * std::sqrt(p + q));
    d2eezz[122] += (-std::pow(Pi, 2.5) *
                    ((((C125166 * C107 + C124863 * C555 + C125167 * C1767 +
                        C124864 * C2376 + C125168 * C1768 + C124865 * C2379) *
                           C244 +
                       (C125166 * C245 + C124863 * C719 + C125167 * C1965 +
                        C124864 * C2591 + C125168 * C1966 + C124865 * C2592) *
                           C139339) *
                          C139286 * C139442 * C823 -
                      ((C125168 * C6608 + C124865 * C7077 + C125167 * C4443 +
                        C124864 * C5133 + C125166 * C1029 + C124863 * C1661) *
                           C139339 +
                       (C125168 * C6442 + C124865 * C6922 + C125167 * C4223 +
                        C124864 * C4899 + C125166 * C831 + C124863 * C1440) *
                           C244) *
                          C139286 * C139442 * C824 +
                      ((C125166 * C832 + C124863 * C1443 + C125167 * C8754 +
                        C124864 * C9234 + C125168 * C21079 + C124865 * C21715) *
                           C244 +
                       (C125166 * C1030 + C124863 * C1662 + C125167 * C8920 +
                        C124864 * C9389 + C125168 * C21305 + C124865 * C21933) *
                           C139339) *
                          C139286 * C139442 * C825) *
                         C821 +
                     (((C125166 * C828 + C124863 * C1439 + C125167 * C4224 +
                        C124864 * C4900 + C125168 * C6441 + C124865 * C6921) *
                           C244 +
                       (C125166 * C1028 + C124863 * C1660 + C125167 * C4444 +
                        C124864 * C5134 + C125168 * C6607 + C124865 * C7078) *
                           C139339) *
                          C139286 * C139442 * C824 -
                      ((C125168 * C1967 + C124865 * C2594 + C125167 * C1964 +
                        C124864 * C2593 + C125166 * C246 + C124863 * C720) *
                           C139339 +
                       (C125168 * C1769 + C124865 * C2380 + C125167 * C1764 +
                        C124864 * C2375 + C125166 * C108 + C124863 * C556) *
                           C244) *
                          C139286 * C139442 * C823 -
                      ((C125168 * C21304 + C124865 * C21934 + C125167 * C8919 +
                        C124864 * C9390 + C125166 * C1031 + C124863 * C1663) *
                           C139339 +
                       (C125168 * C21078 + C124865 * C21714 + C125167 * C8753 +
                        C124864 * C9233 + C125166 * C833 + C124863 * C1444) *
                           C244) *
                          C139286 * C139442 * C825) *
                         C139305)) /
                       (p * q * std::sqrt(p + q)) -
                   (std::pow(Pi, 2.5) *
                    (((C125166 * C107 + C124863 * C555 + C125167 * C1767 +
                       C124864 * C2376 + C125168 * C1768 + C124865 * C2379) *
                          C244 +
                      (C125166 * C245 + C124863 * C719 + C125167 * C1965 +
                       C124864 * C2591 + C125168 * C1966 + C124865 * C2592) *
                          C139339) *
                         C139286 * C139442 * C139328 * C92 -
                     ((C125168 * C1967 + C124865 * C2594 + C125167 * C1964 +
                       C124864 * C2593 + C125166 * C246 + C124863 * C720) *
                          C139339 +
                      (C125168 * C1769 + C124865 * C2380 + C125167 * C1764 +
                       C124864 * C2375 + C125166 * C108 + C124863 * C556) *
                          C244) *
                         C139286 * C139442 * C139328 * C93 +
                     ((C125166 * C109 + C124863 * C557 + C125167 * C1765 +
                       C124864 * C2377 + C125168 * C1770 + C124865 * C2381) *
                          C244 +
                      (C125166 * C247 + C124863 * C721 + C125167 * C1963 +
                       C124864 * C2595 + C125168 * C1968 + C124865 * C2596) *
                          C139339) *
                         C139286 * C139442 * C139328 * C94 -
                     ((C125168 * C1970 + C124865 * C2598 + C125167 * C1969 +
                       C124864 * C2597 + C125166 * C248 + C124863 * C722) *
                          C139339 +
                      (C125168 * C1771 + C124865 * C2382 + C125167 * C1766 +
                       C124864 * C2378 + C125166 * C110 + C124863 * C558) *
                          C244) *
                         C139286 * C139442 * C139328 * C95)) /
                       (p * q * std::sqrt(p + q)) +
                   (2 * std::pow(Pi, 2.5) *
                    (((C125166 * C107 + C124863 * C555 + C125167 * C1767 +
                       C124864 * C2376 + C125168 * C1768 + C124865 * C2379) *
                          C1960 +
                      (C125166 * C245 + C124863 * C719 + C125167 * C1965 +
                       C124864 * C2591 + C125168 * C1966 + C124865 * C2592) *
                          C1761 -
                      (C125168 * C10815 + C124865 * C11155 + C125167 * C1768 +
                       C124864 * C2379 + C125166 * C1767 + C124863 * C2376) *
                          C1961 -
                      (C125168 * C10937 + C124865 * C11262 + C125167 * C1966 +
                       C124864 * C2592 + C125166 * C1965 + C124863 * C2591) *
                          C1762 +
                      (C125166 * C1768 + C124863 * C2379 + C125167 * C10815 +
                       C124864 * C11155 + C125168 * C43406 + C124865 * C43868) *
                          C1962 +
                      (C125166 * C1966 + C124863 * C2592 + C125167 * C10937 +
                       C124864 * C11262 + C125168 * C43568 + C124865 * C44005) *
                          C1763) *
                         C139286 * C139442 * C139328 * C821 +
                     ((C125166 * C1764 + C124863 * C2375 + C125167 * C1769 +
                       C124864 * C2380 + C125168 * C10814 + C124865 * C11154) *
                          C1961 -
                      ((C125168 * C1967 + C124865 * C2594 + C125167 * C1964 +
                        C124864 * C2593 + C125166 * C246 + C124863 * C720) *
                           C1761 +
                       (C125168 * C1769 + C124865 * C2380 + C125167 * C1764 +
                        C124864 * C2375 + C125166 * C108 + C124863 * C556) *
                           C1960) +
                      (C125166 * C1964 + C124863 * C2593 + C125167 * C1967 +
                       C124864 * C2594 + C125168 * C10936 + C124865 * C11263) *
                          C1762 -
                      (C125168 * C43405 + C124865 * C43867 + C125167 * C10814 +
                       C124864 * C11154 + C125166 * C1769 + C124863 * C2380) *
                          C1962 -
                      (C125168 * C43567 + C124865 * C44006 + C125167 * C10936 +
                       C124864 * C11263 + C125166 * C1967 + C124863 * C2594) *
                          C1763) *
                         C139286 * C139442 * C139328 * C139305)) /
                       (p * q * std::sqrt(p + q));
    d2eexx[123] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139286 * C113) * C2702 +
            (C63381 * C116 + C139286 * C125) * C139589 -
            (C63381 * C108 + C139286 * C114) * C2703 -
            (C63381 * C117 + C139286 * C126) * C139590 +
            (C63381 * C109 + C139286 * C115) * C2704 +
            (C63381 * C118 + C139286 * C127) * C2699) *
               C139442 * C124863 +
           (C79431 + C79432 - C79433 - C79434 + C79441 + C79442) * C139442 *
               C124864 +
           (C127376 + C127377 - C127378 - C127379 + C127386 + C127387) *
               C139442 * C124865) *
              C139561 +
          ((C79433 - (C79432 + C79431) + C79434 - C79441 - C79442) * C139442 *
               C124863 +
           (C127378 - (C127377 + C127376) + C127379 - C127386 - C127387) *
               C139442 * C124864 +
           (C126018 * C2703 - (C88853 * C139589 + C88852 * C2702) +
            C126019 * C139590 - (C63381 * C10813 + C139286 * C10819) * C2704 -
            (C63381 * C10816 + C139286 * C10822) * C2699) *
               C139442 * C124865) *
              C139403) *
         C139328) /
        (p * q * std::sqrt(p + q));
    d2eexy[123] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139286 * C113) * C181 +
             (C63381 * C182 + C139286 * C188) * C139328) *
                C139442 * C124863 +
            (C77651 + C77677) * C139442 * C124864 + C126103 * C124865) *
               C139589 -
           (C126104 * C124865 + (C77678 + C77660) * C139442 * C124864 +
            ((C63381 * C183 + C139286 * C189) * C139328 +
             (C63381 * C108 + C139286 * C114) * C181) *
                C139442 * C124863) *
               C139590 +
           (((C63381 * C109 + C139286 * C115) * C181 +
             (C63381 * C184 + C139286 * C190) * C139328) *
                C139442 * C124863 +
            (C79541 + C79547) * C139442 * C124864 +
            (C127462 + C127466) * C139442 * C124865) *
               C2699) *
              C139561 +
          (((C77660 + C77678) * C139442 * C124863 +
            (C77661 + C77679) * C139442 * C124864 +
            (C126100 + C126106) * C139442 * C124865) *
               C139590 -
           ((C88930 + C88924) * C139442 * C124865 +
            (C77681 + C77671) * C139442 * C124864 +
            (C77677 + C77651) * C139442 * C124863) *
               C139589 -
           (((C63381 * C10875 + C139286 * C10878) * C139328 +
             (C63381 * C10813 + C139286 * C10819) * C181) *
                C139442 * C124865 +
            (C127466 + C127462) * C139442 * C124864 +
            (C79547 + C79541) * C139442 * C124863) *
               C2699) *
              C139403)) /
        (p * q * std::sqrt(p + q));
    d2eexz[123] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    ((((C63381 * C107 + C139286 * C113) * C3607 +
                       (C63381 * C245 + C139286 * C251) * C139561 -
                       C77533 * C3608 - C77790 * C139403) *
                          C139442 * C124863 +
                      (C77533 * C3607 + C77790 * C139561 - C77539 * C3608 -
                       C77791 * C139403) *
                          C139442 * C124864 +
                      (C77539 * C3607 + C77791 * C139561 - C88852 * C3608 -
                       C89001 * C139403) *
                          C139442 * C124865) *
                         C139328 * C139589 +
                     ((C77535 * C3608 -
                       ((C63381 * C246 + C139286 * C252) * C139561 +
                        (C63381 * C108 + C139286 * C114) * C3607) +
                       C77792 * C139403) *
                          C139442 * C124863 +
                      (C77537 * C3608 - (C77792 * C139561 + C77535 * C3607) +
                       C77793 * C139403) *
                          C139442 * C124864 +
                      (C126018 * C3608 - (C77793 * C139561 + C77537 * C3607) +
                       C126183 * C139403) *
                          C139442 * C124865) *
                         C139328 * C139590 +
                     (((C63381 * C109 + C139286 * C115) * C3607 +
                       (C63381 * C247 + C139286 * C253) * C139561 -
                       C79439 * C3608 - C79648 * C139403) *
                          C139442 * C124863 +
                      (C79439 * C3607 + C79648 * C139561 - C127384 * C3608 -
                       C127543 * C139403) *
                          C139442 * C124864 +
                      (C127384 * C3607 + C127543 * C139561 -
                       (C63381 * C10813 + C139286 * C10819) * C3608 -
                       (C63381 * C10935 + C139286 * C10938) * C139403) *
                          C139442 * C124865) *
                         C139328 * C2699)) /
                   (p * q * std::sqrt(p + q));
    d2eeyx[123] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139442 * C308) * C2702 +
            (C307 * C116 + C139442 * C314) * C139589 - C337 * C2703 -
            C338 * C139590 + C339 * C2704 + C340 * C2699) *
               C124863 +
           (C34389 + C34390 - C34391 - C34392 + C34393 + C34394) * C124864 +
           (C127618 + C127619 - C127620 - C127621 + C127622 + C127623) *
               C124865) *
              C139286 * C139561 +
          ((C34391 - (C34390 + C34389) + C34392 - C34393 - C34394) * C124863 +
           (C127620 - (C127619 + C127618) + C127621 - C127622 - C127623) *
               C124864 +
           (C32487 * C2703 - (C43655 * C139589 + C43654 * C2702) +
            C32488 * C139590 - (C307 * C10813 + C139442 * C10991) * C2704 -
            (C307 * C10816 + C139442 * C10994) * C2699) *
               C124865) *
              C139286 * C139403) *
         C139328) /
        (p * q * std::sqrt(p + q));
    d2eeyy[123] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139442 * C308) * C181 +
             (C307 * C182 + C139442 * C394) * C139328) *
                C124863 +
            (C32591 + C32607) * C124864 + C126339 * C124865) *
               C139286 * C139589 -
           (C32597 * C124865 + C32595 * C124864 + (C417 + C401) * C124863) *
               C139286 * C139590 +
           (C421 * C124863 + C34499 * C124864 + (C2185 + C2195) * C124865) *
               C139286 * C2699) *
              C139561 +
          ((C32594 * C124863 + C32596 * C124864 + (C32601 + C32609) * C124865) *
               C139286 * C139590 -
           ((C43730 + C43726) * C124865 + (C32608 + C32600) * C124864 +
            (C32607 + C32591) * C124863) *
               C139286 * C139589 -
           (((C307 * C10875 + C139442 * C11047) * C139328 +
             (C307 * C10813 + C139442 * C10991) * C181) *
                C124865 +
            (C2195 + C2185) * C124864 + C3772 * C124863) *
               C139286 * C2699) *
              C139403)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[123] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139442 * C308) * C3607 +
            (C307 * C245 + C139442 * C474) * C139561 - C32483 * C3608 -
            C32719 * C139403) *
               C124863 +
           (C32483 * C3607 + C32719 * C139561 - C32486 * C3608 -
            C32720 * C139403) *
               C124864 +
           (C32486 * C3607 + C32720 * C139561 - C43654 * C3608 -
            C43801 * C139403) *
               C124865) *
              C139286 * C139328 * C139589 +
          ((C3853 - (C3852 + C3851) + C3854) * C124863 +
           (C34600 - (C34599 + C34598) + C34601) * C124864 +
           (C32487 * C3608 - (C2295 * C139561 + C2090 * C3607) +
            C32721 * C139403) *
               C124865) *
              C139286 * C139328 * C139590 +
          (C3868 * C124863 + (C34604 + C34603 - C34602 - C34605) * C124864 +
           (C2092 * C3607 + C2297 * C139561 -
            (C307 * C10813 + C139442 * C10991) * C3608 -
            (C307 * C10935 + C139442 * C11102) * C139403) *
               C124865) *
              C139286 * C139328 * C2699)) /
        (p * q * std::sqrt(p + q));
    d2eezx[123] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    (((C125166 * C107 + C124863 * C555 + C125167 * C1767 +
                       C124864 * C2376 + C125168 * C1768 + C124865 * C2379) *
                          C2702 +
                      (C125166 * C116 + C124863 * C561 + C125167 * C1777 +
                       C124864 * C2383 + C125168 * C1783 + C124865 * C2387) *
                          C139589 -
                      (C125168 * C1769 + C124865 * C2380 + C125167 * C1764 +
                       C124864 * C2375 + C125166 * C108 + C124863 * C556) *
                          C2703 -
                      (C125168 * C1784 + C124865 * C2388 + C125167 * C1776 +
                       C124864 * C2384 + C125166 * C117 + C124863 * C562) *
                          C139590 +
                      (C125166 * C109 + C124863 * C557 + C125167 * C1765 +
                       C124864 * C2377 + C125168 * C1770 + C124865 * C2381) *
                          C2704 +
                      (C125166 * C118 + C124863 * C563 + C125167 * C1775 +
                       C124864 * C2385 + C125168 * C1785 + C124865 * C2389) *
                          C2699) *
                         C139286 * C139442 * C139561 +
                     ((C125166 * C1764 + C124863 * C2375 + C125167 * C1769 +
                       C124864 * C2380 + C125168 * C10814 + C124865 * C11154) *
                          C2703 -
                      ((C125168 * C10818 + C124865 * C11158 + C125167 * C1783 +
                        C124864 * C2387 + C125166 * C1777 + C124863 * C2383) *
                           C139589 +
                       (C125168 * C10815 + C124865 * C11155 + C125167 * C1768 +
                        C124864 * C2379 + C125166 * C1767 + C124863 * C2376) *
                           C2702) +
                      (C125166 * C1776 + C124863 * C2384 + C125167 * C1784 +
                       C124864 * C2388 + C125168 * C10817 + C124865 * C11157) *
                          C139590 -
                      (C125168 * C10813 + C124865 * C11153 + C125167 * C1770 +
                       C124864 * C2381 + C125166 * C1765 + C124863 * C2377) *
                          C2704 -
                      (C125168 * C10816 + C124865 * C11156 + C125167 * C1785 +
                       C124864 * C2389 + C125166 * C1775 + C124863 * C2385) *
                          C2699) *
                         C139286 * C139442 * C139403) *
                    C139328) /
                   (p * q * std::sqrt(p + q));
    d2eezy[123] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    ((((C125166 * C107 + C124863 * C555 + C125167 * C1767 +
                        C124864 * C2376 + C125168 * C1768 + C124865 * C2379) *
                           C181 +
                       (C125166 * C182 + C124863 * C641 + C125167 * C1873 +
                        C124864 * C2492 + C125168 * C1874 + C124865 * C2493) *
                           C139328) *
                          C139286 * C139442 * C139589 -
                      ((C125168 * C1875 + C124865 * C2494 + C125167 * C1870 +
                        C124864 * C2489 + C125166 * C183 + C124863 * C642) *
                           C139328 +
                       (C125168 * C1769 + C124865 * C2380 + C125167 * C1764 +
                        C124864 * C2375 + C125166 * C108 + C124863 * C556) *
                           C181) *
                          C139286 * C139442 * C139590 +
                      ((C125166 * C109 + C124863 * C557 + C125167 * C1765 +
                        C124864 * C2377 + C125168 * C1770 + C124865 * C2381) *
                           C181 +
                       (C125166 * C184 + C124863 * C643 + C125167 * C1871 +
                        C124864 * C2490 + C125168 * C1876 + C124865 * C2495) *
                           C139328) *
                          C139286 * C139442 * C2699) *
                         C139561 +
                     (((C125166 * C1764 + C124863 * C2375 + C125167 * C1769 +
                        C124864 * C2380 + C125168 * C10814 + C124865 * C11154) *
                           C181 +
                       (C125166 * C1870 + C124863 * C2489 + C125167 * C1875 +
                        C124864 * C2494 + C125168 * C10876 + C124865 * C11210) *
                           C139328) *
                          C139286 * C139442 * C139590 -
                      ((C125168 * C10877 + C124865 * C11211 + C125167 * C1874 +
                        C124864 * C2493 + C125166 * C1873 + C124863 * C2492) *
                           C139328 +
                       (C125168 * C10815 + C124865 * C11155 + C125167 * C1768 +
                        C124864 * C2379 + C125166 * C1767 + C124863 * C2376) *
                           C181) *
                          C139286 * C139442 * C139589 -
                      ((C125168 * C10875 + C124865 * C11209 + C125167 * C1876 +
                        C124864 * C2495 + C125166 * C1871 + C124863 * C2490) *
                           C139328 +
                       (C125168 * C10813 + C124865 * C11153 + C125167 * C1770 +
                        C124864 * C2381 + C125166 * C1765 + C124863 * C2377) *
                           C181) *
                          C139286 * C139442 * C2699) *
                         C139403)) /
                   (p * q * std::sqrt(p + q));
    d2eezz[123] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    (((C125166 * C107 + C124863 * C555 + C125167 * C1767 +
                       C124864 * C2376 + C125168 * C1768 + C124865 * C2379) *
                          C3607 +
                      (C125166 * C245 + C124863 * C719 + C125167 * C1965 +
                       C124864 * C2591 + C125168 * C1966 + C124865 * C2592) *
                          C139561 -
                      (C125168 * C10815 + C124865 * C11155 + C125167 * C1768 +
                       C124864 * C2379 + C125166 * C1767 + C124863 * C2376) *
                          C3608 -
                      (C125168 * C10937 + C124865 * C11262 + C125167 * C1966 +
                       C124864 * C2592 + C125166 * C1965 + C124863 * C2591) *
                          C139403) *
                         C139286 * C139442 * C139328 * C139589 +
                     ((C125166 * C1764 + C124863 * C2375 + C125167 * C1769 +
                       C124864 * C2380 + C125168 * C10814 + C124865 * C11154) *
                          C3608 -
                      ((C125168 * C1967 + C124865 * C2594 + C125167 * C1964 +
                        C124864 * C2593 + C125166 * C246 + C124863 * C720) *
                           C139561 +
                       (C125168 * C1769 + C124865 * C2380 + C125167 * C1764 +
                        C124864 * C2375 + C125166 * C108 + C124863 * C556) *
                           C3607) +
                      (C125166 * C1964 + C124863 * C2593 + C125167 * C1967 +
                       C124864 * C2594 + C125168 * C10936 + C124865 * C11263) *
                          C139403) *
                         C139286 * C139442 * C139328 * C139590 +
                     ((C125166 * C109 + C124863 * C557 + C125167 * C1765 +
                       C124864 * C2377 + C125168 * C1770 + C124865 * C2381) *
                          C3607 +
                      (C125166 * C247 + C124863 * C721 + C125167 * C1963 +
                       C124864 * C2595 + C125168 * C1968 + C124865 * C2596) *
                          C139561 -
                      (C125168 * C10813 + C124865 * C11153 + C125167 * C1770 +
                       C124864 * C2381 + C125166 * C1765 + C124863 * C2377) *
                          C3608 -
                      (C125168 * C10935 + C124865 * C11264 + C125167 * C1968 +
                       C124864 * C2596 + C125166 * C1963 + C124863 * C2595) *
                          C139403) *
                         C139286 * C139442 * C139328 * C2699)) /
                   (p * q * std::sqrt(p + q));
    d2eexx[124] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C63381 * C107 + C139286 * C113) * C103 +
           (C63381 * C116 + C139286 * C125) * C92 -
           (C63381 * C108 + C139286 * C114) * C104 -
           (C63381 * C117 + C139286 * C126) * C93 +
           (C63381 * C109 + C139286 * C115) * C105 +
           (C63381 * C118 + C139286 * C127) * C94 -
           (C63381 * C110 + C139286 * C119) * C106 -
           (C63381 * C120 + C139286 * C128) * C95) *
              C139442 * C124863 +
          (C77533 * C103 + C77534 * C92 - C77535 * C104 - C77536 * C93 +
           C79439 * C105 + C79440 * C94 -
           (C63381 * C1766 + C139286 * C1774) * C106 -
           (C63381 * C1779 + C139286 * C1791) * C95) *
              C139442 * C124864 +
          (C77539 * C103 + C77538 * C92 - C77537 * C104 - C77540 * C93 +
           (C63381 * C1770 + C139286 * C1782) * C105 +
           (C63381 * C1785 + C139286 * C1794) * C94 -
           (C63381 * C1771 + C139286 * C1786) * C106 -
           (C63381 * C1787 + C139286 * C1795) * C95) *
              C139442 * C124865) *
         C139339 * C139328) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139286 * C113) * C826 +
            (C63381 * C116 + C139286 * C125) * C821 -
            (C63381 * C108 + C139286 * C114) * C827 -
            (C63381 * C117 + C139286 * C126) * C139305) *
               C139442 * C124863 +
           (C77543 + C77544 - C77545 - C77546) * C139442 * C124864 +
           (C77549 + C77548 - C77547 - C77550) * C139442 * C124865) *
              C139339 * C823 +
          ((C63898 - (C63897 + C63896) + C63899) * C139442 * C124863 +
           C80372 * C139442 * C124864 +
           (C77551 - (C77529 + C77530) + C77552) * C139442 * C124865) *
              C139339 * C824 +
          (C63910 * C139442 * C124863 +
           (C66736 + C66735 - C66734 - C66737) * C139442 * C124864 +
           (C68855 * C826 + C68856 * C821 -
            (C63381 * C21078 + C139286 * C21082) * C827 -
            (C63381 * C21080 + C139286 * C21084) * C139305) *
               C139442 * C124865) *
              C139339 * C825)) /
            (p * q * std::sqrt(p + q));
    d2eexy[124] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139286 * C113) * C181 +
            (C63381 * C182 + C139286 * C188) * C139328) *
               C139442 * C124863 +
           (C77651 + C77677) * C139442 * C124864 +
           (C77671 + C77681) * C139442 * C124865) *
              C92 -
          ((C77679 + C77661) * C139442 * C124865 +
           (C77678 + C77660) * C139442 * C124864 +
           ((C63381 * C183 + C139286 * C189) * C139328 +
            (C63381 * C108 + C139286 * C114) * C181) *
               C139442 * C124863) *
              C93 +
          (((C63381 * C109 + C139286 * C115) * C181 +
            (C63381 * C184 + C139286 * C190) * C139328) *
               C139442 * C124863 +
           (C79541 + C79547) * C139442 * C124864 +
           ((C63381 * C1770 + C139286 * C1782) * C181 +
            (C63381 * C1876 + C139286 * C1884) * C139328) *
               C139442 * C124865) *
              C94 -
          (((C63381 * C1877 + C139286 * C1885) * C139328 +
            (C63381 * C1771 + C139286 * C1786) * C181) *
               C139442 * C124865 +
           ((C63381 * C1872 + C139286 * C1880) * C139328 +
            (C63381 * C1766 + C139286 * C1774) * C181) *
               C139442 * C124864 +
           ((C63381 * C185 + C139286 * C191) * C139328 +
            (C63381 * C110 + C139286 * C119) * C181) *
               C139442 * C124863) *
              C95) *
         C139339) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139286 * C113) * C934 +
            (C63381 * C182 + C139286 * C188) * C823 - C63884 * C935 -
            C63997 * C824 + C63888 * C936 + C63998 * C825) *
               C139442 * C124863 +
           (C88072 + C88073 - C88074 - C88075 + C88076 + C88077) * C139442 *
               C124864 +
           (C77539 * C934 + C77676 * C823 - C68853 * C935 - C68941 * C824 +
            C68855 * C936 + C68942 * C825) *
               C139442 * C124865) *
              C821 +
          ((C63886 * C935 -
            ((C63381 * C183 + C139286 * C189) * C823 +
             (C63381 * C108 + C139286 * C114) * C934) +
            C64000 * C824 - C63890 * C936 - C64001 * C825) *
               C139442 * C124863 +
           (C66722 * C935 - (C77673 * C823 + C77535 * C934) + C66846 * C824 -
            C66726 * C936 - C66847 * C825) *
               C139442 * C124864 +
           (C77541 * C935 - (C77674 * C823 + C77537 * C934) + C77675 * C824 -
            (C63381 * C21078 + C139286 * C21082) * C936 -
            (C63381 * C21196 + C139286 * C21198) * C825) *
               C139442 * C124865) *
              C139305) *
         C139339) /
            (p * q * std::sqrt(p + q));
    d2eexz[124] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139286 * C113) * C244 +
            (C63381 * C245 + C139286 * C251) * C139339) *
               C139442 * C124863 +
           (C77533 * C244 + C77790 * C139339) * C139442 * C124864 +
           (C77539 * C244 + C77791 * C139339) * C139442 * C124865) *
              C139328 * C92 -
          ((C77793 * C139339 + C77537 * C244) * C139442 * C124865 +
           (C77792 * C139339 + C77535 * C244) * C139442 * C124864 +
           ((C63381 * C246 + C139286 * C252) * C139339 +
            (C63381 * C108 + C139286 * C114) * C244) *
               C139442 * C124863) *
              C139328 * C93 +
          (((C63381 * C109 + C139286 * C115) * C244 +
            (C63381 * C247 + C139286 * C253) * C139339) *
               C139442 * C124863 +
           (C79439 * C244 + C79648 * C139339) * C139442 * C124864 +
           ((C63381 * C1770 + C139286 * C1782) * C244 +
            (C63381 * C1968 + C139286 * C1976) * C139339) *
               C139442 * C124865) *
              C139328 * C94 -
          (((C63381 * C1970 + C139286 * C1978) * C139339 +
            (C63381 * C1771 + C139286 * C1786) * C244) *
               C139442 * C124865 +
           ((C63381 * C1969 + C139286 * C1977) * C139339 +
            (C63381 * C1766 + C139286 * C1774) * C244) *
               C139442 * C124864 +
           ((C63381 * C248 + C139286 * C254) * C139339 +
            (C63381 * C110 + C139286 * C119) * C244) *
               C139442 * C124863) *
              C139328 * C95)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139286 * C113) * C244 +
             (C63381 * C245 + C139286 * C251) * C139339) *
                C139442 * C124863 +
            (C77533 * C244 + C77790 * C139339) * C139442 * C124864 +
            (C77539 * C244 + C77791 * C139339) * C139442 * C124865) *
               C823 -
           ((C69033 * C139339 + C68853 * C244) * C139442 * C124865 +
            (C76770 + C76769) * C139442 * C124864 +
            (C64101 + C64077) * C139442 * C124863) *
               C824 +
           (C64107 * C139442 * C124863 + (C76772 + C76771) * C139442 * C124864 +
            (C68855 * C244 + C69034 * C139339) * C139442 * C124865) *
               C825) *
              C821 +
          (((C64086 + C64104) * C139442 * C124863 +
            (C76773 + C76774) * C139442 * C124864 +
            (C77541 * C244 + C77794 * C139339) * C139442 * C124865) *
               C824 -
           ((C77793 * C139339 + C77537 * C244) * C139442 * C124865 +
            (C77792 * C139339 + C77535 * C244) * C139442 * C124864 +
            ((C63381 * C246 + C139286 * C252) * C139339 +
             (C63381 * C108 + C139286 * C114) * C244) *
                C139442 * C124863) *
               C823 -
           (((C63381 * C21304 + C139286 * C21306) * C139339 +
             (C63381 * C21078 + C139286 * C21082) * C244) *
                C139442 * C124865 +
            (C76776 + C76775) * C139442 * C124864 +
            C64108 * C139442 * C124863) *
               C825) *
              C139305)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[124] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C307 * C107 + C139442 * C308) * C103 +
           (C307 * C116 + C139442 * C314) * C92 - C337 * C104 - C338 * C93 +
           C339 * C105 + C340 * C94 - C341 * C106 - C342 * C95) *
              C124863 +
          (C32483 * C103 + C32484 * C92 - C2086 * C104 - C2087 * C93 +
           C2088 * C105 + C2089 * C94 - C3692 * C106 - C3693 * C95) *
              C124864 +
          (C32486 * C103 + C32485 * C92 - C2090 * C104 - C2091 * C93 +
           C2092 * C105 + C2093 * C94 -
           (C307 * C1771 + C139442 * C2060) * C106 -
           (C307 * C1787 + C139442 * C2068) * C95) *
              C124865) *
         C139286 * C139339 * C139328) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139442 * C308) * C826 +
            (C307 * C116 + C139442 * C314) * C821 - C337 * C827 -
            C338 * C139305) *
               C124863 +
           (C32489 + C32490 - C32463 - C32464) * C124864 +
           (C32492 + C32491 - C32469 - C32474) * C124865) *
              C139286 * C139339 * C823 +
          ((C1150 * C827 -
            ((C307 * C841 + C139442 * C1125) * C821 +
             (C307 * C831 + C139442 * C1118) * C826) +
            C1151 * C139305) *
               C124863 +
           (C35444 - (C35462 + C35463) + C35449) * C124864 +
           (C35460 * C827 - (C38055 * C821 + C38054 * C826) +
            C35461 * C139305) *
               C124865) *
              C139286 * C139339 * C824 +
          (((C307 * C832 + C139442 * C1121) * C826 +
            (C307 * C847 + C139442 * C1129) * C821 - C1154 * C827 -
            C1155 * C139305) *
               C124863 +
           (C41044 * C826 + C41045 * C821 - C31415 * C827 - C31416 * C139305) *
               C124864 +
           ((C307 * C21079 + C139442 * C21413) * C826 +
            (C307 * C21081 + C139442 * C21415) * C821 -
            (C307 * C21078 + C139442 * C21412) * C827 -
            (C307 * C21080 + C139442 * C21414) * C139305) *
               C124865) *
              C139286 * C139339 * C825)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[124] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139442 * C308) * C181 +
            (C307 * C182 + C139442 * C394) * C139328) *
               C124863 +
           (C32591 + C32607) * C124864 + (C32600 + C32608) * C124865) *
              C139286 * C92 -
          (C32597 * C124865 + C32595 * C124864 + (C417 + C401) * C124863) *
              C139286 * C93 +
          (C421 * C124863 + C34499 * C124864 + (C2185 + C2195) * C124865) *
              C139286 * C94 -
          (((C307 * C1877 + C139442 * C2174) * C139328 +
            (C307 * C1771 + C139442 * C2060) * C181) *
               C124865 +
           (C3775 + C3769) * C124864 + C422 * C124863) *
              C139286 * C95) *
         C139339) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139442 * C308) * C934 +
            (C307 * C182 + C139442 * C394) * C823 -
            (C307 * C831 + C139442 * C1118) * C935 -
            (C307 * C939 + C139442 * C1231) * C824 +
            (C307 * C832 + C139442 * C1121) * C936 +
            (C307 * C940 + C139442 * C1232) * C825) *
               C124863 +
           (C42942 + C42943 - C42944 - C42945 + C42946 + C42947) * C124864 +
           (C32486 * C934 + C32605 * C823 - C38054 * C935 - C38169 * C824 +
            (C307 * C21079 + C139442 * C21413) * C936 +
            (C307 * C21197 + C139442 * C21514) * C825) *
               C124865) *
              C139286 * C821 +
          ((C1242 - (C1241 + C1240) + C1260 - C1245 - C1261) * C124863 +
           (C31517 - (C31516 + C31515) + C31518 - C31519 - C31523) * C124864 +
           (C35460 * C935 - (C2190 * C823 + C2090 * C934) + C35609 * C824 -
            (C307 * C21078 + C139442 * C21412) * C936 -
            (C307 * C21196 + C139442 * C21515) * C825) *
               C124865) *
              C139286 * C139305) *
         C139339) /
            (p * q * std::sqrt(p + q));
    d2eeyz[124] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139442 * C308) * C244 +
            (C307 * C245 + C139442 * C474) * C139339) *
               C124863 +
           (C32483 * C244 + C32719 * C139339) * C124864 +
           (C32486 * C244 + C32720 * C139339) * C124865) *
              C139286 * C139328 * C92 -
          ((C2295 * C139339 + C2090 * C244) * C124865 +
           (C30742 + C30741) * C124864 + (C497 + C481) * C124863) *
              C139286 * C139328 * C93 +
          (C501 * C124863 + (C30744 + C30743) * C124864 +
           (C2092 * C244 + C2297 * C139339) * C124865) *
              C139286 * C139328 * C94 -
          (((C307 * C1970 + C139442 * C2276) * C139339 +
            (C307 * C1771 + C139442 * C2060) * C244) *
               C124865 +
           (C30746 + C30745) * C124864 + C502 * C124863) *
              C139286 * C139328 * C95)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139442 * C308) * C244 +
             (C307 * C245 + C139442 * C474) * C139339) *
                C124863 +
            (C32483 * C244 + C32719 * C139339) * C124864 +
            (C32486 * C244 + C32720 * C139339) * C124865) *
               C139286 * C823 -
           ((C38271 * C139339 + C38054 * C244) * C124865 +
            (C35751 * C139339 + C35459 * C244) * C124864 +
            ((C307 * C1029 + C139442 * C1339) * C139339 +
             (C307 * C831 + C139442 * C1118) * C244) *
                C124863) *
               C139286 * C824 +
           (((C307 * C832 + C139442 * C1121) * C244 +
             (C307 * C1030 + C139442 * C1340) * C139339) *
                C124863 +
            (C41044 * C244 + C41255 * C139339) * C124864 +
            ((C307 * C21079 + C139442 * C21413) * C244 +
             (C307 * C21305 + C139442 * C21614) * C139339) *
                C124865) *
               C139286 * C825) *
              C821 +
          (((C1351 + C1363) * C124863 + (C31623 + C31622) * C124864 +
            (C35460 * C244 + C35752 * C139339) * C124865) *
               C139286 * C824 -
           ((C2295 * C139339 + C2090 * C244) * C124865 +
            (C30742 + C30741) * C124864 + (C497 + C481) * C124863) *
               C139286 * C823 -
           (((C307 * C21304 + C139442 * C21615) * C139339 +
             (C307 * C21078 + C139442 * C21412) * C244) *
                C124865 +
            (C31628 + C31624) * C124864 + (C1364 + C1352) * C124863) *
               C139286 * C825) *
              C139305)) /
            (p * q * std::sqrt(p + q));
    d2eezx[124] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    ((C125166 * C107 + C124863 * C555 + C125167 * C1767 +
                      C124864 * C2376 + C125168 * C1768 + C124865 * C2379) *
                         C103 +
                     (C125166 * C116 + C124863 * C561 + C125167 * C1777 +
                      C124864 * C2383 + C125168 * C1783 + C124865 * C2387) *
                         C92 -
                     (C125168 * C1769 + C124865 * C2380 + C125167 * C1764 +
                      C124864 * C2375 + C125166 * C108 + C124863 * C556) *
                         C104 -
                     (C125168 * C1784 + C124865 * C2388 + C125167 * C1776 +
                      C124864 * C2384 + C125166 * C117 + C124863 * C562) *
                         C93 +
                     (C125166 * C109 + C124863 * C557 + C125167 * C1765 +
                      C124864 * C2377 + C125168 * C1770 + C124865 * C2381) *
                         C105 +
                     (C125166 * C118 + C124863 * C563 + C125167 * C1775 +
                      C124864 * C2385 + C125168 * C1785 + C124865 * C2389) *
                         C94 -
                     (C125168 * C1771 + C124865 * C2382 + C125167 * C1766 +
                      C124864 * C2378 + C125166 * C110 + C124863 * C558) *
                         C106 -
                     (C125168 * C1787 + C124865 * C2390 + C125167 * C1779 +
                      C124864 * C2386 + C125166 * C120 + C124863 * C564) *
                         C95) *
                    C139286 * C139442 * C139339 * C139328) /
                       (p * q * std::sqrt(p + q)) -
                   (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    (((C125166 * C107 + C124863 * C555 + C125167 * C1767 +
                       C124864 * C2376 + C125168 * C1768 + C124865 * C2379) *
                          C826 +
                      (C125166 * C116 + C124863 * C561 + C125167 * C1777 +
                       C124864 * C2383 + C125168 * C1783 + C124865 * C2387) *
                          C821 -
                      (C125168 * C1769 + C124865 * C2380 + C125167 * C1764 +
                       C124864 * C2375 + C125166 * C108 + C124863 * C556) *
                          C827 -
                      (C125168 * C1784 + C124865 * C2388 + C125167 * C1776 +
                       C124864 * C2384 + C125166 * C117 + C124863 * C562) *
                          C139305) *
                         C139286 * C139442 * C139339 * C823 +
                     ((C125166 * C828 + C124863 * C1439 + C125167 * C4224 +
                       C124864 * C4900 + C125168 * C6441 + C124865 * C6921) *
                          C827 -
                      ((C125168 * C6445 + C124865 * C6925 + C125167 * C4230 +
                        C124864 * C4903 + C125166 * C841 + C124863 * C1447) *
                           C821 +
                       (C125168 * C6442 + C124865 * C6922 + C125167 * C4223 +
                        C124864 * C4899 + C125166 * C831 + C124863 * C1440) *
                           C826) +
                      (C125166 * C840 + C124863 * C1448 + C125167 * C4231 +
                       C124864 * C4904 + C125168 * C6444 + C124865 * C6924) *
                          C139305) *
                         C139286 * C139442 * C139339 * C824 +
                     ((C125166 * C832 + C124863 * C1443 + C125167 * C8754 +
                       C124864 * C9234 + C125168 * C21079 + C124865 * C21715) *
                          C826 +
                      (C125166 * C847 + C124863 * C1451 + C125167 * C8757 +
                       C124864 * C9237 + C125168 * C21081 + C124865 * C21717) *
                          C821 -
                      (C125168 * C21078 + C124865 * C21714 + C125167 * C8753 +
                       C124864 * C9233 + C125166 * C833 + C124863 * C1444) *
                          C827 -
                      (C125168 * C21080 + C124865 * C21716 + C125167 * C8756 +
                       C124864 * C9236 + C125166 * C848 + C124863 * C1452) *
                          C139305) *
                         C139286 * C139442 * C139339 * C825)) /
                       (p * q * std::sqrt(p + q));
    d2eezy[124] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    (((C125166 * C107 + C124863 * C555 + C125167 * C1767 +
                       C124864 * C2376 + C125168 * C1768 + C124865 * C2379) *
                          C181 +
                      (C125166 * C182 + C124863 * C641 + C125167 * C1873 +
                       C124864 * C2492 + C125168 * C1874 + C124865 * C2493) *
                          C139328) *
                         C139286 * C139442 * C92 -
                     ((C125168 * C1875 + C124865 * C2494 + C125167 * C1870 +
                       C124864 * C2489 + C125166 * C183 + C124863 * C642) *
                          C139328 +
                      (C125168 * C1769 + C124865 * C2380 + C125167 * C1764 +
                       C124864 * C2375 + C125166 * C108 + C124863 * C556) *
                          C181) *
                         C139286 * C139442 * C93 +
                     ((C125166 * C109 + C124863 * C557 + C125167 * C1765 +
                       C124864 * C2377 + C125168 * C1770 + C124865 * C2381) *
                          C181 +
                      (C125166 * C184 + C124863 * C643 + C125167 * C1871 +
                       C124864 * C2490 + C125168 * C1876 + C124865 * C2495) *
                          C139328) *
                         C139286 * C139442 * C94 -
                     ((C125168 * C1877 + C124865 * C2496 + C125167 * C1872 +
                       C124864 * C2491 + C125166 * C185 + C124863 * C644) *
                          C139328 +
                      (C125168 * C1771 + C124865 * C2382 + C125167 * C1766 +
                       C124864 * C2378 + C125166 * C110 + C124863 * C558) *
                          C181) *
                         C139286 * C139442 * C95) *
                    C139339) /
                       (p * q * std::sqrt(p + q)) -
                   (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    (((C125166 * C107 + C124863 * C555 + C125167 * C1767 +
                       C124864 * C2376 + C125168 * C1768 + C124865 * C2379) *
                          C934 +
                      (C125166 * C182 + C124863 * C641 + C125167 * C1873 +
                       C124864 * C2492 + C125168 * C1874 + C124865 * C2493) *
                          C823 -
                      (C125168 * C6442 + C124865 * C6922 + C125167 * C4223 +
                       C124864 * C4899 + C125166 * C831 + C124863 * C1440) *
                          C935 -
                      (C125168 * C6528 + C124865 * C7000 + C125167 * C4337 +
                       C124864 * C5017 + C125166 * C939 + C124863 * C1553) *
                          C824 +
                      (C125166 * C832 + C124863 * C1443 + C125167 * C8754 +
                       C124864 * C9234 + C125168 * C21079 + C124865 * C21715) *
                          C936 +
                      (C125166 * C940 + C124863 * C1554 + C125167 * C8840 +
                       C124864 * C9312 + C125168 * C21197 + C124865 * C21830) *
                          C825) *
                         C139286 * C139442 * C821 +
                     ((C125166 * C828 + C124863 * C1439 + C125167 * C4224 +
                       C124864 * C4900 + C125168 * C6441 + C124865 * C6921) *
                          C935 -
                      ((C125168 * C1875 + C124865 * C2494 + C125167 * C1870 +
                        C124864 * C2489 + C125166 * C183 + C124863 * C642) *
                           C823 +
                       (C125168 * C1769 + C124865 * C2380 + C125167 * C1764 +
                        C124864 * C2375 + C125166 * C108 + C124863 * C556) *
                           C934) +
                      (C125166 * C938 + C124863 * C1555 + C125167 * C4338 +
                       C124864 * C5018 + C125168 * C6527 + C124865 * C7001) *
                          C824 -
                      (C125168 * C21078 + C124865 * C21714 + C125167 * C8753 +
                       C124864 * C9233 + C125166 * C833 + C124863 * C1444) *
                          C936 -
                      (C125168 * C21196 + C124865 * C21831 + C125167 * C8839 +
                       C124864 * C9313 + C125166 * C941 + C124863 * C1556) *
                          C825) *
                         C139286 * C139442 * C139305) *
                    C139339) /
                       (p * q * std::sqrt(p + q));
    d2eezz[124] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    (((C125166 * C107 + C124863 * C555 + C125167 * C1767 +
                       C124864 * C2376 + C125168 * C1768 + C124865 * C2379) *
                          C244 +
                      (C125166 * C245 + C124863 * C719 + C125167 * C1965 +
                       C124864 * C2591 + C125168 * C1966 + C124865 * C2592) *
                          C139339) *
                         C139286 * C139442 * C139328 * C92 -
                     ((C125168 * C1967 + C124865 * C2594 + C125167 * C1964 +
                       C124864 * C2593 + C125166 * C246 + C124863 * C720) *
                          C139339 +
                      (C125168 * C1769 + C124865 * C2380 + C125167 * C1764 +
                       C124864 * C2375 + C125166 * C108 + C124863 * C556) *
                          C244) *
                         C139286 * C139442 * C139328 * C93 +
                     ((C125166 * C109 + C124863 * C557 + C125167 * C1765 +
                       C124864 * C2377 + C125168 * C1770 + C124865 * C2381) *
                          C244 +
                      (C125166 * C247 + C124863 * C721 + C125167 * C1963 +
                       C124864 * C2595 + C125168 * C1968 + C124865 * C2596) *
                          C139339) *
                         C139286 * C139442 * C139328 * C94 -
                     ((C125168 * C1970 + C124865 * C2598 + C125167 * C1969 +
                       C124864 * C2597 + C125166 * C248 + C124863 * C722) *
                          C139339 +
                      (C125168 * C1771 + C124865 * C2382 + C125167 * C1766 +
                       C124864 * C2378 + C125166 * C110 + C124863 * C558) *
                          C244) *
                         C139286 * C139442 * C139328 * C95)) /
                       (p * q * std::sqrt(p + q)) -
                   (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    ((((C125166 * C107 + C124863 * C555 + C125167 * C1767 +
                        C124864 * C2376 + C125168 * C1768 + C124865 * C2379) *
                           C244 +
                       (C125166 * C245 + C124863 * C719 + C125167 * C1965 +
                        C124864 * C2591 + C125168 * C1966 + C124865 * C2592) *
                           C139339) *
                          C139286 * C139442 * C823 -
                      ((C125168 * C6608 + C124865 * C7077 + C125167 * C4443 +
                        C124864 * C5133 + C125166 * C1029 + C124863 * C1661) *
                           C139339 +
                       (C125168 * C6442 + C124865 * C6922 + C125167 * C4223 +
                        C124864 * C4899 + C125166 * C831 + C124863 * C1440) *
                           C244) *
                          C139286 * C139442 * C824 +
                      ((C125166 * C832 + C124863 * C1443 + C125167 * C8754 +
                        C124864 * C9234 + C125168 * C21079 + C124865 * C21715) *
                           C244 +
                       (C125166 * C1030 + C124863 * C1662 + C125167 * C8920 +
                        C124864 * C9389 + C125168 * C21305 + C124865 * C21933) *
                           C139339) *
                          C139286 * C139442 * C825) *
                         C821 +
                     (((C125166 * C828 + C124863 * C1439 + C125167 * C4224 +
                        C124864 * C4900 + C125168 * C6441 + C124865 * C6921) *
                           C244 +
                       (C125166 * C1028 + C124863 * C1660 + C125167 * C4444 +
                        C124864 * C5134 + C125168 * C6607 + C124865 * C7078) *
                           C139339) *
                          C139286 * C139442 * C824 -
                      ((C125168 * C1967 + C124865 * C2594 + C125167 * C1964 +
                        C124864 * C2593 + C125166 * C246 + C124863 * C720) *
                           C139339 +
                       (C125168 * C1769 + C124865 * C2380 + C125167 * C1764 +
                        C124864 * C2375 + C125166 * C108 + C124863 * C556) *
                           C244) *
                          C139286 * C139442 * C823 -
                      ((C125168 * C21304 + C124865 * C21934 + C125167 * C8919 +
                        C124864 * C9390 + C125166 * C1031 + C124863 * C1663) *
                           C139339 +
                       (C125168 * C21078 + C124865 * C21714 + C125167 * C8753 +
                        C124864 * C9233 + C125166 * C833 + C124863 * C1444) *
                           C244) *
                          C139286 * C139442 * C825) *
                         C139305)) /
                       (p * q * std::sqrt(p + q));
    d2eexx[125] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139286 * C113) * C137108 +
            (C63381 * C116 + C139286 * C125) * C139552 -
            (C63381 * C108 + C139286 * C114) * C137101 -
            (C63381 * C117 + C139286 * C126) * C139305) *
               C139442 * C124863 +
           (C84979 + C84980 - C84981 - C84982) * C139442 * C124864 +
           (C90704 + C90703 - C90702 - C90705) * C139442 * C124865) *
              C139339 * C139591 +
          ((C69585 - (C69584 + C69583) + C69586) * C139442 * C124863 +
           C84992 * C139442 * C124864 +
           (C84985 - (C84986 + C84987) + C84988) * C139442 * C124865) *
              C139339 * C139592 +
          (C69597 * C139442 * C124863 +
           (C70302 + C70301 - C70300 - C70303) * C139442 * C124864 +
           (C68855 * C137108 + C68856 * C139552 -
            (C63381 * C21078 + C139286 * C21082) * C137101 -
            (C63381 * C21080 + C139286 * C21084) * C139305) *
               C139442 * C124865) *
              C139339 * C7158)) /
        (p * q * std::sqrt(p + q));
    d2eexy[125] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139286 * C113) * C7235 +
            (C63381 * C182 + C139286 * C188) * C139591 - C63884 * C7236 -
            C63997 * C139592 + C63888 * C7237 + C63998 * C7158) *
               C139442 * C124863 +
           (C86238 + C86239 - C86240 - C86241 + C86242 + C86243) * C139442 *
               C124864 +
           (C77539 * C7235 + C77676 * C139591 - C68853 * C7236 -
            C68941 * C139592 + C68855 * C7237 + C68942 * C7158) *
               C139442 * C124865) *
              C139552 +
          ((C63886 * C7236 -
            ((C63381 * C183 + C139286 * C189) * C139591 +
             (C63381 * C108 + C139286 * C114) * C7235) +
            C64000 * C139592 - C63890 * C7237 - C64001 * C7158) *
               C139442 * C124863 +
           (C66722 * C7236 - (C77673 * C139591 + C77535 * C7235) +
            C66846 * C139592 - C66726 * C7237 - C66847 * C7158) *
               C139442 * C124864 +
           (C77541 * C7236 - (C77674 * C139591 + C77537 * C7235) +
            C77675 * C139592 - (C63381 * C21078 + C139286 * C21082) * C7237 -
            (C63381 * C21196 + C139286 * C21198) * C7158) *
               C139442 * C124865) *
              C139305) *
         C139339) /
        (p * q * std::sqrt(p + q));
    d2eexz[125] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139286 * C113) * C244 +
             (C63381 * C245 + C139286 * C251) * C139339) *
                C139442 * C124863 +
            (C77533 * C244 + C77790 * C139339) * C139442 * C124864 +
            (C77539 * C244 + C77791 * C139339) * C139442 * C124865) *
               C139591 -
           ((C69033 * C139339 + C68853 * C244) * C139442 * C124865 +
            (C76770 + C76769) * C139442 * C124864 +
            (C64101 + C64077) * C139442 * C124863) *
               C139592 +
           (C64107 * C139442 * C124863 + (C76772 + C76771) * C139442 * C124864 +
            (C68855 * C244 + C69034 * C139339) * C139442 * C124865) *
               C7158) *
              C139552 +
          (((C64086 + C64104) * C139442 * C124863 +
            (C76773 + C76774) * C139442 * C124864 +
            (C77541 * C244 + C77794 * C139339) * C139442 * C124865) *
               C139592 -
           ((C77793 * C139339 + C77537 * C244) * C139442 * C124865 +
            (C77792 * C139339 + C77535 * C244) * C139442 * C124864 +
            ((C63381 * C246 + C139286 * C252) * C139339 +
             (C63381 * C108 + C139286 * C114) * C244) *
                C139442 * C124863) *
               C139591 -
           (((C63381 * C21304 + C139286 * C21306) * C139339 +
             (C63381 * C21078 + C139286 * C21082) * C244) *
                C139442 * C124865 +
            (C76776 + C76775) * C139442 * C124864 +
            C64108 * C139442 * C124863) *
               C7158) *
              C139305)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[125] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139442 * C308) * C137108 +
            (C307 * C116 + C139442 * C314) * C139552 - C337 * C137101 -
            C338 * C139305) *
               C124863 +
           (C39974 + C39975 - C39976 - C39977) * C124864 +
           (C45576 + C45575 - C45574 - C45577) * C124865) *
              C139286 * C139339 * C139591 +
          ((C1150 * C137101 -
            ((C307 * C841 + C139442 * C1125) * C139552 +
             (C307 * C831 + C139442 * C1118) * C137108) +
            C1151 * C139305) *
               C124863 +
           (C39982 - (C39983 + C39984) + C39985) * C124864 +
           (C35460 * C137101 - (C38055 * C139552 + C38054 * C137108) +
            C35461 * C139305) *
               C124865) *
              C139286 * C139339 * C139592 +
          (((C307 * C832 + C139442 * C1121) * C137108 +
            (C307 * C847 + C139442 * C1129) * C139552 - C1154 * C137101 -
            C1155 * C139305) *
               C124863 +
           (C41044 * C137108 + C41045 * C139552 - C31415 * C137101 -
            C31416 * C139305) *
               C124864 +
           ((C307 * C21079 + C139442 * C21413) * C137108 +
            (C307 * C21081 + C139442 * C21415) * C139552 -
            (C307 * C21078 + C139442 * C21412) * C137101 -
            (C307 * C21080 + C139442 * C21414) * C139305) *
               C124865) *
              C139286 * C139339 * C7158)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[125] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139442 * C308) * C7235 +
            (C307 * C182 + C139442 * C394) * C139591 -
            (C307 * C831 + C139442 * C1118) * C7236 -
            (C307 * C939 + C139442 * C1231) * C139592 +
            (C307 * C832 + C139442 * C1121) * C7237 +
            (C307 * C940 + C139442 * C1232) * C7158) *
               C124863 +
           (C41146 + C41147 - C41148 - C41149 + C41150 + C41154) * C124864 +
           (C32486 * C7235 + C32605 * C139591 - C38054 * C7236 -
            C38169 * C139592 + (C307 * C21079 + C139442 * C21413) * C7237 +
            (C307 * C21197 + C139442 * C21514) * C7158) *
               C124865) *
              C139286 * C139552 +
          ((C7463 - (C7462 + C7461) + C7464 - C7465 - C7466) * C124863 +
           (C39058 - (C39057 + C39056) + C39059 - C39060 - C39061) * C124864 +
           (C35460 * C7236 - (C2190 * C139591 + C2090 * C7235) +
            C35609 * C139592 - (C307 * C21078 + C139442 * C21412) * C7237 -
            (C307 * C21196 + C139442 * C21515) * C7158) *
               C124865) *
              C139286 * C139305) *
         C139339) /
        (p * q * std::sqrt(p + q));
    d2eeyz[125] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139442 * C308) * C244 +
             (C307 * C245 + C139442 * C474) * C139339) *
                C124863 +
            (C32483 * C244 + C32719 * C139339) * C124864 +
            (C32486 * C244 + C32720 * C139339) * C124865) *
               C139286 * C139591 -
           ((C38271 * C139339 + C38054 * C244) * C124865 +
            (C35751 * C139339 + C35459 * C244) * C124864 +
            ((C307 * C1029 + C139442 * C1339) * C139339 +
             (C307 * C831 + C139442 * C1118) * C244) *
                C124863) *
               C139286 * C139592 +
           (((C307 * C832 + C139442 * C1121) * C244 +
             (C307 * C1030 + C139442 * C1340) * C139339) *
                C124863 +
            (C41044 * C244 + C41255 * C139339) * C124864 +
            ((C307 * C21079 + C139442 * C21413) * C244 +
             (C307 * C21305 + C139442 * C21614) * C139339) *
                C124865) *
               C139286 * C7158) *
              C139552 +
          (((C1351 + C1363) * C124863 + (C31623 + C31622) * C124864 +
            (C35460 * C244 + C35752 * C139339) * C124865) *
               C139286 * C139592 -
           ((C2295 * C139339 + C2090 * C244) * C124865 +
            (C30742 + C30741) * C124864 + (C497 + C481) * C124863) *
               C139286 * C139591 -
           (((C307 * C21304 + C139442 * C21615) * C139339 +
             (C307 * C21078 + C139442 * C21412) * C244) *
                C124865 +
            (C31628 + C31624) * C124864 + (C1364 + C1352) * C124863) *
               C139286 * C7158) *
              C139305)) /
        (p * q * std::sqrt(p + q));
    d2eezx[125] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    (((C125166 * C107 + C124863 * C555 + C125167 * C1767 +
                       C124864 * C2376 + C125168 * C1768 + C124865 * C2379) *
                          C137108 +
                      (C125166 * C116 + C124863 * C561 + C125167 * C1777 +
                       C124864 * C2383 + C125168 * C1783 + C124865 * C2387) *
                          C139552 -
                      (C125168 * C1769 + C124865 * C2380 + C125167 * C1764 +
                       C124864 * C2375 + C125166 * C108 + C124863 * C556) *
                          C137101 -
                      (C125168 * C1784 + C124865 * C2388 + C125167 * C1776 +
                       C124864 * C2384 + C125166 * C117 + C124863 * C562) *
                          C139305) *
                         C139286 * C139442 * C139339 * C139591 +
                     ((C125166 * C828 + C124863 * C1439 + C125167 * C4224 +
                       C124864 * C4900 + C125168 * C6441 + C124865 * C6921) *
                          C137101 -
                      ((C125168 * C6445 + C124865 * C6925 + C125167 * C4230 +
                        C124864 * C4903 + C125166 * C841 + C124863 * C1447) *
                           C139552 +
                       (C125168 * C6442 + C124865 * C6922 + C125167 * C4223 +
                        C124864 * C4899 + C125166 * C831 + C124863 * C1440) *
                           C137108) +
                      (C125166 * C840 + C124863 * C1448 + C125167 * C4231 +
                       C124864 * C4904 + C125168 * C6444 + C124865 * C6924) *
                          C139305) *
                         C139286 * C139442 * C139339 * C139592 +
                     ((C125166 * C832 + C124863 * C1443 + C125167 * C8754 +
                       C124864 * C9234 + C125168 * C21079 + C124865 * C21715) *
                          C137108 +
                      (C125166 * C847 + C124863 * C1451 + C125167 * C8757 +
                       C124864 * C9237 + C125168 * C21081 + C124865 * C21717) *
                          C139552 -
                      (C125168 * C21078 + C124865 * C21714 + C125167 * C8753 +
                       C124864 * C9233 + C125166 * C833 + C124863 * C1444) *
                          C137101 -
                      (C125168 * C21080 + C124865 * C21716 + C125167 * C8756 +
                       C124864 * C9236 + C125166 * C848 + C124863 * C1452) *
                          C139305) *
                         C139286 * C139442 * C139339 * C7158)) /
                   (p * q * std::sqrt(p + q));
    d2eezy[125] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    (((C125166 * C107 + C124863 * C555 + C125167 * C1767 +
                       C124864 * C2376 + C125168 * C1768 + C124865 * C2379) *
                          C7235 +
                      (C125166 * C182 + C124863 * C641 + C125167 * C1873 +
                       C124864 * C2492 + C125168 * C1874 + C124865 * C2493) *
                          C139591 -
                      (C125168 * C6442 + C124865 * C6922 + C125167 * C4223 +
                       C124864 * C4899 + C125166 * C831 + C124863 * C1440) *
                          C7236 -
                      (C125168 * C6528 + C124865 * C7000 + C125167 * C4337 +
                       C124864 * C5017 + C125166 * C939 + C124863 * C1553) *
                          C139592 +
                      (C125166 * C832 + C124863 * C1443 + C125167 * C8754 +
                       C124864 * C9234 + C125168 * C21079 + C124865 * C21715) *
                          C7237 +
                      (C125166 * C940 + C124863 * C1554 + C125167 * C8840 +
                       C124864 * C9312 + C125168 * C21197 + C124865 * C21830) *
                          C7158) *
                         C139286 * C139442 * C139552 +
                     ((C125166 * C828 + C124863 * C1439 + C125167 * C4224 +
                       C124864 * C4900 + C125168 * C6441 + C124865 * C6921) *
                          C7236 -
                      ((C125168 * C1875 + C124865 * C2494 + C125167 * C1870 +
                        C124864 * C2489 + C125166 * C183 + C124863 * C642) *
                           C139591 +
                       (C125168 * C1769 + C124865 * C2380 + C125167 * C1764 +
                        C124864 * C2375 + C125166 * C108 + C124863 * C556) *
                           C7235) +
                      (C125166 * C938 + C124863 * C1555 + C125167 * C4338 +
                       C124864 * C5018 + C125168 * C6527 + C124865 * C7001) *
                          C139592 -
                      (C125168 * C21078 + C124865 * C21714 + C125167 * C8753 +
                       C124864 * C9233 + C125166 * C833 + C124863 * C1444) *
                          C7237 -
                      (C125168 * C21196 + C124865 * C21831 + C125167 * C8839 +
                       C124864 * C9313 + C125166 * C941 + C124863 * C1556) *
                          C7158) *
                         C139286 * C139442 * C139305) *
                    C139339) /
                   (p * q * std::sqrt(p + q));
    d2eezz[125] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    ((((C125166 * C107 + C124863 * C555 + C125167 * C1767 +
                        C124864 * C2376 + C125168 * C1768 + C124865 * C2379) *
                           C244 +
                       (C125166 * C245 + C124863 * C719 + C125167 * C1965 +
                        C124864 * C2591 + C125168 * C1966 + C124865 * C2592) *
                           C139339) *
                          C139286 * C139442 * C139591 -
                      ((C125168 * C6608 + C124865 * C7077 + C125167 * C4443 +
                        C124864 * C5133 + C125166 * C1029 + C124863 * C1661) *
                           C139339 +
                       (C125168 * C6442 + C124865 * C6922 + C125167 * C4223 +
                        C124864 * C4899 + C125166 * C831 + C124863 * C1440) *
                           C244) *
                          C139286 * C139442 * C139592 +
                      ((C125166 * C832 + C124863 * C1443 + C125167 * C8754 +
                        C124864 * C9234 + C125168 * C21079 + C124865 * C21715) *
                           C244 +
                       (C125166 * C1030 + C124863 * C1662 + C125167 * C8920 +
                        C124864 * C9389 + C125168 * C21305 + C124865 * C21933) *
                           C139339) *
                          C139286 * C139442 * C7158) *
                         C139552 +
                     (((C125166 * C828 + C124863 * C1439 + C125167 * C4224 +
                        C124864 * C4900 + C125168 * C6441 + C124865 * C6921) *
                           C244 +
                       (C125166 * C1028 + C124863 * C1660 + C125167 * C4444 +
                        C124864 * C5134 + C125168 * C6607 + C124865 * C7078) *
                           C139339) *
                          C139286 * C139442 * C139592 -
                      ((C125168 * C1967 + C124865 * C2594 + C125167 * C1964 +
                        C124864 * C2593 + C125166 * C246 + C124863 * C720) *
                           C139339 +
                       (C125168 * C1769 + C124865 * C2380 + C125167 * C1764 +
                        C124864 * C2375 + C125166 * C108 + C124863 * C556) *
                           C244) *
                          C139286 * C139442 * C139591 -
                      ((C125168 * C21304 + C124865 * C21934 + C125167 * C8919 +
                        C124864 * C9390 + C125166 * C1031 + C124863 * C1663) *
                           C139339 +
                       (C125168 * C21078 + C124865 * C21714 + C125167 * C8753 +
                        C124864 * C9233 + C125166 * C833 + C124863 * C1444) *
                           C244) *
                          C139286 * C139442 * C7158) *
                         C139305)) /
                   (p * q * std::sqrt(p + q));
    d2eexx[126] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139286 * C113) * C5913 +
             (C63381 * C116 + C139286 * C125) * C139300) *
                C139442 * C124863 +
            (C83091 + C83092) * C139442 * C124864 + C130076 * C124865) *
               C139561 -
           ((C88855 + C88854) * C139442 * C124865 +
            (C83095 + C83096) * C139442 * C124864 +
            (C83092 + C83091) * C139442 * C124863) *
               C139403) *
              C139591 +
          ((C83093 * C139442 * C124863 + C83098 * C139442 * C124864 +
            (C83105 + C83106) * C139442 * C124865) *
               C139403 -
           (C130075 * C124865 + C83097 * C139442 * C124864 +
            (C68305 + C68304) * C139442 * C124863) *
               C139561) *
              C139592 +
          ((C68314 * C139442 * C124863 + C86139 * C139442 * C124864 +
            (C68859 + C68860) * C139442 * C124865) *
               C139561 -
           (((C63381 * C73225 + C139286 * C73227) * C139300 +
             (C63381 * C73224 + C139286 * C73226) * C5913) *
                C139442 * C124865 +
            (C68860 + C68859) * C139442 * C124864 +
            C71170 * C139442 * C124863) *
               C139403) *
              C7158)) /
        (p * q * std::sqrt(p + q));
    d2eexy[126] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139286 * C113) * C7235 +
            (C63381 * C182 + C139286 * C188) * C139591 - C63884 * C7236 -
            C63997 * C139592 + C63888 * C7237 + C63998 * C7158) *
               C139442 * C124863 +
           (C86238 + C86239 - C86240 - C86241 + C86242 + C86243) * C139442 *
               C124864 +
           (C132404 + C132405 - C132406 - C132407 + C132408 + C132409) *
               C139442 * C124865) *
              C139300 * C139561 +
          ((C86240 - (C86239 + C86238) + C86241 - C86242 - C86243) * C139442 *
               C124863 +
           (C132406 - (C132405 + C132404) + C132407 - C132408 - C132409) *
               C139442 * C124864 +
           (C83103 * C7236 - (C88929 * C139591 + C88852 * C7235) +
            C83223 * C139592 - (C63381 * C73224 + C139286 * C73226) * C7237 -
            (C63381 * C73278 + C139286 * C73279) * C7158) *
               C139442 * C124865) *
              C139300 * C139403)) /
        (p * q * std::sqrt(p + q));
    d2eexz[126] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139286 * C113) * C3607 +
            (C63381 * C245 + C139286 * C251) * C139561 - C77533 * C3608 -
            C77790 * C139403) *
               C139442 * C124863 +
           (C77533 * C3607 + C77790 * C139561 - C77539 * C3608 -
            C77791 * C139403) *
               C139442 * C124864 +
           (C77539 * C3607 + C77791 * C139561 - C88852 * C3608 -
            C89001 * C139403) *
               C139442 * C124865) *
              C139591 +
          ((C66948 - (C66947 + C66946) + C66970) * C139442 * C124863 +
           (C80651 - (C80650 + C80649) + C80652) * C139442 * C124864 +
           (C83103 * C3608 - (C69033 * C139561 + C68853 * C3607) +
            C83329 * C139403) *
               C139442 * C124865) *
              C139592 +
          (C71342 * C139442 * C124863 +
           (C86350 + C86349 - C86348 - C86351) * C139442 * C124864 +
           (C68855 * C3607 + C69034 * C139561 -
            (C63381 * C73224 + C139286 * C73226) * C3608 -
            (C63381 * C73330 + C139286 * C73331) * C139403) *
               C139442 * C124865) *
              C7158) *
         C139300) /
        (p * q * std::sqrt(p + q));
    d2eeyx[126] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139442 * C308) * C5913 +
             (C307 * C116 + C139442 * C314) * C139300) *
                C124863 +
            (C38036 + C38037) * C124864 + C130307 * C124865) *
               C139286 * C139561 -
           ((C43657 + C43656) * C124865 + (C38042 + C38043) * C124864 +
            (C38037 + C38036) * C124863) *
               C139286 * C139403) *
              C139591 +
          (((C38044 + C38045) * C124863 + (C38056 + C38057) * C124864 +
            (C130315 + C130316) * C124865) *
               C139286 * C139403 -
           (C130312 * C124865 + (C38045 + C38044) * C124864 +
            ((C307 * C841 + C139442 * C1125) * C139300 +
             (C307 * C831 + C139442 * C1118) * C5913) *
                C124863) *
               C139286 * C139561) *
              C139592 +
          ((((C307 * C832 + C139442 * C1121) * C5913 +
             (C307 * C847 + C139442 * C1129) * C139300) *
                C124863 +
            (C41046 + C41047) * C124864 + (C132564 + C132565) * C124865) *
               C139286 * C139561 -
           (((C307 * C73225 + C139442 * C73383) * C139300 +
             (C307 * C73224 + C139442 * C73382) * C5913) *
                C124865 +
            (C132565 + C132564) * C124864 + (C41047 + C41046) * C124863) *
               C139286 * C139403) *
              C7158)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[126] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139442 * C308) * C7235 +
            (C307 * C182 + C139442 * C394) * C139591 -
            (C307 * C831 + C139442 * C1118) * C7236 -
            (C307 * C939 + C139442 * C1231) * C139592 +
            (C307 * C832 + C139442 * C1121) * C7237 +
            (C307 * C940 + C139442 * C1232) * C7158) *
               C124863 +
           (C41146 + C41147 - C41148 - C41149 + C41150 + C41154) * C124864 +
           (C132640 + C132641 - C132642 - C132643 + C132644 + C132648) *
               C124865) *
              C139286 * C139300 * C139561 +
          ((C41148 - (C41147 + C41146) + C41149 - C41150 - C41154) * C124863 +
           (C132642 - (C132641 + C132640) + C132643 - C132644 - C132648) *
               C124864 +
           (C130313 * C7236 - (C43729 * C139591 + C43654 * C7235) +
            C130398 * C139592 - (C307 * C73224 + C139442 * C73382) * C7237 -
            (C307 * C73278 + C139442 * C73434) * C7158) *
               C124865) *
              C139286 * C139300 * C139403)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[126] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    ((((C307 * C107 + C139442 * C308) * C3607 +
                       (C307 * C245 + C139442 * C474) * C139561 -
                       C32483 * C3608 - C32719 * C139403) *
                          C124863 +
                      (C32483 * C3607 + C32719 * C139561 - C32486 * C3608 -
                       C32720 * C139403) *
                          C124864 +
                      (C32486 * C3607 + C32720 * C139561 - C43654 * C3608 -
                       C43801 * C139403) *
                          C124865) *
                         C139286 * C139591 +
                     ((C35459 * C3608 -
                       ((C307 * C1029 + C139442 * C1339) * C139561 +
                        (C307 * C831 + C139442 * C1118) * C3607) +
                       C35751 * C139403) *
                          C124863 +
                      (C38054 * C3608 - (C35751 * C139561 + C35459 * C3607) +
                       C38271 * C139403) *
                          C124864 +
                      (C130313 * C3608 - (C38271 * C139561 + C38054 * C3607) +
                       C130477 * C139403) *
                          C124865) *
                         C139286 * C139592 +
                     (((C307 * C832 + C139442 * C1121) * C3607 +
                       (C307 * C1030 + C139442 * C1340) * C139561 -
                       C41044 * C3608 - C41255 * C139403) *
                          C124863 +
                      (C41044 * C3607 + C41255 * C139561 - C132562 * C3608 -
                       C132725 * C139403) *
                          C124864 +
                      (C132562 * C3607 + C132725 * C139561 -
                       (C307 * C73224 + C139442 * C73382) * C3608 -
                       (C307 * C73330 + C139442 * C73485) * C139403) *
                          C124865) *
                         C139286 * C7158) *
                    C139300) /
                   (p * q * std::sqrt(p + q));
    d2eezx[126] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    ((((C125166 * C107 + C124863 * C555 + C125167 * C1767 +
                        C124864 * C2376 + C125168 * C1768 + C124865 * C2379) *
                           C5913 +
                       (C125166 * C116 + C124863 * C561 + C125167 * C1777 +
                        C124864 * C2383 + C125168 * C1783 + C124865 * C2387) *
                           C139300) *
                          C139286 * C139442 * C139561 -
                      ((C125168 * C10818 + C124865 * C11158 + C125167 * C1783 +
                        C124864 * C2387 + C125166 * C1777 + C124863 * C2383) *
                           C139300 +
                       (C125168 * C10815 + C124865 * C11155 + C125167 * C1768 +
                        C124864 * C2379 + C125166 * C1767 + C124863 * C2376) *
                           C5913) *
                          C139286 * C139442 * C139403) *
                         C139591 +
                     (((C125166 * C4223 + C124863 * C4899 + C125167 * C6442 +
                        C124864 * C6922 + C125168 * C26831 + C124865 * C27251) *
                           C5913 +
                       (C125166 * C4230 + C124863 * C4903 + C125167 * C6445 +
                        C124864 * C6925 + C125168 * C26833 + C124865 * C27253) *
                           C139300) *
                          C139286 * C139442 * C139403 -
                      ((C125168 * C6445 + C124865 * C6925 + C125167 * C4230 +
                        C124864 * C4903 + C125166 * C841 + C124863 * C1447) *
                           C139300 +
                       (C125168 * C6442 + C124865 * C6922 + C125167 * C4223 +
                        C124864 * C4899 + C125166 * C831 + C124863 * C1440) *
                           C5913) *
                          C139286 * C139442 * C139561) *
                         C139592 +
                     (((C125166 * C832 + C124863 * C1443 + C125167 * C8754 +
                        C124864 * C9234 + C125168 * C21079 + C124865 * C21715) *
                           C5913 +
                       (C125166 * C847 + C124863 * C1451 + C125167 * C8757 +
                        C124864 * C9237 + C125168 * C21081 + C124865 * C21717) *
                           C139300) *
                          C139286 * C139442 * C139561 -
                      ((C125168 * C73225 + C124865 * C73537 + C125167 * C21081 +
                        C124864 * C21717 + C125166 * C8757 + C124863 * C9237) *
                           C139300 +
                       (C125168 * C73224 + C124865 * C73536 + C125167 * C21079 +
                        C124864 * C21715 + C125166 * C8754 + C124863 * C9234) *
                           C5913) *
                          C139286 * C139442 * C139403) *
                         C7158)) /
                   (p * q * std::sqrt(p + q));
    d2eezy[126] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    (((C125166 * C107 + C124863 * C555 + C125167 * C1767 +
                       C124864 * C2376 + C125168 * C1768 + C124865 * C2379) *
                          C7235 +
                      (C125166 * C182 + C124863 * C641 + C125167 * C1873 +
                       C124864 * C2492 + C125168 * C1874 + C124865 * C2493) *
                          C139591 -
                      (C125168 * C6442 + C124865 * C6922 + C125167 * C4223 +
                       C124864 * C4899 + C125166 * C831 + C124863 * C1440) *
                          C7236 -
                      (C125168 * C6528 + C124865 * C7000 + C125167 * C4337 +
                       C124864 * C5017 + C125166 * C939 + C124863 * C1553) *
                          C139592 +
                      (C125166 * C832 + C124863 * C1443 + C125167 * C8754 +
                       C124864 * C9234 + C125168 * C21079 + C124865 * C21715) *
                          C7237 +
                      (C125166 * C940 + C124863 * C1554 + C125167 * C8840 +
                       C124864 * C9312 + C125168 * C21197 + C124865 * C21830) *
                          C7158) *
                         C139286 * C139442 * C139300 * C139561 +
                     ((C125166 * C4223 + C124863 * C4899 + C125167 * C6442 +
                       C124864 * C6922 + C125168 * C26831 + C124865 * C27251) *
                          C7236 -
                      ((C125168 * C10877 + C124865 * C11211 + C125167 * C1874 +
                        C124864 * C2493 + C125166 * C1873 + C124863 * C2492) *
                           C139591 +
                       (C125168 * C10815 + C124865 * C11155 + C125167 * C1768 +
                        C124864 * C2379 + C125166 * C1767 + C124863 * C2376) *
                           C7235) +
                      (C125166 * C4337 + C124863 * C5017 + C125167 * C6528 +
                       C124864 * C7000 + C125168 * C26905 + C124865 * C27321) *
                          C139592 -
                      (C125168 * C73224 + C124865 * C73536 + C125167 * C21079 +
                       C124864 * C21715 + C125166 * C8754 + C124863 * C9234) *
                          C7237 -
                      (C125168 * C73278 + C124865 * C73588 + C125167 * C21197 +
                       C124864 * C21830 + C125166 * C8840 + C124863 * C9312) *
                          C7158) *
                         C139286 * C139442 * C139300 * C139403)) /
                   (p * q * std::sqrt(p + q));
    d2eezz[126] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    (((C125166 * C107 + C124863 * C555 + C125167 * C1767 +
                       C124864 * C2376 + C125168 * C1768 + C124865 * C2379) *
                          C3607 +
                      (C125166 * C245 + C124863 * C719 + C125167 * C1965 +
                       C124864 * C2591 + C125168 * C1966 + C124865 * C2592) *
                          C139561 -
                      (C125168 * C10815 + C124865 * C11155 + C125167 * C1768 +
                       C124864 * C2379 + C125166 * C1767 + C124863 * C2376) *
                          C3608 -
                      (C125168 * C10937 + C124865 * C11262 + C125167 * C1966 +
                       C124864 * C2592 + C125166 * C1965 + C124863 * C2591) *
                          C139403) *
                         C139286 * C139442 * C139591 +
                     ((C125166 * C4223 + C124863 * C4899 + C125167 * C6442 +
                       C124864 * C6922 + C125168 * C26831 + C124865 * C27251) *
                          C3608 -
                      ((C125168 * C6608 + C124865 * C7077 + C125167 * C4443 +
                        C124864 * C5133 + C125166 * C1029 + C124863 * C1661) *
                           C139561 +
                       (C125168 * C6442 + C124865 * C6922 + C125167 * C4223 +
                        C124864 * C4899 + C125166 * C831 + C124863 * C1440) *
                           C3607) +
                      (C125166 * C4443 + C124863 * C5133 + C125167 * C6608 +
                       C124864 * C7077 + C125168 * C26975 + C124865 * C27388) *
                          C139403) *
                         C139286 * C139442 * C139592 +
                     ((C125166 * C832 + C124863 * C1443 + C125167 * C8754 +
                       C124864 * C9234 + C125168 * C21079 + C124865 * C21715) *
                          C3607 +
                      (C125166 * C1030 + C124863 * C1662 + C125167 * C8920 +
                       C124864 * C9389 + C125168 * C21305 + C124865 * C21933) *
                          C139561 -
                      (C125168 * C73224 + C124865 * C73536 + C125167 * C21079 +
                       C124864 * C21715 + C125166 * C8754 + C124863 * C9234) *
                          C3608 -
                      (C125168 * C73330 + C124865 * C73639 + C125167 * C21305 +
                       C124864 * C21933 + C125166 * C8920 + C124863 * C9389) *
                          C139403) *
                         C139286 * C139442 * C7158) *
                    C139300) /
                   (p * q * std::sqrt(p + q));
    d2eexx[127] +=
        (-std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139286 * C113) * C5913 +
            (C63381 * C116 + C139286 * C125) * C139300) *
               C139442 * C124863 +
           (C83091 + C83092) * C139442 * C124864 +
           (C83096 + C83095) * C139442 * C124865) *
              C139339 * C5909 -
          (C83094 * C139442 * C124865 + C83097 * C139442 * C124864 +
           (C68305 + C68304) * C139442 * C124863) *
              C139339 * C5910 +
          (C68314 * C139442 * C124863 + C86139 * C139442 * C124864 +
           (C68859 + C68860) * C139442 * C124865) *
              C139339 * C5911 -
          (((C63381 * C68837 + C139286 * C68839) * C139300 +
            (C63381 * C68836 + C139286 * C68838) * C5913) *
               C139442 * C124865 +
           (C71178 + C71177) * C139442 * C124864 + C68315 * C139442 * C124863) *
              C139339 * C5912)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139286 * C113) * C5230 +
            (C63381 * C116 + C139286 * C125) * C5225 -
            (C63381 * C108 + C139286 * C114) * C5231 -
            (C63381 * C117 + C139286 * C126) * C5226 +
            (C63381 * C109 + C139286 * C115) * C5232 +
            (C63381 * C118 + C139286 * C127) * C5227) *
               C139442 * C124863 +
           (C87086 + C87087 - C87088 - C87089 + C87090 + C87091) * C139442 *
               C124864 +
           (C77539 * C5230 + C77538 * C5225 - C77537 * C5231 - C77540 * C5226 +
            C127384 * C5232 + C127385 * C5227) *
               C139442 * C124865) *
              C139339 * C5228 +
          ((C67642 - (C67641 + C67640) + C67643 - C67644 - C67645) * C139442 *
               C124863 +
           (C81585 - (C81584 + C81583) + C81586 - C81587 - C81588) * C139442 *
               C124864 +
           (C77541 * C5231 - (C68854 * C5225 + C68853 * C5230) +
            C77542 * C5226 - (C63381 * C6440 + C139286 * C6446) * C5232 -
            (C63381 * C6443 + C139286 * C6449) * C5227) *
               C139442 * C124865) *
              C139339 * C139377)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139286 * C113) * C5913 +
             (C63381 * C116 + C139286 * C125) * C139300) *
                C139442 * C124863 +
            (C83091 + C83092) * C139442 * C124864 + C130076 * C124865) *
               C1761 -
           ((C88855 + C88854) * C139442 * C124865 +
            (C83095 + C83096) * C139442 * C124864 +
            (C83092 + C83091) * C139442 * C124863) *
               C1762 +
           (C130076 * C124863 + (C88854 + C88855) * C139442 * C124864 +
            ((C63381 * C43406 + C139286 * C43410) * C5913 +
             (C63381 * C43408 + C139286 * C43412) * C139300) *
                C139442 * C124865) *
               C1763) *
              C5228 +
          ((C83093 * C139442 * C124863 + C83098 * C139442 * C124864 +
            (C83105 + C83106) * C139442 * C124865) *
               C1762 -
           (C130075 * C124865 + C83097 * C139442 * C124864 +
            (C68305 + C68304) * C139442 * C124863) *
               C1761 -
           (((C63381 * C88844 + C139286 * C88846) * C139300 +
             (C63381 * C88843 + C139286 * C88845) * C5913) *
                C139442 * C124865 +
            (C83106 + C83105) * C139442 * C124864 + C130075 * C124863) *
               C1763) *
              C139377)) /
            (p * q * std::sqrt(p + q));
    d2eexy[127] +=
        (-std::pow(Pi, 2.5) *
         (((C63381 * C107 + C139286 * C113) * C5976 +
           (C63381 * C182 + C139286 * C188) * C5909 - C63884 * C5977 -
           C63997 * C5910 + C63888 * C5978 + C63998 * C5911 - C63894 * C5979 -
           C63999 * C5912) *
              C139442 * C124863 +
          (C77533 * C5976 + C77672 * C5909 - C66724 * C5977 - C66844 * C5910 +
           C66728 * C5978 + C66845 * C5911 - C71175 * C5979 - C71257 * C5912) *
              C139442 * C124864 +
          (C77539 * C5976 + C77676 * C5909 - C68853 * C5977 - C68941 * C5910 +
           C68855 * C5978 + C68942 * C5911 -
           (C63381 * C68836 + C139286 * C68838) * C5979 -
           (C63381 * C68934 + C139286 * C68935) * C5912) *
              C139442 * C124865) *
         C139300 * C139339) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139286 * C113) * C5307 +
            (C63381 * C182 + C139286 * C188) * C5228 - C63884 * C5308 -
            C63997 * C139377) *
               C139442 * C124863 +
           (C83205 + C83206 - C83207 - C83208) * C139442 * C124864 +
           (C83215 + C83214 - C83213 - C83216) * C139442 * C124865) *
              C5225 +
          ((C63886 * C5308 -
            ((C63381 * C183 + C139286 * C189) * C5228 +
             (C63381 * C108 + C139286 * C114) * C5307) +
            C64000 * C139377) *
               C139442 * C124863 +
           (C85123 - (C85124 + C85125) + C85126) * C139442 * C124864 +
           (C77541 * C5308 - (C77674 * C5228 + C77537 * C5307) +
            C77675 * C139377) *
               C139442 * C124865) *
              C5226 +
          (((C63381 * C109 + C139286 * C115) * C5307 +
            (C63381 * C184 + C139286 * C190) * C5228 - C65320 * C5308 -
            C65406 * C139377) *
               C139442 * C124863 +
           (C79439 * C5307 + C79546 * C5228 - C78537 * C5308 -
            C78641 * C139377) *
               C139442 * C124864 +
           (C127384 * C5307 + C127465 * C5228 -
            (C63381 * C6440 + C139286 * C6446) * C5308 -
            (C63381 * C6526 + C139286 * C6529) * C139377) *
               C139442 * C124865) *
              C5227) *
         C139339) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139286 * C113) * C5307 +
            (C63381 * C182 + C139286 * C188) * C5228 - C63884 * C5308 -
            C63997 * C139377) *
               C139442 * C124863 +
           (C83205 + C83206 - C83207 - C83208) * C139442 * C124864 +
           C130158 * C124865) *
              C139300 * C1761 +
          ((C83207 - (C83206 + C83205) + C83208) * C139442 * C124863 +
           (C83213 - (C83214 + C83215) + C83216) * C139442 * C124864 +
           (C130152 - (C130153 + C130154) + C130155) * C139442 * C124865) *
              C139300 * C1762 +
          (C130158 * C124863 +
           (C130154 + C130153 - C130152 - C130155) * C139442 * C124864 +
           ((C63381 * C43406 + C139286 * C43410) * C5307 +
            (C63381 * C43492 + C139286 * C43494) * C5228 -
            (C63381 * C88843 + C139286 * C88845) * C5308 -
            (C63381 * C88921 + C139286 * C88922) * C139377) *
               C139442 * C124865) *
              C139300 * C1763)) /
            (p * q * std::sqrt(p + q));
    d2eexz[127] +=
        (-std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139286 * C113) * C244 +
            (C63381 * C245 + C139286 * C251) * C139339) *
               C139442 * C124863 +
           (C77533 * C244 + C77790 * C139339) * C139442 * C124864 +
           (C77539 * C244 + C77791 * C139339) * C139442 * C124865) *
              C5909 -
          ((C69033 * C139339 + C68853 * C244) * C139442 * C124865 +
           (C76770 + C76769) * C139442 * C124864 +
           (C64101 + C64077) * C139442 * C124863) *
              C5910 +
          (C64107 * C139442 * C124863 + (C76772 + C76771) * C139442 * C124864 +
           (C68855 * C244 + C69034 * C139339) * C139442 * C124865) *
              C5911 -
          (((C63381 * C69016 + C139286 * C69017) * C139339 +
            (C63381 * C68836 + C139286 * C68838) * C244) *
               C139442 * C124865 +
           (C82572 + C82571) * C139442 * C124864 + C68427 * C139442 * C124863) *
              C5912) *
         C139300) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139286 * C113) * C244 +
             (C63381 * C245 + C139286 * C251) * C139339) *
                C139442 * C124863 +
            (C77533 * C244 + C77790 * C139339) * C139442 * C124864 +
            (C77539 * C244 + C77791 * C139339) * C139442 * C124865) *
               C5228 -
           ((C69033 * C139339 + C68853 * C244) * C139442 * C124865 +
            (C76770 + C76769) * C139442 * C124864 +
            (C64101 + C64077) * C139442 * C124863) *
               C139377) *
              C5225 +
          (((C64086 + C64104) * C139442 * C124863 +
            (C76773 + C76774) * C139442 * C124864 +
            (C77541 * C244 + C77794 * C139339) * C139442 * C124865) *
               C139377 -
           ((C77793 * C139339 + C77537 * C244) * C139442 * C124865 +
            (C77792 * C139339 + C77535 * C244) * C139442 * C124864 +
            ((C63381 * C246 + C139286 * C252) * C139339 +
             (C63381 * C108 + C139286 * C114) * C244) *
                C139442 * C124863) *
               C5228) *
              C5226 +
          ((((C63381 * C109 + C139286 * C115) * C244 +
             (C63381 * C247 + C139286 * C253) * C139339) *
                C139442 * C124863 +
            (C79439 * C244 + C79648 * C139339) * C139442 * C124864 +
            (C127384 * C244 + C127543 * C139339) * C139442 * C124865) *
               C5228 -
           (((C63381 * C6606 + C139286 * C6609) * C139339 +
             (C63381 * C6440 + C139286 * C6446) * C244) *
                C139442 * C124865 +
            (C78744 + C78740) * C139442 * C124864 +
            (C65490 + C65482) * C139442 * C124863) *
               C139377) *
              C5227)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139286 * C113) * C1960 +
            (C63381 * C245 + C139286 * C251) * C1761 - C77533 * C1961 -
            C77790 * C1762 + C77539 * C1962 + C77791 * C1763) *
               C139442 * C124863 +
           (C77533 * C1960 + C77790 * C1761 - C77539 * C1961 - C77791 * C1762 +
            C88852 * C1962 + C89001 * C1763) *
               C139442 * C124864 +
           (C77539 * C1960 + C77791 * C1761 - C88852 * C1961 - C89001 * C1762 +
            (C63381 * C43406 + C139286 * C43410) * C1962 +
            (C63381 * C43568 + C139286 * C43570) * C1763) *
               C139442 * C124865) *
              C5228 +
          ((C69021 - (C69020 + C69019) + C69022 - C69023 - C69035) * C139442 *
               C124863 +
           (C83324 - (C83323 + C83322) + C83325 - C83326 - C83330) * C139442 *
               C124864 +
           (C83103 * C1961 - (C69033 * C1761 + C68853 * C1960) +
            C83329 * C1762 - (C63381 * C88843 + C139286 * C88845) * C1962 -
            (C63381 * C88996 + C139286 * C88997) * C1763) *
               C139442 * C124865) *
              C139377) *
         C139300) /
            (p * q * std::sqrt(p + q));
    d2eeyx[127] +=
        (-std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139442 * C308) * C5913 +
            (C307 * C116 + C139442 * C314) * C139300) *
               C124863 +
           (C38036 + C38037) * C124864 + (C38043 + C38042) * C124865) *
              C139286 * C139339 * C5909 -
          ((C38057 + C38056) * C124865 + (C38045 + C38044) * C124864 +
           ((C307 * C841 + C139442 * C1125) * C139300 +
            (C307 * C831 + C139442 * C1118) * C5913) *
               C124863) *
              C139286 * C139339 * C5910 +
          (((C307 * C832 + C139442 * C1121) * C5913 +
            (C307 * C847 + C139442 * C1129) * C139300) *
               C124863 +
           (C41046 + C41047) * C124864 +
           ((C307 * C21079 + C139442 * C21413) * C5913 +
            (C307 * C21081 + C139442 * C21415) * C139300) *
               C124865) *
              C139286 * C139339 * C5911 -
          (((C307 * C68837 + C139442 * C69111) * C139300 +
            (C307 * C68836 + C139442 * C69110) * C5913) *
               C124865 +
           ((C307 * C24131 + C139442 * C24465) * C139300 +
            (C307 * C24129 + C139442 * C24463) * C5913) *
               C124864 +
           ((C307 * C5919 + C139442 * C6097) * C139300 +
            (C307 * C5916 + C139442 * C6094) * C5913) *
               C124863) *
              C139286 * C139339 * C5912)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139442 * C308) * C5230 +
            (C307 * C116 + C139442 * C314) * C5225 - C337 * C5231 -
            C338 * C5226 + C339 * C5232 + C340 * C5227) *
               C124863 +
           (C41942 + C41943 - C41944 - C41945 + C41946 + C41947) * C124864 +
           (C32486 * C5230 + C32485 * C5225 - C2090 * C5231 - C2091 * C5226 +
            C2092 * C5232 + C2093 * C5227) *
               C124865) *
              C139286 * C139339 * C5228 +
          ((C1150 * C5231 -
            ((C307 * C841 + C139442 * C1125) * C5225 +
             (C307 * C831 + C139442 * C1118) * C5230) +
            C1151 * C5226 - C1152 * C5232 - C1153 * C5227) *
               C124863 +
           (C4566 * C5231 - (C35458 * C5225 + C35459 * C5230) + C4567 * C5226 -
            C4568 * C5232 - C4569 * C5227) *
               C124864 +
           (C35460 * C5231 - (C38055 * C5225 + C38054 * C5230) +
            C35461 * C5226 - (C307 * C6440 + C139442 * C6686) * C5232 -
            (C307 * C6443 + C139442 * C6689) * C5227) *
               C124865) *
              C139286 * C139339 * C139377)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139442 * C308) * C5913 +
             (C307 * C116 + C139442 * C314) * C139300) *
                C124863 +
            (C38036 + C38037) * C124864 + C130307 * C124865) *
               C139286 * C1761 -
           ((C43657 + C43656) * C124865 + (C38042 + C38043) * C124864 +
            (C38037 + C38036) * C124863) *
               C139286 * C1762 +
           (C130307 * C124863 + (C43656 + C43657) * C124864 +
            ((C307 * C43406 + C139442 * C43644) * C5913 +
             (C307 * C43408 + C139442 * C43646) * C139300) *
                C124865) *
               C139286 * C1763) *
              C5228 +
          (((C38044 + C38045) * C124863 + (C38056 + C38057) * C124864 +
            (C130315 + C130316) * C124865) *
               C139286 * C1762 -
           (C130312 * C124865 + (C38045 + C38044) * C124864 +
            ((C307 * C841 + C139442 * C1125) * C139300 +
             (C307 * C831 + C139442 * C1118) * C5913) *
                C124863) *
               C139286 * C1761 -
           (((C307 * C88844 + C139442 * C89068) * C139300 +
             (C307 * C88843 + C139442 * C89067) * C5913) *
                C124865 +
            (C130316 + C130315) * C124864 + C130312 * C124863) *
               C139286 * C1763) *
              C139377)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[127] +=
        (-std::pow(Pi, 2.5) *
         (((C307 * C107 + C139442 * C308) * C5976 +
           (C307 * C182 + C139442 * C394) * C5909 -
           (C307 * C831 + C139442 * C1118) * C5977 -
           (C307 * C939 + C139442 * C1231) * C5910 +
           (C307 * C832 + C139442 * C1121) * C5978 +
           (C307 * C940 + C139442 * C1232) * C5911 -
           (C307 * C5916 + C139442 * C6094) * C5979 -
           (C307 * C5982 + C139442 * C6148) * C5912) *
              C124863 +
          (C32483 * C5976 + C32604 * C5909 - C35459 * C5977 - C35606 * C5910 +
           C41044 * C5978 + C41153 * C5911 -
           (C307 * C24129 + C139442 * C24463) * C5979 -
           (C307 * C24247 + C139442 * C24564) * C5912) *
              C124864 +
          (C32486 * C5976 + C32605 * C5909 - C38054 * C5977 - C38169 * C5910 +
           (C307 * C21079 + C139442 * C21413) * C5978 +
           (C307 * C21197 + C139442 * C21514) * C5911 -
           (C307 * C68836 + C139442 * C69110) * C5979 -
           (C307 * C68934 + C139442 * C69186) * C5912) *
              C124865) *
         C139286 * C139300 * C139339) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139442 * C308) * C5307 +
            (C307 * C182 + C139442 * C394) * C5228 -
            (C307 * C831 + C139442 * C1118) * C5308 -
            (C307 * C939 + C139442 * C1231) * C139377) *
               C124863 +
           (C38156 + C38157 - C38158 - C38159) * C124864 +
           (C38162 + C38161 - C38160 - C38170) * C124865) *
              C139286 * C5225 +
          ((C5534 - (C5533 + C5532) + C5535) * C124863 + C40125 * C124864 +
           (C38165 - (C38166 + C38167) + C38168) * C124865) *
              C139286 * C5226 +
          (C5546 * C124863 + (C8277 + C8276 - C8275 - C8278) * C124864 +
           (C2092 * C5307 + C2191 * C5228 -
            (C307 * C6440 + C139442 * C6686) * C5308 -
            (C307 * C6526 + C139442 * C6768) * C139377) *
               C124865) *
              C139286 * C5227) *
         C139339) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139442 * C308) * C5307 +
            (C307 * C182 + C139442 * C394) * C5228 -
            (C307 * C831 + C139442 * C1118) * C5308 -
            (C307 * C939 + C139442 * C1231) * C139377) *
               C124863 +
           (C38156 + C38157 - C38158 - C38159) * C124864 + C130399 * C124865) *
              C139286 * C139300 * C1761 +
          ((C38158 - (C38157 + C38156) + C38159) * C124863 +
           (C38160 - (C38161 + C38162) + C38170) * C124864 +
           (C130392 - (C130393 + C130394) + C130400) * C124865) *
              C139286 * C139300 * C1762 +
          (C130399 * C124863 +
           (C130394 + C130393 - C130392 - C130400) * C124864 +
           ((C307 * C43406 + C139442 * C43644) * C5307 +
            (C307 * C43492 + C139442 * C43724) * C5228 -
            (C307 * C88843 + C139442 * C89067) * C5308 -
            (C307 * C88921 + C139442 * C89147) * C139377) *
               C124865) *
              C139286 * C139300 * C1763)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[127] +=
        (-std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139442 * C308) * C244 +
            (C307 * C245 + C139442 * C474) * C139339) *
               C124863 +
           (C32483 * C244 + C32719 * C139339) * C124864 +
           (C32486 * C244 + C32720 * C139339) * C124865) *
              C139286 * C5909 -
          ((C38271 * C139339 + C38054 * C244) * C124865 +
           (C35751 * C139339 + C35459 * C244) * C124864 +
           ((C307 * C1029 + C139442 * C1339) * C139339 +
            (C307 * C831 + C139442 * C1118) * C244) *
               C124863) *
              C139286 * C5910 +
          (((C307 * C832 + C139442 * C1121) * C244 +
            (C307 * C1030 + C139442 * C1340) * C139339) *
               C124863 +
           (C41044 * C244 + C41255 * C139339) * C124864 +
           ((C307 * C21079 + C139442 * C21413) * C244 +
            (C307 * C21305 + C139442 * C21614) * C139339) *
               C124865) *
              C139286 * C5911 -
          (((C307 * C69016 + C139442 * C69261) * C139339 +
            (C307 * C68836 + C139442 * C69110) * C244) *
               C124865 +
           ((C307 * C24355 + C139442 * C24664) * C139339 +
            (C307 * C24129 + C139442 * C24463) * C244) *
               C124864 +
           ((C307 * C6038 + C139442 * C6203) * C139339 +
            (C307 * C5916 + C139442 * C6094) * C244) *
               C124863) *
              C139286 * C5912) *
         C139300) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139442 * C308) * C244 +
             (C307 * C245 + C139442 * C474) * C139339) *
                C124863 +
            (C32483 * C244 + C32719 * C139339) * C124864 +
            (C32486 * C244 + C32720 * C139339) * C124865) *
               C139286 * C5228 -
           ((C38271 * C139339 + C38054 * C244) * C124865 +
            (C35751 * C139339 + C35459 * C244) * C124864 +
            ((C307 * C1029 + C139442 * C1339) * C139339 +
             (C307 * C831 + C139442 * C1118) * C244) *
                C124863) *
               C139286 * C139377) *
              C5225 +
          (((C1351 + C1363) * C124863 + (C31623 + C31622) * C124864 +
            (C35460 * C244 + C35752 * C139339) * C124865) *
               C139286 * C139377 -
           ((C2295 * C139339 + C2090 * C244) * C124865 +
            (C30742 + C30741) * C124864 + (C497 + C481) * C124863) *
               C139286 * C5228) *
              C5226 +
          ((C501 * C124863 + (C30744 + C30743) * C124864 +
            (C2092 * C244 + C2297 * C139339) * C124865) *
               C139286 * C5228 -
           (((C307 * C6606 + C139442 * C6845) * C139339 +
             (C307 * C6440 + C139442 * C6686) * C244) *
                C124865 +
            (C33654 + C33653) * C124864 + C3115 * C124863) *
               C139286 * C139377) *
              C5227)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139442 * C308) * C1960 +
            (C307 * C245 + C139442 * C474) * C1761 - C32483 * C1961 -
            C32719 * C1762 + C32486 * C1962 + C32720 * C1763) *
               C124863 +
           (C32483 * C1960 + C32719 * C1761 - C32486 * C1961 - C32720 * C1762 +
            C43654 * C1962 + C43801 * C1763) *
               C124864 +
           (C32486 * C1960 + C32720 * C1761 - C43654 * C1961 - C43801 * C1762 +
            (C307 * C43406 + C139442 * C43644) * C1962 +
            (C307 * C43568 + C139442 * C43796) * C1763) *
               C124865) *
              C139286 * C5228 +
          ((C35459 * C1961 -
            ((C307 * C1029 + C139442 * C1339) * C1761 +
             (C307 * C831 + C139442 * C1118) * C1960) +
            C35751 * C1762 - C38054 * C1962 - C38271 * C1763) *
               C124863 +
           (C38054 * C1961 - (C35751 * C1761 + C35459 * C1960) +
            C38271 * C1762 - C130313 * C1962 - C130477 * C1763) *
               C124864 +
           (C130313 * C1961 - (C38271 * C1761 + C38054 * C1960) +
            C130477 * C1762 - (C307 * C88843 + C139442 * C89067) * C1962 -
            (C307 * C88996 + C139442 * C89220) * C1763) *
               C124865) *
              C139286 * C139377) *
         C139300) /
            (p * q * std::sqrt(p + q));
    d2eezx[127] +=
        (-std::pow(Pi, 2.5) *
         (((C125166 * C107 + C124863 * C555 + C125167 * C1767 +
            C124864 * C2376 + C125168 * C1768 + C124865 * C2379) *
               C5913 +
           (C125166 * C116 + C124863 * C561 + C125167 * C1777 +
            C124864 * C2383 + C125168 * C1783 + C124865 * C2387) *
               C139300) *
              C139286 * C139442 * C139339 * C5909 -
          ((C125168 * C6445 + C124865 * C6925 + C125167 * C4230 +
            C124864 * C4903 + C125166 * C841 + C124863 * C1447) *
               C139300 +
           (C125168 * C6442 + C124865 * C6922 + C125167 * C4223 +
            C124864 * C4899 + C125166 * C831 + C124863 * C1440) *
               C5913) *
              C139286 * C139442 * C139339 * C5910 +
          ((C125166 * C832 + C124863 * C1443 + C125167 * C8754 +
            C124864 * C9234 + C125168 * C21079 + C124865 * C21715) *
               C5913 +
           (C125166 * C847 + C124863 * C1451 + C125167 * C8757 +
            C124864 * C9237 + C125168 * C21081 + C124865 * C21717) *
               C139300) *
              C139286 * C139442 * C139339 * C5911 -
          ((C125168 * C68837 + C124865 * C69337 + C125167 * C24131 +
            C124864 * C24767 + C125166 * C5919 + C124863 * C6259) *
               C139300 +
           (C125168 * C68836 + C124865 * C69336 + C125167 * C24129 +
            C124864 * C24765 + C125166 * C5916 + C124863 * C6256) *
               C5913) *
              C139286 * C139442 * C139339 * C5912)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C125166 * C107 + C124863 * C555 + C125167 * C1767 +
            C124864 * C2376 + C125168 * C1768 + C124865 * C2379) *
               C5230 +
           (C125166 * C116 + C124863 * C561 + C125167 * C1777 +
            C124864 * C2383 + C125168 * C1783 + C124865 * C2387) *
               C5225 -
           (C125168 * C1769 + C124865 * C2380 + C125167 * C1764 +
            C124864 * C2375 + C125166 * C108 + C124863 * C556) *
               C5231 -
           (C125168 * C1784 + C124865 * C2388 + C125167 * C1776 +
            C124864 * C2384 + C125166 * C117 + C124863 * C562) *
               C5226 +
           (C125166 * C109 + C124863 * C557 + C125167 * C1765 +
            C124864 * C2377 + C125168 * C1770 + C124865 * C2381) *
               C5232 +
           (C125166 * C118 + C124863 * C563 + C125167 * C1775 +
            C124864 * C2385 + C125168 * C1785 + C124865 * C2389) *
               C5227) *
              C139286 * C139442 * C139339 * C5228 +
          ((C125166 * C828 + C124863 * C1439 + C125167 * C4224 +
            C124864 * C4900 + C125168 * C6441 + C124865 * C6921) *
               C5231 -
           ((C125168 * C6445 + C124865 * C6925 + C125167 * C4230 +
             C124864 * C4903 + C125166 * C841 + C124863 * C1447) *
                C5225 +
            (C125168 * C6442 + C124865 * C6922 + C125167 * C4223 +
             C124864 * C4899 + C125166 * C831 + C124863 * C1440) *
                C5230) +
           (C125166 * C840 + C124863 * C1448 + C125167 * C4231 +
            C124864 * C4904 + C125168 * C6444 + C124865 * C6924) *
               C5226 -
           (C125168 * C6440 + C124865 * C6920 + C125167 * C4225 +
            C124864 * C4901 + C125166 * C829 + C124863 * C1441) *
               C5232 -
           (C125168 * C6443 + C124865 * C6923 + C125167 * C4232 +
            C124864 * C4905 + C125166 * C839 + C124863 * C1449) *
               C5227) *
              C139286 * C139442 * C139339 * C139377)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C125166 * C107 + C124863 * C555 + C125167 * C1767 +
             C124864 * C2376 + C125168 * C1768 + C124865 * C2379) *
                C5913 +
            (C125166 * C116 + C124863 * C561 + C125167 * C1777 +
             C124864 * C2383 + C125168 * C1783 + C124865 * C2387) *
                C139300) *
               C139286 * C139442 * C1761 -
           ((C125168 * C10818 + C124865 * C11158 + C125167 * C1783 +
             C124864 * C2387 + C125166 * C1777 + C124863 * C2383) *
                C139300 +
            (C125168 * C10815 + C124865 * C11155 + C125167 * C1768 +
             C124864 * C2379 + C125166 * C1767 + C124863 * C2376) *
                C5913) *
               C139286 * C139442 * C1762 +
           ((C125166 * C1768 + C124863 * C2379 + C125167 * C10815 +
             C124864 * C11155 + C125168 * C43406 + C124865 * C43868) *
                C5913 +
            (C125166 * C1783 + C124863 * C2387 + C125167 * C10818 +
             C124864 * C11158 + C125168 * C43408 + C124865 * C43870) *
                C139300) *
               C139286 * C139442 * C1763) *
              C5228 +
          (((C125166 * C4223 + C124863 * C4899 + C125167 * C6442 +
             C124864 * C6922 + C125168 * C26831 + C124865 * C27251) *
                C5913 +
            (C125166 * C4230 + C124863 * C4903 + C125167 * C6445 +
             C124864 * C6925 + C125168 * C26833 + C124865 * C27253) *
                C139300) *
               C139286 * C139442 * C1762 -
           ((C125168 * C6445 + C124865 * C6925 + C125167 * C4230 +
             C124864 * C4903 + C125166 * C841 + C124863 * C1447) *
                C139300 +
            (C125168 * C6442 + C124865 * C6922 + C125167 * C4223 +
             C124864 * C4899 + C125166 * C831 + C124863 * C1440) *
                C5913) *
               C139286 * C139442 * C1761 -
           ((C125168 * C88844 + C124865 * C89294 + C125167 * C26833 +
             C124864 * C27253 + C125166 * C6445 + C124863 * C6925) *
                C139300 +
            (C125168 * C88843 + C124865 * C89293 + C125167 * C26831 +
             C124864 * C27251 + C125166 * C6442 + C124863 * C6922) *
                C5913) *
               C139286 * C139442 * C1763) *
              C139377)) /
            (p * q * std::sqrt(p + q));
    d2eezy[127] += (-std::pow(Pi, 2.5) *
                    ((C125166 * C107 + C124863 * C555 + C125167 * C1767 +
                      C124864 * C2376 + C125168 * C1768 + C124865 * C2379) *
                         C5976 +
                     (C125166 * C182 + C124863 * C641 + C125167 * C1873 +
                      C124864 * C2492 + C125168 * C1874 + C124865 * C2493) *
                         C5909 -
                     (C125168 * C6442 + C124865 * C6922 + C125167 * C4223 +
                      C124864 * C4899 + C125166 * C831 + C124863 * C1440) *
                         C5977 -
                     (C125168 * C6528 + C124865 * C7000 + C125167 * C4337 +
                      C124864 * C5017 + C125166 * C939 + C124863 * C1553) *
                         C5910 +
                     (C125166 * C832 + C124863 * C1443 + C125167 * C8754 +
                      C124864 * C9234 + C125168 * C21079 + C124865 * C21715) *
                         C5978 +
                     (C125166 * C940 + C124863 * C1554 + C125167 * C8840 +
                      C124864 * C9312 + C125168 * C21197 + C124865 * C21830) *
                         C5911 -
                     (C125168 * C68836 + C124865 * C69336 + C125167 * C24129 +
                      C124864 * C24765 + C125166 * C5916 + C124863 * C6256) *
                         C5979 -
                     (C125168 * C68934 + C124865 * C69420 + C125167 * C24247 +
                      C124864 * C24876 + C125166 * C5982 + C124863 * C6310) *
                         C5912) *
                    C139286 * C139442 * C139300 * C139339) /
                       (p * q * std::sqrt(p + q)) -
                   (std::pow(Pi, 2.5) *
                    (((C125166 * C107 + C124863 * C555 + C125167 * C1767 +
                       C124864 * C2376 + C125168 * C1768 + C124865 * C2379) *
                          C5307 +
                      (C125166 * C182 + C124863 * C641 + C125167 * C1873 +
                       C124864 * C2492 + C125168 * C1874 + C124865 * C2493) *
                          C5228 -
                      (C125168 * C6442 + C124865 * C6922 + C125167 * C4223 +
                       C124864 * C4899 + C125166 * C831 + C124863 * C1440) *
                          C5308 -
                      (C125168 * C6528 + C124865 * C7000 + C125167 * C4337 +
                       C124864 * C5017 + C125166 * C939 + C124863 * C1553) *
                          C139377) *
                         C139286 * C139442 * C5225 +
                     ((C125166 * C828 + C124863 * C1439 + C125167 * C4224 +
                       C124864 * C4900 + C125168 * C6441 + C124865 * C6921) *
                          C5308 -
                      ((C125168 * C1875 + C124865 * C2494 + C125167 * C1870 +
                        C124864 * C2489 + C125166 * C183 + C124863 * C642) *
                           C5228 +
                       (C125168 * C1769 + C124865 * C2380 + C125167 * C1764 +
                        C124864 * C2375 + C125166 * C108 + C124863 * C556) *
                           C5307) +
                      (C125166 * C938 + C124863 * C1555 + C125167 * C4338 +
                       C124864 * C5018 + C125168 * C6527 + C124865 * C7001) *
                          C139377) *
                         C139286 * C139442 * C5226 +
                     ((C125166 * C109 + C124863 * C557 + C125167 * C1765 +
                       C124864 * C2377 + C125168 * C1770 + C124865 * C2381) *
                          C5307 +
                      (C125166 * C184 + C124863 * C643 + C125167 * C1871 +
                       C124864 * C2490 + C125168 * C1876 + C124865 * C2495) *
                          C5228 -
                      (C125168 * C6440 + C124865 * C6920 + C125167 * C4225 +
                       C124864 * C4901 + C125166 * C829 + C124863 * C1441) *
                          C5308 -
                      (C125168 * C6526 + C124865 * C7002 + C125167 * C4339 +
                       C124864 * C5019 + C125166 * C937 + C124863 * C1557) *
                          C139377) *
                         C139286 * C139442 * C5227) *
                    C139339) /
                       (p * q * std::sqrt(p + q)) +
                   (2 * std::pow(Pi, 2.5) *
                    (((C125166 * C107 + C124863 * C555 + C125167 * C1767 +
                       C124864 * C2376 + C125168 * C1768 + C124865 * C2379) *
                          C5307 +
                      (C125166 * C182 + C124863 * C641 + C125167 * C1873 +
                       C124864 * C2492 + C125168 * C1874 + C124865 * C2493) *
                          C5228 -
                      (C125168 * C6442 + C124865 * C6922 + C125167 * C4223 +
                       C124864 * C4899 + C125166 * C831 + C124863 * C1440) *
                          C5308 -
                      (C125168 * C6528 + C124865 * C7000 + C125167 * C4337 +
                       C124864 * C5017 + C125166 * C939 + C124863 * C1553) *
                          C139377) *
                         C139286 * C139442 * C139300 * C1761 +
                     ((C125166 * C4223 + C124863 * C4899 + C125167 * C6442 +
                       C124864 * C6922 + C125168 * C26831 + C124865 * C27251) *
                          C5308 -
                      ((C125168 * C10877 + C124865 * C11211 + C125167 * C1874 +
                        C124864 * C2493 + C125166 * C1873 + C124863 * C2492) *
                           C5228 +
                       (C125168 * C10815 + C124865 * C11155 + C125167 * C1768 +
                        C124864 * C2379 + C125166 * C1767 + C124863 * C2376) *
                           C5307) +
                      (C125166 * C4337 + C124863 * C5017 + C125167 * C6528 +
                       C124864 * C7000 + C125168 * C26905 + C124865 * C27321) *
                          C139377) *
                         C139286 * C139442 * C139300 * C1762 +
                     ((C125166 * C1768 + C124863 * C2379 + C125167 * C10815 +
                       C124864 * C11155 + C125168 * C43406 + C124865 * C43868) *
                          C5307 +
                      (C125166 * C1874 + C124863 * C2493 + C125167 * C10877 +
                       C124864 * C11211 + C125168 * C43492 + C124865 * C43938) *
                          C5228 -
                      (C125168 * C88843 + C124865 * C89293 + C125167 * C26831 +
                       C124864 * C27251 + C125166 * C6442 + C124863 * C6922) *
                          C5308 -
                      (C125168 * C88921 + C124865 * C89361 + C125167 * C26905 +
                       C124864 * C27321 + C125166 * C6528 + C124863 * C7000) *
                          C139377) *
                         C139286 * C139442 * C139300 * C1763)) /
                       (p * q * std::sqrt(p + q));
    d2eezz[127] += (-std::pow(Pi, 2.5) *
                    (((C125166 * C107 + C124863 * C555 + C125167 * C1767 +
                       C124864 * C2376 + C125168 * C1768 + C124865 * C2379) *
                          C244 +
                      (C125166 * C245 + C124863 * C719 + C125167 * C1965 +
                       C124864 * C2591 + C125168 * C1966 + C124865 * C2592) *
                          C139339) *
                         C139286 * C139442 * C5909 -
                     ((C125168 * C6608 + C124865 * C7077 + C125167 * C4443 +
                       C124864 * C5133 + C125166 * C1029 + C124863 * C1661) *
                          C139339 +
                      (C125168 * C6442 + C124865 * C6922 + C125167 * C4223 +
                       C124864 * C4899 + C125166 * C831 + C124863 * C1440) *
                          C244) *
                         C139286 * C139442 * C5910 +
                     ((C125166 * C832 + C124863 * C1443 + C125167 * C8754 +
                       C124864 * C9234 + C125168 * C21079 + C124865 * C21715) *
                          C244 +
                      (C125166 * C1030 + C124863 * C1662 + C125167 * C8920 +
                       C124864 * C9389 + C125168 * C21305 + C124865 * C21933) *
                          C139339) *
                         C139286 * C139442 * C5911 -
                     ((C125168 * C69016 + C124865 * C69498 + C125167 * C24355 +
                       C124864 * C24979 + C125166 * C6038 + C124863 * C6365) *
                          C139339 +
                      (C125168 * C68836 + C124865 * C69336 + C125167 * C24129 +
                       C124864 * C24765 + C125166 * C5916 + C124863 * C6256) *
                          C244) *
                         C139286 * C139442 * C5912) *
                    C139300) /
                       (p * q * std::sqrt(p + q)) -
                   (std::pow(Pi, 2.5) *
                    ((((C125166 * C107 + C124863 * C555 + C125167 * C1767 +
                        C124864 * C2376 + C125168 * C1768 + C124865 * C2379) *
                           C244 +
                       (C125166 * C245 + C124863 * C719 + C125167 * C1965 +
                        C124864 * C2591 + C125168 * C1966 + C124865 * C2592) *
                           C139339) *
                          C139286 * C139442 * C5228 -
                      ((C125168 * C6608 + C124865 * C7077 + C125167 * C4443 +
                        C124864 * C5133 + C125166 * C1029 + C124863 * C1661) *
                           C139339 +
                       (C125168 * C6442 + C124865 * C6922 + C125167 * C4223 +
                        C124864 * C4899 + C125166 * C831 + C124863 * C1440) *
                           C244) *
                          C139286 * C139442 * C139377) *
                         C5225 +
                     (((C125166 * C828 + C124863 * C1439 + C125167 * C4224 +
                        C124864 * C4900 + C125168 * C6441 + C124865 * C6921) *
                           C244 +
                       (C125166 * C1028 + C124863 * C1660 + C125167 * C4444 +
                        C124864 * C5134 + C125168 * C6607 + C124865 * C7078) *
                           C139339) *
                          C139286 * C139442 * C139377 -
                      ((C125168 * C1967 + C124865 * C2594 + C125167 * C1964 +
                        C124864 * C2593 + C125166 * C246 + C124863 * C720) *
                           C139339 +
                       (C125168 * C1769 + C124865 * C2380 + C125167 * C1764 +
                        C124864 * C2375 + C125166 * C108 + C124863 * C556) *
                           C244) *
                          C139286 * C139442 * C5228) *
                         C5226 +
                     (((C125166 * C109 + C124863 * C557 + C125167 * C1765 +
                        C124864 * C2377 + C125168 * C1770 + C124865 * C2381) *
                           C244 +
                       (C125166 * C247 + C124863 * C721 + C125167 * C1963 +
                        C124864 * C2595 + C125168 * C1968 + C124865 * C2596) *
                           C139339) *
                          C139286 * C139442 * C5228 -
                      ((C125168 * C6606 + C124865 * C7079 + C125167 * C4445 +
                        C124864 * C5135 + C125166 * C1027 + C124863 * C1659) *
                           C139339 +
                       (C125168 * C6440 + C124865 * C6920 + C125167 * C4225 +
                        C124864 * C4901 + C125166 * C829 + C124863 * C1441) *
                           C244) *
                          C139286 * C139442 * C139377) *
                         C5227)) /
                       (p * q * std::sqrt(p + q)) +
                   (2 * std::pow(Pi, 2.5) *
                    (((C125166 * C107 + C124863 * C555 + C125167 * C1767 +
                       C124864 * C2376 + C125168 * C1768 + C124865 * C2379) *
                          C1960 +
                      (C125166 * C245 + C124863 * C719 + C125167 * C1965 +
                       C124864 * C2591 + C125168 * C1966 + C124865 * C2592) *
                          C1761 -
                      (C125168 * C10815 + C124865 * C11155 + C125167 * C1768 +
                       C124864 * C2379 + C125166 * C1767 + C124863 * C2376) *
                          C1961 -
                      (C125168 * C10937 + C124865 * C11262 + C125167 * C1966 +
                       C124864 * C2592 + C125166 * C1965 + C124863 * C2591) *
                          C1762 +
                      (C125166 * C1768 + C124863 * C2379 + C125167 * C10815 +
                       C124864 * C11155 + C125168 * C43406 + C124865 * C43868) *
                          C1962 +
                      (C125166 * C1966 + C124863 * C2592 + C125167 * C10937 +
                       C124864 * C11262 + C125168 * C43568 + C124865 * C44005) *
                          C1763) *
                         C139286 * C139442 * C5228 +
                     ((C125166 * C4223 + C124863 * C4899 + C125167 * C6442 +
                       C124864 * C6922 + C125168 * C26831 + C124865 * C27251) *
                          C1961 -
                      ((C125168 * C6608 + C124865 * C7077 + C125167 * C4443 +
                        C124864 * C5133 + C125166 * C1029 + C124863 * C1661) *
                           C1761 +
                       (C125168 * C6442 + C124865 * C6922 + C125167 * C4223 +
                        C124864 * C4899 + C125166 * C831 + C124863 * C1440) *
                           C1960) +
                      (C125166 * C4443 + C124863 * C5133 + C125167 * C6608 +
                       C124864 * C7077 + C125168 * C26975 + C124865 * C27388) *
                          C1762 -
                      (C125168 * C88843 + C124865 * C89293 + C125167 * C26831 +
                       C124864 * C27251 + C125166 * C6442 + C124863 * C6922) *
                          C1962 -
                      (C125168 * C88996 + C124865 * C89428 + C125167 * C26975 +
                       C124864 * C27388 + C125166 * C6608 + C124863 * C7077) *
                          C1763) *
                         C139286 * C139442 * C139377) *
                    C139300) /
                       (p * q * std::sqrt(p + q));
    d2eexx[128] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139286 * C113) * C137108 +
             (C63381 * C116 + C139286 * C125) * C139552 -
             (C63381 * C108 + C139286 * C114) * C137101 -
             (C63381 * C117 + C139286 * C126) * C139305) *
                C139442 * C124863 +
            (C84979 + C84980 - C84981 - C84982) * C139442 * C124864 +
            (C90704 + C90703 - C90702 - C90705) * C139442 * C124865) *
               C139561 +
           ((C84981 - (C84980 + C84979) + C84982) * C139442 * C124863 +
            (C90702 - (C90703 + C90704) + C90705) * C139442 * C124864 +
            (C126018 * C137101 - (C88853 * C139552 + C88852 * C137108) +
             C126019 * C139305) *
                C139442 * C124865) *
               C139403) *
              C5228 +
          (((C69585 - (C69584 + C69583) + C69586) * C139442 * C124863 +
            C84992 * C139442 * C124864 +
            (C84985 - (C84986 + C84987) + C84988) * C139442 * C124865) *
               C139561 +
           (C84991 * C139442 * C124863 +
            (C84987 + C84986 - C84985 - C84988) * C139442 * C124864 +
            (C83103 * C137108 + C83104 * C139552 -
             (C63381 * C26830 + C139286 * C26834) * C137101 -
             (C63381 * C26832 + C139286 * C26836) * C139305) *
                C139442 * C124865) *
               C139403) *
              C139377)) /
        (p * q * std::sqrt(p + q));
    d2eexy[128] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139286 * C113) * C5307 +
             (C63381 * C182 + C139286 * C188) * C5228 - C63884 * C5308 -
             C63997 * C139377) *
                C139442 * C124863 +
            (C83205 + C83206 - C83207 - C83208) * C139442 * C124864 +
            C130158 * C124865) *
               C139552 +
           ((C63886 * C5308 -
             ((C63381 * C183 + C139286 * C189) * C5228 +
              (C63381 * C108 + C139286 * C114) * C5307) +
             C64000 * C139377) *
                C139442 * C124863 +
            (C85123 - (C85124 + C85125) + C85126) * C139442 * C124864 +
            (C131562 - (C131563 + C131564) + C131565) * C139442 * C124865) *
               C139305) *
              C139561 +
          (((C83207 - (C83206 + C83205) + C83208) * C139442 * C124863 +
            (C83213 - (C83214 + C83215) + C83216) * C139442 * C124864 +
            (C130152 - (C130153 + C130154) + C130155) * C139442 * C124865) *
               C139552 +
           ((C85125 + C85124 - C85123 - C85126) * C139442 * C124863 +
            (C131564 + C131563 - C131562 - C131565) * C139442 * C124864 +
            (C126018 * C5307 + C126105 * C5228 -
             (C63381 * C26830 + C139286 * C26834) * C5308 -
             (C63381 * C26904 + C139286 * C26906) * C139377) *
                C139442 * C124865) *
               C139305) *
              C139403)) /
        (p * q * std::sqrt(p + q));
    d2eexz[128] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139286 * C113) * C3607 +
             (C63381 * C245 + C139286 * C251) * C139561 - C77533 * C3608 -
             C77790 * C139403) *
                C139442 * C124863 +
            (C77533 * C3607 + C77790 * C139561 - C77539 * C3608 -
             C77791 * C139403) *
                C139442 * C124864 +
            (C77539 * C3607 + C77791 * C139561 - C88852 * C3608 -
             C89001 * C139403) *
                C139442 * C124865) *
               C5228 +
           ((C66948 - (C66947 + C66946) + C66970) * C139442 * C124863 +
            (C80651 - (C80650 + C80649) + C80652) * C139442 * C124864 +
            (C83103 * C3608 - (C69033 * C139561 + C68853 * C3607) +
             C83329 * C139403) *
                C139442 * C124865) *
               C139377) *
              C139552 +
          (((C77535 * C3608 -
             ((C63381 * C246 + C139286 * C252) * C139561 +
              (C63381 * C108 + C139286 * C114) * C3607) +
             C77792 * C139403) *
                C139442 * C124863 +
            (C77537 * C3608 - (C77792 * C139561 + C77535 * C3607) +
             C77793 * C139403) *
                C139442 * C124864 +
            (C126018 * C3608 - (C77793 * C139561 + C77537 * C3607) +
             C126183 * C139403) *
                C139442 * C124865) *
               C5228 +
           ((C66958 + C66957 - C66956 - C66972) * C139442 * C124863 +
            (C80655 + C80654 - C80653 - C80656) * C139442 * C124864 +
            (C77541 * C3607 + C77794 * C139561 -
             (C63381 * C26830 + C139286 * C26834) * C3608 -
             (C63381 * C26974 + C139286 * C26976) * C139403) *
                C139442 * C124865) *
               C139377) *
              C139305)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[128] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139442 * C308) * C137108 +
             (C307 * C116 + C139442 * C314) * C139552 - C337 * C137101 -
             C338 * C139305) *
                C124863 +
            (C39974 + C39975 - C39976 - C39977) * C124864 +
            (C45576 + C45575 - C45574 - C45577) * C124865) *
               C139286 * C139561 +
           ((C39976 - (C39975 + C39974) + C39977) * C124863 +
            (C45574 - (C45575 + C45576) + C45577) * C124864 +
            (C32487 * C137101 - (C43655 * C139552 + C43654 * C137108) +
             C32488 * C139305) *
                C124865) *
               C139286 * C139403) *
              C5228 +
          (((C1150 * C137101 -
             ((C307 * C841 + C139442 * C1125) * C139552 +
              (C307 * C831 + C139442 * C1118) * C137108) +
             C1151 * C139305) *
                C124863 +
            (C39982 - (C39983 + C39984) + C39985) * C124864 +
            (C131762 - (C131763 + C131764) + C131765) * C124865) *
               C139286 * C139561 +
           ((C39984 + C39983 - C39982 - C39985) * C124863 +
            (C131764 + C131763 - C131762 - C131765) * C124864 +
            (C130313 * C137108 + C130314 * C139552 -
             (C307 * C26830 + C139442 * C27044) * C137101 -
             (C307 * C26832 + C139442 * C27046) * C139305) *
                C124865) *
               C139286 * C139403) *
              C139377)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[128] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139442 * C308) * C5307 +
             (C307 * C182 + C139442 * C394) * C5228 -
             (C307 * C831 + C139442 * C1118) * C5308 -
             (C307 * C939 + C139442 * C1231) * C139377) *
                C124863 +
            (C38156 + C38157 - C38158 - C38159) * C124864 + C130399 * C124865) *
               C139286 * C139552 +
           ((C5534 - (C5533 + C5532) + C5535) * C124863 + C40125 * C124864 +
            (C38165 - (C38166 + C38167) + C38168) * C124865) *
               C139286 * C139305) *
              C139561 +
          (((C38158 - (C38157 + C38156) + C38159) * C124863 +
            (C38160 - (C38161 + C38162) + C38170) * C124864 +
            (C130392 - (C130393 + C130394) + C130400) * C124865) *
               C139286 * C139552 +
           (C40124 * C124863 + (C38167 + C38166 - C38165 - C38168) * C124864 +
            (C32487 * C5307 + C32606 * C5228 -
             (C307 * C26830 + C139442 * C27044) * C5308 -
             (C307 * C26904 + C139442 * C27114) * C139377) *
                C124865) *
               C139286 * C139305) *
              C139403)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[128] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    (((((C307 * C107 + C139442 * C308) * C3607 +
                        (C307 * C245 + C139442 * C474) * C139561 -
                        C32483 * C3608 - C32719 * C139403) *
                           C124863 +
                       (C32483 * C3607 + C32719 * C139561 - C32486 * C3608 -
                        C32720 * C139403) *
                           C124864 +
                       (C32486 * C3607 + C32720 * C139561 - C43654 * C3608 -
                        C43801 * C139403) *
                           C124865) *
                          C139286 * C5228 +
                      ((C35459 * C3608 -
                        ((C307 * C1029 + C139442 * C1339) * C139561 +
                         (C307 * C831 + C139442 * C1118) * C3607) +
                        C35751 * C139403) *
                           C124863 +
                       (C38054 * C3608 - (C35751 * C139561 + C35459 * C3607) +
                        C38271 * C139403) *
                           C124864 +
                       (C130313 * C3608 - (C38271 * C139561 + C38054 * C3607) +
                        C130477 * C139403) *
                           C124865) *
                          C139286 * C139377) *
                         C139552 +
                     (((C3853 - (C3852 + C3851) + C3854) * C124863 +
                       (C34600 - (C34599 + C34598) + C34601) * C124864 +
                       (C32487 * C3608 - (C2295 * C139561 + C2090 * C3607) +
                        C32721 * C139403) *
                           C124865) *
                          C139286 * C5228 +
                      ((C4790 + C4789 - C4788 - C4800) * C124863 +
                       (C35748 + C35747 - C35746 - C35753) * C124864 +
                       (C35460 * C3607 + C35752 * C139561 -
                        (C307 * C26830 + C139442 * C27044) * C3608 -
                        (C307 * C26974 + C139442 * C27183) * C139403) *
                           C124865) *
                          C139286 * C139377) *
                         C139305)) /
                   (p * q * std::sqrt(p + q));
    d2eezx[128] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    ((((C125166 * C107 + C124863 * C555 + C125167 * C1767 +
                        C124864 * C2376 + C125168 * C1768 + C124865 * C2379) *
                           C137108 +
                       (C125166 * C116 + C124863 * C561 + C125167 * C1777 +
                        C124864 * C2383 + C125168 * C1783 + C124865 * C2387) *
                           C139552 -
                       (C125168 * C1769 + C124865 * C2380 + C125167 * C1764 +
                        C124864 * C2375 + C125166 * C108 + C124863 * C556) *
                           C137101 -
                       (C125168 * C1784 + C124865 * C2388 + C125167 * C1776 +
                        C124864 * C2384 + C125166 * C117 + C124863 * C562) *
                           C139305) *
                          C139286 * C139442 * C139561 +
                      ((C125166 * C1764 + C124863 * C2375 + C125167 * C1769 +
                        C124864 * C2380 + C125168 * C10814 + C124865 * C11154) *
                           C137101 -
                       ((C125168 * C10818 + C124865 * C11158 + C125167 * C1783 +
                         C124864 * C2387 + C125166 * C1777 + C124863 * C2383) *
                            C139552 +
                        (C125168 * C10815 + C124865 * C11155 + C125167 * C1768 +
                         C124864 * C2379 + C125166 * C1767 + C124863 * C2376) *
                            C137108) +
                       (C125166 * C1776 + C124863 * C2384 + C125167 * C1784 +
                        C124864 * C2388 + C125168 * C10817 + C124865 * C11157) *
                           C139305) *
                          C139286 * C139442 * C139403) *
                         C5228 +
                     (((C125166 * C828 + C124863 * C1439 + C125167 * C4224 +
                        C124864 * C4900 + C125168 * C6441 + C124865 * C6921) *
                           C137101 -
                       ((C125168 * C6445 + C124865 * C6925 + C125167 * C4230 +
                         C124864 * C4903 + C125166 * C841 + C124863 * C1447) *
                            C139552 +
                        (C125168 * C6442 + C124865 * C6922 + C125167 * C4223 +
                         C124864 * C4899 + C125166 * C831 + C124863 * C1440) *
                            C137108) +
                       (C125166 * C840 + C124863 * C1448 + C125167 * C4231 +
                        C124864 * C4904 + C125168 * C6444 + C124865 * C6924) *
                           C139305) *
                          C139286 * C139442 * C139561 +
                      ((C125166 * C4223 + C124863 * C4899 + C125167 * C6442 +
                        C124864 * C6922 + C125168 * C26831 + C124865 * C27251) *
                           C137108 +
                       (C125166 * C4230 + C124863 * C4903 + C125167 * C6445 +
                        C124864 * C6925 + C125168 * C26833 + C124865 * C27253) *
                           C139552 -
                       (C125168 * C26830 + C124865 * C27250 + C125167 * C6441 +
                        C124864 * C6921 + C125166 * C4224 + C124863 * C4900) *
                           C137101 -
                       (C125168 * C26832 + C124865 * C27252 + C125167 * C6444 +
                        C124864 * C6924 + C125166 * C4231 + C124863 * C4904) *
                           C139305) *
                          C139286 * C139442 * C139403) *
                         C139377)) /
                   (p * q * std::sqrt(p + q));
    d2eezy[128] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    ((((C125166 * C107 + C124863 * C555 + C125167 * C1767 +
                        C124864 * C2376 + C125168 * C1768 + C124865 * C2379) *
                           C5307 +
                       (C125166 * C182 + C124863 * C641 + C125167 * C1873 +
                        C124864 * C2492 + C125168 * C1874 + C124865 * C2493) *
                           C5228 -
                       (C125168 * C6442 + C124865 * C6922 + C125167 * C4223 +
                        C124864 * C4899 + C125166 * C831 + C124863 * C1440) *
                           C5308 -
                       (C125168 * C6528 + C124865 * C7000 + C125167 * C4337 +
                        C124864 * C5017 + C125166 * C939 + C124863 * C1553) *
                           C139377) *
                          C139286 * C139442 * C139552 +
                      ((C125166 * C828 + C124863 * C1439 + C125167 * C4224 +
                        C124864 * C4900 + C125168 * C6441 + C124865 * C6921) *
                           C5308 -
                       ((C125168 * C1875 + C124865 * C2494 + C125167 * C1870 +
                         C124864 * C2489 + C125166 * C183 + C124863 * C642) *
                            C5228 +
                        (C125168 * C1769 + C124865 * C2380 + C125167 * C1764 +
                         C124864 * C2375 + C125166 * C108 + C124863 * C556) *
                            C5307) +
                       (C125166 * C938 + C124863 * C1555 + C125167 * C4338 +
                        C124864 * C5018 + C125168 * C6527 + C124865 * C7001) *
                           C139377) *
                          C139286 * C139442 * C139305) *
                         C139561 +
                     (((C125166 * C4223 + C124863 * C4899 + C125167 * C6442 +
                        C124864 * C6922 + C125168 * C26831 + C124865 * C27251) *
                           C5308 -
                       ((C125168 * C10877 + C124865 * C11211 + C125167 * C1874 +
                         C124864 * C2493 + C125166 * C1873 + C124863 * C2492) *
                            C5228 +
                        (C125168 * C10815 + C124865 * C11155 + C125167 * C1768 +
                         C124864 * C2379 + C125166 * C1767 + C124863 * C2376) *
                            C5307) +
                       (C125166 * C4337 + C124863 * C5017 + C125167 * C6528 +
                        C124864 * C7000 + C125168 * C26905 + C124865 * C27321) *
                           C139377) *
                          C139286 * C139442 * C139552 +
                      ((C125166 * C1764 + C124863 * C2375 + C125167 * C1769 +
                        C124864 * C2380 + C125168 * C10814 + C124865 * C11154) *
                           C5307 +
                       (C125166 * C1870 + C124863 * C2489 + C125167 * C1875 +
                        C124864 * C2494 + C125168 * C10876 + C124865 * C11210) *
                           C5228 -
                       (C125168 * C26830 + C124865 * C27250 + C125167 * C6441 +
                        C124864 * C6921 + C125166 * C4224 + C124863 * C4900) *
                           C5308 -
                       (C125168 * C26904 + C124865 * C27320 + C125167 * C6527 +
                        C124864 * C7001 + C125166 * C4338 + C124863 * C5018) *
                           C139377) *
                          C139286 * C139442 * C139305) *
                         C139403)) /
                   (p * q * std::sqrt(p + q));
    d2eezz[128] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    ((((C125166 * C107 + C124863 * C555 + C125167 * C1767 +
                        C124864 * C2376 + C125168 * C1768 + C124865 * C2379) *
                           C3607 +
                       (C125166 * C245 + C124863 * C719 + C125167 * C1965 +
                        C124864 * C2591 + C125168 * C1966 + C124865 * C2592) *
                           C139561 -
                       (C125168 * C10815 + C124865 * C11155 + C125167 * C1768 +
                        C124864 * C2379 + C125166 * C1767 + C124863 * C2376) *
                           C3608 -
                       (C125168 * C10937 + C124865 * C11262 + C125167 * C1966 +
                        C124864 * C2592 + C125166 * C1965 + C124863 * C2591) *
                           C139403) *
                          C139286 * C139442 * C5228 +
                      ((C125166 * C4223 + C124863 * C4899 + C125167 * C6442 +
                        C124864 * C6922 + C125168 * C26831 + C124865 * C27251) *
                           C3608 -
                       ((C125168 * C6608 + C124865 * C7077 + C125167 * C4443 +
                         C124864 * C5133 + C125166 * C1029 + C124863 * C1661) *
                            C139561 +
                        (C125168 * C6442 + C124865 * C6922 + C125167 * C4223 +
                         C124864 * C4899 + C125166 * C831 + C124863 * C1440) *
                            C3607) +
                       (C125166 * C4443 + C124863 * C5133 + C125167 * C6608 +
                        C124864 * C7077 + C125168 * C26975 + C124865 * C27388) *
                           C139403) *
                          C139286 * C139442 * C139377) *
                         C139552 +
                     (((C125166 * C1764 + C124863 * C2375 + C125167 * C1769 +
                        C124864 * C2380 + C125168 * C10814 + C124865 * C11154) *
                           C3608 -
                       ((C125168 * C1967 + C124865 * C2594 + C125167 * C1964 +
                         C124864 * C2593 + C125166 * C246 + C124863 * C720) *
                            C139561 +
                        (C125168 * C1769 + C124865 * C2380 + C125167 * C1764 +
                         C124864 * C2375 + C125166 * C108 + C124863 * C556) *
                            C3607) +
                       (C125166 * C1964 + C124863 * C2593 + C125167 * C1967 +
                        C124864 * C2594 + C125168 * C10936 + C124865 * C11263) *
                           C139403) *
                          C139286 * C139442 * C5228 +
                      ((C125166 * C828 + C124863 * C1439 + C125167 * C4224 +
                        C124864 * C4900 + C125168 * C6441 + C124865 * C6921) *
                           C3607 +
                       (C125166 * C1028 + C124863 * C1660 + C125167 * C4444 +
                        C124864 * C5134 + C125168 * C6607 + C124865 * C7078) *
                           C139561 -
                       (C125168 * C26830 + C124865 * C27250 + C125167 * C6441 +
                        C124864 * C6921 + C125166 * C4224 + C124863 * C4900) *
                           C3608 -
                       (C125168 * C26974 + C124865 * C27389 + C125167 * C6607 +
                        C124864 * C7078 + C125166 * C4444 + C124863 * C5134) *
                           C139403) *
                          C139286 * C139442 * C139377) *
                         C139305)) /
                   (p * q * std::sqrt(p + q));
    d2eexx[129] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139286 * C113) * C5230 +
            (C63381 * C116 + C139286 * C125) * C5225 -
            (C63381 * C108 + C139286 * C114) * C5231 -
            (C63381 * C117 + C139286 * C126) * C5226 +
            (C63381 * C109 + C139286 * C115) * C5232 +
            (C63381 * C118 + C139286 * C127) * C5227) *
               C139442 * C124863 +
           (C87086 + C87087 - C87088 - C87089 + C87090 + C87091) * C139442 *
               C124864 +
           (C77539 * C5230 + C77538 * C5225 - C77537 * C5231 - C77540 * C5226 +
            C127384 * C5232 + C127385 * C5227) *
               C139442 * C124865) *
              C139339 * C5228 +
          ((C67642 - (C67641 + C67640) + C67643 - C67644 - C67645) * C139442 *
               C124863 +
           (C81585 - (C81584 + C81583) + C81586 - C81587 - C81588) * C139442 *
               C124864 +
           (C77541 * C5231 - (C68854 * C5225 + C68853 * C5230) +
            C77542 * C5226 - (C63381 * C6440 + C139286 * C6446) * C5232 -
            (C63381 * C6443 + C139286 * C6449) * C5227) *
               C139442 * C124865) *
              C139339 * C139377)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139286 * C113) * C5913 +
            (C63381 * C116 + C139286 * C125) * C139300) *
               C139442 * C124863 +
           (C83091 + C83092) * C139442 * C124864 +
           (C83096 + C83095) * C139442 * C124865) *
              C139339 * C5909 -
          (C83094 * C139442 * C124865 + C83097 * C139442 * C124864 +
           (C68305 + C68304) * C139442 * C124863) *
              C139339 * C5910 +
          (C68314 * C139442 * C124863 + C86139 * C139442 * C124864 +
           (C68859 + C68860) * C139442 * C124865) *
              C139339 * C5911 -
          (((C63381 * C68837 + C139286 * C68839) * C139300 +
            (C63381 * C68836 + C139286 * C68838) * C5913) *
               C139442 * C124865 +
           (C71178 + C71177) * C139442 * C124864 + C68315 * C139442 * C124863) *
              C139339 * C5912)) /
            (p * q * std::sqrt(p + q));
    d2eexy[129] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139286 * C113) * C5307 +
            (C63381 * C182 + C139286 * C188) * C5228 - C63884 * C5308 -
            C63997 * C139377) *
               C139442 * C124863 +
           (C83205 + C83206 - C83207 - C83208) * C139442 * C124864 +
           (C83215 + C83214 - C83213 - C83216) * C139442 * C124865) *
              C5225 +
          ((C63886 * C5308 -
            ((C63381 * C183 + C139286 * C189) * C5228 +
             (C63381 * C108 + C139286 * C114) * C5307) +
            C64000 * C139377) *
               C139442 * C124863 +
           (C85123 - (C85124 + C85125) + C85126) * C139442 * C124864 +
           (C77541 * C5308 - (C77674 * C5228 + C77537 * C5307) +
            C77675 * C139377) *
               C139442 * C124865) *
              C5226 +
          (((C63381 * C109 + C139286 * C115) * C5307 +
            (C63381 * C184 + C139286 * C190) * C5228 - C65320 * C5308 -
            C65406 * C139377) *
               C139442 * C124863 +
           (C79439 * C5307 + C79546 * C5228 - C78537 * C5308 -
            C78641 * C139377) *
               C139442 * C124864 +
           (C127384 * C5307 + C127465 * C5228 -
            (C63381 * C6440 + C139286 * C6446) * C5308 -
            (C63381 * C6526 + C139286 * C6529) * C139377) *
               C139442 * C124865) *
              C5227) *
         C139339) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C63381 * C107 + C139286 * C113) * C5976 +
           (C63381 * C182 + C139286 * C188) * C5909 - C63884 * C5977 -
           C63997 * C5910 + C63888 * C5978 + C63998 * C5911 - C63894 * C5979 -
           C63999 * C5912) *
              C139442 * C124863 +
          (C77533 * C5976 + C77672 * C5909 - C66724 * C5977 - C66844 * C5910 +
           C66728 * C5978 + C66845 * C5911 - C71175 * C5979 - C71257 * C5912) *
              C139442 * C124864 +
          (C77539 * C5976 + C77676 * C5909 - C68853 * C5977 - C68941 * C5910 +
           C68855 * C5978 + C68942 * C5911 -
           (C63381 * C68836 + C139286 * C68838) * C5979 -
           (C63381 * C68934 + C139286 * C68935) * C5912) *
              C139442 * C124865) *
         C139300 * C139339) /
            (p * q * std::sqrt(p + q));
    d2eexz[129] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139286 * C113) * C244 +
             (C63381 * C245 + C139286 * C251) * C139339) *
                C139442 * C124863 +
            (C77533 * C244 + C77790 * C139339) * C139442 * C124864 +
            (C77539 * C244 + C77791 * C139339) * C139442 * C124865) *
               C5228 -
           ((C69033 * C139339 + C68853 * C244) * C139442 * C124865 +
            (C76770 + C76769) * C139442 * C124864 +
            (C64101 + C64077) * C139442 * C124863) *
               C139377) *
              C5225 +
          (((C64086 + C64104) * C139442 * C124863 +
            (C76773 + C76774) * C139442 * C124864 +
            (C77541 * C244 + C77794 * C139339) * C139442 * C124865) *
               C139377 -
           ((C77793 * C139339 + C77537 * C244) * C139442 * C124865 +
            (C77792 * C139339 + C77535 * C244) * C139442 * C124864 +
            ((C63381 * C246 + C139286 * C252) * C139339 +
             (C63381 * C108 + C139286 * C114) * C244) *
                C139442 * C124863) *
               C5228) *
              C5226 +
          ((((C63381 * C109 + C139286 * C115) * C244 +
             (C63381 * C247 + C139286 * C253) * C139339) *
                C139442 * C124863 +
            (C79439 * C244 + C79648 * C139339) * C139442 * C124864 +
            (C127384 * C244 + C127543 * C139339) * C139442 * C124865) *
               C5228 -
           (((C63381 * C6606 + C139286 * C6609) * C139339 +
             (C63381 * C6440 + C139286 * C6446) * C244) *
                C139442 * C124865 +
            (C78744 + C78740) * C139442 * C124864 +
            (C65490 + C65482) * C139442 * C124863) *
               C139377) *
              C5227)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139286 * C113) * C244 +
            (C63381 * C245 + C139286 * C251) * C139339) *
               C139442 * C124863 +
           (C77533 * C244 + C77790 * C139339) * C139442 * C124864 +
           (C77539 * C244 + C77791 * C139339) * C139442 * C124865) *
              C5909 -
          ((C69033 * C139339 + C68853 * C244) * C139442 * C124865 +
           (C76770 + C76769) * C139442 * C124864 +
           (C64101 + C64077) * C139442 * C124863) *
              C5910 +
          (C64107 * C139442 * C124863 + (C76772 + C76771) * C139442 * C124864 +
           (C68855 * C244 + C69034 * C139339) * C139442 * C124865) *
              C5911 -
          (((C63381 * C69016 + C139286 * C69017) * C139339 +
            (C63381 * C68836 + C139286 * C68838) * C244) *
               C139442 * C124865 +
           (C82572 + C82571) * C139442 * C124864 + C68427 * C139442 * C124863) *
              C5912) *
         C139300) /
            (p * q * std::sqrt(p + q));
    d2eeyx[129] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139442 * C308) * C5230 +
            (C307 * C116 + C139442 * C314) * C5225 - C337 * C5231 -
            C338 * C5226 + C339 * C5232 + C340 * C5227) *
               C124863 +
           (C41942 + C41943 - C41944 - C41945 + C41946 + C41947) * C124864 +
           (C32486 * C5230 + C32485 * C5225 - C2090 * C5231 - C2091 * C5226 +
            C2092 * C5232 + C2093 * C5227) *
               C124865) *
              C139286 * C139339 * C5228 +
          ((C1150 * C5231 -
            ((C307 * C841 + C139442 * C1125) * C5225 +
             (C307 * C831 + C139442 * C1118) * C5230) +
            C1151 * C5226 - C1152 * C5232 - C1153 * C5227) *
               C124863 +
           (C4566 * C5231 - (C35458 * C5225 + C35459 * C5230) + C4567 * C5226 -
            C4568 * C5232 - C4569 * C5227) *
               C124864 +
           (C35460 * C5231 - (C38055 * C5225 + C38054 * C5230) +
            C35461 * C5226 - (C307 * C6440 + C139442 * C6686) * C5232 -
            (C307 * C6443 + C139442 * C6689) * C5227) *
               C124865) *
              C139286 * C139339 * C139377)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139442 * C308) * C5913 +
            (C307 * C116 + C139442 * C314) * C139300) *
               C124863 +
           (C38036 + C38037) * C124864 + (C38043 + C38042) * C124865) *
              C139286 * C139339 * C5909 -
          ((C38057 + C38056) * C124865 + (C38045 + C38044) * C124864 +
           ((C307 * C841 + C139442 * C1125) * C139300 +
            (C307 * C831 + C139442 * C1118) * C5913) *
               C124863) *
              C139286 * C139339 * C5910 +
          (((C307 * C832 + C139442 * C1121) * C5913 +
            (C307 * C847 + C139442 * C1129) * C139300) *
               C124863 +
           (C41046 + C41047) * C124864 +
           ((C307 * C21079 + C139442 * C21413) * C5913 +
            (C307 * C21081 + C139442 * C21415) * C139300) *
               C124865) *
              C139286 * C139339 * C5911 -
          (((C307 * C68837 + C139442 * C69111) * C139300 +
            (C307 * C68836 + C139442 * C69110) * C5913) *
               C124865 +
           ((C307 * C24131 + C139442 * C24465) * C139300 +
            (C307 * C24129 + C139442 * C24463) * C5913) *
               C124864 +
           ((C307 * C5919 + C139442 * C6097) * C139300 +
            (C307 * C5916 + C139442 * C6094) * C5913) *
               C124863) *
              C139286 * C139339 * C5912)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[129] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139442 * C308) * C5307 +
            (C307 * C182 + C139442 * C394) * C5228 -
            (C307 * C831 + C139442 * C1118) * C5308 -
            (C307 * C939 + C139442 * C1231) * C139377) *
               C124863 +
           (C38156 + C38157 - C38158 - C38159) * C124864 +
           (C38162 + C38161 - C38160 - C38170) * C124865) *
              C139286 * C5225 +
          ((C5534 - (C5533 + C5532) + C5535) * C124863 + C40125 * C124864 +
           (C38165 - (C38166 + C38167) + C38168) * C124865) *
              C139286 * C5226 +
          (C5546 * C124863 + (C8277 + C8276 - C8275 - C8278) * C124864 +
           (C2092 * C5307 + C2191 * C5228 -
            (C307 * C6440 + C139442 * C6686) * C5308 -
            (C307 * C6526 + C139442 * C6768) * C139377) *
               C124865) *
              C139286 * C5227) *
         C139339) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C307 * C107 + C139442 * C308) * C5976 +
           (C307 * C182 + C139442 * C394) * C5909 -
           (C307 * C831 + C139442 * C1118) * C5977 -
           (C307 * C939 + C139442 * C1231) * C5910 +
           (C307 * C832 + C139442 * C1121) * C5978 +
           (C307 * C940 + C139442 * C1232) * C5911 -
           (C307 * C5916 + C139442 * C6094) * C5979 -
           (C307 * C5982 + C139442 * C6148) * C5912) *
              C124863 +
          (C32483 * C5976 + C32604 * C5909 - C35459 * C5977 - C35606 * C5910 +
           C41044 * C5978 + C41153 * C5911 -
           (C307 * C24129 + C139442 * C24463) * C5979 -
           (C307 * C24247 + C139442 * C24564) * C5912) *
              C124864 +
          (C32486 * C5976 + C32605 * C5909 - C38054 * C5977 - C38169 * C5910 +
           (C307 * C21079 + C139442 * C21413) * C5978 +
           (C307 * C21197 + C139442 * C21514) * C5911 -
           (C307 * C68836 + C139442 * C69110) * C5979 -
           (C307 * C68934 + C139442 * C69186) * C5912) *
              C124865) *
         C139286 * C139300 * C139339) /
            (p * q * std::sqrt(p + q));
    d2eeyz[129] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    (((((C307 * C107 + C139442 * C308) * C244 +
                        (C307 * C245 + C139442 * C474) * C139339) *
                           C124863 +
                       (C32483 * C244 + C32719 * C139339) * C124864 +
                       (C32486 * C244 + C32720 * C139339) * C124865) *
                          C139286 * C5228 -
                      ((C38271 * C139339 + C38054 * C244) * C124865 +
                       (C35751 * C139339 + C35459 * C244) * C124864 +
                       ((C307 * C1029 + C139442 * C1339) * C139339 +
                        (C307 * C831 + C139442 * C1118) * C244) *
                           C124863) *
                          C139286 * C139377) *
                         C5225 +
                     (((C1351 + C1363) * C124863 + (C31623 + C31622) * C124864 +
                       (C35460 * C244 + C35752 * C139339) * C124865) *
                          C139286 * C139377 -
                      ((C2295 * C139339 + C2090 * C244) * C124865 +
                       (C30742 + C30741) * C124864 + (C497 + C481) * C124863) *
                          C139286 * C5228) *
                         C5226 +
                     ((C501 * C124863 + (C30744 + C30743) * C124864 +
                       (C2092 * C244 + C2297 * C139339) * C124865) *
                          C139286 * C5228 -
                      (((C307 * C6606 + C139442 * C6845) * C139339 +
                        (C307 * C6440 + C139442 * C6686) * C244) *
                           C124865 +
                       (C33654 + C33653) * C124864 + C3115 * C124863) *
                          C139286 * C139377) *
                         C5227)) /
                       (p * q * std::sqrt(p + q)) -
                   (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    ((((C307 * C107 + C139442 * C308) * C244 +
                       (C307 * C245 + C139442 * C474) * C139339) *
                          C124863 +
                      (C32483 * C244 + C32719 * C139339) * C124864 +
                      (C32486 * C244 + C32720 * C139339) * C124865) *
                         C139286 * C5909 -
                     ((C38271 * C139339 + C38054 * C244) * C124865 +
                      (C35751 * C139339 + C35459 * C244) * C124864 +
                      ((C307 * C1029 + C139442 * C1339) * C139339 +
                       (C307 * C831 + C139442 * C1118) * C244) *
                          C124863) *
                         C139286 * C5910 +
                     (((C307 * C832 + C139442 * C1121) * C244 +
                       (C307 * C1030 + C139442 * C1340) * C139339) *
                          C124863 +
                      (C41044 * C244 + C41255 * C139339) * C124864 +
                      ((C307 * C21079 + C139442 * C21413) * C244 +
                       (C307 * C21305 + C139442 * C21614) * C139339) *
                          C124865) *
                         C139286 * C5911 -
                     (((C307 * C69016 + C139442 * C69261) * C139339 +
                       (C307 * C68836 + C139442 * C69110) * C244) *
                          C124865 +
                      ((C307 * C24355 + C139442 * C24664) * C139339 +
                       (C307 * C24129 + C139442 * C24463) * C244) *
                          C124864 +
                      ((C307 * C6038 + C139442 * C6203) * C139339 +
                       (C307 * C5916 + C139442 * C6094) * C244) *
                          C124863) *
                         C139286 * C5912) *
                    C139300) /
                       (p * q * std::sqrt(p + q));
    d2eezx[129] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    (((C125166 * C107 + C124863 * C555 + C125167 * C1767 +
                       C124864 * C2376 + C125168 * C1768 + C124865 * C2379) *
                          C5230 +
                      (C125166 * C116 + C124863 * C561 + C125167 * C1777 +
                       C124864 * C2383 + C125168 * C1783 + C124865 * C2387) *
                          C5225 -
                      (C125168 * C1769 + C124865 * C2380 + C125167 * C1764 +
                       C124864 * C2375 + C125166 * C108 + C124863 * C556) *
                          C5231 -
                      (C125168 * C1784 + C124865 * C2388 + C125167 * C1776 +
                       C124864 * C2384 + C125166 * C117 + C124863 * C562) *
                          C5226 +
                      (C125166 * C109 + C124863 * C557 + C125167 * C1765 +
                       C124864 * C2377 + C125168 * C1770 + C124865 * C2381) *
                          C5232 +
                      (C125166 * C118 + C124863 * C563 + C125167 * C1775 +
                       C124864 * C2385 + C125168 * C1785 + C124865 * C2389) *
                          C5227) *
                         C139286 * C139442 * C139339 * C5228 +
                     ((C125166 * C828 + C124863 * C1439 + C125167 * C4224 +
                       C124864 * C4900 + C125168 * C6441 + C124865 * C6921) *
                          C5231 -
                      ((C125168 * C6445 + C124865 * C6925 + C125167 * C4230 +
                        C124864 * C4903 + C125166 * C841 + C124863 * C1447) *
                           C5225 +
                       (C125168 * C6442 + C124865 * C6922 + C125167 * C4223 +
                        C124864 * C4899 + C125166 * C831 + C124863 * C1440) *
                           C5230) +
                      (C125166 * C840 + C124863 * C1448 + C125167 * C4231 +
                       C124864 * C4904 + C125168 * C6444 + C124865 * C6924) *
                          C5226 -
                      (C125168 * C6440 + C124865 * C6920 + C125167 * C4225 +
                       C124864 * C4901 + C125166 * C829 + C124863 * C1441) *
                          C5232 -
                      (C125168 * C6443 + C124865 * C6923 + C125167 * C4232 +
                       C124864 * C4905 + C125166 * C839 + C124863 * C1449) *
                          C5227) *
                         C139286 * C139442 * C139339 * C139377)) /
                       (p * q * std::sqrt(p + q)) -
                   (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    (((C125166 * C107 + C124863 * C555 + C125167 * C1767 +
                       C124864 * C2376 + C125168 * C1768 + C124865 * C2379) *
                          C5913 +
                      (C125166 * C116 + C124863 * C561 + C125167 * C1777 +
                       C124864 * C2383 + C125168 * C1783 + C124865 * C2387) *
                          C139300) *
                         C139286 * C139442 * C139339 * C5909 -
                     ((C125168 * C6445 + C124865 * C6925 + C125167 * C4230 +
                       C124864 * C4903 + C125166 * C841 + C124863 * C1447) *
                          C139300 +
                      (C125168 * C6442 + C124865 * C6922 + C125167 * C4223 +
                       C124864 * C4899 + C125166 * C831 + C124863 * C1440) *
                          C5913) *
                         C139286 * C139442 * C139339 * C5910 +
                     ((C125166 * C832 + C124863 * C1443 + C125167 * C8754 +
                       C124864 * C9234 + C125168 * C21079 + C124865 * C21715) *
                          C5913 +
                      (C125166 * C847 + C124863 * C1451 + C125167 * C8757 +
                       C124864 * C9237 + C125168 * C21081 + C124865 * C21717) *
                          C139300) *
                         C139286 * C139442 * C139339 * C5911 -
                     ((C125168 * C68837 + C124865 * C69337 + C125167 * C24131 +
                       C124864 * C24767 + C125166 * C5919 + C124863 * C6259) *
                          C139300 +
                      (C125168 * C68836 + C124865 * C69336 + C125167 * C24129 +
                       C124864 * C24765 + C125166 * C5916 + C124863 * C6256) *
                          C5913) *
                         C139286 * C139442 * C139339 * C5912)) /
                       (p * q * std::sqrt(p + q));
    d2eezy[129] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    (((C125166 * C107 + C124863 * C555 + C125167 * C1767 +
                       C124864 * C2376 + C125168 * C1768 + C124865 * C2379) *
                          C5307 +
                      (C125166 * C182 + C124863 * C641 + C125167 * C1873 +
                       C124864 * C2492 + C125168 * C1874 + C124865 * C2493) *
                          C5228 -
                      (C125168 * C6442 + C124865 * C6922 + C125167 * C4223 +
                       C124864 * C4899 + C125166 * C831 + C124863 * C1440) *
                          C5308 -
                      (C125168 * C6528 + C124865 * C7000 + C125167 * C4337 +
                       C124864 * C5017 + C125166 * C939 + C124863 * C1553) *
                          C139377) *
                         C139286 * C139442 * C5225 +
                     ((C125166 * C828 + C124863 * C1439 + C125167 * C4224 +
                       C124864 * C4900 + C125168 * C6441 + C124865 * C6921) *
                          C5308 -
                      ((C125168 * C1875 + C124865 * C2494 + C125167 * C1870 +
                        C124864 * C2489 + C125166 * C183 + C124863 * C642) *
                           C5228 +
                       (C125168 * C1769 + C124865 * C2380 + C125167 * C1764 +
                        C124864 * C2375 + C125166 * C108 + C124863 * C556) *
                           C5307) +
                      (C125166 * C938 + C124863 * C1555 + C125167 * C4338 +
                       C124864 * C5018 + C125168 * C6527 + C124865 * C7001) *
                          C139377) *
                         C139286 * C139442 * C5226 +
                     ((C125166 * C109 + C124863 * C557 + C125167 * C1765 +
                       C124864 * C2377 + C125168 * C1770 + C124865 * C2381) *
                          C5307 +
                      (C125166 * C184 + C124863 * C643 + C125167 * C1871 +
                       C124864 * C2490 + C125168 * C1876 + C124865 * C2495) *
                          C5228 -
                      (C125168 * C6440 + C124865 * C6920 + C125167 * C4225 +
                       C124864 * C4901 + C125166 * C829 + C124863 * C1441) *
                          C5308 -
                      (C125168 * C6526 + C124865 * C7002 + C125167 * C4339 +
                       C124864 * C5019 + C125166 * C937 + C124863 * C1557) *
                          C139377) *
                         C139286 * C139442 * C5227) *
                    C139339) /
                       (p * q * std::sqrt(p + q)) -
                   (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    ((C125166 * C107 + C124863 * C555 + C125167 * C1767 +
                      C124864 * C2376 + C125168 * C1768 + C124865 * C2379) *
                         C5976 +
                     (C125166 * C182 + C124863 * C641 + C125167 * C1873 +
                      C124864 * C2492 + C125168 * C1874 + C124865 * C2493) *
                         C5909 -
                     (C125168 * C6442 + C124865 * C6922 + C125167 * C4223 +
                      C124864 * C4899 + C125166 * C831 + C124863 * C1440) *
                         C5977 -
                     (C125168 * C6528 + C124865 * C7000 + C125167 * C4337 +
                      C124864 * C5017 + C125166 * C939 + C124863 * C1553) *
                         C5910 +
                     (C125166 * C832 + C124863 * C1443 + C125167 * C8754 +
                      C124864 * C9234 + C125168 * C21079 + C124865 * C21715) *
                         C5978 +
                     (C125166 * C940 + C124863 * C1554 + C125167 * C8840 +
                      C124864 * C9312 + C125168 * C21197 + C124865 * C21830) *
                         C5911 -
                     (C125168 * C68836 + C124865 * C69336 + C125167 * C24129 +
                      C124864 * C24765 + C125166 * C5916 + C124863 * C6256) *
                         C5979 -
                     (C125168 * C68934 + C124865 * C69420 + C125167 * C24247 +
                      C124864 * C24876 + C125166 * C5982 + C124863 * C6310) *
                         C5912) *
                    C139286 * C139442 * C139300 * C139339) /
                       (p * q * std::sqrt(p + q));
    d2eezz[129] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    ((((C125166 * C107 + C124863 * C555 + C125167 * C1767 +
                        C124864 * C2376 + C125168 * C1768 + C124865 * C2379) *
                           C244 +
                       (C125166 * C245 + C124863 * C719 + C125167 * C1965 +
                        C124864 * C2591 + C125168 * C1966 + C124865 * C2592) *
                           C139339) *
                          C139286 * C139442 * C5228 -
                      ((C125168 * C6608 + C124865 * C7077 + C125167 * C4443 +
                        C124864 * C5133 + C125166 * C1029 + C124863 * C1661) *
                           C139339 +
                       (C125168 * C6442 + C124865 * C6922 + C125167 * C4223 +
                        C124864 * C4899 + C125166 * C831 + C124863 * C1440) *
                           C244) *
                          C139286 * C139442 * C139377) *
                         C5225 +
                     (((C125166 * C828 + C124863 * C1439 + C125167 * C4224 +
                        C124864 * C4900 + C125168 * C6441 + C124865 * C6921) *
                           C244 +
                       (C125166 * C1028 + C124863 * C1660 + C125167 * C4444 +
                        C124864 * C5134 + C125168 * C6607 + C124865 * C7078) *
                           C139339) *
                          C139286 * C139442 * C139377 -
                      ((C125168 * C1967 + C124865 * C2594 + C125167 * C1964 +
                        C124864 * C2593 + C125166 * C246 + C124863 * C720) *
                           C139339 +
                       (C125168 * C1769 + C124865 * C2380 + C125167 * C1764 +
                        C124864 * C2375 + C125166 * C108 + C124863 * C556) *
                           C244) *
                          C139286 * C139442 * C5228) *
                         C5226 +
                     (((C125166 * C109 + C124863 * C557 + C125167 * C1765 +
                        C124864 * C2377 + C125168 * C1770 + C124865 * C2381) *
                           C244 +
                       (C125166 * C247 + C124863 * C721 + C125167 * C1963 +
                        C124864 * C2595 + C125168 * C1968 + C124865 * C2596) *
                           C139339) *
                          C139286 * C139442 * C5228 -
                      ((C125168 * C6606 + C124865 * C7079 + C125167 * C4445 +
                        C124864 * C5135 + C125166 * C1027 + C124863 * C1659) *
                           C139339 +
                       (C125168 * C6440 + C124865 * C6920 + C125167 * C4225 +
                        C124864 * C4901 + C125166 * C829 + C124863 * C1441) *
                           C244) *
                          C139286 * C139442 * C139377) *
                         C5227)) /
                       (p * q * std::sqrt(p + q)) -
                   (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    (((C125166 * C107 + C124863 * C555 + C125167 * C1767 +
                       C124864 * C2376 + C125168 * C1768 + C124865 * C2379) *
                          C244 +
                      (C125166 * C245 + C124863 * C719 + C125167 * C1965 +
                       C124864 * C2591 + C125168 * C1966 + C124865 * C2592) *
                          C139339) *
                         C139286 * C139442 * C5909 -
                     ((C125168 * C6608 + C124865 * C7077 + C125167 * C4443 +
                       C124864 * C5133 + C125166 * C1029 + C124863 * C1661) *
                          C139339 +
                      (C125168 * C6442 + C124865 * C6922 + C125167 * C4223 +
                       C124864 * C4899 + C125166 * C831 + C124863 * C1440) *
                          C244) *
                         C139286 * C139442 * C5910 +
                     ((C125166 * C832 + C124863 * C1443 + C125167 * C8754 +
                       C124864 * C9234 + C125168 * C21079 + C124865 * C21715) *
                          C244 +
                      (C125166 * C1030 + C124863 * C1662 + C125167 * C8920 +
                       C124864 * C9389 + C125168 * C21305 + C124865 * C21933) *
                          C139339) *
                         C139286 * C139442 * C5911 -
                     ((C125168 * C69016 + C124865 * C69498 + C125167 * C24355 +
                       C124864 * C24979 + C125166 * C6038 + C124863 * C6365) *
                          C139339 +
                      (C125168 * C68836 + C124865 * C69336 + C125167 * C24129 +
                       C124864 * C24765 + C125166 * C5916 + C124863 * C6256) *
                          C244) *
                         C139286 * C139442 * C5912) *
                    C139300) /
                       (p * q * std::sqrt(p + q));
    d2eexx[130] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139286 * C113) * C137108 +
             (C63381 * C116 + C139286 * C125) * C139552 -
             (C63381 * C108 + C139286 * C114) * C137101 -
             (C63381 * C117 + C139286 * C126) * C139305) *
                C139442 * C124863 +
            (C84979 + C84980 - C84981 - C84982) * C139442 * C124864 +
            (C90704 + C90703 - C90702 - C90705) * C139442 * C124865) *
               C9466 +
           ((C84981 - (C84980 + C84979) + C84982) * C139442 * C124863 +
            (C90702 - (C90703 + C90704) + C90705) * C139442 * C124864 +
            (C126018 * C137101 - (C88853 * C139552 + C88852 * C137108) +
             C126019 * C139305) *
                C139442 * C124865) *
               C139403) *
              C139560 +
          (((C69585 - (C69584 + C69583) + C69586) * C139442 * C124863 +
            C84992 * C139442 * C124864 +
            (C84985 - (C84986 + C84987) + C84988) * C139442 * C124865) *
               C9466 +
           (C84991 * C139442 * C124863 +
            (C84987 + C84986 - C84985 - C84988) * C139442 * C124864 +
            (C83103 * C137108 + C83104 * C139552 -
             (C63381 * C26830 + C139286 * C26834) * C137101 -
             (C63381 * C26832 + C139286 * C26836) * C139305) *
                C139442 * C124865) *
               C139403) *
              C139377)) /
        (p * q * std::sqrt(p + q));
    d2eexy[130] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139286 * C113) * C2783 +
             (C63381 * C182 + C139286 * C188) * C139560 - C63884 * C2784 -
             C63997 * C139377) *
                C139442 * C124863 +
            (C80503 + C80504 - C80505 - C80506) * C139442 * C124864 +
            (C91688 + C91687 - C91686 - C91689) * C139442 * C124865) *
               C139552 +
           ((C63886 * C2784 -
             ((C63381 * C183 + C139286 * C189) * C139560 +
              (C63381 * C108 + C139286 * C114) * C2783) +
             C64000 * C139377) *
                C139442 * C124863 +
            (C80511 - (C80512 + C80513) + C80514) * C139442 * C124864 +
            (C128190 - (C128191 + C128192) + C128193) * C139442 * C124865) *
               C139305) *
              C9466 +
          (((C80505 - (C80504 + C80503) + C80506) * C139442 * C124863 +
            (C91686 - (C91687 + C91688) + C91689) * C139442 * C124864 +
            (C83103 * C2784 - (C88929 * C139560 + C88852 * C2783) +
             C83223 * C139377) *
                C139442 * C124865) *
               C139552 +
           ((C80513 + C80512 - C80511 - C80514) * C139442 * C124863 +
            (C128192 + C128191 - C128190 - C128193) * C139442 * C124864 +
            (C126018 * C2783 + C126105 * C139560 -
             (C63381 * C26830 + C139286 * C26834) * C2784 -
             (C63381 * C26904 + C139286 * C26906) * C139377) *
                C139442 * C124865) *
               C139305) *
              C139403)) /
        (p * q * std::sqrt(p + q));
    d2eexz[130] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139286 * C113) * C9616 +
             (C63381 * C245 + C139286 * C251) * C9466 - C77533 * C9617 -
             C77790 * C139403) *
                C139442 * C124863 +
            (C77533 * C9616 + C77790 * C9466 - C77539 * C9617 -
             C77791 * C139403) *
                C139442 * C124864 +
            (C77539 * C9616 + C77791 * C9466 - C88852 * C9617 -
             C89001 * C139403) *
                C139442 * C124865) *
               C139560 +
           ((C72710 - (C72709 + C72708) + C72711) * C139442 * C124863 +
            (C88184 - (C88183 + C88182) + C88185) * C139442 * C124864 +
            (C83103 * C9617 - (C69033 * C9466 + C68853 * C9616) +
             C83329 * C139403) *
                C139442 * C124865) *
               C139377) *
              C139552 +
          (((C77535 * C9617 -
             ((C63381 * C246 + C139286 * C252) * C9466 +
              (C63381 * C108 + C139286 * C114) * C9616) +
             C77792 * C139403) *
                C139442 * C124863 +
            (C77537 * C9617 - (C77792 * C9466 + C77535 * C9616) +
             C77793 * C139403) *
                C139442 * C124864 +
            (C126018 * C9617 - (C77793 * C9466 + C77537 * C9616) +
             C126183 * C139403) *
                C139442 * C124865) *
               C139560 +
           ((C73937 + C73936 - C73935 - C73938) * C139442 * C124863 +
            (C89822 + C89821 - C89820 - C89823) * C139442 * C124864 +
            (C77541 * C9616 + C77794 * C9466 -
             (C63381 * C26830 + C139286 * C26834) * C9617 -
             (C63381 * C26974 + C139286 * C26976) * C139403) *
                C139442 * C124865) *
               C139377) *
              C139305)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[130] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139442 * C308) * C137108 +
             (C307 * C116 + C139442 * C314) * C139552 - C337 * C137101 -
             C338 * C139305) *
                C124863 +
            (C39974 + C39975 - C39976 - C39977) * C124864 +
            (C45576 + C45575 - C45574 - C45577) * C124865) *
               C139286 * C9466 +
           ((C39976 - (C39975 + C39974) + C39977) * C124863 +
            (C45574 - (C45575 + C45576) + C45577) * C124864 +
            (C32487 * C137101 - (C43655 * C139552 + C43654 * C137108) +
             C32488 * C139305) *
                C124865) *
               C139286 * C139403) *
              C139560 +
          (((C1150 * C137101 -
             ((C307 * C841 + C139442 * C1125) * C139552 +
              (C307 * C831 + C139442 * C1118) * C137108) +
             C1151 * C139305) *
                C124863 +
            (C39982 - (C39983 + C39984) + C39985) * C124864 +
            (C131762 - (C131763 + C131764) + C131765) * C124865) *
               C139286 * C9466 +
           ((C39984 + C39983 - C39982 - C39985) * C124863 +
            (C131764 + C131763 - C131762 - C131765) * C124864 +
            (C130313 * C137108 + C130314 * C139552 -
             (C307 * C26830 + C139442 * C27044) * C137101 -
             (C307 * C26832 + C139442 * C27046) * C139305) *
                C124865) *
               C139286 * C139403) *
              C139377)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[130] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139442 * C308) * C2783 +
             (C307 * C182 + C139442 * C394) * C139560 -
             (C307 * C831 + C139442 * C1118) * C2784 -
             (C307 * C939 + C139442 * C1231) * C139377) *
                C124863 +
            (C35594 + C35595 - C35596 - C35610) * C124864 +
            (C46570 + C46569 - C46568 - C46571) * C124865) *
               C139286 * C139552 +
           ((C3023 - (C3022 + C3021) + C3024) * C124863 + C35612 * C124864 +
            (C35601 - (C35602 + C35603) + C35613) * C124865) *
               C139286 * C139305) *
              C9466 +
          (((C35596 - (C35595 + C35594) + C35610) * C124863 +
            (C46568 - (C46569 + C46570) + C46571) * C124864 +
            (C130313 * C2784 - (C43729 * C139560 + C43654 * C2783) +
             C130398 * C139377) *
                C124865) *
               C139286 * C139552 +
           (C35611 * C124863 + (C35603 + C35602 - C35601 - C35613) * C124864 +
            (C32487 * C2783 + C32606 * C139560 -
             (C307 * C26830 + C139442 * C27044) * C2784 -
             (C307 * C26904 + C139442 * C27114) * C139377) *
                C124865) *
               C139286 * C139305) *
              C139403)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[130] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    (((((C307 * C107 + C139442 * C308) * C9616 +
                        (C307 * C245 + C139442 * C474) * C9466 -
                        C32483 * C9617 - C32719 * C139403) *
                           C124863 +
                       (C32483 * C9616 + C32719 * C9466 - C32486 * C9617 -
                        C32720 * C139403) *
                           C124864 +
                       (C32486 * C9616 + C32720 * C9466 - C43654 * C9617 -
                        C43801 * C139403) *
                           C124865) *
                          C139286 * C139560 +
                      ((C35459 * C9617 -
                        ((C307 * C1029 + C139442 * C1339) * C9466 +
                         (C307 * C831 + C139442 * C1118) * C9616) +
                        C35751 * C139403) *
                           C124863 +
                       (C38054 * C9617 - (C35751 * C9466 + C35459 * C9616) +
                        C38271 * C139403) *
                           C124864 +
                       (C130313 * C9617 - (C38271 * C9466 + C38054 * C9616) +
                        C130477 * C139403) *
                           C124865) *
                          C139286 * C139377) *
                         C139552 +
                     (((C9843 - (C9842 + C9841) + C9844) * C124863 +
                       (C42152 - (C42151 + C42150) + C42153) * C124864 +
                       (C32487 * C9617 - (C2295 * C9466 + C2090 * C9616) +
                        C32721 * C139403) *
                           C124865) *
                          C139286 * C139560 +
                      ((C11856 + C11855 - C11854 - C11857) * C124863 +
                       (C44790 + C44789 - C44788 - C44791) * C124864 +
                       (C35460 * C9616 + C35752 * C9466 -
                        (C307 * C26830 + C139442 * C27044) * C9617 -
                        (C307 * C26974 + C139442 * C27183) * C139403) *
                           C124865) *
                          C139286 * C139377) *
                         C139305)) /
                   (p * q * std::sqrt(p + q));
    d2eezx[130] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    ((((C125166 * C107 + C124863 * C555 + C125167 * C1767 +
                        C124864 * C2376 + C125168 * C1768 + C124865 * C2379) *
                           C137108 +
                       (C125166 * C116 + C124863 * C561 + C125167 * C1777 +
                        C124864 * C2383 + C125168 * C1783 + C124865 * C2387) *
                           C139552 -
                       (C125168 * C1769 + C124865 * C2380 + C125167 * C1764 +
                        C124864 * C2375 + C125166 * C108 + C124863 * C556) *
                           C137101 -
                       (C125168 * C1784 + C124865 * C2388 + C125167 * C1776 +
                        C124864 * C2384 + C125166 * C117 + C124863 * C562) *
                           C139305) *
                          C139286 * C139442 * C9466 +
                      ((C125166 * C1764 + C124863 * C2375 + C125167 * C1769 +
                        C124864 * C2380 + C125168 * C10814 + C124865 * C11154) *
                           C137101 -
                       ((C125168 * C10818 + C124865 * C11158 + C125167 * C1783 +
                         C124864 * C2387 + C125166 * C1777 + C124863 * C2383) *
                            C139552 +
                        (C125168 * C10815 + C124865 * C11155 + C125167 * C1768 +
                         C124864 * C2379 + C125166 * C1767 + C124863 * C2376) *
                            C137108) +
                       (C125166 * C1776 + C124863 * C2384 + C125167 * C1784 +
                        C124864 * C2388 + C125168 * C10817 + C124865 * C11157) *
                           C139305) *
                          C139286 * C139442 * C139403) *
                         C139560 +
                     (((C125166 * C828 + C124863 * C1439 + C125167 * C4224 +
                        C124864 * C4900 + C125168 * C6441 + C124865 * C6921) *
                           C137101 -
                       ((C125168 * C6445 + C124865 * C6925 + C125167 * C4230 +
                         C124864 * C4903 + C125166 * C841 + C124863 * C1447) *
                            C139552 +
                        (C125168 * C6442 + C124865 * C6922 + C125167 * C4223 +
                         C124864 * C4899 + C125166 * C831 + C124863 * C1440) *
                            C137108) +
                       (C125166 * C840 + C124863 * C1448 + C125167 * C4231 +
                        C124864 * C4904 + C125168 * C6444 + C124865 * C6924) *
                           C139305) *
                          C139286 * C139442 * C9466 +
                      ((C125166 * C4223 + C124863 * C4899 + C125167 * C6442 +
                        C124864 * C6922 + C125168 * C26831 + C124865 * C27251) *
                           C137108 +
                       (C125166 * C4230 + C124863 * C4903 + C125167 * C6445 +
                        C124864 * C6925 + C125168 * C26833 + C124865 * C27253) *
                           C139552 -
                       (C125168 * C26830 + C124865 * C27250 + C125167 * C6441 +
                        C124864 * C6921 + C125166 * C4224 + C124863 * C4900) *
                           C137101 -
                       (C125168 * C26832 + C124865 * C27252 + C125167 * C6444 +
                        C124864 * C6924 + C125166 * C4231 + C124863 * C4904) *
                           C139305) *
                          C139286 * C139442 * C139403) *
                         C139377)) /
                   (p * q * std::sqrt(p + q));
    d2eezy[130] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    ((((C125166 * C107 + C124863 * C555 + C125167 * C1767 +
                        C124864 * C2376 + C125168 * C1768 + C124865 * C2379) *
                           C2783 +
                       (C125166 * C182 + C124863 * C641 + C125167 * C1873 +
                        C124864 * C2492 + C125168 * C1874 + C124865 * C2493) *
                           C139560 -
                       (C125168 * C6442 + C124865 * C6922 + C125167 * C4223 +
                        C124864 * C4899 + C125166 * C831 + C124863 * C1440) *
                           C2784 -
                       (C125168 * C6528 + C124865 * C7000 + C125167 * C4337 +
                        C124864 * C5017 + C125166 * C939 + C124863 * C1553) *
                           C139377) *
                          C139286 * C139442 * C139552 +
                      ((C125166 * C828 + C124863 * C1439 + C125167 * C4224 +
                        C124864 * C4900 + C125168 * C6441 + C124865 * C6921) *
                           C2784 -
                       ((C125168 * C1875 + C124865 * C2494 + C125167 * C1870 +
                         C124864 * C2489 + C125166 * C183 + C124863 * C642) *
                            C139560 +
                        (C125168 * C1769 + C124865 * C2380 + C125167 * C1764 +
                         C124864 * C2375 + C125166 * C108 + C124863 * C556) *
                            C2783) +
                       (C125166 * C938 + C124863 * C1555 + C125167 * C4338 +
                        C124864 * C5018 + C125168 * C6527 + C124865 * C7001) *
                           C139377) *
                          C139286 * C139442 * C139305) *
                         C9466 +
                     (((C125166 * C4223 + C124863 * C4899 + C125167 * C6442 +
                        C124864 * C6922 + C125168 * C26831 + C124865 * C27251) *
                           C2784 -
                       ((C125168 * C10877 + C124865 * C11211 + C125167 * C1874 +
                         C124864 * C2493 + C125166 * C1873 + C124863 * C2492) *
                            C139560 +
                        (C125168 * C10815 + C124865 * C11155 + C125167 * C1768 +
                         C124864 * C2379 + C125166 * C1767 + C124863 * C2376) *
                            C2783) +
                       (C125166 * C4337 + C124863 * C5017 + C125167 * C6528 +
                        C124864 * C7000 + C125168 * C26905 + C124865 * C27321) *
                           C139377) *
                          C139286 * C139442 * C139552 +
                      ((C125166 * C1764 + C124863 * C2375 + C125167 * C1769 +
                        C124864 * C2380 + C125168 * C10814 + C124865 * C11154) *
                           C2783 +
                       (C125166 * C1870 + C124863 * C2489 + C125167 * C1875 +
                        C124864 * C2494 + C125168 * C10876 + C124865 * C11210) *
                           C139560 -
                       (C125168 * C26830 + C124865 * C27250 + C125167 * C6441 +
                        C124864 * C6921 + C125166 * C4224 + C124863 * C4900) *
                           C2784 -
                       (C125168 * C26904 + C124865 * C27320 + C125167 * C6527 +
                        C124864 * C7001 + C125166 * C4338 + C124863 * C5018) *
                           C139377) *
                          C139286 * C139442 * C139305) *
                         C139403)) /
                   (p * q * std::sqrt(p + q));
    d2eezz[130] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    ((((C125166 * C107 + C124863 * C555 + C125167 * C1767 +
                        C124864 * C2376 + C125168 * C1768 + C124865 * C2379) *
                           C9616 +
                       (C125166 * C245 + C124863 * C719 + C125167 * C1965 +
                        C124864 * C2591 + C125168 * C1966 + C124865 * C2592) *
                           C9466 -
                       (C125168 * C10815 + C124865 * C11155 + C125167 * C1768 +
                        C124864 * C2379 + C125166 * C1767 + C124863 * C2376) *
                           C9617 -
                       (C125168 * C10937 + C124865 * C11262 + C125167 * C1966 +
                        C124864 * C2592 + C125166 * C1965 + C124863 * C2591) *
                           C139403) *
                          C139286 * C139442 * C139560 +
                      ((C125166 * C4223 + C124863 * C4899 + C125167 * C6442 +
                        C124864 * C6922 + C125168 * C26831 + C124865 * C27251) *
                           C9617 -
                       ((C125168 * C6608 + C124865 * C7077 + C125167 * C4443 +
                         C124864 * C5133 + C125166 * C1029 + C124863 * C1661) *
                            C9466 +
                        (C125168 * C6442 + C124865 * C6922 + C125167 * C4223 +
                         C124864 * C4899 + C125166 * C831 + C124863 * C1440) *
                            C9616) +
                       (C125166 * C4443 + C124863 * C5133 + C125167 * C6608 +
                        C124864 * C7077 + C125168 * C26975 + C124865 * C27388) *
                           C139403) *
                          C139286 * C139442 * C139377) *
                         C139552 +
                     (((C125166 * C1764 + C124863 * C2375 + C125167 * C1769 +
                        C124864 * C2380 + C125168 * C10814 + C124865 * C11154) *
                           C9617 -
                       ((C125168 * C1967 + C124865 * C2594 + C125167 * C1964 +
                         C124864 * C2593 + C125166 * C246 + C124863 * C720) *
                            C9466 +
                        (C125168 * C1769 + C124865 * C2380 + C125167 * C1764 +
                         C124864 * C2375 + C125166 * C108 + C124863 * C556) *
                            C9616) +
                       (C125166 * C1964 + C124863 * C2593 + C125167 * C1967 +
                        C124864 * C2594 + C125168 * C10936 + C124865 * C11263) *
                           C139403) *
                          C139286 * C139442 * C139560 +
                      ((C125166 * C828 + C124863 * C1439 + C125167 * C4224 +
                        C124864 * C4900 + C125168 * C6441 + C124865 * C6921) *
                           C9616 +
                       (C125166 * C1028 + C124863 * C1660 + C125167 * C4444 +
                        C124864 * C5134 + C125168 * C6607 + C124865 * C7078) *
                           C9466 -
                       (C125168 * C26830 + C124865 * C27250 + C125167 * C6441 +
                        C124864 * C6921 + C125166 * C4224 + C124863 * C4900) *
                           C9617 -
                       (C125168 * C26974 + C124865 * C27389 + C125167 * C6607 +
                        C124864 * C7078 + C125166 * C4444 + C124863 * C5134) *
                           C139403) *
                          C139286 * C139442 * C139377) *
                         C139305)) /
                   (p * q * std::sqrt(p + q));
    d2eexx[131] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139286 * C113) * C5913 +
             (C63381 * C116 + C139286 * C125) * C139300) *
                C139442 * C124863 +
            (C83091 + C83092) * C139442 * C124864 + C130076 * C124865) *
               C139593 -
           (C134363 * C124865 + (C83095 + C83096) * C139442 * C124864 +
            (C83092 + C83091) * C139442 * C124863) *
               C139594 +
           (C130076 * C124863 + (C88854 + C88855) * C139442 * C124864 +
            (C134366 + C134367) * C139442 * C124865) *
               C12239) *
              C139560 +
          ((C83093 * C139442 * C124863 + C83098 * C139442 * C124864 +
            (C83105 + C83106) * C139442 * C124865) *
               C139594 -
           (C130075 * C124865 + C83097 * C139442 * C124864 +
            (C68305 + C68304) * C139442 * C124863) *
               C139593 -
           (((C63381 * C88844 + C139286 * C88846) * C139300 +
             (C63381 * C88843 + C139286 * C88845) * C5913) *
                C139442 * C124865 +
            (C83106 + C83105) * C139442 * C124864 + C130075 * C124863) *
               C12239) *
              C139377)) /
        (p * q * std::sqrt(p + q));
    d2eexy[131] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139286 * C113) * C2783 +
            (C63381 * C182 + C139286 * C188) * C139560 - C63884 * C2784 -
            C63997 * C139377) *
               C139442 * C124863 +
           (C80503 + C80504 - C80505 - C80506) * C139442 * C124864 +
           C136526 * C124865) *
              C139300 * C139593 +
          ((C80505 - (C80504 + C80503) + C80506) * C139442 * C124863 +
           (C91686 - (C91687 + C91688) + C91689) * C139442 * C124864 +
           (C136520 - (C136521 + C136522) + C136523) * C139442 * C124865) *
              C139300 * C139594 +
          (C136526 * C124863 +
           (C136522 + C136521 - C136520 - C136523) * C139442 * C124864 +
           (C134364 * C2783 + C134425 * C139560 -
            (C63381 * C88843 + C139286 * C88845) * C2784 -
            (C63381 * C88921 + C139286 * C88922) * C139377) *
               C139442 * C124865) *
              C139300 * C12239)) /
        (p * q * std::sqrt(p + q));
    d2eexz[131] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139286 * C113) * C12388 +
            (C63381 * C245 + C139286 * C251) * C139593 - C77533 * C12389 -
            C77790 * C139594 + C77539 * C12390 + C77791 * C12239) *
               C139442 * C124863 +
           (C77533 * C12388 + C77790 * C139593 - C77539 * C12389 -
            C77791 * C139594 + C88852 * C12390 + C89001 * C12239) *
               C139442 * C124864 +
           (C77539 * C12388 + C77791 * C139593 - C88852 * C12389 -
            C89001 * C139594 + C134364 * C12390 + C134481 * C12239) *
               C139442 * C124865) *
              C139560 +
          ((C75421 - (C75420 + C75419) + C75422 - C75423 - C75424) * C139442 *
               C124863 +
           (C91794 - (C91793 + C91792) + C91795 - C91796 - C91797) * C139442 *
               C124864 +
           (C83103 * C12389 - (C69033 * C139593 + C68853 * C12388) +
            C83329 * C139594 - (C63381 * C88843 + C139286 * C88845) * C12390 -
            (C63381 * C88996 + C139286 * C88997) * C12239) *
               C139442 * C124865) *
              C139377) *
         C139300) /
        (p * q * std::sqrt(p + q));
    d2eeyx[131] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139442 * C308) * C5913 +
             (C307 * C116 + C139442 * C314) * C139300) *
                C124863 +
            (C38036 + C38037) * C124864 + C130307 * C124865) *
               C139286 * C139593 -
           (C134534 * C124865 + (C38042 + C38043) * C124864 +
            (C38037 + C38036) * C124863) *
               C139286 * C139594 +
           (C130307 * C124863 + (C43656 + C43657) * C124864 +
            (C134541 + C134542) * C124865) *
               C139286 * C12239) *
              C139560 +
          (((C38044 + C38045) * C124863 + (C38056 + C38057) * C124864 +
            (C130315 + C130316) * C124865) *
               C139286 * C139594 -
           (C130312 * C124865 + (C38045 + C38044) * C124864 +
            ((C307 * C841 + C139442 * C1125) * C139300 +
             (C307 * C831 + C139442 * C1118) * C5913) *
                C124863) *
               C139286 * C139593 -
           (((C307 * C88844 + C139442 * C89068) * C139300 +
             (C307 * C88843 + C139442 * C89067) * C5913) *
                C124865 +
            (C130316 + C130315) * C124864 + C130312 * C124863) *
               C139286 * C12239) *
              C139377)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[131] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139442 * C308) * C2783 +
            (C307 * C182 + C139442 * C394) * C139560 -
            (C307 * C831 + C139442 * C1118) * C2784 -
            (C307 * C939 + C139442 * C1231) * C139377) *
               C124863 +
           (C35594 + C35595 - C35596 - C35610) * C124864 + C136755 * C124865) *
              C139286 * C139300 * C139593 +
          ((C35596 - (C35595 + C35594) + C35610) * C124863 +
           (C46568 - (C46569 + C46570) + C46571) * C124864 +
           (C136750 - (C136751 + C136752) + C136753) * C124865) *
              C139286 * C139300 * C139594 +
          (C136755 * C124863 +
           (C136752 + C136751 - C136750 - C136753) * C124864 +
           (C134539 * C2783 + C134598 * C139560 -
            (C307 * C88843 + C139442 * C89067) * C2784 -
            (C307 * C88921 + C139442 * C89147) * C139377) *
               C124865) *
              C139286 * C139300 * C12239)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[131] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139442 * C308) * C12388 +
            (C307 * C245 + C139442 * C474) * C139593 - C32483 * C12389 -
            C32719 * C139594 + C32486 * C12390 + C32720 * C12239) *
               C124863 +
           (C32483 * C12388 + C32719 * C139593 - C32486 * C12389 -
            C32720 * C139594 + C43654 * C12390 + C43801 * C12239) *
               C124864 +
           (C32486 * C12388 + C32720 * C139593 - C43654 * C12389 -
            C43801 * C139594 + C134539 * C12390 + C134653 * C12239) *
               C124865) *
              C139286 * C139560 +
          ((C35459 * C12389 -
            ((C307 * C1029 + C139442 * C1339) * C139593 +
             (C307 * C831 + C139442 * C1118) * C12388) +
            C35751 * C139594 - C38054 * C12390 - C38271 * C12239) *
               C124863 +
           (C38054 * C12389 - (C35751 * C139593 + C35459 * C12388) +
            C38271 * C139594 - C130313 * C12390 - C130477 * C12239) *
               C124864 +
           (C130313 * C12389 - (C38271 * C139593 + C38054 * C12388) +
            C130477 * C139594 - (C307 * C88843 + C139442 * C89067) * C12390 -
            (C307 * C88996 + C139442 * C89220) * C12239) *
               C124865) *
              C139286 * C139377) *
         C139300) /
        (p * q * std::sqrt(p + q));
    d2eezx[131] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C125166 * C107 + C124863 * C555 + C125167 * C1767 +
             C124864 * C2376 + C125168 * C1768 + C124865 * C2379) *
                C5913 +
            (C125166 * C116 + C124863 * C561 + C125167 * C1777 +
             C124864 * C2383 + C125168 * C1783 + C124865 * C2387) *
                C139300) *
               C139286 * C139442 * C139593 -
           ((C125168 * C10818 + C124865 * C11158 + C125167 * C1783 +
             C124864 * C2387 + C125166 * C1777 + C124863 * C2383) *
                C139300 +
            (C125168 * C10815 + C124865 * C11155 + C125167 * C1768 +
             C124864 * C2379 + C125166 * C1767 + C124863 * C2376) *
                C5913) *
               C139286 * C139442 * C139594 +
           ((C125166 * C1768 + C124863 * C2379 + C125167 * C10815 +
             C124864 * C11155 + C125168 * C43406 + C124865 * C43868) *
                C5913 +
            (C125166 * C1783 + C124863 * C2387 + C125167 * C10818 +
             C124864 * C11158 + C125168 * C43408 + C124865 * C43870) *
                C139300) *
               C139286 * C139442 * C12239) *
              C139560 +
          (((C125166 * C4223 + C124863 * C4899 + C125167 * C6442 +
             C124864 * C6922 + C125168 * C26831 + C124865 * C27251) *
                C5913 +
            (C125166 * C4230 + C124863 * C4903 + C125167 * C6445 +
             C124864 * C6925 + C125168 * C26833 + C124865 * C27253) *
                C139300) *
               C139286 * C139442 * C139594 -
           ((C125168 * C6445 + C124865 * C6925 + C125167 * C4230 +
             C124864 * C4903 + C125166 * C841 + C124863 * C1447) *
                C139300 +
            (C125168 * C6442 + C124865 * C6922 + C125167 * C4223 +
             C124864 * C4899 + C125166 * C831 + C124863 * C1440) *
                C5913) *
               C139286 * C139442 * C139593 -
           ((C125168 * C88844 + C124865 * C89294 + C125167 * C26833 +
             C124864 * C27253 + C125166 * C6445 + C124863 * C6925) *
                C139300 +
            (C125168 * C88843 + C124865 * C89293 + C125167 * C26831 +
             C124864 * C27251 + C125166 * C6442 + C124863 * C6922) *
                C5913) *
               C139286 * C139442 * C12239) *
              C139377)) /
        (p * q * std::sqrt(p + q));
    d2eezy[131] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    (((C125166 * C107 + C124863 * C555 + C125167 * C1767 +
                       C124864 * C2376 + C125168 * C1768 + C124865 * C2379) *
                          C2783 +
                      (C125166 * C182 + C124863 * C641 + C125167 * C1873 +
                       C124864 * C2492 + C125168 * C1874 + C124865 * C2493) *
                          C139560 -
                      (C125168 * C6442 + C124865 * C6922 + C125167 * C4223 +
                       C124864 * C4899 + C125166 * C831 + C124863 * C1440) *
                          C2784 -
                      (C125168 * C6528 + C124865 * C7000 + C125167 * C4337 +
                       C124864 * C5017 + C125166 * C939 + C124863 * C1553) *
                          C139377) *
                         C139286 * C139442 * C139300 * C139593 +
                     ((C125166 * C4223 + C124863 * C4899 + C125167 * C6442 +
                       C124864 * C6922 + C125168 * C26831 + C124865 * C27251) *
                          C2784 -
                      ((C125168 * C10877 + C124865 * C11211 + C125167 * C1874 +
                        C124864 * C2493 + C125166 * C1873 + C124863 * C2492) *
                           C139560 +
                       (C125168 * C10815 + C124865 * C11155 + C125167 * C1768 +
                        C124864 * C2379 + C125166 * C1767 + C124863 * C2376) *
                           C2783) +
                      (C125166 * C4337 + C124863 * C5017 + C125167 * C6528 +
                       C124864 * C7000 + C125168 * C26905 + C124865 * C27321) *
                          C139377) *
                         C139286 * C139442 * C139300 * C139594 +
                     ((C125166 * C1768 + C124863 * C2379 + C125167 * C10815 +
                       C124864 * C11155 + C125168 * C43406 + C124865 * C43868) *
                          C2783 +
                      (C125166 * C1874 + C124863 * C2493 + C125167 * C10877 +
                       C124864 * C11211 + C125168 * C43492 + C124865 * C43938) *
                          C139560 -
                      (C125168 * C88843 + C124865 * C89293 + C125167 * C26831 +
                       C124864 * C27251 + C125166 * C6442 + C124863 * C6922) *
                          C2784 -
                      (C125168 * C88921 + C124865 * C89361 + C125167 * C26905 +
                       C124864 * C27321 + C125166 * C6528 + C124863 * C7000) *
                          C139377) *
                         C139286 * C139442 * C139300 * C12239)) /
                   (p * q * std::sqrt(p + q));
    d2eezz[131] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    (((C125166 * C107 + C124863 * C555 + C125167 * C1767 +
                       C124864 * C2376 + C125168 * C1768 + C124865 * C2379) *
                          C12388 +
                      (C125166 * C245 + C124863 * C719 + C125167 * C1965 +
                       C124864 * C2591 + C125168 * C1966 + C124865 * C2592) *
                          C139593 -
                      (C125168 * C10815 + C124865 * C11155 + C125167 * C1768 +
                       C124864 * C2379 + C125166 * C1767 + C124863 * C2376) *
                          C12389 -
                      (C125168 * C10937 + C124865 * C11262 + C125167 * C1966 +
                       C124864 * C2592 + C125166 * C1965 + C124863 * C2591) *
                          C139594 +
                      (C125166 * C1768 + C124863 * C2379 + C125167 * C10815 +
                       C124864 * C11155 + C125168 * C43406 + C124865 * C43868) *
                          C12390 +
                      (C125166 * C1966 + C124863 * C2592 + C125167 * C10937 +
                       C124864 * C11262 + C125168 * C43568 + C124865 * C44005) *
                          C12239) *
                         C139286 * C139442 * C139560 +
                     ((C125166 * C4223 + C124863 * C4899 + C125167 * C6442 +
                       C124864 * C6922 + C125168 * C26831 + C124865 * C27251) *
                          C12389 -
                      ((C125168 * C6608 + C124865 * C7077 + C125167 * C4443 +
                        C124864 * C5133 + C125166 * C1029 + C124863 * C1661) *
                           C139593 +
                       (C125168 * C6442 + C124865 * C6922 + C125167 * C4223 +
                        C124864 * C4899 + C125166 * C831 + C124863 * C1440) *
                           C12388) +
                      (C125166 * C4443 + C124863 * C5133 + C125167 * C6608 +
                       C124864 * C7077 + C125168 * C26975 + C124865 * C27388) *
                          C139594 -
                      (C125168 * C88843 + C124865 * C89293 + C125167 * C26831 +
                       C124864 * C27251 + C125166 * C6442 + C124863 * C6922) *
                          C12390 -
                      (C125168 * C88996 + C124865 * C89428 + C125167 * C26975 +
                       C124864 * C27388 + C125166 * C6608 + C124863 * C7077) *
                          C12239) *
                         C139286 * C139442 * C139377) *
                    C139300) /
                   (p * q * std::sqrt(p + q));
    d2eexx[132] +=
        (-std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139286 * C113) * C5913 +
             (C63381 * C116 + C139286 * C125) * C139300) *
                C139442 * C124863 +
            (C83091 + C83092) * C139442 * C124864 + C130076 * C124865) *
               C9466 -
           ((C88855 + C88854) * C139442 * C124865 +
            (C83095 + C83096) * C139442 * C124864 +
            (C83092 + C83091) * C139442 * C124863) *
               C139403) *
              C823 +
          ((C83093 * C139442 * C124863 + C83098 * C139442 * C124864 +
            (C83105 + C83106) * C139442 * C124865) *
               C139403 -
           (C130075 * C124865 + C83097 * C139442 * C124864 +
            (C68305 + C68304) * C139442 * C124863) *
               C9466) *
              C824 +
          ((C68314 * C139442 * C124863 + C86139 * C139442 * C124864 +
            (C68859 + C68860) * C139442 * C124865) *
               C9466 -
           (((C63381 * C73225 + C139286 * C73227) * C139300 +
             (C63381 * C73224 + C139286 * C73226) * C5913) *
                C139442 * C124865 +
            (C68860 + C68859) * C139442 * C124864 +
            C71170 * C139442 * C124863) *
               C139403) *
              C825)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139286 * C113) * C5230 +
            (C63381 * C116 + C139286 * C125) * C5225 -
            (C63381 * C108 + C139286 * C114) * C5231 -
            (C63381 * C117 + C139286 * C126) * C5226 +
            (C63381 * C109 + C139286 * C115) * C5232 +
            (C63381 * C118 + C139286 * C127) * C5227) *
               C139442 * C124863 +
           (C87086 + C87087 - C87088 - C87089 + C87090 + C87091) * C139442 *
               C124864 +
           (C133022 + C133023 - C133024 - C133025 + C133026 + C133027) *
               C139442 * C124865) *
              C9466 +
          ((C87088 - (C87087 + C87086) + C87089 - C87090 - C87091) * C139442 *
               C124863 +
           (C133024 - (C133023 + C133022) + C133025 - C133026 - C133027) *
               C139442 * C124864 +
           (C126018 * C5231 - (C88853 * C5225 + C88852 * C5230) +
            C126019 * C5226 - (C63381 * C10813 + C139286 * C10819) * C5232 -
            (C63381 * C10816 + C139286 * C10822) * C5227) *
               C139442 * C124865) *
              C139403) *
         C139328) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139286 * C113) * C5913 +
            (C63381 * C116 + C139286 * C125) * C139300) *
               C139442 * C124863 +
           (C83091 + C83092) * C139442 * C124864 + C130076 * C124865) *
              C10809 -
          (C134363 * C124865 + (C83095 + C83096) * C139442 * C124864 +
           (C83092 + C83091) * C139442 * C124863) *
              C10810 +
          (C130076 * C124863 + (C88854 + C88855) * C139442 * C124864 +
           (C134366 + C134367) * C139442 * C124865) *
              C10811 -
          (((C63381 * C134354 + C139286 * C134356) * C139300 +
            (C63381 * C134353 + C139286 * C134355) * C5913) *
               C139442 * C124865 +
           (C134367 + C134366) * C139442 * C124864 + C134363 * C124863) *
              C10812) *
         C139328) /
            (p * q * std::sqrt(p + q));
    d2eexy[132] +=
        (-std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139286 * C113) * C934 +
            (C63381 * C182 + C139286 * C188) * C823 - C63884 * C935 -
            C63997 * C824 + C63888 * C936 + C63998 * C825) *
               C139442 * C124863 +
           (C88072 + C88073 - C88074 - C88075 + C88076 + C88077) * C139442 *
               C124864 +
           (C133774 + C133775 - C133776 - C133777 + C133778 + C133779) *
               C139442 * C124865) *
              C139300 * C9466 +
          ((C88074 - (C88073 + C88072) + C88075 - C88076 - C88077) * C139442 *
               C124863 +
           (C133776 - (C133775 + C133774) + C133777 - C133778 - C133779) *
               C139442 * C124864 +
           (C83103 * C935 - (C88929 * C823 + C88852 * C934) + C83223 * C824 -
            (C63381 * C73224 + C139286 * C73226) * C936 -
            (C63381 * C73278 + C139286 * C73279) * C825) *
               C139442 * C124865) *
              C139300 * C139403)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139286 * C113) * C181 +
             (C63381 * C182 + C139286 * C188) * C139328) *
                C139442 * C124863 +
            (C77651 + C77677) * C139442 * C124864 + C126103 * C124865) *
               C5225 -
           (C126104 * C124865 + (C77678 + C77660) * C139442 * C124864 +
            ((C63381 * C183 + C139286 * C189) * C139328 +
             (C63381 * C108 + C139286 * C114) * C181) *
                C139442 * C124863) *
               C5226 +
           (((C63381 * C109 + C139286 * C115) * C181 +
             (C63381 * C184 + C139286 * C190) * C139328) *
                C139442 * C124863 +
            (C79541 + C79547) * C139442 * C124864 +
            (C127462 + C127466) * C139442 * C124865) *
               C5227) *
              C9466 +
          (((C77660 + C77678) * C139442 * C124863 +
            (C77661 + C77679) * C139442 * C124864 +
            (C126100 + C126106) * C139442 * C124865) *
               C5226 -
           ((C88930 + C88924) * C139442 * C124865 +
            (C77681 + C77671) * C139442 * C124864 +
            (C77677 + C77651) * C139442 * C124863) *
               C5225 -
           (((C63381 * C10875 + C139286 * C10878) * C139328 +
             (C63381 * C10813 + C139286 * C10819) * C181) *
                C139442 * C124865 +
            (C127466 + C127462) * C139442 * C124864 +
            (C79547 + C79541) * C139442 * C124863) *
               C5227) *
              C139403)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139286 * C113) * C181 +
            (C63381 * C182 + C139286 * C188) * C139328) *
               C139442 * C124863 +
           (C77651 + C77677) * C139442 * C124864 + C126103 * C124865) *
              C139300 * C10809 -
          (C134424 * C124865 + (C77681 + C77671) * C139442 * C124864 +
           (C77677 + C77651) * C139442 * C124863) *
              C139300 * C10810 +
          (C126103 * C124863 + (C88924 + C88930) * C139442 * C124864 +
           (C134421 + C134426) * C139442 * C124865) *
              C139300 * C10811 -
          (((C63381 * C134417 + C139286 * C134418) * C139328 +
            (C63381 * C134353 + C139286 * C134355) * C181) *
               C139442 * C124865 +
           (C134426 + C134421) * C139442 * C124864 + C134424 * C124863) *
              C139300 * C10812)) /
            (p * q * std::sqrt(p + q));
    d2eexz[132] +=
        (-std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139286 * C113) * C9616 +
            (C63381 * C245 + C139286 * C251) * C9466 - C77533 * C9617 -
            C77790 * C139403) *
               C139442 * C124863 +
           (C77533 * C9616 + C77790 * C9466 - C77539 * C9617 -
            C77791 * C139403) *
               C139442 * C124864 +
           (C77539 * C9616 + C77791 * C9466 - C88852 * C9617 -
            C89001 * C139403) *
               C139442 * C124865) *
              C823 +
          ((C72710 - (C72709 + C72708) + C72711) * C139442 * C124863 +
           (C88184 - (C88183 + C88182) + C88185) * C139442 * C124864 +
           (C83103 * C9617 - (C69033 * C9466 + C68853 * C9616) +
            C83329 * C139403) *
               C139442 * C124865) *
              C824 +
          (C72722 * C139442 * C124863 +
           (C88188 + C88187 - C88186 - C88189) * C139442 * C124864 +
           (C68855 * C9616 + C69034 * C9466 -
            (C63381 * C73224 + C139286 * C73226) * C9617 -
            (C63381 * C73330 + C139286 * C73331) * C139403) *
               C139442 * C124865) *
              C825) *
         C139300) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139286 * C113) * C9616 +
            (C63381 * C245 + C139286 * C251) * C9466 - C77533 * C9617 -
            C77790 * C139403) *
               C139442 * C124863 +
           (C77533 * C9616 + C77790 * C9466 - C77539 * C9617 -
            C77791 * C139403) *
               C139442 * C124864 +
           (C77539 * C9616 + C77791 * C9466 - C88852 * C9617 -
            C89001 * C139403) *
               C139442 * C124865) *
              C139328 * C5225 +
          ((C77535 * C9617 -
            ((C63381 * C246 + C139286 * C252) * C9466 +
             (C63381 * C108 + C139286 * C114) * C9616) +
            C77792 * C139403) *
               C139442 * C124863 +
           (C77537 * C9617 - (C77792 * C9466 + C77535 * C9616) +
            C77793 * C139403) *
               C139442 * C124864 +
           (C126018 * C9617 - (C77793 * C9466 + C77537 * C9616) +
            C126183 * C139403) *
               C139442 * C124865) *
              C139328 * C5226 +
          (((C63381 * C109 + C139286 * C115) * C9616 +
            (C63381 * C247 + C139286 * C253) * C9466 - C79439 * C9617 -
            C79648 * C139403) *
               C139442 * C124863 +
           (C79439 * C9616 + C79648 * C9466 - C127384 * C9617 -
            C127543 * C139403) *
               C139442 * C124864 +
           (C127384 * C9616 + C127543 * C9466 -
            (C63381 * C10813 + C139286 * C10819) * C9617 -
            (C63381 * C10935 + C139286 * C10938) * C139403) *
               C139442 * C124865) *
              C139328 * C5227)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C63381 * C107 + C139286 * C113) * C10931 +
           (C63381 * C245 + C139286 * C251) * C10809 - C77533 * C10932 -
           C77790 * C10810 + C77539 * C10933 + C77791 * C10811 -
           C88852 * C10934 - C89001 * C10812) *
              C139442 * C124863 +
          (C77533 * C10931 + C77790 * C10809 - C77539 * C10932 -
           C77791 * C10810 + C88852 * C10933 + C89001 * C10811 -
           C134364 * C10934 - C134481 * C10812) *
              C139442 * C124864 +
          (C77539 * C10931 + C77791 * C10809 - C88852 * C10932 -
           C89001 * C10810 + C134364 * C10933 + C134481 * C10811 -
           (C63381 * C134353 + C139286 * C134355) * C10934 -
           (C63381 * C134476 + C139286 * C134477) * C10812) *
              C139442 * C124865) *
         C139328 * C139300) /
            (p * q * std::sqrt(p + q));
    d2eeyx[132] +=
        (-std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139442 * C308) * C5913 +
             (C307 * C116 + C139442 * C314) * C139300) *
                C124863 +
            (C38036 + C38037) * C124864 + C130307 * C124865) *
               C139286 * C9466 -
           ((C43657 + C43656) * C124865 + (C38042 + C38043) * C124864 +
            (C38037 + C38036) * C124863) *
               C139286 * C139403) *
              C823 +
          (((C38044 + C38045) * C124863 + (C38056 + C38057) * C124864 +
            (C130315 + C130316) * C124865) *
               C139286 * C139403 -
           (C130312 * C124865 + (C38045 + C38044) * C124864 +
            ((C307 * C841 + C139442 * C1125) * C139300 +
             (C307 * C831 + C139442 * C1118) * C5913) *
                C124863) *
               C139286 * C9466) *
              C824 +
          ((((C307 * C832 + C139442 * C1121) * C5913 +
             (C307 * C847 + C139442 * C1129) * C139300) *
                C124863 +
            (C41046 + C41047) * C124864 + (C132564 + C132565) * C124865) *
               C139286 * C9466 -
           (((C307 * C73225 + C139442 * C73383) * C139300 +
             (C307 * C73224 + C139442 * C73382) * C5913) *
                C124865 +
            (C132565 + C132564) * C124864 + (C41047 + C41046) * C124863) *
               C139286 * C139403) *
              C825)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139442 * C308) * C5230 +
            (C307 * C116 + C139442 * C314) * C5225 - C337 * C5231 -
            C338 * C5226 + C339 * C5232 + C340 * C5227) *
               C124863 +
           (C41942 + C41943 - C41944 - C41945 + C41946 + C41947) * C124864 +
           (C133250 + C133251 - C133252 - C133253 + C133254 + C133255) *
               C124865) *
              C139286 * C9466 +
          ((C41944 - (C41943 + C41942) + C41945 - C41946 - C41947) * C124863 +
           (C133252 - (C133251 + C133250) + C133253 - C133254 - C133255) *
               C124864 +
           (C32487 * C5231 - (C43655 * C5225 + C43654 * C5230) +
            C32488 * C5226 - (C307 * C10813 + C139442 * C10991) * C5232 -
            (C307 * C10816 + C139442 * C10994) * C5227) *
               C124865) *
              C139286 * C139403) *
         C139328) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139442 * C308) * C5913 +
            (C307 * C116 + C139442 * C314) * C139300) *
               C124863 +
           (C38036 + C38037) * C124864 + C130307 * C124865) *
              C139286 * C10809 -
          (C134534 * C124865 + (C38042 + C38043) * C124864 +
           (C38037 + C38036) * C124863) *
              C139286 * C10810 +
          (C130307 * C124863 + (C43656 + C43657) * C124864 +
           (C134541 + C134542) * C124865) *
              C139286 * C10811 -
          (((C307 * C134354 + C139442 * C134532) * C139300 +
            (C307 * C134353 + C139442 * C134531) * C5913) *
               C124865 +
           (C134542 + C134541) * C124864 + C134534 * C124863) *
              C139286 * C10812) *
         C139328) /
            (p * q * std::sqrt(p + q));
    d2eeyy[132] +=
        (-std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139442 * C308) * C934 +
            (C307 * C182 + C139442 * C394) * C823 -
            (C307 * C831 + C139442 * C1118) * C935 -
            (C307 * C939 + C139442 * C1231) * C824 +
            (C307 * C832 + C139442 * C1121) * C936 +
            (C307 * C940 + C139442 * C1232) * C825) *
               C124863 +
           (C42942 + C42943 - C42944 - C42945 + C42946 + C42947) * C124864 +
           (C134002 + C134003 - C134004 - C134005 + C134006 + C134007) *
               C124865) *
              C139286 * C139300 * C9466 +
          ((C42944 - (C42943 + C42942) + C42945 - C42946 - C42947) * C124863 +
           (C134004 - (C134003 + C134002) + C134005 - C134006 - C134007) *
               C124864 +
           (C130313 * C935 - (C43729 * C823 + C43654 * C934) + C130398 * C824 -
            (C307 * C73224 + C139442 * C73382) * C936 -
            (C307 * C73278 + C139442 * C73434) * C825) *
               C124865) *
              C139286 * C139300 * C139403)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139442 * C308) * C181 +
             (C307 * C182 + C139442 * C394) * C139328) *
                C124863 +
            (C32591 + C32607) * C124864 + C126339 * C124865) *
               C139286 * C5225 -
           (C32597 * C124865 + C32595 * C124864 + (C417 + C401) * C124863) *
               C139286 * C5226 +
           (C421 * C124863 + C34499 * C124864 + (C2185 + C2195) * C124865) *
               C139286 * C5227) *
              C9466 +
          ((C32594 * C124863 + C32596 * C124864 + (C32601 + C32609) * C124865) *
               C139286 * C5226 -
           ((C43730 + C43726) * C124865 + (C32608 + C32600) * C124864 +
            (C32607 + C32591) * C124863) *
               C139286 * C5225 -
           (((C307 * C10875 + C139442 * C11047) * C139328 +
             (C307 * C10813 + C139442 * C10991) * C181) *
                C124865 +
            (C2195 + C2185) * C124864 + C3772 * C124863) *
               C139286 * C5227) *
              C139403)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139442 * C308) * C181 +
            (C307 * C182 + C139442 * C394) * C139328) *
               C124863 +
           (C32591 + C32607) * C124864 + C126339 * C124865) *
              C139286 * C139300 * C10809 -
          (C134594 * C124865 + (C32608 + C32600) * C124864 +
           (C32607 + C32591) * C124863) *
              C139286 * C139300 * C10810 +
          (C126339 * C124863 + (C43726 + C43730) * C124864 +
           (C134595 + C134599) * C124865) *
              C139286 * C139300 * C10811 -
          (((C307 * C134417 + C139442 * C134592) * C139328 +
            (C307 * C134353 + C139442 * C134531) * C181) *
               C124865 +
           (C134599 + C134595) * C124864 + C134594 * C124863) *
              C139286 * C139300 * C10812)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[132] +=
        (-std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139442 * C308) * C9616 +
            (C307 * C245 + C139442 * C474) * C9466 - C32483 * C9617 -
            C32719 * C139403) *
               C124863 +
           (C32483 * C9616 + C32719 * C9466 - C32486 * C9617 -
            C32720 * C139403) *
               C124864 +
           (C32486 * C9616 + C32720 * C9466 - C43654 * C9617 -
            C43801 * C139403) *
               C124865) *
              C139286 * C823 +
          ((C35459 * C9617 -
            ((C307 * C1029 + C139442 * C1339) * C9466 +
             (C307 * C831 + C139442 * C1118) * C9616) +
            C35751 * C139403) *
               C124863 +
           (C38054 * C9617 - (C35751 * C9466 + C35459 * C9616) +
            C38271 * C139403) *
               C124864 +
           (C130313 * C9617 - (C38271 * C9466 + C38054 * C9616) +
            C130477 * C139403) *
               C124865) *
              C139286 * C824 +
          (((C307 * C832 + C139442 * C1121) * C9616 +
            (C307 * C1030 + C139442 * C1340) * C9466 - C41044 * C9617 -
            C41255 * C139403) *
               C124863 +
           (C41044 * C9616 + C41255 * C9466 - C132562 * C9617 -
            C132725 * C139403) *
               C124864 +
           (C132562 * C9616 + C132725 * C9466 -
            (C307 * C73224 + C139442 * C73382) * C9617 -
            (C307 * C73330 + C139442 * C73485) * C139403) *
               C124865) *
              C139286 * C825) *
         C139300) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139442 * C308) * C9616 +
            (C307 * C245 + C139442 * C474) * C9466 - C32483 * C9617 -
            C32719 * C139403) *
               C124863 +
           (C32483 * C9616 + C32719 * C9466 - C32486 * C9617 -
            C32720 * C139403) *
               C124864 +
           (C32486 * C9616 + C32720 * C9466 - C43654 * C9617 -
            C43801 * C139403) *
               C124865) *
              C139286 * C139328 * C5225 +
          ((C9843 - (C9842 + C9841) + C9844) * C124863 +
           (C42152 - (C42151 + C42150) + C42153) * C124864 +
           (C32487 * C9617 - (C2295 * C9466 + C2090 * C9616) +
            C32721 * C139403) *
               C124865) *
              C139286 * C139328 * C5226 +
          (C9855 * C124863 + (C42156 + C42155 - C42154 - C42157) * C124864 +
           (C2092 * C9616 + C2297 * C9466 -
            (C307 * C10813 + C139442 * C10991) * C9617 -
            (C307 * C10935 + C139442 * C11102) * C139403) *
               C124865) *
              C139286 * C139328 * C5227)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C307 * C107 + C139442 * C308) * C10931 +
           (C307 * C245 + C139442 * C474) * C10809 - C32483 * C10932 -
           C32719 * C10810 + C32486 * C10933 + C32720 * C10811 -
           C43654 * C10934 - C43801 * C10812) *
              C124863 +
          (C32483 * C10931 + C32719 * C10809 - C32486 * C10932 -
           C32720 * C10810 + C43654 * C10933 + C43801 * C10811 -
           C134539 * C10934 - C134653 * C10812) *
              C124864 +
          (C32486 * C10931 + C32720 * C10809 - C43654 * C10932 -
           C43801 * C10810 + C134539 * C10933 + C134653 * C10811 -
           (C307 * C134353 + C139442 * C134531) * C10934 -
           (C307 * C134476 + C139442 * C134649) * C10812) *
              C124865) *
         C139286 * C139328 * C139300) /
            (p * q * std::sqrt(p + q));
    d2eezx[132] +=
        (-std::pow(Pi, 2.5) *
         ((((C125166 * C107 + C124863 * C555 + C125167 * C1767 +
             C124864 * C2376 + C125168 * C1768 + C124865 * C2379) *
                C5913 +
            (C125166 * C116 + C124863 * C561 + C125167 * C1777 +
             C124864 * C2383 + C125168 * C1783 + C124865 * C2387) *
                C139300) *
               C139286 * C139442 * C9466 -
           ((C125168 * C10818 + C124865 * C11158 + C125167 * C1783 +
             C124864 * C2387 + C125166 * C1777 + C124863 * C2383) *
                C139300 +
            (C125168 * C10815 + C124865 * C11155 + C125167 * C1768 +
             C124864 * C2379 + C125166 * C1767 + C124863 * C2376) *
                C5913) *
               C139286 * C139442 * C139403) *
              C823 +
          (((C125166 * C4223 + C124863 * C4899 + C125167 * C6442 +
             C124864 * C6922 + C125168 * C26831 + C124865 * C27251) *
                C5913 +
            (C125166 * C4230 + C124863 * C4903 + C125167 * C6445 +
             C124864 * C6925 + C125168 * C26833 + C124865 * C27253) *
                C139300) *
               C139286 * C139442 * C139403 -
           ((C125168 * C6445 + C124865 * C6925 + C125167 * C4230 +
             C124864 * C4903 + C125166 * C841 + C124863 * C1447) *
                C139300 +
            (C125168 * C6442 + C124865 * C6922 + C125167 * C4223 +
             C124864 * C4899 + C125166 * C831 + C124863 * C1440) *
                C5913) *
               C139286 * C139442 * C9466) *
              C824 +
          (((C125166 * C832 + C124863 * C1443 + C125167 * C8754 +
             C124864 * C9234 + C125168 * C21079 + C124865 * C21715) *
                C5913 +
            (C125166 * C847 + C124863 * C1451 + C125167 * C8757 +
             C124864 * C9237 + C125168 * C21081 + C124865 * C21717) *
                C139300) *
               C139286 * C139442 * C9466 -
           ((C125168 * C73225 + C124865 * C73537 + C125167 * C21081 +
             C124864 * C21717 + C125166 * C8757 + C124863 * C9237) *
                C139300 +
            (C125168 * C73224 + C124865 * C73536 + C125167 * C21079 +
             C124864 * C21715 + C125166 * C8754 + C124863 * C9234) *
                C5913) *
               C139286 * C139442 * C139403) *
              C825)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C125166 * C107 + C124863 * C555 + C125167 * C1767 +
            C124864 * C2376 + C125168 * C1768 + C124865 * C2379) *
               C5230 +
           (C125166 * C116 + C124863 * C561 + C125167 * C1777 +
            C124864 * C2383 + C125168 * C1783 + C124865 * C2387) *
               C5225 -
           (C125168 * C1769 + C124865 * C2380 + C125167 * C1764 +
            C124864 * C2375 + C125166 * C108 + C124863 * C556) *
               C5231 -
           (C125168 * C1784 + C124865 * C2388 + C125167 * C1776 +
            C124864 * C2384 + C125166 * C117 + C124863 * C562) *
               C5226 +
           (C125166 * C109 + C124863 * C557 + C125167 * C1765 +
            C124864 * C2377 + C125168 * C1770 + C124865 * C2381) *
               C5232 +
           (C125166 * C118 + C124863 * C563 + C125167 * C1775 +
            C124864 * C2385 + C125168 * C1785 + C124865 * C2389) *
               C5227) *
              C139286 * C139442 * C9466 +
          ((C125166 * C1764 + C124863 * C2375 + C125167 * C1769 +
            C124864 * C2380 + C125168 * C10814 + C124865 * C11154) *
               C5231 -
           ((C125168 * C10818 + C124865 * C11158 + C125167 * C1783 +
             C124864 * C2387 + C125166 * C1777 + C124863 * C2383) *
                C5225 +
            (C125168 * C10815 + C124865 * C11155 + C125167 * C1768 +
             C124864 * C2379 + C125166 * C1767 + C124863 * C2376) *
                C5230) +
           (C125166 * C1776 + C124863 * C2384 + C125167 * C1784 +
            C124864 * C2388 + C125168 * C10817 + C124865 * C11157) *
               C5226 -
           (C125168 * C10813 + C124865 * C11153 + C125167 * C1770 +
            C124864 * C2381 + C125166 * C1765 + C124863 * C2377) *
               C5232 -
           (C125168 * C10816 + C124865 * C11156 + C125167 * C1785 +
            C124864 * C2389 + C125166 * C1775 + C124863 * C2385) *
               C5227) *
              C139286 * C139442 * C139403) *
         C139328) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C125166 * C107 + C124863 * C555 + C125167 * C1767 +
            C124864 * C2376 + C125168 * C1768 + C124865 * C2379) *
               C5913 +
           (C125166 * C116 + C124863 * C561 + C125167 * C1777 +
            C124864 * C2383 + C125168 * C1783 + C124865 * C2387) *
               C139300) *
              C139286 * C139442 * C10809 -
          ((C125168 * C10818 + C124865 * C11158 + C125167 * C1783 +
            C124864 * C2387 + C125166 * C1777 + C124863 * C2383) *
               C139300 +
           (C125168 * C10815 + C124865 * C11155 + C125167 * C1768 +
            C124864 * C2379 + C125166 * C1767 + C124863 * C2376) *
               C5913) *
              C139286 * C139442 * C10810 +
          ((C125166 * C1768 + C124863 * C2379 + C125167 * C10815 +
            C124864 * C11155 + C125168 * C43406 + C124865 * C43868) *
               C5913 +
           (C125166 * C1783 + C124863 * C2387 + C125167 * C10818 +
            C124864 * C11158 + C125168 * C43408 + C124865 * C43870) *
               C139300) *
              C139286 * C139442 * C10811 -
          ((C125168 * C134354 + C124865 * C134704 + C125167 * C43408 +
            C124864 * C43870 + C125166 * C10818 + C124863 * C11158) *
               C139300 +
           (C125168 * C134353 + C124865 * C134703 + C125167 * C43406 +
            C124864 * C43868 + C125166 * C10815 + C124863 * C11155) *
               C5913) *
              C139286 * C139442 * C10812) *
         C139328) /
            (p * q * std::sqrt(p + q));
    d2eezy[132] +=
        (-std::pow(Pi, 2.5) *
         (((C125166 * C107 + C124863 * C555 + C125167 * C1767 +
            C124864 * C2376 + C125168 * C1768 + C124865 * C2379) *
               C934 +
           (C125166 * C182 + C124863 * C641 + C125167 * C1873 +
            C124864 * C2492 + C125168 * C1874 + C124865 * C2493) *
               C823 -
           (C125168 * C6442 + C124865 * C6922 + C125167 * C4223 +
            C124864 * C4899 + C125166 * C831 + C124863 * C1440) *
               C935 -
           (C125168 * C6528 + C124865 * C7000 + C125167 * C4337 +
            C124864 * C5017 + C125166 * C939 + C124863 * C1553) *
               C824 +
           (C125166 * C832 + C124863 * C1443 + C125167 * C8754 +
            C124864 * C9234 + C125168 * C21079 + C124865 * C21715) *
               C936 +
           (C125166 * C940 + C124863 * C1554 + C125167 * C8840 +
            C124864 * C9312 + C125168 * C21197 + C124865 * C21830) *
               C825) *
              C139286 * C139442 * C139300 * C9466 +
          ((C125166 * C4223 + C124863 * C4899 + C125167 * C6442 +
            C124864 * C6922 + C125168 * C26831 + C124865 * C27251) *
               C935 -
           ((C125168 * C10877 + C124865 * C11211 + C125167 * C1874 +
             C124864 * C2493 + C125166 * C1873 + C124863 * C2492) *
                C823 +
            (C125168 * C10815 + C124865 * C11155 + C125167 * C1768 +
             C124864 * C2379 + C125166 * C1767 + C124863 * C2376) *
                C934) +
           (C125166 * C4337 + C124863 * C5017 + C125167 * C6528 +
            C124864 * C7000 + C125168 * C26905 + C124865 * C27321) *
               C824 -
           (C125168 * C73224 + C124865 * C73536 + C125167 * C21079 +
            C124864 * C21715 + C125166 * C8754 + C124863 * C9234) *
               C936 -
           (C125168 * C73278 + C124865 * C73588 + C125167 * C21197 +
            C124864 * C21830 + C125166 * C8840 + C124863 * C9312) *
               C825) *
              C139286 * C139442 * C139300 * C139403)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C125166 * C107 + C124863 * C555 + C125167 * C1767 +
             C124864 * C2376 + C125168 * C1768 + C124865 * C2379) *
                C181 +
            (C125166 * C182 + C124863 * C641 + C125167 * C1873 +
             C124864 * C2492 + C125168 * C1874 + C124865 * C2493) *
                C139328) *
               C139286 * C139442 * C5225 -
           ((C125168 * C1875 + C124865 * C2494 + C125167 * C1870 +
             C124864 * C2489 + C125166 * C183 + C124863 * C642) *
                C139328 +
            (C125168 * C1769 + C124865 * C2380 + C125167 * C1764 +
             C124864 * C2375 + C125166 * C108 + C124863 * C556) *
                C181) *
               C139286 * C139442 * C5226 +
           ((C125166 * C109 + C124863 * C557 + C125167 * C1765 +
             C124864 * C2377 + C125168 * C1770 + C124865 * C2381) *
                C181 +
            (C125166 * C184 + C124863 * C643 + C125167 * C1871 +
             C124864 * C2490 + C125168 * C1876 + C124865 * C2495) *
                C139328) *
               C139286 * C139442 * C5227) *
              C9466 +
          (((C125166 * C1764 + C124863 * C2375 + C125167 * C1769 +
             C124864 * C2380 + C125168 * C10814 + C124865 * C11154) *
                C181 +
            (C125166 * C1870 + C124863 * C2489 + C125167 * C1875 +
             C124864 * C2494 + C125168 * C10876 + C124865 * C11210) *
                C139328) *
               C139286 * C139442 * C5226 -
           ((C125168 * C10877 + C124865 * C11211 + C125167 * C1874 +
             C124864 * C2493 + C125166 * C1873 + C124863 * C2492) *
                C139328 +
            (C125168 * C10815 + C124865 * C11155 + C125167 * C1768 +
             C124864 * C2379 + C125166 * C1767 + C124863 * C2376) *
                C181) *
               C139286 * C139442 * C5225 -
           ((C125168 * C10875 + C124865 * C11209 + C125167 * C1876 +
             C124864 * C2495 + C125166 * C1871 + C124863 * C2490) *
                C139328 +
            (C125168 * C10813 + C124865 * C11153 + C125167 * C1770 +
             C124864 * C2381 + C125166 * C1765 + C124863 * C2377) *
                C181) *
               C139286 * C139442 * C5227) *
              C139403)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C125166 * C107 + C124863 * C555 + C125167 * C1767 +
            C124864 * C2376 + C125168 * C1768 + C124865 * C2379) *
               C181 +
           (C125166 * C182 + C124863 * C641 + C125167 * C1873 +
            C124864 * C2492 + C125168 * C1874 + C124865 * C2493) *
               C139328) *
              C139286 * C139442 * C139300 * C10809 -
          ((C125168 * C10877 + C124865 * C11211 + C125167 * C1874 +
            C124864 * C2493 + C125166 * C1873 + C124863 * C2492) *
               C139328 +
           (C125168 * C10815 + C124865 * C11155 + C125167 * C1768 +
            C124864 * C2379 + C125166 * C1767 + C124863 * C2376) *
               C181) *
              C139286 * C139442 * C139300 * C10810 +
          ((C125166 * C1768 + C124863 * C2379 + C125167 * C10815 +
            C124864 * C11155 + C125168 * C43406 + C124865 * C43868) *
               C181 +
           (C125166 * C1874 + C124863 * C2493 + C125167 * C10877 +
            C124864 * C11211 + C125168 * C43492 + C124865 * C43938) *
               C139328) *
              C139286 * C139442 * C139300 * C10811 -
          ((C125168 * C134417 + C124865 * C134755 + C125167 * C43492 +
            C124864 * C43938 + C125166 * C10877 + C124863 * C11211) *
               C139328 +
           (C125168 * C134353 + C124865 * C134703 + C125167 * C43406 +
            C124864 * C43868 + C125166 * C10815 + C124863 * C11155) *
               C181) *
              C139286 * C139442 * C139300 * C10812)) /
            (p * q * std::sqrt(p + q));
    d2eezz[132] += (-std::pow(Pi, 2.5) *
                    (((C125166 * C107 + C124863 * C555 + C125167 * C1767 +
                       C124864 * C2376 + C125168 * C1768 + C124865 * C2379) *
                          C9616 +
                      (C125166 * C245 + C124863 * C719 + C125167 * C1965 +
                       C124864 * C2591 + C125168 * C1966 + C124865 * C2592) *
                          C9466 -
                      (C125168 * C10815 + C124865 * C11155 + C125167 * C1768 +
                       C124864 * C2379 + C125166 * C1767 + C124863 * C2376) *
                          C9617 -
                      (C125168 * C10937 + C124865 * C11262 + C125167 * C1966 +
                       C124864 * C2592 + C125166 * C1965 + C124863 * C2591) *
                          C139403) *
                         C139286 * C139442 * C823 +
                     ((C125166 * C4223 + C124863 * C4899 + C125167 * C6442 +
                       C124864 * C6922 + C125168 * C26831 + C124865 * C27251) *
                          C9617 -
                      ((C125168 * C6608 + C124865 * C7077 + C125167 * C4443 +
                        C124864 * C5133 + C125166 * C1029 + C124863 * C1661) *
                           C9466 +
                       (C125168 * C6442 + C124865 * C6922 + C125167 * C4223 +
                        C124864 * C4899 + C125166 * C831 + C124863 * C1440) *
                           C9616) +
                      (C125166 * C4443 + C124863 * C5133 + C125167 * C6608 +
                       C124864 * C7077 + C125168 * C26975 + C124865 * C27388) *
                          C139403) *
                         C139286 * C139442 * C824 +
                     ((C125166 * C832 + C124863 * C1443 + C125167 * C8754 +
                       C124864 * C9234 + C125168 * C21079 + C124865 * C21715) *
                          C9616 +
                      (C125166 * C1030 + C124863 * C1662 + C125167 * C8920 +
                       C124864 * C9389 + C125168 * C21305 + C124865 * C21933) *
                          C9466 -
                      (C125168 * C73224 + C124865 * C73536 + C125167 * C21079 +
                       C124864 * C21715 + C125166 * C8754 + C124863 * C9234) *
                          C9617 -
                      (C125168 * C73330 + C124865 * C73639 + C125167 * C21305 +
                       C124864 * C21933 + C125166 * C8920 + C124863 * C9389) *
                          C139403) *
                         C139286 * C139442 * C825) *
                    C139300) /
                       (p * q * std::sqrt(p + q)) -
                   (std::pow(Pi, 2.5) *
                    (((C125166 * C107 + C124863 * C555 + C125167 * C1767 +
                       C124864 * C2376 + C125168 * C1768 + C124865 * C2379) *
                          C9616 +
                      (C125166 * C245 + C124863 * C719 + C125167 * C1965 +
                       C124864 * C2591 + C125168 * C1966 + C124865 * C2592) *
                          C9466 -
                      (C125168 * C10815 + C124865 * C11155 + C125167 * C1768 +
                       C124864 * C2379 + C125166 * C1767 + C124863 * C2376) *
                          C9617 -
                      (C125168 * C10937 + C124865 * C11262 + C125167 * C1966 +
                       C124864 * C2592 + C125166 * C1965 + C124863 * C2591) *
                          C139403) *
                         C139286 * C139442 * C139328 * C5225 +
                     ((C125166 * C1764 + C124863 * C2375 + C125167 * C1769 +
                       C124864 * C2380 + C125168 * C10814 + C124865 * C11154) *
                          C9617 -
                      ((C125168 * C1967 + C124865 * C2594 + C125167 * C1964 +
                        C124864 * C2593 + C125166 * C246 + C124863 * C720) *
                           C9466 +
                       (C125168 * C1769 + C124865 * C2380 + C125167 * C1764 +
                        C124864 * C2375 + C125166 * C108 + C124863 * C556) *
                           C9616) +
                      (C125166 * C1964 + C124863 * C2593 + C125167 * C1967 +
                       C124864 * C2594 + C125168 * C10936 + C124865 * C11263) *
                          C139403) *
                         C139286 * C139442 * C139328 * C5226 +
                     ((C125166 * C109 + C124863 * C557 + C125167 * C1765 +
                       C124864 * C2377 + C125168 * C1770 + C124865 * C2381) *
                          C9616 +
                      (C125166 * C247 + C124863 * C721 + C125167 * C1963 +
                       C124864 * C2595 + C125168 * C1968 + C124865 * C2596) *
                          C9466 -
                      (C125168 * C10813 + C124865 * C11153 + C125167 * C1770 +
                       C124864 * C2381 + C125166 * C1765 + C124863 * C2377) *
                          C9617 -
                      (C125168 * C10935 + C124865 * C11264 + C125167 * C1968 +
                       C124864 * C2596 + C125166 * C1963 + C124863 * C2595) *
                          C139403) *
                         C139286 * C139442 * C139328 * C5227)) /
                       (p * q * std::sqrt(p + q)) +
                   (2 * std::pow(Pi, 2.5) *
                    ((C125166 * C107 + C124863 * C555 + C125167 * C1767 +
                      C124864 * C2376 + C125168 * C1768 + C124865 * C2379) *
                         C10931 +
                     (C125166 * C245 + C124863 * C719 + C125167 * C1965 +
                      C124864 * C2591 + C125168 * C1966 + C124865 * C2592) *
                         C10809 -
                     (C125168 * C10815 + C124865 * C11155 + C125167 * C1768 +
                      C124864 * C2379 + C125166 * C1767 + C124863 * C2376) *
                         C10932 -
                     (C125168 * C10937 + C124865 * C11262 + C125167 * C1966 +
                      C124864 * C2592 + C125166 * C1965 + C124863 * C2591) *
                         C10810 +
                     (C125166 * C1768 + C124863 * C2379 + C125167 * C10815 +
                      C124864 * C11155 + C125168 * C43406 + C124865 * C43868) *
                         C10933 +
                     (C125166 * C1966 + C124863 * C2592 + C125167 * C10937 +
                      C124864 * C11262 + C125168 * C43568 + C124865 * C44005) *
                         C10811 -
                     (C125168 * C134353 + C124865 * C134703 + C125167 * C43406 +
                      C124864 * C43868 + C125166 * C10815 + C124863 * C11155) *
                         C10934 -
                     (C125168 * C134476 + C124865 * C134806 + C125167 * C43568 +
                      C124864 * C44005 + C125166 * C10937 + C124863 * C11262) *
                         C10812) *
                    C139286 * C139442 * C139328 * C139300) /
                       (p * q * std::sqrt(p + q));
    d2eexx[133] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139286 * C113) * C137108 +
            (C63381 * C116 + C139286 * C125) * C139552 -
            (C63381 * C108 + C139286 * C114) * C137101 -
            (C63381 * C117 + C139286 * C126) * C139305) *
               C139442 * C124863 +
           (C84979 + C84980 - C84981 - C84982) * C139442 * C124864 +
           C135771 * C124865) *
              C139593 +
          ((C84981 - (C84980 + C84979) + C84982) * C139442 * C124863 +
           (C90702 - (C90703 + C90704) + C90705) * C139442 * C124864 +
           (C135765 - (C135766 + C135767) + C135768) * C139442 * C124865) *
              C139594 +
          (C135771 * C124863 +
           (C135767 + C135766 - C135765 - C135768) * C139442 * C124864 +
           (C134364 * C137108 + C134365 * C139552 -
            (C63381 * C43405 + C139286 * C43409) * C137101 -
            (C63381 * C43407 + C139286 * C43411) * C139305) *
               C139442 * C124865) *
              C12239) *
         C139328) /
        (p * q * std::sqrt(p + q));
    d2eexy[133] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139286 * C113) * C181 +
             (C63381 * C182 + C139286 * C188) * C139328) *
                C139442 * C124863 +
            (C77651 + C77677) * C139442 * C124864 + C126103 * C124865) *
               C139552 -
           (C126104 * C124865 + (C77678 + C77660) * C139442 * C124864 +
            ((C63381 * C183 + C139286 * C189) * C139328 +
             (C63381 * C108 + C139286 * C114) * C181) *
                C139442 * C124863) *
               C139305) *
              C139593 +
          (((C77660 + C77678) * C139442 * C124863 +
            (C77661 + C77679) * C139442 * C124864 +
            (C126100 + C126106) * C139442 * C124865) *
               C139305 -
           (C134424 * C124865 + (C77681 + C77671) * C139442 * C124864 +
            (C77677 + C77651) * C139442 * C124863) *
               C139552) *
              C139594 +
          ((C126103 * C124863 + (C88924 + C88930) * C139442 * C124864 +
            (C134421 + C134426) * C139442 * C124865) *
               C139552 -
           (((C63381 * C43491 + C139286 * C43493) * C139328 +
             (C63381 * C43405 + C139286 * C43409) * C181) *
                C139442 * C124865 +
            (C126106 + C126100) * C139442 * C124864 + C126104 * C124863) *
               C139305) *
              C12239)) /
        (p * q * std::sqrt(p + q));
    d2eexz[133] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139286 * C113) * C12388 +
            (C63381 * C245 + C139286 * C251) * C139593 - C77533 * C12389 -
            C77790 * C139594 + C77539 * C12390 + C77791 * C12239) *
               C139442 * C124863 +
           (C77533 * C12388 + C77790 * C139593 - C77539 * C12389 -
            C77791 * C139594 + C88852 * C12390 + C89001 * C12239) *
               C139442 * C124864 +
           (C77539 * C12388 + C77791 * C139593 - C88852 * C12389 -
            C89001 * C139594 + C134364 * C12390 + C134481 * C12239) *
               C139442 * C124865) *
              C139328 * C139552 +
          ((C77535 * C12389 -
            ((C63381 * C246 + C139286 * C252) * C139593 +
             (C63381 * C108 + C139286 * C114) * C12388) +
            C77792 * C139594 - C77537 * C12390 - C77793 * C12239) *
               C139442 * C124863 +
           (C77537 * C12389 - (C77792 * C139593 + C77535 * C12388) +
            C77793 * C139594 - C126018 * C12390 - C126183 * C12239) *
               C139442 * C124864 +
           (C126018 * C12389 - (C77793 * C139593 + C77537 * C12388) +
            C126183 * C139594 - (C63381 * C43405 + C139286 * C43409) * C12390 -
            (C63381 * C43567 + C139286 * C43569) * C12239) *
               C139442 * C124865) *
              C139328 * C139305)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[133] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139442 * C308) * C137108 +
            (C307 * C116 + C139442 * C314) * C139552 - C337 * C137101 -
            C338 * C139305) *
               C124863 +
           (C39974 + C39975 - C39976 - C39977) * C124864 + C136000 * C124865) *
              C139286 * C139593 +
          ((C39976 - (C39975 + C39974) + C39977) * C124863 +
           (C45574 - (C45575 + C45576) + C45577) * C124864 +
           (C135995 - (C135996 + C135997) + C135998) * C124865) *
              C139286 * C139594 +
          (C136000 * C124863 +
           (C135997 + C135996 - C135995 - C135998) * C124864 +
           (C134539 * C137108 + C134540 * C139552 -
            (C307 * C43405 + C139442 * C43643) * C137101 -
            (C307 * C43407 + C139442 * C43645) * C139305) *
               C124865) *
              C139286 * C12239) *
         C139328) /
        (p * q * std::sqrt(p + q));
    d2eeyy[133] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139442 * C308) * C181 +
             (C307 * C182 + C139442 * C394) * C139328) *
                C124863 +
            (C32591 + C32607) * C124864 + C126339 * C124865) *
               C139286 * C139552 -
           (C32597 * C124865 + C32595 * C124864 + (C417 + C401) * C124863) *
               C139286 * C139305) *
              C139593 +
          ((C32594 * C124863 + C32596 * C124864 + (C32601 + C32609) * C124865) *
               C139286 * C139305 -
           (C134594 * C124865 + (C32608 + C32600) * C124864 +
            (C32607 + C32591) * C124863) *
               C139286 * C139552) *
              C139594 +
          ((C126339 * C124863 + (C43726 + C43730) * C124864 +
            (C134595 + C134599) * C124865) *
               C139286 * C139552 -
           (((C307 * C43491 + C139442 * C43723) * C139328 +
             (C307 * C43405 + C139442 * C43643) * C181) *
                C124865 +
            (C32609 + C32601) * C124864 + C32597 * C124863) *
               C139286 * C139305) *
              C12239)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[133] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139442 * C308) * C12388 +
            (C307 * C245 + C139442 * C474) * C139593 - C32483 * C12389 -
            C32719 * C139594 + C32486 * C12390 + C32720 * C12239) *
               C124863 +
           (C32483 * C12388 + C32719 * C139593 - C32486 * C12389 -
            C32720 * C139594 + C43654 * C12390 + C43801 * C12239) *
               C124864 +
           (C32486 * C12388 + C32720 * C139593 - C43654 * C12389 -
            C43801 * C139594 + C134539 * C12390 + C134653 * C12239) *
               C124865) *
              C139286 * C139328 * C139552 +
          ((C12616 - (C12615 + C12614) + C12617 - C12618 - C12619) * C124863 +
           (C45780 - (C45779 + C45778) + C45781 - C45782 - C45783) * C124864 +
           (C32487 * C12389 - (C2295 * C139593 + C2090 * C12388) +
            C32721 * C139594 - (C307 * C43405 + C139442 * C43643) * C12390 -
            (C307 * C43567 + C139442 * C43797) * C12239) *
               C124865) *
              C139286 * C139328 * C139305)) /
        (p * q * std::sqrt(p + q));
    d2eezx[133] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    (((C125166 * C107 + C124863 * C555 + C125167 * C1767 +
                       C124864 * C2376 + C125168 * C1768 + C124865 * C2379) *
                          C137108 +
                      (C125166 * C116 + C124863 * C561 + C125167 * C1777 +
                       C124864 * C2383 + C125168 * C1783 + C124865 * C2387) *
                          C139552 -
                      (C125168 * C1769 + C124865 * C2380 + C125167 * C1764 +
                       C124864 * C2375 + C125166 * C108 + C124863 * C556) *
                          C137101 -
                      (C125168 * C1784 + C124865 * C2388 + C125167 * C1776 +
                       C124864 * C2384 + C125166 * C117 + C124863 * C562) *
                          C139305) *
                         C139286 * C139442 * C139593 +
                     ((C125166 * C1764 + C124863 * C2375 + C125167 * C1769 +
                       C124864 * C2380 + C125168 * C10814 + C124865 * C11154) *
                          C137101 -
                      ((C125168 * C10818 + C124865 * C11158 + C125167 * C1783 +
                        C124864 * C2387 + C125166 * C1777 + C124863 * C2383) *
                           C139552 +
                       (C125168 * C10815 + C124865 * C11155 + C125167 * C1768 +
                        C124864 * C2379 + C125166 * C1767 + C124863 * C2376) *
                           C137108) +
                      (C125166 * C1776 + C124863 * C2384 + C125167 * C1784 +
                       C124864 * C2388 + C125168 * C10817 + C124865 * C11157) *
                          C139305) *
                         C139286 * C139442 * C139594 +
                     ((C125166 * C1768 + C124863 * C2379 + C125167 * C10815 +
                       C124864 * C11155 + C125168 * C43406 + C124865 * C43868) *
                          C137108 +
                      (C125166 * C1783 + C124863 * C2387 + C125167 * C10818 +
                       C124864 * C11158 + C125168 * C43408 + C124865 * C43870) *
                          C139552 -
                      (C125168 * C43405 + C124865 * C43867 + C125167 * C10814 +
                       C124864 * C11154 + C125166 * C1769 + C124863 * C2380) *
                          C137101 -
                      (C125168 * C43407 + C124865 * C43869 + C125167 * C10817 +
                       C124864 * C11157 + C125166 * C1784 + C124863 * C2388) *
                          C139305) *
                         C139286 * C139442 * C12239) *
                    C139328) /
                   (p * q * std::sqrt(p + q));
    d2eezy[133] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C125166 * C107 + C124863 * C555 + C125167 * C1767 +
             C124864 * C2376 + C125168 * C1768 + C124865 * C2379) *
                C181 +
            (C125166 * C182 + C124863 * C641 + C125167 * C1873 +
             C124864 * C2492 + C125168 * C1874 + C124865 * C2493) *
                C139328) *
               C139286 * C139442 * C139552 -
           ((C125168 * C1875 + C124865 * C2494 + C125167 * C1870 +
             C124864 * C2489 + C125166 * C183 + C124863 * C642) *
                C139328 +
            (C125168 * C1769 + C124865 * C2380 + C125167 * C1764 +
             C124864 * C2375 + C125166 * C108 + C124863 * C556) *
                C181) *
               C139286 * C139442 * C139305) *
              C139593 +
          (((C125166 * C1764 + C124863 * C2375 + C125167 * C1769 +
             C124864 * C2380 + C125168 * C10814 + C124865 * C11154) *
                C181 +
            (C125166 * C1870 + C124863 * C2489 + C125167 * C1875 +
             C124864 * C2494 + C125168 * C10876 + C124865 * C11210) *
                C139328) *
               C139286 * C139442 * C139305 -
           ((C125168 * C10877 + C124865 * C11211 + C125167 * C1874 +
             C124864 * C2493 + C125166 * C1873 + C124863 * C2492) *
                C139328 +
            (C125168 * C10815 + C124865 * C11155 + C125167 * C1768 +
             C124864 * C2379 + C125166 * C1767 + C124863 * C2376) *
                C181) *
               C139286 * C139442 * C139552) *
              C139594 +
          (((C125166 * C1768 + C124863 * C2379 + C125167 * C10815 +
             C124864 * C11155 + C125168 * C43406 + C124865 * C43868) *
                C181 +
            (C125166 * C1874 + C124863 * C2493 + C125167 * C10877 +
             C124864 * C11211 + C125168 * C43492 + C124865 * C43938) *
                C139328) *
               C139286 * C139442 * C139552 -
           ((C125168 * C43491 + C124865 * C43937 + C125167 * C10876 +
             C124864 * C11210 + C125166 * C1875 + C124863 * C2494) *
                C139328 +
            (C125168 * C43405 + C124865 * C43867 + C125167 * C10814 +
             C124864 * C11154 + C125166 * C1769 + C124863 * C2380) *
                C181) *
               C139286 * C139442 * C139305) *
              C12239)) /
        (p * q * std::sqrt(p + q));
    d2eezz[133] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    (((C125166 * C107 + C124863 * C555 + C125167 * C1767 +
                       C124864 * C2376 + C125168 * C1768 + C124865 * C2379) *
                          C12388 +
                      (C125166 * C245 + C124863 * C719 + C125167 * C1965 +
                       C124864 * C2591 + C125168 * C1966 + C124865 * C2592) *
                          C139593 -
                      (C125168 * C10815 + C124865 * C11155 + C125167 * C1768 +
                       C124864 * C2379 + C125166 * C1767 + C124863 * C2376) *
                          C12389 -
                      (C125168 * C10937 + C124865 * C11262 + C125167 * C1966 +
                       C124864 * C2592 + C125166 * C1965 + C124863 * C2591) *
                          C139594 +
                      (C125166 * C1768 + C124863 * C2379 + C125167 * C10815 +
                       C124864 * C11155 + C125168 * C43406 + C124865 * C43868) *
                          C12390 +
                      (C125166 * C1966 + C124863 * C2592 + C125167 * C10937 +
                       C124864 * C11262 + C125168 * C43568 + C124865 * C44005) *
                          C12239) *
                         C139286 * C139442 * C139328 * C139552 +
                     ((C125166 * C1764 + C124863 * C2375 + C125167 * C1769 +
                       C124864 * C2380 + C125168 * C10814 + C124865 * C11154) *
                          C12389 -
                      ((C125168 * C1967 + C124865 * C2594 + C125167 * C1964 +
                        C124864 * C2593 + C125166 * C246 + C124863 * C720) *
                           C139593 +
                       (C125168 * C1769 + C124865 * C2380 + C125167 * C1764 +
                        C124864 * C2375 + C125166 * C108 + C124863 * C556) *
                           C12388) +
                      (C125166 * C1964 + C124863 * C2593 + C125167 * C1967 +
                       C124864 * C2594 + C125168 * C10936 + C124865 * C11263) *
                          C139594 -
                      (C125168 * C43405 + C124865 * C43867 + C125167 * C10814 +
                       C124864 * C11154 + C125166 * C1769 + C124863 * C2380) *
                          C12390 -
                      (C125168 * C43567 + C124865 * C44006 + C125167 * C10936 +
                       C124864 * C11263 + C125166 * C1967 + C124863 * C2594) *
                          C12239) *
                         C139286 * C139442 * C139328 * C139305)) /
                   (p * q * std::sqrt(p + q));
    d2eexx[134] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139286 * C113) * C5230 +
            (C63381 * C116 + C139286 * C125) * C5225 -
            (C63381 * C108 + C139286 * C114) * C5231 -
            (C63381 * C117 + C139286 * C126) * C5226 +
            (C63381 * C109 + C139286 * C115) * C5232 +
            (C63381 * C118 + C139286 * C127) * C5227) *
               C139442 * C124863 +
           (C87086 + C87087 - C87088 - C87089 + C87090 + C87091) * C139442 *
               C124864 +
           (C133022 + C133023 - C133024 - C133025 + C133026 + C133027) *
               C139442 * C124865) *
              C9466 +
          ((C87088 - (C87087 + C87086) + C87089 - C87090 - C87091) * C139442 *
               C124863 +
           (C133024 - (C133023 + C133022) + C133025 - C133026 - C133027) *
               C139442 * C124864 +
           (C126018 * C5231 - (C88853 * C5225 + C88852 * C5230) +
            C126019 * C5226 - (C63381 * C10813 + C139286 * C10819) * C5232 -
            (C63381 * C10816 + C139286 * C10822) * C5227) *
               C139442 * C124865) *
              C139403) *
         C139328) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139286 * C113) * C5913 +
             (C63381 * C116 + C139286 * C125) * C139300) *
                C139442 * C124863 +
            (C83091 + C83092) * C139442 * C124864 + C130076 * C124865) *
               C9466 -
           ((C88855 + C88854) * C139442 * C124865 +
            (C83095 + C83096) * C139442 * C124864 +
            (C83092 + C83091) * C139442 * C124863) *
               C139403) *
              C823 +
          ((C83093 * C139442 * C124863 + C83098 * C139442 * C124864 +
            (C83105 + C83106) * C139442 * C124865) *
               C139403 -
           (C130075 * C124865 + C83097 * C139442 * C124864 +
            (C68305 + C68304) * C139442 * C124863) *
               C9466) *
              C824 +
          ((C68314 * C139442 * C124863 + C86139 * C139442 * C124864 +
            (C68859 + C68860) * C139442 * C124865) *
               C9466 -
           (((C63381 * C73225 + C139286 * C73227) * C139300 +
             (C63381 * C73224 + C139286 * C73226) * C5913) *
                C139442 * C124865 +
            (C68860 + C68859) * C139442 * C124864 +
            C71170 * C139442 * C124863) *
               C139403) *
              C825)) /
            (p * q * std::sqrt(p + q));
    d2eexy[134] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139286 * C113) * C181 +
             (C63381 * C182 + C139286 * C188) * C139328) *
                C139442 * C124863 +
            (C77651 + C77677) * C139442 * C124864 + C126103 * C124865) *
               C5225 -
           (C126104 * C124865 + (C77678 + C77660) * C139442 * C124864 +
            ((C63381 * C183 + C139286 * C189) * C139328 +
             (C63381 * C108 + C139286 * C114) * C181) *
                C139442 * C124863) *
               C5226 +
           (((C63381 * C109 + C139286 * C115) * C181 +
             (C63381 * C184 + C139286 * C190) * C139328) *
                C139442 * C124863 +
            (C79541 + C79547) * C139442 * C124864 +
            (C127462 + C127466) * C139442 * C124865) *
               C5227) *
              C9466 +
          (((C77660 + C77678) * C139442 * C124863 +
            (C77661 + C77679) * C139442 * C124864 +
            (C126100 + C126106) * C139442 * C124865) *
               C5226 -
           ((C88930 + C88924) * C139442 * C124865 +
            (C77681 + C77671) * C139442 * C124864 +
            (C77677 + C77651) * C139442 * C124863) *
               C5225 -
           (((C63381 * C10875 + C139286 * C10878) * C139328 +
             (C63381 * C10813 + C139286 * C10819) * C181) *
                C139442 * C124865 +
            (C127466 + C127462) * C139442 * C124864 +
            (C79547 + C79541) * C139442 * C124863) *
               C5227) *
              C139403)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139286 * C113) * C934 +
            (C63381 * C182 + C139286 * C188) * C823 - C63884 * C935 -
            C63997 * C824 + C63888 * C936 + C63998 * C825) *
               C139442 * C124863 +
           (C88072 + C88073 - C88074 - C88075 + C88076 + C88077) * C139442 *
               C124864 +
           (C133774 + C133775 - C133776 - C133777 + C133778 + C133779) *
               C139442 * C124865) *
              C139300 * C9466 +
          ((C88074 - (C88073 + C88072) + C88075 - C88076 - C88077) * C139442 *
               C124863 +
           (C133776 - (C133775 + C133774) + C133777 - C133778 - C133779) *
               C139442 * C124864 +
           (C83103 * C935 - (C88929 * C823 + C88852 * C934) + C83223 * C824 -
            (C63381 * C73224 + C139286 * C73226) * C936 -
            (C63381 * C73278 + C139286 * C73279) * C825) *
               C139442 * C124865) *
              C139300 * C139403)) /
            (p * q * std::sqrt(p + q));
    d2eexz[134] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139286 * C113) * C9616 +
            (C63381 * C245 + C139286 * C251) * C9466 - C77533 * C9617 -
            C77790 * C139403) *
               C139442 * C124863 +
           (C77533 * C9616 + C77790 * C9466 - C77539 * C9617 -
            C77791 * C139403) *
               C139442 * C124864 +
           (C77539 * C9616 + C77791 * C9466 - C88852 * C9617 -
            C89001 * C139403) *
               C139442 * C124865) *
              C139328 * C5225 +
          ((C77535 * C9617 -
            ((C63381 * C246 + C139286 * C252) * C9466 +
             (C63381 * C108 + C139286 * C114) * C9616) +
            C77792 * C139403) *
               C139442 * C124863 +
           (C77537 * C9617 - (C77792 * C9466 + C77535 * C9616) +
            C77793 * C139403) *
               C139442 * C124864 +
           (C126018 * C9617 - (C77793 * C9466 + C77537 * C9616) +
            C126183 * C139403) *
               C139442 * C124865) *
              C139328 * C5226 +
          (((C63381 * C109 + C139286 * C115) * C9616 +
            (C63381 * C247 + C139286 * C253) * C9466 - C79439 * C9617 -
            C79648 * C139403) *
               C139442 * C124863 +
           (C79439 * C9616 + C79648 * C9466 - C127384 * C9617 -
            C127543 * C139403) *
               C139442 * C124864 +
           (C127384 * C9616 + C127543 * C9466 -
            (C63381 * C10813 + C139286 * C10819) * C9617 -
            (C63381 * C10935 + C139286 * C10938) * C139403) *
               C139442 * C124865) *
              C139328 * C5227)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139286 * C113) * C9616 +
            (C63381 * C245 + C139286 * C251) * C9466 - C77533 * C9617 -
            C77790 * C139403) *
               C139442 * C124863 +
           (C77533 * C9616 + C77790 * C9466 - C77539 * C9617 -
            C77791 * C139403) *
               C139442 * C124864 +
           (C77539 * C9616 + C77791 * C9466 - C88852 * C9617 -
            C89001 * C139403) *
               C139442 * C124865) *
              C823 +
          ((C72710 - (C72709 + C72708) + C72711) * C139442 * C124863 +
           (C88184 - (C88183 + C88182) + C88185) * C139442 * C124864 +
           (C83103 * C9617 - (C69033 * C9466 + C68853 * C9616) +
            C83329 * C139403) *
               C139442 * C124865) *
              C824 +
          (C72722 * C139442 * C124863 +
           (C88188 + C88187 - C88186 - C88189) * C139442 * C124864 +
           (C68855 * C9616 + C69034 * C9466 -
            (C63381 * C73224 + C139286 * C73226) * C9617 -
            (C63381 * C73330 + C139286 * C73331) * C139403) *
               C139442 * C124865) *
              C825) *
         C139300) /
            (p * q * std::sqrt(p + q));
    d2eeyx[134] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139442 * C308) * C5230 +
            (C307 * C116 + C139442 * C314) * C5225 - C337 * C5231 -
            C338 * C5226 + C339 * C5232 + C340 * C5227) *
               C124863 +
           (C41942 + C41943 - C41944 - C41945 + C41946 + C41947) * C124864 +
           (C133250 + C133251 - C133252 - C133253 + C133254 + C133255) *
               C124865) *
              C139286 * C9466 +
          ((C41944 - (C41943 + C41942) + C41945 - C41946 - C41947) * C124863 +
           (C133252 - (C133251 + C133250) + C133253 - C133254 - C133255) *
               C124864 +
           (C32487 * C5231 - (C43655 * C5225 + C43654 * C5230) +
            C32488 * C5226 - (C307 * C10813 + C139442 * C10991) * C5232 -
            (C307 * C10816 + C139442 * C10994) * C5227) *
               C124865) *
              C139286 * C139403) *
         C139328) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139442 * C308) * C5913 +
             (C307 * C116 + C139442 * C314) * C139300) *
                C124863 +
            (C38036 + C38037) * C124864 + C130307 * C124865) *
               C139286 * C9466 -
           ((C43657 + C43656) * C124865 + (C38042 + C38043) * C124864 +
            (C38037 + C38036) * C124863) *
               C139286 * C139403) *
              C823 +
          (((C38044 + C38045) * C124863 + (C38056 + C38057) * C124864 +
            (C130315 + C130316) * C124865) *
               C139286 * C139403 -
           (C130312 * C124865 + (C38045 + C38044) * C124864 +
            ((C307 * C841 + C139442 * C1125) * C139300 +
             (C307 * C831 + C139442 * C1118) * C5913) *
                C124863) *
               C139286 * C9466) *
              C824 +
          ((((C307 * C832 + C139442 * C1121) * C5913 +
             (C307 * C847 + C139442 * C1129) * C139300) *
                C124863 +
            (C41046 + C41047) * C124864 + (C132564 + C132565) * C124865) *
               C139286 * C9466 -
           (((C307 * C73225 + C139442 * C73383) * C139300 +
             (C307 * C73224 + C139442 * C73382) * C5913) *
                C124865 +
            (C132565 + C132564) * C124864 + (C41047 + C41046) * C124863) *
               C139286 * C139403) *
              C825)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[134] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139442 * C308) * C181 +
             (C307 * C182 + C139442 * C394) * C139328) *
                C124863 +
            (C32591 + C32607) * C124864 + C126339 * C124865) *
               C139286 * C5225 -
           (C32597 * C124865 + C32595 * C124864 + (C417 + C401) * C124863) *
               C139286 * C5226 +
           (C421 * C124863 + C34499 * C124864 + (C2185 + C2195) * C124865) *
               C139286 * C5227) *
              C9466 +
          ((C32594 * C124863 + C32596 * C124864 + (C32601 + C32609) * C124865) *
               C139286 * C5226 -
           ((C43730 + C43726) * C124865 + (C32608 + C32600) * C124864 +
            (C32607 + C32591) * C124863) *
               C139286 * C5225 -
           (((C307 * C10875 + C139442 * C11047) * C139328 +
             (C307 * C10813 + C139442 * C10991) * C181) *
                C124865 +
            (C2195 + C2185) * C124864 + C3772 * C124863) *
               C139286 * C5227) *
              C139403)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139442 * C308) * C934 +
            (C307 * C182 + C139442 * C394) * C823 -
            (C307 * C831 + C139442 * C1118) * C935 -
            (C307 * C939 + C139442 * C1231) * C824 +
            (C307 * C832 + C139442 * C1121) * C936 +
            (C307 * C940 + C139442 * C1232) * C825) *
               C124863 +
           (C42942 + C42943 - C42944 - C42945 + C42946 + C42947) * C124864 +
           (C134002 + C134003 - C134004 - C134005 + C134006 + C134007) *
               C124865) *
              C139286 * C139300 * C9466 +
          ((C42944 - (C42943 + C42942) + C42945 - C42946 - C42947) * C124863 +
           (C134004 - (C134003 + C134002) + C134005 - C134006 - C134007) *
               C124864 +
           (C130313 * C935 - (C43729 * C823 + C43654 * C934) + C130398 * C824 -
            (C307 * C73224 + C139442 * C73382) * C936 -
            (C307 * C73278 + C139442 * C73434) * C825) *
               C124865) *
              C139286 * C139300 * C139403)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[134] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139442 * C308) * C9616 +
            (C307 * C245 + C139442 * C474) * C9466 - C32483 * C9617 -
            C32719 * C139403) *
               C124863 +
           (C32483 * C9616 + C32719 * C9466 - C32486 * C9617 -
            C32720 * C139403) *
               C124864 +
           (C32486 * C9616 + C32720 * C9466 - C43654 * C9617 -
            C43801 * C139403) *
               C124865) *
              C139286 * C139328 * C5225 +
          ((C9843 - (C9842 + C9841) + C9844) * C124863 +
           (C42152 - (C42151 + C42150) + C42153) * C124864 +
           (C32487 * C9617 - (C2295 * C9466 + C2090 * C9616) +
            C32721 * C139403) *
               C124865) *
              C139286 * C139328 * C5226 +
          (C9855 * C124863 + (C42156 + C42155 - C42154 - C42157) * C124864 +
           (C2092 * C9616 + C2297 * C9466 -
            (C307 * C10813 + C139442 * C10991) * C9617 -
            (C307 * C10935 + C139442 * C11102) * C139403) *
               C124865) *
              C139286 * C139328 * C5227)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139442 * C308) * C9616 +
            (C307 * C245 + C139442 * C474) * C9466 - C32483 * C9617 -
            C32719 * C139403) *
               C124863 +
           (C32483 * C9616 + C32719 * C9466 - C32486 * C9617 -
            C32720 * C139403) *
               C124864 +
           (C32486 * C9616 + C32720 * C9466 - C43654 * C9617 -
            C43801 * C139403) *
               C124865) *
              C139286 * C823 +
          ((C35459 * C9617 -
            ((C307 * C1029 + C139442 * C1339) * C9466 +
             (C307 * C831 + C139442 * C1118) * C9616) +
            C35751 * C139403) *
               C124863 +
           (C38054 * C9617 - (C35751 * C9466 + C35459 * C9616) +
            C38271 * C139403) *
               C124864 +
           (C130313 * C9617 - (C38271 * C9466 + C38054 * C9616) +
            C130477 * C139403) *
               C124865) *
              C139286 * C824 +
          (((C307 * C832 + C139442 * C1121) * C9616 +
            (C307 * C1030 + C139442 * C1340) * C9466 - C41044 * C9617 -
            C41255 * C139403) *
               C124863 +
           (C41044 * C9616 + C41255 * C9466 - C132562 * C9617 -
            C132725 * C139403) *
               C124864 +
           (C132562 * C9616 + C132725 * C9466 -
            (C307 * C73224 + C139442 * C73382) * C9617 -
            (C307 * C73330 + C139442 * C73485) * C139403) *
               C124865) *
              C139286 * C825) *
         C139300) /
            (p * q * std::sqrt(p + q));
    d2eezx[134] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    (((C125166 * C107 + C124863 * C555 + C125167 * C1767 +
                       C124864 * C2376 + C125168 * C1768 + C124865 * C2379) *
                          C5230 +
                      (C125166 * C116 + C124863 * C561 + C125167 * C1777 +
                       C124864 * C2383 + C125168 * C1783 + C124865 * C2387) *
                          C5225 -
                      (C125168 * C1769 + C124865 * C2380 + C125167 * C1764 +
                       C124864 * C2375 + C125166 * C108 + C124863 * C556) *
                          C5231 -
                      (C125168 * C1784 + C124865 * C2388 + C125167 * C1776 +
                       C124864 * C2384 + C125166 * C117 + C124863 * C562) *
                          C5226 +
                      (C125166 * C109 + C124863 * C557 + C125167 * C1765 +
                       C124864 * C2377 + C125168 * C1770 + C124865 * C2381) *
                          C5232 +
                      (C125166 * C118 + C124863 * C563 + C125167 * C1775 +
                       C124864 * C2385 + C125168 * C1785 + C124865 * C2389) *
                          C5227) *
                         C139286 * C139442 * C9466 +
                     ((C125166 * C1764 + C124863 * C2375 + C125167 * C1769 +
                       C124864 * C2380 + C125168 * C10814 + C124865 * C11154) *
                          C5231 -
                      ((C125168 * C10818 + C124865 * C11158 + C125167 * C1783 +
                        C124864 * C2387 + C125166 * C1777 + C124863 * C2383) *
                           C5225 +
                       (C125168 * C10815 + C124865 * C11155 + C125167 * C1768 +
                        C124864 * C2379 + C125166 * C1767 + C124863 * C2376) *
                           C5230) +
                      (C125166 * C1776 + C124863 * C2384 + C125167 * C1784 +
                       C124864 * C2388 + C125168 * C10817 + C124865 * C11157) *
                          C5226 -
                      (C125168 * C10813 + C124865 * C11153 + C125167 * C1770 +
                       C124864 * C2381 + C125166 * C1765 + C124863 * C2377) *
                          C5232 -
                      (C125168 * C10816 + C124865 * C11156 + C125167 * C1785 +
                       C124864 * C2389 + C125166 * C1775 + C124863 * C2385) *
                          C5227) *
                         C139286 * C139442 * C139403) *
                    C139328) /
                       (p * q * std::sqrt(p + q)) -
                   (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    ((((C125166 * C107 + C124863 * C555 + C125167 * C1767 +
                        C124864 * C2376 + C125168 * C1768 + C124865 * C2379) *
                           C5913 +
                       (C125166 * C116 + C124863 * C561 + C125167 * C1777 +
                        C124864 * C2383 + C125168 * C1783 + C124865 * C2387) *
                           C139300) *
                          C139286 * C139442 * C9466 -
                      ((C125168 * C10818 + C124865 * C11158 + C125167 * C1783 +
                        C124864 * C2387 + C125166 * C1777 + C124863 * C2383) *
                           C139300 +
                       (C125168 * C10815 + C124865 * C11155 + C125167 * C1768 +
                        C124864 * C2379 + C125166 * C1767 + C124863 * C2376) *
                           C5913) *
                          C139286 * C139442 * C139403) *
                         C823 +
                     (((C125166 * C4223 + C124863 * C4899 + C125167 * C6442 +
                        C124864 * C6922 + C125168 * C26831 + C124865 * C27251) *
                           C5913 +
                       (C125166 * C4230 + C124863 * C4903 + C125167 * C6445 +
                        C124864 * C6925 + C125168 * C26833 + C124865 * C27253) *
                           C139300) *
                          C139286 * C139442 * C139403 -
                      ((C125168 * C6445 + C124865 * C6925 + C125167 * C4230 +
                        C124864 * C4903 + C125166 * C841 + C124863 * C1447) *
                           C139300 +
                       (C125168 * C6442 + C124865 * C6922 + C125167 * C4223 +
                        C124864 * C4899 + C125166 * C831 + C124863 * C1440) *
                           C5913) *
                          C139286 * C139442 * C9466) *
                         C824 +
                     (((C125166 * C832 + C124863 * C1443 + C125167 * C8754 +
                        C124864 * C9234 + C125168 * C21079 + C124865 * C21715) *
                           C5913 +
                       (C125166 * C847 + C124863 * C1451 + C125167 * C8757 +
                        C124864 * C9237 + C125168 * C21081 + C124865 * C21717) *
                           C139300) *
                          C139286 * C139442 * C9466 -
                      ((C125168 * C73225 + C124865 * C73537 + C125167 * C21081 +
                        C124864 * C21717 + C125166 * C8757 + C124863 * C9237) *
                           C139300 +
                       (C125168 * C73224 + C124865 * C73536 + C125167 * C21079 +
                        C124864 * C21715 + C125166 * C8754 + C124863 * C9234) *
                           C5913) *
                          C139286 * C139442 * C139403) *
                         C825)) /
                       (p * q * std::sqrt(p + q));
    d2eezy[134] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    ((((C125166 * C107 + C124863 * C555 + C125167 * C1767 +
                        C124864 * C2376 + C125168 * C1768 + C124865 * C2379) *
                           C181 +
                       (C125166 * C182 + C124863 * C641 + C125167 * C1873 +
                        C124864 * C2492 + C125168 * C1874 + C124865 * C2493) *
                           C139328) *
                          C139286 * C139442 * C5225 -
                      ((C125168 * C1875 + C124865 * C2494 + C125167 * C1870 +
                        C124864 * C2489 + C125166 * C183 + C124863 * C642) *
                           C139328 +
                       (C125168 * C1769 + C124865 * C2380 + C125167 * C1764 +
                        C124864 * C2375 + C125166 * C108 + C124863 * C556) *
                           C181) *
                          C139286 * C139442 * C5226 +
                      ((C125166 * C109 + C124863 * C557 + C125167 * C1765 +
                        C124864 * C2377 + C125168 * C1770 + C124865 * C2381) *
                           C181 +
                       (C125166 * C184 + C124863 * C643 + C125167 * C1871 +
                        C124864 * C2490 + C125168 * C1876 + C124865 * C2495) *
                           C139328) *
                          C139286 * C139442 * C5227) *
                         C9466 +
                     (((C125166 * C1764 + C124863 * C2375 + C125167 * C1769 +
                        C124864 * C2380 + C125168 * C10814 + C124865 * C11154) *
                           C181 +
                       (C125166 * C1870 + C124863 * C2489 + C125167 * C1875 +
                        C124864 * C2494 + C125168 * C10876 + C124865 * C11210) *
                           C139328) *
                          C139286 * C139442 * C5226 -
                      ((C125168 * C10877 + C124865 * C11211 + C125167 * C1874 +
                        C124864 * C2493 + C125166 * C1873 + C124863 * C2492) *
                           C139328 +
                       (C125168 * C10815 + C124865 * C11155 + C125167 * C1768 +
                        C124864 * C2379 + C125166 * C1767 + C124863 * C2376) *
                           C181) *
                          C139286 * C139442 * C5225 -
                      ((C125168 * C10875 + C124865 * C11209 + C125167 * C1876 +
                        C124864 * C2495 + C125166 * C1871 + C124863 * C2490) *
                           C139328 +
                       (C125168 * C10813 + C124865 * C11153 + C125167 * C1770 +
                        C124864 * C2381 + C125166 * C1765 + C124863 * C2377) *
                           C181) *
                          C139286 * C139442 * C5227) *
                         C139403)) /
                       (p * q * std::sqrt(p + q)) -
                   (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    (((C125166 * C107 + C124863 * C555 + C125167 * C1767 +
                       C124864 * C2376 + C125168 * C1768 + C124865 * C2379) *
                          C934 +
                      (C125166 * C182 + C124863 * C641 + C125167 * C1873 +
                       C124864 * C2492 + C125168 * C1874 + C124865 * C2493) *
                          C823 -
                      (C125168 * C6442 + C124865 * C6922 + C125167 * C4223 +
                       C124864 * C4899 + C125166 * C831 + C124863 * C1440) *
                          C935 -
                      (C125168 * C6528 + C124865 * C7000 + C125167 * C4337 +
                       C124864 * C5017 + C125166 * C939 + C124863 * C1553) *
                          C824 +
                      (C125166 * C832 + C124863 * C1443 + C125167 * C8754 +
                       C124864 * C9234 + C125168 * C21079 + C124865 * C21715) *
                          C936 +
                      (C125166 * C940 + C124863 * C1554 + C125167 * C8840 +
                       C124864 * C9312 + C125168 * C21197 + C124865 * C21830) *
                          C825) *
                         C139286 * C139442 * C139300 * C9466 +
                     ((C125166 * C4223 + C124863 * C4899 + C125167 * C6442 +
                       C124864 * C6922 + C125168 * C26831 + C124865 * C27251) *
                          C935 -
                      ((C125168 * C10877 + C124865 * C11211 + C125167 * C1874 +
                        C124864 * C2493 + C125166 * C1873 + C124863 * C2492) *
                           C823 +
                       (C125168 * C10815 + C124865 * C11155 + C125167 * C1768 +
                        C124864 * C2379 + C125166 * C1767 + C124863 * C2376) *
                           C934) +
                      (C125166 * C4337 + C124863 * C5017 + C125167 * C6528 +
                       C124864 * C7000 + C125168 * C26905 + C124865 * C27321) *
                          C824 -
                      (C125168 * C73224 + C124865 * C73536 + C125167 * C21079 +
                       C124864 * C21715 + C125166 * C8754 + C124863 * C9234) *
                          C936 -
                      (C125168 * C73278 + C124865 * C73588 + C125167 * C21197 +
                       C124864 * C21830 + C125166 * C8840 + C124863 * C9312) *
                          C825) *
                         C139286 * C139442 * C139300 * C139403)) /
                       (p * q * std::sqrt(p + q));
    d2eezz[134] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    (((C125166 * C107 + C124863 * C555 + C125167 * C1767 +
                       C124864 * C2376 + C125168 * C1768 + C124865 * C2379) *
                          C9616 +
                      (C125166 * C245 + C124863 * C719 + C125167 * C1965 +
                       C124864 * C2591 + C125168 * C1966 + C124865 * C2592) *
                          C9466 -
                      (C125168 * C10815 + C124865 * C11155 + C125167 * C1768 +
                       C124864 * C2379 + C125166 * C1767 + C124863 * C2376) *
                          C9617 -
                      (C125168 * C10937 + C124865 * C11262 + C125167 * C1966 +
                       C124864 * C2592 + C125166 * C1965 + C124863 * C2591) *
                          C139403) *
                         C139286 * C139442 * C139328 * C5225 +
                     ((C125166 * C1764 + C124863 * C2375 + C125167 * C1769 +
                       C124864 * C2380 + C125168 * C10814 + C124865 * C11154) *
                          C9617 -
                      ((C125168 * C1967 + C124865 * C2594 + C125167 * C1964 +
                        C124864 * C2593 + C125166 * C246 + C124863 * C720) *
                           C9466 +
                       (C125168 * C1769 + C124865 * C2380 + C125167 * C1764 +
                        C124864 * C2375 + C125166 * C108 + C124863 * C556) *
                           C9616) +
                      (C125166 * C1964 + C124863 * C2593 + C125167 * C1967 +
                       C124864 * C2594 + C125168 * C10936 + C124865 * C11263) *
                          C139403) *
                         C139286 * C139442 * C139328 * C5226 +
                     ((C125166 * C109 + C124863 * C557 + C125167 * C1765 +
                       C124864 * C2377 + C125168 * C1770 + C124865 * C2381) *
                          C9616 +
                      (C125166 * C247 + C124863 * C721 + C125167 * C1963 +
                       C124864 * C2595 + C125168 * C1968 + C124865 * C2596) *
                          C9466 -
                      (C125168 * C10813 + C124865 * C11153 + C125167 * C1770 +
                       C124864 * C2381 + C125166 * C1765 + C124863 * C2377) *
                          C9617 -
                      (C125168 * C10935 + C124865 * C11264 + C125167 * C1968 +
                       C124864 * C2596 + C125166 * C1963 + C124863 * C2595) *
                          C139403) *
                         C139286 * C139442 * C139328 * C5227)) /
                       (p * q * std::sqrt(p + q)) -
                   (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    (((C125166 * C107 + C124863 * C555 + C125167 * C1767 +
                       C124864 * C2376 + C125168 * C1768 + C124865 * C2379) *
                          C9616 +
                      (C125166 * C245 + C124863 * C719 + C125167 * C1965 +
                       C124864 * C2591 + C125168 * C1966 + C124865 * C2592) *
                          C9466 -
                      (C125168 * C10815 + C124865 * C11155 + C125167 * C1768 +
                       C124864 * C2379 + C125166 * C1767 + C124863 * C2376) *
                          C9617 -
                      (C125168 * C10937 + C124865 * C11262 + C125167 * C1966 +
                       C124864 * C2592 + C125166 * C1965 + C124863 * C2591) *
                          C139403) *
                         C139286 * C139442 * C823 +
                     ((C125166 * C4223 + C124863 * C4899 + C125167 * C6442 +
                       C124864 * C6922 + C125168 * C26831 + C124865 * C27251) *
                          C9617 -
                      ((C125168 * C6608 + C124865 * C7077 + C125167 * C4443 +
                        C124864 * C5133 + C125166 * C1029 + C124863 * C1661) *
                           C9466 +
                       (C125168 * C6442 + C124865 * C6922 + C125167 * C4223 +
                        C124864 * C4899 + C125166 * C831 + C124863 * C1440) *
                           C9616) +
                      (C125166 * C4443 + C124863 * C5133 + C125167 * C6608 +
                       C124864 * C7077 + C125168 * C26975 + C124865 * C27388) *
                          C139403) *
                         C139286 * C139442 * C824 +
                     ((C125166 * C832 + C124863 * C1443 + C125167 * C8754 +
                       C124864 * C9234 + C125168 * C21079 + C124865 * C21715) *
                          C9616 +
                      (C125166 * C1030 + C124863 * C1662 + C125167 * C8920 +
                       C124864 * C9389 + C125168 * C21305 + C124865 * C21933) *
                          C9466 -
                      (C125168 * C73224 + C124865 * C73536 + C125167 * C21079 +
                       C124864 * C21715 + C125166 * C8754 + C124863 * C9234) *
                          C9617 -
                      (C125168 * C73330 + C124865 * C73639 + C125167 * C21305 +
                       C124864 * C21933 + C125166 * C8920 + C124863 * C9389) *
                          C139403) *
                         C139286 * C139442 * C825) *
                    C139300) /
                       (p * q * std::sqrt(p + q));
}
