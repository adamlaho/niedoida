/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "gto_d2_kit/d2_ee_pppp_AA.hpp"
#include <cmath>
/*

*/
#pragma GCC optimize("O0")
namespace {
    const double Pi = M_PI;
}
//
void second_derivative_ee_1111_11(const double ae,
                                  const double xA,
                                  const double yA,
                                  const double zA,
                                  const double be,
                                  const double xB,
                                  const double yB,
                                  const double zB,
                                  const double ce,
                                  const double xC,
                                  const double yC,
                                  const double zC,
                                  const double de,
                                  const double xD,
                                  const double yD,
                                  const double zD,
                                  const double* const bs,
                                  double* const d2eexx,
                                  double* const d2eexy,
                                  double* const d2eexz,
                                  double* const d2eeyx,
                                  double* const d2eeyy,
                                  double* const d2eeyz,
                                  double* const d2eezx,
                                  double* const d2eezy,
                                  double* const d2eezz)
{
    const double p = ae + be;
    const double q = ce + de;
    const double xP = (ae * xA + be * xB) / p;
    const double yP = (ae * yA + be * yB) / p;
    const double zP = (ae * zA + be * zB) / p;
    const double xQ = (ce * xC + de * xD) / q;
    const double yQ = (ce * yC + de * yD) / q;
    const double zQ = (ce * zC + de * zD) / q;
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    const double C43785 = ae * be;
    const double C43784 = xA - xB;
    const double C43783 = ae + be;
    const double C43782 = 0 * be;
    const double C43817 = yA - yB;
    const double C43820 = zA - zB;
    const double C43877 = 0 * be;
    const double C43907 = 0 * be;
    const double C43927 = p + q;
    const double C43926 = p * q;
    const double C43932 = xP - xQ;
    const double C43931 = bs[2];
    const double C43939 = std::pow(ae, 2);
    const double C43937 = bs[3];
    const double C43950 = bs[4];
    const double C43971 = bs[5];
    const double C44002 = yP - yQ;
    const double C44027 = zP - zQ;
    const double C93 = bs[0];
    const double C44747 = ce + de;
    const double C44746 = ce * de;
    const double C44745 = xC - xD;
    const double C44760 = yC - yD;
    const double C44769 = zC - zD;
    const double C43788 = 2 * C43785;
    const double C43787 = C43785 * C43784;
    const double C44725 = std::pow(C43784, 2);
    const double C44888 = C43784 * be;
    const double C44887 = C43784 * ae;
    const double C43786 = std::pow(C43783, 2);
    const double C44734 = 2 * C43783;
    const double C43837 = C43785 * C43817;
    const double C44832 = std::pow(C43817, 2);
    const double C44900 = C43817 * be;
    const double C44898 = C43817 * ae;
    const double C43849 = C43785 * C43820;
    const double C44847 = std::pow(C43820, 2);
    const double C44901 = C43820 * be;
    const double C44899 = C43820 * ae;
    const double C43928 = 2 * C43926;
    const double C43940 = C43932 * ae;
    const double C43936 = std::pow(C43932, 2);
    const double C44005 = C44002 * ae;
    const double C44004 = C43932 * C44002;
    const double C44053 = C44002 * C43932;
    const double C44066 = std::pow(C44002, 2);
    const double C44030 = C44027 * ae;
    const double C44029 = C43932 * C44027;
    const double C44080 = C44002 * C44027;
    const double C44091 = C44027 * C43932;
    const double C44104 = C44027 * C44002;
    const double C44115 = std::pow(C44027, 2);
    const double C44757 = 2 * C44747;
    const double C44892 = std::pow(C44747, 2);
    const double C44748 = std::pow(C44745, 2);
    const double C44891 = C44745 * de;
    const double C44890 = C44745 * ce;
    const double C44782 = std::pow(C44760, 2);
    const double C44896 = C44760 * de;
    const double C44894 = C44760 * ce;
    const double C44799 = std::pow(C44769, 2);
    const double C44897 = C44769 * de;
    const double C44895 = C44769 * ce;
    const double C44726 = C44725 * C43785;
    const double C43790 = 2 * C43786;
    const double C44889 = std::pow(C44734, -1);
    const double C44833 = C44832 * C43785;
    const double C44848 = C44847 * C43785;
    const double C43930 = C43928 / C43927;
    const double C103 =
        ((std::pow(xP - xQ, 2) * bs[2] * std::pow(C43928 / C43927, 2) -
          (bs[1] * C43928) / C43927) *
         std::pow(ae, 2)) /
        C43786;
    const double C94 = -(C43932 * bs[1] * C43928) / C43927;
    const double C642 = -(C44002 * bs[1] * C43928) / C43927;
    const double C1226 = -(C44027 * bs[1] * C43928) / C43927;
    const double C43942 = C43937 * C43940;
    const double C43953 = C43950 * C43940;
    const double C43976 = C43971 * C43940;
    const double C98 = (-(bs[1] * C43940 * C43928) / C43927) / C43783;
    const double C43952 = C43936 * C43950;
    const double C43975 = C43936 * C43971;
    const double C44007 = C43937 * C44005;
    const double C44011 = C43950 * C44005;
    const double C44018 = C43971 * C44005;
    const double C156 = (-(bs[1] * C44005 * C43928) / C43927) / C43783;
    const double C44006 = C44004 * C43939;
    const double C44054 = C44053 * C43939;
    const double C44068 = C44066 * C43950;
    const double C44073 = C44066 * C43971;
    const double C44032 = C43937 * C44030;
    const double C44036 = C43950 * C44030;
    const double C44043 = C43971 * C44030;
    const double C223 = (-(bs[1] * C44030 * C43928) / C43927) / C43783;
    const double C44031 = C44029 * C43939;
    const double C44081 = C44080 * C43939;
    const double C44092 = C44091 * C43939;
    const double C44105 = C44104 * C43939;
    const double C44117 = C44115 * C43950;
    const double C44122 = C44115 * C43971;
    const double C44893 = std::pow(C44757, -1);
    const double C44905 = 2 * C44892;
    const double C44749 = C44748 * C44746;
    const double C44783 = C44782 * C44746;
    const double C44800 = C44799 * C44746;
    const double C44727 = C44726 / C43783;
    const double C44834 = C44833 / C43783;
    const double C44849 = C44848 / C43783;
    const double C43933 = std::pow(C43930, 2);
    const double C43938 = -C43930;
    const double C43951 = std::pow(C43930, 4);
    const double C44010 = C43950 * C44006;
    const double C44017 = C43971 * C44006;
    const double C44056 = C43950 * C44054;
    const double C44059 = C43971 * C44054;
    const double C44035 = C43950 * C44031;
    const double C44042 = C43971 * C44031;
    const double C44083 = C43950 * C44081;
    const double C44086 = C43971 * C44081;
    const double C44094 = C43950 * C44092;
    const double C44097 = C43971 * C44092;
    const double C44107 = C43950 * C44105;
    const double C44110 = C43971 * C44105;
    const double C44750 = C44749 / C44747;
    const double C44784 = C44783 / C44747;
    const double C44801 = C44800 / C44747;
    const double C44728 = -C44727;
    const double C44835 = -C44834;
    const double C44850 = -C44849;
    const double C43935 = C43931 * C43933;
    const double C104 = (2 * ae * C43933 * C43931 * C43932 * ae +
                         C43932 *
                             (C43931 * C43933 + std::pow(C43932, 2) * bs[3] *
                                                    std::pow(-C43930, 3)) *
                             std::pow(ae, 2)) /
                        C43786;
    const double C161 =
        (C43933 * C43931 * C43932 * (yP - yQ) * C43939) / C43786;
    const double C228 =
        (C43933 * C43931 * C43932 * (zP - zQ) * C43939) / C43786;
    const double C289 = (C43933 * C43931 * C44002 * C43932 * C43939) / C43786;
    const double C333 =
        ((std::pow(C44002, 2) * C43931 * C43933 - (bs[1] * C43928) / C43927) *
         C43939) /
        C43786;
    const double C396 = (C43933 * C43931 * C44002 * C44027 * C43939) / C43786;
    const double C455 = (C43933 * C43931 * C44027 * C43932 * C43939) / C43786;
    const double C498 = (C43933 * C43931 * C44027 * C44002 * C43939) / C43786;
    const double C558 =
        ((std::pow(C44027, 2) * C43931 * C43933 - (bs[1] * C43928) / C43927) *
         C43939) /
        C43786;
    const double C99 = (C43932 * C43933 * C43931 * C43940) / C43783 -
                       (ae * bs[1] * C43928) / (C43927 * C43783);
    const double C157 = (C43932 * C43933 * C43931 * C44005) / C43783;
    const double C224 = (C43932 * C43933 * C43931 * C44030) / C43783;
    const double C646 = (C44002 * C43933 * C43931 * C43940) / C43783;
    const double C710 = (C44002 * C43933 * C43931 * C44005) / C43783 -
                        (ae * bs[1] * C43928) / (C43927 * C43783);
    const double C780 = (C44002 * C43933 * C43931 * C44030) / C43783;
    const double C1230 = (C44027 * C43933 * C43931 * C43940) / C43783;
    const double C1294 = (C44027 * C43933 * C43931 * C44005) / C43783;
    const double C1364 = (C44027 * C43933 * C43931 * C44030) / C43783 -
                         (ae * bs[1] * C43928) / (C43927 * C43783);
    const double C43941 = std::pow(C43938, 3);
    const double C43972 = std::pow(C43938, 5);
    const double C43957 = C43951 * C43953;
    const double C43956 = C43952 * C43951;
    const double C43970 = C43950 * C43951;
    const double C44013 = C43951 * C44011;
    const double C44038 = C43951 * C44036;
    const double C44069 = C44068 * C43951;
    const double C44118 = C44117 * C43951;
    const double C44012 = C43951 * C44010;
    const double C44057 = C43951 * C44056;
    const double C44037 = C43951 * C44035;
    const double C44084 = C43951 * C44083;
    const double C44095 = C43951 * C44094;
    const double C44108 = C43951 * C44107;
    const double C44751 = -C44750;
    const double C44785 = -C44784;
    const double C44802 = -C44801;
    const double C44729 = std::exp(C44728);
    const double C44836 = std::exp(C44835);
    const double C44851 = std::exp(C44850);
    const double C43943 = C43935 * ae;
    const double C95 = C43935 * C43936 - (bs[1] * C43928) / C43927;
    const double C641 = C44002 * C43932 * C43935;
    const double C1225 = C44027 * C43932 * C43935;
    const double C2252 = C43935 * C44066 - (bs[1] * C43928) / C43927;
    const double C2654 = C44027 * C44002 * C43935;
    const double C4045 = C43935 * C44115 - (bs[1] * C43928) / C43927;
    const double C43944 = C43941 * C43942;
    const double C43949 = C43937 * C43941;
    const double C44008 = C43941 * C44007;
    const double C44033 = C43941 * C44032;
    const double C162 = (ae * C43933 * C43931 * C44002 * ae +
                         C43932 * C43941 * C43937 * C43932 * C44002 * C43939) /
                        C43786;
    const double C229 = (ae * C43933 * C43931 * C44027 * ae +
                         C43932 * C43941 * C43937 * C43932 * C44027 * C43939) /
                        C43786;
    const double C290 = (ae * C43933 * C43931 * C44005 +
                         C43932 * C43941 * C43937 * C44002 * C43932 * C43939) /
                        C43786;
    const double C334 =
        (C43932 * (C43935 + std::pow(C44002, 2) * C43937 * C43941) * C43939) /
        C43786;
    const double C397 =
        (C43932 * C43941 * C43937 * C44002 * C44027 * C43939) / C43786;
    const double C398 =
        (C43941 * C43937 * C44081 + C43951 * C43950 * C44081 * C43936) / C43786;
    const double C456 = (ae * C43933 * C43931 * C44030 +
                         C43932 * C43941 * C43937 * C44027 * C43932 * C43939) /
                        C43786;
    const double C499 =
        (C43932 * C43941 * C43937 * C44027 * C44002 * C43939) / C43786;
    const double C500 =
        (C43941 * C43937 * C44105 + C43951 * C43950 * C44105 * C43936) / C43786;
    const double C559 =
        (C43932 * (C43935 + std::pow(C44027, 2) * C43937 * C43941) * C43939) /
        C43786;
    const double C650 =
        (C44002 * (C43935 + C43936 * C43937 * C43941) * C43939) / C43786;
    const double C714 =
        (ae * C43933 * C43931 * C43940 + C44002 * C43941 * C43937 * C44006) /
        C43786;
    const double C784 = (C44002 * C43941 * C43937 * C44031) / C43786;
    const double C850 =
        (ae * C43933 * C43931 * C43940 + C44002 * C43941 * C43937 * C44054) /
        C43786;
    const double C904 =
        (2 * ae * C43933 * C43931 * C44005 +
         C44002 * (C43935 + C44066 * C43937 * C43941) * C43939) /
        C43786;
    const double C972 =
        (ae * C43933 * C43931 * C44030 + C44002 * C43941 * C43937 * C44081) /
        C43786;
    const double C1036 = (C44002 * C43941 * C43937 * C44092) / C43786;
    const double C1090 =
        (ae * C43933 * C43931 * C44030 + C44002 * C43941 * C43937 * C44105) /
        C43786;
    const double C1154 =
        (C44002 * (C43935 + C44115 * C43937 * C43941) * C43939) / C43786;
    const double C1234 =
        (C44027 * (C43935 + C43936 * C43937 * C43941) * C43939) / C43786;
    const double C1298 = (C44027 * C43941 * C43937 * C44006) / C43786;
    const double C1368 =
        (ae * C43933 * C43931 * C43940 + C44027 * C43941 * C43937 * C44031) /
        C43786;
    const double C1434 = (C44027 * C43941 * C43937 * C44054) / C43786;
    const double C1488 =
        (C44027 * (C43935 + C44066 * C43937 * C43941) * C43939) / C43786;
    const double C1556 =
        (ae * C43933 * C43931 * C44005 + C44027 * C43941 * C43937 * C44081) /
        C43786;
    const double C1620 =
        (ae * C43933 * C43931 * C43940 + C44027 * C43941 * C43937 * C44092) /
        C43786;
    const double C1674 =
        (ae * C43933 * C43931 * C44005 + C44027 * C43941 * C43937 * C44105) /
        C43786;
    const double C1738 =
        (2 * ae * C43933 * C43931 * C44030 +
         C44027 * (C43935 + C44115 * C43937 * C43941) * C43939) /
        C43786;
    const double C43981 = C43972 * C43976;
    const double C43980 = C43975 * C43972;
    const double C44020 = C43972 * C44018;
    const double C44019 = C43972 * C44017;
    const double C44045 = C43972 * C44043;
    const double C44044 = C43972 * C44042;
    const double C44060 = C43972 * C44059;
    const double C44074 = C44073 * C43972;
    const double C44087 = C43972 * C44086;
    const double C44098 = C43972 * C44097;
    const double C44111 = C43972 * C44110;
    const double C44123 = C44122 * C43972;
    const double C43960 = C43932 * C43957;
    const double C43969 = ae * C43957;
    const double C44388 = C44002 * C43957;
    const double C44545 = C44027 * C43957;
    const double C43979 = C43970 * C43936;
    const double C43978 = C43932 * C43970;
    const double C43977 = C43970 * ae;
    const double C44462 = C43970 * C44066;
    const double C44461 = C44002 * C43970;
    const double C44568 = C43970 * C44115;
    const double C44567 = C44027 * C43970;
    const double C44016 = ae * C44013;
    const double C44015 = C43932 * C44013;
    const double C44328 = C44002 * C44013;
    const double C44553 = C44027 * C44013;
    const double C44041 = ae * C44038;
    const double C44040 = C43932 * C44038;
    const double C44401 = C44002 * C44038;
    const double C44427 = C44027 * C44038;
    const double C4098 = (C43941 * C43937 * C44006 + C44012 * C44115) / C43786;
    const double C4183 = (C43941 * C43937 * C44054 + C44057 * C44115) / C43786;
    const double C2349 = (C43941 * C43937 * C44031 + C44037 * C44066) / C43786;
    const double C399 =
        (2 * C43932 * C44084 +
         C43932 * (C44084 + C43972 * C43971 * C44081 * C43936)) /
        C43786;
    const double C2516 = (C43941 * C43937 * C44092 + C44095 * C44066) / C43786;
    const double C501 =
        (2 * C43932 * C44108 +
         C43932 * (C44108 + C43972 * C43971 * C44105 * C43936)) /
        C43786;
    const double C44752 = std::exp(C44751);
    const double C44786 = std::exp(C44785);
    const double C44803 = std::exp(C44802);
    const double C20963 = C44729 * C646;
    const double C25740 = C44729 * C1230;
    const double C43789 = C43787 * C44729;
    const double C44903 = C44889 * C44729;
    const double C44902 = C44729 * C44887;
    const double C4447 = -(C44729 * C44888) / C43783;
    const double C168 = C44836 * C157;
    const double C11137 = C44836 * C1294;
    const double C43838 = C43837 * C44836;
    const double C155 = -(2 * C43785 * (yA - yB) * C44836) / C43783;
    const double C332 =
        -((C44836 - (C43817 * 2 * C43785 * C43817 * C44836) / C43783) *
          C43788) /
        C43783;
    const double C4517 =
        ((C44836 - (C43817 * 2 * C43785 * C43817 * C44836) / C43783) * ae) /
            C43783 -
        (0 * be) / C43790;
    const double C4518 =
        (0 * ae) / C43783 - (C43785 * C43817 * C44836) / C43786;
    const double C44912 = C44889 * C44836;
    const double C44911 = C44836 * C44898;
    const double C15153 = -(C44836 * C44900) / C43783;
    const double C235 = C44851 * C224;
    const double C5183 = C44851 * C780;
    const double C43850 = C43849 * C44851;
    const double C222 = -(2 * C43785 * (zA - zB) * C44851) / C43783;
    const double C557 =
        -((C44851 - (C43820 * 2 * C43785 * C43820 * C44851) / C43783) *
          C43788) /
        C43783;
    const double C9959 =
        ((C44851 - (C43820 * 2 * C43785 * C43820 * C44851) / C43783) * ae) /
            C43783 -
        (0 * be) / C43790;
    const double C9960 =
        (0 * ae) / C43783 - (C43785 * C43820 * C44851) / C43786;
    const double C44914 = C44889 * C44851;
    const double C44913 = C44851 * C44899;
    const double C29623 = -(C44851 * C44901) / C43783;
    const double C43945 = C43932 * C43944;
    const double C2305 = (C43941 * C43937 * C44006 + ae * C44002 * C43944 +
                          C44002 * (ae * C43944 + C44002 * C44012)) /
                         C43786;
    const double C2390 = (C43941 * C43937 * C44054 + ae * C44002 * C43944 +
                          C44002 * (ae * C43944 + C44002 * C44057)) /
                         C43786;
    const double C2719 = (C44027 * (ae * C43944 + C44002 * C44012)) / C43786;
    const double C2775 =
        (ae * C44002 * C43944 + C44027 * C44002 * C44037) / C43786;
    const double C2828 =
        (ae * C44027 * C43944 + C44002 * C44027 * C44057) / C43786;
    const double C2990 =
        (ae * C44002 * C43944 + C44027 * C44002 * C44095) / C43786;
    const double C4142 = (C43941 * C43937 * C44031 + ae * C44027 * C43944 +
                          C44027 * (ae * C43944 + C44027 * C44037)) /
                         C43786;
    const double C4309 = (C43941 * C43937 * C44092 + ae * C44027 * C43944 +
                          C44027 * (ae * C43944 + C44027 * C44095)) /
                         C43786;
    const double C2255 = (C43933 * C43931 * C43940 + C43944 * C44066) / C43783;
    const double C2657 = (C44027 * C44002 * C43944) / C43783;
    const double C4048 = (C43933 * C43931 * C43940 + C43944 * C44115) / C43783;
    const double C6979 =
        (2 * C44002 * C43944 + C44002 * (C43944 + C43957 * C44066)) / C43783;
    const double C7525 = (C44027 * (C43944 + C43957 * C44066)) / C43783;
    const double C14621 =
        (2 * C44027 * C43944 + C44027 * (C43944 + C43957 * C44115)) / C43783;
    const double C43955 = C43932 * C43949;
    const double C43954 = C43949 * ae;
    const double C43959 = C43949 + C43956;
    const double C44070 = C43949 + C44069;
    const double C44119 = C43949 + C44118;
    const double C44329 = C44002 * C43949;
    const double C44428 = C44027 * C43949;
    const double C335 =
        ((C43935 + C44066 * C43937 * C43941) * C43939 +
         (C43949 + C44066 * C43950 * C43951) * C43939 * C43936) /
        C43786;
    const double C560 =
        ((C43935 + C44115 * C43937 * C43941) * C43939 +
         (C43949 + C44115 * C43950 * C43951) * C43939 * C43936) /
        C43786;
    const double C96 =
        2 * C43932 * C43935 + C43932 * (C43935 + C43949 * C43936);
    const double C640 = C44002 * (C43935 + C43949 * C43936);
    const double C1224 = C44027 * (C43935 + C43949 * C43936);
    const double C6977 =
        2 * C44002 * C43935 + C44002 * (C43935 + C43949 * C44066);
    const double C7523 = C44027 * (C43935 + C43949 * C44066);
    const double C14619 =
        2 * C44027 * C43935 + C44027 * (C43935 + C43949 * C44115);
    const double C44228 = C44002 * C44008;
    const double C163 =
        (C43941 * C43937 * C44006 + ae * C43932 * C44008 +
         C43932 * (ae * C44008 + C43932 * C43951 * C43950 * C44006)) /
        C43786;
    const double C164 =
        (2 * (ae * C44008 + C43932 * C44012) + ae * (C44008 + C44013 * C43936) +
         C43932 *
             (C44012 + ae * C43932 * C44013 +
              C43932 * (ae * C44013 + C43932 * C43972 * C43971 * C44006))) /
        C43786;
    const double C291 =
        (C43941 * C43937 * C44054 + ae * C43932 * C44008 +
         C43932 * (ae * C44008 + C43932 * C43951 * C43950 * C44054)) /
        C43786;
    const double C1297 = (C44027 * (ae * C44008 + C43932 * C44012)) / C43786;
    const double C1433 = (C44027 * (ae * C44008 + C43932 * C44057)) / C43786;
    const double C1555 =
        (ae * C43932 * C44008 + C44027 * C43932 * C44084) / C43786;
    const double C1673 =
        (ae * C43932 * C44008 + C44027 * C43932 * C44108) / C43786;
    const double C4268 = (C43941 * C43937 * C44081 + ae * C44027 * C44008 +
                          C44027 * (ae * C44008 + C44027 * C44084)) /
                         C43786;
    const double C4350 = (C43941 * C43937 * C44105 + ae * C44027 * C44008 +
                          C44027 * (ae * C44008 + C44027 * C44108)) /
                         C43786;
    const double C158 = (C43933 * C43931 * C44005 + C44008 * C43936) / C43783;
    const double C159 =
        (2 * C43932 * C44008 + C43932 * (C44008 + C44013 * C43936)) / C43783;
    const double C708 = (C44002 * (C44008 + C44013 * C43936) +
                         (C43935 + C43949 * C43936) * ae) /
                        C43783;
    const double C709 =
        (C44002 * C43932 * C44008 + C43932 * C43935 * ae) / C43783;
    const double C1292 = (C44027 * (C44008 + C44013 * C43936)) / C43783;
    const double C1293 = (C44027 * C43932 * C44008) / C43783;
    const double C4095 = (C43933 * C43931 * C44005 + C44008 * C44115) / C43783;
    const double C14687 =
        (2 * C44027 * C44008 + C44027 * (C44008 + C44013 * C44115)) / C43783;
    const double C44308 = C44027 * C44033;
    const double C230 =
        (C43941 * C43937 * C44031 + ae * C43932 * C44033 +
         C43932 * (ae * C44033 + C43932 * C43951 * C43950 * C44031)) /
        C43786;
    const double C231 =
        (2 * (ae * C44033 + C43932 * C44037) + ae * (C44033 + C44038 * C43936) +
         C43932 *
             (C44037 + ae * C43932 * C44038 +
              C43932 * (ae * C44038 + C43932 * C43972 * C43971 * C44031))) /
        C43786;
    const double C457 =
        (C43941 * C43937 * C44092 + ae * C43932 * C44033 +
         C43932 * (ae * C44033 + C43932 * C43951 * C43950 * C44092)) /
        C43786;
    const double C783 = (C44002 * (ae * C44033 + C43932 * C44037)) / C43786;
    const double C971 =
        (ae * C43932 * C44033 + C44002 * C43932 * C44084) / C43786;
    const double C1035 = (C44002 * (ae * C44033 + C43932 * C44095)) / C43786;
    const double C1089 =
        (ae * C43932 * C44033 + C44002 * C43932 * C44108) / C43786;
    const double C2475 = (C43941 * C43937 * C44081 + ae * C44002 * C44033 +
                          C44002 * (ae * C44033 + C44002 * C44084)) /
                         C43786;
    const double C2557 = (C43941 * C43937 * C44105 + ae * C44002 * C44033 +
                          C44002 * (ae * C44033 + C44002 * C44108)) /
                         C43786;
    const double C2937 = (ae * (C44027 * C44033 + C43943) +
                          C44002 * (ae * C44008 + C44027 * C44084)) /
                         C43786;
    const double C225 = (C43933 * C43931 * C44030 + C44033 * C43936) / C43783;
    const double C226 =
        (2 * C43932 * C44033 + C43932 * (C44033 + C44038 * C43936)) / C43783;
    const double C778 = (C44002 * (C44033 + C44038 * C43936)) / C43783;
    const double C779 = (C44002 * C43932 * C44033) / C43783;
    const double C1362 = (C44027 * (C44033 + C44038 * C43936) +
                          (C43935 + C43949 * C43936) * ae) /
                         C43783;
    const double C1363 =
        (C44027 * C43932 * C44033 + C43932 * C43935 * ae) / C43783;
    const double C2346 = (C43933 * C43931 * C44030 + C44033 * C44066) / C43783;
    const double C2772 =
        (C44027 * C44002 * C44033 + C44002 * C43935 * ae) / C43783;
    const double C7099 =
        (2 * C44002 * C44033 + C44002 * (C44033 + C44038 * C44066)) / C43783;
    const double C7677 = (C44027 * (C44033 + C44038 * C44066) +
                          (C43935 + C43949 * C44066) * ae) /
                         C43783;
    const double C170 = C44836 * C162;
    const double C237 = C44851 * C229;
    const double C342 = C44836 * C334;
    const double C404 = C44851 * C397;
    const double C407 = C44851 * C398;
    const double C506 = C44836 * C499;
    const double C509 = C44836 * C500;
    const double C567 = C44851 * C559;
    const double C20779 = C44729 * C650;
    const double C5185 = C44851 * C784;
    const double C20965 = C44729 * C850;
    const double C5441 = C44851 * C972;
    const double C21144 = C44729 * C1036;
    const double C5667 = C44851 * C1154;
    const double C25518 = C44729 * C1234;
    const double C11139 = C44836 * C1298;
    const double C25742 = C44729 * C1434;
    const double C11391 = C44836 * C1488;
    const double C25968 = C44729 * C1620;
    const double C11621 = C44836 * C1674;
    const double C43985 = C43932 * C43981;
    const double C44449 = C43981 * C44066;
    const double C44523 = C44002 * C43981;
    const double C44547 = C43981 * C44115;
    const double C43984 = C43970 + C43980;
    const double C44022 = C44020 * C43936;
    const double C44339 = C43932 * C44020;
    const double C44460 = C44002 * C44020;
    const double C44554 = C44020 * C44115;
    const double C44021 = C43932 * C44019;
    const double C44448 = C44002 * C44019;
    const double C14689 =
        (2 * C44027 * C44012 + C44027 * (C44012 + C44019 * C44115)) / C43786;
    const double C43469 =
        (3 * (C44012 + C44019 * C44115) +
         C44027 * (2 * C44027 * C44019 +
                   C44027 * (C44019 +
                             std::pow(C43930, 6) * bs[6] * C44006 * C44115))) /
        C43786;
    const double C44047 = C44045 * C43936;
    const double C44352 = C43932 * C44045;
    const double C44479 = C44045 * C44066;
    const double C44532 = C44002 * C44045;
    const double C44566 = C44027 * C44045;
    const double C44046 = C43932 * C44044;
    const double C44522 = C44002 * C44044;
    const double C44546 = C44027 * C44044;
    const double C7101 =
        (2 * C44002 * C44037 + C44002 * (C44037 + C44044 * C44066)) / C43786;
    const double C7679 = (ae * (C43944 + C43957 * C44066) +
                          C44027 * (C44037 + C44044 * C44066)) /
                         C43786;
    const double C22300 =
        (3 * (C44037 + C44044 * C44066) +
         C44002 * (2 * C44002 * C44044 +
                   C44002 * (C44044 +
                             std::pow(C43930, 6) * bs[6] * C44031 * C44066))) /
        C43786;
    const double C44061 = C43932 * C44060;
    const double C44454 = C44002 * C44060;
    const double C44491 = C44027 * C44060;
    const double C7757 =
        (C44027 * C44057 + ae * C44027 * C44002 * C43957 +
         C44002 * (ae * C44027 * C43957 + C44002 * C44027 * C44060)) /
        C43786;
    const double C9537 = (ae * (C43944 + C43957 * C44115) +
                          C44002 * (C44057 + C44060 * C44115)) /
                         C43786;
    const double C14805 =
        (2 * C44027 * C44057 + C44027 * (C44057 + C44060 * C44115)) / C43786;
    const double C44075 = C43970 + C44074;
    const double C44351 = C43932 * C44087;
    const double C44478 = C44002 * C44087;
    const double C44499 = C44027 * C44087;
    const double C400 =
        (3 * (C44084 + C44087 * C43936) +
         C43932 * (2 * C43932 * C44087 +
                   C43932 * (C44087 +
                             std::pow(C43930, 6) * bs[6] * C44081 * C43936))) /
        C43786;
    const double C970 = (ae * (C44033 + C44038 * C43936) +
                         C44002 * (C44084 + C44087 * C43936)) /
                        C43786;
    const double C1554 = (ae * (C44008 + C44013 * C43936) +
                          C44027 * (C44084 + C44087 * C43936)) /
                         C43786;
    const double C44099 = C43932 * C44098;
    const double C44528 = C44002 * C44098;
    const double C44557 = C44027 * C44098;
    const double C7338 =
        (2 * C44002 * C44095 + C44002 * (C44095 + C44098 * C44066)) / C43786;
    const double C7980 = (ae * (C43944 + C43957 * C44066) +
                          C44027 * (C44095 + C44098 * C44066)) /
                         C43786;
    const double C22477 =
        (3 * (C44095 + C44098 * C44066) +
         C44002 * (2 * C44002 * C44098 +
                   C44002 * (C44098 +
                             std::pow(C43930, 6) * bs[6] * C44092 * C44066))) /
        C43786;
    const double C44357 = C43932 * C44111;
    const double C44484 = C44002 * C44111;
    const double C44560 = C44027 * C44111;
    const double C502 =
        (3 * (C44108 + C44111 * C43936) +
         C43932 * (2 * C43932 * C44111 +
                   C43932 * (C44111 +
                             std::pow(C43930, 6) * bs[6] * C44105 * C43936))) /
        C43786;
    const double C1088 = (ae * (C44033 + C44038 * C43936) +
                          C44002 * (C44108 + C44111 * C43936)) /
                         C43786;
    const double C1672 = (ae * (C44008 + C44013 * C43936) +
                          C44027 * (C44108 + C44111 * C43936)) /
                         C43786;
    const double C44124 = C43970 + C44123;
    const double C43974 = 2 * C43969;
    const double C7047 =
        (2 * (ae * C43944 + C44002 * C44012) + ae * (C43944 + C43957 * C44066) +
         C44002 * (C44012 + ae * C44002 * C43957 +
                   C44002 * (C43969 + C44002 * C44019))) /
        C43786;
    const double C7163 =
        (2 * (ae * C43944 + C44002 * C44057) + ae * (C43944 + C43957 * C44066) +
         C44002 * (C44057 + ae * C44002 * C43957 +
                   C44002 * (C43969 + C44002 * C44060))) /
        C43786;
    const double C7609 = (C44027 * (C44012 + ae * C44002 * C43957 +
                                    C44002 * (C43969 + C44002 * C44019))) /
                         C43786;
    const double C9431 =
        (ae * C43944 + C44002 * C44012 + (C43969 + C44002 * C44019) * C44115) /
        C43786;
    const double C14753 =
        (2 * (ae * C43944 + C44027 * C44037) + ae * (C43944 + C43957 * C44115) +
         C44027 * (C44037 + ae * C44027 * C43957 +
                   C44027 * (C43969 + C44027 * C44044))) /
        C43786;
    const double C14982 =
        (2 * (ae * C43944 + C44027 * C44095) + ae * (C43944 + C43957 * C44115) +
         C44027 * (C44095 + ae * C44027 * C43957 +
                   C44027 * (C43969 + C44027 * C44098))) /
        C43786;
    const double C9485 = (C44002 * C44037 + ae * C44027 * C44388 +
                          C44027 * (ae * C44388 + C44027 * C44002 * C44044)) /
                         C43786;
    const double C9697 = (C44002 * C44095 + ae * C44027 * C44388 +
                          C44027 * (ae * C44388 + C44027 * C44002 * C44098)) /
                         C43786;
    const double C24150 =
        (C44057 + C44060 * C44115 + ae * (C44388 + C44002 * C43981 * C44115) +
         C44002 * (ae * (C43957 + C43981 * C44115) +
                   C44002 * (C44060 +
                             std::pow(C43930, 6) * bs[6] * C44054 * C44115))) /
        C43786;
    const double C9371 = (C44002 * C43944 + C44388 * C44115) / C43783;
    const double C43983 = C43949 + C43979;
    const double C43982 = C43978 * ae;
    const double C44340 = C44002 * C43978;
    const double C44438 = C44027 * C43978;
    const double C44466 = C43949 + C44462;
    const double C44465 = C44461 * ae;
    const double C44533 = C44027 * C44461;
    const double C44572 = C43949 + C44568;
    const double C44571 = C44567 * ae;
    const double C44457 = 2 * C44016;
    const double C14930 =
        (2 * (ae * C44008 + C44027 * C44084) + ae * (C44008 + C44013 * C44115) +
         C44027 * (C44084 + ae * C44027 * C44013 +
                   C44027 * (C44016 + C44027 * C44087))) /
        C43786;
    const double C15040 =
        (2 * (ae * C44008 + C44027 * C44108) + ae * (C44008 + C44013 * C44115) +
         C44027 * (C44108 + ae * C44027 * C44013 +
                   C44027 * (C44016 + C44027 * C44111))) /
        C43786;
    const double C44232 = C44002 * C44015;
    const double C292 =
        (2 * (ae * C44008 + C43932 * C44057) + ae * (C44008 + C44013 * C43936) +
         C43932 * (C44057 + ae * C44015 +
                   C43932 * (C44016 + C43932 * C43972 * C43971 * C44054))) /
        C43786;
    const double C4269 = (C43932 * C44084 + ae * C44027 * C44015 +
                          C44027 * (ae * C44015 + C44027 * C43932 * C44087)) /
                         C43786;
    const double C4351 = (C43932 * C44108 + ae * C44027 * C44015 +
                          C44027 * (ae * C44015 + C44027 * C43932 * C44111)) /
                         C43786;
    const double C4096 = (C43932 * C44008 + C44015 * C44115) / C43783;
    const double C44563 = 2 * C44041;
    const double C7283 =
        (2 * (ae * C44033 + C44002 * C44084) + ae * (C44033 + C44038 * C44066) +
         C44002 * (C44084 + ae * C44002 * C44038 +
                   C44002 * (C44041 + C44002 * C44087))) /
        C43786;
    const double C7396 =
        (2 * (ae * C44033 + C44002 * C44108) + ae * (C44033 + C44038 * C44066) +
         C44002 * (C44108 + ae * C44002 * C44038 +
                   C44002 * (C44041 + C44002 * C44111))) /
        C43786;
    const double C44312 = C44027 * C44040;
    const double C458 =
        (2 * (ae * C44033 + C43932 * C44095) + ae * (C44033 + C44038 * C43936) +
         C43932 * (C44095 + ae * C44040 +
                   C43932 * (C44041 + C43932 * C43972 * C43971 * C44092))) /
        C43786;
    const double C2476 = (C43932 * C44084 + ae * C44002 * C44040 +
                          C44002 * (ae * C44040 + C44002 * C43932 * C44087)) /
                         C43786;
    const double C2558 = (C43932 * C44108 + ae * C44002 * C44040 +
                          C44002 * (ae * C44040 + C44002 * C43932 * C44111)) /
                         C43786;
    const double C2347 = (C43932 * C44033 + C44040 * C44066) / C43783;
    const double C44402 = C44027 * C44401;
    const double C14695 = C44836 * C4098;
    const double C29289 = C44729 * C4183;
    const double C7107 = C44851 * C2349;
    const double C409 = C44851 * C399;
    const double C21147 = C44729 * C2516;
    const double C511 = C44836 * C501;
    const double C44906 = C44893 * C44752;
    const double C44904 = C44752 * C44890;
    const double C638 = -(C44752 * C44891) / C44747;
    const double C44908 = C44893 * C44786;
    const double C44907 = C44786 * C44894;
    const double C1806 = -(C44786 * C44896) / C44747;
    const double C44910 = C44893 * C44803;
    const double C44909 = C44803 * C44895;
    const double C3152 = -(C44803 * C44897) / C44747;
    const double C43791 = 2 * C43789;
    const double C92 = ((0 * ae) / C43783 - C43789 / C43786) / (2 * C43783) -
                       (0 * be) / C43783;
    const double C15158 = (0 * ae) / C43783 - C43789 / C43786;
    const double C79 = C44903 / C44734;
    const double C77 = C44729 / C44734 - (C44902 * C44888) / C43786;
    const double C78 = C44902 / C43790 - (C44903 * C44888) / C43783;
    const double C15151 = C44902 / C43783;
    const double C5015 = C4447 * C650;
    const double C5273 = C4447 * C850;
    const double C5269 = C4447 * C646;
    const double C5517 = C4447 * C1036;
    const double C7344 = C4447 * C2516;
    const double C11049 = C4447 * C1234;
    const double C11305 = C4447 * C1434;
    const double C11301 = C4447 * C1230;
    const double C11543 = C4447 * C1620;
    const double C14811 = C4447 * C4183;
    const double C43885 = 2 * C43838;
    const double C4693 =
        (((-4 * C43838) / C43783 -
          (C43817 * (C44836 - (C43817 * 2 * C43838) / C43783) * C43788) /
              C43783) *
         ae) /
        C43783;
    const double C4694 =
        (-((C44836 - (C43817 * 2 * C43838) / C43783) * C43788) / C43783) /
        (2 * C43783);
    const double C15221 =
        (-(0 * be) / C43783) / (2 * C43783) -
        ((C44836 - (C43817 * 2 * C43838) / C43783) * be) / C43783;
    const double C15222 =
        (-(2 * C43838) / C43783) / (2 * C43783) - (0 * be) / C43783;
    const double C15397 =
        -(((-4 * C43838) / C43783 -
           (C43817 * (C44836 - (C43817 * 2 * C43838) / C43783) * C43788) /
               C43783) *
          be) /
        C43783;
    const double C15398 =
        (-((C44836 - (C43817 * 2 * C43838) / C43783) * C43788) / C43783) /
        (2 * C43783);
    const double C20448 = ((0 * ae) / C43783 - C43838 / C43786) / (2 * C43783) -
                          (0 * be) / C43783;
    const double C171 = C155 * C95;
    const double C169 = C155 * C99;
    const double C167 = C155 * C94;
    const double C341 = C155 * C157;
    const double C339 = C155 * C156;
    const double C505 = C155 * C224;
    const double C723 = C155 * C641;
    const double C913 = C155 * C710;
    const double C1307 = C155 * C1225;
    const double C1497 = C155 * C1294;
    const double C11138 = C155 * C1230;
    const double C11136 = C155 * C1226;
    const double C11620 = C155 * C1364;
    const double C12894 = C155 * C2654;
    const double C14696 = C155 * C4045;
    const double C343 = C332 * C95;
    const double C340 = C332 * C94;
    const double C910 = C332 * C641;
    const double C1494 = C332 * C1225;
    const double C11390 = C332 * C1226;
    const double C13102 = C332 * C2654;
    const double C14873 = C332 * C4045;
    const double C4534 = C4517 * C95;
    const double C4524 = C4517 * C99;
    const double C4520 = C4517 * C94;
    const double C4699 = C4517 * C157;
    const double C4696 = C4517 * C156;
    const double C4882 = C4517 * C224;
    const double C5110 = C4517 * C641;
    const double C5365 = C4517 * C710;
    const double C5824 = C4517 * C1225;
    const double C6041 = C4517 * C1294;
    const double C35988 = C4517 * C1230;
    const double C35984 = C4517 * C1226;
    const double C36410 = C4517 * C1364;
    const double C37698 = C4517 * C2654;
    const double C39522 = C4517 * C4045;
    const double C4522 = C4518 * C641;
    const double C4697 = C4518 * C710;
    const double C35986 = C4518 * C2654;
    const double C20447 =
        (((C44836 - (C43817 * 2 * C43838) / C43783) * ae) / C43783 -
         C43877 / C43790) /
            (2 * C43783) -
        ((C43817 * ((0 * ae) / C43783 - C43838 / C43786) + C44912) * be) /
            C43783;
    const double C20396 = C44912 / C44734;
    const double C4449 = C44911 / C43783;
    const double C20394 = C44836 / C44734 - (C44911 * C44900) / C43786;
    const double C20395 = C44911 / C43790 - (C44912 * C44900) / C43783;
    const double C15229 = C15153 * C162;
    const double C15225 = C15153 * C157;
    const double C15404 = C15153 * C334;
    const double C15593 = C15153 * C500;
    const double C15587 = C15153 * C499;
    const double C25600 = C15153 * C1298;
    const double C25596 = C15153 * C1294;
    const double C25826 = C15153 * C1488;
    const double C26040 = C15153 * C1674;
    const double C29174 = C15153 * C4098;
    const double C43915 = 2 * C43850;
    const double C10305 =
        (((-4 * C43850) / C43783 -
          (C43820 * (C44851 - (C43820 * 2 * C43850) / C43783) * C43788) /
              C43783) *
         ae) /
        C43783;
    const double C10306 =
        (-((C44851 - (C43820 * 2 * C43850) / C43783) * C43788) / C43783) /
        (2 * C43783);
    const double C29727 =
        (-(0 * be) / C43783) / (2 * C43783) -
        ((C44851 - (C43820 * 2 * C43850) / C43783) * be) / C43783;
    const double C29728 =
        (-(2 * C43850) / C43783) / (2 * C43783) - (0 * be) / C43783;
    const double C30073 =
        -(((-4 * C43850) / C43783 -
           (C43820 * (C44851 - (C43820 * 2 * C43850) / C43783) * C43788) /
               C43783) *
          be) /
        C43783;
    const double C30074 =
        (-((C44851 - (C43820 * 2 * C43850) / C43783) * C43788) / C43783) /
        (2 * C43783);
    const double C40021 = ((0 * ae) / C43783 - C43850 / C43786) / (2 * C43783) -
                          (0 * be) / C43783;
    const double C238 = C222 * C95;
    const double C236 = C222 * C99;
    const double C234 = C222 * C94;
    const double C403 = C222 * C157;
    const double C566 = C222 * C224;
    const double C564 = C222 * C223;
    const double C793 = C222 * C641;
    const double C1163 = C222 * C780;
    const double C1377 = C222 * C1225;
    const double C1747 = C222 * C1364;
    const double C5184 = C222 * C646;
    const double C5182 = C222 * C642;
    const double C5440 = C222 * C710;
    const double C7108 = C222 * C2252;
    const double C7686 = C222 * C2654;
    const double C568 = C557 * C95;
    const double C565 = C557 * C94;
    const double C1160 = C557 * C641;
    const double C1744 = C557 * C1225;
    const double C5666 = C557 * C642;
    const double C7451 = C557 * C2252;
    const double C8125 = C557 * C2654;
    const double C9976 = C9959 * C95;
    const double C9966 = C9959 * C99;
    const double C9962 = C9959 * C94;
    const double C10136 = C9959 * C157;
    const double C10311 = C9959 * C224;
    const double C10308 = C9959 * C223;
    const double C10546 = C9959 * C641;
    const double C10973 = C9959 * C780;
    const double C11228 = C9959 * C1225;
    const double C11703 = C9959 * C1364;
    const double C25014 = C9959 * C646;
    const double C25010 = C9959 * C642;
    const double C25226 = C9959 * C710;
    const double C26863 = C9959 * C2252;
    const double C27416 = C9959 * C2654;
    const double C9964 = C9960 * C1225;
    const double C10309 = C9960 * C1364;
    const double C25012 = C9960 * C2654;
    const double C40020 =
        (((C44851 - (C43820 * 2 * C43850) / C43783) * ae) / C43783 -
         C43907 / C43790) /
            (2 * C43783) -
        ((C43820 * ((0 * ae) / C43783 - C43850 / C43786) + C44914) * be) /
            C43783;
    const double C39941 = C44914 / C44734;
    const double C9855 = C44913 / C43783;
    const double C39939 = C44851 / C44734 - (C44913 * C44901) / C43786;
    const double C39940 = C44913 / C43790 - (C44914 * C44901) / C43783;
    const double C29735 = C29623 * C229;
    const double C29731 = C29623 * C224;
    const double C29911 = C29623 * C398;
    const double C29905 = C29623 * C397;
    const double C30080 = C29623 * C559;
    const double C35425 = C29623 * C784;
    const double C35421 = C29623 * C780;
    const double C35631 = C29623 * C972;
    const double C35843 = C29623 * C1154;
    const double C37231 = C29623 * C2349;
    const double C43946 = C43945 + C43943;
    const double C7169 = C4447 * C2390;
    const double C20969 = C44729 * C2390;
    const double C12897 = C44836 * C2719;
    const double C25602 = C44912 * C2719;
    const double C27337 = C15153 * C2719;
    const double C35991 = C44912 * C2719;
    const double C7685 = C44851 * C2775;
    const double C25017 = C44914 * C2775;
    const double C35427 = C44914 * C2775;
    const double C37779 = C29623 * C2775;
    const double C7763 = C4447 * C2828;
    const double C22805 = C44729 * C2828;
    const double C7986 = C4447 * C2990;
    const double C22975 = C44729 * C2990;
    const double C14988 = C4447 * C4309;
    const double C29462 = C44729 * C4309;
    const double C7106 = C222 * C2255;
    const double C7173 = C4447 * C2255;
    const double C20967 = C44729 * C2255;
    const double C26859 = C9959 * C2255;
    const double C7684 = C222 * C2657;
    const double C7767 = C4447 * C2657;
    const double C12896 = C155 * C2657;
    const double C22807 = C44729 * C2657;
    const double C25016 = C9960 * C2657;
    const double C27412 = C9959 * C2657;
    const double C35990 = C4518 * C2657;
    const double C37702 = C4517 * C2657;
    const double C14694 = C155 * C4048;
    const double C14815 = C4447 * C4048;
    const double C29291 = C44729 * C4048;
    const double C39518 = C4517 * C4048;
    const double C22303 = C222 * C6979;
    const double C22353 = C44729 * C6979;
    const double C22739 = C222 * C7525;
    const double C22803 = C44729 * C7525;
    const double C26857 = C9960 * C7525;
    const double C37704 = C4518 * C7525;
    const double C43472 = C155 * C14621;
    const double C43563 = C44729 * C14621;
    const double C43958 = C43955 * ae;
    const double C2773 =
        (C44027 * C44002 * C44040 + C44002 * C43955 * ae) / C43783;
    const double C2253 = C43932 * C43935 + C43955 * C44066;
    const double C2655 = C44027 * C44002 * C43955;
    const double C4046 = C43932 * C43935 + C43955 * C44115;
    const double C6978 =
        2 * C44002 * C43955 + C44002 * (C43955 + C43978 * C44066);
    const double C7524 = C44027 * (C43955 + C43978 * C44066);
    const double C14620 =
        2 * C44027 * C43955 + C44027 * (C43955 + C43978 * C44115);
    const double C43962 = C43960 + C43954;
    const double C44330 = C44328 + C43954;
    const double C44429 = C44427 + C43954;
    const double C9645 = (ae * (C44033 + C44027 * (C44027 * C44038 + C43954) +
                                C44027 * C43949 * ae) +
                          C44002 * (C44084 + ae * C44027 * C44013 +
                                    C44027 * (C44016 + C44027 * C44087))) /
                         C43786;
    const double C43961 = C43959 * C43939;
    const double C44071 = C44070 * C43939;
    const double C44120 = C44119 * C43939;
    const double C44331 = C44329 * ae;
    const double C9369 = C44002 * C43935 + C44329 * C44115;
    const double C29108 =
        2 * C44027 * C44329 + C44027 * (C44329 + C44461 * C44115);
    const double C44430 = C44428 * ae;
    const double C345 = C44836 * C335;
    const double C15413 = C15153 * C335;
    const double C570 = C44851 * C560;
    const double C30089 = C29623 * C560;
    const double C177 = C155 * C96;
    const double C244 = C222 * C96;
    const double C346 = C332 * C96;
    const double C571 = C557 * C96;
    const double C719 = C155 * C640;
    const double C789 = C222 * C640;
    const double C907 = C332 * C640;
    const double C1157 = C557 * C640;
    const double C4532 = C4518 * C640;
    const double C1303 = C155 * C1224;
    const double C1373 = C222 * C1224;
    const double C1491 = C332 * C1224;
    const double C1741 = C557 * C1224;
    const double C9974 = C9960 * C1224;
    const double C22305 = C222 * C6977;
    const double C22563 = C557 * C6977;
    const double C22741 = C222 * C7523;
    const double C23083 = C557 * C7523;
    const double C26861 = C9960 * C7523;
    const double C37700 = C4518 * C7523;
    const double C43474 = C155 * C14619;
    const double C43607 = C332 * C14619;
    const double C44229 = C44228 + C43943;
    const double C174 = C44836 * C163;
    const double C15235 = C15153 * C163;
    const double C176 = C44836 * C164;
    const double C1306 = C44836 * C1297;
    const double C16497 = C15153 * C1297;
    const double C11313 = C4447 * C1433;
    const double C11307 = C44903 * C1433;
    const double C25748 = C44729 * C1433;
    const double C31049 = C44903 * C1433;
    const double C1563 = C44851 * C1555;
    const double C10139 = C44914 * C1555;
    const double C29907 = C44914 * C1555;
    const double C31205 = C29623 * C1555;
    const double C1681 = C44836 * C1673;
    const double C16925 = C15153 * C1673;
    const double C15044 = C44836 * C4350;
    const double C29518 = C15153 * C4350;
    const double C172 = C44836 * C158;
    const double C344 = C155 * C158;
    const double C406 = C222 * C158;
    const double C4708 = C4517 * C158;
    const double C10142 = C9959 * C158;
    const double C15239 = C15153 * C158;
    const double C178 = C44836 * C159;
    const double C347 = C155 * C159;
    const double C408 = C222 * C159;
    const double C4710 = C4517 * C159;
    const double C720 = C44836 * C708;
    const double C908 = C155 * C708;
    const double C975 = C222 * C708;
    const double C4533 = C44912 * C708;
    const double C4705 = C4518 * C708;
    const double C5366 = C4517 * C708;
    const double C15237 = C44912 * C708;
    const double C724 = C44836 * C709;
    const double C911 = C155 * C709;
    const double C978 = C222 * C709;
    const double C4523 = C44912 * C709;
    const double C4702 = C4518 * C709;
    const double C5362 = C4517 * C709;
    const double C10757 = C9959 * C709;
    const double C15227 = C44912 * C709;
    const double C15815 = C15153 * C709;
    const double C1304 = C44836 * C1292;
    const double C1492 = C155 * C1292;
    const double C1559 = C222 * C1292;
    const double C6042 = C4517 * C1292;
    const double C10140 = C9960 * C1292;
    const double C1308 = C44836 * C1293;
    const double C1495 = C155 * C1293;
    const double C1562 = C222 * C1293;
    const double C6038 = C4517 * C1293;
    const double C10138 = C9960 * C1293;
    const double C11472 = C9959 * C1293;
    const double C16501 = C15153 * C1293;
    const double C4228 = C155 * C4095;
    const double C9592 = C4517 * C4095;
    const double C14697 = C44836 * C4095;
    const double C29178 = C15153 * C4095;
    const double C14875 = C155 * C14687;
    const double C39686 = C4517 * C14687;
    const double C43475 = C44836 * C14687;
    const double C44309 = C44308 + C43943;
    const double C241 = C44851 * C230;
    const double C29741 = C29623 * C230;
    const double C243 = C44851 * C231;
    const double C792 = C44851 * C783;
    const double C30305 = C29623 * C783;
    const double C979 = C44851 * C971;
    const double C30515 = C29623 * C971;
    const double C5521 = C4447 * C1035;
    const double C5519 = C44903 * C1035;
    const double C16205 = C44903 * C1035;
    const double C21150 = C44729 * C1035;
    const double C1097 = C44836 * C1089;
    const double C4885 = C44912 * C1089;
    const double C15589 = C44912 * C1089;
    const double C16283 = C15153 * C1089;
    const double C7287 = C44851 * C2475;
    const double C37395 = C29623 * C2475;
    const double C7913 = C44851 * C2937;
    const double C25229 = C44914 * C2937;
    const double C35633 = C44914 * C2937;
    const double C38005 = C29623 * C2937;
    const double C239 = C44851 * C225;
    const double C508 = C155 * C225;
    const double C569 = C222 * C225;
    const double C4888 = C4517 * C225;
    const double C10320 = C9959 * C225;
    const double C29745 = C29623 * C225;
    const double C245 = C44851 * C226;
    const double C510 = C155 * C226;
    const double C572 = C222 * C226;
    const double C10322 = C9959 * C226;
    const double C790 = C44851 * C778;
    const double C1093 = C155 * C778;
    const double C1158 = C222 * C778;
    const double C4886 = C4518 * C778;
    const double C10974 = C9959 * C778;
    const double C794 = C44851 * C779;
    const double C1096 = C155 * C779;
    const double C1161 = C222 * C779;
    const double C4884 = C4518 * C779;
    const double C5596 = C4517 * C779;
    const double C10970 = C9959 * C779;
    const double C30309 = C29623 * C779;
    const double C1374 = C44851 * C1362;
    const double C1677 = C155 * C1362;
    const double C1742 = C222 * C1362;
    const double C9975 = C44914 * C1362;
    const double C10317 = C9960 * C1362;
    const double C11704 = C9959 * C1362;
    const double C29743 = C44914 * C1362;
    const double C1378 = C44851 * C1363;
    const double C1680 = C155 * C1363;
    const double C1745 = C222 * C1363;
    const double C6257 = C4517 * C1363;
    const double C9965 = C44914 * C1363;
    const double C10314 = C9960 * C1363;
    const double C11700 = C9959 * C1363;
    const double C29733 = C44914 * C1363;
    const double C30971 = C29623 * C1363;
    const double C2602 = C222 * C2346;
    const double C7109 = C44851 * C2346;
    const double C12758 = C9959 * C2346;
    const double C37235 = C29623 * C2346;
    const double C3100 = C222 * C2772;
    const double C7687 = C44851 * C2772;
    const double C10972 = C9960 * C2772;
    const double C13309 = C155 * C2772;
    const double C13378 = C9959 * C2772;
    const double C25013 = C44914 * C2772;
    const double C35423 = C44914 * C2772;
    const double C36412 = C4518 * C2772;
    const double C37783 = C29623 * C2772;
    const double C38144 = C4517 * C2772;
    const double C7453 = C222 * C7099;
    const double C22306 = C44851 * C7099;
    const double C27185 = C9959 * C7099;
    const double C8127 = C222 * C7677;
    const double C12759 = C9960 * C7677;
    const double C22742 = C44851 * C7677;
    const double C26862 = C44914 * C7677;
    const double C27863 = C9959 * C7677;
    const double C37233 = C44914 * C7677;
    const double C38146 = C4518 * C7677;
    const double C43988 = C43985 + C43977;
    const double C44451 = C43957 + C44449;
    const double C29109 =
        (2 * C44027 * C44388 + C44027 * (C44388 + C44523 * C44115)) / C43783;
    const double C44549 = C43957 + C44547;
    const double C43987 = C43984 * C43939;
    const double C44024 = C44013 + C44022;
    const double C44341 = C44002 * C44339;
    const double C14688 =
        (2 * C44027 * C44015 + C44027 * (C44015 + C44339 * C44115)) / C43783;
    const double C44464 = C44460 + C43977;
    const double C44555 = C44013 + C44554;
    const double C44023 = C44016 + C44021;
    const double C44450 = C43969 + C44448;
    const double C43473 = C44836 * C14689;
    const double C44049 = C44038 + C44047;
    const double C44406 = C44002 * C44352;
    const double C44437 = C44027 * C44352;
    const double C7100 =
        (2 * C44002 * C44040 + C44002 * (C44040 + C44352 * C44066)) / C43783;
    const double C7678 = (C44027 * (C44040 + C44352 * C44066) +
                          (C43955 + C43978 * C44066) * ae) /
                         C43783;
    const double C44481 = C44038 + C44479;
    const double C44534 = C44027 * C44532;
    const double C44570 = C44566 + C43977;
    const double C44048 = C44041 + C44046;
    const double C29233 =
        (2 * (ae * C44388 + C44027 * C44522) + ae * (C44388 + C44523 * C44115) +
         C44027 *
             (C44522 + ae * C44027 * C44523 +
              C44027 * (ae * C44523 + C44027 * C44002 * std::pow(C43930, 6) *
                                          bs[6] * C44031))) /
        C43786;
    const double C44548 = C43969 + C44546;
    const double C22304 = C44851 * C7101;
    const double C22740 = C44851 * C7679;
    const double C26858 = C44914 * C7679;
    const double C37229 = C44914 * C7679;
    const double C44062 = C44016 + C44061;
    const double C44455 = C43969 + C44454;
    const double C29284 =
        (ae * (2 * C44027 * C43957 + C44027 * (C43957 + C43981 * C44115)) +
         C44002 * (2 * C44491 + C44027 * (C44060 + std::pow(C43930, 6) * bs[6] *
                                                       C44054 * C44115))) /
        C43786;
    const double C43557 =
        (3 * (C44057 + C44060 * C44115) +
         C44027 * (2 * C44491 + C44027 * (C44060 + std::pow(C43930, 6) * bs[6] *
                                                       C44054 * C44115))) /
        C43786;
    const double C22801 = C44729 * C7757;
    const double C27489 = C44729 * C9537;
    const double C43561 = C44729 * C14805;
    const double C44076 = C44075 * C43939;
    const double C7284 =
        (2 * (ae * C44040 + C44002 * C44351) + ae * (C44040 + C44352 * C44066) +
         C44002 *
             (C44351 + ae * C44002 * C44352 +
              C44002 * (ae * C44352 + C44002 * C43932 * std::pow(C43930, 6) *
                                          bs[6] * C44081))) /
        C43786;
    const double C14931 =
        (2 * (ae * C44015 + C44027 * C44351) + ae * (C44015 + C44339 * C44115) +
         C44027 *
             (C44351 + ae * C44027 * C44339 +
              C44027 * (ae * C44339 + C44027 * C43932 * std::pow(C43930, 6) *
                                          bs[6] * C44081))) /
        C43786;
    const double C44480 = C44041 + C44478;
    const double C44500 = C44016 + C44499;
    const double C976 = C44851 * C970;
    const double C1560 = C44851 * C1554;
    const double C10141 = C44914 * C1554;
    const double C29909 = C44914 * C1554;
    const double C44100 = C44041 + C44099;
    const double C29459 =
        (2 * (ae * C44388 + C44027 * C44528) + ae * (C44388 + C44523 * C44115) +
         C44027 *
             (C44528 + ae * C44027 * C44523 +
              C44027 * (ae * C44523 + C44027 * C44002 * std::pow(C43930, 6) *
                                          bs[6] * C44092))) /
        C43786;
    const double C44558 = C43969 + C44557;
    const double C22481 = C44729 * C7338;
    const double C22972 = C44729 * C7980;
    const double C7397 =
        (2 * (ae * C44040 + C44002 * C44357) + ae * (C44040 + C44352 * C44066) +
         C44002 *
             (C44357 + ae * C44002 * C44352 +
              C44002 * (ae * C44352 + C44002 * C43932 * std::pow(C43930, 6) *
                                          bs[6] * C44105))) /
        C43786;
    const double C15041 =
        (2 * (ae * C44015 + C44027 * C44357) + ae * (C44015 + C44339 * C44115) +
         C44027 *
             (C44357 + ae * C44027 * C44339 +
              C44027 * (ae * C44339 + C44027 * C43932 * std::pow(C43930, 6) *
                                          bs[6] * C44105))) /
        C43786;
    const double C44485 = C44041 + C44484;
    const double C44561 = C44016 + C44560;
    const double C1094 = C44836 * C1088;
    const double C4887 = C44912 * C1088;
    const double C15591 = C44912 * C1088;
    const double C1678 = C44836 * C1672;
    const double C44125 = C44124 * C43939;
    const double C22351 = C44729 * C7163;
    const double C27339 = C44912 * C7609;
    const double C37705 = C44912 * C7609;
    const double C29172 = C44912 * C9431;
    const double C39517 = C44912 * C9431;
    const double C42111 = C44836 * C9431;
    const double C43693 = C44729 * C14982;
    const double C27411 = C44914 * C9485;
    const double C37777 = C44914 * C9485;
    const double C27715 = C44729 * C9697;
    const double C27410 = C9960 * C9371;
    const double C27491 = C44729 * C9371;
    const double C39516 = C4518 * C9371;
    const double C42110 = C155 * C9371;
    const double C43986 = C43983 * ae;
    const double C97 = 3 * (C43935 + C43949 * C43936) +
                       C43932 * (2 * C43955 + C43932 * C43983);
    const double C643 = C44002 * (2 * C43955 + C43932 * C43983);
    const double C1227 = C44027 * (2 * C43955 + C43932 * C43983);
    const double C2254 = C43935 + C43949 * C43936 + C43983 * C44066;
    const double C2656 = C44027 * C44002 * C43983;
    const double C4047 = C43935 + C43949 * C43936 + C43983 * C44115;
    const double C9646 =
        (ae * (C44040 + C44027 * (C44027 * C44352 + C43982) +
               C44027 * C43978 * ae) +
         C44002 *
             (C44351 + ae * C44027 * C44339 +
              C44027 * (ae * C44339 + C44027 * C43932 * std::pow(C43930, 6) *
                                          bs[6] * C44081))) /
        C43786;
    const double C44342 = C44340 * ae;
    const double C9370 = C44002 * C43955 + C44340 * C44115;
    const double C44440 = C44438 * ae;
    const double C44468 = C44466 * ae;
    const double C22211 = 3 * (C43935 + C43949 * C44066) +
                          C44002 * (2 * C44329 + C44002 * C44466);
    const double C22618 = C44027 * (2 * C44329 + C44002 * C44466);
    const double C24026 = C43935 + C43949 * C44066 + C44466 * C44115;
    const double C44535 = C44533 * ae;
    const double C44574 = C44572 * ae;
    const double C43421 = 3 * (C43935 + C43949 * C44115) +
                          C44027 * (2 * C44428 + C44027 * C44572);
    const double C43735 = C44836 * C15040;
    const double C11471 = C44914 * C4269;
    const double C31203 = C44914 * C4269;
    const double C11623 = C44836 * C4351;
    const double C4229 = C155 * C4096;
    const double C9594 = C4517 * C4096;
    const double C11145 = C44836 * C4096;
    const double C11470 = C9960 * C4096;
    const double C22438 = C44851 * C7283;
    const double C5443 = C44851 * C2476;
    const double C5595 = C44912 * C2558;
    const double C16281 = C44912 * C2558;
    const double C2603 = C222 * C2347;
    const double C5191 = C44851 * C2347;
    const double C5594 = C4518 * C2347;
    const double C12760 = C9959 * C2347;
    const double C86 = C44906 / C44757;
    const double C84 = C44752 / C44757 - (C44904 * C44891) / C44892;
    const double C85 = C44904 / C44905 - (C44906 * C44891) / C44747;
    const double C1808 = C44904 / C44747;
    const double C2250 = C44908 / C44757;
    const double C636 = C44907 / C44747;
    const double C2248 = C44786 / C44757 - (C44907 * C44896) / C44892;
    const double C2249 = C44907 / C44905 - (C44908 * C44896) / C44747;
    const double C4044 = C44910 / C44757;
    const double C1222 = C44909 / C44747;
    const double C4042 = C44803 / C44757 - (C44909 * C44897) / C44892;
    const double C4043 = C44909 / C44905 - (C44910 * C44897) / C44747;
    const double C43792 = C43784 * C43791;
    const double C4454 = (-C43791 / C43783) / (2 * C43783) - (0 * be) / C43783;
    const double C20398 = -C43791 / C43783;
    const double C15161 = C15158 * C99;
    const double C15974 = C15158 * C708;
    const double C15970 = C15158 * C640;
    const double C15966 = C15158 * C709;
    const double C15962 = C15158 * C641;
    const double C16208 = C15158 * C778;
    const double C16204 = C15158 * C779;
    const double C17972 = C15158 * C2347;
    const double C31056 = C15158 * C1292;
    const double C31052 = C15158 * C1224;
    const double C31048 = C15158 * C1293;
    const double C31044 = C15158 * C1225;
    const double C31280 = C15158 * C1362;
    const double C31276 = C15158 * C1363;
    const double C34494 = C15158 * C4096;
    const double C15719 = C15151 * C650;
    const double C15965 = C15151 * C850;
    const double C15961 = C15151 * C646;
    const double C16207 = C15151 * C1035;
    const double C16203 = C15151 * C1036;
    const double C17813 = C15151 * C2255;
    const double C17809 = C15151 * C2390;
    const double C17975 = C15151 * C2516;
    const double C18365 = C15151 * C2657;
    const double C18361 = C15151 * C2828;
    const double C18575 = C15151 * C2990;
    const double C30803 = C15151 * C1234;
    const double C31055 = C15151 * C1433;
    const double C31047 = C15151 * C1434;
    const double C31043 = C15151 * C1230;
    const double C31275 = C15151 * C1620;
    const double C34501 = C15151 * C4048;
    const double C34497 = C15151 * C4183;
    const double C34661 = C15151 * C4309;
    const double C43886 = C43817 * C43885;
    const double C4707 = C4693 * C95;
    const double C4698 = C4693 * C94;
    const double C5361 = C4693 * C641;
    const double C6037 = C4693 * C1225;
    const double C36202 = C4693 * C1226;
    const double C37924 = C4693 * C2654;
    const double C39684 = C4693 * C4045;
    const double C4704 = C4694 * C640;
    const double C4701 = C4694 * C641;
    const double C36204 = C4694 * C2654;
    const double C37926 = C4694 * C7523;
    const double C15238 = C15221 * C95;
    const double C15228 = C15221 * C99;
    const double C15224 = C15221 * C94;
    const double C15414 = C15221 * C159;
    const double C15412 = C15221 * C158;
    const double C15403 = C15221 * C157;
    const double C15400 = C15221 * C156;
    const double C15592 = C15221 * C225;
    const double C15586 = C15221 * C224;
    const double C15814 = C15221 * C641;
    const double C16058 = C15221 * C708;
    const double C16057 = C15221 * C710;
    const double C16054 = C15221 * C709;
    const double C16282 = C15221 * C779;
    const double C16500 = C15221 * C1225;
    const double C16712 = C15221 * C1292;
    const double C16711 = C15221 * C1294;
    const double C16708 = C15221 * C1293;
    const double C16924 = C15221 * C1363;
    const double C20154 = C15221 * C4096;
    const double C20152 = C15221 * C4095;
    const double C25599 = C15221 * C1230;
    const double C25595 = C15221 * C1226;
    const double C26039 = C15221 * C1364;
    const double C27336 = C15221 * C2657;
    const double C27332 = C15221 * C2654;
    const double C27787 = C15221 * C2772;
    const double C29177 = C15221 * C4045;
    const double C29173 = C15221 * C4048;
    const double C29351 = C15221 * C14687;
    const double C15236 = C15222 * C640;
    const double C15226 = C15222 * C641;
    const double C15409 = C15222 * C708;
    const double C15406 = C15222 * C709;
    const double C15401 = C15222 * C710;
    const double C15590 = C15222 * C778;
    const double C15588 = C15222 * C779;
    const double C16280 = C15222 * C2347;
    const double C25601 = C15222 * C2657;
    const double C25597 = C15222 * C2654;
    const double C26041 = C15222 * C2772;
    const double C27338 = C15222 * C7525;
    const double C27334 = C15222 * C7523;
    const double C27789 = C15222 * C7677;
    const double C29171 = C15222 * C9371;
    const double C15411 = C15397 * C95;
    const double C15402 = C15397 * C94;
    const double C16053 = C15397 * C641;
    const double C16707 = C15397 * C1225;
    const double C25825 = C15397 * C1226;
    const double C27564 = C15397 * C2654;
    const double C29349 = C15397 * C4045;
    const double C15408 = C15398 * C640;
    const double C15405 = C15398 * C641;
    const double C25827 = C15398 * C2654;
    const double C27566 = C15398 * C7523;
    const double C180 = C169 + C170;
    const double C179 = C167 + C168;
    const double C513 = C505 + C506;
    const double C11151 = C11138 + C11139;
    const double C11150 = C11136 + C11137;
    const double C11627 = C11620 + C11621;
    const double C350 = C340 + C341;
    const double C11397 = C11390 + C1497;
    const double C20574 = C20447 * C708;
    const double C20571 = C20447 * C709;
    const double C20568 = C20447 * C710;
    const double C4535 = C4449 * C158;
    const double C4531 = C4449 * C163;
    const double C4525 = C4449 * C162;
    const double C4521 = C4449 * C157;
    const double C4709 = C4449 * C335;
    const double C4700 = C4449 * C334;
    const double C4889 = C4449 * C500;
    const double C4883 = C4449 * C499;
    const double C5111 = C4449 * C709;
    const double C5597 = C4449 * C1089;
    const double C5825 = C4449 * C1293;
    const double C5821 = C4449 * C1297;
    const double C6258 = C4449 * C1673;
    const double C35989 = C4449 * C1298;
    const double C35985 = C4449 * C1294;
    const double C36203 = C4449 * C1488;
    const double C36411 = C4449 * C1674;
    const double C37703 = C4449 * C2719;
    const double C39523 = C4449 * C4095;
    const double C39519 = C4449 * C4098;
    const double C39847 = C4449 * C4350;
    const double C20446 =
        (((0 - (C43817 * C43877) / C43783) * ae) / C43783 - (0 * be) / C43790) /
            (2 * C43783) -
        ((C43817 * (((C44836 - (C43817 * 2 * C43838) / C43783) * ae) / C43783 -
                    C43877 / C43790) +
          C4449) *
         be) /
            C43783 +
        (0 * ae) / C43783 - C43838 / C43786;
    const double C43916 = C43820 * C43915;
    const double C10319 = C10305 * C95;
    const double C10310 = C10305 * C94;
    const double C10969 = C10305 * C641;
    const double C11699 = C10305 * C1225;
    const double C25441 = C10305 * C642;
    const double C27183 = C10305 * C2252;
    const double C27861 = C10305 * C2654;
    const double C10316 = C10306 * C1224;
    const double C10313 = C10306 * C1225;
    const double C25443 = C10306 * C2654;
    const double C27181 = C10306 * C7523;
    const double C29744 = C29727 * C95;
    const double C29734 = C29727 * C99;
    const double C29730 = C29727 * C94;
    const double C29910 = C29727 * C158;
    const double C29904 = C29727 * C157;
    const double C30090 = C29727 * C226;
    const double C30088 = C29727 * C225;
    const double C30079 = C29727 * C224;
    const double C30076 = C29727 * C223;
    const double C30308 = C29727 * C641;
    const double C30514 = C29727 * C709;
    const double C30728 = C29727 * C778;
    const double C30727 = C29727 * C780;
    const double C30724 = C29727 * C779;
    const double C30970 = C29727 * C1225;
    const double C31204 = C29727 * C1293;
    const double C31430 = C29727 * C1362;
    const double C31429 = C29727 * C1364;
    const double C31426 = C29727 * C1363;
    const double C32484 = C29727 * C2347;
    const double C32482 = C29727 * C2346;
    const double C33086 = C29727 * C2772;
    const double C35424 = C29727 * C646;
    const double C35420 = C29727 * C642;
    const double C35630 = C29727 * C710;
    const double C37234 = C29727 * C2252;
    const double C37230 = C29727 * C2255;
    const double C37556 = C29727 * C7099;
    const double C37782 = C29727 * C2654;
    const double C37778 = C29727 * C2657;
    const double C38220 = C29727 * C7677;
    const double C29742 = C29728 * C1224;
    const double C29732 = C29728 * C1225;
    const double C29908 = C29728 * C1292;
    const double C29906 = C29728 * C1293;
    const double C30085 = C29728 * C1362;
    const double C30082 = C29728 * C1363;
    const double C30077 = C29728 * C1364;
    const double C30726 = C29728 * C2772;
    const double C31202 = C29728 * C4096;
    const double C32483 = C29728 * C7677;
    const double C35426 = C29728 * C2657;
    const double C35422 = C29728 * C2654;
    const double C37232 = C29728 * C7523;
    const double C37228 = C29728 * C7525;
    const double C37776 = C29728 * C9371;
    const double C30087 = C30073 * C95;
    const double C30078 = C30073 * C94;
    const double C30723 = C30073 * C641;
    const double C31425 = C30073 * C1225;
    const double C35842 = C30073 * C642;
    const double C37554 = C30073 * C2252;
    const double C38218 = C30073 * C2654;
    const double C30084 = C30074 * C1224;
    const double C30081 = C30074 * C1225;
    const double C35844 = C30074 * C2654;
    const double C37552 = C30074 * C7523;
    const double C247 = C236 + C237;
    const double C246 = C234 + C235;
    const double C411 = C403 + C404;
    const double C5197 = C5184 + C5185;
    const double C5196 = C5182 + C5183;
    const double C5447 = C5440 + C5441;
    const double C575 = C565 + C566;
    const double C5671 = C5666 + C1163;
    const double C40261 = C40020 * C1362;
    const double C40258 = C40020 * C1363;
    const double C40255 = C40020 * C1364;
    const double C40714 = C40020 * C2772;
    const double C42004 = C40020 * C7677;
    const double C9977 = C9855 * C225;
    const double C9973 = C9855 * C230;
    const double C9967 = C9855 * C229;
    const double C9963 = C9855 * C224;
    const double C10143 = C9855 * C398;
    const double C10137 = C9855 * C397;
    const double C10321 = C9855 * C560;
    const double C10312 = C9855 * C559;
    const double C10547 = C9855 * C779;
    const double C10543 = C9855 * C783;
    const double C10758 = C9855 * C971;
    const double C11229 = C9855 * C1363;
    const double C11473 = C9855 * C1555;
    const double C25015 = C9855 * C784;
    const double C25011 = C9855 * C780;
    const double C25227 = C9855 * C972;
    const double C25442 = C9855 * C1154;
    const double C26864 = C9855 * C2346;
    const double C26860 = C9855 * C2349;
    const double C27024 = C9855 * C2475;
    const double C27417 = C9855 * C2772;
    const double C27413 = C9855 * C2775;
    const double C27645 = C9855 * C2937;
    const double C40019 =
        (((0 - (C43820 * C43907) / C43783) * ae) / C43783 - (0 * be) / C43790) /
            (2 * C43783) -
        ((C43820 * (((C44851 - (C43820 * 2 * C43850) / C43783) * ae) / C43783 -
                    C43907 / C43790) +
          C9855) *
         be) /
            C43783 +
        (0 * ae) / C43783 - C43850 / C43786;
    const double C43947 = ae * C43946;
    const double C100 =
        (C43933 * C43931 * C43940 + C43932 * C43946 + C43932 * C43935 * ae) /
        C43783;
    const double C645 = (C44002 * C43946) / C43783;
    const double C1229 = (C44027 * C43946) / C43783;
    const double C7110 = C7106 + C7107;
    const double C7688 = C7684 + C7685;
    const double C12901 = C12896 + C12897;
    const double C25021 = C25016 + C25017;
    const double C35995 = C35990 + C35991;
    const double C14698 = C14694 + C14695;
    const double C44233 = C44232 + C43958;
    const double C44313 = C44312 + C43958;
    const double C2938 = (ae * (C44027 * C44040 + C43958) +
                          C44002 * (ae * C44015 + C44027 * C43932 * C44087)) /
                         C43786;
    const double C3101 = C222 * C2773;
    const double C5899 = C44851 * C2773;
    const double C6255 = C4518 * C2773;
    const double C10545 = C44914 * C2773;
    const double C10893 = C155 * C2773;
    const double C10967 = C9960 * C2773;
    const double C13380 = C9959 * C2773;
    const double C16922 = C15222 * C2773;
    const double C18572 = C15158 * C2773;
    const double C30307 = C44914 * C2773;
    const double C30721 = C29728 * C2773;
    const double C33088 = C29727 * C2773;
    const double C40717 = C40020 * C2773;
    const double C5108 = C4518 * C2253;
    const double C5190 = C222 * C2253;
    const double C5358 = C4694 * C2253;
    const double C5668 = C557 * C2253;
    const double C15812 = C15222 * C2253;
    const double C16050 = C15398 * C2253;
    const double C17810 = C15158 * C2253;
    const double C5822 = C4518 * C2655;
    const double C5898 = C222 * C2655;
    const double C6034 = C4694 * C2655;
    const double C6327 = C557 * C2655;
    const double C10470 = C155 * C2655;
    const double C10544 = C9960 * C2655;
    const double C10684 = C332 * C2655;
    const double C10966 = C10306 * C2655;
    const double C16498 = C15222 * C2655;
    const double C16704 = C15398 * C2655;
    const double C18362 = C15158 * C2655;
    const double C30306 = C29728 * C2655;
    const double C30720 = C30074 * C2655;
    const double C11144 = C155 * C4046;
    const double C11226 = C9960 * C4046;
    const double C11393 = C332 * C4046;
    const double C11696 = C10306 * C4046;
    const double C30968 = C29728 * C4046;
    const double C31422 = C30074 * C4046;
    const double C34498 = C15158 * C4046;
    const double C43964 = ae * C43962;
    const double C43963 = C43932 * C43962;
    const double C43973 = 2 * C43962;
    const double C44127 = C44002 * C43962;
    const double C44170 = C44027 * C43962;
    const double C2256 = (C43946 + C43962 * C44066) / C43783;
    const double C4049 = (C43946 + C43962 * C44115) / C43783;
    const double C44333 = ae * C44330;
    const double C44332 = C44002 * C44330;
    const double C44370 = C44027 * C44330;
    const double C44459 = 2 * C44330;
    const double C44432 = ae * C44429;
    const double C44431 = C44027 * C44429;
    const double C44565 = 2 * C44429;
    const double C27643 = C44914 * C9645;
    const double C38003 = C44914 * C9645;
    const double C649 =
        (2 * ae * C44002 * C43944 + C43932 * C44002 * C43961) / C43786;
    const double C1233 =
        (2 * ae * C44027 * C43944 + C43932 * C44027 * C43961) / C43786;
    const double C2258 =
        ((C43935 + C43936 * C43937 * C43941) * C43939 + C43961 * C44066) /
        C43786;
    const double C2660 = (C44027 * C44002 * C43961) / C43786;
    const double C4051 =
        ((C43935 + C43936 * C43937 * C43941) * C43939 + C43961 * C44115) /
        C43786;
    const double C336 =
        (2 * C43932 * C44071 +
         C43932 *
             (C44071 + (C43970 + C44066 * C43971 * C43972) * C43939 * C43936)) /
        C43786;
    const double C903 =
        (2 * ae * C43932 * C44008 + C44002 * C43932 * C44071) / C43786;
    const double C1487 = (C44027 * C43932 * C44071) / C43786;
    const double C2881 =
        (2 * ae * C44027 * C44008 + C44002 * C44027 * C44071) / C43786;
    const double C4224 =
        ((C43935 + C44066 * C43937 * C43941) * C43939 + C44071 * C44115) /
        C43786;
    const double C561 =
        (2 * C43932 * C44120 +
         C43932 *
             (C44120 + (C43970 + C44115 * C43971 * C43972) * C43939 * C43936)) /
        C43786;
    const double C1153 = (C44002 * C43932 * C44120) / C43786;
    const double C1737 =
        (2 * ae * C43932 * C44033 + C44027 * C43932 * C44120) / C43786;
    const double C2598 =
        ((C43935 + C44115 * C43937 * C43941) * C43939 + C44120 * C44066) /
        C43786;
    const double C3096 =
        (2 * ae * C44002 * C44033 + C44027 * C44002 * C44120) / C43786;
    const double C44403 = C44402 + C44331;
    const double C7909 = (ae * C44008 + C44027 * C44084 +
                          ae * (C44027 * C44002 * C44038 + C44331) +
                          C44002 * (ae * (C44027 * C44038 + C43954) +
                                    C44002 * (C44016 + C44027 * C44087))) /
                         C43786;
    const double C27414 = C9960 * C9369;
    const double C27859 = C10306 * C9369;
    const double C29175 = C15222 * C9369;
    const double C29347 = C15398 * C9369;
    const double C37780 = C29728 * C9369;
    const double C38216 = C30074 * C9369;
    const double C39520 = C4518 * C9369;
    const double C39682 = C4694 * C9369;
    const double C42108 = C155 * C9369;
    const double C42271 = C332 * C9369;
    const double C44230 = ae * C44229;
    const double C2302 =
        (C43933 * C43931 * C44005 + C44002 * C44229 + C44002 * C43935 * ae) /
        C43783;
    const double C2716 = (C44027 * C44229) / C43783;
    const double C9429 = (C44229 + C44330 * C44115) / C43783;
    const double C181 = C171 + C172;
    const double C351 = C343 + C344;
    const double C412 = C406 + C407;
    const double C184 = C177 + C178;
    const double C352 = C346 + C347;
    const double C413 = C408 + C409;
    const double C726 = C719 + C720;
    const double C915 = C907 + C908;
    const double C4542 = C4532 + C4533;
    const double C728 = C723 + C724;
    const double C916 = C910 + C911;
    const double C4537 = C4522 + C4523;
    const double C1310 = C1303 + C1304;
    const double C1499 = C1491 + C1492;
    const double C1312 = C1307 + C1308;
    const double C1500 = C1494 + C1495;
    const double C1566 = C1562 + C1563;
    const double C10145 = C10138 + C10139;
    const double C14877 = C14873 + C4228;
    const double C14699 = C14696 + C14697;
    const double C43610 = C43607 + C14875;
    const double C43477 = C43474 + C43475;
    const double C44310 = ae * C44309;
    const double C4139 =
        (C43933 * C43931 * C44030 + C44027 * C44309 + C44027 * C43935 * ae) /
        C43783;
    const double C982 = C978 + C979;
    const double C248 = C238 + C239;
    const double C514 = C508 + C509;
    const double C576 = C568 + C569;
    const double C251 = C244 + C245;
    const double C515 = C510 + C511;
    const double C577 = C571 + C572;
    const double C796 = C789 + C790;
    const double C1165 = C1157 + C1158;
    const double C798 = C793 + C794;
    const double C1100 = C1096 + C1097;
    const double C1166 = C1160 + C1161;
    const double C4891 = C4884 + C4885;
    const double C1380 = C1373 + C1374;
    const double C1749 = C1741 + C1742;
    const double C9984 = C9974 + C9975;
    const double C1382 = C1377 + C1378;
    const double C1684 = C1680 + C1681;
    const double C1750 = C1744 + C1745;
    const double C9979 = C9964 + C9965;
    const double C7455 = C7451 + C2602;
    const double C7111 = C7108 + C7109;
    const double C8129 = C8125 + C3100;
    const double C7689 = C7686 + C7687;
    const double C25019 = C25012 + C25013;
    const double C22566 = C22563 + C7453;
    const double C22308 = C22305 + C22306;
    const double C23086 = C23083 + C8127;
    const double C22746 = C22741 + C22742;
    const double C26867 = C26861 + C26862;
    const double C43991 = ae * C43988;
    const double C43990 = C43932 * C43988;
    const double C44134 = C44002 * C43988;
    const double C44177 = C44027 * C43988;
    const double C44215 = C43988 * C44066;
    const double C44283 = C43988 * C44115;
    const double C22737 =
        (ae * (2 * C44388 + C44002 * C44451) +
         C44027 * (2 * C44002 * C44044 +
                   C44002 * (C44044 +
                             std::pow(C43930, 6) * bs[6] * C44031 * C44066))) /
        C43786;
    const double C22798 =
        (2 * (ae * C44027 * C43957 + C44002 * C44491) + ae * C44027 * C44451 +
         C44002 * (C44491 + ae * C44027 * C44002 * C43981 +
                   C44002 * (ae * C44027 * C43981 + C44002 * C44027 *
                                                        std::pow(C43930, 6) *
                                                        bs[6] * C44054))) /
        C43786;
    const double C22969 =
        (ae * (2 * C44388 + C44002 * C44451) +
         C44027 * (2 * C44002 * C44098 +
                   C44002 * (C44098 +
                             std::pow(C43930, 6) * bs[6] * C44092 * C44066))) /
        C43786;
    const double C24111 =
        (C44037 + C44044 * C44066 + ae * C44027 * C44451 +
         C44027 *
             (ae * C44451 + C44027 * (C44044 + std::pow(C43930, 6) * bs[6] *
                                                   C44031 * C44066))) /
        C43786;
    const double C24270 =
        (C44095 + C44098 * C44066 + ae * C44027 * C44451 +
         C44027 *
             (ae * C44451 + C44027 * (C44098 + std::pow(C43930, 6) * bs[6] *
                                                   C44092 * C44066))) /
        C43786;
    const double C22212 = (3 * (C43944 + C43957 * C44066) +
                           C44002 * (2 * C44388 + C44002 * C44451)) /
                          C43783;
    const double C22619 = (C44027 * (2 * C44388 + C44002 * C44451)) / C43783;
    const double C24027 = (C43944 + C43957 * C44066 + C44451 * C44115) / C43783;
    const double C43422 = (3 * (C43944 + C43957 * C44115) +
                           C44027 * (2 * C44545 + C44027 * C44549)) /
                          C43783;
    const double C43989 = C43932 * C43987;
    const double C44132 = C44002 * C43987;
    const double C44175 = C44027 * C43987;
    const double C2259 = (2 * ae * (C43944 + C43957 * C44066) +
                          C43932 * (C43961 + C43987 * C44066)) /
                         C43786;
    const double C4052 = (2 * ae * (C43944 + C43957 * C44115) +
                          C43932 * (C43961 + C43987 * C44115)) /
                         C43786;
    const double C6981 =
        (2 * C44002 * C43961 + C44002 * (C43961 + C43987 * C44066)) / C43786;
    const double C7527 = (C44027 * (C43961 + C43987 * C44066)) / C43786;
    const double C7528 = (2 * ae * C44027 * (C43957 + C43981 * C44066) +
                          C43932 * C44027 *
                              (C43987 + (C43971 * C43972 +
                                         C43936 * bs[6] * std::pow(C43930, 6)) *
                                            C43939 * C44066)) /
                         C43786;
    const double C14623 =
        (2 * C44027 * C43961 + C44027 * (C43961 + C43987 * C44115)) / C43786;
    const double C24028 =
        (C43961 + C43987 * C44066 +
         (C43987 + (C43971 * C43972 + C43936 * bs[6] * std::pow(C43930, 6)) *
                       C43939 * C44066) *
             C44115) /
        C43786;
    const double C44236 = C44002 * C44024;
    const double C1557 =
        (ae * (2 * C44015 + C43932 * C44024) +
         C44027 * (2 * C43932 * C44087 +
                   C43932 * (C44087 +
                             std::pow(C43930, 6) * bs[6] * C44081 * C43936))) /
        C43786;
    const double C1675 =
        (ae * (2 * C44015 + C43932 * C44024) +
         C44027 * (2 * C43932 * C44111 +
                   C43932 * (C44111 +
                             std::pow(C43930, 6) * bs[6] * C44105 * C43936))) /
        C43786;
    const double C4270 =
        (C44084 + C44087 * C43936 + ae * C44027 * C44024 +
         C44027 *
             (ae * C44024 + C44027 * (C44087 + std::pow(C43930, 6) * bs[6] *
                                                   C44081 * C43936))) /
        C43786;
    const double C4352 =
        (C44108 + C44111 * C43936 + ae * C44027 * C44024 +
         C44027 *
             (ae * C44024 + C44027 * (C44111 + std::pow(C43930, 6) * bs[6] *
                                                   C44105 * C43936))) /
        C43786;
    const double C160 = (3 * (C44008 + C44013 * C43936) +
                         C43932 * (2 * C44015 + C43932 * C44024)) /
                        C43783;
    const double C711 = (C44002 * (2 * C44015 + C43932 * C44024) +
                         (2 * C43955 + C43932 * C43983) * ae) /
                        C43783;
    const double C1295 = (C44027 * (2 * C44015 + C43932 * C44024)) / C43783;
    const double C4097 = (C44008 + C44013 * C43936 + C44024 * C44115) / C43783;
    const double C44343 = C44341 + C43982;
    const double C14876 = C155 * C14688;
    const double C44469 = ae * C44464;
    const double C44467 = C44002 * C44464;
    const double C44495 = C44027 * C44464;
    const double C44509 = C44464 * C44115;
    const double C43468 = (3 * (C44008 + C44013 * C44115) +
                           C44027 * (2 * C44553 + C44027 * C44555)) /
                          C43783;
    const double C165 =
        (3 * (C44012 + ae * C44015 + C43932 * C44023) +
         ae * (2 * C44015 + C43932 * C44024) +
         C43932 *
             (2 * C44023 + ae * C44024 +
              C43932 * (C44019 + ae * C43932 * C44020 +
                        C43932 * (ae * C44020 + C43932 * std::pow(C43930, 6) *
                                                    bs[6] * C44006)))) /
        C43786;
    const double C1296 =
        (C44027 * (C44012 + ae * C44015 + C43932 * C44023)) / C43786;
    const double C1299 =
        (C44027 *
         (2 * C44023 + ae * C44024 +
          C43932 * (C44019 + ae * C43932 * C44020 +
                    C43932 * (ae * C44020 + C43932 * std::pow(C43930, 6) *
                                                bs[6] * C44006)))) /
        C43786;
    const double C4099 =
        (ae * C44008 + C43932 * C44012 + C44023 * C44115) / C43786;
    const double C4100 =
        (C44012 + ae * C44015 + C43932 * C44023 +
         (C44019 + ae * C43932 * C44020 +
          C43932 *
              (ae * C44020 + C43932 * std::pow(C43930, 6) * bs[6] * C44006)) *
             C44115) /
        C43786;
    const double C14690 =
        (2 * C44027 * C44023 +
         C44027 * (C44023 + (ae * C44020 +
                             C43932 * std::pow(C43930, 6) * bs[6] * C44006) *
                                C44115)) /
        C43786;
    const double C22260 =
        (3 * (C44012 + ae * C44388 + C44002 * C44450) +
         ae * (2 * C44388 + C44002 * C44451) +
         C44002 *
             (2 * C44450 + ae * C44451 +
              C44002 * (C44019 + ae * C44002 * C43981 +
                        C44002 * (ae * C43981 + C44002 * std::pow(C43930, 6) *
                                                    bs[6] * C44006)))) /
        C43786;
    const double C22685 =
        (C44027 *
         (2 * C44450 + ae * C44451 +
          C44002 * (C44019 + ae * C44002 * C43981 +
                    C44002 * (ae * C43981 + C44002 * std::pow(C43930, 6) *
                                                bs[6] * C44006)))) /
        C43786;
    const double C24071 =
        (C44012 + ae * C44388 + C44002 * C44450 +
         (C44019 + ae * C44002 * C43981 +
          C44002 *
              (ae * C43981 + C44002 * std::pow(C43930, 6) * bs[6] * C44006)) *
             C44115) /
        C43786;
    const double C29169 =
        (2 * C44027 * C44450 +
         C44027 * (C44450 + (ae * C43981 +
                             C44002 * std::pow(C43930, 6) * bs[6] * C44006) *
                                C44115)) /
        C43786;
    const double C43476 = C43472 + C43473;
    const double C44316 = C44027 * C44049;
    const double C973 =
        (ae * (2 * C44040 + C43932 * C44049) +
         C44002 * (2 * C43932 * C44087 +
                   C43932 * (C44087 +
                             std::pow(C43930, 6) * bs[6] * C44081 * C43936))) /
        C43786;
    const double C1091 =
        (ae * (2 * C44040 + C43932 * C44049) +
         C44002 * (2 * C43932 * C44111 +
                   C43932 * (C44111 +
                             std::pow(C43930, 6) * bs[6] * C44105 * C43936))) /
        C43786;
    const double C2477 =
        (C44084 + C44087 * C43936 + ae * C44002 * C44049 +
         C44002 *
             (ae * C44049 + C44002 * (C44087 + std::pow(C43930, 6) * bs[6] *
                                                   C44081 * C43936))) /
        C43786;
    const double C2559 =
        (C44108 + C44111 * C43936 + ae * C44002 * C44049 +
         C44002 *
             (ae * C44049 + C44002 * (C44111 + std::pow(C43930, 6) * bs[6] *
                                                   C44105 * C43936))) /
        C43786;
    const double C227 = (3 * (C44033 + C44038 * C43936) +
                         C43932 * (2 * C44040 + C43932 * C44049)) /
                        C43783;
    const double C781 = (C44002 * (2 * C44040 + C43932 * C44049)) / C43783;
    const double C1365 = (C44027 * (2 * C44040 + C43932 * C44049) +
                          (2 * C43955 + C43932 * C43983) * ae) /
                         C43783;
    const double C2348 = (C44033 + C44038 * C43936 + C44049 * C44066) / C43783;
    const double C2774 =
        (C44027 * C44002 * C44049 + C44002 * C43983 * ae) / C43783;
    const double C44407 = C44027 * C44406;
    const double C44439 = C44437 + C43982;
    const double C7454 = C222 * C7100;
    const double C8128 = C222 * C7678;
    const double C12761 = C9960 * C7678;
    const double C32485 = C29728 * C7678;
    const double C44516 = C44027 * C44481;
    const double C22299 = (3 * (C44033 + C44038 * C44066) +
                           C44002 * (2 * C44401 + C44002 * C44481)) /
                          C43783;
    const double C22736 = (C44027 * (2 * C44401 + C44002 * C44481) +
                           (2 * C44329 + C44002 * C44466) * ae) /
                          C43783;
    const double C44536 = C44534 + C44465;
    const double C44575 = ae * C44570;
    const double C44573 = C44027 * C44570;
    const double C232 =
        (3 * (C44037 + ae * C44040 + C43932 * C44048) +
         ae * (2 * C44040 + C43932 * C44049) +
         C43932 *
             (2 * C44048 + ae * C44049 +
              C43932 * (C44044 + ae * C43932 * C44045 +
                        C43932 * (ae * C44045 + C43932 * std::pow(C43930, 6) *
                                                    bs[6] * C44031)))) /
        C43786;
    const double C782 =
        (C44002 * (C44037 + ae * C44040 + C43932 * C44048)) / C43786;
    const double C785 =
        (C44002 *
         (2 * C44048 + ae * C44049 +
          C43932 * (C44044 + ae * C43932 * C44045 +
                    C43932 * (ae * C44045 + C43932 * std::pow(C43930, 6) *
                                                bs[6] * C44031)))) /
        C43786;
    const double C2350 =
        (ae * C44033 + C43932 * C44037 + C44048 * C44066) / C43786;
    const double C2351 =
        (C44037 + ae * C44040 + C43932 * C44048 +
         (C44044 + ae * C43932 * C44045 +
          C43932 *
              (ae * C44045 + C43932 * std::pow(C43930, 6) * bs[6] * C44031)) *
             C44066) /
        C43786;
    const double C7102 =
        (2 * C44002 * C44048 +
         C44002 * (C44048 + (ae * C44045 +
                             C43932 * std::pow(C43930, 6) * bs[6] * C44031) *
                                C44066)) /
        C43786;
    const double C43518 =
        (3 * (C44037 + ae * C44545 + C44027 * C44548) +
         ae * (2 * C44545 + C44027 * C44549) +
         C44027 *
             (2 * C44548 + ae * C44549 +
              C44027 * (C44044 + ae * C44027 * C43981 +
                        C44027 * (ae * C43981 + C44027 * std::pow(C43930, 6) *
                                                    bs[6] * C44031)))) /
        C43786;
    const double C22307 = C22303 + C22304;
    const double C22745 = C22739 + C22740;
    const double C26865 = C26857 + C26858;
    const double C293 =
        (3 * (C44057 + ae * C44015 + C43932 * C44062) +
         ae * (2 * C44015 + C43932 * C44024) +
         C43932 *
             (2 * C44062 + ae * C44024 +
              C43932 * (C44060 + ae * C43932 * C44020 +
                        C43932 * (ae * C44020 + C43932 * std::pow(C43930, 6) *
                                                    bs[6] * C44054)))) /
        C43786;
    const double C1432 =
        (C44027 * (C44057 + ae * C44015 + C43932 * C44062)) / C43786;
    const double C1435 =
        (C44027 *
         (2 * C44062 + ae * C44024 +
          C43932 * (C44060 + ae * C43932 * C44020 +
                    C43932 * (ae * C44020 + C43932 * std::pow(C43930, 6) *
                                                bs[6] * C44054)))) /
        C43786;
    const double C4184 =
        (ae * C44008 + C43932 * C44057 + C44062 * C44115) / C43786;
    const double C4185 =
        (C44057 + ae * C44015 + C43932 * C44062 +
         (C44060 + ae * C43932 * C44020 +
          C43932 *
              (ae * C44020 + C43932 * std::pow(C43930, 6) * bs[6] * C44054)) *
             C44115) /
        C43786;
    const double C14806 =
        (2 * C44027 * C44062 +
         C44027 * (C44062 + (ae * C44020 +
                             C43932 * std::pow(C43930, 6) * bs[6] * C44054) *
                                C44115)) /
        C43786;
    const double C22348 =
        (3 * (C44057 + ae * C44388 + C44002 * C44455) +
         ae * (2 * C44388 + C44002 * C44451) +
         C44002 *
             (2 * C44455 + ae * C44451 +
              C44002 * (C44060 + ae * C44002 * C43981 +
                        C44002 * (ae * C43981 + C44002 * std::pow(C43930, 6) *
                                                    bs[6] * C44054)))) /
        C43786;
    const double C44338 = C43932 * C44076;
    const double C44458 = C44002 * C44076;
    const double C44493 = C44027 * C44076;
    const double C337 =
        (3 * (C44071 + C44076 * C43936) +
         C43932 * (2 * C43932 * C44076 +
                   C43932 * (C44076 + (C43971 * C43972 +
                                       C44066 * bs[6] * std::pow(C43930, 6)) *
                                          C43939 * C43936))) /
        C43786;
    const double C902 = (2 * ae * (C44008 + C44013 * C43936) +
                         C44002 * (C44071 + C44076 * C43936)) /
                        C43786;
    const double C905 =
        (2 * ae * (2 * C44015 + C43932 * C44024) +
         C44002 * (2 * C43932 * C44076 +
                   C43932 * (C44076 + (C43971 * C43972 +
                                       C44066 * bs[6] * std::pow(C43930, 6)) *
                                          C43939 * C43936))) /
        C43786;
    const double C1486 = (C44027 * (C44071 + C44076 * C43936)) / C43786;
    const double C1489 =
        (C44027 * (2 * C43932 * C44076 +
                   C43932 * (C44076 + (C43971 * C43972 +
                                       C44066 * bs[6] * std::pow(C43930, 6)) *
                                          C43939 * C43936))) /
        C43786;
    const double C2882 =
        (2 * ae * C44027 * C44015 + C44002 * C44027 * C43932 * C44076) / C43786;
    const double C2883 = (2 * ae * C44027 * C44024 +
                          C44002 * C44027 *
                              (C44076 + (C43971 * C43972 +
                                         C44066 * bs[6] * std::pow(C43930, 6)) *
                                            C43939 * C43936)) /
                         C43786;
    const double C4225 = (C43932 * C44071 + C43932 * C44076 * C44115) / C43786;
    const double C4226 =
        (C44071 + C44076 * C43936 +
         (C44076 + (C43971 * C43972 + C44066 * bs[6] * std::pow(C43930, 6)) *
                       C43939 * C43936) *
             C44115) /
        C43786;
    const double C9589 = (2 * ae * (C44008 + C44013 * C44115) +
                          C44002 * (C44071 + C44076 * C44115)) /
                         C43786;
    const double C14869 =
        (2 * C44027 * C44071 + C44027 * (C44071 + C44076 * C44115)) / C43786;
    const double C22435 =
        (3 * (C44084 + ae * C44401 + C44002 * C44480) +
         ae * (2 * C44401 + C44002 * C44481) +
         C44002 *
             (2 * C44480 + ae * C44481 +
              C44002 * (C44087 + ae * C44002 * C44045 +
                        C44002 * (ae * C44045 + C44002 * std::pow(C43930, 6) *
                                                    bs[6] * C44081)))) /
        C43786;
    const double C24231 =
        (C44084 + ae * C44027 * C44013 + C44027 * C44500 +
         ae * (C44401 + C44027 * (C44027 * C44002 * C44045 + C44465) +
               C44027 * C44461 * ae) +
         C44002 *
             (ae * (C44038 + C44027 * (C44027 * C44045 + C43977) +
                    C44027 * C43970 * ae) +
              C44002 * (C44087 + ae * C44027 * C44020 +
                        C44027 * (ae * C44020 + C44027 * std::pow(C43930, 6) *
                                                    bs[6] * C44081)))) /
        C43786;
    const double C29408 =
        (ae * (2 * C44429 +
               C44027 * (C44038 + C44027 * (C44027 * C44045 + C43977) +
                         C44027 * C43970 * ae) +
               (C43949 + C43970 * C44115) * ae) +
         C44002 *
             (2 * C44500 + ae * (C44013 + C44020 * C44115) +
              C44027 * (C44087 + ae * C44027 * C44020 +
                        C44027 * (ae * C44020 + C44027 * std::pow(C43930, 6) *
                                                    bs[6] * C44081)))) /
        C43786;
    const double C43651 =
        (3 * (C44084 + ae * C44553 + C44027 * C44500) +
         ae * (2 * C44553 + C44027 * C44555) +
         C44027 *
             (2 * C44500 + ae * C44555 +
              C44027 * (C44087 + ae * C44027 * C44020 +
                        C44027 * (ae * C44020 + C44027 * std::pow(C43930, 6) *
                                                    bs[6] * C44081)))) /
        C43786;
    const double C981 = C975 + C976;
    const double C1565 = C1559 + C1560;
    const double C10146 = C10140 + C10141;
    const double C459 =
        (3 * (C44095 + ae * C44040 + C43932 * C44100) +
         ae * (2 * C44040 + C43932 * C44049) +
         C43932 *
             (2 * C44100 + ae * C44049 +
              C43932 * (C44098 + ae * C43932 * C44045 +
                        C43932 * (ae * C44045 + C43932 * std::pow(C43930, 6) *
                                                    bs[6] * C44092)))) /
        C43786;
    const double C1034 =
        (C44002 * (C44095 + ae * C44040 + C43932 * C44100)) / C43786;
    const double C1037 =
        (C44002 *
         (2 * C44100 + ae * C44049 +
          C43932 * (C44098 + ae * C43932 * C44045 +
                    C43932 * (ae * C44045 + C43932 * std::pow(C43930, 6) *
                                                bs[6] * C44092)))) /
        C43786;
    const double C2517 =
        (ae * C44033 + C43932 * C44095 + C44100 * C44066) / C43786;
    const double C2518 =
        (C44095 + ae * C44040 + C43932 * C44100 +
         (C44098 + ae * C43932 * C44045 +
          C43932 *
              (ae * C44045 + C43932 * std::pow(C43930, 6) * bs[6] * C44092)) *
             C44066) /
        C43786;
    const double C7339 =
        (2 * C44002 * C44100 +
         C44002 * (C44100 + (ae * C44045 +
                             C43932 * std::pow(C43930, 6) * bs[6] * C44092) *
                                C44066)) /
        C43786;
    const double C43690 =
        (3 * (C44095 + ae * C44545 + C44027 * C44558) +
         ae * (2 * C44545 + C44027 * C44549) +
         C44027 *
             (2 * C44558 + ae * C44549 +
              C44027 * (C44098 + ae * C44027 * C43981 +
                        C44027 * (ae * C43981 + C44027 * std::pow(C43930, 6) *
                                                    bs[6] * C44092)))) /
        C43786;
    const double C22522 =
        (3 * (C44108 + ae * C44401 + C44002 * C44485) +
         ae * (2 * C44401 + C44002 * C44481) +
         C44002 *
             (2 * C44485 + ae * C44481 +
              C44002 * (C44111 + ae * C44002 * C44045 +
                        C44002 * (ae * C44045 + C44002 * std::pow(C43930, 6) *
                                                    bs[6] * C44105)))) /
        C43786;
    const double C43732 =
        (3 * (C44108 + ae * C44553 + C44027 * C44561) +
         ae * (2 * C44553 + C44027 * C44555) +
         C44027 *
             (2 * C44561 + ae * C44555 +
              C44027 * (C44111 + ae * C44027 * C44020 +
                        C44027 * (ae * C44020 + C44027 * std::pow(C43930, 6) *
                                                    bs[6] * C44105)))) /
        C43786;
    const double C1099 = C1093 + C1094;
    const double C4892 = C4886 + C4887;
    const double C1683 = C1677 + C1678;
    const double C44360 = C43932 * C44125;
    const double C44531 = C44002 * C44125;
    const double C44564 = C44027 * C44125;
    const double C562 =
        (3 * (C44120 + C44125 * C43936) +
         C43932 * (2 * C43932 * C44125 +
                   C43932 * (C44125 + (C43971 * C43972 +
                                       C44115 * bs[6] * std::pow(C43930, 6)) *
                                          C43939 * C43936))) /
        C43786;
    const double C1152 = (C44002 * (C44120 + C44125 * C43936)) / C43786;
    const double C1155 =
        (C44002 * (2 * C43932 * C44125 +
                   C43932 * (C44125 + (C43971 * C43972 +
                                       C44115 * bs[6] * std::pow(C43930, 6)) *
                                          C43939 * C43936))) /
        C43786;
    const double C1736 = (2 * ae * (C44033 + C44038 * C43936) +
                          C44027 * (C44120 + C44125 * C43936)) /
                         C43786;
    const double C1739 =
        (2 * ae * (2 * C44040 + C43932 * C44049) +
         C44027 * (2 * C43932 * C44125 +
                   C43932 * (C44125 + (C43971 * C43972 +
                                       C44115 * bs[6] * std::pow(C43930, 6)) *
                                          C43939 * C43936))) /
        C43786;
    const double C2599 = (C43932 * C44120 + C43932 * C44125 * C44066) / C43786;
    const double C2600 =
        (C44120 + C44125 * C43936 +
         (C44125 + (C43971 * C43972 + C44115 * bs[6] * std::pow(C43930, 6)) *
                       C43939 * C43936) *
             C44066) /
        C43786;
    const double C3097 =
        (2 * ae * C44002 * C44040 + C44027 * C44002 * C43932 * C44125) / C43786;
    const double C3098 = (2 * ae * C44002 * C44049 +
                          C44027 * C44002 *
                              (C44125 + (C43971 * C43972 +
                                         C44115 * bs[6] * std::pow(C43930, 6)) *
                                            C43939 * C43936)) /
                         C43786;
    const double C7448 =
        (2 * C44002 * C44120 + C44002 * (C44120 + C44125 * C44066)) / C43786;
    const double C8122 = (2 * ae * (C44033 + C44038 * C44066) +
                          C44027 * (C44120 + C44125 * C44066)) /
                         C43786;
    const double C22561 =
        (3 * (C44120 + C44125 * C44066) +
         C44002 * (2 * C44002 * C44125 +
                   C44002 * (C44125 + (C43971 * C43972 +
                                       C44115 * bs[6] * std::pow(C43930, 6)) *
                                          C43939 * C44066))) /
        C43786;
    const double C23081 =
        (2 * ae * (2 * C44401 + C44002 * C44481) +
         C44027 * (2 * C44002 * C44125 +
                   C44002 * (C44125 + (C43971 * C43972 +
                                       C44115 * bs[6] * std::pow(C43930, 6)) *
                                          C43939 * C44066))) /
        C43786;
    const double C37709 = C37704 + C37705;
    const double C27418 = C27410 + C27411;
    const double C39524 = C39516 + C39517;
    const double C42113 = C42110 + C42111;
    const double C2939 =
        (ae * (C44027 * C44049 + C43986) +
         C44002 *
             (ae * C44024 + C44027 * (C44087 + std::pow(C43930, 6) * bs[6] *
                                                   C44081 * C43936))) /
        C43786;
    const double C7910 =
        (ae * C44015 + C44027 * C44351 +
         ae * (C44027 * C44002 * C44352 + C44342) +
         C44002 *
             (ae * (C44027 * C44352 + C43982) +
              C44002 * (ae * C44339 + C44027 * C43932 * std::pow(C43930, 6) *
                                          bs[6] * C44081))) /
        C43786;
    const double C11474 = C11470 + C11471;
    const double C5598 = C5594 + C5595;
    const double C43793 = C43792 / C43783;
    const double C4457 = C4454 * C99;
    const double C5282 = C4454 * C708;
    const double C5278 = C4454 * C640;
    const double C5274 = C4454 * C709;
    const double C5270 = C4454 * C641;
    const double C5522 = C4454 * C778;
    const double C5518 = C4454 * C779;
    const double C7170 = C4454 * C2253;
    const double C7341 = C4454 * C2347;
    const double C7764 = C4454 * C2655;
    const double C7983 = C4454 * C2773;
    const double C11314 = C4454 * C1292;
    const double C11310 = C4454 * C1224;
    const double C11306 = C4454 * C1293;
    const double C11302 = C4454 * C1225;
    const double C11548 = C4454 * C1362;
    const double C11544 = C4454 * C1363;
    const double C14812 = C4454 * C4046;
    const double C14808 = C4454 * C4096;
    const double C20405 = C20398 * C99;
    const double C20402 = C20398 * C2255;
    const double C20401 = C20398 * C646;
    const double C20400 = C20398 * C98;
    const double C20782 = C20398 * C6979;
    const double C20974 = C20398 * C2253;
    const double C20972 = C20398 * C709;
    const double C20970 = C20398 * C641;
    const double C20966 = C20398 * C2252;
    const double C20964 = C20398 * C710;
    const double C20962 = C20398 * C642;
    const double C21152 = C20398 * C2347;
    const double C21149 = C20398 * C779;
    const double C21146 = C20398 * C2346;
    const double C21143 = C20398 * C780;
    const double C21314 = C20398 * C1230;
    const double C21313 = C20398 * C2657;
    const double C21312 = C20398 * C7525;
    const double C22352 = C20398 * C6977;
    const double C22480 = C20398 * C7099;
    const double C22806 = C20398 * C2654;
    const double C22802 = C20398 * C7523;
    const double C22974 = C20398 * C2772;
    const double C22971 = C20398 * C7677;
    const double C24031 = C20398 * C9371;
    const double C24030 = C20398 * C4048;
    const double C25088 = C20398 * C2655;
    const double C25305 = C20398 * C2773;
    const double C25747 = C20398 * C1293;
    const double C25745 = C20398 * C1225;
    const double C25741 = C20398 * C1294;
    const double C25739 = C20398 * C1226;
    const double C25969 = C20398 * C1363;
    const double C25967 = C20398 * C1364;
    const double C27490 = C20398 * C9369;
    const double C29115 = C20398 * C29109;
    const double C29114 = C20398 * C14621;
    const double C29290 = C20398 * C4045;
    const double C29288 = C20398 * C4095;
    const double C40941 = C20398 * C4096;
    const double C40939 = C20398 * C4046;
    const double C43562 = C20398 * C14619;
    const double C43560 = C20398 * C14687;
    const double C16211 = C16204 + C16205;
    const double C31061 = C31048 + C31049;
    const double C43887 = C43886 / C43783;
    const double C4715 = C4707 + C4708;
    const double C4712 = C4698 + C4699;
    const double C5369 = C5361 + C5362;
    const double C6045 = C6037 + C6038;
    const double C36206 = C36202 + C6041;
    const double C39689 = C39684 + C9592;
    const double C4714 = C4704 + C4705;
    const double C4713 = C4701 + C4702;
    const double C15247 = C15238 + C15239;
    const double C15242 = C15228 + C15229;
    const double C15240 = C15224 + C15225;
    const double C15597 = C15592 + C15593;
    const double C15594 = C15586 + C15587;
    const double C15819 = C15814 + C15815;
    const double C16285 = C16282 + C16283;
    const double C16505 = C16500 + C16501;
    const double C16927 = C16924 + C16925;
    const double C25605 = C25599 + C25600;
    const double C25603 = C25595 + C25596;
    const double C26043 = C26039 + C26040;
    const double C27342 = C27336 + C27337;
    const double C29182 = C29177 + C29178;
    const double C29180 = C29173 + C29174;
    const double C15246 = C15236 + C15237;
    const double C15241 = C15226 + C15227;
    const double C15596 = C15590 + C15591;
    const double C15595 = C15588 + C15589;
    const double C16284 = C16280 + C16281;
    const double C25606 = C25601 + C25602;
    const double C27343 = C27338 + C27339;
    const double C29179 = C29171 + C29172;
    const double C15419 = C15411 + C15412;
    const double C15416 = C15402 + C15403;
    const double C16061 = C16053 + C16054;
    const double C16715 = C16707 + C16708;
    const double C25829 = C25825 + C16711;
    const double C29354 = C29349 + C20152;
    const double C15418 = C15408 + C15409;
    const double C15417 = C15405 + C15406;
    const double C504 = C179 * C222;
    const double C10248 = C179 * C9959;
    const double C30016 = C179 * C29727;
    const double C516 = C513 * C44851;
    const double C10249 = C513 * C9855;
    const double C30017 = C513 * C29623;
    const double C11155 = C11151 * C4447;
    const double C30891 = C11151 * C15151;
    const double C40826 = C11151 * C44729;
    const double C40825 = C11150 * C20398;
    const double C353 = C350 + C341;
    const double C11399 = C11397 + C1497;
    const double C4543 = C4534 + C4535;
    const double C4538 = C4524 + C4525;
    const double C4536 = C4520 + C4521;
    const double C4893 = C4888 + C4889;
    const double C4890 = C4882 + C4883;
    const double C5115 = C5110 + C5111;
    const double C5599 = C5596 + C5597;
    const double C5829 = C5824 + C5825;
    const double C6260 = C6257 + C6258;
    const double C35994 = C35988 + C35989;
    const double C35992 = C35984 + C35985;
    const double C36414 = C36410 + C36411;
    const double C37708 = C37702 + C37703;
    const double C39527 = C39522 + C39523;
    const double C39525 = C39518 + C39519;
    const double C20573 = C20446 * C158;
    const double C20572 = C20446 * C157;
    const double C20567 = C20446 * C156;
    const double C21039 = C20446 * C709;
    const double C21038 = C20446 * C710;
    const double C21521 = C20446 * C1293;
    const double C21520 = C20446 * C1294;
    const double C24191 = C20446 * C4095;
    const double C43917 = C43916 / C43783;
    const double C10327 = C10319 + C10320;
    const double C10324 = C10310 + C10311;
    const double C10977 = C10969 + C10970;
    const double C11707 = C11699 + C11700;
    const double C25445 = C25441 + C10973;
    const double C27188 = C27183 + C12758;
    const double C27866 = C27861 + C13378;
    const double C10326 = C10316 + C10317;
    const double C10325 = C10313 + C10314;
    const double C25446 = C25443 + C10972;
    const double C27187 = C27181 + C12759;
    const double C29753 = C29744 + C29745;
    const double C29748 = C29734 + C29735;
    const double C29746 = C29730 + C29731;
    const double C29915 = C29910 + C29911;
    const double C29912 = C29904 + C29905;
    const double C30313 = C30308 + C30309;
    const double C30517 = C30514 + C30515;
    const double C30975 = C30970 + C30971;
    const double C31207 = C31204 + C31205;
    const double C35430 = C35424 + C35425;
    const double C35428 = C35420 + C35421;
    const double C35634 = C35630 + C35631;
    const double C37239 = C37234 + C37235;
    const double C37237 = C37230 + C37231;
    const double C37787 = C37782 + C37783;
    const double C37785 = C37778 + C37779;
    const double C29752 = C29742 + C29743;
    const double C29747 = C29732 + C29733;
    const double C29914 = C29908 + C29909;
    const double C29913 = C29906 + C29907;
    const double C31206 = C31202 + C31203;
    const double C35431 = C35426 + C35427;
    const double C35429 = C35422 + C35423;
    const double C37238 = C37232 + C37233;
    const double C37236 = C37228 + C37229;
    const double C37784 = C37776 + C37777;
    const double C30095 = C30087 + C30088;
    const double C30092 = C30078 + C30079;
    const double C30731 = C30723 + C30724;
    const double C31433 = C31425 + C31426;
    const double C35846 = C35842 + C30727;
    const double C37559 = C37554 + C32482;
    const double C38223 = C38218 + C33086;
    const double C30094 = C30084 + C30085;
    const double C30093 = C30081 + C30082;
    const double C35847 = C35844 + C30726;
    const double C37558 = C37552 + C32483;
    const double C402 = C246 * C155;
    const double C4774 = C246 * C4517;
    const double C15478 = C246 * C15221;
    const double C414 = C411 * C44836;
    const double C4775 = C411 * C4449;
    const double C15479 = C411 * C15153;
    const double C5201 = C5197 * C4447;
    const double C15887 = C5197 * C15151;
    const double C20905 = C5197 * C44729;
    const double C20904 = C5196 * C20398;
    const double C578 = C575 + C566;
    const double C5673 = C5671 + C1163;
    const double C9985 = C9976 + C9977;
    const double C9980 = C9966 + C9967;
    const double C9978 = C9962 + C9963;
    const double C10147 = C10142 + C10143;
    const double C10144 = C10136 + C10137;
    const double C10551 = C10546 + C10547;
    const double C10760 = C10757 + C10758;
    const double C11233 = C11228 + C11229;
    const double C11475 = C11472 + C11473;
    const double C25020 = C25014 + C25015;
    const double C25018 = C25010 + C25011;
    const double C25230 = C25226 + C25227;
    const double C26868 = C26863 + C26864;
    const double C26866 = C26859 + C26860;
    const double C27421 = C27416 + C27417;
    const double C27419 = C27412 + C27413;
    const double C40260 = C40019 * C225;
    const double C40259 = C40019 * C224;
    const double C40254 = C40019 * C223;
    const double C40716 = C40019 * C779;
    const double C40715 = C40019 * C780;
    const double C41207 = C40019 * C1363;
    const double C41206 = C40019 * C1364;
    const double C42003 = C40019 * C2346;
    const double C42481 = C40019 * C2772;
    const double C105 =
        ((C43935 + C43936 * C43937 * C43941) * C43939 + C43947 + C43947 +
         C43932 *
             (2 * ae * C43944 +
              C43932 *
                  (C43937 * C43941 + C43936 * bs[4] * std::pow(C43930, 4)) *
                  C43939)) /
        C43786;
    const double C713 =
        (C43947 + C44002 * (ae * C44008 + C43932 * C44012)) / C43786;
    const double C849 =
        (C43947 + C44002 * (ae * C44008 + C43932 * C44057)) / C43786;
    const double C1367 =
        (C43947 + C44027 * (ae * C44033 + C43932 * C44037)) / C43786;
    const double C1619 =
        (C43947 + C44027 * (ae * C44033 + C43932 * C44095)) / C43786;
    const double C111 = C92 * C100;
    const double C173 = C155 * C100;
    const double C240 = C222 * C100;
    const double C4462 = C4454 * C100;
    const double C4530 = C4517 * C100;
    const double C9972 = C9959 * C100;
    const double C15166 = C15158 * C100;
    const double C15234 = C15221 * C100;
    const double C20406 = C20398 * C100;
    const double C29740 = C29727 * C100;
    const double C721 = C155 * C645;
    const double C791 = C222 * C645;
    const double C4459 = C4454 * C645;
    const double C4526 = C4518 * C645;
    const double C5106 = C4517 * C645;
    const double C5277 = C4447 * C645;
    const double C5271 = C44903 * C645;
    const double C10542 = C9959 * C645;
    const double C15163 = C15158 * C645;
    const double C15230 = C15222 * C645;
    const double C15810 = C15221 * C645;
    const double C15969 = C15151 * C645;
    const double C15963 = C44903 * C645;
    const double C20404 = C20398 * C645;
    const double C20971 = C44729 * C645;
    const double C30304 = C29727 * C645;
    const double C1305 = C155 * C1229;
    const double C1375 = C222 * C1229;
    const double C5746 = C4454 * C1229;
    const double C5820 = C4517 * C1229;
    const double C9968 = C9960 * C1229;
    const double C11224 = C9959 * C1229;
    const double C11309 = C4447 * C1229;
    const double C11303 = C44903 * C1229;
    const double C16422 = C15158 * C1229;
    const double C16496 = C15221 * C1229;
    const double C21315 = C20398 * C1229;
    const double C25746 = C44729 * C1229;
    const double C29736 = C29728 * C1229;
    const double C30966 = C29727 * C1229;
    const double C31051 = C15151 * C1229;
    const double C31045 = C44903 * C1229;
    const double C7112 = C7110 * C4447;
    const double C17754 = C7110 * C15151;
    const double C20907 = C7110 * C44729;
    const double C7690 = C7688 * C4447;
    const double C18290 = C7688 * C15151;
    const double C22743 = C7688 * C44729;
    const double C12903 = C12901 * C4447;
    const double C32619 = C12901 * C15151;
    const double C42107 = C12901 * C44729;
    const double C14700 = C14698 * C4447;
    const double C34392 = C14698 * C15151;
    const double C40828 = C14698 * C44729;
    const double C44234 = ae * C44233;
    const double C2303 =
        (C43932 * C44008 + C44002 * C44233 + C44002 * C43955 * ae) / C43783;
    const double C2717 = (C44027 * C44233) / C43783;
    const double C44314 = ae * C44313;
    const double C4140 =
        (C43932 * C44033 + C44027 * C44313 + C44027 * C43955 * ae) / C43783;
    const double C6117 = C44851 * C2938;
    const double C10756 = C44914 * C2938;
    const double C30513 = C44914 * C2938;
    const double C5199 = C5190 + C5191;
    const double C5672 = C5668 + C2603;
    const double C5901 = C5898 + C5899;
    const double C6330 = C6327 + C3101;
    const double C10550 = C10544 + C10545;
    const double C10976 = C10966 + C10967;
    const double C30312 = C30306 + C30307;
    const double C30730 = C30720 + C30721;
    const double C11153 = C11144 + C11145;
    const double C11398 = C11393 + C4229;
    const double C2720 = (C44027 * (C43964 + C44002 * C44023)) / C43786;
    const double C43965 = C43944 + C43963;
    const double C44128 = ae * C44127;
    const double C2658 = (C44027 * C44127) / C43783;
    const double C44171 = ae * C44170;
    const double C5018 = C4454 * C2256;
    const double C5104 = C4518 * C2256;
    const double C5188 = C222 * C2256;
    const double C7171 = C44903 * C2256;
    const double C15722 = C15158 * C2256;
    const double C15808 = C15222 * C2256;
    const double C17811 = C44903 * C2256;
    const double C20403 = C20398 * C2256;
    const double C20975 = C44729 * C2256;
    const double C9377 = C4454 * C4049;
    const double C11142 = C155 * C4049;
    const double C11222 = C9960 * C4049;
    const double C14813 = C44903 * C4049;
    const double C19949 = C15158 * C4049;
    const double C25521 = C20398 * C4049;
    const double C30964 = C29728 * C4049;
    const double C34499 = C44903 * C4049;
    const double C40940 = C44729 * C4049;
    const double C44334 = C44008 + C44332;
    const double C44371 = ae * C44370;
    const double C22915 =
        (2 * (C44432 + C44002 * C44500) + ae * (C44027 * C44481 + C44468) +
         C44002 *
             (C44500 + ae * (C44027 * C44002 * C44045 + C44465) +
              C44002 * (ae * (C44027 * C44045 + C43977) +
                        C44002 * (ae * C44020 + C44027 * std::pow(C43930, 6) *
                                                    bs[6] * C44081)))) /
        C43786;
    const double C44433 = C44033 + C44431;
    const double C5021 = C4447 * C649;
    const double C5017 = C44903 * C649;
    const double C15725 = C15151 * C649;
    const double C15721 = C44903 * C649;
    const double C20784 = C44729 * C649;
    const double C11053 = C4447 * C1233;
    const double C11051 = C44903 * C1233;
    const double C25520 = C44729 * C1233;
    const double C30807 = C15151 * C1233;
    const double C30805 = C44903 * C1233;
    const double C6987 = C4447 * C2258;
    const double C17643 = C15151 * C2258;
    const double C20781 = C44729 * C2258;
    const double C7533 = C4447 * C2660;
    const double C18147 = C15151 * C2660;
    const double C22625 = C44729 * C2660;
    const double C14629 = C4447 * C4051;
    const double C29113 = C44729 * C4051;
    const double C34331 = C15151 * C4051;
    const double C348 = C44836 * C336;
    const double C912 = C44836 * C903;
    const double C4703 = C44912 * C903;
    const double C5363 = C4449 * C903;
    const double C15407 = C44912 * C903;
    const double C16055 = C15153 * C903;
    const double C1496 = C44836 * C1487;
    const double C6039 = C4449 * C1487;
    const double C16709 = C15153 * C1487;
    const double C13103 = C44836 * C2881;
    const double C25828 = C44912 * C2881;
    const double C27565 = C15153 * C2881;
    const double C36205 = C44912 * C2881;
    const double C37925 = C4449 * C2881;
    const double C14874 = C44836 * C4224;
    const double C29350 = C15153 * C4224;
    const double C39685 = C4449 * C4224;
    const double C573 = C44851 * C561;
    const double C1162 = C44851 * C1153;
    const double C10971 = C9855 * C1153;
    const double C30725 = C29623 * C1153;
    const double C1746 = C44851 * C1737;
    const double C10315 = C44914 * C1737;
    const double C11701 = C9855 * C1737;
    const double C30083 = C44914 * C1737;
    const double C31427 = C29623 * C1737;
    const double C7452 = C44851 * C2598;
    const double C27184 = C9855 * C2598;
    const double C37555 = C29623 * C2598;
    const double C8126 = C44851 * C3096;
    const double C25444 = C44914 * C3096;
    const double C27862 = C9855 * C3096;
    const double C35845 = C44914 * C3096;
    const double C38219 = C29623 * C3096;
    const double C44404 = ae * C44403;
    const double C9483 =
        (C44002 * C44033 + C44027 * C44403 + C44027 * C44329 * ae) / C43783;
    const double C22918 = C44851 * C7909;
    const double C27022 = C44914 * C7909;
    const double C37393 = C44914 * C7909;
    const double C2431 =
        ((C43935 + C44066 * C43937 * C43941) * C43939 + C44230 + C44230 +
         C44002 * (2 * ae * C44008 + C44002 * C44071)) /
        C43786;
    const double C3043 =
        (C44230 + C44027 * (ae * C44033 + C44002 * C44108)) / C43786;
    const double C2435 = C155 * C2302;
    const double C5364 = C4518 * C2302;
    const double C7230 = C4517 * C2302;
    const double C7286 = C222 * C2302;
    const double C16056 = C15222 * C2302;
    const double C17868 = C15221 * C2302;
    const double C20569 = C20448 * C2302;
    const double C20968 = C20398 * C2302;
    const double C21037 = C20447 * C2302;
    const double C22395 = C20446 * C2302;
    const double C27023 = C9959 * C2302;
    const double C37394 = C29727 * C2302;
    const double C2885 = C155 * C2716;
    const double C6040 = C4518 * C2716;
    const double C7840 = C4517 * C2716;
    const double C7912 = C222 * C2716;
    const double C12895 = C44836 * C2716;
    const double C16710 = C15222 * C2716;
    const double C18436 = C15221 * C2716;
    const double C21519 = C20447 * C2716;
    const double C22804 = C20398 * C2716;
    const double C22863 = C20446 * C2716;
    const double C25228 = C9960 * C2716;
    const double C25598 = C44912 * C2716;
    const double C27333 = C15153 * C2716;
    const double C27644 = C9959 * C2716;
    const double C35632 = C29728 * C2716;
    const double C35987 = C44912 * C2716;
    const double C37699 = C4449 * C2716;
    const double C38004 = C29727 * C2716;
    const double C9593 = C4518 * C9429;
    const double C13105 = C155 * C9429;
    const double C20153 = C15222 * C9429;
    const double C24192 = C20447 * C9429;
    const double C27488 = C20398 * C9429;
    const double C27568 = C15221 * C9429;
    const double C27642 = C9960 * C9429;
    const double C29176 = C44912 * C9429;
    const double C37928 = C4517 * C9429;
    const double C38002 = C29728 * C9429;
    const double C39521 = C44912 * C9429;
    const double C42109 = C44836 * C9429;
    const double C507 = C181 * C222;
    const double C10255 = C181 * C9959;
    const double C30023 = C181 * C29727;
    const double C354 = C351 + C344;
    const double C415 = C412 * C44836;
    const double C4780 = C412 * C4449;
    const double C15484 = C412 * C15153;
    const double C512 = C184 * C222;
    const double C355 = C352 + C347;
    const double C416 = C413 * C44836;
    const double C1095 = C726 * C222;
    const double C917 = C915 + C908;
    const double C1098 = C728 * C222;
    const double C10897 = C728 * C9959;
    const double C30653 = C728 * C29727;
    const double C918 = C916 + C911;
    const double C1679 = C1310 * C222;
    const double C10253 = C1310 * C9960;
    const double C11148 = C1310 * C4454;
    const double C30021 = C1310 * C29728;
    const double C30896 = C1310 * C15158;
    const double C1501 = C1499 + C1492;
    const double C1682 = C1312 * C222;
    const double C10250 = C1312 * C9960;
    const double C11140 = C1312 * C4454;
    const double C11626 = C1312 * C9959;
    const double C30018 = C1312 * C29728;
    const double C30892 = C1312 * C15158;
    const double C31355 = C1312 * C29727;
    const double C40829 = C1312 * C20398;
    const double C1502 = C1500 + C1495;
    const double C1568 = C1566 * C44836;
    const double C6119 = C1566 * C4449;
    const double C16788 = C1566 * C15153;
    const double C14878 = C14877 + C4228;
    const double C40827 = C14699 * C20398;
    const double C43611 = C43610 + C14875;
    const double C43479 = C43477 * C20398;
    const double C4391 =
        ((C43935 + C44115 * C43937 * C43941) * C43939 + C44310 + C44310 +
         C44027 * (2 * ae * C44033 + C44027 * C44120)) /
        C43786;
    const double C4395 = C222 * C4139;
    const double C11702 = C9960 * C4139;
    const double C15043 = C155 * C4139;
    const double C15098 = C9959 * C4139;
    const double C29461 = C20398 * C4139;
    const double C29517 = C15221 * C4139;
    const double C31428 = C29728 * C4139;
    const double C34764 = C29727 * C4139;
    const double C39846 = C4517 * C4139;
    const double C40256 = C40021 * C4139;
    const double C41205 = C40020 * C4139;
    const double C43776 = C40019 * C4139;
    const double C984 = C982 * C44836;
    const double C4777 = C982 * C44912;
    const double C5445 = C982 * C4449;
    const double C15481 = C982 * C44912;
    const double C16134 = C982 * C15153;
    const double C405 = C248 * C155;
    const double C4781 = C248 * C4517;
    const double C15485 = C248 * C15221;
    const double C517 = C514 * C44851;
    const double C10254 = C514 * C9855;
    const double C30022 = C514 * C29623;
    const double C579 = C576 + C569;
    const double C410 = C251 * C155;
    const double C518 = C515 * C44851;
    const double C580 = C577 + C572;
    const double C977 = C796 * C155;
    const double C4779 = C796 * C4518;
    const double C5194 = C796 * C4454;
    const double C15483 = C796 * C15222;
    const double C15892 = C796 * C15158;
    const double C1167 = C1165 + C1158;
    const double C980 = C798 * C155;
    const double C4776 = C798 * C4518;
    const double C5186 = C798 * C4454;
    const double C5446 = C798 * C4517;
    const double C15480 = C798 * C15222;
    const double C15888 = C798 * C15158;
    const double C16135 = C798 * C15221;
    const double C20908 = C798 * C20398;
    const double C1102 = C1100 * C44851;
    const double C10896 = C1100 * C9855;
    const double C30652 = C1100 * C29623;
    const double C1168 = C1166 + C1161;
    const double C1561 = C1380 * C155;
    const double C1751 = C1749 + C1742;
    const double C1564 = C1382 * C155;
    const double C6120 = C1382 * C4517;
    const double C16789 = C1382 * C15221;
    const double C1686 = C1684 * C44851;
    const double C10251 = C1684 * C44914;
    const double C11625 = C1684 * C9855;
    const double C30019 = C1684 * C44914;
    const double C31354 = C1684 * C29623;
    const double C1752 = C1750 + C1745;
    const double C7456 = C7455 + C2602;
    const double C20906 = C7111 * C20398;
    const double C8130 = C8129 + C3100;
    const double C22744 = C7689 * C20398;
    const double C22567 = C22566 + C7453;
    const double C22310 = C22308 * C20398;
    const double C23087 = C23086 + C8127;
    const double C22748 = C22746 * C20398;
    const double C9432 =
        (C43964 + C44002 * C44023 +
         (C43991 + C44002 * (ae * C44020 +
                             C43932 * std::pow(C43930, 6) * bs[6] * C44006)) *
             C44115) /
        C43786;
    const double C43993 = C43957 + C43990;
    const double C44136 = ae * C44134;
    const double C44254 = C44027 * C44134;
    const double C9372 = (C44127 + C44134 * C44115) / C43783;
    const double C44179 = ae * C44177;
    const double C44216 = C43962 + C44215;
    const double C44284 = C43962 + C44283;
    const double C22217 = C20398 * C22212;
    const double C22626 = C20398 * C22619;
    const double C24032 = C20398 * C24027;
    const double C43427 = C20398 * C43422;
    const double C43992 = C43974 + C43989;
    const double C2661 =
        (2 * ae * C44027 * C44002 * C43957 + C43932 * C44027 * C44132) / C43786;
    const double C6982 =
        (2 * ae * (2 * C44002 * C43957 + C44002 * (C43957 + C43981 * C44066)) +
         C43932 * (2 * C44132 +
                   C44002 * (C43987 + (C43971 * C43972 +
                                       C43936 * bs[6] * std::pow(C43930, 6)) *
                                          C43939 * C44066))) /
        C43786;
    const double C9373 = (C44002 * C43961 + C44132 * C44115) / C43786;
    const double C9374 =
        (2 * ae * (C44002 * C43957 + C44002 * C43981 * C44115) +
         C43932 * (C44132 + C44002 *
                                (C43971 * C43972 +
                                 C43936 * bs[6] * std::pow(C43930, 6)) *
                                C43939 * C44115)) /
        C43786;
    const double C22213 =
        (3 * (C43961 + C43987 * C44066) +
         C44002 * (2 * C44132 +
                   C44002 * (C43987 + (C43971 * C43972 +
                                       C43936 * bs[6] * std::pow(C43930, 6)) *
                                          C43939 * C44066))) /
        C43786;
    const double C22620 =
        (C44027 * (2 * C44132 +
                   C44002 * (C43987 + (C43971 * C43972 +
                                       C43936 * bs[6] * std::pow(C43930, 6)) *
                                          C43939 * C44066))) /
        C43786;
    const double C29110 =
        (2 * C44027 * C44132 +
         C44027 * (C44132 + C44002 *
                                (C43971 * C43972 +
                                 C43936 * bs[6] * std::pow(C43930, 6)) *
                                C43939 * C44115)) /
        C43786;
    const double C14624 =
        (2 * ae * (2 * C44027 * C43957 + C44027 * (C43957 + C43981 * C44115)) +
         C43932 * (2 * C44175 +
                   C44027 * (C43987 + (C43971 * C43972 +
                                       C43936 * bs[6] * std::pow(C43930, 6)) *
                                          C43939 * C44115))) /
        C43786;
    const double C43423 =
        (3 * (C43961 + C43987 * C44115) +
         C44027 * (2 * C44175 +
                   C44027 * (C43987 + (C43971 * C43972 +
                                       C43936 * bs[6] * std::pow(C43930, 6)) *
                                          C43939 * C44115))) /
        C43786;
    const double C6985 = C44903 * C2259;
    const double C17641 = C44903 * C2259;
    const double C20786 = C44729 * C2259;
    const double C14627 = C44903 * C4052;
    const double C34329 = C44903 * C4052;
    const double C40770 = C44729 * C4052;
    const double C22216 = C44729 * C6981;
    const double C22623 = C44729 * C7527;
    const double C43426 = C44729 * C14623;
    const double C44237 = C44236 + C43986;
    const double C349 = C155 * C160;
    const double C914 = C155 * C711;
    const double C4711 = C4518 * C711;
    const double C15415 = C15222 * C711;
    const double C1498 = C155 * C1295;
    const double C4230 = C155 * C4097;
    const double C44345 = ae * C44343;
    const double C44344 = C44002 * C44343;
    const double C44373 = C44027 * C44343;
    const double C9430 = (C44233 + C44343 * C44115) / C43783;
    const double C44470 = C44013 + C44467;
    const double C44497 = ae * C44495;
    const double C44510 = C44330 + C44509;
    const double C43609 = C155 * C43468;
    const double C1302 = C44836 * C1296;
    const double C11143 = C44836 * C4099;
    const double C43478 = C43476 * C44729;
    const double C44317 = C44316 + C43986;
    const double C574 = C222 * C227;
    const double C1164 = C222 * C781;
    const double C1748 = C222 * C1365;
    const double C10323 = C9960 * C1365;
    const double C30091 = C29728 * C1365;
    const double C2604 = C222 * C2348;
    const double C3102 = C222 * C2774;
    const double C10975 = C9960 * C2774;
    const double C30729 = C29728 * C2774;
    const double C44408 = C44407 + C44342;
    const double C44442 = ae * C44439;
    const double C44441 = C44027 * C44439;
    const double C44517 = C44516 + C44468;
    const double C22565 = C222 * C22299;
    const double C23085 = C222 * C22736;
    const double C27186 = C9960 * C22736;
    const double C37557 = C29728 * C22736;
    const double C44538 = ae * C44536;
    const double C44537 = C44027 * C44536;
    const double C44576 = C44038 + C44573;
    const double C788 = C44851 * C782;
    const double C5189 = C44851 * C2350;
    const double C22309 = C22307 * C44729;
    const double C22747 = C22745 * C44729;
    const double C11315 = C44903 * C1432;
    const double C31057 = C44903 * C1432;
    const double C14809 = C44903 * C4184;
    const double C34495 = C44903 * C4184;
    const double C40942 = C44729 * C4184;
    const double C9590 =
        (2 * ae * (C44015 + C44339 * C44115) +
         C44002 * (C44338 + C43932 *
                                (C43971 * C43972 +
                                 C44066 * bs[6] * std::pow(C43930, 6)) *
                                C43939 * C44115)) /
        C43786;
    const double C14870 =
        (2 * C44027 * C44338 +
         C44027 * (C44338 + C43932 *
                                (C43971 * C43972 +
                                 C44066 * bs[6] * std::pow(C43930, 6)) *
                                C43939 * C44115)) /
        C43786;
    const double C44463 = C44457 + C44458;
    const double C29345 =
        (2 * ae * (2 * C44027 * C44013 + C44027 * (C44013 + C44020 * C44115)) +
         C44002 * (2 * C44493 +
                   C44027 * (C44076 + (C43971 * C43972 +
                                       C44066 * bs[6] * std::pow(C43930, 6)) *
                                          C43939 * C44115))) /
        C43786;
    const double C43605 =
        (3 * (C44071 + C44076 * C44115) +
         C44027 * (2 * C44493 +
                   C44027 * (C44076 + (C43971 * C43972 +
                                       C44066 * bs[6] * std::pow(C43930, 6)) *
                                          C43939 * C44115))) /
        C43786;
    const double C909 = C44836 * C902;
    const double C4706 = C44912 * C902;
    const double C15410 = C44912 * C902;
    const double C1493 = C44836 * C1486;
    const double C6036 = C44912 * C2882;
    const double C10685 = C44836 * C2882;
    const double C16706 = C44912 * C2882;
    const double C11394 = C44836 * C4225;
    const double C29348 = C44912 * C9589;
    const double C39683 = C44912 * C9589;
    const double C42272 = C44836 * C9589;
    const double C43608 = C44836 * C14869;
    const double C983 = C981 * C44836;
    const double C4778 = C981 * C44912;
    const double C15482 = C981 * C44912;
    const double C1567 = C1565 * C44836;
    const double C5523 = C44903 * C1034;
    const double C16209 = C44903 * C1034;
    const double C7342 = C44903 * C2517;
    const double C17973 = C44903 * C2517;
    const double C21153 = C44729 * C2517;
    const double C1101 = C1099 * C44851;
    const double C1685 = C1683 * C44851;
    const double C10252 = C1683 * C44914;
    const double C30020 = C1683 * C44914;
    const double C7449 =
        (2 * C44002 * C44360 +
         C44002 * (C44360 + C43932 *
                                (C43971 * C43972 +
                                 C44115 * bs[6] * std::pow(C43930, 6)) *
                                C43939 * C44066)) /
        C43786;
    const double C8123 =
        (2 * ae * (C44040 + C44352 * C44066) +
         C44027 * (C44360 + C43932 *
                                (C43971 * C43972 +
                                 C44115 * bs[6] * std::pow(C43930, 6)) *
                                C43939 * C44066)) /
        C43786;
    const double C44569 = C44563 + C44564;
    const double C1159 = C44851 * C1152;
    const double C1743 = C44851 * C1736;
    const double C10318 = C44914 * C1736;
    const double C30086 = C44914 * C1736;
    const double C5669 = C44851 * C2599;
    const double C6328 = C44851 * C3097;
    const double C10968 = C44914 * C3097;
    const double C30722 = C44914 * C3097;
    const double C22564 = C44851 * C7448;
    const double C23084 = C44851 * C8122;
    const double C27182 = C44914 * C8122;
    const double C37553 = C44914 * C8122;
    const double C42115 = C42113 * C44729;
    const double C43794 = C44729 - C43793;
    const double C5525 = C5518 + C5519;
    const double C11319 = C11306 + C11307;
    const double C20980 = C20966 + C20967;
    const double C20979 = C20964 + C20965;
    const double C20978 = C20962 + C20963;
    const double C21156 = C21149 + C21150;
    const double C21155 = C21146 + C21147;
    const double C21154 = C21143 + C21144;
    const double C22355 = C22352 + C22353;
    const double C22483 = C22480 + C22481;
    const double C22811 = C22806 + C22807;
    const double C22809 = C22802 + C22803;
    const double C22978 = C22974 + C22975;
    const double C22977 = C22971 + C22972;
    const double C25754 = C25747 + C25748;
    const double C25752 = C25741 + C25742;
    const double C25751 = C25739 + C25740;
    const double C25971 = C25967 + C25968;
    const double C27497 = C27490 + C27491;
    const double C29293 = C29290 + C29291;
    const double C29292 = C29288 + C29289;
    const double C43565 = C43562 + C43563;
    const double C43564 = C43560 + C43561;
    const double C43888 = C44836 - C43887;
    const double C4719 = C4715 + C4708;
    const double C4716 = C4712 + C4699;
    const double C5371 = C5369 + C5362;
    const double C6047 = C6045 + C6038;
    const double C36208 = C36206 + C6041;
    const double C39691 = C39689 + C9592;
    const double C4718 = C4714 + C4705;
    const double C4717 = C4713 + C4702;
    const double C15423 = C15419 + C15412;
    const double C15420 = C15416 + C15403;
    const double C16063 = C16061 + C16054;
    const double C16717 = C16715 + C16708;
    const double C25831 = C25829 + C16711;
    const double C29356 = C29354 + C20152;
    const double C15422 = C15418 + C15409;
    const double C15421 = C15417 + C15406;
    const double C356 = C353 + C342;
    const double C11401 = C11399 + C11391;
    const double C43918 = C44851 - C43917;
    const double C10331 = C10327 + C10320;
    const double C10328 = C10324 + C10311;
    const double C10979 = C10977 + C10970;
    const double C11709 = C11707 + C11700;
    const double C25447 = C25445 + C10973;
    const double C27190 = C27188 + C12758;
    const double C27868 = C27866 + C13378;
    const double C10330 = C10326 + C10317;
    const double C10329 = C10325 + C10314;
    const double C25448 = C25446 + C10972;
    const double C27189 = C27187 + C12759;
    const double C30099 = C30095 + C30088;
    const double C30096 = C30092 + C30079;
    const double C30733 = C30731 + C30724;
    const double C31435 = C31433 + C31426;
    const double C35848 = C35846 + C30727;
    const double C37561 = C37559 + C32482;
    const double C38225 = C38223 + C33086;
    const double C30098 = C30094 + C30085;
    const double C30097 = C30093 + C30082;
    const double C35849 = C35847 + C30726;
    const double C37560 = C37558 + C32483;
    const double C581 = C578 + C567;
    const double C5675 = C5673 + C5667;
    const double C722 = C44836 * C713;
    const double C4527 = C44912 * C713;
    const double C5107 = C4449 * C713;
    const double C15231 = C44912 * C713;
    const double C15811 = C15153 * C713;
    const double C5281 = C4447 * C849;
    const double C5275 = C44903 * C849;
    const double C15973 = C15151 * C849;
    const double C15967 = C44903 * C849;
    const double C20973 = C44729 * C849;
    const double C1376 = C44851 * C1367;
    const double C9969 = C44914 * C1367;
    const double C11225 = C9855 * C1367;
    const double C29737 = C44914 * C1367;
    const double C30967 = C29623 * C1367;
    const double C11547 = C4447 * C1619;
    const double C11545 = C44903 * C1619;
    const double C25970 = C44729 * C1619;
    const double C31279 = C15151 * C1619;
    const double C31277 = C44903 * C1619;
    const double C182 = C173 + C174;
    const double C249 = C240 + C241;
    const double C4541 = C4530 + C4531;
    const double C9983 = C9972 + C9973;
    const double C15245 = C15234 + C15235;
    const double C29751 = C29740 + C29741;
    const double C797 = C791 + C792;
    const double C5285 = C5270 + C5271;
    const double C10549 = C10542 + C10543;
    const double C15977 = C15962 + C15963;
    const double C20982 = C20970 + C20971;
    const double C30311 = C30304 + C30305;
    const double C1311 = C1305 + C1306;
    const double C5827 = C5820 + C5821;
    const double C11317 = C11302 + C11303;
    const double C16503 = C16496 + C16497;
    const double C25753 = C25745 + C25746;
    const double C31059 = C31044 + C31045;
    const double C2432 =
        (C43932 * C44071 + C44234 + C44234 +
         C44002 * (2 * ae * C44015 + C44002 * C43932 * C44076)) /
        C43786;
    const double C3044 =
        (C44234 + C44027 * (ae * C44040 + C44002 * C43932 * C44111)) / C43786;
    const double C2436 = C155 * C2303;
    const double C5109 = C44912 * C2303;
    const double C5359 = C4518 * C2303;
    const double C5442 = C222 * C2303;
    const double C7166 = C4454 * C2303;
    const double C7232 = C4517 * C2303;
    const double C15813 = C44912 * C2303;
    const double C16051 = C15222 * C2303;
    const double C17806 = C15158 * C2303;
    const double C17870 = C15221 * C2303;
    const double C20570 = C20448 * C2303;
    const double C20976 = C20398 * C2303;
    const double C21040 = C20447 * C2303;
    const double C2886 = C155 * C2717;
    const double C5823 = C44912 * C2717;
    const double C6035 = C4518 * C2717;
    const double C6116 = C222 * C2717;
    const double C7760 = C4454 * C2717;
    const double C7842 = C4517 * C2717;
    const double C10471 = C44836 * C2717;
    const double C10755 = C9960 * C2717;
    const double C16499 = C44912 * C2717;
    const double C16705 = C15222 * C2717;
    const double C18358 = C15158 * C2717;
    const double C18438 = C15221 * C2717;
    const double C21522 = C20447 * C2717;
    const double C25090 = C20398 * C2717;
    const double C30512 = C29728 * C2717;
    const double C4392 =
        (C43932 * C44120 + C44314 + C44314 +
         C44027 * (2 * ae * C44040 + C44027 * C43932 * C44125)) /
        C43786;
    const double C4396 = C222 * C4140;
    const double C11227 = C44914 * C4140;
    const double C11622 = C155 * C4140;
    const double C11697 = C9960 * C4140;
    const double C14985 = C4454 * C4140;
    const double C15100 = C9959 * C4140;
    const double C30969 = C44914 * C4140;
    const double C31423 = C29728 * C4140;
    const double C34658 = C15158 * C4140;
    const double C34766 = C29727 * C4140;
    const double C40257 = C40021 * C4140;
    const double C41101 = C20398 * C4140;
    const double C41208 = C40020 * C4140;
    const double C5444 = C5199 * C4518;
    const double C7105 = C5199 * C4454;
    const double C16133 = C5199 * C15222;
    const double C17753 = C5199 * C15158;
    const double C20910 = C5199 * C20398;
    const double C5674 = C5672 + C2603;
    const double C6118 = C5901 * C4518;
    const double C7683 = C5901 * C4454;
    const double C16787 = C5901 * C15222;
    const double C18289 = C5901 * C15158;
    const double C6331 = C6330 + C3101;
    const double C10978 = C10976 + C10967;
    const double C30732 = C30730 + C30721;
    const double C11624 = C11153 * C9960;
    const double C14693 = C11153 * C4454;
    const double C31353 = C11153 * C29728;
    const double C34391 = C11153 * C15158;
    const double C40831 = C11153 * C20398;
    const double C11400 = C11398 + C4229;
    const double C5819 = C44912 * C2720;
    const double C10469 = C44836 * C2720;
    const double C16495 = C44912 * C2720;
    const double C43966 = C43965 + C43958;
    const double C648 =
        (C44002 * C43961 + C44128 + C44128 +
         C43932 * (2 * ae * C44002 * C43957 + C43932 * C44002 * C43987)) /
        C43786;
    const double C2306 = (ae * C44008 + C43932 * C44012 + C44128 +
                          C44002 * (C43964 + C44002 * C44023)) /
                         C43786;
    const double C2391 = (ae * C44008 + C43932 * C44057 + C44128 +
                          C44002 * (C43964 + C44002 * C44062)) /
                         C43786;
    const double C2776 = (C44128 + C44027 * C44002 * C44048) / C43786;
    const double C2991 = (C44128 + C44027 * C44002 * C44100) / C43786;
    const double C5744 = C4454 * C2658;
    const double C5818 = C4518 * C2658;
    const double C5896 = C222 * C2658;
    const double C7765 = C44903 * C2658;
    const double C10468 = C155 * C2658;
    const double C10540 = C9960 * C2658;
    const double C16420 = C15158 * C2658;
    const double C16494 = C15222 * C2658;
    const double C18363 = C44903 * C2658;
    const double C21316 = C20398 * C2658;
    const double C25089 = C44729 * C2658;
    const double C30302 = C29728 * C2658;
    const double C1232 =
        (C44027 * C43961 + C44171 + C44171 +
         C43932 * (2 * ae * C44027 * C43957 + C43932 * C44027 * C43987)) /
        C43786;
    const double C2829 = (C44171 + C44002 * C44027 * C44062) / C43786;
    const double C4143 = (ae * C44033 + C43932 * C44037 + C44171 +
                          C44027 * (C43964 + C44027 * C44048)) /
                         C43786;
    const double C4310 = (ae * C44033 + C43932 * C44095 + C44171 +
                          C44027 * (C43964 + C44027 * C44100)) /
                         C43786;
    const double C7176 = C7170 + C7171;
    const double C17816 = C17810 + C17811;
    const double C20984 = C20974 + C20975;
    const double C14818 = C14812 + C14813;
    const double C34504 = C34498 + C34499;
    const double C40943 = C40939 + C40940;
    const double C44335 = C44334 + C44331;
    const double C7837 =
        (C44027 * C44071 + C44371 + C44371 +
         C44002 * (2 * ae * C44027 * C44013 + C44002 * C44027 * C44076)) /
        C43786;
    const double C9749 =
        (ae * C44033 + C44002 * C44108 + C44371 +
         C44027 * (C44333 + C44027 * (C44041 + C44002 * C44111))) /
        C43786;
    const double C44434 = C44433 + C44430;
    const double C9801 =
        (C44002 * C44120 + C44404 + C44404 +
         C44027 * (2 * ae * C44401 + C44027 * C44002 * C44125)) /
        C43786;
    const double C9804 = C222 * C9483;
    const double C13379 = C9960 * C9483;
    const double C27415 = C44914 * C9483;
    const double C27714 = C20398 * C9483;
    const double C29515 = C15222 * C9483;
    const double C29572 = C9959 * C9483;
    const double C33087 = C29728 * C9483;
    const double C37781 = C44914 * C9483;
    const double C39844 = C4518 * C9483;
    const double C39900 = C29727 * C9483;
    const double C40713 = C40021 * C9483;
    const double C42428 = C155 * C9483;
    const double C42482 = C40020 * C9483;
    const double C13310 = C44836 * C3043;
    const double C26042 = C44912 * C3043;
    const double C27788 = C15153 * C3043;
    const double C36413 = C44912 * C3043;
    const double C38145 = C4449 * C3043;
    const double C7288 = C7286 + C7287;
    const double C20981 = C20968 + C20969;
    const double C27026 = C27023 + C27024;
    const double C37397 = C37394 + C37395;
    const double C13107 = C13102 + C2885;
    const double C36207 = C36204 + C6040;
    const double C37930 = C37924 + C7840;
    const double C7914 = C7912 + C7913;
    const double C12900 = C12894 + C12895;
    const double C25830 = C25827 + C16710;
    const double C27570 = C27564 + C18436;
    const double C22810 = C22804 + C22805;
    const double C25231 = C25228 + C25229;
    const double C25604 = C25597 + C25598;
    const double C27340 = C27332 + C27333;
    const double C27647 = C27644 + C27645;
    const double C35635 = C35632 + C35633;
    const double C35993 = C35986 + C35987;
    const double C37706 = C37698 + C37699;
    const double C38007 = C38004 + C38005;
    const double C39688 = C39682 + C9593;
    const double C42274 = C42271 + C13105;
    const double C29353 = C29347 + C20153;
    const double C27496 = C27488 + C27489;
    const double C27646 = C27642 + C27643;
    const double C29181 = C29175 + C29176;
    const double C38006 = C38002 + C38003;
    const double C39526 = C39520 + C39521;
    const double C42112 = C42108 + C42109;
    const double C357 = C354 + C345;
    const double C358 = C355 + C348;
    const double C920 = C918 + C912;
    const double C1504 = C1502 + C1496;
    const double C14879 = C14878 + C14874;
    const double C43471 = C40827 + C40828;
    const double C15045 = C15043 + C15044;
    const double C29463 = C29461 + C29462;
    const double C29520 = C29517 + C29518;
    const double C39849 = C39846 + C39847;
    const double C417 = C405 + C415;
    const double C519 = C507 + C517;
    const double C582 = C579 + C570;
    const double C583 = C580 + C573;
    const double C1170 = C1168 + C1162;
    const double C1754 = C1752 + C1746;
    const double C7457 = C7456 + C7452;
    const double C22302 = C20906 + C20907;
    const double C8131 = C8130 + C8126;
    const double C43994 = C43993 + C43982;
    const double C7610 =
        (C44027 * (C44023 + C44136 +
                   C44002 * (C43991 + C44002 * (ae * C44020 +
                                                C43932 * std::pow(C43930, 6) *
                                                    bs[6] * C44006)))) /
        C43786;
    const double C44255 = ae * C44254;
    const double C9379 = C4454 * C9372;
    const double C19951 = C15158 * C9372;
    const double C25522 = C20398 * C9372;
    const double C44217 = ae * C44216;
    const double C6980 = (2 * C44127 + C44002 * C44216) / C43783;
    const double C7526 = (C44027 * C44216) / C43783;
    const double C44285 = ae * C44284;
    const double C14622 = (2 * C44170 + C44027 * C44284) / C43783;
    const double C7531 = C44903 * C2661;
    const double C18145 = C44903 * C2661;
    const double C24873 = C44729 * C2661;
    const double C27260 = C44729 * C9373;
    const double C44238 = ae * C44237;
    const double C2304 =
        (C44008 + C44013 * C43936 + C44002 * C44237 + C44002 * C43983 * ae) /
        C43783;
    const double C2718 = (C44027 * C44237) / C43783;
    const double C44346 = C44015 + C44344;
    const double C44374 = ae * C44373;
    const double C9595 = C4518 * C9430;
    const double C13106 = C155 * C9430;
    const double C20155 = C15222 * C9430;
    const double C44471 = C44470 + C44465;
    const double C44511 = ae * C44510;
    const double C29168 = (2 * C44370 + C44027 * C44510) / C43783;
    const double C11152 = C11142 + C11143;
    const double C44318 = ae * C44317;
    const double C4141 =
        (C44033 + C44038 * C43936 + C44027 * C44317 + C44027 * C43983 * ae) /
        C43783;
    const double C44409 = ae * C44408;
    const double C9484 =
        (C44002 * C44040 + C44027 * C44408 + C44027 * C44340 * ae) / C43783;
    const double C44443 = C44040 + C44441;
    const double C44518 = ae * C44517;
    const double C24110 =
        (C44033 + C44038 * C44066 + C44027 * C44517 + C44027 * C44466 * ae) /
        C43783;
    const double C44539 = C44401 + C44537;
    const double C44577 = C44576 + C44571;
    const double C5198 = C5188 + C5189;
    const double C11323 = C11314 + C11315;
    const double C31065 = C31056 + C31057;
    const double C14816 = C14808 + C14809;
    const double C34502 = C34494 + C34495;
    const double C40944 = C40941 + C40942;
    const double C919 = C917 + C909;
    const double C1503 = C1501 + C1493;
    const double C43612 = C43611 + C43608;
    const double C5527 = C5522 + C5523;
    const double C16213 = C16208 + C16209;
    const double C7345 = C7341 + C7342;
    const double C17976 = C17972 + C17973;
    const double C21157 = C21152 + C21153;
    const double C1169 = C1167 + C1159;
    const double C1753 = C1751 + C1743;
    const double C22568 = C22567 + C22564;
    const double C23088 = C23087 + C23084;
    const double C43795 = C43794 * C43788;
    const double C88 =
        (((0 - (C43784 * C43782) / C43783) * ae) / C43783 - (0 * be) / C43790) /
            (2 * C43783) -
        ((C43784 * ((C43794 * ae) / C43783 - C43782 / C43790) + C15151) * be) /
            C43783 +
        (0 * ae) / C43783 - C43789 / C43786;
    const double C90 =
        ((C43794 * ae) / C43783 - C43782 / C43790) / (2 * C43783) -
        ((C43784 * ((0 * ae) / C43783 - C43789 / C43786) + C44903) * be) /
            C43783;
    const double C4452 =
        (-C43782 / C43783) / (2 * C43783) - (C43794 * be) / C43783;
    const double C15156 = (C43794 * ae) / C43783 - C43782 / C43790;
    const double C21145 = C20980 * C222;
    const double C27080 = C20980 * C9959;
    const double C37451 = C20980 * C29727;
    const double C21142 = C20978 * C222;
    const double C25298 = C20978 * C9959;
    const double C35702 = C20978 * C29727;
    const double C21160 = C21156 * C44851;
    const double C25303 = C21156 * C9855;
    const double C35707 = C21156 * C29623;
    const double C21159 = C21155 * C44851;
    const double C27079 = C21155 * C9855;
    const double C37450 = C21155 * C29623;
    const double C21158 = C21154 * C44851;
    const double C25299 = C21154 * C9855;
    const double C35703 = C21154 * C29623;
    const double C22482 = C22355 * C222;
    const double C22484 = C22483 * C44851;
    const double C22976 = C22811 * C222;
    const double C25300 = C22811 * C9960;
    const double C25743 = C22811 * C15222;
    const double C27492 = C22811 * C15221;
    const double C27718 = C22811 * C9959;
    const double C35704 = C22811 * C29728;
    const double C36130 = C22811 * C4518;
    const double C37854 = C22811 * C4517;
    const double C38077 = C22811 * C29727;
    const double C42216 = C22811 * C155;
    const double C22973 = C22809 * C222;
    const double C27078 = C22809 * C9960;
    const double C27494 = C22809 * C15222;
    const double C37449 = C22809 * C29728;
    const double C37856 = C22809 * C4518;
    const double C22980 = C22978 * C44851;
    const double C25301 = C22978 * C44914;
    const double C27717 = C22978 * C9855;
    const double C35705 = C22978 * C44914;
    const double C38076 = C22978 * C29623;
    const double C22979 = C22977 * C44851;
    const double C27077 = C22977 * C44914;
    const double C37448 = C22977 * C44914;
    const double C25758 = C25754 * C15153;
    const double C36133 = C25754 * C4449;
    const double C40938 = C25754 * C44836;
    const double C25756 = C25752 * C15153;
    const double C36129 = C25752 * C4449;
    const double C40934 = C25752 * C44836;
    const double C25755 = C25751 * C15221;
    const double C36128 = C25751 * C4517;
    const double C40933 = C25751 * C155;
    const double C27716 = C27497 * C9960;
    const double C29287 = C27497 * C15222;
    const double C38075 = C27497 * C29728;
    const double C39629 = C27497 * C4518;
    const double C42218 = C27497 * C155;
    const double C29295 = C29293 * C15221;
    const double C39631 = C29293 * C4517;
    const double C40935 = C29293 * C155;
    const double C29294 = C29292 * C15153;
    const double C39630 = C29292 * C4449;
    const double C40936 = C29292 * C44836;
    const double C43567 = C43565 * C155;
    const double C43566 = C43564 * C44836;
    const double C43889 = C43888 * C43788;
    const double C4723 = C4719 + C4709;
    const double C4720 = C4716 + C4700;
    const double C5373 = C5371 + C5363;
    const double C6049 = C6047 + C6039;
    const double C36210 = C36208 + C36203;
    const double C39693 = C39691 + C39685;
    const double C4722 = C4718 + C4706;
    const double C4721 = C4717 + C4703;
    const double C15427 = C15423 + C15413;
    const double C15424 = C15420 + C15404;
    const double C16065 = C16063 + C16055;
    const double C16719 = C16717 + C16709;
    const double C25833 = C25831 + C25826;
    const double C29358 = C29356 + C29350;
    const double C15426 = C15422 + C15410;
    const double C15425 = C15421 + C15407;
    const double C11403 = C11401 * C4447;
    const double C31132 = C11401 * C15151;
    const double C40997 = C11401 * C44729;
    const double C43919 = C43918 * C43788;
    const double C10335 = C10331 + C10321;
    const double C10332 = C10328 + C10312;
    const double C10981 = C10979 + C10971;
    const double C11711 = C11709 + C11701;
    const double C25449 = C25447 + C25442;
    const double C27192 = C27190 + C27184;
    const double C27870 = C27868 + C27862;
    const double C10334 = C10330 + C10318;
    const double C10333 = C10329 + C10315;
    const double C25450 = C25448 + C25444;
    const double C27191 = C27189 + C27182;
    const double C30103 = C30099 + C30089;
    const double C30100 = C30096 + C30080;
    const double C30735 = C30733 + C30725;
    const double C31437 = C31435 + C31427;
    const double C35850 = C35848 + C35843;
    const double C37563 = C37561 + C37555;
    const double C38227 = C38225 + C38219;
    const double C30102 = C30098 + C30086;
    const double C30101 = C30097 + C30083;
    const double C35851 = C35849 + C35845;
    const double C37562 = C37560 + C37553;
    const double C584 = C581 * C44836;
    const double C4944 = C581 * C4449;
    const double C15648 = C581 * C15153;
    const double C727 = C721 + C722;
    const double C4539 = C4526 + C4527;
    const double C5113 = C5106 + C5107;
    const double C15243 = C15230 + C15231;
    const double C15817 = C15810 + C15811;
    const double C5287 = C5274 + C5275;
    const double C15979 = C15966 + C15967;
    const double C20983 = C20972 + C20973;
    const double C1381 = C1375 + C1376;
    const double C9981 = C9968 + C9969;
    const double C11231 = C11224 + C11225;
    const double C29749 = C29736 + C29737;
    const double C30973 = C30966 + C30967;
    const double C11551 = C11544 + C11545;
    const double C25972 = C25969 + C25970;
    const double C31283 = C31276 + C31277;
    const double C5193 = C797 * C4447;
    const double C5187 = C797 * C44903;
    const double C15891 = C797 * C15151;
    const double C15889 = C797 * C44903;
    const double C20909 = C797 * C44729;
    const double C21148 = C20982 * C222;
    const double C25302 = C20982 * C9959;
    const double C35706 = C20982 * C29727;
    const double C11147 = C1311 * C4447;
    const double C11141 = C1311 * C44903;
    const double C30895 = C1311 * C15151;
    const double C30893 = C1311 * C44903;
    const double C40830 = C1311 * C44729;
    const double C25757 = C25753 * C15221;
    const double C36132 = C25753 * C4517;
    const double C40937 = C25753 * C155;
    const double C5360 = C44912 * C2432;
    const double C16052 = C44912 * C2432;
    const double C6256 = C44912 * C3044;
    const double C10894 = C44836 * C3044;
    const double C16923 = C44912 * C3044;
    const double C5114 = C5108 + C5109;
    const double C5368 = C5358 + C5359;
    const double C5448 = C5442 + C5443;
    const double C15818 = C15812 + C15813;
    const double C16060 = C16050 + C16051;
    const double C10686 = C10684 + C2886;
    const double C5828 = C5822 + C5823;
    const double C6044 = C6034 + C6035;
    const double C6121 = C6116 + C6117;
    const double C10473 = C10470 + C10471;
    const double C10759 = C10755 + C10756;
    const double C16504 = C16498 + C16499;
    const double C16714 = C16704 + C16705;
    const double C30516 = C30512 + C30513;
    const double C11698 = C44914 * C4392;
    const double C31424 = C44914 * C4392;
    const double C11232 = C11226 + C11227;
    const double C11628 = C11622 + C11623;
    const double C11706 = C11696 + C11697;
    const double C30974 = C30968 + C30969;
    const double C31432 = C31422 + C31423;
    const double C5676 = C5674 + C5669;
    const double C6332 = C6331 + C6328;
    const double C10980 = C10978 + C10968;
    const double C30734 = C30732 + C30722;
    const double C11402 = C11400 + C11394;
    const double C43967 = ae * C43966;
    const double C101 =
        (2 * C43946 + C43932 * C43966 + (C43935 + C43949 * C43936) * ae) /
        C43783;
    const double C644 = (C44002 * C43966) / C43783;
    const double C1228 = (C44027 * C43966) / C43783;
    const double C5023 = C44903 * C648;
    const double C15727 = C44903 * C648;
    const double C5105 = C44912 * C2306;
    const double C15809 = C44912 * C2306;
    const double C7167 = C44903 * C2391;
    const double C17807 = C44903 * C2391;
    const double C20977 = C44729 * C2391;
    const double C5897 = C44851 * C2776;
    const double C10541 = C44914 * C2776;
    const double C30303 = C44914 * C2776;
    const double C7984 = C44903 * C2991;
    const double C18573 = C44903 * C2991;
    const double C25306 = C44729 * C2991;
    const double C5826 = C5818 + C5819;
    const double C7770 = C7764 + C7765;
    const double C10472 = C10468 + C10469;
    const double C16502 = C16494 + C16495;
    const double C18368 = C18362 + C18363;
    const double C25092 = C25088 + C25089;
    const double C11055 = C44903 * C1232;
    const double C30809 = C44903 * C1232;
    const double C7761 = C44903 * C2829;
    const double C18359 = C44903 * C2829;
    const double C25091 = C44729 * C2829;
    const double C11223 = C44914 * C4143;
    const double C30965 = C44914 * C4143;
    const double C14986 = C44903 * C4310;
    const double C34659 = C44903 * C4310;
    const double C41102 = C44729 * C4310;
    const double C21151 = C20984 * C222;
    const double C40945 = C40943 * C155;
    const double C44336 = ae * C44335;
    const double C7045 =
        (2 * C44229 + C44002 * C44335 + (C43935 + C43949 * C44066) * ae) /
        C43783;
    const double C7607 = (C44027 * C44335) / C43783;
    const double C27567 = C44912 * C7837;
    const double C37927 = C44912 * C7837;
    const double C29516 = C44912 * C9749;
    const double C39845 = C44912 * C9749;
    const double C42429 = C44836 * C9749;
    const double C44435 = ae * C44434;
    const double C14751 =
        (2 * C44309 + C44027 * C44434 + (C43935 + C43949 * C44115) * ae) /
        C43783;
    const double C27860 = C44914 * C9801;
    const double C38217 = C44914 * C9801;
    const double C27865 = C27859 + C13379;
    const double C27420 = C27414 + C27415;
    const double C27719 = C27714 + C27715;
    const double C38222 = C38216 + C33087;
    const double C37786 = C37780 + C37781;
    const double C13311 = C13309 + C13310;
    const double C26044 = C26041 + C26042;
    const double C27791 = C27787 + C27788;
    const double C36415 = C36412 + C36413;
    const double C38148 = C38144 + C38145;
    const double C13108 = C13107 + C2885;
    const double C36209 = C36207 + C6040;
    const double C37932 = C37930 + C7840;
    const double C42106 = C12900 * C20398;
    const double C25832 = C25830 + C16710;
    const double C27572 = C27570 + C18436;
    const double C25744 = C22810 * C44912;
    const double C27493 = C22810 * C15153;
    const double C36131 = C22810 * C44912;
    const double C37855 = C22810 * C4449;
    const double C42217 = C22810 * C44836;
    const double C39690 = C39688 + C9593;
    const double C42275 = C42274 + C13105;
    const double C29355 = C29353 + C20153;
    const double C29286 = C27496 * C44912;
    const double C39628 = C27496 * C44912;
    const double C42219 = C27496 * C44836;
    const double C42114 = C42112 * C20398;
    const double C11395 = C1504 * C4447;
    const double C11392 = C1504 * C44903;
    const double C31134 = C1504 * C15151;
    const double C31133 = C1504 * C44903;
    const double C40999 = C1504 * C44729;
    const double C14880 = C14879 * C4447;
    const double C34557 = C14879 * C15151;
    const double C40998 = C14879 * C44729;
    const double C585 = C582 * C44836;
    const double C4947 = C582 * C4449;
    const double C15651 = C582 * C15153;
    const double C586 = C583 * C44836;
    const double C1172 = C1170 * C44836;
    const double C4945 = C1170 * C44912;
    const double C5670 = C1170 * C4449;
    const double C15649 = C1170 * C44912;
    const double C16353 = C1170 * C15153;
    const double C1756 = C1754 * C44836;
    const double C6329 = C1754 * C4449;
    const double C16995 = C1754 * C15153;
    const double C43996 = ae * C43994;
    const double C43995 = C43932 * C43994;
    const double C44133 = C44002 * C43994;
    const double C44176 = C44027 * C43994;
    const double C2257 = (C43966 + C43994 * C44066) / C43783;
    const double C4050 = (C43966 + C43994 * C44115) / C43783;
    const double C2662 =
        (C44027 * C44132 + C44255 + C44255 +
         C43932 *
             (2 * ae * C44027 * C44002 * C43981 +
              C43932 * C44027 * C44002 *
                  (C43971 * C43972 + C43936 * bs[6] * std::pow(C43930, 6)) *
                  C43939)) /
        C43786;
    const double C7758 =
        (C44027 * C44062 + C44255 +
         C44002 * (C44179 + C44002 * C44027 *
                                (ae * C44020 + C43932 * std::pow(C43930, 6) *
                                                   bs[6] * C44054))) /
        C43786;
    const double C9486 =
        (C44002 * C44048 + C44255 +
         C44027 * (C44136 + C44027 * C44002 *
                                (ae * C44045 + C43932 * std::pow(C43930, 6) *
                                                   bs[6] * C44031))) /
        C43786;
    const double C9698 =
        (C44002 * C44100 + C44255 +
         C44027 * (C44136 + C44027 * C44002 *
                                (ae * C44045 + C43932 * std::pow(C43930, 6) *
                                                   bs[6] * C44092))) /
        C43786;
    const double C2260 =
        (C43961 + C43987 * C44066 + C44217 + C44217 +
         C43932 * (2 * ae * (C43957 + C43981 * C44066) +
                   C43932 * (C43987 + (C43971 * C43972 +
                                       C43936 * bs[6] * std::pow(C43930, 6)) *
                                          C43939 * C44066))) /
        C43786;
    const double C7048 =
        (2 * (C43964 + C44002 * C44023) + C44217 +
         C44002 * (C44023 + C44136 +
                   C44002 * (C43991 + C44002 * (ae * C44020 +
                                                C43932 * std::pow(C43930, 6) *
                                                    bs[6] * C44006)))) /
        C43786;
    const double C7164 =
        (2 * (C43964 + C44002 * C44062) + C44217 +
         C44002 * (C44062 + C44136 +
                   C44002 * (C43991 + C44002 * (ae * C44020 +
                                                C43932 * std::pow(C43930, 6) *
                                                    bs[6] * C44054)))) /
        C43786;
    const double C7680 =
        (C44217 +
         C44027 * (C44048 + (ae * C44045 +
                             C43932 * std::pow(C43930, 6) * bs[6] * C44031) *
                                C44066)) /
        C43786;
    const double C7981 =
        (C44217 +
         C44027 * (C44100 + (ae * C44045 +
                             C43932 * std::pow(C43930, 6) * bs[6] * C44092) *
                                C44066)) /
        C43786;
    const double C6989 = C4454 * C6980;
    const double C17645 = C15158 * C6980;
    const double C20787 = C20398 * C6980;
    const double C7535 = C4454 * C7526;
    const double C18149 = C15158 * C7526;
    const double C21317 = C20398 * C7526;
    const double C4053 =
        (C43961 + C43987 * C44115 + C44285 + C44285 +
         C43932 * (2 * ae * (C43957 + C43981 * C44115) +
                   C43932 * (C43987 + (C43971 * C43972 +
                                       C43936 * bs[6] * std::pow(C43930, 6)) *
                                          C43939 * C44115))) /
        C43786;
    const double C9538 =
        (C44285 +
         C44002 * (C44062 + (ae * C44020 +
                             C43932 * std::pow(C43930, 6) * bs[6] * C44054) *
                                C44115)) /
        C43786;
    const double C14754 =
        (2 * (C43964 + C44027 * C44048) + C44285 +
         C44027 * (C44048 + C44179 +
                   C44027 * (C43991 + C44027 * (ae * C44045 +
                                                C43932 * std::pow(C43930, 6) *
                                                    bs[6] * C44031)))) /
        C43786;
    const double C14983 =
        (2 * (C43964 + C44027 * C44100) + C44285 +
         C44027 * (C44100 + C44179 +
                   C44027 * (C43991 + C44027 * (ae * C44045 +
                                                C43932 * std::pow(C43930, 6) *
                                                    bs[6] * C44092)))) /
        C43786;
    const double C14631 = C4454 * C14622;
    const double C34333 = C15158 * C14622;
    const double C40771 = C20398 * C14622;
    const double C2433 =
        (C44071 + C44076 * C43936 + C44238 + C44238 +
         C44002 * (2 * ae * C44024 +
                   C44002 * (C44076 + (C43971 * C43972 +
                                       C44066 * bs[6] * std::pow(C43930, 6)) *
                                          C43939 * C43936))) /
        C43786;
    const double C3045 =
        (C44238 + C44027 * (ae * C44049 +
                            C44002 * (C44111 + std::pow(C43930, 6) * bs[6] *
                                                   C44105 * C43936))) /
        C43786;
    const double C2437 = C155 * C2304;
    const double C5367 = C4518 * C2304;
    const double C16059 = C15222 * C2304;
    const double C20575 = C20448 * C2304;
    const double C2887 = C155 * C2718;
    const double C6043 = C4518 * C2718;
    const double C16713 = C15222 * C2718;
    const double C44347 = C44346 + C44342;
    const double C7838 =
        (C44027 * C44338 + C44374 + C44374 +
         C44002 *
             (2 * ae * C44027 * C44339 +
              C44002 * C44027 * C43932 *
                  (C43971 * C43972 + C44066 * bs[6] * std::pow(C43930, 6)) *
                  C43939)) /
        C43786;
    const double C9750 =
        (ae * C44040 + C44002 * C44357 + C44374 +
         C44027 * (C44345 + C44027 * (ae * C44352 + C44002 * C43932 *
                                                        std::pow(C43930, 6) *
                                                        bs[6] * C44105))) /
        C43786;
    const double C44473 = ae * C44471;
    const double C44472 = C44002 * C44471;
    const double C44494 = C44027 * C44471;
    const double C24070 = (C44335 + C44471 * C44115) / C43783;
    const double C24189 =
        (C44071 + C44076 * C44115 + C44511 + C44511 +
         C44002 * (2 * ae * (C44013 + C44020 * C44115) +
                   C44002 * (C44076 + (C43971 * C43972 +
                                       C44066 * bs[6] * std::pow(C43930, 6)) *
                                          C43939 * C44115))) /
        C43786;
    const double C29513 =
        (2 * (C44333 + C44027 * C44485) + C44511 +
         C44027 * (C44485 + C44497 +
                   C44027 * (C44469 + C44027 * (ae * C44045 +
                                                C44002 * std::pow(C43930, 6) *
                                                    bs[6] * C44105)))) /
        C43786;
    const double C29352 = C15222 * C29168;
    const double C39687 = C4518 * C29168;
    const double C42273 = C155 * C29168;
    const double C14692 = C11152 * C44903;
    const double C34390 = C11152 * C44903;
    const double C40832 = C11152 * C44729;
    const double C4393 =
        (C44120 + C44125 * C43936 + C44318 + C44318 +
         C44027 * (2 * ae * C44049 +
                   C44027 * (C44125 + (C43971 * C43972 +
                                       C44115 * bs[6] * std::pow(C43930, 6)) *
                                          C43939 * C43936))) /
        C43786;
    const double C4397 = C222 * C4141;
    const double C11705 = C9960 * C4141;
    const double C31431 = C29728 * C4141;
    const double C40262 = C40021 * C4141;
    const double C9802 =
        (C44002 * C44360 + C44409 + C44409 +
         C44027 *
             (2 * ae * C44406 +
              C44027 * C44002 * C43932 *
                  (C43971 * C43972 + C44115 * bs[6] * std::pow(C43930, 6)) *
                  C43939)) /
        C43786;
    const double C9805 = C222 * C9484;
    const double C13381 = C9960 * C9484;
    const double C33089 = C29728 * C9484;
    const double C40718 = C40021 * C9484;
    const double C44444 = C44443 + C44440;
    const double C24348 =
        (C44120 + C44125 * C44066 + C44518 + C44518 +
         C44027 * (2 * ae * C44481 +
                   C44027 * (C44125 + (C43971 * C43972 +
                                       C44115 * bs[6] * std::pow(C43930, 6)) *
                                          C43939 * C44066))) /
        C43786;
    const double C24350 = C222 * C24110;
    const double C27864 = C9960 * C24110;
    const double C38221 = C29728 * C24110;
    const double C42005 = C40021 * C24110;
    const double C44540 = C44539 + C44535;
    const double C44579 = ae * C44577;
    const double C44578 = C44027 * C44577;
    const double C7104 = C5198 * C44903;
    const double C17752 = C5198 * C44903;
    const double C20911 = C5198 * C44729;
    const double C40946 = C40944 * C44836;
    const double C11396 = C1503 * C44903;
    const double C31135 = C1503 * C44903;
    const double C43613 = C43612 * C44729;
    const double C21161 = C21157 * C44851;
    const double C1171 = C1169 * C44836;
    const double C4946 = C1169 * C44912;
    const double C15650 = C1169 * C44912;
    const double C1755 = C1753 * C44836;
    const double C43803 = C43784 * C43795;
    const double C87 =
        (ae * -2 * C43782) / (C43786 * 2 * C43783) -
        (((C43784 * ((-4 * C43789) / C43783 - (C43784 * C43795) / C43783) *
           ae) /
              C43783 +
          2 * ((C43794 * ae) / C43783 - C43782 / C43790)) *
         be) /
            C43783 -
        C43795 / C43790;
    const double C91 = (-C43795 / C43783) / (4 * C43786);
    const double C4453 = (-C43795 / C43783) / (2 * C43783);
    const double C15157 = (-C43795 / C43783) / (2 * C43783);
    const double C20397 = -C43795 / C43783;
    const double C115 = C88 * C100;
    const double C114 = C88 * C99;
    const double C109 = C88 * C98;
    const double C656 = C88 * C645;
    const double C655 = C88 * C646;
    const double C1240 = C88 * C1229;
    const double C1239 = C88 * C1230;
    const double C2262 = C88 * C2255;
    const double C2664 = C88 * C2657;
    const double C4055 = C88 * C4048;
    const double C113 = C90 * C100;
    const double C110 = C90 * C99;
    const double C654 = C90 * C645;
    const double C1238 = C90 * C1229;
    const double C2263 = C90 * C2256;
    const double C2665 = C90 * C2658;
    const double C4056 = C90 * C4049;
    const double C4464 = C4452 * C100;
    const double C4463 = C4452 * C99;
    const double C4461 = C4452 * C645;
    const double C4458 = C4452 * C646;
    const double C4456 = C4452 * C98;
    const double C5024 = C4452 * C2256;
    const double C5019 = C4452 * C2255;
    const double C5192 = C798 * C4452;
    const double C5200 = C5196 * C4452;
    const double C5280 = C4452 * C709;
    const double C5276 = C4452 * C641;
    const double C5272 = C4452 * C710;
    const double C5268 = C4452 * C642;
    const double C5520 = C4452 * C779;
    const double C5516 = C4452 * C780;
    const double C5750 = C4452 * C2658;
    const double C5748 = C4452 * C1229;
    const double C5747 = C4452 * C1230;
    const double C5745 = C4452 * C2657;
    const double C6988 = C4452 * C6979;
    const double C7113 = C7111 * C4452;
    const double C7172 = C4452 * C2252;
    const double C7168 = C4452 * C2302;
    const double C7343 = C4452 * C2346;
    const double C7534 = C4452 * C7525;
    const double C7691 = C7689 * C4452;
    const double C7766 = C4452 * C2654;
    const double C7762 = C4452 * C2716;
    const double C7985 = C4452 * C2772;
    const double C9378 = C4452 * C9371;
    const double C9376 = C4452 * C4048;
    const double C11056 = C4452 * C4049;
    const double C11146 = C1312 * C4452;
    const double C11154 = C11150 * C4452;
    const double C11312 = C4452 * C1293;
    const double C11308 = C4452 * C1225;
    const double C11304 = C4452 * C1294;
    const double C11300 = C4452 * C1226;
    const double C11546 = C4452 * C1363;
    const double C11542 = C4452 * C1364;
    const double C12902 = C12900 * C4452;
    const double C14630 = C4452 * C14621;
    const double C14701 = C14699 * C4452;
    const double C14814 = C4452 * C4045;
    const double C14810 = C4452 * C4095;
    const double C14987 = C4452 * C4139;
    const double C15168 = C15156 * C100;
    const double C15167 = C15156 * C99;
    const double C15165 = C15156 * C645;
    const double C15162 = C15156 * C646;
    const double C15160 = C15156 * C98;
    const double C15728 = C15156 * C2256;
    const double C15723 = C15156 * C2255;
    const double C15890 = C798 * C15156;
    const double C15886 = C5196 * C15156;
    const double C15972 = C15156 * C709;
    const double C15968 = C15156 * C641;
    const double C15964 = C15156 * C710;
    const double C15960 = C15156 * C642;
    const double C16206 = C15156 * C779;
    const double C16202 = C15156 * C780;
    const double C16426 = C15156 * C2658;
    const double C16424 = C15156 * C1229;
    const double C16423 = C15156 * C1230;
    const double C16421 = C15156 * C2657;
    const double C17644 = C15156 * C6979;
    const double C17755 = C7111 * C15156;
    const double C17812 = C15156 * C2252;
    const double C17808 = C15156 * C2302;
    const double C17974 = C15156 * C2346;
    const double C18148 = C15156 * C7525;
    const double C18291 = C7689 * C15156;
    const double C18364 = C15156 * C2654;
    const double C18360 = C15156 * C2716;
    const double C18574 = C15156 * C2772;
    const double C19950 = C15156 * C9371;
    const double C19948 = C15156 * C4048;
    const double C30810 = C15156 * C4049;
    const double C30894 = C1312 * C15156;
    const double C30890 = C11150 * C15156;
    const double C31054 = C15156 * C1293;
    const double C31050 = C15156 * C1225;
    const double C31046 = C15156 * C1294;
    const double C31042 = C15156 * C1226;
    const double C31278 = C15156 * C1363;
    const double C31274 = C15156 * C1364;
    const double C32618 = C12900 * C15156;
    const double C34332 = C15156 * C14621;
    const double C34393 = C14699 * C15156;
    const double C34500 = C15156 * C4045;
    const double C34496 = C15156 * C4095;
    const double C34660 = C15156 * C4139;
    const double C22479 = C21145 + C21159;
    const double C43559 = C40935 + C40936;
    const double C43892 = C43817 * C43889;
    const double C20563 =
        (ae * -2 * C43877) / (C43786 * 2 * C43783) -
        (((C43817 * ((-4 * C43838) / C43783 - (C43817 * C43889) / C43783) *
           ae) /
              C43783 +
          2 * ((C43888 * ae) / C43783 - C43877 / C43790)) *
         be) /
            C43783 -
        C43889 / C43790;
    const double C20565 = (-C43889 / C43783) / (4 * C43786);
    const double C43922 = C43820 * C43919;
    const double C40250 =
        (ae * -2 * C43907) / (C43786 * 2 * C43783) -
        (((C43820 * ((-4 * C43850) / C43783 - (C43820 * C43919) / C43783) *
           ae) /
              C43783 +
          2 * ((C43918 * ae) / C43783 - C43907 / C43790)) *
         be) /
            C43783 -
        C43919 / C43790;
    const double C40252 = (-C43919 / C43783) / (4 * C43786);
    const double C6259 = C6255 + C6256;
    const double C10898 = C10893 + C10894;
    const double C16926 = C16922 + C16923;
    const double C5370 = C5368 + C5359;
    const double C5449 = C5448 * C44912;
    const double C16132 = C5448 * C44912;
    const double C16062 = C16060 + C16051;
    const double C10687 = C10686 + C2886;
    const double C6046 = C6044 + C6035;
    const double C6122 = C6121 * C44912;
    const double C16786 = C6121 * C44912;
    const double C10895 = C10473 * C9960;
    const double C12898 = C10473 * C4454;
    const double C30651 = C10473 * C29728;
    const double C32620 = C10473 * C15158;
    const double C16716 = C16714 + C16705;
    const double C11629 = C11628 * C44914;
    const double C31352 = C11628 * C44914;
    const double C11708 = C11706 + C11697;
    const double C31434 = C31432 + C31423;
    const double C5677 = C5676 * C44912;
    const double C16352 = C5676 * C44912;
    const double C6333 = C6332 * C44912;
    const double C16994 = C6332 * C44912;
    const double C14872 = C11402 * C44903;
    const double C34556 = C11402 * C44903;
    const double C41000 = C11402 * C44729;
    const double C106 =
        (2 * (2 * ae * C43944 + C43932 * C43961) + C43967 + C43967 +
         C43932 * (C43961 + C43964 + C43964 +
                   C43932 * (2 * ae * C43957 +
                             C43932 *
                                 (C43950 * C43951 +
                                  C43936 * bs[5] * std::pow(C43938, 5)) *
                                 C43939))) /
        C43786;
    const double C712 =
        (C43967 + C44002 * (C44012 + ae * C44015 + C43932 * C44023)) / C43786;
    const double C848 =
        (C43967 + C44002 * (C44057 + ae * C44015 + C43932 * C44062)) / C43786;
    const double C1366 =
        (C43967 + C44027 * (C44037 + ae * C44040 + C43932 * C44048)) / C43786;
    const double C1618 =
        (C43967 + C44027 * (C44095 + ae * C44040 + C43932 * C44100)) / C43786;
    const double C116 = C90 * C101;
    const double C112 = C92 * C101;
    const double C175 = C155 * C101;
    const double C242 = C222 * C101;
    const double C4465 = C4454 * C101;
    const double C15169 = C15158 * C101;
    const double C657 = C90 * C644;
    const double C653 = C92 * C644;
    const double C717 = C155 * C644;
    const double C787 = C222 * C644;
    const double C4466 = C4452 * C644;
    const double C4460 = C4454 * C644;
    const double C4528 = C4518 * C644;
    const double C5279 = C44903 * C644;
    const double C15170 = C15156 * C644;
    const double C15164 = C15158 * C644;
    const double C15232 = C15222 * C644;
    const double C15971 = C44903 * C644;
    const double C20407 = C20398 * C644;
    const double C1241 = C90 * C1228;
    const double C1237 = C92 * C1228;
    const double C1301 = C155 * C1228;
    const double C1371 = C222 * C1228;
    const double C5749 = C4454 * C1228;
    const double C9858 = C4452 * C1228;
    const double C9970 = C9960 * C1228;
    const double C11311 = C44903 * C1228;
    const double C16425 = C15158 * C1228;
    const double C24401 = C20398 * C1228;
    const double C29626 = C15156 * C1228;
    const double C29738 = C29728 * C1228;
    const double C31053 = C44903 * C1228;
    const double C5112 = C5104 + C5105;
    const double C15816 = C15808 + C15809;
    const double C7174 = C7166 + C7167;
    const double C17814 = C17806 + C17807;
    const double C20985 = C20976 + C20977;
    const double C5900 = C5896 + C5897;
    const double C10548 = C10540 + C10541;
    const double C30310 = C30302 + C30303;
    const double C7987 = C7983 + C7984;
    const double C18576 = C18572 + C18573;
    const double C25307 = C25305 + C25306;
    const double C12899 = C10472 * C44903;
    const double C32621 = C10472 * C44903;
    const double C25304 = C25092 * C9960;
    const double C25749 = C25092 * C15222;
    const double C35708 = C25092 * C29728;
    const double C36134 = C25092 * C4518;
    const double C7768 = C7760 + C7761;
    const double C18366 = C18358 + C18359;
    const double C25093 = C25090 + C25091;
    const double C11230 = C11222 + C11223;
    const double C30972 = C30964 + C30965;
    const double C14989 = C14985 + C14986;
    const double C34662 = C34658 + C34659;
    const double C41103 = C41101 + C41102;
    const double C7227 =
        (2 * (2 * ae * C44008 + C44002 * C44071) + C44336 + C44336 +
         C44002 * (C44071 + C44333 + C44333 +
                   C44002 * (2 * C44016 + C44002 * C44076))) /
        C43786;
    const double C8054 =
        (C44336 + C44027 * (C44108 + ae * C44002 * C44038 +
                            C44002 * (C44041 + C44002 * C44111))) /
        C43786;
    const double C7231 = C4518 * C7045;
    const double C17869 = C15222 * C7045;
    const double C21036 = C20448 * C7045;
    const double C22350 = C20398 * C7045;
    const double C22396 = C20447 * C7045;
    const double C22437 = C222 * C7045;
    const double C7841 = C4518 * C7607;
    const double C12556 = C155 * C7607;
    const double C18437 = C15222 * C7607;
    const double C21518 = C20448 * C7607;
    const double C22800 = C20398 * C7607;
    const double C22864 = C20447 * C7607;
    const double C22917 = C222 * C7607;
    const double C26969 = C15221 * C7607;
    const double C27021 = C9960 * C7607;
    const double C27335 = C44912 * C7607;
    const double C37340 = C4517 * C7607;
    const double C37392 = C29728 * C7607;
    const double C37701 = C44912 * C7607;
    const double C29519 = C29515 + C29516;
    const double C39848 = C39844 + C39845;
    const double C42430 = C42428 + C42429;
    const double C15095 =
        (2 * (2 * ae * C44033 + C44027 * C44120) + C44435 + C44435 +
         C44027 * (C44120 + C44432 + C44432 +
                   C44027 * (2 * C44041 + C44027 * C44125))) /
        C43786;
    const double C15099 = C9960 * C14751;
    const double C34765 = C29728 * C14751;
    const double C41204 = C40021 * C14751;
    const double C43692 = C20398 * C14751;
    const double C43734 = C155 * C14751;
    const double C43777 = C40020 * C14751;
    const double C27867 = C27865 + C13379;
    const double C27720 = C27719 * C44914;
    const double C38074 = C27719 * C44914;
    const double C38224 = C38222 + C33087;
    const double C13109 = C13108 + C13103;
    const double C36211 = C36209 + C36205;
    const double C37934 = C37932 + C37925;
    const double C25834 = C25832 + C25828;
    const double C27574 = C27572 + C27565;
    const double C39692 = C39690 + C39683;
    const double C42276 = C42275 + C42272;
    const double C29357 = C29355 + C29348;
    const double C2721 =
        (C44027 * (C43996 + C44002 * (C44019 + ae * C43932 * C44020 +
                                      C43932 * (ae * C44020 +
                                                C43932 * std::pow(C43930, 6) *
                                                    bs[6] * C44006)))) /
        C43786;
    const double C43997 = C43973 + C43995;
    const double C44135 = ae * C44133;
    const double C2659 = (C44027 * C44133) / C43783;
    const double C44178 = ae * C44176;
    const double C2264 = C92 * C2257;
    const double C5025 = C4454 * C2257;
    const double C15729 = C15158 * C2257;
    const double C20408 = C20398 * C2257;
    const double C4057 = C92 * C4050;
    const double C11057 = C4454 * C4050;
    const double C30811 = C15158 * C4050;
    const double C39943 = C20398 * C4050;
    const double C44348 = ae * C44347;
    const double C7046 =
        (2 * C44233 + C44002 * C44347 + (C43955 + C43978 * C44066) * ae) /
        C43783;
    const double C7608 = (C44027 * C44347) / C43783;
    const double C44474 = C44459 + C44472;
    const double C44496 = ae * C44494;
    const double C24193 = C20448 * C24070;
    const double C27569 = C15222 * C24070;
    const double C37929 = C4518 * C24070;
    const double C41850 = C155 * C24070;
    const double C44445 = ae * C44444;
    const double C14752 =
        (2 * C44313 + C44027 * C44444 + (C43955 + C43978 * C44115) * ae) /
        C43783;
    const double C44541 = ae * C44540;
    const double C29232 =
        (2 * C44403 + C44027 * C44540 + (C44329 + C44461 * C44115) * ae) /
        C43783;
    const double C44580 = C44565 + C44578;
    const double C89 =
        (((-4 * C43789) / C43783 - C43803 / C43783) * ae) / C43790 -
        ((2 * ((0 * ae) / C43783 - C43789 / C43786) - C43803 / C43790) * be) /
            C43783;
    const double C4451 =
        -(((-4 * C43789) / C43783 - C43803 / C43783) * be) / C43783;
    const double C15155 =
        (((-4 * C43789) / C43783 - C43803 / C43783) * ae) / C43783;
    const double C5022 = C4453 * C640;
    const double C5016 = C4453 * C641;
    const double C6984 = C4453 * C2253;
    const double C7530 = C4453 * C2655;
    const double C11054 = C4453 * C1224;
    const double C11050 = C4453 * C1225;
    const double C14626 = C4453 * C4046;
    const double C15726 = C15157 * C640;
    const double C15720 = C15157 * C641;
    const double C17640 = C15157 * C2253;
    const double C18144 = C15157 * C2655;
    const double C30808 = C15157 * C1224;
    const double C30804 = C15157 * C1225;
    const double C34328 = C15157 * C4046;
    const double C20785 = C20397 * C2253;
    const double C20783 = C20397 * C641;
    const double C20780 = C20397 * C2252;
    const double C20778 = C20397 * C642;
    const double C22215 = C20397 * C6977;
    const double C22624 = C20397 * C2654;
    const double C22622 = C20397 * C7523;
    const double C24872 = C20397 * C2655;
    const double C25519 = C20397 * C1225;
    const double C25517 = C20397 * C1226;
    const double C27259 = C20397 * C9369;
    const double C29112 = C20397 * C4045;
    const double C40769 = C20397 * C4046;
    const double C43425 = C20397 * C14619;
    const double C5290 = C5280 + C5281;
    const double C5288 = C5276 + C5277;
    const double C5286 = C5272 + C5273;
    const double C5284 = C5268 + C5269;
    const double C5526 = C5520 + C5521;
    const double C5524 = C5516 + C5517;
    const double C7177 = C7172 + C7173;
    const double C7175 = C7168 + C7169;
    const double C7346 = C7343 + C7344;
    const double C7771 = C7766 + C7767;
    const double C7769 = C7762 + C7763;
    const double C7988 = C7985 + C7986;
    const double C11322 = C11312 + C11313;
    const double C11320 = C11308 + C11309;
    const double C11318 = C11304 + C11305;
    const double C11316 = C11300 + C11301;
    const double C11552 = C11546 + C11547;
    const double C11550 = C11542 + C11543;
    const double C14819 = C14814 + C14815;
    const double C14817 = C14810 + C14811;
    const double C14990 = C14987 + C14988;
    const double C15982 = C15972 + C15973;
    const double C15980 = C15968 + C15969;
    const double C15978 = C15964 + C15965;
    const double C15976 = C15960 + C15961;
    const double C16212 = C16206 + C16207;
    const double C16210 = C16202 + C16203;
    const double C17817 = C17812 + C17813;
    const double C17815 = C17808 + C17809;
    const double C17977 = C17974 + C17975;
    const double C18369 = C18364 + C18365;
    const double C18367 = C18360 + C18361;
    const double C18577 = C18574 + C18575;
    const double C31064 = C31054 + C31055;
    const double C31062 = C31050 + C31051;
    const double C31060 = C31046 + C31047;
    const double C31058 = C31042 + C31043;
    const double C31284 = C31278 + C31279;
    const double C31282 = C31274 + C31275;
    const double C34505 = C34500 + C34501;
    const double C34503 = C34496 + C34497;
    const double C34663 = C34660 + C34661;
    const double C20564 =
        (((-4 * C43838) / C43783 - C43892 / C43783) * ae) / C43790 -
        ((2 * ((0 * ae) / C43783 - C43838 / C43786) - C43892 / C43790) * be) /
            C43783;
    const double C40251 =
        (((-4 * C43850) / C43783 - C43922 / C43783) * ae) / C43790 -
        ((2 * ((0 * ae) / C43783 - C43850 / C43786) - C43922 / C43790) * be) /
            C43783;
    const double C10899 = C10898 * C44914;
    const double C30650 = C10898 * C44914;
    const double C5372 = C5370 + C5360;
    const double C16064 = C16062 + C16052;
    const double C10688 = C10687 + C10685;
    const double C6048 = C6046 + C6036;
    const double C16718 = C16716 + C16706;
    const double C11710 = C11708 + C11698;
    const double C31436 = C31434 + C31424;
    const double C718 = C44836 * C712;
    const double C4529 = C44912 * C712;
    const double C15233 = C44912 * C712;
    const double C5283 = C44903 * C848;
    const double C15975 = C44903 * C848;
    const double C1372 = C44851 * C1366;
    const double C9971 = C44914 * C1366;
    const double C29739 = C44914 * C1366;
    const double C11549 = C44903 * C1618;
    const double C31281 = C44903 * C1618;
    const double C183 = C175 + C176;
    const double C250 = C242 + C243;
    const double C795 = C787 + C788;
    const double C5289 = C5278 + C5279;
    const double C15981 = C15970 + C15971;
    const double C1309 = C1301 + C1302;
    const double C11321 = C11310 + C11311;
    const double C31063 = C31052 + C31053;
    const double C7682 = C5900 * C44903;
    const double C18288 = C5900 * C44903;
    const double C25308 = C25307 * C44914;
    const double C35709 = C25307 * C44914;
    const double C25750 = C25093 * C44912;
    const double C36135 = C25093 * C44912;
    const double C27790 = C44912 * C8054;
    const double C38147 = C44912 * C8054;
    const double C22354 = C22350 + C22351;
    const double C22439 = C22437 + C22438;
    const double C37931 = C37926 + C7841;
    const double C27571 = C27566 + C18437;
    const double C22808 = C22800 + C22801;
    const double C22919 = C22917 + C22918;
    const double C27025 = C27021 + C27022;
    const double C27341 = C27334 + C27335;
    const double C37396 = C37392 + C37393;
    const double C37707 = C37700 + C37701;
    const double C43694 = C43692 + C43693;
    const double C43736 = C43734 + C43735;
    const double C27869 = C27867 + C27860;
    const double C38226 = C38224 + C38217;
    const double C13110 = C13109 * C4447;
    const double C32820 = C13109 * C15151;
    const double C42270 = C13109 * C44729;
    const double C42277 = C42276 * C44729;
    const double C43998 = C43997 + C43986;
    const double C651 =
        (2 * (2 * ae * C44002 * C43957 + C43932 * C44132) + C44135 + C44135 +
         C43932 * (C44132 + C44136 + C44136 +
                   C43932 * (2 * ae * C44002 * C43981 +
                             C43932 * C44002 *
                                 (C43971 * C43972 +
                                  C43936 * bs[6] * std::pow(C43930, 6)) *
                                 C43939))) /
        C43786;
    const double C2307 =
        (C44012 + ae * C44015 + C43932 * C44023 + C44135 +
         C44002 * (C43996 + C44002 * (C44019 + ae * C43932 * C44020 +
                                      C43932 * (ae * C44020 +
                                                C43932 * std::pow(C43930, 6) *
                                                    bs[6] * C44006)))) /
        C43786;
    const double C2392 =
        (C44057 + ae * C44015 + C43932 * C44062 + C44135 +
         C44002 * (C43996 + C44002 * (C44060 + ae * C43932 * C44020 +
                                      C43932 * (ae * C44020 +
                                                C43932 * std::pow(C43930, 6) *
                                                    bs[6] * C44054)))) /
        C43786;
    const double C2777 =
        (C44135 + C44027 * C44002 *
                      (C44044 + ae * C43932 * C44045 +
                       C43932 * (ae * C44045 + C43932 * std::pow(C43930, 6) *
                                                   bs[6] * C44031))) /
        C43786;
    const double C2992 =
        (C44135 + C44027 * C44002 *
                      (C44098 + ae * C43932 * C44045 +
                       C43932 * (ae * C44045 + C43932 * std::pow(C43930, 6) *
                                                   bs[6] * C44092))) /
        C43786;
    const double C2666 = C92 * C2659;
    const double C5751 = C4454 * C2659;
    const double C16427 = C15158 * C2659;
    const double C24402 = C20398 * C2659;
    const double C1235 =
        (2 * (2 * ae * C44027 * C43957 + C43932 * C44175) + C44178 + C44178 +
         C43932 * (C44175 + C44179 + C44179 +
                   C43932 * (2 * ae * C44027 * C43981 +
                             C43932 * C44027 *
                                 (C43971 * C43972 +
                                  C43936 * bs[6] * std::pow(C43930, 6)) *
                                 C43939))) /
        C43786;
    const double C2830 =
        (C44178 + C44002 * C44027 *
                      (C44060 + ae * C43932 * C44020 +
                       C43932 * (ae * C44020 + C43932 * std::pow(C43930, 6) *
                                                   bs[6] * C44054))) /
        C43786;
    const double C4144 =
        (C44037 + ae * C44040 + C43932 * C44048 + C44178 +
         C44027 * (C43996 + C44027 * (C44044 + ae * C43932 * C44045 +
                                      C43932 * (ae * C44045 +
                                                C43932 * std::pow(C43930, 6) *
                                                    bs[6] * C44031)))) /
        C43786;
    const double C4311 =
        (C44095 + ae * C44040 + C43932 * C44100 + C44178 +
         C44027 * (C43996 + C44027 * (C44098 + ae * C43932 * C44045 +
                                      C43932 * (ae * C44045 +
                                                C43932 * std::pow(C43930, 6) *
                                                    bs[6] * C44092)))) /
        C43786;
    const double C7228 =
        (2 * (2 * ae * C44015 + C44002 * C44338) + C44348 + C44348 +
         C44002 * (C44338 + C44345 + C44345 +
                   C44002 * (2 * ae * C44339 +
                             C44002 * C43932 *
                                 (C43971 * C43972 +
                                  C44066 * bs[6] * std::pow(C43930, 6)) *
                                 C43939))) /
        C43786;
    const double C8055 =
        (C44348 + C44027 * (C44357 + ae * C44002 * C44352 +
                            C44002 * (ae * C44352 + C44002 * C43932 *
                                                        std::pow(C43930, 6) *
                                                        bs[6] * C44105))) /
        C43786;
    const double C7233 = C4518 * C7046;
    const double C17871 = C15222 * C7046;
    const double C21041 = C20448 * C7046;
    const double C7843 = C4518 * C7608;
    const double C12557 = C155 * C7608;
    const double C18439 = C15222 * C7608;
    const double C21523 = C20448 * C7608;
    const double C44475 = C44474 + C44468;
    const double C22861 =
        (2 * (2 * ae * C44027 * C44013 + C44002 * C44493) + C44496 + C44496 +
         C44002 * (C44493 + C44497 + C44497 +
                   C44002 * (2 * ae * C44027 * C44020 +
                             C44002 * C44027 *
                                 (C43971 * C43972 +
                                  C44066 * bs[6] * std::pow(C43930, 6)) *
                                 C43939))) /
        C43786;
    const double C24309 =
        (C44108 + ae * C44401 + C44002 * C44485 + C44496 +
         C44027 * (C44473 + C44027 * (C44111 + ae * C44002 * C44045 +
                                      C44002 * (ae * C44045 +
                                                C44002 * std::pow(C43930, 6) *
                                                    bs[6] * C44105)))) /
        C43786;
    const double C15096 =
        (2 * (2 * ae * C44040 + C44027 * C44360) + C44445 + C44445 +
         C44027 * (C44360 + C44442 + C44442 +
                   C44027 * (2 * ae * C44352 +
                             C44027 * C43932 *
                                 (C43971 * C43972 +
                                  C44115 * bs[6] * std::pow(C43930, 6)) *
                                 C43939))) /
        C43786;
    const double C15101 = C9960 * C14752;
    const double C34767 = C29728 * C14752;
    const double C41209 = C40021 * C14752;
    const double C29570 =
        (2 * (2 * ae * C44401 + C44027 * C44531) + C44541 + C44541 +
         C44027 * (C44531 + C44538 + C44538 +
                   C44027 * (2 * ae * C44532 +
                             C44027 * C44002 *
                                 (C43971 * C43972 +
                                  C44115 * bs[6] * std::pow(C43930, 6)) *
                                 C43939))) /
        C43786;
    const double C29573 = C9960 * C29232;
    const double C39901 = C29728 * C29232;
    const double C42483 = C40021 * C29232;
    const double C44581 = C44580 + C44574;
    const double C5020 = C4451 * C641;
    const double C5014 = C4451 * C642;
    const double C6986 = C4451 * C2252;
    const double C7532 = C4451 * C2654;
    const double C11052 = C4451 * C1225;
    const double C11048 = C4451 * C1226;
    const double C14628 = C4451 * C4045;
    const double C15724 = C15155 * C641;
    const double C15718 = C15155 * C642;
    const double C17642 = C15155 * C2252;
    const double C18146 = C15155 * C2654;
    const double C30806 = C15155 * C1225;
    const double C30802 = C15155 * C1226;
    const double C34330 = C15155 * C4045;
    const double C5029 = C5022 + C4460;
    const double C5027 = C5016 + C4459;
    const double C6990 = C6984 + C5018;
    const double C7536 = C7530 + C5744;
    const double C11061 = C11054 + C5749;
    const double C11059 = C11050 + C5746;
    const double C14632 = C14626 + C9377;
    const double C15733 = C15726 + C15164;
    const double C15731 = C15720 + C15163;
    const double C17646 = C17640 + C15722;
    const double C18150 = C18144 + C16420;
    const double C30815 = C30808 + C16425;
    const double C30813 = C30804 + C16422;
    const double C34334 = C34328 + C19949;
    const double C20791 = C20785 + C20403;
    const double C20790 = C20783 + C20404;
    const double C20789 = C20780 + C20402;
    const double C20788 = C20778 + C20401;
    const double C22218 = C22215 + C20782;
    const double C22628 = C22624 + C21313;
    const double C22627 = C22622 + C21312;
    const double C24874 = C24872 + C21316;
    const double C25524 = C25519 + C21315;
    const double C25523 = C25517 + C21314;
    const double C27262 = C27259 + C24031;
    const double C29116 = C29112 + C24030;
    const double C40772 = C40769 + C25521;
    const double C43428 = C43425 + C29114;
    const double C13104 = C10688 * C44903;
    const double C32821 = C10688 * C44903;
    const double C725 = C717 + C718;
    const double C4540 = C4528 + C4529;
    const double C15244 = C15232 + C15233;
    const double C5291 = C5282 + C5283;
    const double C15983 = C15974 + C15975;
    const double C1379 = C1371 + C1372;
    const double C9982 = C9970 + C9971;
    const double C29750 = C29738 + C29739;
    const double C11553 = C11548 + C11549;
    const double C31285 = C31280 + C31281;
    const double C5195 = C795 * C44903;
    const double C15893 = C795 * C44903;
    const double C11149 = C1309 * C44903;
    const double C30897 = C1309 * C44903;
    const double C27792 = C27789 + C27790;
    const double C38149 = C38146 + C38147;
    const double C37933 = C37931 + C7841;
    const double C27573 = C27571 + C18437;
    const double C27495 = C22808 * C44912;
    const double C37857 = C22808 * C44912;
    const double C43999 = ae * C43998;
    const double C102 =
        (3 * C43966 + C43932 * C43998 + (2 * C43955 + C43932 * C43983) * ae) /
        C43783;
    const double C647 = (C44002 * C43998) / C43783;
    const double C1231 = (C44027 * C43998) / C43783;
    const double C44476 = ae * C44475;
    const double C22259 =
        (3 * C44335 + C44002 * C44475 + (2 * C44329 + C44002 * C44466) * ae) /
        C43783;
    const double C22684 = (C44027 * C44475) / C43783;
    const double C44582 = ae * C44581;
    const double C43517 =
        (3 * C44434 + C44027 * C44581 + (2 * C44428 + C44027 * C44572) * ae) /
        C43783;
    const double C5028 = C5020 + C4461;
    const double C5026 = C5014 + C4458;
    const double C6991 = C6986 + C5019;
    const double C7537 = C7532 + C5745;
    const double C11060 = C11052 + C5748;
    const double C11058 = C11048 + C5747;
    const double C14633 = C14628 + C9376;
    const double C15732 = C15724 + C15165;
    const double C15730 = C15718 + C15162;
    const double C17647 = C17642 + C15723;
    const double C18151 = C18146 + C16421;
    const double C30814 = C30806 + C16424;
    const double C30812 = C30802 + C16423;
    const double C34335 = C34330 + C19948;
    const double C5033 = C5029 + C4460;
    const double C5031 = C5027 + C4459;
    const double C6992 = C6990 + C5018;
    const double C7538 = C7536 + C5744;
    const double C11065 = C11061 + C5749;
    const double C11063 = C11059 + C5746;
    const double C14634 = C14632 + C9377;
    const double C15737 = C15733 + C15164;
    const double C15735 = C15731 + C15163;
    const double C17648 = C17646 + C15722;
    const double C18152 = C18150 + C16420;
    const double C30819 = C30815 + C16425;
    const double C30817 = C30813 + C16422;
    const double C34336 = C34334 + C19949;
    const double C20795 = C20791 + C20403;
    const double C20794 = C20790 + C20404;
    const double C20793 = C20789 + C20402;
    const double C20792 = C20788 + C20401;
    const double C22219 = C22218 + C20782;
    const double C22630 = C22628 + C21313;
    const double C22629 = C22627 + C21312;
    const double C24875 = C24874 + C21316;
    const double C25526 = C25524 + C21315;
    const double C25525 = C25523 + C21314;
    const double C27263 = C27262 + C24031;
    const double C29117 = C29116 + C24030;
    const double C40773 = C40772 + C25521;
    const double C43429 = C43428 + C29114;
    const double C37935 = C37933 + C37927;
    const double C27575 = C27573 + C27567;
    const double C107 =
        (3 * (C43961 + C43964 + C43964 + C43932 * C43992) + C43999 + C43999 +
         C43932 *
             (2 * C43992 + C43996 + C43996 +
              C43932 * (C43987 + C43991 + C43991 +
                        C43932 * (2 * ae * C43981 +
                                  C43932 *
                                      (C43971 * C43972 +
                                       C43936 * bs[6] * std::pow(C43930, 6)) *
                                      C43939)))) /
        C43786;
    const double C715 =
        (C43999 + C44002 * (2 * C44023 + ae * C44024 +
                            C43932 * (C44019 + ae * C43932 * C44020 +
                                      C43932 * (ae * C44020 +
                                                C43932 * std::pow(C43930, 6) *
                                                    bs[6] * C44006)))) /
        C43786;
    const double C851 =
        (C43999 + C44002 * (2 * C44062 + ae * C44024 +
                            C43932 * (C44060 + ae * C43932 * C44020 +
                                      C43932 * (ae * C44020 +
                                                C43932 * std::pow(C43930, 6) *
                                                    bs[6] * C44054)))) /
        C43786;
    const double C1369 =
        (C43999 + C44027 * (2 * C44048 + ae * C44049 +
                            C43932 * (C44044 + ae * C43932 * C44045 +
                                      C43932 * (ae * C44045 +
                                                C43932 * std::pow(C43930, 6) *
                                                    bs[6] * C44031)))) /
        C43786;
    const double C1621 =
        (C43999 + C44027 * (2 * C44100 + ae * C44049 +
                            C43932 * (C44098 + ae * C43932 * C44045 +
                                      C43932 * (ae * C44045 +
                                                C43932 * std::pow(C43930, 6) *
                                                    bs[6] * C44092)))) /
        C43786;
    const double C117 = C92 * C102;
    const double C658 = C92 * C647;
    const double C4467 = C4454 * C647;
    const double C15171 = C15158 * C647;
    const double C1242 = C92 * C1231;
    const double C9859 = C4454 * C1231;
    const double C29627 = C15158 * C1231;
    const double C22393 =
        (3 * (C44071 + C44333 + C44333 + C44002 * C44463) + C44476 + C44476 +
         C44002 *
             (2 * C44463 + C44473 + C44473 +
              C44002 * (C44076 + C44469 + C44469 +
                        C44002 * (2 * ae * C44020 +
                                  C44002 *
                                      (C43971 * C43972 +
                                       C44066 * bs[6] * std::pow(C43930, 6)) *
                                      C43939)))) /
        C43786;
    const double C23030 =
        (C44476 + C44027 * (2 * C44485 + ae * C44481 +
                            C44002 * (C44111 + ae * C44002 * C44045 +
                                      C44002 * (ae * C44045 +
                                                C44002 * std::pow(C43930, 6) *
                                                    bs[6] * C44105)))) /
        C43786;
    const double C22397 = C20448 * C22259;
    const double C22865 = C20448 * C22684;
    const double C26970 = C15222 * C22684;
    const double C37341 = C4518 * C22684;
    const double C43774 =
        (3 * (C44120 + C44432 + C44432 + C44027 * C44569) + C44582 + C44582 +
         C44027 *
             (2 * C44569 + C44579 + C44579 +
              C44027 * (C44125 + C44575 + C44575 +
                        C44027 * (2 * ae * C44045 +
                                  C44027 *
                                      (C43971 * C43972 +
                                       C44115 * bs[6] * std::pow(C43930, 6)) *
                                      C43939)))) /
        C43786;
    const double C43778 = C40021 * C43517;
    const double C5032 = C5028 + C4461;
    const double C5030 = C5026 + C4458;
    const double C6993 = C6991 + C5019;
    const double C7539 = C7537 + C5745;
    const double C11064 = C11060 + C5748;
    const double C11062 = C11058 + C5747;
    const double C14635 = C14633 + C9376;
    const double C15736 = C15732 + C15165;
    const double C15734 = C15730 + C15162;
    const double C17649 = C17647 + C15723;
    const double C18153 = C18151 + C16421;
    const double C30818 = C30814 + C16424;
    const double C30816 = C30812 + C16423;
    const double C34337 = C34335 + C19948;
    const double C5037 = C5033 + C5023;
    const double C5035 = C5031 + C5017;
    const double C6994 = C6992 + C6985;
    const double C7540 = C7538 + C7531;
    const double C11069 = C11065 + C11055;
    const double C11067 = C11063 + C11051;
    const double C14636 = C14634 + C14627;
    const double C15741 = C15737 + C15727;
    const double C15739 = C15735 + C15721;
    const double C17650 = C17648 + C17641;
    const double C18154 = C18152 + C18145;
    const double C30823 = C30819 + C30809;
    const double C30821 = C30817 + C30805;
    const double C34338 = C34336 + C34329;
    const double C20799 = C20795 + C20786;
    const double C20798 = C20794 + C20784;
    const double C20797 = C20793 + C20781;
    const double C20796 = C20792 + C20779;
    const double C22220 = C22219 + C22216;
    const double C22632 = C22630 + C22625;
    const double C22631 = C22629 + C22623;
    const double C24876 = C24875 + C24873;
    const double C25528 = C25526 + C25520;
    const double C25527 = C25525 + C25518;
    const double C27264 = C27263 + C27260;
    const double C29118 = C29117 + C29113;
    const double C40774 = C40773 + C40770;
    const double C43430 = C43429 + C43426;
    const double C5036 = C5032 + C5021;
    const double C5034 = C5030 + C5015;
    const double C6995 = C6993 + C6987;
    const double C7541 = C7539 + C7533;
    const double C11068 = C11064 + C11053;
    const double C11066 = C11062 + C11049;
    const double C14637 = C14635 + C14629;
    const double C15740 = C15736 + C15725;
    const double C15738 = C15734 + C15719;
    const double C17651 = C17649 + C17643;
    const double C18155 = C18153 + C18147;
    const double C30822 = C30818 + C30807;
    const double C30820 = C30816 + C30803;
    const double C34339 = C34337 + C34331;
    const double C20803 = C20799 * C44851;
    const double C20802 = C20798 * C44851;
    const double C24871 = C20798 * C9855;
    const double C35286 = C20798 * C29623;
    const double C20801 = C20797 * C44851;
    const double C26756 = C20797 * C9855;
    const double C37127 = C20797 * C29623;
    const double C20800 = C20796 * C44851;
    const double C24869 = C20796 * C9855;
    const double C35284 = C20796 * C29623;
    const double C22221 = C22220 * C44851;
    const double C22634 = C22632 * C44851;
    const double C24870 = C22632 * C44914;
    const double C27261 = C22632 * C9855;
    const double C35285 = C22632 * C44914;
    const double C37631 = C22632 * C29623;
    const double C22633 = C22631 * C44851;
    const double C26755 = C22631 * C44914;
    const double C37126 = C22631 * C44914;
    const double C24877 = C24876 * C44914;
    const double C35287 = C24876 * C44914;
    const double C27265 = C27264 * C44914;
    const double C37630 = C27264 * C44914;
    
    d2eexx[0] += (2 * std::pow(Pi, 2.5) *
                  ((C87 * C93 + C109 + C109 + C77 * C103 + C89 * C94 + C110 +
                    C110 + C78 * C104 + C91 * C95 + C111 + C111 + C79 * C105) *
                       C44851 * C44836 * C44803 * C44786 * C84 -
                   (C91 * C96 + C112 + C112 + C79 * C106 + C89 * C95 + C113 +
                    C113 + C78 * C105 + C87 * C94 + C114 + C114 + C77 * C104) *
                       C44851 * C44836 * C44803 * C44786 * C85 +
                   (C87 * C95 + C115 + C115 + C77 * C105 + C89 * C96 + C116 +
                    C116 + C78 * C106 + C91 * C97 + C117 + C117 + C79 * C107) *
                       C44851 * C44836 * C44803 * C44786 * C86)) /
                 (p * q * std::sqrt(p + q));
    d2eexy[0] += (2 * std::pow(Pi, 2.5) *
                  (((C155 * C93 + C44836 * C156) * C88 +
                    (C155 * C98 + C44836 * C161) * C77 + C179 * C90 +
                    C180 * C78 + C181 * C92 + C182 * C79) *
                       C44851 * C44803 * C44786 * C84 -
                   (C183 * C79 + C184 * C92 + C182 * C78 + C181 * C90 +
                    C180 * C77 + C179 * C88) *
                       C44851 * C44803 * C44786 * C85 +
                   (C181 * C88 + C182 * C77 + C184 * C90 + C183 * C78 +
                    (C155 * C97 + C44836 * C160) * C92 +
                    (C155 * C102 + C44836 * C165) * C79) *
                       C44851 * C44803 * C44786 * C86)) /
                 (p * q * std::sqrt(p + q));
    d2eexz[0] += (2 * std::pow(Pi, 2.5) *
                  (((C222 * C93 + C44851 * C223) * C88 +
                    (C222 * C98 + C44851 * C228) * C77 + C246 * C90 +
                    C247 * C78 + C248 * C92 + C249 * C79) *
                       C44836 * C44803 * C44786 * C84 -
                   (C250 * C79 + C251 * C92 + C249 * C78 + C248 * C90 +
                    C247 * C77 + C246 * C88) *
                       C44836 * C44803 * C44786 * C85 +
                   (C248 * C88 + C249 * C77 + C251 * C90 + C250 * C78 +
                    (C222 * C97 + C44851 * C227) * C92 +
                    (C222 * C102 + C44851 * C232) * C79) *
                       C44836 * C44803 * C44786 * C86)) /
                 (p * q * std::sqrt(p + q));
    d2eeyx[0] += (2 * std::pow(Pi, 2.5) *
                  (((C88 * C93 + C77 * C98 + C90 * C94 + C78 * C99 + C92 * C95 +
                     C79 * C100) *
                        C155 +
                    (C88 * C156 + C77 * C289 + C90 * C157 + C78 * C290 +
                     C92 * C158 + C79 * C291) *
                        C44836) *
                       C44851 * C44803 * C44786 * C84 -
                   ((C92 * C159 + C79 * C292 + C90 * C158 + C78 * C291 +
                     C88 * C157 + C77 * C290) *
                        C44836 +
                    (C92 * C96 + C79 * C101 + C90 * C95 + C78 * C100 +
                     C88 * C94 + C77 * C99) *
                        C155) *
                       C44851 * C44803 * C44786 * C85 +
                   ((C88 * C95 + C77 * C100 + C90 * C96 + C78 * C101 +
                     C92 * C97 + C79 * C102) *
                        C155 +
                    (C88 * C158 + C77 * C291 + C90 * C159 + C78 * C292 +
                     C92 * C160 + C79 * C293) *
                        C44836) *
                       C44851 * C44803 * C44786 * C86)) /
                 (p * q * std::sqrt(p + q));
    d2eeyy[0] += (2 * std::pow(Pi, 2.5) *
                  (((C332 * C93 + C339 + C339 + C44836 * C333) * C77 +
                    C356 * C78 + C357 * C79) *
                       C44851 * C44803 * C44786 * C84 -
                   (C358 * C79 + C357 * C78 + C356 * C77) * C44851 * C44803 *
                       C44786 * C85 +
                   (C357 * C77 + C358 * C78 +
                    (C332 * C97 + C349 + C349 + C44836 * C337) * C79) *
                       C44851 * C44803 * C44786 * C86)) /
                 (p * q * std::sqrt(p + q));
    d2eeyz[0] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C222 * C93 + C44851 * C223) * C155 +
            (C222 * C156 + C44851 * C396) * C44836) *
               C77 +
           (C402 + C414) * C78 + C417 * C79) *
              C44803 * C44786 * C84 -
          ((C416 + C410) * C79 + (C415 + C405) * C78 + (C414 + C402) * C77) *
              C44803 * C44786 * C85 +
          (C417 * C77 + (C410 + C416) * C78 +
           ((C222 * C97 + C44851 * C227) * C155 +
            (C222 * C160 + C44851 * C400) * C44836) *
               C79) *
              C44803 * C44786 * C86)) /
        (p * q * std::sqrt(p + q));
    d2eezx[0] += (2 * std::pow(Pi, 2.5) *
                  (((C88 * C93 + C77 * C98 + C90 * C94 + C78 * C99 + C92 * C95 +
                     C79 * C100) *
                        C222 +
                    (C88 * C223 + C77 * C455 + C90 * C224 + C78 * C456 +
                     C92 * C225 + C79 * C457) *
                        C44851) *
                       C44836 * C44803 * C44786 * C84 -
                   ((C92 * C226 + C79 * C458 + C90 * C225 + C78 * C457 +
                     C88 * C224 + C77 * C456) *
                        C44851 +
                    (C92 * C96 + C79 * C101 + C90 * C95 + C78 * C100 +
                     C88 * C94 + C77 * C99) *
                        C222) *
                       C44836 * C44803 * C44786 * C85 +
                   ((C88 * C95 + C77 * C100 + C90 * C96 + C78 * C101 +
                     C92 * C97 + C79 * C102) *
                        C222 +
                    (C88 * C225 + C77 * C457 + C90 * C226 + C78 * C458 +
                     C92 * C227 + C79 * C459) *
                        C44851) *
                       C44836 * C44803 * C44786 * C86)) /
                 (p * q * std::sqrt(p + q));
    d2eezy[0] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C155 * C93 + C44836 * C156) * C222 +
            (C155 * C223 + C44836 * C498) * C44851) *
               C77 +
           (C504 + C516) * C78 + C519 * C79) *
              C44803 * C44786 * C84 -
          ((C518 + C512) * C79 + (C517 + C507) * C78 + (C516 + C504) * C77) *
              C44803 * C44786 * C85 +
          (C519 * C77 + (C512 + C518) * C78 +
           ((C155 * C97 + C44836 * C160) * C222 +
            (C155 * C227 + C44836 * C502) * C44851) *
               C79) *
              C44803 * C44786 * C86)) /
        (p * q * std::sqrt(p + q));
    d2eezz[0] +=
        (2 * std::pow(Pi, 2.5) *
         (((C557 * C93 + C564 + C564 + C44851 * C558) * C44836 * C77 +
           C584 * C78 + C585 * C79) *
              C44803 * C44786 * C84 -
          (C586 * C79 + C585 * C78 + C584 * C77) * C44803 * C44786 * C85 +
          (C585 * C77 + C586 * C78 +
           (C557 * C97 + C574 + C574 + C44851 * C562) * C44836 * C79) *
              C44803 * C44786 * C86)) /
        (p * q * std::sqrt(p + q));
    d2eexx[1] +=
        (2 * std::pow(Pi, 2.5) *
         (((C87 * C93 + C109 + C109 + C77 * C103 + C89 * C94 + C110 + C110 +
            C78 * C104 + C91 * C95 + C111 + C111 + C79 * C105) *
               C44851 * C44836 * C44803 * C636 -
           (C91 * C640 + C653 + C653 + C79 * C648 + C89 * C641 + C654 + C654 +
            C78 * C649 + C87 * C642 + C655 + C655 + C77 * C650) *
               C44851 * C44836 * C44803 * C44908) *
              C638 +
          ((C87 * C641 + C656 + C656 + C77 * C649 + C89 * C640 + C657 + C657 +
            C78 * C648 + C91 * C643 + C658 + C658 + C79 * C651) *
               C44851 * C44836 * C44803 * C44908 -
           (C91 * C96 + C112 + C112 + C79 * C106 + C89 * C95 + C113 + C113 +
            C78 * C105 + C87 * C94 + C114 + C114 + C77 * C104) *
               C44851 * C44836 * C44803 * C636) *
              C44906)) /
        (p * q * std::sqrt(p + q));
    d2eexy[1] += (2 * std::pow(Pi, 2.5) *
                  ((((C155 * C93 + C44836 * C156) * C88 +
                     (C155 * C98 + C44836 * C161) * C77 + C179 * C90 +
                     C180 * C78 + C181 * C92 + C182 * C79) *
                        C44851 * C44803 * C636 -
                    (C725 * C79 + C726 * C92 + C727 * C78 + C728 * C90 +
                     (C155 * C646 + C44836 * C714) * C77 +
                     (C155 * C642 + C44836 * C710) * C88) *
                        C44851 * C44803 * C44908) *
                       C638 +
                   ((C728 * C88 + C727 * C77 + C726 * C90 + C725 * C78 +
                     (C155 * C643 + C44836 * C711) * C92 +
                     (C155 * C647 + C44836 * C715) * C79) *
                        C44851 * C44803 * C44908 -
                    (C183 * C79 + C184 * C92 + C182 * C78 + C181 * C90 +
                     C180 * C77 + C179 * C88) *
                        C44851 * C44803 * C636) *
                       C44906)) /
                 (p * q * std::sqrt(p + q));
    d2eexz[1] += (2 * std::pow(Pi, 2.5) *
                  ((((C222 * C93 + C44851 * C223) * C88 +
                     (C222 * C98 + C44851 * C228) * C77 + C246 * C90 +
                     C247 * C78 + C248 * C92 + C249 * C79) *
                        C44836 * C44803 * C636 -
                    (C795 * C79 + C796 * C92 + C797 * C78 + C798 * C90 +
                     (C222 * C646 + C44851 * C784) * C77 +
                     (C222 * C642 + C44851 * C780) * C88) *
                        C44836 * C44803 * C44908) *
                       C638 +
                   ((C798 * C88 + C797 * C77 + C796 * C90 + C795 * C78 +
                     (C222 * C643 + C44851 * C781) * C92 +
                     (C222 * C647 + C44851 * C785) * C79) *
                        C44836 * C44803 * C44908 -
                    (C250 * C79 + C251 * C92 + C249 * C78 + C248 * C90 +
                     C247 * C77 + C246 * C88) *
                        C44836 * C44803 * C636) *
                       C44906)) /
                 (p * q * std::sqrt(p + q));
    d2eeyx[1] += (2 * std::pow(Pi, 2.5) *
                  ((((C88 * C93 + C77 * C98 + C90 * C94 + C78 * C99 +
                      C92 * C95 + C79 * C100) *
                         C155 +
                     (C88 * C156 + C77 * C289 + C90 * C157 + C78 * C290 +
                      C92 * C158 + C79 * C291) *
                         C44836) *
                        C44851 * C44803 * C636 -
                    ((C92 * C708 + C79 * C848 + C90 * C709 + C78 * C849 +
                      C88 * C710 + C77 * C850) *
                         C44836 +
                     (C92 * C640 + C79 * C644 + C90 * C641 + C78 * C645 +
                      C88 * C642 + C77 * C646) *
                         C155) *
                        C44851 * C44803 * C44908) *
                       C638 +
                   (((C88 * C641 + C77 * C645 + C90 * C640 + C78 * C644 +
                      C92 * C643 + C79 * C647) *
                         C155 +
                     (C88 * C709 + C77 * C849 + C90 * C708 + C78 * C848 +
                      C92 * C711 + C79 * C851) *
                         C44836) *
                        C44851 * C44803 * C44908 -
                    ((C92 * C159 + C79 * C292 + C90 * C158 + C78 * C291 +
                      C88 * C157 + C77 * C290) *
                         C44836 +
                     (C92 * C96 + C79 * C101 + C90 * C95 + C78 * C100 +
                      C88 * C94 + C77 * C99) *
                         C155) *
                        C44851 * C44803 * C636) *
                       C44906)) /
                 (p * q * std::sqrt(p + q));
    d2eeyy[1] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C332 * C93 + C339 + C339 + C44836 * C333) * C77 + C356 * C78 +
            C357 * C79) *
               C44851 * C44803 * C636 -
           (C919 * C79 + C920 * C78 +
            (C332 * C642 + C913 + C913 + C44836 * C904) * C77) *
               C44851 * C44803 * C44908) *
              C638 +
          ((C920 * C77 + C919 * C78 +
            (C332 * C643 + C914 + C914 + C44836 * C905) * C79) *
               C44851 * C44803 * C44908 -
           (C358 * C79 + C357 * C78 + C356 * C77) * C44851 * C44803 * C636) *
              C44906)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[1] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C222 * C93 + C44851 * C223) * C155 +
             (C222 * C156 + C44851 * C396) * C44836) *
                C77 +
            (C402 + C414) * C78 + C417 * C79) *
               C44803 * C636 -
           ((C983 + C977) * C79 + (C984 + C980) * C78 +
            ((C222 * C710 + C44851 * C972) * C44836 +
             (C222 * C642 + C44851 * C780) * C155) *
                C77) *
               C44803 * C44908) *
              C638 +
          (((C980 + C984) * C77 + (C977 + C983) * C78 +
            ((C222 * C643 + C44851 * C781) * C155 +
             (C222 * C711 + C44851 * C973) * C44836) *
                C79) *
               C44803 * C44908 -
           ((C416 + C410) * C79 + (C415 + C405) * C78 + (C414 + C402) * C77) *
               C44803 * C636) *
              C44906)) /
        (p * q * std::sqrt(p + q));
    d2eezx[1] += (2 * std::pow(Pi, 2.5) *
                  ((((C88 * C93 + C77 * C98 + C90 * C94 + C78 * C99 +
                      C92 * C95 + C79 * C100) *
                         C222 +
                     (C88 * C223 + C77 * C455 + C90 * C224 + C78 * C456 +
                      C92 * C225 + C79 * C457) *
                         C44851) *
                        C44836 * C44803 * C636 -
                    ((C92 * C778 + C79 * C1034 + C90 * C779 + C78 * C1035 +
                      C88 * C780 + C77 * C1036) *
                         C44851 +
                     (C92 * C640 + C79 * C644 + C90 * C641 + C78 * C645 +
                      C88 * C642 + C77 * C646) *
                         C222) *
                        C44836 * C44803 * C44908) *
                       C638 +
                   (((C88 * C641 + C77 * C645 + C90 * C640 + C78 * C644 +
                      C92 * C643 + C79 * C647) *
                         C222 +
                     (C88 * C779 + C77 * C1035 + C90 * C778 + C78 * C1034 +
                      C92 * C781 + C79 * C1037) *
                         C44851) *
                        C44836 * C44803 * C44908 -
                    ((C92 * C226 + C79 * C458 + C90 * C225 + C78 * C457 +
                      C88 * C224 + C77 * C456) *
                         C44851 +
                     (C92 * C96 + C79 * C101 + C90 * C95 + C78 * C100 +
                      C88 * C94 + C77 * C99) *
                         C222) *
                        C44836 * C44803 * C636) *
                       C44906)) /
                 (p * q * std::sqrt(p + q));
    d2eezy[1] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C155 * C93 + C44836 * C156) * C222 +
             (C155 * C223 + C44836 * C498) * C44851) *
                C77 +
            (C504 + C516) * C78 + C519 * C79) *
               C44803 * C636 -
           ((C1101 + C1095) * C79 + (C1102 + C1098) * C78 +
            ((C155 * C780 + C44836 * C1090) * C44851 +
             (C155 * C642 + C44836 * C710) * C222) *
                C77) *
               C44803 * C44908) *
              C638 +
          (((C1098 + C1102) * C77 + (C1095 + C1101) * C78 +
            ((C155 * C643 + C44836 * C711) * C222 +
             (C155 * C781 + C44836 * C1091) * C44851) *
                C79) *
               C44803 * C44908 -
           ((C518 + C512) * C79 + (C517 + C507) * C78 + (C516 + C504) * C77) *
               C44803 * C636) *
              C44906)) /
        (p * q * std::sqrt(p + q));
    d2eezz[1] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C557 * C93 + C564 + C564 + C44851 * C558) * C44836 * C77 +
            C584 * C78 + C585 * C79) *
               C44803 * C636 -
           (C1171 * C79 + C1172 * C78 +
            (C557 * C642 + C1163 + C1163 + C44851 * C1154) * C44836 * C77) *
               C44803 * C44908) *
              C638 +
          ((C1172 * C77 + C1171 * C78 +
            (C557 * C643 + C1164 + C1164 + C44851 * C1155) * C44836 * C79) *
               C44803 * C44908 -
           (C586 * C79 + C585 * C78 + C584 * C77) * C44803 * C636) *
              C44906)) /
        (p * q * std::sqrt(p + q));
    d2eexx[2] +=
        (2 * std::pow(Pi, 2.5) *
         (((C87 * C93 + C109 + C109 + C77 * C103 + C89 * C94 + C110 + C110 +
            C78 * C104 + C91 * C95 + C111 + C111 + C79 * C105) *
               C44851 * C44836 * C1222 -
           (C91 * C1224 + C1237 + C1237 + C79 * C1232 + C89 * C1225 + C1238 +
            C1238 + C78 * C1233 + C87 * C1226 + C1239 + C1239 + C77 * C1234) *
               C44851 * C44836 * C44910) *
              C44786 * C638 +
          ((C87 * C1225 + C1240 + C1240 + C77 * C1233 + C89 * C1224 + C1241 +
            C1241 + C78 * C1232 + C91 * C1227 + C1242 + C1242 + C79 * C1235) *
               C44851 * C44836 * C44910 -
           (C91 * C96 + C112 + C112 + C79 * C106 + C89 * C95 + C113 + C113 +
            C78 * C105 + C87 * C94 + C114 + C114 + C77 * C104) *
               C44851 * C44836 * C1222) *
              C44786 * C44906)) /
        (p * q * std::sqrt(p + q));
    d2eexy[2] += (2 * std::pow(Pi, 2.5) *
                  ((((C155 * C93 + C44836 * C156) * C88 +
                     (C155 * C98 + C44836 * C161) * C77 + C179 * C90 +
                     C180 * C78 + C181 * C92 + C182 * C79) *
                        C44851 * C1222 -
                    (C1309 * C79 + C1310 * C92 + C1311 * C78 + C1312 * C90 +
                     (C155 * C1230 + C44836 * C1298) * C77 +
                     (C155 * C1226 + C44836 * C1294) * C88) *
                        C44851 * C44910) *
                       C44786 * C638 +
                   ((C1312 * C88 + C1311 * C77 + C1310 * C90 + C1309 * C78 +
                     (C155 * C1227 + C44836 * C1295) * C92 +
                     (C155 * C1231 + C44836 * C1299) * C79) *
                        C44851 * C44910 -
                    (C183 * C79 + C184 * C92 + C182 * C78 + C181 * C90 +
                     C180 * C77 + C179 * C88) *
                        C44851 * C1222) *
                       C44786 * C44906)) /
                 (p * q * std::sqrt(p + q));
    d2eexz[2] += (2 * std::pow(Pi, 2.5) *
                  ((((C222 * C93 + C44851 * C223) * C88 +
                     (C222 * C98 + C44851 * C228) * C77 + C246 * C90 +
                     C247 * C78 + C248 * C92 + C249 * C79) *
                        C44836 * C1222 -
                    (C1379 * C79 + C1380 * C92 + C1381 * C78 + C1382 * C90 +
                     (C222 * C1230 + C44851 * C1368) * C77 +
                     (C222 * C1226 + C44851 * C1364) * C88) *
                        C44836 * C44910) *
                       C44786 * C638 +
                   ((C1382 * C88 + C1381 * C77 + C1380 * C90 + C1379 * C78 +
                     (C222 * C1227 + C44851 * C1365) * C92 +
                     (C222 * C1231 + C44851 * C1369) * C79) *
                        C44836 * C44910 -
                    (C250 * C79 + C251 * C92 + C249 * C78 + C248 * C90 +
                     C247 * C77 + C246 * C88) *
                        C44836 * C1222) *
                       C44786 * C44906)) /
                 (p * q * std::sqrt(p + q));
    d2eeyx[2] += (2 * std::pow(Pi, 2.5) *
                  ((((C88 * C93 + C77 * C98 + C90 * C94 + C78 * C99 +
                      C92 * C95 + C79 * C100) *
                         C155 +
                     (C88 * C156 + C77 * C289 + C90 * C157 + C78 * C290 +
                      C92 * C158 + C79 * C291) *
                         C44836) *
                        C44851 * C1222 -
                    ((C92 * C1292 + C79 * C1432 + C90 * C1293 + C78 * C1433 +
                      C88 * C1294 + C77 * C1434) *
                         C44836 +
                     (C92 * C1224 + C79 * C1228 + C90 * C1225 + C78 * C1229 +
                      C88 * C1226 + C77 * C1230) *
                         C155) *
                        C44851 * C44910) *
                       C44786 * C638 +
                   (((C88 * C1225 + C77 * C1229 + C90 * C1224 + C78 * C1228 +
                      C92 * C1227 + C79 * C1231) *
                         C155 +
                     (C88 * C1293 + C77 * C1433 + C90 * C1292 + C78 * C1432 +
                      C92 * C1295 + C79 * C1435) *
                         C44836) *
                        C44851 * C44910 -
                    ((C92 * C159 + C79 * C292 + C90 * C158 + C78 * C291 +
                      C88 * C157 + C77 * C290) *
                         C44836 +
                     (C92 * C96 + C79 * C101 + C90 * C95 + C78 * C100 +
                      C88 * C94 + C77 * C99) *
                         C155) *
                        C44851 * C1222) *
                       C44786 * C44906)) /
                 (p * q * std::sqrt(p + q));
    d2eeyy[2] += (2 * std::pow(Pi, 2.5) *
                  ((((C332 * C93 + C339 + C339 + C44836 * C333) * C77 +
                     C356 * C78 + C357 * C79) *
                        C44851 * C1222 -
                    (C1503 * C79 + C1504 * C78 +
                     (C332 * C1226 + C1497 + C1497 + C44836 * C1488) * C77) *
                        C44851 * C44910) *
                       C44786 * C638 +
                   ((C1504 * C77 + C1503 * C78 +
                     (C332 * C1227 + C1498 + C1498 + C44836 * C1489) * C79) *
                        C44851 * C44910 -
                    (C358 * C79 + C357 * C78 + C356 * C77) * C44851 * C1222) *
                       C44786 * C44906)) /
                 (p * q * std::sqrt(p + q));
    d2eeyz[2] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C222 * C93 + C44851 * C223) * C155 +
             (C222 * C156 + C44851 * C396) * C44836) *
                C77 +
            (C402 + C414) * C78 + C417 * C79) *
               C1222 -
           ((C1567 + C1561) * C79 + (C1568 + C1564) * C78 +
            ((C222 * C1294 + C44851 * C1556) * C44836 +
             (C222 * C1226 + C44851 * C1364) * C155) *
                C77) *
               C44910) *
              C44786 * C638 +
          (((C1564 + C1568) * C77 + (C1561 + C1567) * C78 +
            ((C222 * C1227 + C44851 * C1365) * C155 +
             (C222 * C1295 + C44851 * C1557) * C44836) *
                C79) *
               C44910 -
           ((C416 + C410) * C79 + (C415 + C405) * C78 + (C414 + C402) * C77) *
               C1222) *
              C44786 * C44906)) /
        (p * q * std::sqrt(p + q));
    d2eezx[2] += (2 * std::pow(Pi, 2.5) *
                  ((((C88 * C93 + C77 * C98 + C90 * C94 + C78 * C99 +
                      C92 * C95 + C79 * C100) *
                         C222 +
                     (C88 * C223 + C77 * C455 + C90 * C224 + C78 * C456 +
                      C92 * C225 + C79 * C457) *
                         C44851) *
                        C44836 * C1222 -
                    ((C92 * C1362 + C79 * C1618 + C90 * C1363 + C78 * C1619 +
                      C88 * C1364 + C77 * C1620) *
                         C44851 +
                     (C92 * C1224 + C79 * C1228 + C90 * C1225 + C78 * C1229 +
                      C88 * C1226 + C77 * C1230) *
                         C222) *
                        C44836 * C44910) *
                       C44786 * C638 +
                   (((C88 * C1225 + C77 * C1229 + C90 * C1224 + C78 * C1228 +
                      C92 * C1227 + C79 * C1231) *
                         C222 +
                     (C88 * C1363 + C77 * C1619 + C90 * C1362 + C78 * C1618 +
                      C92 * C1365 + C79 * C1621) *
                         C44851) *
                        C44836 * C44910 -
                    ((C92 * C226 + C79 * C458 + C90 * C225 + C78 * C457 +
                      C88 * C224 + C77 * C456) *
                         C44851 +
                     (C92 * C96 + C79 * C101 + C90 * C95 + C78 * C100 +
                      C88 * C94 + C77 * C99) *
                         C222) *
                        C44836 * C1222) *
                       C44786 * C44906)) /
                 (p * q * std::sqrt(p + q));
    d2eezy[2] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C155 * C93 + C44836 * C156) * C222 +
             (C155 * C223 + C44836 * C498) * C44851) *
                C77 +
            (C504 + C516) * C78 + C519 * C79) *
               C1222 -
           ((C1685 + C1679) * C79 + (C1686 + C1682) * C78 +
            ((C155 * C1364 + C44836 * C1674) * C44851 +
             (C155 * C1226 + C44836 * C1294) * C222) *
                C77) *
               C44910) *
              C44786 * C638 +
          (((C1682 + C1686) * C77 + (C1679 + C1685) * C78 +
            ((C155 * C1227 + C44836 * C1295) * C222 +
             (C155 * C1365 + C44836 * C1675) * C44851) *
                C79) *
               C44910 -
           ((C518 + C512) * C79 + (C517 + C507) * C78 + (C516 + C504) * C77) *
               C1222) *
              C44786 * C44906)) /
        (p * q * std::sqrt(p + q));
    d2eezz[2] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C557 * C93 + C564 + C564 + C44851 * C558) * C44836 * C77 +
            C584 * C78 + C585 * C79) *
               C1222 -
           (C1755 * C79 + C1756 * C78 +
            (C557 * C1226 + C1747 + C1747 + C44851 * C1738) * C44836 * C77) *
               C44910) *
              C44786 * C638 +
          ((C1756 * C77 + C1755 * C78 +
            (C557 * C1227 + C1748 + C1748 + C44851 * C1739) * C44836 * C79) *
               C44910 -
           (C586 * C79 + C585 * C78 + C584 * C77) * C1222) *
              C44786 * C44906)) /
        (p * q * std::sqrt(p + q));
    d2eexx[3] +=
        (2 * std::pow(Pi, 2.5) *
         (((C87 * C93 + C109 + C109 + C77 * C103 + C89 * C94 + C110 + C110 +
            C78 * C104 + C91 * C95 + C111 + C111 + C79 * C105) *
               C44851 * C44836 * C44803 * C1806 -
           (C91 * C640 + C653 + C653 + C79 * C648 + C89 * C641 + C654 + C654 +
            C78 * C649 + C87 * C642 + C655 + C655 + C77 * C650) *
               C44851 * C44836 * C44803 * C44908) *
              C1808 +
          ((C87 * C641 + C656 + C656 + C77 * C649 + C89 * C640 + C657 + C657 +
            C78 * C648 + C91 * C643 + C658 + C658 + C79 * C651) *
               C44851 * C44836 * C44803 * C44908 -
           (C91 * C96 + C112 + C112 + C79 * C106 + C89 * C95 + C113 + C113 +
            C78 * C105 + C87 * C94 + C114 + C114 + C77 * C104) *
               C44851 * C44836 * C44803 * C1806) *
              C44906)) /
        (p * q * std::sqrt(p + q));
    d2eexy[3] += (2 * std::pow(Pi, 2.5) *
                  ((((C155 * C93 + C44836 * C156) * C88 +
                     (C155 * C98 + C44836 * C161) * C77 + C179 * C90 +
                     C180 * C78 + C181 * C92 + C182 * C79) *
                        C44851 * C44803 * C1806 -
                    (C725 * C79 + C726 * C92 + C727 * C78 + C728 * C90 +
                     (C155 * C646 + C44836 * C714) * C77 +
                     (C155 * C642 + C44836 * C710) * C88) *
                        C44851 * C44803 * C44908) *
                       C1808 +
                   ((C728 * C88 + C727 * C77 + C726 * C90 + C725 * C78 +
                     (C155 * C643 + C44836 * C711) * C92 +
                     (C155 * C647 + C44836 * C715) * C79) *
                        C44851 * C44803 * C44908 -
                    (C183 * C79 + C184 * C92 + C182 * C78 + C181 * C90 +
                     C180 * C77 + C179 * C88) *
                        C44851 * C44803 * C1806) *
                       C44906)) /
                 (p * q * std::sqrt(p + q));
    d2eexz[3] += (2 * std::pow(Pi, 2.5) *
                  ((((C222 * C93 + C44851 * C223) * C88 +
                     (C222 * C98 + C44851 * C228) * C77 + C246 * C90 +
                     C247 * C78 + C248 * C92 + C249 * C79) *
                        C44836 * C44803 * C1806 -
                    (C795 * C79 + C796 * C92 + C797 * C78 + C798 * C90 +
                     (C222 * C646 + C44851 * C784) * C77 +
                     (C222 * C642 + C44851 * C780) * C88) *
                        C44836 * C44803 * C44908) *
                       C1808 +
                   ((C798 * C88 + C797 * C77 + C796 * C90 + C795 * C78 +
                     (C222 * C643 + C44851 * C781) * C92 +
                     (C222 * C647 + C44851 * C785) * C79) *
                        C44836 * C44803 * C44908 -
                    (C250 * C79 + C251 * C92 + C249 * C78 + C248 * C90 +
                     C247 * C77 + C246 * C88) *
                        C44836 * C44803 * C1806) *
                       C44906)) /
                 (p * q * std::sqrt(p + q));
    d2eeyx[3] += (2 * std::pow(Pi, 2.5) *
                  ((((C88 * C93 + C77 * C98 + C90 * C94 + C78 * C99 +
                      C92 * C95 + C79 * C100) *
                         C155 +
                     (C88 * C156 + C77 * C289 + C90 * C157 + C78 * C290 +
                      C92 * C158 + C79 * C291) *
                         C44836) *
                        C44851 * C44803 * C1806 -
                    ((C92 * C708 + C79 * C848 + C90 * C709 + C78 * C849 +
                      C88 * C710 + C77 * C850) *
                         C44836 +
                     (C92 * C640 + C79 * C644 + C90 * C641 + C78 * C645 +
                      C88 * C642 + C77 * C646) *
                         C155) *
                        C44851 * C44803 * C44908) *
                       C1808 +
                   (((C88 * C641 + C77 * C645 + C90 * C640 + C78 * C644 +
                      C92 * C643 + C79 * C647) *
                         C155 +
                     (C88 * C709 + C77 * C849 + C90 * C708 + C78 * C848 +
                      C92 * C711 + C79 * C851) *
                         C44836) *
                        C44851 * C44803 * C44908 -
                    ((C92 * C159 + C79 * C292 + C90 * C158 + C78 * C291 +
                      C88 * C157 + C77 * C290) *
                         C44836 +
                     (C92 * C96 + C79 * C101 + C90 * C95 + C78 * C100 +
                      C88 * C94 + C77 * C99) *
                         C155) *
                        C44851 * C44803 * C1806) *
                       C44906)) /
                 (p * q * std::sqrt(p + q));
    d2eeyy[3] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C332 * C93 + C339 + C339 + C44836 * C333) * C77 + C356 * C78 +
            C357 * C79) *
               C44851 * C44803 * C1806 -
           (C919 * C79 + C920 * C78 +
            (C332 * C642 + C913 + C913 + C44836 * C904) * C77) *
               C44851 * C44803 * C44908) *
              C1808 +
          ((C920 * C77 + C919 * C78 +
            (C332 * C643 + C914 + C914 + C44836 * C905) * C79) *
               C44851 * C44803 * C44908 -
           (C358 * C79 + C357 * C78 + C356 * C77) * C44851 * C44803 * C1806) *
              C44906)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[3] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C222 * C93 + C44851 * C223) * C155 +
             (C222 * C156 + C44851 * C396) * C44836) *
                C77 +
            (C402 + C414) * C78 + C417 * C79) *
               C44803 * C1806 -
           ((C983 + C977) * C79 + (C984 + C980) * C78 +
            ((C222 * C710 + C44851 * C972) * C44836 +
             (C222 * C642 + C44851 * C780) * C155) *
                C77) *
               C44803 * C44908) *
              C1808 +
          (((C980 + C984) * C77 + (C977 + C983) * C78 +
            ((C222 * C643 + C44851 * C781) * C155 +
             (C222 * C711 + C44851 * C973) * C44836) *
                C79) *
               C44803 * C44908 -
           ((C416 + C410) * C79 + (C415 + C405) * C78 + (C414 + C402) * C77) *
               C44803 * C1806) *
              C44906)) /
        (p * q * std::sqrt(p + q));
    d2eezx[3] += (2 * std::pow(Pi, 2.5) *
                  ((((C88 * C93 + C77 * C98 + C90 * C94 + C78 * C99 +
                      C92 * C95 + C79 * C100) *
                         C222 +
                     (C88 * C223 + C77 * C455 + C90 * C224 + C78 * C456 +
                      C92 * C225 + C79 * C457) *
                         C44851) *
                        C44836 * C44803 * C1806 -
                    ((C92 * C778 + C79 * C1034 + C90 * C779 + C78 * C1035 +
                      C88 * C780 + C77 * C1036) *
                         C44851 +
                     (C92 * C640 + C79 * C644 + C90 * C641 + C78 * C645 +
                      C88 * C642 + C77 * C646) *
                         C222) *
                        C44836 * C44803 * C44908) *
                       C1808 +
                   (((C88 * C641 + C77 * C645 + C90 * C640 + C78 * C644 +
                      C92 * C643 + C79 * C647) *
                         C222 +
                     (C88 * C779 + C77 * C1035 + C90 * C778 + C78 * C1034 +
                      C92 * C781 + C79 * C1037) *
                         C44851) *
                        C44836 * C44803 * C44908 -
                    ((C92 * C226 + C79 * C458 + C90 * C225 + C78 * C457 +
                      C88 * C224 + C77 * C456) *
                         C44851 +
                     (C92 * C96 + C79 * C101 + C90 * C95 + C78 * C100 +
                      C88 * C94 + C77 * C99) *
                         C222) *
                        C44836 * C44803 * C1806) *
                       C44906)) /
                 (p * q * std::sqrt(p + q));
    d2eezy[3] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C155 * C93 + C44836 * C156) * C222 +
             (C155 * C223 + C44836 * C498) * C44851) *
                C77 +
            (C504 + C516) * C78 + C519 * C79) *
               C44803 * C1806 -
           ((C1101 + C1095) * C79 + (C1102 + C1098) * C78 +
            ((C155 * C780 + C44836 * C1090) * C44851 +
             (C155 * C642 + C44836 * C710) * C222) *
                C77) *
               C44803 * C44908) *
              C1808 +
          (((C1098 + C1102) * C77 + (C1095 + C1101) * C78 +
            ((C155 * C643 + C44836 * C711) * C222 +
             (C155 * C781 + C44836 * C1091) * C44851) *
                C79) *
               C44803 * C44908 -
           ((C518 + C512) * C79 + (C517 + C507) * C78 + (C516 + C504) * C77) *
               C44803 * C1806) *
              C44906)) /
        (p * q * std::sqrt(p + q));
    d2eezz[3] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C557 * C93 + C564 + C564 + C44851 * C558) * C44836 * C77 +
            C584 * C78 + C585 * C79) *
               C44803 * C1806 -
           (C1171 * C79 + C1172 * C78 +
            (C557 * C642 + C1163 + C1163 + C44851 * C1154) * C44836 * C77) *
               C44803 * C44908) *
              C1808 +
          ((C1172 * C77 + C1171 * C78 +
            (C557 * C643 + C1164 + C1164 + C44851 * C1155) * C44836 * C79) *
               C44803 * C44908 -
           (C586 * C79 + C585 * C78 + C584 * C77) * C44803 * C1806) *
              C44906)) /
        (p * q * std::sqrt(p + q));
    d2eexx[4] +=
        (2 * std::pow(Pi, 2.5) *
         ((C87 * C93 + C109 + C109 + C77 * C103 + C89 * C94 + C110 + C110 +
           C78 * C104 + C91 * C95 + C111 + C111 + C79 * C105) *
              C44851 * C44836 * C44803 * C2248 -
          (C91 * C640 + C653 + C653 + C79 * C648 + C89 * C641 + C654 + C654 +
           C78 * C649 + C87 * C642 + C655 + C655 + C77 * C650) *
              C44851 * C44836 * C44803 * C2249 +
          (C87 * C2252 + C2262 + C2262 + C77 * C2258 + C89 * C2253 + C2263 +
           C2263 + C78 * C2259 + C91 * C2254 + C2264 + C2264 + C79 * C2260) *
              C44851 * C44836 * C44803 * C2250) *
         C44752) /
        (p * q * std::sqrt(p + q));
    d2eexy[4] += (2 * std::pow(Pi, 2.5) *
                  (((C155 * C93 + C44836 * C156) * C88 +
                    (C155 * C98 + C44836 * C161) * C77 + C179 * C90 +
                    C180 * C78 + C181 * C92 + C182 * C79) *
                       C44851 * C44803 * C2248 -
                   (C725 * C79 + C726 * C92 + C727 * C78 + C728 * C90 +
                    (C155 * C646 + C44836 * C714) * C77 +
                    (C155 * C642 + C44836 * C710) * C88) *
                       C44851 * C44803 * C2249 +
                   ((C155 * C2252 + C44836 * C2302) * C88 +
                    (C155 * C2255 + C44836 * C2305) * C77 +
                    (C155 * C2253 + C44836 * C2303) * C90 +
                    (C155 * C2256 + C44836 * C2306) * C78 +
                    (C155 * C2254 + C44836 * C2304) * C92 +
                    (C155 * C2257 + C44836 * C2307) * C79) *
                       C44851 * C44803 * C2250) *
                  C44752) /
                 (p * q * std::sqrt(p + q));
    d2eexz[4] += (2 * std::pow(Pi, 2.5) *
                  (((C222 * C93 + C44851 * C223) * C88 +
                    (C222 * C98 + C44851 * C228) * C77 + C246 * C90 +
                    C247 * C78 + C248 * C92 + C249 * C79) *
                       C44836 * C44803 * C2248 -
                   (C795 * C79 + C796 * C92 + C797 * C78 + C798 * C90 +
                    (C222 * C646 + C44851 * C784) * C77 +
                    (C222 * C642 + C44851 * C780) * C88) *
                       C44836 * C44803 * C2249 +
                   ((C222 * C2252 + C44851 * C2346) * C88 +
                    (C222 * C2255 + C44851 * C2349) * C77 +
                    (C222 * C2253 + C44851 * C2347) * C90 +
                    (C222 * C2256 + C44851 * C2350) * C78 +
                    (C222 * C2254 + C44851 * C2348) * C92 +
                    (C222 * C2257 + C44851 * C2351) * C79) *
                       C44836 * C44803 * C2250) *
                  C44752) /
                 (p * q * std::sqrt(p + q));
    d2eeyx[4] += (2 * std::pow(Pi, 2.5) *
                  (((C88 * C93 + C77 * C98 + C90 * C94 + C78 * C99 + C92 * C95 +
                     C79 * C100) *
                        C155 +
                    (C88 * C156 + C77 * C289 + C90 * C157 + C78 * C290 +
                     C92 * C158 + C79 * C291) *
                        C44836) *
                       C44851 * C44803 * C2248 -
                   ((C92 * C708 + C79 * C848 + C90 * C709 + C78 * C849 +
                     C88 * C710 + C77 * C850) *
                        C44836 +
                    (C92 * C640 + C79 * C644 + C90 * C641 + C78 * C645 +
                     C88 * C642 + C77 * C646) *
                        C155) *
                       C44851 * C44803 * C2249 +
                   ((C88 * C2252 + C77 * C2255 + C90 * C2253 + C78 * C2256 +
                     C92 * C2254 + C79 * C2257) *
                        C155 +
                    (C88 * C2302 + C77 * C2390 + C90 * C2303 + C78 * C2391 +
                     C92 * C2304 + C79 * C2392) *
                        C44836) *
                       C44851 * C44803 * C2250) *
                  C44752) /
                 (p * q * std::sqrt(p + q));
    d2eeyy[4] += (2 * std::pow(Pi, 2.5) *
                  (((C332 * C93 + C339 + C339 + C44836 * C333) * C77 +
                    C356 * C78 + C357 * C79) *
                       C44851 * C44803 * C2248 -
                   (C919 * C79 + C920 * C78 +
                    (C332 * C642 + C913 + C913 + C44836 * C904) * C77) *
                       C44851 * C44803 * C2249 +
                   ((C332 * C2252 + C2435 + C2435 + C44836 * C2431) * C77 +
                    (C332 * C2253 + C2436 + C2436 + C44836 * C2432) * C78 +
                    (C332 * C2254 + C2437 + C2437 + C44836 * C2433) * C79) *
                       C44851 * C44803 * C2250) *
                  C44752) /
                 (p * q * std::sqrt(p + q));
    d2eeyz[4] += (2 * std::pow(Pi, 2.5) *
                  ((((C222 * C93 + C44851 * C223) * C155 +
                     (C222 * C156 + C44851 * C396) * C44836) *
                        C77 +
                    (C402 + C414) * C78 + C417 * C79) *
                       C44803 * C2248 -
                   ((C983 + C977) * C79 + (C984 + C980) * C78 +
                    ((C222 * C710 + C44851 * C972) * C44836 +
                     (C222 * C642 + C44851 * C780) * C155) *
                        C77) *
                       C44803 * C2249 +
                   (((C222 * C2252 + C44851 * C2346) * C155 +
                     (C222 * C2302 + C44851 * C2475) * C44836) *
                        C77 +
                    ((C222 * C2253 + C44851 * C2347) * C155 +
                     (C222 * C2303 + C44851 * C2476) * C44836) *
                        C78 +
                    ((C222 * C2254 + C44851 * C2348) * C155 +
                     (C222 * C2304 + C44851 * C2477) * C44836) *
                        C79) *
                       C44803 * C2250) *
                  C44752) /
                 (p * q * std::sqrt(p + q));
    d2eezx[4] += (2 * std::pow(Pi, 2.5) *
                  (((C88 * C93 + C77 * C98 + C90 * C94 + C78 * C99 + C92 * C95 +
                     C79 * C100) *
                        C222 +
                    (C88 * C223 + C77 * C455 + C90 * C224 + C78 * C456 +
                     C92 * C225 + C79 * C457) *
                        C44851) *
                       C44836 * C44803 * C2248 -
                   ((C92 * C778 + C79 * C1034 + C90 * C779 + C78 * C1035 +
                     C88 * C780 + C77 * C1036) *
                        C44851 +
                    (C92 * C640 + C79 * C644 + C90 * C641 + C78 * C645 +
                     C88 * C642 + C77 * C646) *
                        C222) *
                       C44836 * C44803 * C2249 +
                   ((C88 * C2252 + C77 * C2255 + C90 * C2253 + C78 * C2256 +
                     C92 * C2254 + C79 * C2257) *
                        C222 +
                    (C88 * C2346 + C77 * C2516 + C90 * C2347 + C78 * C2517 +
                     C92 * C2348 + C79 * C2518) *
                        C44851) *
                       C44836 * C44803 * C2250) *
                  C44752) /
                 (p * q * std::sqrt(p + q));
    d2eezy[4] += (2 * std::pow(Pi, 2.5) *
                  ((((C155 * C93 + C44836 * C156) * C222 +
                     (C155 * C223 + C44836 * C498) * C44851) *
                        C77 +
                    (C504 + C516) * C78 + C519 * C79) *
                       C44803 * C2248 -
                   ((C1101 + C1095) * C79 + (C1102 + C1098) * C78 +
                    ((C155 * C780 + C44836 * C1090) * C44851 +
                     (C155 * C642 + C44836 * C710) * C222) *
                        C77) *
                       C44803 * C2249 +
                   (((C155 * C2252 + C44836 * C2302) * C222 +
                     (C155 * C2346 + C44836 * C2557) * C44851) *
                        C77 +
                    ((C155 * C2253 + C44836 * C2303) * C222 +
                     (C155 * C2347 + C44836 * C2558) * C44851) *
                        C78 +
                    ((C155 * C2254 + C44836 * C2304) * C222 +
                     (C155 * C2348 + C44836 * C2559) * C44851) *
                        C79) *
                       C44803 * C2250) *
                  C44752) /
                 (p * q * std::sqrt(p + q));
    d2eezz[4] +=
        (2 * std::pow(Pi, 2.5) *
         (((C557 * C93 + C564 + C564 + C44851 * C558) * C44836 * C77 +
           C584 * C78 + C585 * C79) *
              C44803 * C2248 -
          (C1171 * C79 + C1172 * C78 +
           (C557 * C642 + C1163 + C1163 + C44851 * C1154) * C44836 * C77) *
              C44803 * C2249 +
          ((C557 * C2252 + C2602 + C2602 + C44851 * C2598) * C44836 * C77 +
           (C557 * C2253 + C2603 + C2603 + C44851 * C2599) * C44836 * C78 +
           (C557 * C2254 + C2604 + C2604 + C44851 * C2600) * C44836 * C79) *
              C44803 * C2250) *
         C44752) /
        (p * q * std::sqrt(p + q));
    d2eexx[5] +=
        (2 * std::pow(Pi, 2.5) *
         (((C87 * C93 + C109 + C109 + C77 * C103 + C89 * C94 + C110 + C110 +
            C78 * C104 + C91 * C95 + C111 + C111 + C79 * C105) *
               C44851 * C44836 * C1222 -
           (C91 * C1224 + C1237 + C1237 + C79 * C1232 + C89 * C1225 + C1238 +
            C1238 + C78 * C1233 + C87 * C1226 + C1239 + C1239 + C77 * C1234) *
               C44851 * C44836 * C44910) *
              C1806 +
          ((C87 * C2654 + C2664 + C2664 + C77 * C2660 + C89 * C2655 + C2665 +
            C2665 + C78 * C2661 + C91 * C2656 + C2666 + C2666 + C79 * C2662) *
               C44851 * C44836 * C44910 -
           (C91 * C640 + C653 + C653 + C79 * C648 + C89 * C641 + C654 + C654 +
            C78 * C649 + C87 * C642 + C655 + C655 + C77 * C650) *
               C44851 * C44836 * C1222) *
              C44908) *
         C44752) /
        (p * q * std::sqrt(p + q));
    d2eexy[5] += (2 * std::pow(Pi, 2.5) *
                  ((((C155 * C93 + C44836 * C156) * C88 +
                     (C155 * C98 + C44836 * C161) * C77 + C179 * C90 +
                     C180 * C78 + C181 * C92 + C182 * C79) *
                        C44851 * C1222 -
                    (C1309 * C79 + C1310 * C92 + C1311 * C78 + C1312 * C90 +
                     (C155 * C1230 + C44836 * C1298) * C77 +
                     (C155 * C1226 + C44836 * C1294) * C88) *
                        C44851 * C44910) *
                       C1806 +
                   (((C155 * C2654 + C44836 * C2716) * C88 +
                     (C155 * C2657 + C44836 * C2719) * C77 +
                     (C155 * C2655 + C44836 * C2717) * C90 +
                     (C155 * C2658 + C44836 * C2720) * C78 +
                     (C155 * C2656 + C44836 * C2718) * C92 +
                     (C155 * C2659 + C44836 * C2721) * C79) *
                        C44851 * C44910 -
                    (C725 * C79 + C726 * C92 + C727 * C78 + C728 * C90 +
                     (C155 * C646 + C44836 * C714) * C77 +
                     (C155 * C642 + C44836 * C710) * C88) *
                        C44851 * C1222) *
                       C44908) *
                  C44752) /
                 (p * q * std::sqrt(p + q));
    d2eexz[5] += (2 * std::pow(Pi, 2.5) *
                  ((((C222 * C93 + C44851 * C223) * C88 +
                     (C222 * C98 + C44851 * C228) * C77 + C246 * C90 +
                     C247 * C78 + C248 * C92 + C249 * C79) *
                        C44836 * C1222 -
                    (C1379 * C79 + C1380 * C92 + C1381 * C78 + C1382 * C90 +
                     (C222 * C1230 + C44851 * C1368) * C77 +
                     (C222 * C1226 + C44851 * C1364) * C88) *
                        C44836 * C44910) *
                       C1806 +
                   (((C222 * C2654 + C44851 * C2772) * C88 +
                     (C222 * C2657 + C44851 * C2775) * C77 +
                     (C222 * C2655 + C44851 * C2773) * C90 +
                     (C222 * C2658 + C44851 * C2776) * C78 +
                     (C222 * C2656 + C44851 * C2774) * C92 +
                     (C222 * C2659 + C44851 * C2777) * C79) *
                        C44836 * C44910 -
                    (C795 * C79 + C796 * C92 + C797 * C78 + C798 * C90 +
                     (C222 * C646 + C44851 * C784) * C77 +
                     (C222 * C642 + C44851 * C780) * C88) *
                        C44836 * C1222) *
                       C44908) *
                  C44752) /
                 (p * q * std::sqrt(p + q));
    d2eeyx[5] += (2 * std::pow(Pi, 2.5) *
                  ((((C88 * C93 + C77 * C98 + C90 * C94 + C78 * C99 +
                      C92 * C95 + C79 * C100) *
                         C155 +
                     (C88 * C156 + C77 * C289 + C90 * C157 + C78 * C290 +
                      C92 * C158 + C79 * C291) *
                         C44836) *
                        C44851 * C1222 -
                    ((C92 * C1292 + C79 * C1432 + C90 * C1293 + C78 * C1433 +
                      C88 * C1294 + C77 * C1434) *
                         C44836 +
                     (C92 * C1224 + C79 * C1228 + C90 * C1225 + C78 * C1229 +
                      C88 * C1226 + C77 * C1230) *
                         C155) *
                        C44851 * C44910) *
                       C1806 +
                   (((C88 * C2654 + C77 * C2657 + C90 * C2655 + C78 * C2658 +
                      C92 * C2656 + C79 * C2659) *
                         C155 +
                     (C88 * C2716 + C77 * C2828 + C90 * C2717 + C78 * C2829 +
                      C92 * C2718 + C79 * C2830) *
                         C44836) *
                        C44851 * C44910 -
                    ((C92 * C708 + C79 * C848 + C90 * C709 + C78 * C849 +
                      C88 * C710 + C77 * C850) *
                         C44836 +
                     (C92 * C640 + C79 * C644 + C90 * C641 + C78 * C645 +
                      C88 * C642 + C77 * C646) *
                         C155) *
                        C44851 * C1222) *
                       C44908) *
                  C44752) /
                 (p * q * std::sqrt(p + q));
    d2eeyy[5] += (2 * std::pow(Pi, 2.5) *
                  ((((C332 * C93 + C339 + C339 + C44836 * C333) * C77 +
                     C356 * C78 + C357 * C79) *
                        C44851 * C1222 -
                    (C1503 * C79 + C1504 * C78 +
                     (C332 * C1226 + C1497 + C1497 + C44836 * C1488) * C77) *
                        C44851 * C44910) *
                       C1806 +
                   (((C332 * C2654 + C2885 + C2885 + C44836 * C2881) * C77 +
                     (C332 * C2655 + C2886 + C2886 + C44836 * C2882) * C78 +
                     (C332 * C2656 + C2887 + C2887 + C44836 * C2883) * C79) *
                        C44851 * C44910 -
                    (C919 * C79 + C920 * C78 +
                     (C332 * C642 + C913 + C913 + C44836 * C904) * C77) *
                        C44851 * C1222) *
                       C44908) *
                  C44752) /
                 (p * q * std::sqrt(p + q));
    d2eeyz[5] += (2 * std::pow(Pi, 2.5) *
                  (((((C222 * C93 + C44851 * C223) * C155 +
                      (C222 * C156 + C44851 * C396) * C44836) *
                         C77 +
                     (C402 + C414) * C78 + C417 * C79) *
                        C1222 -
                    ((C1567 + C1561) * C79 + (C1568 + C1564) * C78 +
                     ((C222 * C1294 + C44851 * C1556) * C44836 +
                      (C222 * C1226 + C44851 * C1364) * C155) *
                         C77) *
                        C44910) *
                       C1806 +
                   ((((C222 * C2654 + C44851 * C2772) * C155 +
                      (C222 * C2716 + C44851 * C2937) * C44836) *
                         C77 +
                     ((C222 * C2655 + C44851 * C2773) * C155 +
                      (C222 * C2717 + C44851 * C2938) * C44836) *
                         C78 +
                     ((C222 * C2656 + C44851 * C2774) * C155 +
                      (C222 * C2718 + C44851 * C2939) * C44836) *
                         C79) *
                        C44910 -
                    ((C983 + C977) * C79 + (C984 + C980) * C78 +
                     ((C222 * C710 + C44851 * C972) * C44836 +
                      (C222 * C642 + C44851 * C780) * C155) *
                         C77) *
                        C1222) *
                       C44908) *
                  C44752) /
                 (p * q * std::sqrt(p + q));
    d2eezx[5] += (2 * std::pow(Pi, 2.5) *
                  ((((C88 * C93 + C77 * C98 + C90 * C94 + C78 * C99 +
                      C92 * C95 + C79 * C100) *
                         C222 +
                     (C88 * C223 + C77 * C455 + C90 * C224 + C78 * C456 +
                      C92 * C225 + C79 * C457) *
                         C44851) *
                        C44836 * C1222 -
                    ((C92 * C1362 + C79 * C1618 + C90 * C1363 + C78 * C1619 +
                      C88 * C1364 + C77 * C1620) *
                         C44851 +
                     (C92 * C1224 + C79 * C1228 + C90 * C1225 + C78 * C1229 +
                      C88 * C1226 + C77 * C1230) *
                         C222) *
                        C44836 * C44910) *
                       C1806 +
                   (((C88 * C2654 + C77 * C2657 + C90 * C2655 + C78 * C2658 +
                      C92 * C2656 + C79 * C2659) *
                         C222 +
                     (C88 * C2772 + C77 * C2990 + C90 * C2773 + C78 * C2991 +
                      C92 * C2774 + C79 * C2992) *
                         C44851) *
                        C44836 * C44910 -
                    ((C92 * C778 + C79 * C1034 + C90 * C779 + C78 * C1035 +
                      C88 * C780 + C77 * C1036) *
                         C44851 +
                     (C92 * C640 + C79 * C644 + C90 * C641 + C78 * C645 +
                      C88 * C642 + C77 * C646) *
                         C222) *
                        C44836 * C1222) *
                       C44908) *
                  C44752) /
                 (p * q * std::sqrt(p + q));
    d2eezy[5] += (2 * std::pow(Pi, 2.5) *
                  (((((C155 * C93 + C44836 * C156) * C222 +
                      (C155 * C223 + C44836 * C498) * C44851) *
                         C77 +
                     (C504 + C516) * C78 + C519 * C79) *
                        C1222 -
                    ((C1685 + C1679) * C79 + (C1686 + C1682) * C78 +
                     ((C155 * C1364 + C44836 * C1674) * C44851 +
                      (C155 * C1226 + C44836 * C1294) * C222) *
                         C77) *
                        C44910) *
                       C1806 +
                   ((((C155 * C2654 + C44836 * C2716) * C222 +
                      (C155 * C2772 + C44836 * C3043) * C44851) *
                         C77 +
                     ((C155 * C2655 + C44836 * C2717) * C222 +
                      (C155 * C2773 + C44836 * C3044) * C44851) *
                         C78 +
                     ((C155 * C2656 + C44836 * C2718) * C222 +
                      (C155 * C2774 + C44836 * C3045) * C44851) *
                         C79) *
                        C44910 -
                    ((C1101 + C1095) * C79 + (C1102 + C1098) * C78 +
                     ((C155 * C780 + C44836 * C1090) * C44851 +
                      (C155 * C642 + C44836 * C710) * C222) *
                         C77) *
                        C1222) *
                       C44908) *
                  C44752) /
                 (p * q * std::sqrt(p + q));
    d2eezz[5] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C557 * C93 + C564 + C564 + C44851 * C558) * C44836 * C77 +
            C584 * C78 + C585 * C79) *
               C1222 -
           (C1755 * C79 + C1756 * C78 +
            (C557 * C1226 + C1747 + C1747 + C44851 * C1738) * C44836 * C77) *
               C44910) *
              C1806 +
          (((C557 * C2654 + C3100 + C3100 + C44851 * C3096) * C44836 * C77 +
            (C557 * C2655 + C3101 + C3101 + C44851 * C3097) * C44836 * C78 +
            (C557 * C2656 + C3102 + C3102 + C44851 * C3098) * C44836 * C79) *
               C44910 -
           (C1171 * C79 + C1172 * C78 +
            (C557 * C642 + C1163 + C1163 + C44851 * C1154) * C44836 * C77) *
               C1222) *
              C44908) *
         C44752) /
        (p * q * std::sqrt(p + q));
    d2eexx[6] +=
        (2 * std::pow(Pi, 2.5) *
         (((C87 * C93 + C109 + C109 + C77 * C103 + C89 * C94 + C110 + C110 +
            C78 * C104 + C91 * C95 + C111 + C111 + C79 * C105) *
               C44851 * C44836 * C3152 -
           (C91 * C1224 + C1237 + C1237 + C79 * C1232 + C89 * C1225 + C1238 +
            C1238 + C78 * C1233 + C87 * C1226 + C1239 + C1239 + C77 * C1234) *
               C44851 * C44836 * C44910) *
              C44786 * C1808 +
          ((C87 * C1225 + C1240 + C1240 + C77 * C1233 + C89 * C1224 + C1241 +
            C1241 + C78 * C1232 + C91 * C1227 + C1242 + C1242 + C79 * C1235) *
               C44851 * C44836 * C44910 -
           (C91 * C96 + C112 + C112 + C79 * C106 + C89 * C95 + C113 + C113 +
            C78 * C105 + C87 * C94 + C114 + C114 + C77 * C104) *
               C44851 * C44836 * C3152) *
              C44786 * C44906)) /
        (p * q * std::sqrt(p + q));
    d2eexy[6] += (2 * std::pow(Pi, 2.5) *
                  ((((C155 * C93 + C44836 * C156) * C88 +
                     (C155 * C98 + C44836 * C161) * C77 + C179 * C90 +
                     C180 * C78 + C181 * C92 + C182 * C79) *
                        C44851 * C3152 -
                    (C1309 * C79 + C1310 * C92 + C1311 * C78 + C1312 * C90 +
                     (C155 * C1230 + C44836 * C1298) * C77 +
                     (C155 * C1226 + C44836 * C1294) * C88) *
                        C44851 * C44910) *
                       C44786 * C1808 +
                   ((C1312 * C88 + C1311 * C77 + C1310 * C90 + C1309 * C78 +
                     (C155 * C1227 + C44836 * C1295) * C92 +
                     (C155 * C1231 + C44836 * C1299) * C79) *
                        C44851 * C44910 -
                    (C183 * C79 + C184 * C92 + C182 * C78 + C181 * C90 +
                     C180 * C77 + C179 * C88) *
                        C44851 * C3152) *
                       C44786 * C44906)) /
                 (p * q * std::sqrt(p + q));
    d2eexz[6] += (2 * std::pow(Pi, 2.5) *
                  ((((C222 * C93 + C44851 * C223) * C88 +
                     (C222 * C98 + C44851 * C228) * C77 + C246 * C90 +
                     C247 * C78 + C248 * C92 + C249 * C79) *
                        C44836 * C3152 -
                    (C1379 * C79 + C1380 * C92 + C1381 * C78 + C1382 * C90 +
                     (C222 * C1230 + C44851 * C1368) * C77 +
                     (C222 * C1226 + C44851 * C1364) * C88) *
                        C44836 * C44910) *
                       C44786 * C1808 +
                   ((C1382 * C88 + C1381 * C77 + C1380 * C90 + C1379 * C78 +
                     (C222 * C1227 + C44851 * C1365) * C92 +
                     (C222 * C1231 + C44851 * C1369) * C79) *
                        C44836 * C44910 -
                    (C250 * C79 + C251 * C92 + C249 * C78 + C248 * C90 +
                     C247 * C77 + C246 * C88) *
                        C44836 * C3152) *
                       C44786 * C44906)) /
                 (p * q * std::sqrt(p + q));
    d2eeyx[6] += (2 * std::pow(Pi, 2.5) *
                  ((((C88 * C93 + C77 * C98 + C90 * C94 + C78 * C99 +
                      C92 * C95 + C79 * C100) *
                         C155 +
                     (C88 * C156 + C77 * C289 + C90 * C157 + C78 * C290 +
                      C92 * C158 + C79 * C291) *
                         C44836) *
                        C44851 * C3152 -
                    ((C92 * C1292 + C79 * C1432 + C90 * C1293 + C78 * C1433 +
                      C88 * C1294 + C77 * C1434) *
                         C44836 +
                     (C92 * C1224 + C79 * C1228 + C90 * C1225 + C78 * C1229 +
                      C88 * C1226 + C77 * C1230) *
                         C155) *
                        C44851 * C44910) *
                       C44786 * C1808 +
                   (((C88 * C1225 + C77 * C1229 + C90 * C1224 + C78 * C1228 +
                      C92 * C1227 + C79 * C1231) *
                         C155 +
                     (C88 * C1293 + C77 * C1433 + C90 * C1292 + C78 * C1432 +
                      C92 * C1295 + C79 * C1435) *
                         C44836) *
                        C44851 * C44910 -
                    ((C92 * C159 + C79 * C292 + C90 * C158 + C78 * C291 +
                      C88 * C157 + C77 * C290) *
                         C44836 +
                     (C92 * C96 + C79 * C101 + C90 * C95 + C78 * C100 +
                      C88 * C94 + C77 * C99) *
                         C155) *
                        C44851 * C3152) *
                       C44786 * C44906)) /
                 (p * q * std::sqrt(p + q));
    d2eeyy[6] += (2 * std::pow(Pi, 2.5) *
                  ((((C332 * C93 + C339 + C339 + C44836 * C333) * C77 +
                     C356 * C78 + C357 * C79) *
                        C44851 * C3152 -
                    (C1503 * C79 + C1504 * C78 +
                     (C332 * C1226 + C1497 + C1497 + C44836 * C1488) * C77) *
                        C44851 * C44910) *
                       C44786 * C1808 +
                   ((C1504 * C77 + C1503 * C78 +
                     (C332 * C1227 + C1498 + C1498 + C44836 * C1489) * C79) *
                        C44851 * C44910 -
                    (C358 * C79 + C357 * C78 + C356 * C77) * C44851 * C3152) *
                       C44786 * C44906)) /
                 (p * q * std::sqrt(p + q));
    d2eeyz[6] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C222 * C93 + C44851 * C223) * C155 +
             (C222 * C156 + C44851 * C396) * C44836) *
                C77 +
            (C402 + C414) * C78 + C417 * C79) *
               C3152 -
           ((C1567 + C1561) * C79 + (C1568 + C1564) * C78 +
            ((C222 * C1294 + C44851 * C1556) * C44836 +
             (C222 * C1226 + C44851 * C1364) * C155) *
                C77) *
               C44910) *
              C44786 * C1808 +
          (((C1564 + C1568) * C77 + (C1561 + C1567) * C78 +
            ((C222 * C1227 + C44851 * C1365) * C155 +
             (C222 * C1295 + C44851 * C1557) * C44836) *
                C79) *
               C44910 -
           ((C416 + C410) * C79 + (C415 + C405) * C78 + (C414 + C402) * C77) *
               C3152) *
              C44786 * C44906)) /
        (p * q * std::sqrt(p + q));
    d2eezx[6] += (2 * std::pow(Pi, 2.5) *
                  ((((C88 * C93 + C77 * C98 + C90 * C94 + C78 * C99 +
                      C92 * C95 + C79 * C100) *
                         C222 +
                     (C88 * C223 + C77 * C455 + C90 * C224 + C78 * C456 +
                      C92 * C225 + C79 * C457) *
                         C44851) *
                        C44836 * C3152 -
                    ((C92 * C1362 + C79 * C1618 + C90 * C1363 + C78 * C1619 +
                      C88 * C1364 + C77 * C1620) *
                         C44851 +
                     (C92 * C1224 + C79 * C1228 + C90 * C1225 + C78 * C1229 +
                      C88 * C1226 + C77 * C1230) *
                         C222) *
                        C44836 * C44910) *
                       C44786 * C1808 +
                   (((C88 * C1225 + C77 * C1229 + C90 * C1224 + C78 * C1228 +
                      C92 * C1227 + C79 * C1231) *
                         C222 +
                     (C88 * C1363 + C77 * C1619 + C90 * C1362 + C78 * C1618 +
                      C92 * C1365 + C79 * C1621) *
                         C44851) *
                        C44836 * C44910 -
                    ((C92 * C226 + C79 * C458 + C90 * C225 + C78 * C457 +
                      C88 * C224 + C77 * C456) *
                         C44851 +
                     (C92 * C96 + C79 * C101 + C90 * C95 + C78 * C100 +
                      C88 * C94 + C77 * C99) *
                         C222) *
                        C44836 * C3152) *
                       C44786 * C44906)) /
                 (p * q * std::sqrt(p + q));
    d2eezy[6] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C155 * C93 + C44836 * C156) * C222 +
             (C155 * C223 + C44836 * C498) * C44851) *
                C77 +
            (C504 + C516) * C78 + C519 * C79) *
               C3152 -
           ((C1685 + C1679) * C79 + (C1686 + C1682) * C78 +
            ((C155 * C1364 + C44836 * C1674) * C44851 +
             (C155 * C1226 + C44836 * C1294) * C222) *
                C77) *
               C44910) *
              C44786 * C1808 +
          (((C1682 + C1686) * C77 + (C1679 + C1685) * C78 +
            ((C155 * C1227 + C44836 * C1295) * C222 +
             (C155 * C1365 + C44836 * C1675) * C44851) *
                C79) *
               C44910 -
           ((C518 + C512) * C79 + (C517 + C507) * C78 + (C516 + C504) * C77) *
               C3152) *
              C44786 * C44906)) /
        (p * q * std::sqrt(p + q));
    d2eezz[6] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C557 * C93 + C564 + C564 + C44851 * C558) * C44836 * C77 +
            C584 * C78 + C585 * C79) *
               C3152 -
           (C1755 * C79 + C1756 * C78 +
            (C557 * C1226 + C1747 + C1747 + C44851 * C1738) * C44836 * C77) *
               C44910) *
              C44786 * C1808 +
          ((C1756 * C77 + C1755 * C78 +
            (C557 * C1227 + C1748 + C1748 + C44851 * C1739) * C44836 * C79) *
               C44910 -
           (C586 * C79 + C585 * C78 + C584 * C77) * C3152) *
              C44786 * C44906)) /
        (p * q * std::sqrt(p + q));
    d2eexx[7] +=
        (2 * std::pow(Pi, 2.5) *
         (((C87 * C93 + C109 + C109 + C77 * C103 + C89 * C94 + C110 + C110 +
            C78 * C104 + C91 * C95 + C111 + C111 + C79 * C105) *
               C44851 * C44836 * C3152 -
           (C91 * C1224 + C1237 + C1237 + C79 * C1232 + C89 * C1225 + C1238 +
            C1238 + C78 * C1233 + C87 * C1226 + C1239 + C1239 + C77 * C1234) *
               C44851 * C44836 * C44910) *
              C636 +
          ((C87 * C2654 + C2664 + C2664 + C77 * C2660 + C89 * C2655 + C2665 +
            C2665 + C78 * C2661 + C91 * C2656 + C2666 + C2666 + C79 * C2662) *
               C44851 * C44836 * C44910 -
           (C91 * C640 + C653 + C653 + C79 * C648 + C89 * C641 + C654 + C654 +
            C78 * C649 + C87 * C642 + C655 + C655 + C77 * C650) *
               C44851 * C44836 * C3152) *
              C44908) *
         C44752) /
        (p * q * std::sqrt(p + q));
    d2eexy[7] += (2 * std::pow(Pi, 2.5) *
                  ((((C155 * C93 + C44836 * C156) * C88 +
                     (C155 * C98 + C44836 * C161) * C77 + C179 * C90 +
                     C180 * C78 + C181 * C92 + C182 * C79) *
                        C44851 * C3152 -
                    (C1309 * C79 + C1310 * C92 + C1311 * C78 + C1312 * C90 +
                     (C155 * C1230 + C44836 * C1298) * C77 +
                     (C155 * C1226 + C44836 * C1294) * C88) *
                        C44851 * C44910) *
                       C636 +
                   (((C155 * C2654 + C44836 * C2716) * C88 +
                     (C155 * C2657 + C44836 * C2719) * C77 +
                     (C155 * C2655 + C44836 * C2717) * C90 +
                     (C155 * C2658 + C44836 * C2720) * C78 +
                     (C155 * C2656 + C44836 * C2718) * C92 +
                     (C155 * C2659 + C44836 * C2721) * C79) *
                        C44851 * C44910 -
                    (C725 * C79 + C726 * C92 + C727 * C78 + C728 * C90 +
                     (C155 * C646 + C44836 * C714) * C77 +
                     (C155 * C642 + C44836 * C710) * C88) *
                        C44851 * C3152) *
                       C44908) *
                  C44752) /
                 (p * q * std::sqrt(p + q));
    d2eexz[7] += (2 * std::pow(Pi, 2.5) *
                  ((((C222 * C93 + C44851 * C223) * C88 +
                     (C222 * C98 + C44851 * C228) * C77 + C246 * C90 +
                     C247 * C78 + C248 * C92 + C249 * C79) *
                        C44836 * C3152 -
                    (C1379 * C79 + C1380 * C92 + C1381 * C78 + C1382 * C90 +
                     (C222 * C1230 + C44851 * C1368) * C77 +
                     (C222 * C1226 + C44851 * C1364) * C88) *
                        C44836 * C44910) *
                       C636 +
                   (((C222 * C2654 + C44851 * C2772) * C88 +
                     (C222 * C2657 + C44851 * C2775) * C77 +
                     (C222 * C2655 + C44851 * C2773) * C90 +
                     (C222 * C2658 + C44851 * C2776) * C78 +
                     (C222 * C2656 + C44851 * C2774) * C92 +
                     (C222 * C2659 + C44851 * C2777) * C79) *
                        C44836 * C44910 -
                    (C795 * C79 + C796 * C92 + C797 * C78 + C798 * C90 +
                     (C222 * C646 + C44851 * C784) * C77 +
                     (C222 * C642 + C44851 * C780) * C88) *
                        C44836 * C3152) *
                       C44908) *
                  C44752) /
                 (p * q * std::sqrt(p + q));
    d2eeyx[7] += (2 * std::pow(Pi, 2.5) *
                  ((((C88 * C93 + C77 * C98 + C90 * C94 + C78 * C99 +
                      C92 * C95 + C79 * C100) *
                         C155 +
                     (C88 * C156 + C77 * C289 + C90 * C157 + C78 * C290 +
                      C92 * C158 + C79 * C291) *
                         C44836) *
                        C44851 * C3152 -
                    ((C92 * C1292 + C79 * C1432 + C90 * C1293 + C78 * C1433 +
                      C88 * C1294 + C77 * C1434) *
                         C44836 +
                     (C92 * C1224 + C79 * C1228 + C90 * C1225 + C78 * C1229 +
                      C88 * C1226 + C77 * C1230) *
                         C155) *
                        C44851 * C44910) *
                       C636 +
                   (((C88 * C2654 + C77 * C2657 + C90 * C2655 + C78 * C2658 +
                      C92 * C2656 + C79 * C2659) *
                         C155 +
                     (C88 * C2716 + C77 * C2828 + C90 * C2717 + C78 * C2829 +
                      C92 * C2718 + C79 * C2830) *
                         C44836) *
                        C44851 * C44910 -
                    ((C92 * C708 + C79 * C848 + C90 * C709 + C78 * C849 +
                      C88 * C710 + C77 * C850) *
                         C44836 +
                     (C92 * C640 + C79 * C644 + C90 * C641 + C78 * C645 +
                      C88 * C642 + C77 * C646) *
                         C155) *
                        C44851 * C3152) *
                       C44908) *
                  C44752) /
                 (p * q * std::sqrt(p + q));
    d2eeyy[7] += (2 * std::pow(Pi, 2.5) *
                  ((((C332 * C93 + C339 + C339 + C44836 * C333) * C77 +
                     C356 * C78 + C357 * C79) *
                        C44851 * C3152 -
                    (C1503 * C79 + C1504 * C78 +
                     (C332 * C1226 + C1497 + C1497 + C44836 * C1488) * C77) *
                        C44851 * C44910) *
                       C636 +
                   (((C332 * C2654 + C2885 + C2885 + C44836 * C2881) * C77 +
                     (C332 * C2655 + C2886 + C2886 + C44836 * C2882) * C78 +
                     (C332 * C2656 + C2887 + C2887 + C44836 * C2883) * C79) *
                        C44851 * C44910 -
                    (C919 * C79 + C920 * C78 +
                     (C332 * C642 + C913 + C913 + C44836 * C904) * C77) *
                        C44851 * C3152) *
                       C44908) *
                  C44752) /
                 (p * q * std::sqrt(p + q));
    d2eeyz[7] += (2 * std::pow(Pi, 2.5) *
                  (((((C222 * C93 + C44851 * C223) * C155 +
                      (C222 * C156 + C44851 * C396) * C44836) *
                         C77 +
                     (C402 + C414) * C78 + C417 * C79) *
                        C3152 -
                    ((C1567 + C1561) * C79 + (C1568 + C1564) * C78 +
                     ((C222 * C1294 + C44851 * C1556) * C44836 +
                      (C222 * C1226 + C44851 * C1364) * C155) *
                         C77) *
                        C44910) *
                       C636 +
                   ((((C222 * C2654 + C44851 * C2772) * C155 +
                      (C222 * C2716 + C44851 * C2937) * C44836) *
                         C77 +
                     ((C222 * C2655 + C44851 * C2773) * C155 +
                      (C222 * C2717 + C44851 * C2938) * C44836) *
                         C78 +
                     ((C222 * C2656 + C44851 * C2774) * C155 +
                      (C222 * C2718 + C44851 * C2939) * C44836) *
                         C79) *
                        C44910 -
                    ((C983 + C977) * C79 + (C984 + C980) * C78 +
                     ((C222 * C710 + C44851 * C972) * C44836 +
                      (C222 * C642 + C44851 * C780) * C155) *
                         C77) *
                        C3152) *
                       C44908) *
                  C44752) /
                 (p * q * std::sqrt(p + q));
    d2eezx[7] += (2 * std::pow(Pi, 2.5) *
                  ((((C88 * C93 + C77 * C98 + C90 * C94 + C78 * C99 +
                      C92 * C95 + C79 * C100) *
                         C222 +
                     (C88 * C223 + C77 * C455 + C90 * C224 + C78 * C456 +
                      C92 * C225 + C79 * C457) *
                         C44851) *
                        C44836 * C3152 -
                    ((C92 * C1362 + C79 * C1618 + C90 * C1363 + C78 * C1619 +
                      C88 * C1364 + C77 * C1620) *
                         C44851 +
                     (C92 * C1224 + C79 * C1228 + C90 * C1225 + C78 * C1229 +
                      C88 * C1226 + C77 * C1230) *
                         C222) *
                        C44836 * C44910) *
                       C636 +
                   (((C88 * C2654 + C77 * C2657 + C90 * C2655 + C78 * C2658 +
                      C92 * C2656 + C79 * C2659) *
                         C222 +
                     (C88 * C2772 + C77 * C2990 + C90 * C2773 + C78 * C2991 +
                      C92 * C2774 + C79 * C2992) *
                         C44851) *
                        C44836 * C44910 -
                    ((C92 * C778 + C79 * C1034 + C90 * C779 + C78 * C1035 +
                      C88 * C780 + C77 * C1036) *
                         C44851 +
                     (C92 * C640 + C79 * C644 + C90 * C641 + C78 * C645 +
                      C88 * C642 + C77 * C646) *
                         C222) *
                        C44836 * C3152) *
                       C44908) *
                  C44752) /
                 (p * q * std::sqrt(p + q));
    d2eezy[7] += (2 * std::pow(Pi, 2.5) *
                  (((((C155 * C93 + C44836 * C156) * C222 +
                      (C155 * C223 + C44836 * C498) * C44851) *
                         C77 +
                     (C504 + C516) * C78 + C519 * C79) *
                        C3152 -
                    ((C1685 + C1679) * C79 + (C1686 + C1682) * C78 +
                     ((C155 * C1364 + C44836 * C1674) * C44851 +
                      (C155 * C1226 + C44836 * C1294) * C222) *
                         C77) *
                        C44910) *
                       C636 +
                   ((((C155 * C2654 + C44836 * C2716) * C222 +
                      (C155 * C2772 + C44836 * C3043) * C44851) *
                         C77 +
                     ((C155 * C2655 + C44836 * C2717) * C222 +
                      (C155 * C2773 + C44836 * C3044) * C44851) *
                         C78 +
                     ((C155 * C2656 + C44836 * C2718) * C222 +
                      (C155 * C2774 + C44836 * C3045) * C44851) *
                         C79) *
                        C44910 -
                    ((C1101 + C1095) * C79 + (C1102 + C1098) * C78 +
                     ((C155 * C780 + C44836 * C1090) * C44851 +
                      (C155 * C642 + C44836 * C710) * C222) *
                         C77) *
                        C3152) *
                       C44908) *
                  C44752) /
                 (p * q * std::sqrt(p + q));
    d2eezz[7] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C557 * C93 + C564 + C564 + C44851 * C558) * C44836 * C77 +
            C584 * C78 + C585 * C79) *
               C3152 -
           (C1755 * C79 + C1756 * C78 +
            (C557 * C1226 + C1747 + C1747 + C44851 * C1738) * C44836 * C77) *
               C44910) *
              C636 +
          (((C557 * C2654 + C3100 + C3100 + C44851 * C3096) * C44836 * C77 +
            (C557 * C2655 + C3101 + C3101 + C44851 * C3097) * C44836 * C78 +
            (C557 * C2656 + C3102 + C3102 + C44851 * C3098) * C44836 * C79) *
               C44910 -
           (C1171 * C79 + C1172 * C78 +
            (C557 * C642 + C1163 + C1163 + C44851 * C1154) * C44836 * C77) *
               C3152) *
              C44908) *
         C44752) /
        (p * q * std::sqrt(p + q));
    d2eexx[8] +=
        (2 * std::pow(Pi, 2.5) *
         ((C87 * C93 + C109 + C109 + C77 * C103 + C89 * C94 + C110 + C110 +
           C78 * C104 + C91 * C95 + C111 + C111 + C79 * C105) *
              C44851 * C44836 * C4042 -
          (C91 * C1224 + C1237 + C1237 + C79 * C1232 + C89 * C1225 + C1238 +
           C1238 + C78 * C1233 + C87 * C1226 + C1239 + C1239 + C77 * C1234) *
              C44851 * C44836 * C4043 +
          (C87 * C4045 + C4055 + C4055 + C77 * C4051 + C89 * C4046 + C4056 +
           C4056 + C78 * C4052 + C91 * C4047 + C4057 + C4057 + C79 * C4053) *
              C44851 * C44836 * C4044) *
         C44786 * C44752) /
        (p * q * std::sqrt(p + q));
    d2eexy[8] += (2 * std::pow(Pi, 2.5) *
                  (((C155 * C93 + C44836 * C156) * C88 +
                    (C155 * C98 + C44836 * C161) * C77 + C179 * C90 +
                    C180 * C78 + C181 * C92 + C182 * C79) *
                       C44851 * C4042 -
                   (C1309 * C79 + C1310 * C92 + C1311 * C78 + C1312 * C90 +
                    (C155 * C1230 + C44836 * C1298) * C77 +
                    (C155 * C1226 + C44836 * C1294) * C88) *
                       C44851 * C4043 +
                   ((C155 * C4045 + C44836 * C4095) * C88 +
                    (C155 * C4048 + C44836 * C4098) * C77 +
                    (C155 * C4046 + C44836 * C4096) * C90 +
                    (C155 * C4049 + C44836 * C4099) * C78 +
                    (C155 * C4047 + C44836 * C4097) * C92 +
                    (C155 * C4050 + C44836 * C4100) * C79) *
                       C44851 * C4044) *
                  C44786 * C44752) /
                 (p * q * std::sqrt(p + q));
    d2eexz[8] += (2 * std::pow(Pi, 2.5) *
                  (((C222 * C93 + C44851 * C223) * C88 +
                    (C222 * C98 + C44851 * C228) * C77 + C246 * C90 +
                    C247 * C78 + C248 * C92 + C249 * C79) *
                       C44836 * C4042 -
                   (C1379 * C79 + C1380 * C92 + C1381 * C78 + C1382 * C90 +
                    (C222 * C1230 + C44851 * C1368) * C77 +
                    (C222 * C1226 + C44851 * C1364) * C88) *
                       C44836 * C4043 +
                   ((C222 * C4045 + C44851 * C4139) * C88 +
                    (C222 * C4048 + C44851 * C4142) * C77 +
                    (C222 * C4046 + C44851 * C4140) * C90 +
                    (C222 * C4049 + C44851 * C4143) * C78 +
                    (C222 * C4047 + C44851 * C4141) * C92 +
                    (C222 * C4050 + C44851 * C4144) * C79) *
                       C44836 * C4044) *
                  C44786 * C44752) /
                 (p * q * std::sqrt(p + q));
    d2eeyx[8] += (2 * std::pow(Pi, 2.5) *
                  (((C88 * C93 + C77 * C98 + C90 * C94 + C78 * C99 + C92 * C95 +
                     C79 * C100) *
                        C155 +
                    (C88 * C156 + C77 * C289 + C90 * C157 + C78 * C290 +
                     C92 * C158 + C79 * C291) *
                        C44836) *
                       C44851 * C4042 -
                   ((C92 * C1292 + C79 * C1432 + C90 * C1293 + C78 * C1433 +
                     C88 * C1294 + C77 * C1434) *
                        C44836 +
                    (C92 * C1224 + C79 * C1228 + C90 * C1225 + C78 * C1229 +
                     C88 * C1226 + C77 * C1230) *
                        C155) *
                       C44851 * C4043 +
                   ((C88 * C4045 + C77 * C4048 + C90 * C4046 + C78 * C4049 +
                     C92 * C4047 + C79 * C4050) *
                        C155 +
                    (C88 * C4095 + C77 * C4183 + C90 * C4096 + C78 * C4184 +
                     C92 * C4097 + C79 * C4185) *
                        C44836) *
                       C44851 * C4044) *
                  C44786 * C44752) /
                 (p * q * std::sqrt(p + q));
    d2eeyy[8] += (2 * std::pow(Pi, 2.5) *
                  (((C332 * C93 + C339 + C339 + C44836 * C333) * C77 +
                    C356 * C78 + C357 * C79) *
                       C44851 * C4042 -
                   (C1503 * C79 + C1504 * C78 +
                    (C332 * C1226 + C1497 + C1497 + C44836 * C1488) * C77) *
                       C44851 * C4043 +
                   ((C332 * C4045 + C4228 + C4228 + C44836 * C4224) * C77 +
                    (C332 * C4046 + C4229 + C4229 + C44836 * C4225) * C78 +
                    (C332 * C4047 + C4230 + C4230 + C44836 * C4226) * C79) *
                       C44851 * C4044) *
                  C44786 * C44752) /
                 (p * q * std::sqrt(p + q));
    d2eeyz[8] += (2 * std::pow(Pi, 2.5) *
                  ((((C222 * C93 + C44851 * C223) * C155 +
                     (C222 * C156 + C44851 * C396) * C44836) *
                        C77 +
                    (C402 + C414) * C78 + C417 * C79) *
                       C4042 -
                   ((C1567 + C1561) * C79 + (C1568 + C1564) * C78 +
                    ((C222 * C1294 + C44851 * C1556) * C44836 +
                     (C222 * C1226 + C44851 * C1364) * C155) *
                        C77) *
                       C4043 +
                   (((C222 * C4045 + C44851 * C4139) * C155 +
                     (C222 * C4095 + C44851 * C4268) * C44836) *
                        C77 +
                    ((C222 * C4046 + C44851 * C4140) * C155 +
                     (C222 * C4096 + C44851 * C4269) * C44836) *
                        C78 +
                    ((C222 * C4047 + C44851 * C4141) * C155 +
                     (C222 * C4097 + C44851 * C4270) * C44836) *
                        C79) *
                       C4044) *
                  C44786 * C44752) /
                 (p * q * std::sqrt(p + q));
    d2eezx[8] += (2 * std::pow(Pi, 2.5) *
                  (((C88 * C93 + C77 * C98 + C90 * C94 + C78 * C99 + C92 * C95 +
                     C79 * C100) *
                        C222 +
                    (C88 * C223 + C77 * C455 + C90 * C224 + C78 * C456 +
                     C92 * C225 + C79 * C457) *
                        C44851) *
                       C44836 * C4042 -
                   ((C92 * C1362 + C79 * C1618 + C90 * C1363 + C78 * C1619 +
                     C88 * C1364 + C77 * C1620) *
                        C44851 +
                    (C92 * C1224 + C79 * C1228 + C90 * C1225 + C78 * C1229 +
                     C88 * C1226 + C77 * C1230) *
                        C222) *
                       C44836 * C4043 +
                   ((C88 * C4045 + C77 * C4048 + C90 * C4046 + C78 * C4049 +
                     C92 * C4047 + C79 * C4050) *
                        C222 +
                    (C88 * C4139 + C77 * C4309 + C90 * C4140 + C78 * C4310 +
                     C92 * C4141 + C79 * C4311) *
                        C44851) *
                       C44836 * C4044) *
                  C44786 * C44752) /
                 (p * q * std::sqrt(p + q));
    d2eezy[8] += (2 * std::pow(Pi, 2.5) *
                  ((((C155 * C93 + C44836 * C156) * C222 +
                     (C155 * C223 + C44836 * C498) * C44851) *
                        C77 +
                    (C504 + C516) * C78 + C519 * C79) *
                       C4042 -
                   ((C1685 + C1679) * C79 + (C1686 + C1682) * C78 +
                    ((C155 * C1364 + C44836 * C1674) * C44851 +
                     (C155 * C1226 + C44836 * C1294) * C222) *
                        C77) *
                       C4043 +
                   (((C155 * C4045 + C44836 * C4095) * C222 +
                     (C155 * C4139 + C44836 * C4350) * C44851) *
                        C77 +
                    ((C155 * C4046 + C44836 * C4096) * C222 +
                     (C155 * C4140 + C44836 * C4351) * C44851) *
                        C78 +
                    ((C155 * C4047 + C44836 * C4097) * C222 +
                     (C155 * C4141 + C44836 * C4352) * C44851) *
                        C79) *
                       C4044) *
                  C44786 * C44752) /
                 (p * q * std::sqrt(p + q));
    d2eezz[8] +=
        (2 * std::pow(Pi, 2.5) *
         (((C557 * C93 + C564 + C564 + C44851 * C558) * C44836 * C77 +
           C584 * C78 + C585 * C79) *
              C4042 -
          (C1755 * C79 + C1756 * C78 +
           (C557 * C1226 + C1747 + C1747 + C44851 * C1738) * C44836 * C77) *
              C4043 +
          ((C557 * C4045 + C4395 + C4395 + C44851 * C4391) * C44836 * C77 +
           (C557 * C4046 + C4396 + C4396 + C44851 * C4392) * C44836 * C78 +
           (C557 * C4047 + C4397 + C4397 + C44851 * C4393) * C44836 * C79) *
              C4044) *
         C44786 * C44752) /
        (p * q * std::sqrt(p + q));
    d2eexx[9] += (2 * std::pow(Pi, 2.5) *
                  (((C4451 * C93 + C4456 + C4456 + C4447 * C103 + C4453 * C94 +
                     C4457 + C4457 + C44903 * C104) *
                        C44851 * C4449 +
                    (C4451 * C642 + C4458 + C4458 + C4447 * C650 +
                     C4453 * C641 + C4459 + C4459 + C44903 * C649) *
                        C44851 * C44912) *
                       C44803 * C44786 * C84 -
                   ((C4453 * C640 + C4460 + C4460 + C44903 * C648 +
                     C4451 * C641 + C4461 + C4461 + C4447 * C649) *
                        C44851 * C44912 +
                    (C4453 * C95 + C4462 + C4462 + C44903 * C105 + C4451 * C94 +
                     C4463 + C4463 + C4447 * C104) *
                        C44851 * C4449) *
                       C44803 * C44786 * C85 +
                   ((C4451 * C95 + C4464 + C4464 + C4447 * C105 + C4453 * C96 +
                     C4465 + C4465 + C44903 * C106) *
                        C44851 * C4449 +
                    (C4451 * C640 + C4466 + C4466 + C4447 * C648 +
                     C4453 * C643 + C4467 + C4467 + C44903 * C651) *
                        C44851 * C44912) *
                       C44803 * C44786 * C86)) /
                 (p * q * std::sqrt(p + q));
    d2eexy[9] +=
        (2 * std::pow(Pi, 2.5) *
         (((C4517 * C93 + C4449 * C156 + C4518 * C642 + C44912 * C710) * C4452 +
           (C4517 * C98 + C4449 * C161 + C4518 * C646 + C44912 * C714) * C4447 +
           (C4536 + C4537) * C4454 + (C4538 + C4539) * C44903) *
              C44851 * C44803 * C44786 * C84 -
          ((C4540 + C4541) * C44903 + (C4542 + C4543) * C4454 +
           (C4539 + C4538) * C4447 + (C4537 + C4536) * C4452) *
              C44851 * C44803 * C44786 * C85 +
          ((C4543 + C4542) * C4452 + (C4541 + C4540) * C4447 +
           (C4517 * C96 + C4449 * C159 + C4518 * C643 + C44912 * C711) * C4454 +
           (C4517 * C101 + C4449 * C164 + C4518 * C647 + C44912 * C715) *
               C44903) *
              C44851 * C44803 * C44786 * C86)) /
        (p * q * std::sqrt(p + q));
    d2eexz[9] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C222 * C93 + C44851 * C223) * C4452 +
            (C222 * C98 + C44851 * C228) * C4447 + C246 * C4454 +
            C247 * C44903) *
               C4449 +
           ((C222 * C642 + C44851 * C780) * C4452 +
            (C222 * C646 + C44851 * C784) * C4447 + C798 * C4454 +
            C797 * C44903) *
               C44912) *
              C44803 * C44786 * C84 -
          ((C795 * C44903 + C796 * C4454 + C797 * C4447 + C798 * C4452) *
               C44912 +
           (C249 * C44903 + C248 * C4454 + C247 * C4447 + C246 * C4452) *
               C4449) *
              C44803 * C44786 * C85 +
          ((C248 * C4452 + C249 * C4447 + C251 * C4454 + C250 * C44903) *
               C4449 +
           (C796 * C4452 + C795 * C4447 +
            (C222 * C643 + C44851 * C781) * C4454 +
            (C222 * C647 + C44851 * C785) * C44903) *
               C44912) *
              C44803 * C44786 * C86)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[9] +=
        (2 * std::pow(Pi, 2.5) *
         (((C4452 * C93 + C4447 * C98 + C4454 * C94 + C44903 * C99) * C4517 +
           (C4452 * C156 + C4447 * C289 + C4454 * C157 + C44903 * C290) *
               C4449 +
           (C4452 * C642 + C4447 * C646 + C4454 * C641 + C44903 * C645) *
               C4518 +
           (C4452 * C710 + C4447 * C850 + C4454 * C709 + C44903 * C849) *
               C44912) *
              C44851 * C44803 * C44786 * C84 -
          ((C4454 * C708 + C44903 * C848 + C4452 * C709 + C4447 * C849) *
               C44912 +
           (C4454 * C640 + C44903 * C644 + C4452 * C641 + C4447 * C645) *
               C4518 +
           (C4454 * C158 + C44903 * C291 + C4452 * C157 + C4447 * C290) *
               C4449 +
           (C4454 * C95 + C44903 * C100 + C4452 * C94 + C4447 * C99) * C4517) *
              C44851 * C44803 * C44786 * C85 +
          ((C4452 * C95 + C4447 * C100 + C4454 * C96 + C44903 * C101) * C4517 +
           (C4452 * C158 + C4447 * C291 + C4454 * C159 + C44903 * C292) *
               C4449 +
           (C4452 * C640 + C4447 * C644 + C4454 * C643 + C44903 * C647) *
               C4518 +
           (C4452 * C708 + C4447 * C848 + C4454 * C711 + C44903 * C851) *
               C44912) *
              C44851 * C44803 * C44786 * C86)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[9] += (2 * std::pow(Pi, 2.5) *
                  (((C4693 * C93 + C4696 + C4696 + C4449 * C333 + C4694 * C642 +
                     C4697 + C4697 + C44912 * C904) *
                        C4447 +
                    (C4720 + C4721) * C44903) *
                       C44851 * C44803 * C44786 * C84 -
                   ((C4722 + C4723) * C44903 + (C4721 + C4720) * C4447) *
                       C44851 * C44803 * C44786 * C85 +
                   ((C4723 + C4722) * C4447 +
                    (C4693 * C96 + C4710 + C4710 + C4449 * C336 + C4694 * C643 +
                     C4711 + C4711 + C44912 * C905) *
                        C44903) *
                       C44851 * C44803 * C44786 * C86)) /
                 (p * q * std::sqrt(p + q));
    d2eeyz[9] += (2 * std::pow(Pi, 2.5) *
                  ((((C222 * C93 + C44851 * C223) * C4517 +
                     (C222 * C156 + C44851 * C396) * C4449 +
                     (C222 * C642 + C44851 * C780) * C4518 +
                     (C222 * C710 + C44851 * C972) * C44912) *
                        C4447 +
                    (C4774 + C4775 + C4776 + C4777) * C44903) *
                       C44803 * C44786 * C84 -
                   ((C4778 + C4779 + C4780 + C4781) * C44903 +
                    (C4777 + C4776 + C4775 + C4774) * C4447) *
                       C44803 * C44786 * C85 +
                   ((C4781 + C4780 + C4779 + C4778) * C4447 +
                    (C251 * C4517 + C413 * C4449 +
                     (C222 * C643 + C44851 * C781) * C4518 +
                     (C222 * C711 + C44851 * C973) * C44912) *
                        C44903) *
                       C44803 * C44786 * C86)) /
                 (p * q * std::sqrt(p + q));
    d2eezx[9] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4452 * C93 + C4447 * C98 + C4454 * C94 + C44903 * C99) * C222 +
            (C4452 * C223 + C4447 * C455 + C4454 * C224 + C44903 * C456) *
                C44851) *
               C4449 +
           ((C4452 * C642 + C4447 * C646 + C4454 * C641 + C44903 * C645) *
                C222 +
            (C4452 * C780 + C4447 * C1036 + C4454 * C779 + C44903 * C1035) *
                C44851) *
               C44912) *
              C44803 * C44786 * C84 -
          (((C4454 * C778 + C44903 * C1034 + C4452 * C779 + C4447 * C1035) *
                C44851 +
            (C4454 * C640 + C44903 * C644 + C4452 * C641 + C4447 * C645) *
                C222) *
               C44912 +
           ((C4454 * C225 + C44903 * C457 + C4452 * C224 + C4447 * C456) *
                C44851 +
            (C4454 * C95 + C44903 * C100 + C4452 * C94 + C4447 * C99) * C222) *
               C4449) *
              C44803 * C44786 * C85 +
          (((C4452 * C95 + C4447 * C100 + C4454 * C96 + C44903 * C101) * C222 +
            (C4452 * C225 + C4447 * C457 + C4454 * C226 + C44903 * C458) *
                C44851) *
               C4449 +
           ((C4452 * C640 + C4447 * C644 + C4454 * C643 + C44903 * C647) *
                C222 +
            (C4452 * C778 + C4447 * C1034 + C4454 * C781 + C44903 * C1037) *
                C44851) *
               C44912) *
              C44803 * C44786 * C86)) /
        (p * q * std::sqrt(p + q));
    d2eezy[9] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4517 * C93 + C4449 * C156 + C4518 * C642 + C44912 * C710) * C222 +
            (C4517 * C223 + C4449 * C498 + C4518 * C780 + C44912 * C1090) *
                C44851) *
               C4447 +
           ((C4536 + C4537) * C222 + (C4890 + C4891) * C44851) * C44903) *
              C44803 * C44786 * C84 -
          (((C4892 + C4893) * C44851 + (C4542 + C4543) * C222) * C44903 +
           ((C4891 + C4890) * C44851 + (C4537 + C4536) * C222) * C4447) *
              C44803 * C44786 * C85 +
          (((C4543 + C4542) * C222 + (C4893 + C4892) * C44851) * C4447 +
           ((C4517 * C96 + C4449 * C159 + C4518 * C643 + C44912 * C711) * C222 +
            (C4517 * C226 + C4449 * C501 + C4518 * C781 + C44912 * C1091) *
                C44851) *
               C44903) *
              C44803 * C44786 * C86)) /
        (p * q * std::sqrt(p + q));
    d2eezz[9] += (2 * std::pow(Pi, 2.5) *
                  ((((C557 * C93 + C564 + C564 + C44851 * C558) * C4449 +
                     (C557 * C642 + C1163 + C1163 + C44851 * C1154) * C44912) *
                        C4447 +
                    (C4944 + C4945) * C44903) *
                       C44803 * C44786 * C84 -
                   ((C4946 + C4947) * C44903 + (C4945 + C4944) * C4447) *
                       C44803 * C44786 * C85 +
                   ((C4947 + C4946) * C4447 +
                    (C583 * C4449 +
                     (C557 * C643 + C1164 + C1164 + C44851 * C1155) * C44912) *
                        C44903) *
                       C44803 * C44786 * C86)) /
                 (p * q * std::sqrt(p + q));
    d2eexx[10] += (2 * std::pow(Pi, 2.5) *
                   ((((C4451 * C93 + C4456 + C4456 + C4447 * C103 +
                       C4453 * C94 + C4457 + C4457 + C44903 * C104) *
                          C44851 * C4449 +
                      (C5034 + C5035) * C44851 * C44912) *
                         C44803 * C636 -
                     ((C4453 * C2253 + C5018 + C5018 + C44903 * C2259 +
                       C4451 * C2252 + C5019 + C5019 + C4447 * C2258) *
                          C44851 * C44912 +
                      (C5035 + C5034) * C44851 * C4449) *
                         C44803 * C44908) *
                        C638 +
                    (((C5036 + C5037) * C44851 * C4449 +
                      (C4451 * C2253 + C5024 + C5024 + C4447 * C2259 +
                       C4453 * C2254 + C5025 + C5025 + C44903 * C2260) *
                          C44851 * C44912) *
                         C44803 * C44908 -
                     ((C5037 + C5036) * C44851 * C44912 +
                      (C4453 * C95 + C4462 + C4462 + C44903 * C105 +
                       C4451 * C94 + C4463 + C4463 + C4447 * C104) *
                          C44851 * C4449) *
                         C44803 * C636) *
                        C44906)) /
                  (p * q * std::sqrt(p + q));
    d2eexy[10] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4517 * C93 + C4449 * C156 + C4518 * C642 + C44912 * C710) *
                C4452 +
            (C4517 * C98 + C4449 * C161 + C4518 * C646 + C44912 * C714) *
                C4447 +
            (C4536 + C4537) * C4454 + (C4538 + C4539) * C44903) *
               C44851 * C44803 * C636 -
           ((C5112 + C5113) * C44903 + (C5114 + C5115) * C4454 +
            (C4518 * C2255 + C44912 * C2305 + C4517 * C646 + C4449 * C714) *
                C4447 +
            (C4518 * C2252 + C44912 * C2302 + C4517 * C642 + C4449 * C710) *
                C4452) *
               C44851 * C44803 * C44908) *
              C638 +
          (((C5115 + C5114) * C4452 + (C5113 + C5112) * C4447 +
            (C4517 * C640 + C4449 * C708 + C4518 * C2254 + C44912 * C2304) *
                C4454 +
            (C4517 * C644 + C4449 * C712 + C4518 * C2257 + C44912 * C2307) *
                C44903) *
               C44851 * C44803 * C44908 -
           ((C4540 + C4541) * C44903 + (C4542 + C4543) * C4454 +
            (C4539 + C4538) * C4447 + (C4537 + C4536) * C4452) *
               C44851 * C44803 * C636) *
              C44906)) /
        (p * q * std::sqrt(p + q));
    d2eexz[10] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C222 * C93 + C44851 * C223) * C4452 +
             (C222 * C98 + C44851 * C228) * C4447 + C246 * C4454 +
             C247 * C44903) *
                C4449 +
            (C5200 + C5201 + C5186 + C5187) * C44912) *
               C44803 * C636 -
           ((C5198 * C44903 + C5199 * C4454 +
             (C222 * C2255 + C44851 * C2349) * C4447 +
             (C222 * C2252 + C44851 * C2346) * C4452) *
                C44912 +
            (C5187 + C5186 + C5201 + C5200) * C4449) *
               C44803 * C44908) *
              C638 +
          (((C5192 + C5193 + C5194 + C5195) * C4449 +
            (C5199 * C4452 + C5198 * C4447 +
             (C222 * C2254 + C44851 * C2348) * C4454 +
             (C222 * C2257 + C44851 * C2351) * C44903) *
                C44912) *
               C44803 * C44908 -
           ((C5195 + C5194 + C5193 + C5192) * C44912 +
            (C249 * C44903 + C248 * C4454 + C247 * C4447 + C246 * C4452) *
                C4449) *
               C44803 * C636) *
              C44906)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[10] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4452 * C93 + C4447 * C98 + C4454 * C94 + C44903 * C99) * C4517 +
            (C4452 * C156 + C4447 * C289 + C4454 * C157 + C44903 * C290) *
                C4449 +
            (C5284 + C5285) * C4518 + (C5286 + C5287) * C44912) *
               C44851 * C44803 * C636 -
           ((C4454 * C2303 + C44903 * C2391 + C4452 * C2302 + C4447 * C2390) *
                C44912 +
            (C4454 * C2253 + C44903 * C2256 + C4452 * C2252 + C4447 * C2255) *
                C4518 +
            (C5287 + C5286) * C4449 + (C5285 + C5284) * C4517) *
               C44851 * C44803 * C44908) *
              C638 +
          (((C5288 + C5289) * C4517 + (C5290 + C5291) * C4449 +
            (C4452 * C2253 + C4447 * C2256 + C4454 * C2254 + C44903 * C2257) *
                C4518 +
            (C4452 * C2303 + C4447 * C2391 + C4454 * C2304 + C44903 * C2392) *
                C44912) *
               C44851 * C44803 * C44908 -
           ((C5291 + C5290) * C44912 + (C5289 + C5288) * C4518 +
            (C4454 * C158 + C44903 * C291 + C4452 * C157 + C4447 * C290) *
                C4449 +
            (C4454 * C95 + C44903 * C100 + C4452 * C94 + C4447 * C99) * C4517) *
               C44851 * C44803 * C636) *
              C44906)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[10] += (2 * std::pow(Pi, 2.5) *
                   ((((C4693 * C93 + C4696 + C4696 + C4449 * C333 +
                       C4694 * C642 + C4697 + C4697 + C44912 * C904) *
                          C4447 +
                      (C4720 + C4721) * C44903) *
                         C44851 * C44803 * C636 -
                     ((C5372 + C5373) * C44903 +
                      (C4694 * C2252 + C5364 + C5364 + C44912 * C2431 +
                       C4693 * C642 + C5365 + C5365 + C4449 * C904) *
                          C4447) *
                         C44851 * C44803 * C44908) *
                        C638 +
                    (((C5373 + C5372) * C4447 +
                      (C4693 * C640 + C5366 + C5366 + C4449 * C902 +
                       C4694 * C2254 + C5367 + C5367 + C44912 * C2433) *
                          C44903) *
                         C44851 * C44803 * C44908 -
                     ((C4722 + C4723) * C44903 + (C4721 + C4720) * C4447) *
                         C44851 * C44803 * C636) *
                        C44906)) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[10] += (2 * std::pow(Pi, 2.5) *
                   (((((C222 * C93 + C44851 * C223) * C4517 +
                       (C222 * C156 + C44851 * C396) * C4449 + C5196 * C4518 +
                       C5447 * C44912) *
                          C4447 +
                      (C4774 + C4775 + C4776 + C4777) * C44903) *
                         C44803 * C636 -
                     ((C5449 + C5444 + C5445 + C5446) * C44903 +
                      ((C222 * C2302 + C44851 * C2475) * C44912 +
                       (C222 * C2252 + C44851 * C2346) * C4518 + C5447 * C4449 +
                       C5196 * C4517) *
                          C4447) *
                         C44803 * C44908) *
                        C638 +
                    (((C5446 + C5445 + C5444 + C5449) * C4447 +
                      (C796 * C4517 + C981 * C4449 +
                       (C222 * C2254 + C44851 * C2348) * C4518 +
                       (C222 * C2304 + C44851 * C2477) * C44912) *
                          C44903) *
                         C44803 * C44908 -
                     ((C4778 + C4779 + C4780 + C4781) * C44903 +
                      (C4777 + C4776 + C4775 + C4774) * C4447) *
                         C44803 * C636) *
                        C44906)) /
                  (p * q * std::sqrt(p + q));
    d2eezx[10] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C4452 * C93 + C4447 * C98 + C4454 * C94 + C44903 * C99) * C222 +
             (C4452 * C223 + C4447 * C455 + C4454 * C224 + C44903 * C456) *
                 C44851) *
                C4449 +
            ((C5284 + C5285) * C222 + (C5524 + C5525) * C44851) * C44912) *
               C44803 * C636 -
           (((C4454 * C2347 + C44903 * C2517 + C4452 * C2346 + C4447 * C2516) *
                 C44851 +
             (C4454 * C2253 + C44903 * C2256 + C4452 * C2252 + C4447 * C2255) *
                 C222) *
                C44912 +
            ((C5525 + C5524) * C44851 + (C5285 + C5284) * C222) * C4449) *
               C44803 * C44908) *
              C638 +
          ((((C5288 + C5289) * C222 + (C5526 + C5527) * C44851) * C4449 +
            ((C4452 * C2253 + C4447 * C2256 + C4454 * C2254 + C44903 * C2257) *
                 C222 +
             (C4452 * C2347 + C4447 * C2517 + C4454 * C2348 + C44903 * C2518) *
                 C44851) *
                C44912) *
               C44803 * C44908 -
           (((C5527 + C5526) * C44851 + (C5289 + C5288) * C222) * C44912 +
            ((C4454 * C225 + C44903 * C457 + C4452 * C224 + C4447 * C456) *
                 C44851 +
             (C4454 * C95 + C44903 * C100 + C4452 * C94 + C4447 * C99) * C222) *
                C4449) *
               C44803 * C636) *
              C44906)) /
        (p * q * std::sqrt(p + q));
    d2eezy[10] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C4517 * C93 + C4449 * C156 + C4518 * C642 + C44912 * C710) *
                 C222 +
             (C4517 * C223 + C4449 * C498 + C4518 * C780 + C44912 * C1090) *
                 C44851) *
                C4447 +
            ((C4536 + C4537) * C222 + (C4890 + C4891) * C44851) * C44903) *
               C44803 * C636 -
           (((C5598 + C5599) * C44851 + (C5114 + C5115) * C222) * C44903 +
            ((C4518 * C2346 + C44912 * C2557 + C4517 * C780 + C4449 * C1090) *
                 C44851 +
             (C4518 * C2252 + C44912 * C2302 + C4517 * C642 + C4449 * C710) *
                 C222) *
                C4447) *
               C44803 * C44908) *
              C638 +
          ((((C5115 + C5114) * C222 + (C5599 + C5598) * C44851) * C4447 +
            ((C4517 * C640 + C4449 * C708 + C4518 * C2254 + C44912 * C2304) *
                 C222 +
             (C4517 * C778 + C4449 * C1088 + C4518 * C2348 + C44912 * C2559) *
                 C44851) *
                C44903) *
               C44803 * C44908 -
           (((C4892 + C4893) * C44851 + (C4542 + C4543) * C222) * C44903 +
            ((C4891 + C4890) * C44851 + (C4537 + C4536) * C222) * C4447) *
               C44803 * C636) *
              C44906)) /
        (p * q * std::sqrt(p + q));
    d2eezz[10] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C557 * C93 + C564 + C564 + C44851 * C558) * C4449 +
             C5675 * C44912) *
                C4447 +
            (C4944 + C4945) * C44903) *
               C44803 * C636 -
           ((C5677 + C5670) * C44903 +
            ((C557 * C2252 + C2602 + C2602 + C44851 * C2598) * C44912 +
             C5675 * C4449) *
                C4447) *
               C44803 * C44908) *
              C638 +
          (((C5670 + C5677) * C4447 +
            (C1169 * C4449 +
             (C557 * C2254 + C2604 + C2604 + C44851 * C2600) * C44912) *
                C44903) *
               C44803 * C44908 -
           ((C4946 + C4947) * C44903 + (C4945 + C4944) * C4447) * C44803 *
               C636) *
              C44906)) /
        (p * q * std::sqrt(p + q));
    d2eexx[11] += (2 * std::pow(Pi, 2.5) *
                   ((((C4451 * C93 + C4456 + C4456 + C4447 * C103 +
                       C4453 * C94 + C4457 + C4457 + C44903 * C104) *
                          C44851 * C4449 +
                      (C5034 + C5035) * C44851 * C44912) *
                         C1222 -
                     ((C4453 * C2655 + C5744 + C5744 + C44903 * C2661 +
                       C4451 * C2654 + C5745 + C5745 + C4447 * C2660) *
                          C44851 * C44912 +
                      (C4453 * C1225 + C5746 + C5746 + C44903 * C1233 +
                       C4451 * C1226 + C5747 + C5747 + C4447 * C1234) *
                          C44851 * C4449) *
                         C44910) *
                        C44786 * C638 +
                    (((C4451 * C1225 + C5748 + C5748 + C4447 * C1233 +
                       C4453 * C1224 + C5749 + C5749 + C44903 * C1232) *
                          C44851 * C4449 +
                      (C4451 * C2655 + C5750 + C5750 + C4447 * C2661 +
                       C4453 * C2656 + C5751 + C5751 + C44903 * C2662) *
                          C44851 * C44912) *
                         C44910 -
                     ((C5037 + C5036) * C44851 * C44912 +
                      (C4453 * C95 + C4462 + C4462 + C44903 * C105 +
                       C4451 * C94 + C4463 + C4463 + C4447 * C104) *
                          C44851 * C4449) *
                         C1222) *
                        C44786 * C44906)) /
                  (p * q * std::sqrt(p + q));
    d2eexy[11] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4517 * C93 + C4449 * C156 + C4518 * C642 + C44912 * C710) *
                C4452 +
            (C4517 * C98 + C4449 * C161 + C4518 * C646 + C44912 * C714) *
                C4447 +
            (C4536 + C4537) * C4454 + (C4538 + C4539) * C44903) *
               C44851 * C1222 -
           ((C5826 + C5827) * C44903 + (C5828 + C5829) * C4454 +
            (C4518 * C2657 + C44912 * C2719 + C4517 * C1230 + C4449 * C1298) *
                C4447 +
            (C4518 * C2654 + C44912 * C2716 + C4517 * C1226 + C4449 * C1294) *
                C4452) *
               C44851 * C44910) *
              C44786 * C638 +
          (((C5829 + C5828) * C4452 + (C5827 + C5826) * C4447 +
            (C4517 * C1224 + C4449 * C1292 + C4518 * C2656 + C44912 * C2718) *
                C4454 +
            (C4517 * C1228 + C4449 * C1296 + C4518 * C2659 + C44912 * C2721) *
                C44903) *
               C44851 * C44910 -
           ((C4540 + C4541) * C44903 + (C4542 + C4543) * C4454 +
            (C4539 + C4538) * C4447 + (C4537 + C4536) * C4452) *
               C44851 * C1222) *
              C44786 * C44906)) /
        (p * q * std::sqrt(p + q));
    d2eexz[11] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C222 * C93 + C44851 * C223) * C4452 +
             (C222 * C98 + C44851 * C228) * C4447 + C246 * C4454 +
             C247 * C44903) *
                C4449 +
            (C5200 + C5201 + C5186 + C5187) * C44912) *
               C1222 -
           ((C5900 * C44903 + C5901 * C4454 +
             (C222 * C2657 + C44851 * C2775) * C4447 +
             (C222 * C2654 + C44851 * C2772) * C4452) *
                C44912 +
            (C1381 * C44903 + C1382 * C4454 +
             (C222 * C1230 + C44851 * C1368) * C4447 +
             (C222 * C1226 + C44851 * C1364) * C4452) *
                C4449) *
               C44910) *
              C44786 * C638 +
          (((C1382 * C4452 + C1381 * C4447 + C1380 * C4454 + C1379 * C44903) *
                C4449 +
            (C5901 * C4452 + C5900 * C4447 +
             (C222 * C2656 + C44851 * C2774) * C4454 +
             (C222 * C2659 + C44851 * C2777) * C44903) *
                C44912) *
               C44910 -
           ((C5195 + C5194 + C5193 + C5192) * C44912 +
            (C249 * C44903 + C248 * C4454 + C247 * C4447 + C246 * C4452) *
                C4449) *
               C1222) *
              C44786 * C44906)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[11] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4452 * C93 + C4447 * C98 + C4454 * C94 + C44903 * C99) * C4517 +
            (C4452 * C156 + C4447 * C289 + C4454 * C157 + C44903 * C290) *
                C4449 +
            (C5284 + C5285) * C4518 + (C5286 + C5287) * C44912) *
               C44851 * C1222 -
           ((C4454 * C2717 + C44903 * C2829 + C4452 * C2716 + C4447 * C2828) *
                C44912 +
            (C4454 * C2655 + C44903 * C2658 + C4452 * C2654 + C4447 * C2657) *
                C4518 +
            (C4454 * C1293 + C44903 * C1433 + C4452 * C1294 + C4447 * C1434) *
                C4449 +
            (C4454 * C1225 + C44903 * C1229 + C4452 * C1226 + C4447 * C1230) *
                C4517) *
               C44851 * C44910) *
              C44786 * C638 +
          (((C4452 * C1225 + C4447 * C1229 + C4454 * C1224 + C44903 * C1228) *
                C4517 +
            (C4452 * C1293 + C4447 * C1433 + C4454 * C1292 + C44903 * C1432) *
                C4449 +
            (C4452 * C2655 + C4447 * C2658 + C4454 * C2656 + C44903 * C2659) *
                C4518 +
            (C4452 * C2717 + C4447 * C2829 + C4454 * C2718 + C44903 * C2830) *
                C44912) *
               C44851 * C44910 -
           ((C5291 + C5290) * C44912 + (C5289 + C5288) * C4518 +
            (C4454 * C158 + C44903 * C291 + C4452 * C157 + C4447 * C290) *
                C4449 +
            (C4454 * C95 + C44903 * C100 + C4452 * C94 + C4447 * C99) * C4517) *
               C44851 * C1222) *
              C44786 * C44906)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[11] += (2 * std::pow(Pi, 2.5) *
                   ((((C4693 * C93 + C4696 + C4696 + C4449 * C333 +
                       C4694 * C642 + C4697 + C4697 + C44912 * C904) *
                          C4447 +
                      (C4720 + C4721) * C44903) *
                         C44851 * C1222 -
                     ((C6048 + C6049) * C44903 +
                      (C4694 * C2654 + C6040 + C6040 + C44912 * C2881 +
                       C4693 * C1226 + C6041 + C6041 + C4449 * C1488) *
                          C4447) *
                         C44851 * C44910) *
                        C44786 * C638 +
                    (((C6049 + C6048) * C4447 +
                      (C4693 * C1224 + C6042 + C6042 + C4449 * C1486 +
                       C4694 * C2656 + C6043 + C6043 + C44912 * C2883) *
                          C44903) *
                         C44851 * C44910 -
                     ((C4722 + C4723) * C44903 + (C4721 + C4720) * C4447) *
                         C44851 * C1222) *
                        C44786 * C44906)) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[11] += (2 * std::pow(Pi, 2.5) *
                   (((((C222 * C93 + C44851 * C223) * C4517 +
                       (C222 * C156 + C44851 * C396) * C4449 + C5196 * C4518 +
                       C5447 * C44912) *
                          C4447 +
                      (C4774 + C4775 + C4776 + C4777) * C44903) *
                         C1222 -
                     ((C6122 + C6118 + C6119 + C6120) * C44903 +
                      ((C222 * C2716 + C44851 * C2937) * C44912 +
                       (C222 * C2654 + C44851 * C2772) * C4518 +
                       (C222 * C1294 + C44851 * C1556) * C4449 +
                       (C222 * C1226 + C44851 * C1364) * C4517) *
                          C4447) *
                         C44910) *
                        C44786 * C638 +
                    (((C6120 + C6119 + C6118 + C6122) * C4447 +
                      (C1380 * C4517 + C1565 * C4449 +
                       (C222 * C2656 + C44851 * C2774) * C4518 +
                       (C222 * C2718 + C44851 * C2939) * C44912) *
                          C44903) *
                         C44910 -
                     ((C4778 + C4779 + C4780 + C4781) * C44903 +
                      (C4777 + C4776 + C4775 + C4774) * C4447) *
                         C1222) *
                        C44786 * C44906)) /
                  (p * q * std::sqrt(p + q));
    d2eezx[11] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C4452 * C93 + C4447 * C98 + C4454 * C94 + C44903 * C99) * C222 +
             (C4452 * C223 + C4447 * C455 + C4454 * C224 + C44903 * C456) *
                 C44851) *
                C4449 +
            ((C5284 + C5285) * C222 + (C5524 + C5525) * C44851) * C44912) *
               C1222 -
           (((C4454 * C2773 + C44903 * C2991 + C4452 * C2772 + C4447 * C2990) *
                 C44851 +
             (C4454 * C2655 + C44903 * C2658 + C4452 * C2654 + C4447 * C2657) *
                 C222) *
                C44912 +
            ((C4454 * C1363 + C44903 * C1619 + C4452 * C1364 + C4447 * C1620) *
                 C44851 +
             (C4454 * C1225 + C44903 * C1229 + C4452 * C1226 + C4447 * C1230) *
                 C222) *
                C4449) *
               C44910) *
              C44786 * C638 +
          ((((C4452 * C1225 + C4447 * C1229 + C4454 * C1224 + C44903 * C1228) *
                 C222 +
             (C4452 * C1363 + C4447 * C1619 + C4454 * C1362 + C44903 * C1618) *
                 C44851) *
                C4449 +
            ((C4452 * C2655 + C4447 * C2658 + C4454 * C2656 + C44903 * C2659) *
                 C222 +
             (C4452 * C2773 + C4447 * C2991 + C4454 * C2774 + C44903 * C2992) *
                 C44851) *
                C44912) *
               C44910 -
           (((C5527 + C5526) * C44851 + (C5289 + C5288) * C222) * C44912 +
            ((C4454 * C225 + C44903 * C457 + C4452 * C224 + C4447 * C456) *
                 C44851 +
             (C4454 * C95 + C44903 * C100 + C4452 * C94 + C4447 * C99) * C222) *
                C4449) *
               C1222) *
              C44786 * C44906)) /
        (p * q * std::sqrt(p + q));
    d2eezy[11] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C4517 * C93 + C4449 * C156 + C4518 * C642 + C44912 * C710) *
                 C222 +
             (C4517 * C223 + C4449 * C498 + C4518 * C780 + C44912 * C1090) *
                 C44851) *
                C4447 +
            ((C4536 + C4537) * C222 + (C4890 + C4891) * C44851) * C44903) *
               C1222 -
           (((C6259 + C6260) * C44851 + (C5828 + C5829) * C222) * C44903 +
            ((C4518 * C2772 + C44912 * C3043 + C4517 * C1364 + C4449 * C1674) *
                 C44851 +
             (C4518 * C2654 + C44912 * C2716 + C4517 * C1226 + C4449 * C1294) *
                 C222) *
                C4447) *
               C44910) *
              C44786 * C638 +
          ((((C5829 + C5828) * C222 + (C6260 + C6259) * C44851) * C4447 +
            ((C4517 * C1224 + C4449 * C1292 + C4518 * C2656 + C44912 * C2718) *
                 C222 +
             (C4517 * C1362 + C4449 * C1672 + C4518 * C2774 + C44912 * C3045) *
                 C44851) *
                C44903) *
               C44910 -
           (((C4892 + C4893) * C44851 + (C4542 + C4543) * C222) * C44903 +
            ((C4891 + C4890) * C44851 + (C4537 + C4536) * C222) * C4447) *
               C1222) *
              C44786 * C44906)) /
        (p * q * std::sqrt(p + q));
    d2eezz[11] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C557 * C93 + C564 + C564 + C44851 * C558) * C4449 +
             C5675 * C44912) *
                C4447 +
            (C4944 + C4945) * C44903) *
               C1222 -
           ((C6333 + C6329) * C44903 +
            ((C557 * C2654 + C3100 + C3100 + C44851 * C3096) * C44912 +
             (C557 * C1226 + C1747 + C1747 + C44851 * C1738) * C4449) *
                C4447) *
               C44910) *
              C44786 * C638 +
          (((C6329 + C6333) * C4447 +
            (C1753 * C4449 +
             (C557 * C2656 + C3102 + C3102 + C44851 * C3098) * C44912) *
                C44903) *
               C44910 -
           ((C4946 + C4947) * C44903 + (C4945 + C4944) * C4447) * C1222) *
              C44786 * C44906)) /
        (p * q * std::sqrt(p + q));
    d2eexx[12] += (2 * std::pow(Pi, 2.5) *
                   ((((C4451 * C93 + C4456 + C4456 + C4447 * C103 +
                       C4453 * C94 + C4457 + C4457 + C44903 * C104) *
                          C44851 * C4449 +
                      (C5034 + C5035) * C44851 * C44912) *
                         C44803 * C1806 -
                     ((C4453 * C2253 + C5018 + C5018 + C44903 * C2259 +
                       C4451 * C2252 + C5019 + C5019 + C4447 * C2258) *
                          C44851 * C44912 +
                      (C5035 + C5034) * C44851 * C4449) *
                         C44803 * C44908) *
                        C1808 +
                    (((C5036 + C5037) * C44851 * C4449 +
                      (C4451 * C2253 + C5024 + C5024 + C4447 * C2259 +
                       C4453 * C2254 + C5025 + C5025 + C44903 * C2260) *
                          C44851 * C44912) *
                         C44803 * C44908 -
                     ((C5037 + C5036) * C44851 * C44912 +
                      (C4453 * C95 + C4462 + C4462 + C44903 * C105 +
                       C4451 * C94 + C4463 + C4463 + C4447 * C104) *
                          C44851 * C4449) *
                         C44803 * C1806) *
                        C44906)) /
                  (p * q * std::sqrt(p + q));
    d2eexy[12] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4517 * C93 + C4449 * C156 + C4518 * C642 + C44912 * C710) *
                C4452 +
            (C4517 * C98 + C4449 * C161 + C4518 * C646 + C44912 * C714) *
                C4447 +
            (C4536 + C4537) * C4454 + (C4538 + C4539) * C44903) *
               C44851 * C44803 * C1806 -
           ((C5112 + C5113) * C44903 + (C5114 + C5115) * C4454 +
            (C4518 * C2255 + C44912 * C2305 + C4517 * C646 + C4449 * C714) *
                C4447 +
            (C4518 * C2252 + C44912 * C2302 + C4517 * C642 + C4449 * C710) *
                C4452) *
               C44851 * C44803 * C44908) *
              C1808 +
          (((C5115 + C5114) * C4452 + (C5113 + C5112) * C4447 +
            (C4517 * C640 + C4449 * C708 + C4518 * C2254 + C44912 * C2304) *
                C4454 +
            (C4517 * C644 + C4449 * C712 + C4518 * C2257 + C44912 * C2307) *
                C44903) *
               C44851 * C44803 * C44908 -
           ((C4540 + C4541) * C44903 + (C4542 + C4543) * C4454 +
            (C4539 + C4538) * C4447 + (C4537 + C4536) * C4452) *
               C44851 * C44803 * C1806) *
              C44906)) /
        (p * q * std::sqrt(p + q));
    d2eexz[12] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C222 * C93 + C44851 * C223) * C4452 +
             (C222 * C98 + C44851 * C228) * C4447 + C246 * C4454 +
             C247 * C44903) *
                C4449 +
            (C5200 + C5201 + C5186 + C5187) * C44912) *
               C44803 * C1806 -
           ((C5198 * C44903 + C5199 * C4454 +
             (C222 * C2255 + C44851 * C2349) * C4447 +
             (C222 * C2252 + C44851 * C2346) * C4452) *
                C44912 +
            (C5187 + C5186 + C5201 + C5200) * C4449) *
               C44803 * C44908) *
              C1808 +
          (((C5192 + C5193 + C5194 + C5195) * C4449 +
            (C5199 * C4452 + C5198 * C4447 +
             (C222 * C2254 + C44851 * C2348) * C4454 +
             (C222 * C2257 + C44851 * C2351) * C44903) *
                C44912) *
               C44803 * C44908 -
           ((C5195 + C5194 + C5193 + C5192) * C44912 +
            (C249 * C44903 + C248 * C4454 + C247 * C4447 + C246 * C4452) *
                C4449) *
               C44803 * C1806) *
              C44906)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[12] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4452 * C93 + C4447 * C98 + C4454 * C94 + C44903 * C99) * C4517 +
            (C4452 * C156 + C4447 * C289 + C4454 * C157 + C44903 * C290) *
                C4449 +
            (C5284 + C5285) * C4518 + (C5286 + C5287) * C44912) *
               C44851 * C44803 * C1806 -
           ((C4454 * C2303 + C44903 * C2391 + C4452 * C2302 + C4447 * C2390) *
                C44912 +
            (C4454 * C2253 + C44903 * C2256 + C4452 * C2252 + C4447 * C2255) *
                C4518 +
            (C5287 + C5286) * C4449 + (C5285 + C5284) * C4517) *
               C44851 * C44803 * C44908) *
              C1808 +
          (((C5288 + C5289) * C4517 + (C5290 + C5291) * C4449 +
            (C4452 * C2253 + C4447 * C2256 + C4454 * C2254 + C44903 * C2257) *
                C4518 +
            (C4452 * C2303 + C4447 * C2391 + C4454 * C2304 + C44903 * C2392) *
                C44912) *
               C44851 * C44803 * C44908 -
           ((C5291 + C5290) * C44912 + (C5289 + C5288) * C4518 +
            (C4454 * C158 + C44903 * C291 + C4452 * C157 + C4447 * C290) *
                C4449 +
            (C4454 * C95 + C44903 * C100 + C4452 * C94 + C4447 * C99) * C4517) *
               C44851 * C44803 * C1806) *
              C44906)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[12] += (2 * std::pow(Pi, 2.5) *
                   ((((C4693 * C93 + C4696 + C4696 + C4449 * C333 +
                       C4694 * C642 + C4697 + C4697 + C44912 * C904) *
                          C4447 +
                      (C4720 + C4721) * C44903) *
                         C44851 * C44803 * C1806 -
                     ((C5372 + C5373) * C44903 +
                      (C4694 * C2252 + C5364 + C5364 + C44912 * C2431 +
                       C4693 * C642 + C5365 + C5365 + C4449 * C904) *
                          C4447) *
                         C44851 * C44803 * C44908) *
                        C1808 +
                    (((C5373 + C5372) * C4447 +
                      (C4693 * C640 + C5366 + C5366 + C4449 * C902 +
                       C4694 * C2254 + C5367 + C5367 + C44912 * C2433) *
                          C44903) *
                         C44851 * C44803 * C44908 -
                     ((C4722 + C4723) * C44903 + (C4721 + C4720) * C4447) *
                         C44851 * C44803 * C1806) *
                        C44906)) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[12] += (2 * std::pow(Pi, 2.5) *
                   (((((C222 * C93 + C44851 * C223) * C4517 +
                       (C222 * C156 + C44851 * C396) * C4449 + C5196 * C4518 +
                       C5447 * C44912) *
                          C4447 +
                      (C4774 + C4775 + C4776 + C4777) * C44903) *
                         C44803 * C1806 -
                     ((C5449 + C5444 + C5445 + C5446) * C44903 +
                      ((C222 * C2302 + C44851 * C2475) * C44912 +
                       (C222 * C2252 + C44851 * C2346) * C4518 + C5447 * C4449 +
                       C5196 * C4517) *
                          C4447) *
                         C44803 * C44908) *
                        C1808 +
                    (((C5446 + C5445 + C5444 + C5449) * C4447 +
                      (C796 * C4517 + C981 * C4449 +
                       (C222 * C2254 + C44851 * C2348) * C4518 +
                       (C222 * C2304 + C44851 * C2477) * C44912) *
                          C44903) *
                         C44803 * C44908 -
                     ((C4778 + C4779 + C4780 + C4781) * C44903 +
                      (C4777 + C4776 + C4775 + C4774) * C4447) *
                         C44803 * C1806) *
                        C44906)) /
                  (p * q * std::sqrt(p + q));
    d2eezx[12] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C4452 * C93 + C4447 * C98 + C4454 * C94 + C44903 * C99) * C222 +
             (C4452 * C223 + C4447 * C455 + C4454 * C224 + C44903 * C456) *
                 C44851) *
                C4449 +
            ((C5284 + C5285) * C222 + (C5524 + C5525) * C44851) * C44912) *
               C44803 * C1806 -
           (((C4454 * C2347 + C44903 * C2517 + C4452 * C2346 + C4447 * C2516) *
                 C44851 +
             (C4454 * C2253 + C44903 * C2256 + C4452 * C2252 + C4447 * C2255) *
                 C222) *
                C44912 +
            ((C5525 + C5524) * C44851 + (C5285 + C5284) * C222) * C4449) *
               C44803 * C44908) *
              C1808 +
          ((((C5288 + C5289) * C222 + (C5526 + C5527) * C44851) * C4449 +
            ((C4452 * C2253 + C4447 * C2256 + C4454 * C2254 + C44903 * C2257) *
                 C222 +
             (C4452 * C2347 + C4447 * C2517 + C4454 * C2348 + C44903 * C2518) *
                 C44851) *
                C44912) *
               C44803 * C44908 -
           (((C5527 + C5526) * C44851 + (C5289 + C5288) * C222) * C44912 +
            ((C4454 * C225 + C44903 * C457 + C4452 * C224 + C4447 * C456) *
                 C44851 +
             (C4454 * C95 + C44903 * C100 + C4452 * C94 + C4447 * C99) * C222) *
                C4449) *
               C44803 * C1806) *
              C44906)) /
        (p * q * std::sqrt(p + q));
    d2eezy[12] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C4517 * C93 + C4449 * C156 + C4518 * C642 + C44912 * C710) *
                 C222 +
             (C4517 * C223 + C4449 * C498 + C4518 * C780 + C44912 * C1090) *
                 C44851) *
                C4447 +
            ((C4536 + C4537) * C222 + (C4890 + C4891) * C44851) * C44903) *
               C44803 * C1806 -
           (((C5598 + C5599) * C44851 + (C5114 + C5115) * C222) * C44903 +
            ((C4518 * C2346 + C44912 * C2557 + C4517 * C780 + C4449 * C1090) *
                 C44851 +
             (C4518 * C2252 + C44912 * C2302 + C4517 * C642 + C4449 * C710) *
                 C222) *
                C4447) *
               C44803 * C44908) *
              C1808 +
          ((((C5115 + C5114) * C222 + (C5599 + C5598) * C44851) * C4447 +
            ((C4517 * C640 + C4449 * C708 + C4518 * C2254 + C44912 * C2304) *
                 C222 +
             (C4517 * C778 + C4449 * C1088 + C4518 * C2348 + C44912 * C2559) *
                 C44851) *
                C44903) *
               C44803 * C44908 -
           (((C4892 + C4893) * C44851 + (C4542 + C4543) * C222) * C44903 +
            ((C4891 + C4890) * C44851 + (C4537 + C4536) * C222) * C4447) *
               C44803 * C1806) *
              C44906)) /
        (p * q * std::sqrt(p + q));
    d2eezz[12] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C557 * C93 + C564 + C564 + C44851 * C558) * C4449 +
             C5675 * C44912) *
                C4447 +
            (C4944 + C4945) * C44903) *
               C44803 * C1806 -
           ((C5677 + C5670) * C44903 +
            ((C557 * C2252 + C2602 + C2602 + C44851 * C2598) * C44912 +
             C5675 * C4449) *
                C4447) *
               C44803 * C44908) *
              C1808 +
          (((C5670 + C5677) * C4447 +
            (C1169 * C4449 +
             (C557 * C2254 + C2604 + C2604 + C44851 * C2600) * C44912) *
                C44903) *
               C44803 * C44908 -
           ((C4946 + C4947) * C44903 + (C4945 + C4944) * C4447) * C44803 *
               C1806) *
              C44906)) /
        (p * q * std::sqrt(p + q));
    d2eexx[13] += (2 * std::pow(Pi, 2.5) *
                   (((C4451 * C93 + C4456 + C4456 + C4447 * C103 + C4453 * C94 +
                      C4457 + C4457 + C44903 * C104) *
                         C44851 * C4449 +
                     (C5034 + C5035) * C44851 * C44912) *
                        C44803 * C2248 -
                    ((C6994 + C6995) * C44851 * C44912 +
                     (C5035 + C5034) * C44851 * C4449) *
                        C44803 * C2249 +
                    ((C6995 + C6994) * C44851 * C4449 +
                     (C4451 * C6977 + C6988 + C6988 + C4447 * C6981 +
                      C4453 * C6978 + C6989 + C6989 + C44903 * C6982) *
                         C44851 * C44912) *
                        C44803 * C2250) *
                   C44752) /
                  (p * q * std::sqrt(p + q));
    d2eexy[13] +=
        (2 * std::pow(Pi, 2.5) *
         (((C4517 * C93 + C4449 * C156 + C4518 * C642 + C44912 * C710) * C4452 +
           (C4517 * C98 + C4449 * C161 + C4518 * C646 + C44912 * C714) * C4447 +
           (C4536 + C4537) * C4454 + (C4538 + C4539) * C44903) *
              C44851 * C44803 * C2248 -
          ((C5112 + C5113) * C44903 + (C5114 + C5115) * C4454 +
           (C4518 * C2255 + C44912 * C2305 + C4517 * C646 + C4449 * C714) *
               C4447 +
           (C4518 * C2252 + C44912 * C2302 + C4517 * C642 + C4449 * C710) *
               C4452) *
              C44851 * C44803 * C2249 +
          ((C4517 * C2252 + C4449 * C2302 + C4518 * C6977 + C44912 * C7045) *
               C4452 +
           (C4517 * C2255 + C4449 * C2305 + C4518 * C6979 + C44912 * C7047) *
               C4447 +
           (C4517 * C2253 + C4449 * C2303 + C4518 * C6978 + C44912 * C7046) *
               C4454 +
           (C4517 * C2256 + C4449 * C2306 + C4518 * C6980 + C44912 * C7048) *
               C44903) *
              C44851 * C44803 * C2250) *
         C44752) /
        (p * q * std::sqrt(p + q));
    d2eexz[13] += (2 * std::pow(Pi, 2.5) *
                   ((((C222 * C93 + C44851 * C223) * C4452 +
                      (C222 * C98 + C44851 * C228) * C4447 + C246 * C4454 +
                      C247 * C44903) *
                         C4449 +
                     (C5200 + C5201 + C5186 + C5187) * C44912) *
                        C44803 * C2248 -
                    ((C7104 + C7105 + C7112 + C7113) * C44912 +
                     (C5187 + C5186 + C5201 + C5200) * C4449) *
                        C44803 * C2249 +
                    ((C7113 + C7112 + C7105 + C7104) * C4449 +
                     ((C222 * C6977 + C44851 * C7099) * C4452 +
                      (C222 * C6979 + C44851 * C7101) * C4447 +
                      (C222 * C6978 + C44851 * C7100) * C4454 +
                      (C222 * C6980 + C44851 * C7102) * C44903) *
                         C44912) *
                        C44803 * C2250) *
                   C44752) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[13] +=
        (2 * std::pow(Pi, 2.5) *
         (((C4452 * C93 + C4447 * C98 + C4454 * C94 + C44903 * C99) * C4517 +
           (C4452 * C156 + C4447 * C289 + C4454 * C157 + C44903 * C290) *
               C4449 +
           (C5284 + C5285) * C4518 + (C5286 + C5287) * C44912) *
              C44851 * C44803 * C2248 -
          ((C7174 + C7175) * C44912 + (C7176 + C7177) * C4518 +
           (C5287 + C5286) * C4449 + (C5285 + C5284) * C4517) *
              C44851 * C44803 * C2249 +
          ((C7177 + C7176) * C4517 + (C7175 + C7174) * C4449 +
           (C4452 * C6977 + C4447 * C6979 + C4454 * C6978 + C44903 * C6980) *
               C4518 +
           (C4452 * C7045 + C4447 * C7163 + C4454 * C7046 + C44903 * C7164) *
               C44912) *
              C44851 * C44803 * C2250) *
         C44752) /
        (p * q * std::sqrt(p + q));
    d2eeyy[13] += (2 * std::pow(Pi, 2.5) *
                   (((C4693 * C93 + C4696 + C4696 + C4449 * C333 +
                      C4694 * C642 + C4697 + C4697 + C44912 * C904) *
                         C4447 +
                     (C4720 + C4721) * C44903) *
                        C44851 * C44803 * C2248 -
                    ((C5372 + C5373) * C44903 +
                     (C4694 * C2252 + C5364 + C5364 + C44912 * C2431 +
                      C4693 * C642 + C5365 + C5365 + C4449 * C904) *
                         C4447) *
                        C44851 * C44803 * C2249 +
                    ((C4693 * C2252 + C7230 + C7230 + C4449 * C2431 +
                      C4694 * C6977 + C7231 + C7231 + C44912 * C7227) *
                         C4447 +
                     (C4693 * C2253 + C7232 + C7232 + C4449 * C2432 +
                      C4694 * C6978 + C7233 + C7233 + C44912 * C7228) *
                         C44903) *
                        C44851 * C44803 * C2250) *
                   C44752) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[13] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C222 * C93 + C44851 * C223) * C4517 +
            (C222 * C156 + C44851 * C396) * C4449 + C5196 * C4518 +
            C5447 * C44912) *
               C4447 +
           (C4774 + C4775 + C4776 + C4777) * C44903) *
              C44803 * C2248 -
          ((C5449 + C5444 + C5445 + C5446) * C44903 +
           (C7288 * C44912 + C7111 * C4518 + C5447 * C4449 + C5196 * C4517) *
               C4447) *
              C44803 * C2249 +
          ((C7111 * C4517 + C7288 * C4449 +
            (C222 * C6977 + C44851 * C7099) * C4518 +
            (C222 * C7045 + C44851 * C7283) * C44912) *
               C4447 +
           (C5199 * C4517 + C5448 * C4449 +
            (C222 * C6978 + C44851 * C7100) * C4518 +
            (C222 * C7046 + C44851 * C7284) * C44912) *
               C44903) *
              C44803 * C2250) *
         C44752) /
        (p * q * std::sqrt(p + q));
    d2eezx[13] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4452 * C93 + C4447 * C98 + C4454 * C94 + C44903 * C99) * C222 +
            (C4452 * C223 + C4447 * C455 + C4454 * C224 + C44903 * C456) *
                C44851) *
               C4449 +
           ((C5284 + C5285) * C222 + (C5524 + C5525) * C44851) * C44912) *
              C44803 * C2248 -
          (((C7345 + C7346) * C44851 + (C7176 + C7177) * C222) * C44912 +
           ((C5525 + C5524) * C44851 + (C5285 + C5284) * C222) * C4449) *
              C44803 * C2249 +
          (((C7177 + C7176) * C222 + (C7346 + C7345) * C44851) * C4449 +
           ((C4452 * C6977 + C4447 * C6979 + C4454 * C6978 + C44903 * C6980) *
                C222 +
            (C4452 * C7099 + C4447 * C7338 + C4454 * C7100 + C44903 * C7339) *
                C44851) *
               C44912) *
              C44803 * C2250) *
         C44752) /
        (p * q * std::sqrt(p + q));
    d2eezy[13] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4517 * C93 + C4449 * C156 + C4518 * C642 + C44912 * C710) * C222 +
            (C4517 * C223 + C4449 * C498 + C4518 * C780 + C44912 * C1090) *
                C44851) *
               C4447 +
           ((C4536 + C4537) * C222 + (C4890 + C4891) * C44851) * C44903) *
              C44803 * C2248 -
          (((C5598 + C5599) * C44851 + (C5114 + C5115) * C222) * C44903 +
           ((C4518 * C2346 + C44912 * C2557 + C4517 * C780 + C4449 * C1090) *
                C44851 +
            (C4518 * C2252 + C44912 * C2302 + C4517 * C642 + C4449 * C710) *
                C222) *
               C4447) *
              C44803 * C2249 +
          (((C4517 * C2252 + C4449 * C2302 + C4518 * C6977 + C44912 * C7045) *
                C222 +
            (C4517 * C2346 + C4449 * C2557 + C4518 * C7099 + C44912 * C7396) *
                C44851) *
               C4447 +
           ((C4517 * C2253 + C4449 * C2303 + C4518 * C6978 + C44912 * C7046) *
                C222 +
            (C4517 * C2347 + C4449 * C2558 + C4518 * C7100 + C44912 * C7397) *
                C44851) *
               C44903) *
              C44803 * C2250) *
         C44752) /
        (p * q * std::sqrt(p + q));
    d2eezz[13] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C557 * C93 + C564 + C564 + C44851 * C558) * C4449 +
            C5675 * C44912) *
               C4447 +
           (C4944 + C4945) * C44903) *
              C44803 * C2248 -
          ((C5677 + C5670) * C44903 +
           (C7457 * C44912 + C5675 * C4449) * C4447) *
              C44803 * C2249 +
          ((C7457 * C4449 +
            (C557 * C6977 + C7453 + C7453 + C44851 * C7448) * C44912) *
               C4447 +
           (C5676 * C4449 +
            (C557 * C6978 + C7454 + C7454 + C44851 * C7449) * C44912) *
               C44903) *
              C44803 * C2250) *
         C44752) /
        (p * q * std::sqrt(p + q));
    d2eexx[14] += (2 * std::pow(Pi, 2.5) *
                   ((((C4451 * C93 + C4456 + C4456 + C4447 * C103 +
                       C4453 * C94 + C4457 + C4457 + C44903 * C104) *
                          C44851 * C4449 +
                      (C5034 + C5035) * C44851 * C44912) *
                         C1222 -
                     ((C7540 + C7541) * C44851 * C44912 +
                      (C4453 * C1225 + C5746 + C5746 + C44903 * C1233 +
                       C4451 * C1226 + C5747 + C5747 + C4447 * C1234) *
                          C44851 * C4449) *
                         C44910) *
                        C1806 +
                    (((C7541 + C7540) * C44851 * C4449 +
                      (C4451 * C7523 + C7534 + C7534 + C4447 * C7527 +
                       C4453 * C7524 + C7535 + C7535 + C44903 * C7528) *
                          C44851 * C44912) *
                         C44910 -
                     ((C6994 + C6995) * C44851 * C44912 +
                      (C5035 + C5034) * C44851 * C4449) *
                         C1222) *
                        C44908) *
                   C44752) /
                  (p * q * std::sqrt(p + q));
    d2eexy[14] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4517 * C93 + C4449 * C156 + C4518 * C642 + C44912 * C710) *
                C4452 +
            (C4517 * C98 + C4449 * C161 + C4518 * C646 + C44912 * C714) *
                C4447 +
            (C4536 + C4537) * C4454 + (C4538 + C4539) * C44903) *
               C44851 * C1222 -
           ((C5826 + C5827) * C44903 + (C5828 + C5829) * C4454 +
            (C4518 * C2657 + C44912 * C2719 + C4517 * C1230 + C4449 * C1298) *
                C4447 +
            (C4518 * C2654 + C44912 * C2716 + C4517 * C1226 + C4449 * C1294) *
                C4452) *
               C44851 * C44910) *
              C1806 +
          (((C4517 * C2654 + C4449 * C2716 + C4518 * C7523 + C44912 * C7607) *
                C4452 +
            (C4517 * C2657 + C4449 * C2719 + C4518 * C7525 + C44912 * C7609) *
                C4447 +
            (C4517 * C2655 + C4449 * C2717 + C4518 * C7524 + C44912 * C7608) *
                C4454 +
            (C4517 * C2658 + C4449 * C2720 + C4518 * C7526 + C44912 * C7610) *
                C44903) *
               C44851 * C44910 -
           ((C5112 + C5113) * C44903 + (C5114 + C5115) * C4454 +
            (C4518 * C2255 + C44912 * C2305 + C4517 * C646 + C4449 * C714) *
                C4447 +
            (C4518 * C2252 + C44912 * C2302 + C4517 * C642 + C4449 * C710) *
                C4452) *
               C44851 * C1222) *
              C44908) *
         C44752) /
        (p * q * std::sqrt(p + q));
    d2eexz[14] += (2 * std::pow(Pi, 2.5) *
                   (((((C222 * C93 + C44851 * C223) * C4452 +
                       (C222 * C98 + C44851 * C228) * C4447 + C246 * C4454 +
                       C247 * C44903) *
                          C4449 +
                      (C5200 + C5201 + C5186 + C5187) * C44912) *
                         C1222 -
                     ((C7682 + C7683 + C7690 + C7691) * C44912 +
                      (C1381 * C44903 + C1382 * C4454 +
                       (C222 * C1230 + C44851 * C1368) * C4447 +
                       (C222 * C1226 + C44851 * C1364) * C4452) *
                          C4449) *
                         C44910) *
                        C1806 +
                    (((C7691 + C7690 + C7683 + C7682) * C4449 +
                      ((C222 * C7523 + C44851 * C7677) * C4452 +
                       (C222 * C7525 + C44851 * C7679) * C4447 +
                       (C222 * C7524 + C44851 * C7678) * C4454 +
                       (C222 * C7526 + C44851 * C7680) * C44903) *
                          C44912) *
                         C44910 -
                     ((C7104 + C7105 + C7112 + C7113) * C44912 +
                      (C5187 + C5186 + C5201 + C5200) * C4449) *
                         C1222) *
                        C44908) *
                   C44752) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[14] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4452 * C93 + C4447 * C98 + C4454 * C94 + C44903 * C99) * C4517 +
            (C4452 * C156 + C4447 * C289 + C4454 * C157 + C44903 * C290) *
                C4449 +
            (C5284 + C5285) * C4518 + (C5286 + C5287) * C44912) *
               C44851 * C1222 -
           ((C7768 + C7769) * C44912 + (C7770 + C7771) * C4518 +
            (C4454 * C1293 + C44903 * C1433 + C4452 * C1294 + C4447 * C1434) *
                C4449 +
            (C4454 * C1225 + C44903 * C1229 + C4452 * C1226 + C4447 * C1230) *
                C4517) *
               C44851 * C44910) *
              C1806 +
          (((C7771 + C7770) * C4517 + (C7769 + C7768) * C4449 +
            (C4452 * C7523 + C4447 * C7525 + C4454 * C7524 + C44903 * C7526) *
                C4518 +
            (C4452 * C7607 + C4447 * C7757 + C4454 * C7608 + C44903 * C7758) *
                C44912) *
               C44851 * C44910 -
           ((C7174 + C7175) * C44912 + (C7176 + C7177) * C4518 +
            (C5287 + C5286) * C4449 + (C5285 + C5284) * C4517) *
               C44851 * C1222) *
              C44908) *
         C44752) /
        (p * q * std::sqrt(p + q));
    d2eeyy[14] += (2 * std::pow(Pi, 2.5) *
                   ((((C4693 * C93 + C4696 + C4696 + C4449 * C333 +
                       C4694 * C642 + C4697 + C4697 + C44912 * C904) *
                          C4447 +
                      (C4720 + C4721) * C44903) *
                         C44851 * C1222 -
                     ((C6048 + C6049) * C44903 +
                      (C4694 * C2654 + C6040 + C6040 + C44912 * C2881 +
                       C4693 * C1226 + C6041 + C6041 + C4449 * C1488) *
                          C4447) *
                         C44851 * C44910) *
                        C1806 +
                    (((C4693 * C2654 + C7840 + C7840 + C4449 * C2881 +
                       C4694 * C7523 + C7841 + C7841 + C44912 * C7837) *
                          C4447 +
                      (C4693 * C2655 + C7842 + C7842 + C4449 * C2882 +
                       C4694 * C7524 + C7843 + C7843 + C44912 * C7838) *
                          C44903) *
                         C44851 * C44910 -
                     ((C5372 + C5373) * C44903 +
                      (C4694 * C2252 + C5364 + C5364 + C44912 * C2431 +
                       C4693 * C642 + C5365 + C5365 + C4449 * C904) *
                          C4447) *
                         C44851 * C1222) *
                        C44908) *
                   C44752) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[14] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C222 * C93 + C44851 * C223) * C4517 +
             (C222 * C156 + C44851 * C396) * C4449 + C5196 * C4518 +
             C5447 * C44912) *
                C4447 +
            (C4774 + C4775 + C4776 + C4777) * C44903) *
               C1222 -
           ((C6122 + C6118 + C6119 + C6120) * C44903 +
            (C7914 * C44912 + C7689 * C4518 +
             (C222 * C1294 + C44851 * C1556) * C4449 +
             (C222 * C1226 + C44851 * C1364) * C4517) *
                C4447) *
               C44910) *
              C1806 +
          (((C7689 * C4517 + C7914 * C4449 +
             (C222 * C7523 + C44851 * C7677) * C4518 +
             (C222 * C7607 + C44851 * C7909) * C44912) *
                C4447 +
            (C5901 * C4517 + C6121 * C4449 +
             (C222 * C7524 + C44851 * C7678) * C4518 +
             (C222 * C7608 + C44851 * C7910) * C44912) *
                C44903) *
               C44910 -
           ((C5449 + C5444 + C5445 + C5446) * C44903 +
            (C7288 * C44912 + C7111 * C4518 + C5447 * C4449 + C5196 * C4517) *
                C4447) *
               C1222) *
              C44908) *
         C44752) /
        (p * q * std::sqrt(p + q));
    d2eezx[14] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C4452 * C93 + C4447 * C98 + C4454 * C94 + C44903 * C99) * C222 +
             (C4452 * C223 + C4447 * C455 + C4454 * C224 + C44903 * C456) *
                 C44851) *
                C4449 +
            ((C5284 + C5285) * C222 + (C5524 + C5525) * C44851) * C44912) *
               C1222 -
           (((C7987 + C7988) * C44851 + (C7770 + C7771) * C222) * C44912 +
            ((C4454 * C1363 + C44903 * C1619 + C4452 * C1364 + C4447 * C1620) *
                 C44851 +
             (C4454 * C1225 + C44903 * C1229 + C4452 * C1226 + C4447 * C1230) *
                 C222) *
                C4449) *
               C44910) *
              C1806 +
          ((((C7771 + C7770) * C222 + (C7988 + C7987) * C44851) * C4449 +
            ((C4452 * C7523 + C4447 * C7525 + C4454 * C7524 + C44903 * C7526) *
                 C222 +
             (C4452 * C7677 + C4447 * C7980 + C4454 * C7678 + C44903 * C7981) *
                 C44851) *
                C44912) *
               C44910 -
           (((C7345 + C7346) * C44851 + (C7176 + C7177) * C222) * C44912 +
            ((C5525 + C5524) * C44851 + (C5285 + C5284) * C222) * C4449) *
               C1222) *
              C44908) *
         C44752) /
        (p * q * std::sqrt(p + q));
    d2eezy[14] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C4517 * C93 + C4449 * C156 + C4518 * C642 + C44912 * C710) *
                 C222 +
             (C4517 * C223 + C4449 * C498 + C4518 * C780 + C44912 * C1090) *
                 C44851) *
                C4447 +
            ((C4536 + C4537) * C222 + (C4890 + C4891) * C44851) * C44903) *
               C1222 -
           (((C6259 + C6260) * C44851 + (C5828 + C5829) * C222) * C44903 +
            ((C4518 * C2772 + C44912 * C3043 + C4517 * C1364 + C4449 * C1674) *
                 C44851 +
             (C4518 * C2654 + C44912 * C2716 + C4517 * C1226 + C4449 * C1294) *
                 C222) *
                C4447) *
               C44910) *
              C1806 +
          ((((C4517 * C2654 + C4449 * C2716 + C4518 * C7523 + C44912 * C7607) *
                 C222 +
             (C4517 * C2772 + C4449 * C3043 + C4518 * C7677 + C44912 * C8054) *
                 C44851) *
                C4447 +
            ((C4517 * C2655 + C4449 * C2717 + C4518 * C7524 + C44912 * C7608) *
                 C222 +
             (C4517 * C2773 + C4449 * C3044 + C4518 * C7678 + C44912 * C8055) *
                 C44851) *
                C44903) *
               C44910 -
           (((C5598 + C5599) * C44851 + (C5114 + C5115) * C222) * C44903 +
            ((C4518 * C2346 + C44912 * C2557 + C4517 * C780 + C4449 * C1090) *
                 C44851 +
             (C4518 * C2252 + C44912 * C2302 + C4517 * C642 + C4449 * C710) *
                 C222) *
                C4447) *
               C1222) *
              C44908) *
         C44752) /
        (p * q * std::sqrt(p + q));
    d2eezz[14] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C557 * C93 + C564 + C564 + C44851 * C558) * C4449 +
             C5675 * C44912) *
                C4447 +
            (C4944 + C4945) * C44903) *
               C1222 -
           ((C6333 + C6329) * C44903 +
            (C8131 * C44912 +
             (C557 * C1226 + C1747 + C1747 + C44851 * C1738) * C4449) *
                C4447) *
               C44910) *
              C1806 +
          (((C8131 * C4449 +
             (C557 * C7523 + C8127 + C8127 + C44851 * C8122) * C44912) *
                C4447 +
            (C6332 * C4449 +
             (C557 * C7524 + C8128 + C8128 + C44851 * C8123) * C44912) *
                C44903) *
               C44910 -
           ((C5677 + C5670) * C44903 +
            (C7457 * C44912 + C5675 * C4449) * C4447) *
               C1222) *
              C44908) *
         C44752) /
        (p * q * std::sqrt(p + q));
    d2eexx[15] += (2 * std::pow(Pi, 2.5) *
                   ((((C4451 * C93 + C4456 + C4456 + C4447 * C103 +
                       C4453 * C94 + C4457 + C4457 + C44903 * C104) *
                          C44851 * C4449 +
                      (C5034 + C5035) * C44851 * C44912) *
                         C3152 -
                     ((C7540 + C7541) * C44851 * C44912 +
                      (C4453 * C1225 + C5746 + C5746 + C44903 * C1233 +
                       C4451 * C1226 + C5747 + C5747 + C4447 * C1234) *
                          C44851 * C4449) *
                         C44910) *
                        C44786 * C1808 +
                    (((C4451 * C1225 + C5748 + C5748 + C4447 * C1233 +
                       C4453 * C1224 + C5749 + C5749 + C44903 * C1232) *
                          C44851 * C4449 +
                      (C4451 * C2655 + C5750 + C5750 + C4447 * C2661 +
                       C4453 * C2656 + C5751 + C5751 + C44903 * C2662) *
                          C44851 * C44912) *
                         C44910 -
                     ((C5037 + C5036) * C44851 * C44912 +
                      (C4453 * C95 + C4462 + C4462 + C44903 * C105 +
                       C4451 * C94 + C4463 + C4463 + C4447 * C104) *
                          C44851 * C4449) *
                         C3152) *
                        C44786 * C44906)) /
                  (p * q * std::sqrt(p + q));
    d2eexy[15] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4517 * C93 + C4449 * C156 + C4518 * C642 + C44912 * C710) *
                C4452 +
            (C4517 * C98 + C4449 * C161 + C4518 * C646 + C44912 * C714) *
                C4447 +
            (C4536 + C4537) * C4454 + (C4538 + C4539) * C44903) *
               C44851 * C3152 -
           ((C5826 + C5827) * C44903 + (C5828 + C5829) * C4454 +
            (C4518 * C2657 + C44912 * C2719 + C4517 * C1230 + C4449 * C1298) *
                C4447 +
            (C4518 * C2654 + C44912 * C2716 + C4517 * C1226 + C4449 * C1294) *
                C4452) *
               C44851 * C44910) *
              C44786 * C1808 +
          (((C5829 + C5828) * C4452 + (C5827 + C5826) * C4447 +
            (C4517 * C1224 + C4449 * C1292 + C4518 * C2656 + C44912 * C2718) *
                C4454 +
            (C4517 * C1228 + C4449 * C1296 + C4518 * C2659 + C44912 * C2721) *
                C44903) *
               C44851 * C44910 -
           ((C4540 + C4541) * C44903 + (C4542 + C4543) * C4454 +
            (C4539 + C4538) * C4447 + (C4537 + C4536) * C4452) *
               C44851 * C3152) *
              C44786 * C44906)) /
        (p * q * std::sqrt(p + q));
    d2eexz[15] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C222 * C93 + C44851 * C223) * C4452 +
             (C222 * C98 + C44851 * C228) * C4447 + C246 * C4454 +
             C247 * C44903) *
                C4449 +
            (C5200 + C5201 + C5186 + C5187) * C44912) *
               C3152 -
           ((C7682 + C7683 + C7690 + C7691) * C44912 +
            (C1381 * C44903 + C1382 * C4454 +
             (C222 * C1230 + C44851 * C1368) * C4447 +
             (C222 * C1226 + C44851 * C1364) * C4452) *
                C4449) *
               C44910) *
              C44786 * C1808 +
          (((C1382 * C4452 + C1381 * C4447 + C1380 * C4454 + C1379 * C44903) *
                C4449 +
            (C5901 * C4452 + C5900 * C4447 +
             (C222 * C2656 + C44851 * C2774) * C4454 +
             (C222 * C2659 + C44851 * C2777) * C44903) *
                C44912) *
               C44910 -
           ((C5195 + C5194 + C5193 + C5192) * C44912 +
            (C249 * C44903 + C248 * C4454 + C247 * C4447 + C246 * C4452) *
                C4449) *
               C3152) *
              C44786 * C44906)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[15] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4452 * C93 + C4447 * C98 + C4454 * C94 + C44903 * C99) * C4517 +
            (C4452 * C156 + C4447 * C289 + C4454 * C157 + C44903 * C290) *
                C4449 +
            (C5284 + C5285) * C4518 + (C5286 + C5287) * C44912) *
               C44851 * C3152 -
           ((C7768 + C7769) * C44912 + (C7770 + C7771) * C4518 +
            (C4454 * C1293 + C44903 * C1433 + C4452 * C1294 + C4447 * C1434) *
                C4449 +
            (C4454 * C1225 + C44903 * C1229 + C4452 * C1226 + C4447 * C1230) *
                C4517) *
               C44851 * C44910) *
              C44786 * C1808 +
          (((C4452 * C1225 + C4447 * C1229 + C4454 * C1224 + C44903 * C1228) *
                C4517 +
            (C4452 * C1293 + C4447 * C1433 + C4454 * C1292 + C44903 * C1432) *
                C4449 +
            (C4452 * C2655 + C4447 * C2658 + C4454 * C2656 + C44903 * C2659) *
                C4518 +
            (C4452 * C2717 + C4447 * C2829 + C4454 * C2718 + C44903 * C2830) *
                C44912) *
               C44851 * C44910 -
           ((C5291 + C5290) * C44912 + (C5289 + C5288) * C4518 +
            (C4454 * C158 + C44903 * C291 + C4452 * C157 + C4447 * C290) *
                C4449 +
            (C4454 * C95 + C44903 * C100 + C4452 * C94 + C4447 * C99) * C4517) *
               C44851 * C3152) *
              C44786 * C44906)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[15] += (2 * std::pow(Pi, 2.5) *
                   ((((C4693 * C93 + C4696 + C4696 + C4449 * C333 +
                       C4694 * C642 + C4697 + C4697 + C44912 * C904) *
                          C4447 +
                      (C4720 + C4721) * C44903) *
                         C44851 * C3152 -
                     ((C6048 + C6049) * C44903 +
                      (C4694 * C2654 + C6040 + C6040 + C44912 * C2881 +
                       C4693 * C1226 + C6041 + C6041 + C4449 * C1488) *
                          C4447) *
                         C44851 * C44910) *
                        C44786 * C1808 +
                    (((C6049 + C6048) * C4447 +
                      (C4693 * C1224 + C6042 + C6042 + C4449 * C1486 +
                       C4694 * C2656 + C6043 + C6043 + C44912 * C2883) *
                          C44903) *
                         C44851 * C44910 -
                     ((C4722 + C4723) * C44903 + (C4721 + C4720) * C4447) *
                         C44851 * C3152) *
                        C44786 * C44906)) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[15] += (2 * std::pow(Pi, 2.5) *
                   (((((C222 * C93 + C44851 * C223) * C4517 +
                       (C222 * C156 + C44851 * C396) * C4449 + C5196 * C4518 +
                       C5447 * C44912) *
                          C4447 +
                      (C4774 + C4775 + C4776 + C4777) * C44903) *
                         C3152 -
                     ((C6122 + C6118 + C6119 + C6120) * C44903 +
                      (C7914 * C44912 + C7689 * C4518 +
                       (C222 * C1294 + C44851 * C1556) * C4449 +
                       (C222 * C1226 + C44851 * C1364) * C4517) *
                          C4447) *
                         C44910) *
                        C44786 * C1808 +
                    (((C6120 + C6119 + C6118 + C6122) * C4447 +
                      (C1380 * C4517 + C1565 * C4449 +
                       (C222 * C2656 + C44851 * C2774) * C4518 +
                       (C222 * C2718 + C44851 * C2939) * C44912) *
                          C44903) *
                         C44910 -
                     ((C4778 + C4779 + C4780 + C4781) * C44903 +
                      (C4777 + C4776 + C4775 + C4774) * C4447) *
                         C3152) *
                        C44786 * C44906)) /
                  (p * q * std::sqrt(p + q));
    d2eezx[15] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C4452 * C93 + C4447 * C98 + C4454 * C94 + C44903 * C99) * C222 +
             (C4452 * C223 + C4447 * C455 + C4454 * C224 + C44903 * C456) *
                 C44851) *
                C4449 +
            ((C5284 + C5285) * C222 + (C5524 + C5525) * C44851) * C44912) *
               C3152 -
           (((C7987 + C7988) * C44851 + (C7770 + C7771) * C222) * C44912 +
            ((C4454 * C1363 + C44903 * C1619 + C4452 * C1364 + C4447 * C1620) *
                 C44851 +
             (C4454 * C1225 + C44903 * C1229 + C4452 * C1226 + C4447 * C1230) *
                 C222) *
                C4449) *
               C44910) *
              C44786 * C1808 +
          ((((C4452 * C1225 + C4447 * C1229 + C4454 * C1224 + C44903 * C1228) *
                 C222 +
             (C4452 * C1363 + C4447 * C1619 + C4454 * C1362 + C44903 * C1618) *
                 C44851) *
                C4449 +
            ((C4452 * C2655 + C4447 * C2658 + C4454 * C2656 + C44903 * C2659) *
                 C222 +
             (C4452 * C2773 + C4447 * C2991 + C4454 * C2774 + C44903 * C2992) *
                 C44851) *
                C44912) *
               C44910 -
           (((C5527 + C5526) * C44851 + (C5289 + C5288) * C222) * C44912 +
            ((C4454 * C225 + C44903 * C457 + C4452 * C224 + C4447 * C456) *
                 C44851 +
             (C4454 * C95 + C44903 * C100 + C4452 * C94 + C4447 * C99) * C222) *
                C4449) *
               C3152) *
              C44786 * C44906)) /
        (p * q * std::sqrt(p + q));
    d2eezy[15] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C4517 * C93 + C4449 * C156 + C4518 * C642 + C44912 * C710) *
                 C222 +
             (C4517 * C223 + C4449 * C498 + C4518 * C780 + C44912 * C1090) *
                 C44851) *
                C4447 +
            ((C4536 + C4537) * C222 + (C4890 + C4891) * C44851) * C44903) *
               C3152 -
           (((C6259 + C6260) * C44851 + (C5828 + C5829) * C222) * C44903 +
            ((C4518 * C2772 + C44912 * C3043 + C4517 * C1364 + C4449 * C1674) *
                 C44851 +
             (C4518 * C2654 + C44912 * C2716 + C4517 * C1226 + C4449 * C1294) *
                 C222) *
                C4447) *
               C44910) *
              C44786 * C1808 +
          ((((C5829 + C5828) * C222 + (C6260 + C6259) * C44851) * C4447 +
            ((C4517 * C1224 + C4449 * C1292 + C4518 * C2656 + C44912 * C2718) *
                 C222 +
             (C4517 * C1362 + C4449 * C1672 + C4518 * C2774 + C44912 * C3045) *
                 C44851) *
                C44903) *
               C44910 -
           (((C4892 + C4893) * C44851 + (C4542 + C4543) * C222) * C44903 +
            ((C4891 + C4890) * C44851 + (C4537 + C4536) * C222) * C4447) *
               C3152) *
              C44786 * C44906)) /
        (p * q * std::sqrt(p + q));
    d2eezz[15] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C557 * C93 + C564 + C564 + C44851 * C558) * C4449 +
             C5675 * C44912) *
                C4447 +
            (C4944 + C4945) * C44903) *
               C3152 -
           ((C6333 + C6329) * C44903 +
            (C8131 * C44912 +
             (C557 * C1226 + C1747 + C1747 + C44851 * C1738) * C4449) *
                C4447) *
               C44910) *
              C44786 * C1808 +
          (((C6329 + C6333) * C4447 +
            (C1753 * C4449 +
             (C557 * C2656 + C3102 + C3102 + C44851 * C3098) * C44912) *
                C44903) *
               C44910 -
           ((C4946 + C4947) * C44903 + (C4945 + C4944) * C4447) * C3152) *
              C44786 * C44906)) /
        (p * q * std::sqrt(p + q));
    d2eexx[16] += (2 * std::pow(Pi, 2.5) *
                   ((((C4451 * C93 + C4456 + C4456 + C4447 * C103 +
                       C4453 * C94 + C4457 + C4457 + C44903 * C104) *
                          C44851 * C4449 +
                      (C5034 + C5035) * C44851 * C44912) *
                         C3152 -
                     ((C7540 + C7541) * C44851 * C44912 +
                      (C4453 * C1225 + C5746 + C5746 + C44903 * C1233 +
                       C4451 * C1226 + C5747 + C5747 + C4447 * C1234) *
                          C44851 * C4449) *
                         C44910) *
                        C636 +
                    (((C7541 + C7540) * C44851 * C4449 +
                      (C4451 * C7523 + C7534 + C7534 + C4447 * C7527 +
                       C4453 * C7524 + C7535 + C7535 + C44903 * C7528) *
                          C44851 * C44912) *
                         C44910 -
                     ((C6994 + C6995) * C44851 * C44912 +
                      (C5035 + C5034) * C44851 * C4449) *
                         C3152) *
                        C44908) *
                   C44752) /
                  (p * q * std::sqrt(p + q));
    d2eexy[16] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4517 * C93 + C4449 * C156 + C4518 * C642 + C44912 * C710) *
                C4452 +
            (C4517 * C98 + C4449 * C161 + C4518 * C646 + C44912 * C714) *
                C4447 +
            (C4536 + C4537) * C4454 + (C4538 + C4539) * C44903) *
               C44851 * C3152 -
           ((C5826 + C5827) * C44903 + (C5828 + C5829) * C4454 +
            (C4518 * C2657 + C44912 * C2719 + C4517 * C1230 + C4449 * C1298) *
                C4447 +
            (C4518 * C2654 + C44912 * C2716 + C4517 * C1226 + C4449 * C1294) *
                C4452) *
               C44851 * C44910) *
              C636 +
          (((C4517 * C2654 + C4449 * C2716 + C4518 * C7523 + C44912 * C7607) *
                C4452 +
            (C4517 * C2657 + C4449 * C2719 + C4518 * C7525 + C44912 * C7609) *
                C4447 +
            (C4517 * C2655 + C4449 * C2717 + C4518 * C7524 + C44912 * C7608) *
                C4454 +
            (C4517 * C2658 + C4449 * C2720 + C4518 * C7526 + C44912 * C7610) *
                C44903) *
               C44851 * C44910 -
           ((C5112 + C5113) * C44903 + (C5114 + C5115) * C4454 +
            (C4518 * C2255 + C44912 * C2305 + C4517 * C646 + C4449 * C714) *
                C4447 +
            (C4518 * C2252 + C44912 * C2302 + C4517 * C642 + C4449 * C710) *
                C4452) *
               C44851 * C3152) *
              C44908) *
         C44752) /
        (p * q * std::sqrt(p + q));
    d2eexz[16] += (2 * std::pow(Pi, 2.5) *
                   (((((C222 * C93 + C44851 * C223) * C4452 +
                       (C222 * C98 + C44851 * C228) * C4447 + C246 * C4454 +
                       C247 * C44903) *
                          C4449 +
                      (C5200 + C5201 + C5186 + C5187) * C44912) *
                         C3152 -
                     ((C7682 + C7683 + C7690 + C7691) * C44912 +
                      (C1381 * C44903 + C1382 * C4454 +
                       (C222 * C1230 + C44851 * C1368) * C4447 +
                       (C222 * C1226 + C44851 * C1364) * C4452) *
                          C4449) *
                         C44910) *
                        C636 +
                    (((C7691 + C7690 + C7683 + C7682) * C4449 +
                      ((C222 * C7523 + C44851 * C7677) * C4452 +
                       (C222 * C7525 + C44851 * C7679) * C4447 +
                       (C222 * C7524 + C44851 * C7678) * C4454 +
                       (C222 * C7526 + C44851 * C7680) * C44903) *
                          C44912) *
                         C44910 -
                     ((C7104 + C7105 + C7112 + C7113) * C44912 +
                      (C5187 + C5186 + C5201 + C5200) * C4449) *
                         C3152) *
                        C44908) *
                   C44752) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[16] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4452 * C93 + C4447 * C98 + C4454 * C94 + C44903 * C99) * C4517 +
            (C4452 * C156 + C4447 * C289 + C4454 * C157 + C44903 * C290) *
                C4449 +
            (C5284 + C5285) * C4518 + (C5286 + C5287) * C44912) *
               C44851 * C3152 -
           ((C7768 + C7769) * C44912 + (C7770 + C7771) * C4518 +
            (C4454 * C1293 + C44903 * C1433 + C4452 * C1294 + C4447 * C1434) *
                C4449 +
            (C4454 * C1225 + C44903 * C1229 + C4452 * C1226 + C4447 * C1230) *
                C4517) *
               C44851 * C44910) *
              C636 +
          (((C7771 + C7770) * C4517 + (C7769 + C7768) * C4449 +
            (C4452 * C7523 + C4447 * C7525 + C4454 * C7524 + C44903 * C7526) *
                C4518 +
            (C4452 * C7607 + C4447 * C7757 + C4454 * C7608 + C44903 * C7758) *
                C44912) *
               C44851 * C44910 -
           ((C7174 + C7175) * C44912 + (C7176 + C7177) * C4518 +
            (C5287 + C5286) * C4449 + (C5285 + C5284) * C4517) *
               C44851 * C3152) *
              C44908) *
         C44752) /
        (p * q * std::sqrt(p + q));
    d2eeyy[16] += (2 * std::pow(Pi, 2.5) *
                   ((((C4693 * C93 + C4696 + C4696 + C4449 * C333 +
                       C4694 * C642 + C4697 + C4697 + C44912 * C904) *
                          C4447 +
                      (C4720 + C4721) * C44903) *
                         C44851 * C3152 -
                     ((C6048 + C6049) * C44903 +
                      (C4694 * C2654 + C6040 + C6040 + C44912 * C2881 +
                       C4693 * C1226 + C6041 + C6041 + C4449 * C1488) *
                          C4447) *
                         C44851 * C44910) *
                        C636 +
                    (((C4693 * C2654 + C7840 + C7840 + C4449 * C2881 +
                       C4694 * C7523 + C7841 + C7841 + C44912 * C7837) *
                          C4447 +
                      (C4693 * C2655 + C7842 + C7842 + C4449 * C2882 +
                       C4694 * C7524 + C7843 + C7843 + C44912 * C7838) *
                          C44903) *
                         C44851 * C44910 -
                     ((C5372 + C5373) * C44903 +
                      (C4694 * C2252 + C5364 + C5364 + C44912 * C2431 +
                       C4693 * C642 + C5365 + C5365 + C4449 * C904) *
                          C4447) *
                         C44851 * C3152) *
                        C44908) *
                   C44752) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[16] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C222 * C93 + C44851 * C223) * C4517 +
             (C222 * C156 + C44851 * C396) * C4449 + C5196 * C4518 +
             C5447 * C44912) *
                C4447 +
            (C4774 + C4775 + C4776 + C4777) * C44903) *
               C3152 -
           ((C6122 + C6118 + C6119 + C6120) * C44903 +
            (C7914 * C44912 + C7689 * C4518 +
             (C222 * C1294 + C44851 * C1556) * C4449 +
             (C222 * C1226 + C44851 * C1364) * C4517) *
                C4447) *
               C44910) *
              C636 +
          (((C7689 * C4517 + C7914 * C4449 +
             (C222 * C7523 + C44851 * C7677) * C4518 +
             (C222 * C7607 + C44851 * C7909) * C44912) *
                C4447 +
            (C5901 * C4517 + C6121 * C4449 +
             (C222 * C7524 + C44851 * C7678) * C4518 +
             (C222 * C7608 + C44851 * C7910) * C44912) *
                C44903) *
               C44910 -
           ((C5449 + C5444 + C5445 + C5446) * C44903 +
            (C7288 * C44912 + C7111 * C4518 + C5447 * C4449 + C5196 * C4517) *
                C4447) *
               C3152) *
              C44908) *
         C44752) /
        (p * q * std::sqrt(p + q));
    d2eezx[16] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C4452 * C93 + C4447 * C98 + C4454 * C94 + C44903 * C99) * C222 +
             (C4452 * C223 + C4447 * C455 + C4454 * C224 + C44903 * C456) *
                 C44851) *
                C4449 +
            ((C5284 + C5285) * C222 + (C5524 + C5525) * C44851) * C44912) *
               C3152 -
           (((C7987 + C7988) * C44851 + (C7770 + C7771) * C222) * C44912 +
            ((C4454 * C1363 + C44903 * C1619 + C4452 * C1364 + C4447 * C1620) *
                 C44851 +
             (C4454 * C1225 + C44903 * C1229 + C4452 * C1226 + C4447 * C1230) *
                 C222) *
                C4449) *
               C44910) *
              C636 +
          ((((C7771 + C7770) * C222 + (C7988 + C7987) * C44851) * C4449 +
            ((C4452 * C7523 + C4447 * C7525 + C4454 * C7524 + C44903 * C7526) *
                 C222 +
             (C4452 * C7677 + C4447 * C7980 + C4454 * C7678 + C44903 * C7981) *
                 C44851) *
                C44912) *
               C44910 -
           (((C7345 + C7346) * C44851 + (C7176 + C7177) * C222) * C44912 +
            ((C5525 + C5524) * C44851 + (C5285 + C5284) * C222) * C4449) *
               C3152) *
              C44908) *
         C44752) /
        (p * q * std::sqrt(p + q));
    d2eezy[16] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C4517 * C93 + C4449 * C156 + C4518 * C642 + C44912 * C710) *
                 C222 +
             (C4517 * C223 + C4449 * C498 + C4518 * C780 + C44912 * C1090) *
                 C44851) *
                C4447 +
            ((C4536 + C4537) * C222 + (C4890 + C4891) * C44851) * C44903) *
               C3152 -
           (((C6259 + C6260) * C44851 + (C5828 + C5829) * C222) * C44903 +
            ((C4518 * C2772 + C44912 * C3043 + C4517 * C1364 + C4449 * C1674) *
                 C44851 +
             (C4518 * C2654 + C44912 * C2716 + C4517 * C1226 + C4449 * C1294) *
                 C222) *
                C4447) *
               C44910) *
              C636 +
          ((((C4517 * C2654 + C4449 * C2716 + C4518 * C7523 + C44912 * C7607) *
                 C222 +
             (C4517 * C2772 + C4449 * C3043 + C4518 * C7677 + C44912 * C8054) *
                 C44851) *
                C4447 +
            ((C4517 * C2655 + C4449 * C2717 + C4518 * C7524 + C44912 * C7608) *
                 C222 +
             (C4517 * C2773 + C4449 * C3044 + C4518 * C7678 + C44912 * C8055) *
                 C44851) *
                C44903) *
               C44910 -
           (((C5598 + C5599) * C44851 + (C5114 + C5115) * C222) * C44903 +
            ((C4518 * C2346 + C44912 * C2557 + C4517 * C780 + C4449 * C1090) *
                 C44851 +
             (C4518 * C2252 + C44912 * C2302 + C4517 * C642 + C4449 * C710) *
                 C222) *
                C4447) *
               C3152) *
              C44908) *
         C44752) /
        (p * q * std::sqrt(p + q));
    d2eezz[16] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C557 * C93 + C564 + C564 + C44851 * C558) * C4449 +
             C5675 * C44912) *
                C4447 +
            (C4944 + C4945) * C44903) *
               C3152 -
           ((C6333 + C6329) * C44903 +
            (C8131 * C44912 +
             (C557 * C1226 + C1747 + C1747 + C44851 * C1738) * C4449) *
                C4447) *
               C44910) *
              C636 +
          (((C8131 * C4449 +
             (C557 * C7523 + C8127 + C8127 + C44851 * C8122) * C44912) *
                C4447 +
            (C6332 * C4449 +
             (C557 * C7524 + C8128 + C8128 + C44851 * C8123) * C44912) *
                C44903) *
               C44910 -
           ((C5677 + C5670) * C44903 +
            (C7457 * C44912 + C5675 * C4449) * C4447) *
               C3152) *
              C44908) *
         C44752) /
        (p * q * std::sqrt(p + q));
    d2eexx[17] += (2 * std::pow(Pi, 2.5) *
                   (((C4451 * C93 + C4456 + C4456 + C4447 * C103 + C4453 * C94 +
                      C4457 + C4457 + C44903 * C104) *
                         C44851 * C4449 +
                     (C5034 + C5035) * C44851 * C44912) *
                        C4042 -
                    ((C7540 + C7541) * C44851 * C44912 +
                     (C4453 * C1225 + C5746 + C5746 + C44903 * C1233 +
                      C4451 * C1226 + C5747 + C5747 + C4447 * C1234) *
                         C44851 * C4449) *
                        C4043 +
                    ((C4451 * C4045 + C9376 + C9376 + C4447 * C4051 +
                      C4453 * C4046 + C9377 + C9377 + C44903 * C4052) *
                         C44851 * C4449 +
                     (C4451 * C9369 + C9378 + C9378 + C4447 * C9373 +
                      C4453 * C9370 + C9379 + C9379 + C44903 * C9374) *
                         C44851 * C44912) *
                        C4044) *
                   C44786 * C44752) /
                  (p * q * std::sqrt(p + q));
    d2eexy[17] +=
        (2 * std::pow(Pi, 2.5) *
         (((C4517 * C93 + C4449 * C156 + C4518 * C642 + C44912 * C710) * C4452 +
           (C4517 * C98 + C4449 * C161 + C4518 * C646 + C44912 * C714) * C4447 +
           (C4536 + C4537) * C4454 + (C4538 + C4539) * C44903) *
              C44851 * C4042 -
          ((C5826 + C5827) * C44903 + (C5828 + C5829) * C4454 +
           (C4518 * C2657 + C44912 * C2719 + C4517 * C1230 + C4449 * C1298) *
               C4447 +
           (C4518 * C2654 + C44912 * C2716 + C4517 * C1226 + C4449 * C1294) *
               C4452) *
              C44851 * C4043 +
          ((C4517 * C4045 + C4449 * C4095 + C4518 * C9369 + C44912 * C9429) *
               C4452 +
           (C4517 * C4048 + C4449 * C4098 + C4518 * C9371 + C44912 * C9431) *
               C4447 +
           (C4517 * C4046 + C4449 * C4096 + C4518 * C9370 + C44912 * C9430) *
               C4454 +
           (C4517 * C4049 + C4449 * C4099 + C4518 * C9372 + C44912 * C9432) *
               C44903) *
              C44851 * C4044) *
         C44786 * C44752) /
        (p * q * std::sqrt(p + q));
    d2eexz[17] += (2 * std::pow(Pi, 2.5) *
                   ((((C222 * C93 + C44851 * C223) * C4452 +
                      (C222 * C98 + C44851 * C228) * C4447 + C246 * C4454 +
                      C247 * C44903) *
                         C4449 +
                     (C5200 + C5201 + C5186 + C5187) * C44912) *
                        C4042 -
                    ((C7682 + C7683 + C7690 + C7691) * C44912 +
                     (C1381 * C44903 + C1382 * C4454 +
                      (C222 * C1230 + C44851 * C1368) * C4447 +
                      (C222 * C1226 + C44851 * C1364) * C4452) *
                         C4449) *
                        C4043 +
                    (((C222 * C4045 + C44851 * C4139) * C4452 +
                      (C222 * C4048 + C44851 * C4142) * C4447 +
                      (C222 * C4046 + C44851 * C4140) * C4454 +
                      (C222 * C4049 + C44851 * C4143) * C44903) *
                         C4449 +
                     ((C222 * C9369 + C44851 * C9483) * C4452 +
                      (C222 * C9371 + C44851 * C9485) * C4447 +
                      (C222 * C9370 + C44851 * C9484) * C4454 +
                      (C222 * C9372 + C44851 * C9486) * C44903) *
                         C44912) *
                        C4044) *
                   C44786 * C44752) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[17] +=
        (2 * std::pow(Pi, 2.5) *
         (((C4452 * C93 + C4447 * C98 + C4454 * C94 + C44903 * C99) * C4517 +
           (C4452 * C156 + C4447 * C289 + C4454 * C157 + C44903 * C290) *
               C4449 +
           (C5284 + C5285) * C4518 + (C5286 + C5287) * C44912) *
              C44851 * C4042 -
          ((C7768 + C7769) * C44912 + (C7770 + C7771) * C4518 +
           (C4454 * C1293 + C44903 * C1433 + C4452 * C1294 + C4447 * C1434) *
               C4449 +
           (C4454 * C1225 + C44903 * C1229 + C4452 * C1226 + C4447 * C1230) *
               C4517) *
              C44851 * C4043 +
          ((C4452 * C4045 + C4447 * C4048 + C4454 * C4046 + C44903 * C4049) *
               C4517 +
           (C4452 * C4095 + C4447 * C4183 + C4454 * C4096 + C44903 * C4184) *
               C4449 +
           (C4452 * C9369 + C4447 * C9371 + C4454 * C9370 + C44903 * C9372) *
               C4518 +
           (C4452 * C9429 + C4447 * C9537 + C4454 * C9430 + C44903 * C9538) *
               C44912) *
              C44851 * C4044) *
         C44786 * C44752) /
        (p * q * std::sqrt(p + q));
    d2eeyy[17] += (2 * std::pow(Pi, 2.5) *
                   (((C4693 * C93 + C4696 + C4696 + C4449 * C333 +
                      C4694 * C642 + C4697 + C4697 + C44912 * C904) *
                         C4447 +
                     (C4720 + C4721) * C44903) *
                        C44851 * C4042 -
                    ((C6048 + C6049) * C44903 +
                     (C4694 * C2654 + C6040 + C6040 + C44912 * C2881 +
                      C4693 * C1226 + C6041 + C6041 + C4449 * C1488) *
                         C4447) *
                        C44851 * C4043 +
                    ((C4693 * C4045 + C9592 + C9592 + C4449 * C4224 +
                      C4694 * C9369 + C9593 + C9593 + C44912 * C9589) *
                         C4447 +
                     (C4693 * C4046 + C9594 + C9594 + C4449 * C4225 +
                      C4694 * C9370 + C9595 + C9595 + C44912 * C9590) *
                         C44903) *
                        C44851 * C4044) *
                   C44786 * C44752) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[17] += (2 * std::pow(Pi, 2.5) *
                   ((((C222 * C93 + C44851 * C223) * C4517 +
                      (C222 * C156 + C44851 * C396) * C4449 + C5196 * C4518 +
                      C5447 * C44912) *
                         C4447 +
                     (C4774 + C4775 + C4776 + C4777) * C44903) *
                        C4042 -
                    ((C6122 + C6118 + C6119 + C6120) * C44903 +
                     (C7914 * C44912 + C7689 * C4518 +
                      (C222 * C1294 + C44851 * C1556) * C4449 +
                      (C222 * C1226 + C44851 * C1364) * C4517) *
                         C4447) *
                        C4043 +
                    (((C222 * C4045 + C44851 * C4139) * C4517 +
                      (C222 * C4095 + C44851 * C4268) * C4449 +
                      (C222 * C9369 + C44851 * C9483) * C4518 +
                      (C222 * C9429 + C44851 * C9645) * C44912) *
                         C4447 +
                     ((C222 * C4046 + C44851 * C4140) * C4517 +
                      (C222 * C4096 + C44851 * C4269) * C4449 +
                      (C222 * C9370 + C44851 * C9484) * C4518 +
                      (C222 * C9430 + C44851 * C9646) * C44912) *
                         C44903) *
                        C4044) *
                   C44786 * C44752) /
                  (p * q * std::sqrt(p + q));
    d2eezx[17] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4452 * C93 + C4447 * C98 + C4454 * C94 + C44903 * C99) * C222 +
            (C4452 * C223 + C4447 * C455 + C4454 * C224 + C44903 * C456) *
                C44851) *
               C4449 +
           ((C5284 + C5285) * C222 + (C5524 + C5525) * C44851) * C44912) *
              C4042 -
          (((C7987 + C7988) * C44851 + (C7770 + C7771) * C222) * C44912 +
           ((C4454 * C1363 + C44903 * C1619 + C4452 * C1364 + C4447 * C1620) *
                C44851 +
            (C4454 * C1225 + C44903 * C1229 + C4452 * C1226 + C4447 * C1230) *
                C222) *
               C4449) *
              C4043 +
          (((C4452 * C4045 + C4447 * C4048 + C4454 * C4046 + C44903 * C4049) *
                C222 +
            (C4452 * C4139 + C4447 * C4309 + C4454 * C4140 + C44903 * C4310) *
                C44851) *
               C4449 +
           ((C4452 * C9369 + C4447 * C9371 + C4454 * C9370 + C44903 * C9372) *
                C222 +
            (C4452 * C9483 + C4447 * C9697 + C4454 * C9484 + C44903 * C9698) *
                C44851) *
               C44912) *
              C4044) *
         C44786 * C44752) /
        (p * q * std::sqrt(p + q));
    d2eezy[17] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4517 * C93 + C4449 * C156 + C4518 * C642 + C44912 * C710) * C222 +
            (C4517 * C223 + C4449 * C498 + C4518 * C780 + C44912 * C1090) *
                C44851) *
               C4447 +
           ((C4536 + C4537) * C222 + (C4890 + C4891) * C44851) * C44903) *
              C4042 -
          (((C6259 + C6260) * C44851 + (C5828 + C5829) * C222) * C44903 +
           ((C4518 * C2772 + C44912 * C3043 + C4517 * C1364 + C4449 * C1674) *
                C44851 +
            (C4518 * C2654 + C44912 * C2716 + C4517 * C1226 + C4449 * C1294) *
                C222) *
               C4447) *
              C4043 +
          (((C4517 * C4045 + C4449 * C4095 + C4518 * C9369 + C44912 * C9429) *
                C222 +
            (C4517 * C4139 + C4449 * C4350 + C4518 * C9483 + C44912 * C9749) *
                C44851) *
               C4447 +
           ((C4517 * C4046 + C4449 * C4096 + C4518 * C9370 + C44912 * C9430) *
                C222 +
            (C4517 * C4140 + C4449 * C4351 + C4518 * C9484 + C44912 * C9750) *
                C44851) *
               C44903) *
              C4044) *
         C44786 * C44752) /
        (p * q * std::sqrt(p + q));
    d2eezz[17] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C557 * C93 + C564 + C564 + C44851 * C558) * C4449 +
            C5675 * C44912) *
               C4447 +
           (C4944 + C4945) * C44903) *
              C4042 -
          ((C6333 + C6329) * C44903 +
           (C8131 * C44912 +
            (C557 * C1226 + C1747 + C1747 + C44851 * C1738) * C4449) *
               C4447) *
              C4043 +
          (((C557 * C4045 + C4395 + C4395 + C44851 * C4391) * C4449 +
            (C557 * C9369 + C9804 + C9804 + C44851 * C9801) * C44912) *
               C4447 +
           ((C557 * C4046 + C4396 + C4396 + C44851 * C4392) * C4449 +
            (C557 * C9370 + C9805 + C9805 + C44851 * C9802) * C44912) *
               C44903) *
              C4044) *
         C44786 * C44752) /
        (p * q * std::sqrt(p + q));
    d2eexx[18] += (2 * std::pow(Pi, 2.5) *
                   (((C4451 * C93 + C4456 + C4456 + C4447 * C103 + C4453 * C94 +
                      C4457 + C4457 + C44903 * C104) *
                         C9855 +
                     (C4451 * C1226 + C5747 + C5747 + C4447 * C1234 +
                      C4453 * C1225 + C5746 + C5746 + C44903 * C1233) *
                         C44914) *
                        C44836 * C44803 * C44786 * C84 -
                    ((C4453 * C1224 + C5749 + C5749 + C44903 * C1232 +
                      C4451 * C1225 + C5748 + C5748 + C4447 * C1233) *
                         C44914 +
                     (C4453 * C95 + C4462 + C4462 + C44903 * C105 +
                      C4451 * C94 + C4463 + C4463 + C4447 * C104) *
                         C9855) *
                        C44836 * C44803 * C44786 * C85 +
                    ((C4451 * C95 + C4464 + C4464 + C4447 * C105 + C4453 * C96 +
                      C4465 + C4465 + C44903 * C106) *
                         C9855 +
                     (C4451 * C1224 + C9858 + C9858 + C4447 * C1232 +
                      C4453 * C1227 + C9859 + C9859 + C44903 * C1235) *
                         C44914) *
                        C44836 * C44803 * C44786 * C86)) /
                  (p * q * std::sqrt(p + q));
    d2eexy[18] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C155 * C93 + C44836 * C156) * C4452 +
            (C155 * C98 + C44836 * C161) * C4447 + C179 * C4454 +
            C180 * C44903) *
               C9855 +
           ((C155 * C1226 + C44836 * C1294) * C4452 +
            (C155 * C1230 + C44836 * C1298) * C4447 + C1312 * C4454 +
            C1311 * C44903) *
               C44914) *
              C44803 * C44786 * C84 -
          ((C1309 * C44903 + C1310 * C4454 + C1311 * C4447 + C1312 * C4452) *
               C44914 +
           (C182 * C44903 + C181 * C4454 + C180 * C4447 + C179 * C4452) *
               C9855) *
              C44803 * C44786 * C85 +
          ((C181 * C4452 + C182 * C4447 + C184 * C4454 + C183 * C44903) *
               C9855 +
           (C1310 * C4452 + C1309 * C4447 +
            (C155 * C1227 + C44836 * C1295) * C4454 +
            (C155 * C1231 + C44836 * C1299) * C44903) *
               C44914) *
              C44803 * C44786 * C86)) /
        (p * q * std::sqrt(p + q));
    d2eexz[18] +=
        (2 * std::pow(Pi, 2.5) *
         (((C9959 * C93 + C9855 * C223 + C9960 * C1226 + C44914 * C1364) *
               C4452 +
           (C9959 * C98 + C9855 * C228 + C9960 * C1230 + C44914 * C1368) *
               C4447 +
           (C9978 + C9979) * C4454 + (C9980 + C9981) * C44903) *
              C44836 * C44803 * C44786 * C84 -
          ((C9982 + C9983) * C44903 + (C9984 + C9985) * C4454 +
           (C9981 + C9980) * C4447 + (C9979 + C9978) * C4452) *
              C44836 * C44803 * C44786 * C85 +
          ((C9985 + C9984) * C4452 + (C9983 + C9982) * C4447 +
           (C9959 * C96 + C9855 * C226 + C9960 * C1227 + C44914 * C1365) *
               C4454 +
           (C9959 * C101 + C9855 * C231 + C9960 * C1231 + C44914 * C1369) *
               C44903) *
              C44836 * C44803 * C44786 * C86)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[18] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4452 * C93 + C4447 * C98 + C4454 * C94 + C44903 * C99) * C155 +
            (C4452 * C156 + C4447 * C289 + C4454 * C157 + C44903 * C290) *
                C44836) *
               C9855 +
           ((C4452 * C1226 + C4447 * C1230 + C4454 * C1225 + C44903 * C1229) *
                C155 +
            (C4452 * C1294 + C4447 * C1434 + C4454 * C1293 + C44903 * C1433) *
                C44836) *
               C44914) *
              C44803 * C44786 * C84 -
          (((C4454 * C1292 + C44903 * C1432 + C4452 * C1293 + C4447 * C1433) *
                C44836 +
            (C4454 * C1224 + C44903 * C1228 + C4452 * C1225 + C4447 * C1229) *
                C155) *
               C44914 +
           ((C4454 * C158 + C44903 * C291 + C4452 * C157 + C4447 * C290) *
                C44836 +
            (C4454 * C95 + C44903 * C100 + C4452 * C94 + C4447 * C99) * C155) *
               C9855) *
              C44803 * C44786 * C85 +
          (((C4452 * C95 + C4447 * C100 + C4454 * C96 + C44903 * C101) * C155 +
            (C4452 * C158 + C4447 * C291 + C4454 * C159 + C44903 * C292) *
                C44836) *
               C9855 +
           ((C4452 * C1224 + C4447 * C1228 + C4454 * C1227 + C44903 * C1231) *
                C155 +
            (C4452 * C1292 + C4447 * C1432 + C4454 * C1295 + C44903 * C1435) *
                C44836) *
               C44914) *
              C44803 * C44786 * C86)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[18] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C332 * C93 + C339 + C339 + C44836 * C333) * C4447 +
            C356 * C44903) *
               C9855 +
           ((C332 * C1226 + C1497 + C1497 + C44836 * C1488) * C4447 +
            C1504 * C44903) *
               C44914) *
              C44803 * C44786 * C84 -
          ((C1503 * C44903 + C1504 * C4447) * C44914 +
           (C357 * C44903 + C356 * C4447) * C9855) *
              C44803 * C44786 * C85 +
          ((C357 * C4447 + C358 * C44903) * C9855 +
           (C1503 * C4447 +
            (C332 * C1227 + C1498 + C1498 + C44836 * C1489) * C44903) *
               C44914) *
              C44803 * C44786 * C86)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[18] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C9959 * C93 + C9855 * C223 + C9960 * C1226 + C44914 * C1364) *
                C155 +
            (C9959 * C156 + C9855 * C396 + C9960 * C1294 + C44914 * C1556) *
                C44836) *
               C4447 +
           ((C9978 + C9979) * C155 + (C10144 + C10145) * C44836) * C44903) *
              C44803 * C44786 * C84 -
          (((C10146 + C10147) * C44836 + (C9984 + C9985) * C155) * C44903 +
           ((C10145 + C10144) * C44836 + (C9979 + C9978) * C155) * C4447) *
              C44803 * C44786 * C85 +
          (((C9985 + C9984) * C155 + (C10147 + C10146) * C44836) * C4447 +
           ((C9959 * C96 + C9855 * C226 + C9960 * C1227 + C44914 * C1365) *
                C155 +
            (C9959 * C159 + C9855 * C399 + C9960 * C1295 + C44914 * C1557) *
                C44836) *
               C44903) *
              C44803 * C44786 * C86)) /
        (p * q * std::sqrt(p + q));
    d2eezx[18] +=
        (2 * std::pow(Pi, 2.5) *
         (((C4452 * C93 + C4447 * C98 + C4454 * C94 + C44903 * C99) * C9959 +
           (C4452 * C223 + C4447 * C455 + C4454 * C224 + C44903 * C456) *
               C9855 +
           (C4452 * C1226 + C4447 * C1230 + C4454 * C1225 + C44903 * C1229) *
               C9960 +
           (C4452 * C1364 + C4447 * C1620 + C4454 * C1363 + C44903 * C1619) *
               C44914) *
              C44836 * C44803 * C44786 * C84 -
          ((C4454 * C1362 + C44903 * C1618 + C4452 * C1363 + C4447 * C1619) *
               C44914 +
           (C4454 * C1224 + C44903 * C1228 + C4452 * C1225 + C4447 * C1229) *
               C9960 +
           (C4454 * C225 + C44903 * C457 + C4452 * C224 + C4447 * C456) *
               C9855 +
           (C4454 * C95 + C44903 * C100 + C4452 * C94 + C4447 * C99) * C9959) *
              C44836 * C44803 * C44786 * C85 +
          ((C4452 * C95 + C4447 * C100 + C4454 * C96 + C44903 * C101) * C9959 +
           (C4452 * C225 + C4447 * C457 + C4454 * C226 + C44903 * C458) *
               C9855 +
           (C4452 * C1224 + C4447 * C1228 + C4454 * C1227 + C44903 * C1231) *
               C9960 +
           (C4452 * C1362 + C4447 * C1618 + C4454 * C1365 + C44903 * C1621) *
               C44914) *
              C44836 * C44803 * C44786 * C86)) /
        (p * q * std::sqrt(p + q));
    d2eezy[18] += (2 * std::pow(Pi, 2.5) *
                   ((((C155 * C93 + C44836 * C156) * C9959 +
                      (C155 * C223 + C44836 * C498) * C9855 +
                      (C155 * C1226 + C44836 * C1294) * C9960 +
                      (C155 * C1364 + C44836 * C1674) * C44914) *
                         C4447 +
                     (C10248 + C10249 + C10250 + C10251) * C44903) *
                        C44803 * C44786 * C84 -
                    ((C10252 + C10253 + C10254 + C10255) * C44903 +
                     (C10251 + C10250 + C10249 + C10248) * C4447) *
                        C44803 * C44786 * C85 +
                    ((C10255 + C10254 + C10253 + C10252) * C4447 +
                     (C184 * C9959 + C515 * C9855 +
                      (C155 * C1227 + C44836 * C1295) * C9960 +
                      (C155 * C1365 + C44836 * C1675) * C44914) *
                         C44903) *
                        C44803 * C44786 * C86)) /
                  (p * q * std::sqrt(p + q));
    d2eezz[18] += (2 * std::pow(Pi, 2.5) *
                   (((C10305 * C93 + C10308 + C10308 + C9855 * C558 +
                      C10306 * C1226 + C10309 + C10309 + C44914 * C1738) *
                         C44836 * C4447 +
                     (C10332 + C10333) * C44836 * C44903) *
                        C44803 * C44786 * C84 -
                    ((C10334 + C10335) * C44836 * C44903 +
                     (C10333 + C10332) * C44836 * C4447) *
                        C44803 * C44786 * C85 +
                    ((C10335 + C10334) * C44836 * C4447 +
                     (C10305 * C96 + C10322 + C10322 + C9855 * C561 +
                      C10306 * C1227 + C10323 + C10323 + C44914 * C1739) *
                         C44836 * C44903) *
                        C44803 * C44786 * C86)) /
                  (p * q * std::sqrt(p + q));
    d2eexx[19] += (2 * std::pow(Pi, 2.5) *
                   ((((C4451 * C93 + C4456 + C4456 + C4447 * C103 +
                       C4453 * C94 + C4457 + C4457 + C44903 * C104) *
                          C9855 +
                      (C4451 * C1226 + C5747 + C5747 + C4447 * C1234 +
                       C4453 * C1225 + C5746 + C5746 + C44903 * C1233) *
                          C44914) *
                         C44836 * C44803 * C636 -
                     ((C7540 + C7541) * C44914 + (C5035 + C5034) * C9855) *
                         C44836 * C44803 * C44908) *
                        C638 +
                    (((C5036 + C5037) * C9855 +
                      (C4451 * C2655 + C5750 + C5750 + C4447 * C2661 +
                       C4453 * C2656 + C5751 + C5751 + C44903 * C2662) *
                          C44914) *
                         C44836 * C44803 * C44908 -
                     ((C4453 * C1224 + C5749 + C5749 + C44903 * C1232 +
                       C4451 * C1225 + C5748 + C5748 + C4447 * C1233) *
                          C44914 +
                      (C4453 * C95 + C4462 + C4462 + C44903 * C105 +
                       C4451 * C94 + C4463 + C4463 + C4447 * C104) *
                          C9855) *
                         C44836 * C44803 * C636) *
                        C44906)) /
                  (p * q * std::sqrt(p + q));
    d2eexy[19] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C155 * C93 + C44836 * C156) * C4452 +
             (C155 * C98 + C44836 * C161) * C4447 + C179 * C4454 +
             C180 * C44903) *
                C9855 +
            ((C155 * C1226 + C44836 * C1294) * C4452 +
             (C155 * C1230 + C44836 * C1298) * C4447 + C1312 * C4454 +
             C1311 * C44903) *
                C44914) *
               C44803 * C636 -
           ((C10472 * C44903 + C10473 * C4454 +
             (C155 * C2657 + C44836 * C2719) * C4447 +
             (C155 * C2654 + C44836 * C2716) * C4452) *
                C44914 +
            (C727 * C44903 + C728 * C4454 +
             (C155 * C646 + C44836 * C714) * C4447 +
             (C155 * C642 + C44836 * C710) * C4452) *
                C9855) *
               C44803 * C44908) *
              C638 +
          (((C728 * C4452 + C727 * C4447 + C726 * C4454 + C725 * C44903) *
                C9855 +
            (C10473 * C4452 + C10472 * C4447 +
             (C155 * C2656 + C44836 * C2718) * C4454 +
             (C155 * C2659 + C44836 * C2721) * C44903) *
                C44914) *
               C44803 * C44908 -
           ((C1309 * C44903 + C1310 * C4454 + C1311 * C4447 + C1312 * C4452) *
                C44914 +
            (C182 * C44903 + C181 * C4454 + C180 * C4447 + C179 * C4452) *
                C9855) *
               C44803 * C636) *
              C44906)) /
        (p * q * std::sqrt(p + q));
    d2eexz[19] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C9959 * C93 + C9855 * C223 + C9960 * C1226 + C44914 * C1364) *
                C4452 +
            (C9959 * C98 + C9855 * C228 + C9960 * C1230 + C44914 * C1368) *
                C4447 +
            (C9978 + C9979) * C4454 + (C9980 + C9981) * C44903) *
               C44836 * C44803 * C636 -
           ((C10548 + C10549) * C44903 + (C10550 + C10551) * C4454 +
            (C9960 * C2657 + C44914 * C2775 + C9959 * C646 + C9855 * C784) *
                C4447 +
            (C9960 * C2654 + C44914 * C2772 + C9959 * C642 + C9855 * C780) *
                C4452) *
               C44836 * C44803 * C44908) *
              C638 +
          (((C10551 + C10550) * C4452 + (C10549 + C10548) * C4447 +
            (C9959 * C640 + C9855 * C778 + C9960 * C2656 + C44914 * C2774) *
                C4454 +
            (C9959 * C644 + C9855 * C782 + C9960 * C2659 + C44914 * C2777) *
                C44903) *
               C44836 * C44803 * C44908 -
           ((C9982 + C9983) * C44903 + (C9984 + C9985) * C4454 +
            (C9981 + C9980) * C4447 + (C9979 + C9978) * C4452) *
               C44836 * C44803 * C636) *
              C44906)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[19] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C4452 * C93 + C4447 * C98 + C4454 * C94 + C44903 * C99) * C155 +
             (C4452 * C156 + C4447 * C289 + C4454 * C157 + C44903 * C290) *
                 C44836) *
                C9855 +
            ((C4452 * C1226 + C4447 * C1230 + C4454 * C1225 + C44903 * C1229) *
                 C155 +
             (C4452 * C1294 + C4447 * C1434 + C4454 * C1293 + C44903 * C1433) *
                 C44836) *
                C44914) *
               C44803 * C636 -
           (((C7768 + C7769) * C44836 + (C7770 + C7771) * C155) * C44914 +
            ((C5287 + C5286) * C44836 + (C5285 + C5284) * C155) * C9855) *
               C44803 * C44908) *
              C638 +
          ((((C5288 + C5289) * C155 + (C5290 + C5291) * C44836) * C9855 +
            ((C4452 * C2655 + C4447 * C2658 + C4454 * C2656 + C44903 * C2659) *
                 C155 +
             (C4452 * C2717 + C4447 * C2829 + C4454 * C2718 + C44903 * C2830) *
                 C44836) *
                C44914) *
               C44803 * C44908 -
           (((C4454 * C1292 + C44903 * C1432 + C4452 * C1293 + C4447 * C1433) *
                 C44836 +
             (C4454 * C1224 + C44903 * C1228 + C4452 * C1225 + C4447 * C1229) *
                 C155) *
                C44914 +
            ((C4454 * C158 + C44903 * C291 + C4452 * C157 + C4447 * C290) *
                 C44836 +
             (C4454 * C95 + C44903 * C100 + C4452 * C94 + C4447 * C99) * C155) *
                C9855) *
               C44803 * C636) *
              C44906)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[19] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C332 * C93 + C339 + C339 + C44836 * C333) * C4447 +
             C356 * C44903) *
                C9855 +
            ((C332 * C1226 + C1497 + C1497 + C44836 * C1488) * C4447 +
             C1504 * C44903) *
                C44914) *
               C44803 * C636 -
           ((C10688 * C44903 +
             (C332 * C2654 + C2885 + C2885 + C44836 * C2881) * C4447) *
                C44914 +
            (C920 * C44903 +
             (C332 * C642 + C913 + C913 + C44836 * C904) * C4447) *
                C9855) *
               C44803 * C44908) *
              C638 +
          (((C920 * C4447 + C919 * C44903) * C9855 +
            (C10688 * C4447 +
             (C332 * C2656 + C2887 + C2887 + C44836 * C2883) * C44903) *
                C44914) *
               C44803 * C44908 -
           ((C1503 * C44903 + C1504 * C4447) * C44914 +
            (C357 * C44903 + C356 * C4447) * C9855) *
               C44803 * C636) *
              C44906)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[19] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C9959 * C93 + C9855 * C223 + C9960 * C1226 + C44914 * C1364) *
                 C155 +
             (C9959 * C156 + C9855 * C396 + C9960 * C1294 + C44914 * C1556) *
                 C44836) *
                C4447 +
            ((C9978 + C9979) * C155 + (C10144 + C10145) * C44836) * C44903) *
               C44803 * C636 -
           (((C10759 + C10760) * C44836 + (C10550 + C10551) * C155) * C44903 +
            ((C9960 * C2716 + C44914 * C2937 + C9959 * C710 + C9855 * C972) *
                 C44836 +
             (C9960 * C2654 + C44914 * C2772 + C9959 * C642 + C9855 * C780) *
                 C155) *
                C4447) *
               C44803 * C44908) *
              C638 +
          ((((C10551 + C10550) * C155 + (C10760 + C10759) * C44836) * C4447 +
            ((C9959 * C640 + C9855 * C778 + C9960 * C2656 + C44914 * C2774) *
                 C155 +
             (C9959 * C708 + C9855 * C970 + C9960 * C2718 + C44914 * C2939) *
                 C44836) *
                C44903) *
               C44803 * C44908 -
           (((C10146 + C10147) * C44836 + (C9984 + C9985) * C155) * C44903 +
            ((C10145 + C10144) * C44836 + (C9979 + C9978) * C155) * C4447) *
               C44803 * C636) *
              C44906)) /
        (p * q * std::sqrt(p + q));
    d2eezx[19] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4452 * C93 + C4447 * C98 + C4454 * C94 + C44903 * C99) * C9959 +
            (C4452 * C223 + C4447 * C455 + C4454 * C224 + C44903 * C456) *
                C9855 +
            (C4452 * C1226 + C4447 * C1230 + C4454 * C1225 + C44903 * C1229) *
                C9960 +
            (C4452 * C1364 + C4447 * C1620 + C4454 * C1363 + C44903 * C1619) *
                C44914) *
               C44836 * C44803 * C636 -
           ((C7987 + C7988) * C44914 + (C7770 + C7771) * C9960 +
            (C5525 + C5524) * C9855 + (C5285 + C5284) * C9959) *
               C44836 * C44803 * C44908) *
              C638 +
          (((C5288 + C5289) * C9959 + (C5526 + C5527) * C9855 +
            (C4452 * C2655 + C4447 * C2658 + C4454 * C2656 + C44903 * C2659) *
                C9960 +
            (C4452 * C2773 + C4447 * C2991 + C4454 * C2774 + C44903 * C2992) *
                C44914) *
               C44836 * C44803 * C44908 -
           ((C4454 * C1362 + C44903 * C1618 + C4452 * C1363 + C4447 * C1619) *
                C44914 +
            (C4454 * C1224 + C44903 * C1228 + C4452 * C1225 + C4447 * C1229) *
                C9960 +
            (C4454 * C225 + C44903 * C457 + C4452 * C224 + C4447 * C456) *
                C9855 +
            (C4454 * C95 + C44903 * C100 + C4452 * C94 + C4447 * C99) * C9959) *
               C44836 * C44803 * C636) *
              C44906)) /
        (p * q * std::sqrt(p + q));
    d2eezy[19] += (2 * std::pow(Pi, 2.5) *
                   (((((C155 * C93 + C44836 * C156) * C9959 +
                       (C155 * C223 + C44836 * C498) * C9855 +
                       (C155 * C1226 + C44836 * C1294) * C9960 +
                       (C155 * C1364 + C44836 * C1674) * C44914) *
                          C4447 +
                      (C10248 + C10249 + C10250 + C10251) * C44903) *
                         C44803 * C636 -
                     ((C10899 + C10895 + C10896 + C10897) * C44903 +
                      ((C155 * C2772 + C44836 * C3043) * C44914 +
                       (C155 * C2654 + C44836 * C2716) * C9960 +
                       (C155 * C780 + C44836 * C1090) * C9855 +
                       (C155 * C642 + C44836 * C710) * C9959) *
                          C4447) *
                         C44803 * C44908) *
                        C638 +
                    (((C10897 + C10896 + C10895 + C10899) * C4447 +
                      (C726 * C9959 + C1099 * C9855 +
                       (C155 * C2656 + C44836 * C2718) * C9960 +
                       (C155 * C2774 + C44836 * C3045) * C44914) *
                          C44903) *
                         C44803 * C44908 -
                     ((C10252 + C10253 + C10254 + C10255) * C44903 +
                      (C10251 + C10250 + C10249 + C10248) * C4447) *
                         C44803 * C636) *
                        C44906)) /
                  (p * q * std::sqrt(p + q));
    d2eezz[19] += (2 * std::pow(Pi, 2.5) *
                   ((((C10305 * C93 + C10308 + C10308 + C9855 * C558 +
                       C10306 * C1226 + C10309 + C10309 + C44914 * C1738) *
                          C44836 * C4447 +
                      (C10332 + C10333) * C44836 * C44903) *
                         C44803 * C636 -
                     ((C10980 + C10981) * C44836 * C44903 +
                      (C10306 * C2654 + C10972 + C10972 + C44914 * C3096 +
                       C10305 * C642 + C10973 + C10973 + C9855 * C1154) *
                          C44836 * C4447) *
                         C44803 * C44908) *
                        C638 +
                    (((C10981 + C10980) * C44836 * C4447 +
                      (C10305 * C640 + C10974 + C10974 + C9855 * C1152 +
                       C10306 * C2656 + C10975 + C10975 + C44914 * C3098) *
                          C44836 * C44903) *
                         C44803 * C44908 -
                     ((C10334 + C10335) * C44836 * C44903 +
                      (C10333 + C10332) * C44836 * C4447) *
                         C44803 * C636) *
                        C44906)) /
                  (p * q * std::sqrt(p + q));
    d2eexx[20] += (2 * std::pow(Pi, 2.5) *
                   ((((C4451 * C93 + C4456 + C4456 + C4447 * C103 +
                       C4453 * C94 + C4457 + C4457 + C44903 * C104) *
                          C9855 +
                      (C11066 + C11067) * C44914) *
                         C44836 * C1222 -
                     ((C4453 * C4046 + C9377 + C9377 + C44903 * C4052 +
                       C4451 * C4045 + C9376 + C9376 + C4447 * C4051) *
                          C44914 +
                      (C11067 + C11066) * C9855) *
                         C44836 * C44910) *
                        C44786 * C638 +
                    (((C11068 + C11069) * C9855 +
                      (C4451 * C4046 + C11056 + C11056 + C4447 * C4052 +
                       C4453 * C4047 + C11057 + C11057 + C44903 * C4053) *
                          C44914) *
                         C44836 * C44910 -
                     ((C11069 + C11068) * C44914 +
                      (C4453 * C95 + C4462 + C4462 + C44903 * C105 +
                       C4451 * C94 + C4463 + C4463 + C4447 * C104) *
                          C9855) *
                         C44836 * C1222) *
                        C44786 * C44906)) /
                  (p * q * std::sqrt(p + q));
    d2eexy[20] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C155 * C93 + C44836 * C156) * C4452 +
             (C155 * C98 + C44836 * C161) * C4447 + C179 * C4454 +
             C180 * C44903) *
                C9855 +
            (C11154 + C11155 + C11140 + C11141) * C44914) *
               C1222 -
           ((C11152 * C44903 + C11153 * C4454 +
             (C155 * C4048 + C44836 * C4098) * C4447 +
             (C155 * C4045 + C44836 * C4095) * C4452) *
                C44914 +
            (C11141 + C11140 + C11155 + C11154) * C9855) *
               C44910) *
              C44786 * C638 +
          (((C11146 + C11147 + C11148 + C11149) * C9855 +
            (C11153 * C4452 + C11152 * C4447 +
             (C155 * C4047 + C44836 * C4097) * C4454 +
             (C155 * C4050 + C44836 * C4100) * C44903) *
                C44914) *
               C44910 -
           ((C11149 + C11148 + C11147 + C11146) * C44914 +
            (C182 * C44903 + C181 * C4454 + C180 * C4447 + C179 * C4452) *
                C9855) *
               C1222) *
              C44786 * C44906)) /
        (p * q * std::sqrt(p + q));
    d2eexz[20] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C9959 * C93 + C9855 * C223 + C9960 * C1226 + C44914 * C1364) *
                C4452 +
            (C9959 * C98 + C9855 * C228 + C9960 * C1230 + C44914 * C1368) *
                C4447 +
            (C9978 + C9979) * C4454 + (C9980 + C9981) * C44903) *
               C44836 * C1222 -
           ((C11230 + C11231) * C44903 + (C11232 + C11233) * C4454 +
            (C9960 * C4048 + C44914 * C4142 + C9959 * C1230 + C9855 * C1368) *
                C4447 +
            (C9960 * C4045 + C44914 * C4139 + C9959 * C1226 + C9855 * C1364) *
                C4452) *
               C44836 * C44910) *
              C44786 * C638 +
          (((C11233 + C11232) * C4452 + (C11231 + C11230) * C4447 +
            (C9959 * C1224 + C9855 * C1362 + C9960 * C4047 + C44914 * C4141) *
                C4454 +
            (C9959 * C1228 + C9855 * C1366 + C9960 * C4050 + C44914 * C4144) *
                C44903) *
               C44836 * C44910 -
           ((C9982 + C9983) * C44903 + (C9984 + C9985) * C4454 +
            (C9981 + C9980) * C4447 + (C9979 + C9978) * C4452) *
               C44836 * C1222) *
              C44786 * C44906)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[20] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C4452 * C93 + C4447 * C98 + C4454 * C94 + C44903 * C99) * C155 +
             (C4452 * C156 + C4447 * C289 + C4454 * C157 + C44903 * C290) *
                 C44836) *
                C9855 +
            ((C11316 + C11317) * C155 + (C11318 + C11319) * C44836) * C44914) *
               C1222 -
           (((C4454 * C4096 + C44903 * C4184 + C4452 * C4095 + C4447 * C4183) *
                 C44836 +
             (C4454 * C4046 + C44903 * C4049 + C4452 * C4045 + C4447 * C4048) *
                 C155) *
                C44914 +
            ((C11319 + C11318) * C44836 + (C11317 + C11316) * C155) * C9855) *
               C44910) *
              C44786 * C638 +
          ((((C11320 + C11321) * C155 + (C11322 + C11323) * C44836) * C9855 +
            ((C4452 * C4046 + C4447 * C4049 + C4454 * C4047 + C44903 * C4050) *
                 C155 +
             (C4452 * C4096 + C4447 * C4184 + C4454 * C4097 + C44903 * C4185) *
                 C44836) *
                C44914) *
               C44910 -
           (((C11323 + C11322) * C44836 + (C11321 + C11320) * C155) * C44914 +
            ((C4454 * C158 + C44903 * C291 + C4452 * C157 + C4447 * C290) *
                 C44836 +
             (C4454 * C95 + C44903 * C100 + C4452 * C94 + C4447 * C99) * C155) *
                C9855) *
               C1222) *
              C44786 * C44906)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[20] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C332 * C93 + C339 + C339 + C44836 * C333) * C4447 +
             C356 * C44903) *
                C9855 +
            (C11403 + C11392) * C44914) *
               C1222 -
           ((C11402 * C44903 +
             (C332 * C4045 + C4228 + C4228 + C44836 * C4224) * C4447) *
                C44914 +
            (C11392 + C11403) * C9855) *
               C44910) *
              C44786 * C638 +
          (((C11395 + C11396) * C9855 +
            (C11402 * C4447 +
             (C332 * C4047 + C4230 + C4230 + C44836 * C4226) * C44903) *
                C44914) *
               C44910 -
           ((C11396 + C11395) * C44914 +
            (C357 * C44903 + C356 * C4447) * C9855) *
               C1222) *
              C44786 * C44906)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[20] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C9959 * C93 + C9855 * C223 + C9960 * C1226 + C44914 * C1364) *
                 C155 +
             (C9959 * C156 + C9855 * C396 + C9960 * C1294 + C44914 * C1556) *
                 C44836) *
                C4447 +
            ((C9978 + C9979) * C155 + (C10144 + C10145) * C44836) * C44903) *
               C1222 -
           (((C11474 + C11475) * C44836 + (C11232 + C11233) * C155) * C44903 +
            ((C9960 * C4095 + C44914 * C4268 + C9959 * C1294 + C9855 * C1556) *
                 C44836 +
             (C9960 * C4045 + C44914 * C4139 + C9959 * C1226 + C9855 * C1364) *
                 C155) *
                C4447) *
               C44910) *
              C44786 * C638 +
          ((((C11233 + C11232) * C155 + (C11475 + C11474) * C44836) * C4447 +
            ((C9959 * C1224 + C9855 * C1362 + C9960 * C4047 + C44914 * C4141) *
                 C155 +
             (C9959 * C1292 + C9855 * C1554 + C9960 * C4097 + C44914 * C4270) *
                 C44836) *
                C44903) *
               C44910 -
           (((C10146 + C10147) * C44836 + (C9984 + C9985) * C155) * C44903 +
            ((C10145 + C10144) * C44836 + (C9979 + C9978) * C155) * C4447) *
               C1222) *
              C44786 * C44906)) /
        (p * q * std::sqrt(p + q));
    d2eezx[20] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4452 * C93 + C4447 * C98 + C4454 * C94 + C44903 * C99) * C9959 +
            (C4452 * C223 + C4447 * C455 + C4454 * C224 + C44903 * C456) *
                C9855 +
            (C11316 + C11317) * C9960 + (C11550 + C11551) * C44914) *
               C44836 * C1222 -
           ((C4454 * C4140 + C44903 * C4310 + C4452 * C4139 + C4447 * C4309) *
                C44914 +
            (C4454 * C4046 + C44903 * C4049 + C4452 * C4045 + C4447 * C4048) *
                C9960 +
            (C11551 + C11550) * C9855 + (C11317 + C11316) * C9959) *
               C44836 * C44910) *
              C44786 * C638 +
          (((C11320 + C11321) * C9959 + (C11552 + C11553) * C9855 +
            (C4452 * C4046 + C4447 * C4049 + C4454 * C4047 + C44903 * C4050) *
                C9960 +
            (C4452 * C4140 + C4447 * C4310 + C4454 * C4141 + C44903 * C4311) *
                C44914) *
               C44836 * C44910 -
           ((C11553 + C11552) * C44914 + (C11321 + C11320) * C9960 +
            (C4454 * C225 + C44903 * C457 + C4452 * C224 + C4447 * C456) *
                C9855 +
            (C4454 * C95 + C44903 * C100 + C4452 * C94 + C4447 * C99) * C9959) *
               C44836 * C1222) *
              C44786 * C44906)) /
        (p * q * std::sqrt(p + q));
    d2eezy[20] += (2 * std::pow(Pi, 2.5) *
                   (((((C155 * C93 + C44836 * C156) * C9959 +
                       (C155 * C223 + C44836 * C498) * C9855 + C11150 * C9960 +
                       C11627 * C44914) *
                          C4447 +
                      (C10248 + C10249 + C10250 + C10251) * C44903) *
                         C1222 -
                     ((C11629 + C11624 + C11625 + C11626) * C44903 +
                      ((C155 * C4139 + C44836 * C4350) * C44914 +
                       (C155 * C4045 + C44836 * C4095) * C9960 +
                       C11627 * C9855 + C11150 * C9959) *
                          C4447) *
                         C44910) *
                        C44786 * C638 +
                    (((C11626 + C11625 + C11624 + C11629) * C4447 +
                      (C1310 * C9959 + C1683 * C9855 +
                       (C155 * C4047 + C44836 * C4097) * C9960 +
                       (C155 * C4141 + C44836 * C4352) * C44914) *
                          C44903) *
                         C44910 -
                     ((C10252 + C10253 + C10254 + C10255) * C44903 +
                      (C10251 + C10250 + C10249 + C10248) * C4447) *
                         C1222) *
                        C44786 * C44906)) /
                  (p * q * std::sqrt(p + q));
    d2eezz[20] += (2 * std::pow(Pi, 2.5) *
                   ((((C10305 * C93 + C10308 + C10308 + C9855 * C558 +
                       C10306 * C1226 + C10309 + C10309 + C44914 * C1738) *
                          C44836 * C4447 +
                      (C10332 + C10333) * C44836 * C44903) *
                         C1222 -
                     ((C11710 + C11711) * C44836 * C44903 +
                      (C10306 * C4045 + C11702 + C11702 + C44914 * C4391 +
                       C10305 * C1226 + C11703 + C11703 + C9855 * C1738) *
                          C44836 * C4447) *
                         C44910) *
                        C44786 * C638 +
                    (((C11711 + C11710) * C44836 * C4447 +
                      (C10305 * C1224 + C11704 + C11704 + C9855 * C1736 +
                       C10306 * C4047 + C11705 + C11705 + C44914 * C4393) *
                          C44836 * C44903) *
                         C44910 -
                     ((C10334 + C10335) * C44836 * C44903 +
                      (C10333 + C10332) * C44836 * C4447) *
                         C1222) *
                        C44786 * C44906)) /
                  (p * q * std::sqrt(p + q));
    d2eexx[21] += (2 * std::pow(Pi, 2.5) *
                   ((((C4451 * C93 + C4456 + C4456 + C4447 * C103 +
                       C4453 * C94 + C4457 + C4457 + C44903 * C104) *
                          C9855 +
                      (C11066 + C11067) * C44914) *
                         C44836 * C44803 * C1806 -
                     ((C7540 + C7541) * C44914 + (C5035 + C5034) * C9855) *
                         C44836 * C44803 * C44908) *
                        C1808 +
                    (((C5036 + C5037) * C9855 +
                      (C4451 * C2655 + C5750 + C5750 + C4447 * C2661 +
                       C4453 * C2656 + C5751 + C5751 + C44903 * C2662) *
                          C44914) *
                         C44836 * C44803 * C44908 -
                     ((C11069 + C11068) * C44914 +
                      (C4453 * C95 + C4462 + C4462 + C44903 * C105 +
                       C4451 * C94 + C4463 + C4463 + C4447 * C104) *
                          C9855) *
                         C44836 * C44803 * C1806) *
                        C44906)) /
                  (p * q * std::sqrt(p + q));
    d2eexy[21] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C155 * C93 + C44836 * C156) * C4452 +
             (C155 * C98 + C44836 * C161) * C4447 + C179 * C4454 +
             C180 * C44903) *
                C9855 +
            (C11154 + C11155 + C11140 + C11141) * C44914) *
               C44803 * C1806 -
           ((C10472 * C44903 + C10473 * C4454 +
             (C155 * C2657 + C44836 * C2719) * C4447 +
             (C155 * C2654 + C44836 * C2716) * C4452) *
                C44914 +
            (C727 * C44903 + C728 * C4454 +
             (C155 * C646 + C44836 * C714) * C4447 +
             (C155 * C642 + C44836 * C710) * C4452) *
                C9855) *
               C44803 * C44908) *
              C1808 +
          (((C728 * C4452 + C727 * C4447 + C726 * C4454 + C725 * C44903) *
                C9855 +
            (C10473 * C4452 + C10472 * C4447 +
             (C155 * C2656 + C44836 * C2718) * C4454 +
             (C155 * C2659 + C44836 * C2721) * C44903) *
                C44914) *
               C44803 * C44908 -
           ((C11149 + C11148 + C11147 + C11146) * C44914 +
            (C182 * C44903 + C181 * C4454 + C180 * C4447 + C179 * C4452) *
                C9855) *
               C44803 * C1806) *
              C44906)) /
        (p * q * std::sqrt(p + q));
    d2eexz[21] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C9959 * C93 + C9855 * C223 + C9960 * C1226 + C44914 * C1364) *
                C4452 +
            (C9959 * C98 + C9855 * C228 + C9960 * C1230 + C44914 * C1368) *
                C4447 +
            (C9978 + C9979) * C4454 + (C9980 + C9981) * C44903) *
               C44836 * C44803 * C1806 -
           ((C10548 + C10549) * C44903 + (C10550 + C10551) * C4454 +
            (C9960 * C2657 + C44914 * C2775 + C9959 * C646 + C9855 * C784) *
                C4447 +
            (C9960 * C2654 + C44914 * C2772 + C9959 * C642 + C9855 * C780) *
                C4452) *
               C44836 * C44803 * C44908) *
              C1808 +
          (((C10551 + C10550) * C4452 + (C10549 + C10548) * C4447 +
            (C9959 * C640 + C9855 * C778 + C9960 * C2656 + C44914 * C2774) *
                C4454 +
            (C9959 * C644 + C9855 * C782 + C9960 * C2659 + C44914 * C2777) *
                C44903) *
               C44836 * C44803 * C44908 -
           ((C9982 + C9983) * C44903 + (C9984 + C9985) * C4454 +
            (C9981 + C9980) * C4447 + (C9979 + C9978) * C4452) *
               C44836 * C44803 * C1806) *
              C44906)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[21] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C4452 * C93 + C4447 * C98 + C4454 * C94 + C44903 * C99) * C155 +
             (C4452 * C156 + C4447 * C289 + C4454 * C157 + C44903 * C290) *
                 C44836) *
                C9855 +
            ((C11316 + C11317) * C155 + (C11318 + C11319) * C44836) * C44914) *
               C44803 * C1806 -
           (((C7768 + C7769) * C44836 + (C7770 + C7771) * C155) * C44914 +
            ((C5287 + C5286) * C44836 + (C5285 + C5284) * C155) * C9855) *
               C44803 * C44908) *
              C1808 +
          ((((C5288 + C5289) * C155 + (C5290 + C5291) * C44836) * C9855 +
            ((C4452 * C2655 + C4447 * C2658 + C4454 * C2656 + C44903 * C2659) *
                 C155 +
             (C4452 * C2717 + C4447 * C2829 + C4454 * C2718 + C44903 * C2830) *
                 C44836) *
                C44914) *
               C44803 * C44908 -
           (((C11323 + C11322) * C44836 + (C11321 + C11320) * C155) * C44914 +
            ((C4454 * C158 + C44903 * C291 + C4452 * C157 + C4447 * C290) *
                 C44836 +
             (C4454 * C95 + C44903 * C100 + C4452 * C94 + C4447 * C99) * C155) *
                C9855) *
               C44803 * C1806) *
              C44906)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[21] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C332 * C93 + C339 + C339 + C44836 * C333) * C4447 +
             C356 * C44903) *
                C9855 +
            (C11403 + C11392) * C44914) *
               C44803 * C1806 -
           ((C10688 * C44903 +
             (C332 * C2654 + C2885 + C2885 + C44836 * C2881) * C4447) *
                C44914 +
            (C920 * C44903 +
             (C332 * C642 + C913 + C913 + C44836 * C904) * C4447) *
                C9855) *
               C44803 * C44908) *
              C1808 +
          (((C920 * C4447 + C919 * C44903) * C9855 +
            (C10688 * C4447 +
             (C332 * C2656 + C2887 + C2887 + C44836 * C2883) * C44903) *
                C44914) *
               C44803 * C44908 -
           ((C11396 + C11395) * C44914 +
            (C357 * C44903 + C356 * C4447) * C9855) *
               C44803 * C1806) *
              C44906)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[21] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C9959 * C93 + C9855 * C223 + C9960 * C1226 + C44914 * C1364) *
                 C155 +
             (C9959 * C156 + C9855 * C396 + C9960 * C1294 + C44914 * C1556) *
                 C44836) *
                C4447 +
            ((C9978 + C9979) * C155 + (C10144 + C10145) * C44836) * C44903) *
               C44803 * C1806 -
           (((C10759 + C10760) * C44836 + (C10550 + C10551) * C155) * C44903 +
            ((C9960 * C2716 + C44914 * C2937 + C9959 * C710 + C9855 * C972) *
                 C44836 +
             (C9960 * C2654 + C44914 * C2772 + C9959 * C642 + C9855 * C780) *
                 C155) *
                C4447) *
               C44803 * C44908) *
              C1808 +
          ((((C10551 + C10550) * C155 + (C10760 + C10759) * C44836) * C4447 +
            ((C9959 * C640 + C9855 * C778 + C9960 * C2656 + C44914 * C2774) *
                 C155 +
             (C9959 * C708 + C9855 * C970 + C9960 * C2718 + C44914 * C2939) *
                 C44836) *
                C44903) *
               C44803 * C44908 -
           (((C10146 + C10147) * C44836 + (C9984 + C9985) * C155) * C44903 +
            ((C10145 + C10144) * C44836 + (C9979 + C9978) * C155) * C4447) *
               C44803 * C1806) *
              C44906)) /
        (p * q * std::sqrt(p + q));
    d2eezx[21] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4452 * C93 + C4447 * C98 + C4454 * C94 + C44903 * C99) * C9959 +
            (C4452 * C223 + C4447 * C455 + C4454 * C224 + C44903 * C456) *
                C9855 +
            (C11316 + C11317) * C9960 + (C11550 + C11551) * C44914) *
               C44836 * C44803 * C1806 -
           ((C7987 + C7988) * C44914 + (C7770 + C7771) * C9960 +
            (C5525 + C5524) * C9855 + (C5285 + C5284) * C9959) *
               C44836 * C44803 * C44908) *
              C1808 +
          (((C5288 + C5289) * C9959 + (C5526 + C5527) * C9855 +
            (C4452 * C2655 + C4447 * C2658 + C4454 * C2656 + C44903 * C2659) *
                C9960 +
            (C4452 * C2773 + C4447 * C2991 + C4454 * C2774 + C44903 * C2992) *
                C44914) *
               C44836 * C44803 * C44908 -
           ((C11553 + C11552) * C44914 + (C11321 + C11320) * C9960 +
            (C4454 * C225 + C44903 * C457 + C4452 * C224 + C4447 * C456) *
                C9855 +
            (C4454 * C95 + C44903 * C100 + C4452 * C94 + C4447 * C99) * C9959) *
               C44836 * C44803 * C1806) *
              C44906)) /
        (p * q * std::sqrt(p + q));
    d2eezy[21] += (2 * std::pow(Pi, 2.5) *
                   (((((C155 * C93 + C44836 * C156) * C9959 +
                       (C155 * C223 + C44836 * C498) * C9855 + C11150 * C9960 +
                       C11627 * C44914) *
                          C4447 +
                      (C10248 + C10249 + C10250 + C10251) * C44903) *
                         C44803 * C1806 -
                     ((C10899 + C10895 + C10896 + C10897) * C44903 +
                      ((C155 * C2772 + C44836 * C3043) * C44914 +
                       (C155 * C2654 + C44836 * C2716) * C9960 +
                       (C155 * C780 + C44836 * C1090) * C9855 +
                       (C155 * C642 + C44836 * C710) * C9959) *
                          C4447) *
                         C44803 * C44908) *
                        C1808 +
                    (((C10897 + C10896 + C10895 + C10899) * C4447 +
                      (C726 * C9959 + C1099 * C9855 +
                       (C155 * C2656 + C44836 * C2718) * C9960 +
                       (C155 * C2774 + C44836 * C3045) * C44914) *
                          C44903) *
                         C44803 * C44908 -
                     ((C10252 + C10253 + C10254 + C10255) * C44903 +
                      (C10251 + C10250 + C10249 + C10248) * C4447) *
                         C44803 * C1806) *
                        C44906)) /
                  (p * q * std::sqrt(p + q));
    d2eezz[21] += (2 * std::pow(Pi, 2.5) *
                   ((((C10305 * C93 + C10308 + C10308 + C9855 * C558 +
                       C10306 * C1226 + C10309 + C10309 + C44914 * C1738) *
                          C44836 * C4447 +
                      (C10332 + C10333) * C44836 * C44903) *
                         C44803 * C1806 -
                     ((C10980 + C10981) * C44836 * C44903 +
                      (C10306 * C2654 + C10972 + C10972 + C44914 * C3096 +
                       C10305 * C642 + C10973 + C10973 + C9855 * C1154) *
                          C44836 * C4447) *
                         C44803 * C44908) *
                        C1808 +
                    (((C10981 + C10980) * C44836 * C4447 +
                      (C10305 * C640 + C10974 + C10974 + C9855 * C1152 +
                       C10306 * C2656 + C10975 + C10975 + C44914 * C3098) *
                          C44836 * C44903) *
                         C44803 * C44908 -
                     ((C10334 + C10335) * C44836 * C44903 +
                      (C10333 + C10332) * C44836 * C4447) *
                         C44803 * C1806) *
                        C44906)) /
                  (p * q * std::sqrt(p + q));
    d2eexx[22] += (2 * std::pow(Pi, 2.5) *
                   (((C4451 * C93 + C4456 + C4456 + C4447 * C103 + C4453 * C94 +
                      C4457 + C4457 + C44903 * C104) *
                         C9855 +
                     (C11066 + C11067) * C44914) *
                        C44836 * C44803 * C2248 -
                    ((C7540 + C7541) * C44914 + (C5035 + C5034) * C9855) *
                        C44836 * C44803 * C2249 +
                    ((C6995 + C6994) * C9855 +
                     (C4451 * C7523 + C7534 + C7534 + C4447 * C7527 +
                      C4453 * C7524 + C7535 + C7535 + C44903 * C7528) *
                         C44914) *
                        C44836 * C44803 * C2250) *
                   C44752) /
                  (p * q * std::sqrt(p + q));
    d2eexy[22] += (2 * std::pow(Pi, 2.5) *
                   ((((C155 * C93 + C44836 * C156) * C4452 +
                      (C155 * C98 + C44836 * C161) * C4447 + C179 * C4454 +
                      C180 * C44903) *
                         C9855 +
                     (C11154 + C11155 + C11140 + C11141) * C44914) *
                        C44803 * C2248 -
                    ((C10472 * C44903 + C10473 * C4454 +
                      (C155 * C2657 + C44836 * C2719) * C4447 +
                      (C155 * C2654 + C44836 * C2716) * C4452) *
                         C44914 +
                     (C727 * C44903 + C728 * C4454 +
                      (C155 * C646 + C44836 * C714) * C4447 +
                      (C155 * C642 + C44836 * C710) * C4452) *
                         C9855) *
                        C44803 * C2249 +
                    (((C155 * C2252 + C44836 * C2302) * C4452 +
                      (C155 * C2255 + C44836 * C2305) * C4447 +
                      (C155 * C2253 + C44836 * C2303) * C4454 +
                      (C155 * C2256 + C44836 * C2306) * C44903) *
                         C9855 +
                     ((C155 * C7523 + C44836 * C7607) * C4452 +
                      (C155 * C7525 + C44836 * C7609) * C4447 +
                      (C155 * C7524 + C44836 * C7608) * C4454 +
                      (C155 * C7526 + C44836 * C7610) * C44903) *
                         C44914) *
                        C44803 * C2250) *
                   C44752) /
                  (p * q * std::sqrt(p + q));
    d2eexz[22] +=
        (2 * std::pow(Pi, 2.5) *
         (((C9959 * C93 + C9855 * C223 + C9960 * C1226 + C44914 * C1364) *
               C4452 +
           (C9959 * C98 + C9855 * C228 + C9960 * C1230 + C44914 * C1368) *
               C4447 +
           (C9978 + C9979) * C4454 + (C9980 + C9981) * C44903) *
              C44836 * C44803 * C2248 -
          ((C10548 + C10549) * C44903 + (C10550 + C10551) * C4454 +
           (C9960 * C2657 + C44914 * C2775 + C9959 * C646 + C9855 * C784) *
               C4447 +
           (C9960 * C2654 + C44914 * C2772 + C9959 * C642 + C9855 * C780) *
               C4452) *
              C44836 * C44803 * C2249 +
          ((C9959 * C2252 + C9855 * C2346 + C9960 * C7523 + C44914 * C7677) *
               C4452 +
           (C9959 * C2255 + C9855 * C2349 + C9960 * C7525 + C44914 * C7679) *
               C4447 +
           (C9959 * C2253 + C9855 * C2347 + C9960 * C7524 + C44914 * C7678) *
               C4454 +
           (C9959 * C2256 + C9855 * C2350 + C9960 * C7526 + C44914 * C7680) *
               C44903) *
              C44836 * C44803 * C2250) *
         C44752) /
        (p * q * std::sqrt(p + q));
    d2eeyx[22] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4452 * C93 + C4447 * C98 + C4454 * C94 + C44903 * C99) * C155 +
            (C4452 * C156 + C4447 * C289 + C4454 * C157 + C44903 * C290) *
                C44836) *
               C9855 +
           ((C11316 + C11317) * C155 + (C11318 + C11319) * C44836) * C44914) *
              C44803 * C2248 -
          (((C7768 + C7769) * C44836 + (C7770 + C7771) * C155) * C44914 +
           ((C5287 + C5286) * C44836 + (C5285 + C5284) * C155) * C9855) *
              C44803 * C2249 +
          (((C7177 + C7176) * C155 + (C7175 + C7174) * C44836) * C9855 +
           ((C4452 * C7523 + C4447 * C7525 + C4454 * C7524 + C44903 * C7526) *
                C155 +
            (C4452 * C7607 + C4447 * C7757 + C4454 * C7608 + C44903 * C7758) *
                C44836) *
               C44914) *
              C44803 * C2250) *
         C44752) /
        (p * q * std::sqrt(p + q));
    d2eeyy[22] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C332 * C93 + C339 + C339 + C44836 * C333) * C4447 +
            C356 * C44903) *
               C9855 +
           (C11403 + C11392) * C44914) *
              C44803 * C2248 -
          ((C10688 * C44903 +
            (C332 * C2654 + C2885 + C2885 + C44836 * C2881) * C4447) *
               C44914 +
           (C920 * C44903 +
            (C332 * C642 + C913 + C913 + C44836 * C904) * C4447) *
               C9855) *
              C44803 * C2249 +
          (((C332 * C2252 + C2435 + C2435 + C44836 * C2431) * C4447 +
            (C332 * C2253 + C2436 + C2436 + C44836 * C2432) * C44903) *
               C9855 +
           ((C332 * C7523 + C12556 + C12556 + C44836 * C7837) * C4447 +
            (C332 * C7524 + C12557 + C12557 + C44836 * C7838) * C44903) *
               C44914) *
              C44803 * C2250) *
         C44752) /
        (p * q * std::sqrt(p + q));
    d2eeyz[22] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C9959 * C93 + C9855 * C223 + C9960 * C1226 + C44914 * C1364) *
                C155 +
            (C9959 * C156 + C9855 * C396 + C9960 * C1294 + C44914 * C1556) *
                C44836) *
               C4447 +
           ((C9978 + C9979) * C155 + (C10144 + C10145) * C44836) * C44903) *
              C44803 * C2248 -
          (((C10759 + C10760) * C44836 + (C10550 + C10551) * C155) * C44903 +
           ((C9960 * C2716 + C44914 * C2937 + C9959 * C710 + C9855 * C972) *
                C44836 +
            (C9960 * C2654 + C44914 * C2772 + C9959 * C642 + C9855 * C780) *
                C155) *
               C4447) *
              C44803 * C2249 +
          (((C9959 * C2252 + C9855 * C2346 + C9960 * C7523 + C44914 * C7677) *
                C155 +
            (C9959 * C2302 + C9855 * C2475 + C9960 * C7607 + C44914 * C7909) *
                C44836) *
               C4447 +
           ((C9959 * C2253 + C9855 * C2347 + C9960 * C7524 + C44914 * C7678) *
                C155 +
            (C9959 * C2303 + C9855 * C2476 + C9960 * C7608 + C44914 * C7910) *
                C44836) *
               C44903) *
              C44803 * C2250) *
         C44752) /
        (p * q * std::sqrt(p + q));
    d2eezx[22] +=
        (2 * std::pow(Pi, 2.5) *
         (((C4452 * C93 + C4447 * C98 + C4454 * C94 + C44903 * C99) * C9959 +
           (C4452 * C223 + C4447 * C455 + C4454 * C224 + C44903 * C456) *
               C9855 +
           (C11316 + C11317) * C9960 + (C11550 + C11551) * C44914) *
              C44836 * C44803 * C2248 -
          ((C7987 + C7988) * C44914 + (C7770 + C7771) * C9960 +
           (C5525 + C5524) * C9855 + (C5285 + C5284) * C9959) *
              C44836 * C44803 * C2249 +
          ((C7177 + C7176) * C9959 + (C7346 + C7345) * C9855 +
           (C4452 * C7523 + C4447 * C7525 + C4454 * C7524 + C44903 * C7526) *
               C9960 +
           (C4452 * C7677 + C4447 * C7980 + C4454 * C7678 + C44903 * C7981) *
               C44914) *
              C44836 * C44803 * C2250) *
         C44752) /
        (p * q * std::sqrt(p + q));
    d2eezy[22] += (2 * std::pow(Pi, 2.5) *
                   ((((C155 * C93 + C44836 * C156) * C9959 +
                      (C155 * C223 + C44836 * C498) * C9855 + C11150 * C9960 +
                      C11627 * C44914) *
                         C4447 +
                     (C10248 + C10249 + C10250 + C10251) * C44903) *
                        C44803 * C2248 -
                    ((C10899 + C10895 + C10896 + C10897) * C44903 +
                     ((C155 * C2772 + C44836 * C3043) * C44914 +
                      (C155 * C2654 + C44836 * C2716) * C9960 +
                      (C155 * C780 + C44836 * C1090) * C9855 +
                      (C155 * C642 + C44836 * C710) * C9959) *
                         C4447) *
                        C44803 * C2249 +
                    (((C155 * C2252 + C44836 * C2302) * C9959 +
                      (C155 * C2346 + C44836 * C2557) * C9855 +
                      (C155 * C7523 + C44836 * C7607) * C9960 +
                      (C155 * C7677 + C44836 * C8054) * C44914) *
                         C4447 +
                     ((C155 * C2253 + C44836 * C2303) * C9959 +
                      (C155 * C2347 + C44836 * C2558) * C9855 +
                      (C155 * C7524 + C44836 * C7608) * C9960 +
                      (C155 * C7678 + C44836 * C8055) * C44914) *
                         C44903) *
                        C44803 * C2250) *
                   C44752) /
                  (p * q * std::sqrt(p + q));
    d2eezz[22] += (2 * std::pow(Pi, 2.5) *
                   (((C10305 * C93 + C10308 + C10308 + C9855 * C558 +
                      C10306 * C1226 + C10309 + C10309 + C44914 * C1738) *
                         C44836 * C4447 +
                     (C10332 + C10333) * C44836 * C44903) *
                        C44803 * C2248 -
                    ((C10980 + C10981) * C44836 * C44903 +
                     (C10306 * C2654 + C10972 + C10972 + C44914 * C3096 +
                      C10305 * C642 + C10973 + C10973 + C9855 * C1154) *
                         C44836 * C4447) *
                        C44803 * C2249 +
                    ((C10305 * C2252 + C12758 + C12758 + C9855 * C2598 +
                      C10306 * C7523 + C12759 + C12759 + C44914 * C8122) *
                         C44836 * C4447 +
                     (C10305 * C2253 + C12760 + C12760 + C9855 * C2599 +
                      C10306 * C7524 + C12761 + C12761 + C44914 * C8123) *
                         C44836 * C44903) *
                        C44803 * C2250) *
                   C44752) /
                  (p * q * std::sqrt(p + q));
    d2eexx[23] += (2 * std::pow(Pi, 2.5) *
                   ((((C4451 * C93 + C4456 + C4456 + C4447 * C103 +
                       C4453 * C94 + C4457 + C4457 + C44903 * C104) *
                          C9855 +
                      (C11066 + C11067) * C44914) *
                         C44836 * C1222 -
                     ((C4453 * C4046 + C9377 + C9377 + C44903 * C4052 +
                       C4451 * C4045 + C9376 + C9376 + C4447 * C4051) *
                          C44914 +
                      (C11067 + C11066) * C9855) *
                         C44836 * C44910) *
                        C1806 +
                    (((C7541 + C7540) * C9855 +
                      (C4451 * C9369 + C9378 + C9378 + C4447 * C9373 +
                       C4453 * C9370 + C9379 + C9379 + C44903 * C9374) *
                          C44914) *
                         C44836 * C44910 -
                     ((C7540 + C7541) * C44914 + (C5035 + C5034) * C9855) *
                         C44836 * C1222) *
                        C44908) *
                   C44752) /
                  (p * q * std::sqrt(p + q));
    d2eexy[23] += (2 * std::pow(Pi, 2.5) *
                   (((((C155 * C93 + C44836 * C156) * C4452 +
                       (C155 * C98 + C44836 * C161) * C4447 + C179 * C4454 +
                       C180 * C44903) *
                          C9855 +
                      (C11154 + C11155 + C11140 + C11141) * C44914) *
                         C1222 -
                     ((C11152 * C44903 + C11153 * C4454 +
                       (C155 * C4048 + C44836 * C4098) * C4447 +
                       (C155 * C4045 + C44836 * C4095) * C4452) *
                          C44914 +
                      (C11141 + C11140 + C11155 + C11154) * C9855) *
                         C44910) *
                        C1806 +
                    (((C12902 + C12903 + C12898 + C12899) * C9855 +
                      ((C155 * C9369 + C44836 * C9429) * C4452 +
                       (C155 * C9371 + C44836 * C9431) * C4447 +
                       (C155 * C9370 + C44836 * C9430) * C4454 +
                       (C155 * C9372 + C44836 * C9432) * C44903) *
                          C44914) *
                         C44910 -
                     ((C12899 + C12898 + C12903 + C12902) * C44914 +
                      (C727 * C44903 + C728 * C4454 +
                       (C155 * C646 + C44836 * C714) * C4447 +
                       (C155 * C642 + C44836 * C710) * C4452) *
                          C9855) *
                         C1222) *
                        C44908) *
                   C44752) /
                  (p * q * std::sqrt(p + q));
    d2eexz[23] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C9959 * C93 + C9855 * C223 + C9960 * C1226 + C44914 * C1364) *
                C4452 +
            (C9959 * C98 + C9855 * C228 + C9960 * C1230 + C44914 * C1368) *
                C4447 +
            (C9978 + C9979) * C4454 + (C9980 + C9981) * C44903) *
               C44836 * C1222 -
           ((C11230 + C11231) * C44903 + (C11232 + C11233) * C4454 +
            (C9960 * C4048 + C44914 * C4142 + C9959 * C1230 + C9855 * C1368) *
                C4447 +
            (C9960 * C4045 + C44914 * C4139 + C9959 * C1226 + C9855 * C1364) *
                C4452) *
               C44836 * C44910) *
              C1806 +
          (((C9959 * C2654 + C9855 * C2772 + C9960 * C9369 + C44914 * C9483) *
                C4452 +
            (C9959 * C2657 + C9855 * C2775 + C9960 * C9371 + C44914 * C9485) *
                C4447 +
            (C9959 * C2655 + C9855 * C2773 + C9960 * C9370 + C44914 * C9484) *
                C4454 +
            (C9959 * C2658 + C9855 * C2776 + C9960 * C9372 + C44914 * C9486) *
                C44903) *
               C44836 * C44910 -
           ((C10548 + C10549) * C44903 + (C10550 + C10551) * C4454 +
            (C9960 * C2657 + C44914 * C2775 + C9959 * C646 + C9855 * C784) *
                C4447 +
            (C9960 * C2654 + C44914 * C2772 + C9959 * C642 + C9855 * C780) *
                C4452) *
               C44836 * C1222) *
              C44908) *
         C44752) /
        (p * q * std::sqrt(p + q));
    d2eeyx[23] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C4452 * C93 + C4447 * C98 + C4454 * C94 + C44903 * C99) * C155 +
             (C4452 * C156 + C4447 * C289 + C4454 * C157 + C44903 * C290) *
                 C44836) *
                C9855 +
            ((C11316 + C11317) * C155 + (C11318 + C11319) * C44836) * C44914) *
               C1222 -
           (((C4454 * C4096 + C44903 * C4184 + C4452 * C4095 + C4447 * C4183) *
                 C44836 +
             (C4454 * C4046 + C44903 * C4049 + C4452 * C4045 + C4447 * C4048) *
                 C155) *
                C44914 +
            ((C11319 + C11318) * C44836 + (C11317 + C11316) * C155) * C9855) *
               C44910) *
              C1806 +
          ((((C7771 + C7770) * C155 + (C7769 + C7768) * C44836) * C9855 +
            ((C4452 * C9369 + C4447 * C9371 + C4454 * C9370 + C44903 * C9372) *
                 C155 +
             (C4452 * C9429 + C4447 * C9537 + C4454 * C9430 + C44903 * C9538) *
                 C44836) *
                C44914) *
               C44910 -
           (((C7768 + C7769) * C44836 + (C7770 + C7771) * C155) * C44914 +
            ((C5287 + C5286) * C44836 + (C5285 + C5284) * C155) * C9855) *
               C1222) *
              C44908) *
         C44752) /
        (p * q * std::sqrt(p + q));
    d2eeyy[23] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C332 * C93 + C339 + C339 + C44836 * C333) * C4447 +
             C356 * C44903) *
                C9855 +
            (C11403 + C11392) * C44914) *
               C1222 -
           ((C11402 * C44903 +
             (C332 * C4045 + C4228 + C4228 + C44836 * C4224) * C4447) *
                C44914 +
            (C11392 + C11403) * C9855) *
               C44910) *
              C1806 +
          (((C13110 + C13104) * C9855 +
            ((C332 * C9369 + C13105 + C13105 + C44836 * C9589) * C4447 +
             (C332 * C9370 + C13106 + C13106 + C44836 * C9590) * C44903) *
                C44914) *
               C44910 -
           ((C13104 + C13110) * C44914 +
            (C920 * C44903 +
             (C332 * C642 + C913 + C913 + C44836 * C904) * C4447) *
                C9855) *
               C1222) *
              C44908) *
         C44752) /
        (p * q * std::sqrt(p + q));
    d2eeyz[23] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C9959 * C93 + C9855 * C223 + C9960 * C1226 + C44914 * C1364) *
                 C155 +
             (C9959 * C156 + C9855 * C396 + C9960 * C1294 + C44914 * C1556) *
                 C44836) *
                C4447 +
            ((C9978 + C9979) * C155 + (C10144 + C10145) * C44836) * C44903) *
               C1222 -
           (((C11474 + C11475) * C44836 + (C11232 + C11233) * C155) * C44903 +
            ((C9960 * C4095 + C44914 * C4268 + C9959 * C1294 + C9855 * C1556) *
                 C44836 +
             (C9960 * C4045 + C44914 * C4139 + C9959 * C1226 + C9855 * C1364) *
                 C155) *
                C4447) *
               C44910) *
              C1806 +
          ((((C9959 * C2654 + C9855 * C2772 + C9960 * C9369 + C44914 * C9483) *
                 C155 +
             (C9959 * C2716 + C9855 * C2937 + C9960 * C9429 + C44914 * C9645) *
                 C44836) *
                C4447 +
            ((C9959 * C2655 + C9855 * C2773 + C9960 * C9370 + C44914 * C9484) *
                 C155 +
             (C9959 * C2717 + C9855 * C2938 + C9960 * C9430 + C44914 * C9646) *
                 C44836) *
                C44903) *
               C44910 -
           (((C10759 + C10760) * C44836 + (C10550 + C10551) * C155) * C44903 +
            ((C9960 * C2716 + C44914 * C2937 + C9959 * C710 + C9855 * C972) *
                 C44836 +
             (C9960 * C2654 + C44914 * C2772 + C9959 * C642 + C9855 * C780) *
                 C155) *
                C4447) *
               C1222) *
              C44908) *
         C44752) /
        (p * q * std::sqrt(p + q));
    d2eezx[23] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4452 * C93 + C4447 * C98 + C4454 * C94 + C44903 * C99) * C9959 +
            (C4452 * C223 + C4447 * C455 + C4454 * C224 + C44903 * C456) *
                C9855 +
            (C11316 + C11317) * C9960 + (C11550 + C11551) * C44914) *
               C44836 * C1222 -
           ((C4454 * C4140 + C44903 * C4310 + C4452 * C4139 + C4447 * C4309) *
                C44914 +
            (C4454 * C4046 + C44903 * C4049 + C4452 * C4045 + C4447 * C4048) *
                C9960 +
            (C11551 + C11550) * C9855 + (C11317 + C11316) * C9959) *
               C44836 * C44910) *
              C1806 +
          (((C7771 + C7770) * C9959 + (C7988 + C7987) * C9855 +
            (C4452 * C9369 + C4447 * C9371 + C4454 * C9370 + C44903 * C9372) *
                C9960 +
            (C4452 * C9483 + C4447 * C9697 + C4454 * C9484 + C44903 * C9698) *
                C44914) *
               C44836 * C44910 -
           ((C7987 + C7988) * C44914 + (C7770 + C7771) * C9960 +
            (C5525 + C5524) * C9855 + (C5285 + C5284) * C9959) *
               C44836 * C1222) *
              C44908) *
         C44752) /
        (p * q * std::sqrt(p + q));
    d2eezy[23] += (2 * std::pow(Pi, 2.5) *
                   (((((C155 * C93 + C44836 * C156) * C9959 +
                       (C155 * C223 + C44836 * C498) * C9855 + C11150 * C9960 +
                       C11627 * C44914) *
                          C4447 +
                      (C10248 + C10249 + C10250 + C10251) * C44903) *
                         C1222 -
                     ((C11629 + C11624 + C11625 + C11626) * C44903 +
                      ((C155 * C4139 + C44836 * C4350) * C44914 +
                       (C155 * C4045 + C44836 * C4095) * C9960 +
                       C11627 * C9855 + C11150 * C9959) *
                          C4447) *
                         C44910) *
                        C1806 +
                    (((C12900 * C9959 + C13311 * C9855 +
                       (C155 * C9369 + C44836 * C9429) * C9960 +
                       (C155 * C9483 + C44836 * C9749) * C44914) *
                          C4447 +
                      (C10473 * C9959 + C10898 * C9855 +
                       (C155 * C9370 + C44836 * C9430) * C9960 +
                       (C155 * C9484 + C44836 * C9750) * C44914) *
                          C44903) *
                         C44910 -
                     ((C10899 + C10895 + C10896 + C10897) * C44903 +
                      (C13311 * C44914 + C12900 * C9960 +
                       (C155 * C780 + C44836 * C1090) * C9855 +
                       (C155 * C642 + C44836 * C710) * C9959) *
                          C4447) *
                         C1222) *
                        C44908) *
                   C44752) /
                  (p * q * std::sqrt(p + q));
    d2eezz[23] += (2 * std::pow(Pi, 2.5) *
                   ((((C10305 * C93 + C10308 + C10308 + C9855 * C558 +
                       C10306 * C1226 + C10309 + C10309 + C44914 * C1738) *
                          C44836 * C4447 +
                      (C10332 + C10333) * C44836 * C44903) *
                         C1222 -
                     ((C11710 + C11711) * C44836 * C44903 +
                      (C10306 * C4045 + C11702 + C11702 + C44914 * C4391 +
                       C10305 * C1226 + C11703 + C11703 + C9855 * C1738) *
                          C44836 * C4447) *
                         C44910) *
                        C1806 +
                    (((C10305 * C2654 + C13378 + C13378 + C9855 * C3096 +
                       C10306 * C9369 + C13379 + C13379 + C44914 * C9801) *
                          C44836 * C4447 +
                      (C10305 * C2655 + C13380 + C13380 + C9855 * C3097 +
                       C10306 * C9370 + C13381 + C13381 + C44914 * C9802) *
                          C44836 * C44903) *
                         C44910 -
                     ((C10980 + C10981) * C44836 * C44903 +
                      (C10306 * C2654 + C10972 + C10972 + C44914 * C3096 +
                       C10305 * C642 + C10973 + C10973 + C9855 * C1154) *
                          C44836 * C4447) *
                         C1222) *
                        C44908) *
                   C44752) /
                  (p * q * std::sqrt(p + q));
    d2eexx[24] += (2 * std::pow(Pi, 2.5) *
                   ((((C4451 * C93 + C4456 + C4456 + C4447 * C103 +
                       C4453 * C94 + C4457 + C4457 + C44903 * C104) *
                          C9855 +
                      (C11066 + C11067) * C44914) *
                         C44836 * C3152 -
                     ((C4453 * C4046 + C9377 + C9377 + C44903 * C4052 +
                       C4451 * C4045 + C9376 + C9376 + C4447 * C4051) *
                          C44914 +
                      (C11067 + C11066) * C9855) *
                         C44836 * C44910) *
                        C44786 * C1808 +
                    (((C11068 + C11069) * C9855 +
                      (C4451 * C4046 + C11056 + C11056 + C4447 * C4052 +
                       C4453 * C4047 + C11057 + C11057 + C44903 * C4053) *
                          C44914) *
                         C44836 * C44910 -
                     ((C11069 + C11068) * C44914 +
                      (C4453 * C95 + C4462 + C4462 + C44903 * C105 +
                       C4451 * C94 + C4463 + C4463 + C4447 * C104) *
                          C9855) *
                         C44836 * C3152) *
                        C44786 * C44906)) /
                  (p * q * std::sqrt(p + q));
    d2eexy[24] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C155 * C93 + C44836 * C156) * C4452 +
             (C155 * C98 + C44836 * C161) * C4447 + C179 * C4454 +
             C180 * C44903) *
                C9855 +
            (C11154 + C11155 + C11140 + C11141) * C44914) *
               C3152 -
           ((C11152 * C44903 + C11153 * C4454 +
             (C155 * C4048 + C44836 * C4098) * C4447 +
             (C155 * C4045 + C44836 * C4095) * C4452) *
                C44914 +
            (C11141 + C11140 + C11155 + C11154) * C9855) *
               C44910) *
              C44786 * C1808 +
          (((C11146 + C11147 + C11148 + C11149) * C9855 +
            (C11153 * C4452 + C11152 * C4447 +
             (C155 * C4047 + C44836 * C4097) * C4454 +
             (C155 * C4050 + C44836 * C4100) * C44903) *
                C44914) *
               C44910 -
           ((C11149 + C11148 + C11147 + C11146) * C44914 +
            (C182 * C44903 + C181 * C4454 + C180 * C4447 + C179 * C4452) *
                C9855) *
               C3152) *
              C44786 * C44906)) /
        (p * q * std::sqrt(p + q));
    d2eexz[24] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C9959 * C93 + C9855 * C223 + C9960 * C1226 + C44914 * C1364) *
                C4452 +
            (C9959 * C98 + C9855 * C228 + C9960 * C1230 + C44914 * C1368) *
                C4447 +
            (C9978 + C9979) * C4454 + (C9980 + C9981) * C44903) *
               C44836 * C3152 -
           ((C11230 + C11231) * C44903 + (C11232 + C11233) * C4454 +
            (C9960 * C4048 + C44914 * C4142 + C9959 * C1230 + C9855 * C1368) *
                C4447 +
            (C9960 * C4045 + C44914 * C4139 + C9959 * C1226 + C9855 * C1364) *
                C4452) *
               C44836 * C44910) *
              C44786 * C1808 +
          (((C11233 + C11232) * C4452 + (C11231 + C11230) * C4447 +
            (C9959 * C1224 + C9855 * C1362 + C9960 * C4047 + C44914 * C4141) *
                C4454 +
            (C9959 * C1228 + C9855 * C1366 + C9960 * C4050 + C44914 * C4144) *
                C44903) *
               C44836 * C44910 -
           ((C9982 + C9983) * C44903 + (C9984 + C9985) * C4454 +
            (C9981 + C9980) * C4447 + (C9979 + C9978) * C4452) *
               C44836 * C3152) *
              C44786 * C44906)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[24] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C4452 * C93 + C4447 * C98 + C4454 * C94 + C44903 * C99) * C155 +
             (C4452 * C156 + C4447 * C289 + C4454 * C157 + C44903 * C290) *
                 C44836) *
                C9855 +
            ((C11316 + C11317) * C155 + (C11318 + C11319) * C44836) * C44914) *
               C3152 -
           (((C4454 * C4096 + C44903 * C4184 + C4452 * C4095 + C4447 * C4183) *
                 C44836 +
             (C4454 * C4046 + C44903 * C4049 + C4452 * C4045 + C4447 * C4048) *
                 C155) *
                C44914 +
            ((C11319 + C11318) * C44836 + (C11317 + C11316) * C155) * C9855) *
               C44910) *
              C44786 * C1808 +
          ((((C11320 + C11321) * C155 + (C11322 + C11323) * C44836) * C9855 +
            ((C4452 * C4046 + C4447 * C4049 + C4454 * C4047 + C44903 * C4050) *
                 C155 +
             (C4452 * C4096 + C4447 * C4184 + C4454 * C4097 + C44903 * C4185) *
                 C44836) *
                C44914) *
               C44910 -
           (((C11323 + C11322) * C44836 + (C11321 + C11320) * C155) * C44914 +
            ((C4454 * C158 + C44903 * C291 + C4452 * C157 + C4447 * C290) *
                 C44836 +
             (C4454 * C95 + C44903 * C100 + C4452 * C94 + C4447 * C99) * C155) *
                C9855) *
               C3152) *
              C44786 * C44906)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[24] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C332 * C93 + C339 + C339 + C44836 * C333) * C4447 +
             C356 * C44903) *
                C9855 +
            (C11403 + C11392) * C44914) *
               C3152 -
           ((C11402 * C44903 +
             (C332 * C4045 + C4228 + C4228 + C44836 * C4224) * C4447) *
                C44914 +
            (C11392 + C11403) * C9855) *
               C44910) *
              C44786 * C1808 +
          (((C11395 + C11396) * C9855 +
            (C11402 * C4447 +
             (C332 * C4047 + C4230 + C4230 + C44836 * C4226) * C44903) *
                C44914) *
               C44910 -
           ((C11396 + C11395) * C44914 +
            (C357 * C44903 + C356 * C4447) * C9855) *
               C3152) *
              C44786 * C44906)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[24] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C9959 * C93 + C9855 * C223 + C9960 * C1226 + C44914 * C1364) *
                 C155 +
             (C9959 * C156 + C9855 * C396 + C9960 * C1294 + C44914 * C1556) *
                 C44836) *
                C4447 +
            ((C9978 + C9979) * C155 + (C10144 + C10145) * C44836) * C44903) *
               C3152 -
           (((C11474 + C11475) * C44836 + (C11232 + C11233) * C155) * C44903 +
            ((C9960 * C4095 + C44914 * C4268 + C9959 * C1294 + C9855 * C1556) *
                 C44836 +
             (C9960 * C4045 + C44914 * C4139 + C9959 * C1226 + C9855 * C1364) *
                 C155) *
                C4447) *
               C44910) *
              C44786 * C1808 +
          ((((C11233 + C11232) * C155 + (C11475 + C11474) * C44836) * C4447 +
            ((C9959 * C1224 + C9855 * C1362 + C9960 * C4047 + C44914 * C4141) *
                 C155 +
             (C9959 * C1292 + C9855 * C1554 + C9960 * C4097 + C44914 * C4270) *
                 C44836) *
                C44903) *
               C44910 -
           (((C10146 + C10147) * C44836 + (C9984 + C9985) * C155) * C44903 +
            ((C10145 + C10144) * C44836 + (C9979 + C9978) * C155) * C4447) *
               C3152) *
              C44786 * C44906)) /
        (p * q * std::sqrt(p + q));
    d2eezx[24] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4452 * C93 + C4447 * C98 + C4454 * C94 + C44903 * C99) * C9959 +
            (C4452 * C223 + C4447 * C455 + C4454 * C224 + C44903 * C456) *
                C9855 +
            (C11316 + C11317) * C9960 + (C11550 + C11551) * C44914) *
               C44836 * C3152 -
           ((C4454 * C4140 + C44903 * C4310 + C4452 * C4139 + C4447 * C4309) *
                C44914 +
            (C4454 * C4046 + C44903 * C4049 + C4452 * C4045 + C4447 * C4048) *
                C9960 +
            (C11551 + C11550) * C9855 + (C11317 + C11316) * C9959) *
               C44836 * C44910) *
              C44786 * C1808 +
          (((C11320 + C11321) * C9959 + (C11552 + C11553) * C9855 +
            (C4452 * C4046 + C4447 * C4049 + C4454 * C4047 + C44903 * C4050) *
                C9960 +
            (C4452 * C4140 + C4447 * C4310 + C4454 * C4141 + C44903 * C4311) *
                C44914) *
               C44836 * C44910 -
           ((C11553 + C11552) * C44914 + (C11321 + C11320) * C9960 +
            (C4454 * C225 + C44903 * C457 + C4452 * C224 + C4447 * C456) *
                C9855 +
            (C4454 * C95 + C44903 * C100 + C4452 * C94 + C4447 * C99) * C9959) *
               C44836 * C3152) *
              C44786 * C44906)) /
        (p * q * std::sqrt(p + q));
    d2eezy[24] += (2 * std::pow(Pi, 2.5) *
                   (((((C155 * C93 + C44836 * C156) * C9959 +
                       (C155 * C223 + C44836 * C498) * C9855 + C11150 * C9960 +
                       C11627 * C44914) *
                          C4447 +
                      (C10248 + C10249 + C10250 + C10251) * C44903) *
                         C3152 -
                     ((C11629 + C11624 + C11625 + C11626) * C44903 +
                      ((C155 * C4139 + C44836 * C4350) * C44914 +
                       (C155 * C4045 + C44836 * C4095) * C9960 +
                       C11627 * C9855 + C11150 * C9959) *
                          C4447) *
                         C44910) *
                        C44786 * C1808 +
                    (((C11626 + C11625 + C11624 + C11629) * C4447 +
                      (C1310 * C9959 + C1683 * C9855 +
                       (C155 * C4047 + C44836 * C4097) * C9960 +
                       (C155 * C4141 + C44836 * C4352) * C44914) *
                          C44903) *
                         C44910 -
                     ((C10252 + C10253 + C10254 + C10255) * C44903 +
                      (C10251 + C10250 + C10249 + C10248) * C4447) *
                         C3152) *
                        C44786 * C44906)) /
                  (p * q * std::sqrt(p + q));
    d2eezz[24] += (2 * std::pow(Pi, 2.5) *
                   ((((C10305 * C93 + C10308 + C10308 + C9855 * C558 +
                       C10306 * C1226 + C10309 + C10309 + C44914 * C1738) *
                          C44836 * C4447 +
                      (C10332 + C10333) * C44836 * C44903) *
                         C3152 -
                     ((C11710 + C11711) * C44836 * C44903 +
                      (C10306 * C4045 + C11702 + C11702 + C44914 * C4391 +
                       C10305 * C1226 + C11703 + C11703 + C9855 * C1738) *
                          C44836 * C4447) *
                         C44910) *
                        C44786 * C1808 +
                    (((C11711 + C11710) * C44836 * C4447 +
                      (C10305 * C1224 + C11704 + C11704 + C9855 * C1736 +
                       C10306 * C4047 + C11705 + C11705 + C44914 * C4393) *
                          C44836 * C44903) *
                         C44910 -
                     ((C10334 + C10335) * C44836 * C44903 +
                      (C10333 + C10332) * C44836 * C4447) *
                         C3152) *
                        C44786 * C44906)) /
                  (p * q * std::sqrt(p + q));
    d2eexx[25] += (2 * std::pow(Pi, 2.5) *
                   ((((C4451 * C93 + C4456 + C4456 + C4447 * C103 +
                       C4453 * C94 + C4457 + C4457 + C44903 * C104) *
                          C9855 +
                      (C11066 + C11067) * C44914) *
                         C44836 * C3152 -
                     ((C4453 * C4046 + C9377 + C9377 + C44903 * C4052 +
                       C4451 * C4045 + C9376 + C9376 + C4447 * C4051) *
                          C44914 +
                      (C11067 + C11066) * C9855) *
                         C44836 * C44910) *
                        C636 +
                    (((C7541 + C7540) * C9855 +
                      (C4451 * C9369 + C9378 + C9378 + C4447 * C9373 +
                       C4453 * C9370 + C9379 + C9379 + C44903 * C9374) *
                          C44914) *
                         C44836 * C44910 -
                     ((C7540 + C7541) * C44914 + (C5035 + C5034) * C9855) *
                         C44836 * C3152) *
                        C44908) *
                   C44752) /
                  (p * q * std::sqrt(p + q));
    d2eexy[25] += (2 * std::pow(Pi, 2.5) *
                   (((((C155 * C93 + C44836 * C156) * C4452 +
                       (C155 * C98 + C44836 * C161) * C4447 + C179 * C4454 +
                       C180 * C44903) *
                          C9855 +
                      (C11154 + C11155 + C11140 + C11141) * C44914) *
                         C3152 -
                     ((C11152 * C44903 + C11153 * C4454 +
                       (C155 * C4048 + C44836 * C4098) * C4447 +
                       (C155 * C4045 + C44836 * C4095) * C4452) *
                          C44914 +
                      (C11141 + C11140 + C11155 + C11154) * C9855) *
                         C44910) *
                        C636 +
                    (((C12902 + C12903 + C12898 + C12899) * C9855 +
                      ((C155 * C9369 + C44836 * C9429) * C4452 +
                       (C155 * C9371 + C44836 * C9431) * C4447 +
                       (C155 * C9370 + C44836 * C9430) * C4454 +
                       (C155 * C9372 + C44836 * C9432) * C44903) *
                          C44914) *
                         C44910 -
                     ((C12899 + C12898 + C12903 + C12902) * C44914 +
                      (C727 * C44903 + C728 * C4454 +
                       (C155 * C646 + C44836 * C714) * C4447 +
                       (C155 * C642 + C44836 * C710) * C4452) *
                          C9855) *
                         C3152) *
                        C44908) *
                   C44752) /
                  (p * q * std::sqrt(p + q));
    d2eexz[25] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C9959 * C93 + C9855 * C223 + C9960 * C1226 + C44914 * C1364) *
                C4452 +
            (C9959 * C98 + C9855 * C228 + C9960 * C1230 + C44914 * C1368) *
                C4447 +
            (C9978 + C9979) * C4454 + (C9980 + C9981) * C44903) *
               C44836 * C3152 -
           ((C11230 + C11231) * C44903 + (C11232 + C11233) * C4454 +
            (C9960 * C4048 + C44914 * C4142 + C9959 * C1230 + C9855 * C1368) *
                C4447 +
            (C9960 * C4045 + C44914 * C4139 + C9959 * C1226 + C9855 * C1364) *
                C4452) *
               C44836 * C44910) *
              C636 +
          (((C9959 * C2654 + C9855 * C2772 + C9960 * C9369 + C44914 * C9483) *
                C4452 +
            (C9959 * C2657 + C9855 * C2775 + C9960 * C9371 + C44914 * C9485) *
                C4447 +
            (C9959 * C2655 + C9855 * C2773 + C9960 * C9370 + C44914 * C9484) *
                C4454 +
            (C9959 * C2658 + C9855 * C2776 + C9960 * C9372 + C44914 * C9486) *
                C44903) *
               C44836 * C44910 -
           ((C10548 + C10549) * C44903 + (C10550 + C10551) * C4454 +
            (C9960 * C2657 + C44914 * C2775 + C9959 * C646 + C9855 * C784) *
                C4447 +
            (C9960 * C2654 + C44914 * C2772 + C9959 * C642 + C9855 * C780) *
                C4452) *
               C44836 * C3152) *
              C44908) *
         C44752) /
        (p * q * std::sqrt(p + q));
    d2eeyx[25] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C4452 * C93 + C4447 * C98 + C4454 * C94 + C44903 * C99) * C155 +
             (C4452 * C156 + C4447 * C289 + C4454 * C157 + C44903 * C290) *
                 C44836) *
                C9855 +
            ((C11316 + C11317) * C155 + (C11318 + C11319) * C44836) * C44914) *
               C3152 -
           (((C4454 * C4096 + C44903 * C4184 + C4452 * C4095 + C4447 * C4183) *
                 C44836 +
             (C4454 * C4046 + C44903 * C4049 + C4452 * C4045 + C4447 * C4048) *
                 C155) *
                C44914 +
            ((C11319 + C11318) * C44836 + (C11317 + C11316) * C155) * C9855) *
               C44910) *
              C636 +
          ((((C7771 + C7770) * C155 + (C7769 + C7768) * C44836) * C9855 +
            ((C4452 * C9369 + C4447 * C9371 + C4454 * C9370 + C44903 * C9372) *
                 C155 +
             (C4452 * C9429 + C4447 * C9537 + C4454 * C9430 + C44903 * C9538) *
                 C44836) *
                C44914) *
               C44910 -
           (((C7768 + C7769) * C44836 + (C7770 + C7771) * C155) * C44914 +
            ((C5287 + C5286) * C44836 + (C5285 + C5284) * C155) * C9855) *
               C3152) *
              C44908) *
         C44752) /
        (p * q * std::sqrt(p + q));
    d2eeyy[25] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C332 * C93 + C339 + C339 + C44836 * C333) * C4447 +
             C356 * C44903) *
                C9855 +
            (C11403 + C11392) * C44914) *
               C3152 -
           ((C11402 * C44903 +
             (C332 * C4045 + C4228 + C4228 + C44836 * C4224) * C4447) *
                C44914 +
            (C11392 + C11403) * C9855) *
               C44910) *
              C636 +
          (((C13110 + C13104) * C9855 +
            ((C332 * C9369 + C13105 + C13105 + C44836 * C9589) * C4447 +
             (C332 * C9370 + C13106 + C13106 + C44836 * C9590) * C44903) *
                C44914) *
               C44910 -
           ((C13104 + C13110) * C44914 +
            (C920 * C44903 +
             (C332 * C642 + C913 + C913 + C44836 * C904) * C4447) *
                C9855) *
               C3152) *
              C44908) *
         C44752) /
        (p * q * std::sqrt(p + q));
    d2eeyz[25] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C9959 * C93 + C9855 * C223 + C9960 * C1226 + C44914 * C1364) *
                 C155 +
             (C9959 * C156 + C9855 * C396 + C9960 * C1294 + C44914 * C1556) *
                 C44836) *
                C4447 +
            ((C9978 + C9979) * C155 + (C10144 + C10145) * C44836) * C44903) *
               C3152 -
           (((C11474 + C11475) * C44836 + (C11232 + C11233) * C155) * C44903 +
            ((C9960 * C4095 + C44914 * C4268 + C9959 * C1294 + C9855 * C1556) *
                 C44836 +
             (C9960 * C4045 + C44914 * C4139 + C9959 * C1226 + C9855 * C1364) *
                 C155) *
                C4447) *
               C44910) *
              C636 +
          ((((C9959 * C2654 + C9855 * C2772 + C9960 * C9369 + C44914 * C9483) *
                 C155 +
             (C9959 * C2716 + C9855 * C2937 + C9960 * C9429 + C44914 * C9645) *
                 C44836) *
                C4447 +
            ((C9959 * C2655 + C9855 * C2773 + C9960 * C9370 + C44914 * C9484) *
                 C155 +
             (C9959 * C2717 + C9855 * C2938 + C9960 * C9430 + C44914 * C9646) *
                 C44836) *
                C44903) *
               C44910 -
           (((C10759 + C10760) * C44836 + (C10550 + C10551) * C155) * C44903 +
            ((C9960 * C2716 + C44914 * C2937 + C9959 * C710 + C9855 * C972) *
                 C44836 +
             (C9960 * C2654 + C44914 * C2772 + C9959 * C642 + C9855 * C780) *
                 C155) *
                C4447) *
               C3152) *
              C44908) *
         C44752) /
        (p * q * std::sqrt(p + q));
    d2eezx[25] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4452 * C93 + C4447 * C98 + C4454 * C94 + C44903 * C99) * C9959 +
            (C4452 * C223 + C4447 * C455 + C4454 * C224 + C44903 * C456) *
                C9855 +
            (C11316 + C11317) * C9960 + (C11550 + C11551) * C44914) *
               C44836 * C3152 -
           ((C4454 * C4140 + C44903 * C4310 + C4452 * C4139 + C4447 * C4309) *
                C44914 +
            (C4454 * C4046 + C44903 * C4049 + C4452 * C4045 + C4447 * C4048) *
                C9960 +
            (C11551 + C11550) * C9855 + (C11317 + C11316) * C9959) *
               C44836 * C44910) *
              C636 +
          (((C7771 + C7770) * C9959 + (C7988 + C7987) * C9855 +
            (C4452 * C9369 + C4447 * C9371 + C4454 * C9370 + C44903 * C9372) *
                C9960 +
            (C4452 * C9483 + C4447 * C9697 + C4454 * C9484 + C44903 * C9698) *
                C44914) *
               C44836 * C44910 -
           ((C7987 + C7988) * C44914 + (C7770 + C7771) * C9960 +
            (C5525 + C5524) * C9855 + (C5285 + C5284) * C9959) *
               C44836 * C3152) *
              C44908) *
         C44752) /
        (p * q * std::sqrt(p + q));
    d2eezy[25] += (2 * std::pow(Pi, 2.5) *
                   (((((C155 * C93 + C44836 * C156) * C9959 +
                       (C155 * C223 + C44836 * C498) * C9855 + C11150 * C9960 +
                       C11627 * C44914) *
                          C4447 +
                      (C10248 + C10249 + C10250 + C10251) * C44903) *
                         C3152 -
                     ((C11629 + C11624 + C11625 + C11626) * C44903 +
                      ((C155 * C4139 + C44836 * C4350) * C44914 +
                       (C155 * C4045 + C44836 * C4095) * C9960 +
                       C11627 * C9855 + C11150 * C9959) *
                          C4447) *
                         C44910) *
                        C636 +
                    (((C12900 * C9959 + C13311 * C9855 +
                       (C155 * C9369 + C44836 * C9429) * C9960 +
                       (C155 * C9483 + C44836 * C9749) * C44914) *
                          C4447 +
                      (C10473 * C9959 + C10898 * C9855 +
                       (C155 * C9370 + C44836 * C9430) * C9960 +
                       (C155 * C9484 + C44836 * C9750) * C44914) *
                          C44903) *
                         C44910 -
                     ((C10899 + C10895 + C10896 + C10897) * C44903 +
                      (C13311 * C44914 + C12900 * C9960 +
                       (C155 * C780 + C44836 * C1090) * C9855 +
                       (C155 * C642 + C44836 * C710) * C9959) *
                          C4447) *
                         C3152) *
                        C44908) *
                   C44752) /
                  (p * q * std::sqrt(p + q));
    d2eezz[25] += (2 * std::pow(Pi, 2.5) *
                   ((((C10305 * C93 + C10308 + C10308 + C9855 * C558 +
                       C10306 * C1226 + C10309 + C10309 + C44914 * C1738) *
                          C44836 * C4447 +
                      (C10332 + C10333) * C44836 * C44903) *
                         C3152 -
                     ((C11710 + C11711) * C44836 * C44903 +
                      (C10306 * C4045 + C11702 + C11702 + C44914 * C4391 +
                       C10305 * C1226 + C11703 + C11703 + C9855 * C1738) *
                          C44836 * C4447) *
                         C44910) *
                        C636 +
                    (((C10305 * C2654 + C13378 + C13378 + C9855 * C3096 +
                       C10306 * C9369 + C13379 + C13379 + C44914 * C9801) *
                          C44836 * C4447 +
                      (C10305 * C2655 + C13380 + C13380 + C9855 * C3097 +
                       C10306 * C9370 + C13381 + C13381 + C44914 * C9802) *
                          C44836 * C44903) *
                         C44910 -
                     ((C10980 + C10981) * C44836 * C44903 +
                      (C10306 * C2654 + C10972 + C10972 + C44914 * C3096 +
                       C10305 * C642 + C10973 + C10973 + C9855 * C1154) *
                          C44836 * C4447) *
                         C3152) *
                        C44908) *
                   C44752) /
                  (p * q * std::sqrt(p + q));
    d2eexx[26] += (2 * std::pow(Pi, 2.5) *
                   (((C4451 * C93 + C4456 + C4456 + C4447 * C103 + C4453 * C94 +
                      C4457 + C4457 + C44903 * C104) *
                         C9855 +
                     (C11066 + C11067) * C44914) *
                        C44836 * C4042 -
                    ((C14636 + C14637) * C44914 + (C11067 + C11066) * C9855) *
                        C44836 * C4043 +
                    ((C14637 + C14636) * C9855 +
                     (C4451 * C14619 + C14630 + C14630 + C4447 * C14623 +
                      C4453 * C14620 + C14631 + C14631 + C44903 * C14624) *
                         C44914) *
                        C44836 * C4044) *
                   C44786 * C44752) /
                  (p * q * std::sqrt(p + q));
    d2eexy[26] += (2 * std::pow(Pi, 2.5) *
                   ((((C155 * C93 + C44836 * C156) * C4452 +
                      (C155 * C98 + C44836 * C161) * C4447 + C179 * C4454 +
                      C180 * C44903) *
                         C9855 +
                     (C11154 + C11155 + C11140 + C11141) * C44914) *
                        C4042 -
                    ((C14692 + C14693 + C14700 + C14701) * C44914 +
                     (C11141 + C11140 + C11155 + C11154) * C9855) *
                        C4043 +
                    ((C14701 + C14700 + C14693 + C14692) * C9855 +
                     ((C155 * C14619 + C44836 * C14687) * C4452 +
                      (C155 * C14621 + C44836 * C14689) * C4447 +
                      (C155 * C14620 + C44836 * C14688) * C4454 +
                      (C155 * C14622 + C44836 * C14690) * C44903) *
                         C44914) *
                        C4044) *
                   C44786 * C44752) /
                  (p * q * std::sqrt(p + q));
    d2eexz[26] +=
        (2 * std::pow(Pi, 2.5) *
         (((C9959 * C93 + C9855 * C223 + C9960 * C1226 + C44914 * C1364) *
               C4452 +
           (C9959 * C98 + C9855 * C228 + C9960 * C1230 + C44914 * C1368) *
               C4447 +
           (C9978 + C9979) * C4454 + (C9980 + C9981) * C44903) *
              C44836 * C4042 -
          ((C11230 + C11231) * C44903 + (C11232 + C11233) * C4454 +
           (C9960 * C4048 + C44914 * C4142 + C9959 * C1230 + C9855 * C1368) *
               C4447 +
           (C9960 * C4045 + C44914 * C4139 + C9959 * C1226 + C9855 * C1364) *
               C4452) *
              C44836 * C4043 +
          ((C9959 * C4045 + C9855 * C4139 + C9960 * C14619 + C44914 * C14751) *
               C4452 +
           (C9959 * C4048 + C9855 * C4142 + C9960 * C14621 + C44914 * C14753) *
               C4447 +
           (C9959 * C4046 + C9855 * C4140 + C9960 * C14620 + C44914 * C14752) *
               C4454 +
           (C9959 * C4049 + C9855 * C4143 + C9960 * C14622 + C44914 * C14754) *
               C44903) *
              C44836 * C4044) *
         C44786 * C44752) /
        (p * q * std::sqrt(p + q));
    d2eeyx[26] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4452 * C93 + C4447 * C98 + C4454 * C94 + C44903 * C99) * C155 +
            (C4452 * C156 + C4447 * C289 + C4454 * C157 + C44903 * C290) *
                C44836) *
               C9855 +
           ((C11316 + C11317) * C155 + (C11318 + C11319) * C44836) * C44914) *
              C4042 -
          (((C14816 + C14817) * C44836 + (C14818 + C14819) * C155) * C44914 +
           ((C11319 + C11318) * C44836 + (C11317 + C11316) * C155) * C9855) *
              C4043 +
          (((C14819 + C14818) * C155 + (C14817 + C14816) * C44836) * C9855 +
           ((C4452 * C14619 + C4447 * C14621 + C4454 * C14620 +
             C44903 * C14622) *
                C155 +
            (C4452 * C14687 + C4447 * C14805 + C4454 * C14688 +
             C44903 * C14806) *
                C44836) *
               C44914) *
              C4044) *
         C44786 * C44752) /
        (p * q * std::sqrt(p + q));
    d2eeyy[26] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C332 * C93 + C339 + C339 + C44836 * C333) * C4447 +
            C356 * C44903) *
               C9855 +
           (C11403 + C11392) * C44914) *
              C4042 -
          ((C14872 + C14880) * C44914 + (C11392 + C11403) * C9855) * C4043 +
          ((C14880 + C14872) * C9855 +
           ((C332 * C14619 + C14875 + C14875 + C44836 * C14869) * C4447 +
            (C332 * C14620 + C14876 + C14876 + C44836 * C14870) * C44903) *
               C44914) *
              C4044) *
         C44786 * C44752) /
        (p * q * std::sqrt(p + q));
    d2eeyz[26] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C9959 * C93 + C9855 * C223 + C9960 * C1226 + C44914 * C1364) *
                C155 +
            (C9959 * C156 + C9855 * C396 + C9960 * C1294 + C44914 * C1556) *
                C44836) *
               C4447 +
           ((C9978 + C9979) * C155 + (C10144 + C10145) * C44836) * C44903) *
              C4042 -
          (((C11474 + C11475) * C44836 + (C11232 + C11233) * C155) * C44903 +
           ((C9960 * C4095 + C44914 * C4268 + C9959 * C1294 + C9855 * C1556) *
                C44836 +
            (C9960 * C4045 + C44914 * C4139 + C9959 * C1226 + C9855 * C1364) *
                C155) *
               C4447) *
              C4043 +
          (((C9959 * C4045 + C9855 * C4139 + C9960 * C14619 + C44914 * C14751) *
                C155 +
            (C9959 * C4095 + C9855 * C4268 + C9960 * C14687 + C44914 * C14930) *
                C44836) *
               C4447 +
           ((C9959 * C4046 + C9855 * C4140 + C9960 * C14620 + C44914 * C14752) *
                C155 +
            (C9959 * C4096 + C9855 * C4269 + C9960 * C14688 + C44914 * C14931) *
                C44836) *
               C44903) *
              C4044) *
         C44786 * C44752) /
        (p * q * std::sqrt(p + q));
    d2eezx[26] +=
        (2 * std::pow(Pi, 2.5) *
         (((C4452 * C93 + C4447 * C98 + C4454 * C94 + C44903 * C99) * C9959 +
           (C4452 * C223 + C4447 * C455 + C4454 * C224 + C44903 * C456) *
               C9855 +
           (C11316 + C11317) * C9960 + (C11550 + C11551) * C44914) *
              C44836 * C4042 -
          ((C14989 + C14990) * C44914 + (C14818 + C14819) * C9960 +
           (C11551 + C11550) * C9855 + (C11317 + C11316) * C9959) *
              C44836 * C4043 +
          ((C14819 + C14818) * C9959 + (C14990 + C14989) * C9855 +
           (C4452 * C14619 + C4447 * C14621 + C4454 * C14620 +
            C44903 * C14622) *
               C9960 +
           (C4452 * C14751 + C4447 * C14982 + C4454 * C14752 +
            C44903 * C14983) *
               C44914) *
              C44836 * C4044) *
         C44786 * C44752) /
        (p * q * std::sqrt(p + q));
    d2eezy[26] += (2 * std::pow(Pi, 2.5) *
                   ((((C155 * C93 + C44836 * C156) * C9959 +
                      (C155 * C223 + C44836 * C498) * C9855 + C11150 * C9960 +
                      C11627 * C44914) *
                         C4447 +
                     (C10248 + C10249 + C10250 + C10251) * C44903) *
                        C4042 -
                    ((C11629 + C11624 + C11625 + C11626) * C44903 +
                     (C15045 * C44914 + C14699 * C9960 + C11627 * C9855 +
                      C11150 * C9959) *
                         C4447) *
                        C4043 +
                    ((C14699 * C9959 + C15045 * C9855 +
                      (C155 * C14619 + C44836 * C14687) * C9960 +
                      (C155 * C14751 + C44836 * C15040) * C44914) *
                         C4447 +
                     (C11153 * C9959 + C11628 * C9855 +
                      (C155 * C14620 + C44836 * C14688) * C9960 +
                      (C155 * C14752 + C44836 * C15041) * C44914) *
                         C44903) *
                        C4044) *
                   C44786 * C44752) /
                  (p * q * std::sqrt(p + q));
    d2eezz[26] += (2 * std::pow(Pi, 2.5) *
                   (((C10305 * C93 + C10308 + C10308 + C9855 * C558 +
                      C10306 * C1226 + C10309 + C10309 + C44914 * C1738) *
                         C44836 * C4447 +
                     (C10332 + C10333) * C44836 * C44903) *
                        C4042 -
                    ((C11710 + C11711) * C44836 * C44903 +
                     (C10306 * C4045 + C11702 + C11702 + C44914 * C4391 +
                      C10305 * C1226 + C11703 + C11703 + C9855 * C1738) *
                         C44836 * C4447) *
                        C4043 +
                    ((C10305 * C4045 + C15098 + C15098 + C9855 * C4391 +
                      C10306 * C14619 + C15099 + C15099 + C44914 * C15095) *
                         C44836 * C4447 +
                     (C10305 * C4046 + C15100 + C15100 + C9855 * C4392 +
                      C10306 * C14620 + C15101 + C15101 + C44914 * C15096) *
                         C44836 * C44903) *
                        C4044) *
                   C44786 * C44752) /
                  (p * q * std::sqrt(p + q));
    d2eexx[27] += (2 * std::pow(Pi, 2.5) *
                   (((C15155 * C93 + C15160 + C15160 + C15151 * C103 +
                      C15157 * C94 + C15161 + C15161 + C44903 * C104) *
                         C44851 * C15153 +
                     (C15155 * C642 + C15162 + C15162 + C15151 * C650 +
                      C15157 * C641 + C15163 + C15163 + C44903 * C649) *
                         C44851 * C44912) *
                        C44803 * C44786 * C84 -
                    ((C15157 * C640 + C15164 + C15164 + C44903 * C648 +
                      C15155 * C641 + C15165 + C15165 + C15151 * C649) *
                         C44851 * C44912 +
                     (C15157 * C95 + C15166 + C15166 + C44903 * C105 +
                      C15155 * C94 + C15167 + C15167 + C15151 * C104) *
                         C44851 * C15153) *
                        C44803 * C44786 * C85 +
                    ((C15155 * C95 + C15168 + C15168 + C15151 * C105 +
                      C15157 * C96 + C15169 + C15169 + C44903 * C106) *
                         C44851 * C15153 +
                     (C15155 * C640 + C15170 + C15170 + C15151 * C648 +
                      C15157 * C643 + C15171 + C15171 + C44903 * C651) *
                         C44851 * C44912) *
                        C44803 * C44786 * C86)) /
                  (p * q * std::sqrt(p + q));
    d2eexy[27] +=
        (2 * std::pow(Pi, 2.5) *
         (((C15221 * C93 + C15153 * C156 + C15222 * C642 + C44912 * C710) *
               C15156 +
           (C15221 * C98 + C15153 * C161 + C15222 * C646 + C44912 * C714) *
               C15151 +
           (C15240 + C15241) * C15158 + (C15242 + C15243) * C44903) *
              C44851 * C44803 * C44786 * C84 -
          ((C15244 + C15245) * C44903 + (C15246 + C15247) * C15158 +
           (C15243 + C15242) * C15151 + (C15241 + C15240) * C15156) *
              C44851 * C44803 * C44786 * C85 +
          ((C15247 + C15246) * C15156 + (C15245 + C15244) * C15151 +
           (C15221 * C96 + C15153 * C159 + C15222 * C643 + C44912 * C711) *
               C15158 +
           (C15221 * C101 + C15153 * C164 + C15222 * C647 + C44912 * C715) *
               C44903) *
              C44851 * C44803 * C44786 * C86)) /
        (p * q * std::sqrt(p + q));
    d2eexz[27] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C222 * C93 + C44851 * C223) * C15156 +
            (C222 * C98 + C44851 * C228) * C15151 + C246 * C15158 +
            C247 * C44903) *
               C15153 +
           (C5196 * C15156 + C5197 * C15151 + C798 * C15158 + C797 * C44903) *
               C44912) *
              C44803 * C44786 * C84 -
          ((C795 * C44903 + C796 * C15158 + C797 * C15151 + C798 * C15156) *
               C44912 +
           (C249 * C44903 + C248 * C15158 + C247 * C15151 + C246 * C15156) *
               C15153) *
              C44803 * C44786 * C85 +
          ((C248 * C15156 + C249 * C15151 + C251 * C15158 + C250 * C44903) *
               C15153 +
           (C796 * C15156 + C795 * C15151 +
            (C222 * C643 + C44851 * C781) * C15158 +
            (C222 * C647 + C44851 * C785) * C44903) *
               C44912) *
              C44803 * C44786 * C86)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[27] +=
        (2 * std::pow(Pi, 2.5) *
         (((C15156 * C93 + C15151 * C98 + C15158 * C94 + C44903 * C99) *
               C15221 +
           (C15156 * C156 + C15151 * C289 + C15158 * C157 + C44903 * C290) *
               C15153 +
           (C15156 * C642 + C15151 * C646 + C15158 * C641 + C44903 * C645) *
               C15222 +
           (C15156 * C710 + C15151 * C850 + C15158 * C709 + C44903 * C849) *
               C44912) *
              C44851 * C44803 * C44786 * C84 -
          ((C15158 * C708 + C44903 * C848 + C15156 * C709 + C15151 * C849) *
               C44912 +
           (C15158 * C640 + C44903 * C644 + C15156 * C641 + C15151 * C645) *
               C15222 +
           (C15158 * C158 + C44903 * C291 + C15156 * C157 + C15151 * C290) *
               C15153 +
           (C15158 * C95 + C44903 * C100 + C15156 * C94 + C15151 * C99) *
               C15221) *
              C44851 * C44803 * C44786 * C85 +
          ((C15156 * C95 + C15151 * C100 + C15158 * C96 + C44903 * C101) *
               C15221 +
           (C15156 * C158 + C15151 * C291 + C15158 * C159 + C44903 * C292) *
               C15153 +
           (C15156 * C640 + C15151 * C644 + C15158 * C643 + C44903 * C647) *
               C15222 +
           (C15156 * C708 + C15151 * C848 + C15158 * C711 + C44903 * C851) *
               C44912) *
              C44851 * C44803 * C44786 * C86)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[27] += (2 * std::pow(Pi, 2.5) *
                   (((C15397 * C93 + C15400 + C15400 + C15153 * C333 +
                      C15398 * C642 + C15401 + C15401 + C44912 * C904) *
                         C15151 +
                     (C15424 + C15425) * C44903) *
                        C44851 * C44803 * C44786 * C84 -
                    ((C15426 + C15427) * C44903 + (C15425 + C15424) * C15151) *
                        C44851 * C44803 * C44786 * C85 +
                    ((C15427 + C15426) * C15151 +
                     (C15397 * C96 + C15414 + C15414 + C15153 * C336 +
                      C15398 * C643 + C15415 + C15415 + C44912 * C905) *
                         C44903) *
                        C44851 * C44803 * C44786 * C86)) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[27] += (2 * std::pow(Pi, 2.5) *
                   ((((C222 * C93 + C44851 * C223) * C15221 +
                      (C222 * C156 + C44851 * C396) * C15153 + C5196 * C15222 +
                      C5447 * C44912) *
                         C15151 +
                     (C15478 + C15479 + C15480 + C15481) * C44903) *
                        C44803 * C44786 * C84 -
                    ((C15482 + C15483 + C15484 + C15485) * C44903 +
                     (C15481 + C15480 + C15479 + C15478) * C15151) *
                        C44803 * C44786 * C85 +
                    ((C15485 + C15484 + C15483 + C15482) * C15151 +
                     (C251 * C15221 + C413 * C15153 +
                      (C222 * C643 + C44851 * C781) * C15222 +
                      (C222 * C711 + C44851 * C973) * C44912) *
                         C44903) *
                        C44803 * C44786 * C86)) /
                  (p * q * std::sqrt(p + q));
    d2eezx[27] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C15156 * C93 + C15151 * C98 + C15158 * C94 + C44903 * C99) * C222 +
            (C15156 * C223 + C15151 * C455 + C15158 * C224 + C44903 * C456) *
                C44851) *
               C15153 +
           ((C15156 * C642 + C15151 * C646 + C15158 * C641 + C44903 * C645) *
                C222 +
            (C15156 * C780 + C15151 * C1036 + C15158 * C779 + C44903 * C1035) *
                C44851) *
               C44912) *
              C44803 * C44786 * C84 -
          (((C15158 * C778 + C44903 * C1034 + C15156 * C779 + C15151 * C1035) *
                C44851 +
            (C15158 * C640 + C44903 * C644 + C15156 * C641 + C15151 * C645) *
                C222) *
               C44912 +
           ((C15158 * C225 + C44903 * C457 + C15156 * C224 + C15151 * C456) *
                C44851 +
            (C15158 * C95 + C44903 * C100 + C15156 * C94 + C15151 * C99) *
                C222) *
               C15153) *
              C44803 * C44786 * C85 +
          (((C15156 * C95 + C15151 * C100 + C15158 * C96 + C44903 * C101) *
                C222 +
            (C15156 * C225 + C15151 * C457 + C15158 * C226 + C44903 * C458) *
                C44851) *
               C15153 +
           ((C15156 * C640 + C15151 * C644 + C15158 * C643 + C44903 * C647) *
                C222 +
            (C15156 * C778 + C15151 * C1034 + C15158 * C781 + C44903 * C1037) *
                C44851) *
               C44912) *
              C44803 * C44786 * C86)) /
        (p * q * std::sqrt(p + q));
    d2eezy[27] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C15221 * C93 + C15153 * C156 + C15222 * C642 + C44912 * C710) *
                C222 +
            (C15221 * C223 + C15153 * C498 + C15222 * C780 + C44912 * C1090) *
                C44851) *
               C15151 +
           ((C15240 + C15241) * C222 + (C15594 + C15595) * C44851) * C44903) *
              C44803 * C44786 * C84 -
          (((C15596 + C15597) * C44851 + (C15246 + C15247) * C222) * C44903 +
           ((C15595 + C15594) * C44851 + (C15241 + C15240) * C222) * C15151) *
              C44803 * C44786 * C85 +
          (((C15247 + C15246) * C222 + (C15597 + C15596) * C44851) * C15151 +
           ((C15221 * C96 + C15153 * C159 + C15222 * C643 + C44912 * C711) *
                C222 +
            (C15221 * C226 + C15153 * C501 + C15222 * C781 + C44912 * C1091) *
                C44851) *
               C44903) *
              C44803 * C44786 * C86)) /
        (p * q * std::sqrt(p + q));
    d2eezz[27] += (2 * std::pow(Pi, 2.5) *
                   ((((C557 * C93 + C564 + C564 + C44851 * C558) * C15153 +
                      C5675 * C44912) *
                         C15151 +
                     (C15648 + C15649) * C44903) *
                        C44803 * C44786 * C84 -
                    ((C15650 + C15651) * C44903 + (C15649 + C15648) * C15151) *
                        C44803 * C44786 * C85 +
                    ((C15651 + C15650) * C15151 +
                     (C583 * C15153 +
                      (C557 * C643 + C1164 + C1164 + C44851 * C1155) * C44912) *
                         C44903) *
                        C44803 * C44786 * C86)) /
                  (p * q * std::sqrt(p + q));
    d2eexx[28] += (2 * std::pow(Pi, 2.5) *
                   ((((C15155 * C93 + C15160 + C15160 + C15151 * C103 +
                       C15157 * C94 + C15161 + C15161 + C44903 * C104) *
                          C44851 * C15153 +
                      (C15738 + C15739) * C44851 * C44912) *
                         C44803 * C636 -
                     ((C15157 * C2253 + C15722 + C15722 + C44903 * C2259 +
                       C15155 * C2252 + C15723 + C15723 + C15151 * C2258) *
                          C44851 * C44912 +
                      (C15739 + C15738) * C44851 * C15153) *
                         C44803 * C44908) *
                        C638 +
                    (((C15740 + C15741) * C44851 * C15153 +
                      (C15155 * C2253 + C15728 + C15728 + C15151 * C2259 +
                       C15157 * C2254 + C15729 + C15729 + C44903 * C2260) *
                          C44851 * C44912) *
                         C44803 * C44908 -
                     ((C15741 + C15740) * C44851 * C44912 +
                      (C15157 * C95 + C15166 + C15166 + C44903 * C105 +
                       C15155 * C94 + C15167 + C15167 + C15151 * C104) *
                          C44851 * C15153) *
                         C44803 * C636) *
                        C44906)) /
                  (p * q * std::sqrt(p + q));
    d2eexy[28] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C15221 * C93 + C15153 * C156 + C15222 * C642 + C44912 * C710) *
                C15156 +
            (C15221 * C98 + C15153 * C161 + C15222 * C646 + C44912 * C714) *
                C15151 +
            (C15240 + C15241) * C15158 + (C15242 + C15243) * C44903) *
               C44851 * C44803 * C636 -
           ((C15816 + C15817) * C44903 + (C15818 + C15819) * C15158 +
            (C15222 * C2255 + C44912 * C2305 + C15221 * C646 + C15153 * C714) *
                C15151 +
            (C15222 * C2252 + C44912 * C2302 + C15221 * C642 + C15153 * C710) *
                C15156) *
               C44851 * C44803 * C44908) *
              C638 +
          (((C15819 + C15818) * C15156 + (C15817 + C15816) * C15151 +
            (C15221 * C640 + C15153 * C708 + C15222 * C2254 + C44912 * C2304) *
                C15158 +
            (C15221 * C644 + C15153 * C712 + C15222 * C2257 + C44912 * C2307) *
                C44903) *
               C44851 * C44803 * C44908 -
           ((C15244 + C15245) * C44903 + (C15246 + C15247) * C15158 +
            (C15243 + C15242) * C15151 + (C15241 + C15240) * C15156) *
               C44851 * C44803 * C636) *
              C44906)) /
        (p * q * std::sqrt(p + q));
    d2eexz[28] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C222 * C93 + C44851 * C223) * C15156 +
             (C222 * C98 + C44851 * C228) * C15151 + C246 * C15158 +
             C247 * C44903) *
                C15153 +
            (C15886 + C15887 + C15888 + C15889) * C44912) *
               C44803 * C636 -
           ((C5198 * C44903 + C5199 * C15158 + C7110 * C15151 +
             C7111 * C15156) *
                C44912 +
            (C15889 + C15888 + C15887 + C15886) * C15153) *
               C44803 * C44908) *
              C638 +
          (((C15890 + C15891 + C15892 + C15893) * C15153 +
            (C5199 * C15156 + C5198 * C15151 +
             (C222 * C2254 + C44851 * C2348) * C15158 +
             (C222 * C2257 + C44851 * C2351) * C44903) *
                C44912) *
               C44803 * C44908 -
           ((C15893 + C15892 + C15891 + C15890) * C44912 +
            (C249 * C44903 + C248 * C15158 + C247 * C15151 + C246 * C15156) *
                C15153) *
               C44803 * C636) *
              C44906)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[28] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C15156 * C93 + C15151 * C98 + C15158 * C94 + C44903 * C99) *
                C15221 +
            (C15156 * C156 + C15151 * C289 + C15158 * C157 + C44903 * C290) *
                C15153 +
            (C15976 + C15977) * C15222 + (C15978 + C15979) * C44912) *
               C44851 * C44803 * C636 -
           ((C15158 * C2303 + C44903 * C2391 + C15156 * C2302 +
             C15151 * C2390) *
                C44912 +
            (C15158 * C2253 + C44903 * C2256 + C15156 * C2252 +
             C15151 * C2255) *
                C15222 +
            (C15979 + C15978) * C15153 + (C15977 + C15976) * C15221) *
               C44851 * C44803 * C44908) *
              C638 +
          (((C15980 + C15981) * C15221 + (C15982 + C15983) * C15153 +
            (C15156 * C2253 + C15151 * C2256 + C15158 * C2254 +
             C44903 * C2257) *
                C15222 +
            (C15156 * C2303 + C15151 * C2391 + C15158 * C2304 +
             C44903 * C2392) *
                C44912) *
               C44851 * C44803 * C44908 -
           ((C15983 + C15982) * C44912 + (C15981 + C15980) * C15222 +
            (C15158 * C158 + C44903 * C291 + C15156 * C157 + C15151 * C290) *
                C15153 +
            (C15158 * C95 + C44903 * C100 + C15156 * C94 + C15151 * C99) *
                C15221) *
               C44851 * C44803 * C636) *
              C44906)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[28] += (2 * std::pow(Pi, 2.5) *
                   ((((C15397 * C93 + C15400 + C15400 + C15153 * C333 +
                       C15398 * C642 + C15401 + C15401 + C44912 * C904) *
                          C15151 +
                      (C15424 + C15425) * C44903) *
                         C44851 * C44803 * C636 -
                     ((C16064 + C16065) * C44903 +
                      (C15398 * C2252 + C16056 + C16056 + C44912 * C2431 +
                       C15397 * C642 + C16057 + C16057 + C15153 * C904) *
                          C15151) *
                         C44851 * C44803 * C44908) *
                        C638 +
                    (((C16065 + C16064) * C15151 +
                      (C15397 * C640 + C16058 + C16058 + C15153 * C902 +
                       C15398 * C2254 + C16059 + C16059 + C44912 * C2433) *
                          C44903) *
                         C44851 * C44803 * C44908 -
                     ((C15426 + C15427) * C44903 + (C15425 + C15424) * C15151) *
                         C44851 * C44803 * C636) *
                        C44906)) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[28] += (2 * std::pow(Pi, 2.5) *
                   (((((C222 * C93 + C44851 * C223) * C15221 +
                       (C222 * C156 + C44851 * C396) * C15153 + C5196 * C15222 +
                       C5447 * C44912) *
                          C15151 +
                      (C15478 + C15479 + C15480 + C15481) * C44903) *
                         C44803 * C636 -
                     ((C16132 + C16133 + C16134 + C16135) * C44903 +
                      (C7288 * C44912 + C7111 * C15222 + C5447 * C15153 +
                       C5196 * C15221) *
                          C15151) *
                         C44803 * C44908) *
                        C638 +
                    (((C16135 + C16134 + C16133 + C16132) * C15151 +
                      (C796 * C15221 + C981 * C15153 +
                       (C222 * C2254 + C44851 * C2348) * C15222 +
                       (C222 * C2304 + C44851 * C2477) * C44912) *
                          C44903) *
                         C44803 * C44908 -
                     ((C15482 + C15483 + C15484 + C15485) * C44903 +
                      (C15481 + C15480 + C15479 + C15478) * C15151) *
                         C44803 * C636) *
                        C44906)) /
                  (p * q * std::sqrt(p + q));
    d2eezx[28] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C15156 * C93 + C15151 * C98 + C15158 * C94 + C44903 * C99) *
                 C222 +
             (C15156 * C223 + C15151 * C455 + C15158 * C224 + C44903 * C456) *
                 C44851) *
                C15153 +
            ((C15976 + C15977) * C222 + (C16210 + C16211) * C44851) * C44912) *
               C44803 * C636 -
           (((C15158 * C2347 + C44903 * C2517 + C15156 * C2346 +
              C15151 * C2516) *
                 C44851 +
             (C15158 * C2253 + C44903 * C2256 + C15156 * C2252 +
              C15151 * C2255) *
                 C222) *
                C44912 +
            ((C16211 + C16210) * C44851 + (C15977 + C15976) * C222) * C15153) *
               C44803 * C44908) *
              C638 +
          ((((C15980 + C15981) * C222 + (C16212 + C16213) * C44851) * C15153 +
            ((C15156 * C2253 + C15151 * C2256 + C15158 * C2254 +
              C44903 * C2257) *
                 C222 +
             (C15156 * C2347 + C15151 * C2517 + C15158 * C2348 +
              C44903 * C2518) *
                 C44851) *
                C44912) *
               C44803 * C44908 -
           (((C16213 + C16212) * C44851 + (C15981 + C15980) * C222) * C44912 +
            ((C15158 * C225 + C44903 * C457 + C15156 * C224 + C15151 * C456) *
                 C44851 +
             (C15158 * C95 + C44903 * C100 + C15156 * C94 + C15151 * C99) *
                 C222) *
                C15153) *
               C44803 * C636) *
              C44906)) /
        (p * q * std::sqrt(p + q));
    d2eezy[28] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C15221 * C93 + C15153 * C156 + C15222 * C642 + C44912 * C710) *
                 C222 +
             (C15221 * C223 + C15153 * C498 + C15222 * C780 + C44912 * C1090) *
                 C44851) *
                C15151 +
            ((C15240 + C15241) * C222 + (C15594 + C15595) * C44851) * C44903) *
               C44803 * C636 -
           (((C16284 + C16285) * C44851 + (C15818 + C15819) * C222) * C44903 +
            ((C15222 * C2346 + C44912 * C2557 + C15221 * C780 +
              C15153 * C1090) *
                 C44851 +
             (C15222 * C2252 + C44912 * C2302 + C15221 * C642 + C15153 * C710) *
                 C222) *
                C15151) *
               C44803 * C44908) *
              C638 +
          ((((C15819 + C15818) * C222 + (C16285 + C16284) * C44851) * C15151 +
            ((C15221 * C640 + C15153 * C708 + C15222 * C2254 + C44912 * C2304) *
                 C222 +
             (C15221 * C778 + C15153 * C1088 + C15222 * C2348 +
              C44912 * C2559) *
                 C44851) *
                C44903) *
               C44803 * C44908 -
           (((C15596 + C15597) * C44851 + (C15246 + C15247) * C222) * C44903 +
            ((C15595 + C15594) * C44851 + (C15241 + C15240) * C222) * C15151) *
               C44803 * C636) *
              C44906)) /
        (p * q * std::sqrt(p + q));
    d2eezz[28] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C557 * C93 + C564 + C564 + C44851 * C558) * C15153 +
             C5675 * C44912) *
                C15151 +
            (C15648 + C15649) * C44903) *
               C44803 * C636 -
           ((C16352 + C16353) * C44903 +
            (C7457 * C44912 + C5675 * C15153) * C15151) *
               C44803 * C44908) *
              C638 +
          (((C16353 + C16352) * C15151 +
            (C1169 * C15153 +
             (C557 * C2254 + C2604 + C2604 + C44851 * C2600) * C44912) *
                C44903) *
               C44803 * C44908 -
           ((C15650 + C15651) * C44903 + (C15649 + C15648) * C15151) * C44803 *
               C636) *
              C44906)) /
        (p * q * std::sqrt(p + q));
    d2eexx[29] += (2 * std::pow(Pi, 2.5) *
                   ((((C15155 * C93 + C15160 + C15160 + C15151 * C103 +
                       C15157 * C94 + C15161 + C15161 + C44903 * C104) *
                          C44851 * C15153 +
                      (C15738 + C15739) * C44851 * C44912) *
                         C1222 -
                     ((C15157 * C2655 + C16420 + C16420 + C44903 * C2661 +
                       C15155 * C2654 + C16421 + C16421 + C15151 * C2660) *
                          C44851 * C44912 +
                      (C15157 * C1225 + C16422 + C16422 + C44903 * C1233 +
                       C15155 * C1226 + C16423 + C16423 + C15151 * C1234) *
                          C44851 * C15153) *
                         C44910) *
                        C44786 * C638 +
                    (((C15155 * C1225 + C16424 + C16424 + C15151 * C1233 +
                       C15157 * C1224 + C16425 + C16425 + C44903 * C1232) *
                          C44851 * C15153 +
                      (C15155 * C2655 + C16426 + C16426 + C15151 * C2661 +
                       C15157 * C2656 + C16427 + C16427 + C44903 * C2662) *
                          C44851 * C44912) *
                         C44910 -
                     ((C15741 + C15740) * C44851 * C44912 +
                      (C15157 * C95 + C15166 + C15166 + C44903 * C105 +
                       C15155 * C94 + C15167 + C15167 + C15151 * C104) *
                          C44851 * C15153) *
                         C1222) *
                        C44786 * C44906)) /
                  (p * q * std::sqrt(p + q));
    d2eexy[29] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C15221 * C93 + C15153 * C156 + C15222 * C642 + C44912 * C710) *
                C15156 +
            (C15221 * C98 + C15153 * C161 + C15222 * C646 + C44912 * C714) *
                C15151 +
            (C15240 + C15241) * C15158 + (C15242 + C15243) * C44903) *
               C44851 * C1222 -
           ((C16502 + C16503) * C44903 + (C16504 + C16505) * C15158 +
            (C15222 * C2657 + C44912 * C2719 + C15221 * C1230 +
             C15153 * C1298) *
                C15151 +
            (C15222 * C2654 + C44912 * C2716 + C15221 * C1226 +
             C15153 * C1294) *
                C15156) *
               C44851 * C44910) *
              C44786 * C638 +
          (((C16505 + C16504) * C15156 + (C16503 + C16502) * C15151 +
            (C15221 * C1224 + C15153 * C1292 + C15222 * C2656 +
             C44912 * C2718) *
                C15158 +
            (C15221 * C1228 + C15153 * C1296 + C15222 * C2659 +
             C44912 * C2721) *
                C44903) *
               C44851 * C44910 -
           ((C15244 + C15245) * C44903 + (C15246 + C15247) * C15158 +
            (C15243 + C15242) * C15151 + (C15241 + C15240) * C15156) *
               C44851 * C1222) *
              C44786 * C44906)) /
        (p * q * std::sqrt(p + q));
    d2eexz[29] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C222 * C93 + C44851 * C223) * C15156 +
             (C222 * C98 + C44851 * C228) * C15151 + C246 * C15158 +
             C247 * C44903) *
                C15153 +
            (C15886 + C15887 + C15888 + C15889) * C44912) *
               C1222 -
           ((C5900 * C44903 + C5901 * C15158 + C7688 * C15151 +
             C7689 * C15156) *
                C44912 +
            (C1381 * C44903 + C1382 * C15158 +
             (C222 * C1230 + C44851 * C1368) * C15151 +
             (C222 * C1226 + C44851 * C1364) * C15156) *
                C15153) *
               C44910) *
              C44786 * C638 +
          (((C1382 * C15156 + C1381 * C15151 + C1380 * C15158 +
             C1379 * C44903) *
                C15153 +
            (C5901 * C15156 + C5900 * C15151 +
             (C222 * C2656 + C44851 * C2774) * C15158 +
             (C222 * C2659 + C44851 * C2777) * C44903) *
                C44912) *
               C44910 -
           ((C15893 + C15892 + C15891 + C15890) * C44912 +
            (C249 * C44903 + C248 * C15158 + C247 * C15151 + C246 * C15156) *
                C15153) *
               C1222) *
              C44786 * C44906)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[29] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C15156 * C93 + C15151 * C98 + C15158 * C94 + C44903 * C99) *
                C15221 +
            (C15156 * C156 + C15151 * C289 + C15158 * C157 + C44903 * C290) *
                C15153 +
            (C15976 + C15977) * C15222 + (C15978 + C15979) * C44912) *
               C44851 * C1222 -
           ((C15158 * C2717 + C44903 * C2829 + C15156 * C2716 +
             C15151 * C2828) *
                C44912 +
            (C15158 * C2655 + C44903 * C2658 + C15156 * C2654 +
             C15151 * C2657) *
                C15222 +
            (C15158 * C1293 + C44903 * C1433 + C15156 * C1294 +
             C15151 * C1434) *
                C15153 +
            (C15158 * C1225 + C44903 * C1229 + C15156 * C1226 +
             C15151 * C1230) *
                C15221) *
               C44851 * C44910) *
              C44786 * C638 +
          (((C15156 * C1225 + C15151 * C1229 + C15158 * C1224 +
             C44903 * C1228) *
                C15221 +
            (C15156 * C1293 + C15151 * C1433 + C15158 * C1292 +
             C44903 * C1432) *
                C15153 +
            (C15156 * C2655 + C15151 * C2658 + C15158 * C2656 +
             C44903 * C2659) *
                C15222 +
            (C15156 * C2717 + C15151 * C2829 + C15158 * C2718 +
             C44903 * C2830) *
                C44912) *
               C44851 * C44910 -
           ((C15983 + C15982) * C44912 + (C15981 + C15980) * C15222 +
            (C15158 * C158 + C44903 * C291 + C15156 * C157 + C15151 * C290) *
                C15153 +
            (C15158 * C95 + C44903 * C100 + C15156 * C94 + C15151 * C99) *
                C15221) *
               C44851 * C1222) *
              C44786 * C44906)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[29] += (2 * std::pow(Pi, 2.5) *
                   ((((C15397 * C93 + C15400 + C15400 + C15153 * C333 +
                       C15398 * C642 + C15401 + C15401 + C44912 * C904) *
                          C15151 +
                      (C15424 + C15425) * C44903) *
                         C44851 * C1222 -
                     ((C16718 + C16719) * C44903 +
                      (C15398 * C2654 + C16710 + C16710 + C44912 * C2881 +
                       C15397 * C1226 + C16711 + C16711 + C15153 * C1488) *
                          C15151) *
                         C44851 * C44910) *
                        C44786 * C638 +
                    (((C16719 + C16718) * C15151 +
                      (C15397 * C1224 + C16712 + C16712 + C15153 * C1486 +
                       C15398 * C2656 + C16713 + C16713 + C44912 * C2883) *
                          C44903) *
                         C44851 * C44910 -
                     ((C15426 + C15427) * C44903 + (C15425 + C15424) * C15151) *
                         C44851 * C1222) *
                        C44786 * C44906)) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[29] += (2 * std::pow(Pi, 2.5) *
                   (((((C222 * C93 + C44851 * C223) * C15221 +
                       (C222 * C156 + C44851 * C396) * C15153 + C5196 * C15222 +
                       C5447 * C44912) *
                          C15151 +
                      (C15478 + C15479 + C15480 + C15481) * C44903) *
                         C1222 -
                     ((C16786 + C16787 + C16788 + C16789) * C44903 +
                      (C7914 * C44912 + C7689 * C15222 +
                       (C222 * C1294 + C44851 * C1556) * C15153 +
                       (C222 * C1226 + C44851 * C1364) * C15221) *
                          C15151) *
                         C44910) *
                        C44786 * C638 +
                    (((C16789 + C16788 + C16787 + C16786) * C15151 +
                      (C1380 * C15221 + C1565 * C15153 +
                       (C222 * C2656 + C44851 * C2774) * C15222 +
                       (C222 * C2718 + C44851 * C2939) * C44912) *
                          C44903) *
                         C44910 -
                     ((C15482 + C15483 + C15484 + C15485) * C44903 +
                      (C15481 + C15480 + C15479 + C15478) * C15151) *
                         C1222) *
                        C44786 * C44906)) /
                  (p * q * std::sqrt(p + q));
    d2eezx[29] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C15156 * C93 + C15151 * C98 + C15158 * C94 + C44903 * C99) *
                 C222 +
             (C15156 * C223 + C15151 * C455 + C15158 * C224 + C44903 * C456) *
                 C44851) *
                C15153 +
            ((C15976 + C15977) * C222 + (C16210 + C16211) * C44851) * C44912) *
               C1222 -
           (((C15158 * C2773 + C44903 * C2991 + C15156 * C2772 +
              C15151 * C2990) *
                 C44851 +
             (C15158 * C2655 + C44903 * C2658 + C15156 * C2654 +
              C15151 * C2657) *
                 C222) *
                C44912 +
            ((C15158 * C1363 + C44903 * C1619 + C15156 * C1364 +
              C15151 * C1620) *
                 C44851 +
             (C15158 * C1225 + C44903 * C1229 + C15156 * C1226 +
              C15151 * C1230) *
                 C222) *
                C15153) *
               C44910) *
              C44786 * C638 +
          ((((C15156 * C1225 + C15151 * C1229 + C15158 * C1224 +
              C44903 * C1228) *
                 C222 +
             (C15156 * C1363 + C15151 * C1619 + C15158 * C1362 +
              C44903 * C1618) *
                 C44851) *
                C15153 +
            ((C15156 * C2655 + C15151 * C2658 + C15158 * C2656 +
              C44903 * C2659) *
                 C222 +
             (C15156 * C2773 + C15151 * C2991 + C15158 * C2774 +
              C44903 * C2992) *
                 C44851) *
                C44912) *
               C44910 -
           (((C16213 + C16212) * C44851 + (C15981 + C15980) * C222) * C44912 +
            ((C15158 * C225 + C44903 * C457 + C15156 * C224 + C15151 * C456) *
                 C44851 +
             (C15158 * C95 + C44903 * C100 + C15156 * C94 + C15151 * C99) *
                 C222) *
                C15153) *
               C1222) *
              C44786 * C44906)) /
        (p * q * std::sqrt(p + q));
    d2eezy[29] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C15221 * C93 + C15153 * C156 + C15222 * C642 + C44912 * C710) *
                 C222 +
             (C15221 * C223 + C15153 * C498 + C15222 * C780 + C44912 * C1090) *
                 C44851) *
                C15151 +
            ((C15240 + C15241) * C222 + (C15594 + C15595) * C44851) * C44903) *
               C1222 -
           (((C16926 + C16927) * C44851 + (C16504 + C16505) * C222) * C44903 +
            ((C15222 * C2772 + C44912 * C3043 + C15221 * C1364 +
              C15153 * C1674) *
                 C44851 +
             (C15222 * C2654 + C44912 * C2716 + C15221 * C1226 +
              C15153 * C1294) *
                 C222) *
                C15151) *
               C44910) *
              C44786 * C638 +
          ((((C16505 + C16504) * C222 + (C16927 + C16926) * C44851) * C15151 +
            ((C15221 * C1224 + C15153 * C1292 + C15222 * C2656 +
              C44912 * C2718) *
                 C222 +
             (C15221 * C1362 + C15153 * C1672 + C15222 * C2774 +
              C44912 * C3045) *
                 C44851) *
                C44903) *
               C44910 -
           (((C15596 + C15597) * C44851 + (C15246 + C15247) * C222) * C44903 +
            ((C15595 + C15594) * C44851 + (C15241 + C15240) * C222) * C15151) *
               C1222) *
              C44786 * C44906)) /
        (p * q * std::sqrt(p + q));
    d2eezz[29] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C557 * C93 + C564 + C564 + C44851 * C558) * C15153 +
             C5675 * C44912) *
                C15151 +
            (C15648 + C15649) * C44903) *
               C1222 -
           ((C16994 + C16995) * C44903 +
            (C8131 * C44912 +
             (C557 * C1226 + C1747 + C1747 + C44851 * C1738) * C15153) *
                C15151) *
               C44910) *
              C44786 * C638 +
          (((C16995 + C16994) * C15151 +
            (C1753 * C15153 +
             (C557 * C2656 + C3102 + C3102 + C44851 * C3098) * C44912) *
                C44903) *
               C44910 -
           ((C15650 + C15651) * C44903 + (C15649 + C15648) * C15151) * C1222) *
              C44786 * C44906)) /
        (p * q * std::sqrt(p + q));
    d2eexx[30] += (2 * std::pow(Pi, 2.5) *
                   ((((C15155 * C93 + C15160 + C15160 + C15151 * C103 +
                       C15157 * C94 + C15161 + C15161 + C44903 * C104) *
                          C44851 * C15153 +
                      (C15738 + C15739) * C44851 * C44912) *
                         C44803 * C1806 -
                     ((C15157 * C2253 + C15722 + C15722 + C44903 * C2259 +
                       C15155 * C2252 + C15723 + C15723 + C15151 * C2258) *
                          C44851 * C44912 +
                      (C15739 + C15738) * C44851 * C15153) *
                         C44803 * C44908) *
                        C1808 +
                    (((C15740 + C15741) * C44851 * C15153 +
                      (C15155 * C2253 + C15728 + C15728 + C15151 * C2259 +
                       C15157 * C2254 + C15729 + C15729 + C44903 * C2260) *
                          C44851 * C44912) *
                         C44803 * C44908 -
                     ((C15741 + C15740) * C44851 * C44912 +
                      (C15157 * C95 + C15166 + C15166 + C44903 * C105 +
                       C15155 * C94 + C15167 + C15167 + C15151 * C104) *
                          C44851 * C15153) *
                         C44803 * C1806) *
                        C44906)) /
                  (p * q * std::sqrt(p + q));
    d2eexy[30] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C15221 * C93 + C15153 * C156 + C15222 * C642 + C44912 * C710) *
                C15156 +
            (C15221 * C98 + C15153 * C161 + C15222 * C646 + C44912 * C714) *
                C15151 +
            (C15240 + C15241) * C15158 + (C15242 + C15243) * C44903) *
               C44851 * C44803 * C1806 -
           ((C15816 + C15817) * C44903 + (C15818 + C15819) * C15158 +
            (C15222 * C2255 + C44912 * C2305 + C15221 * C646 + C15153 * C714) *
                C15151 +
            (C15222 * C2252 + C44912 * C2302 + C15221 * C642 + C15153 * C710) *
                C15156) *
               C44851 * C44803 * C44908) *
              C1808 +
          (((C15819 + C15818) * C15156 + (C15817 + C15816) * C15151 +
            (C15221 * C640 + C15153 * C708 + C15222 * C2254 + C44912 * C2304) *
                C15158 +
            (C15221 * C644 + C15153 * C712 + C15222 * C2257 + C44912 * C2307) *
                C44903) *
               C44851 * C44803 * C44908 -
           ((C15244 + C15245) * C44903 + (C15246 + C15247) * C15158 +
            (C15243 + C15242) * C15151 + (C15241 + C15240) * C15156) *
               C44851 * C44803 * C1806) *
              C44906)) /
        (p * q * std::sqrt(p + q));
    d2eexz[30] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C222 * C93 + C44851 * C223) * C15156 +
             (C222 * C98 + C44851 * C228) * C15151 + C246 * C15158 +
             C247 * C44903) *
                C15153 +
            (C15886 + C15887 + C15888 + C15889) * C44912) *
               C44803 * C1806 -
           ((C5198 * C44903 + C5199 * C15158 + C7110 * C15151 +
             C7111 * C15156) *
                C44912 +
            (C15889 + C15888 + C15887 + C15886) * C15153) *
               C44803 * C44908) *
              C1808 +
          (((C15890 + C15891 + C15892 + C15893) * C15153 +
            (C5199 * C15156 + C5198 * C15151 +
             (C222 * C2254 + C44851 * C2348) * C15158 +
             (C222 * C2257 + C44851 * C2351) * C44903) *
                C44912) *
               C44803 * C44908 -
           ((C15893 + C15892 + C15891 + C15890) * C44912 +
            (C249 * C44903 + C248 * C15158 + C247 * C15151 + C246 * C15156) *
                C15153) *
               C44803 * C1806) *
              C44906)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[30] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C15156 * C93 + C15151 * C98 + C15158 * C94 + C44903 * C99) *
                C15221 +
            (C15156 * C156 + C15151 * C289 + C15158 * C157 + C44903 * C290) *
                C15153 +
            (C15976 + C15977) * C15222 + (C15978 + C15979) * C44912) *
               C44851 * C44803 * C1806 -
           ((C15158 * C2303 + C44903 * C2391 + C15156 * C2302 +
             C15151 * C2390) *
                C44912 +
            (C15158 * C2253 + C44903 * C2256 + C15156 * C2252 +
             C15151 * C2255) *
                C15222 +
            (C15979 + C15978) * C15153 + (C15977 + C15976) * C15221) *
               C44851 * C44803 * C44908) *
              C1808 +
          (((C15980 + C15981) * C15221 + (C15982 + C15983) * C15153 +
            (C15156 * C2253 + C15151 * C2256 + C15158 * C2254 +
             C44903 * C2257) *
                C15222 +
            (C15156 * C2303 + C15151 * C2391 + C15158 * C2304 +
             C44903 * C2392) *
                C44912) *
               C44851 * C44803 * C44908 -
           ((C15983 + C15982) * C44912 + (C15981 + C15980) * C15222 +
            (C15158 * C158 + C44903 * C291 + C15156 * C157 + C15151 * C290) *
                C15153 +
            (C15158 * C95 + C44903 * C100 + C15156 * C94 + C15151 * C99) *
                C15221) *
               C44851 * C44803 * C1806) *
              C44906)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[30] += (2 * std::pow(Pi, 2.5) *
                   ((((C15397 * C93 + C15400 + C15400 + C15153 * C333 +
                       C15398 * C642 + C15401 + C15401 + C44912 * C904) *
                          C15151 +
                      (C15424 + C15425) * C44903) *
                         C44851 * C44803 * C1806 -
                     ((C16064 + C16065) * C44903 +
                      (C15398 * C2252 + C16056 + C16056 + C44912 * C2431 +
                       C15397 * C642 + C16057 + C16057 + C15153 * C904) *
                          C15151) *
                         C44851 * C44803 * C44908) *
                        C1808 +
                    (((C16065 + C16064) * C15151 +
                      (C15397 * C640 + C16058 + C16058 + C15153 * C902 +
                       C15398 * C2254 + C16059 + C16059 + C44912 * C2433) *
                          C44903) *
                         C44851 * C44803 * C44908 -
                     ((C15426 + C15427) * C44903 + (C15425 + C15424) * C15151) *
                         C44851 * C44803 * C1806) *
                        C44906)) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[30] += (2 * std::pow(Pi, 2.5) *
                   (((((C222 * C93 + C44851 * C223) * C15221 +
                       (C222 * C156 + C44851 * C396) * C15153 + C5196 * C15222 +
                       C5447 * C44912) *
                          C15151 +
                      (C15478 + C15479 + C15480 + C15481) * C44903) *
                         C44803 * C1806 -
                     ((C16132 + C16133 + C16134 + C16135) * C44903 +
                      (C7288 * C44912 + C7111 * C15222 + C5447 * C15153 +
                       C5196 * C15221) *
                          C15151) *
                         C44803 * C44908) *
                        C1808 +
                    (((C16135 + C16134 + C16133 + C16132) * C15151 +
                      (C796 * C15221 + C981 * C15153 +
                       (C222 * C2254 + C44851 * C2348) * C15222 +
                       (C222 * C2304 + C44851 * C2477) * C44912) *
                          C44903) *
                         C44803 * C44908 -
                     ((C15482 + C15483 + C15484 + C15485) * C44903 +
                      (C15481 + C15480 + C15479 + C15478) * C15151) *
                         C44803 * C1806) *
                        C44906)) /
                  (p * q * std::sqrt(p + q));
    d2eezx[30] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C15156 * C93 + C15151 * C98 + C15158 * C94 + C44903 * C99) *
                 C222 +
             (C15156 * C223 + C15151 * C455 + C15158 * C224 + C44903 * C456) *
                 C44851) *
                C15153 +
            ((C15976 + C15977) * C222 + (C16210 + C16211) * C44851) * C44912) *
               C44803 * C1806 -
           (((C15158 * C2347 + C44903 * C2517 + C15156 * C2346 +
              C15151 * C2516) *
                 C44851 +
             (C15158 * C2253 + C44903 * C2256 + C15156 * C2252 +
              C15151 * C2255) *
                 C222) *
                C44912 +
            ((C16211 + C16210) * C44851 + (C15977 + C15976) * C222) * C15153) *
               C44803 * C44908) *
              C1808 +
          ((((C15980 + C15981) * C222 + (C16212 + C16213) * C44851) * C15153 +
            ((C15156 * C2253 + C15151 * C2256 + C15158 * C2254 +
              C44903 * C2257) *
                 C222 +
             (C15156 * C2347 + C15151 * C2517 + C15158 * C2348 +
              C44903 * C2518) *
                 C44851) *
                C44912) *
               C44803 * C44908 -
           (((C16213 + C16212) * C44851 + (C15981 + C15980) * C222) * C44912 +
            ((C15158 * C225 + C44903 * C457 + C15156 * C224 + C15151 * C456) *
                 C44851 +
             (C15158 * C95 + C44903 * C100 + C15156 * C94 + C15151 * C99) *
                 C222) *
                C15153) *
               C44803 * C1806) *
              C44906)) /
        (p * q * std::sqrt(p + q));
    d2eezy[30] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C15221 * C93 + C15153 * C156 + C15222 * C642 + C44912 * C710) *
                 C222 +
             (C15221 * C223 + C15153 * C498 + C15222 * C780 + C44912 * C1090) *
                 C44851) *
                C15151 +
            ((C15240 + C15241) * C222 + (C15594 + C15595) * C44851) * C44903) *
               C44803 * C1806 -
           (((C16284 + C16285) * C44851 + (C15818 + C15819) * C222) * C44903 +
            ((C15222 * C2346 + C44912 * C2557 + C15221 * C780 +
              C15153 * C1090) *
                 C44851 +
             (C15222 * C2252 + C44912 * C2302 + C15221 * C642 + C15153 * C710) *
                 C222) *
                C15151) *
               C44803 * C44908) *
              C1808 +
          ((((C15819 + C15818) * C222 + (C16285 + C16284) * C44851) * C15151 +
            ((C15221 * C640 + C15153 * C708 + C15222 * C2254 + C44912 * C2304) *
                 C222 +
             (C15221 * C778 + C15153 * C1088 + C15222 * C2348 +
              C44912 * C2559) *
                 C44851) *
                C44903) *
               C44803 * C44908 -
           (((C15596 + C15597) * C44851 + (C15246 + C15247) * C222) * C44903 +
            ((C15595 + C15594) * C44851 + (C15241 + C15240) * C222) * C15151) *
               C44803 * C1806) *
              C44906)) /
        (p * q * std::sqrt(p + q));
    d2eezz[30] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C557 * C93 + C564 + C564 + C44851 * C558) * C15153 +
             C5675 * C44912) *
                C15151 +
            (C15648 + C15649) * C44903) *
               C44803 * C1806 -
           ((C16352 + C16353) * C44903 +
            (C7457 * C44912 + C5675 * C15153) * C15151) *
               C44803 * C44908) *
              C1808 +
          (((C16353 + C16352) * C15151 +
            (C1169 * C15153 +
             (C557 * C2254 + C2604 + C2604 + C44851 * C2600) * C44912) *
                C44903) *
               C44803 * C44908 -
           ((C15650 + C15651) * C44903 + (C15649 + C15648) * C15151) * C44803 *
               C1806) *
              C44906)) /
        (p * q * std::sqrt(p + q));
    d2eexx[31] += (2 * std::pow(Pi, 2.5) *
                   (((C15155 * C93 + C15160 + C15160 + C15151 * C103 +
                      C15157 * C94 + C15161 + C15161 + C44903 * C104) *
                         C44851 * C15153 +
                     (C15738 + C15739) * C44851 * C44912) *
                        C44803 * C2248 -
                    ((C17650 + C17651) * C44851 * C44912 +
                     (C15739 + C15738) * C44851 * C15153) *
                        C44803 * C2249 +
                    ((C17651 + C17650) * C44851 * C15153 +
                     (C15155 * C6977 + C17644 + C17644 + C15151 * C6981 +
                      C15157 * C6978 + C17645 + C17645 + C44903 * C6982) *
                         C44851 * C44912) *
                        C44803 * C2250) *
                   C44752) /
                  (p * q * std::sqrt(p + q));
    d2eexy[31] +=
        (2 * std::pow(Pi, 2.5) *
         (((C15221 * C93 + C15153 * C156 + C15222 * C642 + C44912 * C710) *
               C15156 +
           (C15221 * C98 + C15153 * C161 + C15222 * C646 + C44912 * C714) *
               C15151 +
           (C15240 + C15241) * C15158 + (C15242 + C15243) * C44903) *
              C44851 * C44803 * C2248 -
          ((C15816 + C15817) * C44903 + (C15818 + C15819) * C15158 +
           (C15222 * C2255 + C44912 * C2305 + C15221 * C646 + C15153 * C714) *
               C15151 +
           (C15222 * C2252 + C44912 * C2302 + C15221 * C642 + C15153 * C710) *
               C15156) *
              C44851 * C44803 * C2249 +
          ((C15221 * C2252 + C15153 * C2302 + C15222 * C6977 + C44912 * C7045) *
               C15156 +
           (C15221 * C2255 + C15153 * C2305 + C15222 * C6979 + C44912 * C7047) *
               C15151 +
           (C15221 * C2253 + C15153 * C2303 + C15222 * C6978 + C44912 * C7046) *
               C15158 +
           (C15221 * C2256 + C15153 * C2306 + C15222 * C6980 + C44912 * C7048) *
               C44903) *
              C44851 * C44803 * C2250) *
         C44752) /
        (p * q * std::sqrt(p + q));
    d2eexz[31] += (2 * std::pow(Pi, 2.5) *
                   ((((C222 * C93 + C44851 * C223) * C15156 +
                      (C222 * C98 + C44851 * C228) * C15151 + C246 * C15158 +
                      C247 * C44903) *
                         C15153 +
                     (C15886 + C15887 + C15888 + C15889) * C44912) *
                        C44803 * C2248 -
                    ((C17752 + C17753 + C17754 + C17755) * C44912 +
                     (C15889 + C15888 + C15887 + C15886) * C15153) *
                        C44803 * C2249 +
                    ((C17755 + C17754 + C17753 + C17752) * C15153 +
                     ((C222 * C6977 + C44851 * C7099) * C15156 +
                      (C222 * C6979 + C44851 * C7101) * C15151 +
                      (C222 * C6978 + C44851 * C7100) * C15158 +
                      (C222 * C6980 + C44851 * C7102) * C44903) *
                         C44912) *
                        C44803 * C2250) *
                   C44752) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[31] +=
        (2 * std::pow(Pi, 2.5) *
         (((C15156 * C93 + C15151 * C98 + C15158 * C94 + C44903 * C99) *
               C15221 +
           (C15156 * C156 + C15151 * C289 + C15158 * C157 + C44903 * C290) *
               C15153 +
           (C15976 + C15977) * C15222 + (C15978 + C15979) * C44912) *
              C44851 * C44803 * C2248 -
          ((C17814 + C17815) * C44912 + (C17816 + C17817) * C15222 +
           (C15979 + C15978) * C15153 + (C15977 + C15976) * C15221) *
              C44851 * C44803 * C2249 +
          ((C17817 + C17816) * C15221 + (C17815 + C17814) * C15153 +
           (C15156 * C6977 + C15151 * C6979 + C15158 * C6978 + C44903 * C6980) *
               C15222 +
           (C15156 * C7045 + C15151 * C7163 + C15158 * C7046 + C44903 * C7164) *
               C44912) *
              C44851 * C44803 * C2250) *
         C44752) /
        (p * q * std::sqrt(p + q));
    d2eeyy[31] += (2 * std::pow(Pi, 2.5) *
                   (((C15397 * C93 + C15400 + C15400 + C15153 * C333 +
                      C15398 * C642 + C15401 + C15401 + C44912 * C904) *
                         C15151 +
                     (C15424 + C15425) * C44903) *
                        C44851 * C44803 * C2248 -
                    ((C16064 + C16065) * C44903 +
                     (C15398 * C2252 + C16056 + C16056 + C44912 * C2431 +
                      C15397 * C642 + C16057 + C16057 + C15153 * C904) *
                         C15151) *
                        C44851 * C44803 * C2249 +
                    ((C15397 * C2252 + C17868 + C17868 + C15153 * C2431 +
                      C15398 * C6977 + C17869 + C17869 + C44912 * C7227) *
                         C15151 +
                     (C15397 * C2253 + C17870 + C17870 + C15153 * C2432 +
                      C15398 * C6978 + C17871 + C17871 + C44912 * C7228) *
                         C44903) *
                        C44851 * C44803 * C2250) *
                   C44752) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[31] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C222 * C93 + C44851 * C223) * C15221 +
            (C222 * C156 + C44851 * C396) * C15153 + C5196 * C15222 +
            C5447 * C44912) *
               C15151 +
           (C15478 + C15479 + C15480 + C15481) * C44903) *
              C44803 * C2248 -
          ((C16132 + C16133 + C16134 + C16135) * C44903 +
           (C7288 * C44912 + C7111 * C15222 + C5447 * C15153 + C5196 * C15221) *
               C15151) *
              C44803 * C2249 +
          ((C7111 * C15221 + C7288 * C15153 +
            (C222 * C6977 + C44851 * C7099) * C15222 +
            (C222 * C7045 + C44851 * C7283) * C44912) *
               C15151 +
           (C5199 * C15221 + C5448 * C15153 +
            (C222 * C6978 + C44851 * C7100) * C15222 +
            (C222 * C7046 + C44851 * C7284) * C44912) *
               C44903) *
              C44803 * C2250) *
         C44752) /
        (p * q * std::sqrt(p + q));
    d2eezx[31] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C15156 * C93 + C15151 * C98 + C15158 * C94 + C44903 * C99) * C222 +
            (C15156 * C223 + C15151 * C455 + C15158 * C224 + C44903 * C456) *
                C44851) *
               C15153 +
           ((C15976 + C15977) * C222 + (C16210 + C16211) * C44851) * C44912) *
              C44803 * C2248 -
          (((C17976 + C17977) * C44851 + (C17816 + C17817) * C222) * C44912 +
           ((C16211 + C16210) * C44851 + (C15977 + C15976) * C222) * C15153) *
              C44803 * C2249 +
          (((C17817 + C17816) * C222 + (C17977 + C17976) * C44851) * C15153 +
           ((C15156 * C6977 + C15151 * C6979 + C15158 * C6978 +
             C44903 * C6980) *
                C222 +
            (C15156 * C7099 + C15151 * C7338 + C15158 * C7100 +
             C44903 * C7339) *
                C44851) *
               C44912) *
              C44803 * C2250) *
         C44752) /
        (p * q * std::sqrt(p + q));
    d2eezy[31] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C15221 * C93 + C15153 * C156 + C15222 * C642 + C44912 * C710) *
                C222 +
            (C15221 * C223 + C15153 * C498 + C15222 * C780 + C44912 * C1090) *
                C44851) *
               C15151 +
           ((C15240 + C15241) * C222 + (C15594 + C15595) * C44851) * C44903) *
              C44803 * C2248 -
          (((C16284 + C16285) * C44851 + (C15818 + C15819) * C222) * C44903 +
           ((C15222 * C2346 + C44912 * C2557 + C15221 * C780 + C15153 * C1090) *
                C44851 +
            (C15222 * C2252 + C44912 * C2302 + C15221 * C642 + C15153 * C710) *
                C222) *
               C15151) *
              C44803 * C2249 +
          (((C15221 * C2252 + C15153 * C2302 + C15222 * C6977 +
             C44912 * C7045) *
                C222 +
            (C15221 * C2346 + C15153 * C2557 + C15222 * C7099 +
             C44912 * C7396) *
                C44851) *
               C15151 +
           ((C15221 * C2253 + C15153 * C2303 + C15222 * C6978 +
             C44912 * C7046) *
                C222 +
            (C15221 * C2347 + C15153 * C2558 + C15222 * C7100 +
             C44912 * C7397) *
                C44851) *
               C44903) *
              C44803 * C2250) *
         C44752) /
        (p * q * std::sqrt(p + q));
    d2eezz[31] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C557 * C93 + C564 + C564 + C44851 * C558) * C15153 +
            C5675 * C44912) *
               C15151 +
           (C15648 + C15649) * C44903) *
              C44803 * C2248 -
          ((C16352 + C16353) * C44903 +
           (C7457 * C44912 + C5675 * C15153) * C15151) *
              C44803 * C2249 +
          ((C7457 * C15153 +
            (C557 * C6977 + C7453 + C7453 + C44851 * C7448) * C44912) *
               C15151 +
           (C5676 * C15153 +
            (C557 * C6978 + C7454 + C7454 + C44851 * C7449) * C44912) *
               C44903) *
              C44803 * C2250) *
         C44752) /
        (p * q * std::sqrt(p + q));
    d2eexx[32] += (2 * std::pow(Pi, 2.5) *
                   ((((C15155 * C93 + C15160 + C15160 + C15151 * C103 +
                       C15157 * C94 + C15161 + C15161 + C44903 * C104) *
                          C44851 * C15153 +
                      (C15738 + C15739) * C44851 * C44912) *
                         C1222 -
                     ((C18154 + C18155) * C44851 * C44912 +
                      (C15157 * C1225 + C16422 + C16422 + C44903 * C1233 +
                       C15155 * C1226 + C16423 + C16423 + C15151 * C1234) *
                          C44851 * C15153) *
                         C44910) *
                        C1806 +
                    (((C18155 + C18154) * C44851 * C15153 +
                      (C15155 * C7523 + C18148 + C18148 + C15151 * C7527 +
                       C15157 * C7524 + C18149 + C18149 + C44903 * C7528) *
                          C44851 * C44912) *
                         C44910 -
                     ((C17650 + C17651) * C44851 * C44912 +
                      (C15739 + C15738) * C44851 * C15153) *
                         C1222) *
                        C44908) *
                   C44752) /
                  (p * q * std::sqrt(p + q));
    d2eexy[32] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C15221 * C93 + C15153 * C156 + C15222 * C642 + C44912 * C710) *
                C15156 +
            (C15221 * C98 + C15153 * C161 + C15222 * C646 + C44912 * C714) *
                C15151 +
            (C15240 + C15241) * C15158 + (C15242 + C15243) * C44903) *
               C44851 * C1222 -
           ((C16502 + C16503) * C44903 + (C16504 + C16505) * C15158 +
            (C15222 * C2657 + C44912 * C2719 + C15221 * C1230 +
             C15153 * C1298) *
                C15151 +
            (C15222 * C2654 + C44912 * C2716 + C15221 * C1226 +
             C15153 * C1294) *
                C15156) *
               C44851 * C44910) *
              C1806 +
          (((C15221 * C2654 + C15153 * C2716 + C15222 * C7523 +
             C44912 * C7607) *
                C15156 +
            (C15221 * C2657 + C15153 * C2719 + C15222 * C7525 +
             C44912 * C7609) *
                C15151 +
            (C15221 * C2655 + C15153 * C2717 + C15222 * C7524 +
             C44912 * C7608) *
                C15158 +
            (C15221 * C2658 + C15153 * C2720 + C15222 * C7526 +
             C44912 * C7610) *
                C44903) *
               C44851 * C44910 -
           ((C15816 + C15817) * C44903 + (C15818 + C15819) * C15158 +
            (C15222 * C2255 + C44912 * C2305 + C15221 * C646 + C15153 * C714) *
                C15151 +
            (C15222 * C2252 + C44912 * C2302 + C15221 * C642 + C15153 * C710) *
                C15156) *
               C44851 * C1222) *
              C44908) *
         C44752) /
        (p * q * std::sqrt(p + q));
    d2eexz[32] += (2 * std::pow(Pi, 2.5) *
                   (((((C222 * C93 + C44851 * C223) * C15156 +
                       (C222 * C98 + C44851 * C228) * C15151 + C246 * C15158 +
                       C247 * C44903) *
                          C15153 +
                      (C15886 + C15887 + C15888 + C15889) * C44912) *
                         C1222 -
                     ((C18288 + C18289 + C18290 + C18291) * C44912 +
                      (C1381 * C44903 + C1382 * C15158 +
                       (C222 * C1230 + C44851 * C1368) * C15151 +
                       (C222 * C1226 + C44851 * C1364) * C15156) *
                          C15153) *
                         C44910) *
                        C1806 +
                    (((C18291 + C18290 + C18289 + C18288) * C15153 +
                      ((C222 * C7523 + C44851 * C7677) * C15156 +
                       (C222 * C7525 + C44851 * C7679) * C15151 +
                       (C222 * C7524 + C44851 * C7678) * C15158 +
                       (C222 * C7526 + C44851 * C7680) * C44903) *
                          C44912) *
                         C44910 -
                     ((C17752 + C17753 + C17754 + C17755) * C44912 +
                      (C15889 + C15888 + C15887 + C15886) * C15153) *
                         C1222) *
                        C44908) *
                   C44752) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[32] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C15156 * C93 + C15151 * C98 + C15158 * C94 + C44903 * C99) *
                C15221 +
            (C15156 * C156 + C15151 * C289 + C15158 * C157 + C44903 * C290) *
                C15153 +
            (C15976 + C15977) * C15222 + (C15978 + C15979) * C44912) *
               C44851 * C1222 -
           ((C18366 + C18367) * C44912 + (C18368 + C18369) * C15222 +
            (C15158 * C1293 + C44903 * C1433 + C15156 * C1294 +
             C15151 * C1434) *
                C15153 +
            (C15158 * C1225 + C44903 * C1229 + C15156 * C1226 +
             C15151 * C1230) *
                C15221) *
               C44851 * C44910) *
              C1806 +
          (((C18369 + C18368) * C15221 + (C18367 + C18366) * C15153 +
            (C15156 * C7523 + C15151 * C7525 + C15158 * C7524 +
             C44903 * C7526) *
                C15222 +
            (C15156 * C7607 + C15151 * C7757 + C15158 * C7608 +
             C44903 * C7758) *
                C44912) *
               C44851 * C44910 -
           ((C17814 + C17815) * C44912 + (C17816 + C17817) * C15222 +
            (C15979 + C15978) * C15153 + (C15977 + C15976) * C15221) *
               C44851 * C1222) *
              C44908) *
         C44752) /
        (p * q * std::sqrt(p + q));
    d2eeyy[32] += (2 * std::pow(Pi, 2.5) *
                   ((((C15397 * C93 + C15400 + C15400 + C15153 * C333 +
                       C15398 * C642 + C15401 + C15401 + C44912 * C904) *
                          C15151 +
                      (C15424 + C15425) * C44903) *
                         C44851 * C1222 -
                     ((C16718 + C16719) * C44903 +
                      (C15398 * C2654 + C16710 + C16710 + C44912 * C2881 +
                       C15397 * C1226 + C16711 + C16711 + C15153 * C1488) *
                          C15151) *
                         C44851 * C44910) *
                        C1806 +
                    (((C15397 * C2654 + C18436 + C18436 + C15153 * C2881 +
                       C15398 * C7523 + C18437 + C18437 + C44912 * C7837) *
                          C15151 +
                      (C15397 * C2655 + C18438 + C18438 + C15153 * C2882 +
                       C15398 * C7524 + C18439 + C18439 + C44912 * C7838) *
                          C44903) *
                         C44851 * C44910 -
                     ((C16064 + C16065) * C44903 +
                      (C15398 * C2252 + C16056 + C16056 + C44912 * C2431 +
                       C15397 * C642 + C16057 + C16057 + C15153 * C904) *
                          C15151) *
                         C44851 * C1222) *
                        C44908) *
                   C44752) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[32] += (2 * std::pow(Pi, 2.5) *
                   (((((C222 * C93 + C44851 * C223) * C15221 +
                       (C222 * C156 + C44851 * C396) * C15153 + C5196 * C15222 +
                       C5447 * C44912) *
                          C15151 +
                      (C15478 + C15479 + C15480 + C15481) * C44903) *
                         C1222 -
                     ((C16786 + C16787 + C16788 + C16789) * C44903 +
                      (C7914 * C44912 + C7689 * C15222 +
                       (C222 * C1294 + C44851 * C1556) * C15153 +
                       (C222 * C1226 + C44851 * C1364) * C15221) *
                          C15151) *
                         C44910) *
                        C1806 +
                    (((C7689 * C15221 + C7914 * C15153 +
                       (C222 * C7523 + C44851 * C7677) * C15222 +
                       (C222 * C7607 + C44851 * C7909) * C44912) *
                          C15151 +
                      (C5901 * C15221 + C6121 * C15153 +
                       (C222 * C7524 + C44851 * C7678) * C15222 +
                       (C222 * C7608 + C44851 * C7910) * C44912) *
                          C44903) *
                         C44910 -
                     ((C16132 + C16133 + C16134 + C16135) * C44903 +
                      (C7288 * C44912 + C7111 * C15222 + C5447 * C15153 +
                       C5196 * C15221) *
                          C15151) *
                         C1222) *
                        C44908) *
                   C44752) /
                  (p * q * std::sqrt(p + q));
    d2eezx[32] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C15156 * C93 + C15151 * C98 + C15158 * C94 + C44903 * C99) *
                 C222 +
             (C15156 * C223 + C15151 * C455 + C15158 * C224 + C44903 * C456) *
                 C44851) *
                C15153 +
            ((C15976 + C15977) * C222 + (C16210 + C16211) * C44851) * C44912) *
               C1222 -
           (((C18576 + C18577) * C44851 + (C18368 + C18369) * C222) * C44912 +
            ((C15158 * C1363 + C44903 * C1619 + C15156 * C1364 +
              C15151 * C1620) *
                 C44851 +
             (C15158 * C1225 + C44903 * C1229 + C15156 * C1226 +
              C15151 * C1230) *
                 C222) *
                C15153) *
               C44910) *
              C1806 +
          ((((C18369 + C18368) * C222 + (C18577 + C18576) * C44851) * C15153 +
            ((C15156 * C7523 + C15151 * C7525 + C15158 * C7524 +
              C44903 * C7526) *
                 C222 +
             (C15156 * C7677 + C15151 * C7980 + C15158 * C7678 +
              C44903 * C7981) *
                 C44851) *
                C44912) *
               C44910 -
           (((C17976 + C17977) * C44851 + (C17816 + C17817) * C222) * C44912 +
            ((C16211 + C16210) * C44851 + (C15977 + C15976) * C222) * C15153) *
               C1222) *
              C44908) *
         C44752) /
        (p * q * std::sqrt(p + q));
    d2eezy[32] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C15221 * C93 + C15153 * C156 + C15222 * C642 + C44912 * C710) *
                 C222 +
             (C15221 * C223 + C15153 * C498 + C15222 * C780 + C44912 * C1090) *
                 C44851) *
                C15151 +
            ((C15240 + C15241) * C222 + (C15594 + C15595) * C44851) * C44903) *
               C1222 -
           (((C16926 + C16927) * C44851 + (C16504 + C16505) * C222) * C44903 +
            ((C15222 * C2772 + C44912 * C3043 + C15221 * C1364 +
              C15153 * C1674) *
                 C44851 +
             (C15222 * C2654 + C44912 * C2716 + C15221 * C1226 +
              C15153 * C1294) *
                 C222) *
                C15151) *
               C44910) *
              C1806 +
          ((((C15221 * C2654 + C15153 * C2716 + C15222 * C7523 +
              C44912 * C7607) *
                 C222 +
             (C15221 * C2772 + C15153 * C3043 + C15222 * C7677 +
              C44912 * C8054) *
                 C44851) *
                C15151 +
            ((C15221 * C2655 + C15153 * C2717 + C15222 * C7524 +
              C44912 * C7608) *
                 C222 +
             (C15221 * C2773 + C15153 * C3044 + C15222 * C7678 +
              C44912 * C8055) *
                 C44851) *
                C44903) *
               C44910 -
           (((C16284 + C16285) * C44851 + (C15818 + C15819) * C222) * C44903 +
            ((C15222 * C2346 + C44912 * C2557 + C15221 * C780 +
              C15153 * C1090) *
                 C44851 +
             (C15222 * C2252 + C44912 * C2302 + C15221 * C642 + C15153 * C710) *
                 C222) *
                C15151) *
               C1222) *
              C44908) *
         C44752) /
        (p * q * std::sqrt(p + q));
    d2eezz[32] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C557 * C93 + C564 + C564 + C44851 * C558) * C15153 +
             C5675 * C44912) *
                C15151 +
            (C15648 + C15649) * C44903) *
               C1222 -
           ((C16994 + C16995) * C44903 +
            (C8131 * C44912 +
             (C557 * C1226 + C1747 + C1747 + C44851 * C1738) * C15153) *
                C15151) *
               C44910) *
              C1806 +
          (((C8131 * C15153 +
             (C557 * C7523 + C8127 + C8127 + C44851 * C8122) * C44912) *
                C15151 +
            (C6332 * C15153 +
             (C557 * C7524 + C8128 + C8128 + C44851 * C8123) * C44912) *
                C44903) *
               C44910 -
           ((C16352 + C16353) * C44903 +
            (C7457 * C44912 + C5675 * C15153) * C15151) *
               C1222) *
              C44908) *
         C44752) /
        (p * q * std::sqrt(p + q));
    d2eexx[33] += (2 * std::pow(Pi, 2.5) *
                   ((((C15155 * C93 + C15160 + C15160 + C15151 * C103 +
                       C15157 * C94 + C15161 + C15161 + C44903 * C104) *
                          C44851 * C15153 +
                      (C15738 + C15739) * C44851 * C44912) *
                         C3152 -
                     ((C18154 + C18155) * C44851 * C44912 +
                      (C15157 * C1225 + C16422 + C16422 + C44903 * C1233 +
                       C15155 * C1226 + C16423 + C16423 + C15151 * C1234) *
                          C44851 * C15153) *
                         C44910) *
                        C44786 * C1808 +
                    (((C15155 * C1225 + C16424 + C16424 + C15151 * C1233 +
                       C15157 * C1224 + C16425 + C16425 + C44903 * C1232) *
                          C44851 * C15153 +
                      (C15155 * C2655 + C16426 + C16426 + C15151 * C2661 +
                       C15157 * C2656 + C16427 + C16427 + C44903 * C2662) *
                          C44851 * C44912) *
                         C44910 -
                     ((C15741 + C15740) * C44851 * C44912 +
                      (C15157 * C95 + C15166 + C15166 + C44903 * C105 +
                       C15155 * C94 + C15167 + C15167 + C15151 * C104) *
                          C44851 * C15153) *
                         C3152) *
                        C44786 * C44906)) /
                  (p * q * std::sqrt(p + q));
    d2eexy[33] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C15221 * C93 + C15153 * C156 + C15222 * C642 + C44912 * C710) *
                C15156 +
            (C15221 * C98 + C15153 * C161 + C15222 * C646 + C44912 * C714) *
                C15151 +
            (C15240 + C15241) * C15158 + (C15242 + C15243) * C44903) *
               C44851 * C3152 -
           ((C16502 + C16503) * C44903 + (C16504 + C16505) * C15158 +
            (C15222 * C2657 + C44912 * C2719 + C15221 * C1230 +
             C15153 * C1298) *
                C15151 +
            (C15222 * C2654 + C44912 * C2716 + C15221 * C1226 +
             C15153 * C1294) *
                C15156) *
               C44851 * C44910) *
              C44786 * C1808 +
          (((C16505 + C16504) * C15156 + (C16503 + C16502) * C15151 +
            (C15221 * C1224 + C15153 * C1292 + C15222 * C2656 +
             C44912 * C2718) *
                C15158 +
            (C15221 * C1228 + C15153 * C1296 + C15222 * C2659 +
             C44912 * C2721) *
                C44903) *
               C44851 * C44910 -
           ((C15244 + C15245) * C44903 + (C15246 + C15247) * C15158 +
            (C15243 + C15242) * C15151 + (C15241 + C15240) * C15156) *
               C44851 * C3152) *
              C44786 * C44906)) /
        (p * q * std::sqrt(p + q));
    d2eexz[33] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C222 * C93 + C44851 * C223) * C15156 +
             (C222 * C98 + C44851 * C228) * C15151 + C246 * C15158 +
             C247 * C44903) *
                C15153 +
            (C15886 + C15887 + C15888 + C15889) * C44912) *
               C3152 -
           ((C18288 + C18289 + C18290 + C18291) * C44912 +
            (C1381 * C44903 + C1382 * C15158 +
             (C222 * C1230 + C44851 * C1368) * C15151 +
             (C222 * C1226 + C44851 * C1364) * C15156) *
                C15153) *
               C44910) *
              C44786 * C1808 +
          (((C1382 * C15156 + C1381 * C15151 + C1380 * C15158 +
             C1379 * C44903) *
                C15153 +
            (C5901 * C15156 + C5900 * C15151 +
             (C222 * C2656 + C44851 * C2774) * C15158 +
             (C222 * C2659 + C44851 * C2777) * C44903) *
                C44912) *
               C44910 -
           ((C15893 + C15892 + C15891 + C15890) * C44912 +
            (C249 * C44903 + C248 * C15158 + C247 * C15151 + C246 * C15156) *
                C15153) *
               C3152) *
              C44786 * C44906)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[33] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C15156 * C93 + C15151 * C98 + C15158 * C94 + C44903 * C99) *
                C15221 +
            (C15156 * C156 + C15151 * C289 + C15158 * C157 + C44903 * C290) *
                C15153 +
            (C15976 + C15977) * C15222 + (C15978 + C15979) * C44912) *
               C44851 * C3152 -
           ((C18366 + C18367) * C44912 + (C18368 + C18369) * C15222 +
            (C15158 * C1293 + C44903 * C1433 + C15156 * C1294 +
             C15151 * C1434) *
                C15153 +
            (C15158 * C1225 + C44903 * C1229 + C15156 * C1226 +
             C15151 * C1230) *
                C15221) *
               C44851 * C44910) *
              C44786 * C1808 +
          (((C15156 * C1225 + C15151 * C1229 + C15158 * C1224 +
             C44903 * C1228) *
                C15221 +
            (C15156 * C1293 + C15151 * C1433 + C15158 * C1292 +
             C44903 * C1432) *
                C15153 +
            (C15156 * C2655 + C15151 * C2658 + C15158 * C2656 +
             C44903 * C2659) *
                C15222 +
            (C15156 * C2717 + C15151 * C2829 + C15158 * C2718 +
             C44903 * C2830) *
                C44912) *
               C44851 * C44910 -
           ((C15983 + C15982) * C44912 + (C15981 + C15980) * C15222 +
            (C15158 * C158 + C44903 * C291 + C15156 * C157 + C15151 * C290) *
                C15153 +
            (C15158 * C95 + C44903 * C100 + C15156 * C94 + C15151 * C99) *
                C15221) *
               C44851 * C3152) *
              C44786 * C44906)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[33] += (2 * std::pow(Pi, 2.5) *
                   ((((C15397 * C93 + C15400 + C15400 + C15153 * C333 +
                       C15398 * C642 + C15401 + C15401 + C44912 * C904) *
                          C15151 +
                      (C15424 + C15425) * C44903) *
                         C44851 * C3152 -
                     ((C16718 + C16719) * C44903 +
                      (C15398 * C2654 + C16710 + C16710 + C44912 * C2881 +
                       C15397 * C1226 + C16711 + C16711 + C15153 * C1488) *
                          C15151) *
                         C44851 * C44910) *
                        C44786 * C1808 +
                    (((C16719 + C16718) * C15151 +
                      (C15397 * C1224 + C16712 + C16712 + C15153 * C1486 +
                       C15398 * C2656 + C16713 + C16713 + C44912 * C2883) *
                          C44903) *
                         C44851 * C44910 -
                     ((C15426 + C15427) * C44903 + (C15425 + C15424) * C15151) *
                         C44851 * C3152) *
                        C44786 * C44906)) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[33] += (2 * std::pow(Pi, 2.5) *
                   (((((C222 * C93 + C44851 * C223) * C15221 +
                       (C222 * C156 + C44851 * C396) * C15153 + C5196 * C15222 +
                       C5447 * C44912) *
                          C15151 +
                      (C15478 + C15479 + C15480 + C15481) * C44903) *
                         C3152 -
                     ((C16786 + C16787 + C16788 + C16789) * C44903 +
                      (C7914 * C44912 + C7689 * C15222 +
                       (C222 * C1294 + C44851 * C1556) * C15153 +
                       (C222 * C1226 + C44851 * C1364) * C15221) *
                          C15151) *
                         C44910) *
                        C44786 * C1808 +
                    (((C16789 + C16788 + C16787 + C16786) * C15151 +
                      (C1380 * C15221 + C1565 * C15153 +
                       (C222 * C2656 + C44851 * C2774) * C15222 +
                       (C222 * C2718 + C44851 * C2939) * C44912) *
                          C44903) *
                         C44910 -
                     ((C15482 + C15483 + C15484 + C15485) * C44903 +
                      (C15481 + C15480 + C15479 + C15478) * C15151) *
                         C3152) *
                        C44786 * C44906)) /
                  (p * q * std::sqrt(p + q));
    d2eezx[33] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C15156 * C93 + C15151 * C98 + C15158 * C94 + C44903 * C99) *
                 C222 +
             (C15156 * C223 + C15151 * C455 + C15158 * C224 + C44903 * C456) *
                 C44851) *
                C15153 +
            ((C15976 + C15977) * C222 + (C16210 + C16211) * C44851) * C44912) *
               C3152 -
           (((C18576 + C18577) * C44851 + (C18368 + C18369) * C222) * C44912 +
            ((C15158 * C1363 + C44903 * C1619 + C15156 * C1364 +
              C15151 * C1620) *
                 C44851 +
             (C15158 * C1225 + C44903 * C1229 + C15156 * C1226 +
              C15151 * C1230) *
                 C222) *
                C15153) *
               C44910) *
              C44786 * C1808 +
          ((((C15156 * C1225 + C15151 * C1229 + C15158 * C1224 +
              C44903 * C1228) *
                 C222 +
             (C15156 * C1363 + C15151 * C1619 + C15158 * C1362 +
              C44903 * C1618) *
                 C44851) *
                C15153 +
            ((C15156 * C2655 + C15151 * C2658 + C15158 * C2656 +
              C44903 * C2659) *
                 C222 +
             (C15156 * C2773 + C15151 * C2991 + C15158 * C2774 +
              C44903 * C2992) *
                 C44851) *
                C44912) *
               C44910 -
           (((C16213 + C16212) * C44851 + (C15981 + C15980) * C222) * C44912 +
            ((C15158 * C225 + C44903 * C457 + C15156 * C224 + C15151 * C456) *
                 C44851 +
             (C15158 * C95 + C44903 * C100 + C15156 * C94 + C15151 * C99) *
                 C222) *
                C15153) *
               C3152) *
              C44786 * C44906)) /
        (p * q * std::sqrt(p + q));
    d2eezy[33] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C15221 * C93 + C15153 * C156 + C15222 * C642 + C44912 * C710) *
                 C222 +
             (C15221 * C223 + C15153 * C498 + C15222 * C780 + C44912 * C1090) *
                 C44851) *
                C15151 +
            ((C15240 + C15241) * C222 + (C15594 + C15595) * C44851) * C44903) *
               C3152 -
           (((C16926 + C16927) * C44851 + (C16504 + C16505) * C222) * C44903 +
            ((C15222 * C2772 + C44912 * C3043 + C15221 * C1364 +
              C15153 * C1674) *
                 C44851 +
             (C15222 * C2654 + C44912 * C2716 + C15221 * C1226 +
              C15153 * C1294) *
                 C222) *
                C15151) *
               C44910) *
              C44786 * C1808 +
          ((((C16505 + C16504) * C222 + (C16927 + C16926) * C44851) * C15151 +
            ((C15221 * C1224 + C15153 * C1292 + C15222 * C2656 +
              C44912 * C2718) *
                 C222 +
             (C15221 * C1362 + C15153 * C1672 + C15222 * C2774 +
              C44912 * C3045) *
                 C44851) *
                C44903) *
               C44910 -
           (((C15596 + C15597) * C44851 + (C15246 + C15247) * C222) * C44903 +
            ((C15595 + C15594) * C44851 + (C15241 + C15240) * C222) * C15151) *
               C3152) *
              C44786 * C44906)) /
        (p * q * std::sqrt(p + q));
    d2eezz[33] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C557 * C93 + C564 + C564 + C44851 * C558) * C15153 +
             C5675 * C44912) *
                C15151 +
            (C15648 + C15649) * C44903) *
               C3152 -
           ((C16994 + C16995) * C44903 +
            (C8131 * C44912 +
             (C557 * C1226 + C1747 + C1747 + C44851 * C1738) * C15153) *
                C15151) *
               C44910) *
              C44786 * C1808 +
          (((C16995 + C16994) * C15151 +
            (C1753 * C15153 +
             (C557 * C2656 + C3102 + C3102 + C44851 * C3098) * C44912) *
                C44903) *
               C44910 -
           ((C15650 + C15651) * C44903 + (C15649 + C15648) * C15151) * C3152) *
              C44786 * C44906)) /
        (p * q * std::sqrt(p + q));
    d2eexx[34] += (2 * std::pow(Pi, 2.5) *
                   ((((C15155 * C93 + C15160 + C15160 + C15151 * C103 +
                       C15157 * C94 + C15161 + C15161 + C44903 * C104) *
                          C44851 * C15153 +
                      (C15738 + C15739) * C44851 * C44912) *
                         C3152 -
                     ((C18154 + C18155) * C44851 * C44912 +
                      (C15157 * C1225 + C16422 + C16422 + C44903 * C1233 +
                       C15155 * C1226 + C16423 + C16423 + C15151 * C1234) *
                          C44851 * C15153) *
                         C44910) *
                        C636 +
                    (((C18155 + C18154) * C44851 * C15153 +
                      (C15155 * C7523 + C18148 + C18148 + C15151 * C7527 +
                       C15157 * C7524 + C18149 + C18149 + C44903 * C7528) *
                          C44851 * C44912) *
                         C44910 -
                     ((C17650 + C17651) * C44851 * C44912 +
                      (C15739 + C15738) * C44851 * C15153) *
                         C3152) *
                        C44908) *
                   C44752) /
                  (p * q * std::sqrt(p + q));
    d2eexy[34] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C15221 * C93 + C15153 * C156 + C15222 * C642 + C44912 * C710) *
                C15156 +
            (C15221 * C98 + C15153 * C161 + C15222 * C646 + C44912 * C714) *
                C15151 +
            (C15240 + C15241) * C15158 + (C15242 + C15243) * C44903) *
               C44851 * C3152 -
           ((C16502 + C16503) * C44903 + (C16504 + C16505) * C15158 +
            (C15222 * C2657 + C44912 * C2719 + C15221 * C1230 +
             C15153 * C1298) *
                C15151 +
            (C15222 * C2654 + C44912 * C2716 + C15221 * C1226 +
             C15153 * C1294) *
                C15156) *
               C44851 * C44910) *
              C636 +
          (((C15221 * C2654 + C15153 * C2716 + C15222 * C7523 +
             C44912 * C7607) *
                C15156 +
            (C15221 * C2657 + C15153 * C2719 + C15222 * C7525 +
             C44912 * C7609) *
                C15151 +
            (C15221 * C2655 + C15153 * C2717 + C15222 * C7524 +
             C44912 * C7608) *
                C15158 +
            (C15221 * C2658 + C15153 * C2720 + C15222 * C7526 +
             C44912 * C7610) *
                C44903) *
               C44851 * C44910 -
           ((C15816 + C15817) * C44903 + (C15818 + C15819) * C15158 +
            (C15222 * C2255 + C44912 * C2305 + C15221 * C646 + C15153 * C714) *
                C15151 +
            (C15222 * C2252 + C44912 * C2302 + C15221 * C642 + C15153 * C710) *
                C15156) *
               C44851 * C3152) *
              C44908) *
         C44752) /
        (p * q * std::sqrt(p + q));
    d2eexz[34] += (2 * std::pow(Pi, 2.5) *
                   (((((C222 * C93 + C44851 * C223) * C15156 +
                       (C222 * C98 + C44851 * C228) * C15151 + C246 * C15158 +
                       C247 * C44903) *
                          C15153 +
                      (C15886 + C15887 + C15888 + C15889) * C44912) *
                         C3152 -
                     ((C18288 + C18289 + C18290 + C18291) * C44912 +
                      (C1381 * C44903 + C1382 * C15158 +
                       (C222 * C1230 + C44851 * C1368) * C15151 +
                       (C222 * C1226 + C44851 * C1364) * C15156) *
                          C15153) *
                         C44910) *
                        C636 +
                    (((C18291 + C18290 + C18289 + C18288) * C15153 +
                      ((C222 * C7523 + C44851 * C7677) * C15156 +
                       (C222 * C7525 + C44851 * C7679) * C15151 +
                       (C222 * C7524 + C44851 * C7678) * C15158 +
                       (C222 * C7526 + C44851 * C7680) * C44903) *
                          C44912) *
                         C44910 -
                     ((C17752 + C17753 + C17754 + C17755) * C44912 +
                      (C15889 + C15888 + C15887 + C15886) * C15153) *
                         C3152) *
                        C44908) *
                   C44752) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[34] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C15156 * C93 + C15151 * C98 + C15158 * C94 + C44903 * C99) *
                C15221 +
            (C15156 * C156 + C15151 * C289 + C15158 * C157 + C44903 * C290) *
                C15153 +
            (C15976 + C15977) * C15222 + (C15978 + C15979) * C44912) *
               C44851 * C3152 -
           ((C18366 + C18367) * C44912 + (C18368 + C18369) * C15222 +
            (C15158 * C1293 + C44903 * C1433 + C15156 * C1294 +
             C15151 * C1434) *
                C15153 +
            (C15158 * C1225 + C44903 * C1229 + C15156 * C1226 +
             C15151 * C1230) *
                C15221) *
               C44851 * C44910) *
              C636 +
          (((C18369 + C18368) * C15221 + (C18367 + C18366) * C15153 +
            (C15156 * C7523 + C15151 * C7525 + C15158 * C7524 +
             C44903 * C7526) *
                C15222 +
            (C15156 * C7607 + C15151 * C7757 + C15158 * C7608 +
             C44903 * C7758) *
                C44912) *
               C44851 * C44910 -
           ((C17814 + C17815) * C44912 + (C17816 + C17817) * C15222 +
            (C15979 + C15978) * C15153 + (C15977 + C15976) * C15221) *
               C44851 * C3152) *
              C44908) *
         C44752) /
        (p * q * std::sqrt(p + q));
    d2eeyy[34] += (2 * std::pow(Pi, 2.5) *
                   ((((C15397 * C93 + C15400 + C15400 + C15153 * C333 +
                       C15398 * C642 + C15401 + C15401 + C44912 * C904) *
                          C15151 +
                      (C15424 + C15425) * C44903) *
                         C44851 * C3152 -
                     ((C16718 + C16719) * C44903 +
                      (C15398 * C2654 + C16710 + C16710 + C44912 * C2881 +
                       C15397 * C1226 + C16711 + C16711 + C15153 * C1488) *
                          C15151) *
                         C44851 * C44910) *
                        C636 +
                    (((C15397 * C2654 + C18436 + C18436 + C15153 * C2881 +
                       C15398 * C7523 + C18437 + C18437 + C44912 * C7837) *
                          C15151 +
                      (C15397 * C2655 + C18438 + C18438 + C15153 * C2882 +
                       C15398 * C7524 + C18439 + C18439 + C44912 * C7838) *
                          C44903) *
                         C44851 * C44910 -
                     ((C16064 + C16065) * C44903 +
                      (C15398 * C2252 + C16056 + C16056 + C44912 * C2431 +
                       C15397 * C642 + C16057 + C16057 + C15153 * C904) *
                          C15151) *
                         C44851 * C3152) *
                        C44908) *
                   C44752) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[34] += (2 * std::pow(Pi, 2.5) *
                   (((((C222 * C93 + C44851 * C223) * C15221 +
                       (C222 * C156 + C44851 * C396) * C15153 + C5196 * C15222 +
                       C5447 * C44912) *
                          C15151 +
                      (C15478 + C15479 + C15480 + C15481) * C44903) *
                         C3152 -
                     ((C16786 + C16787 + C16788 + C16789) * C44903 +
                      (C7914 * C44912 + C7689 * C15222 +
                       (C222 * C1294 + C44851 * C1556) * C15153 +
                       (C222 * C1226 + C44851 * C1364) * C15221) *
                          C15151) *
                         C44910) *
                        C636 +
                    (((C7689 * C15221 + C7914 * C15153 +
                       (C222 * C7523 + C44851 * C7677) * C15222 +
                       (C222 * C7607 + C44851 * C7909) * C44912) *
                          C15151 +
                      (C5901 * C15221 + C6121 * C15153 +
                       (C222 * C7524 + C44851 * C7678) * C15222 +
                       (C222 * C7608 + C44851 * C7910) * C44912) *
                          C44903) *
                         C44910 -
                     ((C16132 + C16133 + C16134 + C16135) * C44903 +
                      (C7288 * C44912 + C7111 * C15222 + C5447 * C15153 +
                       C5196 * C15221) *
                          C15151) *
                         C3152) *
                        C44908) *
                   C44752) /
                  (p * q * std::sqrt(p + q));
    d2eezx[34] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C15156 * C93 + C15151 * C98 + C15158 * C94 + C44903 * C99) *
                 C222 +
             (C15156 * C223 + C15151 * C455 + C15158 * C224 + C44903 * C456) *
                 C44851) *
                C15153 +
            ((C15976 + C15977) * C222 + (C16210 + C16211) * C44851) * C44912) *
               C3152 -
           (((C18576 + C18577) * C44851 + (C18368 + C18369) * C222) * C44912 +
            ((C15158 * C1363 + C44903 * C1619 + C15156 * C1364 +
              C15151 * C1620) *
                 C44851 +
             (C15158 * C1225 + C44903 * C1229 + C15156 * C1226 +
              C15151 * C1230) *
                 C222) *
                C15153) *
               C44910) *
              C636 +
          ((((C18369 + C18368) * C222 + (C18577 + C18576) * C44851) * C15153 +
            ((C15156 * C7523 + C15151 * C7525 + C15158 * C7524 +
              C44903 * C7526) *
                 C222 +
             (C15156 * C7677 + C15151 * C7980 + C15158 * C7678 +
              C44903 * C7981) *
                 C44851) *
                C44912) *
               C44910 -
           (((C17976 + C17977) * C44851 + (C17816 + C17817) * C222) * C44912 +
            ((C16211 + C16210) * C44851 + (C15977 + C15976) * C222) * C15153) *
               C3152) *
              C44908) *
         C44752) /
        (p * q * std::sqrt(p + q));
    d2eezy[34] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C15221 * C93 + C15153 * C156 + C15222 * C642 + C44912 * C710) *
                 C222 +
             (C15221 * C223 + C15153 * C498 + C15222 * C780 + C44912 * C1090) *
                 C44851) *
                C15151 +
            ((C15240 + C15241) * C222 + (C15594 + C15595) * C44851) * C44903) *
               C3152 -
           (((C16926 + C16927) * C44851 + (C16504 + C16505) * C222) * C44903 +
            ((C15222 * C2772 + C44912 * C3043 + C15221 * C1364 +
              C15153 * C1674) *
                 C44851 +
             (C15222 * C2654 + C44912 * C2716 + C15221 * C1226 +
              C15153 * C1294) *
                 C222) *
                C15151) *
               C44910) *
              C636 +
          ((((C15221 * C2654 + C15153 * C2716 + C15222 * C7523 +
              C44912 * C7607) *
                 C222 +
             (C15221 * C2772 + C15153 * C3043 + C15222 * C7677 +
              C44912 * C8054) *
                 C44851) *
                C15151 +
            ((C15221 * C2655 + C15153 * C2717 + C15222 * C7524 +
              C44912 * C7608) *
                 C222 +
             (C15221 * C2773 + C15153 * C3044 + C15222 * C7678 +
              C44912 * C8055) *
                 C44851) *
                C44903) *
               C44910 -
           (((C16284 + C16285) * C44851 + (C15818 + C15819) * C222) * C44903 +
            ((C15222 * C2346 + C44912 * C2557 + C15221 * C780 +
              C15153 * C1090) *
                 C44851 +
             (C15222 * C2252 + C44912 * C2302 + C15221 * C642 + C15153 * C710) *
                 C222) *
                C15151) *
               C3152) *
              C44908) *
         C44752) /
        (p * q * std::sqrt(p + q));
    d2eezz[34] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C557 * C93 + C564 + C564 + C44851 * C558) * C15153 +
             C5675 * C44912) *
                C15151 +
            (C15648 + C15649) * C44903) *
               C3152 -
           ((C16994 + C16995) * C44903 +
            (C8131 * C44912 +
             (C557 * C1226 + C1747 + C1747 + C44851 * C1738) * C15153) *
                C15151) *
               C44910) *
              C636 +
          (((C8131 * C15153 +
             (C557 * C7523 + C8127 + C8127 + C44851 * C8122) * C44912) *
                C15151 +
            (C6332 * C15153 +
             (C557 * C7524 + C8128 + C8128 + C44851 * C8123) * C44912) *
                C44903) *
               C44910 -
           ((C16352 + C16353) * C44903 +
            (C7457 * C44912 + C5675 * C15153) * C15151) *
               C3152) *
              C44908) *
         C44752) /
        (p * q * std::sqrt(p + q));
    d2eexx[35] += (2 * std::pow(Pi, 2.5) *
                   (((C15155 * C93 + C15160 + C15160 + C15151 * C103 +
                      C15157 * C94 + C15161 + C15161 + C44903 * C104) *
                         C44851 * C15153 +
                     (C15738 + C15739) * C44851 * C44912) *
                        C4042 -
                    ((C18154 + C18155) * C44851 * C44912 +
                     (C15157 * C1225 + C16422 + C16422 + C44903 * C1233 +
                      C15155 * C1226 + C16423 + C16423 + C15151 * C1234) *
                         C44851 * C15153) *
                        C4043 +
                    ((C15155 * C4045 + C19948 + C19948 + C15151 * C4051 +
                      C15157 * C4046 + C19949 + C19949 + C44903 * C4052) *
                         C44851 * C15153 +
                     (C15155 * C9369 + C19950 + C19950 + C15151 * C9373 +
                      C15157 * C9370 + C19951 + C19951 + C44903 * C9374) *
                         C44851 * C44912) *
                        C4044) *
                   C44786 * C44752) /
                  (p * q * std::sqrt(p + q));
    d2eexy[35] +=
        (2 * std::pow(Pi, 2.5) *
         (((C15221 * C93 + C15153 * C156 + C15222 * C642 + C44912 * C710) *
               C15156 +
           (C15221 * C98 + C15153 * C161 + C15222 * C646 + C44912 * C714) *
               C15151 +
           (C15240 + C15241) * C15158 + (C15242 + C15243) * C44903) *
              C44851 * C4042 -
          ((C16502 + C16503) * C44903 + (C16504 + C16505) * C15158 +
           (C15222 * C2657 + C44912 * C2719 + C15221 * C1230 + C15153 * C1298) *
               C15151 +
           (C15222 * C2654 + C44912 * C2716 + C15221 * C1226 + C15153 * C1294) *
               C15156) *
              C44851 * C4043 +
          ((C15221 * C4045 + C15153 * C4095 + C15222 * C9369 + C44912 * C9429) *
               C15156 +
           (C15221 * C4048 + C15153 * C4098 + C15222 * C9371 + C44912 * C9431) *
               C15151 +
           (C15221 * C4046 + C15153 * C4096 + C15222 * C9370 + C44912 * C9430) *
               C15158 +
           (C15221 * C4049 + C15153 * C4099 + C15222 * C9372 + C44912 * C9432) *
               C44903) *
              C44851 * C4044) *
         C44786 * C44752) /
        (p * q * std::sqrt(p + q));
    d2eexz[35] += (2 * std::pow(Pi, 2.5) *
                   ((((C222 * C93 + C44851 * C223) * C15156 +
                      (C222 * C98 + C44851 * C228) * C15151 + C246 * C15158 +
                      C247 * C44903) *
                         C15153 +
                     (C15886 + C15887 + C15888 + C15889) * C44912) *
                        C4042 -
                    ((C18288 + C18289 + C18290 + C18291) * C44912 +
                     (C1381 * C44903 + C1382 * C15158 +
                      (C222 * C1230 + C44851 * C1368) * C15151 +
                      (C222 * C1226 + C44851 * C1364) * C15156) *
                         C15153) *
                        C4043 +
                    (((C222 * C4045 + C44851 * C4139) * C15156 +
                      (C222 * C4048 + C44851 * C4142) * C15151 +
                      (C222 * C4046 + C44851 * C4140) * C15158 +
                      (C222 * C4049 + C44851 * C4143) * C44903) *
                         C15153 +
                     ((C222 * C9369 + C44851 * C9483) * C15156 +
                      (C222 * C9371 + C44851 * C9485) * C15151 +
                      (C222 * C9370 + C44851 * C9484) * C15158 +
                      (C222 * C9372 + C44851 * C9486) * C44903) *
                         C44912) *
                        C4044) *
                   C44786 * C44752) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[35] +=
        (2 * std::pow(Pi, 2.5) *
         (((C15156 * C93 + C15151 * C98 + C15158 * C94 + C44903 * C99) *
               C15221 +
           (C15156 * C156 + C15151 * C289 + C15158 * C157 + C44903 * C290) *
               C15153 +
           (C15976 + C15977) * C15222 + (C15978 + C15979) * C44912) *
              C44851 * C4042 -
          ((C18366 + C18367) * C44912 + (C18368 + C18369) * C15222 +
           (C15158 * C1293 + C44903 * C1433 + C15156 * C1294 + C15151 * C1434) *
               C15153 +
           (C15158 * C1225 + C44903 * C1229 + C15156 * C1226 + C15151 * C1230) *
               C15221) *
              C44851 * C4043 +
          ((C15156 * C4045 + C15151 * C4048 + C15158 * C4046 + C44903 * C4049) *
               C15221 +
           (C15156 * C4095 + C15151 * C4183 + C15158 * C4096 + C44903 * C4184) *
               C15153 +
           (C15156 * C9369 + C15151 * C9371 + C15158 * C9370 + C44903 * C9372) *
               C15222 +
           (C15156 * C9429 + C15151 * C9537 + C15158 * C9430 + C44903 * C9538) *
               C44912) *
              C44851 * C4044) *
         C44786 * C44752) /
        (p * q * std::sqrt(p + q));
    d2eeyy[35] += (2 * std::pow(Pi, 2.5) *
                   (((C15397 * C93 + C15400 + C15400 + C15153 * C333 +
                      C15398 * C642 + C15401 + C15401 + C44912 * C904) *
                         C15151 +
                     (C15424 + C15425) * C44903) *
                        C44851 * C4042 -
                    ((C16718 + C16719) * C44903 +
                     (C15398 * C2654 + C16710 + C16710 + C44912 * C2881 +
                      C15397 * C1226 + C16711 + C16711 + C15153 * C1488) *
                         C15151) *
                        C44851 * C4043 +
                    ((C15397 * C4045 + C20152 + C20152 + C15153 * C4224 +
                      C15398 * C9369 + C20153 + C20153 + C44912 * C9589) *
                         C15151 +
                     (C15397 * C4046 + C20154 + C20154 + C15153 * C4225 +
                      C15398 * C9370 + C20155 + C20155 + C44912 * C9590) *
                         C44903) *
                        C44851 * C4044) *
                   C44786 * C44752) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[35] += (2 * std::pow(Pi, 2.5) *
                   ((((C222 * C93 + C44851 * C223) * C15221 +
                      (C222 * C156 + C44851 * C396) * C15153 + C5196 * C15222 +
                      C5447 * C44912) *
                         C15151 +
                     (C15478 + C15479 + C15480 + C15481) * C44903) *
                        C4042 -
                    ((C16786 + C16787 + C16788 + C16789) * C44903 +
                     (C7914 * C44912 + C7689 * C15222 +
                      (C222 * C1294 + C44851 * C1556) * C15153 +
                      (C222 * C1226 + C44851 * C1364) * C15221) *
                         C15151) *
                        C4043 +
                    (((C222 * C4045 + C44851 * C4139) * C15221 +
                      (C222 * C4095 + C44851 * C4268) * C15153 +
                      (C222 * C9369 + C44851 * C9483) * C15222 +
                      (C222 * C9429 + C44851 * C9645) * C44912) *
                         C15151 +
                     ((C222 * C4046 + C44851 * C4140) * C15221 +
                      (C222 * C4096 + C44851 * C4269) * C15153 +
                      (C222 * C9370 + C44851 * C9484) * C15222 +
                      (C222 * C9430 + C44851 * C9646) * C44912) *
                         C44903) *
                        C4044) *
                   C44786 * C44752) /
                  (p * q * std::sqrt(p + q));
    d2eezx[35] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C15156 * C93 + C15151 * C98 + C15158 * C94 + C44903 * C99) * C222 +
            (C15156 * C223 + C15151 * C455 + C15158 * C224 + C44903 * C456) *
                C44851) *
               C15153 +
           ((C15976 + C15977) * C222 + (C16210 + C16211) * C44851) * C44912) *
              C4042 -
          (((C18576 + C18577) * C44851 + (C18368 + C18369) * C222) * C44912 +
           ((C15158 * C1363 + C44903 * C1619 + C15156 * C1364 +
             C15151 * C1620) *
                C44851 +
            (C15158 * C1225 + C44903 * C1229 + C15156 * C1226 +
             C15151 * C1230) *
                C222) *
               C15153) *
              C4043 +
          (((C15156 * C4045 + C15151 * C4048 + C15158 * C4046 +
             C44903 * C4049) *
                C222 +
            (C15156 * C4139 + C15151 * C4309 + C15158 * C4140 +
             C44903 * C4310) *
                C44851) *
               C15153 +
           ((C15156 * C9369 + C15151 * C9371 + C15158 * C9370 +
             C44903 * C9372) *
                C222 +
            (C15156 * C9483 + C15151 * C9697 + C15158 * C9484 +
             C44903 * C9698) *
                C44851) *
               C44912) *
              C4044) *
         C44786 * C44752) /
        (p * q * std::sqrt(p + q));
    d2eezy[35] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C15221 * C93 + C15153 * C156 + C15222 * C642 + C44912 * C710) *
                C222 +
            (C15221 * C223 + C15153 * C498 + C15222 * C780 + C44912 * C1090) *
                C44851) *
               C15151 +
           ((C15240 + C15241) * C222 + (C15594 + C15595) * C44851) * C44903) *
              C4042 -
          (((C16926 + C16927) * C44851 + (C16504 + C16505) * C222) * C44903 +
           ((C15222 * C2772 + C44912 * C3043 + C15221 * C1364 +
             C15153 * C1674) *
                C44851 +
            (C15222 * C2654 + C44912 * C2716 + C15221 * C1226 +
             C15153 * C1294) *
                C222) *
               C15151) *
              C4043 +
          (((C15221 * C4045 + C15153 * C4095 + C15222 * C9369 +
             C44912 * C9429) *
                C222 +
            (C15221 * C4139 + C15153 * C4350 + C15222 * C9483 +
             C44912 * C9749) *
                C44851) *
               C15151 +
           ((C15221 * C4046 + C15153 * C4096 + C15222 * C9370 +
             C44912 * C9430) *
                C222 +
            (C15221 * C4140 + C15153 * C4351 + C15222 * C9484 +
             C44912 * C9750) *
                C44851) *
               C44903) *
              C4044) *
         C44786 * C44752) /
        (p * q * std::sqrt(p + q));
    d2eezz[35] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C557 * C93 + C564 + C564 + C44851 * C558) * C15153 +
            C5675 * C44912) *
               C15151 +
           (C15648 + C15649) * C44903) *
              C4042 -
          ((C16994 + C16995) * C44903 +
           (C8131 * C44912 +
            (C557 * C1226 + C1747 + C1747 + C44851 * C1738) * C15153) *
               C15151) *
              C4043 +
          (((C557 * C4045 + C4395 + C4395 + C44851 * C4391) * C15153 +
            (C557 * C9369 + C9804 + C9804 + C44851 * C9801) * C44912) *
               C15151 +
           ((C557 * C4046 + C4396 + C4396 + C44851 * C4392) * C15153 +
            (C557 * C9370 + C9805 + C9805 + C44851 * C9802) * C44912) *
               C44903) *
              C4044) *
         C44786 * C44752) /
        (p * q * std::sqrt(p + q));
    d2eexx[36] +=
        (2 * std::pow(Pi, 2.5) *
         (((C20397 * C93 + C20400 + C20400 + C44729 * C103) * C44851 * C20394 +
           (C20397 * C642 + C20401 + C20401 + C44729 * C650) * C44851 * C20395 +
           (C20397 * C2252 + C20402 + C20402 + C44729 * C2258) * C44851 *
               C20396) *
              C44803 * C44786 * C84 -
          ((C20397 * C2253 + C20403 + C20403 + C44729 * C2259) * C44851 *
               C20396 +
           (C20397 * C641 + C20404 + C20404 + C44729 * C649) * C44851 * C20395 +
           (C20397 * C94 + C20405 + C20405 + C44729 * C104) * C44851 * C20394) *
              C44803 * C44786 * C85 +
          ((C20397 * C95 + C20406 + C20406 + C44729 * C105) * C44851 * C20394 +
           (C20397 * C640 + C20407 + C20407 + C44729 * C648) * C44851 * C20395 +
           (C20397 * C2254 + C20408 + C20408 + C44729 * C2260) * C44851 *
               C20396) *
              C44803 * C44786 * C86)) /
        (p * q * std::sqrt(p + q));
    d2eexy[36] += (2 * std::pow(Pi, 2.5) *
                   (((C20446 * C93 + C20394 * C156 + C20447 * C642 +
                      C20395 * C710 + C20448 * C2252 + C20396 * C2302) *
                         C20398 +
                     (C20446 * C98 + C20394 * C161 + C20447 * C646 +
                      C20395 * C714 + C20448 * C2255 + C20396 * C2305) *
                         C44729) *
                        C44851 * C44803 * C44786 * C84 -
                    ((C20448 * C2256 + C20396 * C2306 + C20447 * C645 +
                      C20395 * C713 + C20446 * C99 + C20394 * C162) *
                         C44729 +
                     (C20448 * C2253 + C20396 * C2303 + C20447 * C641 +
                      C20395 * C709 + C20446 * C94 + C20394 * C157) *
                         C20398) *
                        C44851 * C44803 * C44786 * C85 +
                    ((C20446 * C95 + C20394 * C158 + C20447 * C640 +
                      C20395 * C708 + C20448 * C2254 + C20396 * C2304) *
                         C20398 +
                     (C20446 * C100 + C20394 * C163 + C20447 * C644 +
                      C20395 * C712 + C20448 * C2257 + C20396 * C2307) *
                         C44729) *
                        C44851 * C44803 * C44786 * C86)) /
                  (p * q * std::sqrt(p + q));
    d2eexz[36] += (2 * std::pow(Pi, 2.5) *
                   ((((C222 * C93 + C44851 * C223) * C20398 +
                      (C222 * C98 + C44851 * C228) * C44729) *
                         C20394 +
                     (C5196 * C20398 + C5197 * C44729) * C20395 +
                     (C7111 * C20398 + C7110 * C44729) * C20396) *
                        C44803 * C44786 * C84 -
                    ((C5198 * C44729 + C5199 * C20398) * C20396 +
                     (C797 * C44729 + C798 * C20398) * C20395 +
                     (C247 * C44729 + C246 * C20398) * C20394) *
                        C44803 * C44786 * C85 +
                    ((C248 * C20398 + C249 * C44729) * C20394 +
                     (C796 * C20398 + C795 * C44729) * C20395 +
                     ((C222 * C2254 + C44851 * C2348) * C20398 +
                      (C222 * C2257 + C44851 * C2351) * C44729) *
                         C20396) *
                        C44803 * C44786 * C86)) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[36] += (2 * std::pow(Pi, 2.5) *
                   (((C20398 * C93 + C44729 * C98) * C20446 +
                     (C20398 * C156 + C44729 * C289) * C20394 +
                     (C20398 * C642 + C44729 * C646) * C20447 +
                     (C20398 * C710 + C44729 * C850) * C20395 +
                     (C20398 * C2252 + C44729 * C2255) * C20448 +
                     (C20398 * C2302 + C44729 * C2390) * C20396) *
                        C44851 * C44803 * C44786 * C84 -
                    ((C20398 * C2303 + C44729 * C2391) * C20396 +
                     (C20398 * C2253 + C44729 * C2256) * C20448 +
                     (C20398 * C709 + C44729 * C849) * C20395 +
                     (C20398 * C641 + C44729 * C645) * C20447 +
                     (C20398 * C157 + C44729 * C290) * C20394 +
                     (C20398 * C94 + C44729 * C99) * C20446) *
                        C44851 * C44803 * C44786 * C85 +
                    ((C20398 * C95 + C44729 * C100) * C20446 +
                     (C20398 * C158 + C44729 * C291) * C20394 +
                     (C20398 * C640 + C44729 * C644) * C20447 +
                     (C20398 * C708 + C44729 * C848) * C20395 +
                     (C20398 * C2254 + C44729 * C2257) * C20448 +
                     (C20398 * C2304 + C44729 * C2392) * C20396) *
                        C44851 * C44803 * C44786 * C86)) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[36] += (2 * std::pow(Pi, 2.5) *
                   ((C20563 * C93 + C20567 + C20567 + C20394 * C333 +
                     C20564 * C642 + C20568 + C20568 + C20395 * C904 +
                     C20565 * C2252 + C20569 + C20569 + C20396 * C2431) *
                        C44729 * C44851 * C44803 * C44786 * C84 -
                    (C20565 * C2253 + C20570 + C20570 + C20396 * C2432 +
                     C20564 * C641 + C20571 + C20571 + C20395 * C903 +
                     C20563 * C94 + C20572 + C20572 + C20394 * C334) *
                        C44729 * C44851 * C44803 * C44786 * C85 +
                    (C20563 * C95 + C20573 + C20573 + C20394 * C335 +
                     C20564 * C640 + C20574 + C20574 + C20395 * C902 +
                     C20565 * C2254 + C20575 + C20575 + C20396 * C2433) *
                        C44729 * C44851 * C44803 * C44786 * C86)) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[36] += (2 * std::pow(Pi, 2.5) *
                   (((C222 * C93 + C44851 * C223) * C20446 +
                     (C222 * C156 + C44851 * C396) * C20394 + C5196 * C20447 +
                     C5447 * C20395 + C7111 * C20448 + C7288 * C20396) *
                        C44729 * C44803 * C44786 * C84 -
                    (C5448 * C20396 + C5199 * C20448 + C982 * C20395 +
                     C798 * C20447 + C411 * C20394 + C246 * C20446) *
                        C44729 * C44803 * C44786 * C85 +
                    (C248 * C20446 + C412 * C20394 + C796 * C20447 +
                     C981 * C20395 + (C222 * C2254 + C44851 * C2348) * C20448 +
                     (C222 * C2304 + C44851 * C2477) * C20396) *
                        C44729 * C44803 * C44786 * C86)) /
                  (p * q * std::sqrt(p + q));
    d2eezx[36] += (2 * std::pow(Pi, 2.5) *
                   ((((C20398 * C93 + C44729 * C98) * C222 +
                      (C20398 * C223 + C44729 * C455) * C44851) *
                         C20394 +
                     ((C20398 * C642 + C44729 * C646) * C222 +
                      (C20398 * C780 + C44729 * C1036) * C44851) *
                         C20395 +
                     ((C20398 * C2252 + C44729 * C2255) * C222 +
                      (C20398 * C2346 + C44729 * C2516) * C44851) *
                         C20396) *
                        C44803 * C44786 * C84 -
                    (((C20398 * C2347 + C44729 * C2517) * C44851 +
                      (C20398 * C2253 + C44729 * C2256) * C222) *
                         C20396 +
                     ((C20398 * C779 + C44729 * C1035) * C44851 +
                      (C20398 * C641 + C44729 * C645) * C222) *
                         C20395 +
                     ((C20398 * C224 + C44729 * C456) * C44851 +
                      (C20398 * C94 + C44729 * C99) * C222) *
                         C20394) *
                        C44803 * C44786 * C85 +
                    (((C20398 * C95 + C44729 * C100) * C222 +
                      (C20398 * C225 + C44729 * C457) * C44851) *
                         C20394 +
                     ((C20398 * C640 + C44729 * C644) * C222 +
                      (C20398 * C778 + C44729 * C1034) * C44851) *
                         C20395 +
                     ((C20398 * C2254 + C44729 * C2257) * C222 +
                      (C20398 * C2348 + C44729 * C2518) * C44851) *
                         C20396) *
                        C44803 * C44786 * C86)) /
                  (p * q * std::sqrt(p + q));
    d2eezy[36] += (2 * std::pow(Pi, 2.5) *
                   (((C20446 * C93 + C20394 * C156 + C20447 * C642 +
                      C20395 * C710 + C20448 * C2252 + C20396 * C2302) *
                         C222 +
                     (C20446 * C223 + C20394 * C498 + C20447 * C780 +
                      C20395 * C1090 + C20448 * C2346 + C20396 * C2557) *
                         C44851) *
                        C44729 * C44803 * C44786 * C84 -
                    ((C20448 * C2347 + C20396 * C2558 + C20447 * C779 +
                      C20395 * C1089 + C20446 * C224 + C20394 * C499) *
                         C44851 +
                     (C20448 * C2253 + C20396 * C2303 + C20447 * C641 +
                      C20395 * C709 + C20446 * C94 + C20394 * C157) *
                         C222) *
                        C44729 * C44803 * C44786 * C85 +
                    ((C20446 * C95 + C20394 * C158 + C20447 * C640 +
                      C20395 * C708 + C20448 * C2254 + C20396 * C2304) *
                         C222 +
                     (C20446 * C225 + C20394 * C500 + C20447 * C778 +
                      C20395 * C1088 + C20448 * C2348 + C20396 * C2559) *
                         C44851) *
                        C44729 * C44803 * C44786 * C86)) /
                  (p * q * std::sqrt(p + q));
    d2eezz[36] += (2 * std::pow(Pi, 2.5) *
                   (((C557 * C93 + C564 + C564 + C44851 * C558) * C20394 +
                     C5675 * C20395 + C7457 * C20396) *
                        C44729 * C44803 * C44786 * C84 -
                    (C5676 * C20396 + C1170 * C20395 + C581 * C20394) * C44729 *
                        C44803 * C44786 * C85 +
                    (C582 * C20394 + C1169 * C20395 +
                     (C557 * C2254 + C2604 + C2604 + C44851 * C2600) * C20396) *
                        C44729 * C44803 * C44786 * C86)) /
                  (p * q * std::sqrt(p + q));
    d2eexx[37] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C20397 * C93 + C20400 + C20400 + C44729 * C103) * C44851 * C20394 +
            C20800 * C20395 + C20801 * C20396) *
               C44803 * C636 -
           ((C20397 * C6977 + C20782 + C20782 + C44729 * C6981) * C44851 *
                C20396 +
            C20801 * C20395 + C20800 * C20394) *
               C44803 * C44908) *
              C638 +
          ((C20802 * C20394 + C20803 * C20395 +
            (C20397 * C6978 + C20787 + C20787 + C44729 * C6982) * C44851 *
                C20396) *
               C44803 * C44908 -
           (C20803 * C20396 + C20802 * C20395 +
            (C20397 * C94 + C20405 + C20405 + C44729 * C104) * C44851 *
                C20394) *
               C44803 * C636) *
              C44906)) /
        (p * q * std::sqrt(p + q));
    d2eexy[37] += (2 * std::pow(Pi, 2.5) *
                   ((((C20446 * C93 + C20394 * C156 + C20447 * C642 +
                       C20395 * C710 + C20448 * C2252 + C20396 * C2302) *
                          C20398 +
                      (C20446 * C98 + C20394 * C161 + C20447 * C646 +
                       C20395 * C714 + C20448 * C2255 + C20396 * C2305) *
                          C44729) *
                         C44851 * C44803 * C636 -
                     ((C20448 * C6979 + C20396 * C7047 + C20447 * C2255 +
                       C20395 * C2305 + C20446 * C646 + C20394 * C714) *
                          C44729 +
                      (C20448 * C6977 + C20396 * C7045 + C20447 * C2252 +
                       C20395 * C2302 + C20446 * C642 + C20394 * C710) *
                          C20398) *
                         C44851 * C44803 * C44908) *
                        C638 +
                    (((C20446 * C641 + C20394 * C709 + C20447 * C2253 +
                       C20395 * C2303 + C20448 * C6978 + C20396 * C7046) *
                          C20398 +
                      (C20446 * C645 + C20394 * C713 + C20447 * C2256 +
                       C20395 * C2306 + C20448 * C6980 + C20396 * C7048) *
                          C44729) *
                         C44851 * C44803 * C44908 -
                     ((C20448 * C2256 + C20396 * C2306 + C20447 * C645 +
                       C20395 * C713 + C20446 * C99 + C20394 * C162) *
                          C44729 +
                      (C20448 * C2253 + C20396 * C2303 + C20447 * C641 +
                       C20395 * C709 + C20446 * C94 + C20394 * C157) *
                          C20398) *
                         C44851 * C44803 * C636) *
                        C44906)) /
                  (p * q * std::sqrt(p + q));
    d2eexz[37] += (2 * std::pow(Pi, 2.5) *
                   (((((C222 * C93 + C44851 * C223) * C20398 +
                       (C222 * C98 + C44851 * C228) * C44729) *
                          C20394 +
                      (C20904 + C20905) * C20395 + (C20906 + C20907) * C20396) *
                         C44803 * C636 -
                     (((C222 * C6979 + C44851 * C7101) * C44729 +
                       (C222 * C6977 + C44851 * C7099) * C20398) *
                          C20396 +
                      (C20907 + C20906) * C20395 + (C20905 + C20904) * C20394) *
                         C44803 * C44908) *
                        C638 +
                    (((C20908 + C20909) * C20394 + (C20910 + C20911) * C20395 +
                      ((C222 * C6978 + C44851 * C7100) * C20398 +
                       (C222 * C6980 + C44851 * C7102) * C44729) *
                          C20396) *
                         C44803 * C44908 -
                     ((C20911 + C20910) * C20396 + (C20909 + C20908) * C20395 +
                      (C247 * C44729 + C246 * C20398) * C20394) *
                         C44803 * C636) *
                        C44906)) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[37] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C20398 * C93 + C44729 * C98) * C20446 +
            (C20398 * C156 + C44729 * C289) * C20394 + C20978 * C20447 +
            C20979 * C20395 + C20980 * C20448 + C20981 * C20396) *
               C44851 * C44803 * C636 -
           ((C20398 * C7045 + C44729 * C7163) * C20396 +
            (C20398 * C6977 + C44729 * C6979) * C20448 + C20981 * C20395 +
            C20980 * C20447 + C20979 * C20394 + C20978 * C20446) *
               C44851 * C44803 * C44908) *
              C638 +
          ((C20982 * C20446 + C20983 * C20394 + C20984 * C20447 +
            C20985 * C20395 + (C20398 * C6978 + C44729 * C6980) * C20448 +
            (C20398 * C7046 + C44729 * C7164) * C20396) *
               C44851 * C44803 * C44908 -
           (C20985 * C20396 + C20984 * C20448 + C20983 * C20395 +
            C20982 * C20447 + (C20398 * C157 + C44729 * C290) * C20394 +
            (C20398 * C94 + C44729 * C99) * C20446) *
               C44851 * C44803 * C636) *
              C44906)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[37] += (2 * std::pow(Pi, 2.5) *
                   (((C20563 * C93 + C20567 + C20567 + C20394 * C333 +
                      C20564 * C642 + C20568 + C20568 + C20395 * C904 +
                      C20565 * C2252 + C20569 + C20569 + C20396 * C2431) *
                         C44729 * C44851 * C44803 * C636 -
                     (C20565 * C6977 + C21036 + C21036 + C20396 * C7227 +
                      C20564 * C2252 + C21037 + C21037 + C20395 * C2431 +
                      C20563 * C642 + C21038 + C21038 + C20394 * C904) *
                         C44729 * C44851 * C44803 * C44908) *
                        C638 +
                    ((C20563 * C641 + C21039 + C21039 + C20394 * C903 +
                      C20564 * C2253 + C21040 + C21040 + C20395 * C2432 +
                      C20565 * C6978 + C21041 + C21041 + C20396 * C7228) *
                         C44729 * C44851 * C44803 * C44908 -
                     (C20565 * C2253 + C20570 + C20570 + C20396 * C2432 +
                      C20564 * C641 + C20571 + C20571 + C20395 * C903 +
                      C20563 * C94 + C20572 + C20572 + C20394 * C334) *
                         C44729 * C44851 * C44803 * C636) *
                        C44906)) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[37] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C222 * C93 + C44851 * C223) * C20446 +
            (C222 * C156 + C44851 * C396) * C20394 + C5196 * C20447 +
            C5447 * C20395 + C7111 * C20448 + C7288 * C20396) *
               C44729 * C44803 * C636 -
           ((C222 * C7045 + C44851 * C7283) * C20396 +
            (C222 * C6977 + C44851 * C7099) * C20448 + C7288 * C20395 +
            C7111 * C20447 + C5447 * C20394 + C5196 * C20446) *
               C44729 * C44803 * C44908) *
              C638 +
          ((C798 * C20446 + C982 * C20394 + C5199 * C20447 + C5448 * C20395 +
            (C222 * C6978 + C44851 * C7100) * C20448 +
            (C222 * C7046 + C44851 * C7284) * C20396) *
               C44729 * C44803 * C44908 -
           (C5448 * C20396 + C5199 * C20448 + C982 * C20395 + C798 * C20447 +
            C411 * C20394 + C246 * C20446) *
               C44729 * C44803 * C636) *
              C44906)) /
        (p * q * std::sqrt(p + q));
    d2eezx[37] += (2 * std::pow(Pi, 2.5) *
                   (((((C20398 * C93 + C44729 * C98) * C222 +
                       (C20398 * C223 + C44729 * C455) * C44851) *
                          C20394 +
                      (C21142 + C21158) * C20395 + (C21145 + C21159) * C20396) *
                         C44803 * C636 -
                     (((C20398 * C7099 + C44729 * C7338) * C44851 +
                       (C20398 * C6977 + C44729 * C6979) * C222) *
                          C20396 +
                      (C21159 + C21145) * C20395 + (C21158 + C21142) * C20394) *
                         C44803 * C44908) *
                        C638 +
                    (((C21148 + C21160) * C20394 + (C21151 + C21161) * C20395 +
                      ((C20398 * C6978 + C44729 * C6980) * C222 +
                       (C20398 * C7100 + C44729 * C7339) * C44851) *
                          C20396) *
                         C44803 * C44908 -
                     ((C21161 + C21151) * C20396 + (C21160 + C21148) * C20395 +
                      ((C20398 * C224 + C44729 * C456) * C44851 +
                       (C20398 * C94 + C44729 * C99) * C222) *
                          C20394) *
                         C44803 * C636) *
                        C44906)) /
                  (p * q * std::sqrt(p + q));
    d2eezy[37] += (2 * std::pow(Pi, 2.5) *
                   ((((C20446 * C93 + C20394 * C156 + C20447 * C642 +
                       C20395 * C710 + C20448 * C2252 + C20396 * C2302) *
                          C222 +
                      (C20446 * C223 + C20394 * C498 + C20447 * C780 +
                       C20395 * C1090 + C20448 * C2346 + C20396 * C2557) *
                          C44851) *
                         C44729 * C44803 * C636 -
                     ((C20448 * C7099 + C20396 * C7396 + C20447 * C2346 +
                       C20395 * C2557 + C20446 * C780 + C20394 * C1090) *
                          C44851 +
                      (C20448 * C6977 + C20396 * C7045 + C20447 * C2252 +
                       C20395 * C2302 + C20446 * C642 + C20394 * C710) *
                          C222) *
                         C44729 * C44803 * C44908) *
                        C638 +
                    (((C20446 * C641 + C20394 * C709 + C20447 * C2253 +
                       C20395 * C2303 + C20448 * C6978 + C20396 * C7046) *
                          C222 +
                      (C20446 * C779 + C20394 * C1089 + C20447 * C2347 +
                       C20395 * C2558 + C20448 * C7100 + C20396 * C7397) *
                          C44851) *
                         C44729 * C44803 * C44908 -
                     ((C20448 * C2347 + C20396 * C2558 + C20447 * C779 +
                       C20395 * C1089 + C20446 * C224 + C20394 * C499) *
                          C44851 +
                      (C20448 * C2253 + C20396 * C2303 + C20447 * C641 +
                       C20395 * C709 + C20446 * C94 + C20394 * C157) *
                          C222) *
                         C44729 * C44803 * C636) *
                        C44906)) /
                  (p * q * std::sqrt(p + q));
    d2eezz[37] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C557 * C93 + C564 + C564 + C44851 * C558) * C20394 +
            C5675 * C20395 + C7457 * C20396) *
               C44729 * C44803 * C636 -
           ((C557 * C6977 + C7453 + C7453 + C44851 * C7448) * C20396 +
            C7457 * C20395 + C5675 * C20394) *
               C44729 * C44803 * C44908) *
              C638 +
          ((C1170 * C20394 + C5676 * C20395 +
            (C557 * C6978 + C7454 + C7454 + C44851 * C7449) * C20396) *
               C44729 * C44803 * C44908 -
           (C5676 * C20396 + C1170 * C20395 + C581 * C20394) * C44729 * C44803 *
               C636) *
              C44906)) /
        (p * q * std::sqrt(p + q));
    d2eexx[38] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C20397 * C93 + C20400 + C20400 + C44729 * C103) * C44851 * C20394 +
            C20800 * C20395 + C20801 * C20396) *
               C1222 -
           ((C20397 * C7523 + C21312 + C21312 + C44729 * C7527) * C44851 *
                C20396 +
            (C20397 * C2654 + C21313 + C21313 + C44729 * C2660) * C44851 *
                C20395 +
            (C20397 * C1226 + C21314 + C21314 + C44729 * C1234) * C44851 *
                C20394) *
               C44910) *
              C44786 * C638 +
          (((C20397 * C1225 + C21315 + C21315 + C44729 * C1233) * C44851 *
                C20394 +
            (C20397 * C2655 + C21316 + C21316 + C44729 * C2661) * C44851 *
                C20395 +
            (C20397 * C7524 + C21317 + C21317 + C44729 * C7528) * C44851 *
                C20396) *
               C44910 -
           (C20803 * C20396 + C20802 * C20395 +
            (C20397 * C94 + C20405 + C20405 + C44729 * C104) * C44851 *
                C20394) *
               C1222) *
              C44786 * C44906)) /
        (p * q * std::sqrt(p + q));
    d2eexy[38] += (2 * std::pow(Pi, 2.5) *
                   ((((C20446 * C93 + C20394 * C156 + C20447 * C642 +
                       C20395 * C710 + C20448 * C2252 + C20396 * C2302) *
                          C20398 +
                      (C20446 * C98 + C20394 * C161 + C20447 * C646 +
                       C20395 * C714 + C20448 * C2255 + C20396 * C2305) *
                          C44729) *
                         C44851 * C1222 -
                     ((C20448 * C7525 + C20396 * C7609 + C20447 * C2657 +
                       C20395 * C2719 + C20446 * C1230 + C20394 * C1298) *
                          C44729 +
                      (C20448 * C7523 + C20396 * C7607 + C20447 * C2654 +
                       C20395 * C2716 + C20446 * C1226 + C20394 * C1294) *
                          C20398) *
                         C44851 * C44910) *
                        C44786 * C638 +
                    (((C20446 * C1225 + C20394 * C1293 + C20447 * C2655 +
                       C20395 * C2717 + C20448 * C7524 + C20396 * C7608) *
                          C20398 +
                      (C20446 * C1229 + C20394 * C1297 + C20447 * C2658 +
                       C20395 * C2720 + C20448 * C7526 + C20396 * C7610) *
                          C44729) *
                         C44851 * C44910 -
                     ((C20448 * C2256 + C20396 * C2306 + C20447 * C645 +
                       C20395 * C713 + C20446 * C99 + C20394 * C162) *
                          C44729 +
                      (C20448 * C2253 + C20396 * C2303 + C20447 * C641 +
                       C20395 * C709 + C20446 * C94 + C20394 * C157) *
                          C20398) *
                         C44851 * C1222) *
                        C44786 * C44906)) /
                  (p * q * std::sqrt(p + q));
    d2eexz[38] += (2 * std::pow(Pi, 2.5) *
                   (((((C222 * C93 + C44851 * C223) * C20398 +
                       (C222 * C98 + C44851 * C228) * C44729) *
                          C20394 +
                      (C20904 + C20905) * C20395 + (C20906 + C20907) * C20396) *
                         C1222 -
                     (((C222 * C7525 + C44851 * C7679) * C44729 +
                       (C222 * C7523 + C44851 * C7677) * C20398) *
                          C20396 +
                      (C7688 * C44729 + C7689 * C20398) * C20395 +
                      ((C222 * C1230 + C44851 * C1368) * C44729 +
                       (C222 * C1226 + C44851 * C1364) * C20398) *
                          C20394) *
                         C44910) *
                        C44786 * C638 +
                    (((C1382 * C20398 + C1381 * C44729) * C20394 +
                      (C5901 * C20398 + C5900 * C44729) * C20395 +
                      ((C222 * C7524 + C44851 * C7678) * C20398 +
                       (C222 * C7526 + C44851 * C7680) * C44729) *
                          C20396) *
                         C44910 -
                     ((C20911 + C20910) * C20396 + (C20909 + C20908) * C20395 +
                      (C247 * C44729 + C246 * C20398) * C20394) *
                         C1222) *
                        C44786 * C44906)) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[38] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C20398 * C93 + C44729 * C98) * C20446 +
            (C20398 * C156 + C44729 * C289) * C20394 + C20978 * C20447 +
            C20979 * C20395 + C20980 * C20448 + C20981 * C20396) *
               C44851 * C1222 -
           ((C20398 * C7607 + C44729 * C7757) * C20396 +
            (C20398 * C7523 + C44729 * C7525) * C20448 +
            (C20398 * C2716 + C44729 * C2828) * C20395 +
            (C20398 * C2654 + C44729 * C2657) * C20447 +
            (C20398 * C1294 + C44729 * C1434) * C20394 +
            (C20398 * C1226 + C44729 * C1230) * C20446) *
               C44851 * C44910) *
              C44786 * C638 +
          (((C20398 * C1225 + C44729 * C1229) * C20446 +
            (C20398 * C1293 + C44729 * C1433) * C20394 +
            (C20398 * C2655 + C44729 * C2658) * C20447 +
            (C20398 * C2717 + C44729 * C2829) * C20395 +
            (C20398 * C7524 + C44729 * C7526) * C20448 +
            (C20398 * C7608 + C44729 * C7758) * C20396) *
               C44851 * C44910 -
           (C20985 * C20396 + C20984 * C20448 + C20983 * C20395 +
            C20982 * C20447 + (C20398 * C157 + C44729 * C290) * C20394 +
            (C20398 * C94 + C44729 * C99) * C20446) *
               C44851 * C1222) *
              C44786 * C44906)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[38] += (2 * std::pow(Pi, 2.5) *
                   (((C20563 * C93 + C20567 + C20567 + C20394 * C333 +
                      C20564 * C642 + C20568 + C20568 + C20395 * C904 +
                      C20565 * C2252 + C20569 + C20569 + C20396 * C2431) *
                         C44729 * C44851 * C1222 -
                     (C20565 * C7523 + C21518 + C21518 + C20396 * C7837 +
                      C20564 * C2654 + C21519 + C21519 + C20395 * C2881 +
                      C20563 * C1226 + C21520 + C21520 + C20394 * C1488) *
                         C44729 * C44851 * C44910) *
                        C44786 * C638 +
                    ((C20563 * C1225 + C21521 + C21521 + C20394 * C1487 +
                      C20564 * C2655 + C21522 + C21522 + C20395 * C2882 +
                      C20565 * C7524 + C21523 + C21523 + C20396 * C7838) *
                         C44729 * C44851 * C44910 -
                     (C20565 * C2253 + C20570 + C20570 + C20396 * C2432 +
                      C20564 * C641 + C20571 + C20571 + C20395 * C903 +
                      C20563 * C94 + C20572 + C20572 + C20394 * C334) *
                         C44729 * C44851 * C1222) *
                        C44786 * C44906)) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[38] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C222 * C93 + C44851 * C223) * C20446 +
            (C222 * C156 + C44851 * C396) * C20394 + C5196 * C20447 +
            C5447 * C20395 + C7111 * C20448 + C7288 * C20396) *
               C44729 * C1222 -
           ((C222 * C7607 + C44851 * C7909) * C20396 +
            (C222 * C7523 + C44851 * C7677) * C20448 + C7914 * C20395 +
            C7689 * C20447 + (C222 * C1294 + C44851 * C1556) * C20394 +
            (C222 * C1226 + C44851 * C1364) * C20446) *
               C44729 * C44910) *
              C44786 * C638 +
          ((C1382 * C20446 + C1566 * C20394 + C5901 * C20447 + C6121 * C20395 +
            (C222 * C7524 + C44851 * C7678) * C20448 +
            (C222 * C7608 + C44851 * C7910) * C20396) *
               C44729 * C44910 -
           (C5448 * C20396 + C5199 * C20448 + C982 * C20395 + C798 * C20447 +
            C411 * C20394 + C246 * C20446) *
               C44729 * C1222) *
              C44786 * C44906)) /
        (p * q * std::sqrt(p + q));
    d2eezx[38] += (2 * std::pow(Pi, 2.5) *
                   (((((C20398 * C93 + C44729 * C98) * C222 +
                       (C20398 * C223 + C44729 * C455) * C44851) *
                          C20394 +
                      (C21142 + C21158) * C20395 + (C21145 + C21159) * C20396) *
                         C1222 -
                     (((C20398 * C7677 + C44729 * C7980) * C44851 +
                       (C20398 * C7523 + C44729 * C7525) * C222) *
                          C20396 +
                      ((C20398 * C2772 + C44729 * C2990) * C44851 +
                       (C20398 * C2654 + C44729 * C2657) * C222) *
                          C20395 +
                      ((C20398 * C1364 + C44729 * C1620) * C44851 +
                       (C20398 * C1226 + C44729 * C1230) * C222) *
                          C20394) *
                         C44910) *
                        C44786 * C638 +
                    ((((C20398 * C1225 + C44729 * C1229) * C222 +
                       (C20398 * C1363 + C44729 * C1619) * C44851) *
                          C20394 +
                      ((C20398 * C2655 + C44729 * C2658) * C222 +
                       (C20398 * C2773 + C44729 * C2991) * C44851) *
                          C20395 +
                      ((C20398 * C7524 + C44729 * C7526) * C222 +
                       (C20398 * C7678 + C44729 * C7981) * C44851) *
                          C20396) *
                         C44910 -
                     ((C21161 + C21151) * C20396 + (C21160 + C21148) * C20395 +
                      ((C20398 * C224 + C44729 * C456) * C44851 +
                       (C20398 * C94 + C44729 * C99) * C222) *
                          C20394) *
                         C1222) *
                        C44786 * C44906)) /
                  (p * q * std::sqrt(p + q));
    d2eezy[38] += (2 * std::pow(Pi, 2.5) *
                   ((((C20446 * C93 + C20394 * C156 + C20447 * C642 +
                       C20395 * C710 + C20448 * C2252 + C20396 * C2302) *
                          C222 +
                      (C20446 * C223 + C20394 * C498 + C20447 * C780 +
                       C20395 * C1090 + C20448 * C2346 + C20396 * C2557) *
                          C44851) *
                         C44729 * C1222 -
                     ((C20448 * C7677 + C20396 * C8054 + C20447 * C2772 +
                       C20395 * C3043 + C20446 * C1364 + C20394 * C1674) *
                          C44851 +
                      (C20448 * C7523 + C20396 * C7607 + C20447 * C2654 +
                       C20395 * C2716 + C20446 * C1226 + C20394 * C1294) *
                          C222) *
                         C44729 * C44910) *
                        C44786 * C638 +
                    (((C20446 * C1225 + C20394 * C1293 + C20447 * C2655 +
                       C20395 * C2717 + C20448 * C7524 + C20396 * C7608) *
                          C222 +
                      (C20446 * C1363 + C20394 * C1673 + C20447 * C2773 +
                       C20395 * C3044 + C20448 * C7678 + C20396 * C8055) *
                          C44851) *
                         C44729 * C44910 -
                     ((C20448 * C2347 + C20396 * C2558 + C20447 * C779 +
                       C20395 * C1089 + C20446 * C224 + C20394 * C499) *
                          C44851 +
                      (C20448 * C2253 + C20396 * C2303 + C20447 * C641 +
                       C20395 * C709 + C20446 * C94 + C20394 * C157) *
                          C222) *
                         C44729 * C1222) *
                        C44786 * C44906)) /
                  (p * q * std::sqrt(p + q));
    d2eezz[38] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C557 * C93 + C564 + C564 + C44851 * C558) * C20394 +
            C5675 * C20395 + C7457 * C20396) *
               C44729 * C1222 -
           ((C557 * C7523 + C8127 + C8127 + C44851 * C8122) * C20396 +
            C8131 * C20395 +
            (C557 * C1226 + C1747 + C1747 + C44851 * C1738) * C20394) *
               C44729 * C44910) *
              C44786 * C638 +
          ((C1754 * C20394 + C6332 * C20395 +
            (C557 * C7524 + C8128 + C8128 + C44851 * C8123) * C20396) *
               C44729 * C44910 -
           (C5676 * C20396 + C1170 * C20395 + C581 * C20394) * C44729 * C1222) *
              C44786 * C44906)) /
        (p * q * std::sqrt(p + q));
    d2eexx[39] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C20397 * C93 + C20400 + C20400 + C44729 * C103) * C44851 * C20394 +
            C20800 * C20395 + C20801 * C20396) *
               C44803 * C1806 -
           ((C20397 * C6977 + C20782 + C20782 + C44729 * C6981) * C44851 *
                C20396 +
            C20801 * C20395 + C20800 * C20394) *
               C44803 * C44908) *
              C1808 +
          ((C20802 * C20394 + C20803 * C20395 +
            (C20397 * C6978 + C20787 + C20787 + C44729 * C6982) * C44851 *
                C20396) *
               C44803 * C44908 -
           (C20803 * C20396 + C20802 * C20395 +
            (C20397 * C94 + C20405 + C20405 + C44729 * C104) * C44851 *
                C20394) *
               C44803 * C1806) *
              C44906)) /
        (p * q * std::sqrt(p + q));
    d2eexy[39] += (2 * std::pow(Pi, 2.5) *
                   ((((C20446 * C93 + C20394 * C156 + C20447 * C642 +
                       C20395 * C710 + C20448 * C2252 + C20396 * C2302) *
                          C20398 +
                      (C20446 * C98 + C20394 * C161 + C20447 * C646 +
                       C20395 * C714 + C20448 * C2255 + C20396 * C2305) *
                          C44729) *
                         C44851 * C44803 * C1806 -
                     ((C20448 * C6979 + C20396 * C7047 + C20447 * C2255 +
                       C20395 * C2305 + C20446 * C646 + C20394 * C714) *
                          C44729 +
                      (C20448 * C6977 + C20396 * C7045 + C20447 * C2252 +
                       C20395 * C2302 + C20446 * C642 + C20394 * C710) *
                          C20398) *
                         C44851 * C44803 * C44908) *
                        C1808 +
                    (((C20446 * C641 + C20394 * C709 + C20447 * C2253 +
                       C20395 * C2303 + C20448 * C6978 + C20396 * C7046) *
                          C20398 +
                      (C20446 * C645 + C20394 * C713 + C20447 * C2256 +
                       C20395 * C2306 + C20448 * C6980 + C20396 * C7048) *
                          C44729) *
                         C44851 * C44803 * C44908 -
                     ((C20448 * C2256 + C20396 * C2306 + C20447 * C645 +
                       C20395 * C713 + C20446 * C99 + C20394 * C162) *
                          C44729 +
                      (C20448 * C2253 + C20396 * C2303 + C20447 * C641 +
                       C20395 * C709 + C20446 * C94 + C20394 * C157) *
                          C20398) *
                         C44851 * C44803 * C1806) *
                        C44906)) /
                  (p * q * std::sqrt(p + q));
    d2eexz[39] += (2 * std::pow(Pi, 2.5) *
                   (((((C222 * C93 + C44851 * C223) * C20398 +
                       (C222 * C98 + C44851 * C228) * C44729) *
                          C20394 +
                      (C20904 + C20905) * C20395 + (C20906 + C20907) * C20396) *
                         C44803 * C1806 -
                     (((C222 * C6979 + C44851 * C7101) * C44729 +
                       (C222 * C6977 + C44851 * C7099) * C20398) *
                          C20396 +
                      (C20907 + C20906) * C20395 + (C20905 + C20904) * C20394) *
                         C44803 * C44908) *
                        C1808 +
                    (((C20908 + C20909) * C20394 + (C20910 + C20911) * C20395 +
                      ((C222 * C6978 + C44851 * C7100) * C20398 +
                       (C222 * C6980 + C44851 * C7102) * C44729) *
                          C20396) *
                         C44803 * C44908 -
                     ((C20911 + C20910) * C20396 + (C20909 + C20908) * C20395 +
                      (C247 * C44729 + C246 * C20398) * C20394) *
                         C44803 * C1806) *
                        C44906)) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[39] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C20398 * C93 + C44729 * C98) * C20446 +
            (C20398 * C156 + C44729 * C289) * C20394 + C20978 * C20447 +
            C20979 * C20395 + C20980 * C20448 + C20981 * C20396) *
               C44851 * C44803 * C1806 -
           ((C20398 * C7045 + C44729 * C7163) * C20396 +
            (C20398 * C6977 + C44729 * C6979) * C20448 + C20981 * C20395 +
            C20980 * C20447 + C20979 * C20394 + C20978 * C20446) *
               C44851 * C44803 * C44908) *
              C1808 +
          ((C20982 * C20446 + C20983 * C20394 + C20984 * C20447 +
            C20985 * C20395 + (C20398 * C6978 + C44729 * C6980) * C20448 +
            (C20398 * C7046 + C44729 * C7164) * C20396) *
               C44851 * C44803 * C44908 -
           (C20985 * C20396 + C20984 * C20448 + C20983 * C20395 +
            C20982 * C20447 + (C20398 * C157 + C44729 * C290) * C20394 +
            (C20398 * C94 + C44729 * C99) * C20446) *
               C44851 * C44803 * C1806) *
              C44906)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[39] += (2 * std::pow(Pi, 2.5) *
                   (((C20563 * C93 + C20567 + C20567 + C20394 * C333 +
                      C20564 * C642 + C20568 + C20568 + C20395 * C904 +
                      C20565 * C2252 + C20569 + C20569 + C20396 * C2431) *
                         C44729 * C44851 * C44803 * C1806 -
                     (C20565 * C6977 + C21036 + C21036 + C20396 * C7227 +
                      C20564 * C2252 + C21037 + C21037 + C20395 * C2431 +
                      C20563 * C642 + C21038 + C21038 + C20394 * C904) *
                         C44729 * C44851 * C44803 * C44908) *
                        C1808 +
                    ((C20563 * C641 + C21039 + C21039 + C20394 * C903 +
                      C20564 * C2253 + C21040 + C21040 + C20395 * C2432 +
                      C20565 * C6978 + C21041 + C21041 + C20396 * C7228) *
                         C44729 * C44851 * C44803 * C44908 -
                     (C20565 * C2253 + C20570 + C20570 + C20396 * C2432 +
                      C20564 * C641 + C20571 + C20571 + C20395 * C903 +
                      C20563 * C94 + C20572 + C20572 + C20394 * C334) *
                         C44729 * C44851 * C44803 * C1806) *
                        C44906)) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[39] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C222 * C93 + C44851 * C223) * C20446 +
            (C222 * C156 + C44851 * C396) * C20394 + C5196 * C20447 +
            C5447 * C20395 + C7111 * C20448 + C7288 * C20396) *
               C44729 * C44803 * C1806 -
           ((C222 * C7045 + C44851 * C7283) * C20396 +
            (C222 * C6977 + C44851 * C7099) * C20448 + C7288 * C20395 +
            C7111 * C20447 + C5447 * C20394 + C5196 * C20446) *
               C44729 * C44803 * C44908) *
              C1808 +
          ((C798 * C20446 + C982 * C20394 + C5199 * C20447 + C5448 * C20395 +
            (C222 * C6978 + C44851 * C7100) * C20448 +
            (C222 * C7046 + C44851 * C7284) * C20396) *
               C44729 * C44803 * C44908 -
           (C5448 * C20396 + C5199 * C20448 + C982 * C20395 + C798 * C20447 +
            C411 * C20394 + C246 * C20446) *
               C44729 * C44803 * C1806) *
              C44906)) /
        (p * q * std::sqrt(p + q));
    d2eezx[39] += (2 * std::pow(Pi, 2.5) *
                   (((((C20398 * C93 + C44729 * C98) * C222 +
                       (C20398 * C223 + C44729 * C455) * C44851) *
                          C20394 +
                      (C21142 + C21158) * C20395 + (C21145 + C21159) * C20396) *
                         C44803 * C1806 -
                     (((C20398 * C7099 + C44729 * C7338) * C44851 +
                       (C20398 * C6977 + C44729 * C6979) * C222) *
                          C20396 +
                      (C21159 + C21145) * C20395 + (C21158 + C21142) * C20394) *
                         C44803 * C44908) *
                        C1808 +
                    (((C21148 + C21160) * C20394 + (C21151 + C21161) * C20395 +
                      ((C20398 * C6978 + C44729 * C6980) * C222 +
                       (C20398 * C7100 + C44729 * C7339) * C44851) *
                          C20396) *
                         C44803 * C44908 -
                     ((C21161 + C21151) * C20396 + (C21160 + C21148) * C20395 +
                      ((C20398 * C224 + C44729 * C456) * C44851 +
                       (C20398 * C94 + C44729 * C99) * C222) *
                          C20394) *
                         C44803 * C1806) *
                        C44906)) /
                  (p * q * std::sqrt(p + q));
    d2eezy[39] += (2 * std::pow(Pi, 2.5) *
                   ((((C20446 * C93 + C20394 * C156 + C20447 * C642 +
                       C20395 * C710 + C20448 * C2252 + C20396 * C2302) *
                          C222 +
                      (C20446 * C223 + C20394 * C498 + C20447 * C780 +
                       C20395 * C1090 + C20448 * C2346 + C20396 * C2557) *
                          C44851) *
                         C44729 * C44803 * C1806 -
                     ((C20448 * C7099 + C20396 * C7396 + C20447 * C2346 +
                       C20395 * C2557 + C20446 * C780 + C20394 * C1090) *
                          C44851 +
                      (C20448 * C6977 + C20396 * C7045 + C20447 * C2252 +
                       C20395 * C2302 + C20446 * C642 + C20394 * C710) *
                          C222) *
                         C44729 * C44803 * C44908) *
                        C1808 +
                    (((C20446 * C641 + C20394 * C709 + C20447 * C2253 +
                       C20395 * C2303 + C20448 * C6978 + C20396 * C7046) *
                          C222 +
                      (C20446 * C779 + C20394 * C1089 + C20447 * C2347 +
                       C20395 * C2558 + C20448 * C7100 + C20396 * C7397) *
                          C44851) *
                         C44729 * C44803 * C44908 -
                     ((C20448 * C2347 + C20396 * C2558 + C20447 * C779 +
                       C20395 * C1089 + C20446 * C224 + C20394 * C499) *
                          C44851 +
                      (C20448 * C2253 + C20396 * C2303 + C20447 * C641 +
                       C20395 * C709 + C20446 * C94 + C20394 * C157) *
                          C222) *
                         C44729 * C44803 * C1806) *
                        C44906)) /
                  (p * q * std::sqrt(p + q));
    d2eezz[39] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C557 * C93 + C564 + C564 + C44851 * C558) * C20394 +
            C5675 * C20395 + C7457 * C20396) *
               C44729 * C44803 * C1806 -
           ((C557 * C6977 + C7453 + C7453 + C44851 * C7448) * C20396 +
            C7457 * C20395 + C5675 * C20394) *
               C44729 * C44803 * C44908) *
              C1808 +
          ((C1170 * C20394 + C5676 * C20395 +
            (C557 * C6978 + C7454 + C7454 + C44851 * C7449) * C20396) *
               C44729 * C44803 * C44908 -
           (C5676 * C20396 + C1170 * C20395 + C581 * C20394) * C44729 * C44803 *
               C1806) *
              C44906)) /
        (p * q * std::sqrt(p + q));
    d2eexx[40] +=
        (2 * std::pow(Pi, 2.5) *
         (((C20397 * C93 + C20400 + C20400 + C44729 * C103) * C44851 * C20394 +
           C20800 * C20395 + C20801 * C20396) *
              C44803 * C2248 -
          (C22221 * C20396 + C20801 * C20395 + C20800 * C20394) * C44803 *
              C2249 +
          (C20801 * C20394 + C22221 * C20395 +
           (C20397 * C22211 + C22217 + C22217 + C44729 * C22213) * C44851 *
               C20396) *
              C44803 * C2250) *
         C44752) /
        (p * q * std::sqrt(p + q));
    d2eexy[40] += (2 * std::pow(Pi, 2.5) *
                   (((C20446 * C93 + C20394 * C156 + C20447 * C642 +
                      C20395 * C710 + C20448 * C2252 + C20396 * C2302) *
                         C20398 +
                     (C20446 * C98 + C20394 * C161 + C20447 * C646 +
                      C20395 * C714 + C20448 * C2255 + C20396 * C2305) *
                         C44729) *
                        C44851 * C44803 * C2248 -
                    ((C20448 * C6979 + C20396 * C7047 + C20447 * C2255 +
                      C20395 * C2305 + C20446 * C646 + C20394 * C714) *
                         C44729 +
                     (C20448 * C6977 + C20396 * C7045 + C20447 * C2252 +
                      C20395 * C2302 + C20446 * C642 + C20394 * C710) *
                         C20398) *
                        C44851 * C44803 * C2249 +
                    ((C20446 * C2252 + C20394 * C2302 + C20447 * C6977 +
                      C20395 * C7045 + C20448 * C22211 + C20396 * C22259) *
                         C20398 +
                     (C20446 * C2255 + C20394 * C2305 + C20447 * C6979 +
                      C20395 * C7047 + C20448 * C22212 + C20396 * C22260) *
                         C44729) *
                        C44851 * C44803 * C2250) *
                   C44752) /
                  (p * q * std::sqrt(p + q));
    d2eexz[40] += (2 * std::pow(Pi, 2.5) *
                   ((((C222 * C93 + C44851 * C223) * C20398 +
                      (C222 * C98 + C44851 * C228) * C44729) *
                         C20394 +
                     (C20904 + C20905) * C20395 + C22302 * C20396) *
                        C44803 * C2248 -
                    ((C22309 + C22310) * C20396 + (C20907 + C20906) * C20395 +
                     (C20905 + C20904) * C20394) *
                        C44803 * C2249 +
                    (C22302 * C20394 + (C22310 + C22309) * C20395 +
                     ((C222 * C22211 + C44851 * C22299) * C20398 +
                      (C222 * C22212 + C44851 * C22300) * C44729) *
                         C20396) *
                        C44803 * C2250) *
                   C44752) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[40] +=
        (2 * std::pow(Pi, 2.5) *
         (((C20398 * C93 + C44729 * C98) * C20446 +
           (C20398 * C156 + C44729 * C289) * C20394 + C20978 * C20447 +
           C20979 * C20395 + C20980 * C20448 + C20981 * C20396) *
              C44851 * C44803 * C2248 -
          (C22354 * C20396 + C22355 * C20448 + C20981 * C20395 +
           C20980 * C20447 + C20979 * C20394 + C20978 * C20446) *
              C44851 * C44803 * C2249 +
          (C20980 * C20446 + C20981 * C20394 + C22355 * C20447 +
           C22354 * C20395 + (C20398 * C22211 + C44729 * C22212) * C20448 +
           (C20398 * C22259 + C44729 * C22348) * C20396) *
              C44851 * C44803 * C2250) *
         C44752) /
        (p * q * std::sqrt(p + q));
    d2eeyy[40] += (2 * std::pow(Pi, 2.5) *
                   ((C20563 * C93 + C20567 + C20567 + C20394 * C333 +
                     C20564 * C642 + C20568 + C20568 + C20395 * C904 +
                     C20565 * C2252 + C20569 + C20569 + C20396 * C2431) *
                        C44729 * C44851 * C44803 * C2248 -
                    (C20565 * C6977 + C21036 + C21036 + C20396 * C7227 +
                     C20564 * C2252 + C21037 + C21037 + C20395 * C2431 +
                     C20563 * C642 + C21038 + C21038 + C20394 * C904) *
                        C44729 * C44851 * C44803 * C2249 +
                    (C20563 * C2252 + C22395 + C22395 + C20394 * C2431 +
                     C20564 * C6977 + C22396 + C22396 + C20395 * C7227 +
                     C20565 * C22211 + C22397 + C22397 + C20396 * C22393) *
                        C44729 * C44851 * C44803 * C2250) *
                   C44752) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[40] +=
        (2 * std::pow(Pi, 2.5) *
         (((C222 * C93 + C44851 * C223) * C20446 +
           (C222 * C156 + C44851 * C396) * C20394 + C5196 * C20447 +
           C5447 * C20395 + C7111 * C20448 + C7288 * C20396) *
              C44729 * C44803 * C2248 -
          (C22439 * C20396 + C22308 * C20448 + C7288 * C20395 + C7111 * C20447 +
           C5447 * C20394 + C5196 * C20446) *
              C44729 * C44803 * C2249 +
          (C7111 * C20446 + C7288 * C20394 + C22308 * C20447 + C22439 * C20395 +
           (C222 * C22211 + C44851 * C22299) * C20448 +
           (C222 * C22259 + C44851 * C22435) * C20396) *
              C44729 * C44803 * C2250) *
         C44752) /
        (p * q * std::sqrt(p + q));
    d2eezx[40] += (2 * std::pow(Pi, 2.5) *
                   ((((C20398 * C93 + C44729 * C98) * C222 +
                      (C20398 * C223 + C44729 * C455) * C44851) *
                         C20394 +
                     (C21142 + C21158) * C20395 + C22479 * C20396) *
                        C44803 * C2248 -
                    ((C22484 + C22482) * C20396 + (C21159 + C21145) * C20395 +
                     (C21158 + C21142) * C20394) *
                        C44803 * C2249 +
                    (C22479 * C20394 + (C22482 + C22484) * C20395 +
                     ((C20398 * C22211 + C44729 * C22212) * C222 +
                      (C20398 * C22299 + C44729 * C22477) * C44851) *
                         C20396) *
                        C44803 * C2250) *
                   C44752) /
                  (p * q * std::sqrt(p + q));
    d2eezy[40] += (2 * std::pow(Pi, 2.5) *
                   (((C20446 * C93 + C20394 * C156 + C20447 * C642 +
                      C20395 * C710 + C20448 * C2252 + C20396 * C2302) *
                         C222 +
                     (C20446 * C223 + C20394 * C498 + C20447 * C780 +
                      C20395 * C1090 + C20448 * C2346 + C20396 * C2557) *
                         C44851) *
                        C44729 * C44803 * C2248 -
                    ((C20448 * C7099 + C20396 * C7396 + C20447 * C2346 +
                      C20395 * C2557 + C20446 * C780 + C20394 * C1090) *
                         C44851 +
                     (C20448 * C6977 + C20396 * C7045 + C20447 * C2252 +
                      C20395 * C2302 + C20446 * C642 + C20394 * C710) *
                         C222) *
                        C44729 * C44803 * C2249 +
                    ((C20446 * C2252 + C20394 * C2302 + C20447 * C6977 +
                      C20395 * C7045 + C20448 * C22211 + C20396 * C22259) *
                         C222 +
                     (C20446 * C2346 + C20394 * C2557 + C20447 * C7099 +
                      C20395 * C7396 + C20448 * C22299 + C20396 * C22522) *
                         C44851) *
                        C44729 * C44803 * C2250) *
                   C44752) /
                  (p * q * std::sqrt(p + q));
    d2eezz[40] +=
        (2 * std::pow(Pi, 2.5) *
         (((C557 * C93 + C564 + C564 + C44851 * C558) * C20394 +
           C5675 * C20395 + C7457 * C20396) *
              C44729 * C44803 * C2248 -
          (C22568 * C20396 + C7457 * C20395 + C5675 * C20394) * C44729 *
              C44803 * C2249 +
          (C7457 * C20394 + C22568 * C20395 +
           (C557 * C22211 + C22565 + C22565 + C44851 * C22561) * C20396) *
              C44729 * C44803 * C2250) *
         C44752) /
        (p * q * std::sqrt(p + q));
    d2eexx[41] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C20397 * C93 + C20400 + C20400 + C44729 * C103) * C44851 * C20394 +
            C20800 * C20395 + C20801 * C20396) *
               C1222 -
           (C22633 * C20396 + C22634 * C20395 +
            (C20397 * C1226 + C21314 + C21314 + C44729 * C1234) * C44851 *
                C20394) *
               C44910) *
              C1806 +
          ((C22634 * C20394 + C22633 * C20395 +
            (C20397 * C22618 + C22626 + C22626 + C44729 * C22620) * C44851 *
                C20396) *
               C44910 -
           (C22221 * C20396 + C20801 * C20395 + C20800 * C20394) * C1222) *
              C44908) *
         C44752) /
        (p * q * std::sqrt(p + q));
    d2eexy[41] += (2 * std::pow(Pi, 2.5) *
                   ((((C20446 * C93 + C20394 * C156 + C20447 * C642 +
                       C20395 * C710 + C20448 * C2252 + C20396 * C2302) *
                          C20398 +
                      (C20446 * C98 + C20394 * C161 + C20447 * C646 +
                       C20395 * C714 + C20448 * C2255 + C20396 * C2305) *
                          C44729) *
                         C44851 * C1222 -
                     ((C20448 * C7525 + C20396 * C7609 + C20447 * C2657 +
                       C20395 * C2719 + C20446 * C1230 + C20394 * C1298) *
                          C44729 +
                      (C20448 * C7523 + C20396 * C7607 + C20447 * C2654 +
                       C20395 * C2716 + C20446 * C1226 + C20394 * C1294) *
                          C20398) *
                         C44851 * C44910) *
                        C1806 +
                    (((C20446 * C2654 + C20394 * C2716 + C20447 * C7523 +
                       C20395 * C7607 + C20448 * C22618 + C20396 * C22684) *
                          C20398 +
                      (C20446 * C2657 + C20394 * C2719 + C20447 * C7525 +
                       C20395 * C7609 + C20448 * C22619 + C20396 * C22685) *
                          C44729) *
                         C44851 * C44910 -
                     ((C20448 * C6979 + C20396 * C7047 + C20447 * C2255 +
                       C20395 * C2305 + C20446 * C646 + C20394 * C714) *
                          C44729 +
                      (C20448 * C6977 + C20396 * C7045 + C20447 * C2252 +
                       C20395 * C2302 + C20446 * C642 + C20394 * C710) *
                          C20398) *
                         C44851 * C1222) *
                        C44908) *
                   C44752) /
                  (p * q * std::sqrt(p + q));
    d2eexz[41] += (2 * std::pow(Pi, 2.5) *
                   (((((C222 * C93 + C44851 * C223) * C20398 +
                       (C222 * C98 + C44851 * C228) * C44729) *
                          C20394 +
                      (C20904 + C20905) * C20395 + C22302 * C20396) *
                         C1222 -
                     ((C22747 + C22748) * C20396 + (C22743 + C22744) * C20395 +
                      ((C222 * C1230 + C44851 * C1368) * C44729 +
                       (C222 * C1226 + C44851 * C1364) * C20398) *
                          C20394) *
                         C44910) *
                        C1806 +
                    (((C22744 + C22743) * C20394 + (C22748 + C22747) * C20395 +
                      ((C222 * C22618 + C44851 * C22736) * C20398 +
                       (C222 * C22619 + C44851 * C22737) * C44729) *
                          C20396) *
                         C44910 -
                     ((C22309 + C22310) * C20396 + (C20907 + C20906) * C20395 +
                      (C20905 + C20904) * C20394) *
                         C1222) *
                        C44908) *
                   C44752) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[41] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C20398 * C93 + C44729 * C98) * C20446 +
            (C20398 * C156 + C44729 * C289) * C20394 + C20978 * C20447 +
            C20979 * C20395 + C20980 * C20448 + C20981 * C20396) *
               C44851 * C1222 -
           (C22808 * C20396 + C22809 * C20448 + C22810 * C20395 +
            C22811 * C20447 + (C20398 * C1294 + C44729 * C1434) * C20394 +
            (C20398 * C1226 + C44729 * C1230) * C20446) *
               C44851 * C44910) *
              C1806 +
          ((C22811 * C20446 + C22810 * C20394 + C22809 * C20447 +
            C22808 * C20395 + (C20398 * C22618 + C44729 * C22619) * C20448 +
            (C20398 * C22684 + C44729 * C22798) * C20396) *
               C44851 * C44910 -
           (C22354 * C20396 + C22355 * C20448 + C20981 * C20395 +
            C20980 * C20447 + C20979 * C20394 + C20978 * C20446) *
               C44851 * C1222) *
              C44908) *
         C44752) /
        (p * q * std::sqrt(p + q));
    d2eeyy[41] += (2 * std::pow(Pi, 2.5) *
                   (((C20563 * C93 + C20567 + C20567 + C20394 * C333 +
                      C20564 * C642 + C20568 + C20568 + C20395 * C904 +
                      C20565 * C2252 + C20569 + C20569 + C20396 * C2431) *
                         C44729 * C44851 * C1222 -
                     (C20565 * C7523 + C21518 + C21518 + C20396 * C7837 +
                      C20564 * C2654 + C21519 + C21519 + C20395 * C2881 +
                      C20563 * C1226 + C21520 + C21520 + C20394 * C1488) *
                         C44729 * C44851 * C44910) *
                        C1806 +
                    ((C20563 * C2654 + C22863 + C22863 + C20394 * C2881 +
                      C20564 * C7523 + C22864 + C22864 + C20395 * C7837 +
                      C20565 * C22618 + C22865 + C22865 + C20396 * C22861) *
                         C44729 * C44851 * C44910 -
                     (C20565 * C6977 + C21036 + C21036 + C20396 * C7227 +
                      C20564 * C2252 + C21037 + C21037 + C20395 * C2431 +
                      C20563 * C642 + C21038 + C21038 + C20394 * C904) *
                         C44729 * C44851 * C1222) *
                        C44908) *
                   C44752) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[41] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C222 * C93 + C44851 * C223) * C20446 +
            (C222 * C156 + C44851 * C396) * C20394 + C5196 * C20447 +
            C5447 * C20395 + C7111 * C20448 + C7288 * C20396) *
               C44729 * C1222 -
           (C22919 * C20396 + C22746 * C20448 + C7914 * C20395 +
            C7689 * C20447 + (C222 * C1294 + C44851 * C1556) * C20394 +
            (C222 * C1226 + C44851 * C1364) * C20446) *
               C44729 * C44910) *
              C1806 +
          ((C7689 * C20446 + C7914 * C20394 + C22746 * C20447 +
            C22919 * C20395 + (C222 * C22618 + C44851 * C22736) * C20448 +
            (C222 * C22684 + C44851 * C22915) * C20396) *
               C44729 * C44910 -
           (C22439 * C20396 + C22308 * C20448 + C7288 * C20395 +
            C7111 * C20447 + C5447 * C20394 + C5196 * C20446) *
               C44729 * C1222) *
              C44908) *
         C44752) /
        (p * q * std::sqrt(p + q));
    d2eezx[41] += (2 * std::pow(Pi, 2.5) *
                   (((((C20398 * C93 + C44729 * C98) * C222 +
                       (C20398 * C223 + C44729 * C455) * C44851) *
                          C20394 +
                      (C21142 + C21158) * C20395 + C22479 * C20396) *
                         C1222 -
                     ((C22979 + C22973) * C20396 + (C22980 + C22976) * C20395 +
                      ((C20398 * C1364 + C44729 * C1620) * C44851 +
                       (C20398 * C1226 + C44729 * C1230) * C222) *
                          C20394) *
                         C44910) *
                        C1806 +
                    (((C22976 + C22980) * C20394 + (C22973 + C22979) * C20395 +
                      ((C20398 * C22618 + C44729 * C22619) * C222 +
                       (C20398 * C22736 + C44729 * C22969) * C44851) *
                          C20396) *
                         C44910 -
                     ((C22484 + C22482) * C20396 + (C21159 + C21145) * C20395 +
                      (C21158 + C21142) * C20394) *
                         C1222) *
                        C44908) *
                   C44752) /
                  (p * q * std::sqrt(p + q));
    d2eezy[41] += (2 * std::pow(Pi, 2.5) *
                   ((((C20446 * C93 + C20394 * C156 + C20447 * C642 +
                       C20395 * C710 + C20448 * C2252 + C20396 * C2302) *
                          C222 +
                      (C20446 * C223 + C20394 * C498 + C20447 * C780 +
                       C20395 * C1090 + C20448 * C2346 + C20396 * C2557) *
                          C44851) *
                         C44729 * C1222 -
                     ((C20448 * C7677 + C20396 * C8054 + C20447 * C2772 +
                       C20395 * C3043 + C20446 * C1364 + C20394 * C1674) *
                          C44851 +
                      (C20448 * C7523 + C20396 * C7607 + C20447 * C2654 +
                       C20395 * C2716 + C20446 * C1226 + C20394 * C1294) *
                          C222) *
                         C44729 * C44910) *
                        C1806 +
                    (((C20446 * C2654 + C20394 * C2716 + C20447 * C7523 +
                       C20395 * C7607 + C20448 * C22618 + C20396 * C22684) *
                          C222 +
                      (C20446 * C2772 + C20394 * C3043 + C20447 * C7677 +
                       C20395 * C8054 + C20448 * C22736 + C20396 * C23030) *
                          C44851) *
                         C44729 * C44910 -
                     ((C20448 * C7099 + C20396 * C7396 + C20447 * C2346 +
                       C20395 * C2557 + C20446 * C780 + C20394 * C1090) *
                          C44851 +
                      (C20448 * C6977 + C20396 * C7045 + C20447 * C2252 +
                       C20395 * C2302 + C20446 * C642 + C20394 * C710) *
                          C222) *
                         C44729 * C1222) *
                        C44908) *
                   C44752) /
                  (p * q * std::sqrt(p + q));
    d2eezz[41] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C557 * C93 + C564 + C564 + C44851 * C558) * C20394 +
            C5675 * C20395 + C7457 * C20396) *
               C44729 * C1222 -
           (C23088 * C20396 + C8131 * C20395 +
            (C557 * C1226 + C1747 + C1747 + C44851 * C1738) * C20394) *
               C44729 * C44910) *
              C1806 +
          ((C8131 * C20394 + C23088 * C20395 +
            (C557 * C22618 + C23085 + C23085 + C44851 * C23081) * C20396) *
               C44729 * C44910 -
           (C22568 * C20396 + C7457 * C20395 + C5675 * C20394) * C44729 *
               C1222) *
              C44908) *
         C44752) /
        (p * q * std::sqrt(p + q));
    d2eexx[42] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C20397 * C93 + C20400 + C20400 + C44729 * C103) * C44851 * C20394 +
            C20800 * C20395 + C20801 * C20396) *
               C3152 -
           (C22633 * C20396 + C22634 * C20395 +
            (C20397 * C1226 + C21314 + C21314 + C44729 * C1234) * C44851 *
                C20394) *
               C44910) *
              C44786 * C1808 +
          (((C20397 * C1225 + C21315 + C21315 + C44729 * C1233) * C44851 *
                C20394 +
            (C20397 * C2655 + C21316 + C21316 + C44729 * C2661) * C44851 *
                C20395 +
            (C20397 * C7524 + C21317 + C21317 + C44729 * C7528) * C44851 *
                C20396) *
               C44910 -
           (C20803 * C20396 + C20802 * C20395 +
            (C20397 * C94 + C20405 + C20405 + C44729 * C104) * C44851 *
                C20394) *
               C3152) *
              C44786 * C44906)) /
        (p * q * std::sqrt(p + q));
    d2eexy[42] += (2 * std::pow(Pi, 2.5) *
                   ((((C20446 * C93 + C20394 * C156 + C20447 * C642 +
                       C20395 * C710 + C20448 * C2252 + C20396 * C2302) *
                          C20398 +
                      (C20446 * C98 + C20394 * C161 + C20447 * C646 +
                       C20395 * C714 + C20448 * C2255 + C20396 * C2305) *
                          C44729) *
                         C44851 * C3152 -
                     ((C20448 * C7525 + C20396 * C7609 + C20447 * C2657 +
                       C20395 * C2719 + C20446 * C1230 + C20394 * C1298) *
                          C44729 +
                      (C20448 * C7523 + C20396 * C7607 + C20447 * C2654 +
                       C20395 * C2716 + C20446 * C1226 + C20394 * C1294) *
                          C20398) *
                         C44851 * C44910) *
                        C44786 * C1808 +
                    (((C20446 * C1225 + C20394 * C1293 + C20447 * C2655 +
                       C20395 * C2717 + C20448 * C7524 + C20396 * C7608) *
                          C20398 +
                      (C20446 * C1229 + C20394 * C1297 + C20447 * C2658 +
                       C20395 * C2720 + C20448 * C7526 + C20396 * C7610) *
                          C44729) *
                         C44851 * C44910 -
                     ((C20448 * C2256 + C20396 * C2306 + C20447 * C645 +
                       C20395 * C713 + C20446 * C99 + C20394 * C162) *
                          C44729 +
                      (C20448 * C2253 + C20396 * C2303 + C20447 * C641 +
                       C20395 * C709 + C20446 * C94 + C20394 * C157) *
                          C20398) *
                         C44851 * C3152) *
                        C44786 * C44906)) /
                  (p * q * std::sqrt(p + q));
    d2eexz[42] += (2 * std::pow(Pi, 2.5) *
                   (((((C222 * C93 + C44851 * C223) * C20398 +
                       (C222 * C98 + C44851 * C228) * C44729) *
                          C20394 +
                      (C20904 + C20905) * C20395 + C22302 * C20396) *
                         C3152 -
                     ((C22747 + C22748) * C20396 + (C22743 + C22744) * C20395 +
                      ((C222 * C1230 + C44851 * C1368) * C44729 +
                       (C222 * C1226 + C44851 * C1364) * C20398) *
                          C20394) *
                         C44910) *
                        C44786 * C1808 +
                    (((C1382 * C20398 + C1381 * C44729) * C20394 +
                      (C5901 * C20398 + C5900 * C44729) * C20395 +
                      ((C222 * C7524 + C44851 * C7678) * C20398 +
                       (C222 * C7526 + C44851 * C7680) * C44729) *
                          C20396) *
                         C44910 -
                     ((C20911 + C20910) * C20396 + (C20909 + C20908) * C20395 +
                      (C247 * C44729 + C246 * C20398) * C20394) *
                         C3152) *
                        C44786 * C44906)) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[42] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C20398 * C93 + C44729 * C98) * C20446 +
            (C20398 * C156 + C44729 * C289) * C20394 + C20978 * C20447 +
            C20979 * C20395 + C20980 * C20448 + C20981 * C20396) *
               C44851 * C3152 -
           (C22808 * C20396 + C22809 * C20448 + C22810 * C20395 +
            C22811 * C20447 + (C20398 * C1294 + C44729 * C1434) * C20394 +
            (C20398 * C1226 + C44729 * C1230) * C20446) *
               C44851 * C44910) *
              C44786 * C1808 +
          (((C20398 * C1225 + C44729 * C1229) * C20446 +
            (C20398 * C1293 + C44729 * C1433) * C20394 +
            (C20398 * C2655 + C44729 * C2658) * C20447 +
            (C20398 * C2717 + C44729 * C2829) * C20395 +
            (C20398 * C7524 + C44729 * C7526) * C20448 +
            (C20398 * C7608 + C44729 * C7758) * C20396) *
               C44851 * C44910 -
           (C20985 * C20396 + C20984 * C20448 + C20983 * C20395 +
            C20982 * C20447 + (C20398 * C157 + C44729 * C290) * C20394 +
            (C20398 * C94 + C44729 * C99) * C20446) *
               C44851 * C3152) *
              C44786 * C44906)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[42] += (2 * std::pow(Pi, 2.5) *
                   (((C20563 * C93 + C20567 + C20567 + C20394 * C333 +
                      C20564 * C642 + C20568 + C20568 + C20395 * C904 +
                      C20565 * C2252 + C20569 + C20569 + C20396 * C2431) *
                         C44729 * C44851 * C3152 -
                     (C20565 * C7523 + C21518 + C21518 + C20396 * C7837 +
                      C20564 * C2654 + C21519 + C21519 + C20395 * C2881 +
                      C20563 * C1226 + C21520 + C21520 + C20394 * C1488) *
                         C44729 * C44851 * C44910) *
                        C44786 * C1808 +
                    ((C20563 * C1225 + C21521 + C21521 + C20394 * C1487 +
                      C20564 * C2655 + C21522 + C21522 + C20395 * C2882 +
                      C20565 * C7524 + C21523 + C21523 + C20396 * C7838) *
                         C44729 * C44851 * C44910 -
                     (C20565 * C2253 + C20570 + C20570 + C20396 * C2432 +
                      C20564 * C641 + C20571 + C20571 + C20395 * C903 +
                      C20563 * C94 + C20572 + C20572 + C20394 * C334) *
                         C44729 * C44851 * C3152) *
                        C44786 * C44906)) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[42] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C222 * C93 + C44851 * C223) * C20446 +
            (C222 * C156 + C44851 * C396) * C20394 + C5196 * C20447 +
            C5447 * C20395 + C7111 * C20448 + C7288 * C20396) *
               C44729 * C3152 -
           (C22919 * C20396 + C22746 * C20448 + C7914 * C20395 +
            C7689 * C20447 + (C222 * C1294 + C44851 * C1556) * C20394 +
            (C222 * C1226 + C44851 * C1364) * C20446) *
               C44729 * C44910) *
              C44786 * C1808 +
          ((C1382 * C20446 + C1566 * C20394 + C5901 * C20447 + C6121 * C20395 +
            (C222 * C7524 + C44851 * C7678) * C20448 +
            (C222 * C7608 + C44851 * C7910) * C20396) *
               C44729 * C44910 -
           (C5448 * C20396 + C5199 * C20448 + C982 * C20395 + C798 * C20447 +
            C411 * C20394 + C246 * C20446) *
               C44729 * C3152) *
              C44786 * C44906)) /
        (p * q * std::sqrt(p + q));
    d2eezx[42] += (2 * std::pow(Pi, 2.5) *
                   (((((C20398 * C93 + C44729 * C98) * C222 +
                       (C20398 * C223 + C44729 * C455) * C44851) *
                          C20394 +
                      (C21142 + C21158) * C20395 + C22479 * C20396) *
                         C3152 -
                     ((C22979 + C22973) * C20396 + (C22980 + C22976) * C20395 +
                      ((C20398 * C1364 + C44729 * C1620) * C44851 +
                       (C20398 * C1226 + C44729 * C1230) * C222) *
                          C20394) *
                         C44910) *
                        C44786 * C1808 +
                    ((((C20398 * C1225 + C44729 * C1229) * C222 +
                       (C20398 * C1363 + C44729 * C1619) * C44851) *
                          C20394 +
                      ((C20398 * C2655 + C44729 * C2658) * C222 +
                       (C20398 * C2773 + C44729 * C2991) * C44851) *
                          C20395 +
                      ((C20398 * C7524 + C44729 * C7526) * C222 +
                       (C20398 * C7678 + C44729 * C7981) * C44851) *
                          C20396) *
                         C44910 -
                     ((C21161 + C21151) * C20396 + (C21160 + C21148) * C20395 +
                      ((C20398 * C224 + C44729 * C456) * C44851 +
                       (C20398 * C94 + C44729 * C99) * C222) *
                          C20394) *
                         C3152) *
                        C44786 * C44906)) /
                  (p * q * std::sqrt(p + q));
    d2eezy[42] += (2 * std::pow(Pi, 2.5) *
                   ((((C20446 * C93 + C20394 * C156 + C20447 * C642 +
                       C20395 * C710 + C20448 * C2252 + C20396 * C2302) *
                          C222 +
                      (C20446 * C223 + C20394 * C498 + C20447 * C780 +
                       C20395 * C1090 + C20448 * C2346 + C20396 * C2557) *
                          C44851) *
                         C44729 * C3152 -
                     ((C20448 * C7677 + C20396 * C8054 + C20447 * C2772 +
                       C20395 * C3043 + C20446 * C1364 + C20394 * C1674) *
                          C44851 +
                      (C20448 * C7523 + C20396 * C7607 + C20447 * C2654 +
                       C20395 * C2716 + C20446 * C1226 + C20394 * C1294) *
                          C222) *
                         C44729 * C44910) *
                        C44786 * C1808 +
                    (((C20446 * C1225 + C20394 * C1293 + C20447 * C2655 +
                       C20395 * C2717 + C20448 * C7524 + C20396 * C7608) *
                          C222 +
                      (C20446 * C1363 + C20394 * C1673 + C20447 * C2773 +
                       C20395 * C3044 + C20448 * C7678 + C20396 * C8055) *
                          C44851) *
                         C44729 * C44910 -
                     ((C20448 * C2347 + C20396 * C2558 + C20447 * C779 +
                       C20395 * C1089 + C20446 * C224 + C20394 * C499) *
                          C44851 +
                      (C20448 * C2253 + C20396 * C2303 + C20447 * C641 +
                       C20395 * C709 + C20446 * C94 + C20394 * C157) *
                          C222) *
                         C44729 * C3152) *
                        C44786 * C44906)) /
                  (p * q * std::sqrt(p + q));
    d2eezz[42] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C557 * C93 + C564 + C564 + C44851 * C558) * C20394 +
            C5675 * C20395 + C7457 * C20396) *
               C44729 * C3152 -
           (C23088 * C20396 + C8131 * C20395 +
            (C557 * C1226 + C1747 + C1747 + C44851 * C1738) * C20394) *
               C44729 * C44910) *
              C44786 * C1808 +
          ((C1754 * C20394 + C6332 * C20395 +
            (C557 * C7524 + C8128 + C8128 + C44851 * C8123) * C20396) *
               C44729 * C44910 -
           (C5676 * C20396 + C1170 * C20395 + C581 * C20394) * C44729 * C3152) *
              C44786 * C44906)) /
        (p * q * std::sqrt(p + q));
    d2eexx[43] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C20397 * C93 + C20400 + C20400 + C44729 * C103) * C44851 * C20394 +
            C20800 * C20395 + C20801 * C20396) *
               C3152 -
           (C22633 * C20396 + C22634 * C20395 +
            (C20397 * C1226 + C21314 + C21314 + C44729 * C1234) * C44851 *
                C20394) *
               C44910) *
              C636 +
          ((C22634 * C20394 + C22633 * C20395 +
            (C20397 * C22618 + C22626 + C22626 + C44729 * C22620) * C44851 *
                C20396) *
               C44910 -
           (C22221 * C20396 + C20801 * C20395 + C20800 * C20394) * C3152) *
              C44908) *
         C44752) /
        (p * q * std::sqrt(p + q));
    d2eexy[43] += (2 * std::pow(Pi, 2.5) *
                   ((((C20446 * C93 + C20394 * C156 + C20447 * C642 +
                       C20395 * C710 + C20448 * C2252 + C20396 * C2302) *
                          C20398 +
                      (C20446 * C98 + C20394 * C161 + C20447 * C646 +
                       C20395 * C714 + C20448 * C2255 + C20396 * C2305) *
                          C44729) *
                         C44851 * C3152 -
                     ((C20448 * C7525 + C20396 * C7609 + C20447 * C2657 +
                       C20395 * C2719 + C20446 * C1230 + C20394 * C1298) *
                          C44729 +
                      (C20448 * C7523 + C20396 * C7607 + C20447 * C2654 +
                       C20395 * C2716 + C20446 * C1226 + C20394 * C1294) *
                          C20398) *
                         C44851 * C44910) *
                        C636 +
                    (((C20446 * C2654 + C20394 * C2716 + C20447 * C7523 +
                       C20395 * C7607 + C20448 * C22618 + C20396 * C22684) *
                          C20398 +
                      (C20446 * C2657 + C20394 * C2719 + C20447 * C7525 +
                       C20395 * C7609 + C20448 * C22619 + C20396 * C22685) *
                          C44729) *
                         C44851 * C44910 -
                     ((C20448 * C6979 + C20396 * C7047 + C20447 * C2255 +
                       C20395 * C2305 + C20446 * C646 + C20394 * C714) *
                          C44729 +
                      (C20448 * C6977 + C20396 * C7045 + C20447 * C2252 +
                       C20395 * C2302 + C20446 * C642 + C20394 * C710) *
                          C20398) *
                         C44851 * C3152) *
                        C44908) *
                   C44752) /
                  (p * q * std::sqrt(p + q));
    d2eexz[43] += (2 * std::pow(Pi, 2.5) *
                   (((((C222 * C93 + C44851 * C223) * C20398 +
                       (C222 * C98 + C44851 * C228) * C44729) *
                          C20394 +
                      (C20904 + C20905) * C20395 + C22302 * C20396) *
                         C3152 -
                     ((C22747 + C22748) * C20396 + (C22743 + C22744) * C20395 +
                      ((C222 * C1230 + C44851 * C1368) * C44729 +
                       (C222 * C1226 + C44851 * C1364) * C20398) *
                          C20394) *
                         C44910) *
                        C636 +
                    (((C22744 + C22743) * C20394 + (C22748 + C22747) * C20395 +
                      ((C222 * C22618 + C44851 * C22736) * C20398 +
                       (C222 * C22619 + C44851 * C22737) * C44729) *
                          C20396) *
                         C44910 -
                     ((C22309 + C22310) * C20396 + (C20907 + C20906) * C20395 +
                      (C20905 + C20904) * C20394) *
                         C3152) *
                        C44908) *
                   C44752) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[43] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C20398 * C93 + C44729 * C98) * C20446 +
            (C20398 * C156 + C44729 * C289) * C20394 + C20978 * C20447 +
            C20979 * C20395 + C20980 * C20448 + C20981 * C20396) *
               C44851 * C3152 -
           (C22808 * C20396 + C22809 * C20448 + C22810 * C20395 +
            C22811 * C20447 + (C20398 * C1294 + C44729 * C1434) * C20394 +
            (C20398 * C1226 + C44729 * C1230) * C20446) *
               C44851 * C44910) *
              C636 +
          ((C22811 * C20446 + C22810 * C20394 + C22809 * C20447 +
            C22808 * C20395 + (C20398 * C22618 + C44729 * C22619) * C20448 +
            (C20398 * C22684 + C44729 * C22798) * C20396) *
               C44851 * C44910 -
           (C22354 * C20396 + C22355 * C20448 + C20981 * C20395 +
            C20980 * C20447 + C20979 * C20394 + C20978 * C20446) *
               C44851 * C3152) *
              C44908) *
         C44752) /
        (p * q * std::sqrt(p + q));
    d2eeyy[43] += (2 * std::pow(Pi, 2.5) *
                   (((C20563 * C93 + C20567 + C20567 + C20394 * C333 +
                      C20564 * C642 + C20568 + C20568 + C20395 * C904 +
                      C20565 * C2252 + C20569 + C20569 + C20396 * C2431) *
                         C44729 * C44851 * C3152 -
                     (C20565 * C7523 + C21518 + C21518 + C20396 * C7837 +
                      C20564 * C2654 + C21519 + C21519 + C20395 * C2881 +
                      C20563 * C1226 + C21520 + C21520 + C20394 * C1488) *
                         C44729 * C44851 * C44910) *
                        C636 +
                    ((C20563 * C2654 + C22863 + C22863 + C20394 * C2881 +
                      C20564 * C7523 + C22864 + C22864 + C20395 * C7837 +
                      C20565 * C22618 + C22865 + C22865 + C20396 * C22861) *
                         C44729 * C44851 * C44910 -
                     (C20565 * C6977 + C21036 + C21036 + C20396 * C7227 +
                      C20564 * C2252 + C21037 + C21037 + C20395 * C2431 +
                      C20563 * C642 + C21038 + C21038 + C20394 * C904) *
                         C44729 * C44851 * C3152) *
                        C44908) *
                   C44752) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[43] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C222 * C93 + C44851 * C223) * C20446 +
            (C222 * C156 + C44851 * C396) * C20394 + C5196 * C20447 +
            C5447 * C20395 + C7111 * C20448 + C7288 * C20396) *
               C44729 * C3152 -
           (C22919 * C20396 + C22746 * C20448 + C7914 * C20395 +
            C7689 * C20447 + (C222 * C1294 + C44851 * C1556) * C20394 +
            (C222 * C1226 + C44851 * C1364) * C20446) *
               C44729 * C44910) *
              C636 +
          ((C7689 * C20446 + C7914 * C20394 + C22746 * C20447 +
            C22919 * C20395 + (C222 * C22618 + C44851 * C22736) * C20448 +
            (C222 * C22684 + C44851 * C22915) * C20396) *
               C44729 * C44910 -
           (C22439 * C20396 + C22308 * C20448 + C7288 * C20395 +
            C7111 * C20447 + C5447 * C20394 + C5196 * C20446) *
               C44729 * C3152) *
              C44908) *
         C44752) /
        (p * q * std::sqrt(p + q));
    d2eezx[43] += (2 * std::pow(Pi, 2.5) *
                   (((((C20398 * C93 + C44729 * C98) * C222 +
                       (C20398 * C223 + C44729 * C455) * C44851) *
                          C20394 +
                      (C21142 + C21158) * C20395 + C22479 * C20396) *
                         C3152 -
                     ((C22979 + C22973) * C20396 + (C22980 + C22976) * C20395 +
                      ((C20398 * C1364 + C44729 * C1620) * C44851 +
                       (C20398 * C1226 + C44729 * C1230) * C222) *
                          C20394) *
                         C44910) *
                        C636 +
                    (((C22976 + C22980) * C20394 + (C22973 + C22979) * C20395 +
                      ((C20398 * C22618 + C44729 * C22619) * C222 +
                       (C20398 * C22736 + C44729 * C22969) * C44851) *
                          C20396) *
                         C44910 -
                     ((C22484 + C22482) * C20396 + (C21159 + C21145) * C20395 +
                      (C21158 + C21142) * C20394) *
                         C3152) *
                        C44908) *
                   C44752) /
                  (p * q * std::sqrt(p + q));
    d2eezy[43] += (2 * std::pow(Pi, 2.5) *
                   ((((C20446 * C93 + C20394 * C156 + C20447 * C642 +
                       C20395 * C710 + C20448 * C2252 + C20396 * C2302) *
                          C222 +
                      (C20446 * C223 + C20394 * C498 + C20447 * C780 +
                       C20395 * C1090 + C20448 * C2346 + C20396 * C2557) *
                          C44851) *
                         C44729 * C3152 -
                     ((C20448 * C7677 + C20396 * C8054 + C20447 * C2772 +
                       C20395 * C3043 + C20446 * C1364 + C20394 * C1674) *
                          C44851 +
                      (C20448 * C7523 + C20396 * C7607 + C20447 * C2654 +
                       C20395 * C2716 + C20446 * C1226 + C20394 * C1294) *
                          C222) *
                         C44729 * C44910) *
                        C636 +
                    (((C20446 * C2654 + C20394 * C2716 + C20447 * C7523 +
                       C20395 * C7607 + C20448 * C22618 + C20396 * C22684) *
                          C222 +
                      (C20446 * C2772 + C20394 * C3043 + C20447 * C7677 +
                       C20395 * C8054 + C20448 * C22736 + C20396 * C23030) *
                          C44851) *
                         C44729 * C44910 -
                     ((C20448 * C7099 + C20396 * C7396 + C20447 * C2346 +
                       C20395 * C2557 + C20446 * C780 + C20394 * C1090) *
                          C44851 +
                      (C20448 * C6977 + C20396 * C7045 + C20447 * C2252 +
                       C20395 * C2302 + C20446 * C642 + C20394 * C710) *
                          C222) *
                         C44729 * C3152) *
                        C44908) *
                   C44752) /
                  (p * q * std::sqrt(p + q));
    d2eezz[43] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C557 * C93 + C564 + C564 + C44851 * C558) * C20394 +
            C5675 * C20395 + C7457 * C20396) *
               C44729 * C3152 -
           (C23088 * C20396 + C8131 * C20395 +
            (C557 * C1226 + C1747 + C1747 + C44851 * C1738) * C20394) *
               C44729 * C44910) *
              C636 +
          ((C8131 * C20394 + C23088 * C20395 +
            (C557 * C22618 + C23085 + C23085 + C44851 * C23081) * C20396) *
               C44729 * C44910 -
           (C22568 * C20396 + C7457 * C20395 + C5675 * C20394) * C44729 *
               C3152) *
              C44908) *
         C44752) /
        (p * q * std::sqrt(p + q));
    d2eexx[44] +=
        (2 * std::pow(Pi, 2.5) *
         (((C20397 * C93 + C20400 + C20400 + C44729 * C103) * C44851 * C20394 +
           C20800 * C20395 + C20801 * C20396) *
              C4042 -
          (C22633 * C20396 + C22634 * C20395 +
           (C20397 * C1226 + C21314 + C21314 + C44729 * C1234) * C44851 *
               C20394) *
              C4043 +
          ((C20397 * C4045 + C24030 + C24030 + C44729 * C4051) * C44851 *
               C20394 +
           (C20397 * C9369 + C24031 + C24031 + C44729 * C9373) * C44851 *
               C20395 +
           (C20397 * C24026 + C24032 + C24032 + C44729 * C24028) * C44851 *
               C20396) *
              C4044) *
         C44786 * C44752) /
        (p * q * std::sqrt(p + q));
    d2eexy[44] += (2 * std::pow(Pi, 2.5) *
                   (((C20446 * C93 + C20394 * C156 + C20447 * C642 +
                      C20395 * C710 + C20448 * C2252 + C20396 * C2302) *
                         C20398 +
                     (C20446 * C98 + C20394 * C161 + C20447 * C646 +
                      C20395 * C714 + C20448 * C2255 + C20396 * C2305) *
                         C44729) *
                        C44851 * C4042 -
                    ((C20448 * C7525 + C20396 * C7609 + C20447 * C2657 +
                      C20395 * C2719 + C20446 * C1230 + C20394 * C1298) *
                         C44729 +
                     (C20448 * C7523 + C20396 * C7607 + C20447 * C2654 +
                      C20395 * C2716 + C20446 * C1226 + C20394 * C1294) *
                         C20398) *
                        C44851 * C4043 +
                    ((C20446 * C4045 + C20394 * C4095 + C20447 * C9369 +
                      C20395 * C9429 + C20448 * C24026 + C20396 * C24070) *
                         C20398 +
                     (C20446 * C4048 + C20394 * C4098 + C20447 * C9371 +
                      C20395 * C9431 + C20448 * C24027 + C20396 * C24071) *
                         C44729) *
                        C44851 * C4044) *
                   C44786 * C44752) /
                  (p * q * std::sqrt(p + q));
    d2eexz[44] += (2 * std::pow(Pi, 2.5) *
                   ((((C222 * C93 + C44851 * C223) * C20398 +
                      (C222 * C98 + C44851 * C228) * C44729) *
                         C20394 +
                     (C20904 + C20905) * C20395 + C22302 * C20396) *
                        C4042 -
                    ((C22747 + C22748) * C20396 + (C22743 + C22744) * C20395 +
                     ((C222 * C1230 + C44851 * C1368) * C44729 +
                      (C222 * C1226 + C44851 * C1364) * C20398) *
                         C20394) *
                        C4043 +
                    (((C222 * C4045 + C44851 * C4139) * C20398 +
                      (C222 * C4048 + C44851 * C4142) * C44729) *
                         C20394 +
                     ((C222 * C9369 + C44851 * C9483) * C20398 +
                      (C222 * C9371 + C44851 * C9485) * C44729) *
                         C20395 +
                     ((C222 * C24026 + C44851 * C24110) * C20398 +
                      (C222 * C24027 + C44851 * C24111) * C44729) *
                         C20396) *
                        C4044) *
                   C44786 * C44752) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[44] +=
        (2 * std::pow(Pi, 2.5) *
         (((C20398 * C93 + C44729 * C98) * C20446 +
           (C20398 * C156 + C44729 * C289) * C20394 + C20978 * C20447 +
           C20979 * C20395 + C20980 * C20448 + C20981 * C20396) *
              C44851 * C4042 -
          (C22808 * C20396 + C22809 * C20448 + C22810 * C20395 +
           C22811 * C20447 + (C20398 * C1294 + C44729 * C1434) * C20394 +
           (C20398 * C1226 + C44729 * C1230) * C20446) *
              C44851 * C4043 +
          ((C20398 * C4045 + C44729 * C4048) * C20446 +
           (C20398 * C4095 + C44729 * C4183) * C20394 +
           (C20398 * C9369 + C44729 * C9371) * C20447 +
           (C20398 * C9429 + C44729 * C9537) * C20395 +
           (C20398 * C24026 + C44729 * C24027) * C20448 +
           (C20398 * C24070 + C44729 * C24150) * C20396) *
              C44851 * C4044) *
         C44786 * C44752) /
        (p * q * std::sqrt(p + q));
    d2eeyy[44] += (2 * std::pow(Pi, 2.5) *
                   ((C20563 * C93 + C20567 + C20567 + C20394 * C333 +
                     C20564 * C642 + C20568 + C20568 + C20395 * C904 +
                     C20565 * C2252 + C20569 + C20569 + C20396 * C2431) *
                        C44729 * C44851 * C4042 -
                    (C20565 * C7523 + C21518 + C21518 + C20396 * C7837 +
                     C20564 * C2654 + C21519 + C21519 + C20395 * C2881 +
                     C20563 * C1226 + C21520 + C21520 + C20394 * C1488) *
                        C44729 * C44851 * C4043 +
                    (C20563 * C4045 + C24191 + C24191 + C20394 * C4224 +
                     C20564 * C9369 + C24192 + C24192 + C20395 * C9589 +
                     C20565 * C24026 + C24193 + C24193 + C20396 * C24189) *
                        C44729 * C44851 * C4044) *
                   C44786 * C44752) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[44] += (2 * std::pow(Pi, 2.5) *
                   (((C222 * C93 + C44851 * C223) * C20446 +
                     (C222 * C156 + C44851 * C396) * C20394 + C5196 * C20447 +
                     C5447 * C20395 + C7111 * C20448 + C7288 * C20396) *
                        C44729 * C4042 -
                    (C22919 * C20396 + C22746 * C20448 + C7914 * C20395 +
                     C7689 * C20447 + (C222 * C1294 + C44851 * C1556) * C20394 +
                     (C222 * C1226 + C44851 * C1364) * C20446) *
                        C44729 * C4043 +
                    ((C222 * C4045 + C44851 * C4139) * C20446 +
                     (C222 * C4095 + C44851 * C4268) * C20394 +
                     (C222 * C9369 + C44851 * C9483) * C20447 +
                     (C222 * C9429 + C44851 * C9645) * C20395 +
                     (C222 * C24026 + C44851 * C24110) * C20448 +
                     (C222 * C24070 + C44851 * C24231) * C20396) *
                        C44729 * C4044) *
                   C44786 * C44752) /
                  (p * q * std::sqrt(p + q));
    d2eezx[44] += (2 * std::pow(Pi, 2.5) *
                   ((((C20398 * C93 + C44729 * C98) * C222 +
                      (C20398 * C223 + C44729 * C455) * C44851) *
                         C20394 +
                     (C21142 + C21158) * C20395 + C22479 * C20396) *
                        C4042 -
                    ((C22979 + C22973) * C20396 + (C22980 + C22976) * C20395 +
                     ((C20398 * C1364 + C44729 * C1620) * C44851 +
                      (C20398 * C1226 + C44729 * C1230) * C222) *
                         C20394) *
                        C4043 +
                    (((C20398 * C4045 + C44729 * C4048) * C222 +
                      (C20398 * C4139 + C44729 * C4309) * C44851) *
                         C20394 +
                     ((C20398 * C9369 + C44729 * C9371) * C222 +
                      (C20398 * C9483 + C44729 * C9697) * C44851) *
                         C20395 +
                     ((C20398 * C24026 + C44729 * C24027) * C222 +
                      (C20398 * C24110 + C44729 * C24270) * C44851) *
                         C20396) *
                        C4044) *
                   C44786 * C44752) /
                  (p * q * std::sqrt(p + q));
    d2eezy[44] += (2 * std::pow(Pi, 2.5) *
                   (((C20446 * C93 + C20394 * C156 + C20447 * C642 +
                      C20395 * C710 + C20448 * C2252 + C20396 * C2302) *
                         C222 +
                     (C20446 * C223 + C20394 * C498 + C20447 * C780 +
                      C20395 * C1090 + C20448 * C2346 + C20396 * C2557) *
                         C44851) *
                        C44729 * C4042 -
                    ((C20448 * C7677 + C20396 * C8054 + C20447 * C2772 +
                      C20395 * C3043 + C20446 * C1364 + C20394 * C1674) *
                         C44851 +
                     (C20448 * C7523 + C20396 * C7607 + C20447 * C2654 +
                      C20395 * C2716 + C20446 * C1226 + C20394 * C1294) *
                         C222) *
                        C44729 * C4043 +
                    ((C20446 * C4045 + C20394 * C4095 + C20447 * C9369 +
                      C20395 * C9429 + C20448 * C24026 + C20396 * C24070) *
                         C222 +
                     (C20446 * C4139 + C20394 * C4350 + C20447 * C9483 +
                      C20395 * C9749 + C20448 * C24110 + C20396 * C24309) *
                         C44851) *
                        C44729 * C4044) *
                   C44786 * C44752) /
                  (p * q * std::sqrt(p + q));
    d2eezz[44] +=
        (2 * std::pow(Pi, 2.5) *
         (((C557 * C93 + C564 + C564 + C44851 * C558) * C20394 +
           C5675 * C20395 + C7457 * C20396) *
              C44729 * C4042 -
          (C23088 * C20396 + C8131 * C20395 +
           (C557 * C1226 + C1747 + C1747 + C44851 * C1738) * C20394) *
              C44729 * C4043 +
          ((C557 * C4045 + C4395 + C4395 + C44851 * C4391) * C20394 +
           (C557 * C9369 + C9804 + C9804 + C44851 * C9801) * C20395 +
           (C557 * C24026 + C24350 + C24350 + C44851 * C24348) * C20396) *
              C44729 * C4044) *
         C44786 * C44752) /
        (p * q * std::sqrt(p + q));
    d2eexx[45] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C20397 * C93 + C20400 + C20400 + C44729 * C103) * C9855 +
            (C20397 * C1226 + C21314 + C21314 + C44729 * C1234) * C44914) *
               C15153 +
           (C20796 * C9855 + C22632 * C44914) * C44912) *
              C44803 * C44786 * C84 -
          (((C20397 * C2655 + C21316 + C21316 + C44729 * C2661) * C44914 +
            C20798 * C9855) *
               C44912 +
           ((C20397 * C1225 + C21315 + C21315 + C44729 * C1233) * C44914 +
            (C20397 * C94 + C20405 + C20405 + C44729 * C104) * C9855) *
               C15153) *
              C44803 * C44786 * C85 +
          (((C20397 * C95 + C20406 + C20406 + C44729 * C105) * C9855 +
            (C20397 * C1224 + C24401 + C24401 + C44729 * C1232) * C44914) *
               C15153 +
           ((C20397 * C640 + C20407 + C20407 + C44729 * C648) * C9855 +
            (C20397 * C2656 + C24402 + C24402 + C44729 * C2662) * C44914) *
               C44912) *
              C44803 * C44786 * C86)) /
        (p * q * std::sqrt(p + q));
    d2eexy[45] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C15221 * C93 + C15153 * C156 + C15222 * C642 + C44912 * C710) *
                C20398 +
            (C15221 * C98 + C15153 * C161 + C15222 * C646 + C44912 * C714) *
                C44729) *
               C9855 +
           ((C15221 * C1226 + C15153 * C1294 + C15222 * C2654 +
             C44912 * C2716) *
                C20398 +
            (C15221 * C1230 + C15153 * C1298 + C15222 * C2657 +
             C44912 * C2719) *
                C44729) *
               C44914) *
              C44803 * C44786 * C84 -
          (((C16502 + C16503) * C44729 + (C16504 + C16505) * C20398) * C44914 +
           ((C15243 + C15242) * C44729 + (C15241 + C15240) * C20398) * C9855) *
              C44803 * C44786 * C85 +
          (((C15247 + C15246) * C20398 + (C15245 + C15244) * C44729) * C9855 +
           ((C15221 * C1224 + C15153 * C1292 + C15222 * C2656 +
             C44912 * C2718) *
                C20398 +
            (C15221 * C1228 + C15153 * C1296 + C15222 * C2659 +
             C44912 * C2721) *
                C44729) *
               C44914) *
              C44803 * C44786 * C86)) /
        (p * q * std::sqrt(p + q));
    d2eexz[45] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C9959 * C93 + C9855 * C223 + C9960 * C1226 + C44914 * C1364) *
                C20398 +
            (C9959 * C98 + C9855 * C228 + C9960 * C1230 + C44914 * C1368) *
                C44729) *
               C15153 +
           ((C9959 * C642 + C9855 * C780 + C9960 * C2654 + C44914 * C2772) *
                C20398 +
            (C9959 * C646 + C9855 * C784 + C9960 * C2657 + C44914 * C2775) *
                C44729) *
               C44912) *
              C44803 * C44786 * C84 -
          (((C10548 + C10549) * C44729 + (C10550 + C10551) * C20398) * C44912 +
           ((C9981 + C9980) * C44729 + (C9979 + C9978) * C20398) * C15153) *
              C44803 * C44786 * C85 +
          (((C9985 + C9984) * C20398 + (C9983 + C9982) * C44729) * C15153 +
           ((C9959 * C640 + C9855 * C778 + C9960 * C2656 + C44914 * C2774) *
                C20398 +
            (C9959 * C644 + C9855 * C782 + C9960 * C2659 + C44914 * C2777) *
                C44729) *
               C44912) *
              C44803 * C44786 * C86)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[45] += (2 * std::pow(Pi, 2.5) *
                   ((((C20398 * C93 + C44729 * C98) * C15221 +
                      (C20398 * C156 + C44729 * C289) * C15153 +
                      C20978 * C15222 + C20979 * C44912) *
                         C9855 +
                     ((C20398 * C1226 + C44729 * C1230) * C15221 +
                      (C20398 * C1294 + C44729 * C1434) * C15153 +
                      C22811 * C15222 + C22810 * C44912) *
                         C44914) *
                        C44803 * C44786 * C84 -
                    (((C20398 * C2717 + C44729 * C2829) * C44912 +
                      (C20398 * C2655 + C44729 * C2658) * C15222 +
                      (C20398 * C1293 + C44729 * C1433) * C15153 +
                      (C20398 * C1225 + C44729 * C1229) * C15221) *
                         C44914 +
                     (C20983 * C44912 + C20982 * C15222 +
                      (C20398 * C157 + C44729 * C290) * C15153 +
                      (C20398 * C94 + C44729 * C99) * C15221) *
                         C9855) *
                        C44803 * C44786 * C85 +
                    (((C20398 * C95 + C44729 * C100) * C15221 +
                      (C20398 * C158 + C44729 * C291) * C15153 +
                      (C20398 * C640 + C44729 * C644) * C15222 +
                      (C20398 * C708 + C44729 * C848) * C44912) *
                         C9855 +
                     ((C20398 * C1224 + C44729 * C1228) * C15221 +
                      (C20398 * C1292 + C44729 * C1432) * C15153 +
                      (C20398 * C2656 + C44729 * C2659) * C15222 +
                      (C20398 * C2718 + C44729 * C2830) * C44912) *
                         C44914) *
                        C44803 * C44786 * C86)) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[45] += (2 * std::pow(Pi, 2.5) *
                   (((C15397 * C93 + C15400 + C15400 + C15153 * C333 +
                      C15398 * C642 + C15401 + C15401 + C44912 * C904) *
                         C44729 * C9855 +
                     (C15397 * C1226 + C16711 + C16711 + C15153 * C1488 +
                      C15398 * C2654 + C16710 + C16710 + C44912 * C2881) *
                         C44729 * C44914) *
                        C44803 * C44786 * C84 -
                    ((C16718 + C16719) * C44729 * C44914 +
                     (C15425 + C15424) * C44729 * C9855) *
                        C44803 * C44786 * C85 +
                    ((C15427 + C15426) * C44729 * C9855 +
                     (C15397 * C1224 + C16712 + C16712 + C15153 * C1486 +
                      C15398 * C2656 + C16713 + C16713 + C44912 * C2883) *
                         C44729 * C44914) *
                        C44803 * C44786 * C86)) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[45] +=
        (2 * std::pow(Pi, 2.5) *
         (((C9959 * C93 + C9855 * C223 + C9960 * C1226 + C44914 * C1364) *
               C15221 +
           (C9959 * C156 + C9855 * C396 + C9960 * C1294 + C44914 * C1556) *
               C15153 +
           (C9959 * C642 + C9855 * C780 + C9960 * C2654 + C44914 * C2772) *
               C15222 +
           (C9959 * C710 + C9855 * C972 + C9960 * C2716 + C44914 * C2937) *
               C44912) *
              C44729 * C44803 * C44786 * C84 -
          ((C10759 + C10760) * C44912 + (C10550 + C10551) * C15222 +
           (C10145 + C10144) * C15153 + (C9979 + C9978) * C15221) *
              C44729 * C44803 * C44786 * C85 +
          ((C9985 + C9984) * C15221 + (C10147 + C10146) * C15153 +
           (C9959 * C640 + C9855 * C778 + C9960 * C2656 + C44914 * C2774) *
               C15222 +
           (C9959 * C708 + C9855 * C970 + C9960 * C2718 + C44914 * C2939) *
               C44912) *
              C44729 * C44803 * C44786 * C86)) /
        (p * q * std::sqrt(p + q));
    d2eezx[45] += (2 * std::pow(Pi, 2.5) *
                   ((((C20398 * C93 + C44729 * C98) * C9959 +
                      (C20398 * C223 + C44729 * C455) * C9855 +
                      (C20398 * C1226 + C44729 * C1230) * C9960 +
                      (C20398 * C1364 + C44729 * C1620) * C44914) *
                         C15153 +
                     (C20978 * C9959 + C21154 * C9855 + C22811 * C9960 +
                      C22978 * C44914) *
                         C44912) *
                        C44803 * C44786 * C84 -
                    (((C20398 * C2773 + C44729 * C2991) * C44914 +
                      (C20398 * C2655 + C44729 * C2658) * C9960 +
                      C21156 * C9855 + C20982 * C9959) *
                         C44912 +
                     ((C20398 * C1363 + C44729 * C1619) * C44914 +
                      (C20398 * C1225 + C44729 * C1229) * C9960 +
                      (C20398 * C224 + C44729 * C456) * C9855 +
                      (C20398 * C94 + C44729 * C99) * C9959) *
                         C15153) *
                        C44803 * C44786 * C85 +
                    (((C20398 * C95 + C44729 * C100) * C9959 +
                      (C20398 * C225 + C44729 * C457) * C9855 +
                      (C20398 * C1224 + C44729 * C1228) * C9960 +
                      (C20398 * C1362 + C44729 * C1618) * C44914) *
                         C15153 +
                     ((C20398 * C640 + C44729 * C644) * C9959 +
                      (C20398 * C778 + C44729 * C1034) * C9855 +
                      (C20398 * C2656 + C44729 * C2659) * C9960 +
                      (C20398 * C2774 + C44729 * C2992) * C44914) *
                         C44912) *
                        C44803 * C44786 * C86)) /
                  (p * q * std::sqrt(p + q));
    d2eezy[45] +=
        (2 * std::pow(Pi, 2.5) *
         (((C15221 * C93 + C15153 * C156 + C15222 * C642 + C44912 * C710) *
               C9959 +
           (C15221 * C223 + C15153 * C498 + C15222 * C780 + C44912 * C1090) *
               C9855 +
           (C15221 * C1226 + C15153 * C1294 + C15222 * C2654 + C44912 * C2716) *
               C9960 +
           (C15221 * C1364 + C15153 * C1674 + C15222 * C2772 + C44912 * C3043) *
               C44914) *
              C44729 * C44803 * C44786 * C84 -
          ((C16926 + C16927) * C44914 + (C16504 + C16505) * C9960 +
           (C15595 + C15594) * C9855 + (C15241 + C15240) * C9959) *
              C44729 * C44803 * C44786 * C85 +
          ((C15247 + C15246) * C9959 + (C15597 + C15596) * C9855 +
           (C15221 * C1224 + C15153 * C1292 + C15222 * C2656 + C44912 * C2718) *
               C9960 +
           (C15221 * C1362 + C15153 * C1672 + C15222 * C2774 + C44912 * C3045) *
               C44914) *
              C44729 * C44803 * C44786 * C86)) /
        (p * q * std::sqrt(p + q));
    d2eezz[45] += (2 * std::pow(Pi, 2.5) *
                   (((C10305 * C93 + C10308 + C10308 + C9855 * C558 +
                      C10306 * C1226 + C10309 + C10309 + C44914 * C1738) *
                         C15153 +
                     (C10305 * C642 + C10973 + C10973 + C9855 * C1154 +
                      C10306 * C2654 + C10972 + C10972 + C44914 * C3096) *
                         C44912) *
                        C44729 * C44803 * C44786 * C84 -
                    ((C10980 + C10981) * C44912 + (C10333 + C10332) * C15153) *
                        C44729 * C44803 * C44786 * C85 +
                    ((C10335 + C10334) * C15153 +
                     (C10305 * C640 + C10974 + C10974 + C9855 * C1152 +
                      C10306 * C2656 + C10975 + C10975 + C44914 * C3098) *
                         C44912) *
                        C44729 * C44803 * C44786 * C86)) /
                  (p * q * std::sqrt(p + q));
    d2eexx[46] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C20397 * C93 + C20400 + C20400 + C44729 * C103) * C9855 +
             (C20397 * C1226 + C21314 + C21314 + C44729 * C1234) * C44914) *
                C15153 +
            (C24869 + C24870) * C44912) *
               C44803 * C636 -
           ((C22631 * C44914 + C20797 * C9855) * C44912 +
            (C24870 + C24869) * C15153) *
               C44803 * C44908) *
              C638 +
          (((C24871 + C24877) * C15153 +
            (C20799 * C9855 +
             (C20397 * C7524 + C21317 + C21317 + C44729 * C7528) * C44914) *
                C44912) *
               C44803 * C44908 -
           ((C24877 + C24871) * C44912 +
            ((C20397 * C1225 + C21315 + C21315 + C44729 * C1233) * C44914 +
             (C20397 * C94 + C20405 + C20405 + C44729 * C104) * C9855) *
                C15153) *
               C44803 * C636) *
              C44906)) /
        (p * q * std::sqrt(p + q));
    d2eexy[46] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C15221 * C93 + C15153 * C156 + C15222 * C642 + C44912 * C710) *
                 C20398 +
             (C15221 * C98 + C15153 * C161 + C15222 * C646 + C44912 * C714) *
                 C44729) *
                C9855 +
            ((C15221 * C1226 + C15153 * C1294 + C15222 * C2654 +
              C44912 * C2716) *
                 C20398 +
             (C15221 * C1230 + C15153 * C1298 + C15222 * C2657 +
              C44912 * C2719) *
                 C44729) *
                C44914) *
               C44803 * C636 -
           (((C15222 * C7525 + C44912 * C7609 + C15221 * C2657 +
              C15153 * C2719) *
                 C44729 +
             (C15222 * C7523 + C44912 * C7607 + C15221 * C2654 +
              C15153 * C2716) *
                 C20398) *
                C44914 +
            ((C15222 * C2255 + C44912 * C2305 + C15221 * C646 + C15153 * C714) *
                 C44729 +
             (C15222 * C2252 + C44912 * C2302 + C15221 * C642 + C15153 * C710) *
                 C20398) *
                C9855) *
               C44803 * C44908) *
              C638 +
          ((((C15819 + C15818) * C20398 + (C15817 + C15816) * C44729) * C9855 +
            ((C15221 * C2655 + C15153 * C2717 + C15222 * C7524 +
              C44912 * C7608) *
                 C20398 +
             (C15221 * C2658 + C15153 * C2720 + C15222 * C7526 +
              C44912 * C7610) *
                 C44729) *
                C44914) *
               C44803 * C44908 -
           (((C16502 + C16503) * C44729 + (C16504 + C16505) * C20398) * C44914 +
            ((C15243 + C15242) * C44729 + (C15241 + C15240) * C20398) * C9855) *
               C44803 * C636) *
              C44906)) /
        (p * q * std::sqrt(p + q));
    d2eexz[46] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C9959 * C93 + C9855 * C223 + C9960 * C1226 + C44914 * C1364) *
                 C20398 +
             (C9959 * C98 + C9855 * C228 + C9960 * C1230 + C44914 * C1368) *
                 C44729) *
                C15153 +
            ((C25018 + C25019) * C20398 + (C25020 + C25021) * C44729) *
                C44912) *
               C44803 * C636 -
           (((C9960 * C7525 + C44914 * C7679 + C9959 * C2255 + C9855 * C2349) *
                 C44729 +
             (C9960 * C7523 + C44914 * C7677 + C9959 * C2252 + C9855 * C2346) *
                 C20398) *
                C44912 +
            ((C25021 + C25020) * C44729 + (C25019 + C25018) * C20398) *
                C15153) *
               C44803 * C44908) *
              C638 +
          ((((C10551 + C10550) * C20398 + (C10549 + C10548) * C44729) * C15153 +
            ((C9959 * C2253 + C9855 * C2347 + C9960 * C7524 + C44914 * C7678) *
                 C20398 +
             (C9959 * C2256 + C9855 * C2350 + C9960 * C7526 + C44914 * C7680) *
                 C44729) *
                C44912) *
               C44803 * C44908 -
           (((C10548 + C10549) * C44729 + (C10550 + C10551) * C20398) * C44912 +
            ((C9981 + C9980) * C44729 + (C9979 + C9978) * C20398) * C15153) *
               C44803 * C636) *
              C44906)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[46] += (2 * std::pow(Pi, 2.5) *
                   (((((C20398 * C93 + C44729 * C98) * C15221 +
                       (C20398 * C156 + C44729 * C289) * C15153 +
                       C20978 * C15222 + C20979 * C44912) *
                          C9855 +
                      ((C20398 * C1226 + C44729 * C1230) * C15221 +
                       (C20398 * C1294 + C44729 * C1434) * C15153 +
                       C22811 * C15222 + C22810 * C44912) *
                          C44914) *
                         C44803 * C636 -
                     ((C22808 * C44912 + C22809 * C15222 + C22810 * C15153 +
                       C22811 * C15221) *
                          C44914 +
                      (C20981 * C44912 + C20980 * C15222 + C20979 * C15153 +
                       C20978 * C15221) *
                          C9855) *
                         C44803 * C44908) *
                        C638 +
                    (((C20982 * C15221 + C20983 * C15153 + C20984 * C15222 +
                       C20985 * C44912) *
                          C9855 +
                      (C25092 * C15221 + C25093 * C15153 +
                       (C20398 * C7524 + C44729 * C7526) * C15222 +
                       (C20398 * C7608 + C44729 * C7758) * C44912) *
                          C44914) *
                         C44803 * C44908 -
                     ((C25093 * C44912 + C25092 * C15222 +
                       (C20398 * C1293 + C44729 * C1433) * C15153 +
                       (C20398 * C1225 + C44729 * C1229) * C15221) *
                          C44914 +
                      (C20983 * C44912 + C20982 * C15222 +
                       (C20398 * C157 + C44729 * C290) * C15153 +
                       (C20398 * C94 + C44729 * C99) * C15221) *
                          C9855) *
                         C44803 * C636) *
                        C44906)) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[46] += (2 * std::pow(Pi, 2.5) *
                   ((((C15397 * C93 + C15400 + C15400 + C15153 * C333 +
                       C15398 * C642 + C15401 + C15401 + C44912 * C904) *
                          C44729 * C9855 +
                      (C15397 * C1226 + C16711 + C16711 + C15153 * C1488 +
                       C15398 * C2654 + C16710 + C16710 + C44912 * C2881) *
                          C44729 * C44914) *
                         C44803 * C636 -
                     ((C15398 * C7523 + C18437 + C18437 + C44912 * C7837 +
                       C15397 * C2654 + C18436 + C18436 + C15153 * C2881) *
                          C44729 * C44914 +
                      (C15398 * C2252 + C16056 + C16056 + C44912 * C2431 +
                       C15397 * C642 + C16057 + C16057 + C15153 * C904) *
                          C44729 * C9855) *
                         C44803 * C44908) *
                        C638 +
                    (((C16065 + C16064) * C44729 * C9855 +
                      (C15397 * C2655 + C18438 + C18438 + C15153 * C2882 +
                       C15398 * C7524 + C18439 + C18439 + C44912 * C7838) *
                          C44729 * C44914) *
                         C44803 * C44908 -
                     ((C16718 + C16719) * C44729 * C44914 +
                      (C15425 + C15424) * C44729 * C9855) *
                         C44803 * C636) *
                        C44906)) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[46] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C9959 * C93 + C9855 * C223 + C9960 * C1226 + C44914 * C1364) *
                C15221 +
            (C9959 * C156 + C9855 * C396 + C9960 * C1294 + C44914 * C1556) *
                C15153 +
            (C25018 + C25019) * C15222 + (C25230 + C25231) * C44912) *
               C44729 * C44803 * C636 -
           ((C9960 * C7607 + C44914 * C7909 + C9959 * C2302 + C9855 * C2475) *
                C44912 +
            (C9960 * C7523 + C44914 * C7677 + C9959 * C2252 + C9855 * C2346) *
                C15222 +
            (C25231 + C25230) * C15153 + (C25019 + C25018) * C15221) *
               C44729 * C44803 * C44908) *
              C638 +
          (((C10551 + C10550) * C15221 + (C10760 + C10759) * C15153 +
            (C9959 * C2253 + C9855 * C2347 + C9960 * C7524 + C44914 * C7678) *
                C15222 +
            (C9959 * C2303 + C9855 * C2476 + C9960 * C7608 + C44914 * C7910) *
                C44912) *
               C44729 * C44803 * C44908 -
           ((C10759 + C10760) * C44912 + (C10550 + C10551) * C15222 +
            (C10145 + C10144) * C15153 + (C9979 + C9978) * C15221) *
               C44729 * C44803 * C636) *
              C44906)) /
        (p * q * std::sqrt(p + q));
    d2eezx[46] += (2 * std::pow(Pi, 2.5) *
                   (((((C20398 * C93 + C44729 * C98) * C9959 +
                       (C20398 * C223 + C44729 * C455) * C9855 +
                       (C20398 * C1226 + C44729 * C1230) * C9960 +
                       (C20398 * C1364 + C44729 * C1620) * C44914) *
                          C15153 +
                      (C25298 + C25299 + C25300 + C25301) * C44912) *
                         C44803 * C636 -
                     ((C22977 * C44914 + C22809 * C9960 + C21155 * C9855 +
                       C20980 * C9959) *
                          C44912 +
                      (C25301 + C25300 + C25299 + C25298) * C15153) *
                         C44803 * C44908) *
                        C638 +
                    (((C25302 + C25303 + C25304 + C25308) * C15153 +
                      (C20984 * C9959 + C21157 * C9855 +
                       (C20398 * C7524 + C44729 * C7526) * C9960 +
                       (C20398 * C7678 + C44729 * C7981) * C44914) *
                          C44912) *
                         C44803 * C44908 -
                     ((C25308 + C25304 + C25303 + C25302) * C44912 +
                      ((C20398 * C1363 + C44729 * C1619) * C44914 +
                       (C20398 * C1225 + C44729 * C1229) * C9960 +
                       (C20398 * C224 + C44729 * C456) * C9855 +
                       (C20398 * C94 + C44729 * C99) * C9959) *
                          C15153) *
                         C44803 * C636) *
                        C44906)) /
                  (p * q * std::sqrt(p + q));
    d2eezy[46] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C15221 * C93 + C15153 * C156 + C15222 * C642 + C44912 * C710) *
                C9959 +
            (C15221 * C223 + C15153 * C498 + C15222 * C780 + C44912 * C1090) *
                C9855 +
            (C15221 * C1226 + C15153 * C1294 + C15222 * C2654 +
             C44912 * C2716) *
                C9960 +
            (C15221 * C1364 + C15153 * C1674 + C15222 * C2772 +
             C44912 * C3043) *
                C44914) *
               C44729 * C44803 * C636 -
           ((C15222 * C7677 + C44912 * C8054 + C15221 * C2772 +
             C15153 * C3043) *
                C44914 +
            (C15222 * C7523 + C44912 * C7607 + C15221 * C2654 +
             C15153 * C2716) *
                C9960 +
            (C15222 * C2346 + C44912 * C2557 + C15221 * C780 + C15153 * C1090) *
                C9855 +
            (C15222 * C2252 + C44912 * C2302 + C15221 * C642 + C15153 * C710) *
                C9959) *
               C44729 * C44803 * C44908) *
              C638 +
          (((C15819 + C15818) * C9959 + (C16285 + C16284) * C9855 +
            (C15221 * C2655 + C15153 * C2717 + C15222 * C7524 +
             C44912 * C7608) *
                C9960 +
            (C15221 * C2773 + C15153 * C3044 + C15222 * C7678 +
             C44912 * C8055) *
                C44914) *
               C44729 * C44803 * C44908 -
           ((C16926 + C16927) * C44914 + (C16504 + C16505) * C9960 +
            (C15595 + C15594) * C9855 + (C15241 + C15240) * C9959) *
               C44729 * C44803 * C636) *
              C44906)) /
        (p * q * std::sqrt(p + q));
    d2eezz[46] += (2 * std::pow(Pi, 2.5) *
                   ((((C10305 * C93 + C10308 + C10308 + C9855 * C558 +
                       C10306 * C1226 + C10309 + C10309 + C44914 * C1738) *
                          C15153 +
                      (C25449 + C25450) * C44912) *
                         C44729 * C44803 * C636 -
                     ((C10306 * C7523 + C12759 + C12759 + C44914 * C8122 +
                       C10305 * C2252 + C12758 + C12758 + C9855 * C2598) *
                          C44912 +
                      (C25450 + C25449) * C15153) *
                         C44729 * C44803 * C44908) *
                        C638 +
                    (((C10981 + C10980) * C15153 +
                      (C10305 * C2253 + C12760 + C12760 + C9855 * C2599 +
                       C10306 * C7524 + C12761 + C12761 + C44914 * C8123) *
                          C44912) *
                         C44729 * C44803 * C44908 -
                     ((C10980 + C10981) * C44912 + (C10333 + C10332) * C15153) *
                         C44729 * C44803 * C636) *
                        C44906)) /
                  (p * q * std::sqrt(p + q));
    d2eexx[47] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C20397 * C93 + C20400 + C20400 + C44729 * C103) * C9855 +
             C25527 * C44914) *
                C15153 +
            (C24869 + C24870) * C44912) *
               C1222 -
           (((C20397 * C9369 + C24031 + C24031 + C44729 * C9373) * C44914 +
             C22632 * C9855) *
                C44912 +
            ((C20397 * C4045 + C24030 + C24030 + C44729 * C4051) * C44914 +
             C25527 * C9855) *
                C15153) *
               C44910) *
              C44786 * C638 +
          (((C25528 * C9855 +
             (C20397 * C4046 + C25521 + C25521 + C44729 * C4052) * C44914) *
                C15153 +
            (C24876 * C9855 +
             (C20397 * C9370 + C25522 + C25522 + C44729 * C9374) * C44914) *
                C44912) *
               C44910 -
           ((C24877 + C24871) * C44912 +
            (C25528 * C44914 +
             (C20397 * C94 + C20405 + C20405 + C44729 * C104) * C9855) *
                C15153) *
               C1222) *
              C44786 * C44906)) /
        (p * q * std::sqrt(p + q));
    d2eexy[47] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C15221 * C93 + C15153 * C156 + C15222 * C642 + C44912 * C710) *
                 C20398 +
             (C15221 * C98 + C15153 * C161 + C15222 * C646 + C44912 * C714) *
                 C44729) *
                C9855 +
            ((C25603 + C25604) * C20398 + (C25605 + C25606) * C44729) *
                C44914) *
               C1222 -
           (((C15222 * C9371 + C44912 * C9431 + C15221 * C4048 +
              C15153 * C4098) *
                 C44729 +
             (C15222 * C9369 + C44912 * C9429 + C15221 * C4045 +
              C15153 * C4095) *
                 C20398) *
                C44914 +
            ((C25606 + C25605) * C44729 + (C25604 + C25603) * C20398) * C9855) *
               C44910) *
              C44786 * C638 +
          ((((C16505 + C16504) * C20398 + (C16503 + C16502) * C44729) * C9855 +
            ((C15221 * C4046 + C15153 * C4096 + C15222 * C9370 +
              C44912 * C9430) *
                 C20398 +
             (C15221 * C4049 + C15153 * C4099 + C15222 * C9372 +
              C44912 * C9432) *
                 C44729) *
                C44914) *
               C44910 -
           (((C16502 + C16503) * C44729 + (C16504 + C16505) * C20398) * C44914 +
            ((C15243 + C15242) * C44729 + (C15241 + C15240) * C20398) * C9855) *
               C1222) *
              C44786 * C44906)) /
        (p * q * std::sqrt(p + q));
    d2eexz[47] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C9959 * C93 + C9855 * C223 + C9960 * C1226 + C44914 * C1364) *
                 C20398 +
             (C9959 * C98 + C9855 * C228 + C9960 * C1230 + C44914 * C1368) *
                 C44729) *
                C15153 +
            ((C25018 + C25019) * C20398 + (C25020 + C25021) * C44729) *
                C44912) *
               C1222 -
           (((C9960 * C9371 + C44914 * C9485 + C9959 * C2657 + C9855 * C2775) *
                 C44729 +
             (C9960 * C9369 + C44914 * C9483 + C9959 * C2654 + C9855 * C2772) *
                 C20398) *
                C44912 +
            ((C9960 * C4048 + C44914 * C4142 + C9959 * C1230 + C9855 * C1368) *
                 C44729 +
             (C9960 * C4045 + C44914 * C4139 + C9959 * C1226 + C9855 * C1364) *
                 C20398) *
                C15153) *
               C44910) *
              C44786 * C638 +
          ((((C11233 + C11232) * C20398 + (C11231 + C11230) * C44729) * C15153 +
            ((C9959 * C2655 + C9855 * C2773 + C9960 * C9370 + C44914 * C9484) *
                 C20398 +
             (C9959 * C2658 + C9855 * C2776 + C9960 * C9372 + C44914 * C9486) *
                 C44729) *
                C44912) *
               C44910 -
           (((C10548 + C10549) * C44729 + (C10550 + C10551) * C20398) * C44912 +
            ((C9981 + C9980) * C44729 + (C9979 + C9978) * C20398) * C15153) *
               C1222) *
              C44786 * C44906)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[47] += (2 * std::pow(Pi, 2.5) *
                   (((((C20398 * C93 + C44729 * C98) * C15221 +
                       (C20398 * C156 + C44729 * C289) * C15153 +
                       C20978 * C15222 + C20979 * C44912) *
                          C9855 +
                      (C25755 + C25756 + C25743 + C25744) * C44914) *
                         C1222 -
                     (((C20398 * C9429 + C44729 * C9537) * C44912 +
                       (C20398 * C9369 + C44729 * C9371) * C15222 +
                       (C20398 * C4095 + C44729 * C4183) * C15153 +
                       (C20398 * C4045 + C44729 * C4048) * C15221) *
                          C44914 +
                      (C25744 + C25743 + C25756 + C25755) * C9855) *
                         C44910) *
                        C44786 * C638 +
                    (((C25757 + C25758 + C25749 + C25750) * C9855 +
                      ((C20398 * C4046 + C44729 * C4049) * C15221 +
                       (C20398 * C4096 + C44729 * C4184) * C15153 +
                       (C20398 * C9370 + C44729 * C9372) * C15222 +
                       (C20398 * C9430 + C44729 * C9538) * C44912) *
                          C44914) *
                         C44910 -
                     ((C25750 + C25749 + C25758 + C25757) * C44914 +
                      (C20983 * C44912 + C20982 * C15222 +
                       (C20398 * C157 + C44729 * C290) * C15153 +
                       (C20398 * C94 + C44729 * C99) * C15221) *
                          C9855) *
                         C1222) *
                        C44786 * C44906)) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[47] += (2 * std::pow(Pi, 2.5) *
                   ((((C15397 * C93 + C15400 + C15400 + C15153 * C333 +
                       C15398 * C642 + C15401 + C15401 + C44912 * C904) *
                          C44729 * C9855 +
                      (C25833 + C25834) * C44729 * C44914) *
                         C1222 -
                     ((C15398 * C9369 + C20153 + C20153 + C44912 * C9589 +
                       C15397 * C4045 + C20152 + C20152 + C15153 * C4224) *
                          C44729 * C44914 +
                      (C25834 + C25833) * C44729 * C9855) *
                         C44910) *
                        C44786 * C638 +
                    (((C16719 + C16718) * C44729 * C9855 +
                      (C15397 * C4046 + C20154 + C20154 + C15153 * C4225 +
                       C15398 * C9370 + C20155 + C20155 + C44912 * C9590) *
                          C44729 * C44914) *
                         C44910 -
                     ((C16718 + C16719) * C44729 * C44914 +
                      (C15425 + C15424) * C44729 * C9855) *
                         C1222) *
                        C44786 * C44906)) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[47] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C9959 * C93 + C9855 * C223 + C9960 * C1226 + C44914 * C1364) *
                C15221 +
            (C9959 * C156 + C9855 * C396 + C9960 * C1294 + C44914 * C1556) *
                C15153 +
            (C25018 + C25019) * C15222 + (C25230 + C25231) * C44912) *
               C44729 * C1222 -
           ((C9960 * C9429 + C44914 * C9645 + C9959 * C2716 + C9855 * C2937) *
                C44912 +
            (C9960 * C9369 + C44914 * C9483 + C9959 * C2654 + C9855 * C2772) *
                C15222 +
            (C9960 * C4095 + C44914 * C4268 + C9959 * C1294 + C9855 * C1556) *
                C15153 +
            (C9960 * C4045 + C44914 * C4139 + C9959 * C1226 + C9855 * C1364) *
                C15221) *
               C44729 * C44910) *
              C44786 * C638 +
          (((C11233 + C11232) * C15221 + (C11475 + C11474) * C15153 +
            (C9959 * C2655 + C9855 * C2773 + C9960 * C9370 + C44914 * C9484) *
                C15222 +
            (C9959 * C2717 + C9855 * C2938 + C9960 * C9430 + C44914 * C9646) *
                C44912) *
               C44729 * C44910 -
           ((C10759 + C10760) * C44912 + (C10550 + C10551) * C15222 +
            (C10145 + C10144) * C15153 + (C9979 + C9978) * C15221) *
               C44729 * C1222) *
              C44786 * C44906)) /
        (p * q * std::sqrt(p + q));
    d2eezx[47] += (2 * std::pow(Pi, 2.5) *
                   (((((C20398 * C93 + C44729 * C98) * C9959 +
                       (C20398 * C223 + C44729 * C455) * C9855 +
                       C25751 * C9960 + C25971 * C44914) *
                          C15153 +
                      (C25298 + C25299 + C25300 + C25301) * C44912) *
                         C1222 -
                     (((C20398 * C9483 + C44729 * C9697) * C44914 +
                       (C20398 * C9369 + C44729 * C9371) * C9960 +
                       C22978 * C9855 + C22811 * C9959) *
                          C44912 +
                      ((C20398 * C4139 + C44729 * C4309) * C44914 +
                       (C20398 * C4045 + C44729 * C4048) * C9960 +
                       C25971 * C9855 + C25751 * C9959) *
                          C15153) *
                         C44910) *
                        C44786 * C638 +
                    (((C25753 * C9959 + C25972 * C9855 +
                       (C20398 * C4046 + C44729 * C4049) * C9960 +
                       (C20398 * C4140 + C44729 * C4310) * C44914) *
                          C15153 +
                      (C25092 * C9959 + C25307 * C9855 +
                       (C20398 * C9370 + C44729 * C9372) * C9960 +
                       (C20398 * C9484 + C44729 * C9698) * C44914) *
                          C44912) *
                         C44910 -
                     ((C25308 + C25304 + C25303 + C25302) * C44912 +
                      (C25972 * C44914 + C25753 * C9960 +
                       (C20398 * C224 + C44729 * C456) * C9855 +
                       (C20398 * C94 + C44729 * C99) * C9959) *
                          C15153) *
                         C1222) *
                        C44786 * C44906)) /
                  (p * q * std::sqrt(p + q));
    d2eezy[47] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C15221 * C93 + C15153 * C156 + C15222 * C642 + C44912 * C710) *
                C9959 +
            (C15221 * C223 + C15153 * C498 + C15222 * C780 + C44912 * C1090) *
                C9855 +
            (C25603 + C25604) * C9960 + (C26043 + C26044) * C44914) *
               C44729 * C1222 -
           ((C15222 * C9483 + C44912 * C9749 + C15221 * C4139 +
             C15153 * C4350) *
                C44914 +
            (C15222 * C9369 + C44912 * C9429 + C15221 * C4045 +
             C15153 * C4095) *
                C9960 +
            (C26044 + C26043) * C9855 + (C25604 + C25603) * C9959) *
               C44729 * C44910) *
              C44786 * C638 +
          (((C16505 + C16504) * C9959 + (C16927 + C16926) * C9855 +
            (C15221 * C4046 + C15153 * C4096 + C15222 * C9370 +
             C44912 * C9430) *
                C9960 +
            (C15221 * C4140 + C15153 * C4351 + C15222 * C9484 +
             C44912 * C9750) *
                C44914) *
               C44729 * C44910 -
           ((C16926 + C16927) * C44914 + (C16504 + C16505) * C9960 +
            (C15595 + C15594) * C9855 + (C15241 + C15240) * C9959) *
               C44729 * C1222) *
              C44786 * C44906)) /
        (p * q * std::sqrt(p + q));
    d2eezz[47] += (2 * std::pow(Pi, 2.5) *
                   ((((C10305 * C93 + C10308 + C10308 + C9855 * C558 +
                       C10306 * C1226 + C10309 + C10309 + C44914 * C1738) *
                          C15153 +
                      (C25449 + C25450) * C44912) *
                         C44729 * C1222 -
                     ((C10306 * C9369 + C13379 + C13379 + C44914 * C9801 +
                       C10305 * C2654 + C13378 + C13378 + C9855 * C3096) *
                          C44912 +
                      (C10306 * C4045 + C11702 + C11702 + C44914 * C4391 +
                       C10305 * C1226 + C11703 + C11703 + C9855 * C1738) *
                          C15153) *
                         C44729 * C44910) *
                        C44786 * C638 +
                    (((C11711 + C11710) * C15153 +
                      (C10305 * C2655 + C13380 + C13380 + C9855 * C3097 +
                       C10306 * C9370 + C13381 + C13381 + C44914 * C9802) *
                          C44912) *
                         C44729 * C44910 -
                     ((C10980 + C10981) * C44912 + (C10333 + C10332) * C15153) *
                         C44729 * C1222) *
                        C44786 * C44906)) /
                  (p * q * std::sqrt(p + q));
    d2eexx[48] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C20397 * C93 + C20400 + C20400 + C44729 * C103) * C9855 +
             C25527 * C44914) *
                C15153 +
            (C24869 + C24870) * C44912) *
               C44803 * C1806 -
           ((C22631 * C44914 + C20797 * C9855) * C44912 +
            (C24870 + C24869) * C15153) *
               C44803 * C44908) *
              C1808 +
          (((C24871 + C24877) * C15153 +
            (C20799 * C9855 +
             (C20397 * C7524 + C21317 + C21317 + C44729 * C7528) * C44914) *
                C44912) *
               C44803 * C44908 -
           ((C24877 + C24871) * C44912 +
            (C25528 * C44914 +
             (C20397 * C94 + C20405 + C20405 + C44729 * C104) * C9855) *
                C15153) *
               C44803 * C1806) *
              C44906)) /
        (p * q * std::sqrt(p + q));
    d2eexy[48] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C15221 * C93 + C15153 * C156 + C15222 * C642 + C44912 * C710) *
                 C20398 +
             (C15221 * C98 + C15153 * C161 + C15222 * C646 + C44912 * C714) *
                 C44729) *
                C9855 +
            ((C25603 + C25604) * C20398 + (C25605 + C25606) * C44729) *
                C44914) *
               C44803 * C1806 -
           (((C15222 * C7525 + C44912 * C7609 + C15221 * C2657 +
              C15153 * C2719) *
                 C44729 +
             (C15222 * C7523 + C44912 * C7607 + C15221 * C2654 +
              C15153 * C2716) *
                 C20398) *
                C44914 +
            ((C15222 * C2255 + C44912 * C2305 + C15221 * C646 + C15153 * C714) *
                 C44729 +
             (C15222 * C2252 + C44912 * C2302 + C15221 * C642 + C15153 * C710) *
                 C20398) *
                C9855) *
               C44803 * C44908) *
              C1808 +
          ((((C15819 + C15818) * C20398 + (C15817 + C15816) * C44729) * C9855 +
            ((C15221 * C2655 + C15153 * C2717 + C15222 * C7524 +
              C44912 * C7608) *
                 C20398 +
             (C15221 * C2658 + C15153 * C2720 + C15222 * C7526 +
              C44912 * C7610) *
                 C44729) *
                C44914) *
               C44803 * C44908 -
           (((C16502 + C16503) * C44729 + (C16504 + C16505) * C20398) * C44914 +
            ((C15243 + C15242) * C44729 + (C15241 + C15240) * C20398) * C9855) *
               C44803 * C1806) *
              C44906)) /
        (p * q * std::sqrt(p + q));
    d2eexz[48] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C9959 * C93 + C9855 * C223 + C9960 * C1226 + C44914 * C1364) *
                 C20398 +
             (C9959 * C98 + C9855 * C228 + C9960 * C1230 + C44914 * C1368) *
                 C44729) *
                C15153 +
            ((C25018 + C25019) * C20398 + (C25020 + C25021) * C44729) *
                C44912) *
               C44803 * C1806 -
           (((C9960 * C7525 + C44914 * C7679 + C9959 * C2255 + C9855 * C2349) *
                 C44729 +
             (C9960 * C7523 + C44914 * C7677 + C9959 * C2252 + C9855 * C2346) *
                 C20398) *
                C44912 +
            ((C25021 + C25020) * C44729 + (C25019 + C25018) * C20398) *
                C15153) *
               C44803 * C44908) *
              C1808 +
          ((((C10551 + C10550) * C20398 + (C10549 + C10548) * C44729) * C15153 +
            ((C9959 * C2253 + C9855 * C2347 + C9960 * C7524 + C44914 * C7678) *
                 C20398 +
             (C9959 * C2256 + C9855 * C2350 + C9960 * C7526 + C44914 * C7680) *
                 C44729) *
                C44912) *
               C44803 * C44908 -
           (((C10548 + C10549) * C44729 + (C10550 + C10551) * C20398) * C44912 +
            ((C9981 + C9980) * C44729 + (C9979 + C9978) * C20398) * C15153) *
               C44803 * C1806) *
              C44906)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[48] += (2 * std::pow(Pi, 2.5) *
                   (((((C20398 * C93 + C44729 * C98) * C15221 +
                       (C20398 * C156 + C44729 * C289) * C15153 +
                       C20978 * C15222 + C20979 * C44912) *
                          C9855 +
                      (C25755 + C25756 + C25743 + C25744) * C44914) *
                         C44803 * C1806 -
                     ((C22808 * C44912 + C22809 * C15222 + C22810 * C15153 +
                       C22811 * C15221) *
                          C44914 +
                      (C20981 * C44912 + C20980 * C15222 + C20979 * C15153 +
                       C20978 * C15221) *
                          C9855) *
                         C44803 * C44908) *
                        C1808 +
                    (((C20982 * C15221 + C20983 * C15153 + C20984 * C15222 +
                       C20985 * C44912) *
                          C9855 +
                      (C25092 * C15221 + C25093 * C15153 +
                       (C20398 * C7524 + C44729 * C7526) * C15222 +
                       (C20398 * C7608 + C44729 * C7758) * C44912) *
                          C44914) *
                         C44803 * C44908 -
                     ((C25750 + C25749 + C25758 + C25757) * C44914 +
                      (C20983 * C44912 + C20982 * C15222 +
                       (C20398 * C157 + C44729 * C290) * C15153 +
                       (C20398 * C94 + C44729 * C99) * C15221) *
                          C9855) *
                         C44803 * C1806) *
                        C44906)) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[48] += (2 * std::pow(Pi, 2.5) *
                   ((((C15397 * C93 + C15400 + C15400 + C15153 * C333 +
                       C15398 * C642 + C15401 + C15401 + C44912 * C904) *
                          C44729 * C9855 +
                      (C25833 + C25834) * C44729 * C44914) *
                         C44803 * C1806 -
                     ((C15398 * C7523 + C18437 + C18437 + C44912 * C7837 +
                       C15397 * C2654 + C18436 + C18436 + C15153 * C2881) *
                          C44729 * C44914 +
                      (C15398 * C2252 + C16056 + C16056 + C44912 * C2431 +
                       C15397 * C642 + C16057 + C16057 + C15153 * C904) *
                          C44729 * C9855) *
                         C44803 * C44908) *
                        C1808 +
                    (((C16065 + C16064) * C44729 * C9855 +
                      (C15397 * C2655 + C18438 + C18438 + C15153 * C2882 +
                       C15398 * C7524 + C18439 + C18439 + C44912 * C7838) *
                          C44729 * C44914) *
                         C44803 * C44908 -
                     ((C16718 + C16719) * C44729 * C44914 +
                      (C15425 + C15424) * C44729 * C9855) *
                         C44803 * C1806) *
                        C44906)) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[48] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C9959 * C93 + C9855 * C223 + C9960 * C1226 + C44914 * C1364) *
                C15221 +
            (C9959 * C156 + C9855 * C396 + C9960 * C1294 + C44914 * C1556) *
                C15153 +
            (C25018 + C25019) * C15222 + (C25230 + C25231) * C44912) *
               C44729 * C44803 * C1806 -
           ((C9960 * C7607 + C44914 * C7909 + C9959 * C2302 + C9855 * C2475) *
                C44912 +
            (C9960 * C7523 + C44914 * C7677 + C9959 * C2252 + C9855 * C2346) *
                C15222 +
            (C25231 + C25230) * C15153 + (C25019 + C25018) * C15221) *
               C44729 * C44803 * C44908) *
              C1808 +
          (((C10551 + C10550) * C15221 + (C10760 + C10759) * C15153 +
            (C9959 * C2253 + C9855 * C2347 + C9960 * C7524 + C44914 * C7678) *
                C15222 +
            (C9959 * C2303 + C9855 * C2476 + C9960 * C7608 + C44914 * C7910) *
                C44912) *
               C44729 * C44803 * C44908 -
           ((C10759 + C10760) * C44912 + (C10550 + C10551) * C15222 +
            (C10145 + C10144) * C15153 + (C9979 + C9978) * C15221) *
               C44729 * C44803 * C1806) *
              C44906)) /
        (p * q * std::sqrt(p + q));
    d2eezx[48] += (2 * std::pow(Pi, 2.5) *
                   (((((C20398 * C93 + C44729 * C98) * C9959 +
                       (C20398 * C223 + C44729 * C455) * C9855 +
                       C25751 * C9960 + C25971 * C44914) *
                          C15153 +
                      (C25298 + C25299 + C25300 + C25301) * C44912) *
                         C44803 * C1806 -
                     ((C22977 * C44914 + C22809 * C9960 + C21155 * C9855 +
                       C20980 * C9959) *
                          C44912 +
                      (C25301 + C25300 + C25299 + C25298) * C15153) *
                         C44803 * C44908) *
                        C1808 +
                    (((C25302 + C25303 + C25304 + C25308) * C15153 +
                      (C20984 * C9959 + C21157 * C9855 +
                       (C20398 * C7524 + C44729 * C7526) * C9960 +
                       (C20398 * C7678 + C44729 * C7981) * C44914) *
                          C44912) *
                         C44803 * C44908 -
                     ((C25308 + C25304 + C25303 + C25302) * C44912 +
                      (C25972 * C44914 + C25753 * C9960 +
                       (C20398 * C224 + C44729 * C456) * C9855 +
                       (C20398 * C94 + C44729 * C99) * C9959) *
                          C15153) *
                         C44803 * C1806) *
                        C44906)) /
                  (p * q * std::sqrt(p + q));
    d2eezy[48] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C15221 * C93 + C15153 * C156 + C15222 * C642 + C44912 * C710) *
                C9959 +
            (C15221 * C223 + C15153 * C498 + C15222 * C780 + C44912 * C1090) *
                C9855 +
            (C25603 + C25604) * C9960 + (C26043 + C26044) * C44914) *
               C44729 * C44803 * C1806 -
           ((C15222 * C7677 + C44912 * C8054 + C15221 * C2772 +
             C15153 * C3043) *
                C44914 +
            (C15222 * C7523 + C44912 * C7607 + C15221 * C2654 +
             C15153 * C2716) *
                C9960 +
            (C15222 * C2346 + C44912 * C2557 + C15221 * C780 + C15153 * C1090) *
                C9855 +
            (C15222 * C2252 + C44912 * C2302 + C15221 * C642 + C15153 * C710) *
                C9959) *
               C44729 * C44803 * C44908) *
              C1808 +
          (((C15819 + C15818) * C9959 + (C16285 + C16284) * C9855 +
            (C15221 * C2655 + C15153 * C2717 + C15222 * C7524 +
             C44912 * C7608) *
                C9960 +
            (C15221 * C2773 + C15153 * C3044 + C15222 * C7678 +
             C44912 * C8055) *
                C44914) *
               C44729 * C44803 * C44908 -
           ((C16926 + C16927) * C44914 + (C16504 + C16505) * C9960 +
            (C15595 + C15594) * C9855 + (C15241 + C15240) * C9959) *
               C44729 * C44803 * C1806) *
              C44906)) /
        (p * q * std::sqrt(p + q));
    d2eezz[48] += (2 * std::pow(Pi, 2.5) *
                   ((((C10305 * C93 + C10308 + C10308 + C9855 * C558 +
                       C10306 * C1226 + C10309 + C10309 + C44914 * C1738) *
                          C15153 +
                      (C25449 + C25450) * C44912) *
                         C44729 * C44803 * C1806 -
                     ((C10306 * C7523 + C12759 + C12759 + C44914 * C8122 +
                       C10305 * C2252 + C12758 + C12758 + C9855 * C2598) *
                          C44912 +
                      (C25450 + C25449) * C15153) *
                         C44729 * C44803 * C44908) *
                        C1808 +
                    (((C10981 + C10980) * C15153 +
                      (C10305 * C2253 + C12760 + C12760 + C9855 * C2599 +
                       C10306 * C7524 + C12761 + C12761 + C44914 * C8123) *
                          C44912) *
                         C44729 * C44803 * C44908 -
                     ((C10980 + C10981) * C44912 + (C10333 + C10332) * C15153) *
                         C44729 * C44803 * C1806) *
                        C44906)) /
                  (p * q * std::sqrt(p + q));
    d2eexx[49] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C20397 * C93 + C20400 + C20400 + C44729 * C103) * C9855 +
            C25527 * C44914) *
               C15153 +
           (C24869 + C24870) * C44912) *
              C44803 * C2248 -
          ((C26755 + C26756) * C44912 + (C24870 + C24869) * C15153) * C44803 *
              C2249 +
          ((C26756 + C26755) * C15153 +
           (C22220 * C9855 +
            (C20397 * C22618 + C22626 + C22626 + C44729 * C22620) * C44914) *
               C44912) *
              C44803 * C2250) *
         C44752) /
        (p * q * std::sqrt(p + q));
    d2eexy[49] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C15221 * C93 + C15153 * C156 + C15222 * C642 + C44912 * C710) *
                C20398 +
            (C15221 * C98 + C15153 * C161 + C15222 * C646 + C44912 * C714) *
                C44729) *
               C9855 +
           ((C25603 + C25604) * C20398 + (C25605 + C25606) * C44729) * C44914) *
              C44803 * C2248 -
          (((C15222 * C7525 + C44912 * C7609 + C15221 * C2657 +
             C15153 * C2719) *
                C44729 +
            (C15222 * C7523 + C44912 * C7607 + C15221 * C2654 +
             C15153 * C2716) *
                C20398) *
               C44914 +
           ((C15222 * C2255 + C44912 * C2305 + C15221 * C646 + C15153 * C714) *
                C44729 +
            (C15222 * C2252 + C44912 * C2302 + C15221 * C642 + C15153 * C710) *
                C20398) *
               C9855) *
              C44803 * C2249 +
          (((C15221 * C2252 + C15153 * C2302 + C15222 * C6977 +
             C44912 * C7045) *
                C20398 +
            (C15221 * C2255 + C15153 * C2305 + C15222 * C6979 +
             C44912 * C7047) *
                C44729) *
               C9855 +
           ((C15221 * C7523 + C15153 * C7607 + C15222 * C22618 +
             C44912 * C22684) *
                C20398 +
            (C15221 * C7525 + C15153 * C7609 + C15222 * C22619 +
             C44912 * C22685) *
                C44729) *
               C44914) *
              C44803 * C2250) *
         C44752) /
        (p * q * std::sqrt(p + q));
    d2eexz[49] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C9959 * C93 + C9855 * C223 + C9960 * C1226 + C44914 * C1364) *
                C20398 +
            (C9959 * C98 + C9855 * C228 + C9960 * C1230 + C44914 * C1368) *
                C44729) *
               C15153 +
           ((C25018 + C25019) * C20398 + (C25020 + C25021) * C44729) * C44912) *
              C44803 * C2248 -
          (((C26865 + C26866) * C44729 + (C26867 + C26868) * C20398) * C44912 +
           ((C25021 + C25020) * C44729 + (C25019 + C25018) * C20398) * C15153) *
              C44803 * C2249 +
          (((C26868 + C26867) * C20398 + (C26866 + C26865) * C44729) * C15153 +
           ((C9959 * C6977 + C9855 * C7099 + C9960 * C22618 + C44914 * C22736) *
                C20398 +
            (C9959 * C6979 + C9855 * C7101 + C9960 * C22619 + C44914 * C22737) *
                C44729) *
               C44912) *
              C44803 * C2250) *
         C44752) /
        (p * q * std::sqrt(p + q));
    d2eeyx[49] += (2 * std::pow(Pi, 2.5) *
                   ((((C20398 * C93 + C44729 * C98) * C15221 +
                      (C20398 * C156 + C44729 * C289) * C15153 +
                      C20978 * C15222 + C20979 * C44912) *
                         C9855 +
                     (C25755 + C25756 + C25743 + C25744) * C44914) *
                        C44803 * C2248 -
                    ((C22808 * C44912 + C22809 * C15222 + C22810 * C15153 +
                      C22811 * C15221) *
                         C44914 +
                     (C20981 * C44912 + C20980 * C15222 + C20979 * C15153 +
                      C20978 * C15221) *
                         C9855) *
                        C44803 * C2249 +
                    ((C20980 * C15221 + C20981 * C15153 + C22355 * C15222 +
                      C22354 * C44912) *
                         C9855 +
                     (C22809 * C15221 + C22808 * C15153 +
                      (C20398 * C22618 + C44729 * C22619) * C15222 +
                      (C20398 * C22684 + C44729 * C22798) * C44912) *
                         C44914) *
                        C44803 * C2250) *
                   C44752) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[49] += (2 * std::pow(Pi, 2.5) *
                   (((C15397 * C93 + C15400 + C15400 + C15153 * C333 +
                      C15398 * C642 + C15401 + C15401 + C44912 * C904) *
                         C44729 * C9855 +
                     (C25833 + C25834) * C44729 * C44914) *
                        C44803 * C2248 -
                    ((C15398 * C7523 + C18437 + C18437 + C44912 * C7837 +
                      C15397 * C2654 + C18436 + C18436 + C15153 * C2881) *
                         C44729 * C44914 +
                     (C15398 * C2252 + C16056 + C16056 + C44912 * C2431 +
                      C15397 * C642 + C16057 + C16057 + C15153 * C904) *
                         C44729 * C9855) *
                        C44803 * C2249 +
                    ((C15397 * C2252 + C17868 + C17868 + C15153 * C2431 +
                      C15398 * C6977 + C17869 + C17869 + C44912 * C7227) *
                         C44729 * C9855 +
                     (C15397 * C7523 + C26969 + C26969 + C15153 * C7837 +
                      C15398 * C22618 + C26970 + C26970 + C44912 * C22861) *
                         C44729 * C44914) *
                        C44803 * C2250) *
                   C44752) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[49] +=
        (2 * std::pow(Pi, 2.5) *
         (((C9959 * C93 + C9855 * C223 + C9960 * C1226 + C44914 * C1364) *
               C15221 +
           (C9959 * C156 + C9855 * C396 + C9960 * C1294 + C44914 * C1556) *
               C15153 +
           (C25018 + C25019) * C15222 + (C25230 + C25231) * C44912) *
              C44729 * C44803 * C2248 -
          ((C27025 + C27026) * C44912 + (C26867 + C26868) * C15222 +
           (C25231 + C25230) * C15153 + (C25019 + C25018) * C15221) *
              C44729 * C44803 * C2249 +
          ((C26868 + C26867) * C15221 + (C27026 + C27025) * C15153 +
           (C9959 * C6977 + C9855 * C7099 + C9960 * C22618 + C44914 * C22736) *
               C15222 +
           (C9959 * C7045 + C9855 * C7283 + C9960 * C22684 + C44914 * C22915) *
               C44912) *
              C44729 * C44803 * C2250) *
         C44752) /
        (p * q * std::sqrt(p + q));
    d2eezx[49] += (2 * std::pow(Pi, 2.5) *
                   ((((C20398 * C93 + C44729 * C98) * C9959 +
                      (C20398 * C223 + C44729 * C455) * C9855 + C25751 * C9960 +
                      C25971 * C44914) *
                         C15153 +
                     (C25298 + C25299 + C25300 + C25301) * C44912) *
                        C44803 * C2248 -
                    ((C27077 + C27078 + C27079 + C27080) * C44912 +
                     (C25301 + C25300 + C25299 + C25298) * C15153) *
                        C44803 * C2249 +
                    ((C27080 + C27079 + C27078 + C27077) * C15153 +
                     (C22355 * C9959 + C22483 * C9855 +
                      (C20398 * C22618 + C44729 * C22619) * C9960 +
                      (C20398 * C22736 + C44729 * C22969) * C44914) *
                         C44912) *
                        C44803 * C2250) *
                   C44752) /
                  (p * q * std::sqrt(p + q));
    d2eezy[49] +=
        (2 * std::pow(Pi, 2.5) *
         (((C15221 * C93 + C15153 * C156 + C15222 * C642 + C44912 * C710) *
               C9959 +
           (C15221 * C223 + C15153 * C498 + C15222 * C780 + C44912 * C1090) *
               C9855 +
           (C25603 + C25604) * C9960 + (C26043 + C26044) * C44914) *
              C44729 * C44803 * C2248 -
          ((C15222 * C7677 + C44912 * C8054 + C15221 * C2772 + C15153 * C3043) *
               C44914 +
           (C15222 * C7523 + C44912 * C7607 + C15221 * C2654 + C15153 * C2716) *
               C9960 +
           (C15222 * C2346 + C44912 * C2557 + C15221 * C780 + C15153 * C1090) *
               C9855 +
           (C15222 * C2252 + C44912 * C2302 + C15221 * C642 + C15153 * C710) *
               C9959) *
              C44729 * C44803 * C2249 +
          ((C15221 * C2252 + C15153 * C2302 + C15222 * C6977 + C44912 * C7045) *
               C9959 +
           (C15221 * C2346 + C15153 * C2557 + C15222 * C7099 + C44912 * C7396) *
               C9855 +
           (C15221 * C7523 + C15153 * C7607 + C15222 * C22618 +
            C44912 * C22684) *
               C9960 +
           (C15221 * C7677 + C15153 * C8054 + C15222 * C22736 +
            C44912 * C23030) *
               C44914) *
              C44729 * C44803 * C2250) *
         C44752) /
        (p * q * std::sqrt(p + q));
    d2eezz[49] += (2 * std::pow(Pi, 2.5) *
                   (((C10305 * C93 + C10308 + C10308 + C9855 * C558 +
                      C10306 * C1226 + C10309 + C10309 + C44914 * C1738) *
                         C15153 +
                     (C25449 + C25450) * C44912) *
                        C44729 * C44803 * C2248 -
                    ((C27191 + C27192) * C44912 + (C25450 + C25449) * C15153) *
                        C44729 * C44803 * C2249 +
                    ((C27192 + C27191) * C15153 +
                     (C10305 * C6977 + C27185 + C27185 + C9855 * C7448 +
                      C10306 * C22618 + C27186 + C27186 + C44914 * C23081) *
                         C44912) *
                        C44729 * C44803 * C2250) *
                   C44752) /
                  (p * q * std::sqrt(p + q));
    d2eexx[50] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C20397 * C93 + C20400 + C20400 + C44729 * C103) * C9855 +
             C25527 * C44914) *
                C15153 +
            (C24869 + C24870) * C44912) *
               C1222 -
           ((C27265 + C27261) * C44912 +
            ((C20397 * C4045 + C24030 + C24030 + C44729 * C4051) * C44914 +
             C25527 * C9855) *
                C15153) *
               C44910) *
              C1806 +
          (((C27261 + C27265) * C15153 +
            (C22631 * C9855 +
             (C20397 * C24026 + C24032 + C24032 + C44729 * C24028) * C44914) *
                C44912) *
               C44910 -
           ((C26755 + C26756) * C44912 + (C24870 + C24869) * C15153) * C1222) *
              C44908) *
         C44752) /
        (p * q * std::sqrt(p + q));
    d2eexy[50] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C15221 * C93 + C15153 * C156 + C15222 * C642 + C44912 * C710) *
                 C20398 +
             (C15221 * C98 + C15153 * C161 + C15222 * C646 + C44912 * C714) *
                 C44729) *
                C9855 +
            ((C25603 + C25604) * C20398 + (C25605 + C25606) * C44729) *
                C44914) *
               C1222 -
           (((C15222 * C9371 + C44912 * C9431 + C15221 * C4048 +
              C15153 * C4098) *
                 C44729 +
             (C15222 * C9369 + C44912 * C9429 + C15221 * C4045 +
              C15153 * C4095) *
                 C20398) *
                C44914 +
            ((C25606 + C25605) * C44729 + (C25604 + C25603) * C20398) * C9855) *
               C44910) *
              C1806 +
          ((((C27340 + C27341) * C20398 + (C27342 + C27343) * C44729) * C9855 +
            ((C15221 * C9369 + C15153 * C9429 + C15222 * C24026 +
              C44912 * C24070) *
                 C20398 +
             (C15221 * C9371 + C15153 * C9431 + C15222 * C24027 +
              C44912 * C24071) *
                 C44729) *
                C44914) *
               C44910 -
           (((C27343 + C27342) * C44729 + (C27341 + C27340) * C20398) * C44914 +
            ((C15222 * C2255 + C44912 * C2305 + C15221 * C646 + C15153 * C714) *
                 C44729 +
             (C15222 * C2252 + C44912 * C2302 + C15221 * C642 + C15153 * C710) *
                 C20398) *
                C9855) *
               C1222) *
              C44908) *
         C44752) /
        (p * q * std::sqrt(p + q));
    d2eexz[50] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C9959 * C93 + C9855 * C223 + C9960 * C1226 + C44914 * C1364) *
                 C20398 +
             (C9959 * C98 + C9855 * C228 + C9960 * C1230 + C44914 * C1368) *
                 C44729) *
                C15153 +
            ((C25018 + C25019) * C20398 + (C25020 + C25021) * C44729) *
                C44912) *
               C1222 -
           (((C27418 + C27419) * C44729 + (C27420 + C27421) * C20398) * C44912 +
            ((C9960 * C4048 + C44914 * C4142 + C9959 * C1230 + C9855 * C1368) *
                 C44729 +
             (C9960 * C4045 + C44914 * C4139 + C9959 * C1226 + C9855 * C1364) *
                 C20398) *
                C15153) *
               C44910) *
              C1806 +
          ((((C27421 + C27420) * C20398 + (C27419 + C27418) * C44729) * C15153 +
            ((C9959 * C7523 + C9855 * C7677 + C9960 * C24026 +
              C44914 * C24110) *
                 C20398 +
             (C9959 * C7525 + C9855 * C7679 + C9960 * C24027 +
              C44914 * C24111) *
                 C44729) *
                C44912) *
               C44910 -
           (((C26865 + C26866) * C44729 + (C26867 + C26868) * C20398) * C44912 +
            ((C25021 + C25020) * C44729 + (C25019 + C25018) * C20398) *
                C15153) *
               C1222) *
              C44908) *
         C44752) /
        (p * q * std::sqrt(p + q));
    d2eeyx[50] += (2 * std::pow(Pi, 2.5) *
                   (((((C20398 * C93 + C44729 * C98) * C15221 +
                       (C20398 * C156 + C44729 * C289) * C15153 +
                       C20978 * C15222 + C20979 * C44912) *
                          C9855 +
                      (C25755 + C25756 + C25743 + C25744) * C44914) *
                         C1222 -
                     ((C27496 * C44912 + C27497 * C15222 +
                       (C20398 * C4095 + C44729 * C4183) * C15153 +
                       (C20398 * C4045 + C44729 * C4048) * C15221) *
                          C44914 +
                      (C25744 + C25743 + C25756 + C25755) * C9855) *
                         C44910) *
                        C1806 +
                    (((C27492 + C27493 + C27494 + C27495) * C9855 +
                      (C27497 * C15221 + C27496 * C15153 +
                       (C20398 * C24026 + C44729 * C24027) * C15222 +
                       (C20398 * C24070 + C44729 * C24150) * C44912) *
                          C44914) *
                         C44910 -
                     ((C27495 + C27494 + C27493 + C27492) * C44914 +
                      (C20981 * C44912 + C20980 * C15222 + C20979 * C15153 +
                       C20978 * C15221) *
                          C9855) *
                         C1222) *
                        C44908) *
                   C44752) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[50] += (2 * std::pow(Pi, 2.5) *
                   ((((C15397 * C93 + C15400 + C15400 + C15153 * C333 +
                       C15398 * C642 + C15401 + C15401 + C44912 * C904) *
                          C44729 * C9855 +
                      (C25833 + C25834) * C44729 * C44914) *
                         C1222 -
                     ((C15398 * C9369 + C20153 + C20153 + C44912 * C9589 +
                       C15397 * C4045 + C20152 + C20152 + C15153 * C4224) *
                          C44729 * C44914 +
                      (C25834 + C25833) * C44729 * C9855) *
                         C44910) *
                        C1806 +
                    (((C27574 + C27575) * C44729 * C9855 +
                      (C15397 * C9369 + C27568 + C27568 + C15153 * C9589 +
                       C15398 * C24026 + C27569 + C27569 + C44912 * C24189) *
                          C44729 * C44914) *
                         C44910 -
                     ((C27575 + C27574) * C44729 * C44914 +
                      (C15398 * C2252 + C16056 + C16056 + C44912 * C2431 +
                       C15397 * C642 + C16057 + C16057 + C15153 * C904) *
                          C44729 * C9855) *
                         C1222) *
                        C44908) *
                   C44752) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[50] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C9959 * C93 + C9855 * C223 + C9960 * C1226 + C44914 * C1364) *
                C15221 +
            (C9959 * C156 + C9855 * C396 + C9960 * C1294 + C44914 * C1556) *
                C15153 +
            (C25018 + C25019) * C15222 + (C25230 + C25231) * C44912) *
               C44729 * C1222 -
           ((C27646 + C27647) * C44912 + (C27420 + C27421) * C15222 +
            (C9960 * C4095 + C44914 * C4268 + C9959 * C1294 + C9855 * C1556) *
                C15153 +
            (C9960 * C4045 + C44914 * C4139 + C9959 * C1226 + C9855 * C1364) *
                C15221) *
               C44729 * C44910) *
              C1806 +
          (((C27421 + C27420) * C15221 + (C27647 + C27646) * C15153 +
            (C9959 * C7523 + C9855 * C7677 + C9960 * C24026 + C44914 * C24110) *
                C15222 +
            (C9959 * C7607 + C9855 * C7909 + C9960 * C24070 + C44914 * C24231) *
                C44912) *
               C44729 * C44910 -
           ((C27025 + C27026) * C44912 + (C26867 + C26868) * C15222 +
            (C25231 + C25230) * C15153 + (C25019 + C25018) * C15221) *
               C44729 * C1222) *
              C44908) *
         C44752) /
        (p * q * std::sqrt(p + q));
    d2eezx[50] += (2 * std::pow(Pi, 2.5) *
                   (((((C20398 * C93 + C44729 * C98) * C9959 +
                       (C20398 * C223 + C44729 * C455) * C9855 +
                       C25751 * C9960 + C25971 * C44914) *
                          C15153 +
                      (C25298 + C25299 + C25300 + C25301) * C44912) *
                         C1222 -
                     ((C27720 + C27716 + C27717 + C27718) * C44912 +
                      ((C20398 * C4139 + C44729 * C4309) * C44914 +
                       (C20398 * C4045 + C44729 * C4048) * C9960 +
                       C25971 * C9855 + C25751 * C9959) *
                          C15153) *
                         C44910) *
                        C1806 +
                    (((C27718 + C27717 + C27716 + C27720) * C15153 +
                      (C22809 * C9959 + C22977 * C9855 +
                       (C20398 * C24026 + C44729 * C24027) * C9960 +
                       (C20398 * C24110 + C44729 * C24270) * C44914) *
                          C44912) *
                         C44910 -
                     ((C27077 + C27078 + C27079 + C27080) * C44912 +
                      (C25301 + C25300 + C25299 + C25298) * C15153) *
                         C1222) *
                        C44908) *
                   C44752) /
                  (p * q * std::sqrt(p + q));
    d2eezy[50] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C15221 * C93 + C15153 * C156 + C15222 * C642 + C44912 * C710) *
                C9959 +
            (C15221 * C223 + C15153 * C498 + C15222 * C780 + C44912 * C1090) *
                C9855 +
            (C25603 + C25604) * C9960 + (C26043 + C26044) * C44914) *
               C44729 * C1222 -
           ((C15222 * C9483 + C44912 * C9749 + C15221 * C4139 +
             C15153 * C4350) *
                C44914 +
            (C15222 * C9369 + C44912 * C9429 + C15221 * C4045 +
             C15153 * C4095) *
                C9960 +
            (C26044 + C26043) * C9855 + (C25604 + C25603) * C9959) *
               C44729 * C44910) *
              C1806 +
          (((C27340 + C27341) * C9959 + (C27791 + C27792) * C9855 +
            (C15221 * C9369 + C15153 * C9429 + C15222 * C24026 +
             C44912 * C24070) *
                C9960 +
            (C15221 * C9483 + C15153 * C9749 + C15222 * C24110 +
             C44912 * C24309) *
                C44914) *
               C44729 * C44910 -
           ((C27792 + C27791) * C44914 + (C27341 + C27340) * C9960 +
            (C15222 * C2346 + C44912 * C2557 + C15221 * C780 + C15153 * C1090) *
                C9855 +
            (C15222 * C2252 + C44912 * C2302 + C15221 * C642 + C15153 * C710) *
                C9959) *
               C44729 * C1222) *
              C44908) *
         C44752) /
        (p * q * std::sqrt(p + q));
    d2eezz[50] += (2 * std::pow(Pi, 2.5) *
                   ((((C10305 * C93 + C10308 + C10308 + C9855 * C558 +
                       C10306 * C1226 + C10309 + C10309 + C44914 * C1738) *
                          C15153 +
                      (C25449 + C25450) * C44912) *
                         C44729 * C1222 -
                     ((C27869 + C27870) * C44912 +
                      (C10306 * C4045 + C11702 + C11702 + C44914 * C4391 +
                       C10305 * C1226 + C11703 + C11703 + C9855 * C1738) *
                          C15153) *
                         C44729 * C44910) *
                        C1806 +
                    (((C27870 + C27869) * C15153 +
                      (C10305 * C7523 + C27863 + C27863 + C9855 * C8122 +
                       C10306 * C24026 + C27864 + C27864 + C44914 * C24348) *
                          C44912) *
                         C44729 * C44910 -
                     ((C27191 + C27192) * C44912 + (C25450 + C25449) * C15153) *
                         C44729 * C1222) *
                        C44908) *
                   C44752) /
                  (p * q * std::sqrt(p + q));
    d2eexx[51] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C20397 * C93 + C20400 + C20400 + C44729 * C103) * C9855 +
             C25527 * C44914) *
                C15153 +
            (C24869 + C24870) * C44912) *
               C3152 -
           ((C27265 + C27261) * C44912 +
            ((C20397 * C4045 + C24030 + C24030 + C44729 * C4051) * C44914 +
             C25527 * C9855) *
                C15153) *
               C44910) *
              C44786 * C1808 +
          (((C25528 * C9855 +
             (C20397 * C4046 + C25521 + C25521 + C44729 * C4052) * C44914) *
                C15153 +
            (C24876 * C9855 +
             (C20397 * C9370 + C25522 + C25522 + C44729 * C9374) * C44914) *
                C44912) *
               C44910 -
           ((C24877 + C24871) * C44912 +
            (C25528 * C44914 +
             (C20397 * C94 + C20405 + C20405 + C44729 * C104) * C9855) *
                C15153) *
               C3152) *
              C44786 * C44906)) /
        (p * q * std::sqrt(p + q));
    d2eexy[51] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C15221 * C93 + C15153 * C156 + C15222 * C642 + C44912 * C710) *
                 C20398 +
             (C15221 * C98 + C15153 * C161 + C15222 * C646 + C44912 * C714) *
                 C44729) *
                C9855 +
            ((C25603 + C25604) * C20398 + (C25605 + C25606) * C44729) *
                C44914) *
               C3152 -
           (((C15222 * C9371 + C44912 * C9431 + C15221 * C4048 +
              C15153 * C4098) *
                 C44729 +
             (C15222 * C9369 + C44912 * C9429 + C15221 * C4045 +
              C15153 * C4095) *
                 C20398) *
                C44914 +
            ((C25606 + C25605) * C44729 + (C25604 + C25603) * C20398) * C9855) *
               C44910) *
              C44786 * C1808 +
          ((((C16505 + C16504) * C20398 + (C16503 + C16502) * C44729) * C9855 +
            ((C15221 * C4046 + C15153 * C4096 + C15222 * C9370 +
              C44912 * C9430) *
                 C20398 +
             (C15221 * C4049 + C15153 * C4099 + C15222 * C9372 +
              C44912 * C9432) *
                 C44729) *
                C44914) *
               C44910 -
           (((C16502 + C16503) * C44729 + (C16504 + C16505) * C20398) * C44914 +
            ((C15243 + C15242) * C44729 + (C15241 + C15240) * C20398) * C9855) *
               C3152) *
              C44786 * C44906)) /
        (p * q * std::sqrt(p + q));
    d2eexz[51] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C9959 * C93 + C9855 * C223 + C9960 * C1226 + C44914 * C1364) *
                 C20398 +
             (C9959 * C98 + C9855 * C228 + C9960 * C1230 + C44914 * C1368) *
                 C44729) *
                C15153 +
            ((C25018 + C25019) * C20398 + (C25020 + C25021) * C44729) *
                C44912) *
               C3152 -
           (((C27418 + C27419) * C44729 + (C27420 + C27421) * C20398) * C44912 +
            ((C9960 * C4048 + C44914 * C4142 + C9959 * C1230 + C9855 * C1368) *
                 C44729 +
             (C9960 * C4045 + C44914 * C4139 + C9959 * C1226 + C9855 * C1364) *
                 C20398) *
                C15153) *
               C44910) *
              C44786 * C1808 +
          ((((C11233 + C11232) * C20398 + (C11231 + C11230) * C44729) * C15153 +
            ((C9959 * C2655 + C9855 * C2773 + C9960 * C9370 + C44914 * C9484) *
                 C20398 +
             (C9959 * C2658 + C9855 * C2776 + C9960 * C9372 + C44914 * C9486) *
                 C44729) *
                C44912) *
               C44910 -
           (((C10548 + C10549) * C44729 + (C10550 + C10551) * C20398) * C44912 +
            ((C9981 + C9980) * C44729 + (C9979 + C9978) * C20398) * C15153) *
               C3152) *
              C44786 * C44906)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[51] += (2 * std::pow(Pi, 2.5) *
                   (((((C20398 * C93 + C44729 * C98) * C15221 +
                       (C20398 * C156 + C44729 * C289) * C15153 +
                       C20978 * C15222 + C20979 * C44912) *
                          C9855 +
                      (C25755 + C25756 + C25743 + C25744) * C44914) *
                         C3152 -
                     ((C27496 * C44912 + C27497 * C15222 +
                       (C20398 * C4095 + C44729 * C4183) * C15153 +
                       (C20398 * C4045 + C44729 * C4048) * C15221) *
                          C44914 +
                      (C25744 + C25743 + C25756 + C25755) * C9855) *
                         C44910) *
                        C44786 * C1808 +
                    (((C25757 + C25758 + C25749 + C25750) * C9855 +
                      ((C20398 * C4046 + C44729 * C4049) * C15221 +
                       (C20398 * C4096 + C44729 * C4184) * C15153 +
                       (C20398 * C9370 + C44729 * C9372) * C15222 +
                       (C20398 * C9430 + C44729 * C9538) * C44912) *
                          C44914) *
                         C44910 -
                     ((C25750 + C25749 + C25758 + C25757) * C44914 +
                      (C20983 * C44912 + C20982 * C15222 +
                       (C20398 * C157 + C44729 * C290) * C15153 +
                       (C20398 * C94 + C44729 * C99) * C15221) *
                          C9855) *
                         C3152) *
                        C44786 * C44906)) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[51] += (2 * std::pow(Pi, 2.5) *
                   ((((C15397 * C93 + C15400 + C15400 + C15153 * C333 +
                       C15398 * C642 + C15401 + C15401 + C44912 * C904) *
                          C44729 * C9855 +
                      (C25833 + C25834) * C44729 * C44914) *
                         C3152 -
                     ((C15398 * C9369 + C20153 + C20153 + C44912 * C9589 +
                       C15397 * C4045 + C20152 + C20152 + C15153 * C4224) *
                          C44729 * C44914 +
                      (C25834 + C25833) * C44729 * C9855) *
                         C44910) *
                        C44786 * C1808 +
                    (((C16719 + C16718) * C44729 * C9855 +
                      (C15397 * C4046 + C20154 + C20154 + C15153 * C4225 +
                       C15398 * C9370 + C20155 + C20155 + C44912 * C9590) *
                          C44729 * C44914) *
                         C44910 -
                     ((C16718 + C16719) * C44729 * C44914 +
                      (C15425 + C15424) * C44729 * C9855) *
                         C3152) *
                        C44786 * C44906)) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[51] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C9959 * C93 + C9855 * C223 + C9960 * C1226 + C44914 * C1364) *
                C15221 +
            (C9959 * C156 + C9855 * C396 + C9960 * C1294 + C44914 * C1556) *
                C15153 +
            (C25018 + C25019) * C15222 + (C25230 + C25231) * C44912) *
               C44729 * C3152 -
           ((C27646 + C27647) * C44912 + (C27420 + C27421) * C15222 +
            (C9960 * C4095 + C44914 * C4268 + C9959 * C1294 + C9855 * C1556) *
                C15153 +
            (C9960 * C4045 + C44914 * C4139 + C9959 * C1226 + C9855 * C1364) *
                C15221) *
               C44729 * C44910) *
              C44786 * C1808 +
          (((C11233 + C11232) * C15221 + (C11475 + C11474) * C15153 +
            (C9959 * C2655 + C9855 * C2773 + C9960 * C9370 + C44914 * C9484) *
                C15222 +
            (C9959 * C2717 + C9855 * C2938 + C9960 * C9430 + C44914 * C9646) *
                C44912) *
               C44729 * C44910 -
           ((C10759 + C10760) * C44912 + (C10550 + C10551) * C15222 +
            (C10145 + C10144) * C15153 + (C9979 + C9978) * C15221) *
               C44729 * C3152) *
              C44786 * C44906)) /
        (p * q * std::sqrt(p + q));
    d2eezx[51] += (2 * std::pow(Pi, 2.5) *
                   (((((C20398 * C93 + C44729 * C98) * C9959 +
                       (C20398 * C223 + C44729 * C455) * C9855 +
                       C25751 * C9960 + C25971 * C44914) *
                          C15153 +
                      (C25298 + C25299 + C25300 + C25301) * C44912) *
                         C3152 -
                     ((C27720 + C27716 + C27717 + C27718) * C44912 +
                      ((C20398 * C4139 + C44729 * C4309) * C44914 +
                       (C20398 * C4045 + C44729 * C4048) * C9960 +
                       C25971 * C9855 + C25751 * C9959) *
                          C15153) *
                         C44910) *
                        C44786 * C1808 +
                    (((C25753 * C9959 + C25972 * C9855 +
                       (C20398 * C4046 + C44729 * C4049) * C9960 +
                       (C20398 * C4140 + C44729 * C4310) * C44914) *
                          C15153 +
                      (C25092 * C9959 + C25307 * C9855 +
                       (C20398 * C9370 + C44729 * C9372) * C9960 +
                       (C20398 * C9484 + C44729 * C9698) * C44914) *
                          C44912) *
                         C44910 -
                     ((C25308 + C25304 + C25303 + C25302) * C44912 +
                      (C25972 * C44914 + C25753 * C9960 +
                       (C20398 * C224 + C44729 * C456) * C9855 +
                       (C20398 * C94 + C44729 * C99) * C9959) *
                          C15153) *
                         C3152) *
                        C44786 * C44906)) /
                  (p * q * std::sqrt(p + q));
    d2eezy[51] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C15221 * C93 + C15153 * C156 + C15222 * C642 + C44912 * C710) *
                C9959 +
            (C15221 * C223 + C15153 * C498 + C15222 * C780 + C44912 * C1090) *
                C9855 +
            (C25603 + C25604) * C9960 + (C26043 + C26044) * C44914) *
               C44729 * C3152 -
           ((C15222 * C9483 + C44912 * C9749 + C15221 * C4139 +
             C15153 * C4350) *
                C44914 +
            (C15222 * C9369 + C44912 * C9429 + C15221 * C4045 +
             C15153 * C4095) *
                C9960 +
            (C26044 + C26043) * C9855 + (C25604 + C25603) * C9959) *
               C44729 * C44910) *
              C44786 * C1808 +
          (((C16505 + C16504) * C9959 + (C16927 + C16926) * C9855 +
            (C15221 * C4046 + C15153 * C4096 + C15222 * C9370 +
             C44912 * C9430) *
                C9960 +
            (C15221 * C4140 + C15153 * C4351 + C15222 * C9484 +
             C44912 * C9750) *
                C44914) *
               C44729 * C44910 -
           ((C16926 + C16927) * C44914 + (C16504 + C16505) * C9960 +
            (C15595 + C15594) * C9855 + (C15241 + C15240) * C9959) *
               C44729 * C3152) *
              C44786 * C44906)) /
        (p * q * std::sqrt(p + q));
    d2eezz[51] += (2 * std::pow(Pi, 2.5) *
                   ((((C10305 * C93 + C10308 + C10308 + C9855 * C558 +
                       C10306 * C1226 + C10309 + C10309 + C44914 * C1738) *
                          C15153 +
                      (C25449 + C25450) * C44912) *
                         C44729 * C3152 -
                     ((C27869 + C27870) * C44912 +
                      (C10306 * C4045 + C11702 + C11702 + C44914 * C4391 +
                       C10305 * C1226 + C11703 + C11703 + C9855 * C1738) *
                          C15153) *
                         C44729 * C44910) *
                        C44786 * C1808 +
                    (((C11711 + C11710) * C15153 +
                      (C10305 * C2655 + C13380 + C13380 + C9855 * C3097 +
                       C10306 * C9370 + C13381 + C13381 + C44914 * C9802) *
                          C44912) *
                         C44729 * C44910 -
                     ((C10980 + C10981) * C44912 + (C10333 + C10332) * C15153) *
                         C44729 * C3152) *
                        C44786 * C44906)) /
                  (p * q * std::sqrt(p + q));
    d2eexx[52] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C20397 * C93 + C20400 + C20400 + C44729 * C103) * C9855 +
             C25527 * C44914) *
                C15153 +
            (C24869 + C24870) * C44912) *
               C3152 -
           ((C27265 + C27261) * C44912 +
            ((C20397 * C4045 + C24030 + C24030 + C44729 * C4051) * C44914 +
             C25527 * C9855) *
                C15153) *
               C44910) *
              C636 +
          (((C27261 + C27265) * C15153 +
            (C22631 * C9855 +
             (C20397 * C24026 + C24032 + C24032 + C44729 * C24028) * C44914) *
                C44912) *
               C44910 -
           ((C26755 + C26756) * C44912 + (C24870 + C24869) * C15153) * C3152) *
              C44908) *
         C44752) /
        (p * q * std::sqrt(p + q));
    d2eexy[52] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C15221 * C93 + C15153 * C156 + C15222 * C642 + C44912 * C710) *
                 C20398 +
             (C15221 * C98 + C15153 * C161 + C15222 * C646 + C44912 * C714) *
                 C44729) *
                C9855 +
            ((C25603 + C25604) * C20398 + (C25605 + C25606) * C44729) *
                C44914) *
               C3152 -
           (((C15222 * C9371 + C44912 * C9431 + C15221 * C4048 +
              C15153 * C4098) *
                 C44729 +
             (C15222 * C9369 + C44912 * C9429 + C15221 * C4045 +
              C15153 * C4095) *
                 C20398) *
                C44914 +
            ((C25606 + C25605) * C44729 + (C25604 + C25603) * C20398) * C9855) *
               C44910) *
              C636 +
          ((((C27340 + C27341) * C20398 + (C27342 + C27343) * C44729) * C9855 +
            ((C15221 * C9369 + C15153 * C9429 + C15222 * C24026 +
              C44912 * C24070) *
                 C20398 +
             (C15221 * C9371 + C15153 * C9431 + C15222 * C24027 +
              C44912 * C24071) *
                 C44729) *
                C44914) *
               C44910 -
           (((C27343 + C27342) * C44729 + (C27341 + C27340) * C20398) * C44914 +
            ((C15222 * C2255 + C44912 * C2305 + C15221 * C646 + C15153 * C714) *
                 C44729 +
             (C15222 * C2252 + C44912 * C2302 + C15221 * C642 + C15153 * C710) *
                 C20398) *
                C9855) *
               C3152) *
              C44908) *
         C44752) /
        (p * q * std::sqrt(p + q));
    d2eexz[52] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C9959 * C93 + C9855 * C223 + C9960 * C1226 + C44914 * C1364) *
                 C20398 +
             (C9959 * C98 + C9855 * C228 + C9960 * C1230 + C44914 * C1368) *
                 C44729) *
                C15153 +
            ((C25018 + C25019) * C20398 + (C25020 + C25021) * C44729) *
                C44912) *
               C3152 -
           (((C27418 + C27419) * C44729 + (C27420 + C27421) * C20398) * C44912 +
            ((C9960 * C4048 + C44914 * C4142 + C9959 * C1230 + C9855 * C1368) *
                 C44729 +
             (C9960 * C4045 + C44914 * C4139 + C9959 * C1226 + C9855 * C1364) *
                 C20398) *
                C15153) *
               C44910) *
              C636 +
          ((((C27421 + C27420) * C20398 + (C27419 + C27418) * C44729) * C15153 +
            ((C9959 * C7523 + C9855 * C7677 + C9960 * C24026 +
              C44914 * C24110) *
                 C20398 +
             (C9959 * C7525 + C9855 * C7679 + C9960 * C24027 +
              C44914 * C24111) *
                 C44729) *
                C44912) *
               C44910 -
           (((C26865 + C26866) * C44729 + (C26867 + C26868) * C20398) * C44912 +
            ((C25021 + C25020) * C44729 + (C25019 + C25018) * C20398) *
                C15153) *
               C3152) *
              C44908) *
         C44752) /
        (p * q * std::sqrt(p + q));
    d2eeyx[52] += (2 * std::pow(Pi, 2.5) *
                   (((((C20398 * C93 + C44729 * C98) * C15221 +
                       (C20398 * C156 + C44729 * C289) * C15153 +
                       C20978 * C15222 + C20979 * C44912) *
                          C9855 +
                      (C25755 + C25756 + C25743 + C25744) * C44914) *
                         C3152 -
                     ((C27496 * C44912 + C27497 * C15222 +
                       (C20398 * C4095 + C44729 * C4183) * C15153 +
                       (C20398 * C4045 + C44729 * C4048) * C15221) *
                          C44914 +
                      (C25744 + C25743 + C25756 + C25755) * C9855) *
                         C44910) *
                        C636 +
                    (((C27492 + C27493 + C27494 + C27495) * C9855 +
                      (C27497 * C15221 + C27496 * C15153 +
                       (C20398 * C24026 + C44729 * C24027) * C15222 +
                       (C20398 * C24070 + C44729 * C24150) * C44912) *
                          C44914) *
                         C44910 -
                     ((C27495 + C27494 + C27493 + C27492) * C44914 +
                      (C20981 * C44912 + C20980 * C15222 + C20979 * C15153 +
                       C20978 * C15221) *
                          C9855) *
                         C3152) *
                        C44908) *
                   C44752) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[52] += (2 * std::pow(Pi, 2.5) *
                   ((((C15397 * C93 + C15400 + C15400 + C15153 * C333 +
                       C15398 * C642 + C15401 + C15401 + C44912 * C904) *
                          C44729 * C9855 +
                      (C25833 + C25834) * C44729 * C44914) *
                         C3152 -
                     ((C15398 * C9369 + C20153 + C20153 + C44912 * C9589 +
                       C15397 * C4045 + C20152 + C20152 + C15153 * C4224) *
                          C44729 * C44914 +
                      (C25834 + C25833) * C44729 * C9855) *
                         C44910) *
                        C636 +
                    (((C27574 + C27575) * C44729 * C9855 +
                      (C15397 * C9369 + C27568 + C27568 + C15153 * C9589 +
                       C15398 * C24026 + C27569 + C27569 + C44912 * C24189) *
                          C44729 * C44914) *
                         C44910 -
                     ((C27575 + C27574) * C44729 * C44914 +
                      (C15398 * C2252 + C16056 + C16056 + C44912 * C2431 +
                       C15397 * C642 + C16057 + C16057 + C15153 * C904) *
                          C44729 * C9855) *
                         C3152) *
                        C44908) *
                   C44752) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[52] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C9959 * C93 + C9855 * C223 + C9960 * C1226 + C44914 * C1364) *
                C15221 +
            (C9959 * C156 + C9855 * C396 + C9960 * C1294 + C44914 * C1556) *
                C15153 +
            (C25018 + C25019) * C15222 + (C25230 + C25231) * C44912) *
               C44729 * C3152 -
           ((C27646 + C27647) * C44912 + (C27420 + C27421) * C15222 +
            (C9960 * C4095 + C44914 * C4268 + C9959 * C1294 + C9855 * C1556) *
                C15153 +
            (C9960 * C4045 + C44914 * C4139 + C9959 * C1226 + C9855 * C1364) *
                C15221) *
               C44729 * C44910) *
              C636 +
          (((C27421 + C27420) * C15221 + (C27647 + C27646) * C15153 +
            (C9959 * C7523 + C9855 * C7677 + C9960 * C24026 + C44914 * C24110) *
                C15222 +
            (C9959 * C7607 + C9855 * C7909 + C9960 * C24070 + C44914 * C24231) *
                C44912) *
               C44729 * C44910 -
           ((C27025 + C27026) * C44912 + (C26867 + C26868) * C15222 +
            (C25231 + C25230) * C15153 + (C25019 + C25018) * C15221) *
               C44729 * C3152) *
              C44908) *
         C44752) /
        (p * q * std::sqrt(p + q));
    d2eezx[52] += (2 * std::pow(Pi, 2.5) *
                   (((((C20398 * C93 + C44729 * C98) * C9959 +
                       (C20398 * C223 + C44729 * C455) * C9855 +
                       C25751 * C9960 + C25971 * C44914) *
                          C15153 +
                      (C25298 + C25299 + C25300 + C25301) * C44912) *
                         C3152 -
                     ((C27720 + C27716 + C27717 + C27718) * C44912 +
                      ((C20398 * C4139 + C44729 * C4309) * C44914 +
                       (C20398 * C4045 + C44729 * C4048) * C9960 +
                       C25971 * C9855 + C25751 * C9959) *
                          C15153) *
                         C44910) *
                        C636 +
                    (((C27718 + C27717 + C27716 + C27720) * C15153 +
                      (C22809 * C9959 + C22977 * C9855 +
                       (C20398 * C24026 + C44729 * C24027) * C9960 +
                       (C20398 * C24110 + C44729 * C24270) * C44914) *
                          C44912) *
                         C44910 -
                     ((C27077 + C27078 + C27079 + C27080) * C44912 +
                      (C25301 + C25300 + C25299 + C25298) * C15153) *
                         C3152) *
                        C44908) *
                   C44752) /
                  (p * q * std::sqrt(p + q));
    d2eezy[52] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C15221 * C93 + C15153 * C156 + C15222 * C642 + C44912 * C710) *
                C9959 +
            (C15221 * C223 + C15153 * C498 + C15222 * C780 + C44912 * C1090) *
                C9855 +
            (C25603 + C25604) * C9960 + (C26043 + C26044) * C44914) *
               C44729 * C3152 -
           ((C15222 * C9483 + C44912 * C9749 + C15221 * C4139 +
             C15153 * C4350) *
                C44914 +
            (C15222 * C9369 + C44912 * C9429 + C15221 * C4045 +
             C15153 * C4095) *
                C9960 +
            (C26044 + C26043) * C9855 + (C25604 + C25603) * C9959) *
               C44729 * C44910) *
              C636 +
          (((C27340 + C27341) * C9959 + (C27791 + C27792) * C9855 +
            (C15221 * C9369 + C15153 * C9429 + C15222 * C24026 +
             C44912 * C24070) *
                C9960 +
            (C15221 * C9483 + C15153 * C9749 + C15222 * C24110 +
             C44912 * C24309) *
                C44914) *
               C44729 * C44910 -
           ((C27792 + C27791) * C44914 + (C27341 + C27340) * C9960 +
            (C15222 * C2346 + C44912 * C2557 + C15221 * C780 + C15153 * C1090) *
                C9855 +
            (C15222 * C2252 + C44912 * C2302 + C15221 * C642 + C15153 * C710) *
                C9959) *
               C44729 * C3152) *
              C44908) *
         C44752) /
        (p * q * std::sqrt(p + q));
    d2eezz[52] += (2 * std::pow(Pi, 2.5) *
                   ((((C10305 * C93 + C10308 + C10308 + C9855 * C558 +
                       C10306 * C1226 + C10309 + C10309 + C44914 * C1738) *
                          C15153 +
                      (C25449 + C25450) * C44912) *
                         C44729 * C3152 -
                     ((C27869 + C27870) * C44912 +
                      (C10306 * C4045 + C11702 + C11702 + C44914 * C4391 +
                       C10305 * C1226 + C11703 + C11703 + C9855 * C1738) *
                          C15153) *
                         C44729 * C44910) *
                        C636 +
                    (((C27870 + C27869) * C15153 +
                      (C10305 * C7523 + C27863 + C27863 + C9855 * C8122 +
                       C10306 * C24026 + C27864 + C27864 + C44914 * C24348) *
                          C44912) *
                         C44729 * C44910 -
                     ((C27191 + C27192) * C44912 + (C25450 + C25449) * C15153) *
                         C44729 * C3152) *
                        C44908) *
                   C44752) /
                  (p * q * std::sqrt(p + q));
    d2eexx[53] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C20397 * C93 + C20400 + C20400 + C44729 * C103) * C9855 +
            C25527 * C44914) *
               C15153 +
           (C24869 + C24870) * C44912) *
              C4042 -
          ((C27265 + C27261) * C44912 +
           (C29118 * C44914 + C25527 * C9855) * C15153) *
              C4043 +
          ((C29118 * C9855 +
            (C20397 * C14619 + C29114 + C29114 + C44729 * C14623) * C44914) *
               C15153 +
           (C27264 * C9855 +
            (C20397 * C29108 + C29115 + C29115 + C44729 * C29110) * C44914) *
               C44912) *
              C4044) *
         C44786 * C44752) /
        (p * q * std::sqrt(p + q));
    d2eexy[53] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C15221 * C93 + C15153 * C156 + C15222 * C642 + C44912 * C710) *
                C20398 +
            (C15221 * C98 + C15153 * C161 + C15222 * C646 + C44912 * C714) *
                C44729) *
               C9855 +
           ((C25603 + C25604) * C20398 + (C25605 + C25606) * C44729) * C44914) *
              C4042 -
          (((C29179 + C29180) * C44729 + (C29181 + C29182) * C20398) * C44914 +
           ((C25606 + C25605) * C44729 + (C25604 + C25603) * C20398) * C9855) *
              C4043 +
          (((C29182 + C29181) * C20398 + (C29180 + C29179) * C44729) * C9855 +
           ((C15221 * C14619 + C15153 * C14687 + C15222 * C29108 +
             C44912 * C29168) *
                C20398 +
            (C15221 * C14621 + C15153 * C14689 + C15222 * C29109 +
             C44912 * C29169) *
                C44729) *
               C44914) *
              C4044) *
         C44786 * C44752) /
        (p * q * std::sqrt(p + q));
    d2eexz[53] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C9959 * C93 + C9855 * C223 + C9960 * C1226 + C44914 * C1364) *
                C20398 +
            (C9959 * C98 + C9855 * C228 + C9960 * C1230 + C44914 * C1368) *
                C44729) *
               C15153 +
           ((C25018 + C25019) * C20398 + (C25020 + C25021) * C44729) * C44912) *
              C4042 -
          (((C27418 + C27419) * C44729 + (C27420 + C27421) * C20398) * C44912 +
           ((C9960 * C4048 + C44914 * C4142 + C9959 * C1230 + C9855 * C1368) *
                C44729 +
            (C9960 * C4045 + C44914 * C4139 + C9959 * C1226 + C9855 * C1364) *
                C20398) *
               C15153) *
              C4043 +
          (((C9959 * C4045 + C9855 * C4139 + C9960 * C14619 + C44914 * C14751) *
                C20398 +
            (C9959 * C4048 + C9855 * C4142 + C9960 * C14621 + C44914 * C14753) *
                C44729) *
               C15153 +
           ((C9959 * C9369 + C9855 * C9483 + C9960 * C29108 + C44914 * C29232) *
                C20398 +
            (C9959 * C9371 + C9855 * C9485 + C9960 * C29109 + C44914 * C29233) *
                C44729) *
               C44912) *
              C4044) *
         C44786 * C44752) /
        (p * q * std::sqrt(p + q));
    d2eeyx[53] += (2 * std::pow(Pi, 2.5) *
                   ((((C20398 * C93 + C44729 * C98) * C15221 +
                      (C20398 * C156 + C44729 * C289) * C15153 +
                      C20978 * C15222 + C20979 * C44912) *
                         C9855 +
                     (C25755 + C25756 + C25743 + C25744) * C44914) *
                        C4042 -
                    ((C29286 + C29287 + C29294 + C29295) * C44914 +
                     (C25744 + C25743 + C25756 + C25755) * C9855) *
                        C4043 +
                    ((C29295 + C29294 + C29287 + C29286) * C9855 +
                     ((C20398 * C14619 + C44729 * C14621) * C15221 +
                      (C20398 * C14687 + C44729 * C14805) * C15153 +
                      (C20398 * C29108 + C44729 * C29109) * C15222 +
                      (C20398 * C29168 + C44729 * C29284) * C44912) *
                         C44914) *
                        C4044) *
                   C44786 * C44752) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[53] += (2 * std::pow(Pi, 2.5) *
                   (((C15397 * C93 + C15400 + C15400 + C15153 * C333 +
                      C15398 * C642 + C15401 + C15401 + C44912 * C904) *
                         C44729 * C9855 +
                     (C25833 + C25834) * C44729 * C44914) *
                        C4042 -
                    ((C29357 + C29358) * C44729 * C44914 +
                     (C25834 + C25833) * C44729 * C9855) *
                        C4043 +
                    ((C29358 + C29357) * C44729 * C9855 +
                     (C15397 * C14619 + C29351 + C29351 + C15153 * C14869 +
                      C15398 * C29108 + C29352 + C29352 + C44912 * C29345) *
                         C44729 * C44914) *
                        C4044) *
                   C44786 * C44752) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[53] +=
        (2 * std::pow(Pi, 2.5) *
         (((C9959 * C93 + C9855 * C223 + C9960 * C1226 + C44914 * C1364) *
               C15221 +
           (C9959 * C156 + C9855 * C396 + C9960 * C1294 + C44914 * C1556) *
               C15153 +
           (C25018 + C25019) * C15222 + (C25230 + C25231) * C44912) *
              C44729 * C4042 -
          ((C27646 + C27647) * C44912 + (C27420 + C27421) * C15222 +
           (C9960 * C4095 + C44914 * C4268 + C9959 * C1294 + C9855 * C1556) *
               C15153 +
           (C9960 * C4045 + C44914 * C4139 + C9959 * C1226 + C9855 * C1364) *
               C15221) *
              C44729 * C4043 +
          ((C9959 * C4045 + C9855 * C4139 + C9960 * C14619 + C44914 * C14751) *
               C15221 +
           (C9959 * C4095 + C9855 * C4268 + C9960 * C14687 + C44914 * C14930) *
               C15153 +
           (C9959 * C9369 + C9855 * C9483 + C9960 * C29108 + C44914 * C29232) *
               C15222 +
           (C9959 * C9429 + C9855 * C9645 + C9960 * C29168 + C44914 * C29408) *
               C44912) *
              C44729 * C4044) *
         C44786 * C44752) /
        (p * q * std::sqrt(p + q));
    d2eezx[53] += (2 * std::pow(Pi, 2.5) *
                   ((((C20398 * C93 + C44729 * C98) * C9959 +
                      (C20398 * C223 + C44729 * C455) * C9855 + C25751 * C9960 +
                      C25971 * C44914) *
                         C15153 +
                     (C25298 + C25299 + C25300 + C25301) * C44912) *
                        C4042 -
                    ((C27720 + C27716 + C27717 + C27718) * C44912 +
                     (C29463 * C44914 + C29293 * C9960 + C25971 * C9855 +
                      C25751 * C9959) *
                         C15153) *
                        C4043 +
                    ((C29293 * C9959 + C29463 * C9855 +
                      (C20398 * C14619 + C44729 * C14621) * C9960 +
                      (C20398 * C14751 + C44729 * C14982) * C44914) *
                         C15153 +
                     (C27497 * C9959 + C27719 * C9855 +
                      (C20398 * C29108 + C44729 * C29109) * C9960 +
                      (C20398 * C29232 + C44729 * C29459) * C44914) *
                         C44912) *
                        C4044) *
                   C44786 * C44752) /
                  (p * q * std::sqrt(p + q));
    d2eezy[53] +=
        (2 * std::pow(Pi, 2.5) *
         (((C15221 * C93 + C15153 * C156 + C15222 * C642 + C44912 * C710) *
               C9959 +
           (C15221 * C223 + C15153 * C498 + C15222 * C780 + C44912 * C1090) *
               C9855 +
           (C25603 + C25604) * C9960 + (C26043 + C26044) * C44914) *
              C44729 * C4042 -
          ((C29519 + C29520) * C44914 + (C29181 + C29182) * C9960 +
           (C26044 + C26043) * C9855 + (C25604 + C25603) * C9959) *
              C44729 * C4043 +
          ((C29182 + C29181) * C9959 + (C29520 + C29519) * C9855 +
           (C15221 * C14619 + C15153 * C14687 + C15222 * C29108 +
            C44912 * C29168) *
               C9960 +
           (C15221 * C14751 + C15153 * C15040 + C15222 * C29232 +
            C44912 * C29513) *
               C44914) *
              C44729 * C4044) *
         C44786 * C44752) /
        (p * q * std::sqrt(p + q));
    d2eezz[53] += (2 * std::pow(Pi, 2.5) *
                   (((C10305 * C93 + C10308 + C10308 + C9855 * C558 +
                      C10306 * C1226 + C10309 + C10309 + C44914 * C1738) *
                         C15153 +
                     (C25449 + C25450) * C44912) *
                        C44729 * C4042 -
                    ((C27869 + C27870) * C44912 +
                     (C10306 * C4045 + C11702 + C11702 + C44914 * C4391 +
                      C10305 * C1226 + C11703 + C11703 + C9855 * C1738) *
                         C15153) *
                        C44729 * C4043 +
                    ((C10305 * C4045 + C15098 + C15098 + C9855 * C4391 +
                      C10306 * C14619 + C15099 + C15099 + C44914 * C15095) *
                         C15153 +
                     (C10305 * C9369 + C29572 + C29572 + C9855 * C9801 +
                      C10306 * C29108 + C29573 + C29573 + C44914 * C29570) *
                         C44912) *
                        C44729 * C4044) *
                   C44786 * C44752) /
                  (p * q * std::sqrt(p + q));
    d2eexx[54] += (2 * std::pow(Pi, 2.5) *
                   (((C15155 * C93 + C15160 + C15160 + C15151 * C103 +
                      C15157 * C94 + C15161 + C15161 + C44903 * C104) *
                         C29623 +
                     (C15155 * C1226 + C16423 + C16423 + C15151 * C1234 +
                      C15157 * C1225 + C16422 + C16422 + C44903 * C1233) *
                         C44914) *
                        C44836 * C44803 * C44786 * C84 -
                    ((C15157 * C1224 + C16425 + C16425 + C44903 * C1232 +
                      C15155 * C1225 + C16424 + C16424 + C15151 * C1233) *
                         C44914 +
                     (C15157 * C95 + C15166 + C15166 + C44903 * C105 +
                      C15155 * C94 + C15167 + C15167 + C15151 * C104) *
                         C29623) *
                        C44836 * C44803 * C44786 * C85 +
                    ((C15155 * C95 + C15168 + C15168 + C15151 * C105 +
                      C15157 * C96 + C15169 + C15169 + C44903 * C106) *
                         C29623 +
                     (C15155 * C1224 + C29626 + C29626 + C15151 * C1232 +
                      C15157 * C1227 + C29627 + C29627 + C44903 * C1235) *
                         C44914) *
                        C44836 * C44803 * C44786 * C86)) /
                  (p * q * std::sqrt(p + q));
    d2eexy[54] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C155 * C93 + C44836 * C156) * C15156 +
            (C155 * C98 + C44836 * C161) * C15151 + C179 * C15158 +
            C180 * C44903) *
               C29623 +
           (C11150 * C15156 + C11151 * C15151 + C1312 * C15158 +
            C1311 * C44903) *
               C44914) *
              C44803 * C44786 * C84 -
          ((C1309 * C44903 + C1310 * C15158 + C1311 * C15151 + C1312 * C15156) *
               C44914 +
           (C182 * C44903 + C181 * C15158 + C180 * C15151 + C179 * C15156) *
               C29623) *
              C44803 * C44786 * C85 +
          ((C181 * C15156 + C182 * C15151 + C184 * C15158 + C183 * C44903) *
               C29623 +
           (C1310 * C15156 + C1309 * C15151 +
            (C155 * C1227 + C44836 * C1295) * C15158 +
            (C155 * C1231 + C44836 * C1299) * C44903) *
               C44914) *
              C44803 * C44786 * C86)) /
        (p * q * std::sqrt(p + q));
    d2eexz[54] +=
        (2 * std::pow(Pi, 2.5) *
         (((C29727 * C93 + C29623 * C223 + C29728 * C1226 + C44914 * C1364) *
               C15156 +
           (C29727 * C98 + C29623 * C228 + C29728 * C1230 + C44914 * C1368) *
               C15151 +
           (C29746 + C29747) * C15158 + (C29748 + C29749) * C44903) *
              C44836 * C44803 * C44786 * C84 -
          ((C29750 + C29751) * C44903 + (C29752 + C29753) * C15158 +
           (C29749 + C29748) * C15151 + (C29747 + C29746) * C15156) *
              C44836 * C44803 * C44786 * C85 +
          ((C29753 + C29752) * C15156 + (C29751 + C29750) * C15151 +
           (C29727 * C96 + C29623 * C226 + C29728 * C1227 + C44914 * C1365) *
               C15158 +
           (C29727 * C101 + C29623 * C231 + C29728 * C1231 + C44914 * C1369) *
               C44903) *
              C44836 * C44803 * C44786 * C86)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[54] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C15156 * C93 + C15151 * C98 + C15158 * C94 + C44903 * C99) * C155 +
            (C15156 * C156 + C15151 * C289 + C15158 * C157 + C44903 * C290) *
                C44836) *
               C29623 +
           ((C15156 * C1226 + C15151 * C1230 + C15158 * C1225 +
             C44903 * C1229) *
                C155 +
            (C15156 * C1294 + C15151 * C1434 + C15158 * C1293 +
             C44903 * C1433) *
                C44836) *
               C44914) *
              C44803 * C44786 * C84 -
          (((C15158 * C1292 + C44903 * C1432 + C15156 * C1293 +
             C15151 * C1433) *
                C44836 +
            (C15158 * C1224 + C44903 * C1228 + C15156 * C1225 +
             C15151 * C1229) *
                C155) *
               C44914 +
           ((C15158 * C158 + C44903 * C291 + C15156 * C157 + C15151 * C290) *
                C44836 +
            (C15158 * C95 + C44903 * C100 + C15156 * C94 + C15151 * C99) *
                C155) *
               C29623) *
              C44803 * C44786 * C85 +
          (((C15156 * C95 + C15151 * C100 + C15158 * C96 + C44903 * C101) *
                C155 +
            (C15156 * C158 + C15151 * C291 + C15158 * C159 + C44903 * C292) *
                C44836) *
               C29623 +
           ((C15156 * C1224 + C15151 * C1228 + C15158 * C1227 +
             C44903 * C1231) *
                C155 +
            (C15156 * C1292 + C15151 * C1432 + C15158 * C1295 +
             C44903 * C1435) *
                C44836) *
               C44914) *
              C44803 * C44786 * C86)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[54] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C332 * C93 + C339 + C339 + C44836 * C333) * C15151 +
            C356 * C44903) *
               C29623 +
           (C11401 * C15151 + C1504 * C44903) * C44914) *
              C44803 * C44786 * C84 -
          ((C1503 * C44903 + C1504 * C15151) * C44914 +
           (C357 * C44903 + C356 * C15151) * C29623) *
              C44803 * C44786 * C85 +
          ((C357 * C15151 + C358 * C44903) * C29623 +
           (C1503 * C15151 +
            (C332 * C1227 + C1498 + C1498 + C44836 * C1489) * C44903) *
               C44914) *
              C44803 * C44786 * C86)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[54] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C29727 * C93 + C29623 * C223 + C29728 * C1226 + C44914 * C1364) *
                C155 +
            (C29727 * C156 + C29623 * C396 + C29728 * C1294 + C44914 * C1556) *
                C44836) *
               C15151 +
           ((C29746 + C29747) * C155 + (C29912 + C29913) * C44836) * C44903) *
              C44803 * C44786 * C84 -
          (((C29914 + C29915) * C44836 + (C29752 + C29753) * C155) * C44903 +
           ((C29913 + C29912) * C44836 + (C29747 + C29746) * C155) * C15151) *
              C44803 * C44786 * C85 +
          (((C29753 + C29752) * C155 + (C29915 + C29914) * C44836) * C15151 +
           ((C29727 * C96 + C29623 * C226 + C29728 * C1227 + C44914 * C1365) *
                C155 +
            (C29727 * C159 + C29623 * C399 + C29728 * C1295 + C44914 * C1557) *
                C44836) *
               C44903) *
              C44803 * C44786 * C86)) /
        (p * q * std::sqrt(p + q));
    d2eezx[54] +=
        (2 * std::pow(Pi, 2.5) *
         (((C15156 * C93 + C15151 * C98 + C15158 * C94 + C44903 * C99) *
               C29727 +
           (C15156 * C223 + C15151 * C455 + C15158 * C224 + C44903 * C456) *
               C29623 +
           (C15156 * C1226 + C15151 * C1230 + C15158 * C1225 + C44903 * C1229) *
               C29728 +
           (C15156 * C1364 + C15151 * C1620 + C15158 * C1363 + C44903 * C1619) *
               C44914) *
              C44836 * C44803 * C44786 * C84 -
          ((C15158 * C1362 + C44903 * C1618 + C15156 * C1363 + C15151 * C1619) *
               C44914 +
           (C15158 * C1224 + C44903 * C1228 + C15156 * C1225 + C15151 * C1229) *
               C29728 +
           (C15158 * C225 + C44903 * C457 + C15156 * C224 + C15151 * C456) *
               C29623 +
           (C15158 * C95 + C44903 * C100 + C15156 * C94 + C15151 * C99) *
               C29727) *
              C44836 * C44803 * C44786 * C85 +
          ((C15156 * C95 + C15151 * C100 + C15158 * C96 + C44903 * C101) *
               C29727 +
           (C15156 * C225 + C15151 * C457 + C15158 * C226 + C44903 * C458) *
               C29623 +
           (C15156 * C1224 + C15151 * C1228 + C15158 * C1227 + C44903 * C1231) *
               C29728 +
           (C15156 * C1362 + C15151 * C1618 + C15158 * C1365 + C44903 * C1621) *
               C44914) *
              C44836 * C44803 * C44786 * C86)) /
        (p * q * std::sqrt(p + q));
    d2eezy[54] += (2 * std::pow(Pi, 2.5) *
                   ((((C155 * C93 + C44836 * C156) * C29727 +
                      (C155 * C223 + C44836 * C498) * C29623 + C11150 * C29728 +
                      C11627 * C44914) *
                         C15151 +
                     (C30016 + C30017 + C30018 + C30019) * C44903) *
                        C44803 * C44786 * C84 -
                    ((C30020 + C30021 + C30022 + C30023) * C44903 +
                     (C30019 + C30018 + C30017 + C30016) * C15151) *
                        C44803 * C44786 * C85 +
                    ((C30023 + C30022 + C30021 + C30020) * C15151 +
                     (C184 * C29727 + C515 * C29623 +
                      (C155 * C1227 + C44836 * C1295) * C29728 +
                      (C155 * C1365 + C44836 * C1675) * C44914) *
                         C44903) *
                        C44803 * C44786 * C86)) /
                  (p * q * std::sqrt(p + q));
    d2eezz[54] += (2 * std::pow(Pi, 2.5) *
                   (((C30073 * C93 + C30076 + C30076 + C29623 * C558 +
                      C30074 * C1226 + C30077 + C30077 + C44914 * C1738) *
                         C44836 * C15151 +
                     (C30100 + C30101) * C44836 * C44903) *
                        C44803 * C44786 * C84 -
                    ((C30102 + C30103) * C44836 * C44903 +
                     (C30101 + C30100) * C44836 * C15151) *
                        C44803 * C44786 * C85 +
                    ((C30103 + C30102) * C44836 * C15151 +
                     (C30073 * C96 + C30090 + C30090 + C29623 * C561 +
                      C30074 * C1227 + C30091 + C30091 + C44914 * C1739) *
                         C44836 * C44903) *
                        C44803 * C44786 * C86)) /
                  (p * q * std::sqrt(p + q));
    d2eexx[55] += (2 * std::pow(Pi, 2.5) *
                   ((((C15155 * C93 + C15160 + C15160 + C15151 * C103 +
                       C15157 * C94 + C15161 + C15161 + C44903 * C104) *
                          C29623 +
                      (C15155 * C1226 + C16423 + C16423 + C15151 * C1234 +
                       C15157 * C1225 + C16422 + C16422 + C44903 * C1233) *
                          C44914) *
                         C44836 * C44803 * C636 -
                     ((C18154 + C18155) * C44914 + (C15739 + C15738) * C29623) *
                         C44836 * C44803 * C44908) *
                        C638 +
                    (((C15740 + C15741) * C29623 +
                      (C15155 * C2655 + C16426 + C16426 + C15151 * C2661 +
                       C15157 * C2656 + C16427 + C16427 + C44903 * C2662) *
                          C44914) *
                         C44836 * C44803 * C44908 -
                     ((C15157 * C1224 + C16425 + C16425 + C44903 * C1232 +
                       C15155 * C1225 + C16424 + C16424 + C15151 * C1233) *
                          C44914 +
                      (C15157 * C95 + C15166 + C15166 + C44903 * C105 +
                       C15155 * C94 + C15167 + C15167 + C15151 * C104) *
                          C29623) *
                         C44836 * C44803 * C636) *
                        C44906)) /
                  (p * q * std::sqrt(p + q));
    d2eexy[55] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C155 * C93 + C44836 * C156) * C15156 +
             (C155 * C98 + C44836 * C161) * C15151 + C179 * C15158 +
             C180 * C44903) *
                C29623 +
            (C11150 * C15156 + C11151 * C15151 + C1312 * C15158 +
             C1311 * C44903) *
                C44914) *
               C44803 * C636 -
           ((C10472 * C44903 + C10473 * C15158 + C12901 * C15151 +
             C12900 * C15156) *
                C44914 +
            (C727 * C44903 + C728 * C15158 +
             (C155 * C646 + C44836 * C714) * C15151 +
             (C155 * C642 + C44836 * C710) * C15156) *
                C29623) *
               C44803 * C44908) *
              C638 +
          (((C728 * C15156 + C727 * C15151 + C726 * C15158 + C725 * C44903) *
                C29623 +
            (C10473 * C15156 + C10472 * C15151 +
             (C155 * C2656 + C44836 * C2718) * C15158 +
             (C155 * C2659 + C44836 * C2721) * C44903) *
                C44914) *
               C44803 * C44908 -
           ((C1309 * C44903 + C1310 * C15158 + C1311 * C15151 +
             C1312 * C15156) *
                C44914 +
            (C182 * C44903 + C181 * C15158 + C180 * C15151 + C179 * C15156) *
                C29623) *
               C44803 * C636) *
              C44906)) /
        (p * q * std::sqrt(p + q));
    d2eexz[55] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C29727 * C93 + C29623 * C223 + C29728 * C1226 + C44914 * C1364) *
                C15156 +
            (C29727 * C98 + C29623 * C228 + C29728 * C1230 + C44914 * C1368) *
                C15151 +
            (C29746 + C29747) * C15158 + (C29748 + C29749) * C44903) *
               C44836 * C44803 * C636 -
           ((C30310 + C30311) * C44903 + (C30312 + C30313) * C15158 +
            (C29728 * C2657 + C44914 * C2775 + C29727 * C646 + C29623 * C784) *
                C15151 +
            (C29728 * C2654 + C44914 * C2772 + C29727 * C642 + C29623 * C780) *
                C15156) *
               C44836 * C44803 * C44908) *
              C638 +
          (((C30313 + C30312) * C15156 + (C30311 + C30310) * C15151 +
            (C29727 * C640 + C29623 * C778 + C29728 * C2656 + C44914 * C2774) *
                C15158 +
            (C29727 * C644 + C29623 * C782 + C29728 * C2659 + C44914 * C2777) *
                C44903) *
               C44836 * C44803 * C44908 -
           ((C29750 + C29751) * C44903 + (C29752 + C29753) * C15158 +
            (C29749 + C29748) * C15151 + (C29747 + C29746) * C15156) *
               C44836 * C44803 * C636) *
              C44906)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[55] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C15156 * C93 + C15151 * C98 + C15158 * C94 + C44903 * C99) *
                 C155 +
             (C15156 * C156 + C15151 * C289 + C15158 * C157 + C44903 * C290) *
                 C44836) *
                C29623 +
            ((C15156 * C1226 + C15151 * C1230 + C15158 * C1225 +
              C44903 * C1229) *
                 C155 +
             (C15156 * C1294 + C15151 * C1434 + C15158 * C1293 +
              C44903 * C1433) *
                 C44836) *
                C44914) *
               C44803 * C636 -
           (((C18366 + C18367) * C44836 + (C18368 + C18369) * C155) * C44914 +
            ((C15979 + C15978) * C44836 + (C15977 + C15976) * C155) * C29623) *
               C44803 * C44908) *
              C638 +
          ((((C15980 + C15981) * C155 + (C15982 + C15983) * C44836) * C29623 +
            ((C15156 * C2655 + C15151 * C2658 + C15158 * C2656 +
              C44903 * C2659) *
                 C155 +
             (C15156 * C2717 + C15151 * C2829 + C15158 * C2718 +
              C44903 * C2830) *
                 C44836) *
                C44914) *
               C44803 * C44908 -
           (((C15158 * C1292 + C44903 * C1432 + C15156 * C1293 +
              C15151 * C1433) *
                 C44836 +
             (C15158 * C1224 + C44903 * C1228 + C15156 * C1225 +
              C15151 * C1229) *
                 C155) *
                C44914 +
            ((C15158 * C158 + C44903 * C291 + C15156 * C157 + C15151 * C290) *
                 C44836 +
             (C15158 * C95 + C44903 * C100 + C15156 * C94 + C15151 * C99) *
                 C155) *
                C29623) *
               C44803 * C636) *
              C44906)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[55] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C332 * C93 + C339 + C339 + C44836 * C333) * C15151 +
             C356 * C44903) *
                C29623 +
            (C11401 * C15151 + C1504 * C44903) * C44914) *
               C44803 * C636 -
           ((C10688 * C44903 + C13109 * C15151) * C44914 +
            (C920 * C44903 +
             (C332 * C642 + C913 + C913 + C44836 * C904) * C15151) *
                C29623) *
               C44803 * C44908) *
              C638 +
          (((C920 * C15151 + C919 * C44903) * C29623 +
            (C10688 * C15151 +
             (C332 * C2656 + C2887 + C2887 + C44836 * C2883) * C44903) *
                C44914) *
               C44803 * C44908 -
           ((C1503 * C44903 + C1504 * C15151) * C44914 +
            (C357 * C44903 + C356 * C15151) * C29623) *
               C44803 * C636) *
              C44906)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[55] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C29727 * C93 + C29623 * C223 + C29728 * C1226 + C44914 * C1364) *
                 C155 +
             (C29727 * C156 + C29623 * C396 + C29728 * C1294 + C44914 * C1556) *
                 C44836) *
                C15151 +
            ((C29746 + C29747) * C155 + (C29912 + C29913) * C44836) * C44903) *
               C44803 * C636 -
           (((C30516 + C30517) * C44836 + (C30312 + C30313) * C155) * C44903 +
            ((C29728 * C2716 + C44914 * C2937 + C29727 * C710 + C29623 * C972) *
                 C44836 +
             (C29728 * C2654 + C44914 * C2772 + C29727 * C642 + C29623 * C780) *
                 C155) *
                C15151) *
               C44803 * C44908) *
              C638 +
          ((((C30313 + C30312) * C155 + (C30517 + C30516) * C44836) * C15151 +
            ((C29727 * C640 + C29623 * C778 + C29728 * C2656 + C44914 * C2774) *
                 C155 +
             (C29727 * C708 + C29623 * C970 + C29728 * C2718 + C44914 * C2939) *
                 C44836) *
                C44903) *
               C44803 * C44908 -
           (((C29914 + C29915) * C44836 + (C29752 + C29753) * C155) * C44903 +
            ((C29913 + C29912) * C44836 + (C29747 + C29746) * C155) * C15151) *
               C44803 * C636) *
              C44906)) /
        (p * q * std::sqrt(p + q));
    d2eezx[55] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C15156 * C93 + C15151 * C98 + C15158 * C94 + C44903 * C99) *
                C29727 +
            (C15156 * C223 + C15151 * C455 + C15158 * C224 + C44903 * C456) *
                C29623 +
            (C15156 * C1226 + C15151 * C1230 + C15158 * C1225 +
             C44903 * C1229) *
                C29728 +
            (C15156 * C1364 + C15151 * C1620 + C15158 * C1363 +
             C44903 * C1619) *
                C44914) *
               C44836 * C44803 * C636 -
           ((C18576 + C18577) * C44914 + (C18368 + C18369) * C29728 +
            (C16211 + C16210) * C29623 + (C15977 + C15976) * C29727) *
               C44836 * C44803 * C44908) *
              C638 +
          (((C15980 + C15981) * C29727 + (C16212 + C16213) * C29623 +
            (C15156 * C2655 + C15151 * C2658 + C15158 * C2656 +
             C44903 * C2659) *
                C29728 +
            (C15156 * C2773 + C15151 * C2991 + C15158 * C2774 +
             C44903 * C2992) *
                C44914) *
               C44836 * C44803 * C44908 -
           ((C15158 * C1362 + C44903 * C1618 + C15156 * C1363 +
             C15151 * C1619) *
                C44914 +
            (C15158 * C1224 + C44903 * C1228 + C15156 * C1225 +
             C15151 * C1229) *
                C29728 +
            (C15158 * C225 + C44903 * C457 + C15156 * C224 + C15151 * C456) *
                C29623 +
            (C15158 * C95 + C44903 * C100 + C15156 * C94 + C15151 * C99) *
                C29727) *
               C44836 * C44803 * C636) *
              C44906)) /
        (p * q * std::sqrt(p + q));
    d2eezy[55] += (2 * std::pow(Pi, 2.5) *
                   (((((C155 * C93 + C44836 * C156) * C29727 +
                       (C155 * C223 + C44836 * C498) * C29623 +
                       C11150 * C29728 + C11627 * C44914) *
                          C15151 +
                      (C30016 + C30017 + C30018 + C30019) * C44903) *
                         C44803 * C636 -
                     ((C30650 + C30651 + C30652 + C30653) * C44903 +
                      (C13311 * C44914 + C12900 * C29728 +
                       (C155 * C780 + C44836 * C1090) * C29623 +
                       (C155 * C642 + C44836 * C710) * C29727) *
                          C15151) *
                         C44803 * C44908) *
                        C638 +
                    (((C30653 + C30652 + C30651 + C30650) * C15151 +
                      (C726 * C29727 + C1099 * C29623 +
                       (C155 * C2656 + C44836 * C2718) * C29728 +
                       (C155 * C2774 + C44836 * C3045) * C44914) *
                          C44903) *
                         C44803 * C44908 -
                     ((C30020 + C30021 + C30022 + C30023) * C44903 +
                      (C30019 + C30018 + C30017 + C30016) * C15151) *
                         C44803 * C636) *
                        C44906)) /
                  (p * q * std::sqrt(p + q));
    d2eezz[55] += (2 * std::pow(Pi, 2.5) *
                   ((((C30073 * C93 + C30076 + C30076 + C29623 * C558 +
                       C30074 * C1226 + C30077 + C30077 + C44914 * C1738) *
                          C44836 * C15151 +
                      (C30100 + C30101) * C44836 * C44903) *
                         C44803 * C636 -
                     ((C30734 + C30735) * C44836 * C44903 +
                      (C30074 * C2654 + C30726 + C30726 + C44914 * C3096 +
                       C30073 * C642 + C30727 + C30727 + C29623 * C1154) *
                          C44836 * C15151) *
                         C44803 * C44908) *
                        C638 +
                    (((C30735 + C30734) * C44836 * C15151 +
                      (C30073 * C640 + C30728 + C30728 + C29623 * C1152 +
                       C30074 * C2656 + C30729 + C30729 + C44914 * C3098) *
                          C44836 * C44903) *
                         C44803 * C44908 -
                     ((C30102 + C30103) * C44836 * C44903 +
                      (C30101 + C30100) * C44836 * C15151) *
                         C44803 * C636) *
                        C44906)) /
                  (p * q * std::sqrt(p + q));
    d2eexx[56] += (2 * std::pow(Pi, 2.5) *
                   ((((C15155 * C93 + C15160 + C15160 + C15151 * C103 +
                       C15157 * C94 + C15161 + C15161 + C44903 * C104) *
                          C29623 +
                      (C30820 + C30821) * C44914) *
                         C44836 * C1222 -
                     ((C15157 * C4046 + C19949 + C19949 + C44903 * C4052 +
                       C15155 * C4045 + C19948 + C19948 + C15151 * C4051) *
                          C44914 +
                      (C30821 + C30820) * C29623) *
                         C44836 * C44910) *
                        C44786 * C638 +
                    (((C30822 + C30823) * C29623 +
                      (C15155 * C4046 + C30810 + C30810 + C15151 * C4052 +
                       C15157 * C4047 + C30811 + C30811 + C44903 * C4053) *
                          C44914) *
                         C44836 * C44910 -
                     ((C30823 + C30822) * C44914 +
                      (C15157 * C95 + C15166 + C15166 + C44903 * C105 +
                       C15155 * C94 + C15167 + C15167 + C15151 * C104) *
                          C29623) *
                         C44836 * C1222) *
                        C44786 * C44906)) /
                  (p * q * std::sqrt(p + q));
    d2eexy[56] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C155 * C93 + C44836 * C156) * C15156 +
             (C155 * C98 + C44836 * C161) * C15151 + C179 * C15158 +
             C180 * C44903) *
                C29623 +
            (C30890 + C30891 + C30892 + C30893) * C44914) *
               C1222 -
           ((C11152 * C44903 + C11153 * C15158 + C14698 * C15151 +
             C14699 * C15156) *
                C44914 +
            (C30893 + C30892 + C30891 + C30890) * C29623) *
               C44910) *
              C44786 * C638 +
          (((C30894 + C30895 + C30896 + C30897) * C29623 +
            (C11153 * C15156 + C11152 * C15151 +
             (C155 * C4047 + C44836 * C4097) * C15158 +
             (C155 * C4050 + C44836 * C4100) * C44903) *
                C44914) *
               C44910 -
           ((C30897 + C30896 + C30895 + C30894) * C44914 +
            (C182 * C44903 + C181 * C15158 + C180 * C15151 + C179 * C15156) *
                C29623) *
               C1222) *
              C44786 * C44906)) /
        (p * q * std::sqrt(p + q));
    d2eexz[56] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C29727 * C93 + C29623 * C223 + C29728 * C1226 + C44914 * C1364) *
                C15156 +
            (C29727 * C98 + C29623 * C228 + C29728 * C1230 + C44914 * C1368) *
                C15151 +
            (C29746 + C29747) * C15158 + (C29748 + C29749) * C44903) *
               C44836 * C1222 -
           ((C30972 + C30973) * C44903 + (C30974 + C30975) * C15158 +
            (C29728 * C4048 + C44914 * C4142 + C29727 * C1230 +
             C29623 * C1368) *
                C15151 +
            (C29728 * C4045 + C44914 * C4139 + C29727 * C1226 +
             C29623 * C1364) *
                C15156) *
               C44836 * C44910) *
              C44786 * C638 +
          (((C30975 + C30974) * C15156 + (C30973 + C30972) * C15151 +
            (C29727 * C1224 + C29623 * C1362 + C29728 * C4047 +
             C44914 * C4141) *
                C15158 +
            (C29727 * C1228 + C29623 * C1366 + C29728 * C4050 +
             C44914 * C4144) *
                C44903) *
               C44836 * C44910 -
           ((C29750 + C29751) * C44903 + (C29752 + C29753) * C15158 +
            (C29749 + C29748) * C15151 + (C29747 + C29746) * C15156) *
               C44836 * C1222) *
              C44786 * C44906)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[56] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C15156 * C93 + C15151 * C98 + C15158 * C94 + C44903 * C99) *
                 C155 +
             (C15156 * C156 + C15151 * C289 + C15158 * C157 + C44903 * C290) *
                 C44836) *
                C29623 +
            ((C31058 + C31059) * C155 + (C31060 + C31061) * C44836) * C44914) *
               C1222 -
           (((C15158 * C4096 + C44903 * C4184 + C15156 * C4095 +
              C15151 * C4183) *
                 C44836 +
             (C15158 * C4046 + C44903 * C4049 + C15156 * C4045 +
              C15151 * C4048) *
                 C155) *
                C44914 +
            ((C31061 + C31060) * C44836 + (C31059 + C31058) * C155) * C29623) *
               C44910) *
              C44786 * C638 +
          ((((C31062 + C31063) * C155 + (C31064 + C31065) * C44836) * C29623 +
            ((C15156 * C4046 + C15151 * C4049 + C15158 * C4047 +
              C44903 * C4050) *
                 C155 +
             (C15156 * C4096 + C15151 * C4184 + C15158 * C4097 +
              C44903 * C4185) *
                 C44836) *
                C44914) *
               C44910 -
           (((C31065 + C31064) * C44836 + (C31063 + C31062) * C155) * C44914 +
            ((C15158 * C158 + C44903 * C291 + C15156 * C157 + C15151 * C290) *
                 C44836 +
             (C15158 * C95 + C44903 * C100 + C15156 * C94 + C15151 * C99) *
                 C155) *
                C29623) *
               C1222) *
              C44786 * C44906)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[56] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C332 * C93 + C339 + C339 + C44836 * C333) * C15151 +
             C356 * C44903) *
                C29623 +
            (C31132 + C31133) * C44914) *
               C1222 -
           ((C11402 * C44903 + C14879 * C15151) * C44914 +
            (C31133 + C31132) * C29623) *
               C44910) *
              C44786 * C638 +
          (((C31134 + C31135) * C29623 +
            (C11402 * C15151 +
             (C332 * C4047 + C4230 + C4230 + C44836 * C4226) * C44903) *
                C44914) *
               C44910 -
           ((C31135 + C31134) * C44914 +
            (C357 * C44903 + C356 * C15151) * C29623) *
               C1222) *
              C44786 * C44906)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[56] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C29727 * C93 + C29623 * C223 + C29728 * C1226 + C44914 * C1364) *
                 C155 +
             (C29727 * C156 + C29623 * C396 + C29728 * C1294 + C44914 * C1556) *
                 C44836) *
                C15151 +
            ((C29746 + C29747) * C155 + (C29912 + C29913) * C44836) * C44903) *
               C1222 -
           (((C31206 + C31207) * C44836 + (C30974 + C30975) * C155) * C44903 +
            ((C29728 * C4095 + C44914 * C4268 + C29727 * C1294 +
              C29623 * C1556) *
                 C44836 +
             (C29728 * C4045 + C44914 * C4139 + C29727 * C1226 +
              C29623 * C1364) *
                 C155) *
                C15151) *
               C44910) *
              C44786 * C638 +
          ((((C30975 + C30974) * C155 + (C31207 + C31206) * C44836) * C15151 +
            ((C29727 * C1224 + C29623 * C1362 + C29728 * C4047 +
              C44914 * C4141) *
                 C155 +
             (C29727 * C1292 + C29623 * C1554 + C29728 * C4097 +
              C44914 * C4270) *
                 C44836) *
                C44903) *
               C44910 -
           (((C29914 + C29915) * C44836 + (C29752 + C29753) * C155) * C44903 +
            ((C29913 + C29912) * C44836 + (C29747 + C29746) * C155) * C15151) *
               C1222) *
              C44786 * C44906)) /
        (p * q * std::sqrt(p + q));
    d2eezx[56] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C15156 * C93 + C15151 * C98 + C15158 * C94 + C44903 * C99) *
                C29727 +
            (C15156 * C223 + C15151 * C455 + C15158 * C224 + C44903 * C456) *
                C29623 +
            (C31058 + C31059) * C29728 + (C31282 + C31283) * C44914) *
               C44836 * C1222 -
           ((C15158 * C4140 + C44903 * C4310 + C15156 * C4139 +
             C15151 * C4309) *
                C44914 +
            (C15158 * C4046 + C44903 * C4049 + C15156 * C4045 +
             C15151 * C4048) *
                C29728 +
            (C31283 + C31282) * C29623 + (C31059 + C31058) * C29727) *
               C44836 * C44910) *
              C44786 * C638 +
          (((C31062 + C31063) * C29727 + (C31284 + C31285) * C29623 +
            (C15156 * C4046 + C15151 * C4049 + C15158 * C4047 +
             C44903 * C4050) *
                C29728 +
            (C15156 * C4140 + C15151 * C4310 + C15158 * C4141 +
             C44903 * C4311) *
                C44914) *
               C44836 * C44910 -
           ((C31285 + C31284) * C44914 + (C31063 + C31062) * C29728 +
            (C15158 * C225 + C44903 * C457 + C15156 * C224 + C15151 * C456) *
                C29623 +
            (C15158 * C95 + C44903 * C100 + C15156 * C94 + C15151 * C99) *
                C29727) *
               C44836 * C1222) *
              C44786 * C44906)) /
        (p * q * std::sqrt(p + q));
    d2eezy[56] += (2 * std::pow(Pi, 2.5) *
                   (((((C155 * C93 + C44836 * C156) * C29727 +
                       (C155 * C223 + C44836 * C498) * C29623 +
                       C11150 * C29728 + C11627 * C44914) *
                          C15151 +
                      (C30016 + C30017 + C30018 + C30019) * C44903) *
                         C1222 -
                     ((C31352 + C31353 + C31354 + C31355) * C44903 +
                      (C15045 * C44914 + C14699 * C29728 + C11627 * C29623 +
                       C11150 * C29727) *
                          C15151) *
                         C44910) *
                        C44786 * C638 +
                    (((C31355 + C31354 + C31353 + C31352) * C15151 +
                      (C1310 * C29727 + C1683 * C29623 +
                       (C155 * C4047 + C44836 * C4097) * C29728 +
                       (C155 * C4141 + C44836 * C4352) * C44914) *
                          C44903) *
                         C44910 -
                     ((C30020 + C30021 + C30022 + C30023) * C44903 +
                      (C30019 + C30018 + C30017 + C30016) * C15151) *
                         C1222) *
                        C44786 * C44906)) /
                  (p * q * std::sqrt(p + q));
    d2eezz[56] += (2 * std::pow(Pi, 2.5) *
                   ((((C30073 * C93 + C30076 + C30076 + C29623 * C558 +
                       C30074 * C1226 + C30077 + C30077 + C44914 * C1738) *
                          C44836 * C15151 +
                      (C30100 + C30101) * C44836 * C44903) *
                         C1222 -
                     ((C31436 + C31437) * C44836 * C44903 +
                      (C30074 * C4045 + C31428 + C31428 + C44914 * C4391 +
                       C30073 * C1226 + C31429 + C31429 + C29623 * C1738) *
                          C44836 * C15151) *
                         C44910) *
                        C44786 * C638 +
                    (((C31437 + C31436) * C44836 * C15151 +
                      (C30073 * C1224 + C31430 + C31430 + C29623 * C1736 +
                       C30074 * C4047 + C31431 + C31431 + C44914 * C4393) *
                          C44836 * C44903) *
                         C44910 -
                     ((C30102 + C30103) * C44836 * C44903 +
                      (C30101 + C30100) * C44836 * C15151) *
                         C1222) *
                        C44786 * C44906)) /
                  (p * q * std::sqrt(p + q));
    d2eexx[57] += (2 * std::pow(Pi, 2.5) *
                   ((((C15155 * C93 + C15160 + C15160 + C15151 * C103 +
                       C15157 * C94 + C15161 + C15161 + C44903 * C104) *
                          C29623 +
                      (C30820 + C30821) * C44914) *
                         C44836 * C44803 * C1806 -
                     ((C18154 + C18155) * C44914 + (C15739 + C15738) * C29623) *
                         C44836 * C44803 * C44908) *
                        C1808 +
                    (((C15740 + C15741) * C29623 +
                      (C15155 * C2655 + C16426 + C16426 + C15151 * C2661 +
                       C15157 * C2656 + C16427 + C16427 + C44903 * C2662) *
                          C44914) *
                         C44836 * C44803 * C44908 -
                     ((C30823 + C30822) * C44914 +
                      (C15157 * C95 + C15166 + C15166 + C44903 * C105 +
                       C15155 * C94 + C15167 + C15167 + C15151 * C104) *
                          C29623) *
                         C44836 * C44803 * C1806) *
                        C44906)) /
                  (p * q * std::sqrt(p + q));
    d2eexy[57] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C155 * C93 + C44836 * C156) * C15156 +
             (C155 * C98 + C44836 * C161) * C15151 + C179 * C15158 +
             C180 * C44903) *
                C29623 +
            (C30890 + C30891 + C30892 + C30893) * C44914) *
               C44803 * C1806 -
           ((C10472 * C44903 + C10473 * C15158 + C12901 * C15151 +
             C12900 * C15156) *
                C44914 +
            (C727 * C44903 + C728 * C15158 +
             (C155 * C646 + C44836 * C714) * C15151 +
             (C155 * C642 + C44836 * C710) * C15156) *
                C29623) *
               C44803 * C44908) *
              C1808 +
          (((C728 * C15156 + C727 * C15151 + C726 * C15158 + C725 * C44903) *
                C29623 +
            (C10473 * C15156 + C10472 * C15151 +
             (C155 * C2656 + C44836 * C2718) * C15158 +
             (C155 * C2659 + C44836 * C2721) * C44903) *
                C44914) *
               C44803 * C44908 -
           ((C30897 + C30896 + C30895 + C30894) * C44914 +
            (C182 * C44903 + C181 * C15158 + C180 * C15151 + C179 * C15156) *
                C29623) *
               C44803 * C1806) *
              C44906)) /
        (p * q * std::sqrt(p + q));
    d2eexz[57] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C29727 * C93 + C29623 * C223 + C29728 * C1226 + C44914 * C1364) *
                C15156 +
            (C29727 * C98 + C29623 * C228 + C29728 * C1230 + C44914 * C1368) *
                C15151 +
            (C29746 + C29747) * C15158 + (C29748 + C29749) * C44903) *
               C44836 * C44803 * C1806 -
           ((C30310 + C30311) * C44903 + (C30312 + C30313) * C15158 +
            (C29728 * C2657 + C44914 * C2775 + C29727 * C646 + C29623 * C784) *
                C15151 +
            (C29728 * C2654 + C44914 * C2772 + C29727 * C642 + C29623 * C780) *
                C15156) *
               C44836 * C44803 * C44908) *
              C1808 +
          (((C30313 + C30312) * C15156 + (C30311 + C30310) * C15151 +
            (C29727 * C640 + C29623 * C778 + C29728 * C2656 + C44914 * C2774) *
                C15158 +
            (C29727 * C644 + C29623 * C782 + C29728 * C2659 + C44914 * C2777) *
                C44903) *
               C44836 * C44803 * C44908 -
           ((C29750 + C29751) * C44903 + (C29752 + C29753) * C15158 +
            (C29749 + C29748) * C15151 + (C29747 + C29746) * C15156) *
               C44836 * C44803 * C1806) *
              C44906)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[57] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C15156 * C93 + C15151 * C98 + C15158 * C94 + C44903 * C99) *
                 C155 +
             (C15156 * C156 + C15151 * C289 + C15158 * C157 + C44903 * C290) *
                 C44836) *
                C29623 +
            ((C31058 + C31059) * C155 + (C31060 + C31061) * C44836) * C44914) *
               C44803 * C1806 -
           (((C18366 + C18367) * C44836 + (C18368 + C18369) * C155) * C44914 +
            ((C15979 + C15978) * C44836 + (C15977 + C15976) * C155) * C29623) *
               C44803 * C44908) *
              C1808 +
          ((((C15980 + C15981) * C155 + (C15982 + C15983) * C44836) * C29623 +
            ((C15156 * C2655 + C15151 * C2658 + C15158 * C2656 +
              C44903 * C2659) *
                 C155 +
             (C15156 * C2717 + C15151 * C2829 + C15158 * C2718 +
              C44903 * C2830) *
                 C44836) *
                C44914) *
               C44803 * C44908 -
           (((C31065 + C31064) * C44836 + (C31063 + C31062) * C155) * C44914 +
            ((C15158 * C158 + C44903 * C291 + C15156 * C157 + C15151 * C290) *
                 C44836 +
             (C15158 * C95 + C44903 * C100 + C15156 * C94 + C15151 * C99) *
                 C155) *
                C29623) *
               C44803 * C1806) *
              C44906)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[57] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C332 * C93 + C339 + C339 + C44836 * C333) * C15151 +
             C356 * C44903) *
                C29623 +
            (C31132 + C31133) * C44914) *
               C44803 * C1806 -
           ((C10688 * C44903 + C13109 * C15151) * C44914 +
            (C920 * C44903 +
             (C332 * C642 + C913 + C913 + C44836 * C904) * C15151) *
                C29623) *
               C44803 * C44908) *
              C1808 +
          (((C920 * C15151 + C919 * C44903) * C29623 +
            (C10688 * C15151 +
             (C332 * C2656 + C2887 + C2887 + C44836 * C2883) * C44903) *
                C44914) *
               C44803 * C44908 -
           ((C31135 + C31134) * C44914 +
            (C357 * C44903 + C356 * C15151) * C29623) *
               C44803 * C1806) *
              C44906)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[57] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C29727 * C93 + C29623 * C223 + C29728 * C1226 + C44914 * C1364) *
                 C155 +
             (C29727 * C156 + C29623 * C396 + C29728 * C1294 + C44914 * C1556) *
                 C44836) *
                C15151 +
            ((C29746 + C29747) * C155 + (C29912 + C29913) * C44836) * C44903) *
               C44803 * C1806 -
           (((C30516 + C30517) * C44836 + (C30312 + C30313) * C155) * C44903 +
            ((C29728 * C2716 + C44914 * C2937 + C29727 * C710 + C29623 * C972) *
                 C44836 +
             (C29728 * C2654 + C44914 * C2772 + C29727 * C642 + C29623 * C780) *
                 C155) *
                C15151) *
               C44803 * C44908) *
              C1808 +
          ((((C30313 + C30312) * C155 + (C30517 + C30516) * C44836) * C15151 +
            ((C29727 * C640 + C29623 * C778 + C29728 * C2656 + C44914 * C2774) *
                 C155 +
             (C29727 * C708 + C29623 * C970 + C29728 * C2718 + C44914 * C2939) *
                 C44836) *
                C44903) *
               C44803 * C44908 -
           (((C29914 + C29915) * C44836 + (C29752 + C29753) * C155) * C44903 +
            ((C29913 + C29912) * C44836 + (C29747 + C29746) * C155) * C15151) *
               C44803 * C1806) *
              C44906)) /
        (p * q * std::sqrt(p + q));
    d2eezx[57] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C15156 * C93 + C15151 * C98 + C15158 * C94 + C44903 * C99) *
                C29727 +
            (C15156 * C223 + C15151 * C455 + C15158 * C224 + C44903 * C456) *
                C29623 +
            (C31058 + C31059) * C29728 + (C31282 + C31283) * C44914) *
               C44836 * C44803 * C1806 -
           ((C18576 + C18577) * C44914 + (C18368 + C18369) * C29728 +
            (C16211 + C16210) * C29623 + (C15977 + C15976) * C29727) *
               C44836 * C44803 * C44908) *
              C1808 +
          (((C15980 + C15981) * C29727 + (C16212 + C16213) * C29623 +
            (C15156 * C2655 + C15151 * C2658 + C15158 * C2656 +
             C44903 * C2659) *
                C29728 +
            (C15156 * C2773 + C15151 * C2991 + C15158 * C2774 +
             C44903 * C2992) *
                C44914) *
               C44836 * C44803 * C44908 -
           ((C31285 + C31284) * C44914 + (C31063 + C31062) * C29728 +
            (C15158 * C225 + C44903 * C457 + C15156 * C224 + C15151 * C456) *
                C29623 +
            (C15158 * C95 + C44903 * C100 + C15156 * C94 + C15151 * C99) *
                C29727) *
               C44836 * C44803 * C1806) *
              C44906)) /
        (p * q * std::sqrt(p + q));
    d2eezy[57] += (2 * std::pow(Pi, 2.5) *
                   (((((C155 * C93 + C44836 * C156) * C29727 +
                       (C155 * C223 + C44836 * C498) * C29623 +
                       C11150 * C29728 + C11627 * C44914) *
                          C15151 +
                      (C30016 + C30017 + C30018 + C30019) * C44903) *
                         C44803 * C1806 -
                     ((C30650 + C30651 + C30652 + C30653) * C44903 +
                      (C13311 * C44914 + C12900 * C29728 +
                       (C155 * C780 + C44836 * C1090) * C29623 +
                       (C155 * C642 + C44836 * C710) * C29727) *
                          C15151) *
                         C44803 * C44908) *
                        C1808 +
                    (((C30653 + C30652 + C30651 + C30650) * C15151 +
                      (C726 * C29727 + C1099 * C29623 +
                       (C155 * C2656 + C44836 * C2718) * C29728 +
                       (C155 * C2774 + C44836 * C3045) * C44914) *
                          C44903) *
                         C44803 * C44908 -
                     ((C30020 + C30021 + C30022 + C30023) * C44903 +
                      (C30019 + C30018 + C30017 + C30016) * C15151) *
                         C44803 * C1806) *
                        C44906)) /
                  (p * q * std::sqrt(p + q));
    d2eezz[57] += (2 * std::pow(Pi, 2.5) *
                   ((((C30073 * C93 + C30076 + C30076 + C29623 * C558 +
                       C30074 * C1226 + C30077 + C30077 + C44914 * C1738) *
                          C44836 * C15151 +
                      (C30100 + C30101) * C44836 * C44903) *
                         C44803 * C1806 -
                     ((C30734 + C30735) * C44836 * C44903 +
                      (C30074 * C2654 + C30726 + C30726 + C44914 * C3096 +
                       C30073 * C642 + C30727 + C30727 + C29623 * C1154) *
                          C44836 * C15151) *
                         C44803 * C44908) *
                        C1808 +
                    (((C30735 + C30734) * C44836 * C15151 +
                      (C30073 * C640 + C30728 + C30728 + C29623 * C1152 +
                       C30074 * C2656 + C30729 + C30729 + C44914 * C3098) *
                          C44836 * C44903) *
                         C44803 * C44908 -
                     ((C30102 + C30103) * C44836 * C44903 +
                      (C30101 + C30100) * C44836 * C15151) *
                         C44803 * C1806) *
                        C44906)) /
                  (p * q * std::sqrt(p + q));
    d2eexx[58] += (2 * std::pow(Pi, 2.5) *
                   (((C15155 * C93 + C15160 + C15160 + C15151 * C103 +
                      C15157 * C94 + C15161 + C15161 + C44903 * C104) *
                         C29623 +
                     (C30820 + C30821) * C44914) *
                        C44836 * C44803 * C2248 -
                    ((C18154 + C18155) * C44914 + (C15739 + C15738) * C29623) *
                        C44836 * C44803 * C2249 +
                    ((C17651 + C17650) * C29623 +
                     (C15155 * C7523 + C18148 + C18148 + C15151 * C7527 +
                      C15157 * C7524 + C18149 + C18149 + C44903 * C7528) *
                         C44914) *
                        C44836 * C44803 * C2250) *
                   C44752) /
                  (p * q * std::sqrt(p + q));
    d2eexy[58] += (2 * std::pow(Pi, 2.5) *
                   ((((C155 * C93 + C44836 * C156) * C15156 +
                      (C155 * C98 + C44836 * C161) * C15151 + C179 * C15158 +
                      C180 * C44903) *
                         C29623 +
                     (C30890 + C30891 + C30892 + C30893) * C44914) *
                        C44803 * C2248 -
                    ((C10472 * C44903 + C10473 * C15158 + C12901 * C15151 +
                      C12900 * C15156) *
                         C44914 +
                     (C727 * C44903 + C728 * C15158 +
                      (C155 * C646 + C44836 * C714) * C15151 +
                      (C155 * C642 + C44836 * C710) * C15156) *
                         C29623) *
                        C44803 * C2249 +
                    (((C155 * C2252 + C44836 * C2302) * C15156 +
                      (C155 * C2255 + C44836 * C2305) * C15151 +
                      (C155 * C2253 + C44836 * C2303) * C15158 +
                      (C155 * C2256 + C44836 * C2306) * C44903) *
                         C29623 +
                     ((C155 * C7523 + C44836 * C7607) * C15156 +
                      (C155 * C7525 + C44836 * C7609) * C15151 +
                      (C155 * C7524 + C44836 * C7608) * C15158 +
                      (C155 * C7526 + C44836 * C7610) * C44903) *
                         C44914) *
                        C44803 * C2250) *
                   C44752) /
                  (p * q * std::sqrt(p + q));
    d2eexz[58] +=
        (2 * std::pow(Pi, 2.5) *
         (((C29727 * C93 + C29623 * C223 + C29728 * C1226 + C44914 * C1364) *
               C15156 +
           (C29727 * C98 + C29623 * C228 + C29728 * C1230 + C44914 * C1368) *
               C15151 +
           (C29746 + C29747) * C15158 + (C29748 + C29749) * C44903) *
              C44836 * C44803 * C2248 -
          ((C30310 + C30311) * C44903 + (C30312 + C30313) * C15158 +
           (C29728 * C2657 + C44914 * C2775 + C29727 * C646 + C29623 * C784) *
               C15151 +
           (C29728 * C2654 + C44914 * C2772 + C29727 * C642 + C29623 * C780) *
               C15156) *
              C44836 * C44803 * C2249 +
          ((C29727 * C2252 + C29623 * C2346 + C29728 * C7523 + C44914 * C7677) *
               C15156 +
           (C29727 * C2255 + C29623 * C2349 + C29728 * C7525 + C44914 * C7679) *
               C15151 +
           (C29727 * C2253 + C29623 * C2347 + C29728 * C7524 + C44914 * C7678) *
               C15158 +
           (C29727 * C2256 + C29623 * C2350 + C29728 * C7526 + C44914 * C7680) *
               C44903) *
              C44836 * C44803 * C2250) *
         C44752) /
        (p * q * std::sqrt(p + q));
    d2eeyx[58] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C15156 * C93 + C15151 * C98 + C15158 * C94 + C44903 * C99) * C155 +
            (C15156 * C156 + C15151 * C289 + C15158 * C157 + C44903 * C290) *
                C44836) *
               C29623 +
           ((C31058 + C31059) * C155 + (C31060 + C31061) * C44836) * C44914) *
              C44803 * C2248 -
          (((C18366 + C18367) * C44836 + (C18368 + C18369) * C155) * C44914 +
           ((C15979 + C15978) * C44836 + (C15977 + C15976) * C155) * C29623) *
              C44803 * C2249 +
          (((C17817 + C17816) * C155 + (C17815 + C17814) * C44836) * C29623 +
           ((C15156 * C7523 + C15151 * C7525 + C15158 * C7524 +
             C44903 * C7526) *
                C155 +
            (C15156 * C7607 + C15151 * C7757 + C15158 * C7608 +
             C44903 * C7758) *
                C44836) *
               C44914) *
              C44803 * C2250) *
         C44752) /
        (p * q * std::sqrt(p + q));
    d2eeyy[58] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C332 * C93 + C339 + C339 + C44836 * C333) * C15151 +
            C356 * C44903) *
               C29623 +
           (C31132 + C31133) * C44914) *
              C44803 * C2248 -
          ((C10688 * C44903 + C13109 * C15151) * C44914 +
           (C920 * C44903 +
            (C332 * C642 + C913 + C913 + C44836 * C904) * C15151) *
               C29623) *
              C44803 * C2249 +
          (((C332 * C2252 + C2435 + C2435 + C44836 * C2431) * C15151 +
            (C332 * C2253 + C2436 + C2436 + C44836 * C2432) * C44903) *
               C29623 +
           ((C332 * C7523 + C12556 + C12556 + C44836 * C7837) * C15151 +
            (C332 * C7524 + C12557 + C12557 + C44836 * C7838) * C44903) *
               C44914) *
              C44803 * C2250) *
         C44752) /
        (p * q * std::sqrt(p + q));
    d2eeyz[58] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C29727 * C93 + C29623 * C223 + C29728 * C1226 + C44914 * C1364) *
                C155 +
            (C29727 * C156 + C29623 * C396 + C29728 * C1294 + C44914 * C1556) *
                C44836) *
               C15151 +
           ((C29746 + C29747) * C155 + (C29912 + C29913) * C44836) * C44903) *
              C44803 * C2248 -
          (((C30516 + C30517) * C44836 + (C30312 + C30313) * C155) * C44903 +
           ((C29728 * C2716 + C44914 * C2937 + C29727 * C710 + C29623 * C972) *
                C44836 +
            (C29728 * C2654 + C44914 * C2772 + C29727 * C642 + C29623 * C780) *
                C155) *
               C15151) *
              C44803 * C2249 +
          (((C29727 * C2252 + C29623 * C2346 + C29728 * C7523 +
             C44914 * C7677) *
                C155 +
            (C29727 * C2302 + C29623 * C2475 + C29728 * C7607 +
             C44914 * C7909) *
                C44836) *
               C15151 +
           ((C29727 * C2253 + C29623 * C2347 + C29728 * C7524 +
             C44914 * C7678) *
                C155 +
            (C29727 * C2303 + C29623 * C2476 + C29728 * C7608 +
             C44914 * C7910) *
                C44836) *
               C44903) *
              C44803 * C2250) *
         C44752) /
        (p * q * std::sqrt(p + q));
    d2eezx[58] +=
        (2 * std::pow(Pi, 2.5) *
         (((C15156 * C93 + C15151 * C98 + C15158 * C94 + C44903 * C99) *
               C29727 +
           (C15156 * C223 + C15151 * C455 + C15158 * C224 + C44903 * C456) *
               C29623 +
           (C31058 + C31059) * C29728 + (C31282 + C31283) * C44914) *
              C44836 * C44803 * C2248 -
          ((C18576 + C18577) * C44914 + (C18368 + C18369) * C29728 +
           (C16211 + C16210) * C29623 + (C15977 + C15976) * C29727) *
              C44836 * C44803 * C2249 +
          ((C17817 + C17816) * C29727 + (C17977 + C17976) * C29623 +
           (C15156 * C7523 + C15151 * C7525 + C15158 * C7524 + C44903 * C7526) *
               C29728 +
           (C15156 * C7677 + C15151 * C7980 + C15158 * C7678 + C44903 * C7981) *
               C44914) *
              C44836 * C44803 * C2250) *
         C44752) /
        (p * q * std::sqrt(p + q));
    d2eezy[58] += (2 * std::pow(Pi, 2.5) *
                   ((((C155 * C93 + C44836 * C156) * C29727 +
                      (C155 * C223 + C44836 * C498) * C29623 + C11150 * C29728 +
                      C11627 * C44914) *
                         C15151 +
                     (C30016 + C30017 + C30018 + C30019) * C44903) *
                        C44803 * C2248 -
                    ((C30650 + C30651 + C30652 + C30653) * C44903 +
                     (C13311 * C44914 + C12900 * C29728 +
                      (C155 * C780 + C44836 * C1090) * C29623 +
                      (C155 * C642 + C44836 * C710) * C29727) *
                         C15151) *
                        C44803 * C2249 +
                    (((C155 * C2252 + C44836 * C2302) * C29727 +
                      (C155 * C2346 + C44836 * C2557) * C29623 +
                      (C155 * C7523 + C44836 * C7607) * C29728 +
                      (C155 * C7677 + C44836 * C8054) * C44914) *
                         C15151 +
                     ((C155 * C2253 + C44836 * C2303) * C29727 +
                      (C155 * C2347 + C44836 * C2558) * C29623 +
                      (C155 * C7524 + C44836 * C7608) * C29728 +
                      (C155 * C7678 + C44836 * C8055) * C44914) *
                         C44903) *
                        C44803 * C2250) *
                   C44752) /
                  (p * q * std::sqrt(p + q));
    d2eezz[58] += (2 * std::pow(Pi, 2.5) *
                   (((C30073 * C93 + C30076 + C30076 + C29623 * C558 +
                      C30074 * C1226 + C30077 + C30077 + C44914 * C1738) *
                         C44836 * C15151 +
                     (C30100 + C30101) * C44836 * C44903) *
                        C44803 * C2248 -
                    ((C30734 + C30735) * C44836 * C44903 +
                     (C30074 * C2654 + C30726 + C30726 + C44914 * C3096 +
                      C30073 * C642 + C30727 + C30727 + C29623 * C1154) *
                         C44836 * C15151) *
                        C44803 * C2249 +
                    ((C30073 * C2252 + C32482 + C32482 + C29623 * C2598 +
                      C30074 * C7523 + C32483 + C32483 + C44914 * C8122) *
                         C44836 * C15151 +
                     (C30073 * C2253 + C32484 + C32484 + C29623 * C2599 +
                      C30074 * C7524 + C32485 + C32485 + C44914 * C8123) *
                         C44836 * C44903) *
                        C44803 * C2250) *
                   C44752) /
                  (p * q * std::sqrt(p + q));
    d2eexx[59] += (2 * std::pow(Pi, 2.5) *
                   ((((C15155 * C93 + C15160 + C15160 + C15151 * C103 +
                       C15157 * C94 + C15161 + C15161 + C44903 * C104) *
                          C29623 +
                      (C30820 + C30821) * C44914) *
                         C44836 * C1222 -
                     ((C15157 * C4046 + C19949 + C19949 + C44903 * C4052 +
                       C15155 * C4045 + C19948 + C19948 + C15151 * C4051) *
                          C44914 +
                      (C30821 + C30820) * C29623) *
                         C44836 * C44910) *
                        C1806 +
                    (((C18155 + C18154) * C29623 +
                      (C15155 * C9369 + C19950 + C19950 + C15151 * C9373 +
                       C15157 * C9370 + C19951 + C19951 + C44903 * C9374) *
                          C44914) *
                         C44836 * C44910 -
                     ((C18154 + C18155) * C44914 + (C15739 + C15738) * C29623) *
                         C44836 * C1222) *
                        C44908) *
                   C44752) /
                  (p * q * std::sqrt(p + q));
    d2eexy[59] += (2 * std::pow(Pi, 2.5) *
                   (((((C155 * C93 + C44836 * C156) * C15156 +
                       (C155 * C98 + C44836 * C161) * C15151 + C179 * C15158 +
                       C180 * C44903) *
                          C29623 +
                      (C30890 + C30891 + C30892 + C30893) * C44914) *
                         C1222 -
                     ((C11152 * C44903 + C11153 * C15158 + C14698 * C15151 +
                       C14699 * C15156) *
                          C44914 +
                      (C30893 + C30892 + C30891 + C30890) * C29623) *
                         C44910) *
                        C1806 +
                    (((C32618 + C32619 + C32620 + C32621) * C29623 +
                      ((C155 * C9369 + C44836 * C9429) * C15156 +
                       (C155 * C9371 + C44836 * C9431) * C15151 +
                       (C155 * C9370 + C44836 * C9430) * C15158 +
                       (C155 * C9372 + C44836 * C9432) * C44903) *
                          C44914) *
                         C44910 -
                     ((C32621 + C32620 + C32619 + C32618) * C44914 +
                      (C727 * C44903 + C728 * C15158 +
                       (C155 * C646 + C44836 * C714) * C15151 +
                       (C155 * C642 + C44836 * C710) * C15156) *
                          C29623) *
                         C1222) *
                        C44908) *
                   C44752) /
                  (p * q * std::sqrt(p + q));
    d2eexz[59] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C29727 * C93 + C29623 * C223 + C29728 * C1226 + C44914 * C1364) *
                C15156 +
            (C29727 * C98 + C29623 * C228 + C29728 * C1230 + C44914 * C1368) *
                C15151 +
            (C29746 + C29747) * C15158 + (C29748 + C29749) * C44903) *
               C44836 * C1222 -
           ((C30972 + C30973) * C44903 + (C30974 + C30975) * C15158 +
            (C29728 * C4048 + C44914 * C4142 + C29727 * C1230 +
             C29623 * C1368) *
                C15151 +
            (C29728 * C4045 + C44914 * C4139 + C29727 * C1226 +
             C29623 * C1364) *
                C15156) *
               C44836 * C44910) *
              C1806 +
          (((C29727 * C2654 + C29623 * C2772 + C29728 * C9369 +
             C44914 * C9483) *
                C15156 +
            (C29727 * C2657 + C29623 * C2775 + C29728 * C9371 +
             C44914 * C9485) *
                C15151 +
            (C29727 * C2655 + C29623 * C2773 + C29728 * C9370 +
             C44914 * C9484) *
                C15158 +
            (C29727 * C2658 + C29623 * C2776 + C29728 * C9372 +
             C44914 * C9486) *
                C44903) *
               C44836 * C44910 -
           ((C30310 + C30311) * C44903 + (C30312 + C30313) * C15158 +
            (C29728 * C2657 + C44914 * C2775 + C29727 * C646 + C29623 * C784) *
                C15151 +
            (C29728 * C2654 + C44914 * C2772 + C29727 * C642 + C29623 * C780) *
                C15156) *
               C44836 * C1222) *
              C44908) *
         C44752) /
        (p * q * std::sqrt(p + q));
    d2eeyx[59] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C15156 * C93 + C15151 * C98 + C15158 * C94 + C44903 * C99) *
                 C155 +
             (C15156 * C156 + C15151 * C289 + C15158 * C157 + C44903 * C290) *
                 C44836) *
                C29623 +
            ((C31058 + C31059) * C155 + (C31060 + C31061) * C44836) * C44914) *
               C1222 -
           (((C15158 * C4096 + C44903 * C4184 + C15156 * C4095 +
              C15151 * C4183) *
                 C44836 +
             (C15158 * C4046 + C44903 * C4049 + C15156 * C4045 +
              C15151 * C4048) *
                 C155) *
                C44914 +
            ((C31061 + C31060) * C44836 + (C31059 + C31058) * C155) * C29623) *
               C44910) *
              C1806 +
          ((((C18369 + C18368) * C155 + (C18367 + C18366) * C44836) * C29623 +
            ((C15156 * C9369 + C15151 * C9371 + C15158 * C9370 +
              C44903 * C9372) *
                 C155 +
             (C15156 * C9429 + C15151 * C9537 + C15158 * C9430 +
              C44903 * C9538) *
                 C44836) *
                C44914) *
               C44910 -
           (((C18366 + C18367) * C44836 + (C18368 + C18369) * C155) * C44914 +
            ((C15979 + C15978) * C44836 + (C15977 + C15976) * C155) * C29623) *
               C1222) *
              C44908) *
         C44752) /
        (p * q * std::sqrt(p + q));
    d2eeyy[59] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C332 * C93 + C339 + C339 + C44836 * C333) * C15151 +
             C356 * C44903) *
                C29623 +
            (C31132 + C31133) * C44914) *
               C1222 -
           ((C11402 * C44903 + C14879 * C15151) * C44914 +
            (C31133 + C31132) * C29623) *
               C44910) *
              C1806 +
          (((C32820 + C32821) * C29623 +
            ((C332 * C9369 + C13105 + C13105 + C44836 * C9589) * C15151 +
             (C332 * C9370 + C13106 + C13106 + C44836 * C9590) * C44903) *
                C44914) *
               C44910 -
           ((C32821 + C32820) * C44914 +
            (C920 * C44903 +
             (C332 * C642 + C913 + C913 + C44836 * C904) * C15151) *
                C29623) *
               C1222) *
              C44908) *
         C44752) /
        (p * q * std::sqrt(p + q));
    d2eeyz[59] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C29727 * C93 + C29623 * C223 + C29728 * C1226 + C44914 * C1364) *
                 C155 +
             (C29727 * C156 + C29623 * C396 + C29728 * C1294 + C44914 * C1556) *
                 C44836) *
                C15151 +
            ((C29746 + C29747) * C155 + (C29912 + C29913) * C44836) * C44903) *
               C1222 -
           (((C31206 + C31207) * C44836 + (C30974 + C30975) * C155) * C44903 +
            ((C29728 * C4095 + C44914 * C4268 + C29727 * C1294 +
              C29623 * C1556) *
                 C44836 +
             (C29728 * C4045 + C44914 * C4139 + C29727 * C1226 +
              C29623 * C1364) *
                 C155) *
                C15151) *
               C44910) *
              C1806 +
          ((((C29727 * C2654 + C29623 * C2772 + C29728 * C9369 +
              C44914 * C9483) *
                 C155 +
             (C29727 * C2716 + C29623 * C2937 + C29728 * C9429 +
              C44914 * C9645) *
                 C44836) *
                C15151 +
            ((C29727 * C2655 + C29623 * C2773 + C29728 * C9370 +
              C44914 * C9484) *
                 C155 +
             (C29727 * C2717 + C29623 * C2938 + C29728 * C9430 +
              C44914 * C9646) *
                 C44836) *
                C44903) *
               C44910 -
           (((C30516 + C30517) * C44836 + (C30312 + C30313) * C155) * C44903 +
            ((C29728 * C2716 + C44914 * C2937 + C29727 * C710 + C29623 * C972) *
                 C44836 +
             (C29728 * C2654 + C44914 * C2772 + C29727 * C642 + C29623 * C780) *
                 C155) *
                C15151) *
               C1222) *
              C44908) *
         C44752) /
        (p * q * std::sqrt(p + q));
    d2eezx[59] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C15156 * C93 + C15151 * C98 + C15158 * C94 + C44903 * C99) *
                C29727 +
            (C15156 * C223 + C15151 * C455 + C15158 * C224 + C44903 * C456) *
                C29623 +
            (C31058 + C31059) * C29728 + (C31282 + C31283) * C44914) *
               C44836 * C1222 -
           ((C15158 * C4140 + C44903 * C4310 + C15156 * C4139 +
             C15151 * C4309) *
                C44914 +
            (C15158 * C4046 + C44903 * C4049 + C15156 * C4045 +
             C15151 * C4048) *
                C29728 +
            (C31283 + C31282) * C29623 + (C31059 + C31058) * C29727) *
               C44836 * C44910) *
              C1806 +
          (((C18369 + C18368) * C29727 + (C18577 + C18576) * C29623 +
            (C15156 * C9369 + C15151 * C9371 + C15158 * C9370 +
             C44903 * C9372) *
                C29728 +
            (C15156 * C9483 + C15151 * C9697 + C15158 * C9484 +
             C44903 * C9698) *
                C44914) *
               C44836 * C44910 -
           ((C18576 + C18577) * C44914 + (C18368 + C18369) * C29728 +
            (C16211 + C16210) * C29623 + (C15977 + C15976) * C29727) *
               C44836 * C1222) *
              C44908) *
         C44752) /
        (p * q * std::sqrt(p + q));
    d2eezy[59] += (2 * std::pow(Pi, 2.5) *
                   (((((C155 * C93 + C44836 * C156) * C29727 +
                       (C155 * C223 + C44836 * C498) * C29623 +
                       C11150 * C29728 + C11627 * C44914) *
                          C15151 +
                      (C30016 + C30017 + C30018 + C30019) * C44903) *
                         C1222 -
                     ((C31352 + C31353 + C31354 + C31355) * C44903 +
                      (C15045 * C44914 + C14699 * C29728 + C11627 * C29623 +
                       C11150 * C29727) *
                          C15151) *
                         C44910) *
                        C1806 +
                    (((C12900 * C29727 + C13311 * C29623 +
                       (C155 * C9369 + C44836 * C9429) * C29728 +
                       (C155 * C9483 + C44836 * C9749) * C44914) *
                          C15151 +
                      (C10473 * C29727 + C10898 * C29623 +
                       (C155 * C9370 + C44836 * C9430) * C29728 +
                       (C155 * C9484 + C44836 * C9750) * C44914) *
                          C44903) *
                         C44910 -
                     ((C30650 + C30651 + C30652 + C30653) * C44903 +
                      (C13311 * C44914 + C12900 * C29728 +
                       (C155 * C780 + C44836 * C1090) * C29623 +
                       (C155 * C642 + C44836 * C710) * C29727) *
                          C15151) *
                         C1222) *
                        C44908) *
                   C44752) /
                  (p * q * std::sqrt(p + q));
    d2eezz[59] += (2 * std::pow(Pi, 2.5) *
                   ((((C30073 * C93 + C30076 + C30076 + C29623 * C558 +
                       C30074 * C1226 + C30077 + C30077 + C44914 * C1738) *
                          C44836 * C15151 +
                      (C30100 + C30101) * C44836 * C44903) *
                         C1222 -
                     ((C31436 + C31437) * C44836 * C44903 +
                      (C30074 * C4045 + C31428 + C31428 + C44914 * C4391 +
                       C30073 * C1226 + C31429 + C31429 + C29623 * C1738) *
                          C44836 * C15151) *
                         C44910) *
                        C1806 +
                    (((C30073 * C2654 + C33086 + C33086 + C29623 * C3096 +
                       C30074 * C9369 + C33087 + C33087 + C44914 * C9801) *
                          C44836 * C15151 +
                      (C30073 * C2655 + C33088 + C33088 + C29623 * C3097 +
                       C30074 * C9370 + C33089 + C33089 + C44914 * C9802) *
                          C44836 * C44903) *
                         C44910 -
                     ((C30734 + C30735) * C44836 * C44903 +
                      (C30074 * C2654 + C30726 + C30726 + C44914 * C3096 +
                       C30073 * C642 + C30727 + C30727 + C29623 * C1154) *
                          C44836 * C15151) *
                         C1222) *
                        C44908) *
                   C44752) /
                  (p * q * std::sqrt(p + q));
    d2eexx[60] += (2 * std::pow(Pi, 2.5) *
                   ((((C15155 * C93 + C15160 + C15160 + C15151 * C103 +
                       C15157 * C94 + C15161 + C15161 + C44903 * C104) *
                          C29623 +
                      (C30820 + C30821) * C44914) *
                         C44836 * C3152 -
                     ((C15157 * C4046 + C19949 + C19949 + C44903 * C4052 +
                       C15155 * C4045 + C19948 + C19948 + C15151 * C4051) *
                          C44914 +
                      (C30821 + C30820) * C29623) *
                         C44836 * C44910) *
                        C44786 * C1808 +
                    (((C30822 + C30823) * C29623 +
                      (C15155 * C4046 + C30810 + C30810 + C15151 * C4052 +
                       C15157 * C4047 + C30811 + C30811 + C44903 * C4053) *
                          C44914) *
                         C44836 * C44910 -
                     ((C30823 + C30822) * C44914 +
                      (C15157 * C95 + C15166 + C15166 + C44903 * C105 +
                       C15155 * C94 + C15167 + C15167 + C15151 * C104) *
                          C29623) *
                         C44836 * C3152) *
                        C44786 * C44906)) /
                  (p * q * std::sqrt(p + q));
    d2eexy[60] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C155 * C93 + C44836 * C156) * C15156 +
             (C155 * C98 + C44836 * C161) * C15151 + C179 * C15158 +
             C180 * C44903) *
                C29623 +
            (C30890 + C30891 + C30892 + C30893) * C44914) *
               C3152 -
           ((C11152 * C44903 + C11153 * C15158 + C14698 * C15151 +
             C14699 * C15156) *
                C44914 +
            (C30893 + C30892 + C30891 + C30890) * C29623) *
               C44910) *
              C44786 * C1808 +
          (((C30894 + C30895 + C30896 + C30897) * C29623 +
            (C11153 * C15156 + C11152 * C15151 +
             (C155 * C4047 + C44836 * C4097) * C15158 +
             (C155 * C4050 + C44836 * C4100) * C44903) *
                C44914) *
               C44910 -
           ((C30897 + C30896 + C30895 + C30894) * C44914 +
            (C182 * C44903 + C181 * C15158 + C180 * C15151 + C179 * C15156) *
                C29623) *
               C3152) *
              C44786 * C44906)) /
        (p * q * std::sqrt(p + q));
    d2eexz[60] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C29727 * C93 + C29623 * C223 + C29728 * C1226 + C44914 * C1364) *
                C15156 +
            (C29727 * C98 + C29623 * C228 + C29728 * C1230 + C44914 * C1368) *
                C15151 +
            (C29746 + C29747) * C15158 + (C29748 + C29749) * C44903) *
               C44836 * C3152 -
           ((C30972 + C30973) * C44903 + (C30974 + C30975) * C15158 +
            (C29728 * C4048 + C44914 * C4142 + C29727 * C1230 +
             C29623 * C1368) *
                C15151 +
            (C29728 * C4045 + C44914 * C4139 + C29727 * C1226 +
             C29623 * C1364) *
                C15156) *
               C44836 * C44910) *
              C44786 * C1808 +
          (((C30975 + C30974) * C15156 + (C30973 + C30972) * C15151 +
            (C29727 * C1224 + C29623 * C1362 + C29728 * C4047 +
             C44914 * C4141) *
                C15158 +
            (C29727 * C1228 + C29623 * C1366 + C29728 * C4050 +
             C44914 * C4144) *
                C44903) *
               C44836 * C44910 -
           ((C29750 + C29751) * C44903 + (C29752 + C29753) * C15158 +
            (C29749 + C29748) * C15151 + (C29747 + C29746) * C15156) *
               C44836 * C3152) *
              C44786 * C44906)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[60] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C15156 * C93 + C15151 * C98 + C15158 * C94 + C44903 * C99) *
                 C155 +
             (C15156 * C156 + C15151 * C289 + C15158 * C157 + C44903 * C290) *
                 C44836) *
                C29623 +
            ((C31058 + C31059) * C155 + (C31060 + C31061) * C44836) * C44914) *
               C3152 -
           (((C15158 * C4096 + C44903 * C4184 + C15156 * C4095 +
              C15151 * C4183) *
                 C44836 +
             (C15158 * C4046 + C44903 * C4049 + C15156 * C4045 +
              C15151 * C4048) *
                 C155) *
                C44914 +
            ((C31061 + C31060) * C44836 + (C31059 + C31058) * C155) * C29623) *
               C44910) *
              C44786 * C1808 +
          ((((C31062 + C31063) * C155 + (C31064 + C31065) * C44836) * C29623 +
            ((C15156 * C4046 + C15151 * C4049 + C15158 * C4047 +
              C44903 * C4050) *
                 C155 +
             (C15156 * C4096 + C15151 * C4184 + C15158 * C4097 +
              C44903 * C4185) *
                 C44836) *
                C44914) *
               C44910 -
           (((C31065 + C31064) * C44836 + (C31063 + C31062) * C155) * C44914 +
            ((C15158 * C158 + C44903 * C291 + C15156 * C157 + C15151 * C290) *
                 C44836 +
             (C15158 * C95 + C44903 * C100 + C15156 * C94 + C15151 * C99) *
                 C155) *
                C29623) *
               C3152) *
              C44786 * C44906)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[60] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C332 * C93 + C339 + C339 + C44836 * C333) * C15151 +
             C356 * C44903) *
                C29623 +
            (C31132 + C31133) * C44914) *
               C3152 -
           ((C11402 * C44903 + C14879 * C15151) * C44914 +
            (C31133 + C31132) * C29623) *
               C44910) *
              C44786 * C1808 +
          (((C31134 + C31135) * C29623 +
            (C11402 * C15151 +
             (C332 * C4047 + C4230 + C4230 + C44836 * C4226) * C44903) *
                C44914) *
               C44910 -
           ((C31135 + C31134) * C44914 +
            (C357 * C44903 + C356 * C15151) * C29623) *
               C3152) *
              C44786 * C44906)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[60] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C29727 * C93 + C29623 * C223 + C29728 * C1226 + C44914 * C1364) *
                 C155 +
             (C29727 * C156 + C29623 * C396 + C29728 * C1294 + C44914 * C1556) *
                 C44836) *
                C15151 +
            ((C29746 + C29747) * C155 + (C29912 + C29913) * C44836) * C44903) *
               C3152 -
           (((C31206 + C31207) * C44836 + (C30974 + C30975) * C155) * C44903 +
            ((C29728 * C4095 + C44914 * C4268 + C29727 * C1294 +
              C29623 * C1556) *
                 C44836 +
             (C29728 * C4045 + C44914 * C4139 + C29727 * C1226 +
              C29623 * C1364) *
                 C155) *
                C15151) *
               C44910) *
              C44786 * C1808 +
          ((((C30975 + C30974) * C155 + (C31207 + C31206) * C44836) * C15151 +
            ((C29727 * C1224 + C29623 * C1362 + C29728 * C4047 +
              C44914 * C4141) *
                 C155 +
             (C29727 * C1292 + C29623 * C1554 + C29728 * C4097 +
              C44914 * C4270) *
                 C44836) *
                C44903) *
               C44910 -
           (((C29914 + C29915) * C44836 + (C29752 + C29753) * C155) * C44903 +
            ((C29913 + C29912) * C44836 + (C29747 + C29746) * C155) * C15151) *
               C3152) *
              C44786 * C44906)) /
        (p * q * std::sqrt(p + q));
    d2eezx[60] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C15156 * C93 + C15151 * C98 + C15158 * C94 + C44903 * C99) *
                C29727 +
            (C15156 * C223 + C15151 * C455 + C15158 * C224 + C44903 * C456) *
                C29623 +
            (C31058 + C31059) * C29728 + (C31282 + C31283) * C44914) *
               C44836 * C3152 -
           ((C15158 * C4140 + C44903 * C4310 + C15156 * C4139 +
             C15151 * C4309) *
                C44914 +
            (C15158 * C4046 + C44903 * C4049 + C15156 * C4045 +
             C15151 * C4048) *
                C29728 +
            (C31283 + C31282) * C29623 + (C31059 + C31058) * C29727) *
               C44836 * C44910) *
              C44786 * C1808 +
          (((C31062 + C31063) * C29727 + (C31284 + C31285) * C29623 +
            (C15156 * C4046 + C15151 * C4049 + C15158 * C4047 +
             C44903 * C4050) *
                C29728 +
            (C15156 * C4140 + C15151 * C4310 + C15158 * C4141 +
             C44903 * C4311) *
                C44914) *
               C44836 * C44910 -
           ((C31285 + C31284) * C44914 + (C31063 + C31062) * C29728 +
            (C15158 * C225 + C44903 * C457 + C15156 * C224 + C15151 * C456) *
                C29623 +
            (C15158 * C95 + C44903 * C100 + C15156 * C94 + C15151 * C99) *
                C29727) *
               C44836 * C3152) *
              C44786 * C44906)) /
        (p * q * std::sqrt(p + q));
    d2eezy[60] += (2 * std::pow(Pi, 2.5) *
                   (((((C155 * C93 + C44836 * C156) * C29727 +
                       (C155 * C223 + C44836 * C498) * C29623 +
                       C11150 * C29728 + C11627 * C44914) *
                          C15151 +
                      (C30016 + C30017 + C30018 + C30019) * C44903) *
                         C3152 -
                     ((C31352 + C31353 + C31354 + C31355) * C44903 +
                      (C15045 * C44914 + C14699 * C29728 + C11627 * C29623 +
                       C11150 * C29727) *
                          C15151) *
                         C44910) *
                        C44786 * C1808 +
                    (((C31355 + C31354 + C31353 + C31352) * C15151 +
                      (C1310 * C29727 + C1683 * C29623 +
                       (C155 * C4047 + C44836 * C4097) * C29728 +
                       (C155 * C4141 + C44836 * C4352) * C44914) *
                          C44903) *
                         C44910 -
                     ((C30020 + C30021 + C30022 + C30023) * C44903 +
                      (C30019 + C30018 + C30017 + C30016) * C15151) *
                         C3152) *
                        C44786 * C44906)) /
                  (p * q * std::sqrt(p + q));
    d2eezz[60] += (2 * std::pow(Pi, 2.5) *
                   ((((C30073 * C93 + C30076 + C30076 + C29623 * C558 +
                       C30074 * C1226 + C30077 + C30077 + C44914 * C1738) *
                          C44836 * C15151 +
                      (C30100 + C30101) * C44836 * C44903) *
                         C3152 -
                     ((C31436 + C31437) * C44836 * C44903 +
                      (C30074 * C4045 + C31428 + C31428 + C44914 * C4391 +
                       C30073 * C1226 + C31429 + C31429 + C29623 * C1738) *
                          C44836 * C15151) *
                         C44910) *
                        C44786 * C1808 +
                    (((C31437 + C31436) * C44836 * C15151 +
                      (C30073 * C1224 + C31430 + C31430 + C29623 * C1736 +
                       C30074 * C4047 + C31431 + C31431 + C44914 * C4393) *
                          C44836 * C44903) *
                         C44910 -
                     ((C30102 + C30103) * C44836 * C44903 +
                      (C30101 + C30100) * C44836 * C15151) *
                         C3152) *
                        C44786 * C44906)) /
                  (p * q * std::sqrt(p + q));
    d2eexx[61] += (2 * std::pow(Pi, 2.5) *
                   ((((C15155 * C93 + C15160 + C15160 + C15151 * C103 +
                       C15157 * C94 + C15161 + C15161 + C44903 * C104) *
                          C29623 +
                      (C30820 + C30821) * C44914) *
                         C44836 * C3152 -
                     ((C15157 * C4046 + C19949 + C19949 + C44903 * C4052 +
                       C15155 * C4045 + C19948 + C19948 + C15151 * C4051) *
                          C44914 +
                      (C30821 + C30820) * C29623) *
                         C44836 * C44910) *
                        C636 +
                    (((C18155 + C18154) * C29623 +
                      (C15155 * C9369 + C19950 + C19950 + C15151 * C9373 +
                       C15157 * C9370 + C19951 + C19951 + C44903 * C9374) *
                          C44914) *
                         C44836 * C44910 -
                     ((C18154 + C18155) * C44914 + (C15739 + C15738) * C29623) *
                         C44836 * C3152) *
                        C44908) *
                   C44752) /
                  (p * q * std::sqrt(p + q));
    d2eexy[61] += (2 * std::pow(Pi, 2.5) *
                   (((((C155 * C93 + C44836 * C156) * C15156 +
                       (C155 * C98 + C44836 * C161) * C15151 + C179 * C15158 +
                       C180 * C44903) *
                          C29623 +
                      (C30890 + C30891 + C30892 + C30893) * C44914) *
                         C3152 -
                     ((C11152 * C44903 + C11153 * C15158 + C14698 * C15151 +
                       C14699 * C15156) *
                          C44914 +
                      (C30893 + C30892 + C30891 + C30890) * C29623) *
                         C44910) *
                        C636 +
                    (((C32618 + C32619 + C32620 + C32621) * C29623 +
                      ((C155 * C9369 + C44836 * C9429) * C15156 +
                       (C155 * C9371 + C44836 * C9431) * C15151 +
                       (C155 * C9370 + C44836 * C9430) * C15158 +
                       (C155 * C9372 + C44836 * C9432) * C44903) *
                          C44914) *
                         C44910 -
                     ((C32621 + C32620 + C32619 + C32618) * C44914 +
                      (C727 * C44903 + C728 * C15158 +
                       (C155 * C646 + C44836 * C714) * C15151 +
                       (C155 * C642 + C44836 * C710) * C15156) *
                          C29623) *
                         C3152) *
                        C44908) *
                   C44752) /
                  (p * q * std::sqrt(p + q));
    d2eexz[61] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C29727 * C93 + C29623 * C223 + C29728 * C1226 + C44914 * C1364) *
                C15156 +
            (C29727 * C98 + C29623 * C228 + C29728 * C1230 + C44914 * C1368) *
                C15151 +
            (C29746 + C29747) * C15158 + (C29748 + C29749) * C44903) *
               C44836 * C3152 -
           ((C30972 + C30973) * C44903 + (C30974 + C30975) * C15158 +
            (C29728 * C4048 + C44914 * C4142 + C29727 * C1230 +
             C29623 * C1368) *
                C15151 +
            (C29728 * C4045 + C44914 * C4139 + C29727 * C1226 +
             C29623 * C1364) *
                C15156) *
               C44836 * C44910) *
              C636 +
          (((C29727 * C2654 + C29623 * C2772 + C29728 * C9369 +
             C44914 * C9483) *
                C15156 +
            (C29727 * C2657 + C29623 * C2775 + C29728 * C9371 +
             C44914 * C9485) *
                C15151 +
            (C29727 * C2655 + C29623 * C2773 + C29728 * C9370 +
             C44914 * C9484) *
                C15158 +
            (C29727 * C2658 + C29623 * C2776 + C29728 * C9372 +
             C44914 * C9486) *
                C44903) *
               C44836 * C44910 -
           ((C30310 + C30311) * C44903 + (C30312 + C30313) * C15158 +
            (C29728 * C2657 + C44914 * C2775 + C29727 * C646 + C29623 * C784) *
                C15151 +
            (C29728 * C2654 + C44914 * C2772 + C29727 * C642 + C29623 * C780) *
                C15156) *
               C44836 * C3152) *
              C44908) *
         C44752) /
        (p * q * std::sqrt(p + q));
    d2eeyx[61] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C15156 * C93 + C15151 * C98 + C15158 * C94 + C44903 * C99) *
                 C155 +
             (C15156 * C156 + C15151 * C289 + C15158 * C157 + C44903 * C290) *
                 C44836) *
                C29623 +
            ((C31058 + C31059) * C155 + (C31060 + C31061) * C44836) * C44914) *
               C3152 -
           (((C15158 * C4096 + C44903 * C4184 + C15156 * C4095 +
              C15151 * C4183) *
                 C44836 +
             (C15158 * C4046 + C44903 * C4049 + C15156 * C4045 +
              C15151 * C4048) *
                 C155) *
                C44914 +
            ((C31061 + C31060) * C44836 + (C31059 + C31058) * C155) * C29623) *
               C44910) *
              C636 +
          ((((C18369 + C18368) * C155 + (C18367 + C18366) * C44836) * C29623 +
            ((C15156 * C9369 + C15151 * C9371 + C15158 * C9370 +
              C44903 * C9372) *
                 C155 +
             (C15156 * C9429 + C15151 * C9537 + C15158 * C9430 +
              C44903 * C9538) *
                 C44836) *
                C44914) *
               C44910 -
           (((C18366 + C18367) * C44836 + (C18368 + C18369) * C155) * C44914 +
            ((C15979 + C15978) * C44836 + (C15977 + C15976) * C155) * C29623) *
               C3152) *
              C44908) *
         C44752) /
        (p * q * std::sqrt(p + q));
    d2eeyy[61] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C332 * C93 + C339 + C339 + C44836 * C333) * C15151 +
             C356 * C44903) *
                C29623 +
            (C31132 + C31133) * C44914) *
               C3152 -
           ((C11402 * C44903 + C14879 * C15151) * C44914 +
            (C31133 + C31132) * C29623) *
               C44910) *
              C636 +
          (((C32820 + C32821) * C29623 +
            ((C332 * C9369 + C13105 + C13105 + C44836 * C9589) * C15151 +
             (C332 * C9370 + C13106 + C13106 + C44836 * C9590) * C44903) *
                C44914) *
               C44910 -
           ((C32821 + C32820) * C44914 +
            (C920 * C44903 +
             (C332 * C642 + C913 + C913 + C44836 * C904) * C15151) *
                C29623) *
               C3152) *
              C44908) *
         C44752) /
        (p * q * std::sqrt(p + q));
    d2eeyz[61] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C29727 * C93 + C29623 * C223 + C29728 * C1226 + C44914 * C1364) *
                 C155 +
             (C29727 * C156 + C29623 * C396 + C29728 * C1294 + C44914 * C1556) *
                 C44836) *
                C15151 +
            ((C29746 + C29747) * C155 + (C29912 + C29913) * C44836) * C44903) *
               C3152 -
           (((C31206 + C31207) * C44836 + (C30974 + C30975) * C155) * C44903 +
            ((C29728 * C4095 + C44914 * C4268 + C29727 * C1294 +
              C29623 * C1556) *
                 C44836 +
             (C29728 * C4045 + C44914 * C4139 + C29727 * C1226 +
              C29623 * C1364) *
                 C155) *
                C15151) *
               C44910) *
              C636 +
          ((((C29727 * C2654 + C29623 * C2772 + C29728 * C9369 +
              C44914 * C9483) *
                 C155 +
             (C29727 * C2716 + C29623 * C2937 + C29728 * C9429 +
              C44914 * C9645) *
                 C44836) *
                C15151 +
            ((C29727 * C2655 + C29623 * C2773 + C29728 * C9370 +
              C44914 * C9484) *
                 C155 +
             (C29727 * C2717 + C29623 * C2938 + C29728 * C9430 +
              C44914 * C9646) *
                 C44836) *
                C44903) *
               C44910 -
           (((C30516 + C30517) * C44836 + (C30312 + C30313) * C155) * C44903 +
            ((C29728 * C2716 + C44914 * C2937 + C29727 * C710 + C29623 * C972) *
                 C44836 +
             (C29728 * C2654 + C44914 * C2772 + C29727 * C642 + C29623 * C780) *
                 C155) *
                C15151) *
               C3152) *
              C44908) *
         C44752) /
        (p * q * std::sqrt(p + q));
    d2eezx[61] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C15156 * C93 + C15151 * C98 + C15158 * C94 + C44903 * C99) *
                C29727 +
            (C15156 * C223 + C15151 * C455 + C15158 * C224 + C44903 * C456) *
                C29623 +
            (C31058 + C31059) * C29728 + (C31282 + C31283) * C44914) *
               C44836 * C3152 -
           ((C15158 * C4140 + C44903 * C4310 + C15156 * C4139 +
             C15151 * C4309) *
                C44914 +
            (C15158 * C4046 + C44903 * C4049 + C15156 * C4045 +
             C15151 * C4048) *
                C29728 +
            (C31283 + C31282) * C29623 + (C31059 + C31058) * C29727) *
               C44836 * C44910) *
              C636 +
          (((C18369 + C18368) * C29727 + (C18577 + C18576) * C29623 +
            (C15156 * C9369 + C15151 * C9371 + C15158 * C9370 +
             C44903 * C9372) *
                C29728 +
            (C15156 * C9483 + C15151 * C9697 + C15158 * C9484 +
             C44903 * C9698) *
                C44914) *
               C44836 * C44910 -
           ((C18576 + C18577) * C44914 + (C18368 + C18369) * C29728 +
            (C16211 + C16210) * C29623 + (C15977 + C15976) * C29727) *
               C44836 * C3152) *
              C44908) *
         C44752) /
        (p * q * std::sqrt(p + q));
    d2eezy[61] += (2 * std::pow(Pi, 2.5) *
                   (((((C155 * C93 + C44836 * C156) * C29727 +
                       (C155 * C223 + C44836 * C498) * C29623 +
                       C11150 * C29728 + C11627 * C44914) *
                          C15151 +
                      (C30016 + C30017 + C30018 + C30019) * C44903) *
                         C3152 -
                     ((C31352 + C31353 + C31354 + C31355) * C44903 +
                      (C15045 * C44914 + C14699 * C29728 + C11627 * C29623 +
                       C11150 * C29727) *
                          C15151) *
                         C44910) *
                        C636 +
                    (((C12900 * C29727 + C13311 * C29623 +
                       (C155 * C9369 + C44836 * C9429) * C29728 +
                       (C155 * C9483 + C44836 * C9749) * C44914) *
                          C15151 +
                      (C10473 * C29727 + C10898 * C29623 +
                       (C155 * C9370 + C44836 * C9430) * C29728 +
                       (C155 * C9484 + C44836 * C9750) * C44914) *
                          C44903) *
                         C44910 -
                     ((C30650 + C30651 + C30652 + C30653) * C44903 +
                      (C13311 * C44914 + C12900 * C29728 +
                       (C155 * C780 + C44836 * C1090) * C29623 +
                       (C155 * C642 + C44836 * C710) * C29727) *
                          C15151) *
                         C3152) *
                        C44908) *
                   C44752) /
                  (p * q * std::sqrt(p + q));
    d2eezz[61] += (2 * std::pow(Pi, 2.5) *
                   ((((C30073 * C93 + C30076 + C30076 + C29623 * C558 +
                       C30074 * C1226 + C30077 + C30077 + C44914 * C1738) *
                          C44836 * C15151 +
                      (C30100 + C30101) * C44836 * C44903) *
                         C3152 -
                     ((C31436 + C31437) * C44836 * C44903 +
                      (C30074 * C4045 + C31428 + C31428 + C44914 * C4391 +
                       C30073 * C1226 + C31429 + C31429 + C29623 * C1738) *
                          C44836 * C15151) *
                         C44910) *
                        C636 +
                    (((C30073 * C2654 + C33086 + C33086 + C29623 * C3096 +
                       C30074 * C9369 + C33087 + C33087 + C44914 * C9801) *
                          C44836 * C15151 +
                      (C30073 * C2655 + C33088 + C33088 + C29623 * C3097 +
                       C30074 * C9370 + C33089 + C33089 + C44914 * C9802) *
                          C44836 * C44903) *
                         C44910 -
                     ((C30734 + C30735) * C44836 * C44903 +
                      (C30074 * C2654 + C30726 + C30726 + C44914 * C3096 +
                       C30073 * C642 + C30727 + C30727 + C29623 * C1154) *
                          C44836 * C15151) *
                         C3152) *
                        C44908) *
                   C44752) /
                  (p * q * std::sqrt(p + q));
    d2eexx[62] += (2 * std::pow(Pi, 2.5) *
                   (((C15155 * C93 + C15160 + C15160 + C15151 * C103 +
                      C15157 * C94 + C15161 + C15161 + C44903 * C104) *
                         C29623 +
                     (C30820 + C30821) * C44914) *
                        C44836 * C4042 -
                    ((C34338 + C34339) * C44914 + (C30821 + C30820) * C29623) *
                        C44836 * C4043 +
                    ((C34339 + C34338) * C29623 +
                     (C15155 * C14619 + C34332 + C34332 + C15151 * C14623 +
                      C15157 * C14620 + C34333 + C34333 + C44903 * C14624) *
                         C44914) *
                        C44836 * C4044) *
                   C44786 * C44752) /
                  (p * q * std::sqrt(p + q));
    d2eexy[62] += (2 * std::pow(Pi, 2.5) *
                   ((((C155 * C93 + C44836 * C156) * C15156 +
                      (C155 * C98 + C44836 * C161) * C15151 + C179 * C15158 +
                      C180 * C44903) *
                         C29623 +
                     (C30890 + C30891 + C30892 + C30893) * C44914) *
                        C4042 -
                    ((C34390 + C34391 + C34392 + C34393) * C44914 +
                     (C30893 + C30892 + C30891 + C30890) * C29623) *
                        C4043 +
                    ((C34393 + C34392 + C34391 + C34390) * C29623 +
                     ((C155 * C14619 + C44836 * C14687) * C15156 +
                      (C155 * C14621 + C44836 * C14689) * C15151 +
                      (C155 * C14620 + C44836 * C14688) * C15158 +
                      (C155 * C14622 + C44836 * C14690) * C44903) *
                         C44914) *
                        C4044) *
                   C44786 * C44752) /
                  (p * q * std::sqrt(p + q));
    d2eexz[62] +=
        (2 * std::pow(Pi, 2.5) *
         (((C29727 * C93 + C29623 * C223 + C29728 * C1226 + C44914 * C1364) *
               C15156 +
           (C29727 * C98 + C29623 * C228 + C29728 * C1230 + C44914 * C1368) *
               C15151 +
           (C29746 + C29747) * C15158 + (C29748 + C29749) * C44903) *
              C44836 * C4042 -
          ((C30972 + C30973) * C44903 + (C30974 + C30975) * C15158 +
           (C29728 * C4048 + C44914 * C4142 + C29727 * C1230 + C29623 * C1368) *
               C15151 +
           (C29728 * C4045 + C44914 * C4139 + C29727 * C1226 + C29623 * C1364) *
               C15156) *
              C44836 * C4043 +
          ((C29727 * C4045 + C29623 * C4139 + C29728 * C14619 +
            C44914 * C14751) *
               C15156 +
           (C29727 * C4048 + C29623 * C4142 + C29728 * C14621 +
            C44914 * C14753) *
               C15151 +
           (C29727 * C4046 + C29623 * C4140 + C29728 * C14620 +
            C44914 * C14752) *
               C15158 +
           (C29727 * C4049 + C29623 * C4143 + C29728 * C14622 +
            C44914 * C14754) *
               C44903) *
              C44836 * C4044) *
         C44786 * C44752) /
        (p * q * std::sqrt(p + q));
    d2eeyx[62] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C15156 * C93 + C15151 * C98 + C15158 * C94 + C44903 * C99) * C155 +
            (C15156 * C156 + C15151 * C289 + C15158 * C157 + C44903 * C290) *
                C44836) *
               C29623 +
           ((C31058 + C31059) * C155 + (C31060 + C31061) * C44836) * C44914) *
              C4042 -
          (((C34502 + C34503) * C44836 + (C34504 + C34505) * C155) * C44914 +
           ((C31061 + C31060) * C44836 + (C31059 + C31058) * C155) * C29623) *
              C4043 +
          (((C34505 + C34504) * C155 + (C34503 + C34502) * C44836) * C29623 +
           ((C15156 * C14619 + C15151 * C14621 + C15158 * C14620 +
             C44903 * C14622) *
                C155 +
            (C15156 * C14687 + C15151 * C14805 + C15158 * C14688 +
             C44903 * C14806) *
                C44836) *
               C44914) *
              C4044) *
         C44786 * C44752) /
        (p * q * std::sqrt(p + q));
    d2eeyy[62] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C332 * C93 + C339 + C339 + C44836 * C333) * C15151 +
            C356 * C44903) *
               C29623 +
           (C31132 + C31133) * C44914) *
              C4042 -
          ((C34556 + C34557) * C44914 + (C31133 + C31132) * C29623) * C4043 +
          ((C34557 + C34556) * C29623 +
           ((C332 * C14619 + C14875 + C14875 + C44836 * C14869) * C15151 +
            (C332 * C14620 + C14876 + C14876 + C44836 * C14870) * C44903) *
               C44914) *
              C4044) *
         C44786 * C44752) /
        (p * q * std::sqrt(p + q));
    d2eeyz[62] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C29727 * C93 + C29623 * C223 + C29728 * C1226 + C44914 * C1364) *
                C155 +
            (C29727 * C156 + C29623 * C396 + C29728 * C1294 + C44914 * C1556) *
                C44836) *
               C15151 +
           ((C29746 + C29747) * C155 + (C29912 + C29913) * C44836) * C44903) *
              C4042 -
          (((C31206 + C31207) * C44836 + (C30974 + C30975) * C155) * C44903 +
           ((C29728 * C4095 + C44914 * C4268 + C29727 * C1294 +
             C29623 * C1556) *
                C44836 +
            (C29728 * C4045 + C44914 * C4139 + C29727 * C1226 +
             C29623 * C1364) *
                C155) *
               C15151) *
              C4043 +
          (((C29727 * C4045 + C29623 * C4139 + C29728 * C14619 +
             C44914 * C14751) *
                C155 +
            (C29727 * C4095 + C29623 * C4268 + C29728 * C14687 +
             C44914 * C14930) *
                C44836) *
               C15151 +
           ((C29727 * C4046 + C29623 * C4140 + C29728 * C14620 +
             C44914 * C14752) *
                C155 +
            (C29727 * C4096 + C29623 * C4269 + C29728 * C14688 +
             C44914 * C14931) *
                C44836) *
               C44903) *
              C4044) *
         C44786 * C44752) /
        (p * q * std::sqrt(p + q));
    d2eezx[62] +=
        (2 * std::pow(Pi, 2.5) *
         (((C15156 * C93 + C15151 * C98 + C15158 * C94 + C44903 * C99) *
               C29727 +
           (C15156 * C223 + C15151 * C455 + C15158 * C224 + C44903 * C456) *
               C29623 +
           (C31058 + C31059) * C29728 + (C31282 + C31283) * C44914) *
              C44836 * C4042 -
          ((C34662 + C34663) * C44914 + (C34504 + C34505) * C29728 +
           (C31283 + C31282) * C29623 + (C31059 + C31058) * C29727) *
              C44836 * C4043 +
          ((C34505 + C34504) * C29727 + (C34663 + C34662) * C29623 +
           (C15156 * C14619 + C15151 * C14621 + C15158 * C14620 +
            C44903 * C14622) *
               C29728 +
           (C15156 * C14751 + C15151 * C14982 + C15158 * C14752 +
            C44903 * C14983) *
               C44914) *
              C44836 * C4044) *
         C44786 * C44752) /
        (p * q * std::sqrt(p + q));
    d2eezy[62] += (2 * std::pow(Pi, 2.5) *
                   ((((C155 * C93 + C44836 * C156) * C29727 +
                      (C155 * C223 + C44836 * C498) * C29623 + C11150 * C29728 +
                      C11627 * C44914) *
                         C15151 +
                     (C30016 + C30017 + C30018 + C30019) * C44903) *
                        C4042 -
                    ((C31352 + C31353 + C31354 + C31355) * C44903 +
                     (C15045 * C44914 + C14699 * C29728 + C11627 * C29623 +
                      C11150 * C29727) *
                         C15151) *
                        C4043 +
                    ((C14699 * C29727 + C15045 * C29623 +
                      (C155 * C14619 + C44836 * C14687) * C29728 +
                      (C155 * C14751 + C44836 * C15040) * C44914) *
                         C15151 +
                     (C11153 * C29727 + C11628 * C29623 +
                      (C155 * C14620 + C44836 * C14688) * C29728 +
                      (C155 * C14752 + C44836 * C15041) * C44914) *
                         C44903) *
                        C4044) *
                   C44786 * C44752) /
                  (p * q * std::sqrt(p + q));
    d2eezz[62] += (2 * std::pow(Pi, 2.5) *
                   (((C30073 * C93 + C30076 + C30076 + C29623 * C558 +
                      C30074 * C1226 + C30077 + C30077 + C44914 * C1738) *
                         C44836 * C15151 +
                     (C30100 + C30101) * C44836 * C44903) *
                        C4042 -
                    ((C31436 + C31437) * C44836 * C44903 +
                     (C30074 * C4045 + C31428 + C31428 + C44914 * C4391 +
                      C30073 * C1226 + C31429 + C31429 + C29623 * C1738) *
                         C44836 * C15151) *
                        C4043 +
                    ((C30073 * C4045 + C34764 + C34764 + C29623 * C4391 +
                      C30074 * C14619 + C34765 + C34765 + C44914 * C15095) *
                         C44836 * C15151 +
                     (C30073 * C4046 + C34766 + C34766 + C29623 * C4392 +
                      C30074 * C14620 + C34767 + C34767 + C44914 * C15096) *
                         C44836 * C44903) *
                        C4044) *
                   C44786 * C44752) /
                  (p * q * std::sqrt(p + q));
    d2eexx[63] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C20397 * C93 + C20400 + C20400 + C44729 * C103) * C29623 +
            C25527 * C44914) *
               C4449 +
           (C20796 * C29623 + C22632 * C44914) * C44912) *
              C44803 * C44786 * C84 -
          ((C24876 * C44914 + C20798 * C29623) * C44912 +
           (C25528 * C44914 +
            (C20397 * C94 + C20405 + C20405 + C44729 * C104) * C29623) *
               C4449) *
              C44803 * C44786 * C85 +
          (((C20397 * C95 + C20406 + C20406 + C44729 * C105) * C29623 +
            (C20397 * C1224 + C24401 + C24401 + C44729 * C1232) * C44914) *
               C4449 +
           ((C20397 * C640 + C20407 + C20407 + C44729 * C648) * C29623 +
            (C20397 * C2656 + C24402 + C24402 + C44729 * C2662) * C44914) *
               C44912) *
              C44803 * C44786 * C86)) /
        (p * q * std::sqrt(p + q));
    d2eexy[63] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4517 * C93 + C4449 * C156 + C4518 * C642 + C44912 * C710) *
                C20398 +
            (C4517 * C98 + C4449 * C161 + C4518 * C646 + C44912 * C714) *
                C44729) *
               C29623 +
           ((C4517 * C1226 + C4449 * C1294 + C4518 * C2654 + C44912 * C2716) *
                C20398 +
            (C4517 * C1230 + C4449 * C1298 + C4518 * C2657 + C44912 * C2719) *
                C44729) *
               C44914) *
              C44803 * C44786 * C84 -
          (((C5826 + C5827) * C44729 + (C5828 + C5829) * C20398) * C44914 +
           ((C4539 + C4538) * C44729 + (C4537 + C4536) * C20398) * C29623) *
              C44803 * C44786 * C85 +
          (((C4543 + C4542) * C20398 + (C4541 + C4540) * C44729) * C29623 +
           ((C4517 * C1224 + C4449 * C1292 + C4518 * C2656 + C44912 * C2718) *
                C20398 +
            (C4517 * C1228 + C4449 * C1296 + C4518 * C2659 + C44912 * C2721) *
                C44729) *
               C44914) *
              C44803 * C44786 * C86)) /
        (p * q * std::sqrt(p + q));
    d2eexz[63] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C29727 * C93 + C29623 * C223 + C29728 * C1226 + C44914 * C1364) *
                C20398 +
            (C29727 * C98 + C29623 * C228 + C29728 * C1230 + C44914 * C1368) *
                C44729) *
               C4449 +
           ((C29727 * C642 + C29623 * C780 + C29728 * C2654 + C44914 * C2772) *
                C20398 +
            (C29727 * C646 + C29623 * C784 + C29728 * C2657 + C44914 * C2775) *
                C44729) *
               C44912) *
              C44803 * C44786 * C84 -
          (((C30310 + C30311) * C44729 + (C30312 + C30313) * C20398) * C44912 +
           ((C29749 + C29748) * C44729 + (C29747 + C29746) * C20398) * C4449) *
              C44803 * C44786 * C85 +
          (((C29753 + C29752) * C20398 + (C29751 + C29750) * C44729) * C4449 +
           ((C29727 * C640 + C29623 * C778 + C29728 * C2656 + C44914 * C2774) *
                C20398 +
            (C29727 * C644 + C29623 * C782 + C29728 * C2659 + C44914 * C2777) *
                C44729) *
               C44912) *
              C44803 * C44786 * C86)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[63] += (2 * std::pow(Pi, 2.5) *
                   ((((C20398 * C93 + C44729 * C98) * C4517 +
                      (C20398 * C156 + C44729 * C289) * C4449 + C20978 * C4518 +
                      C20979 * C44912) *
                         C29623 +
                     (C25751 * C4517 + C25752 * C4449 + C22811 * C4518 +
                      C22810 * C44912) *
                         C44914) *
                        C44803 * C44786 * C84 -
                    ((C25093 * C44912 + C25092 * C4518 + C25754 * C4449 +
                      C25753 * C4517) *
                         C44914 +
                     (C20983 * C44912 + C20982 * C4518 +
                      (C20398 * C157 + C44729 * C290) * C4449 +
                      (C20398 * C94 + C44729 * C99) * C4517) *
                         C29623) *
                        C44803 * C44786 * C85 +
                    (((C20398 * C95 + C44729 * C100) * C4517 +
                      (C20398 * C158 + C44729 * C291) * C4449 +
                      (C20398 * C640 + C44729 * C644) * C4518 +
                      (C20398 * C708 + C44729 * C848) * C44912) *
                         C29623 +
                     ((C20398 * C1224 + C44729 * C1228) * C4517 +
                      (C20398 * C1292 + C44729 * C1432) * C4449 +
                      (C20398 * C2656 + C44729 * C2659) * C4518 +
                      (C20398 * C2718 + C44729 * C2830) * C44912) *
                         C44914) *
                        C44803 * C44786 * C86)) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[63] += (2 * std::pow(Pi, 2.5) *
                   (((C4693 * C93 + C4696 + C4696 + C4449 * C333 +
                      C4694 * C642 + C4697 + C4697 + C44912 * C904) *
                         C44729 * C29623 +
                     (C4693 * C1226 + C6041 + C6041 + C4449 * C1488 +
                      C4694 * C2654 + C6040 + C6040 + C44912 * C2881) *
                         C44729 * C44914) *
                        C44803 * C44786 * C84 -
                    ((C6048 + C6049) * C44729 * C44914 +
                     (C4721 + C4720) * C44729 * C29623) *
                        C44803 * C44786 * C85 +
                    ((C4723 + C4722) * C44729 * C29623 +
                     (C4693 * C1224 + C6042 + C6042 + C4449 * C1486 +
                      C4694 * C2656 + C6043 + C6043 + C44912 * C2883) *
                         C44729 * C44914) *
                        C44803 * C44786 * C86)) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[63] +=
        (2 * std::pow(Pi, 2.5) *
         (((C29727 * C93 + C29623 * C223 + C29728 * C1226 + C44914 * C1364) *
               C4517 +
           (C29727 * C156 + C29623 * C396 + C29728 * C1294 + C44914 * C1556) *
               C4449 +
           (C29727 * C642 + C29623 * C780 + C29728 * C2654 + C44914 * C2772) *
               C4518 +
           (C29727 * C710 + C29623 * C972 + C29728 * C2716 + C44914 * C2937) *
               C44912) *
              C44729 * C44803 * C44786 * C84 -
          ((C30516 + C30517) * C44912 + (C30312 + C30313) * C4518 +
           (C29913 + C29912) * C4449 + (C29747 + C29746) * C4517) *
              C44729 * C44803 * C44786 * C85 +
          ((C29753 + C29752) * C4517 + (C29915 + C29914) * C4449 +
           (C29727 * C640 + C29623 * C778 + C29728 * C2656 + C44914 * C2774) *
               C4518 +
           (C29727 * C708 + C29623 * C970 + C29728 * C2718 + C44914 * C2939) *
               C44912) *
              C44729 * C44803 * C44786 * C86)) /
        (p * q * std::sqrt(p + q));
    d2eezx[63] += (2 * std::pow(Pi, 2.5) *
                   ((((C20398 * C93 + C44729 * C98) * C29727 +
                      (C20398 * C223 + C44729 * C455) * C29623 +
                      C25751 * C29728 + C25971 * C44914) *
                         C4449 +
                     (C20978 * C29727 + C21154 * C29623 + C22811 * C29728 +
                      C22978 * C44914) *
                         C44912) *
                        C44803 * C44786 * C84 -
                    ((C25307 * C44914 + C25092 * C29728 + C21156 * C29623 +
                      C20982 * C29727) *
                         C44912 +
                     (C25972 * C44914 + C25753 * C29728 +
                      (C20398 * C224 + C44729 * C456) * C29623 +
                      (C20398 * C94 + C44729 * C99) * C29727) *
                         C4449) *
                        C44803 * C44786 * C85 +
                    (((C20398 * C95 + C44729 * C100) * C29727 +
                      (C20398 * C225 + C44729 * C457) * C29623 +
                      (C20398 * C1224 + C44729 * C1228) * C29728 +
                      (C20398 * C1362 + C44729 * C1618) * C44914) *
                         C4449 +
                     ((C20398 * C640 + C44729 * C644) * C29727 +
                      (C20398 * C778 + C44729 * C1034) * C29623 +
                      (C20398 * C2656 + C44729 * C2659) * C29728 +
                      (C20398 * C2774 + C44729 * C2992) * C44914) *
                         C44912) *
                        C44803 * C44786 * C86)) /
                  (p * q * std::sqrt(p + q));
    d2eezy[63] +=
        (2 * std::pow(Pi, 2.5) *
         (((C4517 * C93 + C4449 * C156 + C4518 * C642 + C44912 * C710) *
               C29727 +
           (C4517 * C223 + C4449 * C498 + C4518 * C780 + C44912 * C1090) *
               C29623 +
           (C4517 * C1226 + C4449 * C1294 + C4518 * C2654 + C44912 * C2716) *
               C29728 +
           (C4517 * C1364 + C4449 * C1674 + C4518 * C2772 + C44912 * C3043) *
               C44914) *
              C44729 * C44803 * C44786 * C84 -
          ((C6259 + C6260) * C44914 + (C5828 + C5829) * C29728 +
           (C4891 + C4890) * C29623 + (C4537 + C4536) * C29727) *
              C44729 * C44803 * C44786 * C85 +
          ((C4543 + C4542) * C29727 + (C4893 + C4892) * C29623 +
           (C4517 * C1224 + C4449 * C1292 + C4518 * C2656 + C44912 * C2718) *
               C29728 +
           (C4517 * C1362 + C4449 * C1672 + C4518 * C2774 + C44912 * C3045) *
               C44914) *
              C44729 * C44803 * C44786 * C86)) /
        (p * q * std::sqrt(p + q));
    d2eezz[63] += (2 * std::pow(Pi, 2.5) *
                   (((C30073 * C93 + C30076 + C30076 + C29623 * C558 +
                      C30074 * C1226 + C30077 + C30077 + C44914 * C1738) *
                         C4449 +
                     (C30073 * C642 + C30727 + C30727 + C29623 * C1154 +
                      C30074 * C2654 + C30726 + C30726 + C44914 * C3096) *
                         C44912) *
                        C44729 * C44803 * C44786 * C84 -
                    ((C30734 + C30735) * C44912 + (C30101 + C30100) * C4449) *
                        C44729 * C44803 * C44786 * C85 +
                    ((C30103 + C30102) * C4449 +
                     (C30073 * C640 + C30728 + C30728 + C29623 * C1152 +
                      C30074 * C2656 + C30729 + C30729 + C44914 * C3098) *
                         C44912) *
                        C44729 * C44803 * C44786 * C86)) /
                  (p * q * std::sqrt(p + q));
    d2eexx[64] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C20397 * C93 + C20400 + C20400 + C44729 * C103) * C29623 +
             C25527 * C44914) *
                C4449 +
            (C35284 + C35285) * C44912) *
               C44803 * C636 -
           ((C22631 * C44914 + C20797 * C29623) * C44912 +
            (C35285 + C35284) * C4449) *
               C44803 * C44908) *
              C638 +
          (((C35286 + C35287) * C4449 +
            (C20799 * C29623 +
             (C20397 * C7524 + C21317 + C21317 + C44729 * C7528) * C44914) *
                C44912) *
               C44803 * C44908 -
           ((C35287 + C35286) * C44912 +
            (C25528 * C44914 +
             (C20397 * C94 + C20405 + C20405 + C44729 * C104) * C29623) *
                C4449) *
               C44803 * C636) *
              C44906)) /
        (p * q * std::sqrt(p + q));
    d2eexy[64] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C4517 * C93 + C4449 * C156 + C4518 * C642 + C44912 * C710) *
                 C20398 +
             (C4517 * C98 + C4449 * C161 + C4518 * C646 + C44912 * C714) *
                 C44729) *
                C29623 +
            ((C4517 * C1226 + C4449 * C1294 + C4518 * C2654 + C44912 * C2716) *
                 C20398 +
             (C4517 * C1230 + C4449 * C1298 + C4518 * C2657 + C44912 * C2719) *
                 C44729) *
                C44914) *
               C44803 * C636 -
           (((C4518 * C7525 + C44912 * C7609 + C4517 * C2657 + C4449 * C2719) *
                 C44729 +
             (C4518 * C7523 + C44912 * C7607 + C4517 * C2654 + C4449 * C2716) *
                 C20398) *
                C44914 +
            ((C4518 * C2255 + C44912 * C2305 + C4517 * C646 + C4449 * C714) *
                 C44729 +
             (C4518 * C2252 + C44912 * C2302 + C4517 * C642 + C4449 * C710) *
                 C20398) *
                C29623) *
               C44803 * C44908) *
              C638 +
          ((((C5115 + C5114) * C20398 + (C5113 + C5112) * C44729) * C29623 +
            ((C4517 * C2655 + C4449 * C2717 + C4518 * C7524 + C44912 * C7608) *
                 C20398 +
             (C4517 * C2658 + C4449 * C2720 + C4518 * C7526 + C44912 * C7610) *
                 C44729) *
                C44914) *
               C44803 * C44908 -
           (((C5826 + C5827) * C44729 + (C5828 + C5829) * C20398) * C44914 +
            ((C4539 + C4538) * C44729 + (C4537 + C4536) * C20398) * C29623) *
               C44803 * C636) *
              C44906)) /
        (p * q * std::sqrt(p + q));
    d2eexz[64] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C29727 * C93 + C29623 * C223 + C29728 * C1226 + C44914 * C1364) *
                 C20398 +
             (C29727 * C98 + C29623 * C228 + C29728 * C1230 + C44914 * C1368) *
                 C44729) *
                C4449 +
            ((C35428 + C35429) * C20398 + (C35430 + C35431) * C44729) *
                C44912) *
               C44803 * C636 -
           (((C29728 * C7525 + C44914 * C7679 + C29727 * C2255 +
              C29623 * C2349) *
                 C44729 +
             (C29728 * C7523 + C44914 * C7677 + C29727 * C2252 +
              C29623 * C2346) *
                 C20398) *
                C44912 +
            ((C35431 + C35430) * C44729 + (C35429 + C35428) * C20398) * C4449) *
               C44803 * C44908) *
              C638 +
          ((((C30313 + C30312) * C20398 + (C30311 + C30310) * C44729) * C4449 +
            ((C29727 * C2253 + C29623 * C2347 + C29728 * C7524 +
              C44914 * C7678) *
                 C20398 +
             (C29727 * C2256 + C29623 * C2350 + C29728 * C7526 +
              C44914 * C7680) *
                 C44729) *
                C44912) *
               C44803 * C44908 -
           (((C30310 + C30311) * C44729 + (C30312 + C30313) * C20398) * C44912 +
            ((C29749 + C29748) * C44729 + (C29747 + C29746) * C20398) * C4449) *
               C44803 * C636) *
              C44906)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[64] += (2 * std::pow(Pi, 2.5) *
                   (((((C20398 * C93 + C44729 * C98) * C4517 +
                       (C20398 * C156 + C44729 * C289) * C4449 +
                       C20978 * C4518 + C20979 * C44912) *
                          C29623 +
                      (C25751 * C4517 + C25752 * C4449 + C22811 * C4518 +
                       C22810 * C44912) *
                          C44914) *
                         C44803 * C636 -
                     ((C22808 * C44912 + C22809 * C4518 + C22810 * C4449 +
                       C22811 * C4517) *
                          C44914 +
                      (C20981 * C44912 + C20980 * C4518 + C20979 * C4449 +
                       C20978 * C4517) *
                          C29623) *
                         C44803 * C44908) *
                        C638 +
                    (((C20982 * C4517 + C20983 * C4449 + C20984 * C4518 +
                       C20985 * C44912) *
                          C29623 +
                      (C25092 * C4517 + C25093 * C4449 +
                       (C20398 * C7524 + C44729 * C7526) * C4518 +
                       (C20398 * C7608 + C44729 * C7758) * C44912) *
                          C44914) *
                         C44803 * C44908 -
                     ((C25093 * C44912 + C25092 * C4518 + C25754 * C4449 +
                       C25753 * C4517) *
                          C44914 +
                      (C20983 * C44912 + C20982 * C4518 +
                       (C20398 * C157 + C44729 * C290) * C4449 +
                       (C20398 * C94 + C44729 * C99) * C4517) *
                          C29623) *
                         C44803 * C636) *
                        C44906)) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[64] += (2 * std::pow(Pi, 2.5) *
                   ((((C4693 * C93 + C4696 + C4696 + C4449 * C333 +
                       C4694 * C642 + C4697 + C4697 + C44912 * C904) *
                          C44729 * C29623 +
                      (C4693 * C1226 + C6041 + C6041 + C4449 * C1488 +
                       C4694 * C2654 + C6040 + C6040 + C44912 * C2881) *
                          C44729 * C44914) *
                         C44803 * C636 -
                     ((C4694 * C7523 + C7841 + C7841 + C44912 * C7837 +
                       C4693 * C2654 + C7840 + C7840 + C4449 * C2881) *
                          C44729 * C44914 +
                      (C4694 * C2252 + C5364 + C5364 + C44912 * C2431 +
                       C4693 * C642 + C5365 + C5365 + C4449 * C904) *
                          C44729 * C29623) *
                         C44803 * C44908) *
                        C638 +
                    (((C5373 + C5372) * C44729 * C29623 +
                      (C4693 * C2655 + C7842 + C7842 + C4449 * C2882 +
                       C4694 * C7524 + C7843 + C7843 + C44912 * C7838) *
                          C44729 * C44914) *
                         C44803 * C44908 -
                     ((C6048 + C6049) * C44729 * C44914 +
                      (C4721 + C4720) * C44729 * C29623) *
                         C44803 * C636) *
                        C44906)) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[64] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C29727 * C93 + C29623 * C223 + C29728 * C1226 + C44914 * C1364) *
                C4517 +
            (C29727 * C156 + C29623 * C396 + C29728 * C1294 + C44914 * C1556) *
                C4449 +
            (C35428 + C35429) * C4518 + (C35634 + C35635) * C44912) *
               C44729 * C44803 * C636 -
           ((C29728 * C7607 + C44914 * C7909 + C29727 * C2302 +
             C29623 * C2475) *
                C44912 +
            (C29728 * C7523 + C44914 * C7677 + C29727 * C2252 +
             C29623 * C2346) *
                C4518 +
            (C35635 + C35634) * C4449 + (C35429 + C35428) * C4517) *
               C44729 * C44803 * C44908) *
              C638 +
          (((C30313 + C30312) * C4517 + (C30517 + C30516) * C4449 +
            (C29727 * C2253 + C29623 * C2347 + C29728 * C7524 +
             C44914 * C7678) *
                C4518 +
            (C29727 * C2303 + C29623 * C2476 + C29728 * C7608 +
             C44914 * C7910) *
                C44912) *
               C44729 * C44803 * C44908 -
           ((C30516 + C30517) * C44912 + (C30312 + C30313) * C4518 +
            (C29913 + C29912) * C4449 + (C29747 + C29746) * C4517) *
               C44729 * C44803 * C636) *
              C44906)) /
        (p * q * std::sqrt(p + q));
    d2eezx[64] += (2 * std::pow(Pi, 2.5) *
                   (((((C20398 * C93 + C44729 * C98) * C29727 +
                       (C20398 * C223 + C44729 * C455) * C29623 +
                       C25751 * C29728 + C25971 * C44914) *
                          C4449 +
                      (C35702 + C35703 + C35704 + C35705) * C44912) *
                         C44803 * C636 -
                     ((C22977 * C44914 + C22809 * C29728 + C21155 * C29623 +
                       C20980 * C29727) *
                          C44912 +
                      (C35705 + C35704 + C35703 + C35702) * C4449) *
                         C44803 * C44908) *
                        C638 +
                    (((C35706 + C35707 + C35708 + C35709) * C4449 +
                      (C20984 * C29727 + C21157 * C29623 +
                       (C20398 * C7524 + C44729 * C7526) * C29728 +
                       (C20398 * C7678 + C44729 * C7981) * C44914) *
                          C44912) *
                         C44803 * C44908 -
                     ((C35709 + C35708 + C35707 + C35706) * C44912 +
                      (C25972 * C44914 + C25753 * C29728 +
                       (C20398 * C224 + C44729 * C456) * C29623 +
                       (C20398 * C94 + C44729 * C99) * C29727) *
                          C4449) *
                         C44803 * C636) *
                        C44906)) /
                  (p * q * std::sqrt(p + q));
    d2eezy[64] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4517 * C93 + C4449 * C156 + C4518 * C642 + C44912 * C710) *
                C29727 +
            (C4517 * C223 + C4449 * C498 + C4518 * C780 + C44912 * C1090) *
                C29623 +
            (C4517 * C1226 + C4449 * C1294 + C4518 * C2654 + C44912 * C2716) *
                C29728 +
            (C4517 * C1364 + C4449 * C1674 + C4518 * C2772 + C44912 * C3043) *
                C44914) *
               C44729 * C44803 * C636 -
           ((C4518 * C7677 + C44912 * C8054 + C4517 * C2772 + C4449 * C3043) *
                C44914 +
            (C4518 * C7523 + C44912 * C7607 + C4517 * C2654 + C4449 * C2716) *
                C29728 +
            (C4518 * C2346 + C44912 * C2557 + C4517 * C780 + C4449 * C1090) *
                C29623 +
            (C4518 * C2252 + C44912 * C2302 + C4517 * C642 + C4449 * C710) *
                C29727) *
               C44729 * C44803 * C44908) *
              C638 +
          (((C5115 + C5114) * C29727 + (C5599 + C5598) * C29623 +
            (C4517 * C2655 + C4449 * C2717 + C4518 * C7524 + C44912 * C7608) *
                C29728 +
            (C4517 * C2773 + C4449 * C3044 + C4518 * C7678 + C44912 * C8055) *
                C44914) *
               C44729 * C44803 * C44908 -
           ((C6259 + C6260) * C44914 + (C5828 + C5829) * C29728 +
            (C4891 + C4890) * C29623 + (C4537 + C4536) * C29727) *
               C44729 * C44803 * C636) *
              C44906)) /
        (p * q * std::sqrt(p + q));
    d2eezz[64] += (2 * std::pow(Pi, 2.5) *
                   ((((C30073 * C93 + C30076 + C30076 + C29623 * C558 +
                       C30074 * C1226 + C30077 + C30077 + C44914 * C1738) *
                          C4449 +
                      (C35850 + C35851) * C44912) *
                         C44729 * C44803 * C636 -
                     ((C30074 * C7523 + C32483 + C32483 + C44914 * C8122 +
                       C30073 * C2252 + C32482 + C32482 + C29623 * C2598) *
                          C44912 +
                      (C35851 + C35850) * C4449) *
                         C44729 * C44803 * C44908) *
                        C638 +
                    (((C30735 + C30734) * C4449 +
                      (C30073 * C2253 + C32484 + C32484 + C29623 * C2599 +
                       C30074 * C7524 + C32485 + C32485 + C44914 * C8123) *
                          C44912) *
                         C44729 * C44803 * C44908 -
                     ((C30734 + C30735) * C44912 + (C30101 + C30100) * C4449) *
                         C44729 * C44803 * C636) *
                        C44906)) /
                  (p * q * std::sqrt(p + q));
    d2eexx[65] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C20397 * C93 + C20400 + C20400 + C44729 * C103) * C29623 +
             C25527 * C44914) *
                C4449 +
            (C35284 + C35285) * C44912) *
               C1222 -
           ((C27264 * C44914 + C22632 * C29623) * C44912 +
            (C29118 * C44914 + C25527 * C29623) * C4449) *
               C44910) *
              C44786 * C638 +
          (((C25528 * C29623 +
             (C20397 * C4046 + C25521 + C25521 + C44729 * C4052) * C44914) *
                C4449 +
            (C24876 * C29623 +
             (C20397 * C9370 + C25522 + C25522 + C44729 * C9374) * C44914) *
                C44912) *
               C44910 -
           ((C35287 + C35286) * C44912 +
            (C25528 * C44914 +
             (C20397 * C94 + C20405 + C20405 + C44729 * C104) * C29623) *
                C4449) *
               C1222) *
              C44786 * C44906)) /
        (p * q * std::sqrt(p + q));
    d2eexy[65] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C4517 * C93 + C4449 * C156 + C4518 * C642 + C44912 * C710) *
                 C20398 +
             (C4517 * C98 + C4449 * C161 + C4518 * C646 + C44912 * C714) *
                 C44729) *
                C29623 +
            ((C35992 + C35993) * C20398 + (C35994 + C35995) * C44729) *
                C44914) *
               C1222 -
           (((C4518 * C9371 + C44912 * C9431 + C4517 * C4048 + C4449 * C4098) *
                 C44729 +
             (C4518 * C9369 + C44912 * C9429 + C4517 * C4045 + C4449 * C4095) *
                 C20398) *
                C44914 +
            ((C35995 + C35994) * C44729 + (C35993 + C35992) * C20398) *
                C29623) *
               C44910) *
              C44786 * C638 +
          ((((C5829 + C5828) * C20398 + (C5827 + C5826) * C44729) * C29623 +
            ((C4517 * C4046 + C4449 * C4096 + C4518 * C9370 + C44912 * C9430) *
                 C20398 +
             (C4517 * C4049 + C4449 * C4099 + C4518 * C9372 + C44912 * C9432) *
                 C44729) *
                C44914) *
               C44910 -
           (((C5826 + C5827) * C44729 + (C5828 + C5829) * C20398) * C44914 +
            ((C4539 + C4538) * C44729 + (C4537 + C4536) * C20398) * C29623) *
               C1222) *
              C44786 * C44906)) /
        (p * q * std::sqrt(p + q));
    d2eexz[65] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C29727 * C93 + C29623 * C223 + C29728 * C1226 + C44914 * C1364) *
                 C20398 +
             (C29727 * C98 + C29623 * C228 + C29728 * C1230 + C44914 * C1368) *
                 C44729) *
                C4449 +
            ((C35428 + C35429) * C20398 + (C35430 + C35431) * C44729) *
                C44912) *
               C1222 -
           (((C29728 * C9371 + C44914 * C9485 + C29727 * C2657 +
              C29623 * C2775) *
                 C44729 +
             (C29728 * C9369 + C44914 * C9483 + C29727 * C2654 +
              C29623 * C2772) *
                 C20398) *
                C44912 +
            ((C29728 * C4048 + C44914 * C4142 + C29727 * C1230 +
              C29623 * C1368) *
                 C44729 +
             (C29728 * C4045 + C44914 * C4139 + C29727 * C1226 +
              C29623 * C1364) *
                 C20398) *
                C4449) *
               C44910) *
              C44786 * C638 +
          ((((C30975 + C30974) * C20398 + (C30973 + C30972) * C44729) * C4449 +
            ((C29727 * C2655 + C29623 * C2773 + C29728 * C9370 +
              C44914 * C9484) *
                 C20398 +
             (C29727 * C2658 + C29623 * C2776 + C29728 * C9372 +
              C44914 * C9486) *
                 C44729) *
                C44912) *
               C44910 -
           (((C30310 + C30311) * C44729 + (C30312 + C30313) * C20398) * C44912 +
            ((C29749 + C29748) * C44729 + (C29747 + C29746) * C20398) * C4449) *
               C1222) *
              C44786 * C44906)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[65] += (2 * std::pow(Pi, 2.5) *
                   (((((C20398 * C93 + C44729 * C98) * C4517 +
                       (C20398 * C156 + C44729 * C289) * C4449 +
                       C20978 * C4518 + C20979 * C44912) *
                          C29623 +
                      (C36128 + C36129 + C36130 + C36131) * C44914) *
                         C1222 -
                     ((C27496 * C44912 + C27497 * C4518 + C29292 * C4449 +
                       C29293 * C4517) *
                          C44914 +
                      (C36131 + C36130 + C36129 + C36128) * C29623) *
                         C44910) *
                        C44786 * C638 +
                    (((C36132 + C36133 + C36134 + C36135) * C29623 +
                      ((C20398 * C4046 + C44729 * C4049) * C4517 +
                       (C20398 * C4096 + C44729 * C4184) * C4449 +
                       (C20398 * C9370 + C44729 * C9372) * C4518 +
                       (C20398 * C9430 + C44729 * C9538) * C44912) *
                          C44914) *
                         C44910 -
                     ((C36135 + C36134 + C36133 + C36132) * C44914 +
                      (C20983 * C44912 + C20982 * C4518 +
                       (C20398 * C157 + C44729 * C290) * C4449 +
                       (C20398 * C94 + C44729 * C99) * C4517) *
                          C29623) *
                         C1222) *
                        C44786 * C44906)) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[65] += (2 * std::pow(Pi, 2.5) *
                   ((((C4693 * C93 + C4696 + C4696 + C4449 * C333 +
                       C4694 * C642 + C4697 + C4697 + C44912 * C904) *
                          C44729 * C29623 +
                      (C36210 + C36211) * C44729 * C44914) *
                         C1222 -
                     ((C4694 * C9369 + C9593 + C9593 + C44912 * C9589 +
                       C4693 * C4045 + C9592 + C9592 + C4449 * C4224) *
                          C44729 * C44914 +
                      (C36211 + C36210) * C44729 * C29623) *
                         C44910) *
                        C44786 * C638 +
                    (((C6049 + C6048) * C44729 * C29623 +
                      (C4693 * C4046 + C9594 + C9594 + C4449 * C4225 +
                       C4694 * C9370 + C9595 + C9595 + C44912 * C9590) *
                          C44729 * C44914) *
                         C44910 -
                     ((C6048 + C6049) * C44729 * C44914 +
                      (C4721 + C4720) * C44729 * C29623) *
                         C1222) *
                        C44786 * C44906)) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[65] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C29727 * C93 + C29623 * C223 + C29728 * C1226 + C44914 * C1364) *
                C4517 +
            (C29727 * C156 + C29623 * C396 + C29728 * C1294 + C44914 * C1556) *
                C4449 +
            (C35428 + C35429) * C4518 + (C35634 + C35635) * C44912) *
               C44729 * C1222 -
           ((C29728 * C9429 + C44914 * C9645 + C29727 * C2716 +
             C29623 * C2937) *
                C44912 +
            (C29728 * C9369 + C44914 * C9483 + C29727 * C2654 +
             C29623 * C2772) *
                C4518 +
            (C29728 * C4095 + C44914 * C4268 + C29727 * C1294 +
             C29623 * C1556) *
                C4449 +
            (C29728 * C4045 + C44914 * C4139 + C29727 * C1226 +
             C29623 * C1364) *
                C4517) *
               C44729 * C44910) *
              C44786 * C638 +
          (((C30975 + C30974) * C4517 + (C31207 + C31206) * C4449 +
            (C29727 * C2655 + C29623 * C2773 + C29728 * C9370 +
             C44914 * C9484) *
                C4518 +
            (C29727 * C2717 + C29623 * C2938 + C29728 * C9430 +
             C44914 * C9646) *
                C44912) *
               C44729 * C44910 -
           ((C30516 + C30517) * C44912 + (C30312 + C30313) * C4518 +
            (C29913 + C29912) * C4449 + (C29747 + C29746) * C4517) *
               C44729 * C1222) *
              C44786 * C44906)) /
        (p * q * std::sqrt(p + q));
    d2eezx[65] += (2 * std::pow(Pi, 2.5) *
                   (((((C20398 * C93 + C44729 * C98) * C29727 +
                       (C20398 * C223 + C44729 * C455) * C29623 +
                       C25751 * C29728 + C25971 * C44914) *
                          C4449 +
                      (C35702 + C35703 + C35704 + C35705) * C44912) *
                         C1222 -
                     ((C27719 * C44914 + C27497 * C29728 + C22978 * C29623 +
                       C22811 * C29727) *
                          C44912 +
                      (C29463 * C44914 + C29293 * C29728 + C25971 * C29623 +
                       C25751 * C29727) *
                          C4449) *
                         C44910) *
                        C44786 * C638 +
                    (((C25753 * C29727 + C25972 * C29623 +
                       (C20398 * C4046 + C44729 * C4049) * C29728 +
                       (C20398 * C4140 + C44729 * C4310) * C44914) *
                          C4449 +
                      (C25092 * C29727 + C25307 * C29623 +
                       (C20398 * C9370 + C44729 * C9372) * C29728 +
                       (C20398 * C9484 + C44729 * C9698) * C44914) *
                          C44912) *
                         C44910 -
                     ((C35709 + C35708 + C35707 + C35706) * C44912 +
                      (C25972 * C44914 + C25753 * C29728 +
                       (C20398 * C224 + C44729 * C456) * C29623 +
                       (C20398 * C94 + C44729 * C99) * C29727) *
                          C4449) *
                         C1222) *
                        C44786 * C44906)) /
                  (p * q * std::sqrt(p + q));
    d2eezy[65] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4517 * C93 + C4449 * C156 + C4518 * C642 + C44912 * C710) *
                C29727 +
            (C4517 * C223 + C4449 * C498 + C4518 * C780 + C44912 * C1090) *
                C29623 +
            (C35992 + C35993) * C29728 + (C36414 + C36415) * C44914) *
               C44729 * C1222 -
           ((C4518 * C9483 + C44912 * C9749 + C4517 * C4139 + C4449 * C4350) *
                C44914 +
            (C4518 * C9369 + C44912 * C9429 + C4517 * C4045 + C4449 * C4095) *
                C29728 +
            (C36415 + C36414) * C29623 + (C35993 + C35992) * C29727) *
               C44729 * C44910) *
              C44786 * C638 +
          (((C5829 + C5828) * C29727 + (C6260 + C6259) * C29623 +
            (C4517 * C4046 + C4449 * C4096 + C4518 * C9370 + C44912 * C9430) *
                C29728 +
            (C4517 * C4140 + C4449 * C4351 + C4518 * C9484 + C44912 * C9750) *
                C44914) *
               C44729 * C44910 -
           ((C6259 + C6260) * C44914 + (C5828 + C5829) * C29728 +
            (C4891 + C4890) * C29623 + (C4537 + C4536) * C29727) *
               C44729 * C1222) *
              C44786 * C44906)) /
        (p * q * std::sqrt(p + q));
    d2eezz[65] += (2 * std::pow(Pi, 2.5) *
                   ((((C30073 * C93 + C30076 + C30076 + C29623 * C558 +
                       C30074 * C1226 + C30077 + C30077 + C44914 * C1738) *
                          C4449 +
                      (C35850 + C35851) * C44912) *
                         C44729 * C1222 -
                     ((C30074 * C9369 + C33087 + C33087 + C44914 * C9801 +
                       C30073 * C2654 + C33086 + C33086 + C29623 * C3096) *
                          C44912 +
                      (C30074 * C4045 + C31428 + C31428 + C44914 * C4391 +
                       C30073 * C1226 + C31429 + C31429 + C29623 * C1738) *
                          C4449) *
                         C44729 * C44910) *
                        C44786 * C638 +
                    (((C31437 + C31436) * C4449 +
                      (C30073 * C2655 + C33088 + C33088 + C29623 * C3097 +
                       C30074 * C9370 + C33089 + C33089 + C44914 * C9802) *
                          C44912) *
                         C44729 * C44910 -
                     ((C30734 + C30735) * C44912 + (C30101 + C30100) * C4449) *
                         C44729 * C1222) *
                        C44786 * C44906)) /
                  (p * q * std::sqrt(p + q));
    d2eexx[66] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C20397 * C93 + C20400 + C20400 + C44729 * C103) * C29623 +
             C25527 * C44914) *
                C4449 +
            (C35284 + C35285) * C44912) *
               C44803 * C1806 -
           ((C22631 * C44914 + C20797 * C29623) * C44912 +
            (C35285 + C35284) * C4449) *
               C44803 * C44908) *
              C1808 +
          (((C35286 + C35287) * C4449 +
            (C20799 * C29623 +
             (C20397 * C7524 + C21317 + C21317 + C44729 * C7528) * C44914) *
                C44912) *
               C44803 * C44908 -
           ((C35287 + C35286) * C44912 +
            (C25528 * C44914 +
             (C20397 * C94 + C20405 + C20405 + C44729 * C104) * C29623) *
                C4449) *
               C44803 * C1806) *
              C44906)) /
        (p * q * std::sqrt(p + q));
    d2eexy[66] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C4517 * C93 + C4449 * C156 + C4518 * C642 + C44912 * C710) *
                 C20398 +
             (C4517 * C98 + C4449 * C161 + C4518 * C646 + C44912 * C714) *
                 C44729) *
                C29623 +
            ((C35992 + C35993) * C20398 + (C35994 + C35995) * C44729) *
                C44914) *
               C44803 * C1806 -
           (((C4518 * C7525 + C44912 * C7609 + C4517 * C2657 + C4449 * C2719) *
                 C44729 +
             (C4518 * C7523 + C44912 * C7607 + C4517 * C2654 + C4449 * C2716) *
                 C20398) *
                C44914 +
            ((C4518 * C2255 + C44912 * C2305 + C4517 * C646 + C4449 * C714) *
                 C44729 +
             (C4518 * C2252 + C44912 * C2302 + C4517 * C642 + C4449 * C710) *
                 C20398) *
                C29623) *
               C44803 * C44908) *
              C1808 +
          ((((C5115 + C5114) * C20398 + (C5113 + C5112) * C44729) * C29623 +
            ((C4517 * C2655 + C4449 * C2717 + C4518 * C7524 + C44912 * C7608) *
                 C20398 +
             (C4517 * C2658 + C4449 * C2720 + C4518 * C7526 + C44912 * C7610) *
                 C44729) *
                C44914) *
               C44803 * C44908 -
           (((C5826 + C5827) * C44729 + (C5828 + C5829) * C20398) * C44914 +
            ((C4539 + C4538) * C44729 + (C4537 + C4536) * C20398) * C29623) *
               C44803 * C1806) *
              C44906)) /
        (p * q * std::sqrt(p + q));
    d2eexz[66] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C29727 * C93 + C29623 * C223 + C29728 * C1226 + C44914 * C1364) *
                 C20398 +
             (C29727 * C98 + C29623 * C228 + C29728 * C1230 + C44914 * C1368) *
                 C44729) *
                C4449 +
            ((C35428 + C35429) * C20398 + (C35430 + C35431) * C44729) *
                C44912) *
               C44803 * C1806 -
           (((C29728 * C7525 + C44914 * C7679 + C29727 * C2255 +
              C29623 * C2349) *
                 C44729 +
             (C29728 * C7523 + C44914 * C7677 + C29727 * C2252 +
              C29623 * C2346) *
                 C20398) *
                C44912 +
            ((C35431 + C35430) * C44729 + (C35429 + C35428) * C20398) * C4449) *
               C44803 * C44908) *
              C1808 +
          ((((C30313 + C30312) * C20398 + (C30311 + C30310) * C44729) * C4449 +
            ((C29727 * C2253 + C29623 * C2347 + C29728 * C7524 +
              C44914 * C7678) *
                 C20398 +
             (C29727 * C2256 + C29623 * C2350 + C29728 * C7526 +
              C44914 * C7680) *
                 C44729) *
                C44912) *
               C44803 * C44908 -
           (((C30310 + C30311) * C44729 + (C30312 + C30313) * C20398) * C44912 +
            ((C29749 + C29748) * C44729 + (C29747 + C29746) * C20398) * C4449) *
               C44803 * C1806) *
              C44906)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[66] += (2 * std::pow(Pi, 2.5) *
                   (((((C20398 * C93 + C44729 * C98) * C4517 +
                       (C20398 * C156 + C44729 * C289) * C4449 +
                       C20978 * C4518 + C20979 * C44912) *
                          C29623 +
                      (C36128 + C36129 + C36130 + C36131) * C44914) *
                         C44803 * C1806 -
                     ((C22808 * C44912 + C22809 * C4518 + C22810 * C4449 +
                       C22811 * C4517) *
                          C44914 +
                      (C20981 * C44912 + C20980 * C4518 + C20979 * C4449 +
                       C20978 * C4517) *
                          C29623) *
                         C44803 * C44908) *
                        C1808 +
                    (((C20982 * C4517 + C20983 * C4449 + C20984 * C4518 +
                       C20985 * C44912) *
                          C29623 +
                      (C25092 * C4517 + C25093 * C4449 +
                       (C20398 * C7524 + C44729 * C7526) * C4518 +
                       (C20398 * C7608 + C44729 * C7758) * C44912) *
                          C44914) *
                         C44803 * C44908 -
                     ((C36135 + C36134 + C36133 + C36132) * C44914 +
                      (C20983 * C44912 + C20982 * C4518 +
                       (C20398 * C157 + C44729 * C290) * C4449 +
                       (C20398 * C94 + C44729 * C99) * C4517) *
                          C29623) *
                         C44803 * C1806) *
                        C44906)) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[66] += (2 * std::pow(Pi, 2.5) *
                   ((((C4693 * C93 + C4696 + C4696 + C4449 * C333 +
                       C4694 * C642 + C4697 + C4697 + C44912 * C904) *
                          C44729 * C29623 +
                      (C36210 + C36211) * C44729 * C44914) *
                         C44803 * C1806 -
                     ((C4694 * C7523 + C7841 + C7841 + C44912 * C7837 +
                       C4693 * C2654 + C7840 + C7840 + C4449 * C2881) *
                          C44729 * C44914 +
                      (C4694 * C2252 + C5364 + C5364 + C44912 * C2431 +
                       C4693 * C642 + C5365 + C5365 + C4449 * C904) *
                          C44729 * C29623) *
                         C44803 * C44908) *
                        C1808 +
                    (((C5373 + C5372) * C44729 * C29623 +
                      (C4693 * C2655 + C7842 + C7842 + C4449 * C2882 +
                       C4694 * C7524 + C7843 + C7843 + C44912 * C7838) *
                          C44729 * C44914) *
                         C44803 * C44908 -
                     ((C6048 + C6049) * C44729 * C44914 +
                      (C4721 + C4720) * C44729 * C29623) *
                         C44803 * C1806) *
                        C44906)) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[66] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C29727 * C93 + C29623 * C223 + C29728 * C1226 + C44914 * C1364) *
                C4517 +
            (C29727 * C156 + C29623 * C396 + C29728 * C1294 + C44914 * C1556) *
                C4449 +
            (C35428 + C35429) * C4518 + (C35634 + C35635) * C44912) *
               C44729 * C44803 * C1806 -
           ((C29728 * C7607 + C44914 * C7909 + C29727 * C2302 +
             C29623 * C2475) *
                C44912 +
            (C29728 * C7523 + C44914 * C7677 + C29727 * C2252 +
             C29623 * C2346) *
                C4518 +
            (C35635 + C35634) * C4449 + (C35429 + C35428) * C4517) *
               C44729 * C44803 * C44908) *
              C1808 +
          (((C30313 + C30312) * C4517 + (C30517 + C30516) * C4449 +
            (C29727 * C2253 + C29623 * C2347 + C29728 * C7524 +
             C44914 * C7678) *
                C4518 +
            (C29727 * C2303 + C29623 * C2476 + C29728 * C7608 +
             C44914 * C7910) *
                C44912) *
               C44729 * C44803 * C44908 -
           ((C30516 + C30517) * C44912 + (C30312 + C30313) * C4518 +
            (C29913 + C29912) * C4449 + (C29747 + C29746) * C4517) *
               C44729 * C44803 * C1806) *
              C44906)) /
        (p * q * std::sqrt(p + q));
    d2eezx[66] += (2 * std::pow(Pi, 2.5) *
                   (((((C20398 * C93 + C44729 * C98) * C29727 +
                       (C20398 * C223 + C44729 * C455) * C29623 +
                       C25751 * C29728 + C25971 * C44914) *
                          C4449 +
                      (C35702 + C35703 + C35704 + C35705) * C44912) *
                         C44803 * C1806 -
                     ((C22977 * C44914 + C22809 * C29728 + C21155 * C29623 +
                       C20980 * C29727) *
                          C44912 +
                      (C35705 + C35704 + C35703 + C35702) * C4449) *
                         C44803 * C44908) *
                        C1808 +
                    (((C35706 + C35707 + C35708 + C35709) * C4449 +
                      (C20984 * C29727 + C21157 * C29623 +
                       (C20398 * C7524 + C44729 * C7526) * C29728 +
                       (C20398 * C7678 + C44729 * C7981) * C44914) *
                          C44912) *
                         C44803 * C44908 -
                     ((C35709 + C35708 + C35707 + C35706) * C44912 +
                      (C25972 * C44914 + C25753 * C29728 +
                       (C20398 * C224 + C44729 * C456) * C29623 +
                       (C20398 * C94 + C44729 * C99) * C29727) *
                          C4449) *
                         C44803 * C1806) *
                        C44906)) /
                  (p * q * std::sqrt(p + q));
    d2eezy[66] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4517 * C93 + C4449 * C156 + C4518 * C642 + C44912 * C710) *
                C29727 +
            (C4517 * C223 + C4449 * C498 + C4518 * C780 + C44912 * C1090) *
                C29623 +
            (C35992 + C35993) * C29728 + (C36414 + C36415) * C44914) *
               C44729 * C44803 * C1806 -
           ((C4518 * C7677 + C44912 * C8054 + C4517 * C2772 + C4449 * C3043) *
                C44914 +
            (C4518 * C7523 + C44912 * C7607 + C4517 * C2654 + C4449 * C2716) *
                C29728 +
            (C4518 * C2346 + C44912 * C2557 + C4517 * C780 + C4449 * C1090) *
                C29623 +
            (C4518 * C2252 + C44912 * C2302 + C4517 * C642 + C4449 * C710) *
                C29727) *
               C44729 * C44803 * C44908) *
              C1808 +
          (((C5115 + C5114) * C29727 + (C5599 + C5598) * C29623 +
            (C4517 * C2655 + C4449 * C2717 + C4518 * C7524 + C44912 * C7608) *
                C29728 +
            (C4517 * C2773 + C4449 * C3044 + C4518 * C7678 + C44912 * C8055) *
                C44914) *
               C44729 * C44803 * C44908 -
           ((C6259 + C6260) * C44914 + (C5828 + C5829) * C29728 +
            (C4891 + C4890) * C29623 + (C4537 + C4536) * C29727) *
               C44729 * C44803 * C1806) *
              C44906)) /
        (p * q * std::sqrt(p + q));
    d2eezz[66] += (2 * std::pow(Pi, 2.5) *
                   ((((C30073 * C93 + C30076 + C30076 + C29623 * C558 +
                       C30074 * C1226 + C30077 + C30077 + C44914 * C1738) *
                          C4449 +
                      (C35850 + C35851) * C44912) *
                         C44729 * C44803 * C1806 -
                     ((C30074 * C7523 + C32483 + C32483 + C44914 * C8122 +
                       C30073 * C2252 + C32482 + C32482 + C29623 * C2598) *
                          C44912 +
                      (C35851 + C35850) * C4449) *
                         C44729 * C44803 * C44908) *
                        C1808 +
                    (((C30735 + C30734) * C4449 +
                      (C30073 * C2253 + C32484 + C32484 + C29623 * C2599 +
                       C30074 * C7524 + C32485 + C32485 + C44914 * C8123) *
                          C44912) *
                         C44729 * C44803 * C44908 -
                     ((C30734 + C30735) * C44912 + (C30101 + C30100) * C4449) *
                         C44729 * C44803 * C1806) *
                        C44906)) /
                  (p * q * std::sqrt(p + q));
    d2eexx[67] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C20397 * C93 + C20400 + C20400 + C44729 * C103) * C29623 +
            C25527 * C44914) *
               C4449 +
           (C35284 + C35285) * C44912) *
              C44803 * C2248 -
          ((C37126 + C37127) * C44912 + (C35285 + C35284) * C4449) * C44803 *
              C2249 +
          ((C37127 + C37126) * C4449 +
           (C22220 * C29623 +
            (C20397 * C22618 + C22626 + C22626 + C44729 * C22620) * C44914) *
               C44912) *
              C44803 * C2250) *
         C44752) /
        (p * q * std::sqrt(p + q));
    d2eexy[67] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4517 * C93 + C4449 * C156 + C4518 * C642 + C44912 * C710) *
                C20398 +
            (C4517 * C98 + C4449 * C161 + C4518 * C646 + C44912 * C714) *
                C44729) *
               C29623 +
           ((C35992 + C35993) * C20398 + (C35994 + C35995) * C44729) * C44914) *
              C44803 * C2248 -
          (((C4518 * C7525 + C44912 * C7609 + C4517 * C2657 + C4449 * C2719) *
                C44729 +
            (C4518 * C7523 + C44912 * C7607 + C4517 * C2654 + C4449 * C2716) *
                C20398) *
               C44914 +
           ((C4518 * C2255 + C44912 * C2305 + C4517 * C646 + C4449 * C714) *
                C44729 +
            (C4518 * C2252 + C44912 * C2302 + C4517 * C642 + C4449 * C710) *
                C20398) *
               C29623) *
              C44803 * C2249 +
          (((C4517 * C2252 + C4449 * C2302 + C4518 * C6977 + C44912 * C7045) *
                C20398 +
            (C4517 * C2255 + C4449 * C2305 + C4518 * C6979 + C44912 * C7047) *
                C44729) *
               C29623 +
           ((C4517 * C7523 + C4449 * C7607 + C4518 * C22618 + C44912 * C22684) *
                C20398 +
            (C4517 * C7525 + C4449 * C7609 + C4518 * C22619 + C44912 * C22685) *
                C44729) *
               C44914) *
              C44803 * C2250) *
         C44752) /
        (p * q * std::sqrt(p + q));
    d2eexz[67] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C29727 * C93 + C29623 * C223 + C29728 * C1226 + C44914 * C1364) *
                C20398 +
            (C29727 * C98 + C29623 * C228 + C29728 * C1230 + C44914 * C1368) *
                C44729) *
               C4449 +
           ((C35428 + C35429) * C20398 + (C35430 + C35431) * C44729) * C44912) *
              C44803 * C2248 -
          (((C37236 + C37237) * C44729 + (C37238 + C37239) * C20398) * C44912 +
           ((C35431 + C35430) * C44729 + (C35429 + C35428) * C20398) * C4449) *
              C44803 * C2249 +
          (((C37239 + C37238) * C20398 + (C37237 + C37236) * C44729) * C4449 +
           ((C29727 * C6977 + C29623 * C7099 + C29728 * C22618 +
             C44914 * C22736) *
                C20398 +
            (C29727 * C6979 + C29623 * C7101 + C29728 * C22619 +
             C44914 * C22737) *
                C44729) *
               C44912) *
              C44803 * C2250) *
         C44752) /
        (p * q * std::sqrt(p + q));
    d2eeyx[67] += (2 * std::pow(Pi, 2.5) *
                   ((((C20398 * C93 + C44729 * C98) * C4517 +
                      (C20398 * C156 + C44729 * C289) * C4449 + C20978 * C4518 +
                      C20979 * C44912) *
                         C29623 +
                     (C36128 + C36129 + C36130 + C36131) * C44914) *
                        C44803 * C2248 -
                    ((C22808 * C44912 + C22809 * C4518 + C22810 * C4449 +
                      C22811 * C4517) *
                         C44914 +
                     (C20981 * C44912 + C20980 * C4518 + C20979 * C4449 +
                      C20978 * C4517) *
                         C29623) *
                        C44803 * C2249 +
                    ((C20980 * C4517 + C20981 * C4449 + C22355 * C4518 +
                      C22354 * C44912) *
                         C29623 +
                     (C22809 * C4517 + C22808 * C4449 +
                      (C20398 * C22618 + C44729 * C22619) * C4518 +
                      (C20398 * C22684 + C44729 * C22798) * C44912) *
                         C44914) *
                        C44803 * C2250) *
                   C44752) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[67] += (2 * std::pow(Pi, 2.5) *
                   (((C4693 * C93 + C4696 + C4696 + C4449 * C333 +
                      C4694 * C642 + C4697 + C4697 + C44912 * C904) *
                         C44729 * C29623 +
                     (C36210 + C36211) * C44729 * C44914) *
                        C44803 * C2248 -
                    ((C4694 * C7523 + C7841 + C7841 + C44912 * C7837 +
                      C4693 * C2654 + C7840 + C7840 + C4449 * C2881) *
                         C44729 * C44914 +
                     (C4694 * C2252 + C5364 + C5364 + C44912 * C2431 +
                      C4693 * C642 + C5365 + C5365 + C4449 * C904) *
                         C44729 * C29623) *
                        C44803 * C2249 +
                    ((C4693 * C2252 + C7230 + C7230 + C4449 * C2431 +
                      C4694 * C6977 + C7231 + C7231 + C44912 * C7227) *
                         C44729 * C29623 +
                     (C4693 * C7523 + C37340 + C37340 + C4449 * C7837 +
                      C4694 * C22618 + C37341 + C37341 + C44912 * C22861) *
                         C44729 * C44914) *
                        C44803 * C2250) *
                   C44752) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[67] +=
        (2 * std::pow(Pi, 2.5) *
         (((C29727 * C93 + C29623 * C223 + C29728 * C1226 + C44914 * C1364) *
               C4517 +
           (C29727 * C156 + C29623 * C396 + C29728 * C1294 + C44914 * C1556) *
               C4449 +
           (C35428 + C35429) * C4518 + (C35634 + C35635) * C44912) *
              C44729 * C44803 * C2248 -
          ((C37396 + C37397) * C44912 + (C37238 + C37239) * C4518 +
           (C35635 + C35634) * C4449 + (C35429 + C35428) * C4517) *
              C44729 * C44803 * C2249 +
          ((C37239 + C37238) * C4517 + (C37397 + C37396) * C4449 +
           (C29727 * C6977 + C29623 * C7099 + C29728 * C22618 +
            C44914 * C22736) *
               C4518 +
           (C29727 * C7045 + C29623 * C7283 + C29728 * C22684 +
            C44914 * C22915) *
               C44912) *
              C44729 * C44803 * C2250) *
         C44752) /
        (p * q * std::sqrt(p + q));
    d2eezx[67] += (2 * std::pow(Pi, 2.5) *
                   ((((C20398 * C93 + C44729 * C98) * C29727 +
                      (C20398 * C223 + C44729 * C455) * C29623 +
                      C25751 * C29728 + C25971 * C44914) *
                         C4449 +
                     (C35702 + C35703 + C35704 + C35705) * C44912) *
                        C44803 * C2248 -
                    ((C37448 + C37449 + C37450 + C37451) * C44912 +
                     (C35705 + C35704 + C35703 + C35702) * C4449) *
                        C44803 * C2249 +
                    ((C37451 + C37450 + C37449 + C37448) * C4449 +
                     (C22355 * C29727 + C22483 * C29623 +
                      (C20398 * C22618 + C44729 * C22619) * C29728 +
                      (C20398 * C22736 + C44729 * C22969) * C44914) *
                         C44912) *
                        C44803 * C2250) *
                   C44752) /
                  (p * q * std::sqrt(p + q));
    d2eezy[67] +=
        (2 * std::pow(Pi, 2.5) *
         (((C4517 * C93 + C4449 * C156 + C4518 * C642 + C44912 * C710) *
               C29727 +
           (C4517 * C223 + C4449 * C498 + C4518 * C780 + C44912 * C1090) *
               C29623 +
           (C35992 + C35993) * C29728 + (C36414 + C36415) * C44914) *
              C44729 * C44803 * C2248 -
          ((C4518 * C7677 + C44912 * C8054 + C4517 * C2772 + C4449 * C3043) *
               C44914 +
           (C4518 * C7523 + C44912 * C7607 + C4517 * C2654 + C4449 * C2716) *
               C29728 +
           (C4518 * C2346 + C44912 * C2557 + C4517 * C780 + C4449 * C1090) *
               C29623 +
           (C4518 * C2252 + C44912 * C2302 + C4517 * C642 + C4449 * C710) *
               C29727) *
              C44729 * C44803 * C2249 +
          ((C4517 * C2252 + C4449 * C2302 + C4518 * C6977 + C44912 * C7045) *
               C29727 +
           (C4517 * C2346 + C4449 * C2557 + C4518 * C7099 + C44912 * C7396) *
               C29623 +
           (C4517 * C7523 + C4449 * C7607 + C4518 * C22618 + C44912 * C22684) *
               C29728 +
           (C4517 * C7677 + C4449 * C8054 + C4518 * C22736 + C44912 * C23030) *
               C44914) *
              C44729 * C44803 * C2250) *
         C44752) /
        (p * q * std::sqrt(p + q));
    d2eezz[67] += (2 * std::pow(Pi, 2.5) *
                   (((C30073 * C93 + C30076 + C30076 + C29623 * C558 +
                      C30074 * C1226 + C30077 + C30077 + C44914 * C1738) *
                         C4449 +
                     (C35850 + C35851) * C44912) *
                        C44729 * C44803 * C2248 -
                    ((C37562 + C37563) * C44912 + (C35851 + C35850) * C4449) *
                        C44729 * C44803 * C2249 +
                    ((C37563 + C37562) * C4449 +
                     (C30073 * C6977 + C37556 + C37556 + C29623 * C7448 +
                      C30074 * C22618 + C37557 + C37557 + C44914 * C23081) *
                         C44912) *
                        C44729 * C44803 * C2250) *
                   C44752) /
                  (p * q * std::sqrt(p + q));
    d2eexx[68] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C20397 * C93 + C20400 + C20400 + C44729 * C103) * C29623 +
             C25527 * C44914) *
                C4449 +
            (C35284 + C35285) * C44912) *
               C1222 -
           ((C37630 + C37631) * C44912 +
            (C29118 * C44914 + C25527 * C29623) * C4449) *
               C44910) *
              C1806 +
          (((C37631 + C37630) * C4449 +
            (C22631 * C29623 +
             (C20397 * C24026 + C24032 + C24032 + C44729 * C24028) * C44914) *
                C44912) *
               C44910 -
           ((C37126 + C37127) * C44912 + (C35285 + C35284) * C4449) * C1222) *
              C44908) *
         C44752) /
        (p * q * std::sqrt(p + q));
    d2eexy[68] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C4517 * C93 + C4449 * C156 + C4518 * C642 + C44912 * C710) *
                 C20398 +
             (C4517 * C98 + C4449 * C161 + C4518 * C646 + C44912 * C714) *
                 C44729) *
                C29623 +
            ((C35992 + C35993) * C20398 + (C35994 + C35995) * C44729) *
                C44914) *
               C1222 -
           (((C4518 * C9371 + C44912 * C9431 + C4517 * C4048 + C4449 * C4098) *
                 C44729 +
             (C4518 * C9369 + C44912 * C9429 + C4517 * C4045 + C4449 * C4095) *
                 C20398) *
                C44914 +
            ((C35995 + C35994) * C44729 + (C35993 + C35992) * C20398) *
                C29623) *
               C44910) *
              C1806 +
          ((((C37706 + C37707) * C20398 + (C37708 + C37709) * C44729) * C29623 +
            ((C4517 * C9369 + C4449 * C9429 + C4518 * C24026 +
              C44912 * C24070) *
                 C20398 +
             (C4517 * C9371 + C4449 * C9431 + C4518 * C24027 +
              C44912 * C24071) *
                 C44729) *
                C44914) *
               C44910 -
           (((C37709 + C37708) * C44729 + (C37707 + C37706) * C20398) * C44914 +
            ((C4518 * C2255 + C44912 * C2305 + C4517 * C646 + C4449 * C714) *
                 C44729 +
             (C4518 * C2252 + C44912 * C2302 + C4517 * C642 + C4449 * C710) *
                 C20398) *
                C29623) *
               C1222) *
              C44908) *
         C44752) /
        (p * q * std::sqrt(p + q));
    d2eexz[68] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C29727 * C93 + C29623 * C223 + C29728 * C1226 + C44914 * C1364) *
                 C20398 +
             (C29727 * C98 + C29623 * C228 + C29728 * C1230 + C44914 * C1368) *
                 C44729) *
                C4449 +
            ((C35428 + C35429) * C20398 + (C35430 + C35431) * C44729) *
                C44912) *
               C1222 -
           (((C37784 + C37785) * C44729 + (C37786 + C37787) * C20398) * C44912 +
            ((C29728 * C4048 + C44914 * C4142 + C29727 * C1230 +
              C29623 * C1368) *
                 C44729 +
             (C29728 * C4045 + C44914 * C4139 + C29727 * C1226 +
              C29623 * C1364) *
                 C20398) *
                C4449) *
               C44910) *
              C1806 +
          ((((C37787 + C37786) * C20398 + (C37785 + C37784) * C44729) * C4449 +
            ((C29727 * C7523 + C29623 * C7677 + C29728 * C24026 +
              C44914 * C24110) *
                 C20398 +
             (C29727 * C7525 + C29623 * C7679 + C29728 * C24027 +
              C44914 * C24111) *
                 C44729) *
                C44912) *
               C44910 -
           (((C37236 + C37237) * C44729 + (C37238 + C37239) * C20398) * C44912 +
            ((C35431 + C35430) * C44729 + (C35429 + C35428) * C20398) * C4449) *
               C1222) *
              C44908) *
         C44752) /
        (p * q * std::sqrt(p + q));
    d2eeyx[68] += (2 * std::pow(Pi, 2.5) *
                   (((((C20398 * C93 + C44729 * C98) * C4517 +
                       (C20398 * C156 + C44729 * C289) * C4449 +
                       C20978 * C4518 + C20979 * C44912) *
                          C29623 +
                      (C36128 + C36129 + C36130 + C36131) * C44914) *
                         C1222 -
                     ((C27496 * C44912 + C27497 * C4518 + C29292 * C4449 +
                       C29293 * C4517) *
                          C44914 +
                      (C36131 + C36130 + C36129 + C36128) * C29623) *
                         C44910) *
                        C1806 +
                    (((C37854 + C37855 + C37856 + C37857) * C29623 +
                      (C27497 * C4517 + C27496 * C4449 +
                       (C20398 * C24026 + C44729 * C24027) * C4518 +
                       (C20398 * C24070 + C44729 * C24150) * C44912) *
                          C44914) *
                         C44910 -
                     ((C37857 + C37856 + C37855 + C37854) * C44914 +
                      (C20981 * C44912 + C20980 * C4518 + C20979 * C4449 +
                       C20978 * C4517) *
                          C29623) *
                         C1222) *
                        C44908) *
                   C44752) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[68] += (2 * std::pow(Pi, 2.5) *
                   ((((C4693 * C93 + C4696 + C4696 + C4449 * C333 +
                       C4694 * C642 + C4697 + C4697 + C44912 * C904) *
                          C44729 * C29623 +
                      (C36210 + C36211) * C44729 * C44914) *
                         C1222 -
                     ((C4694 * C9369 + C9593 + C9593 + C44912 * C9589 +
                       C4693 * C4045 + C9592 + C9592 + C4449 * C4224) *
                          C44729 * C44914 +
                      (C36211 + C36210) * C44729 * C29623) *
                         C44910) *
                        C1806 +
                    (((C37934 + C37935) * C44729 * C29623 +
                      (C4693 * C9369 + C37928 + C37928 + C4449 * C9589 +
                       C4694 * C24026 + C37929 + C37929 + C44912 * C24189) *
                          C44729 * C44914) *
                         C44910 -
                     ((C37935 + C37934) * C44729 * C44914 +
                      (C4694 * C2252 + C5364 + C5364 + C44912 * C2431 +
                       C4693 * C642 + C5365 + C5365 + C4449 * C904) *
                          C44729 * C29623) *
                         C1222) *
                        C44908) *
                   C44752) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[68] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C29727 * C93 + C29623 * C223 + C29728 * C1226 + C44914 * C1364) *
                C4517 +
            (C29727 * C156 + C29623 * C396 + C29728 * C1294 + C44914 * C1556) *
                C4449 +
            (C35428 + C35429) * C4518 + (C35634 + C35635) * C44912) *
               C44729 * C1222 -
           ((C38006 + C38007) * C44912 + (C37786 + C37787) * C4518 +
            (C29728 * C4095 + C44914 * C4268 + C29727 * C1294 +
             C29623 * C1556) *
                C4449 +
            (C29728 * C4045 + C44914 * C4139 + C29727 * C1226 +
             C29623 * C1364) *
                C4517) *
               C44729 * C44910) *
              C1806 +
          (((C37787 + C37786) * C4517 + (C38007 + C38006) * C4449 +
            (C29727 * C7523 + C29623 * C7677 + C29728 * C24026 +
             C44914 * C24110) *
                C4518 +
            (C29727 * C7607 + C29623 * C7909 + C29728 * C24070 +
             C44914 * C24231) *
                C44912) *
               C44729 * C44910 -
           ((C37396 + C37397) * C44912 + (C37238 + C37239) * C4518 +
            (C35635 + C35634) * C4449 + (C35429 + C35428) * C4517) *
               C44729 * C1222) *
              C44908) *
         C44752) /
        (p * q * std::sqrt(p + q));
    d2eezx[68] += (2 * std::pow(Pi, 2.5) *
                   (((((C20398 * C93 + C44729 * C98) * C29727 +
                       (C20398 * C223 + C44729 * C455) * C29623 +
                       C25751 * C29728 + C25971 * C44914) *
                          C4449 +
                      (C35702 + C35703 + C35704 + C35705) * C44912) *
                         C1222 -
                     ((C38074 + C38075 + C38076 + C38077) * C44912 +
                      (C29463 * C44914 + C29293 * C29728 + C25971 * C29623 +
                       C25751 * C29727) *
                          C4449) *
                         C44910) *
                        C1806 +
                    (((C38077 + C38076 + C38075 + C38074) * C4449 +
                      (C22809 * C29727 + C22977 * C29623 +
                       (C20398 * C24026 + C44729 * C24027) * C29728 +
                       (C20398 * C24110 + C44729 * C24270) * C44914) *
                          C44912) *
                         C44910 -
                     ((C37448 + C37449 + C37450 + C37451) * C44912 +
                      (C35705 + C35704 + C35703 + C35702) * C4449) *
                         C1222) *
                        C44908) *
                   C44752) /
                  (p * q * std::sqrt(p + q));
    d2eezy[68] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4517 * C93 + C4449 * C156 + C4518 * C642 + C44912 * C710) *
                C29727 +
            (C4517 * C223 + C4449 * C498 + C4518 * C780 + C44912 * C1090) *
                C29623 +
            (C35992 + C35993) * C29728 + (C36414 + C36415) * C44914) *
               C44729 * C1222 -
           ((C4518 * C9483 + C44912 * C9749 + C4517 * C4139 + C4449 * C4350) *
                C44914 +
            (C4518 * C9369 + C44912 * C9429 + C4517 * C4045 + C4449 * C4095) *
                C29728 +
            (C36415 + C36414) * C29623 + (C35993 + C35992) * C29727) *
               C44729 * C44910) *
              C1806 +
          (((C37706 + C37707) * C29727 + (C38148 + C38149) * C29623 +
            (C4517 * C9369 + C4449 * C9429 + C4518 * C24026 + C44912 * C24070) *
                C29728 +
            (C4517 * C9483 + C4449 * C9749 + C4518 * C24110 + C44912 * C24309) *
                C44914) *
               C44729 * C44910 -
           ((C38149 + C38148) * C44914 + (C37707 + C37706) * C29728 +
            (C4518 * C2346 + C44912 * C2557 + C4517 * C780 + C4449 * C1090) *
                C29623 +
            (C4518 * C2252 + C44912 * C2302 + C4517 * C642 + C4449 * C710) *
                C29727) *
               C44729 * C1222) *
              C44908) *
         C44752) /
        (p * q * std::sqrt(p + q));
    d2eezz[68] += (2 * std::pow(Pi, 2.5) *
                   ((((C30073 * C93 + C30076 + C30076 + C29623 * C558 +
                       C30074 * C1226 + C30077 + C30077 + C44914 * C1738) *
                          C4449 +
                      (C35850 + C35851) * C44912) *
                         C44729 * C1222 -
                     ((C38226 + C38227) * C44912 +
                      (C30074 * C4045 + C31428 + C31428 + C44914 * C4391 +
                       C30073 * C1226 + C31429 + C31429 + C29623 * C1738) *
                          C4449) *
                         C44729 * C44910) *
                        C1806 +
                    (((C38227 + C38226) * C4449 +
                      (C30073 * C7523 + C38220 + C38220 + C29623 * C8122 +
                       C30074 * C24026 + C38221 + C38221 + C44914 * C24348) *
                          C44912) *
                         C44729 * C44910 -
                     ((C37562 + C37563) * C44912 + (C35851 + C35850) * C4449) *
                         C44729 * C1222) *
                        C44908) *
                   C44752) /
                  (p * q * std::sqrt(p + q));
    d2eexx[69] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C20397 * C93 + C20400 + C20400 + C44729 * C103) * C29623 +
             C25527 * C44914) *
                C4449 +
            (C35284 + C35285) * C44912) *
               C3152 -
           ((C37630 + C37631) * C44912 +
            (C29118 * C44914 + C25527 * C29623) * C4449) *
               C44910) *
              C44786 * C1808 +
          (((C25528 * C29623 +
             (C20397 * C4046 + C25521 + C25521 + C44729 * C4052) * C44914) *
                C4449 +
            (C24876 * C29623 +
             (C20397 * C9370 + C25522 + C25522 + C44729 * C9374) * C44914) *
                C44912) *
               C44910 -
           ((C35287 + C35286) * C44912 +
            (C25528 * C44914 +
             (C20397 * C94 + C20405 + C20405 + C44729 * C104) * C29623) *
                C4449) *
               C3152) *
              C44786 * C44906)) /
        (p * q * std::sqrt(p + q));
    d2eexy[69] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C4517 * C93 + C4449 * C156 + C4518 * C642 + C44912 * C710) *
                 C20398 +
             (C4517 * C98 + C4449 * C161 + C4518 * C646 + C44912 * C714) *
                 C44729) *
                C29623 +
            ((C35992 + C35993) * C20398 + (C35994 + C35995) * C44729) *
                C44914) *
               C3152 -
           (((C4518 * C9371 + C44912 * C9431 + C4517 * C4048 + C4449 * C4098) *
                 C44729 +
             (C4518 * C9369 + C44912 * C9429 + C4517 * C4045 + C4449 * C4095) *
                 C20398) *
                C44914 +
            ((C35995 + C35994) * C44729 + (C35993 + C35992) * C20398) *
                C29623) *
               C44910) *
              C44786 * C1808 +
          ((((C5829 + C5828) * C20398 + (C5827 + C5826) * C44729) * C29623 +
            ((C4517 * C4046 + C4449 * C4096 + C4518 * C9370 + C44912 * C9430) *
                 C20398 +
             (C4517 * C4049 + C4449 * C4099 + C4518 * C9372 + C44912 * C9432) *
                 C44729) *
                C44914) *
               C44910 -
           (((C5826 + C5827) * C44729 + (C5828 + C5829) * C20398) * C44914 +
            ((C4539 + C4538) * C44729 + (C4537 + C4536) * C20398) * C29623) *
               C3152) *
              C44786 * C44906)) /
        (p * q * std::sqrt(p + q));
    d2eexz[69] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C29727 * C93 + C29623 * C223 + C29728 * C1226 + C44914 * C1364) *
                 C20398 +
             (C29727 * C98 + C29623 * C228 + C29728 * C1230 + C44914 * C1368) *
                 C44729) *
                C4449 +
            ((C35428 + C35429) * C20398 + (C35430 + C35431) * C44729) *
                C44912) *
               C3152 -
           (((C37784 + C37785) * C44729 + (C37786 + C37787) * C20398) * C44912 +
            ((C29728 * C4048 + C44914 * C4142 + C29727 * C1230 +
              C29623 * C1368) *
                 C44729 +
             (C29728 * C4045 + C44914 * C4139 + C29727 * C1226 +
              C29623 * C1364) *
                 C20398) *
                C4449) *
               C44910) *
              C44786 * C1808 +
          ((((C30975 + C30974) * C20398 + (C30973 + C30972) * C44729) * C4449 +
            ((C29727 * C2655 + C29623 * C2773 + C29728 * C9370 +
              C44914 * C9484) *
                 C20398 +
             (C29727 * C2658 + C29623 * C2776 + C29728 * C9372 +
              C44914 * C9486) *
                 C44729) *
                C44912) *
               C44910 -
           (((C30310 + C30311) * C44729 + (C30312 + C30313) * C20398) * C44912 +
            ((C29749 + C29748) * C44729 + (C29747 + C29746) * C20398) * C4449) *
               C3152) *
              C44786 * C44906)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[69] += (2 * std::pow(Pi, 2.5) *
                   (((((C20398 * C93 + C44729 * C98) * C4517 +
                       (C20398 * C156 + C44729 * C289) * C4449 +
                       C20978 * C4518 + C20979 * C44912) *
                          C29623 +
                      (C36128 + C36129 + C36130 + C36131) * C44914) *
                         C3152 -
                     ((C27496 * C44912 + C27497 * C4518 + C29292 * C4449 +
                       C29293 * C4517) *
                          C44914 +
                      (C36131 + C36130 + C36129 + C36128) * C29623) *
                         C44910) *
                        C44786 * C1808 +
                    (((C36132 + C36133 + C36134 + C36135) * C29623 +
                      ((C20398 * C4046 + C44729 * C4049) * C4517 +
                       (C20398 * C4096 + C44729 * C4184) * C4449 +
                       (C20398 * C9370 + C44729 * C9372) * C4518 +
                       (C20398 * C9430 + C44729 * C9538) * C44912) *
                          C44914) *
                         C44910 -
                     ((C36135 + C36134 + C36133 + C36132) * C44914 +
                      (C20983 * C44912 + C20982 * C4518 +
                       (C20398 * C157 + C44729 * C290) * C4449 +
                       (C20398 * C94 + C44729 * C99) * C4517) *
                          C29623) *
                         C3152) *
                        C44786 * C44906)) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[69] += (2 * std::pow(Pi, 2.5) *
                   ((((C4693 * C93 + C4696 + C4696 + C4449 * C333 +
                       C4694 * C642 + C4697 + C4697 + C44912 * C904) *
                          C44729 * C29623 +
                      (C36210 + C36211) * C44729 * C44914) *
                         C3152 -
                     ((C4694 * C9369 + C9593 + C9593 + C44912 * C9589 +
                       C4693 * C4045 + C9592 + C9592 + C4449 * C4224) *
                          C44729 * C44914 +
                      (C36211 + C36210) * C44729 * C29623) *
                         C44910) *
                        C44786 * C1808 +
                    (((C6049 + C6048) * C44729 * C29623 +
                      (C4693 * C4046 + C9594 + C9594 + C4449 * C4225 +
                       C4694 * C9370 + C9595 + C9595 + C44912 * C9590) *
                          C44729 * C44914) *
                         C44910 -
                     ((C6048 + C6049) * C44729 * C44914 +
                      (C4721 + C4720) * C44729 * C29623) *
                         C3152) *
                        C44786 * C44906)) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[69] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C29727 * C93 + C29623 * C223 + C29728 * C1226 + C44914 * C1364) *
                C4517 +
            (C29727 * C156 + C29623 * C396 + C29728 * C1294 + C44914 * C1556) *
                C4449 +
            (C35428 + C35429) * C4518 + (C35634 + C35635) * C44912) *
               C44729 * C3152 -
           ((C38006 + C38007) * C44912 + (C37786 + C37787) * C4518 +
            (C29728 * C4095 + C44914 * C4268 + C29727 * C1294 +
             C29623 * C1556) *
                C4449 +
            (C29728 * C4045 + C44914 * C4139 + C29727 * C1226 +
             C29623 * C1364) *
                C4517) *
               C44729 * C44910) *
              C44786 * C1808 +
          (((C30975 + C30974) * C4517 + (C31207 + C31206) * C4449 +
            (C29727 * C2655 + C29623 * C2773 + C29728 * C9370 +
             C44914 * C9484) *
                C4518 +
            (C29727 * C2717 + C29623 * C2938 + C29728 * C9430 +
             C44914 * C9646) *
                C44912) *
               C44729 * C44910 -
           ((C30516 + C30517) * C44912 + (C30312 + C30313) * C4518 +
            (C29913 + C29912) * C4449 + (C29747 + C29746) * C4517) *
               C44729 * C3152) *
              C44786 * C44906)) /
        (p * q * std::sqrt(p + q));
    d2eezx[69] += (2 * std::pow(Pi, 2.5) *
                   (((((C20398 * C93 + C44729 * C98) * C29727 +
                       (C20398 * C223 + C44729 * C455) * C29623 +
                       C25751 * C29728 + C25971 * C44914) *
                          C4449 +
                      (C35702 + C35703 + C35704 + C35705) * C44912) *
                         C3152 -
                     ((C38074 + C38075 + C38076 + C38077) * C44912 +
                      (C29463 * C44914 + C29293 * C29728 + C25971 * C29623 +
                       C25751 * C29727) *
                          C4449) *
                         C44910) *
                        C44786 * C1808 +
                    (((C25753 * C29727 + C25972 * C29623 +
                       (C20398 * C4046 + C44729 * C4049) * C29728 +
                       (C20398 * C4140 + C44729 * C4310) * C44914) *
                          C4449 +
                      (C25092 * C29727 + C25307 * C29623 +
                       (C20398 * C9370 + C44729 * C9372) * C29728 +
                       (C20398 * C9484 + C44729 * C9698) * C44914) *
                          C44912) *
                         C44910 -
                     ((C35709 + C35708 + C35707 + C35706) * C44912 +
                      (C25972 * C44914 + C25753 * C29728 +
                       (C20398 * C224 + C44729 * C456) * C29623 +
                       (C20398 * C94 + C44729 * C99) * C29727) *
                          C4449) *
                         C3152) *
                        C44786 * C44906)) /
                  (p * q * std::sqrt(p + q));
    d2eezy[69] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4517 * C93 + C4449 * C156 + C4518 * C642 + C44912 * C710) *
                C29727 +
            (C4517 * C223 + C4449 * C498 + C4518 * C780 + C44912 * C1090) *
                C29623 +
            (C35992 + C35993) * C29728 + (C36414 + C36415) * C44914) *
               C44729 * C3152 -
           ((C4518 * C9483 + C44912 * C9749 + C4517 * C4139 + C4449 * C4350) *
                C44914 +
            (C4518 * C9369 + C44912 * C9429 + C4517 * C4045 + C4449 * C4095) *
                C29728 +
            (C36415 + C36414) * C29623 + (C35993 + C35992) * C29727) *
               C44729 * C44910) *
              C44786 * C1808 +
          (((C5829 + C5828) * C29727 + (C6260 + C6259) * C29623 +
            (C4517 * C4046 + C4449 * C4096 + C4518 * C9370 + C44912 * C9430) *
                C29728 +
            (C4517 * C4140 + C4449 * C4351 + C4518 * C9484 + C44912 * C9750) *
                C44914) *
               C44729 * C44910 -
           ((C6259 + C6260) * C44914 + (C5828 + C5829) * C29728 +
            (C4891 + C4890) * C29623 + (C4537 + C4536) * C29727) *
               C44729 * C3152) *
              C44786 * C44906)) /
        (p * q * std::sqrt(p + q));
    d2eezz[69] += (2 * std::pow(Pi, 2.5) *
                   ((((C30073 * C93 + C30076 + C30076 + C29623 * C558 +
                       C30074 * C1226 + C30077 + C30077 + C44914 * C1738) *
                          C4449 +
                      (C35850 + C35851) * C44912) *
                         C44729 * C3152 -
                     ((C38226 + C38227) * C44912 +
                      (C30074 * C4045 + C31428 + C31428 + C44914 * C4391 +
                       C30073 * C1226 + C31429 + C31429 + C29623 * C1738) *
                          C4449) *
                         C44729 * C44910) *
                        C44786 * C1808 +
                    (((C31437 + C31436) * C4449 +
                      (C30073 * C2655 + C33088 + C33088 + C29623 * C3097 +
                       C30074 * C9370 + C33089 + C33089 + C44914 * C9802) *
                          C44912) *
                         C44729 * C44910 -
                     ((C30734 + C30735) * C44912 + (C30101 + C30100) * C4449) *
                         C44729 * C3152) *
                        C44786 * C44906)) /
                  (p * q * std::sqrt(p + q));
    d2eexx[70] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C20397 * C93 + C20400 + C20400 + C44729 * C103) * C29623 +
             C25527 * C44914) *
                C4449 +
            (C35284 + C35285) * C44912) *
               C3152 -
           ((C37630 + C37631) * C44912 +
            (C29118 * C44914 + C25527 * C29623) * C4449) *
               C44910) *
              C636 +
          (((C37631 + C37630) * C4449 +
            (C22631 * C29623 +
             (C20397 * C24026 + C24032 + C24032 + C44729 * C24028) * C44914) *
                C44912) *
               C44910 -
           ((C37126 + C37127) * C44912 + (C35285 + C35284) * C4449) * C3152) *
              C44908) *
         C44752) /
        (p * q * std::sqrt(p + q));
    d2eexy[70] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C4517 * C93 + C4449 * C156 + C4518 * C642 + C44912 * C710) *
                 C20398 +
             (C4517 * C98 + C4449 * C161 + C4518 * C646 + C44912 * C714) *
                 C44729) *
                C29623 +
            ((C35992 + C35993) * C20398 + (C35994 + C35995) * C44729) *
                C44914) *
               C3152 -
           (((C4518 * C9371 + C44912 * C9431 + C4517 * C4048 + C4449 * C4098) *
                 C44729 +
             (C4518 * C9369 + C44912 * C9429 + C4517 * C4045 + C4449 * C4095) *
                 C20398) *
                C44914 +
            ((C35995 + C35994) * C44729 + (C35993 + C35992) * C20398) *
                C29623) *
               C44910) *
              C636 +
          ((((C37706 + C37707) * C20398 + (C37708 + C37709) * C44729) * C29623 +
            ((C4517 * C9369 + C4449 * C9429 + C4518 * C24026 +
              C44912 * C24070) *
                 C20398 +
             (C4517 * C9371 + C4449 * C9431 + C4518 * C24027 +
              C44912 * C24071) *
                 C44729) *
                C44914) *
               C44910 -
           (((C37709 + C37708) * C44729 + (C37707 + C37706) * C20398) * C44914 +
            ((C4518 * C2255 + C44912 * C2305 + C4517 * C646 + C4449 * C714) *
                 C44729 +
             (C4518 * C2252 + C44912 * C2302 + C4517 * C642 + C4449 * C710) *
                 C20398) *
                C29623) *
               C3152) *
              C44908) *
         C44752) /
        (p * q * std::sqrt(p + q));
    d2eexz[70] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C29727 * C93 + C29623 * C223 + C29728 * C1226 + C44914 * C1364) *
                 C20398 +
             (C29727 * C98 + C29623 * C228 + C29728 * C1230 + C44914 * C1368) *
                 C44729) *
                C4449 +
            ((C35428 + C35429) * C20398 + (C35430 + C35431) * C44729) *
                C44912) *
               C3152 -
           (((C37784 + C37785) * C44729 + (C37786 + C37787) * C20398) * C44912 +
            ((C29728 * C4048 + C44914 * C4142 + C29727 * C1230 +
              C29623 * C1368) *
                 C44729 +
             (C29728 * C4045 + C44914 * C4139 + C29727 * C1226 +
              C29623 * C1364) *
                 C20398) *
                C4449) *
               C44910) *
              C636 +
          ((((C37787 + C37786) * C20398 + (C37785 + C37784) * C44729) * C4449 +
            ((C29727 * C7523 + C29623 * C7677 + C29728 * C24026 +
              C44914 * C24110) *
                 C20398 +
             (C29727 * C7525 + C29623 * C7679 + C29728 * C24027 +
              C44914 * C24111) *
                 C44729) *
                C44912) *
               C44910 -
           (((C37236 + C37237) * C44729 + (C37238 + C37239) * C20398) * C44912 +
            ((C35431 + C35430) * C44729 + (C35429 + C35428) * C20398) * C4449) *
               C3152) *
              C44908) *
         C44752) /
        (p * q * std::sqrt(p + q));
    d2eeyx[70] += (2 * std::pow(Pi, 2.5) *
                   (((((C20398 * C93 + C44729 * C98) * C4517 +
                       (C20398 * C156 + C44729 * C289) * C4449 +
                       C20978 * C4518 + C20979 * C44912) *
                          C29623 +
                      (C36128 + C36129 + C36130 + C36131) * C44914) *
                         C3152 -
                     ((C27496 * C44912 + C27497 * C4518 + C29292 * C4449 +
                       C29293 * C4517) *
                          C44914 +
                      (C36131 + C36130 + C36129 + C36128) * C29623) *
                         C44910) *
                        C636 +
                    (((C37854 + C37855 + C37856 + C37857) * C29623 +
                      (C27497 * C4517 + C27496 * C4449 +
                       (C20398 * C24026 + C44729 * C24027) * C4518 +
                       (C20398 * C24070 + C44729 * C24150) * C44912) *
                          C44914) *
                         C44910 -
                     ((C37857 + C37856 + C37855 + C37854) * C44914 +
                      (C20981 * C44912 + C20980 * C4518 + C20979 * C4449 +
                       C20978 * C4517) *
                          C29623) *
                         C3152) *
                        C44908) *
                   C44752) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[70] += (2 * std::pow(Pi, 2.5) *
                   ((((C4693 * C93 + C4696 + C4696 + C4449 * C333 +
                       C4694 * C642 + C4697 + C4697 + C44912 * C904) *
                          C44729 * C29623 +
                      (C36210 + C36211) * C44729 * C44914) *
                         C3152 -
                     ((C4694 * C9369 + C9593 + C9593 + C44912 * C9589 +
                       C4693 * C4045 + C9592 + C9592 + C4449 * C4224) *
                          C44729 * C44914 +
                      (C36211 + C36210) * C44729 * C29623) *
                         C44910) *
                        C636 +
                    (((C37934 + C37935) * C44729 * C29623 +
                      (C4693 * C9369 + C37928 + C37928 + C4449 * C9589 +
                       C4694 * C24026 + C37929 + C37929 + C44912 * C24189) *
                          C44729 * C44914) *
                         C44910 -
                     ((C37935 + C37934) * C44729 * C44914 +
                      (C4694 * C2252 + C5364 + C5364 + C44912 * C2431 +
                       C4693 * C642 + C5365 + C5365 + C4449 * C904) *
                          C44729 * C29623) *
                         C3152) *
                        C44908) *
                   C44752) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[70] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C29727 * C93 + C29623 * C223 + C29728 * C1226 + C44914 * C1364) *
                C4517 +
            (C29727 * C156 + C29623 * C396 + C29728 * C1294 + C44914 * C1556) *
                C4449 +
            (C35428 + C35429) * C4518 + (C35634 + C35635) * C44912) *
               C44729 * C3152 -
           ((C38006 + C38007) * C44912 + (C37786 + C37787) * C4518 +
            (C29728 * C4095 + C44914 * C4268 + C29727 * C1294 +
             C29623 * C1556) *
                C4449 +
            (C29728 * C4045 + C44914 * C4139 + C29727 * C1226 +
             C29623 * C1364) *
                C4517) *
               C44729 * C44910) *
              C636 +
          (((C37787 + C37786) * C4517 + (C38007 + C38006) * C4449 +
            (C29727 * C7523 + C29623 * C7677 + C29728 * C24026 +
             C44914 * C24110) *
                C4518 +
            (C29727 * C7607 + C29623 * C7909 + C29728 * C24070 +
             C44914 * C24231) *
                C44912) *
               C44729 * C44910 -
           ((C37396 + C37397) * C44912 + (C37238 + C37239) * C4518 +
            (C35635 + C35634) * C4449 + (C35429 + C35428) * C4517) *
               C44729 * C3152) *
              C44908) *
         C44752) /
        (p * q * std::sqrt(p + q));
    d2eezx[70] += (2 * std::pow(Pi, 2.5) *
                   (((((C20398 * C93 + C44729 * C98) * C29727 +
                       (C20398 * C223 + C44729 * C455) * C29623 +
                       C25751 * C29728 + C25971 * C44914) *
                          C4449 +
                      (C35702 + C35703 + C35704 + C35705) * C44912) *
                         C3152 -
                     ((C38074 + C38075 + C38076 + C38077) * C44912 +
                      (C29463 * C44914 + C29293 * C29728 + C25971 * C29623 +
                       C25751 * C29727) *
                          C4449) *
                         C44910) *
                        C636 +
                    (((C38077 + C38076 + C38075 + C38074) * C4449 +
                      (C22809 * C29727 + C22977 * C29623 +
                       (C20398 * C24026 + C44729 * C24027) * C29728 +
                       (C20398 * C24110 + C44729 * C24270) * C44914) *
                          C44912) *
                         C44910 -
                     ((C37448 + C37449 + C37450 + C37451) * C44912 +
                      (C35705 + C35704 + C35703 + C35702) * C4449) *
                         C3152) *
                        C44908) *
                   C44752) /
                  (p * q * std::sqrt(p + q));
    d2eezy[70] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4517 * C93 + C4449 * C156 + C4518 * C642 + C44912 * C710) *
                C29727 +
            (C4517 * C223 + C4449 * C498 + C4518 * C780 + C44912 * C1090) *
                C29623 +
            (C35992 + C35993) * C29728 + (C36414 + C36415) * C44914) *
               C44729 * C3152 -
           ((C4518 * C9483 + C44912 * C9749 + C4517 * C4139 + C4449 * C4350) *
                C44914 +
            (C4518 * C9369 + C44912 * C9429 + C4517 * C4045 + C4449 * C4095) *
                C29728 +
            (C36415 + C36414) * C29623 + (C35993 + C35992) * C29727) *
               C44729 * C44910) *
              C636 +
          (((C37706 + C37707) * C29727 + (C38148 + C38149) * C29623 +
            (C4517 * C9369 + C4449 * C9429 + C4518 * C24026 + C44912 * C24070) *
                C29728 +
            (C4517 * C9483 + C4449 * C9749 + C4518 * C24110 + C44912 * C24309) *
                C44914) *
               C44729 * C44910 -
           ((C38149 + C38148) * C44914 + (C37707 + C37706) * C29728 +
            (C4518 * C2346 + C44912 * C2557 + C4517 * C780 + C4449 * C1090) *
                C29623 +
            (C4518 * C2252 + C44912 * C2302 + C4517 * C642 + C4449 * C710) *
                C29727) *
               C44729 * C3152) *
              C44908) *
         C44752) /
        (p * q * std::sqrt(p + q));
    d2eezz[70] += (2 * std::pow(Pi, 2.5) *
                   ((((C30073 * C93 + C30076 + C30076 + C29623 * C558 +
                       C30074 * C1226 + C30077 + C30077 + C44914 * C1738) *
                          C4449 +
                      (C35850 + C35851) * C44912) *
                         C44729 * C3152 -
                     ((C38226 + C38227) * C44912 +
                      (C30074 * C4045 + C31428 + C31428 + C44914 * C4391 +
                       C30073 * C1226 + C31429 + C31429 + C29623 * C1738) *
                          C4449) *
                         C44729 * C44910) *
                        C636 +
                    (((C38227 + C38226) * C4449 +
                      (C30073 * C7523 + C38220 + C38220 + C29623 * C8122 +
                       C30074 * C24026 + C38221 + C38221 + C44914 * C24348) *
                          C44912) *
                         C44729 * C44910 -
                     ((C37562 + C37563) * C44912 + (C35851 + C35850) * C4449) *
                         C44729 * C3152) *
                        C44908) *
                   C44752) /
                  (p * q * std::sqrt(p + q));
    d2eexx[71] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C20397 * C93 + C20400 + C20400 + C44729 * C103) * C29623 +
            C25527 * C44914) *
               C4449 +
           (C35284 + C35285) * C44912) *
              C4042 -
          ((C37630 + C37631) * C44912 +
           (C29118 * C44914 + C25527 * C29623) * C4449) *
              C4043 +
          ((C29118 * C29623 +
            (C20397 * C14619 + C29114 + C29114 + C44729 * C14623) * C44914) *
               C4449 +
           (C27264 * C29623 +
            (C20397 * C29108 + C29115 + C29115 + C44729 * C29110) * C44914) *
               C44912) *
              C4044) *
         C44786 * C44752) /
        (p * q * std::sqrt(p + q));
    d2eexy[71] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4517 * C93 + C4449 * C156 + C4518 * C642 + C44912 * C710) *
                C20398 +
            (C4517 * C98 + C4449 * C161 + C4518 * C646 + C44912 * C714) *
                C44729) *
               C29623 +
           ((C35992 + C35993) * C20398 + (C35994 + C35995) * C44729) * C44914) *
              C4042 -
          (((C39524 + C39525) * C44729 + (C39526 + C39527) * C20398) * C44914 +
           ((C35995 + C35994) * C44729 + (C35993 + C35992) * C20398) * C29623) *
              C4043 +
          (((C39527 + C39526) * C20398 + (C39525 + C39524) * C44729) * C29623 +
           ((C4517 * C14619 + C4449 * C14687 + C4518 * C29108 +
             C44912 * C29168) *
                C20398 +
            (C4517 * C14621 + C4449 * C14689 + C4518 * C29109 +
             C44912 * C29169) *
                C44729) *
               C44914) *
              C4044) *
         C44786 * C44752) /
        (p * q * std::sqrt(p + q));
    d2eexz[71] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C29727 * C93 + C29623 * C223 + C29728 * C1226 + C44914 * C1364) *
                C20398 +
            (C29727 * C98 + C29623 * C228 + C29728 * C1230 + C44914 * C1368) *
                C44729) *
               C4449 +
           ((C35428 + C35429) * C20398 + (C35430 + C35431) * C44729) * C44912) *
              C4042 -
          (((C37784 + C37785) * C44729 + (C37786 + C37787) * C20398) * C44912 +
           ((C29728 * C4048 + C44914 * C4142 + C29727 * C1230 +
             C29623 * C1368) *
                C44729 +
            (C29728 * C4045 + C44914 * C4139 + C29727 * C1226 +
             C29623 * C1364) *
                C20398) *
               C4449) *
              C4043 +
          (((C29727 * C4045 + C29623 * C4139 + C29728 * C14619 +
             C44914 * C14751) *
                C20398 +
            (C29727 * C4048 + C29623 * C4142 + C29728 * C14621 +
             C44914 * C14753) *
                C44729) *
               C4449 +
           ((C29727 * C9369 + C29623 * C9483 + C29728 * C29108 +
             C44914 * C29232) *
                C20398 +
            (C29727 * C9371 + C29623 * C9485 + C29728 * C29109 +
             C44914 * C29233) *
                C44729) *
               C44912) *
              C4044) *
         C44786 * C44752) /
        (p * q * std::sqrt(p + q));
    d2eeyx[71] += (2 * std::pow(Pi, 2.5) *
                   ((((C20398 * C93 + C44729 * C98) * C4517 +
                      (C20398 * C156 + C44729 * C289) * C4449 + C20978 * C4518 +
                      C20979 * C44912) *
                         C29623 +
                     (C36128 + C36129 + C36130 + C36131) * C44914) *
                        C4042 -
                    ((C39628 + C39629 + C39630 + C39631) * C44914 +
                     (C36131 + C36130 + C36129 + C36128) * C29623) *
                        C4043 +
                    ((C39631 + C39630 + C39629 + C39628) * C29623 +
                     ((C20398 * C14619 + C44729 * C14621) * C4517 +
                      (C20398 * C14687 + C44729 * C14805) * C4449 +
                      (C20398 * C29108 + C44729 * C29109) * C4518 +
                      (C20398 * C29168 + C44729 * C29284) * C44912) *
                         C44914) *
                        C4044) *
                   C44786 * C44752) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[71] += (2 * std::pow(Pi, 2.5) *
                   (((C4693 * C93 + C4696 + C4696 + C4449 * C333 +
                      C4694 * C642 + C4697 + C4697 + C44912 * C904) *
                         C44729 * C29623 +
                     (C36210 + C36211) * C44729 * C44914) *
                        C4042 -
                    ((C39692 + C39693) * C44729 * C44914 +
                     (C36211 + C36210) * C44729 * C29623) *
                        C4043 +
                    ((C39693 + C39692) * C44729 * C29623 +
                     (C4693 * C14619 + C39686 + C39686 + C4449 * C14869 +
                      C4694 * C29108 + C39687 + C39687 + C44912 * C29345) *
                         C44729 * C44914) *
                        C4044) *
                   C44786 * C44752) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[71] +=
        (2 * std::pow(Pi, 2.5) *
         (((C29727 * C93 + C29623 * C223 + C29728 * C1226 + C44914 * C1364) *
               C4517 +
           (C29727 * C156 + C29623 * C396 + C29728 * C1294 + C44914 * C1556) *
               C4449 +
           (C35428 + C35429) * C4518 + (C35634 + C35635) * C44912) *
              C44729 * C4042 -
          ((C38006 + C38007) * C44912 + (C37786 + C37787) * C4518 +
           (C29728 * C4095 + C44914 * C4268 + C29727 * C1294 + C29623 * C1556) *
               C4449 +
           (C29728 * C4045 + C44914 * C4139 + C29727 * C1226 + C29623 * C1364) *
               C4517) *
              C44729 * C4043 +
          ((C29727 * C4045 + C29623 * C4139 + C29728 * C14619 +
            C44914 * C14751) *
               C4517 +
           (C29727 * C4095 + C29623 * C4268 + C29728 * C14687 +
            C44914 * C14930) *
               C4449 +
           (C29727 * C9369 + C29623 * C9483 + C29728 * C29108 +
            C44914 * C29232) *
               C4518 +
           (C29727 * C9429 + C29623 * C9645 + C29728 * C29168 +
            C44914 * C29408) *
               C44912) *
              C44729 * C4044) *
         C44786 * C44752) /
        (p * q * std::sqrt(p + q));
    d2eezx[71] += (2 * std::pow(Pi, 2.5) *
                   ((((C20398 * C93 + C44729 * C98) * C29727 +
                      (C20398 * C223 + C44729 * C455) * C29623 +
                      C25751 * C29728 + C25971 * C44914) *
                         C4449 +
                     (C35702 + C35703 + C35704 + C35705) * C44912) *
                        C4042 -
                    ((C38074 + C38075 + C38076 + C38077) * C44912 +
                     (C29463 * C44914 + C29293 * C29728 + C25971 * C29623 +
                      C25751 * C29727) *
                         C4449) *
                        C4043 +
                    ((C29293 * C29727 + C29463 * C29623 +
                      (C20398 * C14619 + C44729 * C14621) * C29728 +
                      (C20398 * C14751 + C44729 * C14982) * C44914) *
                         C4449 +
                     (C27497 * C29727 + C27719 * C29623 +
                      (C20398 * C29108 + C44729 * C29109) * C29728 +
                      (C20398 * C29232 + C44729 * C29459) * C44914) *
                         C44912) *
                        C4044) *
                   C44786 * C44752) /
                  (p * q * std::sqrt(p + q));
    d2eezy[71] +=
        (2 * std::pow(Pi, 2.5) *
         (((C4517 * C93 + C4449 * C156 + C4518 * C642 + C44912 * C710) *
               C29727 +
           (C4517 * C223 + C4449 * C498 + C4518 * C780 + C44912 * C1090) *
               C29623 +
           (C35992 + C35993) * C29728 + (C36414 + C36415) * C44914) *
              C44729 * C4042 -
          ((C39848 + C39849) * C44914 + (C39526 + C39527) * C29728 +
           (C36415 + C36414) * C29623 + (C35993 + C35992) * C29727) *
              C44729 * C4043 +
          ((C39527 + C39526) * C29727 + (C39849 + C39848) * C29623 +
           (C4517 * C14619 + C4449 * C14687 + C4518 * C29108 +
            C44912 * C29168) *
               C29728 +
           (C4517 * C14751 + C4449 * C15040 + C4518 * C29232 +
            C44912 * C29513) *
               C44914) *
              C44729 * C4044) *
         C44786 * C44752) /
        (p * q * std::sqrt(p + q));
    d2eezz[71] += (2 * std::pow(Pi, 2.5) *
                   (((C30073 * C93 + C30076 + C30076 + C29623 * C558 +
                      C30074 * C1226 + C30077 + C30077 + C44914 * C1738) *
                         C4449 +
                     (C35850 + C35851) * C44912) *
                        C44729 * C4042 -
                    ((C38226 + C38227) * C44912 +
                     (C30074 * C4045 + C31428 + C31428 + C44914 * C4391 +
                      C30073 * C1226 + C31429 + C31429 + C29623 * C1738) *
                         C4449) *
                        C44729 * C4043 +
                    ((C30073 * C4045 + C34764 + C34764 + C29623 * C4391 +
                      C30074 * C14619 + C34765 + C34765 + C44914 * C15095) *
                         C4449 +
                     (C30073 * C9369 + C39900 + C39900 + C29623 * C9801 +
                      C30074 * C29108 + C39901 + C39901 + C44914 * C29570) *
                         C44912) *
                        C44729 * C4044) *
                   C44786 * C44752) /
                  (p * q * std::sqrt(p + q));
    d2eexx[72] +=
        (2 * std::pow(Pi, 2.5) *
         (((C20397 * C93 + C20400 + C20400 + C44729 * C103) * C39939 +
           C25527 * C39940 + C29118 * C39941) *
              C44836 * C44803 * C44786 * C84 -
          ((C20397 * C4046 + C25521 + C25521 + C44729 * C4052) * C39941 +
           C25528 * C39940 +
           (C20397 * C94 + C20405 + C20405 + C44729 * C104) * C39939) *
              C44836 * C44803 * C44786 * C85 +
          ((C20397 * C95 + C20406 + C20406 + C44729 * C105) * C39939 +
           (C20397 * C1224 + C24401 + C24401 + C44729 * C1232) * C39940 +
           (C20397 * C4047 + C39943 + C39943 + C44729 * C4053) * C39941) *
              C44836 * C44803 * C44786 * C86)) /
        (p * q * std::sqrt(p + q));
    d2eexy[72] += (2 * std::pow(Pi, 2.5) *
                   ((((C155 * C93 + C44836 * C156) * C20398 +
                      (C155 * C98 + C44836 * C161) * C44729) *
                         C39939 +
                     (C11150 * C20398 + C11151 * C44729) * C39940 +
                     (C14699 * C20398 + C14698 * C44729) * C39941) *
                        C44803 * C44786 * C84 -
                    ((C11152 * C44729 + C11153 * C20398) * C39941 +
                     (C1311 * C44729 + C1312 * C20398) * C39940 +
                     (C180 * C44729 + C179 * C20398) * C39939) *
                        C44803 * C44786 * C85 +
                    ((C181 * C20398 + C182 * C44729) * C39939 +
                     (C1310 * C20398 + C1309 * C44729) * C39940 +
                     ((C155 * C4047 + C44836 * C4097) * C20398 +
                      (C155 * C4050 + C44836 * C4100) * C44729) *
                         C39941) *
                        C44803 * C44786 * C86)) /
                  (p * q * std::sqrt(p + q));
    d2eexz[72] += (2 * std::pow(Pi, 2.5) *
                   (((C40019 * C93 + C39939 * C223 + C40020 * C1226 +
                      C39940 * C1364 + C40021 * C4045 + C39941 * C4139) *
                         C20398 +
                     (C40019 * C98 + C39939 * C228 + C40020 * C1230 +
                      C39940 * C1368 + C40021 * C4048 + C39941 * C4142) *
                         C44729) *
                        C44836 * C44803 * C44786 * C84 -
                    ((C40021 * C4049 + C39941 * C4143 + C40020 * C1229 +
                      C39940 * C1367 + C40019 * C99 + C39939 * C229) *
                         C44729 +
                     (C40021 * C4046 + C39941 * C4140 + C40020 * C1225 +
                      C39940 * C1363 + C40019 * C94 + C39939 * C224) *
                         C20398) *
                        C44836 * C44803 * C44786 * C85 +
                    ((C40019 * C95 + C39939 * C225 + C40020 * C1224 +
                      C39940 * C1362 + C40021 * C4047 + C39941 * C4141) *
                         C20398 +
                     (C40019 * C100 + C39939 * C230 + C40020 * C1228 +
                      C39940 * C1366 + C40021 * C4050 + C39941 * C4144) *
                         C44729) *
                        C44836 * C44803 * C44786 * C86)) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[72] += (2 * std::pow(Pi, 2.5) *
                   ((((C20398 * C93 + C44729 * C98) * C155 +
                      (C20398 * C156 + C44729 * C289) * C44836) *
                         C39939 +
                     (C25751 * C155 + C25752 * C44836) * C39940 +
                     (C29293 * C155 + C29292 * C44836) * C39941) *
                        C44803 * C44786 * C84 -
                    (((C20398 * C4096 + C44729 * C4184) * C44836 +
                      (C20398 * C4046 + C44729 * C4049) * C155) *
                         C39941 +
                     (C25754 * C44836 + C25753 * C155) * C39940 +
                     ((C20398 * C157 + C44729 * C290) * C44836 +
                      (C20398 * C94 + C44729 * C99) * C155) *
                         C39939) *
                        C44803 * C44786 * C85 +
                    (((C20398 * C95 + C44729 * C100) * C155 +
                      (C20398 * C158 + C44729 * C291) * C44836) *
                         C39939 +
                     ((C20398 * C1224 + C44729 * C1228) * C155 +
                      (C20398 * C1292 + C44729 * C1432) * C44836) *
                         C39940 +
                     ((C20398 * C4047 + C44729 * C4050) * C155 +
                      (C20398 * C4097 + C44729 * C4185) * C44836) *
                         C39941) *
                        C44803 * C44786 * C86)) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[72] +=
        (2 * std::pow(Pi, 2.5) *
         (((C332 * C93 + C339 + C339 + C44836 * C333) * C44729 * C39939 +
           C11401 * C44729 * C39940 + C14879 * C44729 * C39941) *
              C44803 * C44786 * C84 -
          (C11402 * C44729 * C39941 + C1504 * C44729 * C39940 +
           C356 * C44729 * C39939) *
              C44803 * C44786 * C85 +
          (C357 * C44729 * C39939 + C1503 * C44729 * C39940 +
           (C332 * C4047 + C4230 + C4230 + C44836 * C4226) * C44729 * C39941) *
              C44803 * C44786 * C86)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[72] += (2 * std::pow(Pi, 2.5) *
                   (((C40019 * C93 + C39939 * C223 + C40020 * C1226 +
                      C39940 * C1364 + C40021 * C4045 + C39941 * C4139) *
                         C155 +
                     (C40019 * C156 + C39939 * C396 + C40020 * C1294 +
                      C39940 * C1556 + C40021 * C4095 + C39941 * C4268) *
                         C44836) *
                        C44729 * C44803 * C44786 * C84 -
                    ((C40021 * C4096 + C39941 * C4269 + C40020 * C1293 +
                      C39940 * C1555 + C40019 * C157 + C39939 * C397) *
                         C44836 +
                     (C40021 * C4046 + C39941 * C4140 + C40020 * C1225 +
                      C39940 * C1363 + C40019 * C94 + C39939 * C224) *
                         C155) *
                        C44729 * C44803 * C44786 * C85 +
                    ((C40019 * C95 + C39939 * C225 + C40020 * C1224 +
                      C39940 * C1362 + C40021 * C4047 + C39941 * C4141) *
                         C155 +
                     (C40019 * C158 + C39939 * C398 + C40020 * C1292 +
                      C39940 * C1554 + C40021 * C4097 + C39941 * C4270) *
                         C44836) *
                        C44729 * C44803 * C44786 * C86)) /
                  (p * q * std::sqrt(p + q));
    d2eezx[72] +=
        (2 * std::pow(Pi, 2.5) *
         (((C20398 * C93 + C44729 * C98) * C40019 +
           (C20398 * C223 + C44729 * C455) * C39939 + C25751 * C40020 +
           C25971 * C39940 + C29293 * C40021 + C29463 * C39941) *
              C44836 * C44803 * C44786 * C84 -
          ((C20398 * C4140 + C44729 * C4310) * C39941 +
           (C20398 * C4046 + C44729 * C4049) * C40021 + C25972 * C39940 +
           C25753 * C40020 + (C20398 * C224 + C44729 * C456) * C39939 +
           (C20398 * C94 + C44729 * C99) * C40019) *
              C44836 * C44803 * C44786 * C85 +
          ((C20398 * C95 + C44729 * C100) * C40019 +
           (C20398 * C225 + C44729 * C457) * C39939 +
           (C20398 * C1224 + C44729 * C1228) * C40020 +
           (C20398 * C1362 + C44729 * C1618) * C39940 +
           (C20398 * C4047 + C44729 * C4050) * C40021 +
           (C20398 * C4141 + C44729 * C4311) * C39941) *
              C44836 * C44803 * C44786 * C86)) /
        (p * q * std::sqrt(p + q));
    d2eezy[72] += (2 * std::pow(Pi, 2.5) *
                   (((C155 * C93 + C44836 * C156) * C40019 +
                     (C155 * C223 + C44836 * C498) * C39939 + C11150 * C40020 +
                     C11627 * C39940 + C14699 * C40021 + C15045 * C39941) *
                        C44729 * C44803 * C44786 * C84 -
                    (C11628 * C39941 + C11153 * C40021 + C1684 * C39940 +
                     C1312 * C40020 + C513 * C39939 + C179 * C40019) *
                        C44729 * C44803 * C44786 * C85 +
                    (C181 * C40019 + C514 * C39939 + C1310 * C40020 +
                     C1683 * C39940 + (C155 * C4047 + C44836 * C4097) * C40021 +
                     (C155 * C4141 + C44836 * C4352) * C39941) *
                        C44729 * C44803 * C44786 * C86)) /
                  (p * q * std::sqrt(p + q));
    d2eezz[72] += (2 * std::pow(Pi, 2.5) *
                   ((C40250 * C93 + C40254 + C40254 + C39939 * C558 +
                     C40251 * C1226 + C40255 + C40255 + C39940 * C1738 +
                     C40252 * C4045 + C40256 + C40256 + C39941 * C4391) *
                        C44836 * C44729 * C44803 * C44786 * C84 -
                    (C40252 * C4046 + C40257 + C40257 + C39941 * C4392 +
                     C40251 * C1225 + C40258 + C40258 + C39940 * C1737 +
                     C40250 * C94 + C40259 + C40259 + C39939 * C559) *
                        C44836 * C44729 * C44803 * C44786 * C85 +
                    (C40250 * C95 + C40260 + C40260 + C39939 * C560 +
                     C40251 * C1224 + C40261 + C40261 + C39940 * C1736 +
                     C40252 * C4047 + C40262 + C40262 + C39941 * C4393) *
                        C44836 * C44729 * C44803 * C44786 * C86)) /
                  (p * q * std::sqrt(p + q));
    d2eexx[73] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C20397 * C93 + C20400 + C20400 + C44729 * C103) * C39939 +
            C25527 * C39940 + C29118 * C39941) *
               C44836 * C44803 * C636 -
           (C27264 * C39941 + C22632 * C39940 + C20796 * C39939) * C44836 *
               C44803 * C44908) *
              C638 +
          ((C20798 * C39939 + C24876 * C39940 +
            (C20397 * C9370 + C25522 + C25522 + C44729 * C9374) * C39941) *
               C44836 * C44803 * C44908 -
           ((C20397 * C4046 + C25521 + C25521 + C44729 * C4052) * C39941 +
            C25528 * C39940 +
            (C20397 * C94 + C20405 + C20405 + C44729 * C104) * C39939) *
               C44836 * C44803 * C636) *
              C44906)) /
        (p * q * std::sqrt(p + q));
    d2eexy[73] += (2 * std::pow(Pi, 2.5) *
                   (((((C155 * C93 + C44836 * C156) * C20398 +
                       (C155 * C98 + C44836 * C161) * C44729) *
                          C39939 +
                      (C11150 * C20398 + C11151 * C44729) * C39940 +
                      (C14699 * C20398 + C14698 * C44729) * C39941) *
                         C44803 * C636 -
                     (((C155 * C9371 + C44836 * C9431) * C44729 +
                       (C155 * C9369 + C44836 * C9429) * C20398) *
                          C39941 +
                      (C12901 * C44729 + C12900 * C20398) * C39940 +
                      ((C155 * C646 + C44836 * C714) * C44729 +
                       (C155 * C642 + C44836 * C710) * C20398) *
                          C39939) *
                         C44803 * C44908) *
                        C638 +
                    (((C728 * C20398 + C727 * C44729) * C39939 +
                      (C10473 * C20398 + C10472 * C44729) * C39940 +
                      ((C155 * C9370 + C44836 * C9430) * C20398 +
                       (C155 * C9372 + C44836 * C9432) * C44729) *
                          C39941) *
                         C44803 * C44908 -
                     ((C11152 * C44729 + C11153 * C20398) * C39941 +
                      (C1311 * C44729 + C1312 * C20398) * C39940 +
                      (C180 * C44729 + C179 * C20398) * C39939) *
                         C44803 * C636) *
                        C44906)) /
                  (p * q * std::sqrt(p + q));
    d2eexz[73] += (2 * std::pow(Pi, 2.5) *
                   ((((C40019 * C93 + C39939 * C223 + C40020 * C1226 +
                       C39940 * C1364 + C40021 * C4045 + C39941 * C4139) *
                          C20398 +
                      (C40019 * C98 + C39939 * C228 + C40020 * C1230 +
                       C39940 * C1368 + C40021 * C4048 + C39941 * C4142) *
                          C44729) *
                         C44836 * C44803 * C636 -
                     ((C40021 * C9371 + C39941 * C9485 + C40020 * C2657 +
                       C39940 * C2775 + C40019 * C646 + C39939 * C784) *
                          C44729 +
                      (C40021 * C9369 + C39941 * C9483 + C40020 * C2654 +
                       C39940 * C2772 + C40019 * C642 + C39939 * C780) *
                          C20398) *
                         C44836 * C44803 * C44908) *
                        C638 +
                    (((C40019 * C641 + C39939 * C779 + C40020 * C2655 +
                       C39940 * C2773 + C40021 * C9370 + C39941 * C9484) *
                          C20398 +
                      (C40019 * C645 + C39939 * C783 + C40020 * C2658 +
                       C39940 * C2776 + C40021 * C9372 + C39941 * C9486) *
                          C44729) *
                         C44836 * C44803 * C44908 -
                     ((C40021 * C4049 + C39941 * C4143 + C40020 * C1229 +
                       C39940 * C1367 + C40019 * C99 + C39939 * C229) *
                          C44729 +
                      (C40021 * C4046 + C39941 * C4140 + C40020 * C1225 +
                       C39940 * C1363 + C40019 * C94 + C39939 * C224) *
                          C20398) *
                         C44836 * C44803 * C636) *
                        C44906)) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[73] += (2 * std::pow(Pi, 2.5) *
                   (((((C20398 * C93 + C44729 * C98) * C155 +
                       (C20398 * C156 + C44729 * C289) * C44836) *
                          C39939 +
                      (C25751 * C155 + C25752 * C44836) * C39940 +
                      (C29293 * C155 + C29292 * C44836) * C39941) *
                         C44803 * C636 -
                     ((C27496 * C44836 + C27497 * C155) * C39941 +
                      (C22810 * C44836 + C22811 * C155) * C39940 +
                      (C20979 * C44836 + C20978 * C155) * C39939) *
                         C44803 * C44908) *
                        C638 +
                    (((C20982 * C155 + C20983 * C44836) * C39939 +
                      (C25092 * C155 + C25093 * C44836) * C39940 +
                      ((C20398 * C9370 + C44729 * C9372) * C155 +
                       (C20398 * C9430 + C44729 * C9538) * C44836) *
                          C39941) *
                         C44803 * C44908 -
                     (((C20398 * C4096 + C44729 * C4184) * C44836 +
                       (C20398 * C4046 + C44729 * C4049) * C155) *
                          C39941 +
                      (C25754 * C44836 + C25753 * C155) * C39940 +
                      ((C20398 * C157 + C44729 * C290) * C44836 +
                       (C20398 * C94 + C44729 * C99) * C155) *
                          C39939) *
                         C44803 * C636) *
                        C44906)) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[73] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C332 * C93 + C339 + C339 + C44836 * C333) * C44729 * C39939 +
            C11401 * C44729 * C39940 + C14879 * C44729 * C39941) *
               C44803 * C636 -
           ((C332 * C9369 + C13105 + C13105 + C44836 * C9589) * C44729 *
                C39941 +
            C13109 * C44729 * C39940 +
            (C332 * C642 + C913 + C913 + C44836 * C904) * C44729 * C39939) *
               C44803 * C44908) *
              C638 +
          ((C920 * C44729 * C39939 + C10688 * C44729 * C39940 +
            (C332 * C9370 + C13106 + C13106 + C44836 * C9590) * C44729 *
                C39941) *
               C44803 * C44908 -
           (C11402 * C44729 * C39941 + C1504 * C44729 * C39940 +
            C356 * C44729 * C39939) *
               C44803 * C636) *
              C44906)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[73] += (2 * std::pow(Pi, 2.5) *
                   ((((C40019 * C93 + C39939 * C223 + C40020 * C1226 +
                       C39940 * C1364 + C40021 * C4045 + C39941 * C4139) *
                          C155 +
                      (C40019 * C156 + C39939 * C396 + C40020 * C1294 +
                       C39940 * C1556 + C40021 * C4095 + C39941 * C4268) *
                          C44836) *
                         C44729 * C44803 * C636 -
                     ((C40021 * C9429 + C39941 * C9645 + C40020 * C2716 +
                       C39940 * C2937 + C40019 * C710 + C39939 * C972) *
                          C44836 +
                      (C40021 * C9369 + C39941 * C9483 + C40020 * C2654 +
                       C39940 * C2772 + C40019 * C642 + C39939 * C780) *
                          C155) *
                         C44729 * C44803 * C44908) *
                        C638 +
                    (((C40019 * C641 + C39939 * C779 + C40020 * C2655 +
                       C39940 * C2773 + C40021 * C9370 + C39941 * C9484) *
                          C155 +
                      (C40019 * C709 + C39939 * C971 + C40020 * C2717 +
                       C39940 * C2938 + C40021 * C9430 + C39941 * C9646) *
                          C44836) *
                         C44729 * C44803 * C44908 -
                     ((C40021 * C4096 + C39941 * C4269 + C40020 * C1293 +
                       C39940 * C1555 + C40019 * C157 + C39939 * C397) *
                          C44836 +
                      (C40021 * C4046 + C39941 * C4140 + C40020 * C1225 +
                       C39940 * C1363 + C40019 * C94 + C39939 * C224) *
                          C155) *
                         C44729 * C44803 * C636) *
                        C44906)) /
                  (p * q * std::sqrt(p + q));
    d2eezx[73] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C20398 * C93 + C44729 * C98) * C40019 +
            (C20398 * C223 + C44729 * C455) * C39939 + C25751 * C40020 +
            C25971 * C39940 + C29293 * C40021 + C29463 * C39941) *
               C44836 * C44803 * C636 -
           (C27719 * C39941 + C27497 * C40021 + C22978 * C39940 +
            C22811 * C40020 + C21154 * C39939 + C20978 * C40019) *
               C44836 * C44803 * C44908) *
              C638 +
          ((C20982 * C40019 + C21156 * C39939 + C25092 * C40020 +
            C25307 * C39940 + (C20398 * C9370 + C44729 * C9372) * C40021 +
            (C20398 * C9484 + C44729 * C9698) * C39941) *
               C44836 * C44803 * C44908 -
           ((C20398 * C4140 + C44729 * C4310) * C39941 +
            (C20398 * C4046 + C44729 * C4049) * C40021 + C25972 * C39940 +
            C25753 * C40020 + (C20398 * C224 + C44729 * C456) * C39939 +
            (C20398 * C94 + C44729 * C99) * C40019) *
               C44836 * C44803 * C636) *
              C44906)) /
        (p * q * std::sqrt(p + q));
    d2eezy[73] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C155 * C93 + C44836 * C156) * C40019 +
            (C155 * C223 + C44836 * C498) * C39939 + C11150 * C40020 +
            C11627 * C39940 + C14699 * C40021 + C15045 * C39941) *
               C44729 * C44803 * C636 -
           ((C155 * C9483 + C44836 * C9749) * C39941 +
            (C155 * C9369 + C44836 * C9429) * C40021 + C13311 * C39940 +
            C12900 * C40020 + (C155 * C780 + C44836 * C1090) * C39939 +
            (C155 * C642 + C44836 * C710) * C40019) *
               C44729 * C44803 * C44908) *
              C638 +
          ((C728 * C40019 + C1100 * C39939 + C10473 * C40020 + C10898 * C39940 +
            (C155 * C9370 + C44836 * C9430) * C40021 +
            (C155 * C9484 + C44836 * C9750) * C39941) *
               C44729 * C44803 * C44908 -
           (C11628 * C39941 + C11153 * C40021 + C1684 * C39940 +
            C1312 * C40020 + C513 * C39939 + C179 * C40019) *
               C44729 * C44803 * C636) *
              C44906)) /
        (p * q * std::sqrt(p + q));
    d2eezz[73] += (2 * std::pow(Pi, 2.5) *
                   (((C40250 * C93 + C40254 + C40254 + C39939 * C558 +
                      C40251 * C1226 + C40255 + C40255 + C39940 * C1738 +
                      C40252 * C4045 + C40256 + C40256 + C39941 * C4391) *
                         C44836 * C44729 * C44803 * C636 -
                     (C40252 * C9369 + C40713 + C40713 + C39941 * C9801 +
                      C40251 * C2654 + C40714 + C40714 + C39940 * C3096 +
                      C40250 * C642 + C40715 + C40715 + C39939 * C1154) *
                         C44836 * C44729 * C44803 * C44908) *
                        C638 +
                    ((C40250 * C641 + C40716 + C40716 + C39939 * C1153 +
                      C40251 * C2655 + C40717 + C40717 + C39940 * C3097 +
                      C40252 * C9370 + C40718 + C40718 + C39941 * C9802) *
                         C44836 * C44729 * C44803 * C44908 -
                     (C40252 * C4046 + C40257 + C40257 + C39941 * C4392 +
                      C40251 * C1225 + C40258 + C40258 + C39940 * C1737 +
                      C40250 * C94 + C40259 + C40259 + C39939 * C559) *
                         C44836 * C44729 * C44803 * C636) *
                        C44906)) /
                  (p * q * std::sqrt(p + q));
    d2eexx[74] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C20397 * C93 + C20400 + C20400 + C44729 * C103) * C39939 +
            C25527 * C39940 + C29118 * C39941) *
               C44836 * C1222 -
           ((C20397 * C14619 + C29114 + C29114 + C44729 * C14623) * C39941 +
            C29118 * C39940 + C25527 * C39939) *
               C44836 * C44910) *
              C44786 * C638 +
          ((C25528 * C39939 + C40774 * C39940 +
            (C20397 * C14620 + C40771 + C40771 + C44729 * C14624) * C39941) *
               C44836 * C44910 -
           (C40774 * C39941 + C25528 * C39940 +
            (C20397 * C94 + C20405 + C20405 + C44729 * C104) * C39939) *
               C44836 * C1222) *
              C44786 * C44906)) /
        (p * q * std::sqrt(p + q));
    d2eexy[74] += (2 * std::pow(Pi, 2.5) *
                   (((((C155 * C93 + C44836 * C156) * C20398 +
                       (C155 * C98 + C44836 * C161) * C44729) *
                          C39939 +
                      (C40825 + C40826) * C39940 + (C40827 + C40828) * C39941) *
                         C1222 -
                     (((C155 * C14621 + C44836 * C14689) * C44729 +
                       (C155 * C14619 + C44836 * C14687) * C20398) *
                          C39941 +
                      (C40828 + C40827) * C39940 + (C40826 + C40825) * C39939) *
                         C44910) *
                        C44786 * C638 +
                    (((C40829 + C40830) * C39939 + (C40831 + C40832) * C39940 +
                      ((C155 * C14620 + C44836 * C14688) * C20398 +
                       (C155 * C14622 + C44836 * C14690) * C44729) *
                          C39941) *
                         C44910 -
                     ((C40832 + C40831) * C39941 + (C40830 + C40829) * C39940 +
                      (C180 * C44729 + C179 * C20398) * C39939) *
                         C1222) *
                        C44786 * C44906)) /
                  (p * q * std::sqrt(p + q));
    d2eexz[74] += (2 * std::pow(Pi, 2.5) *
                   ((((C40019 * C93 + C39939 * C223 + C40020 * C1226 +
                       C39940 * C1364 + C40021 * C4045 + C39941 * C4139) *
                          C20398 +
                      (C40019 * C98 + C39939 * C228 + C40020 * C1230 +
                       C39940 * C1368 + C40021 * C4048 + C39941 * C4142) *
                          C44729) *
                         C44836 * C1222 -
                     ((C40021 * C14621 + C39941 * C14753 + C40020 * C4048 +
                       C39940 * C4142 + C40019 * C1230 + C39939 * C1368) *
                          C44729 +
                      (C40021 * C14619 + C39941 * C14751 + C40020 * C4045 +
                       C39940 * C4139 + C40019 * C1226 + C39939 * C1364) *
                          C20398) *
                         C44836 * C44910) *
                        C44786 * C638 +
                    (((C40019 * C1225 + C39939 * C1363 + C40020 * C4046 +
                       C39940 * C4140 + C40021 * C14620 + C39941 * C14752) *
                          C20398 +
                      (C40019 * C1229 + C39939 * C1367 + C40020 * C4049 +
                       C39940 * C4143 + C40021 * C14622 + C39941 * C14754) *
                          C44729) *
                         C44836 * C44910 -
                     ((C40021 * C4049 + C39941 * C4143 + C40020 * C1229 +
                       C39940 * C1367 + C40019 * C99 + C39939 * C229) *
                          C44729 +
                      (C40021 * C4046 + C39941 * C4140 + C40020 * C1225 +
                       C39940 * C1363 + C40019 * C94 + C39939 * C224) *
                          C20398) *
                         C44836 * C1222) *
                        C44786 * C44906)) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[74] += (2 * std::pow(Pi, 2.5) *
                   (((((C20398 * C93 + C44729 * C98) * C155 +
                       (C20398 * C156 + C44729 * C289) * C44836) *
                          C39939 +
                      (C40933 + C40934) * C39940 + (C40935 + C40936) * C39941) *
                         C1222 -
                     (((C20398 * C14687 + C44729 * C14805) * C44836 +
                       (C20398 * C14619 + C44729 * C14621) * C155) *
                          C39941 +
                      (C40936 + C40935) * C39940 + (C40934 + C40933) * C39939) *
                         C44910) *
                        C44786 * C638 +
                    (((C40937 + C40938) * C39939 + (C40945 + C40946) * C39940 +
                      ((C20398 * C14620 + C44729 * C14622) * C155 +
                       (C20398 * C14688 + C44729 * C14806) * C44836) *
                          C39941) *
                         C44910 -
                     ((C40946 + C40945) * C39941 + (C40938 + C40937) * C39940 +
                      ((C20398 * C157 + C44729 * C290) * C44836 +
                       (C20398 * C94 + C44729 * C99) * C155) *
                          C39939) *
                         C1222) *
                        C44786 * C44906)) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[74] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C332 * C93 + C339 + C339 + C44836 * C333) * C44729 * C39939 +
            C40997 * C39940 + C40998 * C39941) *
               C1222 -
           ((C332 * C14619 + C14875 + C14875 + C44836 * C14869) * C44729 *
                C39941 +
            C40998 * C39940 + C40997 * C39939) *
               C44910) *
              C44786 * C638 +
          ((C40999 * C39939 + C41000 * C39940 +
            (C332 * C14620 + C14876 + C14876 + C44836 * C14870) * C44729 *
                C39941) *
               C44910 -
           (C41000 * C39941 + C40999 * C39940 + C356 * C44729 * C39939) *
               C1222) *
              C44786 * C44906)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[74] += (2 * std::pow(Pi, 2.5) *
                   ((((C40019 * C93 + C39939 * C223 + C40020 * C1226 +
                       C39940 * C1364 + C40021 * C4045 + C39941 * C4139) *
                          C155 +
                      (C40019 * C156 + C39939 * C396 + C40020 * C1294 +
                       C39940 * C1556 + C40021 * C4095 + C39941 * C4268) *
                          C44836) *
                         C44729 * C1222 -
                     ((C40021 * C14687 + C39941 * C14930 + C40020 * C4095 +
                       C39940 * C4268 + C40019 * C1294 + C39939 * C1556) *
                          C44836 +
                      (C40021 * C14619 + C39941 * C14751 + C40020 * C4045 +
                       C39940 * C4139 + C40019 * C1226 + C39939 * C1364) *
                          C155) *
                         C44729 * C44910) *
                        C44786 * C638 +
                    (((C40019 * C1225 + C39939 * C1363 + C40020 * C4046 +
                       C39940 * C4140 + C40021 * C14620 + C39941 * C14752) *
                          C155 +
                      (C40019 * C1293 + C39939 * C1555 + C40020 * C4096 +
                       C39940 * C4269 + C40021 * C14688 + C39941 * C14931) *
                          C44836) *
                         C44729 * C44910 -
                     ((C40021 * C4096 + C39941 * C4269 + C40020 * C1293 +
                       C39940 * C1555 + C40019 * C157 + C39939 * C397) *
                          C44836 +
                      (C40021 * C4046 + C39941 * C4140 + C40020 * C1225 +
                       C39940 * C1363 + C40019 * C94 + C39939 * C224) *
                          C155) *
                         C44729 * C1222) *
                        C44786 * C44906)) /
                  (p * q * std::sqrt(p + q));
    d2eezx[74] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C20398 * C93 + C44729 * C98) * C40019 +
            (C20398 * C223 + C44729 * C455) * C39939 + C25751 * C40020 +
            C25971 * C39940 + C29293 * C40021 + C29463 * C39941) *
               C44836 * C1222 -
           ((C20398 * C14751 + C44729 * C14982) * C39941 +
            (C20398 * C14619 + C44729 * C14621) * C40021 + C29463 * C39940 +
            C29293 * C40020 + C25971 * C39939 + C25751 * C40019) *
               C44836 * C44910) *
              C44786 * C638 +
          ((C25753 * C40019 + C25972 * C39939 + C40943 * C40020 +
            C41103 * C39940 + (C20398 * C14620 + C44729 * C14622) * C40021 +
            (C20398 * C14752 + C44729 * C14983) * C39941) *
               C44836 * C44910 -
           (C41103 * C39941 + C40943 * C40021 + C25972 * C39940 +
            C25753 * C40020 + (C20398 * C224 + C44729 * C456) * C39939 +
            (C20398 * C94 + C44729 * C99) * C40019) *
               C44836 * C1222) *
              C44786 * C44906)) /
        (p * q * std::sqrt(p + q));
    d2eezy[74] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C155 * C93 + C44836 * C156) * C40019 +
            (C155 * C223 + C44836 * C498) * C39939 + C11150 * C40020 +
            C11627 * C39940 + C14699 * C40021 + C15045 * C39941) *
               C44729 * C1222 -
           ((C155 * C14751 + C44836 * C15040) * C39941 +
            (C155 * C14619 + C44836 * C14687) * C40021 + C15045 * C39940 +
            C14699 * C40020 + C11627 * C39939 + C11150 * C40019) *
               C44729 * C44910) *
              C44786 * C638 +
          ((C1312 * C40019 + C1684 * C39939 + C11153 * C40020 +
            C11628 * C39940 + (C155 * C14620 + C44836 * C14688) * C40021 +
            (C155 * C14752 + C44836 * C15041) * C39941) *
               C44729 * C44910 -
           (C11628 * C39941 + C11153 * C40021 + C1684 * C39940 +
            C1312 * C40020 + C513 * C39939 + C179 * C40019) *
               C44729 * C1222) *
              C44786 * C44906)) /
        (p * q * std::sqrt(p + q));
    d2eezz[74] += (2 * std::pow(Pi, 2.5) *
                   (((C40250 * C93 + C40254 + C40254 + C39939 * C558 +
                      C40251 * C1226 + C40255 + C40255 + C39940 * C1738 +
                      C40252 * C4045 + C40256 + C40256 + C39941 * C4391) *
                         C44836 * C44729 * C1222 -
                     (C40252 * C14619 + C41204 + C41204 + C39941 * C15095 +
                      C40251 * C4045 + C41205 + C41205 + C39940 * C4391 +
                      C40250 * C1226 + C41206 + C41206 + C39939 * C1738) *
                         C44836 * C44729 * C44910) *
                        C44786 * C638 +
                    ((C40250 * C1225 + C41207 + C41207 + C39939 * C1737 +
                      C40251 * C4046 + C41208 + C41208 + C39940 * C4392 +
                      C40252 * C14620 + C41209 + C41209 + C39941 * C15096) *
                         C44836 * C44729 * C44910 -
                     (C40252 * C4046 + C40257 + C40257 + C39941 * C4392 +
                      C40251 * C1225 + C40258 + C40258 + C39940 * C1737 +
                      C40250 * C94 + C40259 + C40259 + C39939 * C559) *
                         C44836 * C44729 * C1222) *
                        C44786 * C44906)) /
                  (p * q * std::sqrt(p + q));
    d2eexx[75] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C20397 * C93 + C20400 + C20400 + C44729 * C103) * C39939 +
            C25527 * C39940 + C29118 * C39941) *
               C44836 * C44803 * C1806 -
           (C27264 * C39941 + C22632 * C39940 + C20796 * C39939) * C44836 *
               C44803 * C44908) *
              C1808 +
          ((C20798 * C39939 + C24876 * C39940 +
            (C20397 * C9370 + C25522 + C25522 + C44729 * C9374) * C39941) *
               C44836 * C44803 * C44908 -
           (C40774 * C39941 + C25528 * C39940 +
            (C20397 * C94 + C20405 + C20405 + C44729 * C104) * C39939) *
               C44836 * C44803 * C1806) *
              C44906)) /
        (p * q * std::sqrt(p + q));
    d2eexy[75] += (2 * std::pow(Pi, 2.5) *
                   (((((C155 * C93 + C44836 * C156) * C20398 +
                       (C155 * C98 + C44836 * C161) * C44729) *
                          C39939 +
                      (C40825 + C40826) * C39940 + (C40827 + C40828) * C39941) *
                         C44803 * C1806 -
                     (((C155 * C9371 + C44836 * C9431) * C44729 +
                       (C155 * C9369 + C44836 * C9429) * C20398) *
                          C39941 +
                      (C12901 * C44729 + C12900 * C20398) * C39940 +
                      ((C155 * C646 + C44836 * C714) * C44729 +
                       (C155 * C642 + C44836 * C710) * C20398) *
                          C39939) *
                         C44803 * C44908) *
                        C1808 +
                    (((C728 * C20398 + C727 * C44729) * C39939 +
                      (C10473 * C20398 + C10472 * C44729) * C39940 +
                      ((C155 * C9370 + C44836 * C9430) * C20398 +
                       (C155 * C9372 + C44836 * C9432) * C44729) *
                          C39941) *
                         C44803 * C44908 -
                     ((C40832 + C40831) * C39941 + (C40830 + C40829) * C39940 +
                      (C180 * C44729 + C179 * C20398) * C39939) *
                         C44803 * C1806) *
                        C44906)) /
                  (p * q * std::sqrt(p + q));
    d2eexz[75] += (2 * std::pow(Pi, 2.5) *
                   ((((C40019 * C93 + C39939 * C223 + C40020 * C1226 +
                       C39940 * C1364 + C40021 * C4045 + C39941 * C4139) *
                          C20398 +
                      (C40019 * C98 + C39939 * C228 + C40020 * C1230 +
                       C39940 * C1368 + C40021 * C4048 + C39941 * C4142) *
                          C44729) *
                         C44836 * C44803 * C1806 -
                     ((C40021 * C9371 + C39941 * C9485 + C40020 * C2657 +
                       C39940 * C2775 + C40019 * C646 + C39939 * C784) *
                          C44729 +
                      (C40021 * C9369 + C39941 * C9483 + C40020 * C2654 +
                       C39940 * C2772 + C40019 * C642 + C39939 * C780) *
                          C20398) *
                         C44836 * C44803 * C44908) *
                        C1808 +
                    (((C40019 * C641 + C39939 * C779 + C40020 * C2655 +
                       C39940 * C2773 + C40021 * C9370 + C39941 * C9484) *
                          C20398 +
                      (C40019 * C645 + C39939 * C783 + C40020 * C2658 +
                       C39940 * C2776 + C40021 * C9372 + C39941 * C9486) *
                          C44729) *
                         C44836 * C44803 * C44908 -
                     ((C40021 * C4049 + C39941 * C4143 + C40020 * C1229 +
                       C39940 * C1367 + C40019 * C99 + C39939 * C229) *
                          C44729 +
                      (C40021 * C4046 + C39941 * C4140 + C40020 * C1225 +
                       C39940 * C1363 + C40019 * C94 + C39939 * C224) *
                          C20398) *
                         C44836 * C44803 * C1806) *
                        C44906)) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[75] += (2 * std::pow(Pi, 2.5) *
                   (((((C20398 * C93 + C44729 * C98) * C155 +
                       (C20398 * C156 + C44729 * C289) * C44836) *
                          C39939 +
                      (C40933 + C40934) * C39940 + (C40935 + C40936) * C39941) *
                         C44803 * C1806 -
                     ((C27496 * C44836 + C27497 * C155) * C39941 +
                      (C22810 * C44836 + C22811 * C155) * C39940 +
                      (C20979 * C44836 + C20978 * C155) * C39939) *
                         C44803 * C44908) *
                        C1808 +
                    (((C20982 * C155 + C20983 * C44836) * C39939 +
                      (C25092 * C155 + C25093 * C44836) * C39940 +
                      ((C20398 * C9370 + C44729 * C9372) * C155 +
                       (C20398 * C9430 + C44729 * C9538) * C44836) *
                          C39941) *
                         C44803 * C44908 -
                     ((C40946 + C40945) * C39941 + (C40938 + C40937) * C39940 +
                      ((C20398 * C157 + C44729 * C290) * C44836 +
                       (C20398 * C94 + C44729 * C99) * C155) *
                          C39939) *
                         C44803 * C1806) *
                        C44906)) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[75] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C332 * C93 + C339 + C339 + C44836 * C333) * C44729 * C39939 +
            C40997 * C39940 + C40998 * C39941) *
               C44803 * C1806 -
           ((C332 * C9369 + C13105 + C13105 + C44836 * C9589) * C44729 *
                C39941 +
            C13109 * C44729 * C39940 +
            (C332 * C642 + C913 + C913 + C44836 * C904) * C44729 * C39939) *
               C44803 * C44908) *
              C1808 +
          ((C920 * C44729 * C39939 + C10688 * C44729 * C39940 +
            (C332 * C9370 + C13106 + C13106 + C44836 * C9590) * C44729 *
                C39941) *
               C44803 * C44908 -
           (C41000 * C39941 + C40999 * C39940 + C356 * C44729 * C39939) *
               C44803 * C1806) *
              C44906)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[75] += (2 * std::pow(Pi, 2.5) *
                   ((((C40019 * C93 + C39939 * C223 + C40020 * C1226 +
                       C39940 * C1364 + C40021 * C4045 + C39941 * C4139) *
                          C155 +
                      (C40019 * C156 + C39939 * C396 + C40020 * C1294 +
                       C39940 * C1556 + C40021 * C4095 + C39941 * C4268) *
                          C44836) *
                         C44729 * C44803 * C1806 -
                     ((C40021 * C9429 + C39941 * C9645 + C40020 * C2716 +
                       C39940 * C2937 + C40019 * C710 + C39939 * C972) *
                          C44836 +
                      (C40021 * C9369 + C39941 * C9483 + C40020 * C2654 +
                       C39940 * C2772 + C40019 * C642 + C39939 * C780) *
                          C155) *
                         C44729 * C44803 * C44908) *
                        C1808 +
                    (((C40019 * C641 + C39939 * C779 + C40020 * C2655 +
                       C39940 * C2773 + C40021 * C9370 + C39941 * C9484) *
                          C155 +
                      (C40019 * C709 + C39939 * C971 + C40020 * C2717 +
                       C39940 * C2938 + C40021 * C9430 + C39941 * C9646) *
                          C44836) *
                         C44729 * C44803 * C44908 -
                     ((C40021 * C4096 + C39941 * C4269 + C40020 * C1293 +
                       C39940 * C1555 + C40019 * C157 + C39939 * C397) *
                          C44836 +
                      (C40021 * C4046 + C39941 * C4140 + C40020 * C1225 +
                       C39940 * C1363 + C40019 * C94 + C39939 * C224) *
                          C155) *
                         C44729 * C44803 * C1806) *
                        C44906)) /
                  (p * q * std::sqrt(p + q));
    d2eezx[75] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C20398 * C93 + C44729 * C98) * C40019 +
            (C20398 * C223 + C44729 * C455) * C39939 + C25751 * C40020 +
            C25971 * C39940 + C29293 * C40021 + C29463 * C39941) *
               C44836 * C44803 * C1806 -
           (C27719 * C39941 + C27497 * C40021 + C22978 * C39940 +
            C22811 * C40020 + C21154 * C39939 + C20978 * C40019) *
               C44836 * C44803 * C44908) *
              C1808 +
          ((C20982 * C40019 + C21156 * C39939 + C25092 * C40020 +
            C25307 * C39940 + (C20398 * C9370 + C44729 * C9372) * C40021 +
            (C20398 * C9484 + C44729 * C9698) * C39941) *
               C44836 * C44803 * C44908 -
           (C41103 * C39941 + C40943 * C40021 + C25972 * C39940 +
            C25753 * C40020 + (C20398 * C224 + C44729 * C456) * C39939 +
            (C20398 * C94 + C44729 * C99) * C40019) *
               C44836 * C44803 * C1806) *
              C44906)) /
        (p * q * std::sqrt(p + q));
    d2eezy[75] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C155 * C93 + C44836 * C156) * C40019 +
            (C155 * C223 + C44836 * C498) * C39939 + C11150 * C40020 +
            C11627 * C39940 + C14699 * C40021 + C15045 * C39941) *
               C44729 * C44803 * C1806 -
           ((C155 * C9483 + C44836 * C9749) * C39941 +
            (C155 * C9369 + C44836 * C9429) * C40021 + C13311 * C39940 +
            C12900 * C40020 + (C155 * C780 + C44836 * C1090) * C39939 +
            (C155 * C642 + C44836 * C710) * C40019) *
               C44729 * C44803 * C44908) *
              C1808 +
          ((C728 * C40019 + C1100 * C39939 + C10473 * C40020 + C10898 * C39940 +
            (C155 * C9370 + C44836 * C9430) * C40021 +
            (C155 * C9484 + C44836 * C9750) * C39941) *
               C44729 * C44803 * C44908 -
           (C11628 * C39941 + C11153 * C40021 + C1684 * C39940 +
            C1312 * C40020 + C513 * C39939 + C179 * C40019) *
               C44729 * C44803 * C1806) *
              C44906)) /
        (p * q * std::sqrt(p + q));
    d2eezz[75] += (2 * std::pow(Pi, 2.5) *
                   (((C40250 * C93 + C40254 + C40254 + C39939 * C558 +
                      C40251 * C1226 + C40255 + C40255 + C39940 * C1738 +
                      C40252 * C4045 + C40256 + C40256 + C39941 * C4391) *
                         C44836 * C44729 * C44803 * C1806 -
                     (C40252 * C9369 + C40713 + C40713 + C39941 * C9801 +
                      C40251 * C2654 + C40714 + C40714 + C39940 * C3096 +
                      C40250 * C642 + C40715 + C40715 + C39939 * C1154) *
                         C44836 * C44729 * C44803 * C44908) *
                        C1808 +
                    ((C40250 * C641 + C40716 + C40716 + C39939 * C1153 +
                      C40251 * C2655 + C40717 + C40717 + C39940 * C3097 +
                      C40252 * C9370 + C40718 + C40718 + C39941 * C9802) *
                         C44836 * C44729 * C44803 * C44908 -
                     (C40252 * C4046 + C40257 + C40257 + C39941 * C4392 +
                      C40251 * C1225 + C40258 + C40258 + C39940 * C1737 +
                      C40250 * C94 + C40259 + C40259 + C39939 * C559) *
                         C44836 * C44729 * C44803 * C1806) *
                        C44906)) /
                  (p * q * std::sqrt(p + q));
    d2eexx[76] +=
        (2 * std::pow(Pi, 2.5) *
         (((C20397 * C93 + C20400 + C20400 + C44729 * C103) * C39939 +
           C25527 * C39940 + C29118 * C39941) *
              C44836 * C44803 * C2248 -
          (C27264 * C39941 + C22632 * C39940 + C20796 * C39939) * C44836 *
              C44803 * C2249 +
          (C20797 * C39939 + C22631 * C39940 +
           (C20397 * C24026 + C24032 + C24032 + C44729 * C24028) * C39941) *
              C44836 * C44803 * C2250) *
         C44752) /
        (p * q * std::sqrt(p + q));
    d2eexy[76] += (2 * std::pow(Pi, 2.5) *
                   ((((C155 * C93 + C44836 * C156) * C20398 +
                      (C155 * C98 + C44836 * C161) * C44729) *
                         C39939 +
                     (C40825 + C40826) * C39940 + (C40827 + C40828) * C39941) *
                        C44803 * C2248 -
                    (((C155 * C9371 + C44836 * C9431) * C44729 +
                      (C155 * C9369 + C44836 * C9429) * C20398) *
                         C39941 +
                     (C12901 * C44729 + C12900 * C20398) * C39940 +
                     ((C155 * C646 + C44836 * C714) * C44729 +
                      (C155 * C642 + C44836 * C710) * C20398) *
                         C39939) *
                        C44803 * C2249 +
                    (((C155 * C2252 + C44836 * C2302) * C20398 +
                      (C155 * C2255 + C44836 * C2305) * C44729) *
                         C39939 +
                     ((C155 * C7523 + C44836 * C7607) * C20398 +
                      (C155 * C7525 + C44836 * C7609) * C44729) *
                         C39940 +
                     ((C155 * C24026 + C44836 * C24070) * C20398 +
                      (C155 * C24027 + C44836 * C24071) * C44729) *
                         C39941) *
                        C44803 * C2250) *
                   C44752) /
                  (p * q * std::sqrt(p + q));
    d2eexz[76] += (2 * std::pow(Pi, 2.5) *
                   (((C40019 * C93 + C39939 * C223 + C40020 * C1226 +
                      C39940 * C1364 + C40021 * C4045 + C39941 * C4139) *
                         C20398 +
                     (C40019 * C98 + C39939 * C228 + C40020 * C1230 +
                      C39940 * C1368 + C40021 * C4048 + C39941 * C4142) *
                         C44729) *
                        C44836 * C44803 * C2248 -
                    ((C40021 * C9371 + C39941 * C9485 + C40020 * C2657 +
                      C39940 * C2775 + C40019 * C646 + C39939 * C784) *
                         C44729 +
                     (C40021 * C9369 + C39941 * C9483 + C40020 * C2654 +
                      C39940 * C2772 + C40019 * C642 + C39939 * C780) *
                         C20398) *
                        C44836 * C44803 * C2249 +
                    ((C40019 * C2252 + C39939 * C2346 + C40020 * C7523 +
                      C39940 * C7677 + C40021 * C24026 + C39941 * C24110) *
                         C20398 +
                     (C40019 * C2255 + C39939 * C2349 + C40020 * C7525 +
                      C39940 * C7679 + C40021 * C24027 + C39941 * C24111) *
                         C44729) *
                        C44836 * C44803 * C2250) *
                   C44752) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[76] += (2 * std::pow(Pi, 2.5) *
                   ((((C20398 * C93 + C44729 * C98) * C155 +
                      (C20398 * C156 + C44729 * C289) * C44836) *
                         C39939 +
                     (C40933 + C40934) * C39940 + (C40935 + C40936) * C39941) *
                        C44803 * C2248 -
                    ((C27496 * C44836 + C27497 * C155) * C39941 +
                     (C22810 * C44836 + C22811 * C155) * C39940 +
                     (C20979 * C44836 + C20978 * C155) * C39939) *
                        C44803 * C2249 +
                    ((C20980 * C155 + C20981 * C44836) * C39939 +
                     (C22809 * C155 + C22808 * C44836) * C39940 +
                     ((C20398 * C24026 + C44729 * C24027) * C155 +
                      (C20398 * C24070 + C44729 * C24150) * C44836) *
                         C39941) *
                        C44803 * C2250) *
                   C44752) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[76] +=
        (2 * std::pow(Pi, 2.5) *
         (((C332 * C93 + C339 + C339 + C44836 * C333) * C44729 * C39939 +
           C40997 * C39940 + C40998 * C39941) *
              C44803 * C2248 -
          ((C332 * C9369 + C13105 + C13105 + C44836 * C9589) * C44729 * C39941 +
           C13109 * C44729 * C39940 +
           (C332 * C642 + C913 + C913 + C44836 * C904) * C44729 * C39939) *
              C44803 * C2249 +
          ((C332 * C2252 + C2435 + C2435 + C44836 * C2431) * C44729 * C39939 +
           (C332 * C7523 + C12556 + C12556 + C44836 * C7837) * C44729 * C39940 +
           (C332 * C24026 + C41850 + C41850 + C44836 * C24189) * C44729 *
               C39941) *
              C44803 * C2250) *
         C44752) /
        (p * q * std::sqrt(p + q));
    d2eeyz[76] += (2 * std::pow(Pi, 2.5) *
                   (((C40019 * C93 + C39939 * C223 + C40020 * C1226 +
                      C39940 * C1364 + C40021 * C4045 + C39941 * C4139) *
                         C155 +
                     (C40019 * C156 + C39939 * C396 + C40020 * C1294 +
                      C39940 * C1556 + C40021 * C4095 + C39941 * C4268) *
                         C44836) *
                        C44729 * C44803 * C2248 -
                    ((C40021 * C9429 + C39941 * C9645 + C40020 * C2716 +
                      C39940 * C2937 + C40019 * C710 + C39939 * C972) *
                         C44836 +
                     (C40021 * C9369 + C39941 * C9483 + C40020 * C2654 +
                      C39940 * C2772 + C40019 * C642 + C39939 * C780) *
                         C155) *
                        C44729 * C44803 * C2249 +
                    ((C40019 * C2252 + C39939 * C2346 + C40020 * C7523 +
                      C39940 * C7677 + C40021 * C24026 + C39941 * C24110) *
                         C155 +
                     (C40019 * C2302 + C39939 * C2475 + C40020 * C7607 +
                      C39940 * C7909 + C40021 * C24070 + C39941 * C24231) *
                         C44836) *
                        C44729 * C44803 * C2250) *
                   C44752) /
                  (p * q * std::sqrt(p + q));
    d2eezx[76] +=
        (2 * std::pow(Pi, 2.5) *
         (((C20398 * C93 + C44729 * C98) * C40019 +
           (C20398 * C223 + C44729 * C455) * C39939 + C25751 * C40020 +
           C25971 * C39940 + C29293 * C40021 + C29463 * C39941) *
              C44836 * C44803 * C2248 -
          (C27719 * C39941 + C27497 * C40021 + C22978 * C39940 +
           C22811 * C40020 + C21154 * C39939 + C20978 * C40019) *
              C44836 * C44803 * C2249 +
          (C20980 * C40019 + C21155 * C39939 + C22809 * C40020 +
           C22977 * C39940 + (C20398 * C24026 + C44729 * C24027) * C40021 +
           (C20398 * C24110 + C44729 * C24270) * C39941) *
              C44836 * C44803 * C2250) *
         C44752) /
        (p * q * std::sqrt(p + q));
    d2eezy[76] +=
        (2 * std::pow(Pi, 2.5) *
         (((C155 * C93 + C44836 * C156) * C40019 +
           (C155 * C223 + C44836 * C498) * C39939 + C11150 * C40020 +
           C11627 * C39940 + C14699 * C40021 + C15045 * C39941) *
              C44729 * C44803 * C2248 -
          ((C155 * C9483 + C44836 * C9749) * C39941 +
           (C155 * C9369 + C44836 * C9429) * C40021 + C13311 * C39940 +
           C12900 * C40020 + (C155 * C780 + C44836 * C1090) * C39939 +
           (C155 * C642 + C44836 * C710) * C40019) *
              C44729 * C44803 * C2249 +
          ((C155 * C2252 + C44836 * C2302) * C40019 +
           (C155 * C2346 + C44836 * C2557) * C39939 +
           (C155 * C7523 + C44836 * C7607) * C40020 +
           (C155 * C7677 + C44836 * C8054) * C39940 +
           (C155 * C24026 + C44836 * C24070) * C40021 +
           (C155 * C24110 + C44836 * C24309) * C39941) *
              C44729 * C44803 * C2250) *
         C44752) /
        (p * q * std::sqrt(p + q));
    d2eezz[76] += (2 * std::pow(Pi, 2.5) *
                   ((C40250 * C93 + C40254 + C40254 + C39939 * C558 +
                     C40251 * C1226 + C40255 + C40255 + C39940 * C1738 +
                     C40252 * C4045 + C40256 + C40256 + C39941 * C4391) *
                        C44836 * C44729 * C44803 * C2248 -
                    (C40252 * C9369 + C40713 + C40713 + C39941 * C9801 +
                     C40251 * C2654 + C40714 + C40714 + C39940 * C3096 +
                     C40250 * C642 + C40715 + C40715 + C39939 * C1154) *
                        C44836 * C44729 * C44803 * C2249 +
                    (C40250 * C2252 + C42003 + C42003 + C39939 * C2598 +
                     C40251 * C7523 + C42004 + C42004 + C39940 * C8122 +
                     C40252 * C24026 + C42005 + C42005 + C39941 * C24348) *
                        C44836 * C44729 * C44803 * C2250) *
                   C44752) /
                  (p * q * std::sqrt(p + q));
    d2eexx[77] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C20397 * C93 + C20400 + C20400 + C44729 * C103) * C39939 +
            C25527 * C39940 + C29118 * C39941) *
               C44836 * C1222 -
           ((C20397 * C14619 + C29114 + C29114 + C44729 * C14623) * C39941 +
            C29118 * C39940 + C25527 * C39939) *
               C44836 * C44910) *
              C1806 +
          ((C22632 * C39939 + C27264 * C39940 +
            (C20397 * C29108 + C29115 + C29115 + C44729 * C29110) * C39941) *
               C44836 * C44910 -
           (C27264 * C39941 + C22632 * C39940 + C20796 * C39939) * C44836 *
               C1222) *
              C44908) *
         C44752) /
        (p * q * std::sqrt(p + q));
    d2eexy[77] += (2 * std::pow(Pi, 2.5) *
                   (((((C155 * C93 + C44836 * C156) * C20398 +
                       (C155 * C98 + C44836 * C161) * C44729) *
                          C39939 +
                      (C40825 + C40826) * C39940 + (C40827 + C40828) * C39941) *
                         C1222 -
                     (((C155 * C14621 + C44836 * C14689) * C44729 +
                       (C155 * C14619 + C44836 * C14687) * C20398) *
                          C39941 +
                      (C40828 + C40827) * C39940 + (C40826 + C40825) * C39939) *
                         C44910) *
                        C1806 +
                    (((C42106 + C42107) * C39939 + (C42114 + C42115) * C39940 +
                      ((C155 * C29108 + C44836 * C29168) * C20398 +
                       (C155 * C29109 + C44836 * C29169) * C44729) *
                          C39941) *
                         C44910 -
                     ((C42115 + C42114) * C39941 + (C42107 + C42106) * C39940 +
                      ((C155 * C646 + C44836 * C714) * C44729 +
                       (C155 * C642 + C44836 * C710) * C20398) *
                          C39939) *
                         C1222) *
                        C44908) *
                   C44752) /
                  (p * q * std::sqrt(p + q));
    d2eexz[77] += (2 * std::pow(Pi, 2.5) *
                   ((((C40019 * C93 + C39939 * C223 + C40020 * C1226 +
                       C39940 * C1364 + C40021 * C4045 + C39941 * C4139) *
                          C20398 +
                      (C40019 * C98 + C39939 * C228 + C40020 * C1230 +
                       C39940 * C1368 + C40021 * C4048 + C39941 * C4142) *
                          C44729) *
                         C44836 * C1222 -
                     ((C40021 * C14621 + C39941 * C14753 + C40020 * C4048 +
                       C39940 * C4142 + C40019 * C1230 + C39939 * C1368) *
                          C44729 +
                      (C40021 * C14619 + C39941 * C14751 + C40020 * C4045 +
                       C39940 * C4139 + C40019 * C1226 + C39939 * C1364) *
                          C20398) *
                         C44836 * C44910) *
                        C1806 +
                    (((C40019 * C2654 + C39939 * C2772 + C40020 * C9369 +
                       C39940 * C9483 + C40021 * C29108 + C39941 * C29232) *
                          C20398 +
                      (C40019 * C2657 + C39939 * C2775 + C40020 * C9371 +
                       C39940 * C9485 + C40021 * C29109 + C39941 * C29233) *
                          C44729) *
                         C44836 * C44910 -
                     ((C40021 * C9371 + C39941 * C9485 + C40020 * C2657 +
                       C39940 * C2775 + C40019 * C646 + C39939 * C784) *
                          C44729 +
                      (C40021 * C9369 + C39941 * C9483 + C40020 * C2654 +
                       C39940 * C2772 + C40019 * C642 + C39939 * C780) *
                          C20398) *
                         C44836 * C1222) *
                        C44908) *
                   C44752) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[77] += (2 * std::pow(Pi, 2.5) *
                   (((((C20398 * C93 + C44729 * C98) * C155 +
                       (C20398 * C156 + C44729 * C289) * C44836) *
                          C39939 +
                      (C40933 + C40934) * C39940 + (C40935 + C40936) * C39941) *
                         C1222 -
                     (((C20398 * C14687 + C44729 * C14805) * C44836 +
                       (C20398 * C14619 + C44729 * C14621) * C155) *
                          C39941 +
                      (C40936 + C40935) * C39940 + (C40934 + C40933) * C39939) *
                         C44910) *
                        C1806 +
                    (((C42216 + C42217) * C39939 + (C42218 + C42219) * C39940 +
                      ((C20398 * C29108 + C44729 * C29109) * C155 +
                       (C20398 * C29168 + C44729 * C29284) * C44836) *
                          C39941) *
                         C44910 -
                     ((C42219 + C42218) * C39941 + (C42217 + C42216) * C39940 +
                      (C20979 * C44836 + C20978 * C155) * C39939) *
                         C1222) *
                        C44908) *
                   C44752) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[77] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C332 * C93 + C339 + C339 + C44836 * C333) * C44729 * C39939 +
            C40997 * C39940 + C40998 * C39941) *
               C1222 -
           ((C332 * C14619 + C14875 + C14875 + C44836 * C14869) * C44729 *
                C39941 +
            C40998 * C39940 + C40997 * C39939) *
               C44910) *
              C1806 +
          ((C42270 * C39939 + C42277 * C39940 +
            (C332 * C29108 + C42273 + C42273 + C44836 * C29345) * C44729 *
                C39941) *
               C44910 -
           (C42277 * C39941 + C42270 * C39940 +
            (C332 * C642 + C913 + C913 + C44836 * C904) * C44729 * C39939) *
               C1222) *
              C44908) *
         C44752) /
        (p * q * std::sqrt(p + q));
    d2eeyz[77] += (2 * std::pow(Pi, 2.5) *
                   ((((C40019 * C93 + C39939 * C223 + C40020 * C1226 +
                       C39940 * C1364 + C40021 * C4045 + C39941 * C4139) *
                          C155 +
                      (C40019 * C156 + C39939 * C396 + C40020 * C1294 +
                       C39940 * C1556 + C40021 * C4095 + C39941 * C4268) *
                          C44836) *
                         C44729 * C1222 -
                     ((C40021 * C14687 + C39941 * C14930 + C40020 * C4095 +
                       C39940 * C4268 + C40019 * C1294 + C39939 * C1556) *
                          C44836 +
                      (C40021 * C14619 + C39941 * C14751 + C40020 * C4045 +
                       C39940 * C4139 + C40019 * C1226 + C39939 * C1364) *
                          C155) *
                         C44729 * C44910) *
                        C1806 +
                    (((C40019 * C2654 + C39939 * C2772 + C40020 * C9369 +
                       C39940 * C9483 + C40021 * C29108 + C39941 * C29232) *
                          C155 +
                      (C40019 * C2716 + C39939 * C2937 + C40020 * C9429 +
                       C39940 * C9645 + C40021 * C29168 + C39941 * C29408) *
                          C44836) *
                         C44729 * C44910 -
                     ((C40021 * C9429 + C39941 * C9645 + C40020 * C2716 +
                       C39940 * C2937 + C40019 * C710 + C39939 * C972) *
                          C44836 +
                      (C40021 * C9369 + C39941 * C9483 + C40020 * C2654 +
                       C39940 * C2772 + C40019 * C642 + C39939 * C780) *
                          C155) *
                         C44729 * C1222) *
                        C44908) *
                   C44752) /
                  (p * q * std::sqrt(p + q));
    d2eezx[77] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C20398 * C93 + C44729 * C98) * C40019 +
            (C20398 * C223 + C44729 * C455) * C39939 + C25751 * C40020 +
            C25971 * C39940 + C29293 * C40021 + C29463 * C39941) *
               C44836 * C1222 -
           ((C20398 * C14751 + C44729 * C14982) * C39941 +
            (C20398 * C14619 + C44729 * C14621) * C40021 + C29463 * C39940 +
            C29293 * C40020 + C25971 * C39939 + C25751 * C40019) *
               C44836 * C44910) *
              C1806 +
          ((C22811 * C40019 + C22978 * C39939 + C27497 * C40020 +
            C27719 * C39940 + (C20398 * C29108 + C44729 * C29109) * C40021 +
            (C20398 * C29232 + C44729 * C29459) * C39941) *
               C44836 * C44910 -
           (C27719 * C39941 + C27497 * C40021 + C22978 * C39940 +
            C22811 * C40020 + C21154 * C39939 + C20978 * C40019) *
               C44836 * C1222) *
              C44908) *
         C44752) /
        (p * q * std::sqrt(p + q));
    d2eezy[77] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C155 * C93 + C44836 * C156) * C40019 +
            (C155 * C223 + C44836 * C498) * C39939 + C11150 * C40020 +
            C11627 * C39940 + C14699 * C40021 + C15045 * C39941) *
               C44729 * C1222 -
           ((C155 * C14751 + C44836 * C15040) * C39941 +
            (C155 * C14619 + C44836 * C14687) * C40021 + C15045 * C39940 +
            C14699 * C40020 + C11627 * C39939 + C11150 * C40019) *
               C44729 * C44910) *
              C1806 +
          ((C12900 * C40019 + C13311 * C39939 + C42112 * C40020 +
            C42430 * C39940 + (C155 * C29108 + C44836 * C29168) * C40021 +
            (C155 * C29232 + C44836 * C29513) * C39941) *
               C44729 * C44910 -
           (C42430 * C39941 + C42112 * C40021 + C13311 * C39940 +
            C12900 * C40020 + (C155 * C780 + C44836 * C1090) * C39939 +
            (C155 * C642 + C44836 * C710) * C40019) *
               C44729 * C1222) *
              C44908) *
         C44752) /
        (p * q * std::sqrt(p + q));
    d2eezz[77] += (2 * std::pow(Pi, 2.5) *
                   (((C40250 * C93 + C40254 + C40254 + C39939 * C558 +
                      C40251 * C1226 + C40255 + C40255 + C39940 * C1738 +
                      C40252 * C4045 + C40256 + C40256 + C39941 * C4391) *
                         C44836 * C44729 * C1222 -
                     (C40252 * C14619 + C41204 + C41204 + C39941 * C15095 +
                      C40251 * C4045 + C41205 + C41205 + C39940 * C4391 +
                      C40250 * C1226 + C41206 + C41206 + C39939 * C1738) *
                         C44836 * C44729 * C44910) *
                        C1806 +
                    ((C40250 * C2654 + C42481 + C42481 + C39939 * C3096 +
                      C40251 * C9369 + C42482 + C42482 + C39940 * C9801 +
                      C40252 * C29108 + C42483 + C42483 + C39941 * C29570) *
                         C44836 * C44729 * C44910 -
                     (C40252 * C9369 + C40713 + C40713 + C39941 * C9801 +
                      C40251 * C2654 + C40714 + C40714 + C39940 * C3096 +
                      C40250 * C642 + C40715 + C40715 + C39939 * C1154) *
                         C44836 * C44729 * C1222) *
                        C44908) *
                   C44752) /
                  (p * q * std::sqrt(p + q));
    d2eexx[78] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C20397 * C93 + C20400 + C20400 + C44729 * C103) * C39939 +
            C25527 * C39940 + C29118 * C39941) *
               C44836 * C3152 -
           ((C20397 * C14619 + C29114 + C29114 + C44729 * C14623) * C39941 +
            C29118 * C39940 + C25527 * C39939) *
               C44836 * C44910) *
              C44786 * C1808 +
          ((C25528 * C39939 + C40774 * C39940 +
            (C20397 * C14620 + C40771 + C40771 + C44729 * C14624) * C39941) *
               C44836 * C44910 -
           (C40774 * C39941 + C25528 * C39940 +
            (C20397 * C94 + C20405 + C20405 + C44729 * C104) * C39939) *
               C44836 * C3152) *
              C44786 * C44906)) /
        (p * q * std::sqrt(p + q));
    d2eexy[78] += (2 * std::pow(Pi, 2.5) *
                   (((((C155 * C93 + C44836 * C156) * C20398 +
                       (C155 * C98 + C44836 * C161) * C44729) *
                          C39939 +
                      (C40825 + C40826) * C39940 + (C40827 + C40828) * C39941) *
                         C3152 -
                     (((C155 * C14621 + C44836 * C14689) * C44729 +
                       (C155 * C14619 + C44836 * C14687) * C20398) *
                          C39941 +
                      (C40828 + C40827) * C39940 + (C40826 + C40825) * C39939) *
                         C44910) *
                        C44786 * C1808 +
                    (((C40829 + C40830) * C39939 + (C40831 + C40832) * C39940 +
                      ((C155 * C14620 + C44836 * C14688) * C20398 +
                       (C155 * C14622 + C44836 * C14690) * C44729) *
                          C39941) *
                         C44910 -
                     ((C40832 + C40831) * C39941 + (C40830 + C40829) * C39940 +
                      (C180 * C44729 + C179 * C20398) * C39939) *
                         C3152) *
                        C44786 * C44906)) /
                  (p * q * std::sqrt(p + q));
    d2eexz[78] += (2 * std::pow(Pi, 2.5) *
                   ((((C40019 * C93 + C39939 * C223 + C40020 * C1226 +
                       C39940 * C1364 + C40021 * C4045 + C39941 * C4139) *
                          C20398 +
                      (C40019 * C98 + C39939 * C228 + C40020 * C1230 +
                       C39940 * C1368 + C40021 * C4048 + C39941 * C4142) *
                          C44729) *
                         C44836 * C3152 -
                     ((C40021 * C14621 + C39941 * C14753 + C40020 * C4048 +
                       C39940 * C4142 + C40019 * C1230 + C39939 * C1368) *
                          C44729 +
                      (C40021 * C14619 + C39941 * C14751 + C40020 * C4045 +
                       C39940 * C4139 + C40019 * C1226 + C39939 * C1364) *
                          C20398) *
                         C44836 * C44910) *
                        C44786 * C1808 +
                    (((C40019 * C1225 + C39939 * C1363 + C40020 * C4046 +
                       C39940 * C4140 + C40021 * C14620 + C39941 * C14752) *
                          C20398 +
                      (C40019 * C1229 + C39939 * C1367 + C40020 * C4049 +
                       C39940 * C4143 + C40021 * C14622 + C39941 * C14754) *
                          C44729) *
                         C44836 * C44910 -
                     ((C40021 * C4049 + C39941 * C4143 + C40020 * C1229 +
                       C39940 * C1367 + C40019 * C99 + C39939 * C229) *
                          C44729 +
                      (C40021 * C4046 + C39941 * C4140 + C40020 * C1225 +
                       C39940 * C1363 + C40019 * C94 + C39939 * C224) *
                          C20398) *
                         C44836 * C3152) *
                        C44786 * C44906)) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[78] += (2 * std::pow(Pi, 2.5) *
                   (((((C20398 * C93 + C44729 * C98) * C155 +
                       (C20398 * C156 + C44729 * C289) * C44836) *
                          C39939 +
                      (C40933 + C40934) * C39940 + (C40935 + C40936) * C39941) *
                         C3152 -
                     (((C20398 * C14687 + C44729 * C14805) * C44836 +
                       (C20398 * C14619 + C44729 * C14621) * C155) *
                          C39941 +
                      (C40936 + C40935) * C39940 + (C40934 + C40933) * C39939) *
                         C44910) *
                        C44786 * C1808 +
                    (((C40937 + C40938) * C39939 + (C40945 + C40946) * C39940 +
                      ((C20398 * C14620 + C44729 * C14622) * C155 +
                       (C20398 * C14688 + C44729 * C14806) * C44836) *
                          C39941) *
                         C44910 -
                     ((C40946 + C40945) * C39941 + (C40938 + C40937) * C39940 +
                      ((C20398 * C157 + C44729 * C290) * C44836 +
                       (C20398 * C94 + C44729 * C99) * C155) *
                          C39939) *
                         C3152) *
                        C44786 * C44906)) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[78] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C332 * C93 + C339 + C339 + C44836 * C333) * C44729 * C39939 +
            C40997 * C39940 + C40998 * C39941) *
               C3152 -
           ((C332 * C14619 + C14875 + C14875 + C44836 * C14869) * C44729 *
                C39941 +
            C40998 * C39940 + C40997 * C39939) *
               C44910) *
              C44786 * C1808 +
          ((C40999 * C39939 + C41000 * C39940 +
            (C332 * C14620 + C14876 + C14876 + C44836 * C14870) * C44729 *
                C39941) *
               C44910 -
           (C41000 * C39941 + C40999 * C39940 + C356 * C44729 * C39939) *
               C3152) *
              C44786 * C44906)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[78] += (2 * std::pow(Pi, 2.5) *
                   ((((C40019 * C93 + C39939 * C223 + C40020 * C1226 +
                       C39940 * C1364 + C40021 * C4045 + C39941 * C4139) *
                          C155 +
                      (C40019 * C156 + C39939 * C396 + C40020 * C1294 +
                       C39940 * C1556 + C40021 * C4095 + C39941 * C4268) *
                          C44836) *
                         C44729 * C3152 -
                     ((C40021 * C14687 + C39941 * C14930 + C40020 * C4095 +
                       C39940 * C4268 + C40019 * C1294 + C39939 * C1556) *
                          C44836 +
                      (C40021 * C14619 + C39941 * C14751 + C40020 * C4045 +
                       C39940 * C4139 + C40019 * C1226 + C39939 * C1364) *
                          C155) *
                         C44729 * C44910) *
                        C44786 * C1808 +
                    (((C40019 * C1225 + C39939 * C1363 + C40020 * C4046 +
                       C39940 * C4140 + C40021 * C14620 + C39941 * C14752) *
                          C155 +
                      (C40019 * C1293 + C39939 * C1555 + C40020 * C4096 +
                       C39940 * C4269 + C40021 * C14688 + C39941 * C14931) *
                          C44836) *
                         C44729 * C44910 -
                     ((C40021 * C4096 + C39941 * C4269 + C40020 * C1293 +
                       C39940 * C1555 + C40019 * C157 + C39939 * C397) *
                          C44836 +
                      (C40021 * C4046 + C39941 * C4140 + C40020 * C1225 +
                       C39940 * C1363 + C40019 * C94 + C39939 * C224) *
                          C155) *
                         C44729 * C3152) *
                        C44786 * C44906)) /
                  (p * q * std::sqrt(p + q));
    d2eezx[78] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C20398 * C93 + C44729 * C98) * C40019 +
            (C20398 * C223 + C44729 * C455) * C39939 + C25751 * C40020 +
            C25971 * C39940 + C29293 * C40021 + C29463 * C39941) *
               C44836 * C3152 -
           ((C20398 * C14751 + C44729 * C14982) * C39941 +
            (C20398 * C14619 + C44729 * C14621) * C40021 + C29463 * C39940 +
            C29293 * C40020 + C25971 * C39939 + C25751 * C40019) *
               C44836 * C44910) *
              C44786 * C1808 +
          ((C25753 * C40019 + C25972 * C39939 + C40943 * C40020 +
            C41103 * C39940 + (C20398 * C14620 + C44729 * C14622) * C40021 +
            (C20398 * C14752 + C44729 * C14983) * C39941) *
               C44836 * C44910 -
           (C41103 * C39941 + C40943 * C40021 + C25972 * C39940 +
            C25753 * C40020 + (C20398 * C224 + C44729 * C456) * C39939 +
            (C20398 * C94 + C44729 * C99) * C40019) *
               C44836 * C3152) *
              C44786 * C44906)) /
        (p * q * std::sqrt(p + q));
    d2eezy[78] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C155 * C93 + C44836 * C156) * C40019 +
            (C155 * C223 + C44836 * C498) * C39939 + C11150 * C40020 +
            C11627 * C39940 + C14699 * C40021 + C15045 * C39941) *
               C44729 * C3152 -
           ((C155 * C14751 + C44836 * C15040) * C39941 +
            (C155 * C14619 + C44836 * C14687) * C40021 + C15045 * C39940 +
            C14699 * C40020 + C11627 * C39939 + C11150 * C40019) *
               C44729 * C44910) *
              C44786 * C1808 +
          ((C1312 * C40019 + C1684 * C39939 + C11153 * C40020 +
            C11628 * C39940 + (C155 * C14620 + C44836 * C14688) * C40021 +
            (C155 * C14752 + C44836 * C15041) * C39941) *
               C44729 * C44910 -
           (C11628 * C39941 + C11153 * C40021 + C1684 * C39940 +
            C1312 * C40020 + C513 * C39939 + C179 * C40019) *
               C44729 * C3152) *
              C44786 * C44906)) /
        (p * q * std::sqrt(p + q));
    d2eezz[78] += (2 * std::pow(Pi, 2.5) *
                   (((C40250 * C93 + C40254 + C40254 + C39939 * C558 +
                      C40251 * C1226 + C40255 + C40255 + C39940 * C1738 +
                      C40252 * C4045 + C40256 + C40256 + C39941 * C4391) *
                         C44836 * C44729 * C3152 -
                     (C40252 * C14619 + C41204 + C41204 + C39941 * C15095 +
                      C40251 * C4045 + C41205 + C41205 + C39940 * C4391 +
                      C40250 * C1226 + C41206 + C41206 + C39939 * C1738) *
                         C44836 * C44729 * C44910) *
                        C44786 * C1808 +
                    ((C40250 * C1225 + C41207 + C41207 + C39939 * C1737 +
                      C40251 * C4046 + C41208 + C41208 + C39940 * C4392 +
                      C40252 * C14620 + C41209 + C41209 + C39941 * C15096) *
                         C44836 * C44729 * C44910 -
                     (C40252 * C4046 + C40257 + C40257 + C39941 * C4392 +
                      C40251 * C1225 + C40258 + C40258 + C39940 * C1737 +
                      C40250 * C94 + C40259 + C40259 + C39939 * C559) *
                         C44836 * C44729 * C3152) *
                        C44786 * C44906)) /
                  (p * q * std::sqrt(p + q));
    d2eexx[79] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C20397 * C93 + C20400 + C20400 + C44729 * C103) * C39939 +
            C25527 * C39940 + C29118 * C39941) *
               C44836 * C3152 -
           ((C20397 * C14619 + C29114 + C29114 + C44729 * C14623) * C39941 +
            C29118 * C39940 + C25527 * C39939) *
               C44836 * C44910) *
              C636 +
          ((C22632 * C39939 + C27264 * C39940 +
            (C20397 * C29108 + C29115 + C29115 + C44729 * C29110) * C39941) *
               C44836 * C44910 -
           (C27264 * C39941 + C22632 * C39940 + C20796 * C39939) * C44836 *
               C3152) *
              C44908) *
         C44752) /
        (p * q * std::sqrt(p + q));
    d2eexy[79] += (2 * std::pow(Pi, 2.5) *
                   (((((C155 * C93 + C44836 * C156) * C20398 +
                       (C155 * C98 + C44836 * C161) * C44729) *
                          C39939 +
                      (C40825 + C40826) * C39940 + (C40827 + C40828) * C39941) *
                         C3152 -
                     (((C155 * C14621 + C44836 * C14689) * C44729 +
                       (C155 * C14619 + C44836 * C14687) * C20398) *
                          C39941 +
                      (C40828 + C40827) * C39940 + (C40826 + C40825) * C39939) *
                         C44910) *
                        C636 +
                    (((C42106 + C42107) * C39939 + (C42114 + C42115) * C39940 +
                      ((C155 * C29108 + C44836 * C29168) * C20398 +
                       (C155 * C29109 + C44836 * C29169) * C44729) *
                          C39941) *
                         C44910 -
                     ((C42115 + C42114) * C39941 + (C42107 + C42106) * C39940 +
                      ((C155 * C646 + C44836 * C714) * C44729 +
                       (C155 * C642 + C44836 * C710) * C20398) *
                          C39939) *
                         C3152) *
                        C44908) *
                   C44752) /
                  (p * q * std::sqrt(p + q));
    d2eexz[79] += (2 * std::pow(Pi, 2.5) *
                   ((((C40019 * C93 + C39939 * C223 + C40020 * C1226 +
                       C39940 * C1364 + C40021 * C4045 + C39941 * C4139) *
                          C20398 +
                      (C40019 * C98 + C39939 * C228 + C40020 * C1230 +
                       C39940 * C1368 + C40021 * C4048 + C39941 * C4142) *
                          C44729) *
                         C44836 * C3152 -
                     ((C40021 * C14621 + C39941 * C14753 + C40020 * C4048 +
                       C39940 * C4142 + C40019 * C1230 + C39939 * C1368) *
                          C44729 +
                      (C40021 * C14619 + C39941 * C14751 + C40020 * C4045 +
                       C39940 * C4139 + C40019 * C1226 + C39939 * C1364) *
                          C20398) *
                         C44836 * C44910) *
                        C636 +
                    (((C40019 * C2654 + C39939 * C2772 + C40020 * C9369 +
                       C39940 * C9483 + C40021 * C29108 + C39941 * C29232) *
                          C20398 +
                      (C40019 * C2657 + C39939 * C2775 + C40020 * C9371 +
                       C39940 * C9485 + C40021 * C29109 + C39941 * C29233) *
                          C44729) *
                         C44836 * C44910 -
                     ((C40021 * C9371 + C39941 * C9485 + C40020 * C2657 +
                       C39940 * C2775 + C40019 * C646 + C39939 * C784) *
                          C44729 +
                      (C40021 * C9369 + C39941 * C9483 + C40020 * C2654 +
                       C39940 * C2772 + C40019 * C642 + C39939 * C780) *
                          C20398) *
                         C44836 * C3152) *
                        C44908) *
                   C44752) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[79] += (2 * std::pow(Pi, 2.5) *
                   (((((C20398 * C93 + C44729 * C98) * C155 +
                       (C20398 * C156 + C44729 * C289) * C44836) *
                          C39939 +
                      (C40933 + C40934) * C39940 + (C40935 + C40936) * C39941) *
                         C3152 -
                     (((C20398 * C14687 + C44729 * C14805) * C44836 +
                       (C20398 * C14619 + C44729 * C14621) * C155) *
                          C39941 +
                      (C40936 + C40935) * C39940 + (C40934 + C40933) * C39939) *
                         C44910) *
                        C636 +
                    (((C42216 + C42217) * C39939 + (C42218 + C42219) * C39940 +
                      ((C20398 * C29108 + C44729 * C29109) * C155 +
                       (C20398 * C29168 + C44729 * C29284) * C44836) *
                          C39941) *
                         C44910 -
                     ((C42219 + C42218) * C39941 + (C42217 + C42216) * C39940 +
                      (C20979 * C44836 + C20978 * C155) * C39939) *
                         C3152) *
                        C44908) *
                   C44752) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[79] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C332 * C93 + C339 + C339 + C44836 * C333) * C44729 * C39939 +
            C40997 * C39940 + C40998 * C39941) *
               C3152 -
           ((C332 * C14619 + C14875 + C14875 + C44836 * C14869) * C44729 *
                C39941 +
            C40998 * C39940 + C40997 * C39939) *
               C44910) *
              C636 +
          ((C42270 * C39939 + C42277 * C39940 +
            (C332 * C29108 + C42273 + C42273 + C44836 * C29345) * C44729 *
                C39941) *
               C44910 -
           (C42277 * C39941 + C42270 * C39940 +
            (C332 * C642 + C913 + C913 + C44836 * C904) * C44729 * C39939) *
               C3152) *
              C44908) *
         C44752) /
        (p * q * std::sqrt(p + q));
    d2eeyz[79] += (2 * std::pow(Pi, 2.5) *
                   ((((C40019 * C93 + C39939 * C223 + C40020 * C1226 +
                       C39940 * C1364 + C40021 * C4045 + C39941 * C4139) *
                          C155 +
                      (C40019 * C156 + C39939 * C396 + C40020 * C1294 +
                       C39940 * C1556 + C40021 * C4095 + C39941 * C4268) *
                          C44836) *
                         C44729 * C3152 -
                     ((C40021 * C14687 + C39941 * C14930 + C40020 * C4095 +
                       C39940 * C4268 + C40019 * C1294 + C39939 * C1556) *
                          C44836 +
                      (C40021 * C14619 + C39941 * C14751 + C40020 * C4045 +
                       C39940 * C4139 + C40019 * C1226 + C39939 * C1364) *
                          C155) *
                         C44729 * C44910) *
                        C636 +
                    (((C40019 * C2654 + C39939 * C2772 + C40020 * C9369 +
                       C39940 * C9483 + C40021 * C29108 + C39941 * C29232) *
                          C155 +
                      (C40019 * C2716 + C39939 * C2937 + C40020 * C9429 +
                       C39940 * C9645 + C40021 * C29168 + C39941 * C29408) *
                          C44836) *
                         C44729 * C44910 -
                     ((C40021 * C9429 + C39941 * C9645 + C40020 * C2716 +
                       C39940 * C2937 + C40019 * C710 + C39939 * C972) *
                          C44836 +
                      (C40021 * C9369 + C39941 * C9483 + C40020 * C2654 +
                       C39940 * C2772 + C40019 * C642 + C39939 * C780) *
                          C155) *
                         C44729 * C3152) *
                        C44908) *
                   C44752) /
                  (p * q * std::sqrt(p + q));
    d2eezx[79] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C20398 * C93 + C44729 * C98) * C40019 +
            (C20398 * C223 + C44729 * C455) * C39939 + C25751 * C40020 +
            C25971 * C39940 + C29293 * C40021 + C29463 * C39941) *
               C44836 * C3152 -
           ((C20398 * C14751 + C44729 * C14982) * C39941 +
            (C20398 * C14619 + C44729 * C14621) * C40021 + C29463 * C39940 +
            C29293 * C40020 + C25971 * C39939 + C25751 * C40019) *
               C44836 * C44910) *
              C636 +
          ((C22811 * C40019 + C22978 * C39939 + C27497 * C40020 +
            C27719 * C39940 + (C20398 * C29108 + C44729 * C29109) * C40021 +
            (C20398 * C29232 + C44729 * C29459) * C39941) *
               C44836 * C44910 -
           (C27719 * C39941 + C27497 * C40021 + C22978 * C39940 +
            C22811 * C40020 + C21154 * C39939 + C20978 * C40019) *
               C44836 * C3152) *
              C44908) *
         C44752) /
        (p * q * std::sqrt(p + q));
    d2eezy[79] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C155 * C93 + C44836 * C156) * C40019 +
            (C155 * C223 + C44836 * C498) * C39939 + C11150 * C40020 +
            C11627 * C39940 + C14699 * C40021 + C15045 * C39941) *
               C44729 * C3152 -
           ((C155 * C14751 + C44836 * C15040) * C39941 +
            (C155 * C14619 + C44836 * C14687) * C40021 + C15045 * C39940 +
            C14699 * C40020 + C11627 * C39939 + C11150 * C40019) *
               C44729 * C44910) *
              C636 +
          ((C12900 * C40019 + C13311 * C39939 + C42112 * C40020 +
            C42430 * C39940 + (C155 * C29108 + C44836 * C29168) * C40021 +
            (C155 * C29232 + C44836 * C29513) * C39941) *
               C44729 * C44910 -
           (C42430 * C39941 + C42112 * C40021 + C13311 * C39940 +
            C12900 * C40020 + (C155 * C780 + C44836 * C1090) * C39939 +
            (C155 * C642 + C44836 * C710) * C40019) *
               C44729 * C3152) *
              C44908) *
         C44752) /
        (p * q * std::sqrt(p + q));
    d2eezz[79] += (2 * std::pow(Pi, 2.5) *
                   (((C40250 * C93 + C40254 + C40254 + C39939 * C558 +
                      C40251 * C1226 + C40255 + C40255 + C39940 * C1738 +
                      C40252 * C4045 + C40256 + C40256 + C39941 * C4391) *
                         C44836 * C44729 * C3152 -
                     (C40252 * C14619 + C41204 + C41204 + C39941 * C15095 +
                      C40251 * C4045 + C41205 + C41205 + C39940 * C4391 +
                      C40250 * C1226 + C41206 + C41206 + C39939 * C1738) *
                         C44836 * C44729 * C44910) *
                        C636 +
                    ((C40250 * C2654 + C42481 + C42481 + C39939 * C3096 +
                      C40251 * C9369 + C42482 + C42482 + C39940 * C9801 +
                      C40252 * C29108 + C42483 + C42483 + C39941 * C29570) *
                         C44836 * C44729 * C44910 -
                     (C40252 * C9369 + C40713 + C40713 + C39941 * C9801 +
                      C40251 * C2654 + C40714 + C40714 + C39940 * C3096 +
                      C40250 * C642 + C40715 + C40715 + C39939 * C1154) *
                         C44836 * C44729 * C3152) *
                        C44908) *
                   C44752) /
                  (p * q * std::sqrt(p + q));
    d2eexx[80] +=
        (2 * std::pow(Pi, 2.5) *
         (((C20397 * C93 + C20400 + C20400 + C44729 * C103) * C39939 +
           C25527 * C39940 + C29118 * C39941) *
              C44836 * C4042 -
          (C43430 * C39941 + C29118 * C39940 + C25527 * C39939) * C44836 *
              C4043 +
          (C29118 * C39939 + C43430 * C39940 +
           (C20397 * C43421 + C43427 + C43427 + C44729 * C43423) * C39941) *
              C44836 * C4044) *
         C44786 * C44752) /
        (p * q * std::sqrt(p + q));
    d2eexy[80] += (2 * std::pow(Pi, 2.5) *
                   ((((C155 * C93 + C44836 * C156) * C20398 +
                      (C155 * C98 + C44836 * C161) * C44729) *
                         C39939 +
                     (C40825 + C40826) * C39940 + C43471 * C39941) *
                        C4042 -
                    ((C43478 + C43479) * C39941 + (C40828 + C40827) * C39940 +
                     (C40826 + C40825) * C39939) *
                        C4043 +
                    (C43471 * C39939 + (C43479 + C43478) * C39940 +
                     ((C155 * C43421 + C44836 * C43468) * C20398 +
                      (C155 * C43422 + C44836 * C43469) * C44729) *
                         C39941) *
                        C4044) *
                   C44786 * C44752) /
                  (p * q * std::sqrt(p + q));
    d2eexz[80] += (2 * std::pow(Pi, 2.5) *
                   (((C40019 * C93 + C39939 * C223 + C40020 * C1226 +
                      C39940 * C1364 + C40021 * C4045 + C39941 * C4139) *
                         C20398 +
                     (C40019 * C98 + C39939 * C228 + C40020 * C1230 +
                      C39940 * C1368 + C40021 * C4048 + C39941 * C4142) *
                         C44729) *
                        C44836 * C4042 -
                    ((C40021 * C14621 + C39941 * C14753 + C40020 * C4048 +
                      C39940 * C4142 + C40019 * C1230 + C39939 * C1368) *
                         C44729 +
                     (C40021 * C14619 + C39941 * C14751 + C40020 * C4045 +
                      C39940 * C4139 + C40019 * C1226 + C39939 * C1364) *
                         C20398) *
                        C44836 * C4043 +
                    ((C40019 * C4045 + C39939 * C4139 + C40020 * C14619 +
                      C39940 * C14751 + C40021 * C43421 + C39941 * C43517) *
                         C20398 +
                     (C40019 * C4048 + C39939 * C4142 + C40020 * C14621 +
                      C39940 * C14753 + C40021 * C43422 + C39941 * C43518) *
                         C44729) *
                        C44836 * C4044) *
                   C44786 * C44752) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[80] += (2 * std::pow(Pi, 2.5) *
                   ((((C20398 * C93 + C44729 * C98) * C155 +
                      (C20398 * C156 + C44729 * C289) * C44836) *
                         C39939 +
                     (C40933 + C40934) * C39940 + C43559 * C39941) *
                        C4042 -
                    ((C43566 + C43567) * C39941 + (C40936 + C40935) * C39940 +
                     (C40934 + C40933) * C39939) *
                        C4043 +
                    (C43559 * C39939 + (C43567 + C43566) * C39940 +
                     ((C20398 * C43421 + C44729 * C43422) * C155 +
                      (C20398 * C43468 + C44729 * C43557) * C44836) *
                         C39941) *
                        C4044) *
                   C44786 * C44752) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[80] +=
        (2 * std::pow(Pi, 2.5) *
         (((C332 * C93 + C339 + C339 + C44836 * C333) * C44729 * C39939 +
           C40997 * C39940 + C40998 * C39941) *
              C4042 -
          (C43613 * C39941 + C40998 * C39940 + C40997 * C39939) * C4043 +
          (C40998 * C39939 + C43613 * C39940 +
           (C332 * C43421 + C43609 + C43609 + C44836 * C43605) * C44729 *
               C39941) *
              C4044) *
         C44786 * C44752) /
        (p * q * std::sqrt(p + q));
    d2eeyz[80] += (2 * std::pow(Pi, 2.5) *
                   (((C40019 * C93 + C39939 * C223 + C40020 * C1226 +
                      C39940 * C1364 + C40021 * C4045 + C39941 * C4139) *
                         C155 +
                     (C40019 * C156 + C39939 * C396 + C40020 * C1294 +
                      C39940 * C1556 + C40021 * C4095 + C39941 * C4268) *
                         C44836) *
                        C44729 * C4042 -
                    ((C40021 * C14687 + C39941 * C14930 + C40020 * C4095 +
                      C39940 * C4268 + C40019 * C1294 + C39939 * C1556) *
                         C44836 +
                     (C40021 * C14619 + C39941 * C14751 + C40020 * C4045 +
                      C39940 * C4139 + C40019 * C1226 + C39939 * C1364) *
                         C155) *
                        C44729 * C4043 +
                    ((C40019 * C4045 + C39939 * C4139 + C40020 * C14619 +
                      C39940 * C14751 + C40021 * C43421 + C39941 * C43517) *
                         C155 +
                     (C40019 * C4095 + C39939 * C4268 + C40020 * C14687 +
                      C39940 * C14930 + C40021 * C43468 + C39941 * C43651) *
                         C44836) *
                        C44729 * C4044) *
                   C44786 * C44752) /
                  (p * q * std::sqrt(p + q));
    d2eezx[80] +=
        (2 * std::pow(Pi, 2.5) *
         (((C20398 * C93 + C44729 * C98) * C40019 +
           (C20398 * C223 + C44729 * C455) * C39939 + C25751 * C40020 +
           C25971 * C39940 + C29293 * C40021 + C29463 * C39941) *
              C44836 * C4042 -
          (C43694 * C39941 + C43565 * C40021 + C29463 * C39940 +
           C29293 * C40020 + C25971 * C39939 + C25751 * C40019) *
              C44836 * C4043 +
          (C29293 * C40019 + C29463 * C39939 + C43565 * C40020 +
           C43694 * C39940 + (C20398 * C43421 + C44729 * C43422) * C40021 +
           (C20398 * C43517 + C44729 * C43690) * C39941) *
              C44836 * C4044) *
         C44786 * C44752) /
        (p * q * std::sqrt(p + q));
    d2eezy[80] +=
        (2 * std::pow(Pi, 2.5) *
         (((C155 * C93 + C44836 * C156) * C40019 +
           (C155 * C223 + C44836 * C498) * C39939 + C11150 * C40020 +
           C11627 * C39940 + C14699 * C40021 + C15045 * C39941) *
              C44729 * C4042 -
          (C43736 * C39941 + C43477 * C40021 + C15045 * C39940 +
           C14699 * C40020 + C11627 * C39939 + C11150 * C40019) *
              C44729 * C4043 +
          (C14699 * C40019 + C15045 * C39939 + C43477 * C40020 +
           C43736 * C39940 + (C155 * C43421 + C44836 * C43468) * C40021 +
           (C155 * C43517 + C44836 * C43732) * C39941) *
              C44729 * C4044) *
         C44786 * C44752) /
        (p * q * std::sqrt(p + q));
    d2eezz[80] += (2 * std::pow(Pi, 2.5) *
                   ((C40250 * C93 + C40254 + C40254 + C39939 * C558 +
                     C40251 * C1226 + C40255 + C40255 + C39940 * C1738 +
                     C40252 * C4045 + C40256 + C40256 + C39941 * C4391) *
                        C44836 * C44729 * C4042 -
                    (C40252 * C14619 + C41204 + C41204 + C39941 * C15095 +
                     C40251 * C4045 + C41205 + C41205 + C39940 * C4391 +
                     C40250 * C1226 + C41206 + C41206 + C39939 * C1738) *
                        C44836 * C44729 * C4043 +
                    (C40250 * C4045 + C43776 + C43776 + C39939 * C4391 +
                     C40251 * C14619 + C43777 + C43777 + C39940 * C15095 +
                     C40252 * C43421 + C43778 + C43778 + C39941 * C43774) *
                        C44836 * C44729 * C4044) *
                   C44786 * C44752) /
                  (p * q * std::sqrt(p + q));
    
}
