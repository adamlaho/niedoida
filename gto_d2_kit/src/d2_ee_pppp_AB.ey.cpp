/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "gto_d2_kit/d2_ee_pppp_AB.hpp"
#include <cmath>
/*

*/
#pragma GCC optimize("O0")
namespace {
    const double Pi = M_PI;
}
//
void second_derivative_ee_1111_12(const double ae,
                                  const double xA,
                                  const double yA,
                                  const double zA,
                                  const double be,
                                  const double xB,
                                  const double yB,
                                  const double zB,
                                  const double ce,
                                  const double xC,
                                  const double yC,
                                  const double zC,
                                  const double de,
                                  const double xD,
                                  const double yD,
                                  const double zD,
                                  const double* const bs,
                                  double* const d2eexx,
                                  double* const d2eexy,
                                  double* const d2eexz,
                                  double* const d2eeyx,
                                  double* const d2eeyy,
                                  double* const d2eeyz,
                                  double* const d2eezx,
                                  double* const d2eezy,
                                  double* const d2eezz)
{
    const double p = ae + be;
    const double q = ce + de;
    const double xP = (ae * xA + be * xB) / p;
    const double yP = (ae * yA + be * yB) / p;
    const double zP = (ae * zA + be * zB) / p;
    const double xQ = (ce * xC + de * xD) / q;
    const double yQ = (ce * yC + de * yD) / q;
    const double zQ = (ce * zC + de * zD) / q;
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    const double C43128 = ae * be;
    const double C43127 = ae + be;
    const double C43126 = 0 * be;
    const double C43125 = xA - xB;
    const double C43157 = yA - yB;
    const double C43160 = zA - zB;
    const double C43217 = 0 * be;
    const double C43247 = 0 * be;
    const double C43267 = p + q;
    const double C43266 = p * q;
    const double C43272 = xP - xQ;
    const double C43271 = bs[2];
    const double C43277 = bs[3];
    const double C43288 = bs[4];
    const double C43309 = bs[5];
    const double C43341 = yP - yQ;
    const double C43367 = zP - zQ;
    const double C93 = bs[0];
    const double C44156 = ce + de;
    const double C44155 = ce * de;
    const double C44154 = xC - xD;
    const double C44169 = yC - yD;
    const double C44178 = zC - zD;
    const double C43136 = 2 * C43128;
    const double C43129 = std::pow(C43127, 2);
    const double C44143 = 2 * C43127;
    const double C43130 = C43128 * C43125;
    const double C44134 = std::pow(C43125, 2);
    const double C44297 = C43125 * be;
    const double C44296 = C43125 * ae;
    const double C43177 = C43128 * C43157;
    const double C44241 = std::pow(C43157, 2);
    const double C44309 = C43157 * be;
    const double C44307 = C43157 * ae;
    const double C43189 = C43128 * C43160;
    const double C44256 = std::pow(C43160, 2);
    const double C44310 = C43160 * be;
    const double C44308 = C43160 * ae;
    const double C43268 = 2 * C43266;
    const double C43280 = C43272 * ae;
    const double C43279 = C43272 * be;
    const double C43276 = std::pow(C43272, 2);
    const double C43344 = C43341 * be;
    const double C43343 = C43272 * C43341;
    const double C43395 = C43341 * ae;
    const double C43394 = C43341 * C43272;
    const double C43419 = std::pow(C43341, 2);
    const double C43370 = C43367 * be;
    const double C43369 = C43272 * C43367;
    const double C43433 = C43341 * C43367;
    const double C43446 = C43367 * ae;
    const double C43445 = C43367 * C43272;
    const double C43470 = C43367 * C43341;
    const double C43482 = std::pow(C43367, 2);
    const double C44166 = 2 * C44156;
    const double C44301 = std::pow(C44156, 2);
    const double C44157 = std::pow(C44154, 2);
    const double C44300 = C44154 * de;
    const double C44299 = C44154 * ce;
    const double C44191 = std::pow(C44169, 2);
    const double C44305 = C44169 * de;
    const double C44303 = C44169 * ce;
    const double C44208 = std::pow(C44178, 2);
    const double C44306 = C44178 * de;
    const double C44304 = C44178 * ce;
    const double C43131 = 2 * C43129;
    const double C44298 = std::pow(C44143, -1);
    const double C44135 = C44134 * C43128;
    const double C44242 = C44241 * C43128;
    const double C44257 = C44256 * C43128;
    const double C43270 = C43268 / C43267;
    const double C108 =
        ((std::pow(xP - xQ, 2) * bs[2] * std::pow(C43268 / C43267, 2) -
          (bs[1] * C43268) / C43267) *
         C43128) /
        C43129;
    const double C94 = -(C43272 * bs[1] * C43268) / C43267;
    const double C630 = -(C43341 * bs[1] * C43268) / C43267;
    const double C1200 = -(C43367 * bs[1] * C43268) / C43267;
    const double C43283 = C43277 * C43280;
    const double C43294 = C43288 * C43280;
    const double C43317 = C43309 * C43280;
    const double C99 = (-(bs[1] * C43280 * C43268) / C43267) / C43127;
    const double C43282 = C43277 * C43279;
    const double C43291 = C43288 * C43279;
    const double C43313 = C43309 * C43279;
    const double C98 = (-(bs[1] * C43279 * C43268) / C43267) / C43127;
    const double C43290 = C43276 * C43288;
    const double C43312 = C43276 * C43309;
    const double C43346 = C43277 * C43344;
    const double C43351 = C43288 * C43344;
    const double C43358 = C43309 * C43344;
    const double C152 = (-(bs[1] * C43344 * C43268) / C43267) / C43127;
    const double C43345 = C43343 * ae;
    const double C43397 = C43277 * C43395;
    const double C43402 = C43288 * C43395;
    const double C43409 = C43309 * C43395;
    const double C277 = (-(bs[1] * C43395 * C43268) / C43267) / C43127;
    const double C43396 = C43394 * ae;
    const double C43421 = C43419 * C43288;
    const double C43426 = C43419 * C43309;
    const double C43372 = C43277 * C43370;
    const double C43377 = C43288 * C43370;
    const double C43384 = C43309 * C43370;
    const double C215 = (-(bs[1] * C43370 * C43268) / C43267) / C43127;
    const double C43371 = C43369 * ae;
    const double C43434 = C43433 * ae;
    const double C43448 = C43277 * C43446;
    const double C43453 = C43288 * C43446;
    const double C43460 = C43309 * C43446;
    const double C443 = (-(bs[1] * C43446 * C43268) / C43267) / C43127;
    const double C43447 = C43445 * ae;
    const double C43471 = C43470 * ae;
    const double C43484 = C43482 * C43288;
    const double C43489 = C43482 * C43309;
    const double C44302 = std::pow(C44166, -1);
    const double C44314 = 2 * C44301;
    const double C44158 = C44157 * C44155;
    const double C44192 = C44191 * C44155;
    const double C44209 = C44208 * C44155;
    const double C44136 = C44135 / C43127;
    const double C44243 = C44242 / C43127;
    const double C44258 = C44257 / C43127;
    const double C43273 = std::pow(C43270, 2);
    const double C43278 = -C43270;
    const double C43289 = std::pow(C43270, 4);
    const double C43347 = C43345 * be;
    const double C43398 = C43396 * be;
    const double C43373 = C43371 * be;
    const double C43435 = C43434 * be;
    const double C43449 = C43447 * be;
    const double C43472 = C43471 * be;
    const double C44159 = C44158 / C44156;
    const double C44193 = C44192 / C44156;
    const double C44210 = C44209 / C44156;
    const double C44137 = -C44136;
    const double C44244 = -C44243;
    const double C44259 = -C44258;
    const double C43275 = C43271 * C43273;
    const double C109 = (ae * C43273 * C43271 * C43272 * be +
                         be * C43273 * C43271 * C43272 * ae +
                         C43272 *
                             (C43271 * C43273 + std::pow(C43272, 2) * bs[3] *
                                                    std::pow(-C43270, 3)) *
                             C43128) /
                        C43129;
    const double C157 =
        (C43273 * C43271 * C43272 * (yP - yQ) * ae * be) / C43129;
    const double C220 =
        (C43273 * C43271 * C43272 * (zP - zQ) * ae * be) / C43129;
    const double C282 = (C43273 * C43271 * C43341 * C43272 * ae * be) / C43129;
    const double C326 =
        ((std::pow(C43341, 2) * C43271 * C43273 - (bs[1] * C43268) / C43267) *
         C43128) /
        C43129;
    const double C390 = (C43273 * C43271 * C43341 * C43367 * ae * be) / C43129;
    const double C448 = (C43273 * C43271 * C43367 * C43272 * ae * be) / C43129;
    const double C491 = (C43273 * C43271 * C43367 * C43341 * ae * be) / C43129;
    const double C545 =
        ((std::pow(C43367, 2) * C43271 * C43273 - (bs[1] * C43268) / C43267) *
         C43128) /
        C43129;
    const double C100 = (C43272 * C43273 * C43271 * C43279) / C43127 -
                        (be * bs[1] * C43268) / (C43267 * C43127);
    const double C101 = (C43272 * C43273 * C43271 * C43280) / C43127 -
                        (ae * bs[1] * C43268) / (C43267 * C43127);
    const double C153 = (C43272 * C43273 * C43271 * C43344) / C43127;
    const double C216 = (C43272 * C43273 * C43271 * C43370) / C43127;
    const double C278 = (C43272 * C43273 * C43271 * C43395) / C43127;
    const double C444 = (C43272 * C43273 * C43271 * C43446) / C43127;
    const double C636 = (C43341 * C43273 * C43271 * C43279) / C43127;
    const double C637 = (C43341 * C43273 * C43271 * C43280) / C43127;
    const double C694 = (C43341 * C43273 * C43271 * C43344) / C43127 -
                        (be * bs[1] * C43268) / (C43267 * C43127);
    const double C760 = (C43341 * C43273 * C43271 * C43370) / C43127;
    const double C826 = (C43341 * C43273 * C43271 * C43395) / C43127 -
                        (ae * bs[1] * C43268) / (C43267 * C43127);
    const double C1010 = (C43341 * C43273 * C43271 * C43446) / C43127;
    const double C1206 = (C43367 * C43273 * C43271 * C43279) / C43127;
    const double C1207 = (C43367 * C43273 * C43271 * C43280) / C43127;
    const double C1264 = (C43367 * C43273 * C43271 * C43344) / C43127;
    const double C1330 = (C43367 * C43273 * C43271 * C43370) / C43127 -
                         (be * bs[1] * C43268) / (C43267 * C43127);
    const double C1396 = (C43367 * C43273 * C43271 * C43395) / C43127;
    const double C1580 = (C43367 * C43273 * C43271 * C43446) / C43127 -
                         (ae * bs[1] * C43268) / (C43267 * C43127);
    const double C43281 = std::pow(C43278, 3);
    const double C43310 = std::pow(C43278, 5);
    const double C43298 = C43289 * C43294;
    const double C43297 = C43289 * C43291;
    const double C43296 = C43290 * C43289;
    const double C43308 = C43288 * C43289;
    const double C43353 = C43289 * C43351;
    const double C43379 = C43289 * C43377;
    const double C43404 = C43289 * C43402;
    const double C43422 = C43421 * C43289;
    const double C43455 = C43289 * C43453;
    const double C43485 = C43484 * C43289;
    const double C43350 = C43288 * C43347;
    const double C43357 = C43309 * C43347;
    const double C43401 = C43288 * C43398;
    const double C43408 = C43309 * C43398;
    const double C43376 = C43288 * C43373;
    const double C43383 = C43309 * C43373;
    const double C43437 = C43288 * C43435;
    const double C43440 = C43309 * C43435;
    const double C43452 = C43288 * C43449;
    const double C43459 = C43309 * C43449;
    const double C43474 = C43288 * C43472;
    const double C43477 = C43309 * C43472;
    const double C44160 = -C44159;
    const double C44194 = -C44193;
    const double C44211 = -C44210;
    const double C44138 = std::exp(C44137);
    const double C44245 = std::exp(C44244);
    const double C44260 = std::exp(C44259);
    const double C95 = C43275 * C43276 - (bs[1] * C43268) / C43267;
    const double C629 = C43341 * C43272 * C43275;
    const double C1199 = C43367 * C43272 * C43275;
    const double C2212 = C43275 * C43419 - (bs[1] * C43268) / C43267;
    const double C2614 = C43367 * C43341 * C43275;
    const double C4005 = C43275 * C43482 - (bs[1] * C43268) / C43267;
    const double C43285 = C43281 * C43283;
    const double C43284 = C43281 * C43282;
    const double C43287 = C43277 * C43281;
    const double C43348 = C43281 * C43346;
    const double C43374 = C43281 * C43372;
    const double C43399 = C43281 * C43397;
    const double C43450 = C43281 * C43448;
    const double C158 = (ae * C43273 * C43271 * C43341 * be +
                         C43272 * C43281 * C43277 * C43272 * C43341 * ae * be) /
                        C43129;
    const double C221 = (ae * C43273 * C43271 * C43367 * be +
                         C43272 * C43281 * C43277 * C43272 * C43367 * ae * be) /
                        C43129;
    const double C283 = (be * C43273 * C43271 * C43341 * ae +
                         C43272 * C43281 * C43277 * C43341 * C43272 * ae * be) /
                        C43129;
    const double C327 =
        (C43272 * (C43275 + std::pow(C43341, 2) * C43277 * C43281) * C43128) /
        C43129;
    const double C391 =
        (C43272 * C43281 * C43277 * C43341 * C43367 * ae * be) / C43129;
    const double C392 =
        (C43281 * C43277 * C43435 + C43289 * C43288 * C43435 * C43276) / C43129;
    const double C449 = (be * C43273 * C43271 * C43367 * ae +
                         C43272 * C43281 * C43277 * C43367 * C43272 * ae * be) /
                        C43129;
    const double C492 =
        (C43272 * C43281 * C43277 * C43367 * C43341 * ae * be) / C43129;
    const double C493 =
        (C43281 * C43277 * C43472 + C43289 * C43288 * C43472 * C43276) / C43129;
    const double C546 =
        (C43272 * (C43275 + std::pow(C43367, 2) * C43277 * C43281) * C43128) /
        C43129;
    const double C642 =
        (C43341 * (C43275 + C43276 * C43277 * C43281) * C43128) / C43129;
    const double C698 =
        (be * C43273 * C43271 * C43280 + C43341 * C43281 * C43277 * C43347) /
        C43129;
    const double C764 = (C43341 * C43281 * C43277 * C43373) / C43129;
    const double C830 =
        (ae * C43273 * C43271 * C43279 + C43341 * C43281 * C43277 * C43398) /
        C43129;
    const double C886 =
        (ae * C43273 * C43271 * C43344 + be * C43273 * C43271 * C43395 +
         C43341 * (C43275 + C43419 * C43277 * C43281) * C43128) /
        C43129;
    const double C952 =
        (ae * C43273 * C43271 * C43370 + C43341 * C43281 * C43277 * C43435) /
        C43129;
    const double C1014 = (C43341 * C43281 * C43277 * C43449) / C43129;
    const double C1068 =
        (be * C43273 * C43271 * C43446 + C43341 * C43281 * C43277 * C43472) /
        C43129;
    const double C1128 =
        (C43341 * (C43275 + C43482 * C43277 * C43281) * C43128) / C43129;
    const double C1212 =
        (C43367 * (C43275 + C43276 * C43277 * C43281) * C43128) / C43129;
    const double C1268 = (C43367 * C43281 * C43277 * C43347) / C43129;
    const double C1334 =
        (be * C43273 * C43271 * C43280 + C43367 * C43281 * C43277 * C43373) /
        C43129;
    const double C1400 = (C43367 * C43281 * C43277 * C43398) / C43129;
    const double C1456 =
        (C43367 * (C43275 + C43419 * C43277 * C43281) * C43128) / C43129;
    const double C1522 =
        (be * C43273 * C43271 * C43395 + C43367 * C43281 * C43277 * C43435) /
        C43129;
    const double C1584 =
        (ae * C43273 * C43271 * C43279 + C43367 * C43281 * C43277 * C43449) /
        C43129;
    const double C1638 =
        (ae * C43273 * C43271 * C43344 + C43367 * C43281 * C43277 * C43472) /
        C43129;
    const double C1698 =
        (ae * C43273 * C43271 * C43370 + be * C43273 * C43271 * C43446 +
         C43367 * (C43275 + C43482 * C43277 * C43281) * C43128) /
        C43129;
    const double C43323 = C43310 * C43317;
    const double C43320 = C43310 * C43313;
    const double C43319 = C43312 * C43310;
    const double C43360 = C43310 * C43358;
    const double C43386 = C43310 * C43384;
    const double C43411 = C43310 * C43409;
    const double C43427 = C43426 * C43310;
    const double C43462 = C43310 * C43460;
    const double C43490 = C43489 * C43310;
    const double C43301 = C43272 * C43298;
    const double C43307 = be * C43298;
    const double C43707 = C43341 * C43298;
    const double C43845 = C43367 * C43298;
    const double C43300 = C43272 * C43297;
    const double C43306 = ae * C43297;
    const double C43717 = C43341 * C43297;
    const double C43857 = C43367 * C43297;
    const double C43318 = C43308 * ae;
    const double C43316 = C43308 * C43276;
    const double C43315 = C43272 * C43308;
    const double C43314 = C43308 * be;
    const double C43773 = C43308 * C43419;
    const double C43772 = C43341 * C43308;
    const double C43873 = C43308 * C43482;
    const double C43872 = C43367 * C43308;
    const double C43356 = ae * C43353;
    const double C43355 = C43272 * C43353;
    const double C43657 = C43341 * C43353;
    const double C43863 = C43367 * C43353;
    const double C43382 = ae * C43379;
    const double C43381 = C43272 * C43379;
    const double C43723 = C43341 * C43379;
    const double C43745 = C43367 * C43379;
    const double C43407 = be * C43404;
    const double C43406 = C43272 * C43404;
    const double C43659 = C43341 * C43404;
    const double C43853 = C43367 * C43404;
    const double C43458 = be * C43455;
    const double C43457 = C43272 * C43455;
    const double C43724 = C43341 * C43455;
    const double C43747 = C43367 * C43455;
    const double C43352 = C43289 * C43350;
    const double C43359 = C43310 * C43357;
    const double C43403 = C43289 * C43401;
    const double C43410 = C43310 * C43408;
    const double C43378 = C43289 * C43376;
    const double C43385 = C43310 * C43383;
    const double C43438 = C43289 * C43437;
    const double C43441 = C43310 * C43440;
    const double C43454 = C43289 * C43452;
    const double C43461 = C43310 * C43459;
    const double C43475 = C43289 * C43474;
    const double C43478 = C43310 * C43477;
    const double C44161 = std::exp(C44160);
    const double C44195 = std::exp(C44194);
    const double C44212 = std::exp(C44211);
    const double C20608 = C44138 * C636;
    const double C25317 = C44138 * C1206;
    const double C43132 = C43130 * C44138;
    const double C44312 = C44298 * C44138;
    const double C44311 = C44138 * C44296;
    const double C4407 = -(C44138 * C44297) / C43127;
    const double C163 = C44245 * C153;
    const double C10968 = C44245 * C1264;
    const double C43178 = C43177 * C44245;
    const double C151 = -(2 * C43128 * (yA - yB) * C44245) / C43127;
    const double C325 =
        -((C44245 - (C43157 * 2 * C43128 * C43157 * C44245) / C43127) *
          C43136) /
        C43127;
    const double C4465 =
        ((C44245 - (C43157 * 2 * C43128 * C43157 * C44245) / C43127) * ae) /
            C43127 -
        (0 * be) / C43131;
    const double C4466 =
        (0 * ae) / C43127 - (C43128 * C43157 * C44245) / C43129;
    const double C44321 = C44298 * C44245;
    const double C44320 = C44245 * C44307;
    const double C14931 = -(C44245 * C44309) / C43127;
    const double C226 = C44260 * C216;
    const double C5110 = C44260 * C760;
    const double C43190 = C43189 * C44260;
    const double C214 = -(2 * C43128 * (zA - zB) * C44260) / C43127;
    const double C544 =
        -((C44260 - (C43160 * 2 * C43128 * C43160 * C44260) / C43127) *
          C43136) /
        C43127;
    const double C9818 =
        ((C44260 - (C43160 * 2 * C43128 * C43160 * C44260) / C43127) * ae) /
            C43127 -
        (0 * be) / C43131;
    const double C9819 =
        (0 * ae) / C43127 - (C43128 * C43160 * C44260) / C43129;
    const double C44323 = C44298 * C44260;
    const double C44322 = C44260 * C44308;
    const double C29158 = -(C44260 * C44310) / C43127;
    const double C103 =
        (C43273 * C43271 * C43280 + C43272 * (C43272 * C43285 + C43275 * ae) +
         C43272 * C43275 * ae) /
        C43127;
    const double C635 = (C43341 * (C43272 * C43285 + C43275 * ae)) / C43127;
    const double C1205 = (C43367 * (C43272 * C43285 + C43275 * ae)) / C43127;
    const double C2216 = (C43273 * C43271 * C43280 + C43285 * C43419) / C43127;
    const double C2618 = (C43367 * C43341 * C43285) / C43127;
    const double C4009 = (C43273 * C43271 * C43280 + C43285 * C43482) / C43127;
    const double C6863 =
        (2 * C43341 * C43285 + C43341 * (C43285 + C43298 * C43419)) / C43127;
    const double C7400 = (C43367 * (C43285 + C43298 * C43419)) / C43127;
    const double C14409 =
        (2 * C43367 * C43285 + C43367 * (C43285 + C43298 * C43482)) / C43127;
    const double C110 =
        ((C43275 + C43276 * C43277 * C43281) * C43128 +
         ae * (C43272 * C43284 + C43275 * be) +
         be * (C43272 * C43285 + C43275 * ae) +
         C43272 *
             (ae * C43284 + be * C43285 +
              C43272 *
                  (C43277 * C43281 + C43276 * bs[4] * std::pow(C43270, 4)) *
                  C43128)) /
        C43129;
    const double C102 =
        (C43273 * C43271 * C43279 + C43272 * (C43272 * C43284 + C43275 * be) +
         C43272 * C43275 * be) /
        C43127;
    const double C634 = (C43341 * (C43272 * C43284 + C43275 * be)) / C43127;
    const double C1204 = (C43367 * (C43272 * C43284 + C43275 * be)) / C43127;
    const double C2215 = (C43273 * C43271 * C43279 + C43284 * C43419) / C43127;
    const double C2617 = (C43367 * C43341 * C43284) / C43127;
    const double C4008 = (C43273 * C43271 * C43279 + C43284 * C43482) / C43127;
    const double C6862 =
        (2 * C43341 * C43284 + C43341 * (C43284 + C43297 * C43419)) / C43127;
    const double C7399 = (C43367 * (C43284 + C43297 * C43419)) / C43127;
    const double C14408 =
        (2 * C43367 * C43284 + C43367 * (C43284 + C43297 * C43482)) / C43127;
    const double C43295 = C43287 * ae;
    const double C43293 = C43272 * C43287;
    const double C43292 = C43287 * be;
    const double C43299 = C43287 + C43296;
    const double C43423 = C43287 + C43422;
    const double C43486 = C43287 + C43485;
    const double C43658 = C43341 * C43287;
    const double C43746 = C43367 * C43287;
    const double C328 =
        ((C43275 + C43419 * C43277 * C43281) * C43128 +
         (C43287 + C43419 * C43288 * C43289) * C43128 * C43276) /
        C43129;
    const double C547 =
        ((C43275 + C43482 * C43277 * C43281) * C43128 +
         (C43287 + C43482 * C43288 * C43289) * C43128 * C43276) /
        C43129;
    const double C96 =
        2 * C43272 * C43275 + C43272 * (C43275 + C43287 * C43276);
    const double C628 = C43341 * (C43275 + C43287 * C43276);
    const double C1198 = C43367 * (C43275 + C43287 * C43276);
    const double C6860 =
        2 * C43341 * C43275 + C43341 * (C43275 + C43287 * C43419);
    const double C7397 = C43367 * (C43275 + C43287 * C43419);
    const double C14406 =
        2 * C43367 * C43275 + C43367 * (C43275 + C43287 * C43482);
    const double C159 =
        (C43281 * C43277 * C43347 + ae * C43272 * C43348 +
         C43272 * (ae * C43348 + C43272 * C43289 * C43288 * C43347)) /
        C43129;
    const double C154 = (C43273 * C43271 * C43344 + C43348 * C43276) / C43127;
    const double C155 =
        (2 * C43272 * C43348 + C43272 * (C43348 + C43353 * C43276)) / C43127;
    const double C695 =
        (C43341 * C43272 * C43348 + C43272 * C43275 * be) / C43127;
    const double C696 = (C43341 * (C43348 + C43353 * C43276) +
                         (C43275 + C43287 * C43276) * be) /
                        C43127;
    const double C1265 = (C43367 * C43272 * C43348) / C43127;
    const double C1266 = (C43367 * (C43348 + C43353 * C43276)) / C43127;
    const double C2262 =
        (C43273 * C43271 * C43344 + C43341 * (C43341 * C43348 + C43275 * be) +
         C43341 * C43275 * be) /
        C43127;
    const double C2676 = (C43367 * (C43341 * C43348 + C43275 * be)) / C43127;
    const double C4055 = (C43273 * C43271 * C43344 + C43348 * C43482) / C43127;
    const double C14478 =
        (2 * C43367 * C43348 + C43367 * (C43348 + C43353 * C43482)) / C43127;
    const double C222 =
        (C43281 * C43277 * C43373 + ae * C43272 * C43374 +
         C43272 * (ae * C43374 + C43272 * C43289 * C43288 * C43373)) /
        C43129;
    const double C217 = (C43273 * C43271 * C43370 + C43374 * C43276) / C43127;
    const double C218 =
        (2 * C43272 * C43374 + C43272 * (C43374 + C43379 * C43276)) / C43127;
    const double C761 = (C43341 * C43272 * C43374) / C43127;
    const double C762 = (C43341 * (C43374 + C43379 * C43276)) / C43127;
    const double C1331 =
        (C43367 * C43272 * C43374 + C43272 * C43275 * be) / C43127;
    const double C1332 = (C43367 * (C43374 + C43379 * C43276) +
                          (C43275 + C43287 * C43276) * be) /
                         C43127;
    const double C2306 = (C43273 * C43271 * C43370 + C43374 * C43419) / C43127;
    const double C2732 =
        (C43367 * C43341 * C43374 + C43341 * C43275 * be) / C43127;
    const double C4099 =
        (C43273 * C43271 * C43370 + C43367 * (C43367 * C43374 + C43275 * be) +
         C43367 * C43275 * be) /
        C43127;
    const double C6986 =
        (2 * C43341 * C43374 + C43341 * (C43374 + C43379 * C43419)) / C43127;
    const double C7555 = (C43367 * (C43374 + C43379 * C43419) +
                          (C43275 + C43287 * C43419) * be) /
                         C43127;
    const double C284 =
        (C43281 * C43277 * C43398 + be * C43272 * C43399 +
         C43272 * (be * C43399 + C43272 * C43289 * C43288 * C43398)) /
        C43129;
    const double C279 = (C43273 * C43271 * C43395 + C43399 * C43276) / C43127;
    const double C280 =
        (2 * C43272 * C43399 + C43272 * (C43399 + C43404 * C43276)) / C43127;
    const double C827 =
        (C43341 * C43272 * C43399 + C43272 * C43275 * ae) / C43127;
    const double C828 = (C43341 * (C43399 + C43404 * C43276) +
                         (C43275 + C43287 * C43276) * ae) /
                        C43127;
    const double C1397 = (C43367 * C43272 * C43399) / C43127;
    const double C1398 = (C43367 * (C43399 + C43404 * C43276)) / C43127;
    const double C2350 =
        (C43273 * C43271 * C43395 + C43341 * (C43341 * C43399 + C43275 * ae) +
         C43341 * C43275 * ae) /
        C43127;
    const double C2788 = (C43367 * (C43341 * C43399 + C43275 * ae)) / C43127;
    const double C4143 = (C43273 * C43271 * C43395 + C43399 * C43482) / C43127;
    const double C14590 =
        (2 * C43367 * C43399 + C43367 * (C43399 + C43404 * C43482)) / C43127;
    const double C450 =
        (C43281 * C43277 * C43449 + be * C43272 * C43450 +
         C43272 * (be * C43450 + C43272 * C43289 * C43288 * C43449)) /
        C43129;
    const double C445 = (C43273 * C43271 * C43446 + C43450 * C43276) / C43127;
    const double C446 =
        (2 * C43272 * C43450 + C43272 * (C43450 + C43455 * C43276)) / C43127;
    const double C1011 = (C43341 * C43272 * C43450) / C43127;
    const double C1012 = (C43341 * (C43450 + C43455 * C43276)) / C43127;
    const double C1581 =
        (C43367 * C43272 * C43450 + C43272 * C43275 * ae) / C43127;
    const double C1582 = (C43367 * (C43450 + C43455 * C43276) +
                          (C43275 + C43287 * C43276) * ae) /
                         C43127;
    const double C2476 = (C43273 * C43271 * C43446 + C43450 * C43419) / C43127;
    const double C2950 =
        (C43367 * C43341 * C43450 + C43341 * C43275 * ae) / C43127;
    const double C4269 =
        (C43273 * C43271 * C43446 + C43367 * (C43367 * C43450 + C43275 * ae) +
         C43367 * C43275 * ae) /
        C43127;
    const double C7212 =
        (2 * C43341 * C43450 + C43341 * (C43450 + C43455 * C43419)) / C43127;
    const double C7845 = (C43367 * (C43450 + C43455 * C43419) +
                          (C43275 + C43287 * C43419) * ae) /
                         C43127;
    const double C165 = C44245 * C158;
    const double C228 = C44260 * C221;
    const double C335 = C44245 * C327;
    const double C396 = C44260 * C391;
    const double C399 = C44260 * C392;
    const double C497 = C44245 * C492;
    const double C500 = C44245 * C493;
    const double C554 = C44260 * C546;
    const double C20429 = C44138 * C642;
    const double C5112 = C44260 * C764;
    const double C20610 = C44138 * C830;
    const double C5350 = C44260 * C952;
    const double C20774 = C44138 * C1014;
    const double C5569 = C44260 * C1128;
    const double C25100 = C44138 * C1212;
    const double C10970 = C44245 * C1268;
    const double C25319 = C44138 * C1400;
    const double C11205 = C44245 * C1456;
    const double C25537 = C44138 * C1584;
    const double C11430 = C44245 * C1638;
    const double C43327 = C43272 * C43323;
    const double C43759 = C43323 * C43419;
    const double C43825 = C43341 * C43323;
    const double C43847 = C43323 * C43482;
    const double C43326 = C43272 * C43320;
    const double C43765 = C43320 * C43419;
    const double C43831 = C43341 * C43320;
    const double C43859 = C43320 * C43482;
    const double C43325 = C43308 + C43319;
    const double C43362 = C43360 * C43276;
    const double C43664 = C43272 * C43360;
    const double C43771 = C43341 * C43360;
    const double C43865 = C43360 * C43482;
    const double C43388 = C43386 * C43276;
    const double C43674 = C43272 * C43386;
    const double C43789 = C43386 * C43419;
    const double C43835 = C43341 * C43386;
    const double C43871 = C43367 * C43386;
    const double C43413 = C43411 * C43276;
    const double C43666 = C43272 * C43411;
    const double C43774 = C43341 * C43411;
    const double C43854 = C43411 * C43482;
    const double C43428 = C43308 + C43427;
    const double C43464 = C43462 * C43276;
    const double C43680 = C43272 * C43462;
    const double C43795 = C43462 * C43419;
    const double C43837 = C43341 * C43462;
    const double C43874 = C43367 * C43462;
    const double C43491 = C43308 + C43490;
    const double C9237 = (C43341 * C43285 + C43707 * C43482) / C43127;
    const double C43311 = C43306 + C43307;
    const double C9236 = (C43341 * C43284 + C43717 * C43482) / C43127;
    const double C43322 = C43287 + C43316;
    const double C43324 = C43315 * ae;
    const double C43321 = C43315 * be;
    const double C43665 = C43341 * C43315;
    const double C43752 = C43367 * C43315;
    const double C43778 = C43287 + C43773;
    const double C43780 = C43772 * ae;
    const double C43777 = C43772 * be;
    const double C43836 = C43367 * C43772;
    const double C43878 = C43287 + C43873;
    const double C43880 = C43872 * ae;
    const double C43877 = C43872 * be;
    const double C4056 = (C43272 * C43348 + C43355 * C43482) / C43127;
    const double C2307 = (C43272 * C43374 + C43381 * C43419) / C43127;
    const double C43769 = C43356 + C43407;
    const double C4144 = (C43272 * C43399 + C43406 * C43482) / C43127;
    const double C43869 = C43382 + C43458;
    const double C2477 = (C43272 * C43450 + C43457 * C43419) / C43127;
    const double C160 =
        (2 * (ae * C43348 + C43272 * C43352) + ae * (C43348 + C43353 * C43276) +
         C43272 *
             (C43352 + ae * C43272 * C43353 +
              C43272 * (ae * C43353 + C43272 * C43310 * C43309 * C43347))) /
        C43129;
    const double C699 = (be * (C43272 * C43285 + C43275 * ae) +
                         C43341 * (ae * C43348 + C43272 * C43352)) /
                        C43129;
    const double C1269 = (C43367 * (ae * C43348 + C43272 * C43352)) / C43129;
    const double C2265 = (C43281 * C43277 * C43347 + be * C43341 * C43285 +
                          C43341 * (be * C43285 + C43341 * C43352)) /
                         C43129;
    const double C2679 = (C43367 * (be * C43285 + C43341 * C43352)) / C43129;
    const double C4058 = (C43281 * C43277 * C43347 + C43352 * C43482) / C43129;
    const double C43361 = C43272 * C43359;
    const double C43758 = C43341 * C43359;
    const double C6934 =
        (2 * (be * C43285 + C43341 * C43352) + be * (C43285 + C43298 * C43419) +
         C43341 * (C43352 + be * C43341 * C43298 +
                   C43341 * (C43307 + C43341 * C43359))) /
        C43129;
    const double C7487 = (C43367 * (C43352 + be * C43341 * C43298 +
                                    C43341 * (C43307 + C43341 * C43359))) /
                         C43129;
    const double C9294 =
        (be * C43285 + C43341 * C43352 + (C43307 + C43341 * C43359) * C43482) /
        C43129;
    const double C14480 =
        (2 * C43367 * C43352 + C43367 * (C43352 + C43359 * C43482)) / C43129;
    const double C42809 =
        (3 * (C43352 + C43359 * C43482) +
         C43367 * (2 * C43367 * C43359 +
                   C43367 * (C43359 +
                             std::pow(C43270, 6) * bs[6] * C43347 * C43482))) /
        C43129;
    const double C285 =
        (2 * (be * C43399 + C43272 * C43403) + be * (C43399 + C43404 * C43276) +
         C43272 *
             (C43403 + be * C43272 * C43404 +
              C43272 * (be * C43404 + C43272 * C43310 * C43309 * C43398))) /
        C43129;
    const double C831 = (ae * (C43272 * C43284 + C43275 * be) +
                         C43341 * (be * C43399 + C43272 * C43403)) /
                        C43129;
    const double C1401 = (C43367 * (be * C43399 + C43272 * C43403)) / C43129;
    const double C2353 = (C43281 * C43277 * C43398 + ae * C43341 * C43284 +
                          C43341 * (ae * C43284 + C43341 * C43403)) /
                         C43129;
    const double C2791 =
        (ae * C43367 * C43284 + C43341 * C43367 * C43403) / C43129;
    const double C4146 = (C43281 * C43277 * C43398 + C43403 * C43482) / C43129;
    const double C43412 = C43272 * C43410;
    const double C43764 = C43341 * C43410;
    const double C43803 = C43367 * C43410;
    const double C7046 =
        (2 * (ae * C43284 + C43341 * C43403) + ae * (C43284 + C43297 * C43419) +
         C43341 * (C43403 + ae * C43341 * C43297 +
                   C43341 * (C43306 + C43341 * C43410))) /
        C43129;
    const double C7631 =
        (C43367 * C43403 + ae * C43367 * C43341 * C43297 +
         C43341 * (ae * C43367 * C43297 + C43341 * C43367 * C43410)) /
        C43129;
    const double C9402 = (ae * (C43284 + C43297 * C43482) +
                          C43341 * (C43403 + C43410 * C43482)) /
                         C43129;
    const double C14592 =
        (2 * C43367 * C43403 + C43367 * (C43403 + C43410 * C43482)) / C43129;
    const double C23746 =
        (C43403 + C43410 * C43482 + ae * (C43717 + C43341 * C43320 * C43482) +
         C43341 * (ae * (C43297 + C43320 * C43482) +
                   C43341 * (C43410 +
                             std::pow(C43270, 6) * bs[6] * C43398 * C43482))) /
        C43129;
    const double C223 =
        (2 * (ae * C43374 + C43272 * C43378) + ae * (C43374 + C43379 * C43276) +
         C43272 *
             (C43378 + ae * C43272 * C43379 +
              C43272 * (ae * C43379 + C43272 * C43310 * C43309 * C43373))) /
        C43129;
    const double C765 = (C43341 * (ae * C43374 + C43272 * C43378)) / C43129;
    const double C1335 = (be * (C43272 * C43285 + C43275 * ae) +
                          C43367 * (ae * C43374 + C43272 * C43378)) /
                         C43129;
    const double C2309 = (C43281 * C43277 * C43373 + C43378 * C43419) / C43129;
    const double C2735 =
        (be * C43341 * C43285 + C43367 * C43341 * C43378) / C43129;
    const double C4102 = (C43281 * C43277 * C43373 + be * C43367 * C43285 +
                          C43367 * (be * C43285 + C43367 * C43378)) /
                         C43129;
    const double C43387 = C43272 * C43385;
    const double C43824 = C43341 * C43385;
    const double C43846 = C43367 * C43385;
    const double C6988 =
        (2 * C43341 * C43378 + C43341 * (C43378 + C43385 * C43419)) / C43129;
    const double C7557 = (be * (C43285 + C43298 * C43419) +
                          C43367 * (C43378 + C43385 * C43419)) /
                         C43129;
    const double C9348 = (C43341 * C43378 + be * C43367 * C43707 +
                          C43367 * (be * C43707 + C43367 * C43341 * C43385)) /
                         C43129;
    const double C14538 =
        (2 * (be * C43285 + C43367 * C43378) + be * (C43285 + C43298 * C43482) +
         C43367 * (C43378 + be * C43367 * C43298 +
                   C43367 * (C43307 + C43367 * C43385))) /
        C43129;
    const double C21910 =
        (3 * (C43378 + C43385 * C43419) +
         C43341 * (2 * C43341 * C43385 +
                   C43341 * (C43385 +
                             std::pow(C43270, 6) * bs[6] * C43373 * C43419))) /
        C43129;
    const double C393 =
        (2 * C43272 * C43438 +
         C43272 * (C43438 + C43310 * C43309 * C43435 * C43276)) /
        C43129;
    const double C953 =
        (ae * C43272 * C43374 + C43341 * C43272 * C43438) / C43129;
    const double C1523 =
        (be * C43272 * C43399 + C43367 * C43272 * C43438) / C43129;
    const double C2435 = (C43281 * C43277 * C43435 + ae * C43341 * C43374 +
                          C43341 * (ae * C43374 + C43341 * C43438)) /
                         C43129;
    const double C2897 = (ae * (C43367 * C43374 + C43275 * be) +
                          C43341 * (be * C43399 + C43367 * C43438)) /
                         C43129;
    const double C4228 = (C43281 * C43277 * C43435 + be * C43367 * C43399 +
                          C43367 * (be * C43399 + C43367 * C43438)) /
                         C43129;
    const double C43673 = C43272 * C43441;
    const double C43788 = C43341 * C43441;
    const double C43807 = C43367 * C43441;
    const double C394 =
        (3 * (C43438 + C43441 * C43276) +
         C43272 * (2 * C43272 * C43441 +
                   C43272 * (C43441 +
                             std::pow(C43270, 6) * bs[6] * C43435 * C43276))) /
        C43129;
    const double C954 = (ae * (C43374 + C43379 * C43276) +
                         C43341 * (C43438 + C43441 * C43276)) /
                        C43129;
    const double C1524 = (be * (C43399 + C43404 * C43276) +
                          C43367 * (C43438 + C43441 * C43276)) /
                         C43129;
    const double C2436 = (C43272 * C43438 + ae * C43341 * C43381 +
                          C43341 * (ae * C43381 + C43341 * C43272 * C43441)) /
                         C43129;
    const double C4229 = (C43272 * C43438 + be * C43367 * C43406 +
                          C43367 * (be * C43406 + C43367 * C43272 * C43441)) /
                         C43129;
    const double C7158 =
        (2 * (ae * C43374 + C43341 * C43438) + ae * (C43374 + C43379 * C43419) +
         C43341 * (C43438 + ae * C43341 * C43379 +
                   C43341 * (C43382 + C43341 * C43441))) /
        C43129;
    const double C14713 =
        (2 * (be * C43399 + C43367 * C43438) + be * (C43399 + C43404 * C43482) +
         C43367 * (C43438 + be * C43367 * C43404 +
                   C43367 * (C43407 + C43367 * C43441))) /
        C43129;
    const double C451 =
        (2 * (be * C43450 + C43272 * C43454) + be * (C43450 + C43455 * C43276) +
         C43272 *
             (C43454 + be * C43272 * C43455 +
              C43272 * (be * C43455 + C43272 * C43310 * C43309 * C43449))) /
        C43129;
    const double C1015 = (C43341 * (be * C43450 + C43272 * C43454)) / C43129;
    const double C1585 = (ae * (C43272 * C43284 + C43275 * be) +
                          C43367 * (be * C43450 + C43272 * C43454)) /
                         C43129;
    const double C2479 = (C43281 * C43277 * C43449 + C43454 * C43419) / C43129;
    const double C2953 =
        (ae * C43341 * C43284 + C43367 * C43341 * C43454) / C43129;
    const double C4272 = (C43281 * C43277 * C43449 + ae * C43367 * C43284 +
                          C43367 * (ae * C43284 + C43367 * C43454)) /
                         C43129;
    const double C43463 = C43272 * C43461;
    const double C43830 = C43341 * C43461;
    const double C43858 = C43367 * C43461;
    const double C7214 =
        (2 * C43341 * C43454 + C43341 * (C43454 + C43461 * C43419)) / C43129;
    const double C7847 = (ae * (C43284 + C43297 * C43419) +
                          C43367 * (C43454 + C43461 * C43419)) /
                         C43129;
    const double C9560 = (C43341 * C43454 + ae * C43367 * C43717 +
                          C43367 * (ae * C43717 + C43367 * C43341 * C43461)) /
                         C43129;
    const double C14767 =
        (2 * (ae * C43284 + C43367 * C43454) + ae * (C43284 + C43297 * C43482) +
         C43367 * (C43454 + ae * C43367 * C43297 +
                   C43367 * (C43306 + C43367 * C43461))) /
        C43129;
    const double C22086 =
        (3 * (C43454 + C43461 * C43419) +
         C43341 * (2 * C43341 * C43461 +
                   C43341 * (C43461 +
                             std::pow(C43270, 6) * bs[6] * C43449 * C43419))) /
        C43129;
    const double C494 =
        (2 * C43272 * C43475 +
         C43272 * (C43475 + C43310 * C43309 * C43472 * C43276)) /
        C43129;
    const double C1069 =
        (be * C43272 * C43450 + C43341 * C43272 * C43475) / C43129;
    const double C1639 =
        (ae * C43272 * C43348 + C43367 * C43272 * C43475) / C43129;
    const double C2520 = (C43281 * C43277 * C43472 + be * C43341 * C43450 +
                          C43341 * (be * C43450 + C43341 * C43475)) /
                         C43129;
    const double C3006 = (ae * (C43341 * C43348 + C43275 * be) +
                          C43367 * (be * C43450 + C43341 * C43475)) /
                         C43129;
    const double C4313 = (C43281 * C43277 * C43472 + ae * C43367 * C43348 +
                          C43367 * (ae * C43348 + C43367 * C43475)) /
                         C43129;
    const double C43679 = C43272 * C43478;
    const double C43794 = C43341 * C43478;
    const double C43864 = C43367 * C43478;
    const double C495 =
        (3 * (C43475 + C43478 * C43276) +
         C43272 * (2 * C43272 * C43478 +
                   C43272 * (C43478 +
                             std::pow(C43270, 6) * bs[6] * C43472 * C43276))) /
        C43129;
    const double C1070 = (be * (C43450 + C43455 * C43276) +
                          C43341 * (C43475 + C43478 * C43276)) /
                         C43129;
    const double C1640 = (ae * (C43348 + C43353 * C43276) +
                          C43367 * (C43475 + C43478 * C43276)) /
                         C43129;
    const double C2521 = (C43272 * C43475 + be * C43341 * C43457 +
                          C43341 * (be * C43457 + C43341 * C43272 * C43478)) /
                         C43129;
    const double C4314 = (C43272 * C43475 + ae * C43367 * C43355 +
                          C43367 * (ae * C43355 + C43367 * C43272 * C43478)) /
                         C43129;
    const double C7270 =
        (2 * (be * C43450 + C43341 * C43475) + be * (C43450 + C43455 * C43419) +
         C43341 * (C43475 + be * C43341 * C43455 +
                   C43341 * (C43458 + C43341 * C43478))) /
        C43129;
    const double C14823 =
        (2 * (ae * C43348 + C43367 * C43475) + ae * (C43348 + C43353 * C43482) +
         C43367 * (C43475 + ae * C43367 * C43353 +
                   C43367 * (C43356 + C43367 * C43478))) /
        C43129;
    const double C44315 = C44302 * C44161;
    const double C44313 = C44161 * C44299;
    const double C626 = -(C44161 * C44300) / C44156;
    const double C44317 = C44302 * C44195;
    const double C44316 = C44195 * C44303;
    const double C1766 = -(C44195 * C44305) / C44156;
    const double C44319 = C44302 * C44212;
    const double C44318 = C44212 * C44304;
    const double C3112 = -(C44212 * C44306) / C44156;
    const double C43135 = 2 * C43132;
    const double C91 = ((0 * ae) / C43127 - C43132 / C43129) / (2 * C43127) -
                       (0 * be) / C43127;
    const double C14935 = (0 * ae) / C43127 - C43132 / C43129;
    const double C79 = C44312 / C44143;
    const double C77 = C44138 / C44143 - (C44311 * C44297) / C43129;
    const double C78 = C44311 / C43131 - (C44312 * C44297) / C43127;
    const double C14929 = C44311 / C43127;
    const double C4945 = C4407 * C642;
    const double C5192 = C4407 * C830;
    const double C5188 = C4407 * C636;
    const double C5422 = C4407 * C1014;
    const double C10877 = C4407 * C1212;
    const double C11124 = C4407 * C1400;
    const double C11120 = C4407 * C1206;
    const double C11356 = C4407 * C1584;
    const double C43225 = 2 * C43178;
    const double C4633 =
        (((-4 * C43178) / C43127 -
          (C43157 * (C44245 - (C43157 * 2 * C43178) / C43127) * C43136) /
              C43127) *
         ae) /
        C43127;
    const double C4634 =
        (-((C44245 - (C43157 * 2 * C43178) / C43127) * C43136) / C43127) /
        (2 * C43127);
    const double C14987 =
        (-(0 * be) / C43127) / (2 * C43127) -
        ((C44245 - (C43157 * 2 * C43178) / C43127) * be) / C43127;
    const double C14988 =
        (-(2 * C43178) / C43127) / (2 * C43127) - (0 * be) / C43127;
    const double C15155 =
        -(((-4 * C43178) / C43127 -
           (C43157 * (C44245 - (C43157 * 2 * C43178) / C43127) * C43136) /
               C43127) *
          be) /
        C43127;
    const double C15156 =
        (-((C44245 - (C43157 * 2 * C43178) / C43127) * C43136) / C43127) /
        (2 * C43127);
    const double C20105 = ((0 * ae) / C43127 - C43178 / C43129) / (2 * C43127) -
                          (0 * be) / C43127;
    const double C168 = C151 * C95;
    const double C166 = C151 * C101;
    const double C164 = C151 * C94;
    const double C334 = C151 * C278;
    const double C332 = C151 * C153;
    const double C498 = C151 * C444;
    const double C703 = C151 * C629;
    const double C1273 = C151 * C1199;
    const double C10971 = C151 * C1207;
    const double C10969 = C151 * C1200;
    const double C11204 = C151 * C1396;
    const double C11202 = C151 * C1264;
    const double C11431 = C151 * C1580;
    const double C12692 = C151 * C2614;
    const double C14483 = C151 * C4005;
    const double C337 = C325 * C95;
    const double C333 = C325 * C94;
    const double C894 = C325 * C629;
    const double C1464 = C325 * C1199;
    const double C11203 = C325 * C1200;
    const double C12895 = C325 * C2614;
    const double C14657 = C325 * C4005;
    const double C4476 = C4465 * C95;
    const double C4473 = C4465 * C101;
    const double C4469 = C4465 * C94;
    const double C4638 = C4465 * C278;
    const double C4636 = C4465 * C153;
    const double C4815 = C4465 * C444;
    const double C5036 = C4465 * C629;
    const double C5714 = C4465 * C1199;
    const double C35430 = C4465 * C1207;
    const double C35426 = C4465 * C1200;
    const double C35633 = C4465 * C1396;
    const double C35631 = C4465 * C1264;
    const double C35844 = C4465 * C1580;
    const double C37119 = C4465 * C2614;
    const double C38921 = C4465 * C4005;
    const double C4471 = C4466 * C629;
    const double C35428 = C4466 * C2614;
    const double C20104 =
        (((C44245 - (C43157 * 2 * C43178) / C43127) * ae) / C43127 -
         C43217 / C43131) /
            (2 * C43127) -
        ((C43157 * ((0 * ae) / C43127 - C43178 / C43129) + C44321) * be) /
            C43127;
    const double C20062 = C44321 / C44143;
    const double C4409 = C44320 / C43127;
    const double C20060 = C44245 / C44143 - (C44320 * C44309) / C43129;
    const double C20061 = C44320 / C43131 - (C44321 * C44309) / C43127;
    const double C14994 = C14931 * C158;
    const double C14990 = C14931 * C153;
    const double C15161 = C14931 * C327;
    const double C15341 = C14931 * C493;
    const double C15336 = C14931 * C492;
    const double C25181 = C14931 * C1268;
    const double C25177 = C14931 * C1264;
    const double C25394 = C14931 * C1456;
    const double C25607 = C14931 * C1638;
    const double C43255 = 2 * C43190;
    const double C10144 =
        (((-4 * C43190) / C43127 -
          (C43160 * (C44260 - (C43160 * 2 * C43190) / C43127) * C43136) /
              C43127) *
         ae) /
        C43127;
    const double C10145 =
        (-((C44260 - (C43160 * 2 * C43190) / C43127) * C43136) / C43127) /
        (2 * C43127);
    const double C29260 =
        (-(0 * be) / C43127) / (2 * C43127) -
        ((C44260 - (C43160 * 2 * C43190) / C43127) * be) / C43127;
    const double C29261 =
        (-(2 * C43190) / C43127) / (2 * C43127) - (0 * be) / C43127;
    const double C29586 =
        -(((-4 * C43190) / C43127 -
           (C43160 * (C44260 - (C43160 * 2 * C43190) / C43127) * C43136) /
               C43127) *
          be) /
        C43127;
    const double C29587 =
        (-((C44260 - (C43160 * 2 * C43190) / C43127) * C43136) / C43127) /
        (2 * C43127);
    const double C39415 = ((0 * ae) / C43127 - C43190 / C43129) / (2 * C43127) -
                          (0 * be) / C43127;
    const double C231 = C214 * C95;
    const double C229 = C214 * C101;
    const double C227 = C214 * C94;
    const double C397 = C214 * C278;
    const double C553 = C214 * C444;
    const double C551 = C214 * C216;
    const double C769 = C214 * C629;
    const double C1339 = C214 * C1199;
    const double C5113 = C214 * C637;
    const double C5111 = C214 * C630;
    const double C5351 = C214 * C826;
    const double C5568 = C214 * C1010;
    const double C5566 = C214 * C760;
    const double C6991 = C214 * C2212;
    const double C7560 = C214 * C2614;
    const double C556 = C544 * C95;
    const double C552 = C544 * C94;
    const double C1136 = C544 * C629;
    const double C1706 = C544 * C1199;
    const double C5567 = C544 * C630;
    const double C7326 = C544 * C2212;
    const double C7991 = C544 * C2614;
    const double C9829 = C9818 * C95;
    const double C9826 = C9818 * C101;
    const double C9822 = C9818 * C94;
    const double C9988 = C9818 * C278;
    const double C10149 = C9818 * C444;
    const double C10147 = C9818 * C216;
    const double C10377 = C9818 * C629;
    const double C11046 = C9818 * C1199;
    const double C24608 = C9818 * C637;
    const double C24604 = C9818 * C630;
    const double C24814 = C9818 * C826;
    const double C25019 = C9818 * C1010;
    const double C25017 = C9818 * C760;
    const double C26423 = C9818 * C2212;
    const double C26964 = C9818 * C2614;
    const double C9824 = C9819 * C1199;
    const double C24606 = C9819 * C2614;
    const double C39414 =
        (((C44260 - (C43160 * 2 * C43190) / C43127) * ae) / C43127 -
         C43247 / C43131) /
            (2 * C43127) -
        ((C43160 * ((0 * ae) / C43127 - C43190 / C43129) + C44323) * be) /
            C43127;
    const double C39336 = C44323 / C44143;
    const double C9716 = C44322 / C43127;
    const double C39334 = C44260 / C44143 - (C44322 * C44310) / C43129;
    const double C39335 = C44322 / C43131 - (C44323 * C44310) / C43127;
    const double C29267 = C29158 * C221;
    const double C29263 = C29158 * C216;
    const double C29434 = C29158 * C392;
    const double C29429 = C29158 * C391;
    const double C29592 = C29158 * C546;
    const double C34875 = C29158 * C764;
    const double C34871 = C29158 * C760;
    const double C35077 = C29158 * C952;
    const double C35282 = C29158 * C1128;
    const double C170 = C151 * C103;
    const double C233 = C214 * C103;
    const double C4480 = C4465 * C103;
    const double C9833 = C9818 * C103;
    const double C705 = C151 * C635;
    const double C771 = C214 * C635;
    const double C4475 = C4466 * C635;
    const double C5040 = C4465 * C635;
    const double C10381 = C9818 * C635;
    const double C1275 = C151 * C1205;
    const double C1341 = C214 * C1205;
    const double C5718 = C4465 * C1205;
    const double C9828 = C9819 * C1205;
    const double C11050 = C9818 * C1205;
    const double C6993 = C214 * C2216;
    const double C26427 = C9818 * C2216;
    const double C7562 = C214 * C2618;
    const double C12694 = C151 * C2618;
    const double C24610 = C9819 * C2618;
    const double C26968 = C9818 * C2618;
    const double C35432 = C4466 * C2618;
    const double C37123 = C4465 * C2618;
    const double C14485 = C151 * C4009;
    const double C38925 = C4465 * C4009;
    const double C21916 = C214 * C6863;
    const double C22355 = C214 * C7400;
    const double C26429 = C9819 * C7400;
    const double C37125 = C4466 * C7400;
    const double C42815 = C151 * C14409;
    const double C5197 = C4407 * C634;
    const double C5190 = C44312 * C634;
    const double C15700 = C44312 * C634;
    const double C20617 = C44138 * C634;
    const double C11129 = C4407 * C1204;
    const double C11122 = C44312 * C1204;
    const double C25322 = C44138 * C1204;
    const double C30539 = C44312 * C1204;
    const double C7050 = C4407 * C2215;
    const double C20612 = C44138 * C2215;
    const double C7635 = C4407 * C2617;
    const double C22410 = C44138 * C2617;
    const double C14596 = C4407 * C4008;
    const double C28830 = C44138 * C4008;
    const double C21964 = C44138 * C6862;
    const double C22414 = C44138 * C7399;
    const double C42903 = C44138 * C14408;
    const double C43304 = C43301 + C43295;
    const double C43661 = C43659 + C43295;
    const double C43749 = C43747 + C43295;
    const double C2898 = (ae * (C43367 * C43381 + C43293 * be) +
                          C43341 * (be * C43406 + C43367 * C43272 * C43441)) /
                         C43129;
    const double C3007 = (ae * (C43341 * C43355 + C43293 * be) +
                          C43367 * (be * C43457 + C43341 * C43272 * C43478)) /
                         C43129;
    const double C2263 =
        (C43272 * C43348 + C43341 * (C43341 * C43355 + C43293 * be) +
         C43341 * C43293 * be) /
        C43127;
    const double C2351 =
        (C43272 * C43399 + C43341 * (C43341 * C43406 + C43293 * ae) +
         C43341 * C43293 * ae) /
        C43127;
    const double C2677 = (C43367 * (C43341 * C43355 + C43293 * be)) / C43127;
    const double C2733 =
        (C43367 * C43341 * C43381 + C43341 * C43293 * be) / C43127;
    const double C2789 = (C43367 * (C43341 * C43406 + C43293 * ae)) / C43127;
    const double C2951 =
        (C43367 * C43341 * C43457 + C43341 * C43293 * ae) / C43127;
    const double C4100 =
        (C43272 * C43374 + C43367 * (C43367 * C43381 + C43293 * be) +
         C43367 * C43293 * be) /
        C43127;
    const double C4270 =
        (C43272 * C43450 + C43367 * (C43367 * C43457 + C43293 * ae) +
         C43367 * C43293 * ae) /
        C43127;
    const double C2213 = C43272 * C43275 + C43293 * C43419;
    const double C2615 = C43367 * C43341 * C43293;
    const double C4006 = C43272 * C43275 + C43293 * C43482;
    const double C6861 =
        2 * C43341 * C43293 + C43341 * (C43293 + C43315 * C43419);
    const double C7398 = C43367 * (C43293 + C43315 * C43419);
    const double C14407 =
        2 * C43367 * C43293 + C43367 * (C43293 + C43315 * C43482);
    const double C43303 = C43300 + C43292;
    const double C43660 = C43657 + C43292;
    const double C43748 = C43745 + C43292;
    const double C9506 = (ae * (C43374 + C43367 * (C43367 * C43379 + C43292) +
                                C43367 * C43287 * be) +
                          C43341 * (C43438 + be * C43367 * C43404 +
                                    C43367 * (C43407 + C43367 * C43441))) /
                         C43129;
    const double C43302 = C43299 * C43128;
    const double C43424 = C43423 * C43128;
    const double C43487 = C43486 * C43128;
    const double C7775 = (be * C43399 + C43367 * C43438 +
                          ae * (C43367 * C43341 * C43379 + C43658 * be) +
                          C43341 * (ae * (C43367 * C43379 + C43292) +
                                    C43341 * (C43407 + C43367 * C43441))) /
                         C43129;
    const double C9346 =
        (C43341 * C43374 + C43367 * (C43367 * C43723 + C43658 * be) +
         C43367 * C43658 * be) /
        C43127;
    const double C9558 =
        (C43341 * C43450 + C43367 * (C43367 * C43724 + C43658 * ae) +
         C43367 * C43658 * ae) /
        C43127;
    const double C9234 = C43341 * C43275 + C43658 * C43482;
    const double C28653 =
        2 * C43367 * C43658 + C43367 * (C43658 + C43772 * C43482);
    const double C339 = C44245 * C328;
    const double C15173 = C14931 * C328;
    const double C558 = C44260 * C547;
    const double C29604 = C29158 * C547;
    const double C171 = C151 * C96;
    const double C234 = C214 * C96;
    const double C341 = C325 * C96;
    const double C560 = C544 * C96;
    const double C707 = C151 * C628;
    const double C773 = C214 * C628;
    const double C890 = C325 * C628;
    const double C1132 = C544 * C628;
    const double C4478 = C4466 * C628;
    const double C1277 = C151 * C1198;
    const double C1343 = C214 * C1198;
    const double C1460 = C325 * C1198;
    const double C1702 = C544 * C1198;
    const double C9831 = C9819 * C1198;
    const double C21914 = C214 * C6860;
    const double C22173 = C544 * C6860;
    const double C22353 = C214 * C7397;
    const double C22680 = C544 * C7397;
    const double C26425 = C9819 * C7397;
    const double C37121 = C4466 * C7397;
    const double C42813 = C151 * C14406;
    const double C42949 = C325 * C14406;
    const double C169 = C44245 * C159;
    const double C15003 = C14931 * C159;
    const double C167 = C44245 * C154;
    const double C336 = C151 * C154;
    const double C4648 = C4465 * C154;
    const double C14999 = C14931 * C154;
    const double C172 = C44245 * C155;
    const double C340 = C151 * C155;
    const double C704 = C44245 * C695;
    const double C893 = C151 * C695;
    const double C4470 = C44321 * C695;
    const double C4640 = C4466 * C695;
    const double C5274 = C4465 * C695;
    const double C14992 = C44321 * C695;
    const double C15559 = C14931 * C695;
    const double C708 = C44245 * C696;
    const double C889 = C151 * C696;
    const double C4479 = C44321 * C696;
    const double C4644 = C4466 * C696;
    const double C15001 = C44321 * C696;
    const double C1274 = C44245 * C1265;
    const double C1463 = C151 * C1265;
    const double C5928 = C4465 * C1265;
    const double C16205 = C14931 * C1265;
    const double C1278 = C44245 * C1266;
    const double C1459 = C151 * C1266;
    const double C12693 = C44245 * C2676;
    const double C12894 = C151 * C2676;
    const double C25179 = C44321 * C2676;
    const double C26891 = C14931 * C2676;
    const double C35427 = C44321 * C2676;
    const double C35635 = C4466 * C2676;
    const double C37333 = C4465 * C2676;
    const double C14484 = C44245 * C4055;
    const double C14656 = C151 * C4055;
    const double C28718 = C14931 * C4055;
    const double C39083 = C4465 * C4055;
    const double C42814 = C44245 * C14478;
    const double C42948 = C151 * C14478;
    const double C232 = C44260 * C222;
    const double C29276 = C29158 * C222;
    const double C230 = C44260 * C217;
    const double C555 = C214 * C217;
    const double C10159 = C9818 * C217;
    const double C29272 = C29158 * C217;
    const double C235 = C44260 * C218;
    const double C559 = C214 * C218;
    const double C770 = C44260 * C761;
    const double C1135 = C214 * C761;
    const double C10798 = C9818 * C761;
    const double C29816 = C29158 * C761;
    const double C774 = C44260 * C762;
    const double C1131 = C214 * C762;
    const double C1340 = C44260 * C1331;
    const double C1705 = C214 * C1331;
    const double C9823 = C44323 * C1331;
    const double C10151 = C9819 * C1331;
    const double C11506 = C9818 * C1331;
    const double C29265 = C44323 * C1331;
    const double C30464 = C29158 * C1331;
    const double C1344 = C44260 * C1332;
    const double C1701 = C214 * C1332;
    const double C9832 = C44323 * C1332;
    const double C10155 = C9819 * C1332;
    const double C29274 = C44323 * C1332;
    const double C6992 = C44260 * C2306;
    const double C7325 = C214 * C2306;
    const double C26739 = C9818 * C2306;
    const double C36660 = C29158 * C2306;
    const double C7561 = C44260 * C2732;
    const double C7990 = C214 * C2732;
    const double C24605 = C44323 * C2732;
    const double C25021 = C9819 * C2732;
    const double C27406 = C9818 * C2732;
    const double C34873 = C44323 * C2732;
    const double C37194 = C29158 * C2732;
    const double C21915 = C44260 * C6986;
    const double C22172 = C214 * C6986;
    const double C22354 = C44260 * C7555;
    const double C22679 = C214 * C7555;
    const double C26426 = C44323 * C7555;
    const double C26735 = C9819 * C7555;
    const double C36662 = C44323 * C7555;
    const double C338 = C151 * C279;
    const double C400 = C214 * C279;
    const double C4650 = C4465 * C279;
    const double C9991 = C9818 * C279;
    const double C342 = C151 * C280;
    const double C401 = C214 * C280;
    const double C895 = C151 * C827;
    const double C957 = C214 * C827;
    const double C4642 = C4466 * C827;
    const double C5276 = C4465 * C827;
    const double C10590 = C9818 * C827;
    const double C891 = C151 * C828;
    const double C959 = C214 * C828;
    const double C4646 = C4466 * C828;
    const double C1465 = C151 * C1397;
    const double C1527 = C214 * C1397;
    const double C5930 = C4465 * C1397;
    const double C9990 = C9819 * C1397;
    const double C11286 = C9818 * C1397;
    const double C1461 = C151 * C1398;
    const double C1529 = C214 * C1398;
    const double C9993 = C9819 * C1398;
    const double C7161 = C214 * C2350;
    const double C26581 = C9818 * C2350;
    const double C7778 = C214 * C2788;
    const double C12896 = C151 * C2788;
    const double C24816 = C9819 * C2788;
    const double C27192 = C9818 * C2788;
    const double C35637 = C4466 * C2788;
    const double C37335 = C4465 * C2788;
    const double C14658 = C151 * C4143;
    const double C39085 = C4465 * C4143;
    const double C42950 = C151 * C14590;
    const double C501 = C151 * C445;
    const double C557 = C214 * C445;
    const double C4818 = C4465 * C445;
    const double C10161 = C9818 * C445;
    const double C502 = C151 * C446;
    const double C561 = C214 * C446;
    const double C1073 = C151 * C1011;
    const double C1137 = C214 * C1011;
    const double C4817 = C4466 * C1011;
    const double C5496 = C4465 * C1011;
    const double C10800 = C9818 * C1011;
    const double C1075 = C151 * C1012;
    const double C1133 = C214 * C1012;
    const double C4820 = C4466 * C1012;
    const double C1643 = C151 * C1581;
    const double C1707 = C214 * C1581;
    const double C6138 = C4465 * C1581;
    const double C10153 = C9819 * C1581;
    const double C11508 = C9818 * C1581;
    const double C1645 = C151 * C1582;
    const double C1703 = C214 * C1582;
    const double C10157 = C9819 * C1582;
    const double C7327 = C214 * C2476;
    const double C26741 = C9818 * C2476;
    const double C7992 = C214 * C2950;
    const double C13101 = C151 * C2950;
    const double C25023 = C9819 * C2950;
    const double C27408 = C9818 * C2950;
    const double C35846 = C4466 * C2950;
    const double C37549 = C4465 * C2950;
    const double C14826 = C151 * C4269;
    const double C39243 = C4465 * C4269;
    const double C22174 = C214 * C7212;
    const double C22681 = C214 * C7845;
    const double C26737 = C9819 * C7845;
    const double C37551 = C4466 * C7845;
    const double C43330 = C43327 + C43318;
    const double C43761 = C43298 + C43759;
    const double C28655 =
        (2 * C43367 * C43707 + C43367 * (C43707 + C43825 * C43482)) / C43127;
    const double C43849 = C43298 + C43847;
    const double C43329 = C43326 + C43314;
    const double C43767 = C43297 + C43765;
    const double C28654 =
        (2 * C43367 * C43717 + C43367 * (C43717 + C43831 * C43482)) / C43127;
    const double C43861 = C43297 + C43859;
    const double C43328 = C43325 * C43128;
    const double C43364 = C43353 + C43362;
    const double C43667 = C43341 * C43664;
    const double C14479 =
        (2 * C43367 * C43355 + C43367 * (C43355 + C43664 * C43482)) / C43127;
    const double C43776 = C43771 + C43314;
    const double C43867 = C43353 + C43865;
    const double C43390 = C43379 + C43388;
    const double C43726 = C43341 * C43674;
    const double C43751 = C43367 * C43674;
    const double C6987 =
        (2 * C43341 * C43381 + C43341 * (C43381 + C43674 * C43419)) / C43127;
    const double C7556 = (C43367 * (C43381 + C43674 * C43419) +
                          (C43293 + C43315 * C43419) * be) /
                         C43127;
    const double C43791 = C43379 + C43789;
    const double C43838 = C43367 * C43835;
    const double C43876 = C43871 + C43314;
    const double C43415 = C43404 + C43413;
    const double C43668 = C43341 * C43666;
    const double C14591 =
        (2 * C43367 * C43406 + C43367 * (C43406 + C43666 * C43482)) / C43127;
    const double C43779 = C43774 + C43318;
    const double C43855 = C43404 + C43854;
    const double C43429 = C43428 * C43128;
    const double C43466 = C43455 + C43464;
    const double C43727 = C43341 * C43680;
    const double C43753 = C43367 * C43680;
    const double C7213 =
        (2 * C43341 * C43457 + C43341 * (C43457 + C43680 * C43419)) / C43127;
    const double C7846 = (C43367 * (C43457 + C43680 * C43419) +
                          (C43293 + C43315 * C43419) * ae) /
                         C43127;
    const double C43797 = C43455 + C43795;
    const double C43839 = C43367 * C43837;
    const double C43879 = C43874 + C43318;
    const double C43492 = C43491 * C43128;
    const double C26970 = C9819 * C9237;
    const double C38927 = C4466 * C9237;
    const double C41459 = C151 * C9237;
    const double C27043 = C44138 * C9236;
    const double C97 = 3 * (C43275 + C43287 * C43276) +
                       C43272 * (2 * C43293 + C43272 * C43322);
    const double C631 = C43341 * (2 * C43293 + C43272 * C43322);
    const double C1201 = C43367 * (2 * C43293 + C43272 * C43322);
    const double C2214 = C43275 + C43287 * C43276 + C43322 * C43419;
    const double C2616 = C43367 * C43341 * C43322;
    const double C4007 = C43275 + C43287 * C43276 + C43322 * C43482;
    const double C9235 = C43341 * C43293 + C43665 * C43482;
    const double C21819 = 3 * (C43275 + C43287 * C43419) +
                          C43341 * (2 * C43658 + C43341 * C43778);
    const double C22228 = C43367 * (2 * C43658 + C43341 * C43778);
    const double C23623 = C43275 + C43287 * C43419 + C43778 * C43482;
    const double C42759 = 3 * (C43275 + C43287 * C43482) +
                          C43367 * (2 * C43746 + C43367 * C43878);
    const double C10977 = C44245 * C4056;
    const double C11207 = C151 * C4056;
    const double C5119 = C44260 * C2307;
    const double C5570 = C214 * C2307;
    const double C11209 = C151 * C4144;
    const double C11288 = C9819 * C4144;
    const double C5498 = C4466 * C2477;
    const double C5572 = C214 * C2477;
    const double C174 = C44245 * C160;
    const double C706 = C44245 * C699;
    const double C4474 = C44321 * C699;
    const double C14996 = C44321 * C699;
    const double C15563 = C14931 * C699;
    const double C1276 = C44245 * C1269;
    const double C16209 = C14931 * C1269;
    const double C12695 = C44245 * C2679;
    const double C25183 = C44321 * C2679;
    const double C26895 = C14931 * C2679;
    const double C35431 = C44321 * C2679;
    const double C14486 = C44245 * C4058;
    const double C28722 = C14931 * C4058;
    const double C43363 = C43356 + C43361;
    const double C43760 = C43307 + C43758;
    const double C26897 = C44321 * C7487;
    const double C37126 = C44321 * C7487;
    const double C28724 = C44321 * C9294;
    const double C38928 = C44321 * C9294;
    const double C41460 = C44245 * C9294;
    const double C42816 = C44245 * C14480;
    const double C5201 = C4407 * C831;
    const double C5194 = C44312 * C831;
    const double C15704 = C44312 * C831;
    const double C20619 = C44138 * C831;
    const double C11133 = C4407 * C1401;
    const double C11126 = C44312 * C1401;
    const double C25324 = C44138 * C1401;
    const double C30543 = C44312 * C1401;
    const double C7054 = C4407 * C2353;
    const double C20614 = C44138 * C2353;
    const double C7639 = C4407 * C2791;
    const double C22412 = C44138 * C2791;
    const double C14600 = C4407 * C4146;
    const double C28832 = C44138 * C4146;
    const double C43414 = C43407 + C43412;
    const double C43766 = C43306 + C43764;
    const double C28827 =
        (ae * (2 * C43367 * C43297 + C43367 * (C43297 + C43320 * C43482)) +
         C43341 * (2 * C43803 + C43367 * (C43410 + std::pow(C43270, 6) * bs[6] *
                                                       C43398 * C43482))) /
        C43129;
    const double C42898 =
        (3 * (C43403 + C43410 * C43482) +
         C43367 * (2 * C43803 + C43367 * (C43410 + std::pow(C43270, 6) * bs[6] *
                                                       C43398 * C43482))) /
        C43129;
    const double C21966 = C44138 * C7046;
    const double C22416 = C44138 * C7631;
    const double C27045 = C44138 * C9402;
    const double C42905 = C44138 * C14592;
    const double C237 = C44260 * C223;
    const double C772 = C44260 * C765;
    const double C29820 = C29158 * C765;
    const double C1342 = C44260 * C1335;
    const double C9827 = C44323 * C1335;
    const double C29269 = C44323 * C1335;
    const double C30468 = C29158 * C1335;
    const double C6994 = C44260 * C2309;
    const double C36664 = C29158 * C2309;
    const double C7563 = C44260 * C2735;
    const double C24609 = C44323 * C2735;
    const double C34877 = C44323 * C2735;
    const double C37198 = C29158 * C2735;
    const double C43389 = C43382 + C43387;
    const double C28775 =
        (2 * (be * C43707 + C43367 * C43824) + be * (C43707 + C43825 * C43482) +
         C43367 *
             (C43824 + be * C43367 * C43825 +
              C43367 * (be * C43825 + C43367 * C43341 * std::pow(C43270, 6) *
                                          bs[6] * C43373))) /
        C43129;
    const double C43848 = C43307 + C43846;
    const double C21917 = C44260 * C6988;
    const double C22356 = C44260 * C7557;
    const double C26430 = C44323 * C7557;
    const double C36666 = C44323 * C7557;
    const double C26971 = C44323 * C9348;
    const double C37200 = C44323 * C9348;
    const double C402 = C44260 * C393;
    const double C958 = C44260 * C953;
    const double C30022 = C29158 * C953;
    const double C1528 = C44260 * C1523;
    const double C9989 = C44323 * C1523;
    const double C29431 = C44323 * C1523;
    const double C30690 = C29158 * C1523;
    const double C7162 = C44260 * C2435;
    const double C36818 = C29158 * C2435;
    const double C7779 = C44260 * C2897;
    const double C24815 = C44323 * C2897;
    const double C35079 = C44323 * C2897;
    const double C37414 = C29158 * C2897;
    const double C7159 =
        (2 * (ae * C43381 + C43341 * C43673) + ae * (C43381 + C43674 * C43419) +
         C43341 *
             (C43673 + ae * C43341 * C43674 +
              C43341 * (ae * C43674 + C43341 * C43272 * std::pow(C43270, 6) *
                                          bs[6] * C43435))) /
        C43129;
    const double C7776 =
        (be * C43406 + C43367 * C43673 +
         ae * (C43367 * C43341 * C43674 + C43665 * be) +
         C43341 *
             (ae * (C43367 * C43674 + C43321) +
              C43341 * (be * C43666 + C43367 * C43272 * std::pow(C43270, 6) *
                                          bs[6] * C43435))) /
        C43129;
    const double C9507 =
        (ae * (C43381 + C43367 * (C43367 * C43674 + C43321) +
               C43367 * C43315 * be) +
         C43341 *
             (C43673 + be * C43367 * C43666 +
              C43367 * (be * C43666 + C43367 * C43272 * std::pow(C43270, 6) *
                                          bs[6] * C43435))) /
        C43129;
    const double C14714 =
        (2 * (be * C43406 + C43367 * C43673) + be * (C43406 + C43666 * C43482) +
         C43367 *
             (C43673 + be * C43367 * C43666 +
              C43367 * (be * C43666 + C43367 * C43272 * std::pow(C43270, 6) *
                                          bs[6] * C43435))) /
        C43129;
    const double C43790 = C43382 + C43788;
    const double C43808 = C43407 + C43807;
    const double C960 = C44260 * C954;
    const double C1530 = C44260 * C1524;
    const double C9994 = C44323 * C1524;
    const double C29436 = C44323 * C1524;
    const double C5355 = C44260 * C2436;
    const double C11289 = C44323 * C4229;
    const double C30692 = C44323 * C4229;
    const double C22047 = C44260 * C7158;
    const double C5427 = C4407 * C1015;
    const double C5424 = C44312 * C1015;
    const double C15928 = C44312 * C1015;
    const double C20779 = C44138 * C1015;
    const double C11361 = C4407 * C1585;
    const double C11358 = C44312 * C1585;
    const double C25540 = C44138 * C1585;
    const double C30761 = C44312 * C1585;
    const double C7218 = C4407 * C2479;
    const double C20776 = C44138 * C2479;
    const double C7851 = C4407 * C2953;
    const double C22574 = C44138 * C2953;
    const double C14771 = C4407 * C4272;
    const double C29002 = C44138 * C4272;
    const double C43465 = C43458 + C43463;
    const double C28999 =
        (2 * (ae * C43717 + C43367 * C43830) + ae * (C43717 + C43831 * C43482) +
         C43367 *
             (C43830 + ae * C43367 * C43831 +
              C43367 * (ae * C43831 + C43367 * C43341 * std::pow(C43270, 6) *
                                          bs[6] * C43449))) /
        C43129;
    const double C43860 = C43306 + C43858;
    const double C22091 = C44138 * C7214;
    const double C22576 = C44138 * C7847;
    const double C27265 = C44138 * C9560;
    const double C43037 = C44138 * C14767;
    const double C503 = C44245 * C494;
    const double C1074 = C44245 * C1069;
    const double C4816 = C44321 * C1069;
    const double C15338 = C44321 * C1069;
    const double C16001 = C14931 * C1069;
    const double C1644 = C44245 * C1639;
    const double C16623 = C14931 * C1639;
    const double C13102 = C44245 * C3006;
    const double C25609 = C44321 * C3006;
    const double C27333 = C14931 * C3006;
    const double C35845 = C44321 * C3006;
    const double C14827 = C44245 * C4313;
    const double C29055 = C14931 * C4313;
    const double C7271 =
        (2 * (be * C43457 + C43341 * C43679) + be * (C43457 + C43680 * C43419) +
         C43341 *
             (C43679 + be * C43341 * C43680 +
              C43341 * (be * C43680 + C43341 * C43272 * std::pow(C43270, 6) *
                                          bs[6] * C43472))) /
        C43129;
    const double C14824 =
        (2 * (ae * C43355 + C43367 * C43679) + ae * (C43355 + C43664 * C43482) +
         C43367 *
             (C43679 + ae * C43367 * C43664 +
              C43367 * (ae * C43664 + C43367 * C43272 * std::pow(C43270, 6) *
                                          bs[6] * C43472))) /
        C43129;
    const double C43796 = C43458 + C43794;
    const double C43866 = C43356 + C43864;
    const double C1076 = C44245 * C1070;
    const double C4821 = C44321 * C1070;
    const double C15343 = C44321 * C1070;
    const double C1646 = C44245 * C1640;
    const double C5499 = C44321 * C2521;
    const double C16003 = C44321 * C2521;
    const double C11435 = C44245 * C4314;
    const double C43079 = C44245 * C14823;
    const double C86 = C44315 / C44166;
    const double C84 = C44161 / C44166 - (C44313 * C44300) / C44301;
    const double C85 = C44313 / C44314 - (C44315 * C44300) / C44156;
    const double C1768 = C44313 / C44156;
    const double C2210 = C44317 / C44166;
    const double C624 = C44316 / C44156;
    const double C2208 = C44195 / C44166 - (C44316 * C44305) / C44301;
    const double C2209 = C44316 / C44314 - (C44317 * C44305) / C44156;
    const double C4004 = C44319 / C44166;
    const double C1196 = C44318 / C44156;
    const double C4002 = C44212 / C44166 - (C44318 * C44306) / C44301;
    const double C4003 = C44318 / C44314 - (C44319 * C44306) / C44156;
    const double C43137 = C43125 * C43135;
    const double C4413 = (-C43135 / C43127) / (2 * C43127) - (0 * be) / C43127;
    const double C20063 = -C43135 / C43127;
    const double C15470 = C14935 * C635;
    const double C15468 = C14935 * C634;
    const double C15712 = C14935 * C828;
    const double C15708 = C14935 * C628;
    const double C15705 = C14935 * C827;
    const double C15701 = C14935 * C629;
    const double C15932 = C14935 * C1012;
    const double C15929 = C14935 * C1011;
    const double C17662 = C14935 * C2477;
    const double C30309 = C14935 * C1205;
    const double C30307 = C14935 * C1204;
    const double C30551 = C14935 * C1398;
    const double C30547 = C14935 * C1198;
    const double C30544 = C14935 * C1397;
    const double C30540 = C14935 * C1199;
    const double C30765 = C14935 * C1582;
    const double C30762 = C14935 * C1581;
    const double C33961 = C14935 * C4144;
    const double C15467 = C14929 * C642;
    const double C15711 = C14929 * C831;
    const double C15707 = C14929 * C634;
    const double C15702 = C14929 * C830;
    const double C15698 = C14929 * C636;
    const double C15931 = C14929 * C1015;
    const double C15926 = C14929 * C1014;
    const double C17507 = C14929 * C2353;
    const double C17503 = C14929 * C2215;
    const double C17661 = C14929 * C2479;
    const double C18047 = C14929 * C2791;
    const double C18043 = C14929 * C2617;
    const double C18249 = C14929 * C2953;
    const double C30306 = C14929 * C1212;
    const double C30550 = C14929 * C1401;
    const double C30546 = C14929 * C1204;
    const double C30541 = C14929 * C1400;
    const double C30537 = C14929 * C1206;
    const double C30764 = C14929 * C1585;
    const double C30759 = C14929 * C1584;
    const double C33960 = C14929 * C4146;
    const double C33956 = C14929 * C4008;
    const double C34116 = C14929 * C4272;
    const double C87 =
        (((0 - (C43125 * C43126) / C43127) * ae) / C43127 - (0 * be) / C43131) /
            (2 * C43127) -
        ((C43125 * (((C44138 - (C43125 * 2 * C43132) / C43127) * ae) / C43127 -
                    C43126 / C43131) +
          C14929) *
         be) /
            C43127 +
        (0 * ae) / C43127 - C43132 / C43129;
    const double C43226 = C43157 * C43225;
    const double C4649 = C4633 * C95;
    const double C4637 = C4633 * C94;
    const double C5275 = C4633 * C629;
    const double C5929 = C4633 * C1199;
    const double C35632 = C4633 * C1200;
    const double C37334 = C4633 * C2614;
    const double C39084 = C4633 * C4005;
    const double C4645 = C4634 * C628;
    const double C4641 = C4634 * C629;
    const double C35636 = C4634 * C2614;
    const double C37338 = C4634 * C7397;
    const double C15002 = C14987 * C103;
    const double C14998 = C14987 * C95;
    const double C14995 = C14987 * C101;
    const double C14991 = C14987 * C94;
    const double C15172 = C14987 * C279;
    const double C15170 = C14987 * C154;
    const double C15160 = C14987 * C278;
    const double C15158 = C14987 * C153;
    const double C15340 = C14987 * C445;
    const double C15337 = C14987 * C444;
    const double C15562 = C14987 * C635;
    const double C15558 = C14987 * C629;
    const double C15786 = C14987 * C827;
    const double C15784 = C14987 * C695;
    const double C16000 = C14987 * C1011;
    const double C16208 = C14987 * C1205;
    const double C16204 = C14987 * C1199;
    const double C16416 = C14987 * C1397;
    const double C16414 = C14987 * C1265;
    const double C16622 = C14987 * C1581;
    const double C25182 = C14987 * C1207;
    const double C25178 = C14987 * C1200;
    const double C25393 = C14987 * C1396;
    const double C25391 = C14987 * C1264;
    const double C25608 = C14987 * C1580;
    const double C26894 = C14987 * C2618;
    const double C26890 = C14987 * C2614;
    const double C27114 = C14987 * C2788;
    const double C27112 = C14987 * C2676;
    const double C27332 = C14987 * C2950;
    const double C28721 = C14987 * C4009;
    const double C28717 = C14987 * C4005;
    const double C28890 = C14987 * C4143;
    const double C28888 = C14987 * C4055;
    const double C29054 = C14987 * C4269;
    const double C15000 = C14988 * C628;
    const double C14997 = C14988 * C635;
    const double C14993 = C14988 * C629;
    const double C15168 = C14988 * C828;
    const double C15166 = C14988 * C696;
    const double C15164 = C14988 * C827;
    const double C15162 = C14988 * C695;
    const double C15342 = C14988 * C1012;
    const double C15339 = C14988 * C1011;
    const double C16002 = C14988 * C2477;
    const double C25184 = C14988 * C2618;
    const double C25180 = C14988 * C2614;
    const double C25397 = C14988 * C2788;
    const double C25395 = C14988 * C2676;
    const double C25610 = C14988 * C2950;
    const double C26896 = C14988 * C7400;
    const double C26892 = C14988 * C7397;
    const double C27334 = C14988 * C7845;
    const double C28723 = C14988 * C9237;
    const double C15171 = C15155 * C95;
    const double C15159 = C15155 * C94;
    const double C15785 = C15155 * C629;
    const double C16415 = C15155 * C1199;
    const double C25392 = C15155 * C1200;
    const double C27113 = C15155 * C2614;
    const double C28889 = C15155 * C4005;
    const double C15167 = C15156 * C628;
    const double C15163 = C15156 * C629;
    const double C25396 = C15156 * C2614;
    const double C27117 = C15156 * C7397;
    const double C344 = C332 - C333;
    const double C11213 = C11202 - C11203;
    const double C4481 = C4409 * C159;
    const double C4477 = C4409 * C154;
    const double C4472 = C4409 * C158;
    const double C4468 = C4409 * C153;
    const double C4651 = C4409 * C328;
    const double C4639 = C4409 * C327;
    const double C4819 = C4409 * C493;
    const double C4814 = C4409 * C492;
    const double C5041 = C4409 * C699;
    const double C5037 = C4409 * C695;
    const double C5497 = C4409 * C1069;
    const double C5719 = C4409 * C1269;
    const double C5715 = C4409 * C1265;
    const double C6139 = C4409 * C1639;
    const double C35429 = C4409 * C1268;
    const double C35425 = C4409 * C1264;
    const double C35634 = C4409 * C1456;
    const double C35843 = C4409 * C1638;
    const double C37124 = C4409 * C2679;
    const double C37120 = C4409 * C2676;
    const double C37550 = C4409 * C3006;
    const double C38926 = C4409 * C4058;
    const double C38922 = C4409 * C4055;
    const double C39244 = C4409 * C4313;
    const double C20103 =
        (((0 - (C43157 * C43217) / C43127) * ae) / C43127 - (0 * be) / C43131) /
            (2 * C43127) -
        ((C43157 * (((C44245 - (C43157 * 2 * C43178) / C43127) * ae) / C43127 -
                    C43217 / C43131) +
          C4409) *
         be) /
            C43127 +
        (0 * ae) / C43127 - C43178 / C43129;
    const double C43256 = C43160 * C43255;
    const double C10160 = C10144 * C95;
    const double C10148 = C10144 * C94;
    const double C10799 = C10144 * C629;
    const double C11507 = C10144 * C1199;
    const double C25018 = C10144 * C630;
    const double C26740 = C10144 * C2212;
    const double C27407 = C10144 * C2614;
    const double C10156 = C10145 * C1198;
    const double C10152 = C10145 * C1199;
    const double C25022 = C10145 * C2614;
    const double C26736 = C10145 * C7397;
    const double C29275 = C29260 * C103;
    const double C29271 = C29260 * C95;
    const double C29268 = C29260 * C101;
    const double C29264 = C29260 * C94;
    const double C29433 = C29260 * C279;
    const double C29430 = C29260 * C278;
    const double C29603 = C29260 * C445;
    const double C29601 = C29260 * C217;
    const double C29591 = C29260 * C444;
    const double C29589 = C29260 * C216;
    const double C29819 = C29260 * C635;
    const double C29815 = C29260 * C629;
    const double C30021 = C29260 * C827;
    const double C30229 = C29260 * C1011;
    const double C30227 = C29260 * C761;
    const double C30467 = C29260 * C1205;
    const double C30463 = C29260 * C1199;
    const double C30689 = C29260 * C1397;
    const double C30905 = C29260 * C1581;
    const double C30903 = C29260 * C1331;
    const double C34876 = C29260 * C637;
    const double C34872 = C29260 * C630;
    const double C35078 = C29260 * C826;
    const double C35281 = C29260 * C1010;
    const double C35279 = C29260 * C760;
    const double C36663 = C29260 * C2216;
    const double C36659 = C29260 * C2212;
    const double C36817 = C29260 * C2350;
    const double C36977 = C29260 * C2476;
    const double C36975 = C29260 * C2306;
    const double C37197 = C29260 * C2618;
    const double C37193 = C29260 * C2614;
    const double C37413 = C29260 * C2788;
    const double C37625 = C29260 * C2950;
    const double C37623 = C29260 * C2732;
    const double C29273 = C29261 * C1198;
    const double C29270 = C29261 * C1205;
    const double C29266 = C29261 * C1199;
    const double C29435 = C29261 * C1398;
    const double C29432 = C29261 * C1397;
    const double C29599 = C29261 * C1582;
    const double C29597 = C29261 * C1332;
    const double C29595 = C29261 * C1581;
    const double C29593 = C29261 * C1331;
    const double C30691 = C29261 * C4144;
    const double C34878 = C29261 * C2618;
    const double C34874 = C29261 * C2614;
    const double C35080 = C29261 * C2788;
    const double C35285 = C29261 * C2950;
    const double C35283 = C29261 * C2732;
    const double C36665 = C29261 * C7400;
    const double C36661 = C29261 * C7397;
    const double C36973 = C29261 * C7845;
    const double C36971 = C29261 * C7555;
    const double C37199 = C29261 * C9237;
    const double C29602 = C29586 * C95;
    const double C29590 = C29586 * C94;
    const double C30228 = C29586 * C629;
    const double C30904 = C29586 * C1199;
    const double C35280 = C29586 * C630;
    const double C36976 = C29586 * C2212;
    const double C37624 = C29586 * C2614;
    const double C29598 = C29587 * C1198;
    const double C29594 = C29587 * C1199;
    const double C35284 = C29587 * C2614;
    const double C36972 = C29587 * C7397;
    const double C563 = C551 - C552;
    const double C5575 = C5566 - C5567;
    const double C9834 = C9716 * C222;
    const double C9830 = C9716 * C217;
    const double C9825 = C9716 * C221;
    const double C9821 = C9716 * C216;
    const double C9992 = C9716 * C392;
    const double C9987 = C9716 * C391;
    const double C10162 = C9716 * C547;
    const double C10150 = C9716 * C546;
    const double C10382 = C9716 * C765;
    const double C10378 = C9716 * C761;
    const double C10591 = C9716 * C953;
    const double C11051 = C9716 * C1335;
    const double C11047 = C9716 * C1331;
    const double C11287 = C9716 * C1523;
    const double C24607 = C9716 * C764;
    const double C24603 = C9716 * C760;
    const double C24813 = C9716 * C952;
    const double C25020 = C9716 * C1128;
    const double C26428 = C9716 * C2309;
    const double C26424 = C9716 * C2306;
    const double C26582 = C9716 * C2435;
    const double C26969 = C9716 * C2735;
    const double C26965 = C9716 * C2732;
    const double C27193 = C9716 * C2897;
    const double C39413 =
        (((0 - (C43160 * C43247) / C43127) * ae) / C43127 - (0 * be) / C43131) /
            (2 * C43127) -
        ((C43160 * (((C44260 - (C43160 * 2 * C43190) / C43127) * ae) / C43127 -
                    C43247 / C43131) +
          C9716) *
         be) /
            C43127 +
        (0 * ae) / C43127 - C43190 / C43129;
    const double C105 = (2 * (C43272 * C43285 + C43275 * ae) +
                         C43272 * (C43285 + C43272 * C43304 + C43293 * ae) +
                         (C43275 + C43287 * C43276) * ae) /
                        C43127;
    const double C633 =
        (C43341 * (C43285 + C43272 * C43304 + C43293 * ae)) / C43127;
    const double C1203 =
        (C43367 * (C43285 + C43272 * C43304 + C43293 * ae)) / C43127;
    const double C2218 =
        (C43272 * C43285 + C43275 * ae + C43304 * C43419) / C43127;
    const double C2620 = (C43367 * C43341 * C43304) / C43127;
    const double C4011 =
        (C43272 * C43285 + C43275 * ae + C43304 * C43482) / C43127;
    const double C7044 = (2 * (C43341 * C43399 + C43275 * ae) +
                          C43341 * (C43399 + C43341 * C43661 + C43658 * ae) +
                          (C43275 + C43287 * C43419) * ae) /
                         C43127;
    const double C7629 =
        (C43367 * (C43399 + C43341 * C43661 + C43658 * ae)) / C43127;
    const double C9400 =
        (C43341 * C43399 + C43275 * ae + C43661 * C43482) / C43127;
    const double C14765 = (2 * (C43367 * C43450 + C43275 * ae) +
                           C43367 * (C43450 + C43367 * C43749 + C43746 * ae) +
                           (C43275 + C43287 * C43482) * ae) /
                          C43127;
    const double C6005 = C44260 * C2898;
    const double C10593 = C44323 * C2898;
    const double C30024 = C44323 * C2898;
    const double C6141 = C44321 * C3007;
    const double C10727 = C44245 * C3007;
    const double C16625 = C44321 * C3007;
    const double C5039 = C44321 * C2263;
    const double C5270 = C4466 * C2263;
    const double C15561 = C44321 * C2263;
    const double C15780 = C14988 * C2263;
    const double C5272 = C4466 * C2351;
    const double C5354 = C214 * C2351;
    const double C15782 = C14988 * C2351;
    const double C17508 = C14935 * C2351;
    const double C5717 = C44321 * C2677;
    const double C5924 = C4466 * C2677;
    const double C10308 = C44245 * C2677;
    const double C10517 = C151 * C2677;
    const double C16207 = C44321 * C2677;
    const double C16410 = C14988 * C2677;
    const double C5789 = C44260 * C2733;
    const double C6208 = C214 * C2733;
    const double C10380 = C44323 * C2733;
    const double C10794 = C9819 * C2733;
    const double C29818 = C44323 * C2733;
    const double C30223 = C29261 * C2733;
    const double C5926 = C4466 * C2789;
    const double C6004 = C214 * C2789;
    const double C10519 = C151 * C2789;
    const double C10592 = C9819 * C2789;
    const double C16412 = C14988 * C2789;
    const double C18048 = C14935 * C2789;
    const double C30023 = C29261 * C2789;
    const double C6140 = C4466 * C2951;
    const double C6210 = C214 * C2951;
    const double C10726 = C151 * C2951;
    const double C10796 = C9819 * C2951;
    const double C16624 = C14988 * C2951;
    const double C18250 = C14935 * C2951;
    const double C30225 = C29261 * C2951;
    const double C11049 = C44323 * C4100;
    const double C11502 = C9819 * C4100;
    const double C30466 = C44323 * C4100;
    const double C30899 = C29261 * C4100;
    const double C11434 = C151 * C4270;
    const double C11504 = C9819 * C4270;
    const double C30901 = C29261 * C4270;
    const double C34117 = C14935 * C4270;
    const double C5038 = C4466 * C2213;
    const double C5118 = C214 * C2213;
    const double C5271 = C4634 * C2213;
    const double C5571 = C544 * C2213;
    const double C15560 = C14988 * C2213;
    const double C15781 = C15156 * C2213;
    const double C17504 = C14935 * C2213;
    const double C5716 = C4466 * C2615;
    const double C5788 = C214 * C2615;
    const double C5925 = C4634 * C2615;
    const double C6209 = C544 * C2615;
    const double C10307 = C151 * C2615;
    const double C10379 = C9819 * C2615;
    const double C10518 = C325 * C2615;
    const double C10795 = C10145 * C2615;
    const double C16206 = C14988 * C2615;
    const double C16411 = C15156 * C2615;
    const double C18044 = C14935 * C2615;
    const double C29817 = C29261 * C2615;
    const double C30224 = C29587 * C2615;
    const double C10976 = C151 * C4006;
    const double C11048 = C9819 * C4006;
    const double C11208 = C325 * C4006;
    const double C11503 = C10145 * C4006;
    const double C30465 = C29261 * C4006;
    const double C30900 = C29587 * C4006;
    const double C33957 = C14935 * C4006;
    const double C104 = (2 * (C43272 * C43284 + C43275 * be) +
                         C43272 * (C43284 + C43272 * C43303 + C43293 * be) +
                         (C43275 + C43287 * C43276) * be) /
                        C43127;
    const double C632 =
        (C43341 * (C43284 + C43272 * C43303 + C43293 * be)) / C43127;
    const double C1202 =
        (C43367 * (C43284 + C43272 * C43303 + C43293 * be)) / C43127;
    const double C2217 =
        (C43272 * C43284 + C43275 * be + C43303 * C43419) / C43127;
    const double C2619 = (C43367 * C43341 * C43303) / C43127;
    const double C4010 =
        (C43272 * C43284 + C43275 * be + C43303 * C43482) / C43127;
    const double C7919 = (ae * (C43348 + C43341 * C43660 + C43658 * be) +
                          C43367 * (C43475 + be * C43341 * C43455 +
                                    C43341 * (C43458 + C43341 * C43478))) /
                         C43129;
    const double C9612 =
        (be * C43450 + C43341 * C43475 + ae * C43367 * C43660 +
         C43367 * (ae * C43660 + C43367 * (C43458 + C43341 * C43478))) /
        C43129;
    const double C6932 = (2 * (C43341 * C43348 + C43275 * be) +
                          C43341 * (C43348 + C43341 * C43660 + C43658 * be) +
                          (C43275 + C43287 * C43419) * be) /
                         C43127;
    const double C7485 =
        (C43367 * (C43348 + C43341 * C43660 + C43658 * be)) / C43127;
    const double C9292 =
        (C43341 * C43348 + C43275 * be + C43660 * C43482) / C43127;
    const double C14536 = (2 * (C43367 * C43374 + C43275 * be) +
                           C43367 * (C43374 + C43367 * C43748 + C43746 * be) +
                           (C43275 + C43287 * C43482) * be) /
                          C43127;
    const double C27195 = C44323 * C9506;
    const double C37416 = C44323 * C9506;
    const double C111 =
        (2 * (ae * C43284 + be * C43285 + C43272 * C43302) +
         ae * (C43284 + C43272 * C43303 + C43293 * be) +
         be * (C43285 + C43272 * C43304 + C43293 * ae) +
         C43272 * (C43302 + ae * C43303 + be * C43304 +
                   C43272 * (ae * C43297 + be * C43298 +
                             C43272 *
                                 (C43288 * C43289 +
                                  C43276 * bs[5] * std::pow(C43278, 5)) *
                                 C43128))) /
        C43129;
    const double C641 = (ae * C43341 * C43284 + be * C43341 * C43285 +
                         C43272 * C43341 * C43302) /
                        C43129;
    const double C1211 = (ae * C43367 * C43284 + be * C43367 * C43285 +
                          C43272 * C43367 * C43302) /
                         C43129;
    const double C2221 =
        ((C43275 + C43276 * C43277 * C43281) * C43128 + C43302 * C43419) /
        C43129;
    const double C2623 = (C43367 * C43341 * C43302) / C43129;
    const double C4014 =
        ((C43275 + C43276 * C43277 * C43281) * C43128 + C43302 * C43482) /
        C43129;
    const double C329 =
        (2 * C43272 * C43424 +
         C43272 *
             (C43424 + (C43308 + C43419 * C43309 * C43310) * C43128 * C43276)) /
        C43129;
    const double C885 = (ae * C43272 * C43348 + be * C43272 * C43399 +
                         C43341 * C43272 * C43424) /
                        C43129;
    const double C1455 = (C43367 * C43272 * C43424) / C43129;
    const double C2394 =
        ((C43275 + C43419 * C43277 * C43281) * C43128 +
         ae * (C43341 * C43348 + C43275 * be) +
         be * (C43341 * C43399 + C43275 * ae) +
         C43341 * (ae * C43348 + be * C43399 + C43341 * C43424)) /
        C43129;
    const double C2844 = (ae * C43367 * C43348 + be * C43367 * C43399 +
                          C43341 * C43367 * C43424) /
                         C43129;
    const double C4187 =
        ((C43275 + C43419 * C43277 * C43281) * C43128 + C43424 * C43482) /
        C43129;
    const double C548 =
        (2 * C43272 * C43487 +
         C43272 *
             (C43487 + (C43308 + C43482 * C43309 * C43310) * C43128 * C43276)) /
        C43129;
    const double C1127 = (C43341 * C43272 * C43487) / C43129;
    const double C1697 = (ae * C43272 * C43374 + be * C43272 * C43450 +
                          C43367 * C43272 * C43487) /
                         C43129;
    const double C2561 =
        ((C43275 + C43482 * C43277 * C43281) * C43128 + C43487 * C43419) /
        C43129;
    const double C3059 = (ae * C43341 * C43374 + be * C43341 * C43450 +
                          C43367 * C43341 * C43487) /
                         C43129;
    const double C4354 =
        ((C43275 + C43482 * C43277 * C43281) * C43128 +
         ae * (C43367 * C43374 + C43275 * be) +
         be * (C43367 * C43450 + C43275 * ae) +
         C43367 * (ae * C43374 + be * C43450 + C43367 * C43487)) /
        C43129;
    const double C22520 = C44260 * C7775;
    const double C26584 = C44323 * C7775;
    const double C36820 = C44323 * C7775;
    const double C26967 = C44323 * C9346;
    const double C27402 = C9819 * C9346;
    const double C37196 = C44323 * C9346;
    const double C37619 = C29261 * C9346;
    const double C27404 = C9819 * C9558;
    const double C29056 = C14988 * C9558;
    const double C37621 = C29261 * C9558;
    const double C39245 = C4466 * C9558;
    const double C41770 = C151 * C9558;
    const double C26966 = C9819 * C9234;
    const double C27403 = C10145 * C9234;
    const double C28719 = C14988 * C9234;
    const double C28885 = C15156 * C9234;
    const double C37195 = C29261 * C9234;
    const double C37620 = C29587 * C9234;
    const double C38923 = C4466 * C9234;
    const double C39080 = C4634 * C9234;
    const double C41457 = C151 * C9234;
    const double C41613 = C325 * C9234;
    const double C176 = C169 - C170;
    const double C175 = C167 - C168;
    const double C345 = C336 - C337;
    const double C346 = C340 - C341;
    const double C898 = C893 - C894;
    const double C897 = C889 - C890;
    const double C10974 = C1273 - C1274;
    const double C10972 = C1274 - C1273;
    const double C1468 = C1463 - C1464;
    const double C1467 = C1459 - C1460;
    const double C12899 = C12894 - C12895;
    const double C42811 = C14484 - C14483;
    const double C14660 = C14656 - C14657;
    const double C42952 = C42948 - C42949;
    const double C239 = C232 - C233;
    const double C238 = C230 - C231;
    const double C564 = C555 - C556;
    const double C565 = C559 - C560;
    const double C5116 = C769 - C770;
    const double C5114 = C770 - C769;
    const double C1140 = C1135 - C1136;
    const double C1139 = C1131 - C1132;
    const double C1710 = C1705 - C1706;
    const double C1709 = C1701 - C1702;
    const double C21912 = C6992 - C6991;
    const double C7329 = C7325 - C7326;
    const double C7994 = C7990 - C7991;
    const double C22176 = C22172 - C22173;
    const double C22683 = C22679 - C22680;
    const double C403 = C399 - C400;
    const double C504 = C500 - C501;
    const double C43333 = C43272 * C43330;
    const double C43709 = C43341 * C43330;
    const double C6865 =
        (2 * C43341 * C43304 + C43341 * (C43304 + C43330 * C43419)) / C43127;
    const double C7402 = (C43367 * (C43304 + C43330 * C43419)) / C43127;
    const double C14411 =
        (2 * C43367 * C43304 + C43367 * (C43304 + C43330 * C43482)) / C43127;
    const double C22351 =
        (be * (2 * C43707 + C43341 * C43761) +
         C43367 * (2 * C43341 * C43385 +
                   C43341 * (C43385 +
                             std::pow(C43270, 6) * bs[6] * C43373 * C43419))) /
        C43129;
    const double C23706 =
        (C43378 + C43385 * C43419 + be * C43367 * C43761 +
         C43367 *
             (be * C43761 + C43367 * (C43385 + std::pow(C43270, 6) * bs[6] *
                                                   C43373 * C43419))) /
        C43129;
    const double C21821 = (3 * (C43285 + C43298 * C43419) +
                           C43341 * (2 * C43707 + C43341 * C43761)) /
                          C43127;
    const double C22230 = (C43367 * (2 * C43707 + C43341 * C43761)) / C43127;
    const double C23625 = (C43285 + C43298 * C43419 + C43761 * C43482) / C43127;
    const double C42761 = (3 * (C43285 + C43298 * C43482) +
                           C43367 * (2 * C43845 + C43367 * C43849)) /
                          C43127;
    const double C43332 = C43272 * C43329;
    const double C43719 = C43341 * C43329;
    const double C6864 =
        (2 * C43341 * C43303 + C43341 * (C43303 + C43329 * C43419)) / C43127;
    const double C7401 = (C43367 * (C43303 + C43329 * C43419)) / C43127;
    const double C14410 =
        (2 * C43367 * C43303 + C43367 * (C43303 + C43329 * C43482)) / C43127;
    const double C22407 =
        (2 * (ae * C43367 * C43297 + C43341 * C43803) + ae * C43367 * C43767 +
         C43341 * (C43803 + ae * C43367 * C43341 * C43320 +
                   C43341 * (ae * C43367 * C43320 + C43341 * C43367 *
                                                        std::pow(C43270, 6) *
                                                        bs[6] * C43398))) /
        C43129;
    const double C22571 =
        (ae * (2 * C43717 + C43341 * C43767) +
         C43367 * (2 * C43341 * C43461 +
                   C43341 * (C43461 +
                             std::pow(C43270, 6) * bs[6] * C43449 * C43419))) /
        C43129;
    const double C23864 =
        (C43454 + C43461 * C43419 + ae * C43367 * C43767 +
         C43367 *
             (ae * C43767 + C43367 * (C43461 + std::pow(C43270, 6) * bs[6] *
                                                   C43449 * C43419))) /
        C43129;
    const double C21820 = (3 * (C43284 + C43297 * C43419) +
                           C43341 * (2 * C43717 + C43341 * C43767)) /
                          C43127;
    const double C22229 = (C43367 * (2 * C43717 + C43341 * C43767)) / C43127;
    const double C23624 = (C43284 + C43297 * C43419 + C43767 * C43482) / C43127;
    const double C42760 = (3 * (C43284 + C43297 * C43482) +
                           C43367 * (2 * C43857 + C43367 * C43861)) /
                          C43127;
    const double C43331 = C43272 * C43328;
    const double C43497 = C43341 * C43328;
    const double C43534 = C43367 * C43328;
    const double C640 =
        (C43341 * C43302 + ae * C43341 * C43303 + be * C43341 * C43304 +
         C43272 * (ae * C43341 * C43297 + be * C43341 * C43298 +
                   C43272 * C43341 * C43328)) /
        C43129;
    const double C1210 =
        (C43367 * C43302 + ae * C43367 * C43303 + be * C43367 * C43304 +
         C43272 * (ae * C43367 * C43297 + be * C43367 * C43298 +
                   C43272 * C43367 * C43328)) /
        C43129;
    const double C2222 =
        (ae * (C43284 + C43297 * C43419) + be * (C43285 + C43298 * C43419) +
         C43272 * (C43302 + C43328 * C43419)) /
        C43129;
    const double C2223 =
        (C43302 + C43328 * C43419 + ae * (C43303 + C43329 * C43419) +
         be * (C43304 + C43330 * C43419) +
         C43272 * (ae * (C43297 + C43320 * C43419) +
                   be * (C43298 + C43323 * C43419) +
                   C43272 * (C43328 + (C43309 * C43310 +
                                       C43276 * bs[6] * std::pow(C43270, 6)) *
                                          C43128 * C43419))) /
        C43129;
    const double C4015 =
        (ae * (C43284 + C43297 * C43482) + be * (C43285 + C43298 * C43482) +
         C43272 * (C43302 + C43328 * C43482)) /
        C43129;
    const double C4016 =
        (C43302 + C43328 * C43482 + ae * (C43303 + C43329 * C43482) +
         be * (C43304 + C43330 * C43482) +
         C43272 * (ae * (C43297 + C43320 * C43482) +
                   be * (C43298 + C43323 * C43482) +
                   C43272 * (C43328 + (C43309 * C43310 +
                                       C43276 * bs[6] * std::pow(C43270, 6)) *
                                          C43128 * C43482))) /
        C43129;
    const double C6866 =
        (2 * C43341 * C43302 + C43341 * (C43302 + C43328 * C43419)) / C43129;
    const double C7403 = (C43367 * (C43302 + C43328 * C43419)) / C43129;
    const double C7404 = (ae * C43367 * (C43297 + C43320 * C43419) +
                          be * C43367 * (C43298 + C43323 * C43419) +
                          C43272 * C43367 *
                              (C43328 + (C43309 * C43310 +
                                         C43276 * bs[6] * std::pow(C43270, 6)) *
                                            C43128 * C43419)) /
                         C43129;
    const double C14412 =
        (2 * C43367 * C43302 + C43367 * (C43302 + C43328 * C43482)) / C43129;
    const double C23626 =
        (C43302 + C43328 * C43419 +
         (C43328 + (C43309 * C43310 + C43276 * bs[6] * std::pow(C43270, 6)) *
                       C43128 * C43419) *
             C43482) /
        C43129;
    const double C1641 =
        (ae * (2 * C43355 + C43272 * C43364) +
         C43367 * (2 * C43272 * C43478 +
                   C43272 * (C43478 +
                             std::pow(C43270, 6) * bs[6] * C43472 * C43276))) /
        C43129;
    const double C4315 =
        (C43475 + C43478 * C43276 + ae * C43367 * C43364 +
         C43367 *
             (ae * C43364 + C43367 * (C43478 + std::pow(C43270, 6) * bs[6] *
                                                   C43472 * C43276))) /
        C43129;
    const double C156 = (3 * (C43348 + C43353 * C43276) +
                         C43272 * (2 * C43355 + C43272 * C43364)) /
                        C43127;
    const double C697 = (C43341 * (2 * C43355 + C43272 * C43364) +
                         (2 * C43293 + C43272 * C43322) * be) /
                        C43127;
    const double C1267 = (C43367 * (2 * C43355 + C43272 * C43364)) / C43127;
    const double C2264 =
        (C43348 + C43353 * C43276 + C43341 * (C43341 * C43364 + C43322 * be) +
         C43341 * C43322 * be) /
        C43127;
    const double C2678 = (C43367 * (C43341 * C43364 + C43322 * be)) / C43127;
    const double C4057 = (C43348 + C43353 * C43276 + C43364 * C43482) / C43127;
    const double C43669 = C43667 + C43321;
    const double C43781 = C43341 * C43776;
    const double C28714 =
        (2 * C43367 * C43660 + C43367 * (C43660 + C43776 * C43482)) / C43127;
    const double C42808 = (3 * (C43348 + C43353 * C43482) +
                           C43367 * (2 * C43863 + C43367 * C43867)) /
                          C43127;
    const double C955 =
        (ae * (2 * C43381 + C43272 * C43390) +
         C43341 * (2 * C43272 * C43441 +
                   C43272 * (C43441 +
                             std::pow(C43270, 6) * bs[6] * C43435 * C43276))) /
        C43129;
    const double C2437 =
        (C43438 + C43441 * C43276 + ae * C43341 * C43390 +
         C43341 *
             (ae * C43390 + C43341 * (C43441 + std::pow(C43270, 6) * bs[6] *
                                                   C43435 * C43276))) /
        C43129;
    const double C219 = (3 * (C43374 + C43379 * C43276) +
                         C43272 * (2 * C43381 + C43272 * C43390)) /
                        C43127;
    const double C763 = (C43341 * (2 * C43381 + C43272 * C43390)) / C43127;
    const double C1333 = (C43367 * (2 * C43381 + C43272 * C43390) +
                          (2 * C43293 + C43272 * C43322) * be) /
                         C43127;
    const double C2308 = (C43374 + C43379 * C43276 + C43390 * C43419) / C43127;
    const double C2734 =
        (C43367 * C43341 * C43390 + C43341 * C43322 * be) / C43127;
    const double C4101 =
        (C43374 + C43379 * C43276 + C43367 * (C43367 * C43390 + C43322 * be) +
         C43367 * C43322 * be) /
        C43127;
    const double C9347 =
        (C43341 * C43381 + C43367 * (C43367 * C43726 + C43665 * be) +
         C43367 * C43665 * be) /
        C43127;
    const double C43754 = C43751 + C43321;
    const double C21909 = (3 * (C43374 + C43379 * C43419) +
                           C43341 * (2 * C43723 + C43341 * C43791)) /
                          C43127;
    const double C22350 = (C43367 * (2 * C43723 + C43341 * C43791) +
                           (2 * C43658 + C43341 * C43778) * be) /
                          C43127;
    const double C23705 =
        (C43374 + C43379 * C43419 + C43367 * (C43367 * C43791 + C43778 * be) +
         C43367 * C43778 * be) /
        C43127;
    const double C43840 = C43838 + C43777;
    const double C43881 = C43367 * C43876;
    const double C1525 =
        (be * (2 * C43406 + C43272 * C43415) +
         C43367 * (2 * C43272 * C43441 +
                   C43272 * (C43441 +
                             std::pow(C43270, 6) * bs[6] * C43435 * C43276))) /
        C43129;
    const double C2899 =
        (ae * (C43367 * C43390 + C43322 * be) +
         C43341 *
             (be * C43415 + C43367 * (C43441 + std::pow(C43270, 6) * bs[6] *
                                                   C43435 * C43276))) /
        C43129;
    const double C4230 =
        (C43438 + C43441 * C43276 + be * C43367 * C43415 +
         C43367 *
             (be * C43415 + C43367 * (C43441 + std::pow(C43270, 6) * bs[6] *
                                                   C43435 * C43276))) /
        C43129;
    const double C281 = (3 * (C43399 + C43404 * C43276) +
                         C43272 * (2 * C43406 + C43272 * C43415)) /
                        C43127;
    const double C829 = (C43341 * (2 * C43406 + C43272 * C43415) +
                         (2 * C43293 + C43272 * C43322) * ae) /
                        C43127;
    const double C1399 = (C43367 * (2 * C43406 + C43272 * C43415)) / C43127;
    const double C2352 =
        (C43399 + C43404 * C43276 + C43341 * (C43341 * C43415 + C43322 * ae) +
         C43341 * C43322 * ae) /
        C43127;
    const double C2790 = (C43367 * (C43341 * C43415 + C43322 * ae)) / C43127;
    const double C4145 = (C43399 + C43404 * C43276 + C43415 * C43482) / C43127;
    const double C43670 = C43668 + C43324;
    const double C43782 = C43341 * C43779;
    const double C28826 =
        (2 * C43367 * C43661 + C43367 * (C43661 + C43779 * C43482)) / C43127;
    const double C42897 = (3 * (C43399 + C43404 * C43482) +
                           C43367 * (2 * C43853 + C43367 * C43855)) /
                          C43127;
    const double C43663 = C43272 * C43429;
    const double C43770 = C43341 * C43429;
    const double C43805 = C43367 * C43429;
    const double C330 =
        (3 * (C43424 + C43429 * C43276) +
         C43272 * (2 * C43272 * C43429 +
                   C43272 * (C43429 + (C43309 * C43310 +
                                       C43419 * bs[6] * std::pow(C43270, 6)) *
                                          C43128 * C43276))) /
        C43129;
    const double C884 =
        (ae * (C43348 + C43353 * C43276) + be * (C43399 + C43404 * C43276) +
         C43341 * (C43424 + C43429 * C43276)) /
        C43129;
    const double C887 =
        (ae * (2 * C43355 + C43272 * C43364) +
         be * (2 * C43406 + C43272 * C43415) +
         C43341 * (2 * C43272 * C43429 +
                   C43272 * (C43429 + (C43309 * C43310 +
                                       C43419 * bs[6] * std::pow(C43270, 6)) *
                                          C43128 * C43276))) /
        C43129;
    const double C1454 = (C43367 * (C43424 + C43429 * C43276)) / C43129;
    const double C1457 =
        (C43367 * (2 * C43272 * C43429 +
                   C43272 * (C43429 + (C43309 * C43310 +
                                       C43419 * bs[6] * std::pow(C43270, 6)) *
                                          C43128 * C43276))) /
        C43129;
    const double C2395 =
        (C43272 * C43424 + ae * (C43341 * C43355 + C43293 * be) +
         be * (C43341 * C43406 + C43293 * ae) +
         C43341 * (ae * C43355 + be * C43406 + C43341 * C43272 * C43429)) /
        C43129;
    const double C2396 =
        (C43424 + C43429 * C43276 + ae * (C43341 * C43364 + C43322 * be) +
         be * (C43341 * C43415 + C43322 * ae) +
         C43341 * (ae * C43364 + be * C43415 +
                   C43341 * (C43429 + (C43309 * C43310 +
                                       C43419 * bs[6] * std::pow(C43270, 6)) *
                                          C43128 * C43276))) /
        C43129;
    const double C2845 = (ae * C43367 * C43355 + be * C43367 * C43406 +
                          C43341 * C43367 * C43272 * C43429) /
                         C43129;
    const double C2846 = (ae * C43367 * C43364 + be * C43367 * C43415 +
                          C43341 * C43367 *
                              (C43429 + (C43309 * C43310 +
                                         C43419 * bs[6] * std::pow(C43270, 6)) *
                                            C43128 * C43276)) /
                         C43129;
    const double C4188 = (C43272 * C43424 + C43272 * C43429 * C43482) / C43129;
    const double C4189 =
        (C43424 + C43429 * C43276 +
         (C43429 + (C43309 * C43310 + C43419 * bs[6] * std::pow(C43270, 6)) *
                       C43128 * C43276) *
             C43482) /
        C43129;
    const double C7106 =
        (2 * (ae * C43348 + be * C43399 + C43341 * C43424) +
         ae * (C43348 + C43341 * C43660 + C43658 * be) +
         be * (C43399 + C43341 * C43661 + C43658 * ae) +
         C43341 * (C43424 + ae * C43660 + be * C43661 +
                   C43341 * (C43356 + C43407 + C43341 * C43429))) /
        C43129;
    const double C7707 =
        (C43367 * C43424 + ae * C43367 * C43660 + be * C43367 * C43661 +
         C43341 * (ae * C43367 * C43353 + be * C43367 * C43404 +
                   C43341 * C43367 * C43429)) /
        C43129;
    const double C9454 =
        (ae * (C43348 + C43353 * C43482) + be * (C43399 + C43404 * C43482) +
         C43341 * (C43424 + C43429 * C43482)) /
        C43129;
    const double C14652 =
        (2 * C43367 * C43424 + C43367 * (C43424 + C43429 * C43482)) / C43129;
    const double C23785 =
        (C43424 + C43429 * C43482 + ae * (C43660 + C43776 * C43482) +
         be * (C43661 + C43779 * C43482) +
         C43341 * (ae * (C43353 + C43360 * C43482) +
                   be * (C43404 + C43411 * C43482) +
                   C43341 * (C43429 + (C43309 * C43310 +
                                       C43419 * bs[6] * std::pow(C43270, 6)) *
                                          C43128 * C43482))) /
        C43129;
    const double C1071 =
        (be * (2 * C43457 + C43272 * C43466) +
         C43341 * (2 * C43272 * C43478 +
                   C43272 * (C43478 +
                             std::pow(C43270, 6) * bs[6] * C43472 * C43276))) /
        C43129;
    const double C2522 =
        (C43475 + C43478 * C43276 + be * C43341 * C43466 +
         C43341 *
             (be * C43466 + C43341 * (C43478 + std::pow(C43270, 6) * bs[6] *
                                                   C43472 * C43276))) /
        C43129;
    const double C3008 =
        (ae * (C43341 * C43364 + C43322 * be) +
         C43367 *
             (be * C43466 + C43341 * (C43478 + std::pow(C43270, 6) * bs[6] *
                                                   C43472 * C43276))) /
        C43129;
    const double C447 = (3 * (C43450 + C43455 * C43276) +
                         C43272 * (2 * C43457 + C43272 * C43466)) /
                        C43127;
    const double C1013 = (C43341 * (2 * C43457 + C43272 * C43466)) / C43127;
    const double C1583 = (C43367 * (2 * C43457 + C43272 * C43466) +
                          (2 * C43293 + C43272 * C43322) * ae) /
                         C43127;
    const double C2478 = (C43450 + C43455 * C43276 + C43466 * C43419) / C43127;
    const double C2952 =
        (C43367 * C43341 * C43466 + C43341 * C43322 * ae) / C43127;
    const double C4271 =
        (C43450 + C43455 * C43276 + C43367 * (C43367 * C43466 + C43322 * ae) +
         C43367 * C43322 * ae) /
        C43127;
    const double C9559 =
        (C43341 * C43457 + C43367 * (C43367 * C43727 + C43665 * ae) +
         C43367 * C43665 * ae) /
        C43127;
    const double C43755 = C43753 + C43324;
    const double C22085 = (3 * (C43450 + C43455 * C43419) +
                           C43341 * (2 * C43724 + C43341 * C43797)) /
                          C43127;
    const double C22570 = (C43367 * (2 * C43724 + C43341 * C43797) +
                           (2 * C43658 + C43341 * C43778) * ae) /
                          C43127;
    const double C23863 =
        (C43450 + C43455 * C43419 + C43367 * (C43367 * C43797 + C43778 * ae) +
         C43367 * C43778 * ae) /
        C43127;
    const double C43841 = C43839 + C43780;
    const double C43882 = C43367 * C43879;
    const double C43683 = C43272 * C43492;
    const double C43834 = C43341 * C43492;
    const double C43870 = C43367 * C43492;
    const double C549 =
        (3 * (C43487 + C43492 * C43276) +
         C43272 * (2 * C43272 * C43492 +
                   C43272 * (C43492 + (C43309 * C43310 +
                                       C43482 * bs[6] * std::pow(C43270, 6)) *
                                          C43128 * C43276))) /
        C43129;
    const double C1126 = (C43341 * (C43487 + C43492 * C43276)) / C43129;
    const double C1129 =
        (C43341 * (2 * C43272 * C43492 +
                   C43272 * (C43492 + (C43309 * C43310 +
                                       C43482 * bs[6] * std::pow(C43270, 6)) *
                                          C43128 * C43276))) /
        C43129;
    const double C1696 =
        (ae * (C43374 + C43379 * C43276) + be * (C43450 + C43455 * C43276) +
         C43367 * (C43487 + C43492 * C43276)) /
        C43129;
    const double C1699 =
        (ae * (2 * C43381 + C43272 * C43390) +
         be * (2 * C43457 + C43272 * C43466) +
         C43367 * (2 * C43272 * C43492 +
                   C43272 * (C43492 + (C43309 * C43310 +
                                       C43482 * bs[6] * std::pow(C43270, 6)) *
                                          C43128 * C43276))) /
        C43129;
    const double C2562 = (C43272 * C43487 + C43272 * C43492 * C43419) / C43129;
    const double C2563 =
        (C43487 + C43492 * C43276 +
         (C43492 + (C43309 * C43310 + C43482 * bs[6] * std::pow(C43270, 6)) *
                       C43128 * C43276) *
             C43419) /
        C43129;
    const double C3060 = (ae * C43341 * C43381 + be * C43341 * C43457 +
                          C43367 * C43341 * C43272 * C43492) /
                         C43129;
    const double C3061 = (ae * C43341 * C43390 + be * C43341 * C43466 +
                          C43367 * C43341 *
                              (C43492 + (C43309 * C43310 +
                                         C43482 * bs[6] * std::pow(C43270, 6)) *
                                            C43128 * C43276)) /
                         C43129;
    const double C4355 =
        (C43272 * C43487 + ae * (C43367 * C43381 + C43293 * be) +
         be * (C43367 * C43457 + C43293 * ae) +
         C43367 * (ae * C43381 + be * C43457 + C43367 * C43272 * C43492)) /
        C43129;
    const double C4356 =
        (C43487 + C43492 * C43276 + ae * (C43367 * C43390 + C43322 * be) +
         be * (C43367 * C43466 + C43322 * ae) +
         C43367 * (ae * C43390 + be * C43466 +
                   C43367 * (C43492 + (C43309 * C43310 +
                                       C43482 * bs[6] * std::pow(C43270, 6)) *
                                          C43128 * C43276))) /
        C43129;
    const double C7322 =
        (2 * C43341 * C43487 + C43341 * (C43487 + C43492 * C43419)) / C43129;
    const double C7987 =
        (ae * (C43374 + C43379 * C43419) + be * (C43450 + C43455 * C43419) +
         C43367 * (C43487 + C43492 * C43419)) /
        C43129;
    const double C9664 =
        (C43341 * C43487 + ae * (C43367 * C43723 + C43658 * be) +
         be * (C43367 * C43724 + C43658 * ae) +
         C43367 * (ae * C43723 + be * C43724 + C43367 * C43341 * C43492)) /
        C43129;
    const double C14877 =
        (2 * (ae * C43374 + be * C43450 + C43367 * C43487) +
         ae * (C43374 + C43367 * C43748 + C43746 * be) +
         be * (C43450 + C43367 * C43749 + C43746 * ae) +
         C43367 * (C43487 + ae * C43748 + be * C43749 +
                   C43367 * (C43382 + C43458 + C43367 * C43492))) /
        C43129;
    const double C22170 =
        (3 * (C43487 + C43492 * C43419) +
         C43341 * (2 * C43341 * C43492 +
                   C43341 * (C43492 + (C43309 * C43310 +
                                       C43482 * bs[6] * std::pow(C43270, 6)) *
                                          C43128 * C43419))) /
        C43129;
    const double C22677 =
        (ae * (2 * C43723 + C43341 * C43791) +
         be * (2 * C43724 + C43341 * C43797) +
         C43367 * (2 * C43341 * C43492 +
                   C43341 * (C43492 + (C43309 * C43310 +
                                       C43482 * bs[6] * std::pow(C43270, 6)) *
                                          C43128 * C43419))) /
        C43129;
    const double C23942 =
        (C43487 + C43492 * C43419 + ae * (C43367 * C43791 + C43778 * be) +
         be * (C43367 * C43797 + C43778 * ae) +
         C43367 * (ae * C43791 + be * C43797 +
                   C43367 * (C43492 + (C43309 * C43310 +
                                       C43482 * bs[6] * std::pow(C43270, 6)) *
                                          C43128 * C43419))) /
        C43129;
    const double C10975 = C1275 - C1276;
    const double C10973 = C1276 - C1275;
    const double C42812 = C14486 - C14485;
    const double C161 =
        (3 * (C43352 + ae * C43355 + C43272 * C43363) +
         ae * (2 * C43355 + C43272 * C43364) +
         C43272 *
             (2 * C43363 + ae * C43364 +
              C43272 * (C43359 + ae * C43272 * C43360 +
                        C43272 * (ae * C43360 + C43272 * std::pow(C43270, 6) *
                                                    bs[6] * C43347)))) /
        C43129;
    const double C700 = (be * (C43285 + C43272 * C43304 + C43293 * ae) +
                         C43341 * (C43352 + ae * C43355 + C43272 * C43363)) /
                        C43129;
    const double C1270 =
        (C43367 * (C43352 + ae * C43355 + C43272 * C43363)) / C43129;
    const double C1271 =
        (C43367 *
         (2 * C43363 + ae * C43364 +
          C43272 * (C43359 + ae * C43272 * C43360 +
                    C43272 * (ae * C43360 + C43272 * std::pow(C43270, 6) *
                                                bs[6] * C43347)))) /
        C43129;
    const double C2266 = (ae * C43348 + C43272 * C43352 + be * C43341 * C43304 +
                          C43341 * (be * C43304 + C43341 * C43363)) /
                         C43129;
    const double C2680 = (C43367 * (be * C43304 + C43341 * C43363)) / C43129;
    const double C4059 =
        (ae * C43348 + C43272 * C43352 + C43363 * C43482) / C43129;
    const double C4060 =
        (C43352 + ae * C43355 + C43272 * C43363 +
         (C43359 + ae * C43272 * C43360 +
          C43272 *
              (ae * C43360 + C43272 * std::pow(C43270, 6) * bs[6] * C43347)) *
             C43482) /
        C43129;
    const double C6935 =
        (2 * (be * C43304 + C43341 * C43363) + be * (C43304 + C43330 * C43419) +
         C43341 *
             (C43363 + be * C43341 * C43330 +
              C43341 * (be * C43330 +
                        C43341 * (ae * C43360 + C43272 * std::pow(C43270, 6) *
                                                    bs[6] * C43347)))) /
        C43129;
    const double C7488 =
        (C43367 *
         (C43363 + be * C43341 * C43330 +
          C43341 * (be * C43330 +
                    C43341 * (ae * C43360 + C43272 * std::pow(C43270, 6) *
                                                bs[6] * C43347)))) /
        C43129;
    const double C9295 =
        (be * C43304 + C43341 * C43363 +
         (be * C43330 + C43341 * (ae * C43360 + C43272 * std::pow(C43270, 6) *
                                                    bs[6] * C43347)) *
             C43482) /
        C43129;
    const double C14481 =
        (2 * C43367 * C43363 +
         C43367 * (C43363 + (ae * C43360 +
                             C43272 * std::pow(C43270, 6) * bs[6] * C43347) *
                                C43482)) /
        C43129;
    const double C21870 =
        (3 * (C43352 + be * C43707 + C43341 * C43760) +
         be * (2 * C43707 + C43341 * C43761) +
         C43341 *
             (2 * C43760 + be * C43761 +
              C43341 * (C43359 + be * C43341 * C43323 +
                        C43341 * (be * C43323 + C43341 * std::pow(C43270, 6) *
                                                    bs[6] * C43347)))) /
        C43129;
    const double C22299 =
        (C43367 *
         (2 * C43760 + be * C43761 +
          C43341 * (C43359 + be * C43341 * C43323 +
                    C43341 * (be * C43323 + C43341 * std::pow(C43270, 6) *
                                                bs[6] * C43347)))) /
        C43129;
    const double C23666 =
        (C43352 + be * C43707 + C43341 * C43760 +
         (C43359 + be * C43341 * C43323 +
          C43341 *
              (be * C43323 + C43341 * std::pow(C43270, 6) * bs[6] * C43347)) *
             C43482) /
        C43129;
    const double C28715 =
        (2 * C43367 * C43760 +
         C43367 * (C43760 + (be * C43323 +
                             C43341 * std::pow(C43270, 6) * bs[6] * C43347) *
                                C43482)) /
        C43129;
    const double C286 =
        (3 * (C43403 + be * C43406 + C43272 * C43414) +
         be * (2 * C43406 + C43272 * C43415) +
         C43272 *
             (2 * C43414 + be * C43415 +
              C43272 * (C43410 + be * C43272 * C43411 +
                        C43272 * (be * C43411 + C43272 * std::pow(C43270, 6) *
                                                    bs[6] * C43398)))) /
        C43129;
    const double C832 = (ae * (C43284 + C43272 * C43303 + C43293 * be) +
                         C43341 * (C43403 + be * C43406 + C43272 * C43414)) /
                        C43129;
    const double C1402 =
        (C43367 * (C43403 + be * C43406 + C43272 * C43414)) / C43129;
    const double C1403 =
        (C43367 *
         (2 * C43414 + be * C43415 +
          C43272 * (C43410 + be * C43272 * C43411 +
                    C43272 * (be * C43411 + C43272 * std::pow(C43270, 6) *
                                                bs[6] * C43398)))) /
        C43129;
    const double C2354 = (be * C43399 + C43272 * C43403 + ae * C43341 * C43303 +
                          C43341 * (ae * C43303 + C43341 * C43414)) /
                         C43129;
    const double C2792 =
        (ae * C43367 * C43303 + C43341 * C43367 * C43414) / C43129;
    const double C4147 =
        (be * C43399 + C43272 * C43403 + C43414 * C43482) / C43129;
    const double C4148 =
        (C43403 + be * C43406 + C43272 * C43414 +
         (C43410 + be * C43272 * C43411 +
          C43272 *
              (be * C43411 + C43272 * std::pow(C43270, 6) * bs[6] * C43398)) *
             C43482) /
        C43129;
    const double C7047 =
        (2 * (ae * C43303 + C43341 * C43414) + ae * (C43303 + C43329 * C43419) +
         C43341 *
             (C43414 + ae * C43341 * C43329 +
              C43341 * (ae * C43329 +
                        C43341 * (be * C43411 + C43272 * std::pow(C43270, 6) *
                                                    bs[6] * C43398)))) /
        C43129;
    const double C7632 =
        (C43367 * C43414 + ae * C43367 * C43341 * C43329 +
         C43341 * (ae * C43367 * C43329 +
                   C43341 * C43367 *
                       (be * C43411 +
                        C43272 * std::pow(C43270, 6) * bs[6] * C43398))) /
        C43129;
    const double C9403 =
        (ae * (C43303 + C43329 * C43482) +
         C43341 * (C43414 + (be * C43411 +
                             C43272 * std::pow(C43270, 6) * bs[6] * C43398) *
                                C43482)) /
        C43129;
    const double C14593 =
        (2 * C43367 * C43414 +
         C43367 * (C43414 + (be * C43411 +
                             C43272 * std::pow(C43270, 6) * bs[6] * C43398) *
                                C43482)) /
        C43129;
    const double C21959 =
        (3 * (C43403 + ae * C43717 + C43341 * C43766) +
         ae * (2 * C43717 + C43341 * C43767) +
         C43341 *
             (2 * C43766 + ae * C43767 +
              C43341 * (C43410 + ae * C43341 * C43320 +
                        C43341 * (ae * C43320 + C43341 * std::pow(C43270, 6) *
                                                    bs[6] * C43398)))) /
        C43129;
    const double C5117 = C771 - C772;
    const double C5115 = C772 - C771;
    const double C21913 = C6994 - C6993;
    const double C224 =
        (3 * (C43378 + ae * C43381 + C43272 * C43389) +
         ae * (2 * C43381 + C43272 * C43390) +
         C43272 *
             (2 * C43389 + ae * C43390 +
              C43272 * (C43385 + ae * C43272 * C43386 +
                        C43272 * (ae * C43386 + C43272 * std::pow(C43270, 6) *
                                                    bs[6] * C43373)))) /
        C43129;
    const double C766 =
        (C43341 * (C43378 + ae * C43381 + C43272 * C43389)) / C43129;
    const double C767 =
        (C43341 *
         (2 * C43389 + ae * C43390 +
          C43272 * (C43385 + ae * C43272 * C43386 +
                    C43272 * (ae * C43386 + C43272 * std::pow(C43270, 6) *
                                                bs[6] * C43373)))) /
        C43129;
    const double C1336 = (be * (C43285 + C43272 * C43304 + C43293 * ae) +
                          C43367 * (C43378 + ae * C43381 + C43272 * C43389)) /
                         C43129;
    const double C2310 =
        (ae * C43374 + C43272 * C43378 + C43389 * C43419) / C43129;
    const double C2311 =
        (C43378 + ae * C43381 + C43272 * C43389 +
         (C43385 + ae * C43272 * C43386 +
          C43272 *
              (ae * C43386 + C43272 * std::pow(C43270, 6) * bs[6] * C43373)) *
             C43419) /
        C43129;
    const double C2736 =
        (be * C43341 * C43304 + C43367 * C43341 * C43389) / C43129;
    const double C4103 = (ae * C43374 + C43272 * C43378 + be * C43367 * C43304 +
                          C43367 * (be * C43304 + C43367 * C43389)) /
                         C43129;
    const double C6989 =
        (2 * C43341 * C43389 +
         C43341 * (C43389 + (ae * C43386 +
                             C43272 * std::pow(C43270, 6) * bs[6] * C43373) *
                                C43419)) /
        C43129;
    const double C7558 =
        (be * (C43304 + C43330 * C43419) +
         C43367 * (C43389 + (ae * C43386 +
                             C43272 * std::pow(C43270, 6) * bs[6] * C43373) *
                                C43419)) /
        C43129;
    const double C14539 =
        (2 * (be * C43304 + C43367 * C43389) + be * (C43304 + C43330 * C43482) +
         C43367 *
             (C43389 + be * C43367 * C43330 +
              C43367 * (be * C43330 +
                        C43367 * (ae * C43386 + C43272 * std::pow(C43270, 6) *
                                                    bs[6] * C43373)))) /
        C43129;
    const double C42858 =
        (3 * (C43378 + be * C43845 + C43367 * C43848) +
         be * (2 * C43845 + C43367 * C43849) +
         C43367 *
             (2 * C43848 + be * C43849 +
              C43367 * (C43385 + be * C43367 * C43323 +
                        C43367 * (be * C43323 + C43367 * std::pow(C43270, 6) *
                                                    bs[6] * C43373)))) /
        C43129;
    const double C5353 = C957 - C958;
    const double C5352 = C958 - C957;
    const double C22045 = C7162 - C7161;
    const double C22043 =
        (3 * (C43438 + ae * C43723 + C43341 * C43790) +
         ae * (2 * C43723 + C43341 * C43791) +
         C43341 *
             (2 * C43790 + ae * C43791 +
              C43341 * (C43441 + ae * C43341 * C43386 +
                        C43341 * (ae * C43386 + C43341 * std::pow(C43270, 6) *
                                                    bs[6] * C43435)))) /
        C43129;
    const double C22517 =
        (2 * (ae * C43748 + C43341 * C43808) +
         ae * (C43367 * C43791 + C43778 * be) +
         C43341 *
             (C43808 + ae * (C43367 * C43341 * C43386 + C43777) +
              C43341 * (ae * (C43367 * C43386 + C43314) +
                        C43341 * (be * C43411 + C43367 * std::pow(C43270, 6) *
                                                    bs[6] * C43435)))) /
        C43129;
    const double C23824 =
        (C43438 + be * C43367 * C43404 + C43367 * C43808 +
         ae * (C43723 + C43367 * (C43367 * C43341 * C43386 + C43777) +
               C43367 * C43772 * be) +
         C43341 *
             (ae * (C43379 + C43367 * (C43367 * C43386 + C43314) +
                    C43367 * C43308 * be) +
              C43341 * (C43441 + be * C43367 * C43411 +
                        C43367 * (be * C43411 + C43367 * std::pow(C43270, 6) *
                                                    bs[6] * C43435)))) /
        C43129;
    const double C28947 =
        (ae * (2 * C43748 +
               C43367 * (C43379 + C43367 * (C43367 * C43386 + C43314) +
                         C43367 * C43308 * be) +
               (C43287 + C43308 * C43482) * be) +
         C43341 *
             (2 * C43808 + be * (C43404 + C43411 * C43482) +
              C43367 * (C43441 + be * C43367 * C43411 +
                        C43367 * (be * C43411 + C43367 * std::pow(C43270, 6) *
                                                    bs[6] * C43435)))) /
        C43129;
    const double C42993 =
        (3 * (C43438 + be * C43853 + C43367 * C43808) +
         be * (2 * C43853 + C43367 * C43855) +
         C43367 *
             (2 * C43808 + be * C43855 +
              C43367 * (C43441 + be * C43367 * C43411 +
                        C43367 * (be * C43411 + C43367 * std::pow(C43270, 6) *
                                                    bs[6] * C43435)))) /
        C43129;
    const double C452 =
        (3 * (C43454 + be * C43457 + C43272 * C43465) +
         be * (2 * C43457 + C43272 * C43466) +
         C43272 *
             (2 * C43465 + be * C43466 +
              C43272 * (C43461 + be * C43272 * C43462 +
                        C43272 * (be * C43462 + C43272 * std::pow(C43270, 6) *
                                                    bs[6] * C43449)))) /
        C43129;
    const double C1016 =
        (C43341 * (C43454 + be * C43457 + C43272 * C43465)) / C43129;
    const double C1017 =
        (C43341 *
         (2 * C43465 + be * C43466 +
          C43272 * (C43461 + be * C43272 * C43462 +
                    C43272 * (be * C43462 + C43272 * std::pow(C43270, 6) *
                                                bs[6] * C43449)))) /
        C43129;
    const double C1586 = (ae * (C43284 + C43272 * C43303 + C43293 * be) +
                          C43367 * (C43454 + be * C43457 + C43272 * C43465)) /
                         C43129;
    const double C2480 =
        (be * C43450 + C43272 * C43454 + C43465 * C43419) / C43129;
    const double C2481 =
        (C43454 + be * C43457 + C43272 * C43465 +
         (C43461 + be * C43272 * C43462 +
          C43272 *
              (be * C43462 + C43272 * std::pow(C43270, 6) * bs[6] * C43449)) *
             C43419) /
        C43129;
    const double C2954 =
        (ae * C43341 * C43303 + C43367 * C43341 * C43465) / C43129;
    const double C4273 = (be * C43450 + C43272 * C43454 + ae * C43367 * C43303 +
                          C43367 * (ae * C43303 + C43367 * C43465)) /
                         C43129;
    const double C7215 =
        (2 * C43341 * C43465 +
         C43341 * (C43465 + (be * C43462 +
                             C43272 * std::pow(C43270, 6) * bs[6] * C43449) *
                                C43419)) /
        C43129;
    const double C7848 =
        (ae * (C43303 + C43329 * C43419) +
         C43367 * (C43465 + (be * C43462 +
                             C43272 * std::pow(C43270, 6) * bs[6] * C43449) *
                                C43419)) /
        C43129;
    const double C14768 =
        (2 * (ae * C43303 + C43367 * C43465) + ae * (C43303 + C43329 * C43482) +
         C43367 *
             (C43465 + ae * C43367 * C43329 +
              C43367 * (ae * C43329 +
                        C43367 * (be * C43462 + C43272 * std::pow(C43270, 6) *
                                                    bs[6] * C43449)))) /
        C43129;
    const double C43033 =
        (3 * (C43454 + ae * C43857 + C43367 * C43860) +
         ae * (2 * C43857 + C43367 * C43861) +
         C43367 *
             (2 * C43860 + ae * C43861 +
              C43367 * (C43461 + ae * C43367 * C43320 +
                        C43367 * (ae * C43320 + C43367 * std::pow(C43270, 6) *
                                                    bs[6] * C43449)))) /
        C43129;
    const double C11433 = C1643 - C1644;
    const double C11432 = C1644 - C1643;
    const double C43077 = C14827 - C14826;
    const double C22131 =
        (3 * (C43475 + be * C43724 + C43341 * C43796) +
         be * (2 * C43724 + C43341 * C43797) +
         C43341 *
             (2 * C43796 + be * C43797 +
              C43341 * (C43478 + be * C43341 * C43462 +
                        C43341 * (be * C43462 + C43341 * std::pow(C43270, 6) *
                                                    bs[6] * C43472)))) /
        C43129;
    const double C29052 =
        (2 * (ae * C43660 + C43367 * C43796) + ae * (C43660 + C43776 * C43482) +
         C43367 *
             (C43796 + ae * C43367 * C43776 +
              C43367 * (ae * C43776 +
                        C43367 * (be * C43462 + C43341 * std::pow(C43270, 6) *
                                                    bs[6] * C43472)))) /
        C43129;
    const double C43075 =
        (3 * (C43475 + ae * C43863 + C43367 * C43866) +
         ae * (2 * C43863 + C43367 * C43867) +
         C43367 *
             (2 * C43866 + ae * C43867 +
              C43367 * (C43478 + ae * C43367 * C43360 +
                        C43367 * (ae * C43360 + C43367 * std::pow(C43270, 6) *
                                                    bs[6] * C43472)))) /
        C43129;
    const double C43138 = C43137 / C43127;
    const double C4948 = C4413 * C635;
    const double C4946 = C4413 * C634;
    const double C5202 = C4413 * C828;
    const double C5198 = C4413 * C628;
    const double C5195 = C4413 * C827;
    const double C5191 = C4413 * C629;
    const double C5428 = C4413 * C1012;
    const double C5425 = C4413 * C1011;
    const double C7055 = C4413 * C2351;
    const double C7051 = C4413 * C2213;
    const double C7219 = C4413 * C2477;
    const double C7640 = C4413 * C2789;
    const double C7636 = C4413 * C2615;
    const double C7852 = C4413 * C2951;
    const double C10880 = C4413 * C1205;
    const double C10878 = C4413 * C1204;
    const double C11134 = C4413 * C1398;
    const double C11130 = C4413 * C1198;
    const double C11127 = C4413 * C1397;
    const double C11123 = C4413 * C1199;
    const double C11362 = C4413 * C1582;
    const double C11359 = C4413 * C1581;
    const double C14601 = C4413 * C4144;
    const double C14597 = C4413 * C4006;
    const double C14772 = C4413 * C4270;
    const double C20436 = C20063 * C635;
    const double C20434 = C20063 * C634;
    const double C20432 = C20063 * C2216;
    const double C20430 = C20063 * C2215;
    const double C20428 = C20063 * C637;
    const double C20426 = C20063 * C636;
    const double C20622 = C20063 * C2351;
    const double C20620 = C20063 * C2213;
    const double C20618 = C20063 * C827;
    const double C20616 = C20063 * C629;
    const double C20615 = C20063 * C2350;
    const double C20613 = C20063 * C2212;
    const double C20611 = C20063 * C826;
    const double C20609 = C20063 * C630;
    const double C20780 = C20063 * C2477;
    const double C20778 = C20063 * C1011;
    const double C20777 = C20063 * C2476;
    const double C20775 = C20063 * C1010;
    const double C21826 = C20063 * C6863;
    const double C21824 = C20063 * C6862;
    const double C21963 = C20063 * C6860;
    const double C22090 = C20063 * C7212;
    const double C22239 = C20063 * C2618;
    const double C22237 = C20063 * C2617;
    const double C22235 = C20063 * C7400;
    const double C22233 = C20063 * C7399;
    const double C22413 = C20063 * C7397;
    const double C22411 = C20063 * C2788;
    const double C22409 = C20063 * C2614;
    const double C22575 = C20063 * C7845;
    const double C22573 = C20063 * C2950;
    const double C24679 = C20063 * C2789;
    const double C24677 = C20063 * C2615;
    const double C24883 = C20063 * C2951;
    const double C25103 = C20063 * C1205;
    const double C25101 = C20063 * C1204;
    const double C25099 = C20063 * C1207;
    const double C25097 = C20063 * C1206;
    const double C25323 = C20063 * C1397;
    const double C25321 = C20063 * C1199;
    const double C25320 = C20063 * C1396;
    const double C25318 = C20063 * C1200;
    const double C25539 = C20063 * C1581;
    const double C25538 = C20063 * C1580;
    const double C26817 = C20063 * C9237;
    const double C26815 = C20063 * C9236;
    const double C27042 = C20063 * C9234;
    const double C27264 = C20063 * C9558;
    const double C28660 = C20063 * C4009;
    const double C28658 = C20063 * C4008;
    const double C28831 = C20063 * C4143;
    const double C28829 = C20063 * C4005;
    const double C29001 = C20063 * C4269;
    const double C40307 = C20063 * C4144;
    const double C40305 = C20063 * C4006;
    const double C40463 = C20063 * C4270;
    const double C42766 = C20063 * C14409;
    const double C42764 = C20063 * C14408;
    const double C42904 = C20063 * C14590;
    const double C42902 = C20063 * C14406;
    const double C43227 = C43226 / C43127;
    const double C4655 = C4648 - C4649;
    const double C4652 = C4636 - C4637;
    const double C5279 = C5274 - C5275;
    const double C5933 = C5928 - C5929;
    const double C35639 = C35631 - C35632;
    const double C37341 = C37333 - C37334;
    const double C39088 = C39083 - C39084;
    const double C4654 = C4644 - C4645;
    const double C4653 = C4640 - C4641;
    const double C35640 = C35635 - C35636;
    const double C15177 = C15170 - C15171;
    const double C15174 = C15158 - C15159;
    const double C15789 = C15784 - C15785;
    const double C16419 = C16414 - C16415;
    const double C25399 = C25391 - C25392;
    const double C27120 = C27112 - C27113;
    const double C28893 = C28888 - C28889;
    const double C15176 = C15166 - C15167;
    const double C15175 = C15162 - C15163;
    const double C25400 = C25395 - C25396;
    const double C347 = C344 - C334;
    const double C11215 = C11213 - C11204;
    const double C43257 = C43256 / C43127;
    const double C10166 = C10159 - C10160;
    const double C10163 = C10147 - C10148;
    const double C10803 = C10798 - C10799;
    const double C11511 = C11506 - C11507;
    const double C25025 = C25017 - C25018;
    const double C26744 = C26739 - C26740;
    const double C27411 = C27406 - C27407;
    const double C10165 = C10155 - C10156;
    const double C10164 = C10151 - C10152;
    const double C25026 = C25021 - C25022;
    const double C26743 = C26735 - C26736;
    const double C29608 = C29601 - C29602;
    const double C29605 = C29589 - C29590;
    const double C30232 = C30227 - C30228;
    const double C30908 = C30903 - C30904;
    const double C35287 = C35279 - C35280;
    const double C36980 = C36975 - C36976;
    const double C37628 = C37623 - C37624;
    const double C29607 = C29597 - C29598;
    const double C29606 = C29593 - C29594;
    const double C35288 = C35283 - C35284;
    const double C36979 = C36971 - C36972;
    const double C566 = C563 - C553;
    const double C5577 = C5575 - C5568;
    const double C173 = C151 * C105;
    const double C236 = C214 * C105;
    const double C709 = C151 * C633;
    const double C775 = C214 * C633;
    const double C4482 = C4466 * C633;
    const double C4956 = C4413 * C633;
    const double C15004 = C14988 * C633;
    const double C15478 = C14935 * C633;
    const double C1279 = C151 * C1203;
    const double C1345 = C214 * C1203;
    const double C9835 = C9819 * C1203;
    const double C10888 = C4413 * C1203;
    const double C29277 = C29261 * C1203;
    const double C30317 = C14935 * C1203;
    const double C5042 = C4466 * C2218;
    const double C5120 = C214 * C2218;
    const double C6871 = C4413 * C2218;
    const double C15564 = C14988 * C2218;
    const double C17340 = C14935 * C2218;
    const double C20440 = C20063 * C2218;
    const double C5720 = C4466 * C2620;
    const double C5790 = C214 * C2620;
    const double C7408 = C4413 * C2620;
    const double C10309 = C151 * C2620;
    const double C10383 = C9819 * C2620;
    const double C16210 = C14988 * C2620;
    const double C17832 = C14935 * C2620;
    const double C24465 = C20063 * C2620;
    const double C29821 = C29261 * C2620;
    const double C10978 = C151 * C4011;
    const double C11052 = C9819 * C4011;
    const double C14417 = C4413 * C4011;
    const double C30469 = C29261 * C4011;
    const double C33793 = C14935 * C4011;
    const double C40150 = C20063 * C4011;
    const double C21965 = C20063 * C7044;
    const double C22046 = C214 * C7044;
    const double C22415 = C20063 * C7629;
    const double C22519 = C214 * C7629;
    const double C26583 = C9819 * C7629;
    const double C27118 = C14988 * C7629;
    const double C36819 = C29261 * C7629;
    const double C37339 = C4466 * C7629;
    const double C27044 = C20063 * C9400;
    const double C27194 = C9819 * C9400;
    const double C28886 = C14988 * C9400;
    const double C37415 = C29261 * C9400;
    const double C39081 = C4466 * C9400;
    const double C41614 = C151 * C9400;
    const double C43036 = C20063 * C14765;
    const double C43078 = C151 * C14765;
    const double C5278 = C5270 - C5271;
    const double C5576 = C5570 - C5571;
    const double C15788 = C15780 - C15781;
    const double C5932 = C5924 - C5925;
    const double C6213 = C6208 - C6209;
    const double C10521 = C10517 - C10518;
    const double C10802 = C10794 - C10795;
    const double C16418 = C16410 - C16411;
    const double C30231 = C30223 - C30224;
    const double C11214 = C11207 - C11208;
    const double C11510 = C11502 - C11503;
    const double C30907 = C30899 - C30900;
    const double C4954 = C4413 * C632;
    const double C5199 = C44312 * C632;
    const double C15476 = C14935 * C632;
    const double C15709 = C44312 * C632;
    const double C10886 = C4413 * C1202;
    const double C11131 = C44312 * C1202;
    const double C30315 = C14935 * C1202;
    const double C30548 = C44312 * C1202;
    const double C6869 = C4413 * C2217;
    const double C7052 = C44312 * C2217;
    const double C17338 = C14935 * C2217;
    const double C17505 = C44312 * C2217;
    const double C20438 = C20063 * C2217;
    const double C20621 = C44138 * C2217;
    const double C7406 = C4413 * C2619;
    const double C7637 = C44312 * C2619;
    const double C17830 = C14935 * C2619;
    const double C18045 = C44312 * C2619;
    const double C24463 = C20063 * C2619;
    const double C24678 = C44138 * C2619;
    const double C14415 = C4413 * C4010;
    const double C14598 = C44312 * C4010;
    const double C33791 = C14935 * C4010;
    const double C33958 = C44312 * C4010;
    const double C40148 = C20063 * C4010;
    const double C40306 = C44138 * C4010;
    const double C27335 = C44321 * C7919;
    const double C37552 = C44321 * C7919;
    const double C29057 = C44321 * C9612;
    const double C39246 = C44321 * C9612;
    const double C41771 = C44245 * C9612;
    const double C26893 = C44321 * C7485;
    const double C27116 = C14988 * C7485;
    const double C37122 = C44321 * C7485;
    const double C37337 = C4466 * C7485;
    const double C28720 = C44321 * C9292;
    const double C28884 = C14988 * C9292;
    const double C38924 = C44321 * C9292;
    const double C39079 = C4466 * C9292;
    const double C41458 = C44245 * C9292;
    const double C41612 = C151 * C9292;
    const double C4953 = C4407 * C641;
    const double C4949 = C44312 * C641;
    const double C15475 = C14929 * C641;
    const double C15471 = C44312 * C641;
    const double C20437 = C44138 * C641;
    const double C10885 = C4407 * C1211;
    const double C10881 = C44312 * C1211;
    const double C25104 = C44138 * C1211;
    const double C30314 = C14929 * C1211;
    const double C30310 = C44312 * C1211;
    const double C6876 = C4407 * C2221;
    const double C17345 = C14929 * C2221;
    const double C20433 = C44138 * C2221;
    const double C7413 = C4407 * C2623;
    const double C17837 = C14929 * C2623;
    const double C22240 = C44138 * C2623;
    const double C14422 = C4407 * C4014;
    const double C28661 = C44138 * C4014;
    const double C33798 = C14929 * C4014;
    const double C343 = C44245 * C329;
    const double C896 = C44245 * C885;
    const double C4643 = C44321 * C885;
    const double C5277 = C4409 * C885;
    const double C15165 = C44321 * C885;
    const double C15787 = C14931 * C885;
    const double C1466 = C44245 * C1455;
    const double C5931 = C4409 * C1455;
    const double C16417 = C14931 * C1455;
    const double C12897 = C44245 * C2844;
    const double C25398 = C44321 * C2844;
    const double C27115 = C14931 * C2844;
    const double C35638 = C44321 * C2844;
    const double C37336 = C4409 * C2844;
    const double C14659 = C44245 * C4187;
    const double C28891 = C14931 * C4187;
    const double C39086 = C4409 * C4187;
    const double C562 = C44260 * C548;
    const double C1138 = C44260 * C1127;
    const double C10801 = C9716 * C1127;
    const double C30230 = C29158 * C1127;
    const double C1708 = C44260 * C1697;
    const double C10154 = C44323 * C1697;
    const double C11509 = C9716 * C1697;
    const double C29596 = C44323 * C1697;
    const double C30906 = C29158 * C1697;
    const double C7328 = C44260 * C2561;
    const double C26742 = C9716 * C2561;
    const double C36978 = C29158 * C2561;
    const double C7993 = C44260 * C3059;
    const double C25024 = C44323 * C3059;
    const double C27409 = C9716 * C3059;
    const double C35286 = C44323 * C3059;
    const double C37626 = C29158 * C3059;
    const double C27410 = C27402 - C27403;
    const double C37627 = C37619 - C37620;
    const double C499 = C175 * C214;
    const double C348 = C345 - C338;
    const double C349 = C346 - C342;
    const double C900 = C898 - C895;
    const double C899 = C897 - C891;
    const double C1470 = C1468 - C1465;
    const double C1469 = C1467 - C1461;
    const double C12900 = C12899 - C12896;
    const double C42817 = C42811 * C20063;
    const double C14661 = C14660 - C14658;
    const double C42953 = C42952 - C42950;
    const double C398 = C238 * C151;
    const double C567 = C564 - C557;
    const double C568 = C565 - C561;
    const double C1142 = C1140 - C1137;
    const double C1141 = C1139 - C1133;
    const double C1712 = C1710 - C1707;
    const double C1711 = C1709 - C1703;
    const double C21918 = C21912 * C20063;
    const double C7330 = C7329 - C7327;
    const double C7995 = C7994 - C7992;
    const double C22177 = C22176 - C22174;
    const double C22684 = C22683 - C22681;
    const double C404 = C403 * C44245;
    const double C505 = C504 * C44260;
    const double C43336 = C43298 + C43333;
    const double C9349 =
        (C43341 * C43389 + be * C43367 * C43709 +
         C43367 *
             (be * C43709 + C43367 * C43341 *
                                (ae * C43386 + C43272 * std::pow(C43270, 6) *
                                                   bs[6] * C43373))) /
        C43129;
    const double C9239 = (C43341 * C43304 + C43709 * C43482) / C43127;
    const double C43335 = C43297 + C43332;
    const double C9561 =
        (C43341 * C43465 + ae * C43367 * C43719 +
         C43367 *
             (ae * C43719 + C43367 * C43341 *
                                (be * C43462 + C43272 * std::pow(C43270, 6) *
                                                   bs[6] * C43449))) /
        C43129;
    const double C9238 = (C43341 * C43303 + C43719 * C43482) / C43127;
    const double C43334 = C43311 + C43331;
    const double C2624 =
        (ae * C43367 * C43341 * C43297 + be * C43367 * C43341 * C43298 +
         C43272 * C43367 * C43497) /
        C43129;
    const double C2625 =
        (C43367 * C43497 + ae * C43367 * C43341 * C43329 +
         be * C43367 * C43341 * C43330 +
         C43272 *
             (ae * C43367 * C43341 * C43320 + be * C43367 * C43341 * C43323 +
              C43272 * C43367 * C43341 *
                  (C43309 * C43310 + C43276 * bs[6] * std::pow(C43270, 6)) *
                  C43128)) /
        C43129;
    const double C6867 =
        (ae * (2 * C43341 * C43297 + C43341 * (C43297 + C43320 * C43419)) +
         be * (2 * C43341 * C43298 + C43341 * (C43298 + C43323 * C43419)) +
         C43272 * (2 * C43497 +
                   C43341 * (C43328 + (C43309 * C43310 +
                                       C43276 * bs[6] * std::pow(C43270, 6)) *
                                          C43128 * C43419))) /
        C43129;
    const double C9240 = (C43341 * C43302 + C43497 * C43482) / C43129;
    const double C9241 =
        (ae * (C43341 * C43297 + C43341 * C43320 * C43482) +
         be * (C43341 * C43298 + C43341 * C43323 * C43482) +
         C43272 * (C43497 + C43341 *
                                (C43309 * C43310 +
                                 C43276 * bs[6] * std::pow(C43270, 6)) *
                                C43128 * C43482)) /
        C43129;
    const double C21822 =
        (3 * (C43302 + C43328 * C43419) +
         C43341 * (2 * C43497 +
                   C43341 * (C43328 + (C43309 * C43310 +
                                       C43276 * bs[6] * std::pow(C43270, 6)) *
                                          C43128 * C43419))) /
        C43129;
    const double C22231 =
        (C43367 * (2 * C43497 +
                   C43341 * (C43328 + (C43309 * C43310 +
                                       C43276 * bs[6] * std::pow(C43270, 6)) *
                                          C43128 * C43419))) /
        C43129;
    const double C28656 =
        (2 * C43367 * C43497 +
         C43367 * (C43497 + C43341 *
                                (C43309 * C43310 +
                                 C43276 * bs[6] * std::pow(C43270, 6)) *
                                C43128 * C43482)) /
        C43129;
    const double C14413 =
        (ae * (2 * C43367 * C43297 + C43367 * (C43297 + C43320 * C43482)) +
         be * (2 * C43367 * C43298 + C43367 * (C43298 + C43323 * C43482)) +
         C43272 * (2 * C43534 +
                   C43367 * (C43328 + (C43309 * C43310 +
                                       C43276 * bs[6] * std::pow(C43270, 6)) *
                                          C43128 * C43482))) /
        C43129;
    const double C42762 =
        (3 * (C43302 + C43328 * C43482) +
         C43367 * (2 * C43534 +
                   C43367 * (C43328 + (C43309 * C43310 +
                                       C43276 * bs[6] * std::pow(C43270, 6)) *
                                          C43128 * C43482))) /
        C43129;
    const double C4957 = C44312 * C640;
    const double C15479 = C44312 * C640;
    const double C10889 = C44312 * C1210;
    const double C30318 = C44312 * C1210;
    const double C6872 = C44312 * C2222;
    const double C17341 = C44312 * C2222;
    const double C20441 = C44138 * C2222;
    const double C14418 = C44312 * C4015;
    const double C33794 = C44312 * C4015;
    const double C40151 = C44138 * C4015;
    const double C21827 = C44138 * C6866;
    const double C22236 = C44138 * C7403;
    const double C42767 = C44138 * C14412;
    const double C7920 =
        (ae * (C43355 + C43341 * C43669 + C43665 * be) +
         C43367 *
             (C43679 + be * C43341 * C43680 +
              C43341 * (be * C43680 + C43341 * C43272 * std::pow(C43270, 6) *
                                          bs[6] * C43472))) /
        C43129;
    const double C9613 =
        (be * C43457 + C43341 * C43679 + ae * C43367 * C43669 +
         C43367 *
             (ae * C43669 +
              C43367 * (be * C43680 + C43341 * C43272 * std::pow(C43270, 6) *
                                          bs[6] * C43472))) /
        C43129;
    const double C6933 = (2 * (C43341 * C43355 + C43293 * be) +
                          C43341 * (C43355 + C43341 * C43669 + C43665 * be) +
                          (C43293 + C43315 * C43419) * be) /
                         C43127;
    const double C7486 =
        (C43367 * (C43355 + C43341 * C43669 + C43665 * be)) / C43127;
    const double C9293 =
        (C43341 * C43355 + C43293 * be + C43669 * C43482) / C43127;
    const double C43783 = C43353 + C43781;
    const double C14537 = (2 * (C43367 * C43381 + C43293 * be) +
                           C43367 * (C43381 + C43367 * C43754 + C43752 * be) +
                           (C43293 + C43315 * C43482) * be) /
                          C43127;
    const double C28774 = (2 * (C43367 * C43723 + C43658 * be) +
                           C43367 * (C43723 + C43367 * C43840 + C43836 * be) +
                           (C43658 + C43772 * C43482) * be) /
                          C43127;
    const double C43883 = C43379 + C43881;
    const double C7045 = (2 * (C43341 * C43406 + C43293 * ae) +
                          C43341 * (C43406 + C43341 * C43670 + C43665 * ae) +
                          (C43293 + C43315 * C43419) * ae) /
                         C43127;
    const double C7630 =
        (C43367 * (C43406 + C43341 * C43670 + C43665 * ae)) / C43127;
    const double C9401 =
        (C43341 * C43406 + C43293 * ae + C43670 * C43482) / C43127;
    const double C43784 = C43404 + C43782;
    const double C7107 =
        (2 * (ae * C43355 + be * C43406 + C43341 * C43663) +
         ae * (C43355 + C43341 * C43669 + C43665 * be) +
         be * (C43406 + C43341 * C43670 + C43665 * ae) +
         C43341 * (C43663 + ae * C43669 + be * C43670 +
                   C43341 * (ae * C43664 + be * C43666 +
                             C43341 * C43272 *
                                 (C43309 * C43310 +
                                  C43419 * bs[6] * std::pow(C43270, 6)) *
                                 C43128))) /
        C43129;
    const double C7708 =
        (C43367 * C43663 + ae * C43367 * C43669 + be * C43367 * C43670 +
         C43341 *
             (ae * C43367 * C43664 + be * C43367 * C43666 +
              C43341 * C43367 * C43272 *
                  (C43309 * C43310 + C43419 * bs[6] * std::pow(C43270, 6)) *
                  C43128)) /
        C43129;
    const double C9455 =
        (ae * (C43355 + C43664 * C43482) + be * (C43406 + C43666 * C43482) +
         C43341 * (C43663 + C43272 *
                                (C43309 * C43310 +
                                 C43419 * bs[6] * std::pow(C43270, 6)) *
                                C43128 * C43482)) /
        C43129;
    const double C14653 =
        (2 * C43367 * C43663 +
         C43367 * (C43663 + C43272 *
                                (C43309 * C43310 +
                                 C43419 * bs[6] * std::pow(C43270, 6)) *
                                C43128 * C43482)) /
        C43129;
    const double C43775 = C43769 + C43770;
    const double C28882 =
        (ae * (2 * C43367 * C43353 + C43367 * (C43353 + C43360 * C43482)) +
         be * (2 * C43367 * C43404 + C43367 * (C43404 + C43411 * C43482)) +
         C43341 * (2 * C43805 +
                   C43367 * (C43429 + (C43309 * C43310 +
                                       C43419 * bs[6] * std::pow(C43270, 6)) *
                                          C43128 * C43482))) /
        C43129;
    const double C42946 =
        (3 * (C43424 + C43429 * C43482) +
         C43367 * (2 * C43805 +
                   C43367 * (C43429 + (C43309 * C43310 +
                                       C43419 * bs[6] * std::pow(C43270, 6)) *
                                          C43128 * C43482))) /
        C43129;
    const double C892 = C44245 * C884;
    const double C4647 = C44321 * C884;
    const double C15169 = C44321 * C884;
    const double C1462 = C44245 * C1454;
    const double C5273 = C44321 * C2395;
    const double C15783 = C44321 * C2395;
    const double C5927 = C44321 * C2845;
    const double C10520 = C44245 * C2845;
    const double C16413 = C44321 * C2845;
    const double C11210 = C44245 * C4188;
    const double C27119 = C44321 * C7707;
    const double C37340 = C44321 * C7707;
    const double C28887 = C44321 * C9454;
    const double C39082 = C44321 * C9454;
    const double C41615 = C44245 * C9454;
    const double C42951 = C44245 * C14652;
    const double C14766 = (2 * (C43367 * C43457 + C43293 * ae) +
                           C43367 * (C43457 + C43367 * C43755 + C43752 * ae) +
                           (C43293 + C43315 * C43482) * ae) /
                          C43127;
    const double C28998 = (2 * (C43367 * C43724 + C43658 * ae) +
                           C43367 * (C43724 + C43367 * C43841 + C43836 * ae) +
                           (C43658 + C43772 * C43482) * ae) /
                          C43127;
    const double C43884 = C43455 + C43882;
    const double C7323 =
        (2 * C43341 * C43683 +
         C43341 * (C43683 + C43272 *
                                (C43309 * C43310 +
                                 C43482 * bs[6] * std::pow(C43270, 6)) *
                                C43128 * C43419)) /
        C43129;
    const double C7988 =
        (ae * (C43381 + C43674 * C43419) + be * (C43457 + C43680 * C43419) +
         C43367 * (C43683 + C43272 *
                                (C43309 * C43310 +
                                 C43482 * bs[6] * std::pow(C43270, 6)) *
                                C43128 * C43419)) /
        C43129;
    const double C9665 =
        (C43341 * C43683 + ae * (C43367 * C43726 + C43665 * be) +
         be * (C43367 * C43727 + C43665 * ae) +
         C43367 *
             (ae * C43726 + be * C43727 +
              C43367 * C43341 * C43272 *
                  (C43309 * C43310 + C43482 * bs[6] * std::pow(C43270, 6)) *
                  C43128)) /
        C43129;
    const double C14878 =
        (2 * (ae * C43381 + be * C43457 + C43367 * C43683) +
         ae * (C43381 + C43367 * C43754 + C43752 * be) +
         be * (C43457 + C43367 * C43755 + C43752 * ae) +
         C43367 * (C43683 + ae * C43754 + be * C43755 +
                   C43367 * (ae * C43674 + be * C43680 +
                             C43367 * C43272 *
                                 (C43309 * C43310 +
                                  C43482 * bs[6] * std::pow(C43270, 6)) *
                                 C43128))) /
        C43129;
    const double C29107 =
        (2 * (ae * C43723 + be * C43724 + C43367 * C43834) +
         ae * (C43723 + C43367 * C43840 + C43836 * be) +
         be * (C43724 + C43367 * C43841 + C43836 * ae) +
         C43367 * (C43834 + ae * C43840 + be * C43841 +
                   C43367 * (ae * C43835 + be * C43837 +
                             C43367 * C43341 *
                                 (C43309 * C43310 +
                                  C43482 * bs[6] * std::pow(C43270, 6)) *
                                 C43128))) /
        C43129;
    const double C43875 = C43869 + C43870;
    const double C1134 = C44260 * C1126;
    const double C1704 = C44260 * C1696;
    const double C10158 = C44323 * C1696;
    const double C29600 = C44323 * C1696;
    const double C5573 = C44260 * C2562;
    const double C6211 = C44260 * C3060;
    const double C10797 = C44323 * C3060;
    const double C30226 = C44323 * C3060;
    const double C11505 = C44323 * C4355;
    const double C30902 = C44323 * C4355;
    const double C22175 = C44260 * C7322;
    const double C22682 = C44260 * C7987;
    const double C26738 = C44323 * C7987;
    const double C36974 = C44323 * C7987;
    const double C27405 = C44323 * C9664;
    const double C37622 = C44323 * C9664;
    const double C42818 = C42812 * C44138;
    const double C710 = C44245 * C700;
    const double C4483 = C44321 * C700;
    const double C15005 = C44321 * C700;
    const double C1280 = C44245 * C1270;
    const double C5043 = C44321 * C2266;
    const double C15565 = C44321 * C2266;
    const double C5721 = C44321 * C2680;
    const double C10310 = C44245 * C2680;
    const double C16211 = C44321 * C2680;
    const double C10979 = C44245 * C4059;
    const double C5203 = C44312 * C832;
    const double C15713 = C44312 * C832;
    const double C11135 = C44312 * C1402;
    const double C30552 = C44312 * C1402;
    const double C7056 = C44312 * C2354;
    const double C17509 = C44312 * C2354;
    const double C20623 = C44138 * C2354;
    const double C7641 = C44312 * C2792;
    const double C18049 = C44312 * C2792;
    const double C24680 = C44138 * C2792;
    const double C14602 = C44312 * C4147;
    const double C33962 = C44312 * C4147;
    const double C40308 = C44138 * C4147;
    const double C21919 = C21913 * C44138;
    const double C776 = C44260 * C766;
    const double C1346 = C44260 * C1336;
    const double C9836 = C44323 * C1336;
    const double C29278 = C44323 * C1336;
    const double C5121 = C44260 * C2310;
    const double C5791 = C44260 * C2736;
    const double C10384 = C44323 * C2736;
    const double C29822 = C44323 * C2736;
    const double C11053 = C44323 * C4103;
    const double C30470 = C44323 * C4103;
    const double C5429 = C44312 * C1016;
    const double C15933 = C44312 * C1016;
    const double C11363 = C44312 * C1586;
    const double C30766 = C44312 * C1586;
    const double C7220 = C44312 * C2480;
    const double C17663 = C44312 * C2480;
    const double C20781 = C44138 * C2480;
    const double C7853 = C44312 * C2954;
    const double C18251 = C44312 * C2954;
    const double C24884 = C44138 * C2954;
    const double C14773 = C44312 * C4273;
    const double C34118 = C44312 * C4273;
    const double C40464 = C44138 * C4273;
    const double C43139 = C44138 - C43138;
    const double C21962 = C20614 - C20615;
    const double C21961 = C20612 - C20613;
    const double C22089 = C20776 - C20777;
    const double C27041 = C22411 - C22412;
    const double C27039 = C22412 - C22411;
    const double C27040 = C22409 - C22410;
    const double C27038 = C22410 - C22409;
    const double C27263 = C22573 - C22574;
    const double C27262 = C22574 - C22573;
    const double C42901 = C28832 - C28831;
    const double C42900 = C28830 - C28829;
    const double C43035 = C29002 - C29001;
    const double C43228 = C44245 - C43227;
    const double C4659 = C4655 - C4650;
    const double C4656 = C4652 - C4638;
    const double C5281 = C5279 - C5276;
    const double C5935 = C5933 - C5930;
    const double C35641 = C35639 - C35633;
    const double C37343 = C37341 - C37335;
    const double C39090 = C39088 - C39085;
    const double C4658 = C4654 - C4646;
    const double C4657 = C4653 - C4642;
    const double C35642 = C35640 - C35637;
    const double C15181 = C15177 - C15172;
    const double C15178 = C15174 - C15160;
    const double C15791 = C15789 - C15786;
    const double C16421 = C16419 - C16416;
    const double C25401 = C25399 - C25393;
    const double C27122 = C27120 - C27114;
    const double C28895 = C28893 - C28890;
    const double C15180 = C15176 - C15168;
    const double C15179 = C15175 - C15164;
    const double C25402 = C25400 - C25397;
    const double C350 = C347 + C335;
    const double C11217 = C11215 + C11205;
    const double C43258 = C44260 - C43257;
    const double C10170 = C10166 - C10161;
    const double C10167 = C10163 - C10149;
    const double C10805 = C10803 - C10800;
    const double C11513 = C11511 - C11508;
    const double C25027 = C25025 - C25019;
    const double C26746 = C26744 - C26741;
    const double C27413 = C27411 - C27408;
    const double C10169 = C10165 - C10157;
    const double C10168 = C10164 - C10153;
    const double C25028 = C25026 - C25023;
    const double C26745 = C26743 - C26737;
    const double C29612 = C29608 - C29603;
    const double C29609 = C29605 - C29591;
    const double C30234 = C30232 - C30229;
    const double C30910 = C30908 - C30905;
    const double C35289 = C35287 - C35281;
    const double C36982 = C36980 - C36977;
    const double C37630 = C37628 - C37625;
    const double C29611 = C29607 - C29599;
    const double C29610 = C29606 - C29595;
    const double C35290 = C35288 - C35285;
    const double C36981 = C36979 - C36973;
    const double C569 = C566 + C554;
    const double C5579 = C5577 + C5569;
    const double C5280 = C5278 - C5272;
    const double C5578 = C5576 - C5572;
    const double C15790 = C15788 - C15782;
    const double C5934 = C5932 - C5926;
    const double C6214 = C6213 - C6210;
    const double C10522 = C10521 - C10519;
    const double C10804 = C10802 - C10796;
    const double C16420 = C16418 - C16412;
    const double C30233 = C30231 - C30225;
    const double C11216 = C11214 - C11209;
    const double C11512 = C11510 - C11504;
    const double C30909 = C30907 - C30901;
    const double C27121 = C27116 - C27117;
    const double C37342 = C37337 - C37338;
    const double C28892 = C28884 - C28885;
    const double C39087 = C39079 - C39080;
    const double C41616 = C41612 - C41613;
    const double C27412 = C27410 - C27404;
    const double C37629 = C37627 - C37621;
    const double C351 = C348 + C339;
    const double C352 = C349 + C343;
    const double C902 = C900 + C896;
    const double C1472 = C1470 + C1466;
    const double C12901 = C12900 + C12897;
    const double C14662 = C14661 + C14659;
    const double C570 = C567 + C558;
    const double C571 = C568 + C562;
    const double C1144 = C1142 + C1138;
    const double C1714 = C1712 + C1708;
    const double C7331 = C7330 + C7328;
    const double C7996 = C7995 + C7993;
    const double C405 = C398 + C404;
    const double C506 = C499 + C505;
    const double C43338 = C43336 + C43324;
    const double C43337 = C43335 + C43321;
    const double C7409 = C44312 * C2624;
    const double C17833 = C44312 * C2624;
    const double C24466 = C44138 * C2624;
    const double C26818 = C44138 * C9240;
    const double C43785 = C43783 + C43777;
    const double C43885 = C43883 + C43877;
    const double C43786 = C43784 + C43780;
    const double C901 = C899 + C892;
    const double C1471 = C1469 + C1462;
    const double C42954 = C42953 + C42951;
    const double C43886 = C43884 + C43880;
    const double C1143 = C1141 + C1134;
    const double C1713 = C1711 + C1704;
    const double C22178 = C22177 + C22175;
    const double C22685 = C22684 + C22682;
    const double C42819 = C42817 + C42818;
    const double C21920 = C21918 + C21919;
    const double C43140 = C43139 * C43136;
    const double C89 =
        ((C43139 * ae) / C43127 - C43126 / C43131) / (2 * C43127) -
        ((C43125 * ((0 * ae) / C43127 - C43132 / C43129) + C44312) * be) /
            C43127;
    const double C4411 =
        (-C43126 / C43127) / (2 * C43127) - (C43139 * be) / C43127;
    const double C14933 = (C43139 * ae) / C43127 - C43126 / C43131;
    const double C22088 = C21961 * C214;
    const double C22092 = C22089 * C44260;
    const double C42907 = C42901 * C44245;
    const double C42906 = C42900 * C151;
    const double C43229 = C43228 * C43136;
    const double C4663 = C4659 + C4651;
    const double C4660 = C4656 + C4639;
    const double C5283 = C5281 + C5277;
    const double C5937 = C5935 + C5931;
    const double C35643 = C35641 + C35634;
    const double C37345 = C37343 + C37336;
    const double C39092 = C39090 + C39086;
    const double C4662 = C4658 + C4647;
    const double C4661 = C4657 + C4643;
    const double C35644 = C35642 + C35638;
    const double C15185 = C15181 + C15173;
    const double C15182 = C15178 + C15161;
    const double C15793 = C15791 + C15787;
    const double C16423 = C16421 + C16417;
    const double C25403 = C25401 + C25394;
    const double C27124 = C27122 + C27115;
    const double C28897 = C28895 + C28891;
    const double C15184 = C15180 + C15169;
    const double C15183 = C15179 + C15165;
    const double C25404 = C25402 + C25398;
    const double C11219 = C11217 * C4407;
    const double C30619 = C11217 * C14929;
    const double C40359 = C11217 * C44138;
    const double C43259 = C43258 * C43136;
    const double C10174 = C10170 + C10162;
    const double C10171 = C10167 + C10150;
    const double C10807 = C10805 + C10801;
    const double C11515 = C11513 + C11509;
    const double C25029 = C25027 + C25020;
    const double C26748 = C26746 + C26742;
    const double C27415 = C27413 + C27409;
    const double C10173 = C10169 + C10158;
    const double C10172 = C10168 + C10154;
    const double C25030 = C25028 + C25024;
    const double C26747 = C26745 + C26738;
    const double C29616 = C29612 + C29604;
    const double C29613 = C29609 + C29592;
    const double C30236 = C30234 + C30230;
    const double C30912 = C30910 + C30906;
    const double C35291 = C35289 + C35282;
    const double C36984 = C36982 + C36978;
    const double C37632 = C37630 + C37626;
    const double C29615 = C29611 + C29600;
    const double C29614 = C29610 + C29596;
    const double C35292 = C35290 + C35286;
    const double C36983 = C36981 + C36974;
    const double C572 = C569 * C44245;
    const double C4872 = C569 * C4409;
    const double C15394 = C569 * C14931;
    const double C5282 = C5280 + C5273;
    const double C5580 = C5578 + C5573;
    const double C15792 = C15790 + C15783;
    const double C5936 = C5934 + C5927;
    const double C6215 = C6214 + C6211;
    const double C10523 = C10522 + C10520;
    const double C10806 = C10804 + C10797;
    const double C16422 = C16420 + C16413;
    const double C30235 = C30233 + C30226;
    const double C11218 = C11216 + C11210;
    const double C11514 = C11512 + C11505;
    const double C30911 = C30909 + C30902;
    const double C27123 = C27121 - C27118;
    const double C37344 = C37342 - C37339;
    const double C28894 = C28892 - C28886;
    const double C39089 = C39087 - C39081;
    const double C41617 = C41616 - C41614;
    const double C27414 = C27412 + C27405;
    const double C37631 = C37629 + C37622;
    const double C11211 = C1472 * C4407;
    const double C11206 = C1472 * C44312;
    const double C30621 = C1472 * C14929;
    const double C30620 = C1472 * C44312;
    const double C40361 = C1472 * C44138;
    const double C12902 = C12901 * C4407;
    const double C32287 = C12901 * C14929;
    const double C41611 = C12901 * C44138;
    const double C14663 = C14662 * C4407;
    const double C34014 = C14662 * C14929;
    const double C40360 = C14662 * C44138;
    const double C573 = C570 * C44245;
    const double C4875 = C570 * C4409;
    const double C15397 = C570 * C14931;
    const double C574 = C571 * C44245;
    const double C1146 = C1144 * C44245;
    const double C4873 = C1144 * C44321;
    const double C5574 = C1144 * C4409;
    const double C15395 = C1144 * C44321;
    const double C16071 = C1144 * C14931;
    const double C1716 = C1714 * C44245;
    const double C6212 = C1714 * C4409;
    const double C16693 = C1714 * C14931;
    const double C701 =
        (be * (2 * C43304 + C43272 * C43338 + C43322 * ae) +
         C43341 *
             (2 * C43363 + ae * C43364 +
              C43272 * (C43359 + ae * C43272 * C43360 +
                        C43272 * (ae * C43360 + C43272 * std::pow(C43270, 6) *
                                                    bs[6] * C43347)))) /
        C43129;
    const double C1337 =
        (be * (2 * C43304 + C43272 * C43338 + C43322 * ae) +
         C43367 *
             (2 * C43389 + ae * C43390 +
              C43272 * (C43385 + ae * C43272 * C43386 +
                        C43272 * (ae * C43386 + C43272 * std::pow(C43270, 6) *
                                                    bs[6] * C43373)))) /
        C43129;
    const double C2267 =
        (C43352 + ae * C43355 + C43272 * C43363 + be * C43341 * C43338 +
         C43341 *
             (be * C43338 +
              C43341 * (C43359 + ae * C43272 * C43360 +
                        C43272 * (ae * C43360 + C43272 * std::pow(C43270, 6) *
                                                    bs[6] * C43347)))) /
        C43129;
    const double C2681 =
        (C43367 *
         (be * C43338 +
          C43341 * (C43359 + ae * C43272 * C43360 +
                    C43272 * (ae * C43360 + C43272 * std::pow(C43270, 6) *
                                                bs[6] * C43347)))) /
        C43129;
    const double C2737 =
        (be * C43341 * C43338 +
         C43367 * C43341 *
             (C43385 + ae * C43272 * C43386 +
              C43272 * (ae * C43386 +
                        C43272 * std::pow(C43270, 6) * bs[6] * C43373))) /
        C43129;
    const double C4104 =
        (C43378 + ae * C43381 + C43272 * C43389 + be * C43367 * C43338 +
         C43367 *
             (be * C43338 +
              C43367 * (C43385 + ae * C43272 * C43386 +
                        C43272 * (ae * C43386 + C43272 * std::pow(C43270, 6) *
                                                    bs[6] * C43373)))) /
        C43129;
    const double C107 = (3 * (C43285 + C43272 * C43304 + C43293 * ae) +
                         C43272 * (2 * C43304 + C43272 * C43338 + C43322 * ae) +
                         (2 * C43293 + C43272 * C43322) * ae) /
                        C43127;
    const double C639 =
        (C43341 * (2 * C43304 + C43272 * C43338 + C43322 * ae)) / C43127;
    const double C1209 =
        (C43367 * (2 * C43304 + C43272 * C43338 + C43322 * ae)) / C43127;
    const double C2220 =
        (C43285 + C43272 * C43304 + C43293 * ae + C43338 * C43419) / C43127;
    const double C2622 = (C43367 * C43341 * C43338) / C43127;
    const double C4013 =
        (C43285 + C43272 * C43304 + C43293 * ae + C43338 * C43482) / C43127;
    const double C112 =
        (3 * (C43302 + ae * C43303 + be * C43304 + C43272 * C43334) +
         ae * (2 * C43303 + C43272 * C43337 + C43322 * be) +
         be * (2 * C43304 + C43272 * C43338 + C43322 * ae) +
         C43272 *
             (2 * C43334 + ae * C43337 + be * C43338 +
              C43272 * (C43328 + ae * C43329 + be * C43330 +
                        C43272 * (ae * C43320 + be * C43323 +
                                  C43272 *
                                      (C43309 * C43310 +
                                       C43276 * bs[6] * std::pow(C43270, 6)) *
                                      C43128)))) /
        C43129;
    const double C643 =
        (2 * (ae * C43341 * C43297 + be * C43341 * C43298 + C43272 * C43497) +
         ae * C43341 * C43337 + be * C43341 * C43338 +
         C43272 * (C43497 + ae * C43341 * C43329 + be * C43341 * C43330 +
                   C43272 * (ae * C43341 * C43320 + be * C43341 * C43323 +
                             C43272 * C43341 *
                                 (C43309 * C43310 +
                                  C43276 * bs[6] * std::pow(C43270, 6)) *
                                 C43128))) /
        C43129;
    const double C833 =
        (ae * (2 * C43303 + C43272 * C43337 + C43322 * be) +
         C43341 *
             (2 * C43414 + be * C43415 +
              C43272 * (C43410 + be * C43272 * C43411 +
                        C43272 * (be * C43411 + C43272 * std::pow(C43270, 6) *
                                                    bs[6] * C43398)))) /
        C43129;
    const double C1213 =
        (2 * (ae * C43367 * C43297 + be * C43367 * C43298 + C43272 * C43534) +
         ae * C43367 * C43337 + be * C43367 * C43338 +
         C43272 * (C43534 + ae * C43367 * C43329 + be * C43367 * C43330 +
                   C43272 * (ae * C43367 * C43320 + be * C43367 * C43323 +
                             C43272 * C43367 *
                                 (C43309 * C43310 +
                                  C43276 * bs[6] * std::pow(C43270, 6)) *
                                 C43128))) /
        C43129;
    const double C1587 =
        (ae * (2 * C43303 + C43272 * C43337 + C43322 * be) +
         C43367 *
             (2 * C43465 + be * C43466 +
              C43272 * (C43461 + be * C43272 * C43462 +
                        C43272 * (be * C43462 + C43272 * std::pow(C43270, 6) *
                                                    bs[6] * C43449)))) /
        C43129;
    const double C2355 =
        (C43403 + be * C43406 + C43272 * C43414 + ae * C43341 * C43337 +
         C43341 *
             (ae * C43337 +
              C43341 * (C43410 + be * C43272 * C43411 +
                        C43272 * (be * C43411 + C43272 * std::pow(C43270, 6) *
                                                    bs[6] * C43398)))) /
        C43129;
    const double C2793 =
        (ae * C43367 * C43337 +
         C43341 * C43367 *
             (C43410 + be * C43272 * C43411 +
              C43272 * (be * C43411 +
                        C43272 * std::pow(C43270, 6) * bs[6] * C43398))) /
        C43129;
    const double C2955 =
        (ae * C43341 * C43337 +
         C43367 * C43341 *
             (C43461 + be * C43272 * C43462 +
              C43272 * (be * C43462 +
                        C43272 * std::pow(C43270, 6) * bs[6] * C43449))) /
        C43129;
    const double C4274 =
        (C43454 + be * C43457 + C43272 * C43465 + ae * C43367 * C43337 +
         C43367 *
             (ae * C43337 +
              C43367 * (C43461 + be * C43272 * C43462 +
                        C43272 * (be * C43462 + C43272 * std::pow(C43270, 6) *
                                                    bs[6] * C43449)))) /
        C43129;
    const double C106 = (3 * (C43284 + C43272 * C43303 + C43293 * be) +
                         C43272 * (2 * C43303 + C43272 * C43337 + C43322 * be) +
                         (2 * C43293 + C43272 * C43322) * be) /
                        C43127;
    const double C638 =
        (C43341 * (2 * C43303 + C43272 * C43337 + C43322 * be)) / C43127;
    const double C1208 =
        (C43367 * (2 * C43303 + C43272 * C43337 + C43322 * be)) / C43127;
    const double C2219 =
        (C43284 + C43272 * C43303 + C43293 * be + C43337 * C43419) / C43127;
    const double C2621 = (C43367 * C43341 * C43337) / C43127;
    const double C4012 =
        (C43284 + C43272 * C43303 + C43293 * be + C43337 * C43482) / C43127;
    const double C22626 =
        (ae * (2 * C43660 + C43341 * C43785 + C43778 * be) +
         C43367 *
             (2 * C43796 + be * C43797 +
              C43341 * (C43478 + be * C43341 * C43462 +
                        C43341 * (be * C43462 + C43341 * std::pow(C43270, 6) *
                                                    bs[6] * C43472)))) /
        C43129;
    const double C23903 =
        (C43475 + be * C43724 + C43341 * C43796 + ae * C43367 * C43785 +
         C43367 *
             (ae * C43785 +
              C43367 * (C43478 + be * C43341 * C43462 +
                        C43341 * (be * C43462 + C43341 * std::pow(C43270, 6) *
                                                    bs[6] * C43472)))) /
        C43129;
    const double C21869 =
        (3 * (C43348 + C43341 * C43660 + C43658 * be) +
         C43341 * (2 * C43660 + C43341 * C43785 + C43778 * be) +
         (2 * C43658 + C43341 * C43778) * be) /
        C43127;
    const double C22298 =
        (C43367 * (2 * C43660 + C43341 * C43785 + C43778 * be)) / C43127;
    const double C23665 =
        (C43348 + C43341 * C43660 + C43658 * be + C43785 * C43482) / C43127;
    const double C42857 =
        (3 * (C43374 + C43367 * C43748 + C43746 * be) +
         C43367 * (2 * C43748 + C43367 * C43885 + C43878 * be) +
         (2 * C43746 + C43367 * C43878) * be) /
        C43127;
    const double C22004 =
        (3 * (C43424 + ae * C43660 + be * C43661 + C43341 * C43775) +
         ae * (2 * C43660 + C43341 * C43785 + C43778 * be) +
         be * (2 * C43661 + C43341 * C43786 + C43778 * ae) +
         C43341 *
             (2 * C43775 + ae * C43785 + be * C43786 +
              C43341 * (C43429 + ae * C43776 + be * C43779 +
                        C43341 * (ae * C43360 + be * C43411 +
                                  C43341 *
                                      (C43309 * C43310 +
                                       C43419 * bs[6] * std::pow(C43270, 6)) *
                                      C43128)))) /
        C43129;
    const double C22466 =
        (2 * (ae * C43367 * C43353 + be * C43367 * C43404 + C43341 * C43805) +
         ae * C43367 * C43785 + be * C43367 * C43786 +
         C43341 * (C43805 + ae * C43367 * C43776 + be * C43367 * C43779 +
                   C43341 * (ae * C43367 * C43360 + be * C43367 * C43411 +
                             C43341 * C43367 *
                                 (C43309 * C43310 +
                                  C43419 * bs[6] * std::pow(C43270, 6)) *
                                 C43128))) /
        C43129;
    const double C21958 =
        (3 * (C43399 + C43341 * C43661 + C43658 * ae) +
         C43341 * (2 * C43661 + C43341 * C43786 + C43778 * ae) +
         (2 * C43658 + C43341 * C43778) * ae) /
        C43127;
    const double C22406 =
        (C43367 * (2 * C43661 + C43341 * C43786 + C43778 * ae)) / C43127;
    const double C23745 =
        (C43399 + C43341 * C43661 + C43658 * ae + C43786 * C43482) / C43127;
    const double C11212 = C1471 * C44312;
    const double C30622 = C1471 * C44312;
    const double C42955 = C42954 * C44138;
    const double C43117 =
        (3 * (C43487 + ae * C43748 + be * C43749 + C43367 * C43875) +
         ae * (2 * C43748 + C43367 * C43885 + C43878 * be) +
         be * (2 * C43749 + C43367 * C43886 + C43878 * ae) +
         C43367 *
             (2 * C43875 + ae * C43885 + be * C43886 +
              C43367 * (C43492 + ae * C43876 + be * C43879 +
                        C43367 * (ae * C43386 + be * C43462 +
                                  C43367 *
                                      (C43309 * C43310 +
                                       C43482 * bs[6] * std::pow(C43270, 6)) *
                                      C43128)))) /
        C43129;
    const double C43032 =
        (3 * (C43450 + C43367 * C43749 + C43746 * ae) +
         C43367 * (2 * C43749 + C43367 * C43886 + C43878 * ae) +
         (2 * C43746 + C43367 * C43878) * ae) /
        C43127;
    const double C1145 = C1143 * C44245;
    const double C4874 = C1143 * C44321;
    const double C15396 = C1143 * C44321;
    const double C1715 = C1713 * C44245;
    const double C43145 = C43125 * C43140;
    const double C88 =
        (ae * -2 * C43126) / (C43129 * 2 * C43127) -
        (((C43125 * ((-4 * C43132) / C43127 - (C43125 * C43140) / C43127) *
           ae) /
              C43127 +
          2 * ((C43139 * ae) / C43127 - C43126 / C43131)) *
         be) /
            C43127 -
        C43140 / C43131;
    const double C92 = (-C43140 / C43127) / (4 * C43129);
    const double C4414 = (-C43140 / C43127) / (2 * C43127);
    const double C14936 = (-C43140 / C43127) / (2 * C43127);
    const double C20064 = -C43140 / C43127;
    const double C4952 = C4411 * C635;
    const double C4950 = C4411 * C634;
    const double C4944 = C4411 * C637;
    const double C4942 = C4411 * C636;
    const double C5200 = C4411 * C827;
    const double C5196 = C4411 * C629;
    const double C5193 = C4411 * C826;
    const double C5189 = C4411 * C630;
    const double C5426 = C4411 * C1011;
    const double C5423 = C4411 * C1010;
    const double C6875 = C4411 * C2216;
    const double C6873 = C4411 * C2215;
    const double C7053 = C4411 * C2350;
    const double C7049 = C4411 * C2212;
    const double C7217 = C4411 * C2476;
    const double C7412 = C4411 * C2618;
    const double C7410 = C4411 * C2617;
    const double C7638 = C4411 * C2788;
    const double C7634 = C4411 * C2614;
    const double C7850 = C4411 * C2950;
    const double C10884 = C4411 * C1205;
    const double C10882 = C4411 * C1204;
    const double C10876 = C4411 * C1207;
    const double C10874 = C4411 * C1206;
    const double C11132 = C4411 * C1397;
    const double C11128 = C4411 * C1199;
    const double C11125 = C4411 * C1396;
    const double C11121 = C4411 * C1200;
    const double C11360 = C4411 * C1581;
    const double C11357 = C4411 * C1580;
    const double C14421 = C4411 * C4009;
    const double C14419 = C4411 * C4008;
    const double C14599 = C4411 * C4143;
    const double C14595 = C4411 * C4005;
    const double C14770 = C4411 * C4269;
    const double C15474 = C14933 * C635;
    const double C15472 = C14933 * C634;
    const double C15466 = C14933 * C637;
    const double C15464 = C14933 * C636;
    const double C15710 = C14933 * C827;
    const double C15706 = C14933 * C629;
    const double C15703 = C14933 * C826;
    const double C15699 = C14933 * C630;
    const double C15930 = C14933 * C1011;
    const double C15927 = C14933 * C1010;
    const double C17344 = C14933 * C2216;
    const double C17342 = C14933 * C2215;
    const double C17506 = C14933 * C2350;
    const double C17502 = C14933 * C2212;
    const double C17660 = C14933 * C2476;
    const double C17836 = C14933 * C2618;
    const double C17834 = C14933 * C2617;
    const double C18046 = C14933 * C2788;
    const double C18042 = C14933 * C2614;
    const double C18248 = C14933 * C2950;
    const double C30313 = C14933 * C1205;
    const double C30311 = C14933 * C1204;
    const double C30305 = C14933 * C1207;
    const double C30303 = C14933 * C1206;
    const double C30549 = C14933 * C1397;
    const double C30545 = C14933 * C1199;
    const double C30542 = C14933 * C1396;
    const double C30538 = C14933 * C1200;
    const double C30763 = C14933 * C1581;
    const double C30760 = C14933 * C1580;
    const double C33797 = C14933 * C4009;
    const double C33795 = C14933 * C4008;
    const double C33959 = C14933 * C4143;
    const double C33955 = C14933 * C4005;
    const double C34115 = C14933 * C4269;
    const double C22093 = C22088 + C22092;
    const double C42908 = C42906 + C42907;
    const double C43232 = C43157 * C43229;
    const double C20220 =
        (ae * -2 * C43217) / (C43129 * 2 * C43127) -
        (((C43157 * ((-4 * C43178) / C43127 - (C43157 * C43229) / C43127) *
           ae) /
              C43127 +
          2 * ((C43228 * ae) / C43127 - C43217 / C43131)) *
         be) /
            C43127 -
        C43229 / C43131;
    const double C20222 = (-C43229 / C43127) / (4 * C43129);
    const double C43262 = C43160 * C43259;
    const double C39644 =
        (ae * -2 * C43247) / (C43129 * 2 * C43127) -
        (((C43160 * ((-4 * C43190) / C43127 - (C43160 * C43259) / C43127) *
           ae) /
              C43127 +
          2 * ((C43258 * ae) / C43127 - C43247 / C43131)) *
         be) /
            C43127 -
        C43259 / C43131;
    const double C39646 = (-C43259 / C43127) / (4 * C43129);
    const double C5581 = C5580 * C44321;
    const double C16070 = C5580 * C44321;
    const double C6216 = C6215 * C44321;
    const double C16692 = C6215 * C44321;
    const double C12898 = C10523 * C44312;
    const double C32288 = C10523 * C44312;
    const double C14655 = C11218 * C44312;
    const double C34013 = C11218 * C44312;
    const double C40362 = C11218 * C44138;
    const double C27125 = C27123 + C27119;
    const double C37346 = C37344 + C37340;
    const double C28896 = C28894 + C28887;
    const double C39091 = C39089 + C39082;
    const double C41618 = C41617 + C41615;
    const double C90 =
        (((-4 * C43132) / C43127 - C43145 / C43127) * ae) / C43131 -
        ((2 * ((0 * ae) / C43127 - C43132 / C43129) - C43145 / C43131) * be) /
            C43127;
    const double C4412 =
        -(((-4 * C43132) / C43127 - C43145 / C43127) * be) / C43127;
    const double C14934 =
        (((-4 * C43132) / C43127 - C43145 / C43127) * ae) / C43127;
    const double C4955 = C4414 * C628;
    const double C4947 = C4414 * C629;
    const double C6870 = C4414 * C2213;
    const double C7407 = C4414 * C2615;
    const double C10887 = C4414 * C1198;
    const double C10879 = C4414 * C1199;
    const double C14416 = C4414 * C4006;
    const double C15477 = C14936 * C628;
    const double C15469 = C14936 * C629;
    const double C17339 = C14936 * C2213;
    const double C17831 = C14936 * C2615;
    const double C30316 = C14936 * C1198;
    const double C30308 = C14936 * C1199;
    const double C33792 = C14936 * C4006;
    const double C20439 = C20064 * C2213;
    const double C20435 = C20064 * C629;
    const double C20431 = C20064 * C2212;
    const double C20427 = C20064 * C630;
    const double C21825 = C20064 * C6860;
    const double C22238 = C20064 * C2614;
    const double C22234 = C20064 * C7397;
    const double C24464 = C20064 * C2615;
    const double C25102 = C20064 * C1199;
    const double C25098 = C20064 * C1200;
    const double C26816 = C20064 * C9234;
    const double C28659 = C20064 * C4005;
    const double C40149 = C20064 * C4006;
    const double C42765 = C20064 * C14406;
    const double C20221 =
        (((-4 * C43178) / C43127 - C43232 / C43127) * ae) / C43131 -
        ((2 * ((0 * ae) / C43127 - C43178 / C43129) - C43232 / C43131) * be) /
            C43127;
    const double C39645 =
        (((-4 * C43190) / C43127 - C43262 / C43127) * ae) / C43131 -
        ((2 * ((0 * ae) / C43127 - C43190 / C43129) - C43262 / C43131) * be) /
            C43127;
    const double C41619 = C41618 * C44138;
    const double C4951 = C4412 * C629;
    const double C4943 = C4412 * C630;
    const double C6874 = C4412 * C2212;
    const double C7411 = C4412 * C2614;
    const double C10883 = C4412 * C1199;
    const double C10875 = C4412 * C1200;
    const double C14420 = C4412 * C4005;
    const double C15473 = C14934 * C629;
    const double C15465 = C14934 * C630;
    const double C17343 = C14934 * C2212;
    const double C17835 = C14934 * C2614;
    const double C30312 = C14934 * C1199;
    const double C30304 = C14934 * C1200;
    const double C33796 = C14934 * C4005;
    const double C4961 = C4954 - C4955;
    const double C4959 = C4946 - C4947;
    const double C6877 = C6869 - C6870;
    const double C7414 = C7406 - C7407;
    const double C10893 = C10886 - C10887;
    const double C10891 = C10878 - C10879;
    const double C14423 = C14415 - C14416;
    const double C15483 = C15476 - C15477;
    const double C15481 = C15468 - C15469;
    const double C17346 = C17338 - C17339;
    const double C17838 = C17830 - C17831;
    const double C30322 = C30315 - C30316;
    const double C30320 = C30307 - C30308;
    const double C33799 = C33791 - C33792;
    const double C20445 = C20438 - C20439;
    const double C20444 = C20434 - C20435;
    const double C20443 = C20430 - C20431;
    const double C20442 = C20426 - C20427;
    const double C21828 = C21824 - C21825;
    const double C22242 = C22237 - C22238;
    const double C22241 = C22233 - C22234;
    const double C24467 = C24463 - C24464;
    const double C25106 = C25101 - C25102;
    const double C25105 = C25097 - C25098;
    const double C26820 = C26815 - C26816;
    const double C28662 = C28658 - C28659;
    const double C40152 = C40148 - C40149;
    const double C42768 = C42764 - C42765;
    const double C4960 = C4950 - C4951;
    const double C4958 = C4942 - C4943;
    const double C6878 = C6873 - C6874;
    const double C7415 = C7410 - C7411;
    const double C10892 = C10882 - C10883;
    const double C10890 = C10874 - C10875;
    const double C14424 = C14419 - C14420;
    const double C15482 = C15472 - C15473;
    const double C15480 = C15464 - C15465;
    const double C17347 = C17342 - C17343;
    const double C17839 = C17834 - C17835;
    const double C30321 = C30311 - C30312;
    const double C30319 = C30303 - C30304;
    const double C33800 = C33795 - C33796;
    const double C4965 = C4961 - C4956;
    const double C4963 = C4959 - C4948;
    const double C6879 = C6877 - C6871;
    const double C7416 = C7414 - C7408;
    const double C10897 = C10893 - C10888;
    const double C10895 = C10891 - C10880;
    const double C14425 = C14423 - C14417;
    const double C15487 = C15483 - C15478;
    const double C15485 = C15481 - C15470;
    const double C17348 = C17346 - C17340;
    const double C17840 = C17838 - C17832;
    const double C30326 = C30322 - C30317;
    const double C30324 = C30320 - C30309;
    const double C33801 = C33799 - C33793;
    const double C20449 = C20445 - C20440;
    const double C20448 = C20444 - C20436;
    const double C20447 = C20443 - C20432;
    const double C20446 = C20442 - C20428;
    const double C21829 = C21828 - C21826;
    const double C22244 = C22242 - C22239;
    const double C22243 = C22241 - C22235;
    const double C24468 = C24467 - C24465;
    const double C25108 = C25106 - C25103;
    const double C25107 = C25105 - C25099;
    const double C26821 = C26820 - C26817;
    const double C28663 = C28662 - C28660;
    const double C40153 = C40152 - C40150;
    const double C42769 = C42768 - C42766;
    const double C4964 = C4960 - C4952;
    const double C4962 = C4958 - C4944;
    const double C6880 = C6878 - C6875;
    const double C7417 = C7415 - C7412;
    const double C10896 = C10892 - C10884;
    const double C10894 = C10890 - C10876;
    const double C14426 = C14424 - C14421;
    const double C15486 = C15482 - C15474;
    const double C15484 = C15480 - C15466;
    const double C17349 = C17347 - C17344;
    const double C17841 = C17839 - C17836;
    const double C30325 = C30321 - C30313;
    const double C30323 = C30319 - C30305;
    const double C33802 = C33800 - C33797;
    const double C4969 = C4965 + C4957;
    const double C4967 = C4963 + C4949;
    const double C6881 = C6879 + C6872;
    const double C7418 = C7416 + C7409;
    const double C10901 = C10897 + C10889;
    const double C10899 = C10895 + C10881;
    const double C14427 = C14425 + C14418;
    const double C15491 = C15487 + C15479;
    const double C15489 = C15485 + C15471;
    const double C17350 = C17348 + C17341;
    const double C17842 = C17840 + C17833;
    const double C30330 = C30326 + C30318;
    const double C30328 = C30324 + C30310;
    const double C33803 = C33801 + C33794;
    const double C20453 = C20449 + C20441;
    const double C20452 = C20448 + C20437;
    const double C20451 = C20447 + C20433;
    const double C20450 = C20446 + C20429;
    const double C21830 = C21829 + C21827;
    const double C22246 = C22244 + C22240;
    const double C22245 = C22243 + C22236;
    const double C24469 = C24468 + C24466;
    const double C25110 = C25108 + C25104;
    const double C25109 = C25107 + C25100;
    const double C26822 = C26821 + C26818;
    const double C28664 = C28663 + C28661;
    const double C40154 = C40153 + C40151;
    const double C42770 = C42769 + C42767;
    const double C4968 = C4964 + C4953;
    const double C4966 = C4962 + C4945;
    const double C6882 = C6880 + C6876;
    const double C7419 = C7417 + C7413;
    const double C10900 = C10896 + C10885;
    const double C10898 = C10894 + C10877;
    const double C14428 = C14426 + C14422;
    const double C15490 = C15486 + C15475;
    const double C15488 = C15484 + C15467;
    const double C17351 = C17349 + C17345;
    const double C17843 = C17841 + C17837;
    const double C30329 = C30325 + C30314;
    const double C30327 = C30323 + C30306;
    const double C33804 = C33802 + C33798;
    const double C20457 = C20453 * C44260;
    const double C20456 = C20452 * C44260;
    const double C24462 = C20452 * C9716;
    const double C34737 = C20452 * C29158;
    const double C20455 = C20451 * C44260;
    const double C26322 = C20451 * C9716;
    const double C36558 = C20451 * C29158;
    const double C20454 = C20450 * C44260;
    const double C24460 = C20450 * C9716;
    const double C34735 = C20450 * C29158;
    const double C21831 = C21830 * C44260;
    const double C22248 = C22246 * C44260;
    const double C24461 = C22246 * C44323;
    const double C26819 = C22246 * C9716;
    const double C34736 = C22246 * C44323;
    const double C37052 = C22246 * C29158;
    const double C22247 = C22245 * C44260;
    const double C26321 = C22245 * C44323;
    const double C36557 = C22245 * C44323;
    const double C24470 = C24469 * C44323;
    const double C34738 = C24469 * C44323;
    const double C26823 = C26822 * C44323;
    const double C37051 = C26822 * C44323;
    
    d2eexx[0] += (2 * std::pow(Pi, 2.5) *
                  ((C87 * C98 - C88 * C93 - C87 * C99 + C77 * C108 +
                    C89 * C100 - C90 * C94 - C89 * C101 + C78 * C109 +
                    C91 * C102 - C92 * C95 - C91 * C103 + C79 * C110) *
                       C44260 * C44245 * C44212 * C44195 * C84 -
                   (C91 * C104 - C92 * C96 - C91 * C105 + C79 * C111 +
                    C89 * C102 - C90 * C95 - C89 * C103 + C78 * C110 +
                    C87 * C100 - C88 * C94 - C87 * C101 + C77 * C109) *
                       C44260 * C44245 * C44212 * C44195 * C85 +
                   (C87 * C102 - C88 * C95 - C87 * C103 + C77 * C110 +
                    C89 * C104 - C90 * C96 - C89 * C105 + C78 * C111 +
                    C91 * C106 - C92 * C97 - C91 * C107 + C79 * C112) *
                       C44260 * C44245 * C44212 * C44195 * C86)) /
                 (p * q * std::sqrt(p + q));
    d2eexy[0] +=
        (2 * std::pow(Pi, 2.5) *
         (((C44245 * C152 - C151 * C93) * C87 +
           (C44245 * C157 - C151 * C99) * C77 + (C163 - C164) * C89 +
           (C165 - C166) * C78 + C175 * C91 + C176 * C79) *
              C44260 * C44212 * C44195 * C84 +
          ((C164 - C163) * C87 + (C166 - C165) * C77 + (C168 - C167) * C89 +
           (C170 - C169) * C78 + (C171 - C172) * C91 + (C173 - C174) * C79) *
              C44260 * C44212 * C44195 * C85 +
          (C175 * C87 + C176 * C77 + (C172 - C171) * C89 + (C174 - C173) * C78 +
           (C44245 * C156 - C151 * C97) * C91 +
           (C44245 * C161 - C151 * C107) * C79) *
              C44260 * C44212 * C44195 * C86)) /
        (p * q * std::sqrt(p + q));
    d2eexz[0] +=
        (2 * std::pow(Pi, 2.5) *
         (((C44260 * C215 - C214 * C93) * C87 +
           (C44260 * C220 - C214 * C99) * C77 + (C226 - C227) * C89 +
           (C228 - C229) * C78 + C238 * C91 + C239 * C79) *
              C44245 * C44212 * C44195 * C84 +
          ((C227 - C226) * C87 + (C229 - C228) * C77 + (C231 - C230) * C89 +
           (C233 - C232) * C78 + (C234 - C235) * C91 + (C236 - C237) * C79) *
              C44245 * C44212 * C44195 * C85 +
          (C238 * C87 + C239 * C77 + (C235 - C234) * C89 + (C237 - C236) * C78 +
           (C44260 * C219 - C214 * C97) * C91 +
           (C44260 * C224 - C214 * C107) * C79) *
              C44245 * C44212 * C44195 * C86)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[0] += (2 * std::pow(Pi, 2.5) *
                  (((C77 * C98 - C87 * C93 + C78 * C100 - C89 * C94 +
                     C79 * C102 - C91 * C95) *
                        C151 +
                    (C77 * C282 - C87 * C277 + C78 * C283 - C89 * C278 +
                     C79 * C284 - C91 * C279) *
                        C44245) *
                       C44260 * C44212 * C44195 * C84 +
                   ((C87 * C94 - C77 * C100 + C89 * C95 - C78 * C102 +
                     C91 * C96 - C79 * C104) *
                        C151 +
                    (C87 * C278 - C77 * C283 + C89 * C279 - C78 * C284 +
                     C91 * C280 - C79 * C285) *
                        C44245) *
                       C44260 * C44212 * C44195 * C85 +
                   ((C77 * C102 - C87 * C95 + C78 * C104 - C89 * C96 +
                     C79 * C106 - C91 * C97) *
                        C151 +
                    (C77 * C284 - C87 * C279 + C78 * C285 - C89 * C280 +
                     C79 * C286 - C91 * C281) *
                        C44245) *
                       C44260 * C44212 * C44195 * C86)) /
                 (p * q * std::sqrt(p + q));
    d2eeyy[0] +=
        (2 * std::pow(Pi, 2.5) *
         (((C151 * C152 - C325 * C93 - C151 * C277 + C44245 * C326) * C77 +
           C350 * C78 + C351 * C79) *
              C44260 * C44212 * C44195 * C84 -
          (C352 * C79 + C351 * C78 + C350 * C77) * C44260 * C44212 * C44195 *
              C85 +
          (C351 * C77 + C352 * C78 +
           (C151 * C156 - C325 * C97 - C151 * C281 + C44245 * C330) * C79) *
              C44260 * C44212 * C44195 * C86)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[0] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C44260 * C215 - C214 * C93) * C151 +
            (C44260 * C390 - C214 * C277) * C44245) *
               C77 +
           ((C226 - C227) * C151 + (C396 - C397) * C44245) * C78 + C405 * C79) *
              C44212 * C44195 * C84 +
          (((C227 - C226) * C151 + (C397 - C396) * C44245) * C77 +
           ((C231 - C230) * C151 + (C400 - C399) * C44245) * C78 +
           ((C234 - C235) * C151 + (C401 - C402) * C44245) * C79) *
              C44212 * C44195 * C85 +
          (C405 * C77 + ((C235 - C234) * C151 + (C402 - C401) * C44245) * C78 +
           ((C44260 * C219 - C214 * C97) * C151 +
            (C44260 * C394 - C214 * C281) * C44245) *
               C79) *
              C44212 * C44195 * C86)) /
        (p * q * std::sqrt(p + q));
    d2eezx[0] += (2 * std::pow(Pi, 2.5) *
                  (((C77 * C98 - C87 * C93 + C78 * C100 - C89 * C94 +
                     C79 * C102 - C91 * C95) *
                        C214 +
                    (C77 * C448 - C87 * C443 + C78 * C449 - C89 * C444 +
                     C79 * C450 - C91 * C445) *
                        C44260) *
                       C44245 * C44212 * C44195 * C84 +
                   ((C87 * C94 - C77 * C100 + C89 * C95 - C78 * C102 +
                     C91 * C96 - C79 * C104) *
                        C214 +
                    (C87 * C444 - C77 * C449 + C89 * C445 - C78 * C450 +
                     C91 * C446 - C79 * C451) *
                        C44260) *
                       C44245 * C44212 * C44195 * C85 +
                   ((C77 * C102 - C87 * C95 + C78 * C104 - C89 * C96 +
                     C79 * C106 - C91 * C97) *
                        C214 +
                    (C77 * C450 - C87 * C445 + C78 * C451 - C89 * C446 +
                     C79 * C452 - C91 * C447) *
                        C44260) *
                       C44245 * C44212 * C44195 * C86)) /
                 (p * q * std::sqrt(p + q));
    d2eezy[0] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C44245 * C152 - C151 * C93) * C214 +
            (C44245 * C491 - C151 * C443) * C44260) *
               C77 +
           ((C163 - C164) * C214 + (C497 - C498) * C44260) * C78 + C506 * C79) *
              C44212 * C44195 * C84 +
          (((C164 - C163) * C214 + (C498 - C497) * C44260) * C77 +
           ((C168 - C167) * C214 + (C501 - C500) * C44260) * C78 +
           ((C171 - C172) * C214 + (C502 - C503) * C44260) * C79) *
              C44212 * C44195 * C85 +
          (C506 * C77 + ((C172 - C171) * C214 + (C503 - C502) * C44260) * C78 +
           ((C44245 * C156 - C151 * C97) * C214 +
            (C44245 * C495 - C151 * C447) * C44260) *
               C79) *
              C44212 * C44195 * C86)) /
        (p * q * std::sqrt(p + q));
    d2eezz[0] +=
        (2 * std::pow(Pi, 2.5) *
         (((C214 * C215 - C544 * C93 - C214 * C443 + C44260 * C545) * C44245 *
               C77 +
           C572 * C78 + C573 * C79) *
              C44212 * C44195 * C84 -
          (C574 * C79 + C573 * C78 + C572 * C77) * C44212 * C44195 * C85 +
          (C573 * C77 + C574 * C78 +
           (C214 * C219 - C544 * C97 - C214 * C447 + C44260 * C549) * C44245 *
               C79) *
              C44212 * C44195 * C86)) /
        (p * q * std::sqrt(p + q));
    d2eexx[1] += (2 * std::pow(Pi, 2.5) *
                  (((C87 * C98 - C88 * C93 - C87 * C99 + C77 * C108 +
                     C89 * C100 - C90 * C94 - C89 * C101 + C78 * C109 +
                     C91 * C102 - C92 * C95 - C91 * C103 + C79 * C110) *
                        C44260 * C44245 * C44212 * C624 -
                    (C91 * C632 - C92 * C628 - C91 * C633 + C79 * C640 +
                     C89 * C634 - C90 * C629 - C89 * C635 + C78 * C641 +
                     C87 * C636 - C88 * C630 - C87 * C637 + C77 * C642) *
                        C44260 * C44245 * C44212 * C44317) *
                       C626 +
                   ((C87 * C634 - C88 * C629 - C87 * C635 + C77 * C641 +
                     C89 * C632 - C90 * C628 - C89 * C633 + C78 * C640 +
                     C91 * C638 - C92 * C631 - C91 * C639 + C79 * C643) *
                        C44260 * C44245 * C44212 * C44317 -
                    (C91 * C104 - C92 * C96 - C91 * C105 + C79 * C111 +
                     C89 * C102 - C90 * C95 - C89 * C103 + C78 * C110 +
                     C87 * C100 - C88 * C94 - C87 * C101 + C77 * C109) *
                        C44260 * C44245 * C44212 * C624) *
                       C44315)) /
                 (p * q * std::sqrt(p + q));
    d2eexy[1] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C44245 * C152 - C151 * C93) * C87 +
            (C44245 * C157 - C151 * C99) * C77 + (C163 - C164) * C89 +
            (C165 - C166) * C78 + C175 * C91 + C176 * C79) *
               C44260 * C44212 * C624 +
           ((C151 * C630 - C44245 * C694) * C87 +
            (C151 * C637 - C44245 * C698) * C77 + (C703 - C704) * C89 +
            (C705 - C706) * C78 + (C707 - C708) * C91 + (C709 - C710) * C79) *
               C44260 * C44212 * C44317) *
              C626 +
          (((C164 - C163) * C87 + (C166 - C165) * C77 + (C168 - C167) * C89 +
            (C170 - C169) * C78 + (C171 - C172) * C91 + (C173 - C174) * C79) *
               C44260 * C44212 * C624 +
           ((C704 - C703) * C87 + (C706 - C705) * C77 + (C708 - C707) * C89 +
            (C710 - C709) * C78 + (C44245 * C697 - C151 * C631) * C91 +
            (C44245 * C701 - C151 * C639) * C79) *
               C44260 * C44212 * C44317) *
              C44315)) /
        (p * q * std::sqrt(p + q));
    d2eexz[1] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C44260 * C215 - C214 * C93) * C87 +
            (C44260 * C220 - C214 * C99) * C77 + (C226 - C227) * C89 +
            (C228 - C229) * C78 + C238 * C91 + C239 * C79) *
               C44245 * C44212 * C624 +
           ((C214 * C630 - C44260 * C760) * C87 +
            (C214 * C637 - C44260 * C764) * C77 + (C769 - C770) * C89 +
            (C771 - C772) * C78 + (C773 - C774) * C91 + (C775 - C776) * C79) *
               C44245 * C44212 * C44317) *
              C626 +
          (((C227 - C226) * C87 + (C229 - C228) * C77 + (C231 - C230) * C89 +
            (C233 - C232) * C78 + (C234 - C235) * C91 + (C236 - C237) * C79) *
               C44245 * C44212 * C624 +
           ((C770 - C769) * C87 + (C772 - C771) * C77 + (C774 - C773) * C89 +
            (C776 - C775) * C78 + (C44260 * C763 - C214 * C631) * C91 +
            (C44260 * C767 - C214 * C639) * C79) *
               C44245 * C44212 * C44317) *
              C44315)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[1] += (2 * std::pow(Pi, 2.5) *
                  ((((C77 * C98 - C87 * C93 + C78 * C100 - C89 * C94 +
                      C79 * C102 - C91 * C95) *
                         C151 +
                     (C77 * C282 - C87 * C277 + C78 * C283 - C89 * C278 +
                      C79 * C284 - C91 * C279) *
                         C44245) *
                        C44260 * C44212 * C624 +
                    ((C87 * C630 - C77 * C636 + C89 * C629 - C78 * C634 +
                      C91 * C628 - C79 * C632) *
                         C151 +
                     (C87 * C826 - C77 * C830 + C89 * C827 - C78 * C831 +
                      C91 * C828 - C79 * C832) *
                         C44245) *
                        C44260 * C44212 * C44317) *
                       C626 +
                   (((C87 * C94 - C77 * C100 + C89 * C95 - C78 * C102 +
                      C91 * C96 - C79 * C104) *
                         C151 +
                     (C87 * C278 - C77 * C283 + C89 * C279 - C78 * C284 +
                      C91 * C280 - C79 * C285) *
                         C44245) *
                        C44260 * C44212 * C624 +
                    ((C77 * C634 - C87 * C629 + C78 * C632 - C89 * C628 +
                      C79 * C638 - C91 * C631) *
                         C151 +
                     (C77 * C831 - C87 * C827 + C78 * C832 - C89 * C828 +
                      C79 * C833 - C91 * C829) *
                         C44245) *
                        C44260 * C44212 * C44317) *
                       C44315)) /
                 (p * q * std::sqrt(p + q));
    d2eeyy[1] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C151 * C152 - C325 * C93 - C151 * C277 + C44245 * C326) * C77 +
            C350 * C78 + C351 * C79) *
               C44260 * C44212 * C624 -
           (C901 * C79 + C902 * C78 +
            (C151 * C694 - C325 * C630 - C151 * C826 + C44245 * C886) * C77) *
               C44260 * C44212 * C44317) *
              C626 +
          ((C902 * C77 + C901 * C78 +
            (C151 * C697 - C325 * C631 - C151 * C829 + C44245 * C887) * C79) *
               C44260 * C44212 * C44317 -
           (C352 * C79 + C351 * C78 + C350 * C77) * C44260 * C44212 * C624) *
              C44315)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[1] += (2 * std::pow(Pi, 2.5) *
                  (((((C44260 * C215 - C214 * C93) * C151 +
                      (C44260 * C390 - C214 * C277) * C44245) *
                         C77 +
                     ((C226 - C227) * C151 + (C396 - C397) * C44245) * C78 +
                     C405 * C79) *
                        C44212 * C624 +
                    (((C214 * C630 - C44260 * C760) * C151 +
                      (C214 * C826 - C44260 * C952) * C44245) *
                         C77 +
                     ((C769 - C770) * C151 + (C957 - C958) * C44245) * C78 +
                     ((C773 - C774) * C151 + (C959 - C960) * C44245) * C79) *
                        C44212 * C44317) *
                       C626 +
                   ((((C227 - C226) * C151 + (C397 - C396) * C44245) * C77 +
                     ((C231 - C230) * C151 + (C400 - C399) * C44245) * C78 +
                     ((C234 - C235) * C151 + (C401 - C402) * C44245) * C79) *
                        C44212 * C624 +
                    (((C770 - C769) * C151 + (C958 - C957) * C44245) * C77 +
                     ((C774 - C773) * C151 + (C960 - C959) * C44245) * C78 +
                     ((C44260 * C763 - C214 * C631) * C151 +
                      (C44260 * C955 - C214 * C829) * C44245) *
                         C79) *
                        C44212 * C44317) *
                       C44315)) /
                 (p * q * std::sqrt(p + q));
    d2eezx[1] += (2 * std::pow(Pi, 2.5) *
                  ((((C77 * C98 - C87 * C93 + C78 * C100 - C89 * C94 +
                      C79 * C102 - C91 * C95) *
                         C214 +
                     (C77 * C448 - C87 * C443 + C78 * C449 - C89 * C444 +
                      C79 * C450 - C91 * C445) *
                         C44260) *
                        C44245 * C44212 * C624 +
                    ((C87 * C630 - C77 * C636 + C89 * C629 - C78 * C634 +
                      C91 * C628 - C79 * C632) *
                         C214 +
                     (C87 * C1010 - C77 * C1014 + C89 * C1011 - C78 * C1015 +
                      C91 * C1012 - C79 * C1016) *
                         C44260) *
                        C44245 * C44212 * C44317) *
                       C626 +
                   (((C87 * C94 - C77 * C100 + C89 * C95 - C78 * C102 +
                      C91 * C96 - C79 * C104) *
                         C214 +
                     (C87 * C444 - C77 * C449 + C89 * C445 - C78 * C450 +
                      C91 * C446 - C79 * C451) *
                         C44260) *
                        C44245 * C44212 * C624 +
                    ((C77 * C634 - C87 * C629 + C78 * C632 - C89 * C628 +
                      C79 * C638 - C91 * C631) *
                         C214 +
                     (C77 * C1015 - C87 * C1011 + C78 * C1016 - C89 * C1012 +
                      C79 * C1017 - C91 * C1013) *
                         C44260) *
                        C44245 * C44212 * C44317) *
                       C44315)) /
                 (p * q * std::sqrt(p + q));
    d2eezy[1] += (2 * std::pow(Pi, 2.5) *
                  (((((C44245 * C152 - C151 * C93) * C214 +
                      (C44245 * C491 - C151 * C443) * C44260) *
                         C77 +
                     ((C163 - C164) * C214 + (C497 - C498) * C44260) * C78 +
                     C506 * C79) *
                        C44212 * C624 +
                    (((C151 * C630 - C44245 * C694) * C214 +
                      (C151 * C1010 - C44245 * C1068) * C44260) *
                         C77 +
                     ((C703 - C704) * C214 + (C1073 - C1074) * C44260) * C78 +
                     ((C707 - C708) * C214 + (C1075 - C1076) * C44260) * C79) *
                        C44212 * C44317) *
                       C626 +
                   ((((C164 - C163) * C214 + (C498 - C497) * C44260) * C77 +
                     ((C168 - C167) * C214 + (C501 - C500) * C44260) * C78 +
                     ((C171 - C172) * C214 + (C502 - C503) * C44260) * C79) *
                        C44212 * C624 +
                    (((C704 - C703) * C214 + (C1074 - C1073) * C44260) * C77 +
                     ((C708 - C707) * C214 + (C1076 - C1075) * C44260) * C78 +
                     ((C44245 * C697 - C151 * C631) * C214 +
                      (C44245 * C1071 - C151 * C1013) * C44260) *
                         C79) *
                        C44212 * C44317) *
                       C44315)) /
                 (p * q * std::sqrt(p + q));
    d2eezz[1] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C214 * C215 - C544 * C93 - C214 * C443 + C44260 * C545) * C44245 *
                C77 +
            C572 * C78 + C573 * C79) *
               C44212 * C624 -
           (C1145 * C79 + C1146 * C78 +
            (C214 * C760 - C544 * C630 - C214 * C1010 + C44260 * C1128) *
                C44245 * C77) *
               C44212 * C44317) *
              C626 +
          ((C1146 * C77 + C1145 * C78 +
            (C214 * C763 - C544 * C631 - C214 * C1013 + C44260 * C1129) *
                C44245 * C79) *
               C44212 * C44317 -
           (C574 * C79 + C573 * C78 + C572 * C77) * C44212 * C624) *
              C44315)) /
        (p * q * std::sqrt(p + q));
    d2eexx[2] += (2 * std::pow(Pi, 2.5) *
                  (((C87 * C98 - C88 * C93 - C87 * C99 + C77 * C108 +
                     C89 * C100 - C90 * C94 - C89 * C101 + C78 * C109 +
                     C91 * C102 - C92 * C95 - C91 * C103 + C79 * C110) *
                        C44260 * C44245 * C1196 -
                    (C91 * C1202 - C92 * C1198 - C91 * C1203 + C79 * C1210 +
                     C89 * C1204 - C90 * C1199 - C89 * C1205 + C78 * C1211 +
                     C87 * C1206 - C88 * C1200 - C87 * C1207 + C77 * C1212) *
                        C44260 * C44245 * C44319) *
                       C44195 * C626 +
                   ((C87 * C1204 - C88 * C1199 - C87 * C1205 + C77 * C1211 +
                     C89 * C1202 - C90 * C1198 - C89 * C1203 + C78 * C1210 +
                     C91 * C1208 - C92 * C1201 - C91 * C1209 + C79 * C1213) *
                        C44260 * C44245 * C44319 -
                    (C91 * C104 - C92 * C96 - C91 * C105 + C79 * C111 +
                     C89 * C102 - C90 * C95 - C89 * C103 + C78 * C110 +
                     C87 * C100 - C88 * C94 - C87 * C101 + C77 * C109) *
                        C44260 * C44245 * C1196) *
                       C44195 * C44315)) /
                 (p * q * std::sqrt(p + q));
    d2eexy[2] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C44245 * C152 - C151 * C93) * C87 +
            (C44245 * C157 - C151 * C99) * C77 + (C163 - C164) * C89 +
            (C165 - C166) * C78 + C175 * C91 + C176 * C79) *
               C44260 * C1196 +
           ((C151 * C1200 - C44245 * C1264) * C87 +
            (C151 * C1207 - C44245 * C1268) * C77 + (C1273 - C1274) * C89 +
            (C1275 - C1276) * C78 + (C1277 - C1278) * C91 +
            (C1279 - C1280) * C79) *
               C44260 * C44319) *
              C44195 * C626 +
          (((C164 - C163) * C87 + (C166 - C165) * C77 + (C168 - C167) * C89 +
            (C170 - C169) * C78 + (C171 - C172) * C91 + (C173 - C174) * C79) *
               C44260 * C1196 +
           ((C1274 - C1273) * C87 + (C1276 - C1275) * C77 +
            (C1278 - C1277) * C89 + (C1280 - C1279) * C78 +
            (C44245 * C1267 - C151 * C1201) * C91 +
            (C44245 * C1271 - C151 * C1209) * C79) *
               C44260 * C44319) *
              C44195 * C44315)) /
        (p * q * std::sqrt(p + q));
    d2eexz[2] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C44260 * C215 - C214 * C93) * C87 +
            (C44260 * C220 - C214 * C99) * C77 + (C226 - C227) * C89 +
            (C228 - C229) * C78 + C238 * C91 + C239 * C79) *
               C44245 * C1196 +
           ((C214 * C1200 - C44260 * C1330) * C87 +
            (C214 * C1207 - C44260 * C1334) * C77 + (C1339 - C1340) * C89 +
            (C1341 - C1342) * C78 + (C1343 - C1344) * C91 +
            (C1345 - C1346) * C79) *
               C44245 * C44319) *
              C44195 * C626 +
          (((C227 - C226) * C87 + (C229 - C228) * C77 + (C231 - C230) * C89 +
            (C233 - C232) * C78 + (C234 - C235) * C91 + (C236 - C237) * C79) *
               C44245 * C1196 +
           ((C1340 - C1339) * C87 + (C1342 - C1341) * C77 +
            (C1344 - C1343) * C89 + (C1346 - C1345) * C78 +
            (C44260 * C1333 - C214 * C1201) * C91 +
            (C44260 * C1337 - C214 * C1209) * C79) *
               C44245 * C44319) *
              C44195 * C44315)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[2] += (2 * std::pow(Pi, 2.5) *
                  ((((C77 * C98 - C87 * C93 + C78 * C100 - C89 * C94 +
                      C79 * C102 - C91 * C95) *
                         C151 +
                     (C77 * C282 - C87 * C277 + C78 * C283 - C89 * C278 +
                      C79 * C284 - C91 * C279) *
                         C44245) *
                        C44260 * C1196 +
                    ((C87 * C1200 - C77 * C1206 + C89 * C1199 - C78 * C1204 +
                      C91 * C1198 - C79 * C1202) *
                         C151 +
                     (C87 * C1396 - C77 * C1400 + C89 * C1397 - C78 * C1401 +
                      C91 * C1398 - C79 * C1402) *
                         C44245) *
                        C44260 * C44319) *
                       C44195 * C626 +
                   (((C87 * C94 - C77 * C100 + C89 * C95 - C78 * C102 +
                      C91 * C96 - C79 * C104) *
                         C151 +
                     (C87 * C278 - C77 * C283 + C89 * C279 - C78 * C284 +
                      C91 * C280 - C79 * C285) *
                         C44245) *
                        C44260 * C1196 +
                    ((C77 * C1204 - C87 * C1199 + C78 * C1202 - C89 * C1198 +
                      C79 * C1208 - C91 * C1201) *
                         C151 +
                     (C77 * C1401 - C87 * C1397 + C78 * C1402 - C89 * C1398 +
                      C79 * C1403 - C91 * C1399) *
                         C44245) *
                        C44260 * C44319) *
                       C44195 * C44315)) /
                 (p * q * std::sqrt(p + q));
    d2eeyy[2] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C151 * C152 - C325 * C93 - C151 * C277 + C44245 * C326) * C77 +
            C350 * C78 + C351 * C79) *
               C44260 * C1196 -
           (C1471 * C79 + C1472 * C78 +
            (C151 * C1264 - C325 * C1200 - C151 * C1396 + C44245 * C1456) *
                C77) *
               C44260 * C44319) *
              C44195 * C626 +
          ((C1472 * C77 + C1471 * C78 +
            (C151 * C1267 - C325 * C1201 - C151 * C1399 + C44245 * C1457) *
                C79) *
               C44260 * C44319 -
           (C352 * C79 + C351 * C78 + C350 * C77) * C44260 * C1196) *
              C44195 * C44315)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[2] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C44260 * C215 - C214 * C93) * C151 +
             (C44260 * C390 - C214 * C277) * C44245) *
                C77 +
            ((C226 - C227) * C151 + (C396 - C397) * C44245) * C78 +
            C405 * C79) *
               C1196 +
           (((C214 * C1200 - C44260 * C1330) * C151 +
             (C214 * C1396 - C44260 * C1522) * C44245) *
                C77 +
            ((C1339 - C1340) * C151 + (C1527 - C1528) * C44245) * C78 +
            ((C1343 - C1344) * C151 + (C1529 - C1530) * C44245) * C79) *
               C44319) *
              C44195 * C626 +
          ((((C227 - C226) * C151 + (C397 - C396) * C44245) * C77 +
            ((C231 - C230) * C151 + (C400 - C399) * C44245) * C78 +
            ((C234 - C235) * C151 + (C401 - C402) * C44245) * C79) *
               C1196 +
           (((C1340 - C1339) * C151 + (C1528 - C1527) * C44245) * C77 +
            ((C1344 - C1343) * C151 + (C1530 - C1529) * C44245) * C78 +
            ((C44260 * C1333 - C214 * C1201) * C151 +
             (C44260 * C1525 - C214 * C1399) * C44245) *
                C79) *
               C44319) *
              C44195 * C44315)) /
        (p * q * std::sqrt(p + q));
    d2eezx[2] += (2 * std::pow(Pi, 2.5) *
                  ((((C77 * C98 - C87 * C93 + C78 * C100 - C89 * C94 +
                      C79 * C102 - C91 * C95) *
                         C214 +
                     (C77 * C448 - C87 * C443 + C78 * C449 - C89 * C444 +
                      C79 * C450 - C91 * C445) *
                         C44260) *
                        C44245 * C1196 +
                    ((C87 * C1200 - C77 * C1206 + C89 * C1199 - C78 * C1204 +
                      C91 * C1198 - C79 * C1202) *
                         C214 +
                     (C87 * C1580 - C77 * C1584 + C89 * C1581 - C78 * C1585 +
                      C91 * C1582 - C79 * C1586) *
                         C44260) *
                        C44245 * C44319) *
                       C44195 * C626 +
                   (((C87 * C94 - C77 * C100 + C89 * C95 - C78 * C102 +
                      C91 * C96 - C79 * C104) *
                         C214 +
                     (C87 * C444 - C77 * C449 + C89 * C445 - C78 * C450 +
                      C91 * C446 - C79 * C451) *
                         C44260) *
                        C44245 * C1196 +
                    ((C77 * C1204 - C87 * C1199 + C78 * C1202 - C89 * C1198 +
                      C79 * C1208 - C91 * C1201) *
                         C214 +
                     (C77 * C1585 - C87 * C1581 + C78 * C1586 - C89 * C1582 +
                      C79 * C1587 - C91 * C1583) *
                         C44260) *
                        C44245 * C44319) *
                       C44195 * C44315)) /
                 (p * q * std::sqrt(p + q));
    d2eezy[2] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C44245 * C152 - C151 * C93) * C214 +
             (C44245 * C491 - C151 * C443) * C44260) *
                C77 +
            ((C163 - C164) * C214 + (C497 - C498) * C44260) * C78 +
            C506 * C79) *
               C1196 +
           (((C151 * C1200 - C44245 * C1264) * C214 +
             (C151 * C1580 - C44245 * C1638) * C44260) *
                C77 +
            ((C1273 - C1274) * C214 + (C1643 - C1644) * C44260) * C78 +
            ((C1277 - C1278) * C214 + (C1645 - C1646) * C44260) * C79) *
               C44319) *
              C44195 * C626 +
          ((((C164 - C163) * C214 + (C498 - C497) * C44260) * C77 +
            ((C168 - C167) * C214 + (C501 - C500) * C44260) * C78 +
            ((C171 - C172) * C214 + (C502 - C503) * C44260) * C79) *
               C1196 +
           (((C1274 - C1273) * C214 + (C1644 - C1643) * C44260) * C77 +
            ((C1278 - C1277) * C214 + (C1646 - C1645) * C44260) * C78 +
            ((C44245 * C1267 - C151 * C1201) * C214 +
             (C44245 * C1641 - C151 * C1583) * C44260) *
                C79) *
               C44319) *
              C44195 * C44315)) /
        (p * q * std::sqrt(p + q));
    d2eezz[2] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C214 * C215 - C544 * C93 - C214 * C443 + C44260 * C545) * C44245 *
                C77 +
            C572 * C78 + C573 * C79) *
               C1196 -
           (C1715 * C79 + C1716 * C78 +
            (C214 * C1330 - C544 * C1200 - C214 * C1580 + C44260 * C1698) *
                C44245 * C77) *
               C44319) *
              C44195 * C626 +
          ((C1716 * C77 + C1715 * C78 +
            (C214 * C1333 - C544 * C1201 - C214 * C1583 + C44260 * C1699) *
                C44245 * C79) *
               C44319 -
           (C574 * C79 + C573 * C78 + C572 * C77) * C1196) *
              C44195 * C44315)) /
        (p * q * std::sqrt(p + q));
    d2eexx[3] += (2 * std::pow(Pi, 2.5) *
                  (((C87 * C98 - C88 * C93 - C87 * C99 + C77 * C108 +
                     C89 * C100 - C90 * C94 - C89 * C101 + C78 * C109 +
                     C91 * C102 - C92 * C95 - C91 * C103 + C79 * C110) *
                        C44260 * C44245 * C44212 * C1766 -
                    (C91 * C632 - C92 * C628 - C91 * C633 + C79 * C640 +
                     C89 * C634 - C90 * C629 - C89 * C635 + C78 * C641 +
                     C87 * C636 - C88 * C630 - C87 * C637 + C77 * C642) *
                        C44260 * C44245 * C44212 * C44317) *
                       C1768 +
                   ((C87 * C634 - C88 * C629 - C87 * C635 + C77 * C641 +
                     C89 * C632 - C90 * C628 - C89 * C633 + C78 * C640 +
                     C91 * C638 - C92 * C631 - C91 * C639 + C79 * C643) *
                        C44260 * C44245 * C44212 * C44317 -
                    (C91 * C104 - C92 * C96 - C91 * C105 + C79 * C111 +
                     C89 * C102 - C90 * C95 - C89 * C103 + C78 * C110 +
                     C87 * C100 - C88 * C94 - C87 * C101 + C77 * C109) *
                        C44260 * C44245 * C44212 * C1766) *
                       C44315)) /
                 (p * q * std::sqrt(p + q));
    d2eexy[3] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C44245 * C152 - C151 * C93) * C87 +
            (C44245 * C157 - C151 * C99) * C77 + (C163 - C164) * C89 +
            (C165 - C166) * C78 + C175 * C91 + C176 * C79) *
               C44260 * C44212 * C1766 +
           ((C151 * C630 - C44245 * C694) * C87 +
            (C151 * C637 - C44245 * C698) * C77 + (C703 - C704) * C89 +
            (C705 - C706) * C78 + (C707 - C708) * C91 + (C709 - C710) * C79) *
               C44260 * C44212 * C44317) *
              C1768 +
          (((C164 - C163) * C87 + (C166 - C165) * C77 + (C168 - C167) * C89 +
            (C170 - C169) * C78 + (C171 - C172) * C91 + (C173 - C174) * C79) *
               C44260 * C44212 * C1766 +
           ((C704 - C703) * C87 + (C706 - C705) * C77 + (C708 - C707) * C89 +
            (C710 - C709) * C78 + (C44245 * C697 - C151 * C631) * C91 +
            (C44245 * C701 - C151 * C639) * C79) *
               C44260 * C44212 * C44317) *
              C44315)) /
        (p * q * std::sqrt(p + q));
    d2eexz[3] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C44260 * C215 - C214 * C93) * C87 +
            (C44260 * C220 - C214 * C99) * C77 + (C226 - C227) * C89 +
            (C228 - C229) * C78 + C238 * C91 + C239 * C79) *
               C44245 * C44212 * C1766 +
           ((C214 * C630 - C44260 * C760) * C87 +
            (C214 * C637 - C44260 * C764) * C77 + (C769 - C770) * C89 +
            (C771 - C772) * C78 + (C773 - C774) * C91 + (C775 - C776) * C79) *
               C44245 * C44212 * C44317) *
              C1768 +
          (((C227 - C226) * C87 + (C229 - C228) * C77 + (C231 - C230) * C89 +
            (C233 - C232) * C78 + (C234 - C235) * C91 + (C236 - C237) * C79) *
               C44245 * C44212 * C1766 +
           ((C770 - C769) * C87 + (C772 - C771) * C77 + (C774 - C773) * C89 +
            (C776 - C775) * C78 + (C44260 * C763 - C214 * C631) * C91 +
            (C44260 * C767 - C214 * C639) * C79) *
               C44245 * C44212 * C44317) *
              C44315)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[3] += (2 * std::pow(Pi, 2.5) *
                  ((((C77 * C98 - C87 * C93 + C78 * C100 - C89 * C94 +
                      C79 * C102 - C91 * C95) *
                         C151 +
                     (C77 * C282 - C87 * C277 + C78 * C283 - C89 * C278 +
                      C79 * C284 - C91 * C279) *
                         C44245) *
                        C44260 * C44212 * C1766 +
                    ((C87 * C630 - C77 * C636 + C89 * C629 - C78 * C634 +
                      C91 * C628 - C79 * C632) *
                         C151 +
                     (C87 * C826 - C77 * C830 + C89 * C827 - C78 * C831 +
                      C91 * C828 - C79 * C832) *
                         C44245) *
                        C44260 * C44212 * C44317) *
                       C1768 +
                   (((C87 * C94 - C77 * C100 + C89 * C95 - C78 * C102 +
                      C91 * C96 - C79 * C104) *
                         C151 +
                     (C87 * C278 - C77 * C283 + C89 * C279 - C78 * C284 +
                      C91 * C280 - C79 * C285) *
                         C44245) *
                        C44260 * C44212 * C1766 +
                    ((C77 * C634 - C87 * C629 + C78 * C632 - C89 * C628 +
                      C79 * C638 - C91 * C631) *
                         C151 +
                     (C77 * C831 - C87 * C827 + C78 * C832 - C89 * C828 +
                      C79 * C833 - C91 * C829) *
                         C44245) *
                        C44260 * C44212 * C44317) *
                       C44315)) /
                 (p * q * std::sqrt(p + q));
    d2eeyy[3] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C151 * C152 - C325 * C93 - C151 * C277 + C44245 * C326) * C77 +
            C350 * C78 + C351 * C79) *
               C44260 * C44212 * C1766 -
           (C901 * C79 + C902 * C78 +
            (C151 * C694 - C325 * C630 - C151 * C826 + C44245 * C886) * C77) *
               C44260 * C44212 * C44317) *
              C1768 +
          ((C902 * C77 + C901 * C78 +
            (C151 * C697 - C325 * C631 - C151 * C829 + C44245 * C887) * C79) *
               C44260 * C44212 * C44317 -
           (C352 * C79 + C351 * C78 + C350 * C77) * C44260 * C44212 * C1766) *
              C44315)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[3] += (2 * std::pow(Pi, 2.5) *
                  (((((C44260 * C215 - C214 * C93) * C151 +
                      (C44260 * C390 - C214 * C277) * C44245) *
                         C77 +
                     ((C226 - C227) * C151 + (C396 - C397) * C44245) * C78 +
                     C405 * C79) *
                        C44212 * C1766 +
                    (((C214 * C630 - C44260 * C760) * C151 +
                      (C214 * C826 - C44260 * C952) * C44245) *
                         C77 +
                     ((C769 - C770) * C151 + (C957 - C958) * C44245) * C78 +
                     ((C773 - C774) * C151 + (C959 - C960) * C44245) * C79) *
                        C44212 * C44317) *
                       C1768 +
                   ((((C227 - C226) * C151 + (C397 - C396) * C44245) * C77 +
                     ((C231 - C230) * C151 + (C400 - C399) * C44245) * C78 +
                     ((C234 - C235) * C151 + (C401 - C402) * C44245) * C79) *
                        C44212 * C1766 +
                    (((C770 - C769) * C151 + (C958 - C957) * C44245) * C77 +
                     ((C774 - C773) * C151 + (C960 - C959) * C44245) * C78 +
                     ((C44260 * C763 - C214 * C631) * C151 +
                      (C44260 * C955 - C214 * C829) * C44245) *
                         C79) *
                        C44212 * C44317) *
                       C44315)) /
                 (p * q * std::sqrt(p + q));
    d2eezx[3] += (2 * std::pow(Pi, 2.5) *
                  ((((C77 * C98 - C87 * C93 + C78 * C100 - C89 * C94 +
                      C79 * C102 - C91 * C95) *
                         C214 +
                     (C77 * C448 - C87 * C443 + C78 * C449 - C89 * C444 +
                      C79 * C450 - C91 * C445) *
                         C44260) *
                        C44245 * C44212 * C1766 +
                    ((C87 * C630 - C77 * C636 + C89 * C629 - C78 * C634 +
                      C91 * C628 - C79 * C632) *
                         C214 +
                     (C87 * C1010 - C77 * C1014 + C89 * C1011 - C78 * C1015 +
                      C91 * C1012 - C79 * C1016) *
                         C44260) *
                        C44245 * C44212 * C44317) *
                       C1768 +
                   (((C87 * C94 - C77 * C100 + C89 * C95 - C78 * C102 +
                      C91 * C96 - C79 * C104) *
                         C214 +
                     (C87 * C444 - C77 * C449 + C89 * C445 - C78 * C450 +
                      C91 * C446 - C79 * C451) *
                         C44260) *
                        C44245 * C44212 * C1766 +
                    ((C77 * C634 - C87 * C629 + C78 * C632 - C89 * C628 +
                      C79 * C638 - C91 * C631) *
                         C214 +
                     (C77 * C1015 - C87 * C1011 + C78 * C1016 - C89 * C1012 +
                      C79 * C1017 - C91 * C1013) *
                         C44260) *
                        C44245 * C44212 * C44317) *
                       C44315)) /
                 (p * q * std::sqrt(p + q));
    d2eezy[3] += (2 * std::pow(Pi, 2.5) *
                  (((((C44245 * C152 - C151 * C93) * C214 +
                      (C44245 * C491 - C151 * C443) * C44260) *
                         C77 +
                     ((C163 - C164) * C214 + (C497 - C498) * C44260) * C78 +
                     C506 * C79) *
                        C44212 * C1766 +
                    (((C151 * C630 - C44245 * C694) * C214 +
                      (C151 * C1010 - C44245 * C1068) * C44260) *
                         C77 +
                     ((C703 - C704) * C214 + (C1073 - C1074) * C44260) * C78 +
                     ((C707 - C708) * C214 + (C1075 - C1076) * C44260) * C79) *
                        C44212 * C44317) *
                       C1768 +
                   ((((C164 - C163) * C214 + (C498 - C497) * C44260) * C77 +
                     ((C168 - C167) * C214 + (C501 - C500) * C44260) * C78 +
                     ((C171 - C172) * C214 + (C502 - C503) * C44260) * C79) *
                        C44212 * C1766 +
                    (((C704 - C703) * C214 + (C1074 - C1073) * C44260) * C77 +
                     ((C708 - C707) * C214 + (C1076 - C1075) * C44260) * C78 +
                     ((C44245 * C697 - C151 * C631) * C214 +
                      (C44245 * C1071 - C151 * C1013) * C44260) *
                         C79) *
                        C44212 * C44317) *
                       C44315)) /
                 (p * q * std::sqrt(p + q));
    d2eezz[3] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C214 * C215 - C544 * C93 - C214 * C443 + C44260 * C545) * C44245 *
                C77 +
            C572 * C78 + C573 * C79) *
               C44212 * C1766 -
           (C1145 * C79 + C1146 * C78 +
            (C214 * C760 - C544 * C630 - C214 * C1010 + C44260 * C1128) *
                C44245 * C77) *
               C44212 * C44317) *
              C1768 +
          ((C1146 * C77 + C1145 * C78 +
            (C214 * C763 - C544 * C631 - C214 * C1013 + C44260 * C1129) *
                C44245 * C79) *
               C44212 * C44317 -
           (C574 * C79 + C573 * C78 + C572 * C77) * C44212 * C1766) *
              C44315)) /
        (p * q * std::sqrt(p + q));
    d2eexx[4] += (2 * std::pow(Pi, 2.5) *
                  ((C87 * C98 - C88 * C93 - C87 * C99 + C77 * C108 +
                    C89 * C100 - C90 * C94 - C89 * C101 + C78 * C109 +
                    C91 * C102 - C92 * C95 - C91 * C103 + C79 * C110) *
                       C44260 * C44245 * C44212 * C2208 -
                   (C91 * C632 - C92 * C628 - C91 * C633 + C79 * C640 +
                    C89 * C634 - C90 * C629 - C89 * C635 + C78 * C641 +
                    C87 * C636 - C88 * C630 - C87 * C637 + C77 * C642) *
                       C44260 * C44245 * C44212 * C2209 +
                   (C87 * C2215 - C88 * C2212 - C87 * C2216 + C77 * C2221 +
                    C89 * C2217 - C90 * C2213 - C89 * C2218 + C78 * C2222 +
                    C91 * C2219 - C92 * C2214 - C91 * C2220 + C79 * C2223) *
                       C44260 * C44245 * C44212 * C2210) *
                  C44161) /
                 (p * q * std::sqrt(p + q));
    d2eexy[4] +=
        (2 * std::pow(Pi, 2.5) *
         (((C44245 * C152 - C151 * C93) * C87 +
           (C44245 * C157 - C151 * C99) * C77 + (C163 - C164) * C89 +
           (C165 - C166) * C78 + C175 * C91 + C176 * C79) *
              C44260 * C44212 * C2208 +
          ((C151 * C630 - C44245 * C694) * C87 +
           (C151 * C637 - C44245 * C698) * C77 + (C703 - C704) * C89 +
           (C705 - C706) * C78 + (C707 - C708) * C91 + (C709 - C710) * C79) *
              C44260 * C44212 * C2209 +
          ((C44245 * C2262 - C151 * C2212) * C87 +
           (C44245 * C2265 - C151 * C2216) * C77 +
           (C44245 * C2263 - C151 * C2213) * C89 +
           (C44245 * C2266 - C151 * C2218) * C78 +
           (C44245 * C2264 - C151 * C2214) * C91 +
           (C44245 * C2267 - C151 * C2220) * C79) *
              C44260 * C44212 * C2210) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eexz[4] +=
        (2 * std::pow(Pi, 2.5) *
         (((C44260 * C215 - C214 * C93) * C87 +
           (C44260 * C220 - C214 * C99) * C77 + (C226 - C227) * C89 +
           (C228 - C229) * C78 + C238 * C91 + C239 * C79) *
              C44245 * C44212 * C2208 +
          ((C214 * C630 - C44260 * C760) * C87 +
           (C214 * C637 - C44260 * C764) * C77 + (C769 - C770) * C89 +
           (C771 - C772) * C78 + (C773 - C774) * C91 + (C775 - C776) * C79) *
              C44245 * C44212 * C2209 +
          ((C44260 * C2306 - C214 * C2212) * C87 +
           (C44260 * C2309 - C214 * C2216) * C77 +
           (C44260 * C2307 - C214 * C2213) * C89 +
           (C44260 * C2310 - C214 * C2218) * C78 +
           (C44260 * C2308 - C214 * C2214) * C91 +
           (C44260 * C2311 - C214 * C2220) * C79) *
              C44245 * C44212 * C2210) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eeyx[4] += (2 * std::pow(Pi, 2.5) *
                  (((C77 * C98 - C87 * C93 + C78 * C100 - C89 * C94 +
                     C79 * C102 - C91 * C95) *
                        C151 +
                    (C77 * C282 - C87 * C277 + C78 * C283 - C89 * C278 +
                     C79 * C284 - C91 * C279) *
                        C44245) *
                       C44260 * C44212 * C2208 +
                   ((C87 * C630 - C77 * C636 + C89 * C629 - C78 * C634 +
                     C91 * C628 - C79 * C632) *
                        C151 +
                    (C87 * C826 - C77 * C830 + C89 * C827 - C78 * C831 +
                     C91 * C828 - C79 * C832) *
                        C44245) *
                       C44260 * C44212 * C2209 +
                   ((C77 * C2215 - C87 * C2212 + C78 * C2217 - C89 * C2213 +
                     C79 * C2219 - C91 * C2214) *
                        C151 +
                    (C77 * C2353 - C87 * C2350 + C78 * C2354 - C89 * C2351 +
                     C79 * C2355 - C91 * C2352) *
                        C44245) *
                       C44260 * C44212 * C2210) *
                  C44161) /
                 (p * q * std::sqrt(p + q));
    d2eeyy[4] +=
        (2 * std::pow(Pi, 2.5) *
         (((C151 * C152 - C325 * C93 - C151 * C277 + C44245 * C326) * C77 +
           C350 * C78 + C351 * C79) *
              C44260 * C44212 * C2208 -
          (C901 * C79 + C902 * C78 +
           (C151 * C694 - C325 * C630 - C151 * C826 + C44245 * C886) * C77) *
              C44260 * C44212 * C2209 +
          ((C151 * C2262 - C325 * C2212 - C151 * C2350 + C44245 * C2394) * C77 +
           (C151 * C2263 - C325 * C2213 - C151 * C2351 + C44245 * C2395) * C78 +
           (C151 * C2264 - C325 * C2214 - C151 * C2352 + C44245 * C2396) *
               C79) *
              C44260 * C44212 * C2210) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eeyz[4] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C44260 * C215 - C214 * C93) * C151 +
            (C44260 * C390 - C214 * C277) * C44245) *
               C77 +
           ((C226 - C227) * C151 + (C396 - C397) * C44245) * C78 + C405 * C79) *
              C44212 * C2208 +
          (((C214 * C630 - C44260 * C760) * C151 +
            (C214 * C826 - C44260 * C952) * C44245) *
               C77 +
           ((C769 - C770) * C151 + (C957 - C958) * C44245) * C78 +
           ((C773 - C774) * C151 + (C959 - C960) * C44245) * C79) *
              C44212 * C2209 +
          (((C44260 * C2306 - C214 * C2212) * C151 +
            (C44260 * C2435 - C214 * C2350) * C44245) *
               C77 +
           ((C44260 * C2307 - C214 * C2213) * C151 +
            (C44260 * C2436 - C214 * C2351) * C44245) *
               C78 +
           ((C44260 * C2308 - C214 * C2214) * C151 +
            (C44260 * C2437 - C214 * C2352) * C44245) *
               C79) *
              C44212 * C2210) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eezx[4] += (2 * std::pow(Pi, 2.5) *
                  (((C77 * C98 - C87 * C93 + C78 * C100 - C89 * C94 +
                     C79 * C102 - C91 * C95) *
                        C214 +
                    (C77 * C448 - C87 * C443 + C78 * C449 - C89 * C444 +
                     C79 * C450 - C91 * C445) *
                        C44260) *
                       C44245 * C44212 * C2208 +
                   ((C87 * C630 - C77 * C636 + C89 * C629 - C78 * C634 +
                     C91 * C628 - C79 * C632) *
                        C214 +
                    (C87 * C1010 - C77 * C1014 + C89 * C1011 - C78 * C1015 +
                     C91 * C1012 - C79 * C1016) *
                        C44260) *
                       C44245 * C44212 * C2209 +
                   ((C77 * C2215 - C87 * C2212 + C78 * C2217 - C89 * C2213 +
                     C79 * C2219 - C91 * C2214) *
                        C214 +
                    (C77 * C2479 - C87 * C2476 + C78 * C2480 - C89 * C2477 +
                     C79 * C2481 - C91 * C2478) *
                        C44260) *
                       C44245 * C44212 * C2210) *
                  C44161) /
                 (p * q * std::sqrt(p + q));
    d2eezy[4] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C44245 * C152 - C151 * C93) * C214 +
            (C44245 * C491 - C151 * C443) * C44260) *
               C77 +
           ((C163 - C164) * C214 + (C497 - C498) * C44260) * C78 + C506 * C79) *
              C44212 * C2208 +
          (((C151 * C630 - C44245 * C694) * C214 +
            (C151 * C1010 - C44245 * C1068) * C44260) *
               C77 +
           ((C703 - C704) * C214 + (C1073 - C1074) * C44260) * C78 +
           ((C707 - C708) * C214 + (C1075 - C1076) * C44260) * C79) *
              C44212 * C2209 +
          (((C44245 * C2262 - C151 * C2212) * C214 +
            (C44245 * C2520 - C151 * C2476) * C44260) *
               C77 +
           ((C44245 * C2263 - C151 * C2213) * C214 +
            (C44245 * C2521 - C151 * C2477) * C44260) *
               C78 +
           ((C44245 * C2264 - C151 * C2214) * C214 +
            (C44245 * C2522 - C151 * C2478) * C44260) *
               C79) *
              C44212 * C2210) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eezz[4] +=
        (2 * std::pow(Pi, 2.5) *
         (((C214 * C215 - C544 * C93 - C214 * C443 + C44260 * C545) * C44245 *
               C77 +
           C572 * C78 + C573 * C79) *
              C44212 * C2208 -
          (C1145 * C79 + C1146 * C78 +
           (C214 * C760 - C544 * C630 - C214 * C1010 + C44260 * C1128) *
               C44245 * C77) *
              C44212 * C2209 +
          ((C214 * C2306 - C544 * C2212 - C214 * C2476 + C44260 * C2561) *
               C44245 * C77 +
           (C214 * C2307 - C544 * C2213 - C214 * C2477 + C44260 * C2562) *
               C44245 * C78 +
           (C214 * C2308 - C544 * C2214 - C214 * C2478 + C44260 * C2563) *
               C44245 * C79) *
              C44212 * C2210) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eexx[5] += (2 * std::pow(Pi, 2.5) *
                  (((C87 * C98 - C88 * C93 - C87 * C99 + C77 * C108 +
                     C89 * C100 - C90 * C94 - C89 * C101 + C78 * C109 +
                     C91 * C102 - C92 * C95 - C91 * C103 + C79 * C110) *
                        C44260 * C44245 * C1196 -
                    (C91 * C1202 - C92 * C1198 - C91 * C1203 + C79 * C1210 +
                     C89 * C1204 - C90 * C1199 - C89 * C1205 + C78 * C1211 +
                     C87 * C1206 - C88 * C1200 - C87 * C1207 + C77 * C1212) *
                        C44260 * C44245 * C44319) *
                       C1766 +
                   ((C87 * C2617 - C88 * C2614 - C87 * C2618 + C77 * C2623 +
                     C89 * C2619 - C90 * C2615 - C89 * C2620 + C78 * C2624 +
                     C91 * C2621 - C92 * C2616 - C91 * C2622 + C79 * C2625) *
                        C44260 * C44245 * C44319 -
                    (C91 * C632 - C92 * C628 - C91 * C633 + C79 * C640 +
                     C89 * C634 - C90 * C629 - C89 * C635 + C78 * C641 +
                     C87 * C636 - C88 * C630 - C87 * C637 + C77 * C642) *
                        C44260 * C44245 * C1196) *
                       C44317) *
                  C44161) /
                 (p * q * std::sqrt(p + q));
    d2eexy[5] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C44245 * C152 - C151 * C93) * C87 +
            (C44245 * C157 - C151 * C99) * C77 + (C163 - C164) * C89 +
            (C165 - C166) * C78 + C175 * C91 + C176 * C79) *
               C44260 * C1196 +
           ((C151 * C1200 - C44245 * C1264) * C87 +
            (C151 * C1207 - C44245 * C1268) * C77 + (C1273 - C1274) * C89 +
            (C1275 - C1276) * C78 + (C1277 - C1278) * C91 +
            (C1279 - C1280) * C79) *
               C44260 * C44319) *
              C1766 +
          (((C151 * C630 - C44245 * C694) * C87 +
            (C151 * C637 - C44245 * C698) * C77 + (C703 - C704) * C89 +
            (C705 - C706) * C78 + (C707 - C708) * C91 + (C709 - C710) * C79) *
               C44260 * C1196 +
           ((C44245 * C2676 - C151 * C2614) * C87 +
            (C44245 * C2679 - C151 * C2618) * C77 +
            (C44245 * C2677 - C151 * C2615) * C89 +
            (C44245 * C2680 - C151 * C2620) * C78 +
            (C44245 * C2678 - C151 * C2616) * C91 +
            (C44245 * C2681 - C151 * C2622) * C79) *
               C44260 * C44319) *
              C44317) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eexz[5] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C44260 * C215 - C214 * C93) * C87 +
            (C44260 * C220 - C214 * C99) * C77 + (C226 - C227) * C89 +
            (C228 - C229) * C78 + C238 * C91 + C239 * C79) *
               C44245 * C1196 +
           ((C214 * C1200 - C44260 * C1330) * C87 +
            (C214 * C1207 - C44260 * C1334) * C77 + (C1339 - C1340) * C89 +
            (C1341 - C1342) * C78 + (C1343 - C1344) * C91 +
            (C1345 - C1346) * C79) *
               C44245 * C44319) *
              C1766 +
          (((C214 * C630 - C44260 * C760) * C87 +
            (C214 * C637 - C44260 * C764) * C77 + (C769 - C770) * C89 +
            (C771 - C772) * C78 + (C773 - C774) * C91 + (C775 - C776) * C79) *
               C44245 * C1196 +
           ((C44260 * C2732 - C214 * C2614) * C87 +
            (C44260 * C2735 - C214 * C2618) * C77 +
            (C44260 * C2733 - C214 * C2615) * C89 +
            (C44260 * C2736 - C214 * C2620) * C78 +
            (C44260 * C2734 - C214 * C2616) * C91 +
            (C44260 * C2737 - C214 * C2622) * C79) *
               C44245 * C44319) *
              C44317) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eeyx[5] += (2 * std::pow(Pi, 2.5) *
                  ((((C77 * C98 - C87 * C93 + C78 * C100 - C89 * C94 +
                      C79 * C102 - C91 * C95) *
                         C151 +
                     (C77 * C282 - C87 * C277 + C78 * C283 - C89 * C278 +
                      C79 * C284 - C91 * C279) *
                         C44245) *
                        C44260 * C1196 +
                    ((C87 * C1200 - C77 * C1206 + C89 * C1199 - C78 * C1204 +
                      C91 * C1198 - C79 * C1202) *
                         C151 +
                     (C87 * C1396 - C77 * C1400 + C89 * C1397 - C78 * C1401 +
                      C91 * C1398 - C79 * C1402) *
                         C44245) *
                        C44260 * C44319) *
                       C1766 +
                   (((C87 * C630 - C77 * C636 + C89 * C629 - C78 * C634 +
                      C91 * C628 - C79 * C632) *
                         C151 +
                     (C87 * C826 - C77 * C830 + C89 * C827 - C78 * C831 +
                      C91 * C828 - C79 * C832) *
                         C44245) *
                        C44260 * C1196 +
                    ((C77 * C2617 - C87 * C2614 + C78 * C2619 - C89 * C2615 +
                      C79 * C2621 - C91 * C2616) *
                         C151 +
                     (C77 * C2791 - C87 * C2788 + C78 * C2792 - C89 * C2789 +
                      C79 * C2793 - C91 * C2790) *
                         C44245) *
                        C44260 * C44319) *
                       C44317) *
                  C44161) /
                 (p * q * std::sqrt(p + q));
    d2eeyy[5] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C151 * C152 - C325 * C93 - C151 * C277 + C44245 * C326) * C77 +
            C350 * C78 + C351 * C79) *
               C44260 * C1196 -
           (C1471 * C79 + C1472 * C78 +
            (C151 * C1264 - C325 * C1200 - C151 * C1396 + C44245 * C1456) *
                C77) *
               C44260 * C44319) *
              C1766 +
          (((C151 * C2676 - C325 * C2614 - C151 * C2788 + C44245 * C2844) *
                C77 +
            (C151 * C2677 - C325 * C2615 - C151 * C2789 + C44245 * C2845) *
                C78 +
            (C151 * C2678 - C325 * C2616 - C151 * C2790 + C44245 * C2846) *
                C79) *
               C44260 * C44319 -
           (C901 * C79 + C902 * C78 +
            (C151 * C694 - C325 * C630 - C151 * C826 + C44245 * C886) * C77) *
               C44260 * C1196) *
              C44317) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eeyz[5] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C44260 * C215 - C214 * C93) * C151 +
             (C44260 * C390 - C214 * C277) * C44245) *
                C77 +
            ((C226 - C227) * C151 + (C396 - C397) * C44245) * C78 +
            C405 * C79) *
               C1196 +
           (((C214 * C1200 - C44260 * C1330) * C151 +
             (C214 * C1396 - C44260 * C1522) * C44245) *
                C77 +
            ((C1339 - C1340) * C151 + (C1527 - C1528) * C44245) * C78 +
            ((C1343 - C1344) * C151 + (C1529 - C1530) * C44245) * C79) *
               C44319) *
              C1766 +
          ((((C214 * C630 - C44260 * C760) * C151 +
             (C214 * C826 - C44260 * C952) * C44245) *
                C77 +
            ((C769 - C770) * C151 + (C957 - C958) * C44245) * C78 +
            ((C773 - C774) * C151 + (C959 - C960) * C44245) * C79) *
               C1196 +
           (((C44260 * C2732 - C214 * C2614) * C151 +
             (C44260 * C2897 - C214 * C2788) * C44245) *
                C77 +
            ((C44260 * C2733 - C214 * C2615) * C151 +
             (C44260 * C2898 - C214 * C2789) * C44245) *
                C78 +
            ((C44260 * C2734 - C214 * C2616) * C151 +
             (C44260 * C2899 - C214 * C2790) * C44245) *
                C79) *
               C44319) *
              C44317) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eezx[5] += (2 * std::pow(Pi, 2.5) *
                  ((((C77 * C98 - C87 * C93 + C78 * C100 - C89 * C94 +
                      C79 * C102 - C91 * C95) *
                         C214 +
                     (C77 * C448 - C87 * C443 + C78 * C449 - C89 * C444 +
                      C79 * C450 - C91 * C445) *
                         C44260) *
                        C44245 * C1196 +
                    ((C87 * C1200 - C77 * C1206 + C89 * C1199 - C78 * C1204 +
                      C91 * C1198 - C79 * C1202) *
                         C214 +
                     (C87 * C1580 - C77 * C1584 + C89 * C1581 - C78 * C1585 +
                      C91 * C1582 - C79 * C1586) *
                         C44260) *
                        C44245 * C44319) *
                       C1766 +
                   (((C87 * C630 - C77 * C636 + C89 * C629 - C78 * C634 +
                      C91 * C628 - C79 * C632) *
                         C214 +
                     (C87 * C1010 - C77 * C1014 + C89 * C1011 - C78 * C1015 +
                      C91 * C1012 - C79 * C1016) *
                         C44260) *
                        C44245 * C1196 +
                    ((C77 * C2617 - C87 * C2614 + C78 * C2619 - C89 * C2615 +
                      C79 * C2621 - C91 * C2616) *
                         C214 +
                     (C77 * C2953 - C87 * C2950 + C78 * C2954 - C89 * C2951 +
                      C79 * C2955 - C91 * C2952) *
                         C44260) *
                        C44245 * C44319) *
                       C44317) *
                  C44161) /
                 (p * q * std::sqrt(p + q));
    d2eezy[5] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C44245 * C152 - C151 * C93) * C214 +
             (C44245 * C491 - C151 * C443) * C44260) *
                C77 +
            ((C163 - C164) * C214 + (C497 - C498) * C44260) * C78 +
            C506 * C79) *
               C1196 +
           (((C151 * C1200 - C44245 * C1264) * C214 +
             (C151 * C1580 - C44245 * C1638) * C44260) *
                C77 +
            ((C1273 - C1274) * C214 + (C1643 - C1644) * C44260) * C78 +
            ((C1277 - C1278) * C214 + (C1645 - C1646) * C44260) * C79) *
               C44319) *
              C1766 +
          ((((C151 * C630 - C44245 * C694) * C214 +
             (C151 * C1010 - C44245 * C1068) * C44260) *
                C77 +
            ((C703 - C704) * C214 + (C1073 - C1074) * C44260) * C78 +
            ((C707 - C708) * C214 + (C1075 - C1076) * C44260) * C79) *
               C1196 +
           (((C44245 * C2676 - C151 * C2614) * C214 +
             (C44245 * C3006 - C151 * C2950) * C44260) *
                C77 +
            ((C44245 * C2677 - C151 * C2615) * C214 +
             (C44245 * C3007 - C151 * C2951) * C44260) *
                C78 +
            ((C44245 * C2678 - C151 * C2616) * C214 +
             (C44245 * C3008 - C151 * C2952) * C44260) *
                C79) *
               C44319) *
              C44317) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eezz[5] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C214 * C215 - C544 * C93 - C214 * C443 + C44260 * C545) * C44245 *
                C77 +
            C572 * C78 + C573 * C79) *
               C1196 -
           (C1715 * C79 + C1716 * C78 +
            (C214 * C1330 - C544 * C1200 - C214 * C1580 + C44260 * C1698) *
                C44245 * C77) *
               C44319) *
              C1766 +
          (((C214 * C2732 - C544 * C2614 - C214 * C2950 + C44260 * C3059) *
                C44245 * C77 +
            (C214 * C2733 - C544 * C2615 - C214 * C2951 + C44260 * C3060) *
                C44245 * C78 +
            (C214 * C2734 - C544 * C2616 - C214 * C2952 + C44260 * C3061) *
                C44245 * C79) *
               C44319 -
           (C1145 * C79 + C1146 * C78 +
            (C214 * C760 - C544 * C630 - C214 * C1010 + C44260 * C1128) *
                C44245 * C77) *
               C1196) *
              C44317) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eexx[6] += (2 * std::pow(Pi, 2.5) *
                  (((C87 * C98 - C88 * C93 - C87 * C99 + C77 * C108 +
                     C89 * C100 - C90 * C94 - C89 * C101 + C78 * C109 +
                     C91 * C102 - C92 * C95 - C91 * C103 + C79 * C110) *
                        C44260 * C44245 * C3112 -
                    (C91 * C1202 - C92 * C1198 - C91 * C1203 + C79 * C1210 +
                     C89 * C1204 - C90 * C1199 - C89 * C1205 + C78 * C1211 +
                     C87 * C1206 - C88 * C1200 - C87 * C1207 + C77 * C1212) *
                        C44260 * C44245 * C44319) *
                       C44195 * C1768 +
                   ((C87 * C1204 - C88 * C1199 - C87 * C1205 + C77 * C1211 +
                     C89 * C1202 - C90 * C1198 - C89 * C1203 + C78 * C1210 +
                     C91 * C1208 - C92 * C1201 - C91 * C1209 + C79 * C1213) *
                        C44260 * C44245 * C44319 -
                    (C91 * C104 - C92 * C96 - C91 * C105 + C79 * C111 +
                     C89 * C102 - C90 * C95 - C89 * C103 + C78 * C110 +
                     C87 * C100 - C88 * C94 - C87 * C101 + C77 * C109) *
                        C44260 * C44245 * C3112) *
                       C44195 * C44315)) /
                 (p * q * std::sqrt(p + q));
    d2eexy[6] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C44245 * C152 - C151 * C93) * C87 +
            (C44245 * C157 - C151 * C99) * C77 + (C163 - C164) * C89 +
            (C165 - C166) * C78 + C175 * C91 + C176 * C79) *
               C44260 * C3112 +
           ((C151 * C1200 - C44245 * C1264) * C87 +
            (C151 * C1207 - C44245 * C1268) * C77 + (C1273 - C1274) * C89 +
            (C1275 - C1276) * C78 + (C1277 - C1278) * C91 +
            (C1279 - C1280) * C79) *
               C44260 * C44319) *
              C44195 * C1768 +
          (((C164 - C163) * C87 + (C166 - C165) * C77 + (C168 - C167) * C89 +
            (C170 - C169) * C78 + (C171 - C172) * C91 + (C173 - C174) * C79) *
               C44260 * C3112 +
           ((C1274 - C1273) * C87 + (C1276 - C1275) * C77 +
            (C1278 - C1277) * C89 + (C1280 - C1279) * C78 +
            (C44245 * C1267 - C151 * C1201) * C91 +
            (C44245 * C1271 - C151 * C1209) * C79) *
               C44260 * C44319) *
              C44195 * C44315)) /
        (p * q * std::sqrt(p + q));
    d2eexz[6] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C44260 * C215 - C214 * C93) * C87 +
            (C44260 * C220 - C214 * C99) * C77 + (C226 - C227) * C89 +
            (C228 - C229) * C78 + C238 * C91 + C239 * C79) *
               C44245 * C3112 +
           ((C214 * C1200 - C44260 * C1330) * C87 +
            (C214 * C1207 - C44260 * C1334) * C77 + (C1339 - C1340) * C89 +
            (C1341 - C1342) * C78 + (C1343 - C1344) * C91 +
            (C1345 - C1346) * C79) *
               C44245 * C44319) *
              C44195 * C1768 +
          (((C227 - C226) * C87 + (C229 - C228) * C77 + (C231 - C230) * C89 +
            (C233 - C232) * C78 + (C234 - C235) * C91 + (C236 - C237) * C79) *
               C44245 * C3112 +
           ((C1340 - C1339) * C87 + (C1342 - C1341) * C77 +
            (C1344 - C1343) * C89 + (C1346 - C1345) * C78 +
            (C44260 * C1333 - C214 * C1201) * C91 +
            (C44260 * C1337 - C214 * C1209) * C79) *
               C44245 * C44319) *
              C44195 * C44315)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[6] += (2 * std::pow(Pi, 2.5) *
                  ((((C77 * C98 - C87 * C93 + C78 * C100 - C89 * C94 +
                      C79 * C102 - C91 * C95) *
                         C151 +
                     (C77 * C282 - C87 * C277 + C78 * C283 - C89 * C278 +
                      C79 * C284 - C91 * C279) *
                         C44245) *
                        C44260 * C3112 +
                    ((C87 * C1200 - C77 * C1206 + C89 * C1199 - C78 * C1204 +
                      C91 * C1198 - C79 * C1202) *
                         C151 +
                     (C87 * C1396 - C77 * C1400 + C89 * C1397 - C78 * C1401 +
                      C91 * C1398 - C79 * C1402) *
                         C44245) *
                        C44260 * C44319) *
                       C44195 * C1768 +
                   (((C87 * C94 - C77 * C100 + C89 * C95 - C78 * C102 +
                      C91 * C96 - C79 * C104) *
                         C151 +
                     (C87 * C278 - C77 * C283 + C89 * C279 - C78 * C284 +
                      C91 * C280 - C79 * C285) *
                         C44245) *
                        C44260 * C3112 +
                    ((C77 * C1204 - C87 * C1199 + C78 * C1202 - C89 * C1198 +
                      C79 * C1208 - C91 * C1201) *
                         C151 +
                     (C77 * C1401 - C87 * C1397 + C78 * C1402 - C89 * C1398 +
                      C79 * C1403 - C91 * C1399) *
                         C44245) *
                        C44260 * C44319) *
                       C44195 * C44315)) /
                 (p * q * std::sqrt(p + q));
    d2eeyy[6] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C151 * C152 - C325 * C93 - C151 * C277 + C44245 * C326) * C77 +
            C350 * C78 + C351 * C79) *
               C44260 * C3112 -
           (C1471 * C79 + C1472 * C78 +
            (C151 * C1264 - C325 * C1200 - C151 * C1396 + C44245 * C1456) *
                C77) *
               C44260 * C44319) *
              C44195 * C1768 +
          ((C1472 * C77 + C1471 * C78 +
            (C151 * C1267 - C325 * C1201 - C151 * C1399 + C44245 * C1457) *
                C79) *
               C44260 * C44319 -
           (C352 * C79 + C351 * C78 + C350 * C77) * C44260 * C3112) *
              C44195 * C44315)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[6] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C44260 * C215 - C214 * C93) * C151 +
             (C44260 * C390 - C214 * C277) * C44245) *
                C77 +
            ((C226 - C227) * C151 + (C396 - C397) * C44245) * C78 +
            C405 * C79) *
               C3112 +
           (((C214 * C1200 - C44260 * C1330) * C151 +
             (C214 * C1396 - C44260 * C1522) * C44245) *
                C77 +
            ((C1339 - C1340) * C151 + (C1527 - C1528) * C44245) * C78 +
            ((C1343 - C1344) * C151 + (C1529 - C1530) * C44245) * C79) *
               C44319) *
              C44195 * C1768 +
          ((((C227 - C226) * C151 + (C397 - C396) * C44245) * C77 +
            ((C231 - C230) * C151 + (C400 - C399) * C44245) * C78 +
            ((C234 - C235) * C151 + (C401 - C402) * C44245) * C79) *
               C3112 +
           (((C1340 - C1339) * C151 + (C1528 - C1527) * C44245) * C77 +
            ((C1344 - C1343) * C151 + (C1530 - C1529) * C44245) * C78 +
            ((C44260 * C1333 - C214 * C1201) * C151 +
             (C44260 * C1525 - C214 * C1399) * C44245) *
                C79) *
               C44319) *
              C44195 * C44315)) /
        (p * q * std::sqrt(p + q));
    d2eezx[6] += (2 * std::pow(Pi, 2.5) *
                  ((((C77 * C98 - C87 * C93 + C78 * C100 - C89 * C94 +
                      C79 * C102 - C91 * C95) *
                         C214 +
                     (C77 * C448 - C87 * C443 + C78 * C449 - C89 * C444 +
                      C79 * C450 - C91 * C445) *
                         C44260) *
                        C44245 * C3112 +
                    ((C87 * C1200 - C77 * C1206 + C89 * C1199 - C78 * C1204 +
                      C91 * C1198 - C79 * C1202) *
                         C214 +
                     (C87 * C1580 - C77 * C1584 + C89 * C1581 - C78 * C1585 +
                      C91 * C1582 - C79 * C1586) *
                         C44260) *
                        C44245 * C44319) *
                       C44195 * C1768 +
                   (((C87 * C94 - C77 * C100 + C89 * C95 - C78 * C102 +
                      C91 * C96 - C79 * C104) *
                         C214 +
                     (C87 * C444 - C77 * C449 + C89 * C445 - C78 * C450 +
                      C91 * C446 - C79 * C451) *
                         C44260) *
                        C44245 * C3112 +
                    ((C77 * C1204 - C87 * C1199 + C78 * C1202 - C89 * C1198 +
                      C79 * C1208 - C91 * C1201) *
                         C214 +
                     (C77 * C1585 - C87 * C1581 + C78 * C1586 - C89 * C1582 +
                      C79 * C1587 - C91 * C1583) *
                         C44260) *
                        C44245 * C44319) *
                       C44195 * C44315)) /
                 (p * q * std::sqrt(p + q));
    d2eezy[6] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C44245 * C152 - C151 * C93) * C214 +
             (C44245 * C491 - C151 * C443) * C44260) *
                C77 +
            ((C163 - C164) * C214 + (C497 - C498) * C44260) * C78 +
            C506 * C79) *
               C3112 +
           (((C151 * C1200 - C44245 * C1264) * C214 +
             (C151 * C1580 - C44245 * C1638) * C44260) *
                C77 +
            ((C1273 - C1274) * C214 + (C1643 - C1644) * C44260) * C78 +
            ((C1277 - C1278) * C214 + (C1645 - C1646) * C44260) * C79) *
               C44319) *
              C44195 * C1768 +
          ((((C164 - C163) * C214 + (C498 - C497) * C44260) * C77 +
            ((C168 - C167) * C214 + (C501 - C500) * C44260) * C78 +
            ((C171 - C172) * C214 + (C502 - C503) * C44260) * C79) *
               C3112 +
           (((C1274 - C1273) * C214 + (C1644 - C1643) * C44260) * C77 +
            ((C1278 - C1277) * C214 + (C1646 - C1645) * C44260) * C78 +
            ((C44245 * C1267 - C151 * C1201) * C214 +
             (C44245 * C1641 - C151 * C1583) * C44260) *
                C79) *
               C44319) *
              C44195 * C44315)) /
        (p * q * std::sqrt(p + q));
    d2eezz[6] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C214 * C215 - C544 * C93 - C214 * C443 + C44260 * C545) * C44245 *
                C77 +
            C572 * C78 + C573 * C79) *
               C3112 -
           (C1715 * C79 + C1716 * C78 +
            (C214 * C1330 - C544 * C1200 - C214 * C1580 + C44260 * C1698) *
                C44245 * C77) *
               C44319) *
              C44195 * C1768 +
          ((C1716 * C77 + C1715 * C78 +
            (C214 * C1333 - C544 * C1201 - C214 * C1583 + C44260 * C1699) *
                C44245 * C79) *
               C44319 -
           (C574 * C79 + C573 * C78 + C572 * C77) * C3112) *
              C44195 * C44315)) /
        (p * q * std::sqrt(p + q));
    d2eexx[7] += (2 * std::pow(Pi, 2.5) *
                  (((C87 * C98 - C88 * C93 - C87 * C99 + C77 * C108 +
                     C89 * C100 - C90 * C94 - C89 * C101 + C78 * C109 +
                     C91 * C102 - C92 * C95 - C91 * C103 + C79 * C110) *
                        C44260 * C44245 * C3112 -
                    (C91 * C1202 - C92 * C1198 - C91 * C1203 + C79 * C1210 +
                     C89 * C1204 - C90 * C1199 - C89 * C1205 + C78 * C1211 +
                     C87 * C1206 - C88 * C1200 - C87 * C1207 + C77 * C1212) *
                        C44260 * C44245 * C44319) *
                       C624 +
                   ((C87 * C2617 - C88 * C2614 - C87 * C2618 + C77 * C2623 +
                     C89 * C2619 - C90 * C2615 - C89 * C2620 + C78 * C2624 +
                     C91 * C2621 - C92 * C2616 - C91 * C2622 + C79 * C2625) *
                        C44260 * C44245 * C44319 -
                    (C91 * C632 - C92 * C628 - C91 * C633 + C79 * C640 +
                     C89 * C634 - C90 * C629 - C89 * C635 + C78 * C641 +
                     C87 * C636 - C88 * C630 - C87 * C637 + C77 * C642) *
                        C44260 * C44245 * C3112) *
                       C44317) *
                  C44161) /
                 (p * q * std::sqrt(p + q));
    d2eexy[7] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C44245 * C152 - C151 * C93) * C87 +
            (C44245 * C157 - C151 * C99) * C77 + (C163 - C164) * C89 +
            (C165 - C166) * C78 + C175 * C91 + C176 * C79) *
               C44260 * C3112 +
           ((C151 * C1200 - C44245 * C1264) * C87 +
            (C151 * C1207 - C44245 * C1268) * C77 + (C1273 - C1274) * C89 +
            (C1275 - C1276) * C78 + (C1277 - C1278) * C91 +
            (C1279 - C1280) * C79) *
               C44260 * C44319) *
              C624 +
          (((C151 * C630 - C44245 * C694) * C87 +
            (C151 * C637 - C44245 * C698) * C77 + (C703 - C704) * C89 +
            (C705 - C706) * C78 + (C707 - C708) * C91 + (C709 - C710) * C79) *
               C44260 * C3112 +
           ((C44245 * C2676 - C151 * C2614) * C87 +
            (C44245 * C2679 - C151 * C2618) * C77 +
            (C44245 * C2677 - C151 * C2615) * C89 +
            (C44245 * C2680 - C151 * C2620) * C78 +
            (C44245 * C2678 - C151 * C2616) * C91 +
            (C44245 * C2681 - C151 * C2622) * C79) *
               C44260 * C44319) *
              C44317) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eexz[7] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C44260 * C215 - C214 * C93) * C87 +
            (C44260 * C220 - C214 * C99) * C77 + (C226 - C227) * C89 +
            (C228 - C229) * C78 + C238 * C91 + C239 * C79) *
               C44245 * C3112 +
           ((C214 * C1200 - C44260 * C1330) * C87 +
            (C214 * C1207 - C44260 * C1334) * C77 + (C1339 - C1340) * C89 +
            (C1341 - C1342) * C78 + (C1343 - C1344) * C91 +
            (C1345 - C1346) * C79) *
               C44245 * C44319) *
              C624 +
          (((C214 * C630 - C44260 * C760) * C87 +
            (C214 * C637 - C44260 * C764) * C77 + (C769 - C770) * C89 +
            (C771 - C772) * C78 + (C773 - C774) * C91 + (C775 - C776) * C79) *
               C44245 * C3112 +
           ((C44260 * C2732 - C214 * C2614) * C87 +
            (C44260 * C2735 - C214 * C2618) * C77 +
            (C44260 * C2733 - C214 * C2615) * C89 +
            (C44260 * C2736 - C214 * C2620) * C78 +
            (C44260 * C2734 - C214 * C2616) * C91 +
            (C44260 * C2737 - C214 * C2622) * C79) *
               C44245 * C44319) *
              C44317) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eeyx[7] += (2 * std::pow(Pi, 2.5) *
                  ((((C77 * C98 - C87 * C93 + C78 * C100 - C89 * C94 +
                      C79 * C102 - C91 * C95) *
                         C151 +
                     (C77 * C282 - C87 * C277 + C78 * C283 - C89 * C278 +
                      C79 * C284 - C91 * C279) *
                         C44245) *
                        C44260 * C3112 +
                    ((C87 * C1200 - C77 * C1206 + C89 * C1199 - C78 * C1204 +
                      C91 * C1198 - C79 * C1202) *
                         C151 +
                     (C87 * C1396 - C77 * C1400 + C89 * C1397 - C78 * C1401 +
                      C91 * C1398 - C79 * C1402) *
                         C44245) *
                        C44260 * C44319) *
                       C624 +
                   (((C87 * C630 - C77 * C636 + C89 * C629 - C78 * C634 +
                      C91 * C628 - C79 * C632) *
                         C151 +
                     (C87 * C826 - C77 * C830 + C89 * C827 - C78 * C831 +
                      C91 * C828 - C79 * C832) *
                         C44245) *
                        C44260 * C3112 +
                    ((C77 * C2617 - C87 * C2614 + C78 * C2619 - C89 * C2615 +
                      C79 * C2621 - C91 * C2616) *
                         C151 +
                     (C77 * C2791 - C87 * C2788 + C78 * C2792 - C89 * C2789 +
                      C79 * C2793 - C91 * C2790) *
                         C44245) *
                        C44260 * C44319) *
                       C44317) *
                  C44161) /
                 (p * q * std::sqrt(p + q));
    d2eeyy[7] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C151 * C152 - C325 * C93 - C151 * C277 + C44245 * C326) * C77 +
            C350 * C78 + C351 * C79) *
               C44260 * C3112 -
           (C1471 * C79 + C1472 * C78 +
            (C151 * C1264 - C325 * C1200 - C151 * C1396 + C44245 * C1456) *
                C77) *
               C44260 * C44319) *
              C624 +
          (((C151 * C2676 - C325 * C2614 - C151 * C2788 + C44245 * C2844) *
                C77 +
            (C151 * C2677 - C325 * C2615 - C151 * C2789 + C44245 * C2845) *
                C78 +
            (C151 * C2678 - C325 * C2616 - C151 * C2790 + C44245 * C2846) *
                C79) *
               C44260 * C44319 -
           (C901 * C79 + C902 * C78 +
            (C151 * C694 - C325 * C630 - C151 * C826 + C44245 * C886) * C77) *
               C44260 * C3112) *
              C44317) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eeyz[7] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C44260 * C215 - C214 * C93) * C151 +
             (C44260 * C390 - C214 * C277) * C44245) *
                C77 +
            ((C226 - C227) * C151 + (C396 - C397) * C44245) * C78 +
            C405 * C79) *
               C3112 +
           (((C214 * C1200 - C44260 * C1330) * C151 +
             (C214 * C1396 - C44260 * C1522) * C44245) *
                C77 +
            ((C1339 - C1340) * C151 + (C1527 - C1528) * C44245) * C78 +
            ((C1343 - C1344) * C151 + (C1529 - C1530) * C44245) * C79) *
               C44319) *
              C624 +
          ((((C214 * C630 - C44260 * C760) * C151 +
             (C214 * C826 - C44260 * C952) * C44245) *
                C77 +
            ((C769 - C770) * C151 + (C957 - C958) * C44245) * C78 +
            ((C773 - C774) * C151 + (C959 - C960) * C44245) * C79) *
               C3112 +
           (((C44260 * C2732 - C214 * C2614) * C151 +
             (C44260 * C2897 - C214 * C2788) * C44245) *
                C77 +
            ((C44260 * C2733 - C214 * C2615) * C151 +
             (C44260 * C2898 - C214 * C2789) * C44245) *
                C78 +
            ((C44260 * C2734 - C214 * C2616) * C151 +
             (C44260 * C2899 - C214 * C2790) * C44245) *
                C79) *
               C44319) *
              C44317) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eezx[7] += (2 * std::pow(Pi, 2.5) *
                  ((((C77 * C98 - C87 * C93 + C78 * C100 - C89 * C94 +
                      C79 * C102 - C91 * C95) *
                         C214 +
                     (C77 * C448 - C87 * C443 + C78 * C449 - C89 * C444 +
                      C79 * C450 - C91 * C445) *
                         C44260) *
                        C44245 * C3112 +
                    ((C87 * C1200 - C77 * C1206 + C89 * C1199 - C78 * C1204 +
                      C91 * C1198 - C79 * C1202) *
                         C214 +
                     (C87 * C1580 - C77 * C1584 + C89 * C1581 - C78 * C1585 +
                      C91 * C1582 - C79 * C1586) *
                         C44260) *
                        C44245 * C44319) *
                       C624 +
                   (((C87 * C630 - C77 * C636 + C89 * C629 - C78 * C634 +
                      C91 * C628 - C79 * C632) *
                         C214 +
                     (C87 * C1010 - C77 * C1014 + C89 * C1011 - C78 * C1015 +
                      C91 * C1012 - C79 * C1016) *
                         C44260) *
                        C44245 * C3112 +
                    ((C77 * C2617 - C87 * C2614 + C78 * C2619 - C89 * C2615 +
                      C79 * C2621 - C91 * C2616) *
                         C214 +
                     (C77 * C2953 - C87 * C2950 + C78 * C2954 - C89 * C2951 +
                      C79 * C2955 - C91 * C2952) *
                         C44260) *
                        C44245 * C44319) *
                       C44317) *
                  C44161) /
                 (p * q * std::sqrt(p + q));
    d2eezy[7] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C44245 * C152 - C151 * C93) * C214 +
             (C44245 * C491 - C151 * C443) * C44260) *
                C77 +
            ((C163 - C164) * C214 + (C497 - C498) * C44260) * C78 +
            C506 * C79) *
               C3112 +
           (((C151 * C1200 - C44245 * C1264) * C214 +
             (C151 * C1580 - C44245 * C1638) * C44260) *
                C77 +
            ((C1273 - C1274) * C214 + (C1643 - C1644) * C44260) * C78 +
            ((C1277 - C1278) * C214 + (C1645 - C1646) * C44260) * C79) *
               C44319) *
              C624 +
          ((((C151 * C630 - C44245 * C694) * C214 +
             (C151 * C1010 - C44245 * C1068) * C44260) *
                C77 +
            ((C703 - C704) * C214 + (C1073 - C1074) * C44260) * C78 +
            ((C707 - C708) * C214 + (C1075 - C1076) * C44260) * C79) *
               C3112 +
           (((C44245 * C2676 - C151 * C2614) * C214 +
             (C44245 * C3006 - C151 * C2950) * C44260) *
                C77 +
            ((C44245 * C2677 - C151 * C2615) * C214 +
             (C44245 * C3007 - C151 * C2951) * C44260) *
                C78 +
            ((C44245 * C2678 - C151 * C2616) * C214 +
             (C44245 * C3008 - C151 * C2952) * C44260) *
                C79) *
               C44319) *
              C44317) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eezz[7] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C214 * C215 - C544 * C93 - C214 * C443 + C44260 * C545) * C44245 *
                C77 +
            C572 * C78 + C573 * C79) *
               C3112 -
           (C1715 * C79 + C1716 * C78 +
            (C214 * C1330 - C544 * C1200 - C214 * C1580 + C44260 * C1698) *
                C44245 * C77) *
               C44319) *
              C624 +
          (((C214 * C2732 - C544 * C2614 - C214 * C2950 + C44260 * C3059) *
                C44245 * C77 +
            (C214 * C2733 - C544 * C2615 - C214 * C2951 + C44260 * C3060) *
                C44245 * C78 +
            (C214 * C2734 - C544 * C2616 - C214 * C2952 + C44260 * C3061) *
                C44245 * C79) *
               C44319 -
           (C1145 * C79 + C1146 * C78 +
            (C214 * C760 - C544 * C630 - C214 * C1010 + C44260 * C1128) *
                C44245 * C77) *
               C3112) *
              C44317) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eexx[8] += (2 * std::pow(Pi, 2.5) *
                  ((C87 * C98 - C88 * C93 - C87 * C99 + C77 * C108 +
                    C89 * C100 - C90 * C94 - C89 * C101 + C78 * C109 +
                    C91 * C102 - C92 * C95 - C91 * C103 + C79 * C110) *
                       C44260 * C44245 * C4002 -
                   (C91 * C1202 - C92 * C1198 - C91 * C1203 + C79 * C1210 +
                    C89 * C1204 - C90 * C1199 - C89 * C1205 + C78 * C1211 +
                    C87 * C1206 - C88 * C1200 - C87 * C1207 + C77 * C1212) *
                       C44260 * C44245 * C4003 +
                   (C87 * C4008 - C88 * C4005 - C87 * C4009 + C77 * C4014 +
                    C89 * C4010 - C90 * C4006 - C89 * C4011 + C78 * C4015 +
                    C91 * C4012 - C92 * C4007 - C91 * C4013 + C79 * C4016) *
                       C44260 * C44245 * C4004) *
                  C44195 * C44161) /
                 (p * q * std::sqrt(p + q));
    d2eexy[8] += (2 * std::pow(Pi, 2.5) *
                  (((C44245 * C152 - C151 * C93) * C87 +
                    (C44245 * C157 - C151 * C99) * C77 + (C163 - C164) * C89 +
                    (C165 - C166) * C78 + C175 * C91 + C176 * C79) *
                       C44260 * C4002 +
                   ((C151 * C1200 - C44245 * C1264) * C87 +
                    (C151 * C1207 - C44245 * C1268) * C77 +
                    (C1273 - C1274) * C89 + (C1275 - C1276) * C78 +
                    (C1277 - C1278) * C91 + (C1279 - C1280) * C79) *
                       C44260 * C4003 +
                   ((C44245 * C4055 - C151 * C4005) * C87 +
                    (C44245 * C4058 - C151 * C4009) * C77 +
                    (C44245 * C4056 - C151 * C4006) * C89 +
                    (C44245 * C4059 - C151 * C4011) * C78 +
                    (C44245 * C4057 - C151 * C4007) * C91 +
                    (C44245 * C4060 - C151 * C4013) * C79) *
                       C44260 * C4004) *
                  C44195 * C44161) /
                 (p * q * std::sqrt(p + q));
    d2eexz[8] += (2 * std::pow(Pi, 2.5) *
                  (((C44260 * C215 - C214 * C93) * C87 +
                    (C44260 * C220 - C214 * C99) * C77 + (C226 - C227) * C89 +
                    (C228 - C229) * C78 + C238 * C91 + C239 * C79) *
                       C44245 * C4002 +
                   ((C214 * C1200 - C44260 * C1330) * C87 +
                    (C214 * C1207 - C44260 * C1334) * C77 +
                    (C1339 - C1340) * C89 + (C1341 - C1342) * C78 +
                    (C1343 - C1344) * C91 + (C1345 - C1346) * C79) *
                       C44245 * C4003 +
                   ((C44260 * C4099 - C214 * C4005) * C87 +
                    (C44260 * C4102 - C214 * C4009) * C77 +
                    (C44260 * C4100 - C214 * C4006) * C89 +
                    (C44260 * C4103 - C214 * C4011) * C78 +
                    (C44260 * C4101 - C214 * C4007) * C91 +
                    (C44260 * C4104 - C214 * C4013) * C79) *
                       C44245 * C4004) *
                  C44195 * C44161) /
                 (p * q * std::sqrt(p + q));
    d2eeyx[8] += (2 * std::pow(Pi, 2.5) *
                  (((C77 * C98 - C87 * C93 + C78 * C100 - C89 * C94 +
                     C79 * C102 - C91 * C95) *
                        C151 +
                    (C77 * C282 - C87 * C277 + C78 * C283 - C89 * C278 +
                     C79 * C284 - C91 * C279) *
                        C44245) *
                       C44260 * C4002 +
                   ((C87 * C1200 - C77 * C1206 + C89 * C1199 - C78 * C1204 +
                     C91 * C1198 - C79 * C1202) *
                        C151 +
                    (C87 * C1396 - C77 * C1400 + C89 * C1397 - C78 * C1401 +
                     C91 * C1398 - C79 * C1402) *
                        C44245) *
                       C44260 * C4003 +
                   ((C77 * C4008 - C87 * C4005 + C78 * C4010 - C89 * C4006 +
                     C79 * C4012 - C91 * C4007) *
                        C151 +
                    (C77 * C4146 - C87 * C4143 + C78 * C4147 - C89 * C4144 +
                     C79 * C4148 - C91 * C4145) *
                        C44245) *
                       C44260 * C4004) *
                  C44195 * C44161) /
                 (p * q * std::sqrt(p + q));
    d2eeyy[8] +=
        (2 * std::pow(Pi, 2.5) *
         (((C151 * C152 - C325 * C93 - C151 * C277 + C44245 * C326) * C77 +
           C350 * C78 + C351 * C79) *
              C44260 * C4002 -
          (C1471 * C79 + C1472 * C78 +
           (C151 * C1264 - C325 * C1200 - C151 * C1396 + C44245 * C1456) *
               C77) *
              C44260 * C4003 +
          ((C151 * C4055 - C325 * C4005 - C151 * C4143 + C44245 * C4187) * C77 +
           (C151 * C4056 - C325 * C4006 - C151 * C4144 + C44245 * C4188) * C78 +
           (C151 * C4057 - C325 * C4007 - C151 * C4145 + C44245 * C4189) *
               C79) *
              C44260 * C4004) *
         C44195 * C44161) /
        (p * q * std::sqrt(p + q));
    d2eeyz[8] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C44260 * C215 - C214 * C93) * C151 +
            (C44260 * C390 - C214 * C277) * C44245) *
               C77 +
           ((C226 - C227) * C151 + (C396 - C397) * C44245) * C78 + C405 * C79) *
              C4002 +
          (((C214 * C1200 - C44260 * C1330) * C151 +
            (C214 * C1396 - C44260 * C1522) * C44245) *
               C77 +
           ((C1339 - C1340) * C151 + (C1527 - C1528) * C44245) * C78 +
           ((C1343 - C1344) * C151 + (C1529 - C1530) * C44245) * C79) *
              C4003 +
          (((C44260 * C4099 - C214 * C4005) * C151 +
            (C44260 * C4228 - C214 * C4143) * C44245) *
               C77 +
           ((C44260 * C4100 - C214 * C4006) * C151 +
            (C44260 * C4229 - C214 * C4144) * C44245) *
               C78 +
           ((C44260 * C4101 - C214 * C4007) * C151 +
            (C44260 * C4230 - C214 * C4145) * C44245) *
               C79) *
              C4004) *
         C44195 * C44161) /
        (p * q * std::sqrt(p + q));
    d2eezx[8] += (2 * std::pow(Pi, 2.5) *
                  (((C77 * C98 - C87 * C93 + C78 * C100 - C89 * C94 +
                     C79 * C102 - C91 * C95) *
                        C214 +
                    (C77 * C448 - C87 * C443 + C78 * C449 - C89 * C444 +
                     C79 * C450 - C91 * C445) *
                        C44260) *
                       C44245 * C4002 +
                   ((C87 * C1200 - C77 * C1206 + C89 * C1199 - C78 * C1204 +
                     C91 * C1198 - C79 * C1202) *
                        C214 +
                    (C87 * C1580 - C77 * C1584 + C89 * C1581 - C78 * C1585 +
                     C91 * C1582 - C79 * C1586) *
                        C44260) *
                       C44245 * C4003 +
                   ((C77 * C4008 - C87 * C4005 + C78 * C4010 - C89 * C4006 +
                     C79 * C4012 - C91 * C4007) *
                        C214 +
                    (C77 * C4272 - C87 * C4269 + C78 * C4273 - C89 * C4270 +
                     C79 * C4274 - C91 * C4271) *
                        C44260) *
                       C44245 * C4004) *
                  C44195 * C44161) /
                 (p * q * std::sqrt(p + q));
    d2eezy[8] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C44245 * C152 - C151 * C93) * C214 +
            (C44245 * C491 - C151 * C443) * C44260) *
               C77 +
           ((C163 - C164) * C214 + (C497 - C498) * C44260) * C78 + C506 * C79) *
              C4002 +
          (((C151 * C1200 - C44245 * C1264) * C214 +
            (C151 * C1580 - C44245 * C1638) * C44260) *
               C77 +
           ((C1273 - C1274) * C214 + (C1643 - C1644) * C44260) * C78 +
           ((C1277 - C1278) * C214 + (C1645 - C1646) * C44260) * C79) *
              C4003 +
          (((C44245 * C4055 - C151 * C4005) * C214 +
            (C44245 * C4313 - C151 * C4269) * C44260) *
               C77 +
           ((C44245 * C4056 - C151 * C4006) * C214 +
            (C44245 * C4314 - C151 * C4270) * C44260) *
               C78 +
           ((C44245 * C4057 - C151 * C4007) * C214 +
            (C44245 * C4315 - C151 * C4271) * C44260) *
               C79) *
              C4004) *
         C44195 * C44161) /
        (p * q * std::sqrt(p + q));
    d2eezz[8] +=
        (2 * std::pow(Pi, 2.5) *
         (((C214 * C215 - C544 * C93 - C214 * C443 + C44260 * C545) * C44245 *
               C77 +
           C572 * C78 + C573 * C79) *
              C4002 -
          (C1715 * C79 + C1716 * C78 +
           (C214 * C1330 - C544 * C1200 - C214 * C1580 + C44260 * C1698) *
               C44245 * C77) *
              C4003 +
          ((C214 * C4099 - C544 * C4005 - C214 * C4269 + C44260 * C4354) *
               C44245 * C77 +
           (C214 * C4100 - C544 * C4006 - C214 * C4270 + C44260 * C4355) *
               C44245 * C78 +
           (C214 * C4101 - C544 * C4007 - C214 * C4271 + C44260 * C4356) *
               C44245 * C79) *
              C4004) *
         C44195 * C44161) /
        (p * q * std::sqrt(p + q));
    d2eexx[9] +=
        (2 * std::pow(Pi, 2.5) *
         (((C4411 * C98 - C4412 * C93 - C4411 * C99 + C4407 * C108 +
            C4413 * C100 - C4414 * C94 - C4413 * C101 + C44312 * C109) *
               C44260 * C4409 +
           (C4411 * C636 - C4412 * C630 - C4411 * C637 + C4407 * C642 +
            C4413 * C634 - C4414 * C629 - C4413 * C635 + C44312 * C641) *
               C44260 * C44321) *
              C44212 * C44195 * C84 -
          ((C4413 * C632 - C4414 * C628 - C4413 * C633 + C44312 * C640 +
            C4411 * C634 - C4412 * C629 - C4411 * C635 + C4407 * C641) *
               C44260 * C44321 +
           (C4413 * C102 - C4414 * C95 - C4413 * C103 + C44312 * C110 +
            C4411 * C100 - C4412 * C94 - C4411 * C101 + C4407 * C109) *
               C44260 * C4409) *
              C44212 * C44195 * C85 +
          ((C4411 * C102 - C4412 * C95 - C4411 * C103 + C4407 * C110 +
            C4413 * C104 - C4414 * C96 - C4413 * C105 + C44312 * C111) *
               C44260 * C4409 +
           (C4411 * C632 - C4412 * C628 - C4411 * C633 + C4407 * C640 +
            C4413 * C638 - C4414 * C631 - C4413 * C639 + C44312 * C643) *
               C44260 * C44321) *
              C44212 * C44195 * C86)) /
        (p * q * std::sqrt(p + q));
    d2eexy[9] +=
        (2 * std::pow(Pi, 2.5) *
         (((C4409 * C152 - C4465 * C93 + C44321 * C694 - C4466 * C630) * C4411 +
           (C4409 * C157 - C4465 * C99 + C44321 * C698 - C4466 * C637) * C4407 +
           (C4468 - C4469 + C4470 - C4471) * C4413 +
           (C4472 - C4473 + C4474 - C4475) * C44312) *
              C44260 * C44212 * C44195 * C84 +
          ((C4469 - C4468 + C4471 - C4470) * C4411 +
           (C4473 - C4472 + C4475 - C4474) * C4407 +
           (C4476 - C4477 + C4478 - C4479) * C4413 +
           (C4480 - C4481 + C4482 - C4483) * C44312) *
              C44260 * C44212 * C44195 * C85 +
          ((C4477 - C4476 + C4479 - C4478) * C4411 +
           (C4481 - C4480 + C4483 - C4482) * C4407 +
           (C4409 * C155 - C4465 * C96 + C44321 * C697 - C4466 * C631) * C4413 +
           (C4409 * C160 - C4465 * C105 + C44321 * C701 - C4466 * C639) *
               C44312) *
              C44260 * C44212 * C44195 * C86)) /
        (p * q * std::sqrt(p + q));
    d2eexz[9] += (2 * std::pow(Pi, 2.5) *
                  ((((C44260 * C215 - C214 * C93) * C4411 +
                     (C44260 * C220 - C214 * C99) * C4407 +
                     (C226 - C227) * C4413 + (C228 - C229) * C44312) *
                        C4409 +
                    ((C44260 * C760 - C214 * C630) * C4411 +
                     (C44260 * C764 - C214 * C637) * C4407 +
                     (C770 - C769) * C4413 + (C772 - C771) * C44312) *
                        C44321) *
                       C44212 * C44195 * C84 +
                   (((C227 - C226) * C4411 + (C229 - C228) * C4407 +
                     (C231 - C230) * C4413 + (C233 - C232) * C44312) *
                        C4409 +
                    ((C769 - C770) * C4411 + (C771 - C772) * C4407 +
                     (C773 - C774) * C4413 + (C775 - C776) * C44312) *
                        C44321) *
                       C44212 * C44195 * C85 +
                   ((C238 * C4411 + C239 * C4407 + (C235 - C234) * C4413 +
                     (C237 - C236) * C44312) *
                        C4409 +
                    ((C774 - C773) * C4411 + (C776 - C775) * C4407 +
                     (C44260 * C763 - C214 * C631) * C4413 +
                     (C44260 * C767 - C214 * C639) * C44312) *
                        C44321) *
                       C44212 * C44195 * C86)) /
                 (p * q * std::sqrt(p + q));
    d2eeyx[9] +=
        (2 * std::pow(Pi, 2.5) *
         (((C4407 * C98 - C4411 * C93 + C44312 * C100 - C4413 * C94) * C4465 +
           (C4407 * C282 - C4411 * C277 + C44312 * C283 - C4413 * C278) *
               C4409 +
           (C4407 * C636 - C4411 * C630 + C44312 * C634 - C4413 * C629) *
               C4466 +
           (C4407 * C830 - C4411 * C826 + C44312 * C831 - C4413 * C827) *
               C44321) *
              C44260 * C44212 * C44195 * C84 +
          ((C4411 * C94 - C4407 * C100 + C4413 * C95 - C44312 * C102) * C4465 +
           (C4411 * C278 - C4407 * C283 + C4413 * C279 - C44312 * C284) *
               C4409 +
           (C4411 * C629 - C4407 * C634 + C4413 * C628 - C44312 * C632) *
               C4466 +
           (C4411 * C827 - C4407 * C831 + C4413 * C828 - C44312 * C832) *
               C44321) *
              C44260 * C44212 * C44195 * C85 +
          ((C4407 * C102 - C4411 * C95 + C44312 * C104 - C4413 * C96) * C4465 +
           (C4407 * C284 - C4411 * C279 + C44312 * C285 - C4413 * C280) *
               C4409 +
           (C4407 * C632 - C4411 * C628 + C44312 * C638 - C4413 * C631) *
               C4466 +
           (C4407 * C832 - C4411 * C828 + C44312 * C833 - C4413 * C829) *
               C44321) *
              C44260 * C44212 * C44195 * C86)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[9] +=
        (2 * std::pow(Pi, 2.5) *
         (((C4465 * C152 - C4633 * C93 - C4465 * C277 + C4409 * C326 +
            C4466 * C694 - C4634 * C630 - C4466 * C826 + C44321 * C886) *
               C4407 +
           (C4660 + C4661) * C44312) *
              C44260 * C44212 * C44195 * C84 -
          ((C4662 + C4663) * C44312 + (C4661 + C4660) * C4407) * C44260 *
              C44212 * C44195 * C85 +
          ((C4663 + C4662) * C4407 +
           (C4465 * C155 - C4633 * C96 - C4465 * C280 + C4409 * C329 +
            C4466 * C697 - C4634 * C631 - C4466 * C829 + C44321 * C887) *
               C44312) *
              C44260 * C44212 * C44195 * C86)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[9] += (2 * std::pow(Pi, 2.5) *
                  ((((C44260 * C215 - C214 * C93) * C4465 +
                     (C44260 * C390 - C214 * C277) * C4409 +
                     (C44260 * C760 - C214 * C630) * C4466 +
                     (C44260 * C952 - C214 * C826) * C44321) *
                        C4407 +
                    ((C226 - C227) * C4465 + (C396 - C397) * C4409 +
                     (C770 - C769) * C4466 + (C958 - C957) * C44321) *
                        C44312) *
                       C44212 * C44195 * C84 +
                   (((C227 - C226) * C4465 + (C397 - C396) * C4409 +
                     (C769 - C770) * C4466 + (C957 - C958) * C44321) *
                        C4407 +
                    ((C231 - C230) * C4465 + (C400 - C399) * C4409 +
                     (C773 - C774) * C4466 + (C959 - C960) * C44321) *
                        C44312) *
                       C44212 * C44195 * C85 +
                   ((C238 * C4465 + C403 * C4409 + (C774 - C773) * C4466 +
                     (C960 - C959) * C44321) *
                        C4407 +
                    ((C235 - C234) * C4465 + (C402 - C401) * C4409 +
                     (C44260 * C763 - C214 * C631) * C4466 +
                     (C44260 * C955 - C214 * C829) * C44321) *
                        C44312) *
                       C44212 * C44195 * C86)) /
                 (p * q * std::sqrt(p + q));
    d2eezx[9] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4407 * C98 - C4411 * C93 + C44312 * C100 - C4413 * C94) * C214 +
            (C4407 * C448 - C4411 * C443 + C44312 * C449 - C4413 * C444) *
                C44260) *
               C4409 +
           ((C4407 * C636 - C4411 * C630 + C44312 * C634 - C4413 * C629) *
                C214 +
            (C4407 * C1014 - C4411 * C1010 + C44312 * C1015 - C4413 * C1011) *
                C44260) *
               C44321) *
              C44212 * C44195 * C84 +
          (((C4411 * C94 - C4407 * C100 + C4413 * C95 - C44312 * C102) * C214 +
            (C4411 * C444 - C4407 * C449 + C4413 * C445 - C44312 * C450) *
                C44260) *
               C4409 +
           ((C4411 * C629 - C4407 * C634 + C4413 * C628 - C44312 * C632) *
                C214 +
            (C4411 * C1011 - C4407 * C1015 + C4413 * C1012 - C44312 * C1016) *
                C44260) *
               C44321) *
              C44212 * C44195 * C85 +
          (((C4407 * C102 - C4411 * C95 + C44312 * C104 - C4413 * C96) * C214 +
            (C4407 * C450 - C4411 * C445 + C44312 * C451 - C4413 * C446) *
                C44260) *
               C4409 +
           ((C4407 * C632 - C4411 * C628 + C44312 * C638 - C4413 * C631) *
                C214 +
            (C4407 * C1016 - C4411 * C1012 + C44312 * C1017 - C4413 * C1013) *
                C44260) *
               C44321) *
              C44212 * C44195 * C86)) /
        (p * q * std::sqrt(p + q));
    d2eezy[9] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4409 * C152 - C4465 * C93 + C44321 * C694 - C4466 * C630) * C214 +
            (C4409 * C491 - C4465 * C443 + C44321 * C1068 - C4466 * C1010) *
                C44260) *
               C4407 +
           ((C4468 - C4469 + C4470 - C4471) * C214 +
            (C4814 - C4815 + C4816 - C4817) * C44260) *
               C44312) *
              C44212 * C44195 * C84 +
          (((C4469 - C4468 + C4471 - C4470) * C214 +
            (C4815 - C4814 + C4817 - C4816) * C44260) *
               C4407 +
           ((C4476 - C4477 + C4478 - C4479) * C214 +
            (C4818 - C4819 + C4820 - C4821) * C44260) *
               C44312) *
              C44212 * C44195 * C85 +
          (((C4477 - C4476 + C4479 - C4478) * C214 +
            (C4819 - C4818 + C4821 - C4820) * C44260) *
               C4407 +
           ((C4409 * C155 - C4465 * C96 + C44321 * C697 - C4466 * C631) * C214 +
            (C4409 * C494 - C4465 * C446 + C44321 * C1071 - C4466 * C1013) *
                C44260) *
               C44312) *
              C44212 * C44195 * C86)) /
        (p * q * std::sqrt(p + q));
    d2eezz[9] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C214 * C215 - C544 * C93 - C214 * C443 + C44260 * C545) * C4409 +
            (C214 * C760 - C544 * C630 - C214 * C1010 + C44260 * C1128) *
                C44321) *
               C4407 +
           (C4872 + C4873) * C44312) *
              C44212 * C44195 * C84 -
          ((C4874 + C4875) * C44312 + (C4873 + C4872) * C4407) * C44212 *
              C44195 * C85 +
          ((C4875 + C4874) * C4407 +
           (C571 * C4409 +
            (C214 * C763 - C544 * C631 - C214 * C1013 + C44260 * C1129) *
                C44321) *
               C44312) *
              C44212 * C44195 * C86)) /
        (p * q * std::sqrt(p + q));
    d2eexx[10] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4411 * C98 - C4412 * C93 - C4411 * C99 + C4407 * C108 +
             C4413 * C100 - C4414 * C94 - C4413 * C101 + C44312 * C109) *
                C44260 * C4409 +
            (C4966 + C4967) * C44260 * C44321) *
               C44212 * C624 -
           ((C4413 * C2217 - C4414 * C2213 - C4413 * C2218 + C44312 * C2222 +
             C4411 * C2215 - C4412 * C2212 - C4411 * C2216 + C4407 * C2221) *
                C44260 * C44321 +
            (C4967 + C4966) * C44260 * C4409) *
               C44212 * C44317) *
              C626 +
          (((C4968 + C4969) * C44260 * C4409 +
            (C4411 * C2217 - C4412 * C2213 - C4411 * C2218 + C4407 * C2222 +
             C4413 * C2219 - C4414 * C2214 - C4413 * C2220 + C44312 * C2223) *
                C44260 * C44321) *
               C44212 * C44317 -
           ((C4969 + C4968) * C44260 * C44321 +
            (C4413 * C102 - C4414 * C95 - C4413 * C103 + C44312 * C110 +
             C4411 * C100 - C4412 * C94 - C4411 * C101 + C4407 * C109) *
                C44260 * C4409) *
               C44212 * C624) *
              C44315)) /
        (p * q * std::sqrt(p + q));
    d2eexy[10] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4409 * C152 - C4465 * C93 + C44321 * C694 - C4466 * C630) *
                C4411 +
            (C4409 * C157 - C4465 * C99 + C44321 * C698 - C4466 * C637) *
                C4407 +
            (C4468 - C4469 + C4470 - C4471) * C4413 +
            (C4472 - C4473 + C4474 - C4475) * C44312) *
               C44260 * C44212 * C624 +
           ((C4465 * C630 - C4409 * C694 + C4466 * C2212 - C44321 * C2262) *
                C4411 +
            (C4465 * C637 - C4409 * C698 + C4466 * C2216 - C44321 * C2265) *
                C4407 +
            (C5036 - C5037 + C5038 - C5039) * C4413 +
            (C5040 - C5041 + C5042 - C5043) * C44312) *
               C44260 * C44212 * C44317) *
              C626 +
          (((C4469 - C4468 + C4471 - C4470) * C4411 +
            (C4473 - C4472 + C4475 - C4474) * C4407 +
            (C4476 - C4477 + C4478 - C4479) * C4413 +
            (C4480 - C4481 + C4482 - C4483) * C44312) *
               C44260 * C44212 * C624 +
           ((C5037 - C5036 + C5039 - C5038) * C4411 +
            (C5041 - C5040 + C5043 - C5042) * C4407 +
            (C4409 * C696 - C4465 * C628 + C44321 * C2264 - C4466 * C2214) *
                C4413 +
            (C4409 * C700 - C4465 * C633 + C44321 * C2267 - C4466 * C2220) *
                C44312) *
               C44260 * C44212 * C44317) *
              C44315)) /
        (p * q * std::sqrt(p + q));
    d2eexz[10] += (2 * std::pow(Pi, 2.5) *
                   (((((C44260 * C215 - C214 * C93) * C4411 +
                       (C44260 * C220 - C214 * C99) * C4407 +
                       (C226 - C227) * C4413 + (C228 - C229) * C44312) *
                          C4409 +
                      ((C5110 - C5111) * C4411 + (C5112 - C5113) * C4407 +
                       C5114 * C4413 + C5115 * C44312) *
                          C44321) *
                         C44212 * C624 +
                     (((C5111 - C5110) * C4411 + (C5113 - C5112) * C4407 +
                       C5116 * C4413 + C5117 * C44312) *
                          C4409 +
                      ((C214 * C2212 - C44260 * C2306) * C4411 +
                       (C214 * C2216 - C44260 * C2309) * C4407 +
                       (C5118 - C5119) * C4413 + (C5120 - C5121) * C44312) *
                          C44321) *
                         C44212 * C44317) *
                        C626 +
                    ((((C227 - C226) * C4411 + (C229 - C228) * C4407 +
                       (C231 - C230) * C4413 + (C233 - C232) * C44312) *
                          C4409 +
                      (C5116 * C4411 + C5117 * C4407 + (C773 - C774) * C4413 +
                       (C775 - C776) * C44312) *
                          C44321) *
                         C44212 * C624 +
                     ((C5114 * C4411 + C5115 * C4407 + (C774 - C773) * C4413 +
                       (C776 - C775) * C44312) *
                          C4409 +
                      ((C5119 - C5118) * C4411 + (C5121 - C5120) * C4407 +
                       (C44260 * C2308 - C214 * C2214) * C4413 +
                       (C44260 * C2311 - C214 * C2220) * C44312) *
                          C44321) *
                         C44212 * C44317) *
                        C44315)) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[10] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4407 * C98 - C4411 * C93 + C44312 * C100 - C4413 * C94) * C4465 +
            (C4407 * C282 - C4411 * C277 + C44312 * C283 - C4413 * C278) *
                C4409 +
            (C5188 - C5189 + C5190 - C5191) * C4466 +
            (C5192 - C5193 + C5194 - C5195) * C44321) *
               C44260 * C44212 * C624 +
           ((C5189 - C5188 + C5191 - C5190) * C4465 +
            (C5193 - C5192 + C5195 - C5194) * C4409 +
            (C4411 * C2212 - C4407 * C2215 + C4413 * C2213 - C44312 * C2217) *
                C4466 +
            (C4411 * C2350 - C4407 * C2353 + C4413 * C2351 - C44312 * C2354) *
                C44321) *
               C44260 * C44212 * C44317) *
              C626 +
          (((C4411 * C94 - C4407 * C100 + C4413 * C95 - C44312 * C102) * C4465 +
            (C4411 * C278 - C4407 * C283 + C4413 * C279 - C44312 * C284) *
                C4409 +
            (C5196 - C5197 + C5198 - C5199) * C4466 +
            (C5200 - C5201 + C5202 - C5203) * C44321) *
               C44260 * C44212 * C624 +
           ((C5197 - C5196 + C5199 - C5198) * C4465 +
            (C5201 - C5200 + C5203 - C5202) * C4409 +
            (C4407 * C2217 - C4411 * C2213 + C44312 * C2219 - C4413 * C2214) *
                C4466 +
            (C4407 * C2354 - C4411 * C2351 + C44312 * C2355 - C4413 * C2352) *
                C44321) *
               C44260 * C44212 * C44317) *
              C44315)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[10] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4465 * C152 - C4633 * C93 - C4465 * C277 + C4409 * C326 +
             C4466 * C694 - C4634 * C630 - C4466 * C826 + C44321 * C886) *
                C4407 +
            (C4660 + C4661) * C44312) *
               C44260 * C44212 * C624 -
           ((C5282 + C5283) * C44312 +
            (C4466 * C2262 - C4634 * C2212 - C4466 * C2350 + C44321 * C2394 +
             C4465 * C694 - C4633 * C630 - C4465 * C826 + C4409 * C886) *
                C4407) *
               C44260 * C44212 * C44317) *
              C626 +
          (((C5283 + C5282) * C4407 +
            (C4465 * C696 - C4633 * C628 - C4465 * C828 + C4409 * C884 +
             C4466 * C2264 - C4634 * C2214 - C4466 * C2352 + C44321 * C2396) *
                C44312) *
               C44260 * C44212 * C44317 -
           ((C4662 + C4663) * C44312 + (C4661 + C4660) * C4407) * C44260 *
               C44212 * C624) *
              C44315)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[10] += (2 * std::pow(Pi, 2.5) *
                   (((((C44260 * C215 - C214 * C93) * C4465 +
                       (C44260 * C390 - C214 * C277) * C4409 +
                       (C5110 - C5111) * C4466 + (C5350 - C5351) * C44321) *
                          C4407 +
                      ((C226 - C227) * C4465 + (C396 - C397) * C4409 +
                       C5114 * C4466 + C5352 * C44321) *
                          C44312) *
                         C44212 * C624 +
                     (((C5111 - C5110) * C4465 + (C5351 - C5350) * C4409 +
                       (C214 * C2212 - C44260 * C2306) * C4466 +
                       (C214 * C2350 - C44260 * C2435) * C44321) *
                          C4407 +
                      (C5116 * C4465 + C5353 * C4409 + (C5118 - C5119) * C4466 +
                       (C5354 - C5355) * C44321) *
                          C44312) *
                         C44212 * C44317) *
                        C626 +
                    ((((C227 - C226) * C4465 + (C397 - C396) * C4409 +
                       C5116 * C4466 + C5353 * C44321) *
                          C4407 +
                      ((C231 - C230) * C4465 + (C400 - C399) * C4409 +
                       (C773 - C774) * C4466 + (C959 - C960) * C44321) *
                          C44312) *
                         C44212 * C624 +
                     ((C5114 * C4465 + C5352 * C4409 + (C5119 - C5118) * C4466 +
                       (C5355 - C5354) * C44321) *
                          C4407 +
                      ((C774 - C773) * C4465 + (C960 - C959) * C4409 +
                       (C44260 * C2308 - C214 * C2214) * C4466 +
                       (C44260 * C2437 - C214 * C2352) * C44321) *
                          C44312) *
                         C44212 * C44317) *
                        C44315)) /
                  (p * q * std::sqrt(p + q));
    d2eezx[10] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C4407 * C98 - C4411 * C93 + C44312 * C100 - C4413 * C94) * C214 +
             (C4407 * C448 - C4411 * C443 + C44312 * C449 - C4413 * C444) *
                 C44260) *
                C4409 +
            ((C5188 - C5189 + C5190 - C5191) * C214 +
             (C5422 - C5423 + C5424 - C5425) * C44260) *
                C44321) *
               C44212 * C624 +
           (((C5189 - C5188 + C5191 - C5190) * C214 +
             (C5423 - C5422 + C5425 - C5424) * C44260) *
                C4409 +
            ((C4411 * C2212 - C4407 * C2215 + C4413 * C2213 - C44312 * C2217) *
                 C214 +
             (C4411 * C2476 - C4407 * C2479 + C4413 * C2477 - C44312 * C2480) *
                 C44260) *
                C44321) *
               C44212 * C44317) *
              C626 +
          ((((C4411 * C94 - C4407 * C100 + C4413 * C95 - C44312 * C102) * C214 +
             (C4411 * C444 - C4407 * C449 + C4413 * C445 - C44312 * C450) *
                 C44260) *
                C4409 +
            ((C5196 - C5197 + C5198 - C5199) * C214 +
             (C5426 - C5427 + C5428 - C5429) * C44260) *
                C44321) *
               C44212 * C624 +
           (((C5197 - C5196 + C5199 - C5198) * C214 +
             (C5427 - C5426 + C5429 - C5428) * C44260) *
                C4409 +
            ((C4407 * C2217 - C4411 * C2213 + C44312 * C2219 - C4413 * C2214) *
                 C214 +
             (C4407 * C2480 - C4411 * C2477 + C44312 * C2481 - C4413 * C2478) *
                 C44260) *
                C44321) *
               C44212 * C44317) *
              C44315)) /
        (p * q * std::sqrt(p + q));
    d2eezy[10] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C4409 * C152 - C4465 * C93 + C44321 * C694 - C4466 * C630) *
                 C214 +
             (C4409 * C491 - C4465 * C443 + C44321 * C1068 - C4466 * C1010) *
                 C44260) *
                C4407 +
            ((C4468 - C4469 + C4470 - C4471) * C214 +
             (C4814 - C4815 + C4816 - C4817) * C44260) *
                C44312) *
               C44212 * C624 +
           (((C4465 * C630 - C4409 * C694 + C4466 * C2212 - C44321 * C2262) *
                 C214 +
             (C4465 * C1010 - C4409 * C1068 + C4466 * C2476 - C44321 * C2520) *
                 C44260) *
                C4407 +
            ((C5036 - C5037 + C5038 - C5039) * C214 +
             (C5496 - C5497 + C5498 - C5499) * C44260) *
                C44312) *
               C44212 * C44317) *
              C626 +
          ((((C4469 - C4468 + C4471 - C4470) * C214 +
             (C4815 - C4814 + C4817 - C4816) * C44260) *
                C4407 +
            ((C4476 - C4477 + C4478 - C4479) * C214 +
             (C4818 - C4819 + C4820 - C4821) * C44260) *
                C44312) *
               C44212 * C624 +
           (((C5037 - C5036 + C5039 - C5038) * C214 +
             (C5497 - C5496 + C5499 - C5498) * C44260) *
                C4407 +
            ((C4409 * C696 - C4465 * C628 + C44321 * C2264 - C4466 * C2214) *
                 C214 +
             (C4409 * C1070 - C4465 * C1012 + C44321 * C2522 - C4466 * C2478) *
                 C44260) *
                C44312) *
               C44212 * C44317) *
              C44315)) /
        (p * q * std::sqrt(p + q));
    d2eezz[10] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C214 * C215 - C544 * C93 - C214 * C443 + C44260 * C545) * C4409 +
             C5579 * C44321) *
                C4407 +
            (C4872 + C4873) * C44312) *
               C44212 * C624 -
           ((C5581 + C5574) * C44312 +
            ((C214 * C2306 - C544 * C2212 - C214 * C2476 + C44260 * C2561) *
                 C44321 +
             C5579 * C4409) *
                C4407) *
               C44212 * C44317) *
              C626 +
          (((C5574 + C5581) * C4407 +
            (C1143 * C4409 +
             (C214 * C2308 - C544 * C2214 - C214 * C2478 + C44260 * C2563) *
                 C44321) *
                C44312) *
               C44212 * C44317 -
           ((C4874 + C4875) * C44312 + (C4873 + C4872) * C4407) * C44212 *
               C624) *
              C44315)) /
        (p * q * std::sqrt(p + q));
    d2eexx[11] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4411 * C98 - C4412 * C93 - C4411 * C99 + C4407 * C108 +
             C4413 * C100 - C4414 * C94 - C4413 * C101 + C44312 * C109) *
                C44260 * C4409 +
            (C4966 + C4967) * C44260 * C44321) *
               C1196 -
           ((C4413 * C2619 - C4414 * C2615 - C4413 * C2620 + C44312 * C2624 +
             C4411 * C2617 - C4412 * C2614 - C4411 * C2618 + C4407 * C2623) *
                C44260 * C44321 +
            (C4413 * C1204 - C4414 * C1199 - C4413 * C1205 + C44312 * C1211 +
             C4411 * C1206 - C4412 * C1200 - C4411 * C1207 + C4407 * C1212) *
                C44260 * C4409) *
               C44319) *
              C44195 * C626 +
          (((C4411 * C1204 - C4412 * C1199 - C4411 * C1205 + C4407 * C1211 +
             C4413 * C1202 - C4414 * C1198 - C4413 * C1203 + C44312 * C1210) *
                C44260 * C4409 +
            (C4411 * C2619 - C4412 * C2615 - C4411 * C2620 + C4407 * C2624 +
             C4413 * C2621 - C4414 * C2616 - C4413 * C2622 + C44312 * C2625) *
                C44260 * C44321) *
               C44319 -
           ((C4969 + C4968) * C44260 * C44321 +
            (C4413 * C102 - C4414 * C95 - C4413 * C103 + C44312 * C110 +
             C4411 * C100 - C4412 * C94 - C4411 * C101 + C4407 * C109) *
                C44260 * C4409) *
               C1196) *
              C44195 * C44315)) /
        (p * q * std::sqrt(p + q));
    d2eexy[11] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4409 * C152 - C4465 * C93 + C44321 * C694 - C4466 * C630) *
                C4411 +
            (C4409 * C157 - C4465 * C99 + C44321 * C698 - C4466 * C637) *
                C4407 +
            (C4468 - C4469 + C4470 - C4471) * C4413 +
            (C4472 - C4473 + C4474 - C4475) * C44312) *
               C44260 * C1196 +
           ((C4465 * C1200 - C4409 * C1264 + C4466 * C2614 - C44321 * C2676) *
                C4411 +
            (C4465 * C1207 - C4409 * C1268 + C4466 * C2618 - C44321 * C2679) *
                C4407 +
            (C5714 - C5715 + C5716 - C5717) * C4413 +
            (C5718 - C5719 + C5720 - C5721) * C44312) *
               C44260 * C44319) *
              C44195 * C626 +
          (((C4469 - C4468 + C4471 - C4470) * C4411 +
            (C4473 - C4472 + C4475 - C4474) * C4407 +
            (C4476 - C4477 + C4478 - C4479) * C4413 +
            (C4480 - C4481 + C4482 - C4483) * C44312) *
               C44260 * C1196 +
           ((C5715 - C5714 + C5717 - C5716) * C4411 +
            (C5719 - C5718 + C5721 - C5720) * C4407 +
            (C4409 * C1266 - C4465 * C1198 + C44321 * C2678 - C4466 * C2616) *
                C4413 +
            (C4409 * C1270 - C4465 * C1203 + C44321 * C2681 - C4466 * C2622) *
                C44312) *
               C44260 * C44319) *
              C44195 * C44315)) /
        (p * q * std::sqrt(p + q));
    d2eexz[11] += (2 * std::pow(Pi, 2.5) *
                   (((((C44260 * C215 - C214 * C93) * C4411 +
                       (C44260 * C220 - C214 * C99) * C4407 +
                       (C226 - C227) * C4413 + (C228 - C229) * C44312) *
                          C4409 +
                      ((C5110 - C5111) * C4411 + (C5112 - C5113) * C4407 +
                       C5114 * C4413 + C5115 * C44312) *
                          C44321) *
                         C1196 +
                     (((C214 * C1200 - C44260 * C1330) * C4411 +
                       (C214 * C1207 - C44260 * C1334) * C4407 +
                       (C1339 - C1340) * C4413 + (C1341 - C1342) * C44312) *
                          C4409 +
                      ((C214 * C2614 - C44260 * C2732) * C4411 +
                       (C214 * C2618 - C44260 * C2735) * C4407 +
                       (C5788 - C5789) * C4413 + (C5790 - C5791) * C44312) *
                          C44321) *
                         C44319) *
                        C44195 * C626 +
                    ((((C227 - C226) * C4411 + (C229 - C228) * C4407 +
                       (C231 - C230) * C4413 + (C233 - C232) * C44312) *
                          C4409 +
                      (C5116 * C4411 + C5117 * C4407 + (C773 - C774) * C4413 +
                       (C775 - C776) * C44312) *
                          C44321) *
                         C1196 +
                     (((C1340 - C1339) * C4411 + (C1342 - C1341) * C4407 +
                       (C1344 - C1343) * C4413 + (C1346 - C1345) * C44312) *
                          C4409 +
                      ((C5789 - C5788) * C4411 + (C5791 - C5790) * C4407 +
                       (C44260 * C2734 - C214 * C2616) * C4413 +
                       (C44260 * C2737 - C214 * C2622) * C44312) *
                          C44321) *
                         C44319) *
                        C44195 * C44315)) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[11] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4407 * C98 - C4411 * C93 + C44312 * C100 - C4413 * C94) * C4465 +
            (C4407 * C282 - C4411 * C277 + C44312 * C283 - C4413 * C278) *
                C4409 +
            (C5188 - C5189 + C5190 - C5191) * C4466 +
            (C5192 - C5193 + C5194 - C5195) * C44321) *
               C44260 * C1196 +
           ((C4411 * C1200 - C4407 * C1206 + C4413 * C1199 - C44312 * C1204) *
                C4465 +
            (C4411 * C1396 - C4407 * C1400 + C4413 * C1397 - C44312 * C1401) *
                C4409 +
            (C4411 * C2614 - C4407 * C2617 + C4413 * C2615 - C44312 * C2619) *
                C4466 +
            (C4411 * C2788 - C4407 * C2791 + C4413 * C2789 - C44312 * C2792) *
                C44321) *
               C44260 * C44319) *
              C44195 * C626 +
          (((C4411 * C94 - C4407 * C100 + C4413 * C95 - C44312 * C102) * C4465 +
            (C4411 * C278 - C4407 * C283 + C4413 * C279 - C44312 * C284) *
                C4409 +
            (C5196 - C5197 + C5198 - C5199) * C4466 +
            (C5200 - C5201 + C5202 - C5203) * C44321) *
               C44260 * C1196 +
           ((C4407 * C1204 - C4411 * C1199 + C44312 * C1202 - C4413 * C1198) *
                C4465 +
            (C4407 * C1401 - C4411 * C1397 + C44312 * C1402 - C4413 * C1398) *
                C4409 +
            (C4407 * C2619 - C4411 * C2615 + C44312 * C2621 - C4413 * C2616) *
                C4466 +
            (C4407 * C2792 - C4411 * C2789 + C44312 * C2793 - C4413 * C2790) *
                C44321) *
               C44260 * C44319) *
              C44195 * C44315)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[11] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4465 * C152 - C4633 * C93 - C4465 * C277 + C4409 * C326 +
             C4466 * C694 - C4634 * C630 - C4466 * C826 + C44321 * C886) *
                C4407 +
            (C4660 + C4661) * C44312) *
               C44260 * C1196 -
           ((C5936 + C5937) * C44312 +
            (C4466 * C2676 - C4634 * C2614 - C4466 * C2788 + C44321 * C2844 +
             C4465 * C1264 - C4633 * C1200 - C4465 * C1396 + C4409 * C1456) *
                C4407) *
               C44260 * C44319) *
              C44195 * C626 +
          (((C5937 + C5936) * C4407 +
            (C4465 * C1266 - C4633 * C1198 - C4465 * C1398 + C4409 * C1454 +
             C4466 * C2678 - C4634 * C2616 - C4466 * C2790 + C44321 * C2846) *
                C44312) *
               C44260 * C44319 -
           ((C4662 + C4663) * C44312 + (C4661 + C4660) * C4407) * C44260 *
               C1196) *
              C44195 * C44315)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[11] += (2 * std::pow(Pi, 2.5) *
                   (((((C44260 * C215 - C214 * C93) * C4465 +
                       (C44260 * C390 - C214 * C277) * C4409 +
                       (C5110 - C5111) * C4466 + (C5350 - C5351) * C44321) *
                          C4407 +
                      ((C226 - C227) * C4465 + (C396 - C397) * C4409 +
                       C5114 * C4466 + C5352 * C44321) *
                          C44312) *
                         C1196 +
                     (((C214 * C1200 - C44260 * C1330) * C4465 +
                       (C214 * C1396 - C44260 * C1522) * C4409 +
                       (C214 * C2614 - C44260 * C2732) * C4466 +
                       (C214 * C2788 - C44260 * C2897) * C44321) *
                          C4407 +
                      ((C1339 - C1340) * C4465 + (C1527 - C1528) * C4409 +
                       (C5788 - C5789) * C4466 + (C6004 - C6005) * C44321) *
                          C44312) *
                         C44319) *
                        C44195 * C626 +
                    ((((C227 - C226) * C4465 + (C397 - C396) * C4409 +
                       C5116 * C4466 + C5353 * C44321) *
                          C4407 +
                      ((C231 - C230) * C4465 + (C400 - C399) * C4409 +
                       (C773 - C774) * C4466 + (C959 - C960) * C44321) *
                          C44312) *
                         C1196 +
                     (((C1340 - C1339) * C4465 + (C1528 - C1527) * C4409 +
                       (C5789 - C5788) * C4466 + (C6005 - C6004) * C44321) *
                          C4407 +
                      ((C1344 - C1343) * C4465 + (C1530 - C1529) * C4409 +
                       (C44260 * C2734 - C214 * C2616) * C4466 +
                       (C44260 * C2899 - C214 * C2790) * C44321) *
                          C44312) *
                         C44319) *
                        C44195 * C44315)) /
                  (p * q * std::sqrt(p + q));
    d2eezx[11] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C4407 * C98 - C4411 * C93 + C44312 * C100 - C4413 * C94) * C214 +
             (C4407 * C448 - C4411 * C443 + C44312 * C449 - C4413 * C444) *
                 C44260) *
                C4409 +
            ((C5188 - C5189 + C5190 - C5191) * C214 +
             (C5422 - C5423 + C5424 - C5425) * C44260) *
                C44321) *
               C1196 +
           (((C4411 * C1200 - C4407 * C1206 + C4413 * C1199 - C44312 * C1204) *
                 C214 +
             (C4411 * C1580 - C4407 * C1584 + C4413 * C1581 - C44312 * C1585) *
                 C44260) *
                C4409 +
            ((C4411 * C2614 - C4407 * C2617 + C4413 * C2615 - C44312 * C2619) *
                 C214 +
             (C4411 * C2950 - C4407 * C2953 + C4413 * C2951 - C44312 * C2954) *
                 C44260) *
                C44321) *
               C44319) *
              C44195 * C626 +
          ((((C4411 * C94 - C4407 * C100 + C4413 * C95 - C44312 * C102) * C214 +
             (C4411 * C444 - C4407 * C449 + C4413 * C445 - C44312 * C450) *
                 C44260) *
                C4409 +
            ((C5196 - C5197 + C5198 - C5199) * C214 +
             (C5426 - C5427 + C5428 - C5429) * C44260) *
                C44321) *
               C1196 +
           (((C4407 * C1204 - C4411 * C1199 + C44312 * C1202 - C4413 * C1198) *
                 C214 +
             (C4407 * C1585 - C4411 * C1581 + C44312 * C1586 - C4413 * C1582) *
                 C44260) *
                C4409 +
            ((C4407 * C2619 - C4411 * C2615 + C44312 * C2621 - C4413 * C2616) *
                 C214 +
             (C4407 * C2954 - C4411 * C2951 + C44312 * C2955 - C4413 * C2952) *
                 C44260) *
                C44321) *
               C44319) *
              C44195 * C44315)) /
        (p * q * std::sqrt(p + q));
    d2eezy[11] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C4409 * C152 - C4465 * C93 + C44321 * C694 - C4466 * C630) *
                 C214 +
             (C4409 * C491 - C4465 * C443 + C44321 * C1068 - C4466 * C1010) *
                 C44260) *
                C4407 +
            ((C4468 - C4469 + C4470 - C4471) * C214 +
             (C4814 - C4815 + C4816 - C4817) * C44260) *
                C44312) *
               C1196 +
           (((C4465 * C1200 - C4409 * C1264 + C4466 * C2614 - C44321 * C2676) *
                 C214 +
             (C4465 * C1580 - C4409 * C1638 + C4466 * C2950 - C44321 * C3006) *
                 C44260) *
                C4407 +
            ((C5714 - C5715 + C5716 - C5717) * C214 +
             (C6138 - C6139 + C6140 - C6141) * C44260) *
                C44312) *
               C44319) *
              C44195 * C626 +
          ((((C4469 - C4468 + C4471 - C4470) * C214 +
             (C4815 - C4814 + C4817 - C4816) * C44260) *
                C4407 +
            ((C4476 - C4477 + C4478 - C4479) * C214 +
             (C4818 - C4819 + C4820 - C4821) * C44260) *
                C44312) *
               C1196 +
           (((C5715 - C5714 + C5717 - C5716) * C214 +
             (C6139 - C6138 + C6141 - C6140) * C44260) *
                C4407 +
            ((C4409 * C1266 - C4465 * C1198 + C44321 * C2678 - C4466 * C2616) *
                 C214 +
             (C4409 * C1640 - C4465 * C1582 + C44321 * C3008 - C4466 * C2952) *
                 C44260) *
                C44312) *
               C44319) *
              C44195 * C44315)) /
        (p * q * std::sqrt(p + q));
    d2eezz[11] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C214 * C215 - C544 * C93 - C214 * C443 + C44260 * C545) * C4409 +
             C5579 * C44321) *
                C4407 +
            (C4872 + C4873) * C44312) *
               C1196 -
           ((C6216 + C6212) * C44312 +
            ((C214 * C2732 - C544 * C2614 - C214 * C2950 + C44260 * C3059) *
                 C44321 +
             (C214 * C1330 - C544 * C1200 - C214 * C1580 + C44260 * C1698) *
                 C4409) *
                C4407) *
               C44319) *
              C44195 * C626 +
          (((C6212 + C6216) * C4407 +
            (C1713 * C4409 +
             (C214 * C2734 - C544 * C2616 - C214 * C2952 + C44260 * C3061) *
                 C44321) *
                C44312) *
               C44319 -
           ((C4874 + C4875) * C44312 + (C4873 + C4872) * C4407) * C1196) *
              C44195 * C44315)) /
        (p * q * std::sqrt(p + q));
    d2eexx[12] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4411 * C98 - C4412 * C93 - C4411 * C99 + C4407 * C108 +
             C4413 * C100 - C4414 * C94 - C4413 * C101 + C44312 * C109) *
                C44260 * C4409 +
            (C4966 + C4967) * C44260 * C44321) *
               C44212 * C1766 -
           ((C4413 * C2217 - C4414 * C2213 - C4413 * C2218 + C44312 * C2222 +
             C4411 * C2215 - C4412 * C2212 - C4411 * C2216 + C4407 * C2221) *
                C44260 * C44321 +
            (C4967 + C4966) * C44260 * C4409) *
               C44212 * C44317) *
              C1768 +
          (((C4968 + C4969) * C44260 * C4409 +
            (C4411 * C2217 - C4412 * C2213 - C4411 * C2218 + C4407 * C2222 +
             C4413 * C2219 - C4414 * C2214 - C4413 * C2220 + C44312 * C2223) *
                C44260 * C44321) *
               C44212 * C44317 -
           ((C4969 + C4968) * C44260 * C44321 +
            (C4413 * C102 - C4414 * C95 - C4413 * C103 + C44312 * C110 +
             C4411 * C100 - C4412 * C94 - C4411 * C101 + C4407 * C109) *
                C44260 * C4409) *
               C44212 * C1766) *
              C44315)) /
        (p * q * std::sqrt(p + q));
    d2eexy[12] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4409 * C152 - C4465 * C93 + C44321 * C694 - C4466 * C630) *
                C4411 +
            (C4409 * C157 - C4465 * C99 + C44321 * C698 - C4466 * C637) *
                C4407 +
            (C4468 - C4469 + C4470 - C4471) * C4413 +
            (C4472 - C4473 + C4474 - C4475) * C44312) *
               C44260 * C44212 * C1766 +
           ((C4465 * C630 - C4409 * C694 + C4466 * C2212 - C44321 * C2262) *
                C4411 +
            (C4465 * C637 - C4409 * C698 + C4466 * C2216 - C44321 * C2265) *
                C4407 +
            (C5036 - C5037 + C5038 - C5039) * C4413 +
            (C5040 - C5041 + C5042 - C5043) * C44312) *
               C44260 * C44212 * C44317) *
              C1768 +
          (((C4469 - C4468 + C4471 - C4470) * C4411 +
            (C4473 - C4472 + C4475 - C4474) * C4407 +
            (C4476 - C4477 + C4478 - C4479) * C4413 +
            (C4480 - C4481 + C4482 - C4483) * C44312) *
               C44260 * C44212 * C1766 +
           ((C5037 - C5036 + C5039 - C5038) * C4411 +
            (C5041 - C5040 + C5043 - C5042) * C4407 +
            (C4409 * C696 - C4465 * C628 + C44321 * C2264 - C4466 * C2214) *
                C4413 +
            (C4409 * C700 - C4465 * C633 + C44321 * C2267 - C4466 * C2220) *
                C44312) *
               C44260 * C44212 * C44317) *
              C44315)) /
        (p * q * std::sqrt(p + q));
    d2eexz[12] += (2 * std::pow(Pi, 2.5) *
                   (((((C44260 * C215 - C214 * C93) * C4411 +
                       (C44260 * C220 - C214 * C99) * C4407 +
                       (C226 - C227) * C4413 + (C228 - C229) * C44312) *
                          C4409 +
                      ((C5110 - C5111) * C4411 + (C5112 - C5113) * C4407 +
                       C5114 * C4413 + C5115 * C44312) *
                          C44321) *
                         C44212 * C1766 +
                     (((C5111 - C5110) * C4411 + (C5113 - C5112) * C4407 +
                       C5116 * C4413 + C5117 * C44312) *
                          C4409 +
                      ((C214 * C2212 - C44260 * C2306) * C4411 +
                       (C214 * C2216 - C44260 * C2309) * C4407 +
                       (C5118 - C5119) * C4413 + (C5120 - C5121) * C44312) *
                          C44321) *
                         C44212 * C44317) *
                        C1768 +
                    ((((C227 - C226) * C4411 + (C229 - C228) * C4407 +
                       (C231 - C230) * C4413 + (C233 - C232) * C44312) *
                          C4409 +
                      (C5116 * C4411 + C5117 * C4407 + (C773 - C774) * C4413 +
                       (C775 - C776) * C44312) *
                          C44321) *
                         C44212 * C1766 +
                     ((C5114 * C4411 + C5115 * C4407 + (C774 - C773) * C4413 +
                       (C776 - C775) * C44312) *
                          C4409 +
                      ((C5119 - C5118) * C4411 + (C5121 - C5120) * C4407 +
                       (C44260 * C2308 - C214 * C2214) * C4413 +
                       (C44260 * C2311 - C214 * C2220) * C44312) *
                          C44321) *
                         C44212 * C44317) *
                        C44315)) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[12] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4407 * C98 - C4411 * C93 + C44312 * C100 - C4413 * C94) * C4465 +
            (C4407 * C282 - C4411 * C277 + C44312 * C283 - C4413 * C278) *
                C4409 +
            (C5188 - C5189 + C5190 - C5191) * C4466 +
            (C5192 - C5193 + C5194 - C5195) * C44321) *
               C44260 * C44212 * C1766 +
           ((C5189 - C5188 + C5191 - C5190) * C4465 +
            (C5193 - C5192 + C5195 - C5194) * C4409 +
            (C4411 * C2212 - C4407 * C2215 + C4413 * C2213 - C44312 * C2217) *
                C4466 +
            (C4411 * C2350 - C4407 * C2353 + C4413 * C2351 - C44312 * C2354) *
                C44321) *
               C44260 * C44212 * C44317) *
              C1768 +
          (((C4411 * C94 - C4407 * C100 + C4413 * C95 - C44312 * C102) * C4465 +
            (C4411 * C278 - C4407 * C283 + C4413 * C279 - C44312 * C284) *
                C4409 +
            (C5196 - C5197 + C5198 - C5199) * C4466 +
            (C5200 - C5201 + C5202 - C5203) * C44321) *
               C44260 * C44212 * C1766 +
           ((C5197 - C5196 + C5199 - C5198) * C4465 +
            (C5201 - C5200 + C5203 - C5202) * C4409 +
            (C4407 * C2217 - C4411 * C2213 + C44312 * C2219 - C4413 * C2214) *
                C4466 +
            (C4407 * C2354 - C4411 * C2351 + C44312 * C2355 - C4413 * C2352) *
                C44321) *
               C44260 * C44212 * C44317) *
              C44315)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[12] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4465 * C152 - C4633 * C93 - C4465 * C277 + C4409 * C326 +
             C4466 * C694 - C4634 * C630 - C4466 * C826 + C44321 * C886) *
                C4407 +
            (C4660 + C4661) * C44312) *
               C44260 * C44212 * C1766 -
           ((C5282 + C5283) * C44312 +
            (C4466 * C2262 - C4634 * C2212 - C4466 * C2350 + C44321 * C2394 +
             C4465 * C694 - C4633 * C630 - C4465 * C826 + C4409 * C886) *
                C4407) *
               C44260 * C44212 * C44317) *
              C1768 +
          (((C5283 + C5282) * C4407 +
            (C4465 * C696 - C4633 * C628 - C4465 * C828 + C4409 * C884 +
             C4466 * C2264 - C4634 * C2214 - C4466 * C2352 + C44321 * C2396) *
                C44312) *
               C44260 * C44212 * C44317 -
           ((C4662 + C4663) * C44312 + (C4661 + C4660) * C4407) * C44260 *
               C44212 * C1766) *
              C44315)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[12] += (2 * std::pow(Pi, 2.5) *
                   (((((C44260 * C215 - C214 * C93) * C4465 +
                       (C44260 * C390 - C214 * C277) * C4409 +
                       (C5110 - C5111) * C4466 + (C5350 - C5351) * C44321) *
                          C4407 +
                      ((C226 - C227) * C4465 + (C396 - C397) * C4409 +
                       C5114 * C4466 + C5352 * C44321) *
                          C44312) *
                         C44212 * C1766 +
                     (((C5111 - C5110) * C4465 + (C5351 - C5350) * C4409 +
                       (C214 * C2212 - C44260 * C2306) * C4466 +
                       (C214 * C2350 - C44260 * C2435) * C44321) *
                          C4407 +
                      (C5116 * C4465 + C5353 * C4409 + (C5118 - C5119) * C4466 +
                       (C5354 - C5355) * C44321) *
                          C44312) *
                         C44212 * C44317) *
                        C1768 +
                    ((((C227 - C226) * C4465 + (C397 - C396) * C4409 +
                       C5116 * C4466 + C5353 * C44321) *
                          C4407 +
                      ((C231 - C230) * C4465 + (C400 - C399) * C4409 +
                       (C773 - C774) * C4466 + (C959 - C960) * C44321) *
                          C44312) *
                         C44212 * C1766 +
                     ((C5114 * C4465 + C5352 * C4409 + (C5119 - C5118) * C4466 +
                       (C5355 - C5354) * C44321) *
                          C4407 +
                      ((C774 - C773) * C4465 + (C960 - C959) * C4409 +
                       (C44260 * C2308 - C214 * C2214) * C4466 +
                       (C44260 * C2437 - C214 * C2352) * C44321) *
                          C44312) *
                         C44212 * C44317) *
                        C44315)) /
                  (p * q * std::sqrt(p + q));
    d2eezx[12] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C4407 * C98 - C4411 * C93 + C44312 * C100 - C4413 * C94) * C214 +
             (C4407 * C448 - C4411 * C443 + C44312 * C449 - C4413 * C444) *
                 C44260) *
                C4409 +
            ((C5188 - C5189 + C5190 - C5191) * C214 +
             (C5422 - C5423 + C5424 - C5425) * C44260) *
                C44321) *
               C44212 * C1766 +
           (((C5189 - C5188 + C5191 - C5190) * C214 +
             (C5423 - C5422 + C5425 - C5424) * C44260) *
                C4409 +
            ((C4411 * C2212 - C4407 * C2215 + C4413 * C2213 - C44312 * C2217) *
                 C214 +
             (C4411 * C2476 - C4407 * C2479 + C4413 * C2477 - C44312 * C2480) *
                 C44260) *
                C44321) *
               C44212 * C44317) *
              C1768 +
          ((((C4411 * C94 - C4407 * C100 + C4413 * C95 - C44312 * C102) * C214 +
             (C4411 * C444 - C4407 * C449 + C4413 * C445 - C44312 * C450) *
                 C44260) *
                C4409 +
            ((C5196 - C5197 + C5198 - C5199) * C214 +
             (C5426 - C5427 + C5428 - C5429) * C44260) *
                C44321) *
               C44212 * C1766 +
           (((C5197 - C5196 + C5199 - C5198) * C214 +
             (C5427 - C5426 + C5429 - C5428) * C44260) *
                C4409 +
            ((C4407 * C2217 - C4411 * C2213 + C44312 * C2219 - C4413 * C2214) *
                 C214 +
             (C4407 * C2480 - C4411 * C2477 + C44312 * C2481 - C4413 * C2478) *
                 C44260) *
                C44321) *
               C44212 * C44317) *
              C44315)) /
        (p * q * std::sqrt(p + q));
    d2eezy[12] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C4409 * C152 - C4465 * C93 + C44321 * C694 - C4466 * C630) *
                 C214 +
             (C4409 * C491 - C4465 * C443 + C44321 * C1068 - C4466 * C1010) *
                 C44260) *
                C4407 +
            ((C4468 - C4469 + C4470 - C4471) * C214 +
             (C4814 - C4815 + C4816 - C4817) * C44260) *
                C44312) *
               C44212 * C1766 +
           (((C4465 * C630 - C4409 * C694 + C4466 * C2212 - C44321 * C2262) *
                 C214 +
             (C4465 * C1010 - C4409 * C1068 + C4466 * C2476 - C44321 * C2520) *
                 C44260) *
                C4407 +
            ((C5036 - C5037 + C5038 - C5039) * C214 +
             (C5496 - C5497 + C5498 - C5499) * C44260) *
                C44312) *
               C44212 * C44317) *
              C1768 +
          ((((C4469 - C4468 + C4471 - C4470) * C214 +
             (C4815 - C4814 + C4817 - C4816) * C44260) *
                C4407 +
            ((C4476 - C4477 + C4478 - C4479) * C214 +
             (C4818 - C4819 + C4820 - C4821) * C44260) *
                C44312) *
               C44212 * C1766 +
           (((C5037 - C5036 + C5039 - C5038) * C214 +
             (C5497 - C5496 + C5499 - C5498) * C44260) *
                C4407 +
            ((C4409 * C696 - C4465 * C628 + C44321 * C2264 - C4466 * C2214) *
                 C214 +
             (C4409 * C1070 - C4465 * C1012 + C44321 * C2522 - C4466 * C2478) *
                 C44260) *
                C44312) *
               C44212 * C44317) *
              C44315)) /
        (p * q * std::sqrt(p + q));
    d2eezz[12] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C214 * C215 - C544 * C93 - C214 * C443 + C44260 * C545) * C4409 +
             C5579 * C44321) *
                C4407 +
            (C4872 + C4873) * C44312) *
               C44212 * C1766 -
           ((C5581 + C5574) * C44312 +
            ((C214 * C2306 - C544 * C2212 - C214 * C2476 + C44260 * C2561) *
                 C44321 +
             C5579 * C4409) *
                C4407) *
               C44212 * C44317) *
              C1768 +
          (((C5574 + C5581) * C4407 +
            (C1143 * C4409 +
             (C214 * C2308 - C544 * C2214 - C214 * C2478 + C44260 * C2563) *
                 C44321) *
                C44312) *
               C44212 * C44317 -
           ((C4874 + C4875) * C44312 + (C4873 + C4872) * C4407) * C44212 *
               C1766) *
              C44315)) /
        (p * q * std::sqrt(p + q));
    d2eexx[13] +=
        (2 * std::pow(Pi, 2.5) *
         (((C4411 * C98 - C4412 * C93 - C4411 * C99 + C4407 * C108 +
            C4413 * C100 - C4414 * C94 - C4413 * C101 + C44312 * C109) *
               C44260 * C4409 +
           (C4966 + C4967) * C44260 * C44321) *
              C44212 * C2208 -
          ((C6881 + C6882) * C44260 * C44321 +
           (C4967 + C4966) * C44260 * C4409) *
              C44212 * C2209 +
          ((C6882 + C6881) * C44260 * C4409 +
           (C4411 * C6862 - C4412 * C6860 - C4411 * C6863 + C4407 * C6866 +
            C4413 * C6864 - C4414 * C6861 - C4413 * C6865 + C44312 * C6867) *
               C44260 * C44321) *
              C44212 * C2210) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eexy[13] +=
        (2 * std::pow(Pi, 2.5) *
         (((C4409 * C152 - C4465 * C93 + C44321 * C694 - C4466 * C630) * C4411 +
           (C4409 * C157 - C4465 * C99 + C44321 * C698 - C4466 * C637) * C4407 +
           (C4468 - C4469 + C4470 - C4471) * C4413 +
           (C4472 - C4473 + C4474 - C4475) * C44312) *
              C44260 * C44212 * C2208 +
          ((C4465 * C630 - C4409 * C694 + C4466 * C2212 - C44321 * C2262) *
               C4411 +
           (C4465 * C637 - C4409 * C698 + C4466 * C2216 - C44321 * C2265) *
               C4407 +
           (C5036 - C5037 + C5038 - C5039) * C4413 +
           (C5040 - C5041 + C5042 - C5043) * C44312) *
              C44260 * C44212 * C2209 +
          ((C4409 * C2262 - C4465 * C2212 + C44321 * C6932 - C4466 * C6860) *
               C4411 +
           (C4409 * C2265 - C4465 * C2216 + C44321 * C6934 - C4466 * C6863) *
               C4407 +
           (C4409 * C2263 - C4465 * C2213 + C44321 * C6933 - C4466 * C6861) *
               C4413 +
           (C4409 * C2266 - C4465 * C2218 + C44321 * C6935 - C4466 * C6865) *
               C44312) *
              C44260 * C44212 * C2210) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eexz[13] += (2 * std::pow(Pi, 2.5) *
                   ((((C44260 * C215 - C214 * C93) * C4411 +
                      (C44260 * C220 - C214 * C99) * C4407 +
                      (C226 - C227) * C4413 + (C228 - C229) * C44312) *
                         C4409 +
                     ((C5110 - C5111) * C4411 + (C5112 - C5113) * C4407 +
                      C5114 * C4413 + C5115 * C44312) *
                         C44321) *
                        C44212 * C2208 +
                    (((C5111 - C5110) * C4411 + (C5113 - C5112) * C4407 +
                      C5116 * C4413 + C5117 * C44312) *
                         C4409 +
                     ((C6991 - C6992) * C4411 + (C6993 - C6994) * C4407 +
                      (C5118 - C5119) * C4413 + (C5120 - C5121) * C44312) *
                         C44321) *
                        C44212 * C2209 +
                    (((C6992 - C6991) * C4411 + (C6994 - C6993) * C4407 +
                      (C5119 - C5118) * C4413 + (C5121 - C5120) * C44312) *
                         C4409 +
                     ((C44260 * C6986 - C214 * C6860) * C4411 +
                      (C44260 * C6988 - C214 * C6863) * C4407 +
                      (C44260 * C6987 - C214 * C6861) * C4413 +
                      (C44260 * C6989 - C214 * C6865) * C44312) *
                         C44321) *
                        C44212 * C2210) *
                   C44161) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[13] +=
        (2 * std::pow(Pi, 2.5) *
         (((C4407 * C98 - C4411 * C93 + C44312 * C100 - C4413 * C94) * C4465 +
           (C4407 * C282 - C4411 * C277 + C44312 * C283 - C4413 * C278) *
               C4409 +
           (C5188 - C5189 + C5190 - C5191) * C4466 +
           (C5192 - C5193 + C5194 - C5195) * C44321) *
              C44260 * C44212 * C2208 +
          ((C5189 - C5188 + C5191 - C5190) * C4465 +
           (C5193 - C5192 + C5195 - C5194) * C4409 +
           (C7049 - C7050 + C7051 - C7052) * C4466 +
           (C7053 - C7054 + C7055 - C7056) * C44321) *
              C44260 * C44212 * C2209 +
          ((C7050 - C7049 + C7052 - C7051) * C4465 +
           (C7054 - C7053 + C7056 - C7055) * C4409 +
           (C4407 * C6862 - C4411 * C6860 + C44312 * C6864 - C4413 * C6861) *
               C4466 +
           (C4407 * C7046 - C4411 * C7044 + C44312 * C7047 - C4413 * C7045) *
               C44321) *
              C44260 * C44212 * C2210) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eeyy[13] +=
        (2 * std::pow(Pi, 2.5) *
         (((C4465 * C152 - C4633 * C93 - C4465 * C277 + C4409 * C326 +
            C4466 * C694 - C4634 * C630 - C4466 * C826 + C44321 * C886) *
               C4407 +
           (C4660 + C4661) * C44312) *
              C44260 * C44212 * C2208 -
          ((C5282 + C5283) * C44312 +
           (C4466 * C2262 - C4634 * C2212 - C4466 * C2350 + C44321 * C2394 +
            C4465 * C694 - C4633 * C630 - C4465 * C826 + C4409 * C886) *
               C4407) *
              C44260 * C44212 * C2209 +
          ((C4465 * C2262 - C4633 * C2212 - C4465 * C2350 + C4409 * C2394 +
            C4466 * C6932 - C4634 * C6860 - C4466 * C7044 + C44321 * C7106) *
               C4407 +
           (C4465 * C2263 - C4633 * C2213 - C4465 * C2351 + C4409 * C2395 +
            C4466 * C6933 - C4634 * C6861 - C4466 * C7045 + C44321 * C7107) *
               C44312) *
              C44260 * C44212 * C2210) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eeyz[13] += (2 * std::pow(Pi, 2.5) *
                   ((((C44260 * C215 - C214 * C93) * C4465 +
                      (C44260 * C390 - C214 * C277) * C4409 +
                      (C5110 - C5111) * C4466 + (C5350 - C5351) * C44321) *
                         C4407 +
                     ((C226 - C227) * C4465 + (C396 - C397) * C4409 +
                      C5114 * C4466 + C5352 * C44321) *
                         C44312) *
                        C44212 * C2208 +
                    (((C5111 - C5110) * C4465 + (C5351 - C5350) * C4409 +
                      (C6991 - C6992) * C4466 + (C7161 - C7162) * C44321) *
                         C4407 +
                     (C5116 * C4465 + C5353 * C4409 + (C5118 - C5119) * C4466 +
                      (C5354 - C5355) * C44321) *
                         C44312) *
                        C44212 * C2209 +
                    (((C6992 - C6991) * C4465 + (C7162 - C7161) * C4409 +
                      (C44260 * C6986 - C214 * C6860) * C4466 +
                      (C44260 * C7158 - C214 * C7044) * C44321) *
                         C4407 +
                     ((C5119 - C5118) * C4465 + (C5355 - C5354) * C4409 +
                      (C44260 * C6987 - C214 * C6861) * C4466 +
                      (C44260 * C7159 - C214 * C7045) * C44321) *
                         C44312) *
                        C44212 * C2210) *
                   C44161) /
                  (p * q * std::sqrt(p + q));
    d2eezx[13] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4407 * C98 - C4411 * C93 + C44312 * C100 - C4413 * C94) * C214 +
            (C4407 * C448 - C4411 * C443 + C44312 * C449 - C4413 * C444) *
                C44260) *
               C4409 +
           ((C5188 - C5189 + C5190 - C5191) * C214 +
            (C5422 - C5423 + C5424 - C5425) * C44260) *
               C44321) *
              C44212 * C2208 +
          (((C5189 - C5188 + C5191 - C5190) * C214 +
            (C5423 - C5422 + C5425 - C5424) * C44260) *
               C4409 +
           ((C7049 - C7050 + C7051 - C7052) * C214 +
            (C7217 - C7218 + C7219 - C7220) * C44260) *
               C44321) *
              C44212 * C2209 +
          (((C7050 - C7049 + C7052 - C7051) * C214 +
            (C7218 - C7217 + C7220 - C7219) * C44260) *
               C4409 +
           ((C4407 * C6862 - C4411 * C6860 + C44312 * C6864 - C4413 * C6861) *
                C214 +
            (C4407 * C7214 - C4411 * C7212 + C44312 * C7215 - C4413 * C7213) *
                C44260) *
               C44321) *
              C44212 * C2210) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eezy[13] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4409 * C152 - C4465 * C93 + C44321 * C694 - C4466 * C630) * C214 +
            (C4409 * C491 - C4465 * C443 + C44321 * C1068 - C4466 * C1010) *
                C44260) *
               C4407 +
           ((C4468 - C4469 + C4470 - C4471) * C214 +
            (C4814 - C4815 + C4816 - C4817) * C44260) *
               C44312) *
              C44212 * C2208 +
          (((C4465 * C630 - C4409 * C694 + C4466 * C2212 - C44321 * C2262) *
                C214 +
            (C4465 * C1010 - C4409 * C1068 + C4466 * C2476 - C44321 * C2520) *
                C44260) *
               C4407 +
           ((C5036 - C5037 + C5038 - C5039) * C214 +
            (C5496 - C5497 + C5498 - C5499) * C44260) *
               C44312) *
              C44212 * C2209 +
          (((C4409 * C2262 - C4465 * C2212 + C44321 * C6932 - C4466 * C6860) *
                C214 +
            (C4409 * C2520 - C4465 * C2476 + C44321 * C7270 - C4466 * C7212) *
                C44260) *
               C4407 +
           ((C4409 * C2263 - C4465 * C2213 + C44321 * C6933 - C4466 * C6861) *
                C214 +
            (C4409 * C2521 - C4465 * C2477 + C44321 * C7271 - C4466 * C7213) *
                C44260) *
               C44312) *
              C44212 * C2210) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eezz[13] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C214 * C215 - C544 * C93 - C214 * C443 + C44260 * C545) * C4409 +
            C5579 * C44321) *
               C4407 +
           (C4872 + C4873) * C44312) *
              C44212 * C2208 -
          ((C5581 + C5574) * C44312 +
           (C7331 * C44321 + C5579 * C4409) * C4407) *
              C44212 * C2209 +
          ((C7331 * C4409 +
            (C214 * C6986 - C544 * C6860 - C214 * C7212 + C44260 * C7322) *
                C44321) *
               C4407 +
           (C5580 * C4409 +
            (C214 * C6987 - C544 * C6861 - C214 * C7213 + C44260 * C7323) *
                C44321) *
               C44312) *
              C44212 * C2210) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eexx[14] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4411 * C98 - C4412 * C93 - C4411 * C99 + C4407 * C108 +
             C4413 * C100 - C4414 * C94 - C4413 * C101 + C44312 * C109) *
                C44260 * C4409 +
            (C4966 + C4967) * C44260 * C44321) *
               C1196 -
           ((C7418 + C7419) * C44260 * C44321 +
            (C4413 * C1204 - C4414 * C1199 - C4413 * C1205 + C44312 * C1211 +
             C4411 * C1206 - C4412 * C1200 - C4411 * C1207 + C4407 * C1212) *
                C44260 * C4409) *
               C44319) *
              C1766 +
          (((C7419 + C7418) * C44260 * C4409 +
            (C4411 * C7399 - C4412 * C7397 - C4411 * C7400 + C4407 * C7403 +
             C4413 * C7401 - C4414 * C7398 - C4413 * C7402 + C44312 * C7404) *
                C44260 * C44321) *
               C44319 -
           ((C6881 + C6882) * C44260 * C44321 +
            (C4967 + C4966) * C44260 * C4409) *
               C1196) *
              C44317) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eexy[14] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4409 * C152 - C4465 * C93 + C44321 * C694 - C4466 * C630) *
                C4411 +
            (C4409 * C157 - C4465 * C99 + C44321 * C698 - C4466 * C637) *
                C4407 +
            (C4468 - C4469 + C4470 - C4471) * C4413 +
            (C4472 - C4473 + C4474 - C4475) * C44312) *
               C44260 * C1196 +
           ((C4465 * C1200 - C4409 * C1264 + C4466 * C2614 - C44321 * C2676) *
                C4411 +
            (C4465 * C1207 - C4409 * C1268 + C4466 * C2618 - C44321 * C2679) *
                C4407 +
            (C5714 - C5715 + C5716 - C5717) * C4413 +
            (C5718 - C5719 + C5720 - C5721) * C44312) *
               C44260 * C44319) *
              C1766 +
          (((C4465 * C630 - C4409 * C694 + C4466 * C2212 - C44321 * C2262) *
                C4411 +
            (C4465 * C637 - C4409 * C698 + C4466 * C2216 - C44321 * C2265) *
                C4407 +
            (C5036 - C5037 + C5038 - C5039) * C4413 +
            (C5040 - C5041 + C5042 - C5043) * C44312) *
               C44260 * C1196 +
           ((C4409 * C2676 - C4465 * C2614 + C44321 * C7485 - C4466 * C7397) *
                C4411 +
            (C4409 * C2679 - C4465 * C2618 + C44321 * C7487 - C4466 * C7400) *
                C4407 +
            (C4409 * C2677 - C4465 * C2615 + C44321 * C7486 - C4466 * C7398) *
                C4413 +
            (C4409 * C2680 - C4465 * C2620 + C44321 * C7488 - C4466 * C7402) *
                C44312) *
               C44260 * C44319) *
              C44317) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eexz[14] += (2 * std::pow(Pi, 2.5) *
                   (((((C44260 * C215 - C214 * C93) * C4411 +
                       (C44260 * C220 - C214 * C99) * C4407 +
                       (C226 - C227) * C4413 + (C228 - C229) * C44312) *
                          C4409 +
                      ((C5110 - C5111) * C4411 + (C5112 - C5113) * C4407 +
                       C5114 * C4413 + C5115 * C44312) *
                          C44321) *
                         C1196 +
                     (((C214 * C1200 - C44260 * C1330) * C4411 +
                       (C214 * C1207 - C44260 * C1334) * C4407 +
                       (C1339 - C1340) * C4413 + (C1341 - C1342) * C44312) *
                          C4409 +
                      ((C7560 - C7561) * C4411 + (C7562 - C7563) * C4407 +
                       (C5788 - C5789) * C4413 + (C5790 - C5791) * C44312) *
                          C44321) *
                         C44319) *
                        C1766 +
                    ((((C5111 - C5110) * C4411 + (C5113 - C5112) * C4407 +
                       C5116 * C4413 + C5117 * C44312) *
                          C4409 +
                      ((C6991 - C6992) * C4411 + (C6993 - C6994) * C4407 +
                       (C5118 - C5119) * C4413 + (C5120 - C5121) * C44312) *
                          C44321) *
                         C1196 +
                     (((C7561 - C7560) * C4411 + (C7563 - C7562) * C4407 +
                       (C5789 - C5788) * C4413 + (C5791 - C5790) * C44312) *
                          C4409 +
                      ((C44260 * C7555 - C214 * C7397) * C4411 +
                       (C44260 * C7557 - C214 * C7400) * C4407 +
                       (C44260 * C7556 - C214 * C7398) * C4413 +
                       (C44260 * C7558 - C214 * C7402) * C44312) *
                          C44321) *
                         C44319) *
                        C44317) *
                   C44161) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[14] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4407 * C98 - C4411 * C93 + C44312 * C100 - C4413 * C94) * C4465 +
            (C4407 * C282 - C4411 * C277 + C44312 * C283 - C4413 * C278) *
                C4409 +
            (C5188 - C5189 + C5190 - C5191) * C4466 +
            (C5192 - C5193 + C5194 - C5195) * C44321) *
               C44260 * C1196 +
           ((C4411 * C1200 - C4407 * C1206 + C4413 * C1199 - C44312 * C1204) *
                C4465 +
            (C4411 * C1396 - C4407 * C1400 + C4413 * C1397 - C44312 * C1401) *
                C4409 +
            (C7634 - C7635 + C7636 - C7637) * C4466 +
            (C7638 - C7639 + C7640 - C7641) * C44321) *
               C44260 * C44319) *
              C1766 +
          (((C5189 - C5188 + C5191 - C5190) * C4465 +
            (C5193 - C5192 + C5195 - C5194) * C4409 +
            (C7049 - C7050 + C7051 - C7052) * C4466 +
            (C7053 - C7054 + C7055 - C7056) * C44321) *
               C44260 * C1196 +
           ((C7635 - C7634 + C7637 - C7636) * C4465 +
            (C7639 - C7638 + C7641 - C7640) * C4409 +
            (C4407 * C7399 - C4411 * C7397 + C44312 * C7401 - C4413 * C7398) *
                C4466 +
            (C4407 * C7631 - C4411 * C7629 + C44312 * C7632 - C4413 * C7630) *
                C44321) *
               C44260 * C44319) *
              C44317) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eeyy[14] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4465 * C152 - C4633 * C93 - C4465 * C277 + C4409 * C326 +
             C4466 * C694 - C4634 * C630 - C4466 * C826 + C44321 * C886) *
                C4407 +
            (C4660 + C4661) * C44312) *
               C44260 * C1196 -
           ((C5936 + C5937) * C44312 +
            (C4466 * C2676 - C4634 * C2614 - C4466 * C2788 + C44321 * C2844 +
             C4465 * C1264 - C4633 * C1200 - C4465 * C1396 + C4409 * C1456) *
                C4407) *
               C44260 * C44319) *
              C1766 +
          (((C4465 * C2676 - C4633 * C2614 - C4465 * C2788 + C4409 * C2844 +
             C4466 * C7485 - C4634 * C7397 - C4466 * C7629 + C44321 * C7707) *
                C4407 +
            (C4465 * C2677 - C4633 * C2615 - C4465 * C2789 + C4409 * C2845 +
             C4466 * C7486 - C4634 * C7398 - C4466 * C7630 + C44321 * C7708) *
                C44312) *
               C44260 * C44319 -
           ((C5282 + C5283) * C44312 +
            (C4466 * C2262 - C4634 * C2212 - C4466 * C2350 + C44321 * C2394 +
             C4465 * C694 - C4633 * C630 - C4465 * C826 + C4409 * C886) *
                C4407) *
               C44260 * C1196) *
              C44317) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eeyz[14] += (2 * std::pow(Pi, 2.5) *
                   (((((C44260 * C215 - C214 * C93) * C4465 +
                       (C44260 * C390 - C214 * C277) * C4409 +
                       (C5110 - C5111) * C4466 + (C5350 - C5351) * C44321) *
                          C4407 +
                      ((C226 - C227) * C4465 + (C396 - C397) * C4409 +
                       C5114 * C4466 + C5352 * C44321) *
                          C44312) *
                         C1196 +
                     (((C214 * C1200 - C44260 * C1330) * C4465 +
                       (C214 * C1396 - C44260 * C1522) * C4409 +
                       (C7560 - C7561) * C4466 + (C7778 - C7779) * C44321) *
                          C4407 +
                      ((C1339 - C1340) * C4465 + (C1527 - C1528) * C4409 +
                       (C5788 - C5789) * C4466 + (C6004 - C6005) * C44321) *
                          C44312) *
                         C44319) *
                        C1766 +
                    ((((C5111 - C5110) * C4465 + (C5351 - C5350) * C4409 +
                       (C6991 - C6992) * C4466 + (C7161 - C7162) * C44321) *
                          C4407 +
                      (C5116 * C4465 + C5353 * C4409 + (C5118 - C5119) * C4466 +
                       (C5354 - C5355) * C44321) *
                          C44312) *
                         C1196 +
                     (((C7561 - C7560) * C4465 + (C7779 - C7778) * C4409 +
                       (C44260 * C7555 - C214 * C7397) * C4466 +
                       (C44260 * C7775 - C214 * C7629) * C44321) *
                          C4407 +
                      ((C5789 - C5788) * C4465 + (C6005 - C6004) * C4409 +
                       (C44260 * C7556 - C214 * C7398) * C4466 +
                       (C44260 * C7776 - C214 * C7630) * C44321) *
                          C44312) *
                         C44319) *
                        C44317) *
                   C44161) /
                  (p * q * std::sqrt(p + q));
    d2eezx[14] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C4407 * C98 - C4411 * C93 + C44312 * C100 - C4413 * C94) * C214 +
             (C4407 * C448 - C4411 * C443 + C44312 * C449 - C4413 * C444) *
                 C44260) *
                C4409 +
            ((C5188 - C5189 + C5190 - C5191) * C214 +
             (C5422 - C5423 + C5424 - C5425) * C44260) *
                C44321) *
               C1196 +
           (((C4411 * C1200 - C4407 * C1206 + C4413 * C1199 - C44312 * C1204) *
                 C214 +
             (C4411 * C1580 - C4407 * C1584 + C4413 * C1581 - C44312 * C1585) *
                 C44260) *
                C4409 +
            ((C7634 - C7635 + C7636 - C7637) * C214 +
             (C7850 - C7851 + C7852 - C7853) * C44260) *
                C44321) *
               C44319) *
              C1766 +
          ((((C5189 - C5188 + C5191 - C5190) * C214 +
             (C5423 - C5422 + C5425 - C5424) * C44260) *
                C4409 +
            ((C7049 - C7050 + C7051 - C7052) * C214 +
             (C7217 - C7218 + C7219 - C7220) * C44260) *
                C44321) *
               C1196 +
           (((C7635 - C7634 + C7637 - C7636) * C214 +
             (C7851 - C7850 + C7853 - C7852) * C44260) *
                C4409 +
            ((C4407 * C7399 - C4411 * C7397 + C44312 * C7401 - C4413 * C7398) *
                 C214 +
             (C4407 * C7847 - C4411 * C7845 + C44312 * C7848 - C4413 * C7846) *
                 C44260) *
                C44321) *
               C44319) *
              C44317) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eezy[14] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C4409 * C152 - C4465 * C93 + C44321 * C694 - C4466 * C630) *
                 C214 +
             (C4409 * C491 - C4465 * C443 + C44321 * C1068 - C4466 * C1010) *
                 C44260) *
                C4407 +
            ((C4468 - C4469 + C4470 - C4471) * C214 +
             (C4814 - C4815 + C4816 - C4817) * C44260) *
                C44312) *
               C1196 +
           (((C4465 * C1200 - C4409 * C1264 + C4466 * C2614 - C44321 * C2676) *
                 C214 +
             (C4465 * C1580 - C4409 * C1638 + C4466 * C2950 - C44321 * C3006) *
                 C44260) *
                C4407 +
            ((C5714 - C5715 + C5716 - C5717) * C214 +
             (C6138 - C6139 + C6140 - C6141) * C44260) *
                C44312) *
               C44319) *
              C1766 +
          ((((C4465 * C630 - C4409 * C694 + C4466 * C2212 - C44321 * C2262) *
                 C214 +
             (C4465 * C1010 - C4409 * C1068 + C4466 * C2476 - C44321 * C2520) *
                 C44260) *
                C4407 +
            ((C5036 - C5037 + C5038 - C5039) * C214 +
             (C5496 - C5497 + C5498 - C5499) * C44260) *
                C44312) *
               C1196 +
           (((C4409 * C2676 - C4465 * C2614 + C44321 * C7485 - C4466 * C7397) *
                 C214 +
             (C4409 * C3006 - C4465 * C2950 + C44321 * C7919 - C4466 * C7845) *
                 C44260) *
                C4407 +
            ((C4409 * C2677 - C4465 * C2615 + C44321 * C7486 - C4466 * C7398) *
                 C214 +
             (C4409 * C3007 - C4465 * C2951 + C44321 * C7920 - C4466 * C7846) *
                 C44260) *
                C44312) *
               C44319) *
              C44317) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eezz[14] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C214 * C215 - C544 * C93 - C214 * C443 + C44260 * C545) * C4409 +
             C5579 * C44321) *
                C4407 +
            (C4872 + C4873) * C44312) *
               C1196 -
           ((C6216 + C6212) * C44312 +
            (C7996 * C44321 +
             (C214 * C1330 - C544 * C1200 - C214 * C1580 + C44260 * C1698) *
                 C4409) *
                C4407) *
               C44319) *
              C1766 +
          (((C7996 * C4409 +
             (C214 * C7555 - C544 * C7397 - C214 * C7845 + C44260 * C7987) *
                 C44321) *
                C4407 +
            (C6215 * C4409 +
             (C214 * C7556 - C544 * C7398 - C214 * C7846 + C44260 * C7988) *
                 C44321) *
                C44312) *
               C44319 -
           ((C5581 + C5574) * C44312 +
            (C7331 * C44321 + C5579 * C4409) * C4407) *
               C1196) *
              C44317) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eexx[15] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4411 * C98 - C4412 * C93 - C4411 * C99 + C4407 * C108 +
             C4413 * C100 - C4414 * C94 - C4413 * C101 + C44312 * C109) *
                C44260 * C4409 +
            (C4966 + C4967) * C44260 * C44321) *
               C3112 -
           ((C7418 + C7419) * C44260 * C44321 +
            (C4413 * C1204 - C4414 * C1199 - C4413 * C1205 + C44312 * C1211 +
             C4411 * C1206 - C4412 * C1200 - C4411 * C1207 + C4407 * C1212) *
                C44260 * C4409) *
               C44319) *
              C44195 * C1768 +
          (((C4411 * C1204 - C4412 * C1199 - C4411 * C1205 + C4407 * C1211 +
             C4413 * C1202 - C4414 * C1198 - C4413 * C1203 + C44312 * C1210) *
                C44260 * C4409 +
            (C4411 * C2619 - C4412 * C2615 - C4411 * C2620 + C4407 * C2624 +
             C4413 * C2621 - C4414 * C2616 - C4413 * C2622 + C44312 * C2625) *
                C44260 * C44321) *
               C44319 -
           ((C4969 + C4968) * C44260 * C44321 +
            (C4413 * C102 - C4414 * C95 - C4413 * C103 + C44312 * C110 +
             C4411 * C100 - C4412 * C94 - C4411 * C101 + C4407 * C109) *
                C44260 * C4409) *
               C3112) *
              C44195 * C44315)) /
        (p * q * std::sqrt(p + q));
    d2eexy[15] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4409 * C152 - C4465 * C93 + C44321 * C694 - C4466 * C630) *
                C4411 +
            (C4409 * C157 - C4465 * C99 + C44321 * C698 - C4466 * C637) *
                C4407 +
            (C4468 - C4469 + C4470 - C4471) * C4413 +
            (C4472 - C4473 + C4474 - C4475) * C44312) *
               C44260 * C3112 +
           ((C4465 * C1200 - C4409 * C1264 + C4466 * C2614 - C44321 * C2676) *
                C4411 +
            (C4465 * C1207 - C4409 * C1268 + C4466 * C2618 - C44321 * C2679) *
                C4407 +
            (C5714 - C5715 + C5716 - C5717) * C4413 +
            (C5718 - C5719 + C5720 - C5721) * C44312) *
               C44260 * C44319) *
              C44195 * C1768 +
          (((C4469 - C4468 + C4471 - C4470) * C4411 +
            (C4473 - C4472 + C4475 - C4474) * C4407 +
            (C4476 - C4477 + C4478 - C4479) * C4413 +
            (C4480 - C4481 + C4482 - C4483) * C44312) *
               C44260 * C3112 +
           ((C5715 - C5714 + C5717 - C5716) * C4411 +
            (C5719 - C5718 + C5721 - C5720) * C4407 +
            (C4409 * C1266 - C4465 * C1198 + C44321 * C2678 - C4466 * C2616) *
                C4413 +
            (C4409 * C1270 - C4465 * C1203 + C44321 * C2681 - C4466 * C2622) *
                C44312) *
               C44260 * C44319) *
              C44195 * C44315)) /
        (p * q * std::sqrt(p + q));
    d2eexz[15] += (2 * std::pow(Pi, 2.5) *
                   (((((C44260 * C215 - C214 * C93) * C4411 +
                       (C44260 * C220 - C214 * C99) * C4407 +
                       (C226 - C227) * C4413 + (C228 - C229) * C44312) *
                          C4409 +
                      ((C5110 - C5111) * C4411 + (C5112 - C5113) * C4407 +
                       C5114 * C4413 + C5115 * C44312) *
                          C44321) *
                         C3112 +
                     (((C214 * C1200 - C44260 * C1330) * C4411 +
                       (C214 * C1207 - C44260 * C1334) * C4407 +
                       (C1339 - C1340) * C4413 + (C1341 - C1342) * C44312) *
                          C4409 +
                      ((C7560 - C7561) * C4411 + (C7562 - C7563) * C4407 +
                       (C5788 - C5789) * C4413 + (C5790 - C5791) * C44312) *
                          C44321) *
                         C44319) *
                        C44195 * C1768 +
                    ((((C227 - C226) * C4411 + (C229 - C228) * C4407 +
                       (C231 - C230) * C4413 + (C233 - C232) * C44312) *
                          C4409 +
                      (C5116 * C4411 + C5117 * C4407 + (C773 - C774) * C4413 +
                       (C775 - C776) * C44312) *
                          C44321) *
                         C3112 +
                     (((C1340 - C1339) * C4411 + (C1342 - C1341) * C4407 +
                       (C1344 - C1343) * C4413 + (C1346 - C1345) * C44312) *
                          C4409 +
                      ((C5789 - C5788) * C4411 + (C5791 - C5790) * C4407 +
                       (C44260 * C2734 - C214 * C2616) * C4413 +
                       (C44260 * C2737 - C214 * C2622) * C44312) *
                          C44321) *
                         C44319) *
                        C44195 * C44315)) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[15] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4407 * C98 - C4411 * C93 + C44312 * C100 - C4413 * C94) * C4465 +
            (C4407 * C282 - C4411 * C277 + C44312 * C283 - C4413 * C278) *
                C4409 +
            (C5188 - C5189 + C5190 - C5191) * C4466 +
            (C5192 - C5193 + C5194 - C5195) * C44321) *
               C44260 * C3112 +
           ((C4411 * C1200 - C4407 * C1206 + C4413 * C1199 - C44312 * C1204) *
                C4465 +
            (C4411 * C1396 - C4407 * C1400 + C4413 * C1397 - C44312 * C1401) *
                C4409 +
            (C7634 - C7635 + C7636 - C7637) * C4466 +
            (C7638 - C7639 + C7640 - C7641) * C44321) *
               C44260 * C44319) *
              C44195 * C1768 +
          (((C4411 * C94 - C4407 * C100 + C4413 * C95 - C44312 * C102) * C4465 +
            (C4411 * C278 - C4407 * C283 + C4413 * C279 - C44312 * C284) *
                C4409 +
            (C5196 - C5197 + C5198 - C5199) * C4466 +
            (C5200 - C5201 + C5202 - C5203) * C44321) *
               C44260 * C3112 +
           ((C4407 * C1204 - C4411 * C1199 + C44312 * C1202 - C4413 * C1198) *
                C4465 +
            (C4407 * C1401 - C4411 * C1397 + C44312 * C1402 - C4413 * C1398) *
                C4409 +
            (C4407 * C2619 - C4411 * C2615 + C44312 * C2621 - C4413 * C2616) *
                C4466 +
            (C4407 * C2792 - C4411 * C2789 + C44312 * C2793 - C4413 * C2790) *
                C44321) *
               C44260 * C44319) *
              C44195 * C44315)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[15] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4465 * C152 - C4633 * C93 - C4465 * C277 + C4409 * C326 +
             C4466 * C694 - C4634 * C630 - C4466 * C826 + C44321 * C886) *
                C4407 +
            (C4660 + C4661) * C44312) *
               C44260 * C3112 -
           ((C5936 + C5937) * C44312 +
            (C4466 * C2676 - C4634 * C2614 - C4466 * C2788 + C44321 * C2844 +
             C4465 * C1264 - C4633 * C1200 - C4465 * C1396 + C4409 * C1456) *
                C4407) *
               C44260 * C44319) *
              C44195 * C1768 +
          (((C5937 + C5936) * C4407 +
            (C4465 * C1266 - C4633 * C1198 - C4465 * C1398 + C4409 * C1454 +
             C4466 * C2678 - C4634 * C2616 - C4466 * C2790 + C44321 * C2846) *
                C44312) *
               C44260 * C44319 -
           ((C4662 + C4663) * C44312 + (C4661 + C4660) * C4407) * C44260 *
               C3112) *
              C44195 * C44315)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[15] += (2 * std::pow(Pi, 2.5) *
                   (((((C44260 * C215 - C214 * C93) * C4465 +
                       (C44260 * C390 - C214 * C277) * C4409 +
                       (C5110 - C5111) * C4466 + (C5350 - C5351) * C44321) *
                          C4407 +
                      ((C226 - C227) * C4465 + (C396 - C397) * C4409 +
                       C5114 * C4466 + C5352 * C44321) *
                          C44312) *
                         C3112 +
                     (((C214 * C1200 - C44260 * C1330) * C4465 +
                       (C214 * C1396 - C44260 * C1522) * C4409 +
                       (C7560 - C7561) * C4466 + (C7778 - C7779) * C44321) *
                          C4407 +
                      ((C1339 - C1340) * C4465 + (C1527 - C1528) * C4409 +
                       (C5788 - C5789) * C4466 + (C6004 - C6005) * C44321) *
                          C44312) *
                         C44319) *
                        C44195 * C1768 +
                    ((((C227 - C226) * C4465 + (C397 - C396) * C4409 +
                       C5116 * C4466 + C5353 * C44321) *
                          C4407 +
                      ((C231 - C230) * C4465 + (C400 - C399) * C4409 +
                       (C773 - C774) * C4466 + (C959 - C960) * C44321) *
                          C44312) *
                         C3112 +
                     (((C1340 - C1339) * C4465 + (C1528 - C1527) * C4409 +
                       (C5789 - C5788) * C4466 + (C6005 - C6004) * C44321) *
                          C4407 +
                      ((C1344 - C1343) * C4465 + (C1530 - C1529) * C4409 +
                       (C44260 * C2734 - C214 * C2616) * C4466 +
                       (C44260 * C2899 - C214 * C2790) * C44321) *
                          C44312) *
                         C44319) *
                        C44195 * C44315)) /
                  (p * q * std::sqrt(p + q));
    d2eezx[15] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C4407 * C98 - C4411 * C93 + C44312 * C100 - C4413 * C94) * C214 +
             (C4407 * C448 - C4411 * C443 + C44312 * C449 - C4413 * C444) *
                 C44260) *
                C4409 +
            ((C5188 - C5189 + C5190 - C5191) * C214 +
             (C5422 - C5423 + C5424 - C5425) * C44260) *
                C44321) *
               C3112 +
           (((C4411 * C1200 - C4407 * C1206 + C4413 * C1199 - C44312 * C1204) *
                 C214 +
             (C4411 * C1580 - C4407 * C1584 + C4413 * C1581 - C44312 * C1585) *
                 C44260) *
                C4409 +
            ((C7634 - C7635 + C7636 - C7637) * C214 +
             (C7850 - C7851 + C7852 - C7853) * C44260) *
                C44321) *
               C44319) *
              C44195 * C1768 +
          ((((C4411 * C94 - C4407 * C100 + C4413 * C95 - C44312 * C102) * C214 +
             (C4411 * C444 - C4407 * C449 + C4413 * C445 - C44312 * C450) *
                 C44260) *
                C4409 +
            ((C5196 - C5197 + C5198 - C5199) * C214 +
             (C5426 - C5427 + C5428 - C5429) * C44260) *
                C44321) *
               C3112 +
           (((C4407 * C1204 - C4411 * C1199 + C44312 * C1202 - C4413 * C1198) *
                 C214 +
             (C4407 * C1585 - C4411 * C1581 + C44312 * C1586 - C4413 * C1582) *
                 C44260) *
                C4409 +
            ((C4407 * C2619 - C4411 * C2615 + C44312 * C2621 - C4413 * C2616) *
                 C214 +
             (C4407 * C2954 - C4411 * C2951 + C44312 * C2955 - C4413 * C2952) *
                 C44260) *
                C44321) *
               C44319) *
              C44195 * C44315)) /
        (p * q * std::sqrt(p + q));
    d2eezy[15] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C4409 * C152 - C4465 * C93 + C44321 * C694 - C4466 * C630) *
                 C214 +
             (C4409 * C491 - C4465 * C443 + C44321 * C1068 - C4466 * C1010) *
                 C44260) *
                C4407 +
            ((C4468 - C4469 + C4470 - C4471) * C214 +
             (C4814 - C4815 + C4816 - C4817) * C44260) *
                C44312) *
               C3112 +
           (((C4465 * C1200 - C4409 * C1264 + C4466 * C2614 - C44321 * C2676) *
                 C214 +
             (C4465 * C1580 - C4409 * C1638 + C4466 * C2950 - C44321 * C3006) *
                 C44260) *
                C4407 +
            ((C5714 - C5715 + C5716 - C5717) * C214 +
             (C6138 - C6139 + C6140 - C6141) * C44260) *
                C44312) *
               C44319) *
              C44195 * C1768 +
          ((((C4469 - C4468 + C4471 - C4470) * C214 +
             (C4815 - C4814 + C4817 - C4816) * C44260) *
                C4407 +
            ((C4476 - C4477 + C4478 - C4479) * C214 +
             (C4818 - C4819 + C4820 - C4821) * C44260) *
                C44312) *
               C3112 +
           (((C5715 - C5714 + C5717 - C5716) * C214 +
             (C6139 - C6138 + C6141 - C6140) * C44260) *
                C4407 +
            ((C4409 * C1266 - C4465 * C1198 + C44321 * C2678 - C4466 * C2616) *
                 C214 +
             (C4409 * C1640 - C4465 * C1582 + C44321 * C3008 - C4466 * C2952) *
                 C44260) *
                C44312) *
               C44319) *
              C44195 * C44315)) /
        (p * q * std::sqrt(p + q));
    d2eezz[15] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C214 * C215 - C544 * C93 - C214 * C443 + C44260 * C545) * C4409 +
             C5579 * C44321) *
                C4407 +
            (C4872 + C4873) * C44312) *
               C3112 -
           ((C6216 + C6212) * C44312 +
            (C7996 * C44321 +
             (C214 * C1330 - C544 * C1200 - C214 * C1580 + C44260 * C1698) *
                 C4409) *
                C4407) *
               C44319) *
              C44195 * C1768 +
          (((C6212 + C6216) * C4407 +
            (C1713 * C4409 +
             (C214 * C2734 - C544 * C2616 - C214 * C2952 + C44260 * C3061) *
                 C44321) *
                C44312) *
               C44319 -
           ((C4874 + C4875) * C44312 + (C4873 + C4872) * C4407) * C3112) *
              C44195 * C44315)) /
        (p * q * std::sqrt(p + q));
    d2eexx[16] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4411 * C98 - C4412 * C93 - C4411 * C99 + C4407 * C108 +
             C4413 * C100 - C4414 * C94 - C4413 * C101 + C44312 * C109) *
                C44260 * C4409 +
            (C4966 + C4967) * C44260 * C44321) *
               C3112 -
           ((C7418 + C7419) * C44260 * C44321 +
            (C4413 * C1204 - C4414 * C1199 - C4413 * C1205 + C44312 * C1211 +
             C4411 * C1206 - C4412 * C1200 - C4411 * C1207 + C4407 * C1212) *
                C44260 * C4409) *
               C44319) *
              C624 +
          (((C7419 + C7418) * C44260 * C4409 +
            (C4411 * C7399 - C4412 * C7397 - C4411 * C7400 + C4407 * C7403 +
             C4413 * C7401 - C4414 * C7398 - C4413 * C7402 + C44312 * C7404) *
                C44260 * C44321) *
               C44319 -
           ((C6881 + C6882) * C44260 * C44321 +
            (C4967 + C4966) * C44260 * C4409) *
               C3112) *
              C44317) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eexy[16] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4409 * C152 - C4465 * C93 + C44321 * C694 - C4466 * C630) *
                C4411 +
            (C4409 * C157 - C4465 * C99 + C44321 * C698 - C4466 * C637) *
                C4407 +
            (C4468 - C4469 + C4470 - C4471) * C4413 +
            (C4472 - C4473 + C4474 - C4475) * C44312) *
               C44260 * C3112 +
           ((C4465 * C1200 - C4409 * C1264 + C4466 * C2614 - C44321 * C2676) *
                C4411 +
            (C4465 * C1207 - C4409 * C1268 + C4466 * C2618 - C44321 * C2679) *
                C4407 +
            (C5714 - C5715 + C5716 - C5717) * C4413 +
            (C5718 - C5719 + C5720 - C5721) * C44312) *
               C44260 * C44319) *
              C624 +
          (((C4465 * C630 - C4409 * C694 + C4466 * C2212 - C44321 * C2262) *
                C4411 +
            (C4465 * C637 - C4409 * C698 + C4466 * C2216 - C44321 * C2265) *
                C4407 +
            (C5036 - C5037 + C5038 - C5039) * C4413 +
            (C5040 - C5041 + C5042 - C5043) * C44312) *
               C44260 * C3112 +
           ((C4409 * C2676 - C4465 * C2614 + C44321 * C7485 - C4466 * C7397) *
                C4411 +
            (C4409 * C2679 - C4465 * C2618 + C44321 * C7487 - C4466 * C7400) *
                C4407 +
            (C4409 * C2677 - C4465 * C2615 + C44321 * C7486 - C4466 * C7398) *
                C4413 +
            (C4409 * C2680 - C4465 * C2620 + C44321 * C7488 - C4466 * C7402) *
                C44312) *
               C44260 * C44319) *
              C44317) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eexz[16] += (2 * std::pow(Pi, 2.5) *
                   (((((C44260 * C215 - C214 * C93) * C4411 +
                       (C44260 * C220 - C214 * C99) * C4407 +
                       (C226 - C227) * C4413 + (C228 - C229) * C44312) *
                          C4409 +
                      ((C5110 - C5111) * C4411 + (C5112 - C5113) * C4407 +
                       C5114 * C4413 + C5115 * C44312) *
                          C44321) *
                         C3112 +
                     (((C214 * C1200 - C44260 * C1330) * C4411 +
                       (C214 * C1207 - C44260 * C1334) * C4407 +
                       (C1339 - C1340) * C4413 + (C1341 - C1342) * C44312) *
                          C4409 +
                      ((C7560 - C7561) * C4411 + (C7562 - C7563) * C4407 +
                       (C5788 - C5789) * C4413 + (C5790 - C5791) * C44312) *
                          C44321) *
                         C44319) *
                        C624 +
                    ((((C5111 - C5110) * C4411 + (C5113 - C5112) * C4407 +
                       C5116 * C4413 + C5117 * C44312) *
                          C4409 +
                      ((C6991 - C6992) * C4411 + (C6993 - C6994) * C4407 +
                       (C5118 - C5119) * C4413 + (C5120 - C5121) * C44312) *
                          C44321) *
                         C3112 +
                     (((C7561 - C7560) * C4411 + (C7563 - C7562) * C4407 +
                       (C5789 - C5788) * C4413 + (C5791 - C5790) * C44312) *
                          C4409 +
                      ((C44260 * C7555 - C214 * C7397) * C4411 +
                       (C44260 * C7557 - C214 * C7400) * C4407 +
                       (C44260 * C7556 - C214 * C7398) * C4413 +
                       (C44260 * C7558 - C214 * C7402) * C44312) *
                          C44321) *
                         C44319) *
                        C44317) *
                   C44161) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[16] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4407 * C98 - C4411 * C93 + C44312 * C100 - C4413 * C94) * C4465 +
            (C4407 * C282 - C4411 * C277 + C44312 * C283 - C4413 * C278) *
                C4409 +
            (C5188 - C5189 + C5190 - C5191) * C4466 +
            (C5192 - C5193 + C5194 - C5195) * C44321) *
               C44260 * C3112 +
           ((C4411 * C1200 - C4407 * C1206 + C4413 * C1199 - C44312 * C1204) *
                C4465 +
            (C4411 * C1396 - C4407 * C1400 + C4413 * C1397 - C44312 * C1401) *
                C4409 +
            (C7634 - C7635 + C7636 - C7637) * C4466 +
            (C7638 - C7639 + C7640 - C7641) * C44321) *
               C44260 * C44319) *
              C624 +
          (((C5189 - C5188 + C5191 - C5190) * C4465 +
            (C5193 - C5192 + C5195 - C5194) * C4409 +
            (C7049 - C7050 + C7051 - C7052) * C4466 +
            (C7053 - C7054 + C7055 - C7056) * C44321) *
               C44260 * C3112 +
           ((C7635 - C7634 + C7637 - C7636) * C4465 +
            (C7639 - C7638 + C7641 - C7640) * C4409 +
            (C4407 * C7399 - C4411 * C7397 + C44312 * C7401 - C4413 * C7398) *
                C4466 +
            (C4407 * C7631 - C4411 * C7629 + C44312 * C7632 - C4413 * C7630) *
                C44321) *
               C44260 * C44319) *
              C44317) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eeyy[16] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4465 * C152 - C4633 * C93 - C4465 * C277 + C4409 * C326 +
             C4466 * C694 - C4634 * C630 - C4466 * C826 + C44321 * C886) *
                C4407 +
            (C4660 + C4661) * C44312) *
               C44260 * C3112 -
           ((C5936 + C5937) * C44312 +
            (C4466 * C2676 - C4634 * C2614 - C4466 * C2788 + C44321 * C2844 +
             C4465 * C1264 - C4633 * C1200 - C4465 * C1396 + C4409 * C1456) *
                C4407) *
               C44260 * C44319) *
              C624 +
          (((C4465 * C2676 - C4633 * C2614 - C4465 * C2788 + C4409 * C2844 +
             C4466 * C7485 - C4634 * C7397 - C4466 * C7629 + C44321 * C7707) *
                C4407 +
            (C4465 * C2677 - C4633 * C2615 - C4465 * C2789 + C4409 * C2845 +
             C4466 * C7486 - C4634 * C7398 - C4466 * C7630 + C44321 * C7708) *
                C44312) *
               C44260 * C44319 -
           ((C5282 + C5283) * C44312 +
            (C4466 * C2262 - C4634 * C2212 - C4466 * C2350 + C44321 * C2394 +
             C4465 * C694 - C4633 * C630 - C4465 * C826 + C4409 * C886) *
                C4407) *
               C44260 * C3112) *
              C44317) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eeyz[16] += (2 * std::pow(Pi, 2.5) *
                   (((((C44260 * C215 - C214 * C93) * C4465 +
                       (C44260 * C390 - C214 * C277) * C4409 +
                       (C5110 - C5111) * C4466 + (C5350 - C5351) * C44321) *
                          C4407 +
                      ((C226 - C227) * C4465 + (C396 - C397) * C4409 +
                       C5114 * C4466 + C5352 * C44321) *
                          C44312) *
                         C3112 +
                     (((C214 * C1200 - C44260 * C1330) * C4465 +
                       (C214 * C1396 - C44260 * C1522) * C4409 +
                       (C7560 - C7561) * C4466 + (C7778 - C7779) * C44321) *
                          C4407 +
                      ((C1339 - C1340) * C4465 + (C1527 - C1528) * C4409 +
                       (C5788 - C5789) * C4466 + (C6004 - C6005) * C44321) *
                          C44312) *
                         C44319) *
                        C624 +
                    ((((C5111 - C5110) * C4465 + (C5351 - C5350) * C4409 +
                       (C6991 - C6992) * C4466 + (C7161 - C7162) * C44321) *
                          C4407 +
                      (C5116 * C4465 + C5353 * C4409 + (C5118 - C5119) * C4466 +
                       (C5354 - C5355) * C44321) *
                          C44312) *
                         C3112 +
                     (((C7561 - C7560) * C4465 + (C7779 - C7778) * C4409 +
                       (C44260 * C7555 - C214 * C7397) * C4466 +
                       (C44260 * C7775 - C214 * C7629) * C44321) *
                          C4407 +
                      ((C5789 - C5788) * C4465 + (C6005 - C6004) * C4409 +
                       (C44260 * C7556 - C214 * C7398) * C4466 +
                       (C44260 * C7776 - C214 * C7630) * C44321) *
                          C44312) *
                         C44319) *
                        C44317) *
                   C44161) /
                  (p * q * std::sqrt(p + q));
    d2eezx[16] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C4407 * C98 - C4411 * C93 + C44312 * C100 - C4413 * C94) * C214 +
             (C4407 * C448 - C4411 * C443 + C44312 * C449 - C4413 * C444) *
                 C44260) *
                C4409 +
            ((C5188 - C5189 + C5190 - C5191) * C214 +
             (C5422 - C5423 + C5424 - C5425) * C44260) *
                C44321) *
               C3112 +
           (((C4411 * C1200 - C4407 * C1206 + C4413 * C1199 - C44312 * C1204) *
                 C214 +
             (C4411 * C1580 - C4407 * C1584 + C4413 * C1581 - C44312 * C1585) *
                 C44260) *
                C4409 +
            ((C7634 - C7635 + C7636 - C7637) * C214 +
             (C7850 - C7851 + C7852 - C7853) * C44260) *
                C44321) *
               C44319) *
              C624 +
          ((((C5189 - C5188 + C5191 - C5190) * C214 +
             (C5423 - C5422 + C5425 - C5424) * C44260) *
                C4409 +
            ((C7049 - C7050 + C7051 - C7052) * C214 +
             (C7217 - C7218 + C7219 - C7220) * C44260) *
                C44321) *
               C3112 +
           (((C7635 - C7634 + C7637 - C7636) * C214 +
             (C7851 - C7850 + C7853 - C7852) * C44260) *
                C4409 +
            ((C4407 * C7399 - C4411 * C7397 + C44312 * C7401 - C4413 * C7398) *
                 C214 +
             (C4407 * C7847 - C4411 * C7845 + C44312 * C7848 - C4413 * C7846) *
                 C44260) *
                C44321) *
               C44319) *
              C44317) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eezy[16] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C4409 * C152 - C4465 * C93 + C44321 * C694 - C4466 * C630) *
                 C214 +
             (C4409 * C491 - C4465 * C443 + C44321 * C1068 - C4466 * C1010) *
                 C44260) *
                C4407 +
            ((C4468 - C4469 + C4470 - C4471) * C214 +
             (C4814 - C4815 + C4816 - C4817) * C44260) *
                C44312) *
               C3112 +
           (((C4465 * C1200 - C4409 * C1264 + C4466 * C2614 - C44321 * C2676) *
                 C214 +
             (C4465 * C1580 - C4409 * C1638 + C4466 * C2950 - C44321 * C3006) *
                 C44260) *
                C4407 +
            ((C5714 - C5715 + C5716 - C5717) * C214 +
             (C6138 - C6139 + C6140 - C6141) * C44260) *
                C44312) *
               C44319) *
              C624 +
          ((((C4465 * C630 - C4409 * C694 + C4466 * C2212 - C44321 * C2262) *
                 C214 +
             (C4465 * C1010 - C4409 * C1068 + C4466 * C2476 - C44321 * C2520) *
                 C44260) *
                C4407 +
            ((C5036 - C5037 + C5038 - C5039) * C214 +
             (C5496 - C5497 + C5498 - C5499) * C44260) *
                C44312) *
               C3112 +
           (((C4409 * C2676 - C4465 * C2614 + C44321 * C7485 - C4466 * C7397) *
                 C214 +
             (C4409 * C3006 - C4465 * C2950 + C44321 * C7919 - C4466 * C7845) *
                 C44260) *
                C4407 +
            ((C4409 * C2677 - C4465 * C2615 + C44321 * C7486 - C4466 * C7398) *
                 C214 +
             (C4409 * C3007 - C4465 * C2951 + C44321 * C7920 - C4466 * C7846) *
                 C44260) *
                C44312) *
               C44319) *
              C44317) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eezz[16] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C214 * C215 - C544 * C93 - C214 * C443 + C44260 * C545) * C4409 +
             C5579 * C44321) *
                C4407 +
            (C4872 + C4873) * C44312) *
               C3112 -
           ((C6216 + C6212) * C44312 +
            (C7996 * C44321 +
             (C214 * C1330 - C544 * C1200 - C214 * C1580 + C44260 * C1698) *
                 C4409) *
                C4407) *
               C44319) *
              C624 +
          (((C7996 * C4409 +
             (C214 * C7555 - C544 * C7397 - C214 * C7845 + C44260 * C7987) *
                 C44321) *
                C4407 +
            (C6215 * C4409 +
             (C214 * C7556 - C544 * C7398 - C214 * C7846 + C44260 * C7988) *
                 C44321) *
                C44312) *
               C44319 -
           ((C5581 + C5574) * C44312 +
            (C7331 * C44321 + C5579 * C4409) * C4407) *
               C3112) *
              C44317) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eexx[17] +=
        (2 * std::pow(Pi, 2.5) *
         (((C4411 * C98 - C4412 * C93 - C4411 * C99 + C4407 * C108 +
            C4413 * C100 - C4414 * C94 - C4413 * C101 + C44312 * C109) *
               C44260 * C4409 +
           (C4966 + C4967) * C44260 * C44321) *
              C4002 -
          ((C7418 + C7419) * C44260 * C44321 +
           (C4413 * C1204 - C4414 * C1199 - C4413 * C1205 + C44312 * C1211 +
            C4411 * C1206 - C4412 * C1200 - C4411 * C1207 + C4407 * C1212) *
               C44260 * C4409) *
              C4003 +
          ((C4411 * C4008 - C4412 * C4005 - C4411 * C4009 + C4407 * C4014 +
            C4413 * C4010 - C4414 * C4006 - C4413 * C4011 + C44312 * C4015) *
               C44260 * C4409 +
           (C4411 * C9236 - C4412 * C9234 - C4411 * C9237 + C4407 * C9240 +
            C4413 * C9238 - C4414 * C9235 - C4413 * C9239 + C44312 * C9241) *
               C44260 * C44321) *
              C4004) *
         C44195 * C44161) /
        (p * q * std::sqrt(p + q));
    d2eexy[17] +=
        (2 * std::pow(Pi, 2.5) *
         (((C4409 * C152 - C4465 * C93 + C44321 * C694 - C4466 * C630) * C4411 +
           (C4409 * C157 - C4465 * C99 + C44321 * C698 - C4466 * C637) * C4407 +
           (C4468 - C4469 + C4470 - C4471) * C4413 +
           (C4472 - C4473 + C4474 - C4475) * C44312) *
              C44260 * C4002 +
          ((C4465 * C1200 - C4409 * C1264 + C4466 * C2614 - C44321 * C2676) *
               C4411 +
           (C4465 * C1207 - C4409 * C1268 + C4466 * C2618 - C44321 * C2679) *
               C4407 +
           (C5714 - C5715 + C5716 - C5717) * C4413 +
           (C5718 - C5719 + C5720 - C5721) * C44312) *
              C44260 * C4003 +
          ((C4409 * C4055 - C4465 * C4005 + C44321 * C9292 - C4466 * C9234) *
               C4411 +
           (C4409 * C4058 - C4465 * C4009 + C44321 * C9294 - C4466 * C9237) *
               C4407 +
           (C4409 * C4056 - C4465 * C4006 + C44321 * C9293 - C4466 * C9235) *
               C4413 +
           (C4409 * C4059 - C4465 * C4011 + C44321 * C9295 - C4466 * C9239) *
               C44312) *
              C44260 * C4004) *
         C44195 * C44161) /
        (p * q * std::sqrt(p + q));
    d2eexz[17] += (2 * std::pow(Pi, 2.5) *
                   ((((C44260 * C215 - C214 * C93) * C4411 +
                      (C44260 * C220 - C214 * C99) * C4407 +
                      (C226 - C227) * C4413 + (C228 - C229) * C44312) *
                         C4409 +
                     ((C5110 - C5111) * C4411 + (C5112 - C5113) * C4407 +
                      C5114 * C4413 + C5115 * C44312) *
                         C44321) *
                        C4002 +
                    (((C214 * C1200 - C44260 * C1330) * C4411 +
                      (C214 * C1207 - C44260 * C1334) * C4407 +
                      (C1339 - C1340) * C4413 + (C1341 - C1342) * C44312) *
                         C4409 +
                     ((C7560 - C7561) * C4411 + (C7562 - C7563) * C4407 +
                      (C5788 - C5789) * C4413 + (C5790 - C5791) * C44312) *
                         C44321) *
                        C4003 +
                    (((C44260 * C4099 - C214 * C4005) * C4411 +
                      (C44260 * C4102 - C214 * C4009) * C4407 +
                      (C44260 * C4100 - C214 * C4006) * C4413 +
                      (C44260 * C4103 - C214 * C4011) * C44312) *
                         C4409 +
                     ((C44260 * C9346 - C214 * C9234) * C4411 +
                      (C44260 * C9348 - C214 * C9237) * C4407 +
                      (C44260 * C9347 - C214 * C9235) * C4413 +
                      (C44260 * C9349 - C214 * C9239) * C44312) *
                         C44321) *
                        C4004) *
                   C44195 * C44161) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[17] +=
        (2 * std::pow(Pi, 2.5) *
         (((C4407 * C98 - C4411 * C93 + C44312 * C100 - C4413 * C94) * C4465 +
           (C4407 * C282 - C4411 * C277 + C44312 * C283 - C4413 * C278) *
               C4409 +
           (C5188 - C5189 + C5190 - C5191) * C4466 +
           (C5192 - C5193 + C5194 - C5195) * C44321) *
              C44260 * C4002 +
          ((C4411 * C1200 - C4407 * C1206 + C4413 * C1199 - C44312 * C1204) *
               C4465 +
           (C4411 * C1396 - C4407 * C1400 + C4413 * C1397 - C44312 * C1401) *
               C4409 +
           (C7634 - C7635 + C7636 - C7637) * C4466 +
           (C7638 - C7639 + C7640 - C7641) * C44321) *
              C44260 * C4003 +
          ((C4407 * C4008 - C4411 * C4005 + C44312 * C4010 - C4413 * C4006) *
               C4465 +
           (C4407 * C4146 - C4411 * C4143 + C44312 * C4147 - C4413 * C4144) *
               C4409 +
           (C4407 * C9236 - C4411 * C9234 + C44312 * C9238 - C4413 * C9235) *
               C4466 +
           (C4407 * C9402 - C4411 * C9400 + C44312 * C9403 - C4413 * C9401) *
               C44321) *
              C44260 * C4004) *
         C44195 * C44161) /
        (p * q * std::sqrt(p + q));
    d2eeyy[17] +=
        (2 * std::pow(Pi, 2.5) *
         (((C4465 * C152 - C4633 * C93 - C4465 * C277 + C4409 * C326 +
            C4466 * C694 - C4634 * C630 - C4466 * C826 + C44321 * C886) *
               C4407 +
           (C4660 + C4661) * C44312) *
              C44260 * C4002 -
          ((C5936 + C5937) * C44312 +
           (C4466 * C2676 - C4634 * C2614 - C4466 * C2788 + C44321 * C2844 +
            C4465 * C1264 - C4633 * C1200 - C4465 * C1396 + C4409 * C1456) *
               C4407) *
              C44260 * C4003 +
          ((C4465 * C4055 - C4633 * C4005 - C4465 * C4143 + C4409 * C4187 +
            C4466 * C9292 - C4634 * C9234 - C4466 * C9400 + C44321 * C9454) *
               C4407 +
           (C4465 * C4056 - C4633 * C4006 - C4465 * C4144 + C4409 * C4188 +
            C4466 * C9293 - C4634 * C9235 - C4466 * C9401 + C44321 * C9455) *
               C44312) *
              C44260 * C4004) *
         C44195 * C44161) /
        (p * q * std::sqrt(p + q));
    d2eeyz[17] += (2 * std::pow(Pi, 2.5) *
                   ((((C44260 * C215 - C214 * C93) * C4465 +
                      (C44260 * C390 - C214 * C277) * C4409 +
                      (C5110 - C5111) * C4466 + (C5350 - C5351) * C44321) *
                         C4407 +
                     ((C226 - C227) * C4465 + (C396 - C397) * C4409 +
                      C5114 * C4466 + C5352 * C44321) *
                         C44312) *
                        C4002 +
                    (((C214 * C1200 - C44260 * C1330) * C4465 +
                      (C214 * C1396 - C44260 * C1522) * C4409 +
                      (C7560 - C7561) * C4466 + (C7778 - C7779) * C44321) *
                         C4407 +
                     ((C1339 - C1340) * C4465 + (C1527 - C1528) * C4409 +
                      (C5788 - C5789) * C4466 + (C6004 - C6005) * C44321) *
                         C44312) *
                        C4003 +
                    (((C44260 * C4099 - C214 * C4005) * C4465 +
                      (C44260 * C4228 - C214 * C4143) * C4409 +
                      (C44260 * C9346 - C214 * C9234) * C4466 +
                      (C44260 * C9506 - C214 * C9400) * C44321) *
                         C4407 +
                     ((C44260 * C4100 - C214 * C4006) * C4465 +
                      (C44260 * C4229 - C214 * C4144) * C4409 +
                      (C44260 * C9347 - C214 * C9235) * C4466 +
                      (C44260 * C9507 - C214 * C9401) * C44321) *
                         C44312) *
                        C4004) *
                   C44195 * C44161) /
                  (p * q * std::sqrt(p + q));
    d2eezx[17] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4407 * C98 - C4411 * C93 + C44312 * C100 - C4413 * C94) * C214 +
            (C4407 * C448 - C4411 * C443 + C44312 * C449 - C4413 * C444) *
                C44260) *
               C4409 +
           ((C5188 - C5189 + C5190 - C5191) * C214 +
            (C5422 - C5423 + C5424 - C5425) * C44260) *
               C44321) *
              C4002 +
          (((C4411 * C1200 - C4407 * C1206 + C4413 * C1199 - C44312 * C1204) *
                C214 +
            (C4411 * C1580 - C4407 * C1584 + C4413 * C1581 - C44312 * C1585) *
                C44260) *
               C4409 +
           ((C7634 - C7635 + C7636 - C7637) * C214 +
            (C7850 - C7851 + C7852 - C7853) * C44260) *
               C44321) *
              C4003 +
          (((C4407 * C4008 - C4411 * C4005 + C44312 * C4010 - C4413 * C4006) *
                C214 +
            (C4407 * C4272 - C4411 * C4269 + C44312 * C4273 - C4413 * C4270) *
                C44260) *
               C4409 +
           ((C4407 * C9236 - C4411 * C9234 + C44312 * C9238 - C4413 * C9235) *
                C214 +
            (C4407 * C9560 - C4411 * C9558 + C44312 * C9561 - C4413 * C9559) *
                C44260) *
               C44321) *
              C4004) *
         C44195 * C44161) /
        (p * q * std::sqrt(p + q));
    d2eezy[17] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4409 * C152 - C4465 * C93 + C44321 * C694 - C4466 * C630) * C214 +
            (C4409 * C491 - C4465 * C443 + C44321 * C1068 - C4466 * C1010) *
                C44260) *
               C4407 +
           ((C4468 - C4469 + C4470 - C4471) * C214 +
            (C4814 - C4815 + C4816 - C4817) * C44260) *
               C44312) *
              C4002 +
          (((C4465 * C1200 - C4409 * C1264 + C4466 * C2614 - C44321 * C2676) *
                C214 +
            (C4465 * C1580 - C4409 * C1638 + C4466 * C2950 - C44321 * C3006) *
                C44260) *
               C4407 +
           ((C5714 - C5715 + C5716 - C5717) * C214 +
            (C6138 - C6139 + C6140 - C6141) * C44260) *
               C44312) *
              C4003 +
          (((C4409 * C4055 - C4465 * C4005 + C44321 * C9292 - C4466 * C9234) *
                C214 +
            (C4409 * C4313 - C4465 * C4269 + C44321 * C9612 - C4466 * C9558) *
                C44260) *
               C4407 +
           ((C4409 * C4056 - C4465 * C4006 + C44321 * C9293 - C4466 * C9235) *
                C214 +
            (C4409 * C4314 - C4465 * C4270 + C44321 * C9613 - C4466 * C9559) *
                C44260) *
               C44312) *
              C4004) *
         C44195 * C44161) /
        (p * q * std::sqrt(p + q));
    d2eezz[17] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C214 * C215 - C544 * C93 - C214 * C443 + C44260 * C545) * C4409 +
            C5579 * C44321) *
               C4407 +
           (C4872 + C4873) * C44312) *
              C4002 -
          ((C6216 + C6212) * C44312 +
           (C7996 * C44321 +
            (C214 * C1330 - C544 * C1200 - C214 * C1580 + C44260 * C1698) *
                C4409) *
               C4407) *
              C4003 +
          (((C214 * C4099 - C544 * C4005 - C214 * C4269 + C44260 * C4354) *
                C4409 +
            (C214 * C9346 - C544 * C9234 - C214 * C9558 + C44260 * C9664) *
                C44321) *
               C4407 +
           ((C214 * C4100 - C544 * C4006 - C214 * C4270 + C44260 * C4355) *
                C4409 +
            (C214 * C9347 - C544 * C9235 - C214 * C9559 + C44260 * C9665) *
                C44321) *
               C44312) *
              C4004) *
         C44195 * C44161) /
        (p * q * std::sqrt(p + q));
    d2eexx[18] +=
        (2 * std::pow(Pi, 2.5) *
         (((C4411 * C98 - C4412 * C93 - C4411 * C99 + C4407 * C108 +
            C4413 * C100 - C4414 * C94 - C4413 * C101 + C44312 * C109) *
               C9716 +
           (C4411 * C1206 - C4412 * C1200 - C4411 * C1207 + C4407 * C1212 +
            C4413 * C1204 - C4414 * C1199 - C4413 * C1205 + C44312 * C1211) *
               C44323) *
              C44245 * C44212 * C44195 * C84 -
          ((C4413 * C1202 - C4414 * C1198 - C4413 * C1203 + C44312 * C1210 +
            C4411 * C1204 - C4412 * C1199 - C4411 * C1205 + C4407 * C1211) *
               C44323 +
           (C4413 * C102 - C4414 * C95 - C4413 * C103 + C44312 * C110 +
            C4411 * C100 - C4412 * C94 - C4411 * C101 + C4407 * C109) *
               C9716) *
              C44245 * C44212 * C44195 * C85 +
          ((C4411 * C102 - C4412 * C95 - C4411 * C103 + C4407 * C110 +
            C4413 * C104 - C4414 * C96 - C4413 * C105 + C44312 * C111) *
               C9716 +
           (C4411 * C1202 - C4412 * C1198 - C4411 * C1203 + C4407 * C1210 +
            C4413 * C1208 - C4414 * C1201 - C4413 * C1209 + C44312 * C1213) *
               C44323) *
              C44245 * C44212 * C44195 * C86)) /
        (p * q * std::sqrt(p + q));
    d2eexy[18] += (2 * std::pow(Pi, 2.5) *
                   ((((C44245 * C152 - C151 * C93) * C4411 +
                      (C44245 * C157 - C151 * C99) * C4407 +
                      (C163 - C164) * C4413 + (C165 - C166) * C44312) *
                         C9716 +
                     ((C44245 * C1264 - C151 * C1200) * C4411 +
                      (C44245 * C1268 - C151 * C1207) * C4407 +
                      (C1274 - C1273) * C4413 + (C1276 - C1275) * C44312) *
                         C44323) *
                        C44212 * C44195 * C84 +
                    (((C164 - C163) * C4411 + (C166 - C165) * C4407 +
                      (C168 - C167) * C4413 + (C170 - C169) * C44312) *
                         C9716 +
                     ((C1273 - C1274) * C4411 + (C1275 - C1276) * C4407 +
                      (C1277 - C1278) * C4413 + (C1279 - C1280) * C44312) *
                         C44323) *
                        C44212 * C44195 * C85 +
                    ((C175 * C4411 + C176 * C4407 + (C172 - C171) * C4413 +
                      (C174 - C173) * C44312) *
                         C9716 +
                     ((C1278 - C1277) * C4411 + (C1280 - C1279) * C4407 +
                      (C44245 * C1267 - C151 * C1201) * C4413 +
                      (C44245 * C1271 - C151 * C1209) * C44312) *
                         C44323) *
                        C44212 * C44195 * C86)) /
                  (p * q * std::sqrt(p + q));
    d2eexz[18] +=
        (2 * std::pow(Pi, 2.5) *
         (((C9716 * C215 - C9818 * C93 + C44323 * C1330 - C9819 * C1200) *
               C4411 +
           (C9716 * C220 - C9818 * C99 + C44323 * C1334 - C9819 * C1207) *
               C4407 +
           (C9821 - C9822 + C9823 - C9824) * C4413 +
           (C9825 - C9826 + C9827 - C9828) * C44312) *
              C44245 * C44212 * C44195 * C84 +
          ((C9822 - C9821 + C9824 - C9823) * C4411 +
           (C9826 - C9825 + C9828 - C9827) * C4407 +
           (C9829 - C9830 + C9831 - C9832) * C4413 +
           (C9833 - C9834 + C9835 - C9836) * C44312) *
              C44245 * C44212 * C44195 * C85 +
          ((C9830 - C9829 + C9832 - C9831) * C4411 +
           (C9834 - C9833 + C9836 - C9835) * C4407 +
           (C9716 * C218 - C9818 * C96 + C44323 * C1333 - C9819 * C1201) *
               C4413 +
           (C9716 * C223 - C9818 * C105 + C44323 * C1337 - C9819 * C1209) *
               C44312) *
              C44245 * C44212 * C44195 * C86)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[18] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4407 * C98 - C4411 * C93 + C44312 * C100 - C4413 * C94) * C151 +
            (C4407 * C282 - C4411 * C277 + C44312 * C283 - C4413 * C278) *
                C44245) *
               C9716 +
           ((C4407 * C1206 - C4411 * C1200 + C44312 * C1204 - C4413 * C1199) *
                C151 +
            (C4407 * C1400 - C4411 * C1396 + C44312 * C1401 - C4413 * C1397) *
                C44245) *
               C44323) *
              C44212 * C44195 * C84 +
          (((C4411 * C94 - C4407 * C100 + C4413 * C95 - C44312 * C102) * C151 +
            (C4411 * C278 - C4407 * C283 + C4413 * C279 - C44312 * C284) *
                C44245) *
               C9716 +
           ((C4411 * C1199 - C4407 * C1204 + C4413 * C1198 - C44312 * C1202) *
                C151 +
            (C4411 * C1397 - C4407 * C1401 + C4413 * C1398 - C44312 * C1402) *
                C44245) *
               C44323) *
              C44212 * C44195 * C85 +
          (((C4407 * C102 - C4411 * C95 + C44312 * C104 - C4413 * C96) * C151 +
            (C4407 * C284 - C4411 * C279 + C44312 * C285 - C4413 * C280) *
                C44245) *
               C9716 +
           ((C4407 * C1202 - C4411 * C1198 + C44312 * C1208 - C4413 * C1201) *
                C151 +
            (C4407 * C1402 - C4411 * C1398 + C44312 * C1403 - C4413 * C1399) *
                C44245) *
               C44323) *
              C44212 * C44195 * C86)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[18] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C151 * C152 - C325 * C93 - C151 * C277 + C44245 * C326) * C4407 +
            C350 * C44312) *
               C9716 +
           ((C151 * C1264 - C325 * C1200 - C151 * C1396 + C44245 * C1456) *
                C4407 +
            C1472 * C44312) *
               C44323) *
              C44212 * C44195 * C84 -
          ((C1471 * C44312 + C1472 * C4407) * C44323 +
           (C351 * C44312 + C350 * C4407) * C9716) *
              C44212 * C44195 * C85 +
          ((C351 * C4407 + C352 * C44312) * C9716 +
           (C1471 * C4407 +
            (C151 * C1267 - C325 * C1201 - C151 * C1399 + C44245 * C1457) *
                C44312) *
               C44323) *
              C44212 * C44195 * C86)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[18] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C9716 * C215 - C9818 * C93 + C44323 * C1330 - C9819 * C1200) *
                C151 +
            (C9716 * C390 - C9818 * C277 + C44323 * C1522 - C9819 * C1396) *
                C44245) *
               C4407 +
           ((C9821 - C9822 + C9823 - C9824) * C151 +
            (C9987 - C9988 + C9989 - C9990) * C44245) *
               C44312) *
              C44212 * C44195 * C84 +
          (((C9822 - C9821 + C9824 - C9823) * C151 +
            (C9988 - C9987 + C9990 - C9989) * C44245) *
               C4407 +
           ((C9829 - C9830 + C9831 - C9832) * C151 +
            (C9991 - C9992 + C9993 - C9994) * C44245) *
               C44312) *
              C44212 * C44195 * C85 +
          (((C9830 - C9829 + C9832 - C9831) * C151 +
            (C9992 - C9991 + C9994 - C9993) * C44245) *
               C4407 +
           ((C9716 * C218 - C9818 * C96 + C44323 * C1333 - C9819 * C1201) *
                C151 +
            (C9716 * C393 - C9818 * C280 + C44323 * C1525 - C9819 * C1399) *
                C44245) *
               C44312) *
              C44212 * C44195 * C86)) /
        (p * q * std::sqrt(p + q));
    d2eezx[18] +=
        (2 * std::pow(Pi, 2.5) *
         (((C4407 * C98 - C4411 * C93 + C44312 * C100 - C4413 * C94) * C9818 +
           (C4407 * C448 - C4411 * C443 + C44312 * C449 - C4413 * C444) *
               C9716 +
           (C4407 * C1206 - C4411 * C1200 + C44312 * C1204 - C4413 * C1199) *
               C9819 +
           (C4407 * C1584 - C4411 * C1580 + C44312 * C1585 - C4413 * C1581) *
               C44323) *
              C44245 * C44212 * C44195 * C84 +
          ((C4411 * C94 - C4407 * C100 + C4413 * C95 - C44312 * C102) * C9818 +
           (C4411 * C444 - C4407 * C449 + C4413 * C445 - C44312 * C450) *
               C9716 +
           (C4411 * C1199 - C4407 * C1204 + C4413 * C1198 - C44312 * C1202) *
               C9819 +
           (C4411 * C1581 - C4407 * C1585 + C4413 * C1582 - C44312 * C1586) *
               C44323) *
              C44245 * C44212 * C44195 * C85 +
          ((C4407 * C102 - C4411 * C95 + C44312 * C104 - C4413 * C96) * C9818 +
           (C4407 * C450 - C4411 * C445 + C44312 * C451 - C4413 * C446) *
               C9716 +
           (C4407 * C1202 - C4411 * C1198 + C44312 * C1208 - C4413 * C1201) *
               C9819 +
           (C4407 * C1586 - C4411 * C1582 + C44312 * C1587 - C4413 * C1583) *
               C44323) *
              C44245 * C44212 * C44195 * C86)) /
        (p * q * std::sqrt(p + q));
    d2eezy[18] += (2 * std::pow(Pi, 2.5) *
                   ((((C44245 * C152 - C151 * C93) * C9818 +
                      (C44245 * C491 - C151 * C443) * C9716 +
                      (C44245 * C1264 - C151 * C1200) * C9819 +
                      (C44245 * C1638 - C151 * C1580) * C44323) *
                         C4407 +
                     ((C163 - C164) * C9818 + (C497 - C498) * C9716 +
                      (C1274 - C1273) * C9819 + (C1644 - C1643) * C44323) *
                         C44312) *
                        C44212 * C44195 * C84 +
                    (((C164 - C163) * C9818 + (C498 - C497) * C9716 +
                      (C1273 - C1274) * C9819 + (C1643 - C1644) * C44323) *
                         C4407 +
                     ((C168 - C167) * C9818 + (C501 - C500) * C9716 +
                      (C1277 - C1278) * C9819 + (C1645 - C1646) * C44323) *
                         C44312) *
                        C44212 * C44195 * C85 +
                    ((C175 * C9818 + C504 * C9716 + (C1278 - C1277) * C9819 +
                      (C1646 - C1645) * C44323) *
                         C4407 +
                     ((C172 - C171) * C9818 + (C503 - C502) * C9716 +
                      (C44245 * C1267 - C151 * C1201) * C9819 +
                      (C44245 * C1641 - C151 * C1583) * C44323) *
                         C44312) *
                        C44212 * C44195 * C86)) /
                  (p * q * std::sqrt(p + q));
    d2eezz[18] +=
        (2 * std::pow(Pi, 2.5) *
         (((C9818 * C215 - C10144 * C93 - C9818 * C443 + C9716 * C545 +
            C9819 * C1330 - C10145 * C1200 - C9819 * C1580 + C44323 * C1698) *
               C44245 * C4407 +
           (C10171 + C10172) * C44245 * C44312) *
              C44212 * C44195 * C84 -
          ((C10173 + C10174) * C44245 * C44312 +
           (C10172 + C10171) * C44245 * C4407) *
              C44212 * C44195 * C85 +
          ((C10174 + C10173) * C44245 * C4407 +
           (C9818 * C218 - C10144 * C96 - C9818 * C446 + C9716 * C548 +
            C9819 * C1333 - C10145 * C1201 - C9819 * C1583 + C44323 * C1699) *
               C44245 * C44312) *
              C44212 * C44195 * C86)) /
        (p * q * std::sqrt(p + q));
    d2eexx[19] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4411 * C98 - C4412 * C93 - C4411 * C99 + C4407 * C108 +
             C4413 * C100 - C4414 * C94 - C4413 * C101 + C44312 * C109) *
                C9716 +
            (C4411 * C1206 - C4412 * C1200 - C4411 * C1207 + C4407 * C1212 +
             C4413 * C1204 - C4414 * C1199 - C4413 * C1205 + C44312 * C1211) *
                C44323) *
               C44245 * C44212 * C624 -
           ((C7418 + C7419) * C44323 + (C4967 + C4966) * C9716) * C44245 *
               C44212 * C44317) *
              C626 +
          (((C4968 + C4969) * C9716 +
            (C4411 * C2619 - C4412 * C2615 - C4411 * C2620 + C4407 * C2624 +
             C4413 * C2621 - C4414 * C2616 - C4413 * C2622 + C44312 * C2625) *
                C44323) *
               C44245 * C44212 * C44317 -
           ((C4413 * C1202 - C4414 * C1198 - C4413 * C1203 + C44312 * C1210 +
             C4411 * C1204 - C4412 * C1199 - C4411 * C1205 + C4407 * C1211) *
                C44323 +
            (C4413 * C102 - C4414 * C95 - C4413 * C103 + C44312 * C110 +
             C4411 * C100 - C4412 * C94 - C4411 * C101 + C4407 * C109) *
                C9716) *
               C44245 * C44212 * C624) *
              C44315)) /
        (p * q * std::sqrt(p + q));
    d2eexy[19] += (2 * std::pow(Pi, 2.5) *
                   (((((C44245 * C152 - C151 * C93) * C4411 +
                       (C44245 * C157 - C151 * C99) * C4407 +
                       (C163 - C164) * C4413 + (C165 - C166) * C44312) *
                          C9716 +
                      ((C44245 * C1264 - C151 * C1200) * C4411 +
                       (C44245 * C1268 - C151 * C1207) * C4407 +
                       (C1274 - C1273) * C4413 + (C1276 - C1275) * C44312) *
                          C44323) *
                         C44212 * C624 +
                     (((C151 * C630 - C44245 * C694) * C4411 +
                       (C151 * C637 - C44245 * C698) * C4407 +
                       (C703 - C704) * C4413 + (C705 - C706) * C44312) *
                          C9716 +
                      ((C151 * C2614 - C44245 * C2676) * C4411 +
                       (C151 * C2618 - C44245 * C2679) * C4407 +
                       (C10307 - C10308) * C4413 + (C10309 - C10310) * C44312) *
                          C44323) *
                         C44212 * C44317) *
                        C626 +
                    ((((C164 - C163) * C4411 + (C166 - C165) * C4407 +
                       (C168 - C167) * C4413 + (C170 - C169) * C44312) *
                          C9716 +
                      ((C1273 - C1274) * C4411 + (C1275 - C1276) * C4407 +
                       (C1277 - C1278) * C4413 + (C1279 - C1280) * C44312) *
                          C44323) *
                         C44212 * C624 +
                     (((C704 - C703) * C4411 + (C706 - C705) * C4407 +
                       (C708 - C707) * C4413 + (C710 - C709) * C44312) *
                          C9716 +
                      ((C10308 - C10307) * C4411 + (C10310 - C10309) * C4407 +
                       (C44245 * C2678 - C151 * C2616) * C4413 +
                       (C44245 * C2681 - C151 * C2622) * C44312) *
                          C44323) *
                         C44212 * C44317) *
                        C44315)) /
                  (p * q * std::sqrt(p + q));
    d2eexz[19] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C9716 * C215 - C9818 * C93 + C44323 * C1330 - C9819 * C1200) *
                C4411 +
            (C9716 * C220 - C9818 * C99 + C44323 * C1334 - C9819 * C1207) *
                C4407 +
            (C9821 - C9822 + C9823 - C9824) * C4413 +
            (C9825 - C9826 + C9827 - C9828) * C44312) *
               C44245 * C44212 * C624 +
           ((C9818 * C630 - C9716 * C760 + C9819 * C2614 - C44323 * C2732) *
                C4411 +
            (C9818 * C637 - C9716 * C764 + C9819 * C2618 - C44323 * C2735) *
                C4407 +
            (C10377 - C10378 + C10379 - C10380) * C4413 +
            (C10381 - C10382 + C10383 - C10384) * C44312) *
               C44245 * C44212 * C44317) *
              C626 +
          (((C9822 - C9821 + C9824 - C9823) * C4411 +
            (C9826 - C9825 + C9828 - C9827) * C4407 +
            (C9829 - C9830 + C9831 - C9832) * C4413 +
            (C9833 - C9834 + C9835 - C9836) * C44312) *
               C44245 * C44212 * C624 +
           ((C10378 - C10377 + C10380 - C10379) * C4411 +
            (C10382 - C10381 + C10384 - C10383) * C4407 +
            (C9716 * C762 - C9818 * C628 + C44323 * C2734 - C9819 * C2616) *
                C4413 +
            (C9716 * C766 - C9818 * C633 + C44323 * C2737 - C9819 * C2622) *
                C44312) *
               C44245 * C44212 * C44317) *
              C44315)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[19] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C4407 * C98 - C4411 * C93 + C44312 * C100 - C4413 * C94) * C151 +
             (C4407 * C282 - C4411 * C277 + C44312 * C283 - C4413 * C278) *
                 C44245) *
                C9716 +
            ((C4407 * C1206 - C4411 * C1200 + C44312 * C1204 - C4413 * C1199) *
                 C151 +
             (C4407 * C1400 - C4411 * C1396 + C44312 * C1401 - C4413 * C1397) *
                 C44245) *
                C44323) *
               C44212 * C624 +
           (((C5189 - C5188 + C5191 - C5190) * C151 +
             (C5193 - C5192 + C5195 - C5194) * C44245) *
                C9716 +
            ((C7634 - C7635 + C7636 - C7637) * C151 +
             (C7638 - C7639 + C7640 - C7641) * C44245) *
                C44323) *
               C44212 * C44317) *
              C626 +
          ((((C4411 * C94 - C4407 * C100 + C4413 * C95 - C44312 * C102) * C151 +
             (C4411 * C278 - C4407 * C283 + C4413 * C279 - C44312 * C284) *
                 C44245) *
                C9716 +
            ((C4411 * C1199 - C4407 * C1204 + C4413 * C1198 - C44312 * C1202) *
                 C151 +
             (C4411 * C1397 - C4407 * C1401 + C4413 * C1398 - C44312 * C1402) *
                 C44245) *
                C44323) *
               C44212 * C624 +
           (((C5197 - C5196 + C5199 - C5198) * C151 +
             (C5201 - C5200 + C5203 - C5202) * C44245) *
                C9716 +
            ((C4407 * C2619 - C4411 * C2615 + C44312 * C2621 - C4413 * C2616) *
                 C151 +
             (C4407 * C2792 - C4411 * C2789 + C44312 * C2793 - C4413 * C2790) *
                 C44245) *
                C44323) *
               C44212 * C44317) *
              C44315)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[19] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C151 * C152 - C325 * C93 - C151 * C277 + C44245 * C326) * C4407 +
             C350 * C44312) *
                C9716 +
            ((C151 * C1264 - C325 * C1200 - C151 * C1396 + C44245 * C1456) *
                 C4407 +
             C1472 * C44312) *
                C44323) *
               C44212 * C624 -
           ((C10523 * C44312 +
             (C151 * C2676 - C325 * C2614 - C151 * C2788 + C44245 * C2844) *
                 C4407) *
                C44323 +
            (C902 * C44312 +
             (C151 * C694 - C325 * C630 - C151 * C826 + C44245 * C886) *
                 C4407) *
                C9716) *
               C44212 * C44317) *
              C626 +
          (((C902 * C4407 + C901 * C44312) * C9716 +
            (C10523 * C4407 +
             (C151 * C2678 - C325 * C2616 - C151 * C2790 + C44245 * C2846) *
                 C44312) *
                C44323) *
               C44212 * C44317 -
           ((C1471 * C44312 + C1472 * C4407) * C44323 +
            (C351 * C44312 + C350 * C4407) * C9716) *
               C44212 * C624) *
              C44315)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[19] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C9716 * C215 - C9818 * C93 + C44323 * C1330 - C9819 * C1200) *
                 C151 +
             (C9716 * C390 - C9818 * C277 + C44323 * C1522 - C9819 * C1396) *
                 C44245) *
                C4407 +
            ((C9821 - C9822 + C9823 - C9824) * C151 +
             (C9987 - C9988 + C9989 - C9990) * C44245) *
                C44312) *
               C44212 * C624 +
           (((C9818 * C630 - C9716 * C760 + C9819 * C2614 - C44323 * C2732) *
                 C151 +
             (C9818 * C826 - C9716 * C952 + C9819 * C2788 - C44323 * C2897) *
                 C44245) *
                C4407 +
            ((C10377 - C10378 + C10379 - C10380) * C151 +
             (C10590 - C10591 + C10592 - C10593) * C44245) *
                C44312) *
               C44212 * C44317) *
              C626 +
          ((((C9822 - C9821 + C9824 - C9823) * C151 +
             (C9988 - C9987 + C9990 - C9989) * C44245) *
                C4407 +
            ((C9829 - C9830 + C9831 - C9832) * C151 +
             (C9991 - C9992 + C9993 - C9994) * C44245) *
                C44312) *
               C44212 * C624 +
           (((C10378 - C10377 + C10380 - C10379) * C151 +
             (C10591 - C10590 + C10593 - C10592) * C44245) *
                C4407 +
            ((C9716 * C762 - C9818 * C628 + C44323 * C2734 - C9819 * C2616) *
                 C151 +
             (C9716 * C954 - C9818 * C828 + C44323 * C2899 - C9819 * C2790) *
                 C44245) *
                C44312) *
               C44212 * C44317) *
              C44315)) /
        (p * q * std::sqrt(p + q));
    d2eezx[19] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4407 * C98 - C4411 * C93 + C44312 * C100 - C4413 * C94) * C9818 +
            (C4407 * C448 - C4411 * C443 + C44312 * C449 - C4413 * C444) *
                C9716 +
            (C4407 * C1206 - C4411 * C1200 + C44312 * C1204 - C4413 * C1199) *
                C9819 +
            (C4407 * C1584 - C4411 * C1580 + C44312 * C1585 - C4413 * C1581) *
                C44323) *
               C44245 * C44212 * C624 +
           ((C5189 - C5188 + C5191 - C5190) * C9818 +
            (C5423 - C5422 + C5425 - C5424) * C9716 +
            (C7634 - C7635 + C7636 - C7637) * C9819 +
            (C7850 - C7851 + C7852 - C7853) * C44323) *
               C44245 * C44212 * C44317) *
              C626 +
          (((C4411 * C94 - C4407 * C100 + C4413 * C95 - C44312 * C102) * C9818 +
            (C4411 * C444 - C4407 * C449 + C4413 * C445 - C44312 * C450) *
                C9716 +
            (C4411 * C1199 - C4407 * C1204 + C4413 * C1198 - C44312 * C1202) *
                C9819 +
            (C4411 * C1581 - C4407 * C1585 + C4413 * C1582 - C44312 * C1586) *
                C44323) *
               C44245 * C44212 * C624 +
           ((C5197 - C5196 + C5199 - C5198) * C9818 +
            (C5427 - C5426 + C5429 - C5428) * C9716 +
            (C4407 * C2619 - C4411 * C2615 + C44312 * C2621 - C4413 * C2616) *
                C9819 +
            (C4407 * C2954 - C4411 * C2951 + C44312 * C2955 - C4413 * C2952) *
                C44323) *
               C44245 * C44212 * C44317) *
              C44315)) /
        (p * q * std::sqrt(p + q));
    d2eezy[19] += (2 * std::pow(Pi, 2.5) *
                   (((((C44245 * C152 - C151 * C93) * C9818 +
                       (C44245 * C491 - C151 * C443) * C9716 +
                       (C44245 * C1264 - C151 * C1200) * C9819 +
                       (C44245 * C1638 - C151 * C1580) * C44323) *
                          C4407 +
                      ((C163 - C164) * C9818 + (C497 - C498) * C9716 +
                       (C1274 - C1273) * C9819 + (C1644 - C1643) * C44323) *
                          C44312) *
                         C44212 * C624 +
                     (((C151 * C630 - C44245 * C694) * C9818 +
                       (C151 * C1010 - C44245 * C1068) * C9716 +
                       (C151 * C2614 - C44245 * C2676) * C9819 +
                       (C151 * C2950 - C44245 * C3006) * C44323) *
                          C4407 +
                      ((C703 - C704) * C9818 + (C1073 - C1074) * C9716 +
                       (C10307 - C10308) * C9819 + (C10726 - C10727) * C44323) *
                          C44312) *
                         C44212 * C44317) *
                        C626 +
                    ((((C164 - C163) * C9818 + (C498 - C497) * C9716 +
                       (C1273 - C1274) * C9819 + (C1643 - C1644) * C44323) *
                          C4407 +
                      ((C168 - C167) * C9818 + (C501 - C500) * C9716 +
                       (C1277 - C1278) * C9819 + (C1645 - C1646) * C44323) *
                          C44312) *
                         C44212 * C624 +
                     (((C704 - C703) * C9818 + (C1074 - C1073) * C9716 +
                       (C10308 - C10307) * C9819 + (C10727 - C10726) * C44323) *
                          C4407 +
                      ((C708 - C707) * C9818 + (C1076 - C1075) * C9716 +
                       (C44245 * C2678 - C151 * C2616) * C9819 +
                       (C44245 * C3008 - C151 * C2952) * C44323) *
                          C44312) *
                         C44212 * C44317) *
                        C44315)) /
                  (p * q * std::sqrt(p + q));
    d2eezz[19] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C9818 * C215 - C10144 * C93 - C9818 * C443 + C9716 * C545 +
             C9819 * C1330 - C10145 * C1200 - C9819 * C1580 + C44323 * C1698) *
                C44245 * C4407 +
            (C10171 + C10172) * C44245 * C44312) *
               C44212 * C624 -
           ((C10806 + C10807) * C44245 * C44312 +
            (C9819 * C2732 - C10145 * C2614 - C9819 * C2950 + C44323 * C3059 +
             C9818 * C760 - C10144 * C630 - C9818 * C1010 + C9716 * C1128) *
                C44245 * C4407) *
               C44212 * C44317) *
              C626 +
          (((C10807 + C10806) * C44245 * C4407 +
            (C9818 * C762 - C10144 * C628 - C9818 * C1012 + C9716 * C1126 +
             C9819 * C2734 - C10145 * C2616 - C9819 * C2952 + C44323 * C3061) *
                C44245 * C44312) *
               C44212 * C44317 -
           ((C10173 + C10174) * C44245 * C44312 +
            (C10172 + C10171) * C44245 * C4407) *
               C44212 * C624) *
              C44315)) /
        (p * q * std::sqrt(p + q));
    d2eexx[20] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4411 * C98 - C4412 * C93 - C4411 * C99 + C4407 * C108 +
             C4413 * C100 - C4414 * C94 - C4413 * C101 + C44312 * C109) *
                C9716 +
            (C10898 + C10899) * C44323) *
               C44245 * C1196 -
           ((C4413 * C4010 - C4414 * C4006 - C4413 * C4011 + C44312 * C4015 +
             C4411 * C4008 - C4412 * C4005 - C4411 * C4009 + C4407 * C4014) *
                C44323 +
            (C10899 + C10898) * C9716) *
               C44245 * C44319) *
              C44195 * C626 +
          (((C10900 + C10901) * C9716 +
            (C4411 * C4010 - C4412 * C4006 - C4411 * C4011 + C4407 * C4015 +
             C4413 * C4012 - C4414 * C4007 - C4413 * C4013 + C44312 * C4016) *
                C44323) *
               C44245 * C44319 -
           ((C10901 + C10900) * C44323 +
            (C4413 * C102 - C4414 * C95 - C4413 * C103 + C44312 * C110 +
             C4411 * C100 - C4412 * C94 - C4411 * C101 + C4407 * C109) *
                C9716) *
               C44245 * C1196) *
              C44195 * C44315)) /
        (p * q * std::sqrt(p + q));
    d2eexy[20] += (2 * std::pow(Pi, 2.5) *
                   (((((C44245 * C152 - C151 * C93) * C4411 +
                       (C44245 * C157 - C151 * C99) * C4407 +
                       (C163 - C164) * C4413 + (C165 - C166) * C44312) *
                          C9716 +
                      ((C10968 - C10969) * C4411 + (C10970 - C10971) * C4407 +
                       C10972 * C4413 + C10973 * C44312) *
                          C44323) *
                         C1196 +
                     (((C10969 - C10968) * C4411 + (C10971 - C10970) * C4407 +
                       C10974 * C4413 + C10975 * C44312) *
                          C9716 +
                      ((C151 * C4005 - C44245 * C4055) * C4411 +
                       (C151 * C4009 - C44245 * C4058) * C4407 +
                       (C10976 - C10977) * C4413 + (C10978 - C10979) * C44312) *
                          C44323) *
                         C44319) *
                        C44195 * C626 +
                    ((((C164 - C163) * C4411 + (C166 - C165) * C4407 +
                       (C168 - C167) * C4413 + (C170 - C169) * C44312) *
                          C9716 +
                      (C10974 * C4411 + C10975 * C4407 +
                       (C1277 - C1278) * C4413 + (C1279 - C1280) * C44312) *
                          C44323) *
                         C1196 +
                     ((C10972 * C4411 + C10973 * C4407 +
                       (C1278 - C1277) * C4413 + (C1280 - C1279) * C44312) *
                          C9716 +
                      ((C10977 - C10976) * C4411 + (C10979 - C10978) * C4407 +
                       (C44245 * C4057 - C151 * C4007) * C4413 +
                       (C44245 * C4060 - C151 * C4013) * C44312) *
                          C44323) *
                         C44319) *
                        C44195 * C44315)) /
                  (p * q * std::sqrt(p + q));
    d2eexz[20] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C9716 * C215 - C9818 * C93 + C44323 * C1330 - C9819 * C1200) *
                C4411 +
            (C9716 * C220 - C9818 * C99 + C44323 * C1334 - C9819 * C1207) *
                C4407 +
            (C9821 - C9822 + C9823 - C9824) * C4413 +
            (C9825 - C9826 + C9827 - C9828) * C44312) *
               C44245 * C1196 +
           ((C9818 * C1200 - C9716 * C1330 + C9819 * C4005 - C44323 * C4099) *
                C4411 +
            (C9818 * C1207 - C9716 * C1334 + C9819 * C4009 - C44323 * C4102) *
                C4407 +
            (C11046 - C11047 + C11048 - C11049) * C4413 +
            (C11050 - C11051 + C11052 - C11053) * C44312) *
               C44245 * C44319) *
              C44195 * C626 +
          (((C9822 - C9821 + C9824 - C9823) * C4411 +
            (C9826 - C9825 + C9828 - C9827) * C4407 +
            (C9829 - C9830 + C9831 - C9832) * C4413 +
            (C9833 - C9834 + C9835 - C9836) * C44312) *
               C44245 * C1196 +
           ((C11047 - C11046 + C11049 - C11048) * C4411 +
            (C11051 - C11050 + C11053 - C11052) * C4407 +
            (C9716 * C1332 - C9818 * C1198 + C44323 * C4101 - C9819 * C4007) *
                C4413 +
            (C9716 * C1336 - C9818 * C1203 + C44323 * C4104 - C9819 * C4013) *
                C44312) *
               C44245 * C44319) *
              C44195 * C44315)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[20] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C4407 * C98 - C4411 * C93 + C44312 * C100 - C4413 * C94) * C151 +
             (C4407 * C282 - C4411 * C277 + C44312 * C283 - C4413 * C278) *
                 C44245) *
                C9716 +
            ((C11120 - C11121 + C11122 - C11123) * C151 +
             (C11124 - C11125 + C11126 - C11127) * C44245) *
                C44323) *
               C1196 +
           (((C11121 - C11120 + C11123 - C11122) * C151 +
             (C11125 - C11124 + C11127 - C11126) * C44245) *
                C9716 +
            ((C4411 * C4005 - C4407 * C4008 + C4413 * C4006 - C44312 * C4010) *
                 C151 +
             (C4411 * C4143 - C4407 * C4146 + C4413 * C4144 - C44312 * C4147) *
                 C44245) *
                C44323) *
               C44319) *
              C44195 * C626 +
          ((((C4411 * C94 - C4407 * C100 + C4413 * C95 - C44312 * C102) * C151 +
             (C4411 * C278 - C4407 * C283 + C4413 * C279 - C44312 * C284) *
                 C44245) *
                C9716 +
            ((C11128 - C11129 + C11130 - C11131) * C151 +
             (C11132 - C11133 + C11134 - C11135) * C44245) *
                C44323) *
               C1196 +
           (((C11129 - C11128 + C11131 - C11130) * C151 +
             (C11133 - C11132 + C11135 - C11134) * C44245) *
                C9716 +
            ((C4407 * C4010 - C4411 * C4006 + C44312 * C4012 - C4413 * C4007) *
                 C151 +
             (C4407 * C4147 - C4411 * C4144 + C44312 * C4148 - C4413 * C4145) *
                 C44245) *
                C44323) *
               C44319) *
              C44195 * C44315)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[20] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C151 * C152 - C325 * C93 - C151 * C277 + C44245 * C326) * C4407 +
             C350 * C44312) *
                C9716 +
            (C11219 + C11206) * C44323) *
               C1196 -
           ((C11218 * C44312 +
             (C151 * C4055 - C325 * C4005 - C151 * C4143 + C44245 * C4187) *
                 C4407) *
                C44323 +
            (C11206 + C11219) * C9716) *
               C44319) *
              C44195 * C626 +
          (((C11211 + C11212) * C9716 +
            (C11218 * C4407 +
             (C151 * C4057 - C325 * C4007 - C151 * C4145 + C44245 * C4189) *
                 C44312) *
                C44323) *
               C44319 -
           ((C11212 + C11211) * C44323 +
            (C351 * C44312 + C350 * C4407) * C9716) *
               C1196) *
              C44195 * C44315)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[20] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C9716 * C215 - C9818 * C93 + C44323 * C1330 - C9819 * C1200) *
                 C151 +
             (C9716 * C390 - C9818 * C277 + C44323 * C1522 - C9819 * C1396) *
                 C44245) *
                C4407 +
            ((C9821 - C9822 + C9823 - C9824) * C151 +
             (C9987 - C9988 + C9989 - C9990) * C44245) *
                C44312) *
               C1196 +
           (((C9818 * C1200 - C9716 * C1330 + C9819 * C4005 - C44323 * C4099) *
                 C151 +
             (C9818 * C1396 - C9716 * C1522 + C9819 * C4143 - C44323 * C4228) *
                 C44245) *
                C4407 +
            ((C11046 - C11047 + C11048 - C11049) * C151 +
             (C11286 - C11287 + C11288 - C11289) * C44245) *
                C44312) *
               C44319) *
              C44195 * C626 +
          ((((C9822 - C9821 + C9824 - C9823) * C151 +
             (C9988 - C9987 + C9990 - C9989) * C44245) *
                C4407 +
            ((C9829 - C9830 + C9831 - C9832) * C151 +
             (C9991 - C9992 + C9993 - C9994) * C44245) *
                C44312) *
               C1196 +
           (((C11047 - C11046 + C11049 - C11048) * C151 +
             (C11287 - C11286 + C11289 - C11288) * C44245) *
                C4407 +
            ((C9716 * C1332 - C9818 * C1198 + C44323 * C4101 - C9819 * C4007) *
                 C151 +
             (C9716 * C1524 - C9818 * C1398 + C44323 * C4230 - C9819 * C4145) *
                 C44245) *
                C44312) *
               C44319) *
              C44195 * C44315)) /
        (p * q * std::sqrt(p + q));
    d2eezx[20] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4407 * C98 - C4411 * C93 + C44312 * C100 - C4413 * C94) * C9818 +
            (C4407 * C448 - C4411 * C443 + C44312 * C449 - C4413 * C444) *
                C9716 +
            (C11120 - C11121 + C11122 - C11123) * C9819 +
            (C11356 - C11357 + C11358 - C11359) * C44323) *
               C44245 * C1196 +
           ((C11121 - C11120 + C11123 - C11122) * C9818 +
            (C11357 - C11356 + C11359 - C11358) * C9716 +
            (C4411 * C4005 - C4407 * C4008 + C4413 * C4006 - C44312 * C4010) *
                C9819 +
            (C4411 * C4269 - C4407 * C4272 + C4413 * C4270 - C44312 * C4273) *
                C44323) *
               C44245 * C44319) *
              C44195 * C626 +
          (((C4411 * C94 - C4407 * C100 + C4413 * C95 - C44312 * C102) * C9818 +
            (C4411 * C444 - C4407 * C449 + C4413 * C445 - C44312 * C450) *
                C9716 +
            (C11128 - C11129 + C11130 - C11131) * C9819 +
            (C11360 - C11361 + C11362 - C11363) * C44323) *
               C44245 * C1196 +
           ((C11129 - C11128 + C11131 - C11130) * C9818 +
            (C11361 - C11360 + C11363 - C11362) * C9716 +
            (C4407 * C4010 - C4411 * C4006 + C44312 * C4012 - C4413 * C4007) *
                C9819 +
            (C4407 * C4273 - C4411 * C4270 + C44312 * C4274 - C4413 * C4271) *
                C44323) *
               C44245 * C44319) *
              C44195 * C44315)) /
        (p * q * std::sqrt(p + q));
    d2eezy[20] += (2 * std::pow(Pi, 2.5) *
                   (((((C44245 * C152 - C151 * C93) * C9818 +
                       (C44245 * C491 - C151 * C443) * C9716 +
                       (C10968 - C10969) * C9819 + (C11430 - C11431) * C44323) *
                          C4407 +
                      ((C163 - C164) * C9818 + (C497 - C498) * C9716 +
                       C10972 * C9819 + C11432 * C44323) *
                          C44312) *
                         C1196 +
                     (((C10969 - C10968) * C9818 + (C11431 - C11430) * C9716 +
                       (C151 * C4005 - C44245 * C4055) * C9819 +
                       (C151 * C4269 - C44245 * C4313) * C44323) *
                          C4407 +
                      (C10974 * C9818 + C11433 * C9716 +
                       (C10976 - C10977) * C9819 + (C11434 - C11435) * C44323) *
                          C44312) *
                         C44319) *
                        C44195 * C626 +
                    ((((C164 - C163) * C9818 + (C498 - C497) * C9716 +
                       C10974 * C9819 + C11433 * C44323) *
                          C4407 +
                      ((C168 - C167) * C9818 + (C501 - C500) * C9716 +
                       (C1277 - C1278) * C9819 + (C1645 - C1646) * C44323) *
                          C44312) *
                         C1196 +
                     ((C10972 * C9818 + C11432 * C9716 +
                       (C10977 - C10976) * C9819 + (C11435 - C11434) * C44323) *
                          C4407 +
                      ((C1278 - C1277) * C9818 + (C1646 - C1645) * C9716 +
                       (C44245 * C4057 - C151 * C4007) * C9819 +
                       (C44245 * C4315 - C151 * C4271) * C44323) *
                          C44312) *
                         C44319) *
                        C44195 * C44315)) /
                  (p * q * std::sqrt(p + q));
    d2eezz[20] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C9818 * C215 - C10144 * C93 - C9818 * C443 + C9716 * C545 +
             C9819 * C1330 - C10145 * C1200 - C9819 * C1580 + C44323 * C1698) *
                C44245 * C4407 +
            (C10171 + C10172) * C44245 * C44312) *
               C1196 -
           ((C11514 + C11515) * C44245 * C44312 +
            (C9819 * C4099 - C10145 * C4005 - C9819 * C4269 + C44323 * C4354 +
             C9818 * C1330 - C10144 * C1200 - C9818 * C1580 + C9716 * C1698) *
                C44245 * C4407) *
               C44319) *
              C44195 * C626 +
          (((C11515 + C11514) * C44245 * C4407 +
            (C9818 * C1332 - C10144 * C1198 - C9818 * C1582 + C9716 * C1696 +
             C9819 * C4101 - C10145 * C4007 - C9819 * C4271 + C44323 * C4356) *
                C44245 * C44312) *
               C44319 -
           ((C10173 + C10174) * C44245 * C44312 +
            (C10172 + C10171) * C44245 * C4407) *
               C1196) *
              C44195 * C44315)) /
        (p * q * std::sqrt(p + q));
    d2eexx[21] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4411 * C98 - C4412 * C93 - C4411 * C99 + C4407 * C108 +
             C4413 * C100 - C4414 * C94 - C4413 * C101 + C44312 * C109) *
                C9716 +
            (C10898 + C10899) * C44323) *
               C44245 * C44212 * C1766 -
           ((C7418 + C7419) * C44323 + (C4967 + C4966) * C9716) * C44245 *
               C44212 * C44317) *
              C1768 +
          (((C4968 + C4969) * C9716 +
            (C4411 * C2619 - C4412 * C2615 - C4411 * C2620 + C4407 * C2624 +
             C4413 * C2621 - C4414 * C2616 - C4413 * C2622 + C44312 * C2625) *
                C44323) *
               C44245 * C44212 * C44317 -
           ((C10901 + C10900) * C44323 +
            (C4413 * C102 - C4414 * C95 - C4413 * C103 + C44312 * C110 +
             C4411 * C100 - C4412 * C94 - C4411 * C101 + C4407 * C109) *
                C9716) *
               C44245 * C44212 * C1766) *
              C44315)) /
        (p * q * std::sqrt(p + q));
    d2eexy[21] += (2 * std::pow(Pi, 2.5) *
                   (((((C44245 * C152 - C151 * C93) * C4411 +
                       (C44245 * C157 - C151 * C99) * C4407 +
                       (C163 - C164) * C4413 + (C165 - C166) * C44312) *
                          C9716 +
                      ((C10968 - C10969) * C4411 + (C10970 - C10971) * C4407 +
                       C10972 * C4413 + C10973 * C44312) *
                          C44323) *
                         C44212 * C1766 +
                     (((C151 * C630 - C44245 * C694) * C4411 +
                       (C151 * C637 - C44245 * C698) * C4407 +
                       (C703 - C704) * C4413 + (C705 - C706) * C44312) *
                          C9716 +
                      ((C151 * C2614 - C44245 * C2676) * C4411 +
                       (C151 * C2618 - C44245 * C2679) * C4407 +
                       (C10307 - C10308) * C4413 + (C10309 - C10310) * C44312) *
                          C44323) *
                         C44212 * C44317) *
                        C1768 +
                    ((((C164 - C163) * C4411 + (C166 - C165) * C4407 +
                       (C168 - C167) * C4413 + (C170 - C169) * C44312) *
                          C9716 +
                      (C10974 * C4411 + C10975 * C4407 +
                       (C1277 - C1278) * C4413 + (C1279 - C1280) * C44312) *
                          C44323) *
                         C44212 * C1766 +
                     (((C704 - C703) * C4411 + (C706 - C705) * C4407 +
                       (C708 - C707) * C4413 + (C710 - C709) * C44312) *
                          C9716 +
                      ((C10308 - C10307) * C4411 + (C10310 - C10309) * C4407 +
                       (C44245 * C2678 - C151 * C2616) * C4413 +
                       (C44245 * C2681 - C151 * C2622) * C44312) *
                          C44323) *
                         C44212 * C44317) *
                        C44315)) /
                  (p * q * std::sqrt(p + q));
    d2eexz[21] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C9716 * C215 - C9818 * C93 + C44323 * C1330 - C9819 * C1200) *
                C4411 +
            (C9716 * C220 - C9818 * C99 + C44323 * C1334 - C9819 * C1207) *
                C4407 +
            (C9821 - C9822 + C9823 - C9824) * C4413 +
            (C9825 - C9826 + C9827 - C9828) * C44312) *
               C44245 * C44212 * C1766 +
           ((C9818 * C630 - C9716 * C760 + C9819 * C2614 - C44323 * C2732) *
                C4411 +
            (C9818 * C637 - C9716 * C764 + C9819 * C2618 - C44323 * C2735) *
                C4407 +
            (C10377 - C10378 + C10379 - C10380) * C4413 +
            (C10381 - C10382 + C10383 - C10384) * C44312) *
               C44245 * C44212 * C44317) *
              C1768 +
          (((C9822 - C9821 + C9824 - C9823) * C4411 +
            (C9826 - C9825 + C9828 - C9827) * C4407 +
            (C9829 - C9830 + C9831 - C9832) * C4413 +
            (C9833 - C9834 + C9835 - C9836) * C44312) *
               C44245 * C44212 * C1766 +
           ((C10378 - C10377 + C10380 - C10379) * C4411 +
            (C10382 - C10381 + C10384 - C10383) * C4407 +
            (C9716 * C762 - C9818 * C628 + C44323 * C2734 - C9819 * C2616) *
                C4413 +
            (C9716 * C766 - C9818 * C633 + C44323 * C2737 - C9819 * C2622) *
                C44312) *
               C44245 * C44212 * C44317) *
              C44315)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[21] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C4407 * C98 - C4411 * C93 + C44312 * C100 - C4413 * C94) * C151 +
             (C4407 * C282 - C4411 * C277 + C44312 * C283 - C4413 * C278) *
                 C44245) *
                C9716 +
            ((C11120 - C11121 + C11122 - C11123) * C151 +
             (C11124 - C11125 + C11126 - C11127) * C44245) *
                C44323) *
               C44212 * C1766 +
           (((C5189 - C5188 + C5191 - C5190) * C151 +
             (C5193 - C5192 + C5195 - C5194) * C44245) *
                C9716 +
            ((C7634 - C7635 + C7636 - C7637) * C151 +
             (C7638 - C7639 + C7640 - C7641) * C44245) *
                C44323) *
               C44212 * C44317) *
              C1768 +
          ((((C4411 * C94 - C4407 * C100 + C4413 * C95 - C44312 * C102) * C151 +
             (C4411 * C278 - C4407 * C283 + C4413 * C279 - C44312 * C284) *
                 C44245) *
                C9716 +
            ((C11128 - C11129 + C11130 - C11131) * C151 +
             (C11132 - C11133 + C11134 - C11135) * C44245) *
                C44323) *
               C44212 * C1766 +
           (((C5197 - C5196 + C5199 - C5198) * C151 +
             (C5201 - C5200 + C5203 - C5202) * C44245) *
                C9716 +
            ((C4407 * C2619 - C4411 * C2615 + C44312 * C2621 - C4413 * C2616) *
                 C151 +
             (C4407 * C2792 - C4411 * C2789 + C44312 * C2793 - C4413 * C2790) *
                 C44245) *
                C44323) *
               C44212 * C44317) *
              C44315)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[21] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C151 * C152 - C325 * C93 - C151 * C277 + C44245 * C326) * C4407 +
             C350 * C44312) *
                C9716 +
            (C11219 + C11206) * C44323) *
               C44212 * C1766 -
           ((C10523 * C44312 +
             (C151 * C2676 - C325 * C2614 - C151 * C2788 + C44245 * C2844) *
                 C4407) *
                C44323 +
            (C902 * C44312 +
             (C151 * C694 - C325 * C630 - C151 * C826 + C44245 * C886) *
                 C4407) *
                C9716) *
               C44212 * C44317) *
              C1768 +
          (((C902 * C4407 + C901 * C44312) * C9716 +
            (C10523 * C4407 +
             (C151 * C2678 - C325 * C2616 - C151 * C2790 + C44245 * C2846) *
                 C44312) *
                C44323) *
               C44212 * C44317 -
           ((C11212 + C11211) * C44323 +
            (C351 * C44312 + C350 * C4407) * C9716) *
               C44212 * C1766) *
              C44315)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[21] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C9716 * C215 - C9818 * C93 + C44323 * C1330 - C9819 * C1200) *
                 C151 +
             (C9716 * C390 - C9818 * C277 + C44323 * C1522 - C9819 * C1396) *
                 C44245) *
                C4407 +
            ((C9821 - C9822 + C9823 - C9824) * C151 +
             (C9987 - C9988 + C9989 - C9990) * C44245) *
                C44312) *
               C44212 * C1766 +
           (((C9818 * C630 - C9716 * C760 + C9819 * C2614 - C44323 * C2732) *
                 C151 +
             (C9818 * C826 - C9716 * C952 + C9819 * C2788 - C44323 * C2897) *
                 C44245) *
                C4407 +
            ((C10377 - C10378 + C10379 - C10380) * C151 +
             (C10590 - C10591 + C10592 - C10593) * C44245) *
                C44312) *
               C44212 * C44317) *
              C1768 +
          ((((C9822 - C9821 + C9824 - C9823) * C151 +
             (C9988 - C9987 + C9990 - C9989) * C44245) *
                C4407 +
            ((C9829 - C9830 + C9831 - C9832) * C151 +
             (C9991 - C9992 + C9993 - C9994) * C44245) *
                C44312) *
               C44212 * C1766 +
           (((C10378 - C10377 + C10380 - C10379) * C151 +
             (C10591 - C10590 + C10593 - C10592) * C44245) *
                C4407 +
            ((C9716 * C762 - C9818 * C628 + C44323 * C2734 - C9819 * C2616) *
                 C151 +
             (C9716 * C954 - C9818 * C828 + C44323 * C2899 - C9819 * C2790) *
                 C44245) *
                C44312) *
               C44212 * C44317) *
              C44315)) /
        (p * q * std::sqrt(p + q));
    d2eezx[21] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4407 * C98 - C4411 * C93 + C44312 * C100 - C4413 * C94) * C9818 +
            (C4407 * C448 - C4411 * C443 + C44312 * C449 - C4413 * C444) *
                C9716 +
            (C11120 - C11121 + C11122 - C11123) * C9819 +
            (C11356 - C11357 + C11358 - C11359) * C44323) *
               C44245 * C44212 * C1766 +
           ((C5189 - C5188 + C5191 - C5190) * C9818 +
            (C5423 - C5422 + C5425 - C5424) * C9716 +
            (C7634 - C7635 + C7636 - C7637) * C9819 +
            (C7850 - C7851 + C7852 - C7853) * C44323) *
               C44245 * C44212 * C44317) *
              C1768 +
          (((C4411 * C94 - C4407 * C100 + C4413 * C95 - C44312 * C102) * C9818 +
            (C4411 * C444 - C4407 * C449 + C4413 * C445 - C44312 * C450) *
                C9716 +
            (C11128 - C11129 + C11130 - C11131) * C9819 +
            (C11360 - C11361 + C11362 - C11363) * C44323) *
               C44245 * C44212 * C1766 +
           ((C5197 - C5196 + C5199 - C5198) * C9818 +
            (C5427 - C5426 + C5429 - C5428) * C9716 +
            (C4407 * C2619 - C4411 * C2615 + C44312 * C2621 - C4413 * C2616) *
                C9819 +
            (C4407 * C2954 - C4411 * C2951 + C44312 * C2955 - C4413 * C2952) *
                C44323) *
               C44245 * C44212 * C44317) *
              C44315)) /
        (p * q * std::sqrt(p + q));
    d2eezy[21] += (2 * std::pow(Pi, 2.5) *
                   (((((C44245 * C152 - C151 * C93) * C9818 +
                       (C44245 * C491 - C151 * C443) * C9716 +
                       (C10968 - C10969) * C9819 + (C11430 - C11431) * C44323) *
                          C4407 +
                      ((C163 - C164) * C9818 + (C497 - C498) * C9716 +
                       C10972 * C9819 + C11432 * C44323) *
                          C44312) *
                         C44212 * C1766 +
                     (((C151 * C630 - C44245 * C694) * C9818 +
                       (C151 * C1010 - C44245 * C1068) * C9716 +
                       (C151 * C2614 - C44245 * C2676) * C9819 +
                       (C151 * C2950 - C44245 * C3006) * C44323) *
                          C4407 +
                      ((C703 - C704) * C9818 + (C1073 - C1074) * C9716 +
                       (C10307 - C10308) * C9819 + (C10726 - C10727) * C44323) *
                          C44312) *
                         C44212 * C44317) *
                        C1768 +
                    ((((C164 - C163) * C9818 + (C498 - C497) * C9716 +
                       C10974 * C9819 + C11433 * C44323) *
                          C4407 +
                      ((C168 - C167) * C9818 + (C501 - C500) * C9716 +
                       (C1277 - C1278) * C9819 + (C1645 - C1646) * C44323) *
                          C44312) *
                         C44212 * C1766 +
                     (((C704 - C703) * C9818 + (C1074 - C1073) * C9716 +
                       (C10308 - C10307) * C9819 + (C10727 - C10726) * C44323) *
                          C4407 +
                      ((C708 - C707) * C9818 + (C1076 - C1075) * C9716 +
                       (C44245 * C2678 - C151 * C2616) * C9819 +
                       (C44245 * C3008 - C151 * C2952) * C44323) *
                          C44312) *
                         C44212 * C44317) *
                        C44315)) /
                  (p * q * std::sqrt(p + q));
    d2eezz[21] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C9818 * C215 - C10144 * C93 - C9818 * C443 + C9716 * C545 +
             C9819 * C1330 - C10145 * C1200 - C9819 * C1580 + C44323 * C1698) *
                C44245 * C4407 +
            (C10171 + C10172) * C44245 * C44312) *
               C44212 * C1766 -
           ((C10806 + C10807) * C44245 * C44312 +
            (C9819 * C2732 - C10145 * C2614 - C9819 * C2950 + C44323 * C3059 +
             C9818 * C760 - C10144 * C630 - C9818 * C1010 + C9716 * C1128) *
                C44245 * C4407) *
               C44212 * C44317) *
              C1768 +
          (((C10807 + C10806) * C44245 * C4407 +
            (C9818 * C762 - C10144 * C628 - C9818 * C1012 + C9716 * C1126 +
             C9819 * C2734 - C10145 * C2616 - C9819 * C2952 + C44323 * C3061) *
                C44245 * C44312) *
               C44212 * C44317 -
           ((C10173 + C10174) * C44245 * C44312 +
            (C10172 + C10171) * C44245 * C4407) *
               C44212 * C1766) *
              C44315)) /
        (p * q * std::sqrt(p + q));
    d2eexx[22] +=
        (2 * std::pow(Pi, 2.5) *
         (((C4411 * C98 - C4412 * C93 - C4411 * C99 + C4407 * C108 +
            C4413 * C100 - C4414 * C94 - C4413 * C101 + C44312 * C109) *
               C9716 +
           (C10898 + C10899) * C44323) *
              C44245 * C44212 * C2208 -
          ((C7418 + C7419) * C44323 + (C4967 + C4966) * C9716) * C44245 *
              C44212 * C2209 +
          ((C6882 + C6881) * C9716 +
           (C4411 * C7399 - C4412 * C7397 - C4411 * C7400 + C4407 * C7403 +
            C4413 * C7401 - C4414 * C7398 - C4413 * C7402 + C44312 * C7404) *
               C44323) *
              C44245 * C44212 * C2210) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eexy[22] += (2 * std::pow(Pi, 2.5) *
                   ((((C44245 * C152 - C151 * C93) * C4411 +
                      (C44245 * C157 - C151 * C99) * C4407 +
                      (C163 - C164) * C4413 + (C165 - C166) * C44312) *
                         C9716 +
                     ((C10968 - C10969) * C4411 + (C10970 - C10971) * C4407 +
                      C10972 * C4413 + C10973 * C44312) *
                         C44323) *
                        C44212 * C2208 +
                    (((C151 * C630 - C44245 * C694) * C4411 +
                      (C151 * C637 - C44245 * C698) * C4407 +
                      (C703 - C704) * C4413 + (C705 - C706) * C44312) *
                         C9716 +
                     ((C151 * C2614 - C44245 * C2676) * C4411 +
                      (C151 * C2618 - C44245 * C2679) * C4407 +
                      (C10307 - C10308) * C4413 + (C10309 - C10310) * C44312) *
                         C44323) *
                        C44212 * C2209 +
                    (((C44245 * C2262 - C151 * C2212) * C4411 +
                      (C44245 * C2265 - C151 * C2216) * C4407 +
                      (C44245 * C2263 - C151 * C2213) * C4413 +
                      (C44245 * C2266 - C151 * C2218) * C44312) *
                         C9716 +
                     ((C44245 * C7485 - C151 * C7397) * C4411 +
                      (C44245 * C7487 - C151 * C7400) * C4407 +
                      (C44245 * C7486 - C151 * C7398) * C4413 +
                      (C44245 * C7488 - C151 * C7402) * C44312) *
                         C44323) *
                        C44212 * C2210) *
                   C44161) /
                  (p * q * std::sqrt(p + q));
    d2eexz[22] +=
        (2 * std::pow(Pi, 2.5) *
         (((C9716 * C215 - C9818 * C93 + C44323 * C1330 - C9819 * C1200) *
               C4411 +
           (C9716 * C220 - C9818 * C99 + C44323 * C1334 - C9819 * C1207) *
               C4407 +
           (C9821 - C9822 + C9823 - C9824) * C4413 +
           (C9825 - C9826 + C9827 - C9828) * C44312) *
              C44245 * C44212 * C2208 +
          ((C9818 * C630 - C9716 * C760 + C9819 * C2614 - C44323 * C2732) *
               C4411 +
           (C9818 * C637 - C9716 * C764 + C9819 * C2618 - C44323 * C2735) *
               C4407 +
           (C10377 - C10378 + C10379 - C10380) * C4413 +
           (C10381 - C10382 + C10383 - C10384) * C44312) *
              C44245 * C44212 * C2209 +
          ((C9716 * C2306 - C9818 * C2212 + C44323 * C7555 - C9819 * C7397) *
               C4411 +
           (C9716 * C2309 - C9818 * C2216 + C44323 * C7557 - C9819 * C7400) *
               C4407 +
           (C9716 * C2307 - C9818 * C2213 + C44323 * C7556 - C9819 * C7398) *
               C4413 +
           (C9716 * C2310 - C9818 * C2218 + C44323 * C7558 - C9819 * C7402) *
               C44312) *
              C44245 * C44212 * C2210) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eeyx[22] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4407 * C98 - C4411 * C93 + C44312 * C100 - C4413 * C94) * C151 +
            (C4407 * C282 - C4411 * C277 + C44312 * C283 - C4413 * C278) *
                C44245) *
               C9716 +
           ((C11120 - C11121 + C11122 - C11123) * C151 +
            (C11124 - C11125 + C11126 - C11127) * C44245) *
               C44323) *
              C44212 * C2208 +
          (((C5189 - C5188 + C5191 - C5190) * C151 +
            (C5193 - C5192 + C5195 - C5194) * C44245) *
               C9716 +
           ((C7634 - C7635 + C7636 - C7637) * C151 +
            (C7638 - C7639 + C7640 - C7641) * C44245) *
               C44323) *
              C44212 * C2209 +
          (((C7050 - C7049 + C7052 - C7051) * C151 +
            (C7054 - C7053 + C7056 - C7055) * C44245) *
               C9716 +
           ((C4407 * C7399 - C4411 * C7397 + C44312 * C7401 - C4413 * C7398) *
                C151 +
            (C4407 * C7631 - C4411 * C7629 + C44312 * C7632 - C4413 * C7630) *
                C44245) *
               C44323) *
              C44212 * C2210) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eeyy[22] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C151 * C152 - C325 * C93 - C151 * C277 + C44245 * C326) * C4407 +
            C350 * C44312) *
               C9716 +
           (C11219 + C11206) * C44323) *
              C44212 * C2208 -
          ((C10523 * C44312 +
            (C151 * C2676 - C325 * C2614 - C151 * C2788 + C44245 * C2844) *
                C4407) *
               C44323 +
           (C902 * C44312 +
            (C151 * C694 - C325 * C630 - C151 * C826 + C44245 * C886) * C4407) *
               C9716) *
              C44212 * C2209 +
          (((C151 * C2262 - C325 * C2212 - C151 * C2350 + C44245 * C2394) *
                C4407 +
            (C151 * C2263 - C325 * C2213 - C151 * C2351 + C44245 * C2395) *
                C44312) *
               C9716 +
           ((C151 * C7485 - C325 * C7397 - C151 * C7629 + C44245 * C7707) *
                C4407 +
            (C151 * C7486 - C325 * C7398 - C151 * C7630 + C44245 * C7708) *
                C44312) *
               C44323) *
              C44212 * C2210) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eeyz[22] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C9716 * C215 - C9818 * C93 + C44323 * C1330 - C9819 * C1200) *
                C151 +
            (C9716 * C390 - C9818 * C277 + C44323 * C1522 - C9819 * C1396) *
                C44245) *
               C4407 +
           ((C9821 - C9822 + C9823 - C9824) * C151 +
            (C9987 - C9988 + C9989 - C9990) * C44245) *
               C44312) *
              C44212 * C2208 +
          (((C9818 * C630 - C9716 * C760 + C9819 * C2614 - C44323 * C2732) *
                C151 +
            (C9818 * C826 - C9716 * C952 + C9819 * C2788 - C44323 * C2897) *
                C44245) *
               C4407 +
           ((C10377 - C10378 + C10379 - C10380) * C151 +
            (C10590 - C10591 + C10592 - C10593) * C44245) *
               C44312) *
              C44212 * C2209 +
          (((C9716 * C2306 - C9818 * C2212 + C44323 * C7555 - C9819 * C7397) *
                C151 +
            (C9716 * C2435 - C9818 * C2350 + C44323 * C7775 - C9819 * C7629) *
                C44245) *
               C4407 +
           ((C9716 * C2307 - C9818 * C2213 + C44323 * C7556 - C9819 * C7398) *
                C151 +
            (C9716 * C2436 - C9818 * C2351 + C44323 * C7776 - C9819 * C7630) *
                C44245) *
               C44312) *
              C44212 * C2210) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eezx[22] +=
        (2 * std::pow(Pi, 2.5) *
         (((C4407 * C98 - C4411 * C93 + C44312 * C100 - C4413 * C94) * C9818 +
           (C4407 * C448 - C4411 * C443 + C44312 * C449 - C4413 * C444) *
               C9716 +
           (C11120 - C11121 + C11122 - C11123) * C9819 +
           (C11356 - C11357 + C11358 - C11359) * C44323) *
              C44245 * C44212 * C2208 +
          ((C5189 - C5188 + C5191 - C5190) * C9818 +
           (C5423 - C5422 + C5425 - C5424) * C9716 +
           (C7634 - C7635 + C7636 - C7637) * C9819 +
           (C7850 - C7851 + C7852 - C7853) * C44323) *
              C44245 * C44212 * C2209 +
          ((C7050 - C7049 + C7052 - C7051) * C9818 +
           (C7218 - C7217 + C7220 - C7219) * C9716 +
           (C4407 * C7399 - C4411 * C7397 + C44312 * C7401 - C4413 * C7398) *
               C9819 +
           (C4407 * C7847 - C4411 * C7845 + C44312 * C7848 - C4413 * C7846) *
               C44323) *
              C44245 * C44212 * C2210) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eezy[22] += (2 * std::pow(Pi, 2.5) *
                   ((((C44245 * C152 - C151 * C93) * C9818 +
                      (C44245 * C491 - C151 * C443) * C9716 +
                      (C10968 - C10969) * C9819 + (C11430 - C11431) * C44323) *
                         C4407 +
                     ((C163 - C164) * C9818 + (C497 - C498) * C9716 +
                      C10972 * C9819 + C11432 * C44323) *
                         C44312) *
                        C44212 * C2208 +
                    (((C151 * C630 - C44245 * C694) * C9818 +
                      (C151 * C1010 - C44245 * C1068) * C9716 +
                      (C151 * C2614 - C44245 * C2676) * C9819 +
                      (C151 * C2950 - C44245 * C3006) * C44323) *
                         C4407 +
                     ((C703 - C704) * C9818 + (C1073 - C1074) * C9716 +
                      (C10307 - C10308) * C9819 + (C10726 - C10727) * C44323) *
                         C44312) *
                        C44212 * C2209 +
                    (((C44245 * C2262 - C151 * C2212) * C9818 +
                      (C44245 * C2520 - C151 * C2476) * C9716 +
                      (C44245 * C7485 - C151 * C7397) * C9819 +
                      (C44245 * C7919 - C151 * C7845) * C44323) *
                         C4407 +
                     ((C44245 * C2263 - C151 * C2213) * C9818 +
                      (C44245 * C2521 - C151 * C2477) * C9716 +
                      (C44245 * C7486 - C151 * C7398) * C9819 +
                      (C44245 * C7920 - C151 * C7846) * C44323) *
                         C44312) *
                        C44212 * C2210) *
                   C44161) /
                  (p * q * std::sqrt(p + q));
    d2eezz[22] +=
        (2 * std::pow(Pi, 2.5) *
         (((C9818 * C215 - C10144 * C93 - C9818 * C443 + C9716 * C545 +
            C9819 * C1330 - C10145 * C1200 - C9819 * C1580 + C44323 * C1698) *
               C44245 * C4407 +
           (C10171 + C10172) * C44245 * C44312) *
              C44212 * C2208 -
          ((C10806 + C10807) * C44245 * C44312 +
           (C9819 * C2732 - C10145 * C2614 - C9819 * C2950 + C44323 * C3059 +
            C9818 * C760 - C10144 * C630 - C9818 * C1010 + C9716 * C1128) *
               C44245 * C4407) *
              C44212 * C2209 +
          ((C9818 * C2306 - C10144 * C2212 - C9818 * C2476 + C9716 * C2561 +
            C9819 * C7555 - C10145 * C7397 - C9819 * C7845 + C44323 * C7987) *
               C44245 * C4407 +
           (C9818 * C2307 - C10144 * C2213 - C9818 * C2477 + C9716 * C2562 +
            C9819 * C7556 - C10145 * C7398 - C9819 * C7846 + C44323 * C7988) *
               C44245 * C44312) *
              C44212 * C2210) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eexx[23] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4411 * C98 - C4412 * C93 - C4411 * C99 + C4407 * C108 +
             C4413 * C100 - C4414 * C94 - C4413 * C101 + C44312 * C109) *
                C9716 +
            (C10898 + C10899) * C44323) *
               C44245 * C1196 -
           ((C4413 * C4010 - C4414 * C4006 - C4413 * C4011 + C44312 * C4015 +
             C4411 * C4008 - C4412 * C4005 - C4411 * C4009 + C4407 * C4014) *
                C44323 +
            (C10899 + C10898) * C9716) *
               C44245 * C44319) *
              C1766 +
          (((C7419 + C7418) * C9716 +
            (C4411 * C9236 - C4412 * C9234 - C4411 * C9237 + C4407 * C9240 +
             C4413 * C9238 - C4414 * C9235 - C4413 * C9239 + C44312 * C9241) *
                C44323) *
               C44245 * C44319 -
           ((C7418 + C7419) * C44323 + (C4967 + C4966) * C9716) * C44245 *
               C1196) *
              C44317) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eexy[23] += (2 * std::pow(Pi, 2.5) *
                   (((((C44245 * C152 - C151 * C93) * C4411 +
                       (C44245 * C157 - C151 * C99) * C4407 +
                       (C163 - C164) * C4413 + (C165 - C166) * C44312) *
                          C9716 +
                      ((C10968 - C10969) * C4411 + (C10970 - C10971) * C4407 +
                       C10972 * C4413 + C10973 * C44312) *
                          C44323) *
                         C1196 +
                     (((C10969 - C10968) * C4411 + (C10971 - C10970) * C4407 +
                       C10974 * C4413 + C10975 * C44312) *
                          C9716 +
                      ((C151 * C4005 - C44245 * C4055) * C4411 +
                       (C151 * C4009 - C44245 * C4058) * C4407 +
                       (C10976 - C10977) * C4413 + (C10978 - C10979) * C44312) *
                          C44323) *
                         C44319) *
                        C1766 +
                    ((((C151 * C630 - C44245 * C694) * C4411 +
                       (C151 * C637 - C44245 * C698) * C4407 +
                       (C703 - C704) * C4413 + (C705 - C706) * C44312) *
                          C9716 +
                      ((C12692 - C12693) * C4411 + (C12694 - C12695) * C4407 +
                       (C10307 - C10308) * C4413 + (C10309 - C10310) * C44312) *
                          C44323) *
                         C1196 +
                     (((C12693 - C12692) * C4411 + (C12695 - C12694) * C4407 +
                       (C10308 - C10307) * C4413 + (C10310 - C10309) * C44312) *
                          C9716 +
                      ((C44245 * C9292 - C151 * C9234) * C4411 +
                       (C44245 * C9294 - C151 * C9237) * C4407 +
                       (C44245 * C9293 - C151 * C9235) * C4413 +
                       (C44245 * C9295 - C151 * C9239) * C44312) *
                          C44323) *
                         C44319) *
                        C44317) *
                   C44161) /
                  (p * q * std::sqrt(p + q));
    d2eexz[23] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C9716 * C215 - C9818 * C93 + C44323 * C1330 - C9819 * C1200) *
                C4411 +
            (C9716 * C220 - C9818 * C99 + C44323 * C1334 - C9819 * C1207) *
                C4407 +
            (C9821 - C9822 + C9823 - C9824) * C4413 +
            (C9825 - C9826 + C9827 - C9828) * C44312) *
               C44245 * C1196 +
           ((C9818 * C1200 - C9716 * C1330 + C9819 * C4005 - C44323 * C4099) *
                C4411 +
            (C9818 * C1207 - C9716 * C1334 + C9819 * C4009 - C44323 * C4102) *
                C4407 +
            (C11046 - C11047 + C11048 - C11049) * C4413 +
            (C11050 - C11051 + C11052 - C11053) * C44312) *
               C44245 * C44319) *
              C1766 +
          (((C9818 * C630 - C9716 * C760 + C9819 * C2614 - C44323 * C2732) *
                C4411 +
            (C9818 * C637 - C9716 * C764 + C9819 * C2618 - C44323 * C2735) *
                C4407 +
            (C10377 - C10378 + C10379 - C10380) * C4413 +
            (C10381 - C10382 + C10383 - C10384) * C44312) *
               C44245 * C1196 +
           ((C9716 * C2732 - C9818 * C2614 + C44323 * C9346 - C9819 * C9234) *
                C4411 +
            (C9716 * C2735 - C9818 * C2618 + C44323 * C9348 - C9819 * C9237) *
                C4407 +
            (C9716 * C2733 - C9818 * C2615 + C44323 * C9347 - C9819 * C9235) *
                C4413 +
            (C9716 * C2736 - C9818 * C2620 + C44323 * C9349 - C9819 * C9239) *
                C44312) *
               C44245 * C44319) *
              C44317) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eeyx[23] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C4407 * C98 - C4411 * C93 + C44312 * C100 - C4413 * C94) * C151 +
             (C4407 * C282 - C4411 * C277 + C44312 * C283 - C4413 * C278) *
                 C44245) *
                C9716 +
            ((C11120 - C11121 + C11122 - C11123) * C151 +
             (C11124 - C11125 + C11126 - C11127) * C44245) *
                C44323) *
               C1196 +
           (((C11121 - C11120 + C11123 - C11122) * C151 +
             (C11125 - C11124 + C11127 - C11126) * C44245) *
                C9716 +
            ((C4411 * C4005 - C4407 * C4008 + C4413 * C4006 - C44312 * C4010) *
                 C151 +
             (C4411 * C4143 - C4407 * C4146 + C4413 * C4144 - C44312 * C4147) *
                 C44245) *
                C44323) *
               C44319) *
              C1766 +
          ((((C5189 - C5188 + C5191 - C5190) * C151 +
             (C5193 - C5192 + C5195 - C5194) * C44245) *
                C9716 +
            ((C7634 - C7635 + C7636 - C7637) * C151 +
             (C7638 - C7639 + C7640 - C7641) * C44245) *
                C44323) *
               C1196 +
           (((C7635 - C7634 + C7637 - C7636) * C151 +
             (C7639 - C7638 + C7641 - C7640) * C44245) *
                C9716 +
            ((C4407 * C9236 - C4411 * C9234 + C44312 * C9238 - C4413 * C9235) *
                 C151 +
             (C4407 * C9402 - C4411 * C9400 + C44312 * C9403 - C4413 * C9401) *
                 C44245) *
                C44323) *
               C44319) *
              C44317) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eeyy[23] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C151 * C152 - C325 * C93 - C151 * C277 + C44245 * C326) * C4407 +
             C350 * C44312) *
                C9716 +
            (C11219 + C11206) * C44323) *
               C1196 -
           ((C11218 * C44312 +
             (C151 * C4055 - C325 * C4005 - C151 * C4143 + C44245 * C4187) *
                 C4407) *
                C44323 +
            (C11206 + C11219) * C9716) *
               C44319) *
              C1766 +
          (((C12902 + C12898) * C9716 +
            ((C151 * C9292 - C325 * C9234 - C151 * C9400 + C44245 * C9454) *
                 C4407 +
             (C151 * C9293 - C325 * C9235 - C151 * C9401 + C44245 * C9455) *
                 C44312) *
                C44323) *
               C44319 -
           ((C12898 + C12902) * C44323 +
            (C902 * C44312 +
             (C151 * C694 - C325 * C630 - C151 * C826 + C44245 * C886) *
                 C4407) *
                C9716) *
               C1196) *
              C44317) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eeyz[23] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C9716 * C215 - C9818 * C93 + C44323 * C1330 - C9819 * C1200) *
                 C151 +
             (C9716 * C390 - C9818 * C277 + C44323 * C1522 - C9819 * C1396) *
                 C44245) *
                C4407 +
            ((C9821 - C9822 + C9823 - C9824) * C151 +
             (C9987 - C9988 + C9989 - C9990) * C44245) *
                C44312) *
               C1196 +
           (((C9818 * C1200 - C9716 * C1330 + C9819 * C4005 - C44323 * C4099) *
                 C151 +
             (C9818 * C1396 - C9716 * C1522 + C9819 * C4143 - C44323 * C4228) *
                 C44245) *
                C4407 +
            ((C11046 - C11047 + C11048 - C11049) * C151 +
             (C11286 - C11287 + C11288 - C11289) * C44245) *
                C44312) *
               C44319) *
              C1766 +
          ((((C9818 * C630 - C9716 * C760 + C9819 * C2614 - C44323 * C2732) *
                 C151 +
             (C9818 * C826 - C9716 * C952 + C9819 * C2788 - C44323 * C2897) *
                 C44245) *
                C4407 +
            ((C10377 - C10378 + C10379 - C10380) * C151 +
             (C10590 - C10591 + C10592 - C10593) * C44245) *
                C44312) *
               C1196 +
           (((C9716 * C2732 - C9818 * C2614 + C44323 * C9346 - C9819 * C9234) *
                 C151 +
             (C9716 * C2897 - C9818 * C2788 + C44323 * C9506 - C9819 * C9400) *
                 C44245) *
                C4407 +
            ((C9716 * C2733 - C9818 * C2615 + C44323 * C9347 - C9819 * C9235) *
                 C151 +
             (C9716 * C2898 - C9818 * C2789 + C44323 * C9507 - C9819 * C9401) *
                 C44245) *
                C44312) *
               C44319) *
              C44317) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eezx[23] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4407 * C98 - C4411 * C93 + C44312 * C100 - C4413 * C94) * C9818 +
            (C4407 * C448 - C4411 * C443 + C44312 * C449 - C4413 * C444) *
                C9716 +
            (C11120 - C11121 + C11122 - C11123) * C9819 +
            (C11356 - C11357 + C11358 - C11359) * C44323) *
               C44245 * C1196 +
           ((C11121 - C11120 + C11123 - C11122) * C9818 +
            (C11357 - C11356 + C11359 - C11358) * C9716 +
            (C4411 * C4005 - C4407 * C4008 + C4413 * C4006 - C44312 * C4010) *
                C9819 +
            (C4411 * C4269 - C4407 * C4272 + C4413 * C4270 - C44312 * C4273) *
                C44323) *
               C44245 * C44319) *
              C1766 +
          (((C5189 - C5188 + C5191 - C5190) * C9818 +
            (C5423 - C5422 + C5425 - C5424) * C9716 +
            (C7634 - C7635 + C7636 - C7637) * C9819 +
            (C7850 - C7851 + C7852 - C7853) * C44323) *
               C44245 * C1196 +
           ((C7635 - C7634 + C7637 - C7636) * C9818 +
            (C7851 - C7850 + C7853 - C7852) * C9716 +
            (C4407 * C9236 - C4411 * C9234 + C44312 * C9238 - C4413 * C9235) *
                C9819 +
            (C4407 * C9560 - C4411 * C9558 + C44312 * C9561 - C4413 * C9559) *
                C44323) *
               C44245 * C44319) *
              C44317) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eezy[23] += (2 * std::pow(Pi, 2.5) *
                   (((((C44245 * C152 - C151 * C93) * C9818 +
                       (C44245 * C491 - C151 * C443) * C9716 +
                       (C10968 - C10969) * C9819 + (C11430 - C11431) * C44323) *
                          C4407 +
                      ((C163 - C164) * C9818 + (C497 - C498) * C9716 +
                       C10972 * C9819 + C11432 * C44323) *
                          C44312) *
                         C1196 +
                     (((C10969 - C10968) * C9818 + (C11431 - C11430) * C9716 +
                       (C151 * C4005 - C44245 * C4055) * C9819 +
                       (C151 * C4269 - C44245 * C4313) * C44323) *
                          C4407 +
                      (C10974 * C9818 + C11433 * C9716 +
                       (C10976 - C10977) * C9819 + (C11434 - C11435) * C44323) *
                          C44312) *
                         C44319) *
                        C1766 +
                    ((((C151 * C630 - C44245 * C694) * C9818 +
                       (C151 * C1010 - C44245 * C1068) * C9716 +
                       (C12692 - C12693) * C9819 + (C13101 - C13102) * C44323) *
                          C4407 +
                      ((C703 - C704) * C9818 + (C1073 - C1074) * C9716 +
                       (C10307 - C10308) * C9819 + (C10726 - C10727) * C44323) *
                          C44312) *
                         C1196 +
                     (((C12693 - C12692) * C9818 + (C13102 - C13101) * C9716 +
                       (C44245 * C9292 - C151 * C9234) * C9819 +
                       (C44245 * C9612 - C151 * C9558) * C44323) *
                          C4407 +
                      ((C10308 - C10307) * C9818 + (C10727 - C10726) * C9716 +
                       (C44245 * C9293 - C151 * C9235) * C9819 +
                       (C44245 * C9613 - C151 * C9559) * C44323) *
                          C44312) *
                         C44319) *
                        C44317) *
                   C44161) /
                  (p * q * std::sqrt(p + q));
    d2eezz[23] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C9818 * C215 - C10144 * C93 - C9818 * C443 + C9716 * C545 +
             C9819 * C1330 - C10145 * C1200 - C9819 * C1580 + C44323 * C1698) *
                C44245 * C4407 +
            (C10171 + C10172) * C44245 * C44312) *
               C1196 -
           ((C11514 + C11515) * C44245 * C44312 +
            (C9819 * C4099 - C10145 * C4005 - C9819 * C4269 + C44323 * C4354 +
             C9818 * C1330 - C10144 * C1200 - C9818 * C1580 + C9716 * C1698) *
                C44245 * C4407) *
               C44319) *
              C1766 +
          (((C9818 * C2732 - C10144 * C2614 - C9818 * C2950 + C9716 * C3059 +
             C9819 * C9346 - C10145 * C9234 - C9819 * C9558 + C44323 * C9664) *
                C44245 * C4407 +
            (C9818 * C2733 - C10144 * C2615 - C9818 * C2951 + C9716 * C3060 +
             C9819 * C9347 - C10145 * C9235 - C9819 * C9559 + C44323 * C9665) *
                C44245 * C44312) *
               C44319 -
           ((C10806 + C10807) * C44245 * C44312 +
            (C9819 * C2732 - C10145 * C2614 - C9819 * C2950 + C44323 * C3059 +
             C9818 * C760 - C10144 * C630 - C9818 * C1010 + C9716 * C1128) *
                C44245 * C4407) *
               C1196) *
              C44317) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eexx[24] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4411 * C98 - C4412 * C93 - C4411 * C99 + C4407 * C108 +
             C4413 * C100 - C4414 * C94 - C4413 * C101 + C44312 * C109) *
                C9716 +
            (C10898 + C10899) * C44323) *
               C44245 * C3112 -
           ((C4413 * C4010 - C4414 * C4006 - C4413 * C4011 + C44312 * C4015 +
             C4411 * C4008 - C4412 * C4005 - C4411 * C4009 + C4407 * C4014) *
                C44323 +
            (C10899 + C10898) * C9716) *
               C44245 * C44319) *
              C44195 * C1768 +
          (((C10900 + C10901) * C9716 +
            (C4411 * C4010 - C4412 * C4006 - C4411 * C4011 + C4407 * C4015 +
             C4413 * C4012 - C4414 * C4007 - C4413 * C4013 + C44312 * C4016) *
                C44323) *
               C44245 * C44319 -
           ((C10901 + C10900) * C44323 +
            (C4413 * C102 - C4414 * C95 - C4413 * C103 + C44312 * C110 +
             C4411 * C100 - C4412 * C94 - C4411 * C101 + C4407 * C109) *
                C9716) *
               C44245 * C3112) *
              C44195 * C44315)) /
        (p * q * std::sqrt(p + q));
    d2eexy[24] += (2 * std::pow(Pi, 2.5) *
                   (((((C44245 * C152 - C151 * C93) * C4411 +
                       (C44245 * C157 - C151 * C99) * C4407 +
                       (C163 - C164) * C4413 + (C165 - C166) * C44312) *
                          C9716 +
                      ((C10968 - C10969) * C4411 + (C10970 - C10971) * C4407 +
                       C10972 * C4413 + C10973 * C44312) *
                          C44323) *
                         C3112 +
                     (((C10969 - C10968) * C4411 + (C10971 - C10970) * C4407 +
                       C10974 * C4413 + C10975 * C44312) *
                          C9716 +
                      ((C151 * C4005 - C44245 * C4055) * C4411 +
                       (C151 * C4009 - C44245 * C4058) * C4407 +
                       (C10976 - C10977) * C4413 + (C10978 - C10979) * C44312) *
                          C44323) *
                         C44319) *
                        C44195 * C1768 +
                    ((((C164 - C163) * C4411 + (C166 - C165) * C4407 +
                       (C168 - C167) * C4413 + (C170 - C169) * C44312) *
                          C9716 +
                      (C10974 * C4411 + C10975 * C4407 +
                       (C1277 - C1278) * C4413 + (C1279 - C1280) * C44312) *
                          C44323) *
                         C3112 +
                     ((C10972 * C4411 + C10973 * C4407 +
                       (C1278 - C1277) * C4413 + (C1280 - C1279) * C44312) *
                          C9716 +
                      ((C10977 - C10976) * C4411 + (C10979 - C10978) * C4407 +
                       (C44245 * C4057 - C151 * C4007) * C4413 +
                       (C44245 * C4060 - C151 * C4013) * C44312) *
                          C44323) *
                         C44319) *
                        C44195 * C44315)) /
                  (p * q * std::sqrt(p + q));
    d2eexz[24] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C9716 * C215 - C9818 * C93 + C44323 * C1330 - C9819 * C1200) *
                C4411 +
            (C9716 * C220 - C9818 * C99 + C44323 * C1334 - C9819 * C1207) *
                C4407 +
            (C9821 - C9822 + C9823 - C9824) * C4413 +
            (C9825 - C9826 + C9827 - C9828) * C44312) *
               C44245 * C3112 +
           ((C9818 * C1200 - C9716 * C1330 + C9819 * C4005 - C44323 * C4099) *
                C4411 +
            (C9818 * C1207 - C9716 * C1334 + C9819 * C4009 - C44323 * C4102) *
                C4407 +
            (C11046 - C11047 + C11048 - C11049) * C4413 +
            (C11050 - C11051 + C11052 - C11053) * C44312) *
               C44245 * C44319) *
              C44195 * C1768 +
          (((C9822 - C9821 + C9824 - C9823) * C4411 +
            (C9826 - C9825 + C9828 - C9827) * C4407 +
            (C9829 - C9830 + C9831 - C9832) * C4413 +
            (C9833 - C9834 + C9835 - C9836) * C44312) *
               C44245 * C3112 +
           ((C11047 - C11046 + C11049 - C11048) * C4411 +
            (C11051 - C11050 + C11053 - C11052) * C4407 +
            (C9716 * C1332 - C9818 * C1198 + C44323 * C4101 - C9819 * C4007) *
                C4413 +
            (C9716 * C1336 - C9818 * C1203 + C44323 * C4104 - C9819 * C4013) *
                C44312) *
               C44245 * C44319) *
              C44195 * C44315)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[24] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C4407 * C98 - C4411 * C93 + C44312 * C100 - C4413 * C94) * C151 +
             (C4407 * C282 - C4411 * C277 + C44312 * C283 - C4413 * C278) *
                 C44245) *
                C9716 +
            ((C11120 - C11121 + C11122 - C11123) * C151 +
             (C11124 - C11125 + C11126 - C11127) * C44245) *
                C44323) *
               C3112 +
           (((C11121 - C11120 + C11123 - C11122) * C151 +
             (C11125 - C11124 + C11127 - C11126) * C44245) *
                C9716 +
            ((C4411 * C4005 - C4407 * C4008 + C4413 * C4006 - C44312 * C4010) *
                 C151 +
             (C4411 * C4143 - C4407 * C4146 + C4413 * C4144 - C44312 * C4147) *
                 C44245) *
                C44323) *
               C44319) *
              C44195 * C1768 +
          ((((C4411 * C94 - C4407 * C100 + C4413 * C95 - C44312 * C102) * C151 +
             (C4411 * C278 - C4407 * C283 + C4413 * C279 - C44312 * C284) *
                 C44245) *
                C9716 +
            ((C11128 - C11129 + C11130 - C11131) * C151 +
             (C11132 - C11133 + C11134 - C11135) * C44245) *
                C44323) *
               C3112 +
           (((C11129 - C11128 + C11131 - C11130) * C151 +
             (C11133 - C11132 + C11135 - C11134) * C44245) *
                C9716 +
            ((C4407 * C4010 - C4411 * C4006 + C44312 * C4012 - C4413 * C4007) *
                 C151 +
             (C4407 * C4147 - C4411 * C4144 + C44312 * C4148 - C4413 * C4145) *
                 C44245) *
                C44323) *
               C44319) *
              C44195 * C44315)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[24] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C151 * C152 - C325 * C93 - C151 * C277 + C44245 * C326) * C4407 +
             C350 * C44312) *
                C9716 +
            (C11219 + C11206) * C44323) *
               C3112 -
           ((C11218 * C44312 +
             (C151 * C4055 - C325 * C4005 - C151 * C4143 + C44245 * C4187) *
                 C4407) *
                C44323 +
            (C11206 + C11219) * C9716) *
               C44319) *
              C44195 * C1768 +
          (((C11211 + C11212) * C9716 +
            (C11218 * C4407 +
             (C151 * C4057 - C325 * C4007 - C151 * C4145 + C44245 * C4189) *
                 C44312) *
                C44323) *
               C44319 -
           ((C11212 + C11211) * C44323 +
            (C351 * C44312 + C350 * C4407) * C9716) *
               C3112) *
              C44195 * C44315)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[24] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C9716 * C215 - C9818 * C93 + C44323 * C1330 - C9819 * C1200) *
                 C151 +
             (C9716 * C390 - C9818 * C277 + C44323 * C1522 - C9819 * C1396) *
                 C44245) *
                C4407 +
            ((C9821 - C9822 + C9823 - C9824) * C151 +
             (C9987 - C9988 + C9989 - C9990) * C44245) *
                C44312) *
               C3112 +
           (((C9818 * C1200 - C9716 * C1330 + C9819 * C4005 - C44323 * C4099) *
                 C151 +
             (C9818 * C1396 - C9716 * C1522 + C9819 * C4143 - C44323 * C4228) *
                 C44245) *
                C4407 +
            ((C11046 - C11047 + C11048 - C11049) * C151 +
             (C11286 - C11287 + C11288 - C11289) * C44245) *
                C44312) *
               C44319) *
              C44195 * C1768 +
          ((((C9822 - C9821 + C9824 - C9823) * C151 +
             (C9988 - C9987 + C9990 - C9989) * C44245) *
                C4407 +
            ((C9829 - C9830 + C9831 - C9832) * C151 +
             (C9991 - C9992 + C9993 - C9994) * C44245) *
                C44312) *
               C3112 +
           (((C11047 - C11046 + C11049 - C11048) * C151 +
             (C11287 - C11286 + C11289 - C11288) * C44245) *
                C4407 +
            ((C9716 * C1332 - C9818 * C1198 + C44323 * C4101 - C9819 * C4007) *
                 C151 +
             (C9716 * C1524 - C9818 * C1398 + C44323 * C4230 - C9819 * C4145) *
                 C44245) *
                C44312) *
               C44319) *
              C44195 * C44315)) /
        (p * q * std::sqrt(p + q));
    d2eezx[24] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4407 * C98 - C4411 * C93 + C44312 * C100 - C4413 * C94) * C9818 +
            (C4407 * C448 - C4411 * C443 + C44312 * C449 - C4413 * C444) *
                C9716 +
            (C11120 - C11121 + C11122 - C11123) * C9819 +
            (C11356 - C11357 + C11358 - C11359) * C44323) *
               C44245 * C3112 +
           ((C11121 - C11120 + C11123 - C11122) * C9818 +
            (C11357 - C11356 + C11359 - C11358) * C9716 +
            (C4411 * C4005 - C4407 * C4008 + C4413 * C4006 - C44312 * C4010) *
                C9819 +
            (C4411 * C4269 - C4407 * C4272 + C4413 * C4270 - C44312 * C4273) *
                C44323) *
               C44245 * C44319) *
              C44195 * C1768 +
          (((C4411 * C94 - C4407 * C100 + C4413 * C95 - C44312 * C102) * C9818 +
            (C4411 * C444 - C4407 * C449 + C4413 * C445 - C44312 * C450) *
                C9716 +
            (C11128 - C11129 + C11130 - C11131) * C9819 +
            (C11360 - C11361 + C11362 - C11363) * C44323) *
               C44245 * C3112 +
           ((C11129 - C11128 + C11131 - C11130) * C9818 +
            (C11361 - C11360 + C11363 - C11362) * C9716 +
            (C4407 * C4010 - C4411 * C4006 + C44312 * C4012 - C4413 * C4007) *
                C9819 +
            (C4407 * C4273 - C4411 * C4270 + C44312 * C4274 - C4413 * C4271) *
                C44323) *
               C44245 * C44319) *
              C44195 * C44315)) /
        (p * q * std::sqrt(p + q));
    d2eezy[24] += (2 * std::pow(Pi, 2.5) *
                   (((((C44245 * C152 - C151 * C93) * C9818 +
                       (C44245 * C491 - C151 * C443) * C9716 +
                       (C10968 - C10969) * C9819 + (C11430 - C11431) * C44323) *
                          C4407 +
                      ((C163 - C164) * C9818 + (C497 - C498) * C9716 +
                       C10972 * C9819 + C11432 * C44323) *
                          C44312) *
                         C3112 +
                     (((C10969 - C10968) * C9818 + (C11431 - C11430) * C9716 +
                       (C151 * C4005 - C44245 * C4055) * C9819 +
                       (C151 * C4269 - C44245 * C4313) * C44323) *
                          C4407 +
                      (C10974 * C9818 + C11433 * C9716 +
                       (C10976 - C10977) * C9819 + (C11434 - C11435) * C44323) *
                          C44312) *
                         C44319) *
                        C44195 * C1768 +
                    ((((C164 - C163) * C9818 + (C498 - C497) * C9716 +
                       C10974 * C9819 + C11433 * C44323) *
                          C4407 +
                      ((C168 - C167) * C9818 + (C501 - C500) * C9716 +
                       (C1277 - C1278) * C9819 + (C1645 - C1646) * C44323) *
                          C44312) *
                         C3112 +
                     ((C10972 * C9818 + C11432 * C9716 +
                       (C10977 - C10976) * C9819 + (C11435 - C11434) * C44323) *
                          C4407 +
                      ((C1278 - C1277) * C9818 + (C1646 - C1645) * C9716 +
                       (C44245 * C4057 - C151 * C4007) * C9819 +
                       (C44245 * C4315 - C151 * C4271) * C44323) *
                          C44312) *
                         C44319) *
                        C44195 * C44315)) /
                  (p * q * std::sqrt(p + q));
    d2eezz[24] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C9818 * C215 - C10144 * C93 - C9818 * C443 + C9716 * C545 +
             C9819 * C1330 - C10145 * C1200 - C9819 * C1580 + C44323 * C1698) *
                C44245 * C4407 +
            (C10171 + C10172) * C44245 * C44312) *
               C3112 -
           ((C11514 + C11515) * C44245 * C44312 +
            (C9819 * C4099 - C10145 * C4005 - C9819 * C4269 + C44323 * C4354 +
             C9818 * C1330 - C10144 * C1200 - C9818 * C1580 + C9716 * C1698) *
                C44245 * C4407) *
               C44319) *
              C44195 * C1768 +
          (((C11515 + C11514) * C44245 * C4407 +
            (C9818 * C1332 - C10144 * C1198 - C9818 * C1582 + C9716 * C1696 +
             C9819 * C4101 - C10145 * C4007 - C9819 * C4271 + C44323 * C4356) *
                C44245 * C44312) *
               C44319 -
           ((C10173 + C10174) * C44245 * C44312 +
            (C10172 + C10171) * C44245 * C4407) *
               C3112) *
              C44195 * C44315)) /
        (p * q * std::sqrt(p + q));
    d2eexx[25] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4411 * C98 - C4412 * C93 - C4411 * C99 + C4407 * C108 +
             C4413 * C100 - C4414 * C94 - C4413 * C101 + C44312 * C109) *
                C9716 +
            (C10898 + C10899) * C44323) *
               C44245 * C3112 -
           ((C4413 * C4010 - C4414 * C4006 - C4413 * C4011 + C44312 * C4015 +
             C4411 * C4008 - C4412 * C4005 - C4411 * C4009 + C4407 * C4014) *
                C44323 +
            (C10899 + C10898) * C9716) *
               C44245 * C44319) *
              C624 +
          (((C7419 + C7418) * C9716 +
            (C4411 * C9236 - C4412 * C9234 - C4411 * C9237 + C4407 * C9240 +
             C4413 * C9238 - C4414 * C9235 - C4413 * C9239 + C44312 * C9241) *
                C44323) *
               C44245 * C44319 -
           ((C7418 + C7419) * C44323 + (C4967 + C4966) * C9716) * C44245 *
               C3112) *
              C44317) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eexy[25] += (2 * std::pow(Pi, 2.5) *
                   (((((C44245 * C152 - C151 * C93) * C4411 +
                       (C44245 * C157 - C151 * C99) * C4407 +
                       (C163 - C164) * C4413 + (C165 - C166) * C44312) *
                          C9716 +
                      ((C10968 - C10969) * C4411 + (C10970 - C10971) * C4407 +
                       C10972 * C4413 + C10973 * C44312) *
                          C44323) *
                         C3112 +
                     (((C10969 - C10968) * C4411 + (C10971 - C10970) * C4407 +
                       C10974 * C4413 + C10975 * C44312) *
                          C9716 +
                      ((C151 * C4005 - C44245 * C4055) * C4411 +
                       (C151 * C4009 - C44245 * C4058) * C4407 +
                       (C10976 - C10977) * C4413 + (C10978 - C10979) * C44312) *
                          C44323) *
                         C44319) *
                        C624 +
                    ((((C151 * C630 - C44245 * C694) * C4411 +
                       (C151 * C637 - C44245 * C698) * C4407 +
                       (C703 - C704) * C4413 + (C705 - C706) * C44312) *
                          C9716 +
                      ((C12692 - C12693) * C4411 + (C12694 - C12695) * C4407 +
                       (C10307 - C10308) * C4413 + (C10309 - C10310) * C44312) *
                          C44323) *
                         C3112 +
                     (((C12693 - C12692) * C4411 + (C12695 - C12694) * C4407 +
                       (C10308 - C10307) * C4413 + (C10310 - C10309) * C44312) *
                          C9716 +
                      ((C44245 * C9292 - C151 * C9234) * C4411 +
                       (C44245 * C9294 - C151 * C9237) * C4407 +
                       (C44245 * C9293 - C151 * C9235) * C4413 +
                       (C44245 * C9295 - C151 * C9239) * C44312) *
                          C44323) *
                         C44319) *
                        C44317) *
                   C44161) /
                  (p * q * std::sqrt(p + q));
    d2eexz[25] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C9716 * C215 - C9818 * C93 + C44323 * C1330 - C9819 * C1200) *
                C4411 +
            (C9716 * C220 - C9818 * C99 + C44323 * C1334 - C9819 * C1207) *
                C4407 +
            (C9821 - C9822 + C9823 - C9824) * C4413 +
            (C9825 - C9826 + C9827 - C9828) * C44312) *
               C44245 * C3112 +
           ((C9818 * C1200 - C9716 * C1330 + C9819 * C4005 - C44323 * C4099) *
                C4411 +
            (C9818 * C1207 - C9716 * C1334 + C9819 * C4009 - C44323 * C4102) *
                C4407 +
            (C11046 - C11047 + C11048 - C11049) * C4413 +
            (C11050 - C11051 + C11052 - C11053) * C44312) *
               C44245 * C44319) *
              C624 +
          (((C9818 * C630 - C9716 * C760 + C9819 * C2614 - C44323 * C2732) *
                C4411 +
            (C9818 * C637 - C9716 * C764 + C9819 * C2618 - C44323 * C2735) *
                C4407 +
            (C10377 - C10378 + C10379 - C10380) * C4413 +
            (C10381 - C10382 + C10383 - C10384) * C44312) *
               C44245 * C3112 +
           ((C9716 * C2732 - C9818 * C2614 + C44323 * C9346 - C9819 * C9234) *
                C4411 +
            (C9716 * C2735 - C9818 * C2618 + C44323 * C9348 - C9819 * C9237) *
                C4407 +
            (C9716 * C2733 - C9818 * C2615 + C44323 * C9347 - C9819 * C9235) *
                C4413 +
            (C9716 * C2736 - C9818 * C2620 + C44323 * C9349 - C9819 * C9239) *
                C44312) *
               C44245 * C44319) *
              C44317) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eeyx[25] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C4407 * C98 - C4411 * C93 + C44312 * C100 - C4413 * C94) * C151 +
             (C4407 * C282 - C4411 * C277 + C44312 * C283 - C4413 * C278) *
                 C44245) *
                C9716 +
            ((C11120 - C11121 + C11122 - C11123) * C151 +
             (C11124 - C11125 + C11126 - C11127) * C44245) *
                C44323) *
               C3112 +
           (((C11121 - C11120 + C11123 - C11122) * C151 +
             (C11125 - C11124 + C11127 - C11126) * C44245) *
                C9716 +
            ((C4411 * C4005 - C4407 * C4008 + C4413 * C4006 - C44312 * C4010) *
                 C151 +
             (C4411 * C4143 - C4407 * C4146 + C4413 * C4144 - C44312 * C4147) *
                 C44245) *
                C44323) *
               C44319) *
              C624 +
          ((((C5189 - C5188 + C5191 - C5190) * C151 +
             (C5193 - C5192 + C5195 - C5194) * C44245) *
                C9716 +
            ((C7634 - C7635 + C7636 - C7637) * C151 +
             (C7638 - C7639 + C7640 - C7641) * C44245) *
                C44323) *
               C3112 +
           (((C7635 - C7634 + C7637 - C7636) * C151 +
             (C7639 - C7638 + C7641 - C7640) * C44245) *
                C9716 +
            ((C4407 * C9236 - C4411 * C9234 + C44312 * C9238 - C4413 * C9235) *
                 C151 +
             (C4407 * C9402 - C4411 * C9400 + C44312 * C9403 - C4413 * C9401) *
                 C44245) *
                C44323) *
               C44319) *
              C44317) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eeyy[25] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C151 * C152 - C325 * C93 - C151 * C277 + C44245 * C326) * C4407 +
             C350 * C44312) *
                C9716 +
            (C11219 + C11206) * C44323) *
               C3112 -
           ((C11218 * C44312 +
             (C151 * C4055 - C325 * C4005 - C151 * C4143 + C44245 * C4187) *
                 C4407) *
                C44323 +
            (C11206 + C11219) * C9716) *
               C44319) *
              C624 +
          (((C12902 + C12898) * C9716 +
            ((C151 * C9292 - C325 * C9234 - C151 * C9400 + C44245 * C9454) *
                 C4407 +
             (C151 * C9293 - C325 * C9235 - C151 * C9401 + C44245 * C9455) *
                 C44312) *
                C44323) *
               C44319 -
           ((C12898 + C12902) * C44323 +
            (C902 * C44312 +
             (C151 * C694 - C325 * C630 - C151 * C826 + C44245 * C886) *
                 C4407) *
                C9716) *
               C3112) *
              C44317) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eeyz[25] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C9716 * C215 - C9818 * C93 + C44323 * C1330 - C9819 * C1200) *
                 C151 +
             (C9716 * C390 - C9818 * C277 + C44323 * C1522 - C9819 * C1396) *
                 C44245) *
                C4407 +
            ((C9821 - C9822 + C9823 - C9824) * C151 +
             (C9987 - C9988 + C9989 - C9990) * C44245) *
                C44312) *
               C3112 +
           (((C9818 * C1200 - C9716 * C1330 + C9819 * C4005 - C44323 * C4099) *
                 C151 +
             (C9818 * C1396 - C9716 * C1522 + C9819 * C4143 - C44323 * C4228) *
                 C44245) *
                C4407 +
            ((C11046 - C11047 + C11048 - C11049) * C151 +
             (C11286 - C11287 + C11288 - C11289) * C44245) *
                C44312) *
               C44319) *
              C624 +
          ((((C9818 * C630 - C9716 * C760 + C9819 * C2614 - C44323 * C2732) *
                 C151 +
             (C9818 * C826 - C9716 * C952 + C9819 * C2788 - C44323 * C2897) *
                 C44245) *
                C4407 +
            ((C10377 - C10378 + C10379 - C10380) * C151 +
             (C10590 - C10591 + C10592 - C10593) * C44245) *
                C44312) *
               C3112 +
           (((C9716 * C2732 - C9818 * C2614 + C44323 * C9346 - C9819 * C9234) *
                 C151 +
             (C9716 * C2897 - C9818 * C2788 + C44323 * C9506 - C9819 * C9400) *
                 C44245) *
                C4407 +
            ((C9716 * C2733 - C9818 * C2615 + C44323 * C9347 - C9819 * C9235) *
                 C151 +
             (C9716 * C2898 - C9818 * C2789 + C44323 * C9507 - C9819 * C9401) *
                 C44245) *
                C44312) *
               C44319) *
              C44317) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eezx[25] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4407 * C98 - C4411 * C93 + C44312 * C100 - C4413 * C94) * C9818 +
            (C4407 * C448 - C4411 * C443 + C44312 * C449 - C4413 * C444) *
                C9716 +
            (C11120 - C11121 + C11122 - C11123) * C9819 +
            (C11356 - C11357 + C11358 - C11359) * C44323) *
               C44245 * C3112 +
           ((C11121 - C11120 + C11123 - C11122) * C9818 +
            (C11357 - C11356 + C11359 - C11358) * C9716 +
            (C4411 * C4005 - C4407 * C4008 + C4413 * C4006 - C44312 * C4010) *
                C9819 +
            (C4411 * C4269 - C4407 * C4272 + C4413 * C4270 - C44312 * C4273) *
                C44323) *
               C44245 * C44319) *
              C624 +
          (((C5189 - C5188 + C5191 - C5190) * C9818 +
            (C5423 - C5422 + C5425 - C5424) * C9716 +
            (C7634 - C7635 + C7636 - C7637) * C9819 +
            (C7850 - C7851 + C7852 - C7853) * C44323) *
               C44245 * C3112 +
           ((C7635 - C7634 + C7637 - C7636) * C9818 +
            (C7851 - C7850 + C7853 - C7852) * C9716 +
            (C4407 * C9236 - C4411 * C9234 + C44312 * C9238 - C4413 * C9235) *
                C9819 +
            (C4407 * C9560 - C4411 * C9558 + C44312 * C9561 - C4413 * C9559) *
                C44323) *
               C44245 * C44319) *
              C44317) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eezy[25] += (2 * std::pow(Pi, 2.5) *
                   (((((C44245 * C152 - C151 * C93) * C9818 +
                       (C44245 * C491 - C151 * C443) * C9716 +
                       (C10968 - C10969) * C9819 + (C11430 - C11431) * C44323) *
                          C4407 +
                      ((C163 - C164) * C9818 + (C497 - C498) * C9716 +
                       C10972 * C9819 + C11432 * C44323) *
                          C44312) *
                         C3112 +
                     (((C10969 - C10968) * C9818 + (C11431 - C11430) * C9716 +
                       (C151 * C4005 - C44245 * C4055) * C9819 +
                       (C151 * C4269 - C44245 * C4313) * C44323) *
                          C4407 +
                      (C10974 * C9818 + C11433 * C9716 +
                       (C10976 - C10977) * C9819 + (C11434 - C11435) * C44323) *
                          C44312) *
                         C44319) *
                        C624 +
                    ((((C151 * C630 - C44245 * C694) * C9818 +
                       (C151 * C1010 - C44245 * C1068) * C9716 +
                       (C12692 - C12693) * C9819 + (C13101 - C13102) * C44323) *
                          C4407 +
                      ((C703 - C704) * C9818 + (C1073 - C1074) * C9716 +
                       (C10307 - C10308) * C9819 + (C10726 - C10727) * C44323) *
                          C44312) *
                         C3112 +
                     (((C12693 - C12692) * C9818 + (C13102 - C13101) * C9716 +
                       (C44245 * C9292 - C151 * C9234) * C9819 +
                       (C44245 * C9612 - C151 * C9558) * C44323) *
                          C4407 +
                      ((C10308 - C10307) * C9818 + (C10727 - C10726) * C9716 +
                       (C44245 * C9293 - C151 * C9235) * C9819 +
                       (C44245 * C9613 - C151 * C9559) * C44323) *
                          C44312) *
                         C44319) *
                        C44317) *
                   C44161) /
                  (p * q * std::sqrt(p + q));
    d2eezz[25] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C9818 * C215 - C10144 * C93 - C9818 * C443 + C9716 * C545 +
             C9819 * C1330 - C10145 * C1200 - C9819 * C1580 + C44323 * C1698) *
                C44245 * C4407 +
            (C10171 + C10172) * C44245 * C44312) *
               C3112 -
           ((C11514 + C11515) * C44245 * C44312 +
            (C9819 * C4099 - C10145 * C4005 - C9819 * C4269 + C44323 * C4354 +
             C9818 * C1330 - C10144 * C1200 - C9818 * C1580 + C9716 * C1698) *
                C44245 * C4407) *
               C44319) *
              C624 +
          (((C9818 * C2732 - C10144 * C2614 - C9818 * C2950 + C9716 * C3059 +
             C9819 * C9346 - C10145 * C9234 - C9819 * C9558 + C44323 * C9664) *
                C44245 * C4407 +
            (C9818 * C2733 - C10144 * C2615 - C9818 * C2951 + C9716 * C3060 +
             C9819 * C9347 - C10145 * C9235 - C9819 * C9559 + C44323 * C9665) *
                C44245 * C44312) *
               C44319 -
           ((C10806 + C10807) * C44245 * C44312 +
            (C9819 * C2732 - C10145 * C2614 - C9819 * C2950 + C44323 * C3059 +
             C9818 * C760 - C10144 * C630 - C9818 * C1010 + C9716 * C1128) *
                C44245 * C4407) *
               C3112) *
              C44317) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eexx[26] +=
        (2 * std::pow(Pi, 2.5) *
         (((C4411 * C98 - C4412 * C93 - C4411 * C99 + C4407 * C108 +
            C4413 * C100 - C4414 * C94 - C4413 * C101 + C44312 * C109) *
               C9716 +
           (C10898 + C10899) * C44323) *
              C44245 * C4002 -
          ((C14427 + C14428) * C44323 + (C10899 + C10898) * C9716) * C44245 *
              C4003 +
          ((C14428 + C14427) * C9716 +
           (C4411 * C14408 - C4412 * C14406 - C4411 * C14409 + C4407 * C14412 +
            C4413 * C14410 - C4414 * C14407 - C4413 * C14411 +
            C44312 * C14413) *
               C44323) *
              C44245 * C4004) *
         C44195 * C44161) /
        (p * q * std::sqrt(p + q));
    d2eexy[26] += (2 * std::pow(Pi, 2.5) *
                   ((((C44245 * C152 - C151 * C93) * C4411 +
                      (C44245 * C157 - C151 * C99) * C4407 +
                      (C163 - C164) * C4413 + (C165 - C166) * C44312) *
                         C9716 +
                     ((C10968 - C10969) * C4411 + (C10970 - C10971) * C4407 +
                      C10972 * C4413 + C10973 * C44312) *
                         C44323) *
                        C4002 +
                    (((C10969 - C10968) * C4411 + (C10971 - C10970) * C4407 +
                      C10974 * C4413 + C10975 * C44312) *
                         C9716 +
                     ((C14483 - C14484) * C4411 + (C14485 - C14486) * C4407 +
                      (C10976 - C10977) * C4413 + (C10978 - C10979) * C44312) *
                         C44323) *
                        C4003 +
                    (((C14484 - C14483) * C4411 + (C14486 - C14485) * C4407 +
                      (C10977 - C10976) * C4413 + (C10979 - C10978) * C44312) *
                         C9716 +
                     ((C44245 * C14478 - C151 * C14406) * C4411 +
                      (C44245 * C14480 - C151 * C14409) * C4407 +
                      (C44245 * C14479 - C151 * C14407) * C4413 +
                      (C44245 * C14481 - C151 * C14411) * C44312) *
                         C44323) *
                        C4004) *
                   C44195 * C44161) /
                  (p * q * std::sqrt(p + q));
    d2eexz[26] +=
        (2 * std::pow(Pi, 2.5) *
         (((C9716 * C215 - C9818 * C93 + C44323 * C1330 - C9819 * C1200) *
               C4411 +
           (C9716 * C220 - C9818 * C99 + C44323 * C1334 - C9819 * C1207) *
               C4407 +
           (C9821 - C9822 + C9823 - C9824) * C4413 +
           (C9825 - C9826 + C9827 - C9828) * C44312) *
              C44245 * C4002 +
          ((C9818 * C1200 - C9716 * C1330 + C9819 * C4005 - C44323 * C4099) *
               C4411 +
           (C9818 * C1207 - C9716 * C1334 + C9819 * C4009 - C44323 * C4102) *
               C4407 +
           (C11046 - C11047 + C11048 - C11049) * C4413 +
           (C11050 - C11051 + C11052 - C11053) * C44312) *
              C44245 * C4003 +
          ((C9716 * C4099 - C9818 * C4005 + C44323 * C14536 - C9819 * C14406) *
               C4411 +
           (C9716 * C4102 - C9818 * C4009 + C44323 * C14538 - C9819 * C14409) *
               C4407 +
           (C9716 * C4100 - C9818 * C4006 + C44323 * C14537 - C9819 * C14407) *
               C4413 +
           (C9716 * C4103 - C9818 * C4011 + C44323 * C14539 - C9819 * C14411) *
               C44312) *
              C44245 * C4004) *
         C44195 * C44161) /
        (p * q * std::sqrt(p + q));
    d2eeyx[26] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4407 * C98 - C4411 * C93 + C44312 * C100 - C4413 * C94) * C151 +
            (C4407 * C282 - C4411 * C277 + C44312 * C283 - C4413 * C278) *
                C44245) *
               C9716 +
           ((C11120 - C11121 + C11122 - C11123) * C151 +
            (C11124 - C11125 + C11126 - C11127) * C44245) *
               C44323) *
              C4002 +
          (((C11121 - C11120 + C11123 - C11122) * C151 +
            (C11125 - C11124 + C11127 - C11126) * C44245) *
               C9716 +
           ((C14595 - C14596 + C14597 - C14598) * C151 +
            (C14599 - C14600 + C14601 - C14602) * C44245) *
               C44323) *
              C4003 +
          (((C14596 - C14595 + C14598 - C14597) * C151 +
            (C14600 - C14599 + C14602 - C14601) * C44245) *
               C9716 +
           ((C4407 * C14408 - C4411 * C14406 + C44312 * C14410 -
             C4413 * C14407) *
                C151 +
            (C4407 * C14592 - C4411 * C14590 + C44312 * C14593 -
             C4413 * C14591) *
                C44245) *
               C44323) *
              C4004) *
         C44195 * C44161) /
        (p * q * std::sqrt(p + q));
    d2eeyy[26] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C151 * C152 - C325 * C93 - C151 * C277 + C44245 * C326) * C4407 +
            C350 * C44312) *
               C9716 +
           (C11219 + C11206) * C44323) *
              C4002 -
          ((C14655 + C14663) * C44323 + (C11206 + C11219) * C9716) * C4003 +
          ((C14663 + C14655) * C9716 +
           ((C151 * C14478 - C325 * C14406 - C151 * C14590 + C44245 * C14652) *
                C4407 +
            (C151 * C14479 - C325 * C14407 - C151 * C14591 + C44245 * C14653) *
                C44312) *
               C44323) *
              C4004) *
         C44195 * C44161) /
        (p * q * std::sqrt(p + q));
    d2eeyz[26] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C9716 * C215 - C9818 * C93 + C44323 * C1330 - C9819 * C1200) *
                C151 +
            (C9716 * C390 - C9818 * C277 + C44323 * C1522 - C9819 * C1396) *
                C44245) *
               C4407 +
           ((C9821 - C9822 + C9823 - C9824) * C151 +
            (C9987 - C9988 + C9989 - C9990) * C44245) *
               C44312) *
              C4002 +
          (((C9818 * C1200 - C9716 * C1330 + C9819 * C4005 - C44323 * C4099) *
                C151 +
            (C9818 * C1396 - C9716 * C1522 + C9819 * C4143 - C44323 * C4228) *
                C44245) *
               C4407 +
           ((C11046 - C11047 + C11048 - C11049) * C151 +
            (C11286 - C11287 + C11288 - C11289) * C44245) *
               C44312) *
              C4003 +
          (((C9716 * C4099 - C9818 * C4005 + C44323 * C14536 - C9819 * C14406) *
                C151 +
            (C9716 * C4228 - C9818 * C4143 + C44323 * C14713 - C9819 * C14590) *
                C44245) *
               C4407 +
           ((C9716 * C4100 - C9818 * C4006 + C44323 * C14537 - C9819 * C14407) *
                C151 +
            (C9716 * C4229 - C9818 * C4144 + C44323 * C14714 - C9819 * C14591) *
                C44245) *
               C44312) *
              C4004) *
         C44195 * C44161) /
        (p * q * std::sqrt(p + q));
    d2eezx[26] +=
        (2 * std::pow(Pi, 2.5) *
         (((C4407 * C98 - C4411 * C93 + C44312 * C100 - C4413 * C94) * C9818 +
           (C4407 * C448 - C4411 * C443 + C44312 * C449 - C4413 * C444) *
               C9716 +
           (C11120 - C11121 + C11122 - C11123) * C9819 +
           (C11356 - C11357 + C11358 - C11359) * C44323) *
              C44245 * C4002 +
          ((C11121 - C11120 + C11123 - C11122) * C9818 +
           (C11357 - C11356 + C11359 - C11358) * C9716 +
           (C14595 - C14596 + C14597 - C14598) * C9819 +
           (C14770 - C14771 + C14772 - C14773) * C44323) *
              C44245 * C4003 +
          ((C14596 - C14595 + C14598 - C14597) * C9818 +
           (C14771 - C14770 + C14773 - C14772) * C9716 +
           (C4407 * C14408 - C4411 * C14406 + C44312 * C14410 -
            C4413 * C14407) *
               C9819 +
           (C4407 * C14767 - C4411 * C14765 + C44312 * C14768 -
            C4413 * C14766) *
               C44323) *
              C44245 * C4004) *
         C44195 * C44161) /
        (p * q * std::sqrt(p + q));
    d2eezy[26] += (2 * std::pow(Pi, 2.5) *
                   ((((C44245 * C152 - C151 * C93) * C9818 +
                      (C44245 * C491 - C151 * C443) * C9716 +
                      (C10968 - C10969) * C9819 + (C11430 - C11431) * C44323) *
                         C4407 +
                     ((C163 - C164) * C9818 + (C497 - C498) * C9716 +
                      C10972 * C9819 + C11432 * C44323) *
                         C44312) *
                        C4002 +
                    (((C10969 - C10968) * C9818 + (C11431 - C11430) * C9716 +
                      (C14483 - C14484) * C9819 + (C14826 - C14827) * C44323) *
                         C4407 +
                     (C10974 * C9818 + C11433 * C9716 +
                      (C10976 - C10977) * C9819 + (C11434 - C11435) * C44323) *
                         C44312) *
                        C4003 +
                    (((C14484 - C14483) * C9818 + (C14827 - C14826) * C9716 +
                      (C44245 * C14478 - C151 * C14406) * C9819 +
                      (C44245 * C14823 - C151 * C14765) * C44323) *
                         C4407 +
                     ((C10977 - C10976) * C9818 + (C11435 - C11434) * C9716 +
                      (C44245 * C14479 - C151 * C14407) * C9819 +
                      (C44245 * C14824 - C151 * C14766) * C44323) *
                         C44312) *
                        C4004) *
                   C44195 * C44161) /
                  (p * q * std::sqrt(p + q));
    d2eezz[26] +=
        (2 * std::pow(Pi, 2.5) *
         (((C9818 * C215 - C10144 * C93 - C9818 * C443 + C9716 * C545 +
            C9819 * C1330 - C10145 * C1200 - C9819 * C1580 + C44323 * C1698) *
               C44245 * C4407 +
           (C10171 + C10172) * C44245 * C44312) *
              C4002 -
          ((C11514 + C11515) * C44245 * C44312 +
           (C9819 * C4099 - C10145 * C4005 - C9819 * C4269 + C44323 * C4354 +
            C9818 * C1330 - C10144 * C1200 - C9818 * C1580 + C9716 * C1698) *
               C44245 * C4407) *
              C4003 +
          ((C9818 * C4099 - C10144 * C4005 - C9818 * C4269 + C9716 * C4354 +
            C9819 * C14536 - C10145 * C14406 - C9819 * C14765 +
            C44323 * C14877) *
               C44245 * C4407 +
           (C9818 * C4100 - C10144 * C4006 - C9818 * C4270 + C9716 * C4355 +
            C9819 * C14537 - C10145 * C14407 - C9819 * C14766 +
            C44323 * C14878) *
               C44245 * C44312) *
              C4004) *
         C44195 * C44161) /
        (p * q * std::sqrt(p + q));
    d2eexx[27] +=
        (2 * std::pow(Pi, 2.5) *
         (((C14933 * C98 - C14934 * C93 - C14933 * C99 + C14929 * C108 +
            C14935 * C100 - C14936 * C94 - C14935 * C101 + C44312 * C109) *
               C44260 * C14931 +
           (C14933 * C636 - C14934 * C630 - C14933 * C637 + C14929 * C642 +
            C14935 * C634 - C14936 * C629 - C14935 * C635 + C44312 * C641) *
               C44260 * C44321) *
              C44212 * C44195 * C84 -
          ((C14935 * C632 - C14936 * C628 - C14935 * C633 + C44312 * C640 +
            C14933 * C634 - C14934 * C629 - C14933 * C635 + C14929 * C641) *
               C44260 * C44321 +
           (C14935 * C102 - C14936 * C95 - C14935 * C103 + C44312 * C110 +
            C14933 * C100 - C14934 * C94 - C14933 * C101 + C14929 * C109) *
               C44260 * C14931) *
              C44212 * C44195 * C85 +
          ((C14933 * C102 - C14934 * C95 - C14933 * C103 + C14929 * C110 +
            C14935 * C104 - C14936 * C96 - C14935 * C105 + C44312 * C111) *
               C44260 * C14931 +
           (C14933 * C632 - C14934 * C628 - C14933 * C633 + C14929 * C640 +
            C14935 * C638 - C14936 * C631 - C14935 * C639 + C44312 * C643) *
               C44260 * C44321) *
              C44212 * C44195 * C86)) /
        (p * q * std::sqrt(p + q));
    d2eexy[27] +=
        (2 * std::pow(Pi, 2.5) *
         (((C14931 * C152 - C14987 * C93 + C44321 * C694 - C14988 * C630) *
               C14933 +
           (C14931 * C157 - C14987 * C99 + C44321 * C698 - C14988 * C637) *
               C14929 +
           (C14990 - C14991 + C14992 - C14993) * C14935 +
           (C14994 - C14995 + C14996 - C14997) * C44312) *
              C44260 * C44212 * C44195 * C84 +
          ((C14991 - C14990 + C14993 - C14992) * C14933 +
           (C14995 - C14994 + C14997 - C14996) * C14929 +
           (C14998 - C14999 + C15000 - C15001) * C14935 +
           (C15002 - C15003 + C15004 - C15005) * C44312) *
              C44260 * C44212 * C44195 * C85 +
          ((C14999 - C14998 + C15001 - C15000) * C14933 +
           (C15003 - C15002 + C15005 - C15004) * C14929 +
           (C14931 * C155 - C14987 * C96 + C44321 * C697 - C14988 * C631) *
               C14935 +
           (C14931 * C160 - C14987 * C105 + C44321 * C701 - C14988 * C639) *
               C44312) *
              C44260 * C44212 * C44195 * C86)) /
        (p * q * std::sqrt(p + q));
    d2eexz[27] += (2 * std::pow(Pi, 2.5) *
                   ((((C44260 * C215 - C214 * C93) * C14933 +
                      (C44260 * C220 - C214 * C99) * C14929 +
                      (C226 - C227) * C14935 + (C228 - C229) * C44312) *
                         C14931 +
                     ((C5110 - C5111) * C14933 + (C5112 - C5113) * C14929 +
                      C5114 * C14935 + C5115 * C44312) *
                         C44321) *
                        C44212 * C44195 * C84 +
                    (((C227 - C226) * C14933 + (C229 - C228) * C14929 +
                      (C231 - C230) * C14935 + (C233 - C232) * C44312) *
                         C14931 +
                     (C5116 * C14933 + C5117 * C14929 + (C773 - C774) * C14935 +
                      (C775 - C776) * C44312) *
                         C44321) *
                        C44212 * C44195 * C85 +
                    ((C238 * C14933 + C239 * C14929 + (C235 - C234) * C14935 +
                      (C237 - C236) * C44312) *
                         C14931 +
                     ((C774 - C773) * C14933 + (C776 - C775) * C14929 +
                      (C44260 * C763 - C214 * C631) * C14935 +
                      (C44260 * C767 - C214 * C639) * C44312) *
                         C44321) *
                        C44212 * C44195 * C86)) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[27] +=
        (2 * std::pow(Pi, 2.5) *
         (((C14929 * C98 - C14933 * C93 + C44312 * C100 - C14935 * C94) *
               C14987 +
           (C14929 * C282 - C14933 * C277 + C44312 * C283 - C14935 * C278) *
               C14931 +
           (C14929 * C636 - C14933 * C630 + C44312 * C634 - C14935 * C629) *
               C14988 +
           (C14929 * C830 - C14933 * C826 + C44312 * C831 - C14935 * C827) *
               C44321) *
              C44260 * C44212 * C44195 * C84 +
          ((C14933 * C94 - C14929 * C100 + C14935 * C95 - C44312 * C102) *
               C14987 +
           (C14933 * C278 - C14929 * C283 + C14935 * C279 - C44312 * C284) *
               C14931 +
           (C14933 * C629 - C14929 * C634 + C14935 * C628 - C44312 * C632) *
               C14988 +
           (C14933 * C827 - C14929 * C831 + C14935 * C828 - C44312 * C832) *
               C44321) *
              C44260 * C44212 * C44195 * C85 +
          ((C14929 * C102 - C14933 * C95 + C44312 * C104 - C14935 * C96) *
               C14987 +
           (C14929 * C284 - C14933 * C279 + C44312 * C285 - C14935 * C280) *
               C14931 +
           (C14929 * C632 - C14933 * C628 + C44312 * C638 - C14935 * C631) *
               C14988 +
           (C14929 * C832 - C14933 * C828 + C44312 * C833 - C14935 * C829) *
               C44321) *
              C44260 * C44212 * C44195 * C86)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[27] +=
        (2 * std::pow(Pi, 2.5) *
         (((C14987 * C152 - C15155 * C93 - C14987 * C277 + C14931 * C326 +
            C14988 * C694 - C15156 * C630 - C14988 * C826 + C44321 * C886) *
               C14929 +
           (C15182 + C15183) * C44312) *
              C44260 * C44212 * C44195 * C84 -
          ((C15184 + C15185) * C44312 + (C15183 + C15182) * C14929) * C44260 *
              C44212 * C44195 * C85 +
          ((C15185 + C15184) * C14929 +
           (C14987 * C155 - C15155 * C96 - C14987 * C280 + C14931 * C329 +
            C14988 * C697 - C15156 * C631 - C14988 * C829 + C44321 * C887) *
               C44312) *
              C44260 * C44212 * C44195 * C86)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[27] += (2 * std::pow(Pi, 2.5) *
                   ((((C44260 * C215 - C214 * C93) * C14987 +
                      (C44260 * C390 - C214 * C277) * C14931 +
                      (C5110 - C5111) * C14988 + (C5350 - C5351) * C44321) *
                         C14929 +
                     ((C226 - C227) * C14987 + (C396 - C397) * C14931 +
                      C5114 * C14988 + C5352 * C44321) *
                         C44312) *
                        C44212 * C44195 * C84 +
                    (((C227 - C226) * C14987 + (C397 - C396) * C14931 +
                      C5116 * C14988 + C5353 * C44321) *
                         C14929 +
                     ((C231 - C230) * C14987 + (C400 - C399) * C14931 +
                      (C773 - C774) * C14988 + (C959 - C960) * C44321) *
                         C44312) *
                        C44212 * C44195 * C85 +
                    ((C238 * C14987 + C403 * C14931 + (C774 - C773) * C14988 +
                      (C960 - C959) * C44321) *
                         C14929 +
                     ((C235 - C234) * C14987 + (C402 - C401) * C14931 +
                      (C44260 * C763 - C214 * C631) * C14988 +
                      (C44260 * C955 - C214 * C829) * C44321) *
                         C44312) *
                        C44212 * C44195 * C86)) /
                  (p * q * std::sqrt(p + q));
    d2eezx[27] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C14929 * C98 - C14933 * C93 + C44312 * C100 - C14935 * C94) *
                C214 +
            (C14929 * C448 - C14933 * C443 + C44312 * C449 - C14935 * C444) *
                C44260) *
               C14931 +
           ((C14929 * C636 - C14933 * C630 + C44312 * C634 - C14935 * C629) *
                C214 +
            (C14929 * C1014 - C14933 * C1010 + C44312 * C1015 -
             C14935 * C1011) *
                C44260) *
               C44321) *
              C44212 * C44195 * C84 +
          (((C14933 * C94 - C14929 * C100 + C14935 * C95 - C44312 * C102) *
                C214 +
            (C14933 * C444 - C14929 * C449 + C14935 * C445 - C44312 * C450) *
                C44260) *
               C14931 +
           ((C14933 * C629 - C14929 * C634 + C14935 * C628 - C44312 * C632) *
                C214 +
            (C14933 * C1011 - C14929 * C1015 + C14935 * C1012 -
             C44312 * C1016) *
                C44260) *
               C44321) *
              C44212 * C44195 * C85 +
          (((C14929 * C102 - C14933 * C95 + C44312 * C104 - C14935 * C96) *
                C214 +
            (C14929 * C450 - C14933 * C445 + C44312 * C451 - C14935 * C446) *
                C44260) *
               C14931 +
           ((C14929 * C632 - C14933 * C628 + C44312 * C638 - C14935 * C631) *
                C214 +
            (C14929 * C1016 - C14933 * C1012 + C44312 * C1017 -
             C14935 * C1013) *
                C44260) *
               C44321) *
              C44212 * C44195 * C86)) /
        (p * q * std::sqrt(p + q));
    d2eezy[27] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C14931 * C152 - C14987 * C93 + C44321 * C694 - C14988 * C630) *
                C214 +
            (C14931 * C491 - C14987 * C443 + C44321 * C1068 - C14988 * C1010) *
                C44260) *
               C14929 +
           ((C14990 - C14991 + C14992 - C14993) * C214 +
            (C15336 - C15337 + C15338 - C15339) * C44260) *
               C44312) *
              C44212 * C44195 * C84 +
          (((C14991 - C14990 + C14993 - C14992) * C214 +
            (C15337 - C15336 + C15339 - C15338) * C44260) *
               C14929 +
           ((C14998 - C14999 + C15000 - C15001) * C214 +
            (C15340 - C15341 + C15342 - C15343) * C44260) *
               C44312) *
              C44212 * C44195 * C85 +
          (((C14999 - C14998 + C15001 - C15000) * C214 +
            (C15341 - C15340 + C15343 - C15342) * C44260) *
               C14929 +
           ((C14931 * C155 - C14987 * C96 + C44321 * C697 - C14988 * C631) *
                C214 +
            (C14931 * C494 - C14987 * C446 + C44321 * C1071 - C14988 * C1013) *
                C44260) *
               C44312) *
              C44212 * C44195 * C86)) /
        (p * q * std::sqrt(p + q));
    d2eezz[27] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C214 * C215 - C544 * C93 - C214 * C443 + C44260 * C545) * C14931 +
            C5579 * C44321) *
               C14929 +
           (C15394 + C15395) * C44312) *
              C44212 * C44195 * C84 -
          ((C15396 + C15397) * C44312 + (C15395 + C15394) * C14929) * C44212 *
              C44195 * C85 +
          ((C15397 + C15396) * C14929 +
           (C571 * C14931 +
            (C214 * C763 - C544 * C631 - C214 * C1013 + C44260 * C1129) *
                C44321) *
               C44312) *
              C44212 * C44195 * C86)) /
        (p * q * std::sqrt(p + q));
    d2eexx[28] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C14933 * C98 - C14934 * C93 - C14933 * C99 + C14929 * C108 +
             C14935 * C100 - C14936 * C94 - C14935 * C101 + C44312 * C109) *
                C44260 * C14931 +
            (C15488 + C15489) * C44260 * C44321) *
               C44212 * C624 -
           ((C14935 * C2217 - C14936 * C2213 - C14935 * C2218 + C44312 * C2222 +
             C14933 * C2215 - C14934 * C2212 - C14933 * C2216 +
             C14929 * C2221) *
                C44260 * C44321 +
            (C15489 + C15488) * C44260 * C14931) *
               C44212 * C44317) *
              C626 +
          (((C15490 + C15491) * C44260 * C14931 +
            (C14933 * C2217 - C14934 * C2213 - C14933 * C2218 + C14929 * C2222 +
             C14935 * C2219 - C14936 * C2214 - C14935 * C2220 +
             C44312 * C2223) *
                C44260 * C44321) *
               C44212 * C44317 -
           ((C15491 + C15490) * C44260 * C44321 +
            (C14935 * C102 - C14936 * C95 - C14935 * C103 + C44312 * C110 +
             C14933 * C100 - C14934 * C94 - C14933 * C101 + C14929 * C109) *
                C44260 * C14931) *
               C44212 * C624) *
              C44315)) /
        (p * q * std::sqrt(p + q));
    d2eexy[28] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C14931 * C152 - C14987 * C93 + C44321 * C694 - C14988 * C630) *
                C14933 +
            (C14931 * C157 - C14987 * C99 + C44321 * C698 - C14988 * C637) *
                C14929 +
            (C14990 - C14991 + C14992 - C14993) * C14935 +
            (C14994 - C14995 + C14996 - C14997) * C44312) *
               C44260 * C44212 * C624 +
           ((C14987 * C630 - C14931 * C694 + C14988 * C2212 - C44321 * C2262) *
                C14933 +
            (C14987 * C637 - C14931 * C698 + C14988 * C2216 - C44321 * C2265) *
                C14929 +
            (C15558 - C15559 + C15560 - C15561) * C14935 +
            (C15562 - C15563 + C15564 - C15565) * C44312) *
               C44260 * C44212 * C44317) *
              C626 +
          (((C14991 - C14990 + C14993 - C14992) * C14933 +
            (C14995 - C14994 + C14997 - C14996) * C14929 +
            (C14998 - C14999 + C15000 - C15001) * C14935 +
            (C15002 - C15003 + C15004 - C15005) * C44312) *
               C44260 * C44212 * C624 +
           ((C15559 - C15558 + C15561 - C15560) * C14933 +
            (C15563 - C15562 + C15565 - C15564) * C14929 +
            (C14931 * C696 - C14987 * C628 + C44321 * C2264 - C14988 * C2214) *
                C14935 +
            (C14931 * C700 - C14987 * C633 + C44321 * C2267 - C14988 * C2220) *
                C44312) *
               C44260 * C44212 * C44317) *
              C44315)) /
        (p * q * std::sqrt(p + q));
    d2eexz[28] += (2 * std::pow(Pi, 2.5) *
                   (((((C44260 * C215 - C214 * C93) * C14933 +
                       (C44260 * C220 - C214 * C99) * C14929 +
                       (C226 - C227) * C14935 + (C228 - C229) * C44312) *
                          C14931 +
                      ((C5110 - C5111) * C14933 + (C5112 - C5113) * C14929 +
                       C5114 * C14935 + C5115 * C44312) *
                          C44321) *
                         C44212 * C624 +
                     (((C5111 - C5110) * C14933 + (C5113 - C5112) * C14929 +
                       C5116 * C14935 + C5117 * C44312) *
                          C14931 +
                      ((C6991 - C6992) * C14933 + (C6993 - C6994) * C14929 +
                       (C5118 - C5119) * C14935 + (C5120 - C5121) * C44312) *
                          C44321) *
                         C44212 * C44317) *
                        C626 +
                    ((((C227 - C226) * C14933 + (C229 - C228) * C14929 +
                       (C231 - C230) * C14935 + (C233 - C232) * C44312) *
                          C14931 +
                      (C5116 * C14933 + C5117 * C14929 +
                       (C773 - C774) * C14935 + (C775 - C776) * C44312) *
                          C44321) *
                         C44212 * C624 +
                     ((C5114 * C14933 + C5115 * C14929 +
                       (C774 - C773) * C14935 + (C776 - C775) * C44312) *
                          C14931 +
                      ((C5119 - C5118) * C14933 + (C5121 - C5120) * C14929 +
                       (C44260 * C2308 - C214 * C2214) * C14935 +
                       (C44260 * C2311 - C214 * C2220) * C44312) *
                          C44321) *
                         C44212 * C44317) *
                        C44315)) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[28] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C14929 * C98 - C14933 * C93 + C44312 * C100 - C14935 * C94) *
                C14987 +
            (C14929 * C282 - C14933 * C277 + C44312 * C283 - C14935 * C278) *
                C14931 +
            (C15698 - C15699 + C15700 - C15701) * C14988 +
            (C15702 - C15703 + C15704 - C15705) * C44321) *
               C44260 * C44212 * C624 +
           ((C15699 - C15698 + C15701 - C15700) * C14987 +
            (C15703 - C15702 + C15705 - C15704) * C14931 +
            (C14933 * C2212 - C14929 * C2215 + C14935 * C2213 -
             C44312 * C2217) *
                C14988 +
            (C14933 * C2350 - C14929 * C2353 + C14935 * C2351 -
             C44312 * C2354) *
                C44321) *
               C44260 * C44212 * C44317) *
              C626 +
          (((C14933 * C94 - C14929 * C100 + C14935 * C95 - C44312 * C102) *
                C14987 +
            (C14933 * C278 - C14929 * C283 + C14935 * C279 - C44312 * C284) *
                C14931 +
            (C15706 - C15707 + C15708 - C15709) * C14988 +
            (C15710 - C15711 + C15712 - C15713) * C44321) *
               C44260 * C44212 * C624 +
           ((C15707 - C15706 + C15709 - C15708) * C14987 +
            (C15711 - C15710 + C15713 - C15712) * C14931 +
            (C14929 * C2217 - C14933 * C2213 + C44312 * C2219 -
             C14935 * C2214) *
                C14988 +
            (C14929 * C2354 - C14933 * C2351 + C44312 * C2355 -
             C14935 * C2352) *
                C44321) *
               C44260 * C44212 * C44317) *
              C44315)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[28] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C14987 * C152 - C15155 * C93 - C14987 * C277 + C14931 * C326 +
             C14988 * C694 - C15156 * C630 - C14988 * C826 + C44321 * C886) *
                C14929 +
            (C15182 + C15183) * C44312) *
               C44260 * C44212 * C624 -
           ((C15792 + C15793) * C44312 +
            (C14988 * C2262 - C15156 * C2212 - C14988 * C2350 + C44321 * C2394 +
             C14987 * C694 - C15155 * C630 - C14987 * C826 + C14931 * C886) *
                C14929) *
               C44260 * C44212 * C44317) *
              C626 +
          (((C15793 + C15792) * C14929 +
            (C14987 * C696 - C15155 * C628 - C14987 * C828 + C14931 * C884 +
             C14988 * C2264 - C15156 * C2214 - C14988 * C2352 +
             C44321 * C2396) *
                C44312) *
               C44260 * C44212 * C44317 -
           ((C15184 + C15185) * C44312 + (C15183 + C15182) * C14929) * C44260 *
               C44212 * C624) *
              C44315)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[28] += (2 * std::pow(Pi, 2.5) *
                   (((((C44260 * C215 - C214 * C93) * C14987 +
                       (C44260 * C390 - C214 * C277) * C14931 +
                       (C5110 - C5111) * C14988 + (C5350 - C5351) * C44321) *
                          C14929 +
                      ((C226 - C227) * C14987 + (C396 - C397) * C14931 +
                       C5114 * C14988 + C5352 * C44321) *
                          C44312) *
                         C44212 * C624 +
                     (((C5111 - C5110) * C14987 + (C5351 - C5350) * C14931 +
                       (C6991 - C6992) * C14988 + (C7161 - C7162) * C44321) *
                          C14929 +
                      (C5116 * C14987 + C5353 * C14931 +
                       (C5118 - C5119) * C14988 + (C5354 - C5355) * C44321) *
                          C44312) *
                         C44212 * C44317) *
                        C626 +
                    ((((C227 - C226) * C14987 + (C397 - C396) * C14931 +
                       C5116 * C14988 + C5353 * C44321) *
                          C14929 +
                      ((C231 - C230) * C14987 + (C400 - C399) * C14931 +
                       (C773 - C774) * C14988 + (C959 - C960) * C44321) *
                          C44312) *
                         C44212 * C624 +
                     ((C5114 * C14987 + C5352 * C14931 +
                       (C5119 - C5118) * C14988 + (C5355 - C5354) * C44321) *
                          C14929 +
                      ((C774 - C773) * C14987 + (C960 - C959) * C14931 +
                       (C44260 * C2308 - C214 * C2214) * C14988 +
                       (C44260 * C2437 - C214 * C2352) * C44321) *
                          C44312) *
                         C44212 * C44317) *
                        C44315)) /
                  (p * q * std::sqrt(p + q));
    d2eezx[28] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C14929 * C98 - C14933 * C93 + C44312 * C100 - C14935 * C94) *
                 C214 +
             (C14929 * C448 - C14933 * C443 + C44312 * C449 - C14935 * C444) *
                 C44260) *
                C14931 +
            ((C15698 - C15699 + C15700 - C15701) * C214 +
             (C15926 - C15927 + C15928 - C15929) * C44260) *
                C44321) *
               C44212 * C624 +
           (((C15699 - C15698 + C15701 - C15700) * C214 +
             (C15927 - C15926 + C15929 - C15928) * C44260) *
                C14931 +
            ((C14933 * C2212 - C14929 * C2215 + C14935 * C2213 -
              C44312 * C2217) *
                 C214 +
             (C14933 * C2476 - C14929 * C2479 + C14935 * C2477 -
              C44312 * C2480) *
                 C44260) *
                C44321) *
               C44212 * C44317) *
              C626 +
          ((((C14933 * C94 - C14929 * C100 + C14935 * C95 - C44312 * C102) *
                 C214 +
             (C14933 * C444 - C14929 * C449 + C14935 * C445 - C44312 * C450) *
                 C44260) *
                C14931 +
            ((C15706 - C15707 + C15708 - C15709) * C214 +
             (C15930 - C15931 + C15932 - C15933) * C44260) *
                C44321) *
               C44212 * C624 +
           (((C15707 - C15706 + C15709 - C15708) * C214 +
             (C15931 - C15930 + C15933 - C15932) * C44260) *
                C14931 +
            ((C14929 * C2217 - C14933 * C2213 + C44312 * C2219 -
              C14935 * C2214) *
                 C214 +
             (C14929 * C2480 - C14933 * C2477 + C44312 * C2481 -
              C14935 * C2478) *
                 C44260) *
                C44321) *
               C44212 * C44317) *
              C44315)) /
        (p * q * std::sqrt(p + q));
    d2eezy[28] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C14931 * C152 - C14987 * C93 + C44321 * C694 - C14988 * C630) *
                 C214 +
             (C14931 * C491 - C14987 * C443 + C44321 * C1068 - C14988 * C1010) *
                 C44260) *
                C14929 +
            ((C14990 - C14991 + C14992 - C14993) * C214 +
             (C15336 - C15337 + C15338 - C15339) * C44260) *
                C44312) *
               C44212 * C624 +
           (((C14987 * C630 - C14931 * C694 + C14988 * C2212 - C44321 * C2262) *
                 C214 +
             (C14987 * C1010 - C14931 * C1068 + C14988 * C2476 -
              C44321 * C2520) *
                 C44260) *
                C14929 +
            ((C15558 - C15559 + C15560 - C15561) * C214 +
             (C16000 - C16001 + C16002 - C16003) * C44260) *
                C44312) *
               C44212 * C44317) *
              C626 +
          ((((C14991 - C14990 + C14993 - C14992) * C214 +
             (C15337 - C15336 + C15339 - C15338) * C44260) *
                C14929 +
            ((C14998 - C14999 + C15000 - C15001) * C214 +
             (C15340 - C15341 + C15342 - C15343) * C44260) *
                C44312) *
               C44212 * C624 +
           (((C15559 - C15558 + C15561 - C15560) * C214 +
             (C16001 - C16000 + C16003 - C16002) * C44260) *
                C14929 +
            ((C14931 * C696 - C14987 * C628 + C44321 * C2264 - C14988 * C2214) *
                 C214 +
             (C14931 * C1070 - C14987 * C1012 + C44321 * C2522 -
              C14988 * C2478) *
                 C44260) *
                C44312) *
               C44212 * C44317) *
              C44315)) /
        (p * q * std::sqrt(p + q));
    d2eezz[28] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C214 * C215 - C544 * C93 - C214 * C443 + C44260 * C545) * C14931 +
             C5579 * C44321) *
                C14929 +
            (C15394 + C15395) * C44312) *
               C44212 * C624 -
           ((C16070 + C16071) * C44312 +
            (C7331 * C44321 + C5579 * C14931) * C14929) *
               C44212 * C44317) *
              C626 +
          (((C16071 + C16070) * C14929 +
            (C1143 * C14931 +
             (C214 * C2308 - C544 * C2214 - C214 * C2478 + C44260 * C2563) *
                 C44321) *
                C44312) *
               C44212 * C44317 -
           ((C15396 + C15397) * C44312 + (C15395 + C15394) * C14929) * C44212 *
               C624) *
              C44315)) /
        (p * q * std::sqrt(p + q));
    d2eexx[29] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C14933 * C98 - C14934 * C93 - C14933 * C99 + C14929 * C108 +
             C14935 * C100 - C14936 * C94 - C14935 * C101 + C44312 * C109) *
                C44260 * C14931 +
            (C15488 + C15489) * C44260 * C44321) *
               C1196 -
           ((C14935 * C2619 - C14936 * C2615 - C14935 * C2620 + C44312 * C2624 +
             C14933 * C2617 - C14934 * C2614 - C14933 * C2618 +
             C14929 * C2623) *
                C44260 * C44321 +
            (C14935 * C1204 - C14936 * C1199 - C14935 * C1205 + C44312 * C1211 +
             C14933 * C1206 - C14934 * C1200 - C14933 * C1207 +
             C14929 * C1212) *
                C44260 * C14931) *
               C44319) *
              C44195 * C626 +
          (((C14933 * C1204 - C14934 * C1199 - C14933 * C1205 + C14929 * C1211 +
             C14935 * C1202 - C14936 * C1198 - C14935 * C1203 +
             C44312 * C1210) *
                C44260 * C14931 +
            (C14933 * C2619 - C14934 * C2615 - C14933 * C2620 + C14929 * C2624 +
             C14935 * C2621 - C14936 * C2616 - C14935 * C2622 +
             C44312 * C2625) *
                C44260 * C44321) *
               C44319 -
           ((C15491 + C15490) * C44260 * C44321 +
            (C14935 * C102 - C14936 * C95 - C14935 * C103 + C44312 * C110 +
             C14933 * C100 - C14934 * C94 - C14933 * C101 + C14929 * C109) *
                C44260 * C14931) *
               C1196) *
              C44195 * C44315)) /
        (p * q * std::sqrt(p + q));
    d2eexy[29] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C14931 * C152 - C14987 * C93 + C44321 * C694 - C14988 * C630) *
                C14933 +
            (C14931 * C157 - C14987 * C99 + C44321 * C698 - C14988 * C637) *
                C14929 +
            (C14990 - C14991 + C14992 - C14993) * C14935 +
            (C14994 - C14995 + C14996 - C14997) * C44312) *
               C44260 * C1196 +
           ((C14987 * C1200 - C14931 * C1264 + C14988 * C2614 -
             C44321 * C2676) *
                C14933 +
            (C14987 * C1207 - C14931 * C1268 + C14988 * C2618 -
             C44321 * C2679) *
                C14929 +
            (C16204 - C16205 + C16206 - C16207) * C14935 +
            (C16208 - C16209 + C16210 - C16211) * C44312) *
               C44260 * C44319) *
              C44195 * C626 +
          (((C14991 - C14990 + C14993 - C14992) * C14933 +
            (C14995 - C14994 + C14997 - C14996) * C14929 +
            (C14998 - C14999 + C15000 - C15001) * C14935 +
            (C15002 - C15003 + C15004 - C15005) * C44312) *
               C44260 * C1196 +
           ((C16205 - C16204 + C16207 - C16206) * C14933 +
            (C16209 - C16208 + C16211 - C16210) * C14929 +
            (C14931 * C1266 - C14987 * C1198 + C44321 * C2678 -
             C14988 * C2616) *
                C14935 +
            (C14931 * C1270 - C14987 * C1203 + C44321 * C2681 -
             C14988 * C2622) *
                C44312) *
               C44260 * C44319) *
              C44195 * C44315)) /
        (p * q * std::sqrt(p + q));
    d2eexz[29] += (2 * std::pow(Pi, 2.5) *
                   (((((C44260 * C215 - C214 * C93) * C14933 +
                       (C44260 * C220 - C214 * C99) * C14929 +
                       (C226 - C227) * C14935 + (C228 - C229) * C44312) *
                          C14931 +
                      ((C5110 - C5111) * C14933 + (C5112 - C5113) * C14929 +
                       C5114 * C14935 + C5115 * C44312) *
                          C44321) *
                         C1196 +
                     (((C214 * C1200 - C44260 * C1330) * C14933 +
                       (C214 * C1207 - C44260 * C1334) * C14929 +
                       (C1339 - C1340) * C14935 + (C1341 - C1342) * C44312) *
                          C14931 +
                      ((C7560 - C7561) * C14933 + (C7562 - C7563) * C14929 +
                       (C5788 - C5789) * C14935 + (C5790 - C5791) * C44312) *
                          C44321) *
                         C44319) *
                        C44195 * C626 +
                    ((((C227 - C226) * C14933 + (C229 - C228) * C14929 +
                       (C231 - C230) * C14935 + (C233 - C232) * C44312) *
                          C14931 +
                      (C5116 * C14933 + C5117 * C14929 +
                       (C773 - C774) * C14935 + (C775 - C776) * C44312) *
                          C44321) *
                         C1196 +
                     (((C1340 - C1339) * C14933 + (C1342 - C1341) * C14929 +
                       (C1344 - C1343) * C14935 + (C1346 - C1345) * C44312) *
                          C14931 +
                      ((C5789 - C5788) * C14933 + (C5791 - C5790) * C14929 +
                       (C44260 * C2734 - C214 * C2616) * C14935 +
                       (C44260 * C2737 - C214 * C2622) * C44312) *
                          C44321) *
                         C44319) *
                        C44195 * C44315)) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[29] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C14929 * C98 - C14933 * C93 + C44312 * C100 - C14935 * C94) *
                C14987 +
            (C14929 * C282 - C14933 * C277 + C44312 * C283 - C14935 * C278) *
                C14931 +
            (C15698 - C15699 + C15700 - C15701) * C14988 +
            (C15702 - C15703 + C15704 - C15705) * C44321) *
               C44260 * C1196 +
           ((C14933 * C1200 - C14929 * C1206 + C14935 * C1199 -
             C44312 * C1204) *
                C14987 +
            (C14933 * C1396 - C14929 * C1400 + C14935 * C1397 -
             C44312 * C1401) *
                C14931 +
            (C14933 * C2614 - C14929 * C2617 + C14935 * C2615 -
             C44312 * C2619) *
                C14988 +
            (C14933 * C2788 - C14929 * C2791 + C14935 * C2789 -
             C44312 * C2792) *
                C44321) *
               C44260 * C44319) *
              C44195 * C626 +
          (((C14933 * C94 - C14929 * C100 + C14935 * C95 - C44312 * C102) *
                C14987 +
            (C14933 * C278 - C14929 * C283 + C14935 * C279 - C44312 * C284) *
                C14931 +
            (C15706 - C15707 + C15708 - C15709) * C14988 +
            (C15710 - C15711 + C15712 - C15713) * C44321) *
               C44260 * C1196 +
           ((C14929 * C1204 - C14933 * C1199 + C44312 * C1202 -
             C14935 * C1198) *
                C14987 +
            (C14929 * C1401 - C14933 * C1397 + C44312 * C1402 -
             C14935 * C1398) *
                C14931 +
            (C14929 * C2619 - C14933 * C2615 + C44312 * C2621 -
             C14935 * C2616) *
                C14988 +
            (C14929 * C2792 - C14933 * C2789 + C44312 * C2793 -
             C14935 * C2790) *
                C44321) *
               C44260 * C44319) *
              C44195 * C44315)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[29] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C14987 * C152 - C15155 * C93 - C14987 * C277 + C14931 * C326 +
             C14988 * C694 - C15156 * C630 - C14988 * C826 + C44321 * C886) *
                C14929 +
            (C15182 + C15183) * C44312) *
               C44260 * C1196 -
           ((C16422 + C16423) * C44312 +
            (C14988 * C2676 - C15156 * C2614 - C14988 * C2788 + C44321 * C2844 +
             C14987 * C1264 - C15155 * C1200 - C14987 * C1396 +
             C14931 * C1456) *
                C14929) *
               C44260 * C44319) *
              C44195 * C626 +
          (((C16423 + C16422) * C14929 +
            (C14987 * C1266 - C15155 * C1198 - C14987 * C1398 + C14931 * C1454 +
             C14988 * C2678 - C15156 * C2616 - C14988 * C2790 +
             C44321 * C2846) *
                C44312) *
               C44260 * C44319 -
           ((C15184 + C15185) * C44312 + (C15183 + C15182) * C14929) * C44260 *
               C1196) *
              C44195 * C44315)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[29] += (2 * std::pow(Pi, 2.5) *
                   (((((C44260 * C215 - C214 * C93) * C14987 +
                       (C44260 * C390 - C214 * C277) * C14931 +
                       (C5110 - C5111) * C14988 + (C5350 - C5351) * C44321) *
                          C14929 +
                      ((C226 - C227) * C14987 + (C396 - C397) * C14931 +
                       C5114 * C14988 + C5352 * C44321) *
                          C44312) *
                         C1196 +
                     (((C214 * C1200 - C44260 * C1330) * C14987 +
                       (C214 * C1396 - C44260 * C1522) * C14931 +
                       (C7560 - C7561) * C14988 + (C7778 - C7779) * C44321) *
                          C14929 +
                      ((C1339 - C1340) * C14987 + (C1527 - C1528) * C14931 +
                       (C5788 - C5789) * C14988 + (C6004 - C6005) * C44321) *
                          C44312) *
                         C44319) *
                        C44195 * C626 +
                    ((((C227 - C226) * C14987 + (C397 - C396) * C14931 +
                       C5116 * C14988 + C5353 * C44321) *
                          C14929 +
                      ((C231 - C230) * C14987 + (C400 - C399) * C14931 +
                       (C773 - C774) * C14988 + (C959 - C960) * C44321) *
                          C44312) *
                         C1196 +
                     (((C1340 - C1339) * C14987 + (C1528 - C1527) * C14931 +
                       (C5789 - C5788) * C14988 + (C6005 - C6004) * C44321) *
                          C14929 +
                      ((C1344 - C1343) * C14987 + (C1530 - C1529) * C14931 +
                       (C44260 * C2734 - C214 * C2616) * C14988 +
                       (C44260 * C2899 - C214 * C2790) * C44321) *
                          C44312) *
                         C44319) *
                        C44195 * C44315)) /
                  (p * q * std::sqrt(p + q));
    d2eezx[29] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C14929 * C98 - C14933 * C93 + C44312 * C100 - C14935 * C94) *
                 C214 +
             (C14929 * C448 - C14933 * C443 + C44312 * C449 - C14935 * C444) *
                 C44260) *
                C14931 +
            ((C15698 - C15699 + C15700 - C15701) * C214 +
             (C15926 - C15927 + C15928 - C15929) * C44260) *
                C44321) *
               C1196 +
           (((C14933 * C1200 - C14929 * C1206 + C14935 * C1199 -
              C44312 * C1204) *
                 C214 +
             (C14933 * C1580 - C14929 * C1584 + C14935 * C1581 -
              C44312 * C1585) *
                 C44260) *
                C14931 +
            ((C14933 * C2614 - C14929 * C2617 + C14935 * C2615 -
              C44312 * C2619) *
                 C214 +
             (C14933 * C2950 - C14929 * C2953 + C14935 * C2951 -
              C44312 * C2954) *
                 C44260) *
                C44321) *
               C44319) *
              C44195 * C626 +
          ((((C14933 * C94 - C14929 * C100 + C14935 * C95 - C44312 * C102) *
                 C214 +
             (C14933 * C444 - C14929 * C449 + C14935 * C445 - C44312 * C450) *
                 C44260) *
                C14931 +
            ((C15706 - C15707 + C15708 - C15709) * C214 +
             (C15930 - C15931 + C15932 - C15933) * C44260) *
                C44321) *
               C1196 +
           (((C14929 * C1204 - C14933 * C1199 + C44312 * C1202 -
              C14935 * C1198) *
                 C214 +
             (C14929 * C1585 - C14933 * C1581 + C44312 * C1586 -
              C14935 * C1582) *
                 C44260) *
                C14931 +
            ((C14929 * C2619 - C14933 * C2615 + C44312 * C2621 -
              C14935 * C2616) *
                 C214 +
             (C14929 * C2954 - C14933 * C2951 + C44312 * C2955 -
              C14935 * C2952) *
                 C44260) *
                C44321) *
               C44319) *
              C44195 * C44315)) /
        (p * q * std::sqrt(p + q));
    d2eezy[29] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C14931 * C152 - C14987 * C93 + C44321 * C694 - C14988 * C630) *
                 C214 +
             (C14931 * C491 - C14987 * C443 + C44321 * C1068 - C14988 * C1010) *
                 C44260) *
                C14929 +
            ((C14990 - C14991 + C14992 - C14993) * C214 +
             (C15336 - C15337 + C15338 - C15339) * C44260) *
                C44312) *
               C1196 +
           (((C14987 * C1200 - C14931 * C1264 + C14988 * C2614 -
              C44321 * C2676) *
                 C214 +
             (C14987 * C1580 - C14931 * C1638 + C14988 * C2950 -
              C44321 * C3006) *
                 C44260) *
                C14929 +
            ((C16204 - C16205 + C16206 - C16207) * C214 +
             (C16622 - C16623 + C16624 - C16625) * C44260) *
                C44312) *
               C44319) *
              C44195 * C626 +
          ((((C14991 - C14990 + C14993 - C14992) * C214 +
             (C15337 - C15336 + C15339 - C15338) * C44260) *
                C14929 +
            ((C14998 - C14999 + C15000 - C15001) * C214 +
             (C15340 - C15341 + C15342 - C15343) * C44260) *
                C44312) *
               C1196 +
           (((C16205 - C16204 + C16207 - C16206) * C214 +
             (C16623 - C16622 + C16625 - C16624) * C44260) *
                C14929 +
            ((C14931 * C1266 - C14987 * C1198 + C44321 * C2678 -
              C14988 * C2616) *
                 C214 +
             (C14931 * C1640 - C14987 * C1582 + C44321 * C3008 -
              C14988 * C2952) *
                 C44260) *
                C44312) *
               C44319) *
              C44195 * C44315)) /
        (p * q * std::sqrt(p + q));
    d2eezz[29] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C214 * C215 - C544 * C93 - C214 * C443 + C44260 * C545) * C14931 +
             C5579 * C44321) *
                C14929 +
            (C15394 + C15395) * C44312) *
               C1196 -
           ((C16692 + C16693) * C44312 +
            (C7996 * C44321 +
             (C214 * C1330 - C544 * C1200 - C214 * C1580 + C44260 * C1698) *
                 C14931) *
                C14929) *
               C44319) *
              C44195 * C626 +
          (((C16693 + C16692) * C14929 +
            (C1713 * C14931 +
             (C214 * C2734 - C544 * C2616 - C214 * C2952 + C44260 * C3061) *
                 C44321) *
                C44312) *
               C44319 -
           ((C15396 + C15397) * C44312 + (C15395 + C15394) * C14929) * C1196) *
              C44195 * C44315)) /
        (p * q * std::sqrt(p + q));
    d2eexx[30] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C14933 * C98 - C14934 * C93 - C14933 * C99 + C14929 * C108 +
             C14935 * C100 - C14936 * C94 - C14935 * C101 + C44312 * C109) *
                C44260 * C14931 +
            (C15488 + C15489) * C44260 * C44321) *
               C44212 * C1766 -
           ((C14935 * C2217 - C14936 * C2213 - C14935 * C2218 + C44312 * C2222 +
             C14933 * C2215 - C14934 * C2212 - C14933 * C2216 +
             C14929 * C2221) *
                C44260 * C44321 +
            (C15489 + C15488) * C44260 * C14931) *
               C44212 * C44317) *
              C1768 +
          (((C15490 + C15491) * C44260 * C14931 +
            (C14933 * C2217 - C14934 * C2213 - C14933 * C2218 + C14929 * C2222 +
             C14935 * C2219 - C14936 * C2214 - C14935 * C2220 +
             C44312 * C2223) *
                C44260 * C44321) *
               C44212 * C44317 -
           ((C15491 + C15490) * C44260 * C44321 +
            (C14935 * C102 - C14936 * C95 - C14935 * C103 + C44312 * C110 +
             C14933 * C100 - C14934 * C94 - C14933 * C101 + C14929 * C109) *
                C44260 * C14931) *
               C44212 * C1766) *
              C44315)) /
        (p * q * std::sqrt(p + q));
    d2eexy[30] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C14931 * C152 - C14987 * C93 + C44321 * C694 - C14988 * C630) *
                C14933 +
            (C14931 * C157 - C14987 * C99 + C44321 * C698 - C14988 * C637) *
                C14929 +
            (C14990 - C14991 + C14992 - C14993) * C14935 +
            (C14994 - C14995 + C14996 - C14997) * C44312) *
               C44260 * C44212 * C1766 +
           ((C14987 * C630 - C14931 * C694 + C14988 * C2212 - C44321 * C2262) *
                C14933 +
            (C14987 * C637 - C14931 * C698 + C14988 * C2216 - C44321 * C2265) *
                C14929 +
            (C15558 - C15559 + C15560 - C15561) * C14935 +
            (C15562 - C15563 + C15564 - C15565) * C44312) *
               C44260 * C44212 * C44317) *
              C1768 +
          (((C14991 - C14990 + C14993 - C14992) * C14933 +
            (C14995 - C14994 + C14997 - C14996) * C14929 +
            (C14998 - C14999 + C15000 - C15001) * C14935 +
            (C15002 - C15003 + C15004 - C15005) * C44312) *
               C44260 * C44212 * C1766 +
           ((C15559 - C15558 + C15561 - C15560) * C14933 +
            (C15563 - C15562 + C15565 - C15564) * C14929 +
            (C14931 * C696 - C14987 * C628 + C44321 * C2264 - C14988 * C2214) *
                C14935 +
            (C14931 * C700 - C14987 * C633 + C44321 * C2267 - C14988 * C2220) *
                C44312) *
               C44260 * C44212 * C44317) *
              C44315)) /
        (p * q * std::sqrt(p + q));
    d2eexz[30] += (2 * std::pow(Pi, 2.5) *
                   (((((C44260 * C215 - C214 * C93) * C14933 +
                       (C44260 * C220 - C214 * C99) * C14929 +
                       (C226 - C227) * C14935 + (C228 - C229) * C44312) *
                          C14931 +
                      ((C5110 - C5111) * C14933 + (C5112 - C5113) * C14929 +
                       C5114 * C14935 + C5115 * C44312) *
                          C44321) *
                         C44212 * C1766 +
                     (((C5111 - C5110) * C14933 + (C5113 - C5112) * C14929 +
                       C5116 * C14935 + C5117 * C44312) *
                          C14931 +
                      ((C6991 - C6992) * C14933 + (C6993 - C6994) * C14929 +
                       (C5118 - C5119) * C14935 + (C5120 - C5121) * C44312) *
                          C44321) *
                         C44212 * C44317) *
                        C1768 +
                    ((((C227 - C226) * C14933 + (C229 - C228) * C14929 +
                       (C231 - C230) * C14935 + (C233 - C232) * C44312) *
                          C14931 +
                      (C5116 * C14933 + C5117 * C14929 +
                       (C773 - C774) * C14935 + (C775 - C776) * C44312) *
                          C44321) *
                         C44212 * C1766 +
                     ((C5114 * C14933 + C5115 * C14929 +
                       (C774 - C773) * C14935 + (C776 - C775) * C44312) *
                          C14931 +
                      ((C5119 - C5118) * C14933 + (C5121 - C5120) * C14929 +
                       (C44260 * C2308 - C214 * C2214) * C14935 +
                       (C44260 * C2311 - C214 * C2220) * C44312) *
                          C44321) *
                         C44212 * C44317) *
                        C44315)) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[30] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C14929 * C98 - C14933 * C93 + C44312 * C100 - C14935 * C94) *
                C14987 +
            (C14929 * C282 - C14933 * C277 + C44312 * C283 - C14935 * C278) *
                C14931 +
            (C15698 - C15699 + C15700 - C15701) * C14988 +
            (C15702 - C15703 + C15704 - C15705) * C44321) *
               C44260 * C44212 * C1766 +
           ((C15699 - C15698 + C15701 - C15700) * C14987 +
            (C15703 - C15702 + C15705 - C15704) * C14931 +
            (C14933 * C2212 - C14929 * C2215 + C14935 * C2213 -
             C44312 * C2217) *
                C14988 +
            (C14933 * C2350 - C14929 * C2353 + C14935 * C2351 -
             C44312 * C2354) *
                C44321) *
               C44260 * C44212 * C44317) *
              C1768 +
          (((C14933 * C94 - C14929 * C100 + C14935 * C95 - C44312 * C102) *
                C14987 +
            (C14933 * C278 - C14929 * C283 + C14935 * C279 - C44312 * C284) *
                C14931 +
            (C15706 - C15707 + C15708 - C15709) * C14988 +
            (C15710 - C15711 + C15712 - C15713) * C44321) *
               C44260 * C44212 * C1766 +
           ((C15707 - C15706 + C15709 - C15708) * C14987 +
            (C15711 - C15710 + C15713 - C15712) * C14931 +
            (C14929 * C2217 - C14933 * C2213 + C44312 * C2219 -
             C14935 * C2214) *
                C14988 +
            (C14929 * C2354 - C14933 * C2351 + C44312 * C2355 -
             C14935 * C2352) *
                C44321) *
               C44260 * C44212 * C44317) *
              C44315)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[30] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C14987 * C152 - C15155 * C93 - C14987 * C277 + C14931 * C326 +
             C14988 * C694 - C15156 * C630 - C14988 * C826 + C44321 * C886) *
                C14929 +
            (C15182 + C15183) * C44312) *
               C44260 * C44212 * C1766 -
           ((C15792 + C15793) * C44312 +
            (C14988 * C2262 - C15156 * C2212 - C14988 * C2350 + C44321 * C2394 +
             C14987 * C694 - C15155 * C630 - C14987 * C826 + C14931 * C886) *
                C14929) *
               C44260 * C44212 * C44317) *
              C1768 +
          (((C15793 + C15792) * C14929 +
            (C14987 * C696 - C15155 * C628 - C14987 * C828 + C14931 * C884 +
             C14988 * C2264 - C15156 * C2214 - C14988 * C2352 +
             C44321 * C2396) *
                C44312) *
               C44260 * C44212 * C44317 -
           ((C15184 + C15185) * C44312 + (C15183 + C15182) * C14929) * C44260 *
               C44212 * C1766) *
              C44315)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[30] += (2 * std::pow(Pi, 2.5) *
                   (((((C44260 * C215 - C214 * C93) * C14987 +
                       (C44260 * C390 - C214 * C277) * C14931 +
                       (C5110 - C5111) * C14988 + (C5350 - C5351) * C44321) *
                          C14929 +
                      ((C226 - C227) * C14987 + (C396 - C397) * C14931 +
                       C5114 * C14988 + C5352 * C44321) *
                          C44312) *
                         C44212 * C1766 +
                     (((C5111 - C5110) * C14987 + (C5351 - C5350) * C14931 +
                       (C6991 - C6992) * C14988 + (C7161 - C7162) * C44321) *
                          C14929 +
                      (C5116 * C14987 + C5353 * C14931 +
                       (C5118 - C5119) * C14988 + (C5354 - C5355) * C44321) *
                          C44312) *
                         C44212 * C44317) *
                        C1768 +
                    ((((C227 - C226) * C14987 + (C397 - C396) * C14931 +
                       C5116 * C14988 + C5353 * C44321) *
                          C14929 +
                      ((C231 - C230) * C14987 + (C400 - C399) * C14931 +
                       (C773 - C774) * C14988 + (C959 - C960) * C44321) *
                          C44312) *
                         C44212 * C1766 +
                     ((C5114 * C14987 + C5352 * C14931 +
                       (C5119 - C5118) * C14988 + (C5355 - C5354) * C44321) *
                          C14929 +
                      ((C774 - C773) * C14987 + (C960 - C959) * C14931 +
                       (C44260 * C2308 - C214 * C2214) * C14988 +
                       (C44260 * C2437 - C214 * C2352) * C44321) *
                          C44312) *
                         C44212 * C44317) *
                        C44315)) /
                  (p * q * std::sqrt(p + q));
    d2eezx[30] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C14929 * C98 - C14933 * C93 + C44312 * C100 - C14935 * C94) *
                 C214 +
             (C14929 * C448 - C14933 * C443 + C44312 * C449 - C14935 * C444) *
                 C44260) *
                C14931 +
            ((C15698 - C15699 + C15700 - C15701) * C214 +
             (C15926 - C15927 + C15928 - C15929) * C44260) *
                C44321) *
               C44212 * C1766 +
           (((C15699 - C15698 + C15701 - C15700) * C214 +
             (C15927 - C15926 + C15929 - C15928) * C44260) *
                C14931 +
            ((C14933 * C2212 - C14929 * C2215 + C14935 * C2213 -
              C44312 * C2217) *
                 C214 +
             (C14933 * C2476 - C14929 * C2479 + C14935 * C2477 -
              C44312 * C2480) *
                 C44260) *
                C44321) *
               C44212 * C44317) *
              C1768 +
          ((((C14933 * C94 - C14929 * C100 + C14935 * C95 - C44312 * C102) *
                 C214 +
             (C14933 * C444 - C14929 * C449 + C14935 * C445 - C44312 * C450) *
                 C44260) *
                C14931 +
            ((C15706 - C15707 + C15708 - C15709) * C214 +
             (C15930 - C15931 + C15932 - C15933) * C44260) *
                C44321) *
               C44212 * C1766 +
           (((C15707 - C15706 + C15709 - C15708) * C214 +
             (C15931 - C15930 + C15933 - C15932) * C44260) *
                C14931 +
            ((C14929 * C2217 - C14933 * C2213 + C44312 * C2219 -
              C14935 * C2214) *
                 C214 +
             (C14929 * C2480 - C14933 * C2477 + C44312 * C2481 -
              C14935 * C2478) *
                 C44260) *
                C44321) *
               C44212 * C44317) *
              C44315)) /
        (p * q * std::sqrt(p + q));
    d2eezy[30] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C14931 * C152 - C14987 * C93 + C44321 * C694 - C14988 * C630) *
                 C214 +
             (C14931 * C491 - C14987 * C443 + C44321 * C1068 - C14988 * C1010) *
                 C44260) *
                C14929 +
            ((C14990 - C14991 + C14992 - C14993) * C214 +
             (C15336 - C15337 + C15338 - C15339) * C44260) *
                C44312) *
               C44212 * C1766 +
           (((C14987 * C630 - C14931 * C694 + C14988 * C2212 - C44321 * C2262) *
                 C214 +
             (C14987 * C1010 - C14931 * C1068 + C14988 * C2476 -
              C44321 * C2520) *
                 C44260) *
                C14929 +
            ((C15558 - C15559 + C15560 - C15561) * C214 +
             (C16000 - C16001 + C16002 - C16003) * C44260) *
                C44312) *
               C44212 * C44317) *
              C1768 +
          ((((C14991 - C14990 + C14993 - C14992) * C214 +
             (C15337 - C15336 + C15339 - C15338) * C44260) *
                C14929 +
            ((C14998 - C14999 + C15000 - C15001) * C214 +
             (C15340 - C15341 + C15342 - C15343) * C44260) *
                C44312) *
               C44212 * C1766 +
           (((C15559 - C15558 + C15561 - C15560) * C214 +
             (C16001 - C16000 + C16003 - C16002) * C44260) *
                C14929 +
            ((C14931 * C696 - C14987 * C628 + C44321 * C2264 - C14988 * C2214) *
                 C214 +
             (C14931 * C1070 - C14987 * C1012 + C44321 * C2522 -
              C14988 * C2478) *
                 C44260) *
                C44312) *
               C44212 * C44317) *
              C44315)) /
        (p * q * std::sqrt(p + q));
    d2eezz[30] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C214 * C215 - C544 * C93 - C214 * C443 + C44260 * C545) * C14931 +
             C5579 * C44321) *
                C14929 +
            (C15394 + C15395) * C44312) *
               C44212 * C1766 -
           ((C16070 + C16071) * C44312 +
            (C7331 * C44321 + C5579 * C14931) * C14929) *
               C44212 * C44317) *
              C1768 +
          (((C16071 + C16070) * C14929 +
            (C1143 * C14931 +
             (C214 * C2308 - C544 * C2214 - C214 * C2478 + C44260 * C2563) *
                 C44321) *
                C44312) *
               C44212 * C44317 -
           ((C15396 + C15397) * C44312 + (C15395 + C15394) * C14929) * C44212 *
               C1766) *
              C44315)) /
        (p * q * std::sqrt(p + q));
    d2eexx[31] +=
        (2 * std::pow(Pi, 2.5) *
         (((C14933 * C98 - C14934 * C93 - C14933 * C99 + C14929 * C108 +
            C14935 * C100 - C14936 * C94 - C14935 * C101 + C44312 * C109) *
               C44260 * C14931 +
           (C15488 + C15489) * C44260 * C44321) *
              C44212 * C2208 -
          ((C17350 + C17351) * C44260 * C44321 +
           (C15489 + C15488) * C44260 * C14931) *
              C44212 * C2209 +
          ((C17351 + C17350) * C44260 * C14931 +
           (C14933 * C6862 - C14934 * C6860 - C14933 * C6863 + C14929 * C6866 +
            C14935 * C6864 - C14936 * C6861 - C14935 * C6865 + C44312 * C6867) *
               C44260 * C44321) *
              C44212 * C2210) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eexy[31] +=
        (2 * std::pow(Pi, 2.5) *
         (((C14931 * C152 - C14987 * C93 + C44321 * C694 - C14988 * C630) *
               C14933 +
           (C14931 * C157 - C14987 * C99 + C44321 * C698 - C14988 * C637) *
               C14929 +
           (C14990 - C14991 + C14992 - C14993) * C14935 +
           (C14994 - C14995 + C14996 - C14997) * C44312) *
              C44260 * C44212 * C2208 +
          ((C14987 * C630 - C14931 * C694 + C14988 * C2212 - C44321 * C2262) *
               C14933 +
           (C14987 * C637 - C14931 * C698 + C14988 * C2216 - C44321 * C2265) *
               C14929 +
           (C15558 - C15559 + C15560 - C15561) * C14935 +
           (C15562 - C15563 + C15564 - C15565) * C44312) *
              C44260 * C44212 * C2209 +
          ((C14931 * C2262 - C14987 * C2212 + C44321 * C6932 - C14988 * C6860) *
               C14933 +
           (C14931 * C2265 - C14987 * C2216 + C44321 * C6934 - C14988 * C6863) *
               C14929 +
           (C14931 * C2263 - C14987 * C2213 + C44321 * C6933 - C14988 * C6861) *
               C14935 +
           (C14931 * C2266 - C14987 * C2218 + C44321 * C6935 - C14988 * C6865) *
               C44312) *
              C44260 * C44212 * C2210) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eexz[31] += (2 * std::pow(Pi, 2.5) *
                   ((((C44260 * C215 - C214 * C93) * C14933 +
                      (C44260 * C220 - C214 * C99) * C14929 +
                      (C226 - C227) * C14935 + (C228 - C229) * C44312) *
                         C14931 +
                     ((C5110 - C5111) * C14933 + (C5112 - C5113) * C14929 +
                      C5114 * C14935 + C5115 * C44312) *
                         C44321) *
                        C44212 * C2208 +
                    (((C5111 - C5110) * C14933 + (C5113 - C5112) * C14929 +
                      C5116 * C14935 + C5117 * C44312) *
                         C14931 +
                     ((C6991 - C6992) * C14933 + (C6993 - C6994) * C14929 +
                      (C5118 - C5119) * C14935 + (C5120 - C5121) * C44312) *
                         C44321) *
                        C44212 * C2209 +
                    (((C6992 - C6991) * C14933 + (C6994 - C6993) * C14929 +
                      (C5119 - C5118) * C14935 + (C5121 - C5120) * C44312) *
                         C14931 +
                     ((C44260 * C6986 - C214 * C6860) * C14933 +
                      (C44260 * C6988 - C214 * C6863) * C14929 +
                      (C44260 * C6987 - C214 * C6861) * C14935 +
                      (C44260 * C6989 - C214 * C6865) * C44312) *
                         C44321) *
                        C44212 * C2210) *
                   C44161) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[31] +=
        (2 * std::pow(Pi, 2.5) *
         (((C14929 * C98 - C14933 * C93 + C44312 * C100 - C14935 * C94) *
               C14987 +
           (C14929 * C282 - C14933 * C277 + C44312 * C283 - C14935 * C278) *
               C14931 +
           (C15698 - C15699 + C15700 - C15701) * C14988 +
           (C15702 - C15703 + C15704 - C15705) * C44321) *
              C44260 * C44212 * C2208 +
          ((C15699 - C15698 + C15701 - C15700) * C14987 +
           (C15703 - C15702 + C15705 - C15704) * C14931 +
           (C17502 - C17503 + C17504 - C17505) * C14988 +
           (C17506 - C17507 + C17508 - C17509) * C44321) *
              C44260 * C44212 * C2209 +
          ((C17503 - C17502 + C17505 - C17504) * C14987 +
           (C17507 - C17506 + C17509 - C17508) * C14931 +
           (C14929 * C6862 - C14933 * C6860 + C44312 * C6864 - C14935 * C6861) *
               C14988 +
           (C14929 * C7046 - C14933 * C7044 + C44312 * C7047 - C14935 * C7045) *
               C44321) *
              C44260 * C44212 * C2210) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eeyy[31] +=
        (2 * std::pow(Pi, 2.5) *
         (((C14987 * C152 - C15155 * C93 - C14987 * C277 + C14931 * C326 +
            C14988 * C694 - C15156 * C630 - C14988 * C826 + C44321 * C886) *
               C14929 +
           (C15182 + C15183) * C44312) *
              C44260 * C44212 * C2208 -
          ((C15792 + C15793) * C44312 +
           (C14988 * C2262 - C15156 * C2212 - C14988 * C2350 + C44321 * C2394 +
            C14987 * C694 - C15155 * C630 - C14987 * C826 + C14931 * C886) *
               C14929) *
              C44260 * C44212 * C2209 +
          ((C14987 * C2262 - C15155 * C2212 - C14987 * C2350 + C14931 * C2394 +
            C14988 * C6932 - C15156 * C6860 - C14988 * C7044 + C44321 * C7106) *
               C14929 +
           (C14987 * C2263 - C15155 * C2213 - C14987 * C2351 + C14931 * C2395 +
            C14988 * C6933 - C15156 * C6861 - C14988 * C7045 + C44321 * C7107) *
               C44312) *
              C44260 * C44212 * C2210) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eeyz[31] += (2 * std::pow(Pi, 2.5) *
                   ((((C44260 * C215 - C214 * C93) * C14987 +
                      (C44260 * C390 - C214 * C277) * C14931 +
                      (C5110 - C5111) * C14988 + (C5350 - C5351) * C44321) *
                         C14929 +
                     ((C226 - C227) * C14987 + (C396 - C397) * C14931 +
                      C5114 * C14988 + C5352 * C44321) *
                         C44312) *
                        C44212 * C2208 +
                    (((C5111 - C5110) * C14987 + (C5351 - C5350) * C14931 +
                      (C6991 - C6992) * C14988 + (C7161 - C7162) * C44321) *
                         C14929 +
                     (C5116 * C14987 + C5353 * C14931 +
                      (C5118 - C5119) * C14988 + (C5354 - C5355) * C44321) *
                         C44312) *
                        C44212 * C2209 +
                    (((C6992 - C6991) * C14987 + (C7162 - C7161) * C14931 +
                      (C44260 * C6986 - C214 * C6860) * C14988 +
                      (C44260 * C7158 - C214 * C7044) * C44321) *
                         C14929 +
                     ((C5119 - C5118) * C14987 + (C5355 - C5354) * C14931 +
                      (C44260 * C6987 - C214 * C6861) * C14988 +
                      (C44260 * C7159 - C214 * C7045) * C44321) *
                         C44312) *
                        C44212 * C2210) *
                   C44161) /
                  (p * q * std::sqrt(p + q));
    d2eezx[31] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C14929 * C98 - C14933 * C93 + C44312 * C100 - C14935 * C94) *
                C214 +
            (C14929 * C448 - C14933 * C443 + C44312 * C449 - C14935 * C444) *
                C44260) *
               C14931 +
           ((C15698 - C15699 + C15700 - C15701) * C214 +
            (C15926 - C15927 + C15928 - C15929) * C44260) *
               C44321) *
              C44212 * C2208 +
          (((C15699 - C15698 + C15701 - C15700) * C214 +
            (C15927 - C15926 + C15929 - C15928) * C44260) *
               C14931 +
           ((C17502 - C17503 + C17504 - C17505) * C214 +
            (C17660 - C17661 + C17662 - C17663) * C44260) *
               C44321) *
              C44212 * C2209 +
          (((C17503 - C17502 + C17505 - C17504) * C214 +
            (C17661 - C17660 + C17663 - C17662) * C44260) *
               C14931 +
           ((C14929 * C6862 - C14933 * C6860 + C44312 * C6864 -
             C14935 * C6861) *
                C214 +
            (C14929 * C7214 - C14933 * C7212 + C44312 * C7215 -
             C14935 * C7213) *
                C44260) *
               C44321) *
              C44212 * C2210) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eezy[31] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C14931 * C152 - C14987 * C93 + C44321 * C694 - C14988 * C630) *
                C214 +
            (C14931 * C491 - C14987 * C443 + C44321 * C1068 - C14988 * C1010) *
                C44260) *
               C14929 +
           ((C14990 - C14991 + C14992 - C14993) * C214 +
            (C15336 - C15337 + C15338 - C15339) * C44260) *
               C44312) *
              C44212 * C2208 +
          (((C14987 * C630 - C14931 * C694 + C14988 * C2212 - C44321 * C2262) *
                C214 +
            (C14987 * C1010 - C14931 * C1068 + C14988 * C2476 -
             C44321 * C2520) *
                C44260) *
               C14929 +
           ((C15558 - C15559 + C15560 - C15561) * C214 +
            (C16000 - C16001 + C16002 - C16003) * C44260) *
               C44312) *
              C44212 * C2209 +
          (((C14931 * C2262 - C14987 * C2212 + C44321 * C6932 -
             C14988 * C6860) *
                C214 +
            (C14931 * C2520 - C14987 * C2476 + C44321 * C7270 -
             C14988 * C7212) *
                C44260) *
               C14929 +
           ((C14931 * C2263 - C14987 * C2213 + C44321 * C6933 -
             C14988 * C6861) *
                C214 +
            (C14931 * C2521 - C14987 * C2477 + C44321 * C7271 -
             C14988 * C7213) *
                C44260) *
               C44312) *
              C44212 * C2210) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eezz[31] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C214 * C215 - C544 * C93 - C214 * C443 + C44260 * C545) * C14931 +
            C5579 * C44321) *
               C14929 +
           (C15394 + C15395) * C44312) *
              C44212 * C2208 -
          ((C16070 + C16071) * C44312 +
           (C7331 * C44321 + C5579 * C14931) * C14929) *
              C44212 * C2209 +
          ((C7331 * C14931 +
            (C214 * C6986 - C544 * C6860 - C214 * C7212 + C44260 * C7322) *
                C44321) *
               C14929 +
           (C5580 * C14931 +
            (C214 * C6987 - C544 * C6861 - C214 * C7213 + C44260 * C7323) *
                C44321) *
               C44312) *
              C44212 * C2210) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eexx[32] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C14933 * C98 - C14934 * C93 - C14933 * C99 + C14929 * C108 +
             C14935 * C100 - C14936 * C94 - C14935 * C101 + C44312 * C109) *
                C44260 * C14931 +
            (C15488 + C15489) * C44260 * C44321) *
               C1196 -
           ((C17842 + C17843) * C44260 * C44321 +
            (C14935 * C1204 - C14936 * C1199 - C14935 * C1205 + C44312 * C1211 +
             C14933 * C1206 - C14934 * C1200 - C14933 * C1207 +
             C14929 * C1212) *
                C44260 * C14931) *
               C44319) *
              C1766 +
          (((C17843 + C17842) * C44260 * C14931 +
            (C14933 * C7399 - C14934 * C7397 - C14933 * C7400 + C14929 * C7403 +
             C14935 * C7401 - C14936 * C7398 - C14935 * C7402 +
             C44312 * C7404) *
                C44260 * C44321) *
               C44319 -
           ((C17350 + C17351) * C44260 * C44321 +
            (C15489 + C15488) * C44260 * C14931) *
               C1196) *
              C44317) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eexy[32] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C14931 * C152 - C14987 * C93 + C44321 * C694 - C14988 * C630) *
                C14933 +
            (C14931 * C157 - C14987 * C99 + C44321 * C698 - C14988 * C637) *
                C14929 +
            (C14990 - C14991 + C14992 - C14993) * C14935 +
            (C14994 - C14995 + C14996 - C14997) * C44312) *
               C44260 * C1196 +
           ((C14987 * C1200 - C14931 * C1264 + C14988 * C2614 -
             C44321 * C2676) *
                C14933 +
            (C14987 * C1207 - C14931 * C1268 + C14988 * C2618 -
             C44321 * C2679) *
                C14929 +
            (C16204 - C16205 + C16206 - C16207) * C14935 +
            (C16208 - C16209 + C16210 - C16211) * C44312) *
               C44260 * C44319) *
              C1766 +
          (((C14987 * C630 - C14931 * C694 + C14988 * C2212 - C44321 * C2262) *
                C14933 +
            (C14987 * C637 - C14931 * C698 + C14988 * C2216 - C44321 * C2265) *
                C14929 +
            (C15558 - C15559 + C15560 - C15561) * C14935 +
            (C15562 - C15563 + C15564 - C15565) * C44312) *
               C44260 * C1196 +
           ((C14931 * C2676 - C14987 * C2614 + C44321 * C7485 -
             C14988 * C7397) *
                C14933 +
            (C14931 * C2679 - C14987 * C2618 + C44321 * C7487 -
             C14988 * C7400) *
                C14929 +
            (C14931 * C2677 - C14987 * C2615 + C44321 * C7486 -
             C14988 * C7398) *
                C14935 +
            (C14931 * C2680 - C14987 * C2620 + C44321 * C7488 -
             C14988 * C7402) *
                C44312) *
               C44260 * C44319) *
              C44317) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eexz[32] += (2 * std::pow(Pi, 2.5) *
                   (((((C44260 * C215 - C214 * C93) * C14933 +
                       (C44260 * C220 - C214 * C99) * C14929 +
                       (C226 - C227) * C14935 + (C228 - C229) * C44312) *
                          C14931 +
                      ((C5110 - C5111) * C14933 + (C5112 - C5113) * C14929 +
                       C5114 * C14935 + C5115 * C44312) *
                          C44321) *
                         C1196 +
                     (((C214 * C1200 - C44260 * C1330) * C14933 +
                       (C214 * C1207 - C44260 * C1334) * C14929 +
                       (C1339 - C1340) * C14935 + (C1341 - C1342) * C44312) *
                          C14931 +
                      ((C7560 - C7561) * C14933 + (C7562 - C7563) * C14929 +
                       (C5788 - C5789) * C14935 + (C5790 - C5791) * C44312) *
                          C44321) *
                         C44319) *
                        C1766 +
                    ((((C5111 - C5110) * C14933 + (C5113 - C5112) * C14929 +
                       C5116 * C14935 + C5117 * C44312) *
                          C14931 +
                      ((C6991 - C6992) * C14933 + (C6993 - C6994) * C14929 +
                       (C5118 - C5119) * C14935 + (C5120 - C5121) * C44312) *
                          C44321) *
                         C1196 +
                     (((C7561 - C7560) * C14933 + (C7563 - C7562) * C14929 +
                       (C5789 - C5788) * C14935 + (C5791 - C5790) * C44312) *
                          C14931 +
                      ((C44260 * C7555 - C214 * C7397) * C14933 +
                       (C44260 * C7557 - C214 * C7400) * C14929 +
                       (C44260 * C7556 - C214 * C7398) * C14935 +
                       (C44260 * C7558 - C214 * C7402) * C44312) *
                          C44321) *
                         C44319) *
                        C44317) *
                   C44161) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[32] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C14929 * C98 - C14933 * C93 + C44312 * C100 - C14935 * C94) *
                C14987 +
            (C14929 * C282 - C14933 * C277 + C44312 * C283 - C14935 * C278) *
                C14931 +
            (C15698 - C15699 + C15700 - C15701) * C14988 +
            (C15702 - C15703 + C15704 - C15705) * C44321) *
               C44260 * C1196 +
           ((C14933 * C1200 - C14929 * C1206 + C14935 * C1199 -
             C44312 * C1204) *
                C14987 +
            (C14933 * C1396 - C14929 * C1400 + C14935 * C1397 -
             C44312 * C1401) *
                C14931 +
            (C18042 - C18043 + C18044 - C18045) * C14988 +
            (C18046 - C18047 + C18048 - C18049) * C44321) *
               C44260 * C44319) *
              C1766 +
          (((C15699 - C15698 + C15701 - C15700) * C14987 +
            (C15703 - C15702 + C15705 - C15704) * C14931 +
            (C17502 - C17503 + C17504 - C17505) * C14988 +
            (C17506 - C17507 + C17508 - C17509) * C44321) *
               C44260 * C1196 +
           ((C18043 - C18042 + C18045 - C18044) * C14987 +
            (C18047 - C18046 + C18049 - C18048) * C14931 +
            (C14929 * C7399 - C14933 * C7397 + C44312 * C7401 -
             C14935 * C7398) *
                C14988 +
            (C14929 * C7631 - C14933 * C7629 + C44312 * C7632 -
             C14935 * C7630) *
                C44321) *
               C44260 * C44319) *
              C44317) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eeyy[32] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C14987 * C152 - C15155 * C93 - C14987 * C277 + C14931 * C326 +
             C14988 * C694 - C15156 * C630 - C14988 * C826 + C44321 * C886) *
                C14929 +
            (C15182 + C15183) * C44312) *
               C44260 * C1196 -
           ((C16422 + C16423) * C44312 +
            (C14988 * C2676 - C15156 * C2614 - C14988 * C2788 + C44321 * C2844 +
             C14987 * C1264 - C15155 * C1200 - C14987 * C1396 +
             C14931 * C1456) *
                C14929) *
               C44260 * C44319) *
              C1766 +
          (((C14987 * C2676 - C15155 * C2614 - C14987 * C2788 + C14931 * C2844 +
             C14988 * C7485 - C15156 * C7397 - C14988 * C7629 +
             C44321 * C7707) *
                C14929 +
            (C14987 * C2677 - C15155 * C2615 - C14987 * C2789 + C14931 * C2845 +
             C14988 * C7486 - C15156 * C7398 - C14988 * C7630 +
             C44321 * C7708) *
                C44312) *
               C44260 * C44319 -
           ((C15792 + C15793) * C44312 +
            (C14988 * C2262 - C15156 * C2212 - C14988 * C2350 + C44321 * C2394 +
             C14987 * C694 - C15155 * C630 - C14987 * C826 + C14931 * C886) *
                C14929) *
               C44260 * C1196) *
              C44317) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eeyz[32] += (2 * std::pow(Pi, 2.5) *
                   (((((C44260 * C215 - C214 * C93) * C14987 +
                       (C44260 * C390 - C214 * C277) * C14931 +
                       (C5110 - C5111) * C14988 + (C5350 - C5351) * C44321) *
                          C14929 +
                      ((C226 - C227) * C14987 + (C396 - C397) * C14931 +
                       C5114 * C14988 + C5352 * C44321) *
                          C44312) *
                         C1196 +
                     (((C214 * C1200 - C44260 * C1330) * C14987 +
                       (C214 * C1396 - C44260 * C1522) * C14931 +
                       (C7560 - C7561) * C14988 + (C7778 - C7779) * C44321) *
                          C14929 +
                      ((C1339 - C1340) * C14987 + (C1527 - C1528) * C14931 +
                       (C5788 - C5789) * C14988 + (C6004 - C6005) * C44321) *
                          C44312) *
                         C44319) *
                        C1766 +
                    ((((C5111 - C5110) * C14987 + (C5351 - C5350) * C14931 +
                       (C6991 - C6992) * C14988 + (C7161 - C7162) * C44321) *
                          C14929 +
                      (C5116 * C14987 + C5353 * C14931 +
                       (C5118 - C5119) * C14988 + (C5354 - C5355) * C44321) *
                          C44312) *
                         C1196 +
                     (((C7561 - C7560) * C14987 + (C7779 - C7778) * C14931 +
                       (C44260 * C7555 - C214 * C7397) * C14988 +
                       (C44260 * C7775 - C214 * C7629) * C44321) *
                          C14929 +
                      ((C5789 - C5788) * C14987 + (C6005 - C6004) * C14931 +
                       (C44260 * C7556 - C214 * C7398) * C14988 +
                       (C44260 * C7776 - C214 * C7630) * C44321) *
                          C44312) *
                         C44319) *
                        C44317) *
                   C44161) /
                  (p * q * std::sqrt(p + q));
    d2eezx[32] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C14929 * C98 - C14933 * C93 + C44312 * C100 - C14935 * C94) *
                 C214 +
             (C14929 * C448 - C14933 * C443 + C44312 * C449 - C14935 * C444) *
                 C44260) *
                C14931 +
            ((C15698 - C15699 + C15700 - C15701) * C214 +
             (C15926 - C15927 + C15928 - C15929) * C44260) *
                C44321) *
               C1196 +
           (((C14933 * C1200 - C14929 * C1206 + C14935 * C1199 -
              C44312 * C1204) *
                 C214 +
             (C14933 * C1580 - C14929 * C1584 + C14935 * C1581 -
              C44312 * C1585) *
                 C44260) *
                C14931 +
            ((C18042 - C18043 + C18044 - C18045) * C214 +
             (C18248 - C18249 + C18250 - C18251) * C44260) *
                C44321) *
               C44319) *
              C1766 +
          ((((C15699 - C15698 + C15701 - C15700) * C214 +
             (C15927 - C15926 + C15929 - C15928) * C44260) *
                C14931 +
            ((C17502 - C17503 + C17504 - C17505) * C214 +
             (C17660 - C17661 + C17662 - C17663) * C44260) *
                C44321) *
               C1196 +
           (((C18043 - C18042 + C18045 - C18044) * C214 +
             (C18249 - C18248 + C18251 - C18250) * C44260) *
                C14931 +
            ((C14929 * C7399 - C14933 * C7397 + C44312 * C7401 -
              C14935 * C7398) *
                 C214 +
             (C14929 * C7847 - C14933 * C7845 + C44312 * C7848 -
              C14935 * C7846) *
                 C44260) *
                C44321) *
               C44319) *
              C44317) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eezy[32] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C14931 * C152 - C14987 * C93 + C44321 * C694 - C14988 * C630) *
                 C214 +
             (C14931 * C491 - C14987 * C443 + C44321 * C1068 - C14988 * C1010) *
                 C44260) *
                C14929 +
            ((C14990 - C14991 + C14992 - C14993) * C214 +
             (C15336 - C15337 + C15338 - C15339) * C44260) *
                C44312) *
               C1196 +
           (((C14987 * C1200 - C14931 * C1264 + C14988 * C2614 -
              C44321 * C2676) *
                 C214 +
             (C14987 * C1580 - C14931 * C1638 + C14988 * C2950 -
              C44321 * C3006) *
                 C44260) *
                C14929 +
            ((C16204 - C16205 + C16206 - C16207) * C214 +
             (C16622 - C16623 + C16624 - C16625) * C44260) *
                C44312) *
               C44319) *
              C1766 +
          ((((C14987 * C630 - C14931 * C694 + C14988 * C2212 - C44321 * C2262) *
                 C214 +
             (C14987 * C1010 - C14931 * C1068 + C14988 * C2476 -
              C44321 * C2520) *
                 C44260) *
                C14929 +
            ((C15558 - C15559 + C15560 - C15561) * C214 +
             (C16000 - C16001 + C16002 - C16003) * C44260) *
                C44312) *
               C1196 +
           (((C14931 * C2676 - C14987 * C2614 + C44321 * C7485 -
              C14988 * C7397) *
                 C214 +
             (C14931 * C3006 - C14987 * C2950 + C44321 * C7919 -
              C14988 * C7845) *
                 C44260) *
                C14929 +
            ((C14931 * C2677 - C14987 * C2615 + C44321 * C7486 -
              C14988 * C7398) *
                 C214 +
             (C14931 * C3007 - C14987 * C2951 + C44321 * C7920 -
              C14988 * C7846) *
                 C44260) *
                C44312) *
               C44319) *
              C44317) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eezz[32] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C214 * C215 - C544 * C93 - C214 * C443 + C44260 * C545) * C14931 +
             C5579 * C44321) *
                C14929 +
            (C15394 + C15395) * C44312) *
               C1196 -
           ((C16692 + C16693) * C44312 +
            (C7996 * C44321 +
             (C214 * C1330 - C544 * C1200 - C214 * C1580 + C44260 * C1698) *
                 C14931) *
                C14929) *
               C44319) *
              C1766 +
          (((C7996 * C14931 +
             (C214 * C7555 - C544 * C7397 - C214 * C7845 + C44260 * C7987) *
                 C44321) *
                C14929 +
            (C6215 * C14931 +
             (C214 * C7556 - C544 * C7398 - C214 * C7846 + C44260 * C7988) *
                 C44321) *
                C44312) *
               C44319 -
           ((C16070 + C16071) * C44312 +
            (C7331 * C44321 + C5579 * C14931) * C14929) *
               C1196) *
              C44317) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eexx[33] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C14933 * C98 - C14934 * C93 - C14933 * C99 + C14929 * C108 +
             C14935 * C100 - C14936 * C94 - C14935 * C101 + C44312 * C109) *
                C44260 * C14931 +
            (C15488 + C15489) * C44260 * C44321) *
               C3112 -
           ((C17842 + C17843) * C44260 * C44321 +
            (C14935 * C1204 - C14936 * C1199 - C14935 * C1205 + C44312 * C1211 +
             C14933 * C1206 - C14934 * C1200 - C14933 * C1207 +
             C14929 * C1212) *
                C44260 * C14931) *
               C44319) *
              C44195 * C1768 +
          (((C14933 * C1204 - C14934 * C1199 - C14933 * C1205 + C14929 * C1211 +
             C14935 * C1202 - C14936 * C1198 - C14935 * C1203 +
             C44312 * C1210) *
                C44260 * C14931 +
            (C14933 * C2619 - C14934 * C2615 - C14933 * C2620 + C14929 * C2624 +
             C14935 * C2621 - C14936 * C2616 - C14935 * C2622 +
             C44312 * C2625) *
                C44260 * C44321) *
               C44319 -
           ((C15491 + C15490) * C44260 * C44321 +
            (C14935 * C102 - C14936 * C95 - C14935 * C103 + C44312 * C110 +
             C14933 * C100 - C14934 * C94 - C14933 * C101 + C14929 * C109) *
                C44260 * C14931) *
               C3112) *
              C44195 * C44315)) /
        (p * q * std::sqrt(p + q));
    d2eexy[33] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C14931 * C152 - C14987 * C93 + C44321 * C694 - C14988 * C630) *
                C14933 +
            (C14931 * C157 - C14987 * C99 + C44321 * C698 - C14988 * C637) *
                C14929 +
            (C14990 - C14991 + C14992 - C14993) * C14935 +
            (C14994 - C14995 + C14996 - C14997) * C44312) *
               C44260 * C3112 +
           ((C14987 * C1200 - C14931 * C1264 + C14988 * C2614 -
             C44321 * C2676) *
                C14933 +
            (C14987 * C1207 - C14931 * C1268 + C14988 * C2618 -
             C44321 * C2679) *
                C14929 +
            (C16204 - C16205 + C16206 - C16207) * C14935 +
            (C16208 - C16209 + C16210 - C16211) * C44312) *
               C44260 * C44319) *
              C44195 * C1768 +
          (((C14991 - C14990 + C14993 - C14992) * C14933 +
            (C14995 - C14994 + C14997 - C14996) * C14929 +
            (C14998 - C14999 + C15000 - C15001) * C14935 +
            (C15002 - C15003 + C15004 - C15005) * C44312) *
               C44260 * C3112 +
           ((C16205 - C16204 + C16207 - C16206) * C14933 +
            (C16209 - C16208 + C16211 - C16210) * C14929 +
            (C14931 * C1266 - C14987 * C1198 + C44321 * C2678 -
             C14988 * C2616) *
                C14935 +
            (C14931 * C1270 - C14987 * C1203 + C44321 * C2681 -
             C14988 * C2622) *
                C44312) *
               C44260 * C44319) *
              C44195 * C44315)) /
        (p * q * std::sqrt(p + q));
    d2eexz[33] += (2 * std::pow(Pi, 2.5) *
                   (((((C44260 * C215 - C214 * C93) * C14933 +
                       (C44260 * C220 - C214 * C99) * C14929 +
                       (C226 - C227) * C14935 + (C228 - C229) * C44312) *
                          C14931 +
                      ((C5110 - C5111) * C14933 + (C5112 - C5113) * C14929 +
                       C5114 * C14935 + C5115 * C44312) *
                          C44321) *
                         C3112 +
                     (((C214 * C1200 - C44260 * C1330) * C14933 +
                       (C214 * C1207 - C44260 * C1334) * C14929 +
                       (C1339 - C1340) * C14935 + (C1341 - C1342) * C44312) *
                          C14931 +
                      ((C7560 - C7561) * C14933 + (C7562 - C7563) * C14929 +
                       (C5788 - C5789) * C14935 + (C5790 - C5791) * C44312) *
                          C44321) *
                         C44319) *
                        C44195 * C1768 +
                    ((((C227 - C226) * C14933 + (C229 - C228) * C14929 +
                       (C231 - C230) * C14935 + (C233 - C232) * C44312) *
                          C14931 +
                      (C5116 * C14933 + C5117 * C14929 +
                       (C773 - C774) * C14935 + (C775 - C776) * C44312) *
                          C44321) *
                         C3112 +
                     (((C1340 - C1339) * C14933 + (C1342 - C1341) * C14929 +
                       (C1344 - C1343) * C14935 + (C1346 - C1345) * C44312) *
                          C14931 +
                      ((C5789 - C5788) * C14933 + (C5791 - C5790) * C14929 +
                       (C44260 * C2734 - C214 * C2616) * C14935 +
                       (C44260 * C2737 - C214 * C2622) * C44312) *
                          C44321) *
                         C44319) *
                        C44195 * C44315)) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[33] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C14929 * C98 - C14933 * C93 + C44312 * C100 - C14935 * C94) *
                C14987 +
            (C14929 * C282 - C14933 * C277 + C44312 * C283 - C14935 * C278) *
                C14931 +
            (C15698 - C15699 + C15700 - C15701) * C14988 +
            (C15702 - C15703 + C15704 - C15705) * C44321) *
               C44260 * C3112 +
           ((C14933 * C1200 - C14929 * C1206 + C14935 * C1199 -
             C44312 * C1204) *
                C14987 +
            (C14933 * C1396 - C14929 * C1400 + C14935 * C1397 -
             C44312 * C1401) *
                C14931 +
            (C18042 - C18043 + C18044 - C18045) * C14988 +
            (C18046 - C18047 + C18048 - C18049) * C44321) *
               C44260 * C44319) *
              C44195 * C1768 +
          (((C14933 * C94 - C14929 * C100 + C14935 * C95 - C44312 * C102) *
                C14987 +
            (C14933 * C278 - C14929 * C283 + C14935 * C279 - C44312 * C284) *
                C14931 +
            (C15706 - C15707 + C15708 - C15709) * C14988 +
            (C15710 - C15711 + C15712 - C15713) * C44321) *
               C44260 * C3112 +
           ((C14929 * C1204 - C14933 * C1199 + C44312 * C1202 -
             C14935 * C1198) *
                C14987 +
            (C14929 * C1401 - C14933 * C1397 + C44312 * C1402 -
             C14935 * C1398) *
                C14931 +
            (C14929 * C2619 - C14933 * C2615 + C44312 * C2621 -
             C14935 * C2616) *
                C14988 +
            (C14929 * C2792 - C14933 * C2789 + C44312 * C2793 -
             C14935 * C2790) *
                C44321) *
               C44260 * C44319) *
              C44195 * C44315)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[33] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C14987 * C152 - C15155 * C93 - C14987 * C277 + C14931 * C326 +
             C14988 * C694 - C15156 * C630 - C14988 * C826 + C44321 * C886) *
                C14929 +
            (C15182 + C15183) * C44312) *
               C44260 * C3112 -
           ((C16422 + C16423) * C44312 +
            (C14988 * C2676 - C15156 * C2614 - C14988 * C2788 + C44321 * C2844 +
             C14987 * C1264 - C15155 * C1200 - C14987 * C1396 +
             C14931 * C1456) *
                C14929) *
               C44260 * C44319) *
              C44195 * C1768 +
          (((C16423 + C16422) * C14929 +
            (C14987 * C1266 - C15155 * C1198 - C14987 * C1398 + C14931 * C1454 +
             C14988 * C2678 - C15156 * C2616 - C14988 * C2790 +
             C44321 * C2846) *
                C44312) *
               C44260 * C44319 -
           ((C15184 + C15185) * C44312 + (C15183 + C15182) * C14929) * C44260 *
               C3112) *
              C44195 * C44315)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[33] += (2 * std::pow(Pi, 2.5) *
                   (((((C44260 * C215 - C214 * C93) * C14987 +
                       (C44260 * C390 - C214 * C277) * C14931 +
                       (C5110 - C5111) * C14988 + (C5350 - C5351) * C44321) *
                          C14929 +
                      ((C226 - C227) * C14987 + (C396 - C397) * C14931 +
                       C5114 * C14988 + C5352 * C44321) *
                          C44312) *
                         C3112 +
                     (((C214 * C1200 - C44260 * C1330) * C14987 +
                       (C214 * C1396 - C44260 * C1522) * C14931 +
                       (C7560 - C7561) * C14988 + (C7778 - C7779) * C44321) *
                          C14929 +
                      ((C1339 - C1340) * C14987 + (C1527 - C1528) * C14931 +
                       (C5788 - C5789) * C14988 + (C6004 - C6005) * C44321) *
                          C44312) *
                         C44319) *
                        C44195 * C1768 +
                    ((((C227 - C226) * C14987 + (C397 - C396) * C14931 +
                       C5116 * C14988 + C5353 * C44321) *
                          C14929 +
                      ((C231 - C230) * C14987 + (C400 - C399) * C14931 +
                       (C773 - C774) * C14988 + (C959 - C960) * C44321) *
                          C44312) *
                         C3112 +
                     (((C1340 - C1339) * C14987 + (C1528 - C1527) * C14931 +
                       (C5789 - C5788) * C14988 + (C6005 - C6004) * C44321) *
                          C14929 +
                      ((C1344 - C1343) * C14987 + (C1530 - C1529) * C14931 +
                       (C44260 * C2734 - C214 * C2616) * C14988 +
                       (C44260 * C2899 - C214 * C2790) * C44321) *
                          C44312) *
                         C44319) *
                        C44195 * C44315)) /
                  (p * q * std::sqrt(p + q));
    d2eezx[33] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C14929 * C98 - C14933 * C93 + C44312 * C100 - C14935 * C94) *
                 C214 +
             (C14929 * C448 - C14933 * C443 + C44312 * C449 - C14935 * C444) *
                 C44260) *
                C14931 +
            ((C15698 - C15699 + C15700 - C15701) * C214 +
             (C15926 - C15927 + C15928 - C15929) * C44260) *
                C44321) *
               C3112 +
           (((C14933 * C1200 - C14929 * C1206 + C14935 * C1199 -
              C44312 * C1204) *
                 C214 +
             (C14933 * C1580 - C14929 * C1584 + C14935 * C1581 -
              C44312 * C1585) *
                 C44260) *
                C14931 +
            ((C18042 - C18043 + C18044 - C18045) * C214 +
             (C18248 - C18249 + C18250 - C18251) * C44260) *
                C44321) *
               C44319) *
              C44195 * C1768 +
          ((((C14933 * C94 - C14929 * C100 + C14935 * C95 - C44312 * C102) *
                 C214 +
             (C14933 * C444 - C14929 * C449 + C14935 * C445 - C44312 * C450) *
                 C44260) *
                C14931 +
            ((C15706 - C15707 + C15708 - C15709) * C214 +
             (C15930 - C15931 + C15932 - C15933) * C44260) *
                C44321) *
               C3112 +
           (((C14929 * C1204 - C14933 * C1199 + C44312 * C1202 -
              C14935 * C1198) *
                 C214 +
             (C14929 * C1585 - C14933 * C1581 + C44312 * C1586 -
              C14935 * C1582) *
                 C44260) *
                C14931 +
            ((C14929 * C2619 - C14933 * C2615 + C44312 * C2621 -
              C14935 * C2616) *
                 C214 +
             (C14929 * C2954 - C14933 * C2951 + C44312 * C2955 -
              C14935 * C2952) *
                 C44260) *
                C44321) *
               C44319) *
              C44195 * C44315)) /
        (p * q * std::sqrt(p + q));
    d2eezy[33] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C14931 * C152 - C14987 * C93 + C44321 * C694 - C14988 * C630) *
                 C214 +
             (C14931 * C491 - C14987 * C443 + C44321 * C1068 - C14988 * C1010) *
                 C44260) *
                C14929 +
            ((C14990 - C14991 + C14992 - C14993) * C214 +
             (C15336 - C15337 + C15338 - C15339) * C44260) *
                C44312) *
               C3112 +
           (((C14987 * C1200 - C14931 * C1264 + C14988 * C2614 -
              C44321 * C2676) *
                 C214 +
             (C14987 * C1580 - C14931 * C1638 + C14988 * C2950 -
              C44321 * C3006) *
                 C44260) *
                C14929 +
            ((C16204 - C16205 + C16206 - C16207) * C214 +
             (C16622 - C16623 + C16624 - C16625) * C44260) *
                C44312) *
               C44319) *
              C44195 * C1768 +
          ((((C14991 - C14990 + C14993 - C14992) * C214 +
             (C15337 - C15336 + C15339 - C15338) * C44260) *
                C14929 +
            ((C14998 - C14999 + C15000 - C15001) * C214 +
             (C15340 - C15341 + C15342 - C15343) * C44260) *
                C44312) *
               C3112 +
           (((C16205 - C16204 + C16207 - C16206) * C214 +
             (C16623 - C16622 + C16625 - C16624) * C44260) *
                C14929 +
            ((C14931 * C1266 - C14987 * C1198 + C44321 * C2678 -
              C14988 * C2616) *
                 C214 +
             (C14931 * C1640 - C14987 * C1582 + C44321 * C3008 -
              C14988 * C2952) *
                 C44260) *
                C44312) *
               C44319) *
              C44195 * C44315)) /
        (p * q * std::sqrt(p + q));
    d2eezz[33] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C214 * C215 - C544 * C93 - C214 * C443 + C44260 * C545) * C14931 +
             C5579 * C44321) *
                C14929 +
            (C15394 + C15395) * C44312) *
               C3112 -
           ((C16692 + C16693) * C44312 +
            (C7996 * C44321 +
             (C214 * C1330 - C544 * C1200 - C214 * C1580 + C44260 * C1698) *
                 C14931) *
                C14929) *
               C44319) *
              C44195 * C1768 +
          (((C16693 + C16692) * C14929 +
            (C1713 * C14931 +
             (C214 * C2734 - C544 * C2616 - C214 * C2952 + C44260 * C3061) *
                 C44321) *
                C44312) *
               C44319 -
           ((C15396 + C15397) * C44312 + (C15395 + C15394) * C14929) * C3112) *
              C44195 * C44315)) /
        (p * q * std::sqrt(p + q));
    d2eexx[34] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C14933 * C98 - C14934 * C93 - C14933 * C99 + C14929 * C108 +
             C14935 * C100 - C14936 * C94 - C14935 * C101 + C44312 * C109) *
                C44260 * C14931 +
            (C15488 + C15489) * C44260 * C44321) *
               C3112 -
           ((C17842 + C17843) * C44260 * C44321 +
            (C14935 * C1204 - C14936 * C1199 - C14935 * C1205 + C44312 * C1211 +
             C14933 * C1206 - C14934 * C1200 - C14933 * C1207 +
             C14929 * C1212) *
                C44260 * C14931) *
               C44319) *
              C624 +
          (((C17843 + C17842) * C44260 * C14931 +
            (C14933 * C7399 - C14934 * C7397 - C14933 * C7400 + C14929 * C7403 +
             C14935 * C7401 - C14936 * C7398 - C14935 * C7402 +
             C44312 * C7404) *
                C44260 * C44321) *
               C44319 -
           ((C17350 + C17351) * C44260 * C44321 +
            (C15489 + C15488) * C44260 * C14931) *
               C3112) *
              C44317) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eexy[34] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C14931 * C152 - C14987 * C93 + C44321 * C694 - C14988 * C630) *
                C14933 +
            (C14931 * C157 - C14987 * C99 + C44321 * C698 - C14988 * C637) *
                C14929 +
            (C14990 - C14991 + C14992 - C14993) * C14935 +
            (C14994 - C14995 + C14996 - C14997) * C44312) *
               C44260 * C3112 +
           ((C14987 * C1200 - C14931 * C1264 + C14988 * C2614 -
             C44321 * C2676) *
                C14933 +
            (C14987 * C1207 - C14931 * C1268 + C14988 * C2618 -
             C44321 * C2679) *
                C14929 +
            (C16204 - C16205 + C16206 - C16207) * C14935 +
            (C16208 - C16209 + C16210 - C16211) * C44312) *
               C44260 * C44319) *
              C624 +
          (((C14987 * C630 - C14931 * C694 + C14988 * C2212 - C44321 * C2262) *
                C14933 +
            (C14987 * C637 - C14931 * C698 + C14988 * C2216 - C44321 * C2265) *
                C14929 +
            (C15558 - C15559 + C15560 - C15561) * C14935 +
            (C15562 - C15563 + C15564 - C15565) * C44312) *
               C44260 * C3112 +
           ((C14931 * C2676 - C14987 * C2614 + C44321 * C7485 -
             C14988 * C7397) *
                C14933 +
            (C14931 * C2679 - C14987 * C2618 + C44321 * C7487 -
             C14988 * C7400) *
                C14929 +
            (C14931 * C2677 - C14987 * C2615 + C44321 * C7486 -
             C14988 * C7398) *
                C14935 +
            (C14931 * C2680 - C14987 * C2620 + C44321 * C7488 -
             C14988 * C7402) *
                C44312) *
               C44260 * C44319) *
              C44317) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eexz[34] += (2 * std::pow(Pi, 2.5) *
                   (((((C44260 * C215 - C214 * C93) * C14933 +
                       (C44260 * C220 - C214 * C99) * C14929 +
                       (C226 - C227) * C14935 + (C228 - C229) * C44312) *
                          C14931 +
                      ((C5110 - C5111) * C14933 + (C5112 - C5113) * C14929 +
                       C5114 * C14935 + C5115 * C44312) *
                          C44321) *
                         C3112 +
                     (((C214 * C1200 - C44260 * C1330) * C14933 +
                       (C214 * C1207 - C44260 * C1334) * C14929 +
                       (C1339 - C1340) * C14935 + (C1341 - C1342) * C44312) *
                          C14931 +
                      ((C7560 - C7561) * C14933 + (C7562 - C7563) * C14929 +
                       (C5788 - C5789) * C14935 + (C5790 - C5791) * C44312) *
                          C44321) *
                         C44319) *
                        C624 +
                    ((((C5111 - C5110) * C14933 + (C5113 - C5112) * C14929 +
                       C5116 * C14935 + C5117 * C44312) *
                          C14931 +
                      ((C6991 - C6992) * C14933 + (C6993 - C6994) * C14929 +
                       (C5118 - C5119) * C14935 + (C5120 - C5121) * C44312) *
                          C44321) *
                         C3112 +
                     (((C7561 - C7560) * C14933 + (C7563 - C7562) * C14929 +
                       (C5789 - C5788) * C14935 + (C5791 - C5790) * C44312) *
                          C14931 +
                      ((C44260 * C7555 - C214 * C7397) * C14933 +
                       (C44260 * C7557 - C214 * C7400) * C14929 +
                       (C44260 * C7556 - C214 * C7398) * C14935 +
                       (C44260 * C7558 - C214 * C7402) * C44312) *
                          C44321) *
                         C44319) *
                        C44317) *
                   C44161) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[34] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C14929 * C98 - C14933 * C93 + C44312 * C100 - C14935 * C94) *
                C14987 +
            (C14929 * C282 - C14933 * C277 + C44312 * C283 - C14935 * C278) *
                C14931 +
            (C15698 - C15699 + C15700 - C15701) * C14988 +
            (C15702 - C15703 + C15704 - C15705) * C44321) *
               C44260 * C3112 +
           ((C14933 * C1200 - C14929 * C1206 + C14935 * C1199 -
             C44312 * C1204) *
                C14987 +
            (C14933 * C1396 - C14929 * C1400 + C14935 * C1397 -
             C44312 * C1401) *
                C14931 +
            (C18042 - C18043 + C18044 - C18045) * C14988 +
            (C18046 - C18047 + C18048 - C18049) * C44321) *
               C44260 * C44319) *
              C624 +
          (((C15699 - C15698 + C15701 - C15700) * C14987 +
            (C15703 - C15702 + C15705 - C15704) * C14931 +
            (C17502 - C17503 + C17504 - C17505) * C14988 +
            (C17506 - C17507 + C17508 - C17509) * C44321) *
               C44260 * C3112 +
           ((C18043 - C18042 + C18045 - C18044) * C14987 +
            (C18047 - C18046 + C18049 - C18048) * C14931 +
            (C14929 * C7399 - C14933 * C7397 + C44312 * C7401 -
             C14935 * C7398) *
                C14988 +
            (C14929 * C7631 - C14933 * C7629 + C44312 * C7632 -
             C14935 * C7630) *
                C44321) *
               C44260 * C44319) *
              C44317) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eeyy[34] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C14987 * C152 - C15155 * C93 - C14987 * C277 + C14931 * C326 +
             C14988 * C694 - C15156 * C630 - C14988 * C826 + C44321 * C886) *
                C14929 +
            (C15182 + C15183) * C44312) *
               C44260 * C3112 -
           ((C16422 + C16423) * C44312 +
            (C14988 * C2676 - C15156 * C2614 - C14988 * C2788 + C44321 * C2844 +
             C14987 * C1264 - C15155 * C1200 - C14987 * C1396 +
             C14931 * C1456) *
                C14929) *
               C44260 * C44319) *
              C624 +
          (((C14987 * C2676 - C15155 * C2614 - C14987 * C2788 + C14931 * C2844 +
             C14988 * C7485 - C15156 * C7397 - C14988 * C7629 +
             C44321 * C7707) *
                C14929 +
            (C14987 * C2677 - C15155 * C2615 - C14987 * C2789 + C14931 * C2845 +
             C14988 * C7486 - C15156 * C7398 - C14988 * C7630 +
             C44321 * C7708) *
                C44312) *
               C44260 * C44319 -
           ((C15792 + C15793) * C44312 +
            (C14988 * C2262 - C15156 * C2212 - C14988 * C2350 + C44321 * C2394 +
             C14987 * C694 - C15155 * C630 - C14987 * C826 + C14931 * C886) *
                C14929) *
               C44260 * C3112) *
              C44317) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eeyz[34] += (2 * std::pow(Pi, 2.5) *
                   (((((C44260 * C215 - C214 * C93) * C14987 +
                       (C44260 * C390 - C214 * C277) * C14931 +
                       (C5110 - C5111) * C14988 + (C5350 - C5351) * C44321) *
                          C14929 +
                      ((C226 - C227) * C14987 + (C396 - C397) * C14931 +
                       C5114 * C14988 + C5352 * C44321) *
                          C44312) *
                         C3112 +
                     (((C214 * C1200 - C44260 * C1330) * C14987 +
                       (C214 * C1396 - C44260 * C1522) * C14931 +
                       (C7560 - C7561) * C14988 + (C7778 - C7779) * C44321) *
                          C14929 +
                      ((C1339 - C1340) * C14987 + (C1527 - C1528) * C14931 +
                       (C5788 - C5789) * C14988 + (C6004 - C6005) * C44321) *
                          C44312) *
                         C44319) *
                        C624 +
                    ((((C5111 - C5110) * C14987 + (C5351 - C5350) * C14931 +
                       (C6991 - C6992) * C14988 + (C7161 - C7162) * C44321) *
                          C14929 +
                      (C5116 * C14987 + C5353 * C14931 +
                       (C5118 - C5119) * C14988 + (C5354 - C5355) * C44321) *
                          C44312) *
                         C3112 +
                     (((C7561 - C7560) * C14987 + (C7779 - C7778) * C14931 +
                       (C44260 * C7555 - C214 * C7397) * C14988 +
                       (C44260 * C7775 - C214 * C7629) * C44321) *
                          C14929 +
                      ((C5789 - C5788) * C14987 + (C6005 - C6004) * C14931 +
                       (C44260 * C7556 - C214 * C7398) * C14988 +
                       (C44260 * C7776 - C214 * C7630) * C44321) *
                          C44312) *
                         C44319) *
                        C44317) *
                   C44161) /
                  (p * q * std::sqrt(p + q));
    d2eezx[34] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C14929 * C98 - C14933 * C93 + C44312 * C100 - C14935 * C94) *
                 C214 +
             (C14929 * C448 - C14933 * C443 + C44312 * C449 - C14935 * C444) *
                 C44260) *
                C14931 +
            ((C15698 - C15699 + C15700 - C15701) * C214 +
             (C15926 - C15927 + C15928 - C15929) * C44260) *
                C44321) *
               C3112 +
           (((C14933 * C1200 - C14929 * C1206 + C14935 * C1199 -
              C44312 * C1204) *
                 C214 +
             (C14933 * C1580 - C14929 * C1584 + C14935 * C1581 -
              C44312 * C1585) *
                 C44260) *
                C14931 +
            ((C18042 - C18043 + C18044 - C18045) * C214 +
             (C18248 - C18249 + C18250 - C18251) * C44260) *
                C44321) *
               C44319) *
              C624 +
          ((((C15699 - C15698 + C15701 - C15700) * C214 +
             (C15927 - C15926 + C15929 - C15928) * C44260) *
                C14931 +
            ((C17502 - C17503 + C17504 - C17505) * C214 +
             (C17660 - C17661 + C17662 - C17663) * C44260) *
                C44321) *
               C3112 +
           (((C18043 - C18042 + C18045 - C18044) * C214 +
             (C18249 - C18248 + C18251 - C18250) * C44260) *
                C14931 +
            ((C14929 * C7399 - C14933 * C7397 + C44312 * C7401 -
              C14935 * C7398) *
                 C214 +
             (C14929 * C7847 - C14933 * C7845 + C44312 * C7848 -
              C14935 * C7846) *
                 C44260) *
                C44321) *
               C44319) *
              C44317) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eezy[34] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C14931 * C152 - C14987 * C93 + C44321 * C694 - C14988 * C630) *
                 C214 +
             (C14931 * C491 - C14987 * C443 + C44321 * C1068 - C14988 * C1010) *
                 C44260) *
                C14929 +
            ((C14990 - C14991 + C14992 - C14993) * C214 +
             (C15336 - C15337 + C15338 - C15339) * C44260) *
                C44312) *
               C3112 +
           (((C14987 * C1200 - C14931 * C1264 + C14988 * C2614 -
              C44321 * C2676) *
                 C214 +
             (C14987 * C1580 - C14931 * C1638 + C14988 * C2950 -
              C44321 * C3006) *
                 C44260) *
                C14929 +
            ((C16204 - C16205 + C16206 - C16207) * C214 +
             (C16622 - C16623 + C16624 - C16625) * C44260) *
                C44312) *
               C44319) *
              C624 +
          ((((C14987 * C630 - C14931 * C694 + C14988 * C2212 - C44321 * C2262) *
                 C214 +
             (C14987 * C1010 - C14931 * C1068 + C14988 * C2476 -
              C44321 * C2520) *
                 C44260) *
                C14929 +
            ((C15558 - C15559 + C15560 - C15561) * C214 +
             (C16000 - C16001 + C16002 - C16003) * C44260) *
                C44312) *
               C3112 +
           (((C14931 * C2676 - C14987 * C2614 + C44321 * C7485 -
              C14988 * C7397) *
                 C214 +
             (C14931 * C3006 - C14987 * C2950 + C44321 * C7919 -
              C14988 * C7845) *
                 C44260) *
                C14929 +
            ((C14931 * C2677 - C14987 * C2615 + C44321 * C7486 -
              C14988 * C7398) *
                 C214 +
             (C14931 * C3007 - C14987 * C2951 + C44321 * C7920 -
              C14988 * C7846) *
                 C44260) *
                C44312) *
               C44319) *
              C44317) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eezz[34] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C214 * C215 - C544 * C93 - C214 * C443 + C44260 * C545) * C14931 +
             C5579 * C44321) *
                C14929 +
            (C15394 + C15395) * C44312) *
               C3112 -
           ((C16692 + C16693) * C44312 +
            (C7996 * C44321 +
             (C214 * C1330 - C544 * C1200 - C214 * C1580 + C44260 * C1698) *
                 C14931) *
                C14929) *
               C44319) *
              C624 +
          (((C7996 * C14931 +
             (C214 * C7555 - C544 * C7397 - C214 * C7845 + C44260 * C7987) *
                 C44321) *
                C14929 +
            (C6215 * C14931 +
             (C214 * C7556 - C544 * C7398 - C214 * C7846 + C44260 * C7988) *
                 C44321) *
                C44312) *
               C44319 -
           ((C16070 + C16071) * C44312 +
            (C7331 * C44321 + C5579 * C14931) * C14929) *
               C3112) *
              C44317) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eexx[35] +=
        (2 * std::pow(Pi, 2.5) *
         (((C14933 * C98 - C14934 * C93 - C14933 * C99 + C14929 * C108 +
            C14935 * C100 - C14936 * C94 - C14935 * C101 + C44312 * C109) *
               C44260 * C14931 +
           (C15488 + C15489) * C44260 * C44321) *
              C4002 -
          ((C17842 + C17843) * C44260 * C44321 +
           (C14935 * C1204 - C14936 * C1199 - C14935 * C1205 + C44312 * C1211 +
            C14933 * C1206 - C14934 * C1200 - C14933 * C1207 + C14929 * C1212) *
               C44260 * C14931) *
              C4003 +
          ((C14933 * C4008 - C14934 * C4005 - C14933 * C4009 + C14929 * C4014 +
            C14935 * C4010 - C14936 * C4006 - C14935 * C4011 + C44312 * C4015) *
               C44260 * C14931 +
           (C14933 * C9236 - C14934 * C9234 - C14933 * C9237 + C14929 * C9240 +
            C14935 * C9238 - C14936 * C9235 - C14935 * C9239 + C44312 * C9241) *
               C44260 * C44321) *
              C4004) *
         C44195 * C44161) /
        (p * q * std::sqrt(p + q));
    d2eexy[35] +=
        (2 * std::pow(Pi, 2.5) *
         (((C14931 * C152 - C14987 * C93 + C44321 * C694 - C14988 * C630) *
               C14933 +
           (C14931 * C157 - C14987 * C99 + C44321 * C698 - C14988 * C637) *
               C14929 +
           (C14990 - C14991 + C14992 - C14993) * C14935 +
           (C14994 - C14995 + C14996 - C14997) * C44312) *
              C44260 * C4002 +
          ((C14987 * C1200 - C14931 * C1264 + C14988 * C2614 - C44321 * C2676) *
               C14933 +
           (C14987 * C1207 - C14931 * C1268 + C14988 * C2618 - C44321 * C2679) *
               C14929 +
           (C16204 - C16205 + C16206 - C16207) * C14935 +
           (C16208 - C16209 + C16210 - C16211) * C44312) *
              C44260 * C4003 +
          ((C14931 * C4055 - C14987 * C4005 + C44321 * C9292 - C14988 * C9234) *
               C14933 +
           (C14931 * C4058 - C14987 * C4009 + C44321 * C9294 - C14988 * C9237) *
               C14929 +
           (C14931 * C4056 - C14987 * C4006 + C44321 * C9293 - C14988 * C9235) *
               C14935 +
           (C14931 * C4059 - C14987 * C4011 + C44321 * C9295 - C14988 * C9239) *
               C44312) *
              C44260 * C4004) *
         C44195 * C44161) /
        (p * q * std::sqrt(p + q));
    d2eexz[35] += (2 * std::pow(Pi, 2.5) *
                   ((((C44260 * C215 - C214 * C93) * C14933 +
                      (C44260 * C220 - C214 * C99) * C14929 +
                      (C226 - C227) * C14935 + (C228 - C229) * C44312) *
                         C14931 +
                     ((C5110 - C5111) * C14933 + (C5112 - C5113) * C14929 +
                      C5114 * C14935 + C5115 * C44312) *
                         C44321) *
                        C4002 +
                    (((C214 * C1200 - C44260 * C1330) * C14933 +
                      (C214 * C1207 - C44260 * C1334) * C14929 +
                      (C1339 - C1340) * C14935 + (C1341 - C1342) * C44312) *
                         C14931 +
                     ((C7560 - C7561) * C14933 + (C7562 - C7563) * C14929 +
                      (C5788 - C5789) * C14935 + (C5790 - C5791) * C44312) *
                         C44321) *
                        C4003 +
                    (((C44260 * C4099 - C214 * C4005) * C14933 +
                      (C44260 * C4102 - C214 * C4009) * C14929 +
                      (C44260 * C4100 - C214 * C4006) * C14935 +
                      (C44260 * C4103 - C214 * C4011) * C44312) *
                         C14931 +
                     ((C44260 * C9346 - C214 * C9234) * C14933 +
                      (C44260 * C9348 - C214 * C9237) * C14929 +
                      (C44260 * C9347 - C214 * C9235) * C14935 +
                      (C44260 * C9349 - C214 * C9239) * C44312) *
                         C44321) *
                        C4004) *
                   C44195 * C44161) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[35] +=
        (2 * std::pow(Pi, 2.5) *
         (((C14929 * C98 - C14933 * C93 + C44312 * C100 - C14935 * C94) *
               C14987 +
           (C14929 * C282 - C14933 * C277 + C44312 * C283 - C14935 * C278) *
               C14931 +
           (C15698 - C15699 + C15700 - C15701) * C14988 +
           (C15702 - C15703 + C15704 - C15705) * C44321) *
              C44260 * C4002 +
          ((C14933 * C1200 - C14929 * C1206 + C14935 * C1199 - C44312 * C1204) *
               C14987 +
           (C14933 * C1396 - C14929 * C1400 + C14935 * C1397 - C44312 * C1401) *
               C14931 +
           (C18042 - C18043 + C18044 - C18045) * C14988 +
           (C18046 - C18047 + C18048 - C18049) * C44321) *
              C44260 * C4003 +
          ((C14929 * C4008 - C14933 * C4005 + C44312 * C4010 - C14935 * C4006) *
               C14987 +
           (C14929 * C4146 - C14933 * C4143 + C44312 * C4147 - C14935 * C4144) *
               C14931 +
           (C14929 * C9236 - C14933 * C9234 + C44312 * C9238 - C14935 * C9235) *
               C14988 +
           (C14929 * C9402 - C14933 * C9400 + C44312 * C9403 - C14935 * C9401) *
               C44321) *
              C44260 * C4004) *
         C44195 * C44161) /
        (p * q * std::sqrt(p + q));
    d2eeyy[35] +=
        (2 * std::pow(Pi, 2.5) *
         (((C14987 * C152 - C15155 * C93 - C14987 * C277 + C14931 * C326 +
            C14988 * C694 - C15156 * C630 - C14988 * C826 + C44321 * C886) *
               C14929 +
           (C15182 + C15183) * C44312) *
              C44260 * C4002 -
          ((C16422 + C16423) * C44312 +
           (C14988 * C2676 - C15156 * C2614 - C14988 * C2788 + C44321 * C2844 +
            C14987 * C1264 - C15155 * C1200 - C14987 * C1396 + C14931 * C1456) *
               C14929) *
              C44260 * C4003 +
          ((C14987 * C4055 - C15155 * C4005 - C14987 * C4143 + C14931 * C4187 +
            C14988 * C9292 - C15156 * C9234 - C14988 * C9400 + C44321 * C9454) *
               C14929 +
           (C14987 * C4056 - C15155 * C4006 - C14987 * C4144 + C14931 * C4188 +
            C14988 * C9293 - C15156 * C9235 - C14988 * C9401 + C44321 * C9455) *
               C44312) *
              C44260 * C4004) *
         C44195 * C44161) /
        (p * q * std::sqrt(p + q));
    d2eeyz[35] += (2 * std::pow(Pi, 2.5) *
                   ((((C44260 * C215 - C214 * C93) * C14987 +
                      (C44260 * C390 - C214 * C277) * C14931 +
                      (C5110 - C5111) * C14988 + (C5350 - C5351) * C44321) *
                         C14929 +
                     ((C226 - C227) * C14987 + (C396 - C397) * C14931 +
                      C5114 * C14988 + C5352 * C44321) *
                         C44312) *
                        C4002 +
                    (((C214 * C1200 - C44260 * C1330) * C14987 +
                      (C214 * C1396 - C44260 * C1522) * C14931 +
                      (C7560 - C7561) * C14988 + (C7778 - C7779) * C44321) *
                         C14929 +
                     ((C1339 - C1340) * C14987 + (C1527 - C1528) * C14931 +
                      (C5788 - C5789) * C14988 + (C6004 - C6005) * C44321) *
                         C44312) *
                        C4003 +
                    (((C44260 * C4099 - C214 * C4005) * C14987 +
                      (C44260 * C4228 - C214 * C4143) * C14931 +
                      (C44260 * C9346 - C214 * C9234) * C14988 +
                      (C44260 * C9506 - C214 * C9400) * C44321) *
                         C14929 +
                     ((C44260 * C4100 - C214 * C4006) * C14987 +
                      (C44260 * C4229 - C214 * C4144) * C14931 +
                      (C44260 * C9347 - C214 * C9235) * C14988 +
                      (C44260 * C9507 - C214 * C9401) * C44321) *
                         C44312) *
                        C4004) *
                   C44195 * C44161) /
                  (p * q * std::sqrt(p + q));
    d2eezx[35] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C14929 * C98 - C14933 * C93 + C44312 * C100 - C14935 * C94) *
                C214 +
            (C14929 * C448 - C14933 * C443 + C44312 * C449 - C14935 * C444) *
                C44260) *
               C14931 +
           ((C15698 - C15699 + C15700 - C15701) * C214 +
            (C15926 - C15927 + C15928 - C15929) * C44260) *
               C44321) *
              C4002 +
          (((C14933 * C1200 - C14929 * C1206 + C14935 * C1199 -
             C44312 * C1204) *
                C214 +
            (C14933 * C1580 - C14929 * C1584 + C14935 * C1581 -
             C44312 * C1585) *
                C44260) *
               C14931 +
           ((C18042 - C18043 + C18044 - C18045) * C214 +
            (C18248 - C18249 + C18250 - C18251) * C44260) *
               C44321) *
              C4003 +
          (((C14929 * C4008 - C14933 * C4005 + C44312 * C4010 -
             C14935 * C4006) *
                C214 +
            (C14929 * C4272 - C14933 * C4269 + C44312 * C4273 -
             C14935 * C4270) *
                C44260) *
               C14931 +
           ((C14929 * C9236 - C14933 * C9234 + C44312 * C9238 -
             C14935 * C9235) *
                C214 +
            (C14929 * C9560 - C14933 * C9558 + C44312 * C9561 -
             C14935 * C9559) *
                C44260) *
               C44321) *
              C4004) *
         C44195 * C44161) /
        (p * q * std::sqrt(p + q));
    d2eezy[35] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C14931 * C152 - C14987 * C93 + C44321 * C694 - C14988 * C630) *
                C214 +
            (C14931 * C491 - C14987 * C443 + C44321 * C1068 - C14988 * C1010) *
                C44260) *
               C14929 +
           ((C14990 - C14991 + C14992 - C14993) * C214 +
            (C15336 - C15337 + C15338 - C15339) * C44260) *
               C44312) *
              C4002 +
          (((C14987 * C1200 - C14931 * C1264 + C14988 * C2614 -
             C44321 * C2676) *
                C214 +
            (C14987 * C1580 - C14931 * C1638 + C14988 * C2950 -
             C44321 * C3006) *
                C44260) *
               C14929 +
           ((C16204 - C16205 + C16206 - C16207) * C214 +
            (C16622 - C16623 + C16624 - C16625) * C44260) *
               C44312) *
              C4003 +
          (((C14931 * C4055 - C14987 * C4005 + C44321 * C9292 -
             C14988 * C9234) *
                C214 +
            (C14931 * C4313 - C14987 * C4269 + C44321 * C9612 -
             C14988 * C9558) *
                C44260) *
               C14929 +
           ((C14931 * C4056 - C14987 * C4006 + C44321 * C9293 -
             C14988 * C9235) *
                C214 +
            (C14931 * C4314 - C14987 * C4270 + C44321 * C9613 -
             C14988 * C9559) *
                C44260) *
               C44312) *
              C4004) *
         C44195 * C44161) /
        (p * q * std::sqrt(p + q));
    d2eezz[35] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C214 * C215 - C544 * C93 - C214 * C443 + C44260 * C545) * C14931 +
            C5579 * C44321) *
               C14929 +
           (C15394 + C15395) * C44312) *
              C4002 -
          ((C16692 + C16693) * C44312 +
           (C7996 * C44321 +
            (C214 * C1330 - C544 * C1200 - C214 * C1580 + C44260 * C1698) *
                C14931) *
               C14929) *
              C4003 +
          (((C214 * C4099 - C544 * C4005 - C214 * C4269 + C44260 * C4354) *
                C14931 +
            (C214 * C9346 - C544 * C9234 - C214 * C9558 + C44260 * C9664) *
                C44321) *
               C14929 +
           ((C214 * C4100 - C544 * C4006 - C214 * C4270 + C44260 * C4355) *
                C14931 +
            (C214 * C9347 - C544 * C9235 - C214 * C9559 + C44260 * C9665) *
                C44321) *
               C44312) *
              C4004) *
         C44195 * C44161) /
        (p * q * std::sqrt(p + q));
    d2eexx[36] +=
        (2 * std::pow(Pi, 2.5) *
         (((C20063 * C98 - C20064 * C93 - C20063 * C99 + C44138 * C108) *
               C44260 * C20060 +
           (C20063 * C636 - C20064 * C630 - C20063 * C637 + C44138 * C642) *
               C44260 * C20061 +
           (C20063 * C2215 - C20064 * C2212 - C20063 * C2216 + C44138 * C2221) *
               C44260 * C20062) *
              C44212 * C44195 * C84 -
          ((C20063 * C2217 - C20064 * C2213 - C20063 * C2218 + C44138 * C2222) *
               C44260 * C20062 +
           (C20063 * C634 - C20064 * C629 - C20063 * C635 + C44138 * C641) *
               C44260 * C20061 +
           (C20063 * C100 - C20064 * C94 - C20063 * C101 + C44138 * C109) *
               C44260 * C20060) *
              C44212 * C44195 * C85 +
          ((C20063 * C102 - C20064 * C95 - C20063 * C103 + C44138 * C110) *
               C44260 * C20060 +
           (C20063 * C632 - C20064 * C628 - C20063 * C633 + C44138 * C640) *
               C44260 * C20061 +
           (C20063 * C2219 - C20064 * C2214 - C20063 * C2220 + C44138 * C2223) *
               C44260 * C20062) *
              C44212 * C44195 * C86)) /
        (p * q * std::sqrt(p + q));
    d2eexy[36] += (2 * std::pow(Pi, 2.5) *
                   (((C20060 * C152 - C20103 * C93 + C20061 * C694 -
                      C20104 * C630 + C20062 * C2262 - C20105 * C2212) *
                         C20063 +
                     (C20060 * C157 - C20103 * C99 + C20061 * C698 -
                      C20104 * C637 + C20062 * C2265 - C20105 * C2216) *
                         C44138) *
                        C44260 * C44212 * C44195 * C84 +
                    ((C20103 * C94 - C20060 * C153 + C20104 * C629 -
                      C20061 * C695 + C20105 * C2213 - C20062 * C2263) *
                         C20063 +
                     (C20103 * C101 - C20060 * C158 + C20104 * C635 -
                      C20061 * C699 + C20105 * C2218 - C20062 * C2266) *
                         C44138) *
                        C44260 * C44212 * C44195 * C85 +
                    ((C20060 * C154 - C20103 * C95 + C20061 * C696 -
                      C20104 * C628 + C20062 * C2264 - C20105 * C2214) *
                         C20063 +
                     (C20060 * C159 - C20103 * C103 + C20061 * C700 -
                      C20104 * C633 + C20062 * C2267 - C20105 * C2220) *
                         C44138) *
                        C44260 * C44212 * C44195 * C86)) /
                  (p * q * std::sqrt(p + q));
    d2eexz[36] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C44260 * C215 - C214 * C93) * C20063 +
            (C44260 * C220 - C214 * C99) * C44138) *
               C20060 +
           ((C5110 - C5111) * C20063 + (C5112 - C5113) * C44138) * C20061 +
           ((C6992 - C6991) * C20063 + (C6994 - C6993) * C44138) * C20062) *
              C44212 * C44195 * C84 +
          (((C227 - C226) * C20063 + (C229 - C228) * C44138) * C20060 +
           (C5116 * C20063 + C5117 * C44138) * C20061 +
           ((C5118 - C5119) * C20063 + (C5120 - C5121) * C44138) * C20062) *
              C44212 * C44195 * C85 +
          ((C238 * C20063 + C239 * C44138) * C20060 +
           ((C774 - C773) * C20063 + (C776 - C775) * C44138) * C20061 +
           ((C44260 * C2308 - C214 * C2214) * C20063 +
            (C44260 * C2311 - C214 * C2220) * C44138) *
               C20062) *
              C44212 * C44195 * C86)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[36] += (2 * std::pow(Pi, 2.5) *
                   (((C44138 * C98 - C20063 * C93) * C20103 +
                     (C44138 * C282 - C20063 * C277) * C20060 +
                     (C44138 * C636 - C20063 * C630) * C20104 +
                     (C44138 * C830 - C20063 * C826) * C20061 +
                     (C44138 * C2215 - C20063 * C2212) * C20105 +
                     (C44138 * C2353 - C20063 * C2350) * C20062) *
                        C44260 * C44212 * C44195 * C84 +
                    ((C20063 * C94 - C44138 * C100) * C20103 +
                     (C20063 * C278 - C44138 * C283) * C20060 +
                     (C20063 * C629 - C44138 * C634) * C20104 +
                     (C20063 * C827 - C44138 * C831) * C20061 +
                     (C20063 * C2213 - C44138 * C2217) * C20105 +
                     (C20063 * C2351 - C44138 * C2354) * C20062) *
                        C44260 * C44212 * C44195 * C85 +
                    ((C44138 * C102 - C20063 * C95) * C20103 +
                     (C44138 * C284 - C20063 * C279) * C20060 +
                     (C44138 * C632 - C20063 * C628) * C20104 +
                     (C44138 * C832 - C20063 * C828) * C20061 +
                     (C44138 * C2219 - C20063 * C2214) * C20105 +
                     (C44138 * C2355 - C20063 * C2352) * C20062) *
                        C44260 * C44212 * C44195 * C86)) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[36] +=
        (2 * std::pow(Pi, 2.5) *
         ((C20103 * C152 - C20220 * C93 - C20103 * C277 + C20060 * C326 +
           C20104 * C694 - C20221 * C630 - C20104 * C826 + C20061 * C886 +
           C20105 * C2262 - C20222 * C2212 - C20105 * C2350 + C20062 * C2394) *
              C44138 * C44260 * C44212 * C44195 * C84 -
          (C20105 * C2263 - C20222 * C2213 - C20105 * C2351 + C20062 * C2395 +
           C20104 * C695 - C20221 * C629 - C20104 * C827 + C20061 * C885 +
           C20103 * C153 - C20220 * C94 - C20103 * C278 + C20060 * C327) *
              C44138 * C44260 * C44212 * C44195 * C85 +
          (C20103 * C154 - C20220 * C95 - C20103 * C279 + C20060 * C328 +
           C20104 * C696 - C20221 * C628 - C20104 * C828 + C20061 * C884 +
           C20105 * C2264 - C20222 * C2214 - C20105 * C2352 + C20062 * C2396) *
              C44138 * C44260 * C44212 * C44195 * C86)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[36] +=
        (2 * std::pow(Pi, 2.5) *
         (((C44260 * C215 - C214 * C93) * C20103 +
           (C44260 * C390 - C214 * C277) * C20060 + (C5110 - C5111) * C20104 +
           (C5350 - C5351) * C20061 + (C6992 - C6991) * C20105 +
           (C7162 - C7161) * C20062) *
              C44138 * C44212 * C44195 * C84 +
          ((C227 - C226) * C20103 + (C397 - C396) * C20060 + C5116 * C20104 +
           C5353 * C20061 + (C5118 - C5119) * C20105 +
           (C5354 - C5355) * C20062) *
              C44138 * C44212 * C44195 * C85 +
          (C238 * C20103 + C403 * C20060 + (C774 - C773) * C20104 +
           (C960 - C959) * C20061 + (C44260 * C2308 - C214 * C2214) * C20105 +
           (C44260 * C2437 - C214 * C2352) * C20062) *
              C44138 * C44212 * C44195 * C86)) /
        (p * q * std::sqrt(p + q));
    d2eezx[36] += (2 * std::pow(Pi, 2.5) *
                   ((((C44138 * C98 - C20063 * C93) * C214 +
                      (C44138 * C448 - C20063 * C443) * C44260) *
                         C20060 +
                     ((C44138 * C636 - C20063 * C630) * C214 +
                      (C44138 * C1014 - C20063 * C1010) * C44260) *
                         C20061 +
                     ((C44138 * C2215 - C20063 * C2212) * C214 +
                      (C44138 * C2479 - C20063 * C2476) * C44260) *
                         C20062) *
                        C44212 * C44195 * C84 +
                    (((C20063 * C94 - C44138 * C100) * C214 +
                      (C20063 * C444 - C44138 * C449) * C44260) *
                         C20060 +
                     ((C20063 * C629 - C44138 * C634) * C214 +
                      (C20063 * C1011 - C44138 * C1015) * C44260) *
                         C20061 +
                     ((C20063 * C2213 - C44138 * C2217) * C214 +
                      (C20063 * C2477 - C44138 * C2480) * C44260) *
                         C20062) *
                        C44212 * C44195 * C85 +
                    (((C44138 * C102 - C20063 * C95) * C214 +
                      (C44138 * C450 - C20063 * C445) * C44260) *
                         C20060 +
                     ((C44138 * C632 - C20063 * C628) * C214 +
                      (C44138 * C1016 - C20063 * C1012) * C44260) *
                         C20061 +
                     ((C44138 * C2219 - C20063 * C2214) * C214 +
                      (C44138 * C2481 - C20063 * C2478) * C44260) *
                         C20062) *
                        C44212 * C44195 * C86)) /
                  (p * q * std::sqrt(p + q));
    d2eezy[36] += (2 * std::pow(Pi, 2.5) *
                   (((C20060 * C152 - C20103 * C93 + C20061 * C694 -
                      C20104 * C630 + C20062 * C2262 - C20105 * C2212) *
                         C214 +
                     (C20060 * C491 - C20103 * C443 + C20061 * C1068 -
                      C20104 * C1010 + C20062 * C2520 - C20105 * C2476) *
                         C44260) *
                        C44138 * C44212 * C44195 * C84 +
                    ((C20103 * C94 - C20060 * C153 + C20104 * C629 -
                      C20061 * C695 + C20105 * C2213 - C20062 * C2263) *
                         C214 +
                     (C20103 * C444 - C20060 * C492 + C20104 * C1011 -
                      C20061 * C1069 + C20105 * C2477 - C20062 * C2521) *
                         C44260) *
                        C44138 * C44212 * C44195 * C85 +
                    ((C20060 * C154 - C20103 * C95 + C20061 * C696 -
                      C20104 * C628 + C20062 * C2264 - C20105 * C2214) *
                         C214 +
                     (C20060 * C493 - C20103 * C445 + C20061 * C1070 -
                      C20104 * C1012 + C20062 * C2522 - C20105 * C2478) *
                         C44260) *
                        C44138 * C44212 * C44195 * C86)) /
                  (p * q * std::sqrt(p + q));
    d2eezz[36] +=
        (2 * std::pow(Pi, 2.5) *
         (((C214 * C215 - C544 * C93 - C214 * C443 + C44260 * C545) * C20060 +
           C5579 * C20061 + C7331 * C20062) *
              C44138 * C44212 * C44195 * C84 -
          (C5580 * C20062 + C1144 * C20061 + C569 * C20060) * C44138 * C44212 *
              C44195 * C85 +
          (C570 * C20060 + C1143 * C20061 +
           (C214 * C2308 - C544 * C2214 - C214 * C2478 + C44260 * C2563) *
               C20062) *
              C44138 * C44212 * C44195 * C86)) /
        (p * q * std::sqrt(p + q));
    d2eexx[37] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C20063 * C98 - C20064 * C93 - C20063 * C99 + C44138 * C108) *
                C44260 * C20060 +
            C20454 * C20061 + C20455 * C20062) *
               C44212 * C624 -
           ((C20063 * C6862 - C20064 * C6860 - C20063 * C6863 +
             C44138 * C6866) *
                C44260 * C20062 +
            C20455 * C20061 + C20454 * C20060) *
               C44212 * C44317) *
              C626 +
          ((C20456 * C20060 + C20457 * C20061 +
            (C20063 * C6864 - C20064 * C6861 - C20063 * C6865 +
             C44138 * C6867) *
                C44260 * C20062) *
               C44212 * C44317 -
           (C20457 * C20062 + C20456 * C20061 +
            (C20063 * C100 - C20064 * C94 - C20063 * C101 + C44138 * C109) *
                C44260 * C20060) *
               C44212 * C624) *
              C44315)) /
        (p * q * std::sqrt(p + q));
    d2eexy[37] += (2 * std::pow(Pi, 2.5) *
                   ((((C20060 * C152 - C20103 * C93 + C20061 * C694 -
                       C20104 * C630 + C20062 * C2262 - C20105 * C2212) *
                          C20063 +
                      (C20060 * C157 - C20103 * C99 + C20061 * C698 -
                       C20104 * C637 + C20062 * C2265 - C20105 * C2216) *
                          C44138) *
                         C44260 * C44212 * C624 +
                     ((C20103 * C630 - C20060 * C694 + C20104 * C2212 -
                       C20061 * C2262 + C20105 * C6860 - C20062 * C6932) *
                          C20063 +
                      (C20103 * C637 - C20060 * C698 + C20104 * C2216 -
                       C20061 * C2265 + C20105 * C6863 - C20062 * C6934) *
                          C44138) *
                         C44260 * C44212 * C44317) *
                        C626 +
                    (((C20103 * C94 - C20060 * C153 + C20104 * C629 -
                       C20061 * C695 + C20105 * C2213 - C20062 * C2263) *
                          C20063 +
                      (C20103 * C101 - C20060 * C158 + C20104 * C635 -
                       C20061 * C699 + C20105 * C2218 - C20062 * C2266) *
                          C44138) *
                         C44260 * C44212 * C624 +
                     ((C20060 * C695 - C20103 * C629 + C20061 * C2263 -
                       C20104 * C2213 + C20062 * C6933 - C20105 * C6861) *
                          C20063 +
                      (C20060 * C699 - C20103 * C635 + C20061 * C2266 -
                       C20104 * C2218 + C20062 * C6935 - C20105 * C6865) *
                          C44138) *
                         C44260 * C44212 * C44317) *
                        C44315)) /
                  (p * q * std::sqrt(p + q));
    d2eexz[37] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C44260 * C215 - C214 * C93) * C20063 +
             (C44260 * C220 - C214 * C99) * C44138) *
                C20060 +
            ((C5110 - C5111) * C20063 + (C5112 - C5113) * C44138) * C20061 +
            ((C6992 - C6991) * C20063 + (C6994 - C6993) * C44138) * C20062) *
               C44212 * C624 +
           (((C5111 - C5110) * C20063 + (C5113 - C5112) * C44138) * C20060 +
            ((C6991 - C6992) * C20063 + (C6993 - C6994) * C44138) * C20061 +
            ((C214 * C6860 - C44260 * C6986) * C20063 +
             (C214 * C6863 - C44260 * C6988) * C44138) *
                C20062) *
               C44212 * C44317) *
              C626 +
          ((((C227 - C226) * C20063 + (C229 - C228) * C44138) * C20060 +
            (C5116 * C20063 + C5117 * C44138) * C20061 +
            ((C5118 - C5119) * C20063 + (C5120 - C5121) * C44138) * C20062) *
               C44212 * C624 +
           ((C5114 * C20063 + C5115 * C44138) * C20060 +
            ((C5119 - C5118) * C20063 + (C5121 - C5120) * C44138) * C20061 +
            ((C44260 * C6987 - C214 * C6861) * C20063 +
             (C44260 * C6989 - C214 * C6865) * C44138) *
                C20062) *
               C44212 * C44317) *
              C44315)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[37] += (2 * std::pow(Pi, 2.5) *
                   ((((C44138 * C98 - C20063 * C93) * C20103 +
                      (C44138 * C282 - C20063 * C277) * C20060 +
                      (C20608 - C20609) * C20104 + (C20610 - C20611) * C20061 +
                      (C20612 - C20613) * C20105 + (C20614 - C20615) * C20062) *
                         C44260 * C44212 * C624 +
                     ((C20609 - C20608) * C20103 + (C20611 - C20610) * C20060 +
                      (C20613 - C20612) * C20104 + (C20615 - C20614) * C20061 +
                      (C20063 * C6860 - C44138 * C6862) * C20105 +
                      (C20063 * C7044 - C44138 * C7046) * C20062) *
                         C44260 * C44212 * C44317) *
                        C626 +
                    (((C20063 * C94 - C44138 * C100) * C20103 +
                      (C20063 * C278 - C44138 * C283) * C20060 +
                      (C20616 - C20617) * C20104 + (C20618 - C20619) * C20061 +
                      (C20620 - C20621) * C20105 + (C20622 - C20623) * C20062) *
                         C44260 * C44212 * C624 +
                     ((C20617 - C20616) * C20103 + (C20619 - C20618) * C20060 +
                      (C20621 - C20620) * C20104 + (C20623 - C20622) * C20061 +
                      (C44138 * C6864 - C20063 * C6861) * C20105 +
                      (C44138 * C7047 - C20063 * C7045) * C20062) *
                         C44260 * C44212 * C44317) *
                        C44315)) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[37] +=
        (2 * std::pow(Pi, 2.5) *
         (((C20103 * C152 - C20220 * C93 - C20103 * C277 + C20060 * C326 +
            C20104 * C694 - C20221 * C630 - C20104 * C826 + C20061 * C886 +
            C20105 * C2262 - C20222 * C2212 - C20105 * C2350 + C20062 * C2394) *
               C44138 * C44260 * C44212 * C624 -
           (C20105 * C6932 - C20222 * C6860 - C20105 * C7044 + C20062 * C7106 +
            C20104 * C2262 - C20221 * C2212 - C20104 * C2350 + C20061 * C2394 +
            C20103 * C694 - C20220 * C630 - C20103 * C826 + C20060 * C886) *
               C44138 * C44260 * C44212 * C44317) *
              C626 +
          ((C20103 * C695 - C20220 * C629 - C20103 * C827 + C20060 * C885 +
            C20104 * C2263 - C20221 * C2213 - C20104 * C2351 + C20061 * C2395 +
            C20105 * C6933 - C20222 * C6861 - C20105 * C7045 + C20062 * C7107) *
               C44138 * C44260 * C44212 * C44317 -
           (C20105 * C2263 - C20222 * C2213 - C20105 * C2351 + C20062 * C2395 +
            C20104 * C695 - C20221 * C629 - C20104 * C827 + C20061 * C885 +
            C20103 * C153 - C20220 * C94 - C20103 * C278 + C20060 * C327) *
               C44138 * C44260 * C44212 * C624) *
              C44315)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[37] += (2 * std::pow(Pi, 2.5) *
                   ((((C44260 * C215 - C214 * C93) * C20103 +
                      (C44260 * C390 - C214 * C277) * C20060 +
                      (C5110 - C5111) * C20104 + (C5350 - C5351) * C20061 +
                      (C6992 - C6991) * C20105 + (C7162 - C7161) * C20062) *
                         C44138 * C44212 * C624 +
                     ((C5111 - C5110) * C20103 + (C5351 - C5350) * C20060 +
                      (C6991 - C6992) * C20104 + (C7161 - C7162) * C20061 +
                      (C214 * C6860 - C44260 * C6986) * C20105 +
                      (C214 * C7044 - C44260 * C7158) * C20062) *
                         C44138 * C44212 * C44317) *
                        C626 +
                    (((C227 - C226) * C20103 + (C397 - C396) * C20060 +
                      C5116 * C20104 + C5353 * C20061 +
                      (C5118 - C5119) * C20105 + (C5354 - C5355) * C20062) *
                         C44138 * C44212 * C624 +
                     (C5114 * C20103 + C5352 * C20060 +
                      (C5119 - C5118) * C20104 + (C5355 - C5354) * C20061 +
                      (C44260 * C6987 - C214 * C6861) * C20105 +
                      (C44260 * C7159 - C214 * C7045) * C20062) *
                         C44138 * C44212 * C44317) *
                        C44315)) /
                  (p * q * std::sqrt(p + q));
    d2eezx[37] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C44138 * C98 - C20063 * C93) * C214 +
             (C44138 * C448 - C20063 * C443) * C44260) *
                C20060 +
            ((C20608 - C20609) * C214 + (C20774 - C20775) * C44260) * C20061 +
            ((C20612 - C20613) * C214 + (C20776 - C20777) * C44260) * C20062) *
               C44212 * C624 +
           (((C20609 - C20608) * C214 + (C20775 - C20774) * C44260) * C20060 +
            ((C20613 - C20612) * C214 + (C20777 - C20776) * C44260) * C20061 +
            ((C20063 * C6860 - C44138 * C6862) * C214 +
             (C20063 * C7212 - C44138 * C7214) * C44260) *
                C20062) *
               C44212 * C44317) *
              C626 +
          ((((C20063 * C94 - C44138 * C100) * C214 +
             (C20063 * C444 - C44138 * C449) * C44260) *
                C20060 +
            ((C20616 - C20617) * C214 + (C20778 - C20779) * C44260) * C20061 +
            ((C20620 - C20621) * C214 + (C20780 - C20781) * C44260) * C20062) *
               C44212 * C624 +
           (((C20617 - C20616) * C214 + (C20779 - C20778) * C44260) * C20060 +
            ((C20621 - C20620) * C214 + (C20781 - C20780) * C44260) * C20061 +
            ((C44138 * C6864 - C20063 * C6861) * C214 +
             (C44138 * C7215 - C20063 * C7213) * C44260) *
                C20062) *
               C44212 * C44317) *
              C44315)) /
        (p * q * std::sqrt(p + q));
    d2eezy[37] += (2 * std::pow(Pi, 2.5) *
                   ((((C20060 * C152 - C20103 * C93 + C20061 * C694 -
                       C20104 * C630 + C20062 * C2262 - C20105 * C2212) *
                          C214 +
                      (C20060 * C491 - C20103 * C443 + C20061 * C1068 -
                       C20104 * C1010 + C20062 * C2520 - C20105 * C2476) *
                          C44260) *
                         C44138 * C44212 * C624 +
                     ((C20103 * C630 - C20060 * C694 + C20104 * C2212 -
                       C20061 * C2262 + C20105 * C6860 - C20062 * C6932) *
                          C214 +
                      (C20103 * C1010 - C20060 * C1068 + C20104 * C2476 -
                       C20061 * C2520 + C20105 * C7212 - C20062 * C7270) *
                          C44260) *
                         C44138 * C44212 * C44317) *
                        C626 +
                    (((C20103 * C94 - C20060 * C153 + C20104 * C629 -
                       C20061 * C695 + C20105 * C2213 - C20062 * C2263) *
                          C214 +
                      (C20103 * C444 - C20060 * C492 + C20104 * C1011 -
                       C20061 * C1069 + C20105 * C2477 - C20062 * C2521) *
                          C44260) *
                         C44138 * C44212 * C624 +
                     ((C20060 * C695 - C20103 * C629 + C20061 * C2263 -
                       C20104 * C2213 + C20062 * C6933 - C20105 * C6861) *
                          C214 +
                      (C20060 * C1069 - C20103 * C1011 + C20061 * C2521 -
                       C20104 * C2477 + C20062 * C7271 - C20105 * C7213) *
                          C44260) *
                         C44138 * C44212 * C44317) *
                        C44315)) /
                  (p * q * std::sqrt(p + q));
    d2eezz[37] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C214 * C215 - C544 * C93 - C214 * C443 + C44260 * C545) * C20060 +
            C5579 * C20061 + C7331 * C20062) *
               C44138 * C44212 * C624 -
           ((C214 * C6986 - C544 * C6860 - C214 * C7212 + C44260 * C7322) *
                C20062 +
            C7331 * C20061 + C5579 * C20060) *
               C44138 * C44212 * C44317) *
              C626 +
          ((C1144 * C20060 + C5580 * C20061 +
            (C214 * C6987 - C544 * C6861 - C214 * C7213 + C44260 * C7323) *
                C20062) *
               C44138 * C44212 * C44317 -
           (C5580 * C20062 + C1144 * C20061 + C569 * C20060) * C44138 * C44212 *
               C624) *
              C44315)) /
        (p * q * std::sqrt(p + q));
    d2eexx[38] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C20063 * C98 - C20064 * C93 - C20063 * C99 + C44138 * C108) *
                C44260 * C20060 +
            C20454 * C20061 + C20455 * C20062) *
               C1196 -
           ((C20063 * C7399 - C20064 * C7397 - C20063 * C7400 +
             C44138 * C7403) *
                C44260 * C20062 +
            (C20063 * C2617 - C20064 * C2614 - C20063 * C2618 +
             C44138 * C2623) *
                C44260 * C20061 +
            (C20063 * C1206 - C20064 * C1200 - C20063 * C1207 +
             C44138 * C1212) *
                C44260 * C20060) *
               C44319) *
              C44195 * C626 +
          (((C20063 * C1204 - C20064 * C1199 - C20063 * C1205 +
             C44138 * C1211) *
                C44260 * C20060 +
            (C20063 * C2619 - C20064 * C2615 - C20063 * C2620 +
             C44138 * C2624) *
                C44260 * C20061 +
            (C20063 * C7401 - C20064 * C7398 - C20063 * C7402 +
             C44138 * C7404) *
                C44260 * C20062) *
               C44319 -
           (C20457 * C20062 + C20456 * C20061 +
            (C20063 * C100 - C20064 * C94 - C20063 * C101 + C44138 * C109) *
                C44260 * C20060) *
               C1196) *
              C44195 * C44315)) /
        (p * q * std::sqrt(p + q));
    d2eexy[38] += (2 * std::pow(Pi, 2.5) *
                   ((((C20060 * C152 - C20103 * C93 + C20061 * C694 -
                       C20104 * C630 + C20062 * C2262 - C20105 * C2212) *
                          C20063 +
                      (C20060 * C157 - C20103 * C99 + C20061 * C698 -
                       C20104 * C637 + C20062 * C2265 - C20105 * C2216) *
                          C44138) *
                         C44260 * C1196 +
                     ((C20103 * C1200 - C20060 * C1264 + C20104 * C2614 -
                       C20061 * C2676 + C20105 * C7397 - C20062 * C7485) *
                          C20063 +
                      (C20103 * C1207 - C20060 * C1268 + C20104 * C2618 -
                       C20061 * C2679 + C20105 * C7400 - C20062 * C7487) *
                          C44138) *
                         C44260 * C44319) *
                        C44195 * C626 +
                    (((C20103 * C94 - C20060 * C153 + C20104 * C629 -
                       C20061 * C695 + C20105 * C2213 - C20062 * C2263) *
                          C20063 +
                      (C20103 * C101 - C20060 * C158 + C20104 * C635 -
                       C20061 * C699 + C20105 * C2218 - C20062 * C2266) *
                          C44138) *
                         C44260 * C1196 +
                     ((C20060 * C1265 - C20103 * C1199 + C20061 * C2677 -
                       C20104 * C2615 + C20062 * C7486 - C20105 * C7398) *
                          C20063 +
                      (C20060 * C1269 - C20103 * C1205 + C20061 * C2680 -
                       C20104 * C2620 + C20062 * C7488 - C20105 * C7402) *
                          C44138) *
                         C44260 * C44319) *
                        C44195 * C44315)) /
                  (p * q * std::sqrt(p + q));
    d2eexz[38] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C44260 * C215 - C214 * C93) * C20063 +
             (C44260 * C220 - C214 * C99) * C44138) *
                C20060 +
            ((C5110 - C5111) * C20063 + (C5112 - C5113) * C44138) * C20061 +
            ((C6992 - C6991) * C20063 + (C6994 - C6993) * C44138) * C20062) *
               C1196 +
           (((C214 * C1200 - C44260 * C1330) * C20063 +
             (C214 * C1207 - C44260 * C1334) * C44138) *
                C20060 +
            ((C7560 - C7561) * C20063 + (C7562 - C7563) * C44138) * C20061 +
            ((C214 * C7397 - C44260 * C7555) * C20063 +
             (C214 * C7400 - C44260 * C7557) * C44138) *
                C20062) *
               C44319) *
              C44195 * C626 +
          ((((C227 - C226) * C20063 + (C229 - C228) * C44138) * C20060 +
            (C5116 * C20063 + C5117 * C44138) * C20061 +
            ((C5118 - C5119) * C20063 + (C5120 - C5121) * C44138) * C20062) *
               C1196 +
           (((C1340 - C1339) * C20063 + (C1342 - C1341) * C44138) * C20060 +
            ((C5789 - C5788) * C20063 + (C5791 - C5790) * C44138) * C20061 +
            ((C44260 * C7556 - C214 * C7398) * C20063 +
             (C44260 * C7558 - C214 * C7402) * C44138) *
                C20062) *
               C44319) *
              C44195 * C44315)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[38] += (2 * std::pow(Pi, 2.5) *
                   ((((C44138 * C98 - C20063 * C93) * C20103 +
                      (C44138 * C282 - C20063 * C277) * C20060 +
                      (C20608 - C20609) * C20104 + (C20610 - C20611) * C20061 +
                      (C20612 - C20613) * C20105 + (C20614 - C20615) * C20062) *
                         C44260 * C1196 +
                     ((C20063 * C1200 - C44138 * C1206) * C20103 +
                      (C20063 * C1396 - C44138 * C1400) * C20060 +
                      (C20063 * C2614 - C44138 * C2617) * C20104 +
                      (C20063 * C2788 - C44138 * C2791) * C20061 +
                      (C20063 * C7397 - C44138 * C7399) * C20105 +
                      (C20063 * C7629 - C44138 * C7631) * C20062) *
                         C44260 * C44319) *
                        C44195 * C626 +
                    (((C20063 * C94 - C44138 * C100) * C20103 +
                      (C20063 * C278 - C44138 * C283) * C20060 +
                      (C20616 - C20617) * C20104 + (C20618 - C20619) * C20061 +
                      (C20620 - C20621) * C20105 + (C20622 - C20623) * C20062) *
                         C44260 * C1196 +
                     ((C44138 * C1204 - C20063 * C1199) * C20103 +
                      (C44138 * C1401 - C20063 * C1397) * C20060 +
                      (C44138 * C2619 - C20063 * C2615) * C20104 +
                      (C44138 * C2792 - C20063 * C2789) * C20061 +
                      (C44138 * C7401 - C20063 * C7398) * C20105 +
                      (C44138 * C7632 - C20063 * C7630) * C20062) *
                         C44260 * C44319) *
                        C44195 * C44315)) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[38] +=
        (2 * std::pow(Pi, 2.5) *
         (((C20103 * C152 - C20220 * C93 - C20103 * C277 + C20060 * C326 +
            C20104 * C694 - C20221 * C630 - C20104 * C826 + C20061 * C886 +
            C20105 * C2262 - C20222 * C2212 - C20105 * C2350 + C20062 * C2394) *
               C44138 * C44260 * C1196 -
           (C20105 * C7485 - C20222 * C7397 - C20105 * C7629 + C20062 * C7707 +
            C20104 * C2676 - C20221 * C2614 - C20104 * C2788 + C20061 * C2844 +
            C20103 * C1264 - C20220 * C1200 - C20103 * C1396 + C20060 * C1456) *
               C44138 * C44260 * C44319) *
              C44195 * C626 +
          ((C20103 * C1265 - C20220 * C1199 - C20103 * C1397 + C20060 * C1455 +
            C20104 * C2677 - C20221 * C2615 - C20104 * C2789 + C20061 * C2845 +
            C20105 * C7486 - C20222 * C7398 - C20105 * C7630 + C20062 * C7708) *
               C44138 * C44260 * C44319 -
           (C20105 * C2263 - C20222 * C2213 - C20105 * C2351 + C20062 * C2395 +
            C20104 * C695 - C20221 * C629 - C20104 * C827 + C20061 * C885 +
            C20103 * C153 - C20220 * C94 - C20103 * C278 + C20060 * C327) *
               C44138 * C44260 * C1196) *
              C44195 * C44315)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[38] += (2 * std::pow(Pi, 2.5) *
                   ((((C44260 * C215 - C214 * C93) * C20103 +
                      (C44260 * C390 - C214 * C277) * C20060 +
                      (C5110 - C5111) * C20104 + (C5350 - C5351) * C20061 +
                      (C6992 - C6991) * C20105 + (C7162 - C7161) * C20062) *
                         C44138 * C1196 +
                     ((C214 * C1200 - C44260 * C1330) * C20103 +
                      (C214 * C1396 - C44260 * C1522) * C20060 +
                      (C7560 - C7561) * C20104 + (C7778 - C7779) * C20061 +
                      (C214 * C7397 - C44260 * C7555) * C20105 +
                      (C214 * C7629 - C44260 * C7775) * C20062) *
                         C44138 * C44319) *
                        C44195 * C626 +
                    (((C227 - C226) * C20103 + (C397 - C396) * C20060 +
                      C5116 * C20104 + C5353 * C20061 +
                      (C5118 - C5119) * C20105 + (C5354 - C5355) * C20062) *
                         C44138 * C1196 +
                     ((C1340 - C1339) * C20103 + (C1528 - C1527) * C20060 +
                      (C5789 - C5788) * C20104 + (C6005 - C6004) * C20061 +
                      (C44260 * C7556 - C214 * C7398) * C20105 +
                      (C44260 * C7776 - C214 * C7630) * C20062) *
                         C44138 * C44319) *
                        C44195 * C44315)) /
                  (p * q * std::sqrt(p + q));
    d2eezx[38] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C44138 * C98 - C20063 * C93) * C214 +
             (C44138 * C448 - C20063 * C443) * C44260) *
                C20060 +
            ((C20608 - C20609) * C214 + (C20774 - C20775) * C44260) * C20061 +
            ((C20612 - C20613) * C214 + (C20776 - C20777) * C44260) * C20062) *
               C1196 +
           (((C20063 * C1200 - C44138 * C1206) * C214 +
             (C20063 * C1580 - C44138 * C1584) * C44260) *
                C20060 +
            ((C20063 * C2614 - C44138 * C2617) * C214 +
             (C20063 * C2950 - C44138 * C2953) * C44260) *
                C20061 +
            ((C20063 * C7397 - C44138 * C7399) * C214 +
             (C20063 * C7845 - C44138 * C7847) * C44260) *
                C20062) *
               C44319) *
              C44195 * C626 +
          ((((C20063 * C94 - C44138 * C100) * C214 +
             (C20063 * C444 - C44138 * C449) * C44260) *
                C20060 +
            ((C20616 - C20617) * C214 + (C20778 - C20779) * C44260) * C20061 +
            ((C20620 - C20621) * C214 + (C20780 - C20781) * C44260) * C20062) *
               C1196 +
           (((C44138 * C1204 - C20063 * C1199) * C214 +
             (C44138 * C1585 - C20063 * C1581) * C44260) *
                C20060 +
            ((C44138 * C2619 - C20063 * C2615) * C214 +
             (C44138 * C2954 - C20063 * C2951) * C44260) *
                C20061 +
            ((C44138 * C7401 - C20063 * C7398) * C214 +
             (C44138 * C7848 - C20063 * C7846) * C44260) *
                C20062) *
               C44319) *
              C44195 * C44315)) /
        (p * q * std::sqrt(p + q));
    d2eezy[38] += (2 * std::pow(Pi, 2.5) *
                   ((((C20060 * C152 - C20103 * C93 + C20061 * C694 -
                       C20104 * C630 + C20062 * C2262 - C20105 * C2212) *
                          C214 +
                      (C20060 * C491 - C20103 * C443 + C20061 * C1068 -
                       C20104 * C1010 + C20062 * C2520 - C20105 * C2476) *
                          C44260) *
                         C44138 * C1196 +
                     ((C20103 * C1200 - C20060 * C1264 + C20104 * C2614 -
                       C20061 * C2676 + C20105 * C7397 - C20062 * C7485) *
                          C214 +
                      (C20103 * C1580 - C20060 * C1638 + C20104 * C2950 -
                       C20061 * C3006 + C20105 * C7845 - C20062 * C7919) *
                          C44260) *
                         C44138 * C44319) *
                        C44195 * C626 +
                    (((C20103 * C94 - C20060 * C153 + C20104 * C629 -
                       C20061 * C695 + C20105 * C2213 - C20062 * C2263) *
                          C214 +
                      (C20103 * C444 - C20060 * C492 + C20104 * C1011 -
                       C20061 * C1069 + C20105 * C2477 - C20062 * C2521) *
                          C44260) *
                         C44138 * C1196 +
                     ((C20060 * C1265 - C20103 * C1199 + C20061 * C2677 -
                       C20104 * C2615 + C20062 * C7486 - C20105 * C7398) *
                          C214 +
                      (C20060 * C1639 - C20103 * C1581 + C20061 * C3007 -
                       C20104 * C2951 + C20062 * C7920 - C20105 * C7846) *
                          C44260) *
                         C44138 * C44319) *
                        C44195 * C44315)) /
                  (p * q * std::sqrt(p + q));
    d2eezz[38] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C214 * C215 - C544 * C93 - C214 * C443 + C44260 * C545) * C20060 +
            C5579 * C20061 + C7331 * C20062) *
               C44138 * C1196 -
           ((C214 * C7555 - C544 * C7397 - C214 * C7845 + C44260 * C7987) *
                C20062 +
            C7996 * C20061 +
            (C214 * C1330 - C544 * C1200 - C214 * C1580 + C44260 * C1698) *
                C20060) *
               C44138 * C44319) *
              C44195 * C626 +
          ((C1714 * C20060 + C6215 * C20061 +
            (C214 * C7556 - C544 * C7398 - C214 * C7846 + C44260 * C7988) *
                C20062) *
               C44138 * C44319 -
           (C5580 * C20062 + C1144 * C20061 + C569 * C20060) * C44138 * C1196) *
              C44195 * C44315)) /
        (p * q * std::sqrt(p + q));
    d2eexx[39] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C20063 * C98 - C20064 * C93 - C20063 * C99 + C44138 * C108) *
                C44260 * C20060 +
            C20454 * C20061 + C20455 * C20062) *
               C44212 * C1766 -
           ((C20063 * C6862 - C20064 * C6860 - C20063 * C6863 +
             C44138 * C6866) *
                C44260 * C20062 +
            C20455 * C20061 + C20454 * C20060) *
               C44212 * C44317) *
              C1768 +
          ((C20456 * C20060 + C20457 * C20061 +
            (C20063 * C6864 - C20064 * C6861 - C20063 * C6865 +
             C44138 * C6867) *
                C44260 * C20062) *
               C44212 * C44317 -
           (C20457 * C20062 + C20456 * C20061 +
            (C20063 * C100 - C20064 * C94 - C20063 * C101 + C44138 * C109) *
                C44260 * C20060) *
               C44212 * C1766) *
              C44315)) /
        (p * q * std::sqrt(p + q));
    d2eexy[39] += (2 * std::pow(Pi, 2.5) *
                   ((((C20060 * C152 - C20103 * C93 + C20061 * C694 -
                       C20104 * C630 + C20062 * C2262 - C20105 * C2212) *
                          C20063 +
                      (C20060 * C157 - C20103 * C99 + C20061 * C698 -
                       C20104 * C637 + C20062 * C2265 - C20105 * C2216) *
                          C44138) *
                         C44260 * C44212 * C1766 +
                     ((C20103 * C630 - C20060 * C694 + C20104 * C2212 -
                       C20061 * C2262 + C20105 * C6860 - C20062 * C6932) *
                          C20063 +
                      (C20103 * C637 - C20060 * C698 + C20104 * C2216 -
                       C20061 * C2265 + C20105 * C6863 - C20062 * C6934) *
                          C44138) *
                         C44260 * C44212 * C44317) *
                        C1768 +
                    (((C20103 * C94 - C20060 * C153 + C20104 * C629 -
                       C20061 * C695 + C20105 * C2213 - C20062 * C2263) *
                          C20063 +
                      (C20103 * C101 - C20060 * C158 + C20104 * C635 -
                       C20061 * C699 + C20105 * C2218 - C20062 * C2266) *
                          C44138) *
                         C44260 * C44212 * C1766 +
                     ((C20060 * C695 - C20103 * C629 + C20061 * C2263 -
                       C20104 * C2213 + C20062 * C6933 - C20105 * C6861) *
                          C20063 +
                      (C20060 * C699 - C20103 * C635 + C20061 * C2266 -
                       C20104 * C2218 + C20062 * C6935 - C20105 * C6865) *
                          C44138) *
                         C44260 * C44212 * C44317) *
                        C44315)) /
                  (p * q * std::sqrt(p + q));
    d2eexz[39] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C44260 * C215 - C214 * C93) * C20063 +
             (C44260 * C220 - C214 * C99) * C44138) *
                C20060 +
            ((C5110 - C5111) * C20063 + (C5112 - C5113) * C44138) * C20061 +
            ((C6992 - C6991) * C20063 + (C6994 - C6993) * C44138) * C20062) *
               C44212 * C1766 +
           (((C5111 - C5110) * C20063 + (C5113 - C5112) * C44138) * C20060 +
            ((C6991 - C6992) * C20063 + (C6993 - C6994) * C44138) * C20061 +
            ((C214 * C6860 - C44260 * C6986) * C20063 +
             (C214 * C6863 - C44260 * C6988) * C44138) *
                C20062) *
               C44212 * C44317) *
              C1768 +
          ((((C227 - C226) * C20063 + (C229 - C228) * C44138) * C20060 +
            (C5116 * C20063 + C5117 * C44138) * C20061 +
            ((C5118 - C5119) * C20063 + (C5120 - C5121) * C44138) * C20062) *
               C44212 * C1766 +
           ((C5114 * C20063 + C5115 * C44138) * C20060 +
            ((C5119 - C5118) * C20063 + (C5121 - C5120) * C44138) * C20061 +
            ((C44260 * C6987 - C214 * C6861) * C20063 +
             (C44260 * C6989 - C214 * C6865) * C44138) *
                C20062) *
               C44212 * C44317) *
              C44315)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[39] += (2 * std::pow(Pi, 2.5) *
                   ((((C44138 * C98 - C20063 * C93) * C20103 +
                      (C44138 * C282 - C20063 * C277) * C20060 +
                      (C20608 - C20609) * C20104 + (C20610 - C20611) * C20061 +
                      (C20612 - C20613) * C20105 + (C20614 - C20615) * C20062) *
                         C44260 * C44212 * C1766 +
                     ((C20609 - C20608) * C20103 + (C20611 - C20610) * C20060 +
                      (C20613 - C20612) * C20104 + (C20615 - C20614) * C20061 +
                      (C20063 * C6860 - C44138 * C6862) * C20105 +
                      (C20063 * C7044 - C44138 * C7046) * C20062) *
                         C44260 * C44212 * C44317) *
                        C1768 +
                    (((C20063 * C94 - C44138 * C100) * C20103 +
                      (C20063 * C278 - C44138 * C283) * C20060 +
                      (C20616 - C20617) * C20104 + (C20618 - C20619) * C20061 +
                      (C20620 - C20621) * C20105 + (C20622 - C20623) * C20062) *
                         C44260 * C44212 * C1766 +
                     ((C20617 - C20616) * C20103 + (C20619 - C20618) * C20060 +
                      (C20621 - C20620) * C20104 + (C20623 - C20622) * C20061 +
                      (C44138 * C6864 - C20063 * C6861) * C20105 +
                      (C44138 * C7047 - C20063 * C7045) * C20062) *
                         C44260 * C44212 * C44317) *
                        C44315)) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[39] +=
        (2 * std::pow(Pi, 2.5) *
         (((C20103 * C152 - C20220 * C93 - C20103 * C277 + C20060 * C326 +
            C20104 * C694 - C20221 * C630 - C20104 * C826 + C20061 * C886 +
            C20105 * C2262 - C20222 * C2212 - C20105 * C2350 + C20062 * C2394) *
               C44138 * C44260 * C44212 * C1766 -
           (C20105 * C6932 - C20222 * C6860 - C20105 * C7044 + C20062 * C7106 +
            C20104 * C2262 - C20221 * C2212 - C20104 * C2350 + C20061 * C2394 +
            C20103 * C694 - C20220 * C630 - C20103 * C826 + C20060 * C886) *
               C44138 * C44260 * C44212 * C44317) *
              C1768 +
          ((C20103 * C695 - C20220 * C629 - C20103 * C827 + C20060 * C885 +
            C20104 * C2263 - C20221 * C2213 - C20104 * C2351 + C20061 * C2395 +
            C20105 * C6933 - C20222 * C6861 - C20105 * C7045 + C20062 * C7107) *
               C44138 * C44260 * C44212 * C44317 -
           (C20105 * C2263 - C20222 * C2213 - C20105 * C2351 + C20062 * C2395 +
            C20104 * C695 - C20221 * C629 - C20104 * C827 + C20061 * C885 +
            C20103 * C153 - C20220 * C94 - C20103 * C278 + C20060 * C327) *
               C44138 * C44260 * C44212 * C1766) *
              C44315)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[39] += (2 * std::pow(Pi, 2.5) *
                   ((((C44260 * C215 - C214 * C93) * C20103 +
                      (C44260 * C390 - C214 * C277) * C20060 +
                      (C5110 - C5111) * C20104 + (C5350 - C5351) * C20061 +
                      (C6992 - C6991) * C20105 + (C7162 - C7161) * C20062) *
                         C44138 * C44212 * C1766 +
                     ((C5111 - C5110) * C20103 + (C5351 - C5350) * C20060 +
                      (C6991 - C6992) * C20104 + (C7161 - C7162) * C20061 +
                      (C214 * C6860 - C44260 * C6986) * C20105 +
                      (C214 * C7044 - C44260 * C7158) * C20062) *
                         C44138 * C44212 * C44317) *
                        C1768 +
                    (((C227 - C226) * C20103 + (C397 - C396) * C20060 +
                      C5116 * C20104 + C5353 * C20061 +
                      (C5118 - C5119) * C20105 + (C5354 - C5355) * C20062) *
                         C44138 * C44212 * C1766 +
                     (C5114 * C20103 + C5352 * C20060 +
                      (C5119 - C5118) * C20104 + (C5355 - C5354) * C20061 +
                      (C44260 * C6987 - C214 * C6861) * C20105 +
                      (C44260 * C7159 - C214 * C7045) * C20062) *
                         C44138 * C44212 * C44317) *
                        C44315)) /
                  (p * q * std::sqrt(p + q));
    d2eezx[39] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C44138 * C98 - C20063 * C93) * C214 +
             (C44138 * C448 - C20063 * C443) * C44260) *
                C20060 +
            ((C20608 - C20609) * C214 + (C20774 - C20775) * C44260) * C20061 +
            ((C20612 - C20613) * C214 + (C20776 - C20777) * C44260) * C20062) *
               C44212 * C1766 +
           (((C20609 - C20608) * C214 + (C20775 - C20774) * C44260) * C20060 +
            ((C20613 - C20612) * C214 + (C20777 - C20776) * C44260) * C20061 +
            ((C20063 * C6860 - C44138 * C6862) * C214 +
             (C20063 * C7212 - C44138 * C7214) * C44260) *
                C20062) *
               C44212 * C44317) *
              C1768 +
          ((((C20063 * C94 - C44138 * C100) * C214 +
             (C20063 * C444 - C44138 * C449) * C44260) *
                C20060 +
            ((C20616 - C20617) * C214 + (C20778 - C20779) * C44260) * C20061 +
            ((C20620 - C20621) * C214 + (C20780 - C20781) * C44260) * C20062) *
               C44212 * C1766 +
           (((C20617 - C20616) * C214 + (C20779 - C20778) * C44260) * C20060 +
            ((C20621 - C20620) * C214 + (C20781 - C20780) * C44260) * C20061 +
            ((C44138 * C6864 - C20063 * C6861) * C214 +
             (C44138 * C7215 - C20063 * C7213) * C44260) *
                C20062) *
               C44212 * C44317) *
              C44315)) /
        (p * q * std::sqrt(p + q));
    d2eezy[39] += (2 * std::pow(Pi, 2.5) *
                   ((((C20060 * C152 - C20103 * C93 + C20061 * C694 -
                       C20104 * C630 + C20062 * C2262 - C20105 * C2212) *
                          C214 +
                      (C20060 * C491 - C20103 * C443 + C20061 * C1068 -
                       C20104 * C1010 + C20062 * C2520 - C20105 * C2476) *
                          C44260) *
                         C44138 * C44212 * C1766 +
                     ((C20103 * C630 - C20060 * C694 + C20104 * C2212 -
                       C20061 * C2262 + C20105 * C6860 - C20062 * C6932) *
                          C214 +
                      (C20103 * C1010 - C20060 * C1068 + C20104 * C2476 -
                       C20061 * C2520 + C20105 * C7212 - C20062 * C7270) *
                          C44260) *
                         C44138 * C44212 * C44317) *
                        C1768 +
                    (((C20103 * C94 - C20060 * C153 + C20104 * C629 -
                       C20061 * C695 + C20105 * C2213 - C20062 * C2263) *
                          C214 +
                      (C20103 * C444 - C20060 * C492 + C20104 * C1011 -
                       C20061 * C1069 + C20105 * C2477 - C20062 * C2521) *
                          C44260) *
                         C44138 * C44212 * C1766 +
                     ((C20060 * C695 - C20103 * C629 + C20061 * C2263 -
                       C20104 * C2213 + C20062 * C6933 - C20105 * C6861) *
                          C214 +
                      (C20060 * C1069 - C20103 * C1011 + C20061 * C2521 -
                       C20104 * C2477 + C20062 * C7271 - C20105 * C7213) *
                          C44260) *
                         C44138 * C44212 * C44317) *
                        C44315)) /
                  (p * q * std::sqrt(p + q));
    d2eezz[39] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C214 * C215 - C544 * C93 - C214 * C443 + C44260 * C545) * C20060 +
            C5579 * C20061 + C7331 * C20062) *
               C44138 * C44212 * C1766 -
           ((C214 * C6986 - C544 * C6860 - C214 * C7212 + C44260 * C7322) *
                C20062 +
            C7331 * C20061 + C5579 * C20060) *
               C44138 * C44212 * C44317) *
              C1768 +
          ((C1144 * C20060 + C5580 * C20061 +
            (C214 * C6987 - C544 * C6861 - C214 * C7213 + C44260 * C7323) *
                C20062) *
               C44138 * C44212 * C44317 -
           (C5580 * C20062 + C1144 * C20061 + C569 * C20060) * C44138 * C44212 *
               C1766) *
              C44315)) /
        (p * q * std::sqrt(p + q));
    d2eexx[40] +=
        (2 * std::pow(Pi, 2.5) *
         (((C20063 * C98 - C20064 * C93 - C20063 * C99 + C44138 * C108) *
               C44260 * C20060 +
           C20454 * C20061 + C20455 * C20062) *
              C44212 * C2208 -
          (C21831 * C20062 + C20455 * C20061 + C20454 * C20060) * C44212 *
              C2209 +
          (C20455 * C20060 + C21831 * C20061 +
           (C20063 * C21820 - C20064 * C21819 - C20063 * C21821 +
            C44138 * C21822) *
               C44260 * C20062) *
              C44212 * C2210) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eexy[40] += (2 * std::pow(Pi, 2.5) *
                   (((C20060 * C152 - C20103 * C93 + C20061 * C694 -
                      C20104 * C630 + C20062 * C2262 - C20105 * C2212) *
                         C20063 +
                     (C20060 * C157 - C20103 * C99 + C20061 * C698 -
                      C20104 * C637 + C20062 * C2265 - C20105 * C2216) *
                         C44138) *
                        C44260 * C44212 * C2208 +
                    ((C20103 * C630 - C20060 * C694 + C20104 * C2212 -
                      C20061 * C2262 + C20105 * C6860 - C20062 * C6932) *
                         C20063 +
                     (C20103 * C637 - C20060 * C698 + C20104 * C2216 -
                      C20061 * C2265 + C20105 * C6863 - C20062 * C6934) *
                         C44138) *
                        C44260 * C44212 * C2209 +
                    ((C20060 * C2262 - C20103 * C2212 + C20061 * C6932 -
                      C20104 * C6860 + C20062 * C21869 - C20105 * C21819) *
                         C20063 +
                     (C20060 * C2265 - C20103 * C2216 + C20061 * C6934 -
                      C20104 * C6863 + C20062 * C21870 - C20105 * C21821) *
                         C44138) *
                        C44260 * C44212 * C2210) *
                   C44161) /
                  (p * q * std::sqrt(p + q));
    d2eexz[40] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C44260 * C215 - C214 * C93) * C20063 +
            (C44260 * C220 - C214 * C99) * C44138) *
               C20060 +
           ((C5110 - C5111) * C20063 + (C5112 - C5113) * C44138) * C20061 +
           C21920 * C20062) *
              C44212 * C2208 +
          (((C5111 - C5110) * C20063 + (C5113 - C5112) * C44138) * C20060 +
           ((C6991 - C6992) * C20063 + (C6993 - C6994) * C44138) * C20061 +
           ((C21914 - C21915) * C20063 + (C21916 - C21917) * C44138) * C20062) *
              C44212 * C2209 +
          (C21920 * C20060 +
           ((C21915 - C21914) * C20063 + (C21917 - C21916) * C44138) * C20061 +
           ((C44260 * C21909 - C214 * C21819) * C20063 +
            (C44260 * C21910 - C214 * C21821) * C44138) *
               C20062) *
              C44212 * C2210) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eeyx[40] += (2 * std::pow(Pi, 2.5) *
                   (((C44138 * C98 - C20063 * C93) * C20103 +
                     (C44138 * C282 - C20063 * C277) * C20060 +
                     (C20608 - C20609) * C20104 + (C20610 - C20611) * C20061 +
                     C21961 * C20105 + C21962 * C20062) *
                        C44260 * C44212 * C2208 +
                    ((C20609 - C20608) * C20103 + (C20611 - C20610) * C20060 +
                     (C20613 - C20612) * C20104 + (C20615 - C20614) * C20061 +
                     (C21963 - C21964) * C20105 + (C21965 - C21966) * C20062) *
                        C44260 * C44212 * C2209 +
                    (C21961 * C20103 + C21962 * C20060 +
                     (C21964 - C21963) * C20104 + (C21966 - C21965) * C20061 +
                     (C44138 * C21820 - C20063 * C21819) * C20105 +
                     (C44138 * C21959 - C20063 * C21958) * C20062) *
                        C44260 * C44212 * C2210) *
                   C44161) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[40] +=
        (2 * std::pow(Pi, 2.5) *
         ((C20103 * C152 - C20220 * C93 - C20103 * C277 + C20060 * C326 +
           C20104 * C694 - C20221 * C630 - C20104 * C826 + C20061 * C886 +
           C20105 * C2262 - C20222 * C2212 - C20105 * C2350 + C20062 * C2394) *
              C44138 * C44260 * C44212 * C2208 -
          (C20105 * C6932 - C20222 * C6860 - C20105 * C7044 + C20062 * C7106 +
           C20104 * C2262 - C20221 * C2212 - C20104 * C2350 + C20061 * C2394 +
           C20103 * C694 - C20220 * C630 - C20103 * C826 + C20060 * C886) *
              C44138 * C44260 * C44212 * C2209 +
          (C20103 * C2262 - C20220 * C2212 - C20103 * C2350 + C20060 * C2394 +
           C20104 * C6932 - C20221 * C6860 - C20104 * C7044 + C20061 * C7106 +
           C20105 * C21869 - C20222 * C21819 - C20105 * C21958 +
           C20062 * C22004) *
              C44138 * C44260 * C44212 * C2210) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eeyz[40] +=
        (2 * std::pow(Pi, 2.5) *
         (((C44260 * C215 - C214 * C93) * C20103 +
           (C44260 * C390 - C214 * C277) * C20060 + (C5110 - C5111) * C20104 +
           (C5350 - C5351) * C20061 + C21912 * C20105 + C22045 * C20062) *
              C44138 * C44212 * C2208 +
          ((C5111 - C5110) * C20103 + (C5351 - C5350) * C20060 +
           (C6991 - C6992) * C20104 + (C7161 - C7162) * C20061 +
           (C21914 - C21915) * C20105 + (C22046 - C22047) * C20062) *
              C44138 * C44212 * C2209 +
          (C21912 * C20103 + C22045 * C20060 + (C21915 - C21914) * C20104 +
           (C22047 - C22046) * C20061 +
           (C44260 * C21909 - C214 * C21819) * C20105 +
           (C44260 * C22043 - C214 * C21958) * C20062) *
              C44138 * C44212 * C2210) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eezx[40] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C44138 * C98 - C20063 * C93) * C214 +
            (C44138 * C448 - C20063 * C443) * C44260) *
               C20060 +
           ((C20608 - C20609) * C214 + (C20774 - C20775) * C44260) * C20061 +
           C22093 * C20062) *
              C44212 * C2208 +
          (((C20609 - C20608) * C214 + (C20775 - C20774) * C44260) * C20060 +
           ((C20613 - C20612) * C214 + (C20777 - C20776) * C44260) * C20061 +
           ((C21963 - C21964) * C214 + (C22090 - C22091) * C44260) * C20062) *
              C44212 * C2209 +
          (C22093 * C20060 +
           ((C21964 - C21963) * C214 + (C22091 - C22090) * C44260) * C20061 +
           ((C44138 * C21820 - C20063 * C21819) * C214 +
            (C44138 * C22086 - C20063 * C22085) * C44260) *
               C20062) *
              C44212 * C2210) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eezy[40] += (2 * std::pow(Pi, 2.5) *
                   (((C20060 * C152 - C20103 * C93 + C20061 * C694 -
                      C20104 * C630 + C20062 * C2262 - C20105 * C2212) *
                         C214 +
                     (C20060 * C491 - C20103 * C443 + C20061 * C1068 -
                      C20104 * C1010 + C20062 * C2520 - C20105 * C2476) *
                         C44260) *
                        C44138 * C44212 * C2208 +
                    ((C20103 * C630 - C20060 * C694 + C20104 * C2212 -
                      C20061 * C2262 + C20105 * C6860 - C20062 * C6932) *
                         C214 +
                     (C20103 * C1010 - C20060 * C1068 + C20104 * C2476 -
                      C20061 * C2520 + C20105 * C7212 - C20062 * C7270) *
                         C44260) *
                        C44138 * C44212 * C2209 +
                    ((C20060 * C2262 - C20103 * C2212 + C20061 * C6932 -
                      C20104 * C6860 + C20062 * C21869 - C20105 * C21819) *
                         C214 +
                     (C20060 * C2520 - C20103 * C2476 + C20061 * C7270 -
                      C20104 * C7212 + C20062 * C22131 - C20105 * C22085) *
                         C44260) *
                        C44138 * C44212 * C2210) *
                   C44161) /
                  (p * q * std::sqrt(p + q));
    d2eezz[40] +=
        (2 * std::pow(Pi, 2.5) *
         (((C214 * C215 - C544 * C93 - C214 * C443 + C44260 * C545) * C20060 +
           C5579 * C20061 + C7331 * C20062) *
              C44138 * C44212 * C2208 -
          (C22178 * C20062 + C7331 * C20061 + C5579 * C20060) * C44138 *
              C44212 * C2209 +
          (C7331 * C20060 + C22178 * C20061 +
           (C214 * C21909 - C544 * C21819 - C214 * C22085 + C44260 * C22170) *
               C20062) *
              C44138 * C44212 * C2210) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eexx[41] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C20063 * C98 - C20064 * C93 - C20063 * C99 + C44138 * C108) *
                C44260 * C20060 +
            C20454 * C20061 + C20455 * C20062) *
               C1196 -
           (C22247 * C20062 + C22248 * C20061 +
            (C20063 * C1206 - C20064 * C1200 - C20063 * C1207 +
             C44138 * C1212) *
                C44260 * C20060) *
               C44319) *
              C1766 +
          ((C22248 * C20060 + C22247 * C20061 +
            (C20063 * C22229 - C20064 * C22228 - C20063 * C22230 +
             C44138 * C22231) *
                C44260 * C20062) *
               C44319 -
           (C21831 * C20062 + C20455 * C20061 + C20454 * C20060) * C1196) *
              C44317) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eexy[41] += (2 * std::pow(Pi, 2.5) *
                   ((((C20060 * C152 - C20103 * C93 + C20061 * C694 -
                       C20104 * C630 + C20062 * C2262 - C20105 * C2212) *
                          C20063 +
                      (C20060 * C157 - C20103 * C99 + C20061 * C698 -
                       C20104 * C637 + C20062 * C2265 - C20105 * C2216) *
                          C44138) *
                         C44260 * C1196 +
                     ((C20103 * C1200 - C20060 * C1264 + C20104 * C2614 -
                       C20061 * C2676 + C20105 * C7397 - C20062 * C7485) *
                          C20063 +
                      (C20103 * C1207 - C20060 * C1268 + C20104 * C2618 -
                       C20061 * C2679 + C20105 * C7400 - C20062 * C7487) *
                          C44138) *
                         C44260 * C44319) *
                        C1766 +
                    (((C20103 * C630 - C20060 * C694 + C20104 * C2212 -
                       C20061 * C2262 + C20105 * C6860 - C20062 * C6932) *
                          C20063 +
                      (C20103 * C637 - C20060 * C698 + C20104 * C2216 -
                       C20061 * C2265 + C20105 * C6863 - C20062 * C6934) *
                          C44138) *
                         C44260 * C1196 +
                     ((C20060 * C2676 - C20103 * C2614 + C20061 * C7485 -
                       C20104 * C7397 + C20062 * C22298 - C20105 * C22228) *
                          C20063 +
                      (C20060 * C2679 - C20103 * C2618 + C20061 * C7487 -
                       C20104 * C7400 + C20062 * C22299 - C20105 * C22230) *
                          C44138) *
                         C44260 * C44319) *
                        C44317) *
                   C44161) /
                  (p * q * std::sqrt(p + q));
    d2eexz[41] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C44260 * C215 - C214 * C93) * C20063 +
             (C44260 * C220 - C214 * C99) * C44138) *
                C20060 +
            ((C5110 - C5111) * C20063 + (C5112 - C5113) * C44138) * C20061 +
            C21920 * C20062) *
               C1196 +
           (((C214 * C1200 - C44260 * C1330) * C20063 +
             (C214 * C1207 - C44260 * C1334) * C44138) *
                C20060 +
            ((C7560 - C7561) * C20063 + (C7562 - C7563) * C44138) * C20061 +
            ((C22353 - C22354) * C20063 + (C22355 - C22356) * C44138) *
                C20062) *
               C44319) *
              C1766 +
          ((((C5111 - C5110) * C20063 + (C5113 - C5112) * C44138) * C20060 +
            ((C6991 - C6992) * C20063 + (C6993 - C6994) * C44138) * C20061 +
            ((C21914 - C21915) * C20063 + (C21916 - C21917) * C44138) *
                C20062) *
               C1196 +
           (((C7561 - C7560) * C20063 + (C7563 - C7562) * C44138) * C20060 +
            ((C22354 - C22353) * C20063 + (C22356 - C22355) * C44138) * C20061 +
            ((C44260 * C22350 - C214 * C22228) * C20063 +
             (C44260 * C22351 - C214 * C22230) * C44138) *
                C20062) *
               C44319) *
              C44317) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eeyx[41] += (2 * std::pow(Pi, 2.5) *
                   ((((C44138 * C98 - C20063 * C93) * C20103 +
                      (C44138 * C282 - C20063 * C277) * C20060 +
                      (C20608 - C20609) * C20104 + (C20610 - C20611) * C20061 +
                      C21961 * C20105 + C21962 * C20062) *
                         C44260 * C1196 +
                     ((C20063 * C1200 - C44138 * C1206) * C20103 +
                      (C20063 * C1396 - C44138 * C1400) * C20060 +
                      (C22409 - C22410) * C20104 + (C22411 - C22412) * C20061 +
                      (C22413 - C22414) * C20105 + (C22415 - C22416) * C20062) *
                         C44260 * C44319) *
                        C1766 +
                    (((C20609 - C20608) * C20103 + (C20611 - C20610) * C20060 +
                      (C20613 - C20612) * C20104 + (C20615 - C20614) * C20061 +
                      (C21963 - C21964) * C20105 + (C21965 - C21966) * C20062) *
                         C44260 * C1196 +
                     ((C22410 - C22409) * C20103 + (C22412 - C22411) * C20060 +
                      (C22414 - C22413) * C20104 + (C22416 - C22415) * C20061 +
                      (C44138 * C22229 - C20063 * C22228) * C20105 +
                      (C44138 * C22407 - C20063 * C22406) * C20062) *
                         C44260 * C44319) *
                        C44317) *
                   C44161) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[41] +=
        (2 * std::pow(Pi, 2.5) *
         (((C20103 * C152 - C20220 * C93 - C20103 * C277 + C20060 * C326 +
            C20104 * C694 - C20221 * C630 - C20104 * C826 + C20061 * C886 +
            C20105 * C2262 - C20222 * C2212 - C20105 * C2350 + C20062 * C2394) *
               C44138 * C44260 * C1196 -
           (C20105 * C7485 - C20222 * C7397 - C20105 * C7629 + C20062 * C7707 +
            C20104 * C2676 - C20221 * C2614 - C20104 * C2788 + C20061 * C2844 +
            C20103 * C1264 - C20220 * C1200 - C20103 * C1396 + C20060 * C1456) *
               C44138 * C44260 * C44319) *
              C1766 +
          ((C20103 * C2676 - C20220 * C2614 - C20103 * C2788 + C20060 * C2844 +
            C20104 * C7485 - C20221 * C7397 - C20104 * C7629 + C20061 * C7707 +
            C20105 * C22298 - C20222 * C22228 - C20105 * C22406 +
            C20062 * C22466) *
               C44138 * C44260 * C44319 -
           (C20105 * C6932 - C20222 * C6860 - C20105 * C7044 + C20062 * C7106 +
            C20104 * C2262 - C20221 * C2212 - C20104 * C2350 + C20061 * C2394 +
            C20103 * C694 - C20220 * C630 - C20103 * C826 + C20060 * C886) *
               C44138 * C44260 * C1196) *
              C44317) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eeyz[41] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C44260 * C215 - C214 * C93) * C20103 +
            (C44260 * C390 - C214 * C277) * C20060 + (C5110 - C5111) * C20104 +
            (C5350 - C5351) * C20061 + C21912 * C20105 + C22045 * C20062) *
               C44138 * C1196 +
           ((C214 * C1200 - C44260 * C1330) * C20103 +
            (C214 * C1396 - C44260 * C1522) * C20060 +
            (C7560 - C7561) * C20104 + (C7778 - C7779) * C20061 +
            (C22353 - C22354) * C20105 + (C22519 - C22520) * C20062) *
               C44138 * C44319) *
              C1766 +
          (((C5111 - C5110) * C20103 + (C5351 - C5350) * C20060 +
            (C6991 - C6992) * C20104 + (C7161 - C7162) * C20061 +
            (C21914 - C21915) * C20105 + (C22046 - C22047) * C20062) *
               C44138 * C1196 +
           ((C7561 - C7560) * C20103 + (C7779 - C7778) * C20060 +
            (C22354 - C22353) * C20104 + (C22520 - C22519) * C20061 +
            (C44260 * C22350 - C214 * C22228) * C20105 +
            (C44260 * C22517 - C214 * C22406) * C20062) *
               C44138 * C44319) *
              C44317) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eezx[41] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C44138 * C98 - C20063 * C93) * C214 +
             (C44138 * C448 - C20063 * C443) * C44260) *
                C20060 +
            ((C20608 - C20609) * C214 + (C20774 - C20775) * C44260) * C20061 +
            C22093 * C20062) *
               C1196 +
           (((C20063 * C1200 - C44138 * C1206) * C214 +
             (C20063 * C1580 - C44138 * C1584) * C44260) *
                C20060 +
            ((C22409 - C22410) * C214 + (C22573 - C22574) * C44260) * C20061 +
            ((C22413 - C22414) * C214 + (C22575 - C22576) * C44260) * C20062) *
               C44319) *
              C1766 +
          ((((C20609 - C20608) * C214 + (C20775 - C20774) * C44260) * C20060 +
            ((C20613 - C20612) * C214 + (C20777 - C20776) * C44260) * C20061 +
            ((C21963 - C21964) * C214 + (C22090 - C22091) * C44260) * C20062) *
               C1196 +
           (((C22410 - C22409) * C214 + (C22574 - C22573) * C44260) * C20060 +
            ((C22414 - C22413) * C214 + (C22576 - C22575) * C44260) * C20061 +
            ((C44138 * C22229 - C20063 * C22228) * C214 +
             (C44138 * C22571 - C20063 * C22570) * C44260) *
                C20062) *
               C44319) *
              C44317) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eezy[41] += (2 * std::pow(Pi, 2.5) *
                   ((((C20060 * C152 - C20103 * C93 + C20061 * C694 -
                       C20104 * C630 + C20062 * C2262 - C20105 * C2212) *
                          C214 +
                      (C20060 * C491 - C20103 * C443 + C20061 * C1068 -
                       C20104 * C1010 + C20062 * C2520 - C20105 * C2476) *
                          C44260) *
                         C44138 * C1196 +
                     ((C20103 * C1200 - C20060 * C1264 + C20104 * C2614 -
                       C20061 * C2676 + C20105 * C7397 - C20062 * C7485) *
                          C214 +
                      (C20103 * C1580 - C20060 * C1638 + C20104 * C2950 -
                       C20061 * C3006 + C20105 * C7845 - C20062 * C7919) *
                          C44260) *
                         C44138 * C44319) *
                        C1766 +
                    (((C20103 * C630 - C20060 * C694 + C20104 * C2212 -
                       C20061 * C2262 + C20105 * C6860 - C20062 * C6932) *
                          C214 +
                      (C20103 * C1010 - C20060 * C1068 + C20104 * C2476 -
                       C20061 * C2520 + C20105 * C7212 - C20062 * C7270) *
                          C44260) *
                         C44138 * C1196 +
                     ((C20060 * C2676 - C20103 * C2614 + C20061 * C7485 -
                       C20104 * C7397 + C20062 * C22298 - C20105 * C22228) *
                          C214 +
                      (C20060 * C3006 - C20103 * C2950 + C20061 * C7919 -
                       C20104 * C7845 + C20062 * C22626 - C20105 * C22570) *
                          C44260) *
                         C44138 * C44319) *
                        C44317) *
                   C44161) /
                  (p * q * std::sqrt(p + q));
    d2eezz[41] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C214 * C215 - C544 * C93 - C214 * C443 + C44260 * C545) * C20060 +
            C5579 * C20061 + C7331 * C20062) *
               C44138 * C1196 -
           (C22685 * C20062 + C7996 * C20061 +
            (C214 * C1330 - C544 * C1200 - C214 * C1580 + C44260 * C1698) *
                C20060) *
               C44138 * C44319) *
              C1766 +
          ((C7996 * C20060 + C22685 * C20061 +
            (C214 * C22350 - C544 * C22228 - C214 * C22570 + C44260 * C22677) *
                C20062) *
               C44138 * C44319 -
           (C22178 * C20062 + C7331 * C20061 + C5579 * C20060) * C44138 *
               C1196) *
              C44317) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eexx[42] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C20063 * C98 - C20064 * C93 - C20063 * C99 + C44138 * C108) *
                C44260 * C20060 +
            C20454 * C20061 + C20455 * C20062) *
               C3112 -
           (C22247 * C20062 + C22248 * C20061 +
            (C20063 * C1206 - C20064 * C1200 - C20063 * C1207 +
             C44138 * C1212) *
                C44260 * C20060) *
               C44319) *
              C44195 * C1768 +
          (((C20063 * C1204 - C20064 * C1199 - C20063 * C1205 +
             C44138 * C1211) *
                C44260 * C20060 +
            (C20063 * C2619 - C20064 * C2615 - C20063 * C2620 +
             C44138 * C2624) *
                C44260 * C20061 +
            (C20063 * C7401 - C20064 * C7398 - C20063 * C7402 +
             C44138 * C7404) *
                C44260 * C20062) *
               C44319 -
           (C20457 * C20062 + C20456 * C20061 +
            (C20063 * C100 - C20064 * C94 - C20063 * C101 + C44138 * C109) *
                C44260 * C20060) *
               C3112) *
              C44195 * C44315)) /
        (p * q * std::sqrt(p + q));
    d2eexy[42] += (2 * std::pow(Pi, 2.5) *
                   ((((C20060 * C152 - C20103 * C93 + C20061 * C694 -
                       C20104 * C630 + C20062 * C2262 - C20105 * C2212) *
                          C20063 +
                      (C20060 * C157 - C20103 * C99 + C20061 * C698 -
                       C20104 * C637 + C20062 * C2265 - C20105 * C2216) *
                          C44138) *
                         C44260 * C3112 +
                     ((C20103 * C1200 - C20060 * C1264 + C20104 * C2614 -
                       C20061 * C2676 + C20105 * C7397 - C20062 * C7485) *
                          C20063 +
                      (C20103 * C1207 - C20060 * C1268 + C20104 * C2618 -
                       C20061 * C2679 + C20105 * C7400 - C20062 * C7487) *
                          C44138) *
                         C44260 * C44319) *
                        C44195 * C1768 +
                    (((C20103 * C94 - C20060 * C153 + C20104 * C629 -
                       C20061 * C695 + C20105 * C2213 - C20062 * C2263) *
                          C20063 +
                      (C20103 * C101 - C20060 * C158 + C20104 * C635 -
                       C20061 * C699 + C20105 * C2218 - C20062 * C2266) *
                          C44138) *
                         C44260 * C3112 +
                     ((C20060 * C1265 - C20103 * C1199 + C20061 * C2677 -
                       C20104 * C2615 + C20062 * C7486 - C20105 * C7398) *
                          C20063 +
                      (C20060 * C1269 - C20103 * C1205 + C20061 * C2680 -
                       C20104 * C2620 + C20062 * C7488 - C20105 * C7402) *
                          C44138) *
                         C44260 * C44319) *
                        C44195 * C44315)) /
                  (p * q * std::sqrt(p + q));
    d2eexz[42] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C44260 * C215 - C214 * C93) * C20063 +
             (C44260 * C220 - C214 * C99) * C44138) *
                C20060 +
            ((C5110 - C5111) * C20063 + (C5112 - C5113) * C44138) * C20061 +
            C21920 * C20062) *
               C3112 +
           (((C214 * C1200 - C44260 * C1330) * C20063 +
             (C214 * C1207 - C44260 * C1334) * C44138) *
                C20060 +
            ((C7560 - C7561) * C20063 + (C7562 - C7563) * C44138) * C20061 +
            ((C22353 - C22354) * C20063 + (C22355 - C22356) * C44138) *
                C20062) *
               C44319) *
              C44195 * C1768 +
          ((((C227 - C226) * C20063 + (C229 - C228) * C44138) * C20060 +
            (C5116 * C20063 + C5117 * C44138) * C20061 +
            ((C5118 - C5119) * C20063 + (C5120 - C5121) * C44138) * C20062) *
               C3112 +
           (((C1340 - C1339) * C20063 + (C1342 - C1341) * C44138) * C20060 +
            ((C5789 - C5788) * C20063 + (C5791 - C5790) * C44138) * C20061 +
            ((C44260 * C7556 - C214 * C7398) * C20063 +
             (C44260 * C7558 - C214 * C7402) * C44138) *
                C20062) *
               C44319) *
              C44195 * C44315)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[42] += (2 * std::pow(Pi, 2.5) *
                   ((((C44138 * C98 - C20063 * C93) * C20103 +
                      (C44138 * C282 - C20063 * C277) * C20060 +
                      (C20608 - C20609) * C20104 + (C20610 - C20611) * C20061 +
                      C21961 * C20105 + C21962 * C20062) *
                         C44260 * C3112 +
                     ((C20063 * C1200 - C44138 * C1206) * C20103 +
                      (C20063 * C1396 - C44138 * C1400) * C20060 +
                      (C22409 - C22410) * C20104 + (C22411 - C22412) * C20061 +
                      (C22413 - C22414) * C20105 + (C22415 - C22416) * C20062) *
                         C44260 * C44319) *
                        C44195 * C1768 +
                    (((C20063 * C94 - C44138 * C100) * C20103 +
                      (C20063 * C278 - C44138 * C283) * C20060 +
                      (C20616 - C20617) * C20104 + (C20618 - C20619) * C20061 +
                      (C20620 - C20621) * C20105 + (C20622 - C20623) * C20062) *
                         C44260 * C3112 +
                     ((C44138 * C1204 - C20063 * C1199) * C20103 +
                      (C44138 * C1401 - C20063 * C1397) * C20060 +
                      (C44138 * C2619 - C20063 * C2615) * C20104 +
                      (C44138 * C2792 - C20063 * C2789) * C20061 +
                      (C44138 * C7401 - C20063 * C7398) * C20105 +
                      (C44138 * C7632 - C20063 * C7630) * C20062) *
                         C44260 * C44319) *
                        C44195 * C44315)) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[42] +=
        (2 * std::pow(Pi, 2.5) *
         (((C20103 * C152 - C20220 * C93 - C20103 * C277 + C20060 * C326 +
            C20104 * C694 - C20221 * C630 - C20104 * C826 + C20061 * C886 +
            C20105 * C2262 - C20222 * C2212 - C20105 * C2350 + C20062 * C2394) *
               C44138 * C44260 * C3112 -
           (C20105 * C7485 - C20222 * C7397 - C20105 * C7629 + C20062 * C7707 +
            C20104 * C2676 - C20221 * C2614 - C20104 * C2788 + C20061 * C2844 +
            C20103 * C1264 - C20220 * C1200 - C20103 * C1396 + C20060 * C1456) *
               C44138 * C44260 * C44319) *
              C44195 * C1768 +
          ((C20103 * C1265 - C20220 * C1199 - C20103 * C1397 + C20060 * C1455 +
            C20104 * C2677 - C20221 * C2615 - C20104 * C2789 + C20061 * C2845 +
            C20105 * C7486 - C20222 * C7398 - C20105 * C7630 + C20062 * C7708) *
               C44138 * C44260 * C44319 -
           (C20105 * C2263 - C20222 * C2213 - C20105 * C2351 + C20062 * C2395 +
            C20104 * C695 - C20221 * C629 - C20104 * C827 + C20061 * C885 +
            C20103 * C153 - C20220 * C94 - C20103 * C278 + C20060 * C327) *
               C44138 * C44260 * C3112) *
              C44195 * C44315)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[42] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C44260 * C215 - C214 * C93) * C20103 +
            (C44260 * C390 - C214 * C277) * C20060 + (C5110 - C5111) * C20104 +
            (C5350 - C5351) * C20061 + C21912 * C20105 + C22045 * C20062) *
               C44138 * C3112 +
           ((C214 * C1200 - C44260 * C1330) * C20103 +
            (C214 * C1396 - C44260 * C1522) * C20060 +
            (C7560 - C7561) * C20104 + (C7778 - C7779) * C20061 +
            (C22353 - C22354) * C20105 + (C22519 - C22520) * C20062) *
               C44138 * C44319) *
              C44195 * C1768 +
          (((C227 - C226) * C20103 + (C397 - C396) * C20060 + C5116 * C20104 +
            C5353 * C20061 + (C5118 - C5119) * C20105 +
            (C5354 - C5355) * C20062) *
               C44138 * C3112 +
           ((C1340 - C1339) * C20103 + (C1528 - C1527) * C20060 +
            (C5789 - C5788) * C20104 + (C6005 - C6004) * C20061 +
            (C44260 * C7556 - C214 * C7398) * C20105 +
            (C44260 * C7776 - C214 * C7630) * C20062) *
               C44138 * C44319) *
              C44195 * C44315)) /
        (p * q * std::sqrt(p + q));
    d2eezx[42] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C44138 * C98 - C20063 * C93) * C214 +
             (C44138 * C448 - C20063 * C443) * C44260) *
                C20060 +
            ((C20608 - C20609) * C214 + (C20774 - C20775) * C44260) * C20061 +
            C22093 * C20062) *
               C3112 +
           (((C20063 * C1200 - C44138 * C1206) * C214 +
             (C20063 * C1580 - C44138 * C1584) * C44260) *
                C20060 +
            ((C22409 - C22410) * C214 + (C22573 - C22574) * C44260) * C20061 +
            ((C22413 - C22414) * C214 + (C22575 - C22576) * C44260) * C20062) *
               C44319) *
              C44195 * C1768 +
          ((((C20063 * C94 - C44138 * C100) * C214 +
             (C20063 * C444 - C44138 * C449) * C44260) *
                C20060 +
            ((C20616 - C20617) * C214 + (C20778 - C20779) * C44260) * C20061 +
            ((C20620 - C20621) * C214 + (C20780 - C20781) * C44260) * C20062) *
               C3112 +
           (((C44138 * C1204 - C20063 * C1199) * C214 +
             (C44138 * C1585 - C20063 * C1581) * C44260) *
                C20060 +
            ((C44138 * C2619 - C20063 * C2615) * C214 +
             (C44138 * C2954 - C20063 * C2951) * C44260) *
                C20061 +
            ((C44138 * C7401 - C20063 * C7398) * C214 +
             (C44138 * C7848 - C20063 * C7846) * C44260) *
                C20062) *
               C44319) *
              C44195 * C44315)) /
        (p * q * std::sqrt(p + q));
    d2eezy[42] += (2 * std::pow(Pi, 2.5) *
                   ((((C20060 * C152 - C20103 * C93 + C20061 * C694 -
                       C20104 * C630 + C20062 * C2262 - C20105 * C2212) *
                          C214 +
                      (C20060 * C491 - C20103 * C443 + C20061 * C1068 -
                       C20104 * C1010 + C20062 * C2520 - C20105 * C2476) *
                          C44260) *
                         C44138 * C3112 +
                     ((C20103 * C1200 - C20060 * C1264 + C20104 * C2614 -
                       C20061 * C2676 + C20105 * C7397 - C20062 * C7485) *
                          C214 +
                      (C20103 * C1580 - C20060 * C1638 + C20104 * C2950 -
                       C20061 * C3006 + C20105 * C7845 - C20062 * C7919) *
                          C44260) *
                         C44138 * C44319) *
                        C44195 * C1768 +
                    (((C20103 * C94 - C20060 * C153 + C20104 * C629 -
                       C20061 * C695 + C20105 * C2213 - C20062 * C2263) *
                          C214 +
                      (C20103 * C444 - C20060 * C492 + C20104 * C1011 -
                       C20061 * C1069 + C20105 * C2477 - C20062 * C2521) *
                          C44260) *
                         C44138 * C3112 +
                     ((C20060 * C1265 - C20103 * C1199 + C20061 * C2677 -
                       C20104 * C2615 + C20062 * C7486 - C20105 * C7398) *
                          C214 +
                      (C20060 * C1639 - C20103 * C1581 + C20061 * C3007 -
                       C20104 * C2951 + C20062 * C7920 - C20105 * C7846) *
                          C44260) *
                         C44138 * C44319) *
                        C44195 * C44315)) /
                  (p * q * std::sqrt(p + q));
    d2eezz[42] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C214 * C215 - C544 * C93 - C214 * C443 + C44260 * C545) * C20060 +
            C5579 * C20061 + C7331 * C20062) *
               C44138 * C3112 -
           (C22685 * C20062 + C7996 * C20061 +
            (C214 * C1330 - C544 * C1200 - C214 * C1580 + C44260 * C1698) *
                C20060) *
               C44138 * C44319) *
              C44195 * C1768 +
          ((C1714 * C20060 + C6215 * C20061 +
            (C214 * C7556 - C544 * C7398 - C214 * C7846 + C44260 * C7988) *
                C20062) *
               C44138 * C44319 -
           (C5580 * C20062 + C1144 * C20061 + C569 * C20060) * C44138 * C3112) *
              C44195 * C44315)) /
        (p * q * std::sqrt(p + q));
    d2eexx[43] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C20063 * C98 - C20064 * C93 - C20063 * C99 + C44138 * C108) *
                C44260 * C20060 +
            C20454 * C20061 + C20455 * C20062) *
               C3112 -
           (C22247 * C20062 + C22248 * C20061 +
            (C20063 * C1206 - C20064 * C1200 - C20063 * C1207 +
             C44138 * C1212) *
                C44260 * C20060) *
               C44319) *
              C624 +
          ((C22248 * C20060 + C22247 * C20061 +
            (C20063 * C22229 - C20064 * C22228 - C20063 * C22230 +
             C44138 * C22231) *
                C44260 * C20062) *
               C44319 -
           (C21831 * C20062 + C20455 * C20061 + C20454 * C20060) * C3112) *
              C44317) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eexy[43] += (2 * std::pow(Pi, 2.5) *
                   ((((C20060 * C152 - C20103 * C93 + C20061 * C694 -
                       C20104 * C630 + C20062 * C2262 - C20105 * C2212) *
                          C20063 +
                      (C20060 * C157 - C20103 * C99 + C20061 * C698 -
                       C20104 * C637 + C20062 * C2265 - C20105 * C2216) *
                          C44138) *
                         C44260 * C3112 +
                     ((C20103 * C1200 - C20060 * C1264 + C20104 * C2614 -
                       C20061 * C2676 + C20105 * C7397 - C20062 * C7485) *
                          C20063 +
                      (C20103 * C1207 - C20060 * C1268 + C20104 * C2618 -
                       C20061 * C2679 + C20105 * C7400 - C20062 * C7487) *
                          C44138) *
                         C44260 * C44319) *
                        C624 +
                    (((C20103 * C630 - C20060 * C694 + C20104 * C2212 -
                       C20061 * C2262 + C20105 * C6860 - C20062 * C6932) *
                          C20063 +
                      (C20103 * C637 - C20060 * C698 + C20104 * C2216 -
                       C20061 * C2265 + C20105 * C6863 - C20062 * C6934) *
                          C44138) *
                         C44260 * C3112 +
                     ((C20060 * C2676 - C20103 * C2614 + C20061 * C7485 -
                       C20104 * C7397 + C20062 * C22298 - C20105 * C22228) *
                          C20063 +
                      (C20060 * C2679 - C20103 * C2618 + C20061 * C7487 -
                       C20104 * C7400 + C20062 * C22299 - C20105 * C22230) *
                          C44138) *
                         C44260 * C44319) *
                        C44317) *
                   C44161) /
                  (p * q * std::sqrt(p + q));
    d2eexz[43] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C44260 * C215 - C214 * C93) * C20063 +
             (C44260 * C220 - C214 * C99) * C44138) *
                C20060 +
            ((C5110 - C5111) * C20063 + (C5112 - C5113) * C44138) * C20061 +
            C21920 * C20062) *
               C3112 +
           (((C214 * C1200 - C44260 * C1330) * C20063 +
             (C214 * C1207 - C44260 * C1334) * C44138) *
                C20060 +
            ((C7560 - C7561) * C20063 + (C7562 - C7563) * C44138) * C20061 +
            ((C22353 - C22354) * C20063 + (C22355 - C22356) * C44138) *
                C20062) *
               C44319) *
              C624 +
          ((((C5111 - C5110) * C20063 + (C5113 - C5112) * C44138) * C20060 +
            ((C6991 - C6992) * C20063 + (C6993 - C6994) * C44138) * C20061 +
            ((C21914 - C21915) * C20063 + (C21916 - C21917) * C44138) *
                C20062) *
               C3112 +
           (((C7561 - C7560) * C20063 + (C7563 - C7562) * C44138) * C20060 +
            ((C22354 - C22353) * C20063 + (C22356 - C22355) * C44138) * C20061 +
            ((C44260 * C22350 - C214 * C22228) * C20063 +
             (C44260 * C22351 - C214 * C22230) * C44138) *
                C20062) *
               C44319) *
              C44317) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eeyx[43] += (2 * std::pow(Pi, 2.5) *
                   ((((C44138 * C98 - C20063 * C93) * C20103 +
                      (C44138 * C282 - C20063 * C277) * C20060 +
                      (C20608 - C20609) * C20104 + (C20610 - C20611) * C20061 +
                      C21961 * C20105 + C21962 * C20062) *
                         C44260 * C3112 +
                     ((C20063 * C1200 - C44138 * C1206) * C20103 +
                      (C20063 * C1396 - C44138 * C1400) * C20060 +
                      (C22409 - C22410) * C20104 + (C22411 - C22412) * C20061 +
                      (C22413 - C22414) * C20105 + (C22415 - C22416) * C20062) *
                         C44260 * C44319) *
                        C624 +
                    (((C20609 - C20608) * C20103 + (C20611 - C20610) * C20060 +
                      (C20613 - C20612) * C20104 + (C20615 - C20614) * C20061 +
                      (C21963 - C21964) * C20105 + (C21965 - C21966) * C20062) *
                         C44260 * C3112 +
                     ((C22410 - C22409) * C20103 + (C22412 - C22411) * C20060 +
                      (C22414 - C22413) * C20104 + (C22416 - C22415) * C20061 +
                      (C44138 * C22229 - C20063 * C22228) * C20105 +
                      (C44138 * C22407 - C20063 * C22406) * C20062) *
                         C44260 * C44319) *
                        C44317) *
                   C44161) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[43] +=
        (2 * std::pow(Pi, 2.5) *
         (((C20103 * C152 - C20220 * C93 - C20103 * C277 + C20060 * C326 +
            C20104 * C694 - C20221 * C630 - C20104 * C826 + C20061 * C886 +
            C20105 * C2262 - C20222 * C2212 - C20105 * C2350 + C20062 * C2394) *
               C44138 * C44260 * C3112 -
           (C20105 * C7485 - C20222 * C7397 - C20105 * C7629 + C20062 * C7707 +
            C20104 * C2676 - C20221 * C2614 - C20104 * C2788 + C20061 * C2844 +
            C20103 * C1264 - C20220 * C1200 - C20103 * C1396 + C20060 * C1456) *
               C44138 * C44260 * C44319) *
              C624 +
          ((C20103 * C2676 - C20220 * C2614 - C20103 * C2788 + C20060 * C2844 +
            C20104 * C7485 - C20221 * C7397 - C20104 * C7629 + C20061 * C7707 +
            C20105 * C22298 - C20222 * C22228 - C20105 * C22406 +
            C20062 * C22466) *
               C44138 * C44260 * C44319 -
           (C20105 * C6932 - C20222 * C6860 - C20105 * C7044 + C20062 * C7106 +
            C20104 * C2262 - C20221 * C2212 - C20104 * C2350 + C20061 * C2394 +
            C20103 * C694 - C20220 * C630 - C20103 * C826 + C20060 * C886) *
               C44138 * C44260 * C3112) *
              C44317) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eeyz[43] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C44260 * C215 - C214 * C93) * C20103 +
            (C44260 * C390 - C214 * C277) * C20060 + (C5110 - C5111) * C20104 +
            (C5350 - C5351) * C20061 + C21912 * C20105 + C22045 * C20062) *
               C44138 * C3112 +
           ((C214 * C1200 - C44260 * C1330) * C20103 +
            (C214 * C1396 - C44260 * C1522) * C20060 +
            (C7560 - C7561) * C20104 + (C7778 - C7779) * C20061 +
            (C22353 - C22354) * C20105 + (C22519 - C22520) * C20062) *
               C44138 * C44319) *
              C624 +
          (((C5111 - C5110) * C20103 + (C5351 - C5350) * C20060 +
            (C6991 - C6992) * C20104 + (C7161 - C7162) * C20061 +
            (C21914 - C21915) * C20105 + (C22046 - C22047) * C20062) *
               C44138 * C3112 +
           ((C7561 - C7560) * C20103 + (C7779 - C7778) * C20060 +
            (C22354 - C22353) * C20104 + (C22520 - C22519) * C20061 +
            (C44260 * C22350 - C214 * C22228) * C20105 +
            (C44260 * C22517 - C214 * C22406) * C20062) *
               C44138 * C44319) *
              C44317) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eezx[43] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C44138 * C98 - C20063 * C93) * C214 +
             (C44138 * C448 - C20063 * C443) * C44260) *
                C20060 +
            ((C20608 - C20609) * C214 + (C20774 - C20775) * C44260) * C20061 +
            C22093 * C20062) *
               C3112 +
           (((C20063 * C1200 - C44138 * C1206) * C214 +
             (C20063 * C1580 - C44138 * C1584) * C44260) *
                C20060 +
            ((C22409 - C22410) * C214 + (C22573 - C22574) * C44260) * C20061 +
            ((C22413 - C22414) * C214 + (C22575 - C22576) * C44260) * C20062) *
               C44319) *
              C624 +
          ((((C20609 - C20608) * C214 + (C20775 - C20774) * C44260) * C20060 +
            ((C20613 - C20612) * C214 + (C20777 - C20776) * C44260) * C20061 +
            ((C21963 - C21964) * C214 + (C22090 - C22091) * C44260) * C20062) *
               C3112 +
           (((C22410 - C22409) * C214 + (C22574 - C22573) * C44260) * C20060 +
            ((C22414 - C22413) * C214 + (C22576 - C22575) * C44260) * C20061 +
            ((C44138 * C22229 - C20063 * C22228) * C214 +
             (C44138 * C22571 - C20063 * C22570) * C44260) *
                C20062) *
               C44319) *
              C44317) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eezy[43] += (2 * std::pow(Pi, 2.5) *
                   ((((C20060 * C152 - C20103 * C93 + C20061 * C694 -
                       C20104 * C630 + C20062 * C2262 - C20105 * C2212) *
                          C214 +
                      (C20060 * C491 - C20103 * C443 + C20061 * C1068 -
                       C20104 * C1010 + C20062 * C2520 - C20105 * C2476) *
                          C44260) *
                         C44138 * C3112 +
                     ((C20103 * C1200 - C20060 * C1264 + C20104 * C2614 -
                       C20061 * C2676 + C20105 * C7397 - C20062 * C7485) *
                          C214 +
                      (C20103 * C1580 - C20060 * C1638 + C20104 * C2950 -
                       C20061 * C3006 + C20105 * C7845 - C20062 * C7919) *
                          C44260) *
                         C44138 * C44319) *
                        C624 +
                    (((C20103 * C630 - C20060 * C694 + C20104 * C2212 -
                       C20061 * C2262 + C20105 * C6860 - C20062 * C6932) *
                          C214 +
                      (C20103 * C1010 - C20060 * C1068 + C20104 * C2476 -
                       C20061 * C2520 + C20105 * C7212 - C20062 * C7270) *
                          C44260) *
                         C44138 * C3112 +
                     ((C20060 * C2676 - C20103 * C2614 + C20061 * C7485 -
                       C20104 * C7397 + C20062 * C22298 - C20105 * C22228) *
                          C214 +
                      (C20060 * C3006 - C20103 * C2950 + C20061 * C7919 -
                       C20104 * C7845 + C20062 * C22626 - C20105 * C22570) *
                          C44260) *
                         C44138 * C44319) *
                        C44317) *
                   C44161) /
                  (p * q * std::sqrt(p + q));
    d2eezz[43] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C214 * C215 - C544 * C93 - C214 * C443 + C44260 * C545) * C20060 +
            C5579 * C20061 + C7331 * C20062) *
               C44138 * C3112 -
           (C22685 * C20062 + C7996 * C20061 +
            (C214 * C1330 - C544 * C1200 - C214 * C1580 + C44260 * C1698) *
                C20060) *
               C44138 * C44319) *
              C624 +
          ((C7996 * C20060 + C22685 * C20061 +
            (C214 * C22350 - C544 * C22228 - C214 * C22570 + C44260 * C22677) *
                C20062) *
               C44138 * C44319 -
           (C22178 * C20062 + C7331 * C20061 + C5579 * C20060) * C44138 *
               C3112) *
              C44317) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eexx[44] +=
        (2 * std::pow(Pi, 2.5) *
         (((C20063 * C98 - C20064 * C93 - C20063 * C99 + C44138 * C108) *
               C44260 * C20060 +
           C20454 * C20061 + C20455 * C20062) *
              C4002 -
          (C22247 * C20062 + C22248 * C20061 +
           (C20063 * C1206 - C20064 * C1200 - C20063 * C1207 + C44138 * C1212) *
               C44260 * C20060) *
              C4003 +
          ((C20063 * C4008 - C20064 * C4005 - C20063 * C4009 + C44138 * C4014) *
               C44260 * C20060 +
           (C20063 * C9236 - C20064 * C9234 - C20063 * C9237 + C44138 * C9240) *
               C44260 * C20061 +
           (C20063 * C23624 - C20064 * C23623 - C20063 * C23625 +
            C44138 * C23626) *
               C44260 * C20062) *
              C4004) *
         C44195 * C44161) /
        (p * q * std::sqrt(p + q));
    d2eexy[44] += (2 * std::pow(Pi, 2.5) *
                   (((C20060 * C152 - C20103 * C93 + C20061 * C694 -
                      C20104 * C630 + C20062 * C2262 - C20105 * C2212) *
                         C20063 +
                     (C20060 * C157 - C20103 * C99 + C20061 * C698 -
                      C20104 * C637 + C20062 * C2265 - C20105 * C2216) *
                         C44138) *
                        C44260 * C4002 +
                    ((C20103 * C1200 - C20060 * C1264 + C20104 * C2614 -
                      C20061 * C2676 + C20105 * C7397 - C20062 * C7485) *
                         C20063 +
                     (C20103 * C1207 - C20060 * C1268 + C20104 * C2618 -
                      C20061 * C2679 + C20105 * C7400 - C20062 * C7487) *
                         C44138) *
                        C44260 * C4003 +
                    ((C20060 * C4055 - C20103 * C4005 + C20061 * C9292 -
                      C20104 * C9234 + C20062 * C23665 - C20105 * C23623) *
                         C20063 +
                     (C20060 * C4058 - C20103 * C4009 + C20061 * C9294 -
                      C20104 * C9237 + C20062 * C23666 - C20105 * C23625) *
                         C44138) *
                        C44260 * C4004) *
                   C44195 * C44161) /
                  (p * q * std::sqrt(p + q));
    d2eexz[44] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C44260 * C215 - C214 * C93) * C20063 +
            (C44260 * C220 - C214 * C99) * C44138) *
               C20060 +
           ((C5110 - C5111) * C20063 + (C5112 - C5113) * C44138) * C20061 +
           C21920 * C20062) *
              C4002 +
          (((C214 * C1200 - C44260 * C1330) * C20063 +
            (C214 * C1207 - C44260 * C1334) * C44138) *
               C20060 +
           ((C7560 - C7561) * C20063 + (C7562 - C7563) * C44138) * C20061 +
           ((C22353 - C22354) * C20063 + (C22355 - C22356) * C44138) * C20062) *
              C4003 +
          (((C44260 * C4099 - C214 * C4005) * C20063 +
            (C44260 * C4102 - C214 * C4009) * C44138) *
               C20060 +
           ((C44260 * C9346 - C214 * C9234) * C20063 +
            (C44260 * C9348 - C214 * C9237) * C44138) *
               C20061 +
           ((C44260 * C23705 - C214 * C23623) * C20063 +
            (C44260 * C23706 - C214 * C23625) * C44138) *
               C20062) *
              C4004) *
         C44195 * C44161) /
        (p * q * std::sqrt(p + q));
    d2eeyx[44] += (2 * std::pow(Pi, 2.5) *
                   (((C44138 * C98 - C20063 * C93) * C20103 +
                     (C44138 * C282 - C20063 * C277) * C20060 +
                     (C20608 - C20609) * C20104 + (C20610 - C20611) * C20061 +
                     C21961 * C20105 + C21962 * C20062) *
                        C44260 * C4002 +
                    ((C20063 * C1200 - C44138 * C1206) * C20103 +
                     (C20063 * C1396 - C44138 * C1400) * C20060 +
                     (C22409 - C22410) * C20104 + (C22411 - C22412) * C20061 +
                     (C22413 - C22414) * C20105 + (C22415 - C22416) * C20062) *
                        C44260 * C4003 +
                    ((C44138 * C4008 - C20063 * C4005) * C20103 +
                     (C44138 * C4146 - C20063 * C4143) * C20060 +
                     (C44138 * C9236 - C20063 * C9234) * C20104 +
                     (C44138 * C9402 - C20063 * C9400) * C20061 +
                     (C44138 * C23624 - C20063 * C23623) * C20105 +
                     (C44138 * C23746 - C20063 * C23745) * C20062) *
                        C44260 * C4004) *
                   C44195 * C44161) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[44] +=
        (2 * std::pow(Pi, 2.5) *
         ((C20103 * C152 - C20220 * C93 - C20103 * C277 + C20060 * C326 +
           C20104 * C694 - C20221 * C630 - C20104 * C826 + C20061 * C886 +
           C20105 * C2262 - C20222 * C2212 - C20105 * C2350 + C20062 * C2394) *
              C44138 * C44260 * C4002 -
          (C20105 * C7485 - C20222 * C7397 - C20105 * C7629 + C20062 * C7707 +
           C20104 * C2676 - C20221 * C2614 - C20104 * C2788 + C20061 * C2844 +
           C20103 * C1264 - C20220 * C1200 - C20103 * C1396 + C20060 * C1456) *
              C44138 * C44260 * C4003 +
          (C20103 * C4055 - C20220 * C4005 - C20103 * C4143 + C20060 * C4187 +
           C20104 * C9292 - C20221 * C9234 - C20104 * C9400 + C20061 * C9454 +
           C20105 * C23665 - C20222 * C23623 - C20105 * C23745 +
           C20062 * C23785) *
              C44138 * C44260 * C4004) *
         C44195 * C44161) /
        (p * q * std::sqrt(p + q));
    d2eeyz[44] +=
        (2 * std::pow(Pi, 2.5) *
         (((C44260 * C215 - C214 * C93) * C20103 +
           (C44260 * C390 - C214 * C277) * C20060 + (C5110 - C5111) * C20104 +
           (C5350 - C5351) * C20061 + C21912 * C20105 + C22045 * C20062) *
              C44138 * C4002 +
          ((C214 * C1200 - C44260 * C1330) * C20103 +
           (C214 * C1396 - C44260 * C1522) * C20060 + (C7560 - C7561) * C20104 +
           (C7778 - C7779) * C20061 + (C22353 - C22354) * C20105 +
           (C22519 - C22520) * C20062) *
              C44138 * C4003 +
          ((C44260 * C4099 - C214 * C4005) * C20103 +
           (C44260 * C4228 - C214 * C4143) * C20060 +
           (C44260 * C9346 - C214 * C9234) * C20104 +
           (C44260 * C9506 - C214 * C9400) * C20061 +
           (C44260 * C23705 - C214 * C23623) * C20105 +
           (C44260 * C23824 - C214 * C23745) * C20062) *
              C44138 * C4004) *
         C44195 * C44161) /
        (p * q * std::sqrt(p + q));
    d2eezx[44] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C44138 * C98 - C20063 * C93) * C214 +
            (C44138 * C448 - C20063 * C443) * C44260) *
               C20060 +
           ((C20608 - C20609) * C214 + (C20774 - C20775) * C44260) * C20061 +
           C22093 * C20062) *
              C4002 +
          (((C20063 * C1200 - C44138 * C1206) * C214 +
            (C20063 * C1580 - C44138 * C1584) * C44260) *
               C20060 +
           ((C22409 - C22410) * C214 + (C22573 - C22574) * C44260) * C20061 +
           ((C22413 - C22414) * C214 + (C22575 - C22576) * C44260) * C20062) *
              C4003 +
          (((C44138 * C4008 - C20063 * C4005) * C214 +
            (C44138 * C4272 - C20063 * C4269) * C44260) *
               C20060 +
           ((C44138 * C9236 - C20063 * C9234) * C214 +
            (C44138 * C9560 - C20063 * C9558) * C44260) *
               C20061 +
           ((C44138 * C23624 - C20063 * C23623) * C214 +
            (C44138 * C23864 - C20063 * C23863) * C44260) *
               C20062) *
              C4004) *
         C44195 * C44161) /
        (p * q * std::sqrt(p + q));
    d2eezy[44] += (2 * std::pow(Pi, 2.5) *
                   (((C20060 * C152 - C20103 * C93 + C20061 * C694 -
                      C20104 * C630 + C20062 * C2262 - C20105 * C2212) *
                         C214 +
                     (C20060 * C491 - C20103 * C443 + C20061 * C1068 -
                      C20104 * C1010 + C20062 * C2520 - C20105 * C2476) *
                         C44260) *
                        C44138 * C4002 +
                    ((C20103 * C1200 - C20060 * C1264 + C20104 * C2614 -
                      C20061 * C2676 + C20105 * C7397 - C20062 * C7485) *
                         C214 +
                     (C20103 * C1580 - C20060 * C1638 + C20104 * C2950 -
                      C20061 * C3006 + C20105 * C7845 - C20062 * C7919) *
                         C44260) *
                        C44138 * C4003 +
                    ((C20060 * C4055 - C20103 * C4005 + C20061 * C9292 -
                      C20104 * C9234 + C20062 * C23665 - C20105 * C23623) *
                         C214 +
                     (C20060 * C4313 - C20103 * C4269 + C20061 * C9612 -
                      C20104 * C9558 + C20062 * C23903 - C20105 * C23863) *
                         C44260) *
                        C44138 * C4004) *
                   C44195 * C44161) /
                  (p * q * std::sqrt(p + q));
    d2eezz[44] +=
        (2 * std::pow(Pi, 2.5) *
         (((C214 * C215 - C544 * C93 - C214 * C443 + C44260 * C545) * C20060 +
           C5579 * C20061 + C7331 * C20062) *
              C44138 * C4002 -
          (C22685 * C20062 + C7996 * C20061 +
           (C214 * C1330 - C544 * C1200 - C214 * C1580 + C44260 * C1698) *
               C20060) *
              C44138 * C4003 +
          ((C214 * C4099 - C544 * C4005 - C214 * C4269 + C44260 * C4354) *
               C20060 +
           (C214 * C9346 - C544 * C9234 - C214 * C9558 + C44260 * C9664) *
               C20061 +
           (C214 * C23705 - C544 * C23623 - C214 * C23863 + C44260 * C23942) *
               C20062) *
              C44138 * C4004) *
         C44195 * C44161) /
        (p * q * std::sqrt(p + q));
    d2eexx[45] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C20063 * C98 - C20064 * C93 - C20063 * C99 + C44138 * C108) *
                C9716 +
            (C20063 * C1206 - C20064 * C1200 - C20063 * C1207 +
             C44138 * C1212) *
                C44323) *
               C14931 +
           (C20450 * C9716 + C22246 * C44323) * C44321) *
              C44212 * C44195 * C84 -
          (((C20063 * C2619 - C20064 * C2615 - C20063 * C2620 +
             C44138 * C2624) *
                C44323 +
            C20452 * C9716) *
               C44321 +
           ((C20063 * C1204 - C20064 * C1199 - C20063 * C1205 +
             C44138 * C1211) *
                C44323 +
            (C20063 * C100 - C20064 * C94 - C20063 * C101 + C44138 * C109) *
                C9716) *
               C14931) *
              C44212 * C44195 * C85 +
          (((C20063 * C102 - C20064 * C95 - C20063 * C103 + C44138 * C110) *
                C9716 +
            (C20063 * C1202 - C20064 * C1198 - C20063 * C1203 +
             C44138 * C1210) *
                C44323) *
               C14931 +
           ((C20063 * C632 - C20064 * C628 - C20063 * C633 + C44138 * C640) *
                C9716 +
            (C20063 * C2621 - C20064 * C2616 - C20063 * C2622 +
             C44138 * C2625) *
                C44323) *
               C44321) *
              C44212 * C44195 * C86)) /
        (p * q * std::sqrt(p + q));
    d2eexy[45] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C14931 * C152 - C14987 * C93 + C44321 * C694 - C14988 * C630) *
                C20063 +
            (C14931 * C157 - C14987 * C99 + C44321 * C698 - C14988 * C637) *
                C44138) *
               C9716 +
           ((C14931 * C1264 - C14987 * C1200 + C44321 * C2676 -
             C14988 * C2614) *
                C20063 +
            (C14931 * C1268 - C14987 * C1207 + C44321 * C2679 -
             C14988 * C2618) *
                C44138) *
               C44323) *
              C44212 * C44195 * C84 +
          (((C14991 - C14990 + C14993 - C14992) * C20063 +
            (C14995 - C14994 + C14997 - C14996) * C44138) *
               C9716 +
           ((C16204 - C16205 + C16206 - C16207) * C20063 +
            (C16208 - C16209 + C16210 - C16211) * C44138) *
               C44323) *
              C44212 * C44195 * C85 +
          (((C14999 - C14998 + C15001 - C15000) * C20063 +
            (C15003 - C15002 + C15005 - C15004) * C44138) *
               C9716 +
           ((C14931 * C1266 - C14987 * C1198 + C44321 * C2678 -
             C14988 * C2616) *
                C20063 +
            (C14931 * C1270 - C14987 * C1203 + C44321 * C2681 -
             C14988 * C2622) *
                C44138) *
               C44323) *
              C44212 * C44195 * C86)) /
        (p * q * std::sqrt(p + q));
    d2eexz[45] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C9716 * C215 - C9818 * C93 + C44323 * C1330 - C9819 * C1200) *
                C20063 +
            (C9716 * C220 - C9818 * C99 + C44323 * C1334 - C9819 * C1207) *
                C44138) *
               C14931 +
           ((C9716 * C760 - C9818 * C630 + C44323 * C2732 - C9819 * C2614) *
                C20063 +
            (C9716 * C764 - C9818 * C637 + C44323 * C2735 - C9819 * C2618) *
                C44138) *
               C44321) *
              C44212 * C44195 * C84 +
          (((C9822 - C9821 + C9824 - C9823) * C20063 +
            (C9826 - C9825 + C9828 - C9827) * C44138) *
               C14931 +
           ((C10377 - C10378 + C10379 - C10380) * C20063 +
            (C10381 - C10382 + C10383 - C10384) * C44138) *
               C44321) *
              C44212 * C44195 * C85 +
          (((C9830 - C9829 + C9832 - C9831) * C20063 +
            (C9834 - C9833 + C9836 - C9835) * C44138) *
               C14931 +
           ((C9716 * C762 - C9818 * C628 + C44323 * C2734 - C9819 * C2616) *
                C20063 +
            (C9716 * C766 - C9818 * C633 + C44323 * C2737 - C9819 * C2622) *
                C44138) *
               C44321) *
              C44212 * C44195 * C86)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[45] += (2 * std::pow(Pi, 2.5) *
                   ((((C44138 * C98 - C20063 * C93) * C14987 +
                      (C44138 * C282 - C20063 * C277) * C14931 +
                      (C20608 - C20609) * C14988 + (C20610 - C20611) * C44321) *
                         C9716 +
                     ((C44138 * C1206 - C20063 * C1200) * C14987 +
                      (C44138 * C1400 - C20063 * C1396) * C14931 +
                      (C22410 - C22409) * C14988 + (C22412 - C22411) * C44321) *
                         C44323) *
                        C44212 * C44195 * C84 +
                    (((C20063 * C94 - C44138 * C100) * C14987 +
                      (C20063 * C278 - C44138 * C283) * C14931 +
                      (C20616 - C20617) * C14988 + (C20618 - C20619) * C44321) *
                         C9716 +
                     ((C20063 * C1199 - C44138 * C1204) * C14987 +
                      (C20063 * C1397 - C44138 * C1401) * C14931 +
                      (C20063 * C2615 - C44138 * C2619) * C14988 +
                      (C20063 * C2789 - C44138 * C2792) * C44321) *
                         C44323) *
                        C44212 * C44195 * C85 +
                    (((C44138 * C102 - C20063 * C95) * C14987 +
                      (C44138 * C284 - C20063 * C279) * C14931 +
                      (C44138 * C632 - C20063 * C628) * C14988 +
                      (C44138 * C832 - C20063 * C828) * C44321) *
                         C9716 +
                     ((C44138 * C1202 - C20063 * C1198) * C14987 +
                      (C44138 * C1402 - C20063 * C1398) * C14931 +
                      (C44138 * C2621 - C20063 * C2616) * C14988 +
                      (C44138 * C2793 - C20063 * C2790) * C44321) *
                         C44323) *
                        C44212 * C44195 * C86)) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[45] +=
        (2 * std::pow(Pi, 2.5) *
         (((C14987 * C152 - C15155 * C93 - C14987 * C277 + C14931 * C326 +
            C14988 * C694 - C15156 * C630 - C14988 * C826 + C44321 * C886) *
               C44138 * C9716 +
           (C14987 * C1264 - C15155 * C1200 - C14987 * C1396 + C14931 * C1456 +
            C14988 * C2676 - C15156 * C2614 - C14988 * C2788 + C44321 * C2844) *
               C44138 * C44323) *
              C44212 * C44195 * C84 -
          ((C16422 + C16423) * C44138 * C44323 +
           (C15183 + C15182) * C44138 * C9716) *
              C44212 * C44195 * C85 +
          ((C15185 + C15184) * C44138 * C9716 +
           (C14987 * C1266 - C15155 * C1198 - C14987 * C1398 + C14931 * C1454 +
            C14988 * C2678 - C15156 * C2616 - C14988 * C2790 + C44321 * C2846) *
               C44138 * C44323) *
              C44212 * C44195 * C86)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[45] +=
        (2 * std::pow(Pi, 2.5) *
         (((C9716 * C215 - C9818 * C93 + C44323 * C1330 - C9819 * C1200) *
               C14987 +
           (C9716 * C390 - C9818 * C277 + C44323 * C1522 - C9819 * C1396) *
               C14931 +
           (C9716 * C760 - C9818 * C630 + C44323 * C2732 - C9819 * C2614) *
               C14988 +
           (C9716 * C952 - C9818 * C826 + C44323 * C2897 - C9819 * C2788) *
               C44321) *
              C44138 * C44212 * C44195 * C84 +
          ((C9822 - C9821 + C9824 - C9823) * C14987 +
           (C9988 - C9987 + C9990 - C9989) * C14931 +
           (C10377 - C10378 + C10379 - C10380) * C14988 +
           (C10590 - C10591 + C10592 - C10593) * C44321) *
              C44138 * C44212 * C44195 * C85 +
          ((C9830 - C9829 + C9832 - C9831) * C14987 +
           (C9992 - C9991 + C9994 - C9993) * C14931 +
           (C9716 * C762 - C9818 * C628 + C44323 * C2734 - C9819 * C2616) *
               C14988 +
           (C9716 * C954 - C9818 * C828 + C44323 * C2899 - C9819 * C2790) *
               C44321) *
              C44138 * C44212 * C44195 * C86)) /
        (p * q * std::sqrt(p + q));
    d2eezx[45] += (2 * std::pow(Pi, 2.5) *
                   ((((C44138 * C98 - C20063 * C93) * C9818 +
                      (C44138 * C448 - C20063 * C443) * C9716 +
                      (C44138 * C1206 - C20063 * C1200) * C9819 +
                      (C44138 * C1584 - C20063 * C1580) * C44323) *
                         C14931 +
                     ((C20608 - C20609) * C9818 + (C20774 - C20775) * C9716 +
                      (C22410 - C22409) * C9819 + (C22574 - C22573) * C44323) *
                         C44321) *
                        C44212 * C44195 * C84 +
                    (((C20063 * C94 - C44138 * C100) * C9818 +
                      (C20063 * C444 - C44138 * C449) * C9716 +
                      (C20063 * C1199 - C44138 * C1204) * C9819 +
                      (C20063 * C1581 - C44138 * C1585) * C44323) *
                         C14931 +
                     ((C20616 - C20617) * C9818 + (C20778 - C20779) * C9716 +
                      (C20063 * C2615 - C44138 * C2619) * C9819 +
                      (C20063 * C2951 - C44138 * C2954) * C44323) *
                         C44321) *
                        C44212 * C44195 * C85 +
                    (((C44138 * C102 - C20063 * C95) * C9818 +
                      (C44138 * C450 - C20063 * C445) * C9716 +
                      (C44138 * C1202 - C20063 * C1198) * C9819 +
                      (C44138 * C1586 - C20063 * C1582) * C44323) *
                         C14931 +
                     ((C44138 * C632 - C20063 * C628) * C9818 +
                      (C44138 * C1016 - C20063 * C1012) * C9716 +
                      (C44138 * C2621 - C20063 * C2616) * C9819 +
                      (C44138 * C2955 - C20063 * C2952) * C44323) *
                         C44321) *
                        C44212 * C44195 * C86)) /
                  (p * q * std::sqrt(p + q));
    d2eezy[45] +=
        (2 * std::pow(Pi, 2.5) *
         (((C14931 * C152 - C14987 * C93 + C44321 * C694 - C14988 * C630) *
               C9818 +
           (C14931 * C491 - C14987 * C443 + C44321 * C1068 - C14988 * C1010) *
               C9716 +
           (C14931 * C1264 - C14987 * C1200 + C44321 * C2676 - C14988 * C2614) *
               C9819 +
           (C14931 * C1638 - C14987 * C1580 + C44321 * C3006 - C14988 * C2950) *
               C44323) *
              C44138 * C44212 * C44195 * C84 +
          ((C14991 - C14990 + C14993 - C14992) * C9818 +
           (C15337 - C15336 + C15339 - C15338) * C9716 +
           (C16204 - C16205 + C16206 - C16207) * C9819 +
           (C16622 - C16623 + C16624 - C16625) * C44323) *
              C44138 * C44212 * C44195 * C85 +
          ((C14999 - C14998 + C15001 - C15000) * C9818 +
           (C15341 - C15340 + C15343 - C15342) * C9716 +
           (C14931 * C1266 - C14987 * C1198 + C44321 * C2678 - C14988 * C2616) *
               C9819 +
           (C14931 * C1640 - C14987 * C1582 + C44321 * C3008 - C14988 * C2952) *
               C44323) *
              C44138 * C44212 * C44195 * C86)) /
        (p * q * std::sqrt(p + q));
    d2eezz[45] +=
        (2 * std::pow(Pi, 2.5) *
         (((C9818 * C215 - C10144 * C93 - C9818 * C443 + C9716 * C545 +
            C9819 * C1330 - C10145 * C1200 - C9819 * C1580 + C44323 * C1698) *
               C14931 +
           (C9818 * C760 - C10144 * C630 - C9818 * C1010 + C9716 * C1128 +
            C9819 * C2732 - C10145 * C2614 - C9819 * C2950 + C44323 * C3059) *
               C44321) *
              C44138 * C44212 * C44195 * C84 -
          ((C10806 + C10807) * C44321 + (C10172 + C10171) * C14931) * C44138 *
              C44212 * C44195 * C85 +
          ((C10174 + C10173) * C14931 +
           (C9818 * C762 - C10144 * C628 - C9818 * C1012 + C9716 * C1126 +
            C9819 * C2734 - C10145 * C2616 - C9819 * C2952 + C44323 * C3061) *
               C44321) *
              C44138 * C44212 * C44195 * C86)) /
        (p * q * std::sqrt(p + q));
    d2eexx[46] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C20063 * C98 - C20064 * C93 - C20063 * C99 + C44138 * C108) *
                 C9716 +
             (C20063 * C1206 - C20064 * C1200 - C20063 * C1207 +
              C44138 * C1212) *
                 C44323) *
                C14931 +
            (C24460 + C24461) * C44321) *
               C44212 * C624 -
           ((C22245 * C44323 + C20451 * C9716) * C44321 +
            (C24461 + C24460) * C14931) *
               C44212 * C44317) *
              C626 +
          (((C24462 + C24470) * C14931 +
            (C20453 * C9716 + (C20063 * C7401 - C20064 * C7398 -
                               C20063 * C7402 + C44138 * C7404) *
                                  C44323) *
                C44321) *
               C44212 * C44317 -
           ((C24470 + C24462) * C44321 +
            ((C20063 * C1204 - C20064 * C1199 - C20063 * C1205 +
              C44138 * C1211) *
                 C44323 +
             (C20063 * C100 - C20064 * C94 - C20063 * C101 + C44138 * C109) *
                 C9716) *
                C14931) *
               C44212 * C624) *
              C44315)) /
        (p * q * std::sqrt(p + q));
    d2eexy[46] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C14931 * C152 - C14987 * C93 + C44321 * C694 - C14988 * C630) *
                 C20063 +
             (C14931 * C157 - C14987 * C99 + C44321 * C698 - C14988 * C637) *
                 C44138) *
                C9716 +
            ((C14931 * C1264 - C14987 * C1200 + C44321 * C2676 -
              C14988 * C2614) *
                 C20063 +
             (C14931 * C1268 - C14987 * C1207 + C44321 * C2679 -
              C14988 * C2618) *
                 C44138) *
                C44323) *
               C44212 * C624 +
           (((C14987 * C630 - C14931 * C694 + C14988 * C2212 - C44321 * C2262) *
                 C20063 +
             (C14987 * C637 - C14931 * C698 + C14988 * C2216 - C44321 * C2265) *
                 C44138) *
                C9716 +
            ((C14987 * C2614 - C14931 * C2676 + C14988 * C7397 -
              C44321 * C7485) *
                 C20063 +
             (C14987 * C2618 - C14931 * C2679 + C14988 * C7400 -
              C44321 * C7487) *
                 C44138) *
                C44323) *
               C44212 * C44317) *
              C626 +
          ((((C14991 - C14990 + C14993 - C14992) * C20063 +
             (C14995 - C14994 + C14997 - C14996) * C44138) *
                C9716 +
            ((C16204 - C16205 + C16206 - C16207) * C20063 +
             (C16208 - C16209 + C16210 - C16211) * C44138) *
                C44323) *
               C44212 * C624 +
           (((C15559 - C15558 + C15561 - C15560) * C20063 +
             (C15563 - C15562 + C15565 - C15564) * C44138) *
                C9716 +
            ((C14931 * C2677 - C14987 * C2615 + C44321 * C7486 -
              C14988 * C7398) *
                 C20063 +
             (C14931 * C2680 - C14987 * C2620 + C44321 * C7488 -
              C14988 * C7402) *
                 C44138) *
                C44323) *
               C44212 * C44317) *
              C44315)) /
        (p * q * std::sqrt(p + q));
    d2eexz[46] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C9716 * C215 - C9818 * C93 + C44323 * C1330 - C9819 * C1200) *
                 C20063 +
             (C9716 * C220 - C9818 * C99 + C44323 * C1334 - C9819 * C1207) *
                 C44138) *
                C14931 +
            ((C24603 - C24604 + C24605 - C24606) * C20063 +
             (C24607 - C24608 + C24609 - C24610) * C44138) *
                C44321) *
               C44212 * C624 +
           (((C24604 - C24603 + C24606 - C24605) * C20063 +
             (C24608 - C24607 + C24610 - C24609) * C44138) *
                C14931 +
            ((C9818 * C2212 - C9716 * C2306 + C9819 * C7397 - C44323 * C7555) *
                 C20063 +
             (C9818 * C2216 - C9716 * C2309 + C9819 * C7400 - C44323 * C7557) *
                 C44138) *
                C44321) *
               C44212 * C44317) *
              C626 +
          ((((C9822 - C9821 + C9824 - C9823) * C20063 +
             (C9826 - C9825 + C9828 - C9827) * C44138) *
                C14931 +
            ((C10377 - C10378 + C10379 - C10380) * C20063 +
             (C10381 - C10382 + C10383 - C10384) * C44138) *
                C44321) *
               C44212 * C624 +
           (((C10378 - C10377 + C10380 - C10379) * C20063 +
             (C10382 - C10381 + C10384 - C10383) * C44138) *
                C14931 +
            ((C9716 * C2307 - C9818 * C2213 + C44323 * C7556 - C9819 * C7398) *
                 C20063 +
             (C9716 * C2310 - C9818 * C2218 + C44323 * C7558 - C9819 * C7402) *
                 C44138) *
                C44321) *
               C44212 * C44317) *
              C44315)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[46] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C44138 * C98 - C20063 * C93) * C14987 +
             (C44138 * C282 - C20063 * C277) * C14931 +
             (C20608 - C20609) * C14988 + (C20610 - C20611) * C44321) *
                C9716 +
            ((C44138 * C1206 - C20063 * C1200) * C14987 +
             (C44138 * C1400 - C20063 * C1396) * C14931 +
             (C22410 - C22409) * C14988 + (C22412 - C22411) * C44321) *
                C44323) *
               C44212 * C624 +
           (((C20609 - C20608) * C14987 + (C20611 - C20610) * C14931 +
             (C20613 - C20612) * C14988 + (C20615 - C20614) * C44321) *
                C9716 +
            ((C22409 - C22410) * C14987 + (C22411 - C22412) * C14931 +
             (C22413 - C22414) * C14988 + (C22415 - C22416) * C44321) *
                C44323) *
               C44212 * C44317) *
              C626 +
          ((((C20063 * C94 - C44138 * C100) * C14987 +
             (C20063 * C278 - C44138 * C283) * C14931 +
             (C20616 - C20617) * C14988 + (C20618 - C20619) * C44321) *
                C9716 +
            ((C20063 * C1199 - C44138 * C1204) * C14987 +
             (C20063 * C1397 - C44138 * C1401) * C14931 +
             (C24677 - C24678) * C14988 + (C24679 - C24680) * C44321) *
                C44323) *
               C44212 * C624 +
           (((C20617 - C20616) * C14987 + (C20619 - C20618) * C14931 +
             (C20621 - C20620) * C14988 + (C20623 - C20622) * C44321) *
                C9716 +
            ((C24678 - C24677) * C14987 + (C24680 - C24679) * C14931 +
             (C44138 * C7401 - C20063 * C7398) * C14988 +
             (C44138 * C7632 - C20063 * C7630) * C44321) *
                C44323) *
               C44212 * C44317) *
              C44315)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[46] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C14987 * C152 - C15155 * C93 - C14987 * C277 + C14931 * C326 +
             C14988 * C694 - C15156 * C630 - C14988 * C826 + C44321 * C886) *
                C44138 * C9716 +
            (C14987 * C1264 - C15155 * C1200 - C14987 * C1396 + C14931 * C1456 +
             C14988 * C2676 - C15156 * C2614 - C14988 * C2788 +
             C44321 * C2844) *
                C44138 * C44323) *
               C44212 * C624 -
           ((C14988 * C7485 - C15156 * C7397 - C14988 * C7629 + C44321 * C7707 +
             C14987 * C2676 - C15155 * C2614 - C14987 * C2788 +
             C14931 * C2844) *
                C44138 * C44323 +
            (C14988 * C2262 - C15156 * C2212 - C14988 * C2350 + C44321 * C2394 +
             C14987 * C694 - C15155 * C630 - C14987 * C826 + C14931 * C886) *
                C44138 * C9716) *
               C44212 * C44317) *
              C626 +
          (((C15793 + C15792) * C44138 * C9716 +
            (C14987 * C2677 - C15155 * C2615 - C14987 * C2789 + C14931 * C2845 +
             C14988 * C7486 - C15156 * C7398 - C14988 * C7630 +
             C44321 * C7708) *
                C44138 * C44323) *
               C44212 * C44317 -
           ((C16422 + C16423) * C44138 * C44323 +
            (C15183 + C15182) * C44138 * C9716) *
               C44212 * C624) *
              C44315)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[46] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C9716 * C215 - C9818 * C93 + C44323 * C1330 - C9819 * C1200) *
                C14987 +
            (C9716 * C390 - C9818 * C277 + C44323 * C1522 - C9819 * C1396) *
                C14931 +
            (C24603 - C24604 + C24605 - C24606) * C14988 +
            (C24813 - C24814 + C24815 - C24816) * C44321) *
               C44138 * C44212 * C624 +
           ((C24604 - C24603 + C24606 - C24605) * C14987 +
            (C24814 - C24813 + C24816 - C24815) * C14931 +
            (C9818 * C2212 - C9716 * C2306 + C9819 * C7397 - C44323 * C7555) *
                C14988 +
            (C9818 * C2350 - C9716 * C2435 + C9819 * C7629 - C44323 * C7775) *
                C44321) *
               C44138 * C44212 * C44317) *
              C626 +
          (((C9822 - C9821 + C9824 - C9823) * C14987 +
            (C9988 - C9987 + C9990 - C9989) * C14931 +
            (C10377 - C10378 + C10379 - C10380) * C14988 +
            (C10590 - C10591 + C10592 - C10593) * C44321) *
               C44138 * C44212 * C624 +
           ((C10378 - C10377 + C10380 - C10379) * C14987 +
            (C10591 - C10590 + C10593 - C10592) * C14931 +
            (C9716 * C2307 - C9818 * C2213 + C44323 * C7556 - C9819 * C7398) *
                C14988 +
            (C9716 * C2436 - C9818 * C2351 + C44323 * C7776 - C9819 * C7630) *
                C44321) *
               C44138 * C44212 * C44317) *
              C44315)) /
        (p * q * std::sqrt(p + q));
    d2eezx[46] += (2 * std::pow(Pi, 2.5) *
                   (((((C44138 * C98 - C20063 * C93) * C9818 +
                       (C44138 * C448 - C20063 * C443) * C9716 +
                       (C44138 * C1206 - C20063 * C1200) * C9819 +
                       (C44138 * C1584 - C20063 * C1580) * C44323) *
                          C14931 +
                      ((C20608 - C20609) * C9818 + (C20774 - C20775) * C9716 +
                       (C22410 - C22409) * C9819 + (C22574 - C22573) * C44323) *
                          C44321) *
                         C44212 * C624 +
                     (((C20609 - C20608) * C9818 + (C20775 - C20774) * C9716 +
                       (C22409 - C22410) * C9819 + (C22573 - C22574) * C44323) *
                          C14931 +
                      ((C20613 - C20612) * C9818 + (C20777 - C20776) * C9716 +
                       (C22413 - C22414) * C9819 + (C22575 - C22576) * C44323) *
                          C44321) *
                         C44212 * C44317) *
                        C626 +
                    ((((C20063 * C94 - C44138 * C100) * C9818 +
                       (C20063 * C444 - C44138 * C449) * C9716 +
                       (C20063 * C1199 - C44138 * C1204) * C9819 +
                       (C20063 * C1581 - C44138 * C1585) * C44323) *
                          C14931 +
                      ((C20616 - C20617) * C9818 + (C20778 - C20779) * C9716 +
                       (C24677 - C24678) * C9819 + (C24883 - C24884) * C44323) *
                          C44321) *
                         C44212 * C624 +
                     (((C20617 - C20616) * C9818 + (C20779 - C20778) * C9716 +
                       (C24678 - C24677) * C9819 + (C24884 - C24883) * C44323) *
                          C14931 +
                      ((C20621 - C20620) * C9818 + (C20781 - C20780) * C9716 +
                       (C44138 * C7401 - C20063 * C7398) * C9819 +
                       (C44138 * C7848 - C20063 * C7846) * C44323) *
                          C44321) *
                         C44212 * C44317) *
                        C44315)) /
                  (p * q * std::sqrt(p + q));
    d2eezy[46] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C14931 * C152 - C14987 * C93 + C44321 * C694 - C14988 * C630) *
                C9818 +
            (C14931 * C491 - C14987 * C443 + C44321 * C1068 - C14988 * C1010) *
                C9716 +
            (C14931 * C1264 - C14987 * C1200 + C44321 * C2676 -
             C14988 * C2614) *
                C9819 +
            (C14931 * C1638 - C14987 * C1580 + C44321 * C3006 -
             C14988 * C2950) *
                C44323) *
               C44138 * C44212 * C624 +
           ((C14987 * C630 - C14931 * C694 + C14988 * C2212 - C44321 * C2262) *
                C9818 +
            (C14987 * C1010 - C14931 * C1068 + C14988 * C2476 -
             C44321 * C2520) *
                C9716 +
            (C14987 * C2614 - C14931 * C2676 + C14988 * C7397 -
             C44321 * C7485) *
                C9819 +
            (C14987 * C2950 - C14931 * C3006 + C14988 * C7845 -
             C44321 * C7919) *
                C44323) *
               C44138 * C44212 * C44317) *
              C626 +
          (((C14991 - C14990 + C14993 - C14992) * C9818 +
            (C15337 - C15336 + C15339 - C15338) * C9716 +
            (C16204 - C16205 + C16206 - C16207) * C9819 +
            (C16622 - C16623 + C16624 - C16625) * C44323) *
               C44138 * C44212 * C624 +
           ((C15559 - C15558 + C15561 - C15560) * C9818 +
            (C16001 - C16000 + C16003 - C16002) * C9716 +
            (C14931 * C2677 - C14987 * C2615 + C44321 * C7486 -
             C14988 * C7398) *
                C9819 +
            (C14931 * C3007 - C14987 * C2951 + C44321 * C7920 -
             C14988 * C7846) *
                C44323) *
               C44138 * C44212 * C44317) *
              C44315)) /
        (p * q * std::sqrt(p + q));
    d2eezz[46] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C9818 * C215 - C10144 * C93 - C9818 * C443 + C9716 * C545 +
             C9819 * C1330 - C10145 * C1200 - C9819 * C1580 + C44323 * C1698) *
                C14931 +
            (C25029 + C25030) * C44321) *
               C44138 * C44212 * C624 -
           ((C9819 * C7555 - C10145 * C7397 - C9819 * C7845 + C44323 * C7987 +
             C9818 * C2306 - C10144 * C2212 - C9818 * C2476 + C9716 * C2561) *
                C44321 +
            (C25030 + C25029) * C14931) *
               C44138 * C44212 * C44317) *
              C626 +
          (((C10807 + C10806) * C14931 +
            (C9818 * C2307 - C10144 * C2213 - C9818 * C2477 + C9716 * C2562 +
             C9819 * C7556 - C10145 * C7398 - C9819 * C7846 + C44323 * C7988) *
                C44321) *
               C44138 * C44212 * C44317 -
           ((C10806 + C10807) * C44321 + (C10172 + C10171) * C14931) * C44138 *
               C44212 * C624) *
              C44315)) /
        (p * q * std::sqrt(p + q));
    d2eexx[47] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C20063 * C98 - C20064 * C93 - C20063 * C99 + C44138 * C108) *
                 C9716 +
             C25109 * C44323) *
                C14931 +
            (C24460 + C24461) * C44321) *
               C1196 -
           (((C20063 * C9236 - C20064 * C9234 - C20063 * C9237 +
              C44138 * C9240) *
                 C44323 +
             C22246 * C9716) *
                C44321 +
            ((C20063 * C4008 - C20064 * C4005 - C20063 * C4009 +
              C44138 * C4014) *
                 C44323 +
             C25109 * C9716) *
                C14931) *
               C44319) *
              C44195 * C626 +
          (((C25110 * C9716 + (C20063 * C4010 - C20064 * C4006 -
                               C20063 * C4011 + C44138 * C4015) *
                                  C44323) *
                C14931 +
            (C24469 * C9716 + (C20063 * C9238 - C20064 * C9235 -
                               C20063 * C9239 + C44138 * C9241) *
                                  C44323) *
                C44321) *
               C44319 -
           ((C24470 + C24462) * C44321 +
            (C25110 * C44323 +
             (C20063 * C100 - C20064 * C94 - C20063 * C101 + C44138 * C109) *
                 C9716) *
                C14931) *
               C1196) *
              C44195 * C44315)) /
        (p * q * std::sqrt(p + q));
    d2eexy[47] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C14931 * C152 - C14987 * C93 + C44321 * C694 - C14988 * C630) *
                 C20063 +
             (C14931 * C157 - C14987 * C99 + C44321 * C698 - C14988 * C637) *
                 C44138) *
                C9716 +
            ((C25177 - C25178 + C25179 - C25180) * C20063 +
             (C25181 - C25182 + C25183 - C25184) * C44138) *
                C44323) *
               C1196 +
           (((C25178 - C25177 + C25180 - C25179) * C20063 +
             (C25182 - C25181 + C25184 - C25183) * C44138) *
                C9716 +
            ((C14987 * C4005 - C14931 * C4055 + C14988 * C9234 -
              C44321 * C9292) *
                 C20063 +
             (C14987 * C4009 - C14931 * C4058 + C14988 * C9237 -
              C44321 * C9294) *
                 C44138) *
                C44323) *
               C44319) *
              C44195 * C626 +
          ((((C14991 - C14990 + C14993 - C14992) * C20063 +
             (C14995 - C14994 + C14997 - C14996) * C44138) *
                C9716 +
            ((C16204 - C16205 + C16206 - C16207) * C20063 +
             (C16208 - C16209 + C16210 - C16211) * C44138) *
                C44323) *
               C1196 +
           (((C16205 - C16204 + C16207 - C16206) * C20063 +
             (C16209 - C16208 + C16211 - C16210) * C44138) *
                C9716 +
            ((C14931 * C4056 - C14987 * C4006 + C44321 * C9293 -
              C14988 * C9235) *
                 C20063 +
             (C14931 * C4059 - C14987 * C4011 + C44321 * C9295 -
              C14988 * C9239) *
                 C44138) *
                C44323) *
               C44319) *
              C44195 * C44315)) /
        (p * q * std::sqrt(p + q));
    d2eexz[47] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C9716 * C215 - C9818 * C93 + C44323 * C1330 - C9819 * C1200) *
                 C20063 +
             (C9716 * C220 - C9818 * C99 + C44323 * C1334 - C9819 * C1207) *
                 C44138) *
                C14931 +
            ((C24603 - C24604 + C24605 - C24606) * C20063 +
             (C24607 - C24608 + C24609 - C24610) * C44138) *
                C44321) *
               C1196 +
           (((C9818 * C1200 - C9716 * C1330 + C9819 * C4005 - C44323 * C4099) *
                 C20063 +
             (C9818 * C1207 - C9716 * C1334 + C9819 * C4009 - C44323 * C4102) *
                 C44138) *
                C14931 +
            ((C9818 * C2614 - C9716 * C2732 + C9819 * C9234 - C44323 * C9346) *
                 C20063 +
             (C9818 * C2618 - C9716 * C2735 + C9819 * C9237 - C44323 * C9348) *
                 C44138) *
                C44321) *
               C44319) *
              C44195 * C626 +
          ((((C9822 - C9821 + C9824 - C9823) * C20063 +
             (C9826 - C9825 + C9828 - C9827) * C44138) *
                C14931 +
            ((C10377 - C10378 + C10379 - C10380) * C20063 +
             (C10381 - C10382 + C10383 - C10384) * C44138) *
                C44321) *
               C1196 +
           (((C11047 - C11046 + C11049 - C11048) * C20063 +
             (C11051 - C11050 + C11053 - C11052) * C44138) *
                C14931 +
            ((C9716 * C2733 - C9818 * C2615 + C44323 * C9347 - C9819 * C9235) *
                 C20063 +
             (C9716 * C2736 - C9818 * C2620 + C44323 * C9349 - C9819 * C9239) *
                 C44138) *
                C44321) *
               C44319) *
              C44195 * C44315)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[47] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C44138 * C98 - C20063 * C93) * C14987 +
             (C44138 * C282 - C20063 * C277) * C14931 +
             (C20608 - C20609) * C14988 + (C20610 - C20611) * C44321) *
                C9716 +
            ((C25317 - C25318) * C14987 + (C25319 - C25320) * C14931 +
             (C22410 - C22409) * C14988 + (C22412 - C22411) * C44321) *
                C44323) *
               C1196 +
           (((C25318 - C25317) * C14987 + (C25320 - C25319) * C14931 +
             (C22409 - C22410) * C14988 + (C22411 - C22412) * C44321) *
                C9716 +
            ((C20063 * C4005 - C44138 * C4008) * C14987 +
             (C20063 * C4143 - C44138 * C4146) * C14931 +
             (C20063 * C9234 - C44138 * C9236) * C14988 +
             (C20063 * C9400 - C44138 * C9402) * C44321) *
                C44323) *
               C44319) *
              C44195 * C626 +
          ((((C20063 * C94 - C44138 * C100) * C14987 +
             (C20063 * C278 - C44138 * C283) * C14931 +
             (C20616 - C20617) * C14988 + (C20618 - C20619) * C44321) *
                C9716 +
            ((C25321 - C25322) * C14987 + (C25323 - C25324) * C14931 +
             (C24677 - C24678) * C14988 + (C24679 - C24680) * C44321) *
                C44323) *
               C1196 +
           (((C25322 - C25321) * C14987 + (C25324 - C25323) * C14931 +
             (C24678 - C24677) * C14988 + (C24680 - C24679) * C44321) *
                C9716 +
            ((C44138 * C4010 - C20063 * C4006) * C14987 +
             (C44138 * C4147 - C20063 * C4144) * C14931 +
             (C44138 * C9238 - C20063 * C9235) * C14988 +
             (C44138 * C9403 - C20063 * C9401) * C44321) *
                C44323) *
               C44319) *
              C44195 * C44315)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[47] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C14987 * C152 - C15155 * C93 - C14987 * C277 + C14931 * C326 +
             C14988 * C694 - C15156 * C630 - C14988 * C826 + C44321 * C886) *
                C44138 * C9716 +
            (C25403 + C25404) * C44138 * C44323) *
               C1196 -
           ((C14988 * C9292 - C15156 * C9234 - C14988 * C9400 + C44321 * C9454 +
             C14987 * C4055 - C15155 * C4005 - C14987 * C4143 +
             C14931 * C4187) *
                C44138 * C44323 +
            (C25404 + C25403) * C44138 * C9716) *
               C44319) *
              C44195 * C626 +
          (((C16423 + C16422) * C44138 * C9716 +
            (C14987 * C4056 - C15155 * C4006 - C14987 * C4144 + C14931 * C4188 +
             C14988 * C9293 - C15156 * C9235 - C14988 * C9401 +
             C44321 * C9455) *
                C44138 * C44323) *
               C44319 -
           ((C16422 + C16423) * C44138 * C44323 +
            (C15183 + C15182) * C44138 * C9716) *
               C1196) *
              C44195 * C44315)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[47] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C9716 * C215 - C9818 * C93 + C44323 * C1330 - C9819 * C1200) *
                C14987 +
            (C9716 * C390 - C9818 * C277 + C44323 * C1522 - C9819 * C1396) *
                C14931 +
            (C24603 - C24604 + C24605 - C24606) * C14988 +
            (C24813 - C24814 + C24815 - C24816) * C44321) *
               C44138 * C1196 +
           ((C9818 * C1200 - C9716 * C1330 + C9819 * C4005 - C44323 * C4099) *
                C14987 +
            (C9818 * C1396 - C9716 * C1522 + C9819 * C4143 - C44323 * C4228) *
                C14931 +
            (C9818 * C2614 - C9716 * C2732 + C9819 * C9234 - C44323 * C9346) *
                C14988 +
            (C9818 * C2788 - C9716 * C2897 + C9819 * C9400 - C44323 * C9506) *
                C44321) *
               C44138 * C44319) *
              C44195 * C626 +
          (((C9822 - C9821 + C9824 - C9823) * C14987 +
            (C9988 - C9987 + C9990 - C9989) * C14931 +
            (C10377 - C10378 + C10379 - C10380) * C14988 +
            (C10590 - C10591 + C10592 - C10593) * C44321) *
               C44138 * C1196 +
           ((C11047 - C11046 + C11049 - C11048) * C14987 +
            (C11287 - C11286 + C11289 - C11288) * C14931 +
            (C9716 * C2733 - C9818 * C2615 + C44323 * C9347 - C9819 * C9235) *
                C14988 +
            (C9716 * C2898 - C9818 * C2789 + C44323 * C9507 - C9819 * C9401) *
                C44321) *
               C44138 * C44319) *
              C44195 * C44315)) /
        (p * q * std::sqrt(p + q));
    d2eezx[47] += (2 * std::pow(Pi, 2.5) *
                   (((((C44138 * C98 - C20063 * C93) * C9818 +
                       (C44138 * C448 - C20063 * C443) * C9716 +
                       (C25317 - C25318) * C9819 + (C25537 - C25538) * C44323) *
                          C14931 +
                      ((C20608 - C20609) * C9818 + (C20774 - C20775) * C9716 +
                       (C22410 - C22409) * C9819 + (C22574 - C22573) * C44323) *
                          C44321) *
                         C1196 +
                     (((C25318 - C25317) * C9818 + (C25538 - C25537) * C9716 +
                       (C20063 * C4005 - C44138 * C4008) * C9819 +
                       (C20063 * C4269 - C44138 * C4272) * C44323) *
                          C14931 +
                      ((C22409 - C22410) * C9818 + (C22573 - C22574) * C9716 +
                       (C20063 * C9234 - C44138 * C9236) * C9819 +
                       (C20063 * C9558 - C44138 * C9560) * C44323) *
                          C44321) *
                         C44319) *
                        C44195 * C626 +
                    ((((C20063 * C94 - C44138 * C100) * C9818 +
                       (C20063 * C444 - C44138 * C449) * C9716 +
                       (C25321 - C25322) * C9819 + (C25539 - C25540) * C44323) *
                          C14931 +
                      ((C20616 - C20617) * C9818 + (C20778 - C20779) * C9716 +
                       (C24677 - C24678) * C9819 + (C24883 - C24884) * C44323) *
                          C44321) *
                         C1196 +
                     (((C25322 - C25321) * C9818 + (C25540 - C25539) * C9716 +
                       (C44138 * C4010 - C20063 * C4006) * C9819 +
                       (C44138 * C4273 - C20063 * C4270) * C44323) *
                          C14931 +
                      ((C24678 - C24677) * C9818 + (C24884 - C24883) * C9716 +
                       (C44138 * C9238 - C20063 * C9235) * C9819 +
                       (C44138 * C9561 - C20063 * C9559) * C44323) *
                          C44321) *
                         C44319) *
                        C44195 * C44315)) /
                  (p * q * std::sqrt(p + q));
    d2eezy[47] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C14931 * C152 - C14987 * C93 + C44321 * C694 - C14988 * C630) *
                C9818 +
            (C14931 * C491 - C14987 * C443 + C44321 * C1068 - C14988 * C1010) *
                C9716 +
            (C25177 - C25178 + C25179 - C25180) * C9819 +
            (C25607 - C25608 + C25609 - C25610) * C44323) *
               C44138 * C1196 +
           ((C25178 - C25177 + C25180 - C25179) * C9818 +
            (C25608 - C25607 + C25610 - C25609) * C9716 +
            (C14987 * C4005 - C14931 * C4055 + C14988 * C9234 -
             C44321 * C9292) *
                C9819 +
            (C14987 * C4269 - C14931 * C4313 + C14988 * C9558 -
             C44321 * C9612) *
                C44323) *
               C44138 * C44319) *
              C44195 * C626 +
          (((C14991 - C14990 + C14993 - C14992) * C9818 +
            (C15337 - C15336 + C15339 - C15338) * C9716 +
            (C16204 - C16205 + C16206 - C16207) * C9819 +
            (C16622 - C16623 + C16624 - C16625) * C44323) *
               C44138 * C1196 +
           ((C16205 - C16204 + C16207 - C16206) * C9818 +
            (C16623 - C16622 + C16625 - C16624) * C9716 +
            (C14931 * C4056 - C14987 * C4006 + C44321 * C9293 -
             C14988 * C9235) *
                C9819 +
            (C14931 * C4314 - C14987 * C4270 + C44321 * C9613 -
             C14988 * C9559) *
                C44323) *
               C44138 * C44319) *
              C44195 * C44315)) /
        (p * q * std::sqrt(p + q));
    d2eezz[47] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C9818 * C215 - C10144 * C93 - C9818 * C443 + C9716 * C545 +
             C9819 * C1330 - C10145 * C1200 - C9819 * C1580 + C44323 * C1698) *
                C14931 +
            (C25029 + C25030) * C44321) *
               C44138 * C1196 -
           ((C9819 * C9346 - C10145 * C9234 - C9819 * C9558 + C44323 * C9664 +
             C9818 * C2732 - C10144 * C2614 - C9818 * C2950 + C9716 * C3059) *
                C44321 +
            (C9819 * C4099 - C10145 * C4005 - C9819 * C4269 + C44323 * C4354 +
             C9818 * C1330 - C10144 * C1200 - C9818 * C1580 + C9716 * C1698) *
                C14931) *
               C44138 * C44319) *
              C44195 * C626 +
          (((C11515 + C11514) * C14931 +
            (C9818 * C2733 - C10144 * C2615 - C9818 * C2951 + C9716 * C3060 +
             C9819 * C9347 - C10145 * C9235 - C9819 * C9559 + C44323 * C9665) *
                C44321) *
               C44138 * C44319 -
           ((C10806 + C10807) * C44321 + (C10172 + C10171) * C14931) * C44138 *
               C1196) *
              C44195 * C44315)) /
        (p * q * std::sqrt(p + q));
    d2eexx[48] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C20063 * C98 - C20064 * C93 - C20063 * C99 + C44138 * C108) *
                 C9716 +
             C25109 * C44323) *
                C14931 +
            (C24460 + C24461) * C44321) *
               C44212 * C1766 -
           ((C22245 * C44323 + C20451 * C9716) * C44321 +
            (C24461 + C24460) * C14931) *
               C44212 * C44317) *
              C1768 +
          (((C24462 + C24470) * C14931 +
            (C20453 * C9716 + (C20063 * C7401 - C20064 * C7398 -
                               C20063 * C7402 + C44138 * C7404) *
                                  C44323) *
                C44321) *
               C44212 * C44317 -
           ((C24470 + C24462) * C44321 +
            (C25110 * C44323 +
             (C20063 * C100 - C20064 * C94 - C20063 * C101 + C44138 * C109) *
                 C9716) *
                C14931) *
               C44212 * C1766) *
              C44315)) /
        (p * q * std::sqrt(p + q));
    d2eexy[48] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C14931 * C152 - C14987 * C93 + C44321 * C694 - C14988 * C630) *
                 C20063 +
             (C14931 * C157 - C14987 * C99 + C44321 * C698 - C14988 * C637) *
                 C44138) *
                C9716 +
            ((C25177 - C25178 + C25179 - C25180) * C20063 +
             (C25181 - C25182 + C25183 - C25184) * C44138) *
                C44323) *
               C44212 * C1766 +
           (((C14987 * C630 - C14931 * C694 + C14988 * C2212 - C44321 * C2262) *
                 C20063 +
             (C14987 * C637 - C14931 * C698 + C14988 * C2216 - C44321 * C2265) *
                 C44138) *
                C9716 +
            ((C14987 * C2614 - C14931 * C2676 + C14988 * C7397 -
              C44321 * C7485) *
                 C20063 +
             (C14987 * C2618 - C14931 * C2679 + C14988 * C7400 -
              C44321 * C7487) *
                 C44138) *
                C44323) *
               C44212 * C44317) *
              C1768 +
          ((((C14991 - C14990 + C14993 - C14992) * C20063 +
             (C14995 - C14994 + C14997 - C14996) * C44138) *
                C9716 +
            ((C16204 - C16205 + C16206 - C16207) * C20063 +
             (C16208 - C16209 + C16210 - C16211) * C44138) *
                C44323) *
               C44212 * C1766 +
           (((C15559 - C15558 + C15561 - C15560) * C20063 +
             (C15563 - C15562 + C15565 - C15564) * C44138) *
                C9716 +
            ((C14931 * C2677 - C14987 * C2615 + C44321 * C7486 -
              C14988 * C7398) *
                 C20063 +
             (C14931 * C2680 - C14987 * C2620 + C44321 * C7488 -
              C14988 * C7402) *
                 C44138) *
                C44323) *
               C44212 * C44317) *
              C44315)) /
        (p * q * std::sqrt(p + q));
    d2eexz[48] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C9716 * C215 - C9818 * C93 + C44323 * C1330 - C9819 * C1200) *
                 C20063 +
             (C9716 * C220 - C9818 * C99 + C44323 * C1334 - C9819 * C1207) *
                 C44138) *
                C14931 +
            ((C24603 - C24604 + C24605 - C24606) * C20063 +
             (C24607 - C24608 + C24609 - C24610) * C44138) *
                C44321) *
               C44212 * C1766 +
           (((C24604 - C24603 + C24606 - C24605) * C20063 +
             (C24608 - C24607 + C24610 - C24609) * C44138) *
                C14931 +
            ((C9818 * C2212 - C9716 * C2306 + C9819 * C7397 - C44323 * C7555) *
                 C20063 +
             (C9818 * C2216 - C9716 * C2309 + C9819 * C7400 - C44323 * C7557) *
                 C44138) *
                C44321) *
               C44212 * C44317) *
              C1768 +
          ((((C9822 - C9821 + C9824 - C9823) * C20063 +
             (C9826 - C9825 + C9828 - C9827) * C44138) *
                C14931 +
            ((C10377 - C10378 + C10379 - C10380) * C20063 +
             (C10381 - C10382 + C10383 - C10384) * C44138) *
                C44321) *
               C44212 * C1766 +
           (((C10378 - C10377 + C10380 - C10379) * C20063 +
             (C10382 - C10381 + C10384 - C10383) * C44138) *
                C14931 +
            ((C9716 * C2307 - C9818 * C2213 + C44323 * C7556 - C9819 * C7398) *
                 C20063 +
             (C9716 * C2310 - C9818 * C2218 + C44323 * C7558 - C9819 * C7402) *
                 C44138) *
                C44321) *
               C44212 * C44317) *
              C44315)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[48] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C44138 * C98 - C20063 * C93) * C14987 +
             (C44138 * C282 - C20063 * C277) * C14931 +
             (C20608 - C20609) * C14988 + (C20610 - C20611) * C44321) *
                C9716 +
            ((C25317 - C25318) * C14987 + (C25319 - C25320) * C14931 +
             (C22410 - C22409) * C14988 + (C22412 - C22411) * C44321) *
                C44323) *
               C44212 * C1766 +
           (((C20609 - C20608) * C14987 + (C20611 - C20610) * C14931 +
             (C20613 - C20612) * C14988 + (C20615 - C20614) * C44321) *
                C9716 +
            ((C22409 - C22410) * C14987 + (C22411 - C22412) * C14931 +
             (C22413 - C22414) * C14988 + (C22415 - C22416) * C44321) *
                C44323) *
               C44212 * C44317) *
              C1768 +
          ((((C20063 * C94 - C44138 * C100) * C14987 +
             (C20063 * C278 - C44138 * C283) * C14931 +
             (C20616 - C20617) * C14988 + (C20618 - C20619) * C44321) *
                C9716 +
            ((C25321 - C25322) * C14987 + (C25323 - C25324) * C14931 +
             (C24677 - C24678) * C14988 + (C24679 - C24680) * C44321) *
                C44323) *
               C44212 * C1766 +
           (((C20617 - C20616) * C14987 + (C20619 - C20618) * C14931 +
             (C20621 - C20620) * C14988 + (C20623 - C20622) * C44321) *
                C9716 +
            ((C24678 - C24677) * C14987 + (C24680 - C24679) * C14931 +
             (C44138 * C7401 - C20063 * C7398) * C14988 +
             (C44138 * C7632 - C20063 * C7630) * C44321) *
                C44323) *
               C44212 * C44317) *
              C44315)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[48] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C14987 * C152 - C15155 * C93 - C14987 * C277 + C14931 * C326 +
             C14988 * C694 - C15156 * C630 - C14988 * C826 + C44321 * C886) *
                C44138 * C9716 +
            (C25403 + C25404) * C44138 * C44323) *
               C44212 * C1766 -
           ((C14988 * C7485 - C15156 * C7397 - C14988 * C7629 + C44321 * C7707 +
             C14987 * C2676 - C15155 * C2614 - C14987 * C2788 +
             C14931 * C2844) *
                C44138 * C44323 +
            (C14988 * C2262 - C15156 * C2212 - C14988 * C2350 + C44321 * C2394 +
             C14987 * C694 - C15155 * C630 - C14987 * C826 + C14931 * C886) *
                C44138 * C9716) *
               C44212 * C44317) *
              C1768 +
          (((C15793 + C15792) * C44138 * C9716 +
            (C14987 * C2677 - C15155 * C2615 - C14987 * C2789 + C14931 * C2845 +
             C14988 * C7486 - C15156 * C7398 - C14988 * C7630 +
             C44321 * C7708) *
                C44138 * C44323) *
               C44212 * C44317 -
           ((C16422 + C16423) * C44138 * C44323 +
            (C15183 + C15182) * C44138 * C9716) *
               C44212 * C1766) *
              C44315)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[48] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C9716 * C215 - C9818 * C93 + C44323 * C1330 - C9819 * C1200) *
                C14987 +
            (C9716 * C390 - C9818 * C277 + C44323 * C1522 - C9819 * C1396) *
                C14931 +
            (C24603 - C24604 + C24605 - C24606) * C14988 +
            (C24813 - C24814 + C24815 - C24816) * C44321) *
               C44138 * C44212 * C1766 +
           ((C24604 - C24603 + C24606 - C24605) * C14987 +
            (C24814 - C24813 + C24816 - C24815) * C14931 +
            (C9818 * C2212 - C9716 * C2306 + C9819 * C7397 - C44323 * C7555) *
                C14988 +
            (C9818 * C2350 - C9716 * C2435 + C9819 * C7629 - C44323 * C7775) *
                C44321) *
               C44138 * C44212 * C44317) *
              C1768 +
          (((C9822 - C9821 + C9824 - C9823) * C14987 +
            (C9988 - C9987 + C9990 - C9989) * C14931 +
            (C10377 - C10378 + C10379 - C10380) * C14988 +
            (C10590 - C10591 + C10592 - C10593) * C44321) *
               C44138 * C44212 * C1766 +
           ((C10378 - C10377 + C10380 - C10379) * C14987 +
            (C10591 - C10590 + C10593 - C10592) * C14931 +
            (C9716 * C2307 - C9818 * C2213 + C44323 * C7556 - C9819 * C7398) *
                C14988 +
            (C9716 * C2436 - C9818 * C2351 + C44323 * C7776 - C9819 * C7630) *
                C44321) *
               C44138 * C44212 * C44317) *
              C44315)) /
        (p * q * std::sqrt(p + q));
    d2eezx[48] += (2 * std::pow(Pi, 2.5) *
                   (((((C44138 * C98 - C20063 * C93) * C9818 +
                       (C44138 * C448 - C20063 * C443) * C9716 +
                       (C25317 - C25318) * C9819 + (C25537 - C25538) * C44323) *
                          C14931 +
                      ((C20608 - C20609) * C9818 + (C20774 - C20775) * C9716 +
                       (C22410 - C22409) * C9819 + (C22574 - C22573) * C44323) *
                          C44321) *
                         C44212 * C1766 +
                     (((C20609 - C20608) * C9818 + (C20775 - C20774) * C9716 +
                       (C22409 - C22410) * C9819 + (C22573 - C22574) * C44323) *
                          C14931 +
                      ((C20613 - C20612) * C9818 + (C20777 - C20776) * C9716 +
                       (C22413 - C22414) * C9819 + (C22575 - C22576) * C44323) *
                          C44321) *
                         C44212 * C44317) *
                        C1768 +
                    ((((C20063 * C94 - C44138 * C100) * C9818 +
                       (C20063 * C444 - C44138 * C449) * C9716 +
                       (C25321 - C25322) * C9819 + (C25539 - C25540) * C44323) *
                          C14931 +
                      ((C20616 - C20617) * C9818 + (C20778 - C20779) * C9716 +
                       (C24677 - C24678) * C9819 + (C24883 - C24884) * C44323) *
                          C44321) *
                         C44212 * C1766 +
                     (((C20617 - C20616) * C9818 + (C20779 - C20778) * C9716 +
                       (C24678 - C24677) * C9819 + (C24884 - C24883) * C44323) *
                          C14931 +
                      ((C20621 - C20620) * C9818 + (C20781 - C20780) * C9716 +
                       (C44138 * C7401 - C20063 * C7398) * C9819 +
                       (C44138 * C7848 - C20063 * C7846) * C44323) *
                          C44321) *
                         C44212 * C44317) *
                        C44315)) /
                  (p * q * std::sqrt(p + q));
    d2eezy[48] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C14931 * C152 - C14987 * C93 + C44321 * C694 - C14988 * C630) *
                C9818 +
            (C14931 * C491 - C14987 * C443 + C44321 * C1068 - C14988 * C1010) *
                C9716 +
            (C25177 - C25178 + C25179 - C25180) * C9819 +
            (C25607 - C25608 + C25609 - C25610) * C44323) *
               C44138 * C44212 * C1766 +
           ((C14987 * C630 - C14931 * C694 + C14988 * C2212 - C44321 * C2262) *
                C9818 +
            (C14987 * C1010 - C14931 * C1068 + C14988 * C2476 -
             C44321 * C2520) *
                C9716 +
            (C14987 * C2614 - C14931 * C2676 + C14988 * C7397 -
             C44321 * C7485) *
                C9819 +
            (C14987 * C2950 - C14931 * C3006 + C14988 * C7845 -
             C44321 * C7919) *
                C44323) *
               C44138 * C44212 * C44317) *
              C1768 +
          (((C14991 - C14990 + C14993 - C14992) * C9818 +
            (C15337 - C15336 + C15339 - C15338) * C9716 +
            (C16204 - C16205 + C16206 - C16207) * C9819 +
            (C16622 - C16623 + C16624 - C16625) * C44323) *
               C44138 * C44212 * C1766 +
           ((C15559 - C15558 + C15561 - C15560) * C9818 +
            (C16001 - C16000 + C16003 - C16002) * C9716 +
            (C14931 * C2677 - C14987 * C2615 + C44321 * C7486 -
             C14988 * C7398) *
                C9819 +
            (C14931 * C3007 - C14987 * C2951 + C44321 * C7920 -
             C14988 * C7846) *
                C44323) *
               C44138 * C44212 * C44317) *
              C44315)) /
        (p * q * std::sqrt(p + q));
    d2eezz[48] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C9818 * C215 - C10144 * C93 - C9818 * C443 + C9716 * C545 +
             C9819 * C1330 - C10145 * C1200 - C9819 * C1580 + C44323 * C1698) *
                C14931 +
            (C25029 + C25030) * C44321) *
               C44138 * C44212 * C1766 -
           ((C9819 * C7555 - C10145 * C7397 - C9819 * C7845 + C44323 * C7987 +
             C9818 * C2306 - C10144 * C2212 - C9818 * C2476 + C9716 * C2561) *
                C44321 +
            (C25030 + C25029) * C14931) *
               C44138 * C44212 * C44317) *
              C1768 +
          (((C10807 + C10806) * C14931 +
            (C9818 * C2307 - C10144 * C2213 - C9818 * C2477 + C9716 * C2562 +
             C9819 * C7556 - C10145 * C7398 - C9819 * C7846 + C44323 * C7988) *
                C44321) *
               C44138 * C44212 * C44317 -
           ((C10806 + C10807) * C44321 + (C10172 + C10171) * C14931) * C44138 *
               C44212 * C1766) *
              C44315)) /
        (p * q * std::sqrt(p + q));
    d2eexx[49] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C20063 * C98 - C20064 * C93 - C20063 * C99 + C44138 * C108) *
                C9716 +
            C25109 * C44323) *
               C14931 +
           (C24460 + C24461) * C44321) *
              C44212 * C2208 -
          ((C26321 + C26322) * C44321 + (C24461 + C24460) * C14931) * C44212 *
              C2209 +
          ((C26322 + C26321) * C14931 +
           (C21830 * C9716 + (C20063 * C22229 - C20064 * C22228 -
                              C20063 * C22230 + C44138 * C22231) *
                                 C44323) *
               C44321) *
              C44212 * C2210) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eexy[49] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C14931 * C152 - C14987 * C93 + C44321 * C694 - C14988 * C630) *
                C20063 +
            (C14931 * C157 - C14987 * C99 + C44321 * C698 - C14988 * C637) *
                C44138) *
               C9716 +
           ((C25177 - C25178 + C25179 - C25180) * C20063 +
            (C25181 - C25182 + C25183 - C25184) * C44138) *
               C44323) *
              C44212 * C2208 +
          (((C14987 * C630 - C14931 * C694 + C14988 * C2212 - C44321 * C2262) *
                C20063 +
            (C14987 * C637 - C14931 * C698 + C14988 * C2216 - C44321 * C2265) *
                C44138) *
               C9716 +
           ((C14987 * C2614 - C14931 * C2676 + C14988 * C7397 -
             C44321 * C7485) *
                C20063 +
            (C14987 * C2618 - C14931 * C2679 + C14988 * C7400 -
             C44321 * C7487) *
                C44138) *
               C44323) *
              C44212 * C2209 +
          (((C14931 * C2262 - C14987 * C2212 + C44321 * C6932 -
             C14988 * C6860) *
                C20063 +
            (C14931 * C2265 - C14987 * C2216 + C44321 * C6934 -
             C14988 * C6863) *
                C44138) *
               C9716 +
           ((C14931 * C7485 - C14987 * C7397 + C44321 * C22298 -
             C14988 * C22228) *
                C20063 +
            (C14931 * C7487 - C14987 * C7400 + C44321 * C22299 -
             C14988 * C22230) *
                C44138) *
               C44323) *
              C44212 * C2210) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eexz[49] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C9716 * C215 - C9818 * C93 + C44323 * C1330 - C9819 * C1200) *
                C20063 +
            (C9716 * C220 - C9818 * C99 + C44323 * C1334 - C9819 * C1207) *
                C44138) *
               C14931 +
           ((C24603 - C24604 + C24605 - C24606) * C20063 +
            (C24607 - C24608 + C24609 - C24610) * C44138) *
               C44321) *
              C44212 * C2208 +
          (((C24604 - C24603 + C24606 - C24605) * C20063 +
            (C24608 - C24607 + C24610 - C24609) * C44138) *
               C14931 +
           ((C26423 - C26424 + C26425 - C26426) * C20063 +
            (C26427 - C26428 + C26429 - C26430) * C44138) *
               C44321) *
              C44212 * C2209 +
          (((C26424 - C26423 + C26426 - C26425) * C20063 +
            (C26428 - C26427 + C26430 - C26429) * C44138) *
               C14931 +
           ((C9716 * C6986 - C9818 * C6860 + C44323 * C22350 - C9819 * C22228) *
                C20063 +
            (C9716 * C6988 - C9818 * C6863 + C44323 * C22351 - C9819 * C22230) *
                C44138) *
               C44321) *
              C44212 * C2210) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eeyx[49] += (2 * std::pow(Pi, 2.5) *
                   ((((C44138 * C98 - C20063 * C93) * C14987 +
                      (C44138 * C282 - C20063 * C277) * C14931 +
                      (C20608 - C20609) * C14988 + (C20610 - C20611) * C44321) *
                         C9716 +
                     ((C25317 - C25318) * C14987 + (C25319 - C25320) * C14931 +
                      (C22410 - C22409) * C14988 + (C22412 - C22411) * C44321) *
                         C44323) *
                        C44212 * C2208 +
                    (((C20609 - C20608) * C14987 + (C20611 - C20610) * C14931 +
                      (C20613 - C20612) * C14988 + (C20615 - C20614) * C44321) *
                         C9716 +
                     ((C22409 - C22410) * C14987 + (C22411 - C22412) * C14931 +
                      (C22413 - C22414) * C14988 + (C22415 - C22416) * C44321) *
                         C44323) *
                        C44212 * C2209 +
                    ((C21961 * C14987 + C21962 * C14931 +
                      (C21964 - C21963) * C14988 + (C21966 - C21965) * C44321) *
                         C9716 +
                     ((C22414 - C22413) * C14987 + (C22416 - C22415) * C14931 +
                      (C44138 * C22229 - C20063 * C22228) * C14988 +
                      (C44138 * C22407 - C20063 * C22406) * C44321) *
                         C44323) *
                        C44212 * C2210) *
                   C44161) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[49] +=
        (2 * std::pow(Pi, 2.5) *
         (((C14987 * C152 - C15155 * C93 - C14987 * C277 + C14931 * C326 +
            C14988 * C694 - C15156 * C630 - C14988 * C826 + C44321 * C886) *
               C44138 * C9716 +
           (C25403 + C25404) * C44138 * C44323) *
              C44212 * C2208 -
          ((C14988 * C7485 - C15156 * C7397 - C14988 * C7629 + C44321 * C7707 +
            C14987 * C2676 - C15155 * C2614 - C14987 * C2788 + C14931 * C2844) *
               C44138 * C44323 +
           (C14988 * C2262 - C15156 * C2212 - C14988 * C2350 + C44321 * C2394 +
            C14987 * C694 - C15155 * C630 - C14987 * C826 + C14931 * C886) *
               C44138 * C9716) *
              C44212 * C2209 +
          ((C14987 * C2262 - C15155 * C2212 - C14987 * C2350 + C14931 * C2394 +
            C14988 * C6932 - C15156 * C6860 - C14988 * C7044 + C44321 * C7106) *
               C44138 * C9716 +
           (C14987 * C7485 - C15155 * C7397 - C14987 * C7629 + C14931 * C7707 +
            C14988 * C22298 - C15156 * C22228 - C14988 * C22406 +
            C44321 * C22466) *
               C44138 * C44323) *
              C44212 * C2210) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eeyz[49] +=
        (2 * std::pow(Pi, 2.5) *
         (((C9716 * C215 - C9818 * C93 + C44323 * C1330 - C9819 * C1200) *
               C14987 +
           (C9716 * C390 - C9818 * C277 + C44323 * C1522 - C9819 * C1396) *
               C14931 +
           (C24603 - C24604 + C24605 - C24606) * C14988 +
           (C24813 - C24814 + C24815 - C24816) * C44321) *
              C44138 * C44212 * C2208 +
          ((C24604 - C24603 + C24606 - C24605) * C14987 +
           (C24814 - C24813 + C24816 - C24815) * C14931 +
           (C26423 - C26424 + C26425 - C26426) * C14988 +
           (C26581 - C26582 + C26583 - C26584) * C44321) *
              C44138 * C44212 * C2209 +
          ((C26424 - C26423 + C26426 - C26425) * C14987 +
           (C26582 - C26581 + C26584 - C26583) * C14931 +
           (C9716 * C6986 - C9818 * C6860 + C44323 * C22350 - C9819 * C22228) *
               C14988 +
           (C9716 * C7158 - C9818 * C7044 + C44323 * C22517 - C9819 * C22406) *
               C44321) *
              C44138 * C44212 * C2210) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eezx[49] += (2 * std::pow(Pi, 2.5) *
                   ((((C44138 * C98 - C20063 * C93) * C9818 +
                      (C44138 * C448 - C20063 * C443) * C9716 +
                      (C25317 - C25318) * C9819 + (C25537 - C25538) * C44323) *
                         C14931 +
                     ((C20608 - C20609) * C9818 + (C20774 - C20775) * C9716 +
                      (C22410 - C22409) * C9819 + (C22574 - C22573) * C44323) *
                         C44321) *
                        C44212 * C2208 +
                    (((C20609 - C20608) * C9818 + (C20775 - C20774) * C9716 +
                      (C22409 - C22410) * C9819 + (C22573 - C22574) * C44323) *
                         C14931 +
                     ((C20613 - C20612) * C9818 + (C20777 - C20776) * C9716 +
                      (C22413 - C22414) * C9819 + (C22575 - C22576) * C44323) *
                         C44321) *
                        C44212 * C2209 +
                    ((C21961 * C9818 + C22089 * C9716 +
                      (C22414 - C22413) * C9819 + (C22576 - C22575) * C44323) *
                         C14931 +
                     ((C21964 - C21963) * C9818 + (C22091 - C22090) * C9716 +
                      (C44138 * C22229 - C20063 * C22228) * C9819 +
                      (C44138 * C22571 - C20063 * C22570) * C44323) *
                         C44321) *
                        C44212 * C2210) *
                   C44161) /
                  (p * q * std::sqrt(p + q));
    d2eezy[49] +=
        (2 * std::pow(Pi, 2.5) *
         (((C14931 * C152 - C14987 * C93 + C44321 * C694 - C14988 * C630) *
               C9818 +
           (C14931 * C491 - C14987 * C443 + C44321 * C1068 - C14988 * C1010) *
               C9716 +
           (C25177 - C25178 + C25179 - C25180) * C9819 +
           (C25607 - C25608 + C25609 - C25610) * C44323) *
              C44138 * C44212 * C2208 +
          ((C14987 * C630 - C14931 * C694 + C14988 * C2212 - C44321 * C2262) *
               C9818 +
           (C14987 * C1010 - C14931 * C1068 + C14988 * C2476 - C44321 * C2520) *
               C9716 +
           (C14987 * C2614 - C14931 * C2676 + C14988 * C7397 - C44321 * C7485) *
               C9819 +
           (C14987 * C2950 - C14931 * C3006 + C14988 * C7845 - C44321 * C7919) *
               C44323) *
              C44138 * C44212 * C2209 +
          ((C14931 * C2262 - C14987 * C2212 + C44321 * C6932 - C14988 * C6860) *
               C9818 +
           (C14931 * C2520 - C14987 * C2476 + C44321 * C7270 - C14988 * C7212) *
               C9716 +
           (C14931 * C7485 - C14987 * C7397 + C44321 * C22298 -
            C14988 * C22228) *
               C9819 +
           (C14931 * C7919 - C14987 * C7845 + C44321 * C22626 -
            C14988 * C22570) *
               C44323) *
              C44138 * C44212 * C2210) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eezz[49] +=
        (2 * std::pow(Pi, 2.5) *
         (((C9818 * C215 - C10144 * C93 - C9818 * C443 + C9716 * C545 +
            C9819 * C1330 - C10145 * C1200 - C9819 * C1580 + C44323 * C1698) *
               C14931 +
           (C25029 + C25030) * C44321) *
              C44138 * C44212 * C2208 -
          ((C26747 + C26748) * C44321 + (C25030 + C25029) * C14931) * C44138 *
              C44212 * C2209 +
          ((C26748 + C26747) * C14931 +
           (C9818 * C6986 - C10144 * C6860 - C9818 * C7212 + C9716 * C7322 +
            C9819 * C22350 - C10145 * C22228 - C9819 * C22570 +
            C44323 * C22677) *
               C44321) *
              C44138 * C44212 * C2210) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eexx[50] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C20063 * C98 - C20064 * C93 - C20063 * C99 + C44138 * C108) *
                 C9716 +
             C25109 * C44323) *
                C14931 +
            (C24460 + C24461) * C44321) *
               C1196 -
           ((C26823 + C26819) * C44321 + ((C20063 * C4008 - C20064 * C4005 -
                                           C20063 * C4009 + C44138 * C4014) *
                                              C44323 +
                                          C25109 * C9716) *
                                             C14931) *
               C44319) *
              C1766 +
          (((C26819 + C26823) * C14931 +
            (C22245 * C9716 + (C20063 * C23624 - C20064 * C23623 -
                               C20063 * C23625 + C44138 * C23626) *
                                  C44323) *
                C44321) *
               C44319 -
           ((C26321 + C26322) * C44321 + (C24461 + C24460) * C14931) * C1196) *
              C44317) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eexy[50] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C14931 * C152 - C14987 * C93 + C44321 * C694 - C14988 * C630) *
                 C20063 +
             (C14931 * C157 - C14987 * C99 + C44321 * C698 - C14988 * C637) *
                 C44138) *
                C9716 +
            ((C25177 - C25178 + C25179 - C25180) * C20063 +
             (C25181 - C25182 + C25183 - C25184) * C44138) *
                C44323) *
               C1196 +
           (((C25178 - C25177 + C25180 - C25179) * C20063 +
             (C25182 - C25181 + C25184 - C25183) * C44138) *
                C9716 +
            ((C14987 * C4005 - C14931 * C4055 + C14988 * C9234 -
              C44321 * C9292) *
                 C20063 +
             (C14987 * C4009 - C14931 * C4058 + C14988 * C9237 -
              C44321 * C9294) *
                 C44138) *
                C44323) *
               C44319) *
              C1766 +
          ((((C14987 * C630 - C14931 * C694 + C14988 * C2212 - C44321 * C2262) *
                 C20063 +
             (C14987 * C637 - C14931 * C698 + C14988 * C2216 - C44321 * C2265) *
                 C44138) *
                C9716 +
            ((C26890 - C26891 + C26892 - C26893) * C20063 +
             (C26894 - C26895 + C26896 - C26897) * C44138) *
                C44323) *
               C1196 +
           (((C26891 - C26890 + C26893 - C26892) * C20063 +
             (C26895 - C26894 + C26897 - C26896) * C44138) *
                C9716 +
            ((C14931 * C9292 - C14987 * C9234 + C44321 * C23665 -
              C14988 * C23623) *
                 C20063 +
             (C14931 * C9294 - C14987 * C9237 + C44321 * C23666 -
              C14988 * C23625) *
                 C44138) *
                C44323) *
               C44319) *
              C44317) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eexz[50] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C9716 * C215 - C9818 * C93 + C44323 * C1330 - C9819 * C1200) *
                 C20063 +
             (C9716 * C220 - C9818 * C99 + C44323 * C1334 - C9819 * C1207) *
                 C44138) *
                C14931 +
            ((C24603 - C24604 + C24605 - C24606) * C20063 +
             (C24607 - C24608 + C24609 - C24610) * C44138) *
                C44321) *
               C1196 +
           (((C9818 * C1200 - C9716 * C1330 + C9819 * C4005 - C44323 * C4099) *
                 C20063 +
             (C9818 * C1207 - C9716 * C1334 + C9819 * C4009 - C44323 * C4102) *
                 C44138) *
                C14931 +
            ((C26964 - C26965 + C26966 - C26967) * C20063 +
             (C26968 - C26969 + C26970 - C26971) * C44138) *
                C44321) *
               C44319) *
              C1766 +
          ((((C24604 - C24603 + C24606 - C24605) * C20063 +
             (C24608 - C24607 + C24610 - C24609) * C44138) *
                C14931 +
            ((C26423 - C26424 + C26425 - C26426) * C20063 +
             (C26427 - C26428 + C26429 - C26430) * C44138) *
                C44321) *
               C1196 +
           (((C26965 - C26964 + C26967 - C26966) * C20063 +
             (C26969 - C26968 + C26971 - C26970) * C44138) *
                C14931 +
            ((C9716 * C7555 - C9818 * C7397 + C44323 * C23705 -
              C9819 * C23623) *
                 C20063 +
             (C9716 * C7557 - C9818 * C7400 + C44323 * C23706 -
              C9819 * C23625) *
                 C44138) *
                C44321) *
               C44319) *
              C44317) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eeyx[50] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C44138 * C98 - C20063 * C93) * C14987 +
             (C44138 * C282 - C20063 * C277) * C14931 +
             (C20608 - C20609) * C14988 + (C20610 - C20611) * C44321) *
                C9716 +
            ((C25317 - C25318) * C14987 + (C25319 - C25320) * C14931 +
             C27038 * C14988 + C27039 * C44321) *
                C44323) *
               C1196 +
           (((C25318 - C25317) * C14987 + (C25320 - C25319) * C14931 +
             C27040 * C14988 + C27041 * C44321) *
                C9716 +
            ((C20063 * C4005 - C44138 * C4008) * C14987 +
             (C20063 * C4143 - C44138 * C4146) * C14931 +
             (C27042 - C27043) * C14988 + (C27044 - C27045) * C44321) *
                C44323) *
               C44319) *
              C1766 +
          ((((C20609 - C20608) * C14987 + (C20611 - C20610) * C14931 +
             (C20613 - C20612) * C14988 + (C20615 - C20614) * C44321) *
                C9716 +
            (C27040 * C14987 + C27041 * C14931 + (C22413 - C22414) * C14988 +
             (C22415 - C22416) * C44321) *
                C44323) *
               C1196 +
           ((C27038 * C14987 + C27039 * C14931 + (C22414 - C22413) * C14988 +
             (C22416 - C22415) * C44321) *
                C9716 +
            ((C27043 - C27042) * C14987 + (C27045 - C27044) * C14931 +
             (C44138 * C23624 - C20063 * C23623) * C14988 +
             (C44138 * C23746 - C20063 * C23745) * C44321) *
                C44323) *
               C44319) *
              C44317) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eeyy[50] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C14987 * C152 - C15155 * C93 - C14987 * C277 + C14931 * C326 +
             C14988 * C694 - C15156 * C630 - C14988 * C826 + C44321 * C886) *
                C44138 * C9716 +
            (C25403 + C25404) * C44138 * C44323) *
               C1196 -
           ((C14988 * C9292 - C15156 * C9234 - C14988 * C9400 + C44321 * C9454 +
             C14987 * C4055 - C15155 * C4005 - C14987 * C4143 +
             C14931 * C4187) *
                C44138 * C44323 +
            (C25404 + C25403) * C44138 * C9716) *
               C44319) *
              C1766 +
          (((C27124 + C27125) * C44138 * C9716 +
            (C14987 * C9292 - C15155 * C9234 - C14987 * C9400 + C14931 * C9454 +
             C14988 * C23665 - C15156 * C23623 - C14988 * C23745 +
             C44321 * C23785) *
                C44138 * C44323) *
               C44319 -
           ((C27125 + C27124) * C44138 * C44323 +
            (C14988 * C2262 - C15156 * C2212 - C14988 * C2350 + C44321 * C2394 +
             C14987 * C694 - C15155 * C630 - C14987 * C826 + C14931 * C886) *
                C44138 * C9716) *
               C1196) *
              C44317) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eeyz[50] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C9716 * C215 - C9818 * C93 + C44323 * C1330 - C9819 * C1200) *
                C14987 +
            (C9716 * C390 - C9818 * C277 + C44323 * C1522 - C9819 * C1396) *
                C14931 +
            (C24603 - C24604 + C24605 - C24606) * C14988 +
            (C24813 - C24814 + C24815 - C24816) * C44321) *
               C44138 * C1196 +
           ((C9818 * C1200 - C9716 * C1330 + C9819 * C4005 - C44323 * C4099) *
                C14987 +
            (C9818 * C1396 - C9716 * C1522 + C9819 * C4143 - C44323 * C4228) *
                C14931 +
            (C26964 - C26965 + C26966 - C26967) * C14988 +
            (C27192 - C27193 + C27194 - C27195) * C44321) *
               C44138 * C44319) *
              C1766 +
          (((C24604 - C24603 + C24606 - C24605) * C14987 +
            (C24814 - C24813 + C24816 - C24815) * C14931 +
            (C26423 - C26424 + C26425 - C26426) * C14988 +
            (C26581 - C26582 + C26583 - C26584) * C44321) *
               C44138 * C1196 +
           ((C26965 - C26964 + C26967 - C26966) * C14987 +
            (C27193 - C27192 + C27195 - C27194) * C14931 +
            (C9716 * C7555 - C9818 * C7397 + C44323 * C23705 - C9819 * C23623) *
                C14988 +
            (C9716 * C7775 - C9818 * C7629 + C44323 * C23824 - C9819 * C23745) *
                C44321) *
               C44138 * C44319) *
              C44317) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eezx[50] += (2 * std::pow(Pi, 2.5) *
                   (((((C44138 * C98 - C20063 * C93) * C9818 +
                       (C44138 * C448 - C20063 * C443) * C9716 +
                       (C25317 - C25318) * C9819 + (C25537 - C25538) * C44323) *
                          C14931 +
                      ((C20608 - C20609) * C9818 + (C20774 - C20775) * C9716 +
                       C27038 * C9819 + C27262 * C44323) *
                          C44321) *
                         C1196 +
                     (((C25318 - C25317) * C9818 + (C25538 - C25537) * C9716 +
                       (C20063 * C4005 - C44138 * C4008) * C9819 +
                       (C20063 * C4269 - C44138 * C4272) * C44323) *
                          C14931 +
                      (C27040 * C9818 + C27263 * C9716 +
                       (C27042 - C27043) * C9819 + (C27264 - C27265) * C44323) *
                          C44321) *
                         C44319) *
                        C1766 +
                    ((((C20609 - C20608) * C9818 + (C20775 - C20774) * C9716 +
                       C27040 * C9819 + C27263 * C44323) *
                          C14931 +
                      ((C20613 - C20612) * C9818 + (C20777 - C20776) * C9716 +
                       (C22413 - C22414) * C9819 + (C22575 - C22576) * C44323) *
                          C44321) *
                         C1196 +
                     ((C27038 * C9818 + C27262 * C9716 +
                       (C27043 - C27042) * C9819 + (C27265 - C27264) * C44323) *
                          C14931 +
                      ((C22414 - C22413) * C9818 + (C22576 - C22575) * C9716 +
                       (C44138 * C23624 - C20063 * C23623) * C9819 +
                       (C44138 * C23864 - C20063 * C23863) * C44323) *
                          C44321) *
                         C44319) *
                        C44317) *
                   C44161) /
                  (p * q * std::sqrt(p + q));
    d2eezy[50] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C14931 * C152 - C14987 * C93 + C44321 * C694 - C14988 * C630) *
                C9818 +
            (C14931 * C491 - C14987 * C443 + C44321 * C1068 - C14988 * C1010) *
                C9716 +
            (C25177 - C25178 + C25179 - C25180) * C9819 +
            (C25607 - C25608 + C25609 - C25610) * C44323) *
               C44138 * C1196 +
           ((C25178 - C25177 + C25180 - C25179) * C9818 +
            (C25608 - C25607 + C25610 - C25609) * C9716 +
            (C14987 * C4005 - C14931 * C4055 + C14988 * C9234 -
             C44321 * C9292) *
                C9819 +
            (C14987 * C4269 - C14931 * C4313 + C14988 * C9558 -
             C44321 * C9612) *
                C44323) *
               C44138 * C44319) *
              C1766 +
          (((C14987 * C630 - C14931 * C694 + C14988 * C2212 - C44321 * C2262) *
                C9818 +
            (C14987 * C1010 - C14931 * C1068 + C14988 * C2476 -
             C44321 * C2520) *
                C9716 +
            (C26890 - C26891 + C26892 - C26893) * C9819 +
            (C27332 - C27333 + C27334 - C27335) * C44323) *
               C44138 * C1196 +
           ((C26891 - C26890 + C26893 - C26892) * C9818 +
            (C27333 - C27332 + C27335 - C27334) * C9716 +
            (C14931 * C9292 - C14987 * C9234 + C44321 * C23665 -
             C14988 * C23623) *
                C9819 +
            (C14931 * C9612 - C14987 * C9558 + C44321 * C23903 -
             C14988 * C23863) *
                C44323) *
               C44138 * C44319) *
              C44317) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eezz[50] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C9818 * C215 - C10144 * C93 - C9818 * C443 + C9716 * C545 +
             C9819 * C1330 - C10145 * C1200 - C9819 * C1580 + C44323 * C1698) *
                C14931 +
            (C25029 + C25030) * C44321) *
               C44138 * C1196 -
           ((C27414 + C27415) * C44321 +
            (C9819 * C4099 - C10145 * C4005 - C9819 * C4269 + C44323 * C4354 +
             C9818 * C1330 - C10144 * C1200 - C9818 * C1580 + C9716 * C1698) *
                C14931) *
               C44138 * C44319) *
              C1766 +
          (((C27415 + C27414) * C14931 +
            (C9818 * C7555 - C10144 * C7397 - C9818 * C7845 + C9716 * C7987 +
             C9819 * C23705 - C10145 * C23623 - C9819 * C23863 +
             C44323 * C23942) *
                C44321) *
               C44138 * C44319 -
           ((C26747 + C26748) * C44321 + (C25030 + C25029) * C14931) * C44138 *
               C1196) *
              C44317) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eexx[51] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C20063 * C98 - C20064 * C93 - C20063 * C99 + C44138 * C108) *
                 C9716 +
             C25109 * C44323) *
                C14931 +
            (C24460 + C24461) * C44321) *
               C3112 -
           ((C26823 + C26819) * C44321 + ((C20063 * C4008 - C20064 * C4005 -
                                           C20063 * C4009 + C44138 * C4014) *
                                              C44323 +
                                          C25109 * C9716) *
                                             C14931) *
               C44319) *
              C44195 * C1768 +
          (((C25110 * C9716 + (C20063 * C4010 - C20064 * C4006 -
                               C20063 * C4011 + C44138 * C4015) *
                                  C44323) *
                C14931 +
            (C24469 * C9716 + (C20063 * C9238 - C20064 * C9235 -
                               C20063 * C9239 + C44138 * C9241) *
                                  C44323) *
                C44321) *
               C44319 -
           ((C24470 + C24462) * C44321 +
            (C25110 * C44323 +
             (C20063 * C100 - C20064 * C94 - C20063 * C101 + C44138 * C109) *
                 C9716) *
                C14931) *
               C3112) *
              C44195 * C44315)) /
        (p * q * std::sqrt(p + q));
    d2eexy[51] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C14931 * C152 - C14987 * C93 + C44321 * C694 - C14988 * C630) *
                 C20063 +
             (C14931 * C157 - C14987 * C99 + C44321 * C698 - C14988 * C637) *
                 C44138) *
                C9716 +
            ((C25177 - C25178 + C25179 - C25180) * C20063 +
             (C25181 - C25182 + C25183 - C25184) * C44138) *
                C44323) *
               C3112 +
           (((C25178 - C25177 + C25180 - C25179) * C20063 +
             (C25182 - C25181 + C25184 - C25183) * C44138) *
                C9716 +
            ((C14987 * C4005 - C14931 * C4055 + C14988 * C9234 -
              C44321 * C9292) *
                 C20063 +
             (C14987 * C4009 - C14931 * C4058 + C14988 * C9237 -
              C44321 * C9294) *
                 C44138) *
                C44323) *
               C44319) *
              C44195 * C1768 +
          ((((C14991 - C14990 + C14993 - C14992) * C20063 +
             (C14995 - C14994 + C14997 - C14996) * C44138) *
                C9716 +
            ((C16204 - C16205 + C16206 - C16207) * C20063 +
             (C16208 - C16209 + C16210 - C16211) * C44138) *
                C44323) *
               C3112 +
           (((C16205 - C16204 + C16207 - C16206) * C20063 +
             (C16209 - C16208 + C16211 - C16210) * C44138) *
                C9716 +
            ((C14931 * C4056 - C14987 * C4006 + C44321 * C9293 -
              C14988 * C9235) *
                 C20063 +
             (C14931 * C4059 - C14987 * C4011 + C44321 * C9295 -
              C14988 * C9239) *
                 C44138) *
                C44323) *
               C44319) *
              C44195 * C44315)) /
        (p * q * std::sqrt(p + q));
    d2eexz[51] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C9716 * C215 - C9818 * C93 + C44323 * C1330 - C9819 * C1200) *
                 C20063 +
             (C9716 * C220 - C9818 * C99 + C44323 * C1334 - C9819 * C1207) *
                 C44138) *
                C14931 +
            ((C24603 - C24604 + C24605 - C24606) * C20063 +
             (C24607 - C24608 + C24609 - C24610) * C44138) *
                C44321) *
               C3112 +
           (((C9818 * C1200 - C9716 * C1330 + C9819 * C4005 - C44323 * C4099) *
                 C20063 +
             (C9818 * C1207 - C9716 * C1334 + C9819 * C4009 - C44323 * C4102) *
                 C44138) *
                C14931 +
            ((C26964 - C26965 + C26966 - C26967) * C20063 +
             (C26968 - C26969 + C26970 - C26971) * C44138) *
                C44321) *
               C44319) *
              C44195 * C1768 +
          ((((C9822 - C9821 + C9824 - C9823) * C20063 +
             (C9826 - C9825 + C9828 - C9827) * C44138) *
                C14931 +
            ((C10377 - C10378 + C10379 - C10380) * C20063 +
             (C10381 - C10382 + C10383 - C10384) * C44138) *
                C44321) *
               C3112 +
           (((C11047 - C11046 + C11049 - C11048) * C20063 +
             (C11051 - C11050 + C11053 - C11052) * C44138) *
                C14931 +
            ((C9716 * C2733 - C9818 * C2615 + C44323 * C9347 - C9819 * C9235) *
                 C20063 +
             (C9716 * C2736 - C9818 * C2620 + C44323 * C9349 - C9819 * C9239) *
                 C44138) *
                C44321) *
               C44319) *
              C44195 * C44315)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[51] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C44138 * C98 - C20063 * C93) * C14987 +
             (C44138 * C282 - C20063 * C277) * C14931 +
             (C20608 - C20609) * C14988 + (C20610 - C20611) * C44321) *
                C9716 +
            ((C25317 - C25318) * C14987 + (C25319 - C25320) * C14931 +
             C27038 * C14988 + C27039 * C44321) *
                C44323) *
               C3112 +
           (((C25318 - C25317) * C14987 + (C25320 - C25319) * C14931 +
             C27040 * C14988 + C27041 * C44321) *
                C9716 +
            ((C20063 * C4005 - C44138 * C4008) * C14987 +
             (C20063 * C4143 - C44138 * C4146) * C14931 +
             (C27042 - C27043) * C14988 + (C27044 - C27045) * C44321) *
                C44323) *
               C44319) *
              C44195 * C1768 +
          ((((C20063 * C94 - C44138 * C100) * C14987 +
             (C20063 * C278 - C44138 * C283) * C14931 +
             (C20616 - C20617) * C14988 + (C20618 - C20619) * C44321) *
                C9716 +
            ((C25321 - C25322) * C14987 + (C25323 - C25324) * C14931 +
             (C24677 - C24678) * C14988 + (C24679 - C24680) * C44321) *
                C44323) *
               C3112 +
           (((C25322 - C25321) * C14987 + (C25324 - C25323) * C14931 +
             (C24678 - C24677) * C14988 + (C24680 - C24679) * C44321) *
                C9716 +
            ((C44138 * C4010 - C20063 * C4006) * C14987 +
             (C44138 * C4147 - C20063 * C4144) * C14931 +
             (C44138 * C9238 - C20063 * C9235) * C14988 +
             (C44138 * C9403 - C20063 * C9401) * C44321) *
                C44323) *
               C44319) *
              C44195 * C44315)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[51] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C14987 * C152 - C15155 * C93 - C14987 * C277 + C14931 * C326 +
             C14988 * C694 - C15156 * C630 - C14988 * C826 + C44321 * C886) *
                C44138 * C9716 +
            (C25403 + C25404) * C44138 * C44323) *
               C3112 -
           ((C14988 * C9292 - C15156 * C9234 - C14988 * C9400 + C44321 * C9454 +
             C14987 * C4055 - C15155 * C4005 - C14987 * C4143 +
             C14931 * C4187) *
                C44138 * C44323 +
            (C25404 + C25403) * C44138 * C9716) *
               C44319) *
              C44195 * C1768 +
          (((C16423 + C16422) * C44138 * C9716 +
            (C14987 * C4056 - C15155 * C4006 - C14987 * C4144 + C14931 * C4188 +
             C14988 * C9293 - C15156 * C9235 - C14988 * C9401 +
             C44321 * C9455) *
                C44138 * C44323) *
               C44319 -
           ((C16422 + C16423) * C44138 * C44323 +
            (C15183 + C15182) * C44138 * C9716) *
               C3112) *
              C44195 * C44315)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[51] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C9716 * C215 - C9818 * C93 + C44323 * C1330 - C9819 * C1200) *
                C14987 +
            (C9716 * C390 - C9818 * C277 + C44323 * C1522 - C9819 * C1396) *
                C14931 +
            (C24603 - C24604 + C24605 - C24606) * C14988 +
            (C24813 - C24814 + C24815 - C24816) * C44321) *
               C44138 * C3112 +
           ((C9818 * C1200 - C9716 * C1330 + C9819 * C4005 - C44323 * C4099) *
                C14987 +
            (C9818 * C1396 - C9716 * C1522 + C9819 * C4143 - C44323 * C4228) *
                C14931 +
            (C26964 - C26965 + C26966 - C26967) * C14988 +
            (C27192 - C27193 + C27194 - C27195) * C44321) *
               C44138 * C44319) *
              C44195 * C1768 +
          (((C9822 - C9821 + C9824 - C9823) * C14987 +
            (C9988 - C9987 + C9990 - C9989) * C14931 +
            (C10377 - C10378 + C10379 - C10380) * C14988 +
            (C10590 - C10591 + C10592 - C10593) * C44321) *
               C44138 * C3112 +
           ((C11047 - C11046 + C11049 - C11048) * C14987 +
            (C11287 - C11286 + C11289 - C11288) * C14931 +
            (C9716 * C2733 - C9818 * C2615 + C44323 * C9347 - C9819 * C9235) *
                C14988 +
            (C9716 * C2898 - C9818 * C2789 + C44323 * C9507 - C9819 * C9401) *
                C44321) *
               C44138 * C44319) *
              C44195 * C44315)) /
        (p * q * std::sqrt(p + q));
    d2eezx[51] += (2 * std::pow(Pi, 2.5) *
                   (((((C44138 * C98 - C20063 * C93) * C9818 +
                       (C44138 * C448 - C20063 * C443) * C9716 +
                       (C25317 - C25318) * C9819 + (C25537 - C25538) * C44323) *
                          C14931 +
                      ((C20608 - C20609) * C9818 + (C20774 - C20775) * C9716 +
                       C27038 * C9819 + C27262 * C44323) *
                          C44321) *
                         C3112 +
                     (((C25318 - C25317) * C9818 + (C25538 - C25537) * C9716 +
                       (C20063 * C4005 - C44138 * C4008) * C9819 +
                       (C20063 * C4269 - C44138 * C4272) * C44323) *
                          C14931 +
                      (C27040 * C9818 + C27263 * C9716 +
                       (C27042 - C27043) * C9819 + (C27264 - C27265) * C44323) *
                          C44321) *
                         C44319) *
                        C44195 * C1768 +
                    ((((C20063 * C94 - C44138 * C100) * C9818 +
                       (C20063 * C444 - C44138 * C449) * C9716 +
                       (C25321 - C25322) * C9819 + (C25539 - C25540) * C44323) *
                          C14931 +
                      ((C20616 - C20617) * C9818 + (C20778 - C20779) * C9716 +
                       (C24677 - C24678) * C9819 + (C24883 - C24884) * C44323) *
                          C44321) *
                         C3112 +
                     (((C25322 - C25321) * C9818 + (C25540 - C25539) * C9716 +
                       (C44138 * C4010 - C20063 * C4006) * C9819 +
                       (C44138 * C4273 - C20063 * C4270) * C44323) *
                          C14931 +
                      ((C24678 - C24677) * C9818 + (C24884 - C24883) * C9716 +
                       (C44138 * C9238 - C20063 * C9235) * C9819 +
                       (C44138 * C9561 - C20063 * C9559) * C44323) *
                          C44321) *
                         C44319) *
                        C44195 * C44315)) /
                  (p * q * std::sqrt(p + q));
    d2eezy[51] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C14931 * C152 - C14987 * C93 + C44321 * C694 - C14988 * C630) *
                C9818 +
            (C14931 * C491 - C14987 * C443 + C44321 * C1068 - C14988 * C1010) *
                C9716 +
            (C25177 - C25178 + C25179 - C25180) * C9819 +
            (C25607 - C25608 + C25609 - C25610) * C44323) *
               C44138 * C3112 +
           ((C25178 - C25177 + C25180 - C25179) * C9818 +
            (C25608 - C25607 + C25610 - C25609) * C9716 +
            (C14987 * C4005 - C14931 * C4055 + C14988 * C9234 -
             C44321 * C9292) *
                C9819 +
            (C14987 * C4269 - C14931 * C4313 + C14988 * C9558 -
             C44321 * C9612) *
                C44323) *
               C44138 * C44319) *
              C44195 * C1768 +
          (((C14991 - C14990 + C14993 - C14992) * C9818 +
            (C15337 - C15336 + C15339 - C15338) * C9716 +
            (C16204 - C16205 + C16206 - C16207) * C9819 +
            (C16622 - C16623 + C16624 - C16625) * C44323) *
               C44138 * C3112 +
           ((C16205 - C16204 + C16207 - C16206) * C9818 +
            (C16623 - C16622 + C16625 - C16624) * C9716 +
            (C14931 * C4056 - C14987 * C4006 + C44321 * C9293 -
             C14988 * C9235) *
                C9819 +
            (C14931 * C4314 - C14987 * C4270 + C44321 * C9613 -
             C14988 * C9559) *
                C44323) *
               C44138 * C44319) *
              C44195 * C44315)) /
        (p * q * std::sqrt(p + q));
    d2eezz[51] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C9818 * C215 - C10144 * C93 - C9818 * C443 + C9716 * C545 +
             C9819 * C1330 - C10145 * C1200 - C9819 * C1580 + C44323 * C1698) *
                C14931 +
            (C25029 + C25030) * C44321) *
               C44138 * C3112 -
           ((C27414 + C27415) * C44321 +
            (C9819 * C4099 - C10145 * C4005 - C9819 * C4269 + C44323 * C4354 +
             C9818 * C1330 - C10144 * C1200 - C9818 * C1580 + C9716 * C1698) *
                C14931) *
               C44138 * C44319) *
              C44195 * C1768 +
          (((C11515 + C11514) * C14931 +
            (C9818 * C2733 - C10144 * C2615 - C9818 * C2951 + C9716 * C3060 +
             C9819 * C9347 - C10145 * C9235 - C9819 * C9559 + C44323 * C9665) *
                C44321) *
               C44138 * C44319 -
           ((C10806 + C10807) * C44321 + (C10172 + C10171) * C14931) * C44138 *
               C3112) *
              C44195 * C44315)) /
        (p * q * std::sqrt(p + q));
    d2eexx[52] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C20063 * C98 - C20064 * C93 - C20063 * C99 + C44138 * C108) *
                 C9716 +
             C25109 * C44323) *
                C14931 +
            (C24460 + C24461) * C44321) *
               C3112 -
           ((C26823 + C26819) * C44321 + ((C20063 * C4008 - C20064 * C4005 -
                                           C20063 * C4009 + C44138 * C4014) *
                                              C44323 +
                                          C25109 * C9716) *
                                             C14931) *
               C44319) *
              C624 +
          (((C26819 + C26823) * C14931 +
            (C22245 * C9716 + (C20063 * C23624 - C20064 * C23623 -
                               C20063 * C23625 + C44138 * C23626) *
                                  C44323) *
                C44321) *
               C44319 -
           ((C26321 + C26322) * C44321 + (C24461 + C24460) * C14931) * C3112) *
              C44317) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eexy[52] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C14931 * C152 - C14987 * C93 + C44321 * C694 - C14988 * C630) *
                 C20063 +
             (C14931 * C157 - C14987 * C99 + C44321 * C698 - C14988 * C637) *
                 C44138) *
                C9716 +
            ((C25177 - C25178 + C25179 - C25180) * C20063 +
             (C25181 - C25182 + C25183 - C25184) * C44138) *
                C44323) *
               C3112 +
           (((C25178 - C25177 + C25180 - C25179) * C20063 +
             (C25182 - C25181 + C25184 - C25183) * C44138) *
                C9716 +
            ((C14987 * C4005 - C14931 * C4055 + C14988 * C9234 -
              C44321 * C9292) *
                 C20063 +
             (C14987 * C4009 - C14931 * C4058 + C14988 * C9237 -
              C44321 * C9294) *
                 C44138) *
                C44323) *
               C44319) *
              C624 +
          ((((C14987 * C630 - C14931 * C694 + C14988 * C2212 - C44321 * C2262) *
                 C20063 +
             (C14987 * C637 - C14931 * C698 + C14988 * C2216 - C44321 * C2265) *
                 C44138) *
                C9716 +
            ((C26890 - C26891 + C26892 - C26893) * C20063 +
             (C26894 - C26895 + C26896 - C26897) * C44138) *
                C44323) *
               C3112 +
           (((C26891 - C26890 + C26893 - C26892) * C20063 +
             (C26895 - C26894 + C26897 - C26896) * C44138) *
                C9716 +
            ((C14931 * C9292 - C14987 * C9234 + C44321 * C23665 -
              C14988 * C23623) *
                 C20063 +
             (C14931 * C9294 - C14987 * C9237 + C44321 * C23666 -
              C14988 * C23625) *
                 C44138) *
                C44323) *
               C44319) *
              C44317) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eexz[52] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C9716 * C215 - C9818 * C93 + C44323 * C1330 - C9819 * C1200) *
                 C20063 +
             (C9716 * C220 - C9818 * C99 + C44323 * C1334 - C9819 * C1207) *
                 C44138) *
                C14931 +
            ((C24603 - C24604 + C24605 - C24606) * C20063 +
             (C24607 - C24608 + C24609 - C24610) * C44138) *
                C44321) *
               C3112 +
           (((C9818 * C1200 - C9716 * C1330 + C9819 * C4005 - C44323 * C4099) *
                 C20063 +
             (C9818 * C1207 - C9716 * C1334 + C9819 * C4009 - C44323 * C4102) *
                 C44138) *
                C14931 +
            ((C26964 - C26965 + C26966 - C26967) * C20063 +
             (C26968 - C26969 + C26970 - C26971) * C44138) *
                C44321) *
               C44319) *
              C624 +
          ((((C24604 - C24603 + C24606 - C24605) * C20063 +
             (C24608 - C24607 + C24610 - C24609) * C44138) *
                C14931 +
            ((C26423 - C26424 + C26425 - C26426) * C20063 +
             (C26427 - C26428 + C26429 - C26430) * C44138) *
                C44321) *
               C3112 +
           (((C26965 - C26964 + C26967 - C26966) * C20063 +
             (C26969 - C26968 + C26971 - C26970) * C44138) *
                C14931 +
            ((C9716 * C7555 - C9818 * C7397 + C44323 * C23705 -
              C9819 * C23623) *
                 C20063 +
             (C9716 * C7557 - C9818 * C7400 + C44323 * C23706 -
              C9819 * C23625) *
                 C44138) *
                C44321) *
               C44319) *
              C44317) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eeyx[52] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C44138 * C98 - C20063 * C93) * C14987 +
             (C44138 * C282 - C20063 * C277) * C14931 +
             (C20608 - C20609) * C14988 + (C20610 - C20611) * C44321) *
                C9716 +
            ((C25317 - C25318) * C14987 + (C25319 - C25320) * C14931 +
             C27038 * C14988 + C27039 * C44321) *
                C44323) *
               C3112 +
           (((C25318 - C25317) * C14987 + (C25320 - C25319) * C14931 +
             C27040 * C14988 + C27041 * C44321) *
                C9716 +
            ((C20063 * C4005 - C44138 * C4008) * C14987 +
             (C20063 * C4143 - C44138 * C4146) * C14931 +
             (C27042 - C27043) * C14988 + (C27044 - C27045) * C44321) *
                C44323) *
               C44319) *
              C624 +
          ((((C20609 - C20608) * C14987 + (C20611 - C20610) * C14931 +
             (C20613 - C20612) * C14988 + (C20615 - C20614) * C44321) *
                C9716 +
            (C27040 * C14987 + C27041 * C14931 + (C22413 - C22414) * C14988 +
             (C22415 - C22416) * C44321) *
                C44323) *
               C3112 +
           ((C27038 * C14987 + C27039 * C14931 + (C22414 - C22413) * C14988 +
             (C22416 - C22415) * C44321) *
                C9716 +
            ((C27043 - C27042) * C14987 + (C27045 - C27044) * C14931 +
             (C44138 * C23624 - C20063 * C23623) * C14988 +
             (C44138 * C23746 - C20063 * C23745) * C44321) *
                C44323) *
               C44319) *
              C44317) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eeyy[52] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C14987 * C152 - C15155 * C93 - C14987 * C277 + C14931 * C326 +
             C14988 * C694 - C15156 * C630 - C14988 * C826 + C44321 * C886) *
                C44138 * C9716 +
            (C25403 + C25404) * C44138 * C44323) *
               C3112 -
           ((C14988 * C9292 - C15156 * C9234 - C14988 * C9400 + C44321 * C9454 +
             C14987 * C4055 - C15155 * C4005 - C14987 * C4143 +
             C14931 * C4187) *
                C44138 * C44323 +
            (C25404 + C25403) * C44138 * C9716) *
               C44319) *
              C624 +
          (((C27124 + C27125) * C44138 * C9716 +
            (C14987 * C9292 - C15155 * C9234 - C14987 * C9400 + C14931 * C9454 +
             C14988 * C23665 - C15156 * C23623 - C14988 * C23745 +
             C44321 * C23785) *
                C44138 * C44323) *
               C44319 -
           ((C27125 + C27124) * C44138 * C44323 +
            (C14988 * C2262 - C15156 * C2212 - C14988 * C2350 + C44321 * C2394 +
             C14987 * C694 - C15155 * C630 - C14987 * C826 + C14931 * C886) *
                C44138 * C9716) *
               C3112) *
              C44317) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eeyz[52] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C9716 * C215 - C9818 * C93 + C44323 * C1330 - C9819 * C1200) *
                C14987 +
            (C9716 * C390 - C9818 * C277 + C44323 * C1522 - C9819 * C1396) *
                C14931 +
            (C24603 - C24604 + C24605 - C24606) * C14988 +
            (C24813 - C24814 + C24815 - C24816) * C44321) *
               C44138 * C3112 +
           ((C9818 * C1200 - C9716 * C1330 + C9819 * C4005 - C44323 * C4099) *
                C14987 +
            (C9818 * C1396 - C9716 * C1522 + C9819 * C4143 - C44323 * C4228) *
                C14931 +
            (C26964 - C26965 + C26966 - C26967) * C14988 +
            (C27192 - C27193 + C27194 - C27195) * C44321) *
               C44138 * C44319) *
              C624 +
          (((C24604 - C24603 + C24606 - C24605) * C14987 +
            (C24814 - C24813 + C24816 - C24815) * C14931 +
            (C26423 - C26424 + C26425 - C26426) * C14988 +
            (C26581 - C26582 + C26583 - C26584) * C44321) *
               C44138 * C3112 +
           ((C26965 - C26964 + C26967 - C26966) * C14987 +
            (C27193 - C27192 + C27195 - C27194) * C14931 +
            (C9716 * C7555 - C9818 * C7397 + C44323 * C23705 - C9819 * C23623) *
                C14988 +
            (C9716 * C7775 - C9818 * C7629 + C44323 * C23824 - C9819 * C23745) *
                C44321) *
               C44138 * C44319) *
              C44317) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eezx[52] += (2 * std::pow(Pi, 2.5) *
                   (((((C44138 * C98 - C20063 * C93) * C9818 +
                       (C44138 * C448 - C20063 * C443) * C9716 +
                       (C25317 - C25318) * C9819 + (C25537 - C25538) * C44323) *
                          C14931 +
                      ((C20608 - C20609) * C9818 + (C20774 - C20775) * C9716 +
                       C27038 * C9819 + C27262 * C44323) *
                          C44321) *
                         C3112 +
                     (((C25318 - C25317) * C9818 + (C25538 - C25537) * C9716 +
                       (C20063 * C4005 - C44138 * C4008) * C9819 +
                       (C20063 * C4269 - C44138 * C4272) * C44323) *
                          C14931 +
                      (C27040 * C9818 + C27263 * C9716 +
                       (C27042 - C27043) * C9819 + (C27264 - C27265) * C44323) *
                          C44321) *
                         C44319) *
                        C624 +
                    ((((C20609 - C20608) * C9818 + (C20775 - C20774) * C9716 +
                       C27040 * C9819 + C27263 * C44323) *
                          C14931 +
                      ((C20613 - C20612) * C9818 + (C20777 - C20776) * C9716 +
                       (C22413 - C22414) * C9819 + (C22575 - C22576) * C44323) *
                          C44321) *
                         C3112 +
                     ((C27038 * C9818 + C27262 * C9716 +
                       (C27043 - C27042) * C9819 + (C27265 - C27264) * C44323) *
                          C14931 +
                      ((C22414 - C22413) * C9818 + (C22576 - C22575) * C9716 +
                       (C44138 * C23624 - C20063 * C23623) * C9819 +
                       (C44138 * C23864 - C20063 * C23863) * C44323) *
                          C44321) *
                         C44319) *
                        C44317) *
                   C44161) /
                  (p * q * std::sqrt(p + q));
    d2eezy[52] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C14931 * C152 - C14987 * C93 + C44321 * C694 - C14988 * C630) *
                C9818 +
            (C14931 * C491 - C14987 * C443 + C44321 * C1068 - C14988 * C1010) *
                C9716 +
            (C25177 - C25178 + C25179 - C25180) * C9819 +
            (C25607 - C25608 + C25609 - C25610) * C44323) *
               C44138 * C3112 +
           ((C25178 - C25177 + C25180 - C25179) * C9818 +
            (C25608 - C25607 + C25610 - C25609) * C9716 +
            (C14987 * C4005 - C14931 * C4055 + C14988 * C9234 -
             C44321 * C9292) *
                C9819 +
            (C14987 * C4269 - C14931 * C4313 + C14988 * C9558 -
             C44321 * C9612) *
                C44323) *
               C44138 * C44319) *
              C624 +
          (((C14987 * C630 - C14931 * C694 + C14988 * C2212 - C44321 * C2262) *
                C9818 +
            (C14987 * C1010 - C14931 * C1068 + C14988 * C2476 -
             C44321 * C2520) *
                C9716 +
            (C26890 - C26891 + C26892 - C26893) * C9819 +
            (C27332 - C27333 + C27334 - C27335) * C44323) *
               C44138 * C3112 +
           ((C26891 - C26890 + C26893 - C26892) * C9818 +
            (C27333 - C27332 + C27335 - C27334) * C9716 +
            (C14931 * C9292 - C14987 * C9234 + C44321 * C23665 -
             C14988 * C23623) *
                C9819 +
            (C14931 * C9612 - C14987 * C9558 + C44321 * C23903 -
             C14988 * C23863) *
                C44323) *
               C44138 * C44319) *
              C44317) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eezz[52] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C9818 * C215 - C10144 * C93 - C9818 * C443 + C9716 * C545 +
             C9819 * C1330 - C10145 * C1200 - C9819 * C1580 + C44323 * C1698) *
                C14931 +
            (C25029 + C25030) * C44321) *
               C44138 * C3112 -
           ((C27414 + C27415) * C44321 +
            (C9819 * C4099 - C10145 * C4005 - C9819 * C4269 + C44323 * C4354 +
             C9818 * C1330 - C10144 * C1200 - C9818 * C1580 + C9716 * C1698) *
                C14931) *
               C44138 * C44319) *
              C624 +
          (((C27415 + C27414) * C14931 +
            (C9818 * C7555 - C10144 * C7397 - C9818 * C7845 + C9716 * C7987 +
             C9819 * C23705 - C10145 * C23623 - C9819 * C23863 +
             C44323 * C23942) *
                C44321) *
               C44138 * C44319 -
           ((C26747 + C26748) * C44321 + (C25030 + C25029) * C14931) * C44138 *
               C3112) *
              C44317) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eexx[53] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C20063 * C98 - C20064 * C93 - C20063 * C99 + C44138 * C108) *
                C9716 +
            C25109 * C44323) *
               C14931 +
           (C24460 + C24461) * C44321) *
              C4002 -
          ((C26823 + C26819) * C44321 +
           (C28664 * C44323 + C25109 * C9716) * C14931) *
              C4003 +
          ((C28664 * C9716 + (C20063 * C14408 - C20064 * C14406 -
                              C20063 * C14409 + C44138 * C14412) *
                                 C44323) *
               C14931 +
           (C26822 * C9716 + (C20063 * C28654 - C20064 * C28653 -
                              C20063 * C28655 + C44138 * C28656) *
                                 C44323) *
               C44321) *
              C4004) *
         C44195 * C44161) /
        (p * q * std::sqrt(p + q));
    d2eexy[53] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C14931 * C152 - C14987 * C93 + C44321 * C694 - C14988 * C630) *
                C20063 +
            (C14931 * C157 - C14987 * C99 + C44321 * C698 - C14988 * C637) *
                C44138) *
               C9716 +
           ((C25177 - C25178 + C25179 - C25180) * C20063 +
            (C25181 - C25182 + C25183 - C25184) * C44138) *
               C44323) *
              C4002 +
          (((C25178 - C25177 + C25180 - C25179) * C20063 +
            (C25182 - C25181 + C25184 - C25183) * C44138) *
               C9716 +
           ((C28717 - C28718 + C28719 - C28720) * C20063 +
            (C28721 - C28722 + C28723 - C28724) * C44138) *
               C44323) *
              C4003 +
          (((C28718 - C28717 + C28720 - C28719) * C20063 +
            (C28722 - C28721 + C28724 - C28723) * C44138) *
               C9716 +
           ((C14931 * C14478 - C14987 * C14406 + C44321 * C28714 -
             C14988 * C28653) *
                C20063 +
            (C14931 * C14480 - C14987 * C14409 + C44321 * C28715 -
             C14988 * C28655) *
                C44138) *
               C44323) *
              C4004) *
         C44195 * C44161) /
        (p * q * std::sqrt(p + q));
    d2eexz[53] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C9716 * C215 - C9818 * C93 + C44323 * C1330 - C9819 * C1200) *
                C20063 +
            (C9716 * C220 - C9818 * C99 + C44323 * C1334 - C9819 * C1207) *
                C44138) *
               C14931 +
           ((C24603 - C24604 + C24605 - C24606) * C20063 +
            (C24607 - C24608 + C24609 - C24610) * C44138) *
               C44321) *
              C4002 +
          (((C9818 * C1200 - C9716 * C1330 + C9819 * C4005 - C44323 * C4099) *
                C20063 +
            (C9818 * C1207 - C9716 * C1334 + C9819 * C4009 - C44323 * C4102) *
                C44138) *
               C14931 +
           ((C26964 - C26965 + C26966 - C26967) * C20063 +
            (C26968 - C26969 + C26970 - C26971) * C44138) *
               C44321) *
              C4003 +
          (((C9716 * C4099 - C9818 * C4005 + C44323 * C14536 - C9819 * C14406) *
                C20063 +
            (C9716 * C4102 - C9818 * C4009 + C44323 * C14538 - C9819 * C14409) *
                C44138) *
               C14931 +
           ((C9716 * C9346 - C9818 * C9234 + C44323 * C28774 - C9819 * C28653) *
                C20063 +
            (C9716 * C9348 - C9818 * C9237 + C44323 * C28775 - C9819 * C28655) *
                C44138) *
               C44321) *
              C4004) *
         C44195 * C44161) /
        (p * q * std::sqrt(p + q));
    d2eeyx[53] += (2 * std::pow(Pi, 2.5) *
                   ((((C44138 * C98 - C20063 * C93) * C14987 +
                      (C44138 * C282 - C20063 * C277) * C14931 +
                      (C20608 - C20609) * C14988 + (C20610 - C20611) * C44321) *
                         C9716 +
                     ((C25317 - C25318) * C14987 + (C25319 - C25320) * C14931 +
                      C27038 * C14988 + C27039 * C44321) *
                         C44323) *
                        C4002 +
                    (((C25318 - C25317) * C14987 + (C25320 - C25319) * C14931 +
                      C27040 * C14988 + C27041 * C44321) *
                         C9716 +
                     ((C28829 - C28830) * C14987 + (C28831 - C28832) * C14931 +
                      (C27042 - C27043) * C14988 + (C27044 - C27045) * C44321) *
                         C44323) *
                        C4003 +
                    (((C28830 - C28829) * C14987 + (C28832 - C28831) * C14931 +
                      (C27043 - C27042) * C14988 + (C27045 - C27044) * C44321) *
                         C9716 +
                     ((C44138 * C14408 - C20063 * C14406) * C14987 +
                      (C44138 * C14592 - C20063 * C14590) * C14931 +
                      (C44138 * C28654 - C20063 * C28653) * C14988 +
                      (C44138 * C28827 - C20063 * C28826) * C44321) *
                         C44323) *
                        C4004) *
                   C44195 * C44161) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[53] +=
        (2 * std::pow(Pi, 2.5) *
         (((C14987 * C152 - C15155 * C93 - C14987 * C277 + C14931 * C326 +
            C14988 * C694 - C15156 * C630 - C14988 * C826 + C44321 * C886) *
               C44138 * C9716 +
           (C25403 + C25404) * C44138 * C44323) *
              C4002 -
          ((C28896 + C28897) * C44138 * C44323 +
           (C25404 + C25403) * C44138 * C9716) *
              C4003 +
          ((C28897 + C28896) * C44138 * C9716 +
           (C14987 * C14478 - C15155 * C14406 - C14987 * C14590 +
            C14931 * C14652 + C14988 * C28714 - C15156 * C28653 -
            C14988 * C28826 + C44321 * C28882) *
               C44138 * C44323) *
              C4004) *
         C44195 * C44161) /
        (p * q * std::sqrt(p + q));
    d2eeyz[53] +=
        (2 * std::pow(Pi, 2.5) *
         (((C9716 * C215 - C9818 * C93 + C44323 * C1330 - C9819 * C1200) *
               C14987 +
           (C9716 * C390 - C9818 * C277 + C44323 * C1522 - C9819 * C1396) *
               C14931 +
           (C24603 - C24604 + C24605 - C24606) * C14988 +
           (C24813 - C24814 + C24815 - C24816) * C44321) *
              C44138 * C4002 +
          ((C9818 * C1200 - C9716 * C1330 + C9819 * C4005 - C44323 * C4099) *
               C14987 +
           (C9818 * C1396 - C9716 * C1522 + C9819 * C4143 - C44323 * C4228) *
               C14931 +
           (C26964 - C26965 + C26966 - C26967) * C14988 +
           (C27192 - C27193 + C27194 - C27195) * C44321) *
              C44138 * C4003 +
          ((C9716 * C4099 - C9818 * C4005 + C44323 * C14536 - C9819 * C14406) *
               C14987 +
           (C9716 * C4228 - C9818 * C4143 + C44323 * C14713 - C9819 * C14590) *
               C14931 +
           (C9716 * C9346 - C9818 * C9234 + C44323 * C28774 - C9819 * C28653) *
               C14988 +
           (C9716 * C9506 - C9818 * C9400 + C44323 * C28947 - C9819 * C28826) *
               C44321) *
              C44138 * C4004) *
         C44195 * C44161) /
        (p * q * std::sqrt(p + q));
    d2eezx[53] += (2 * std::pow(Pi, 2.5) *
                   ((((C44138 * C98 - C20063 * C93) * C9818 +
                      (C44138 * C448 - C20063 * C443) * C9716 +
                      (C25317 - C25318) * C9819 + (C25537 - C25538) * C44323) *
                         C14931 +
                     ((C20608 - C20609) * C9818 + (C20774 - C20775) * C9716 +
                      C27038 * C9819 + C27262 * C44323) *
                         C44321) *
                        C4002 +
                    (((C25318 - C25317) * C9818 + (C25538 - C25537) * C9716 +
                      (C28829 - C28830) * C9819 + (C29001 - C29002) * C44323) *
                         C14931 +
                     (C27040 * C9818 + C27263 * C9716 +
                      (C27042 - C27043) * C9819 + (C27264 - C27265) * C44323) *
                         C44321) *
                        C4003 +
                    (((C28830 - C28829) * C9818 + (C29002 - C29001) * C9716 +
                      (C44138 * C14408 - C20063 * C14406) * C9819 +
                      (C44138 * C14767 - C20063 * C14765) * C44323) *
                         C14931 +
                     ((C27043 - C27042) * C9818 + (C27265 - C27264) * C9716 +
                      (C44138 * C28654 - C20063 * C28653) * C9819 +
                      (C44138 * C28999 - C20063 * C28998) * C44323) *
                         C44321) *
                        C4004) *
                   C44195 * C44161) /
                  (p * q * std::sqrt(p + q));
    d2eezy[53] +=
        (2 * std::pow(Pi, 2.5) *
         (((C14931 * C152 - C14987 * C93 + C44321 * C694 - C14988 * C630) *
               C9818 +
           (C14931 * C491 - C14987 * C443 + C44321 * C1068 - C14988 * C1010) *
               C9716 +
           (C25177 - C25178 + C25179 - C25180) * C9819 +
           (C25607 - C25608 + C25609 - C25610) * C44323) *
              C44138 * C4002 +
          ((C25178 - C25177 + C25180 - C25179) * C9818 +
           (C25608 - C25607 + C25610 - C25609) * C9716 +
           (C28717 - C28718 + C28719 - C28720) * C9819 +
           (C29054 - C29055 + C29056 - C29057) * C44323) *
              C44138 * C4003 +
          ((C28718 - C28717 + C28720 - C28719) * C9818 +
           (C29055 - C29054 + C29057 - C29056) * C9716 +
           (C14931 * C14478 - C14987 * C14406 + C44321 * C28714 -
            C14988 * C28653) *
               C9819 +
           (C14931 * C14823 - C14987 * C14765 + C44321 * C29052 -
            C14988 * C28998) *
               C44323) *
              C44138 * C4004) *
         C44195 * C44161) /
        (p * q * std::sqrt(p + q));
    d2eezz[53] +=
        (2 * std::pow(Pi, 2.5) *
         (((C9818 * C215 - C10144 * C93 - C9818 * C443 + C9716 * C545 +
            C9819 * C1330 - C10145 * C1200 - C9819 * C1580 + C44323 * C1698) *
               C14931 +
           (C25029 + C25030) * C44321) *
              C44138 * C4002 -
          ((C27414 + C27415) * C44321 +
           (C9819 * C4099 - C10145 * C4005 - C9819 * C4269 + C44323 * C4354 +
            C9818 * C1330 - C10144 * C1200 - C9818 * C1580 + C9716 * C1698) *
               C14931) *
              C44138 * C4003 +
          ((C9818 * C4099 - C10144 * C4005 - C9818 * C4269 + C9716 * C4354 +
            C9819 * C14536 - C10145 * C14406 - C9819 * C14765 +
            C44323 * C14877) *
               C14931 +
           (C9818 * C9346 - C10144 * C9234 - C9818 * C9558 + C9716 * C9664 +
            C9819 * C28774 - C10145 * C28653 - C9819 * C28998 +
            C44323 * C29107) *
               C44321) *
              C44138 * C4004) *
         C44195 * C44161) /
        (p * q * std::sqrt(p + q));
    d2eexx[54] +=
        (2 * std::pow(Pi, 2.5) *
         (((C14933 * C98 - C14934 * C93 - C14933 * C99 + C14929 * C108 +
            C14935 * C100 - C14936 * C94 - C14935 * C101 + C44312 * C109) *
               C29158 +
           (C14933 * C1206 - C14934 * C1200 - C14933 * C1207 + C14929 * C1212 +
            C14935 * C1204 - C14936 * C1199 - C14935 * C1205 + C44312 * C1211) *
               C44323) *
              C44245 * C44212 * C44195 * C84 -
          ((C14935 * C1202 - C14936 * C1198 - C14935 * C1203 + C44312 * C1210 +
            C14933 * C1204 - C14934 * C1199 - C14933 * C1205 + C14929 * C1211) *
               C44323 +
           (C14935 * C102 - C14936 * C95 - C14935 * C103 + C44312 * C110 +
            C14933 * C100 - C14934 * C94 - C14933 * C101 + C14929 * C109) *
               C29158) *
              C44245 * C44212 * C44195 * C85 +
          ((C14933 * C102 - C14934 * C95 - C14933 * C103 + C14929 * C110 +
            C14935 * C104 - C14936 * C96 - C14935 * C105 + C44312 * C111) *
               C29158 +
           (C14933 * C1202 - C14934 * C1198 - C14933 * C1203 + C14929 * C1210 +
            C14935 * C1208 - C14936 * C1201 - C14935 * C1209 + C44312 * C1213) *
               C44323) *
              C44245 * C44212 * C44195 * C86)) /
        (p * q * std::sqrt(p + q));
    d2eexy[54] += (2 * std::pow(Pi, 2.5) *
                   ((((C44245 * C152 - C151 * C93) * C14933 +
                      (C44245 * C157 - C151 * C99) * C14929 +
                      (C163 - C164) * C14935 + (C165 - C166) * C44312) *
                         C29158 +
                     ((C10968 - C10969) * C14933 + (C10970 - C10971) * C14929 +
                      C10972 * C14935 + C10973 * C44312) *
                         C44323) *
                        C44212 * C44195 * C84 +
                    (((C164 - C163) * C14933 + (C166 - C165) * C14929 +
                      (C168 - C167) * C14935 + (C170 - C169) * C44312) *
                         C29158 +
                     (C10974 * C14933 + C10975 * C14929 +
                      (C1277 - C1278) * C14935 + (C1279 - C1280) * C44312) *
                         C44323) *
                        C44212 * C44195 * C85 +
                    ((C175 * C14933 + C176 * C14929 + (C172 - C171) * C14935 +
                      (C174 - C173) * C44312) *
                         C29158 +
                     ((C1278 - C1277) * C14933 + (C1280 - C1279) * C14929 +
                      (C44245 * C1267 - C151 * C1201) * C14935 +
                      (C44245 * C1271 - C151 * C1209) * C44312) *
                         C44323) *
                        C44212 * C44195 * C86)) /
                  (p * q * std::sqrt(p + q));
    d2eexz[54] +=
        (2 * std::pow(Pi, 2.5) *
         (((C29158 * C215 - C29260 * C93 + C44323 * C1330 - C29261 * C1200) *
               C14933 +
           (C29158 * C220 - C29260 * C99 + C44323 * C1334 - C29261 * C1207) *
               C14929 +
           (C29263 - C29264 + C29265 - C29266) * C14935 +
           (C29267 - C29268 + C29269 - C29270) * C44312) *
              C44245 * C44212 * C44195 * C84 +
          ((C29264 - C29263 + C29266 - C29265) * C14933 +
           (C29268 - C29267 + C29270 - C29269) * C14929 +
           (C29271 - C29272 + C29273 - C29274) * C14935 +
           (C29275 - C29276 + C29277 - C29278) * C44312) *
              C44245 * C44212 * C44195 * C85 +
          ((C29272 - C29271 + C29274 - C29273) * C14933 +
           (C29276 - C29275 + C29278 - C29277) * C14929 +
           (C29158 * C218 - C29260 * C96 + C44323 * C1333 - C29261 * C1201) *
               C14935 +
           (C29158 * C223 - C29260 * C105 + C44323 * C1337 - C29261 * C1209) *
               C44312) *
              C44245 * C44212 * C44195 * C86)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[54] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C14929 * C98 - C14933 * C93 + C44312 * C100 - C14935 * C94) *
                C151 +
            (C14929 * C282 - C14933 * C277 + C44312 * C283 - C14935 * C278) *
                C44245) *
               C29158 +
           ((C14929 * C1206 - C14933 * C1200 + C44312 * C1204 -
             C14935 * C1199) *
                C151 +
            (C14929 * C1400 - C14933 * C1396 + C44312 * C1401 -
             C14935 * C1397) *
                C44245) *
               C44323) *
              C44212 * C44195 * C84 +
          (((C14933 * C94 - C14929 * C100 + C14935 * C95 - C44312 * C102) *
                C151 +
            (C14933 * C278 - C14929 * C283 + C14935 * C279 - C44312 * C284) *
                C44245) *
               C29158 +
           ((C14933 * C1199 - C14929 * C1204 + C14935 * C1198 -
             C44312 * C1202) *
                C151 +
            (C14933 * C1397 - C14929 * C1401 + C14935 * C1398 -
             C44312 * C1402) *
                C44245) *
               C44323) *
              C44212 * C44195 * C85 +
          (((C14929 * C102 - C14933 * C95 + C44312 * C104 - C14935 * C96) *
                C151 +
            (C14929 * C284 - C14933 * C279 + C44312 * C285 - C14935 * C280) *
                C44245) *
               C29158 +
           ((C14929 * C1202 - C14933 * C1198 + C44312 * C1208 -
             C14935 * C1201) *
                C151 +
            (C14929 * C1402 - C14933 * C1398 + C44312 * C1403 -
             C14935 * C1399) *
                C44245) *
               C44323) *
              C44212 * C44195 * C86)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[54] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C151 * C152 - C325 * C93 - C151 * C277 + C44245 * C326) * C14929 +
            C350 * C44312) *
               C29158 +
           (C11217 * C14929 + C1472 * C44312) * C44323) *
              C44212 * C44195 * C84 -
          ((C1471 * C44312 + C1472 * C14929) * C44323 +
           (C351 * C44312 + C350 * C14929) * C29158) *
              C44212 * C44195 * C85 +
          ((C351 * C14929 + C352 * C44312) * C29158 +
           (C1471 * C14929 +
            (C151 * C1267 - C325 * C1201 - C151 * C1399 + C44245 * C1457) *
                C44312) *
               C44323) *
              C44212 * C44195 * C86)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[54] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C29158 * C215 - C29260 * C93 + C44323 * C1330 - C29261 * C1200) *
                C151 +
            (C29158 * C390 - C29260 * C277 + C44323 * C1522 - C29261 * C1396) *
                C44245) *
               C14929 +
           ((C29263 - C29264 + C29265 - C29266) * C151 +
            (C29429 - C29430 + C29431 - C29432) * C44245) *
               C44312) *
              C44212 * C44195 * C84 +
          (((C29264 - C29263 + C29266 - C29265) * C151 +
            (C29430 - C29429 + C29432 - C29431) * C44245) *
               C14929 +
           ((C29271 - C29272 + C29273 - C29274) * C151 +
            (C29433 - C29434 + C29435 - C29436) * C44245) *
               C44312) *
              C44212 * C44195 * C85 +
          (((C29272 - C29271 + C29274 - C29273) * C151 +
            (C29434 - C29433 + C29436 - C29435) * C44245) *
               C14929 +
           ((C29158 * C218 - C29260 * C96 + C44323 * C1333 - C29261 * C1201) *
                C151 +
            (C29158 * C393 - C29260 * C280 + C44323 * C1525 - C29261 * C1399) *
                C44245) *
               C44312) *
              C44212 * C44195 * C86)) /
        (p * q * std::sqrt(p + q));
    d2eezx[54] +=
        (2 * std::pow(Pi, 2.5) *
         (((C14929 * C98 - C14933 * C93 + C44312 * C100 - C14935 * C94) *
               C29260 +
           (C14929 * C448 - C14933 * C443 + C44312 * C449 - C14935 * C444) *
               C29158 +
           (C14929 * C1206 - C14933 * C1200 + C44312 * C1204 - C14935 * C1199) *
               C29261 +
           (C14929 * C1584 - C14933 * C1580 + C44312 * C1585 - C14935 * C1581) *
               C44323) *
              C44245 * C44212 * C44195 * C84 +
          ((C14933 * C94 - C14929 * C100 + C14935 * C95 - C44312 * C102) *
               C29260 +
           (C14933 * C444 - C14929 * C449 + C14935 * C445 - C44312 * C450) *
               C29158 +
           (C14933 * C1199 - C14929 * C1204 + C14935 * C1198 - C44312 * C1202) *
               C29261 +
           (C14933 * C1581 - C14929 * C1585 + C14935 * C1582 - C44312 * C1586) *
               C44323) *
              C44245 * C44212 * C44195 * C85 +
          ((C14929 * C102 - C14933 * C95 + C44312 * C104 - C14935 * C96) *
               C29260 +
           (C14929 * C450 - C14933 * C445 + C44312 * C451 - C14935 * C446) *
               C29158 +
           (C14929 * C1202 - C14933 * C1198 + C44312 * C1208 - C14935 * C1201) *
               C29261 +
           (C14929 * C1586 - C14933 * C1582 + C44312 * C1587 - C14935 * C1583) *
               C44323) *
              C44245 * C44212 * C44195 * C86)) /
        (p * q * std::sqrt(p + q));
    d2eezy[54] += (2 * std::pow(Pi, 2.5) *
                   ((((C44245 * C152 - C151 * C93) * C29260 +
                      (C44245 * C491 - C151 * C443) * C29158 +
                      (C10968 - C10969) * C29261 + (C11430 - C11431) * C44323) *
                         C14929 +
                     ((C163 - C164) * C29260 + (C497 - C498) * C29158 +
                      C10972 * C29261 + C11432 * C44323) *
                         C44312) *
                        C44212 * C44195 * C84 +
                    (((C164 - C163) * C29260 + (C498 - C497) * C29158 +
                      C10974 * C29261 + C11433 * C44323) *
                         C14929 +
                     ((C168 - C167) * C29260 + (C501 - C500) * C29158 +
                      (C1277 - C1278) * C29261 + (C1645 - C1646) * C44323) *
                         C44312) *
                        C44212 * C44195 * C85 +
                    ((C175 * C29260 + C504 * C29158 + (C1278 - C1277) * C29261 +
                      (C1646 - C1645) * C44323) *
                         C14929 +
                     ((C172 - C171) * C29260 + (C503 - C502) * C29158 +
                      (C44245 * C1267 - C151 * C1201) * C29261 +
                      (C44245 * C1641 - C151 * C1583) * C44323) *
                         C44312) *
                        C44212 * C44195 * C86)) /
                  (p * q * std::sqrt(p + q));
    d2eezz[54] +=
        (2 * std::pow(Pi, 2.5) *
         (((C29260 * C215 - C29586 * C93 - C29260 * C443 + C29158 * C545 +
            C29261 * C1330 - C29587 * C1200 - C29261 * C1580 + C44323 * C1698) *
               C44245 * C14929 +
           (C29613 + C29614) * C44245 * C44312) *
              C44212 * C44195 * C84 -
          ((C29615 + C29616) * C44245 * C44312 +
           (C29614 + C29613) * C44245 * C14929) *
              C44212 * C44195 * C85 +
          ((C29616 + C29615) * C44245 * C14929 +
           (C29260 * C218 - C29586 * C96 - C29260 * C446 + C29158 * C548 +
            C29261 * C1333 - C29587 * C1201 - C29261 * C1583 + C44323 * C1699) *
               C44245 * C44312) *
              C44212 * C44195 * C86)) /
        (p * q * std::sqrt(p + q));
    d2eexx[55] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C14933 * C98 - C14934 * C93 - C14933 * C99 + C14929 * C108 +
             C14935 * C100 - C14936 * C94 - C14935 * C101 + C44312 * C109) *
                C29158 +
            (C14933 * C1206 - C14934 * C1200 - C14933 * C1207 + C14929 * C1212 +
             C14935 * C1204 - C14936 * C1199 - C14935 * C1205 +
             C44312 * C1211) *
                C44323) *
               C44245 * C44212 * C624 -
           ((C17842 + C17843) * C44323 + (C15489 + C15488) * C29158) * C44245 *
               C44212 * C44317) *
              C626 +
          (((C15490 + C15491) * C29158 +
            (C14933 * C2619 - C14934 * C2615 - C14933 * C2620 + C14929 * C2624 +
             C14935 * C2621 - C14936 * C2616 - C14935 * C2622 +
             C44312 * C2625) *
                C44323) *
               C44245 * C44212 * C44317 -
           ((C14935 * C1202 - C14936 * C1198 - C14935 * C1203 + C44312 * C1210 +
             C14933 * C1204 - C14934 * C1199 - C14933 * C1205 +
             C14929 * C1211) *
                C44323 +
            (C14935 * C102 - C14936 * C95 - C14935 * C103 + C44312 * C110 +
             C14933 * C100 - C14934 * C94 - C14933 * C101 + C14929 * C109) *
                C29158) *
               C44245 * C44212 * C624) *
              C44315)) /
        (p * q * std::sqrt(p + q));
    d2eexy[55] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C44245 * C152 - C151 * C93) * C14933 +
             (C44245 * C157 - C151 * C99) * C14929 + (C163 - C164) * C14935 +
             (C165 - C166) * C44312) *
                C29158 +
            ((C10968 - C10969) * C14933 + (C10970 - C10971) * C14929 +
             C10972 * C14935 + C10973 * C44312) *
                C44323) *
               C44212 * C624 +
           (((C151 * C630 - C44245 * C694) * C14933 +
             (C151 * C637 - C44245 * C698) * C14929 + (C703 - C704) * C14935 +
             (C705 - C706) * C44312) *
                C29158 +
            ((C12692 - C12693) * C14933 + (C12694 - C12695) * C14929 +
             (C10307 - C10308) * C14935 + (C10309 - C10310) * C44312) *
                C44323) *
               C44212 * C44317) *
              C626 +
          ((((C164 - C163) * C14933 + (C166 - C165) * C14929 +
             (C168 - C167) * C14935 + (C170 - C169) * C44312) *
                C29158 +
            (C10974 * C14933 + C10975 * C14929 + (C1277 - C1278) * C14935 +
             (C1279 - C1280) * C44312) *
                C44323) *
               C44212 * C624 +
           (((C704 - C703) * C14933 + (C706 - C705) * C14929 +
             (C708 - C707) * C14935 + (C710 - C709) * C44312) *
                C29158 +
            ((C10308 - C10307) * C14933 + (C10310 - C10309) * C14929 +
             (C44245 * C2678 - C151 * C2616) * C14935 +
             (C44245 * C2681 - C151 * C2622) * C44312) *
                C44323) *
               C44212 * C44317) *
              C44315)) /
        (p * q * std::sqrt(p + q));
    d2eexz[55] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C29158 * C215 - C29260 * C93 + C44323 * C1330 - C29261 * C1200) *
                C14933 +
            (C29158 * C220 - C29260 * C99 + C44323 * C1334 - C29261 * C1207) *
                C14929 +
            (C29263 - C29264 + C29265 - C29266) * C14935 +
            (C29267 - C29268 + C29269 - C29270) * C44312) *
               C44245 * C44212 * C624 +
           ((C29260 * C630 - C29158 * C760 + C29261 * C2614 - C44323 * C2732) *
                C14933 +
            (C29260 * C637 - C29158 * C764 + C29261 * C2618 - C44323 * C2735) *
                C14929 +
            (C29815 - C29816 + C29817 - C29818) * C14935 +
            (C29819 - C29820 + C29821 - C29822) * C44312) *
               C44245 * C44212 * C44317) *
              C626 +
          (((C29264 - C29263 + C29266 - C29265) * C14933 +
            (C29268 - C29267 + C29270 - C29269) * C14929 +
            (C29271 - C29272 + C29273 - C29274) * C14935 +
            (C29275 - C29276 + C29277 - C29278) * C44312) *
               C44245 * C44212 * C624 +
           ((C29816 - C29815 + C29818 - C29817) * C14933 +
            (C29820 - C29819 + C29822 - C29821) * C14929 +
            (C29158 * C762 - C29260 * C628 + C44323 * C2734 - C29261 * C2616) *
                C14935 +
            (C29158 * C766 - C29260 * C633 + C44323 * C2737 - C29261 * C2622) *
                C44312) *
               C44245 * C44212 * C44317) *
              C44315)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[55] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C14929 * C98 - C14933 * C93 + C44312 * C100 - C14935 * C94) *
                 C151 +
             (C14929 * C282 - C14933 * C277 + C44312 * C283 - C14935 * C278) *
                 C44245) *
                C29158 +
            ((C14929 * C1206 - C14933 * C1200 + C44312 * C1204 -
              C14935 * C1199) *
                 C151 +
             (C14929 * C1400 - C14933 * C1396 + C44312 * C1401 -
              C14935 * C1397) *
                 C44245) *
                C44323) *
               C44212 * C624 +
           (((C15699 - C15698 + C15701 - C15700) * C151 +
             (C15703 - C15702 + C15705 - C15704) * C44245) *
                C29158 +
            ((C18042 - C18043 + C18044 - C18045) * C151 +
             (C18046 - C18047 + C18048 - C18049) * C44245) *
                C44323) *
               C44212 * C44317) *
              C626 +
          ((((C14933 * C94 - C14929 * C100 + C14935 * C95 - C44312 * C102) *
                 C151 +
             (C14933 * C278 - C14929 * C283 + C14935 * C279 - C44312 * C284) *
                 C44245) *
                C29158 +
            ((C14933 * C1199 - C14929 * C1204 + C14935 * C1198 -
              C44312 * C1202) *
                 C151 +
             (C14933 * C1397 - C14929 * C1401 + C14935 * C1398 -
              C44312 * C1402) *
                 C44245) *
                C44323) *
               C44212 * C624 +
           (((C15707 - C15706 + C15709 - C15708) * C151 +
             (C15711 - C15710 + C15713 - C15712) * C44245) *
                C29158 +
            ((C14929 * C2619 - C14933 * C2615 + C44312 * C2621 -
              C14935 * C2616) *
                 C151 +
             (C14929 * C2792 - C14933 * C2789 + C44312 * C2793 -
              C14935 * C2790) *
                 C44245) *
                C44323) *
               C44212 * C44317) *
              C44315)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[55] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C151 * C152 - C325 * C93 - C151 * C277 + C44245 * C326) * C14929 +
             C350 * C44312) *
                C29158 +
            (C11217 * C14929 + C1472 * C44312) * C44323) *
               C44212 * C624 -
           ((C10523 * C44312 + C12901 * C14929) * C44323 +
            (C902 * C44312 +
             (C151 * C694 - C325 * C630 - C151 * C826 + C44245 * C886) *
                 C14929) *
                C29158) *
               C44212 * C44317) *
              C626 +
          (((C902 * C14929 + C901 * C44312) * C29158 +
            (C10523 * C14929 +
             (C151 * C2678 - C325 * C2616 - C151 * C2790 + C44245 * C2846) *
                 C44312) *
                C44323) *
               C44212 * C44317 -
           ((C1471 * C44312 + C1472 * C14929) * C44323 +
            (C351 * C44312 + C350 * C14929) * C29158) *
               C44212 * C624) *
              C44315)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[55] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C29158 * C215 - C29260 * C93 + C44323 * C1330 - C29261 * C1200) *
                 C151 +
             (C29158 * C390 - C29260 * C277 + C44323 * C1522 - C29261 * C1396) *
                 C44245) *
                C14929 +
            ((C29263 - C29264 + C29265 - C29266) * C151 +
             (C29429 - C29430 + C29431 - C29432) * C44245) *
                C44312) *
               C44212 * C624 +
           (((C29260 * C630 - C29158 * C760 + C29261 * C2614 - C44323 * C2732) *
                 C151 +
             (C29260 * C826 - C29158 * C952 + C29261 * C2788 - C44323 * C2897) *
                 C44245) *
                C14929 +
            ((C29815 - C29816 + C29817 - C29818) * C151 +
             (C30021 - C30022 + C30023 - C30024) * C44245) *
                C44312) *
               C44212 * C44317) *
              C626 +
          ((((C29264 - C29263 + C29266 - C29265) * C151 +
             (C29430 - C29429 + C29432 - C29431) * C44245) *
                C14929 +
            ((C29271 - C29272 + C29273 - C29274) * C151 +
             (C29433 - C29434 + C29435 - C29436) * C44245) *
                C44312) *
               C44212 * C624 +
           (((C29816 - C29815 + C29818 - C29817) * C151 +
             (C30022 - C30021 + C30024 - C30023) * C44245) *
                C14929 +
            ((C29158 * C762 - C29260 * C628 + C44323 * C2734 - C29261 * C2616) *
                 C151 +
             (C29158 * C954 - C29260 * C828 + C44323 * C2899 - C29261 * C2790) *
                 C44245) *
                C44312) *
               C44212 * C44317) *
              C44315)) /
        (p * q * std::sqrt(p + q));
    d2eezx[55] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C14929 * C98 - C14933 * C93 + C44312 * C100 - C14935 * C94) *
                C29260 +
            (C14929 * C448 - C14933 * C443 + C44312 * C449 - C14935 * C444) *
                C29158 +
            (C14929 * C1206 - C14933 * C1200 + C44312 * C1204 -
             C14935 * C1199) *
                C29261 +
            (C14929 * C1584 - C14933 * C1580 + C44312 * C1585 -
             C14935 * C1581) *
                C44323) *
               C44245 * C44212 * C624 +
           ((C15699 - C15698 + C15701 - C15700) * C29260 +
            (C15927 - C15926 + C15929 - C15928) * C29158 +
            (C18042 - C18043 + C18044 - C18045) * C29261 +
            (C18248 - C18249 + C18250 - C18251) * C44323) *
               C44245 * C44212 * C44317) *
              C626 +
          (((C14933 * C94 - C14929 * C100 + C14935 * C95 - C44312 * C102) *
                C29260 +
            (C14933 * C444 - C14929 * C449 + C14935 * C445 - C44312 * C450) *
                C29158 +
            (C14933 * C1199 - C14929 * C1204 + C14935 * C1198 -
             C44312 * C1202) *
                C29261 +
            (C14933 * C1581 - C14929 * C1585 + C14935 * C1582 -
             C44312 * C1586) *
                C44323) *
               C44245 * C44212 * C624 +
           ((C15707 - C15706 + C15709 - C15708) * C29260 +
            (C15931 - C15930 + C15933 - C15932) * C29158 +
            (C14929 * C2619 - C14933 * C2615 + C44312 * C2621 -
             C14935 * C2616) *
                C29261 +
            (C14929 * C2954 - C14933 * C2951 + C44312 * C2955 -
             C14935 * C2952) *
                C44323) *
               C44245 * C44212 * C44317) *
              C44315)) /
        (p * q * std::sqrt(p + q));
    d2eezy[55] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C44245 * C152 - C151 * C93) * C29260 +
             (C44245 * C491 - C151 * C443) * C29158 +
             (C10968 - C10969) * C29261 + (C11430 - C11431) * C44323) *
                C14929 +
            ((C163 - C164) * C29260 + (C497 - C498) * C29158 + C10972 * C29261 +
             C11432 * C44323) *
                C44312) *
               C44212 * C624 +
           (((C151 * C630 - C44245 * C694) * C29260 +
             (C151 * C1010 - C44245 * C1068) * C29158 +
             (C12692 - C12693) * C29261 + (C13101 - C13102) * C44323) *
                C14929 +
            ((C703 - C704) * C29260 + (C1073 - C1074) * C29158 +
             (C10307 - C10308) * C29261 + (C10726 - C10727) * C44323) *
                C44312) *
               C44212 * C44317) *
              C626 +
          ((((C164 - C163) * C29260 + (C498 - C497) * C29158 + C10974 * C29261 +
             C11433 * C44323) *
                C14929 +
            ((C168 - C167) * C29260 + (C501 - C500) * C29158 +
             (C1277 - C1278) * C29261 + (C1645 - C1646) * C44323) *
                C44312) *
               C44212 * C624 +
           (((C704 - C703) * C29260 + (C1074 - C1073) * C29158 +
             (C10308 - C10307) * C29261 + (C10727 - C10726) * C44323) *
                C14929 +
            ((C708 - C707) * C29260 + (C1076 - C1075) * C29158 +
             (C44245 * C2678 - C151 * C2616) * C29261 +
             (C44245 * C3008 - C151 * C2952) * C44323) *
                C44312) *
               C44212 * C44317) *
              C44315)) /
        (p * q * std::sqrt(p + q));
    d2eezz[55] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C29260 * C215 - C29586 * C93 - C29260 * C443 + C29158 * C545 +
             C29261 * C1330 - C29587 * C1200 - C29261 * C1580 +
             C44323 * C1698) *
                C44245 * C14929 +
            (C29613 + C29614) * C44245 * C44312) *
               C44212 * C624 -
           ((C30235 + C30236) * C44245 * C44312 +
            (C29261 * C2732 - C29587 * C2614 - C29261 * C2950 + C44323 * C3059 +
             C29260 * C760 - C29586 * C630 - C29260 * C1010 + C29158 * C1128) *
                C44245 * C14929) *
               C44212 * C44317) *
              C626 +
          (((C30236 + C30235) * C44245 * C14929 +
            (C29260 * C762 - C29586 * C628 - C29260 * C1012 + C29158 * C1126 +
             C29261 * C2734 - C29587 * C2616 - C29261 * C2952 +
             C44323 * C3061) *
                C44245 * C44312) *
               C44212 * C44317 -
           ((C29615 + C29616) * C44245 * C44312 +
            (C29614 + C29613) * C44245 * C14929) *
               C44212 * C624) *
              C44315)) /
        (p * q * std::sqrt(p + q));
    d2eexx[56] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C14933 * C98 - C14934 * C93 - C14933 * C99 + C14929 * C108 +
             C14935 * C100 - C14936 * C94 - C14935 * C101 + C44312 * C109) *
                C29158 +
            (C30327 + C30328) * C44323) *
               C44245 * C1196 -
           ((C14935 * C4010 - C14936 * C4006 - C14935 * C4011 + C44312 * C4015 +
             C14933 * C4008 - C14934 * C4005 - C14933 * C4009 +
             C14929 * C4014) *
                C44323 +
            (C30328 + C30327) * C29158) *
               C44245 * C44319) *
              C44195 * C626 +
          (((C30329 + C30330) * C29158 +
            (C14933 * C4010 - C14934 * C4006 - C14933 * C4011 + C14929 * C4015 +
             C14935 * C4012 - C14936 * C4007 - C14935 * C4013 +
             C44312 * C4016) *
                C44323) *
               C44245 * C44319 -
           ((C30330 + C30329) * C44323 +
            (C14935 * C102 - C14936 * C95 - C14935 * C103 + C44312 * C110 +
             C14933 * C100 - C14934 * C94 - C14933 * C101 + C14929 * C109) *
                C29158) *
               C44245 * C1196) *
              C44195 * C44315)) /
        (p * q * std::sqrt(p + q));
    d2eexy[56] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C44245 * C152 - C151 * C93) * C14933 +
             (C44245 * C157 - C151 * C99) * C14929 + (C163 - C164) * C14935 +
             (C165 - C166) * C44312) *
                C29158 +
            ((C10968 - C10969) * C14933 + (C10970 - C10971) * C14929 +
             C10972 * C14935 + C10973 * C44312) *
                C44323) *
               C1196 +
           (((C10969 - C10968) * C14933 + (C10971 - C10970) * C14929 +
             C10974 * C14935 + C10975 * C44312) *
                C29158 +
            ((C14483 - C14484) * C14933 + (C14485 - C14486) * C14929 +
             (C10976 - C10977) * C14935 + (C10978 - C10979) * C44312) *
                C44323) *
               C44319) *
              C44195 * C626 +
          ((((C164 - C163) * C14933 + (C166 - C165) * C14929 +
             (C168 - C167) * C14935 + (C170 - C169) * C44312) *
                C29158 +
            (C10974 * C14933 + C10975 * C14929 + (C1277 - C1278) * C14935 +
             (C1279 - C1280) * C44312) *
                C44323) *
               C1196 +
           ((C10972 * C14933 + C10973 * C14929 + (C1278 - C1277) * C14935 +
             (C1280 - C1279) * C44312) *
                C29158 +
            ((C10977 - C10976) * C14933 + (C10979 - C10978) * C14929 +
             (C44245 * C4057 - C151 * C4007) * C14935 +
             (C44245 * C4060 - C151 * C4013) * C44312) *
                C44323) *
               C44319) *
              C44195 * C44315)) /
        (p * q * std::sqrt(p + q));
    d2eexz[56] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C29158 * C215 - C29260 * C93 + C44323 * C1330 - C29261 * C1200) *
                C14933 +
            (C29158 * C220 - C29260 * C99 + C44323 * C1334 - C29261 * C1207) *
                C14929 +
            (C29263 - C29264 + C29265 - C29266) * C14935 +
            (C29267 - C29268 + C29269 - C29270) * C44312) *
               C44245 * C1196 +
           ((C29260 * C1200 - C29158 * C1330 + C29261 * C4005 -
             C44323 * C4099) *
                C14933 +
            (C29260 * C1207 - C29158 * C1334 + C29261 * C4009 -
             C44323 * C4102) *
                C14929 +
            (C30463 - C30464 + C30465 - C30466) * C14935 +
            (C30467 - C30468 + C30469 - C30470) * C44312) *
               C44245 * C44319) *
              C44195 * C626 +
          (((C29264 - C29263 + C29266 - C29265) * C14933 +
            (C29268 - C29267 + C29270 - C29269) * C14929 +
            (C29271 - C29272 + C29273 - C29274) * C14935 +
            (C29275 - C29276 + C29277 - C29278) * C44312) *
               C44245 * C1196 +
           ((C30464 - C30463 + C30466 - C30465) * C14933 +
            (C30468 - C30467 + C30470 - C30469) * C14929 +
            (C29158 * C1332 - C29260 * C1198 + C44323 * C4101 -
             C29261 * C4007) *
                C14935 +
            (C29158 * C1336 - C29260 * C1203 + C44323 * C4104 -
             C29261 * C4013) *
                C44312) *
               C44245 * C44319) *
              C44195 * C44315)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[56] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C14929 * C98 - C14933 * C93 + C44312 * C100 - C14935 * C94) *
                 C151 +
             (C14929 * C282 - C14933 * C277 + C44312 * C283 - C14935 * C278) *
                 C44245) *
                C29158 +
            ((C30537 - C30538 + C30539 - C30540) * C151 +
             (C30541 - C30542 + C30543 - C30544) * C44245) *
                C44323) *
               C1196 +
           (((C30538 - C30537 + C30540 - C30539) * C151 +
             (C30542 - C30541 + C30544 - C30543) * C44245) *
                C29158 +
            ((C14933 * C4005 - C14929 * C4008 + C14935 * C4006 -
              C44312 * C4010) *
                 C151 +
             (C14933 * C4143 - C14929 * C4146 + C14935 * C4144 -
              C44312 * C4147) *
                 C44245) *
                C44323) *
               C44319) *
              C44195 * C626 +
          ((((C14933 * C94 - C14929 * C100 + C14935 * C95 - C44312 * C102) *
                 C151 +
             (C14933 * C278 - C14929 * C283 + C14935 * C279 - C44312 * C284) *
                 C44245) *
                C29158 +
            ((C30545 - C30546 + C30547 - C30548) * C151 +
             (C30549 - C30550 + C30551 - C30552) * C44245) *
                C44323) *
               C1196 +
           (((C30546 - C30545 + C30548 - C30547) * C151 +
             (C30550 - C30549 + C30552 - C30551) * C44245) *
                C29158 +
            ((C14929 * C4010 - C14933 * C4006 + C44312 * C4012 -
              C14935 * C4007) *
                 C151 +
             (C14929 * C4147 - C14933 * C4144 + C44312 * C4148 -
              C14935 * C4145) *
                 C44245) *
                C44323) *
               C44319) *
              C44195 * C44315)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[56] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C151 * C152 - C325 * C93 - C151 * C277 + C44245 * C326) * C14929 +
             C350 * C44312) *
                C29158 +
            (C30619 + C30620) * C44323) *
               C1196 -
           ((C11218 * C44312 + C14662 * C14929) * C44323 +
            (C30620 + C30619) * C29158) *
               C44319) *
              C44195 * C626 +
          (((C30621 + C30622) * C29158 +
            (C11218 * C14929 +
             (C151 * C4057 - C325 * C4007 - C151 * C4145 + C44245 * C4189) *
                 C44312) *
                C44323) *
               C44319 -
           ((C30622 + C30621) * C44323 +
            (C351 * C44312 + C350 * C14929) * C29158) *
               C1196) *
              C44195 * C44315)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[56] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C29158 * C215 - C29260 * C93 + C44323 * C1330 - C29261 * C1200) *
                 C151 +
             (C29158 * C390 - C29260 * C277 + C44323 * C1522 - C29261 * C1396) *
                 C44245) *
                C14929 +
            ((C29263 - C29264 + C29265 - C29266) * C151 +
             (C29429 - C29430 + C29431 - C29432) * C44245) *
                C44312) *
               C1196 +
           (((C29260 * C1200 - C29158 * C1330 + C29261 * C4005 -
              C44323 * C4099) *
                 C151 +
             (C29260 * C1396 - C29158 * C1522 + C29261 * C4143 -
              C44323 * C4228) *
                 C44245) *
                C14929 +
            ((C30463 - C30464 + C30465 - C30466) * C151 +
             (C30689 - C30690 + C30691 - C30692) * C44245) *
                C44312) *
               C44319) *
              C44195 * C626 +
          ((((C29264 - C29263 + C29266 - C29265) * C151 +
             (C29430 - C29429 + C29432 - C29431) * C44245) *
                C14929 +
            ((C29271 - C29272 + C29273 - C29274) * C151 +
             (C29433 - C29434 + C29435 - C29436) * C44245) *
                C44312) *
               C1196 +
           (((C30464 - C30463 + C30466 - C30465) * C151 +
             (C30690 - C30689 + C30692 - C30691) * C44245) *
                C14929 +
            ((C29158 * C1332 - C29260 * C1198 + C44323 * C4101 -
              C29261 * C4007) *
                 C151 +
             (C29158 * C1524 - C29260 * C1398 + C44323 * C4230 -
              C29261 * C4145) *
                 C44245) *
                C44312) *
               C44319) *
              C44195 * C44315)) /
        (p * q * std::sqrt(p + q));
    d2eezx[56] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C14929 * C98 - C14933 * C93 + C44312 * C100 - C14935 * C94) *
                C29260 +
            (C14929 * C448 - C14933 * C443 + C44312 * C449 - C14935 * C444) *
                C29158 +
            (C30537 - C30538 + C30539 - C30540) * C29261 +
            (C30759 - C30760 + C30761 - C30762) * C44323) *
               C44245 * C1196 +
           ((C30538 - C30537 + C30540 - C30539) * C29260 +
            (C30760 - C30759 + C30762 - C30761) * C29158 +
            (C14933 * C4005 - C14929 * C4008 + C14935 * C4006 -
             C44312 * C4010) *
                C29261 +
            (C14933 * C4269 - C14929 * C4272 + C14935 * C4270 -
             C44312 * C4273) *
                C44323) *
               C44245 * C44319) *
              C44195 * C626 +
          (((C14933 * C94 - C14929 * C100 + C14935 * C95 - C44312 * C102) *
                C29260 +
            (C14933 * C444 - C14929 * C449 + C14935 * C445 - C44312 * C450) *
                C29158 +
            (C30545 - C30546 + C30547 - C30548) * C29261 +
            (C30763 - C30764 + C30765 - C30766) * C44323) *
               C44245 * C1196 +
           ((C30546 - C30545 + C30548 - C30547) * C29260 +
            (C30764 - C30763 + C30766 - C30765) * C29158 +
            (C14929 * C4010 - C14933 * C4006 + C44312 * C4012 -
             C14935 * C4007) *
                C29261 +
            (C14929 * C4273 - C14933 * C4270 + C44312 * C4274 -
             C14935 * C4271) *
                C44323) *
               C44245 * C44319) *
              C44195 * C44315)) /
        (p * q * std::sqrt(p + q));
    d2eezy[56] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C44245 * C152 - C151 * C93) * C29260 +
             (C44245 * C491 - C151 * C443) * C29158 +
             (C10968 - C10969) * C29261 + (C11430 - C11431) * C44323) *
                C14929 +
            ((C163 - C164) * C29260 + (C497 - C498) * C29158 + C10972 * C29261 +
             C11432 * C44323) *
                C44312) *
               C1196 +
           (((C10969 - C10968) * C29260 + (C11431 - C11430) * C29158 +
             (C14483 - C14484) * C29261 + (C14826 - C14827) * C44323) *
                C14929 +
            (C10974 * C29260 + C11433 * C29158 + (C10976 - C10977) * C29261 +
             (C11434 - C11435) * C44323) *
                C44312) *
               C44319) *
              C44195 * C626 +
          ((((C164 - C163) * C29260 + (C498 - C497) * C29158 + C10974 * C29261 +
             C11433 * C44323) *
                C14929 +
            ((C168 - C167) * C29260 + (C501 - C500) * C29158 +
             (C1277 - C1278) * C29261 + (C1645 - C1646) * C44323) *
                C44312) *
               C1196 +
           ((C10972 * C29260 + C11432 * C29158 + (C10977 - C10976) * C29261 +
             (C11435 - C11434) * C44323) *
                C14929 +
            ((C1278 - C1277) * C29260 + (C1646 - C1645) * C29158 +
             (C44245 * C4057 - C151 * C4007) * C29261 +
             (C44245 * C4315 - C151 * C4271) * C44323) *
                C44312) *
               C44319) *
              C44195 * C44315)) /
        (p * q * std::sqrt(p + q));
    d2eezz[56] += (2 * std::pow(Pi, 2.5) *
                   ((((C29260 * C215 - C29586 * C93 - C29260 * C443 +
                       C29158 * C545 + C29261 * C1330 - C29587 * C1200 -
                       C29261 * C1580 + C44323 * C1698) *
                          C44245 * C14929 +
                      (C29613 + C29614) * C44245 * C44312) *
                         C1196 -
                     ((C30911 + C30912) * C44245 * C44312 +
                      (C29261 * C4099 - C29587 * C4005 - C29261 * C4269 +
                       C44323 * C4354 + C29260 * C1330 - C29586 * C1200 -
                       C29260 * C1580 + C29158 * C1698) *
                          C44245 * C14929) *
                         C44319) *
                        C44195 * C626 +
                    (((C30912 + C30911) * C44245 * C14929 +
                      (C29260 * C1332 - C29586 * C1198 - C29260 * C1582 +
                       C29158 * C1696 + C29261 * C4101 - C29587 * C4007 -
                       C29261 * C4271 + C44323 * C4356) *
                          C44245 * C44312) *
                         C44319 -
                     ((C29615 + C29616) * C44245 * C44312 +
                      (C29614 + C29613) * C44245 * C14929) *
                         C1196) *
                        C44195 * C44315)) /
                  (p * q * std::sqrt(p + q));
    d2eexx[57] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C14933 * C98 - C14934 * C93 - C14933 * C99 + C14929 * C108 +
             C14935 * C100 - C14936 * C94 - C14935 * C101 + C44312 * C109) *
                C29158 +
            (C30327 + C30328) * C44323) *
               C44245 * C44212 * C1766 -
           ((C17842 + C17843) * C44323 + (C15489 + C15488) * C29158) * C44245 *
               C44212 * C44317) *
              C1768 +
          (((C15490 + C15491) * C29158 +
            (C14933 * C2619 - C14934 * C2615 - C14933 * C2620 + C14929 * C2624 +
             C14935 * C2621 - C14936 * C2616 - C14935 * C2622 +
             C44312 * C2625) *
                C44323) *
               C44245 * C44212 * C44317 -
           ((C30330 + C30329) * C44323 +
            (C14935 * C102 - C14936 * C95 - C14935 * C103 + C44312 * C110 +
             C14933 * C100 - C14934 * C94 - C14933 * C101 + C14929 * C109) *
                C29158) *
               C44245 * C44212 * C1766) *
              C44315)) /
        (p * q * std::sqrt(p + q));
    d2eexy[57] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C44245 * C152 - C151 * C93) * C14933 +
             (C44245 * C157 - C151 * C99) * C14929 + (C163 - C164) * C14935 +
             (C165 - C166) * C44312) *
                C29158 +
            ((C10968 - C10969) * C14933 + (C10970 - C10971) * C14929 +
             C10972 * C14935 + C10973 * C44312) *
                C44323) *
               C44212 * C1766 +
           (((C151 * C630 - C44245 * C694) * C14933 +
             (C151 * C637 - C44245 * C698) * C14929 + (C703 - C704) * C14935 +
             (C705 - C706) * C44312) *
                C29158 +
            ((C12692 - C12693) * C14933 + (C12694 - C12695) * C14929 +
             (C10307 - C10308) * C14935 + (C10309 - C10310) * C44312) *
                C44323) *
               C44212 * C44317) *
              C1768 +
          ((((C164 - C163) * C14933 + (C166 - C165) * C14929 +
             (C168 - C167) * C14935 + (C170 - C169) * C44312) *
                C29158 +
            (C10974 * C14933 + C10975 * C14929 + (C1277 - C1278) * C14935 +
             (C1279 - C1280) * C44312) *
                C44323) *
               C44212 * C1766 +
           (((C704 - C703) * C14933 + (C706 - C705) * C14929 +
             (C708 - C707) * C14935 + (C710 - C709) * C44312) *
                C29158 +
            ((C10308 - C10307) * C14933 + (C10310 - C10309) * C14929 +
             (C44245 * C2678 - C151 * C2616) * C14935 +
             (C44245 * C2681 - C151 * C2622) * C44312) *
                C44323) *
               C44212 * C44317) *
              C44315)) /
        (p * q * std::sqrt(p + q));
    d2eexz[57] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C29158 * C215 - C29260 * C93 + C44323 * C1330 - C29261 * C1200) *
                C14933 +
            (C29158 * C220 - C29260 * C99 + C44323 * C1334 - C29261 * C1207) *
                C14929 +
            (C29263 - C29264 + C29265 - C29266) * C14935 +
            (C29267 - C29268 + C29269 - C29270) * C44312) *
               C44245 * C44212 * C1766 +
           ((C29260 * C630 - C29158 * C760 + C29261 * C2614 - C44323 * C2732) *
                C14933 +
            (C29260 * C637 - C29158 * C764 + C29261 * C2618 - C44323 * C2735) *
                C14929 +
            (C29815 - C29816 + C29817 - C29818) * C14935 +
            (C29819 - C29820 + C29821 - C29822) * C44312) *
               C44245 * C44212 * C44317) *
              C1768 +
          (((C29264 - C29263 + C29266 - C29265) * C14933 +
            (C29268 - C29267 + C29270 - C29269) * C14929 +
            (C29271 - C29272 + C29273 - C29274) * C14935 +
            (C29275 - C29276 + C29277 - C29278) * C44312) *
               C44245 * C44212 * C1766 +
           ((C29816 - C29815 + C29818 - C29817) * C14933 +
            (C29820 - C29819 + C29822 - C29821) * C14929 +
            (C29158 * C762 - C29260 * C628 + C44323 * C2734 - C29261 * C2616) *
                C14935 +
            (C29158 * C766 - C29260 * C633 + C44323 * C2737 - C29261 * C2622) *
                C44312) *
               C44245 * C44212 * C44317) *
              C44315)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[57] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C14929 * C98 - C14933 * C93 + C44312 * C100 - C14935 * C94) *
                 C151 +
             (C14929 * C282 - C14933 * C277 + C44312 * C283 - C14935 * C278) *
                 C44245) *
                C29158 +
            ((C30537 - C30538 + C30539 - C30540) * C151 +
             (C30541 - C30542 + C30543 - C30544) * C44245) *
                C44323) *
               C44212 * C1766 +
           (((C15699 - C15698 + C15701 - C15700) * C151 +
             (C15703 - C15702 + C15705 - C15704) * C44245) *
                C29158 +
            ((C18042 - C18043 + C18044 - C18045) * C151 +
             (C18046 - C18047 + C18048 - C18049) * C44245) *
                C44323) *
               C44212 * C44317) *
              C1768 +
          ((((C14933 * C94 - C14929 * C100 + C14935 * C95 - C44312 * C102) *
                 C151 +
             (C14933 * C278 - C14929 * C283 + C14935 * C279 - C44312 * C284) *
                 C44245) *
                C29158 +
            ((C30545 - C30546 + C30547 - C30548) * C151 +
             (C30549 - C30550 + C30551 - C30552) * C44245) *
                C44323) *
               C44212 * C1766 +
           (((C15707 - C15706 + C15709 - C15708) * C151 +
             (C15711 - C15710 + C15713 - C15712) * C44245) *
                C29158 +
            ((C14929 * C2619 - C14933 * C2615 + C44312 * C2621 -
              C14935 * C2616) *
                 C151 +
             (C14929 * C2792 - C14933 * C2789 + C44312 * C2793 -
              C14935 * C2790) *
                 C44245) *
                C44323) *
               C44212 * C44317) *
              C44315)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[57] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C151 * C152 - C325 * C93 - C151 * C277 + C44245 * C326) * C14929 +
             C350 * C44312) *
                C29158 +
            (C30619 + C30620) * C44323) *
               C44212 * C1766 -
           ((C10523 * C44312 + C12901 * C14929) * C44323 +
            (C902 * C44312 +
             (C151 * C694 - C325 * C630 - C151 * C826 + C44245 * C886) *
                 C14929) *
                C29158) *
               C44212 * C44317) *
              C1768 +
          (((C902 * C14929 + C901 * C44312) * C29158 +
            (C10523 * C14929 +
             (C151 * C2678 - C325 * C2616 - C151 * C2790 + C44245 * C2846) *
                 C44312) *
                C44323) *
               C44212 * C44317 -
           ((C30622 + C30621) * C44323 +
            (C351 * C44312 + C350 * C14929) * C29158) *
               C44212 * C1766) *
              C44315)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[57] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C29158 * C215 - C29260 * C93 + C44323 * C1330 - C29261 * C1200) *
                 C151 +
             (C29158 * C390 - C29260 * C277 + C44323 * C1522 - C29261 * C1396) *
                 C44245) *
                C14929 +
            ((C29263 - C29264 + C29265 - C29266) * C151 +
             (C29429 - C29430 + C29431 - C29432) * C44245) *
                C44312) *
               C44212 * C1766 +
           (((C29260 * C630 - C29158 * C760 + C29261 * C2614 - C44323 * C2732) *
                 C151 +
             (C29260 * C826 - C29158 * C952 + C29261 * C2788 - C44323 * C2897) *
                 C44245) *
                C14929 +
            ((C29815 - C29816 + C29817 - C29818) * C151 +
             (C30021 - C30022 + C30023 - C30024) * C44245) *
                C44312) *
               C44212 * C44317) *
              C1768 +
          ((((C29264 - C29263 + C29266 - C29265) * C151 +
             (C29430 - C29429 + C29432 - C29431) * C44245) *
                C14929 +
            ((C29271 - C29272 + C29273 - C29274) * C151 +
             (C29433 - C29434 + C29435 - C29436) * C44245) *
                C44312) *
               C44212 * C1766 +
           (((C29816 - C29815 + C29818 - C29817) * C151 +
             (C30022 - C30021 + C30024 - C30023) * C44245) *
                C14929 +
            ((C29158 * C762 - C29260 * C628 + C44323 * C2734 - C29261 * C2616) *
                 C151 +
             (C29158 * C954 - C29260 * C828 + C44323 * C2899 - C29261 * C2790) *
                 C44245) *
                C44312) *
               C44212 * C44317) *
              C44315)) /
        (p * q * std::sqrt(p + q));
    d2eezx[57] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C14929 * C98 - C14933 * C93 + C44312 * C100 - C14935 * C94) *
                C29260 +
            (C14929 * C448 - C14933 * C443 + C44312 * C449 - C14935 * C444) *
                C29158 +
            (C30537 - C30538 + C30539 - C30540) * C29261 +
            (C30759 - C30760 + C30761 - C30762) * C44323) *
               C44245 * C44212 * C1766 +
           ((C15699 - C15698 + C15701 - C15700) * C29260 +
            (C15927 - C15926 + C15929 - C15928) * C29158 +
            (C18042 - C18043 + C18044 - C18045) * C29261 +
            (C18248 - C18249 + C18250 - C18251) * C44323) *
               C44245 * C44212 * C44317) *
              C1768 +
          (((C14933 * C94 - C14929 * C100 + C14935 * C95 - C44312 * C102) *
                C29260 +
            (C14933 * C444 - C14929 * C449 + C14935 * C445 - C44312 * C450) *
                C29158 +
            (C30545 - C30546 + C30547 - C30548) * C29261 +
            (C30763 - C30764 + C30765 - C30766) * C44323) *
               C44245 * C44212 * C1766 +
           ((C15707 - C15706 + C15709 - C15708) * C29260 +
            (C15931 - C15930 + C15933 - C15932) * C29158 +
            (C14929 * C2619 - C14933 * C2615 + C44312 * C2621 -
             C14935 * C2616) *
                C29261 +
            (C14929 * C2954 - C14933 * C2951 + C44312 * C2955 -
             C14935 * C2952) *
                C44323) *
               C44245 * C44212 * C44317) *
              C44315)) /
        (p * q * std::sqrt(p + q));
    d2eezy[57] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C44245 * C152 - C151 * C93) * C29260 +
             (C44245 * C491 - C151 * C443) * C29158 +
             (C10968 - C10969) * C29261 + (C11430 - C11431) * C44323) *
                C14929 +
            ((C163 - C164) * C29260 + (C497 - C498) * C29158 + C10972 * C29261 +
             C11432 * C44323) *
                C44312) *
               C44212 * C1766 +
           (((C151 * C630 - C44245 * C694) * C29260 +
             (C151 * C1010 - C44245 * C1068) * C29158 +
             (C12692 - C12693) * C29261 + (C13101 - C13102) * C44323) *
                C14929 +
            ((C703 - C704) * C29260 + (C1073 - C1074) * C29158 +
             (C10307 - C10308) * C29261 + (C10726 - C10727) * C44323) *
                C44312) *
               C44212 * C44317) *
              C1768 +
          ((((C164 - C163) * C29260 + (C498 - C497) * C29158 + C10974 * C29261 +
             C11433 * C44323) *
                C14929 +
            ((C168 - C167) * C29260 + (C501 - C500) * C29158 +
             (C1277 - C1278) * C29261 + (C1645 - C1646) * C44323) *
                C44312) *
               C44212 * C1766 +
           (((C704 - C703) * C29260 + (C1074 - C1073) * C29158 +
             (C10308 - C10307) * C29261 + (C10727 - C10726) * C44323) *
                C14929 +
            ((C708 - C707) * C29260 + (C1076 - C1075) * C29158 +
             (C44245 * C2678 - C151 * C2616) * C29261 +
             (C44245 * C3008 - C151 * C2952) * C44323) *
                C44312) *
               C44212 * C44317) *
              C44315)) /
        (p * q * std::sqrt(p + q));
    d2eezz[57] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C29260 * C215 - C29586 * C93 - C29260 * C443 + C29158 * C545 +
             C29261 * C1330 - C29587 * C1200 - C29261 * C1580 +
             C44323 * C1698) *
                C44245 * C14929 +
            (C29613 + C29614) * C44245 * C44312) *
               C44212 * C1766 -
           ((C30235 + C30236) * C44245 * C44312 +
            (C29261 * C2732 - C29587 * C2614 - C29261 * C2950 + C44323 * C3059 +
             C29260 * C760 - C29586 * C630 - C29260 * C1010 + C29158 * C1128) *
                C44245 * C14929) *
               C44212 * C44317) *
              C1768 +
          (((C30236 + C30235) * C44245 * C14929 +
            (C29260 * C762 - C29586 * C628 - C29260 * C1012 + C29158 * C1126 +
             C29261 * C2734 - C29587 * C2616 - C29261 * C2952 +
             C44323 * C3061) *
                C44245 * C44312) *
               C44212 * C44317 -
           ((C29615 + C29616) * C44245 * C44312 +
            (C29614 + C29613) * C44245 * C14929) *
               C44212 * C1766) *
              C44315)) /
        (p * q * std::sqrt(p + q));
    d2eexx[58] +=
        (2 * std::pow(Pi, 2.5) *
         (((C14933 * C98 - C14934 * C93 - C14933 * C99 + C14929 * C108 +
            C14935 * C100 - C14936 * C94 - C14935 * C101 + C44312 * C109) *
               C29158 +
           (C30327 + C30328) * C44323) *
              C44245 * C44212 * C2208 -
          ((C17842 + C17843) * C44323 + (C15489 + C15488) * C29158) * C44245 *
              C44212 * C2209 +
          ((C17351 + C17350) * C29158 +
           (C14933 * C7399 - C14934 * C7397 - C14933 * C7400 + C14929 * C7403 +
            C14935 * C7401 - C14936 * C7398 - C14935 * C7402 + C44312 * C7404) *
               C44323) *
              C44245 * C44212 * C2210) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eexy[58] += (2 * std::pow(Pi, 2.5) *
                   ((((C44245 * C152 - C151 * C93) * C14933 +
                      (C44245 * C157 - C151 * C99) * C14929 +
                      (C163 - C164) * C14935 + (C165 - C166) * C44312) *
                         C29158 +
                     ((C10968 - C10969) * C14933 + (C10970 - C10971) * C14929 +
                      C10972 * C14935 + C10973 * C44312) *
                         C44323) *
                        C44212 * C2208 +
                    (((C151 * C630 - C44245 * C694) * C14933 +
                      (C151 * C637 - C44245 * C698) * C14929 +
                      (C703 - C704) * C14935 + (C705 - C706) * C44312) *
                         C29158 +
                     ((C12692 - C12693) * C14933 + (C12694 - C12695) * C14929 +
                      (C10307 - C10308) * C14935 + (C10309 - C10310) * C44312) *
                         C44323) *
                        C44212 * C2209 +
                    (((C44245 * C2262 - C151 * C2212) * C14933 +
                      (C44245 * C2265 - C151 * C2216) * C14929 +
                      (C44245 * C2263 - C151 * C2213) * C14935 +
                      (C44245 * C2266 - C151 * C2218) * C44312) *
                         C29158 +
                     ((C44245 * C7485 - C151 * C7397) * C14933 +
                      (C44245 * C7487 - C151 * C7400) * C14929 +
                      (C44245 * C7486 - C151 * C7398) * C14935 +
                      (C44245 * C7488 - C151 * C7402) * C44312) *
                         C44323) *
                        C44212 * C2210) *
                   C44161) /
                  (p * q * std::sqrt(p + q));
    d2eexz[58] +=
        (2 * std::pow(Pi, 2.5) *
         (((C29158 * C215 - C29260 * C93 + C44323 * C1330 - C29261 * C1200) *
               C14933 +
           (C29158 * C220 - C29260 * C99 + C44323 * C1334 - C29261 * C1207) *
               C14929 +
           (C29263 - C29264 + C29265 - C29266) * C14935 +
           (C29267 - C29268 + C29269 - C29270) * C44312) *
              C44245 * C44212 * C2208 +
          ((C29260 * C630 - C29158 * C760 + C29261 * C2614 - C44323 * C2732) *
               C14933 +
           (C29260 * C637 - C29158 * C764 + C29261 * C2618 - C44323 * C2735) *
               C14929 +
           (C29815 - C29816 + C29817 - C29818) * C14935 +
           (C29819 - C29820 + C29821 - C29822) * C44312) *
              C44245 * C44212 * C2209 +
          ((C29158 * C2306 - C29260 * C2212 + C44323 * C7555 - C29261 * C7397) *
               C14933 +
           (C29158 * C2309 - C29260 * C2216 + C44323 * C7557 - C29261 * C7400) *
               C14929 +
           (C29158 * C2307 - C29260 * C2213 + C44323 * C7556 - C29261 * C7398) *
               C14935 +
           (C29158 * C2310 - C29260 * C2218 + C44323 * C7558 - C29261 * C7402) *
               C44312) *
              C44245 * C44212 * C2210) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eeyx[58] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C14929 * C98 - C14933 * C93 + C44312 * C100 - C14935 * C94) *
                C151 +
            (C14929 * C282 - C14933 * C277 + C44312 * C283 - C14935 * C278) *
                C44245) *
               C29158 +
           ((C30537 - C30538 + C30539 - C30540) * C151 +
            (C30541 - C30542 + C30543 - C30544) * C44245) *
               C44323) *
              C44212 * C2208 +
          (((C15699 - C15698 + C15701 - C15700) * C151 +
            (C15703 - C15702 + C15705 - C15704) * C44245) *
               C29158 +
           ((C18042 - C18043 + C18044 - C18045) * C151 +
            (C18046 - C18047 + C18048 - C18049) * C44245) *
               C44323) *
              C44212 * C2209 +
          (((C17503 - C17502 + C17505 - C17504) * C151 +
            (C17507 - C17506 + C17509 - C17508) * C44245) *
               C29158 +
           ((C14929 * C7399 - C14933 * C7397 + C44312 * C7401 -
             C14935 * C7398) *
                C151 +
            (C14929 * C7631 - C14933 * C7629 + C44312 * C7632 -
             C14935 * C7630) *
                C44245) *
               C44323) *
              C44212 * C2210) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eeyy[58] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C151 * C152 - C325 * C93 - C151 * C277 + C44245 * C326) * C14929 +
            C350 * C44312) *
               C29158 +
           (C30619 + C30620) * C44323) *
              C44212 * C2208 -
          ((C10523 * C44312 + C12901 * C14929) * C44323 +
           (C902 * C44312 +
            (C151 * C694 - C325 * C630 - C151 * C826 + C44245 * C886) *
                C14929) *
               C29158) *
              C44212 * C2209 +
          (((C151 * C2262 - C325 * C2212 - C151 * C2350 + C44245 * C2394) *
                C14929 +
            (C151 * C2263 - C325 * C2213 - C151 * C2351 + C44245 * C2395) *
                C44312) *
               C29158 +
           ((C151 * C7485 - C325 * C7397 - C151 * C7629 + C44245 * C7707) *
                C14929 +
            (C151 * C7486 - C325 * C7398 - C151 * C7630 + C44245 * C7708) *
                C44312) *
               C44323) *
              C44212 * C2210) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eeyz[58] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C29158 * C215 - C29260 * C93 + C44323 * C1330 - C29261 * C1200) *
                C151 +
            (C29158 * C390 - C29260 * C277 + C44323 * C1522 - C29261 * C1396) *
                C44245) *
               C14929 +
           ((C29263 - C29264 + C29265 - C29266) * C151 +
            (C29429 - C29430 + C29431 - C29432) * C44245) *
               C44312) *
              C44212 * C2208 +
          (((C29260 * C630 - C29158 * C760 + C29261 * C2614 - C44323 * C2732) *
                C151 +
            (C29260 * C826 - C29158 * C952 + C29261 * C2788 - C44323 * C2897) *
                C44245) *
               C14929 +
           ((C29815 - C29816 + C29817 - C29818) * C151 +
            (C30021 - C30022 + C30023 - C30024) * C44245) *
               C44312) *
              C44212 * C2209 +
          (((C29158 * C2306 - C29260 * C2212 + C44323 * C7555 -
             C29261 * C7397) *
                C151 +
            (C29158 * C2435 - C29260 * C2350 + C44323 * C7775 -
             C29261 * C7629) *
                C44245) *
               C14929 +
           ((C29158 * C2307 - C29260 * C2213 + C44323 * C7556 -
             C29261 * C7398) *
                C151 +
            (C29158 * C2436 - C29260 * C2351 + C44323 * C7776 -
             C29261 * C7630) *
                C44245) *
               C44312) *
              C44212 * C2210) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eezx[58] +=
        (2 * std::pow(Pi, 2.5) *
         (((C14929 * C98 - C14933 * C93 + C44312 * C100 - C14935 * C94) *
               C29260 +
           (C14929 * C448 - C14933 * C443 + C44312 * C449 - C14935 * C444) *
               C29158 +
           (C30537 - C30538 + C30539 - C30540) * C29261 +
           (C30759 - C30760 + C30761 - C30762) * C44323) *
              C44245 * C44212 * C2208 +
          ((C15699 - C15698 + C15701 - C15700) * C29260 +
           (C15927 - C15926 + C15929 - C15928) * C29158 +
           (C18042 - C18043 + C18044 - C18045) * C29261 +
           (C18248 - C18249 + C18250 - C18251) * C44323) *
              C44245 * C44212 * C2209 +
          ((C17503 - C17502 + C17505 - C17504) * C29260 +
           (C17661 - C17660 + C17663 - C17662) * C29158 +
           (C14929 * C7399 - C14933 * C7397 + C44312 * C7401 - C14935 * C7398) *
               C29261 +
           (C14929 * C7847 - C14933 * C7845 + C44312 * C7848 - C14935 * C7846) *
               C44323) *
              C44245 * C44212 * C2210) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eezy[58] += (2 * std::pow(Pi, 2.5) *
                   ((((C44245 * C152 - C151 * C93) * C29260 +
                      (C44245 * C491 - C151 * C443) * C29158 +
                      (C10968 - C10969) * C29261 + (C11430 - C11431) * C44323) *
                         C14929 +
                     ((C163 - C164) * C29260 + (C497 - C498) * C29158 +
                      C10972 * C29261 + C11432 * C44323) *
                         C44312) *
                        C44212 * C2208 +
                    (((C151 * C630 - C44245 * C694) * C29260 +
                      (C151 * C1010 - C44245 * C1068) * C29158 +
                      (C12692 - C12693) * C29261 + (C13101 - C13102) * C44323) *
                         C14929 +
                     ((C703 - C704) * C29260 + (C1073 - C1074) * C29158 +
                      (C10307 - C10308) * C29261 + (C10726 - C10727) * C44323) *
                         C44312) *
                        C44212 * C2209 +
                    (((C44245 * C2262 - C151 * C2212) * C29260 +
                      (C44245 * C2520 - C151 * C2476) * C29158 +
                      (C44245 * C7485 - C151 * C7397) * C29261 +
                      (C44245 * C7919 - C151 * C7845) * C44323) *
                         C14929 +
                     ((C44245 * C2263 - C151 * C2213) * C29260 +
                      (C44245 * C2521 - C151 * C2477) * C29158 +
                      (C44245 * C7486 - C151 * C7398) * C29261 +
                      (C44245 * C7920 - C151 * C7846) * C44323) *
                         C44312) *
                        C44212 * C2210) *
                   C44161) /
                  (p * q * std::sqrt(p + q));
    d2eezz[58] +=
        (2 * std::pow(Pi, 2.5) *
         (((C29260 * C215 - C29586 * C93 - C29260 * C443 + C29158 * C545 +
            C29261 * C1330 - C29587 * C1200 - C29261 * C1580 + C44323 * C1698) *
               C44245 * C14929 +
           (C29613 + C29614) * C44245 * C44312) *
              C44212 * C2208 -
          ((C30235 + C30236) * C44245 * C44312 +
           (C29261 * C2732 - C29587 * C2614 - C29261 * C2950 + C44323 * C3059 +
            C29260 * C760 - C29586 * C630 - C29260 * C1010 + C29158 * C1128) *
               C44245 * C14929) *
              C44212 * C2209 +
          ((C29260 * C2306 - C29586 * C2212 - C29260 * C2476 + C29158 * C2561 +
            C29261 * C7555 - C29587 * C7397 - C29261 * C7845 + C44323 * C7987) *
               C44245 * C14929 +
           (C29260 * C2307 - C29586 * C2213 - C29260 * C2477 + C29158 * C2562 +
            C29261 * C7556 - C29587 * C7398 - C29261 * C7846 + C44323 * C7988) *
               C44245 * C44312) *
              C44212 * C2210) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eexx[59] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C14933 * C98 - C14934 * C93 - C14933 * C99 + C14929 * C108 +
             C14935 * C100 - C14936 * C94 - C14935 * C101 + C44312 * C109) *
                C29158 +
            (C30327 + C30328) * C44323) *
               C44245 * C1196 -
           ((C14935 * C4010 - C14936 * C4006 - C14935 * C4011 + C44312 * C4015 +
             C14933 * C4008 - C14934 * C4005 - C14933 * C4009 +
             C14929 * C4014) *
                C44323 +
            (C30328 + C30327) * C29158) *
               C44245 * C44319) *
              C1766 +
          (((C17843 + C17842) * C29158 +
            (C14933 * C9236 - C14934 * C9234 - C14933 * C9237 + C14929 * C9240 +
             C14935 * C9238 - C14936 * C9235 - C14935 * C9239 +
             C44312 * C9241) *
                C44323) *
               C44245 * C44319 -
           ((C17842 + C17843) * C44323 + (C15489 + C15488) * C29158) * C44245 *
               C1196) *
              C44317) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eexy[59] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C44245 * C152 - C151 * C93) * C14933 +
             (C44245 * C157 - C151 * C99) * C14929 + (C163 - C164) * C14935 +
             (C165 - C166) * C44312) *
                C29158 +
            ((C10968 - C10969) * C14933 + (C10970 - C10971) * C14929 +
             C10972 * C14935 + C10973 * C44312) *
                C44323) *
               C1196 +
           (((C10969 - C10968) * C14933 + (C10971 - C10970) * C14929 +
             C10974 * C14935 + C10975 * C44312) *
                C29158 +
            ((C14483 - C14484) * C14933 + (C14485 - C14486) * C14929 +
             (C10976 - C10977) * C14935 + (C10978 - C10979) * C44312) *
                C44323) *
               C44319) *
              C1766 +
          ((((C151 * C630 - C44245 * C694) * C14933 +
             (C151 * C637 - C44245 * C698) * C14929 + (C703 - C704) * C14935 +
             (C705 - C706) * C44312) *
                C29158 +
            ((C12692 - C12693) * C14933 + (C12694 - C12695) * C14929 +
             (C10307 - C10308) * C14935 + (C10309 - C10310) * C44312) *
                C44323) *
               C1196 +
           (((C12693 - C12692) * C14933 + (C12695 - C12694) * C14929 +
             (C10308 - C10307) * C14935 + (C10310 - C10309) * C44312) *
                C29158 +
            ((C44245 * C9292 - C151 * C9234) * C14933 +
             (C44245 * C9294 - C151 * C9237) * C14929 +
             (C44245 * C9293 - C151 * C9235) * C14935 +
             (C44245 * C9295 - C151 * C9239) * C44312) *
                C44323) *
               C44319) *
              C44317) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eexz[59] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C29158 * C215 - C29260 * C93 + C44323 * C1330 - C29261 * C1200) *
                C14933 +
            (C29158 * C220 - C29260 * C99 + C44323 * C1334 - C29261 * C1207) *
                C14929 +
            (C29263 - C29264 + C29265 - C29266) * C14935 +
            (C29267 - C29268 + C29269 - C29270) * C44312) *
               C44245 * C1196 +
           ((C29260 * C1200 - C29158 * C1330 + C29261 * C4005 -
             C44323 * C4099) *
                C14933 +
            (C29260 * C1207 - C29158 * C1334 + C29261 * C4009 -
             C44323 * C4102) *
                C14929 +
            (C30463 - C30464 + C30465 - C30466) * C14935 +
            (C30467 - C30468 + C30469 - C30470) * C44312) *
               C44245 * C44319) *
              C1766 +
          (((C29260 * C630 - C29158 * C760 + C29261 * C2614 - C44323 * C2732) *
                C14933 +
            (C29260 * C637 - C29158 * C764 + C29261 * C2618 - C44323 * C2735) *
                C14929 +
            (C29815 - C29816 + C29817 - C29818) * C14935 +
            (C29819 - C29820 + C29821 - C29822) * C44312) *
               C44245 * C1196 +
           ((C29158 * C2732 - C29260 * C2614 + C44323 * C9346 -
             C29261 * C9234) *
                C14933 +
            (C29158 * C2735 - C29260 * C2618 + C44323 * C9348 -
             C29261 * C9237) *
                C14929 +
            (C29158 * C2733 - C29260 * C2615 + C44323 * C9347 -
             C29261 * C9235) *
                C14935 +
            (C29158 * C2736 - C29260 * C2620 + C44323 * C9349 -
             C29261 * C9239) *
                C44312) *
               C44245 * C44319) *
              C44317) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eeyx[59] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C14929 * C98 - C14933 * C93 + C44312 * C100 - C14935 * C94) *
                 C151 +
             (C14929 * C282 - C14933 * C277 + C44312 * C283 - C14935 * C278) *
                 C44245) *
                C29158 +
            ((C30537 - C30538 + C30539 - C30540) * C151 +
             (C30541 - C30542 + C30543 - C30544) * C44245) *
                C44323) *
               C1196 +
           (((C30538 - C30537 + C30540 - C30539) * C151 +
             (C30542 - C30541 + C30544 - C30543) * C44245) *
                C29158 +
            ((C14933 * C4005 - C14929 * C4008 + C14935 * C4006 -
              C44312 * C4010) *
                 C151 +
             (C14933 * C4143 - C14929 * C4146 + C14935 * C4144 -
              C44312 * C4147) *
                 C44245) *
                C44323) *
               C44319) *
              C1766 +
          ((((C15699 - C15698 + C15701 - C15700) * C151 +
             (C15703 - C15702 + C15705 - C15704) * C44245) *
                C29158 +
            ((C18042 - C18043 + C18044 - C18045) * C151 +
             (C18046 - C18047 + C18048 - C18049) * C44245) *
                C44323) *
               C1196 +
           (((C18043 - C18042 + C18045 - C18044) * C151 +
             (C18047 - C18046 + C18049 - C18048) * C44245) *
                C29158 +
            ((C14929 * C9236 - C14933 * C9234 + C44312 * C9238 -
              C14935 * C9235) *
                 C151 +
             (C14929 * C9402 - C14933 * C9400 + C44312 * C9403 -
              C14935 * C9401) *
                 C44245) *
                C44323) *
               C44319) *
              C44317) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eeyy[59] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C151 * C152 - C325 * C93 - C151 * C277 + C44245 * C326) * C14929 +
             C350 * C44312) *
                C29158 +
            (C30619 + C30620) * C44323) *
               C1196 -
           ((C11218 * C44312 + C14662 * C14929) * C44323 +
            (C30620 + C30619) * C29158) *
               C44319) *
              C1766 +
          (((C32287 + C32288) * C29158 +
            ((C151 * C9292 - C325 * C9234 - C151 * C9400 + C44245 * C9454) *
                 C14929 +
             (C151 * C9293 - C325 * C9235 - C151 * C9401 + C44245 * C9455) *
                 C44312) *
                C44323) *
               C44319 -
           ((C32288 + C32287) * C44323 +
            (C902 * C44312 +
             (C151 * C694 - C325 * C630 - C151 * C826 + C44245 * C886) *
                 C14929) *
                C29158) *
               C1196) *
              C44317) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eeyz[59] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C29158 * C215 - C29260 * C93 + C44323 * C1330 - C29261 * C1200) *
                 C151 +
             (C29158 * C390 - C29260 * C277 + C44323 * C1522 - C29261 * C1396) *
                 C44245) *
                C14929 +
            ((C29263 - C29264 + C29265 - C29266) * C151 +
             (C29429 - C29430 + C29431 - C29432) * C44245) *
                C44312) *
               C1196 +
           (((C29260 * C1200 - C29158 * C1330 + C29261 * C4005 -
              C44323 * C4099) *
                 C151 +
             (C29260 * C1396 - C29158 * C1522 + C29261 * C4143 -
              C44323 * C4228) *
                 C44245) *
                C14929 +
            ((C30463 - C30464 + C30465 - C30466) * C151 +
             (C30689 - C30690 + C30691 - C30692) * C44245) *
                C44312) *
               C44319) *
              C1766 +
          ((((C29260 * C630 - C29158 * C760 + C29261 * C2614 - C44323 * C2732) *
                 C151 +
             (C29260 * C826 - C29158 * C952 + C29261 * C2788 - C44323 * C2897) *
                 C44245) *
                C14929 +
            ((C29815 - C29816 + C29817 - C29818) * C151 +
             (C30021 - C30022 + C30023 - C30024) * C44245) *
                C44312) *
               C1196 +
           (((C29158 * C2732 - C29260 * C2614 + C44323 * C9346 -
              C29261 * C9234) *
                 C151 +
             (C29158 * C2897 - C29260 * C2788 + C44323 * C9506 -
              C29261 * C9400) *
                 C44245) *
                C14929 +
            ((C29158 * C2733 - C29260 * C2615 + C44323 * C9347 -
              C29261 * C9235) *
                 C151 +
             (C29158 * C2898 - C29260 * C2789 + C44323 * C9507 -
              C29261 * C9401) *
                 C44245) *
                C44312) *
               C44319) *
              C44317) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eezx[59] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C14929 * C98 - C14933 * C93 + C44312 * C100 - C14935 * C94) *
                C29260 +
            (C14929 * C448 - C14933 * C443 + C44312 * C449 - C14935 * C444) *
                C29158 +
            (C30537 - C30538 + C30539 - C30540) * C29261 +
            (C30759 - C30760 + C30761 - C30762) * C44323) *
               C44245 * C1196 +
           ((C30538 - C30537 + C30540 - C30539) * C29260 +
            (C30760 - C30759 + C30762 - C30761) * C29158 +
            (C14933 * C4005 - C14929 * C4008 + C14935 * C4006 -
             C44312 * C4010) *
                C29261 +
            (C14933 * C4269 - C14929 * C4272 + C14935 * C4270 -
             C44312 * C4273) *
                C44323) *
               C44245 * C44319) *
              C1766 +
          (((C15699 - C15698 + C15701 - C15700) * C29260 +
            (C15927 - C15926 + C15929 - C15928) * C29158 +
            (C18042 - C18043 + C18044 - C18045) * C29261 +
            (C18248 - C18249 + C18250 - C18251) * C44323) *
               C44245 * C1196 +
           ((C18043 - C18042 + C18045 - C18044) * C29260 +
            (C18249 - C18248 + C18251 - C18250) * C29158 +
            (C14929 * C9236 - C14933 * C9234 + C44312 * C9238 -
             C14935 * C9235) *
                C29261 +
            (C14929 * C9560 - C14933 * C9558 + C44312 * C9561 -
             C14935 * C9559) *
                C44323) *
               C44245 * C44319) *
              C44317) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eezy[59] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C44245 * C152 - C151 * C93) * C29260 +
             (C44245 * C491 - C151 * C443) * C29158 +
             (C10968 - C10969) * C29261 + (C11430 - C11431) * C44323) *
                C14929 +
            ((C163 - C164) * C29260 + (C497 - C498) * C29158 + C10972 * C29261 +
             C11432 * C44323) *
                C44312) *
               C1196 +
           (((C10969 - C10968) * C29260 + (C11431 - C11430) * C29158 +
             (C14483 - C14484) * C29261 + (C14826 - C14827) * C44323) *
                C14929 +
            (C10974 * C29260 + C11433 * C29158 + (C10976 - C10977) * C29261 +
             (C11434 - C11435) * C44323) *
                C44312) *
               C44319) *
              C1766 +
          ((((C151 * C630 - C44245 * C694) * C29260 +
             (C151 * C1010 - C44245 * C1068) * C29158 +
             (C12692 - C12693) * C29261 + (C13101 - C13102) * C44323) *
                C14929 +
            ((C703 - C704) * C29260 + (C1073 - C1074) * C29158 +
             (C10307 - C10308) * C29261 + (C10726 - C10727) * C44323) *
                C44312) *
               C1196 +
           (((C12693 - C12692) * C29260 + (C13102 - C13101) * C29158 +
             (C44245 * C9292 - C151 * C9234) * C29261 +
             (C44245 * C9612 - C151 * C9558) * C44323) *
                C14929 +
            ((C10308 - C10307) * C29260 + (C10727 - C10726) * C29158 +
             (C44245 * C9293 - C151 * C9235) * C29261 +
             (C44245 * C9613 - C151 * C9559) * C44323) *
                C44312) *
               C44319) *
              C44317) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eezz[59] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C29260 * C215 - C29586 * C93 - C29260 * C443 + C29158 * C545 +
             C29261 * C1330 - C29587 * C1200 - C29261 * C1580 +
             C44323 * C1698) *
                C44245 * C14929 +
            (C29613 + C29614) * C44245 * C44312) *
               C1196 -
           ((C30911 + C30912) * C44245 * C44312 +
            (C29261 * C4099 - C29587 * C4005 - C29261 * C4269 + C44323 * C4354 +
             C29260 * C1330 - C29586 * C1200 - C29260 * C1580 +
             C29158 * C1698) *
                C44245 * C14929) *
               C44319) *
              C1766 +
          (((C29260 * C2732 - C29586 * C2614 - C29260 * C2950 + C29158 * C3059 +
             C29261 * C9346 - C29587 * C9234 - C29261 * C9558 +
             C44323 * C9664) *
                C44245 * C14929 +
            (C29260 * C2733 - C29586 * C2615 - C29260 * C2951 + C29158 * C3060 +
             C29261 * C9347 - C29587 * C9235 - C29261 * C9559 +
             C44323 * C9665) *
                C44245 * C44312) *
               C44319 -
           ((C30235 + C30236) * C44245 * C44312 +
            (C29261 * C2732 - C29587 * C2614 - C29261 * C2950 + C44323 * C3059 +
             C29260 * C760 - C29586 * C630 - C29260 * C1010 + C29158 * C1128) *
                C44245 * C14929) *
               C1196) *
              C44317) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eexx[60] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C14933 * C98 - C14934 * C93 - C14933 * C99 + C14929 * C108 +
             C14935 * C100 - C14936 * C94 - C14935 * C101 + C44312 * C109) *
                C29158 +
            (C30327 + C30328) * C44323) *
               C44245 * C3112 -
           ((C14935 * C4010 - C14936 * C4006 - C14935 * C4011 + C44312 * C4015 +
             C14933 * C4008 - C14934 * C4005 - C14933 * C4009 +
             C14929 * C4014) *
                C44323 +
            (C30328 + C30327) * C29158) *
               C44245 * C44319) *
              C44195 * C1768 +
          (((C30329 + C30330) * C29158 +
            (C14933 * C4010 - C14934 * C4006 - C14933 * C4011 + C14929 * C4015 +
             C14935 * C4012 - C14936 * C4007 - C14935 * C4013 +
             C44312 * C4016) *
                C44323) *
               C44245 * C44319 -
           ((C30330 + C30329) * C44323 +
            (C14935 * C102 - C14936 * C95 - C14935 * C103 + C44312 * C110 +
             C14933 * C100 - C14934 * C94 - C14933 * C101 + C14929 * C109) *
                C29158) *
               C44245 * C3112) *
              C44195 * C44315)) /
        (p * q * std::sqrt(p + q));
    d2eexy[60] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C44245 * C152 - C151 * C93) * C14933 +
             (C44245 * C157 - C151 * C99) * C14929 + (C163 - C164) * C14935 +
             (C165 - C166) * C44312) *
                C29158 +
            ((C10968 - C10969) * C14933 + (C10970 - C10971) * C14929 +
             C10972 * C14935 + C10973 * C44312) *
                C44323) *
               C3112 +
           (((C10969 - C10968) * C14933 + (C10971 - C10970) * C14929 +
             C10974 * C14935 + C10975 * C44312) *
                C29158 +
            ((C14483 - C14484) * C14933 + (C14485 - C14486) * C14929 +
             (C10976 - C10977) * C14935 + (C10978 - C10979) * C44312) *
                C44323) *
               C44319) *
              C44195 * C1768 +
          ((((C164 - C163) * C14933 + (C166 - C165) * C14929 +
             (C168 - C167) * C14935 + (C170 - C169) * C44312) *
                C29158 +
            (C10974 * C14933 + C10975 * C14929 + (C1277 - C1278) * C14935 +
             (C1279 - C1280) * C44312) *
                C44323) *
               C3112 +
           ((C10972 * C14933 + C10973 * C14929 + (C1278 - C1277) * C14935 +
             (C1280 - C1279) * C44312) *
                C29158 +
            ((C10977 - C10976) * C14933 + (C10979 - C10978) * C14929 +
             (C44245 * C4057 - C151 * C4007) * C14935 +
             (C44245 * C4060 - C151 * C4013) * C44312) *
                C44323) *
               C44319) *
              C44195 * C44315)) /
        (p * q * std::sqrt(p + q));
    d2eexz[60] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C29158 * C215 - C29260 * C93 + C44323 * C1330 - C29261 * C1200) *
                C14933 +
            (C29158 * C220 - C29260 * C99 + C44323 * C1334 - C29261 * C1207) *
                C14929 +
            (C29263 - C29264 + C29265 - C29266) * C14935 +
            (C29267 - C29268 + C29269 - C29270) * C44312) *
               C44245 * C3112 +
           ((C29260 * C1200 - C29158 * C1330 + C29261 * C4005 -
             C44323 * C4099) *
                C14933 +
            (C29260 * C1207 - C29158 * C1334 + C29261 * C4009 -
             C44323 * C4102) *
                C14929 +
            (C30463 - C30464 + C30465 - C30466) * C14935 +
            (C30467 - C30468 + C30469 - C30470) * C44312) *
               C44245 * C44319) *
              C44195 * C1768 +
          (((C29264 - C29263 + C29266 - C29265) * C14933 +
            (C29268 - C29267 + C29270 - C29269) * C14929 +
            (C29271 - C29272 + C29273 - C29274) * C14935 +
            (C29275 - C29276 + C29277 - C29278) * C44312) *
               C44245 * C3112 +
           ((C30464 - C30463 + C30466 - C30465) * C14933 +
            (C30468 - C30467 + C30470 - C30469) * C14929 +
            (C29158 * C1332 - C29260 * C1198 + C44323 * C4101 -
             C29261 * C4007) *
                C14935 +
            (C29158 * C1336 - C29260 * C1203 + C44323 * C4104 -
             C29261 * C4013) *
                C44312) *
               C44245 * C44319) *
              C44195 * C44315)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[60] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C14929 * C98 - C14933 * C93 + C44312 * C100 - C14935 * C94) *
                 C151 +
             (C14929 * C282 - C14933 * C277 + C44312 * C283 - C14935 * C278) *
                 C44245) *
                C29158 +
            ((C30537 - C30538 + C30539 - C30540) * C151 +
             (C30541 - C30542 + C30543 - C30544) * C44245) *
                C44323) *
               C3112 +
           (((C30538 - C30537 + C30540 - C30539) * C151 +
             (C30542 - C30541 + C30544 - C30543) * C44245) *
                C29158 +
            ((C14933 * C4005 - C14929 * C4008 + C14935 * C4006 -
              C44312 * C4010) *
                 C151 +
             (C14933 * C4143 - C14929 * C4146 + C14935 * C4144 -
              C44312 * C4147) *
                 C44245) *
                C44323) *
               C44319) *
              C44195 * C1768 +
          ((((C14933 * C94 - C14929 * C100 + C14935 * C95 - C44312 * C102) *
                 C151 +
             (C14933 * C278 - C14929 * C283 + C14935 * C279 - C44312 * C284) *
                 C44245) *
                C29158 +
            ((C30545 - C30546 + C30547 - C30548) * C151 +
             (C30549 - C30550 + C30551 - C30552) * C44245) *
                C44323) *
               C3112 +
           (((C30546 - C30545 + C30548 - C30547) * C151 +
             (C30550 - C30549 + C30552 - C30551) * C44245) *
                C29158 +
            ((C14929 * C4010 - C14933 * C4006 + C44312 * C4012 -
              C14935 * C4007) *
                 C151 +
             (C14929 * C4147 - C14933 * C4144 + C44312 * C4148 -
              C14935 * C4145) *
                 C44245) *
                C44323) *
               C44319) *
              C44195 * C44315)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[60] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C151 * C152 - C325 * C93 - C151 * C277 + C44245 * C326) * C14929 +
             C350 * C44312) *
                C29158 +
            (C30619 + C30620) * C44323) *
               C3112 -
           ((C11218 * C44312 + C14662 * C14929) * C44323 +
            (C30620 + C30619) * C29158) *
               C44319) *
              C44195 * C1768 +
          (((C30621 + C30622) * C29158 +
            (C11218 * C14929 +
             (C151 * C4057 - C325 * C4007 - C151 * C4145 + C44245 * C4189) *
                 C44312) *
                C44323) *
               C44319 -
           ((C30622 + C30621) * C44323 +
            (C351 * C44312 + C350 * C14929) * C29158) *
               C3112) *
              C44195 * C44315)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[60] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C29158 * C215 - C29260 * C93 + C44323 * C1330 - C29261 * C1200) *
                 C151 +
             (C29158 * C390 - C29260 * C277 + C44323 * C1522 - C29261 * C1396) *
                 C44245) *
                C14929 +
            ((C29263 - C29264 + C29265 - C29266) * C151 +
             (C29429 - C29430 + C29431 - C29432) * C44245) *
                C44312) *
               C3112 +
           (((C29260 * C1200 - C29158 * C1330 + C29261 * C4005 -
              C44323 * C4099) *
                 C151 +
             (C29260 * C1396 - C29158 * C1522 + C29261 * C4143 -
              C44323 * C4228) *
                 C44245) *
                C14929 +
            ((C30463 - C30464 + C30465 - C30466) * C151 +
             (C30689 - C30690 + C30691 - C30692) * C44245) *
                C44312) *
               C44319) *
              C44195 * C1768 +
          ((((C29264 - C29263 + C29266 - C29265) * C151 +
             (C29430 - C29429 + C29432 - C29431) * C44245) *
                C14929 +
            ((C29271 - C29272 + C29273 - C29274) * C151 +
             (C29433 - C29434 + C29435 - C29436) * C44245) *
                C44312) *
               C3112 +
           (((C30464 - C30463 + C30466 - C30465) * C151 +
             (C30690 - C30689 + C30692 - C30691) * C44245) *
                C14929 +
            ((C29158 * C1332 - C29260 * C1198 + C44323 * C4101 -
              C29261 * C4007) *
                 C151 +
             (C29158 * C1524 - C29260 * C1398 + C44323 * C4230 -
              C29261 * C4145) *
                 C44245) *
                C44312) *
               C44319) *
              C44195 * C44315)) /
        (p * q * std::sqrt(p + q));
    d2eezx[60] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C14929 * C98 - C14933 * C93 + C44312 * C100 - C14935 * C94) *
                C29260 +
            (C14929 * C448 - C14933 * C443 + C44312 * C449 - C14935 * C444) *
                C29158 +
            (C30537 - C30538 + C30539 - C30540) * C29261 +
            (C30759 - C30760 + C30761 - C30762) * C44323) *
               C44245 * C3112 +
           ((C30538 - C30537 + C30540 - C30539) * C29260 +
            (C30760 - C30759 + C30762 - C30761) * C29158 +
            (C14933 * C4005 - C14929 * C4008 + C14935 * C4006 -
             C44312 * C4010) *
                C29261 +
            (C14933 * C4269 - C14929 * C4272 + C14935 * C4270 -
             C44312 * C4273) *
                C44323) *
               C44245 * C44319) *
              C44195 * C1768 +
          (((C14933 * C94 - C14929 * C100 + C14935 * C95 - C44312 * C102) *
                C29260 +
            (C14933 * C444 - C14929 * C449 + C14935 * C445 - C44312 * C450) *
                C29158 +
            (C30545 - C30546 + C30547 - C30548) * C29261 +
            (C30763 - C30764 + C30765 - C30766) * C44323) *
               C44245 * C3112 +
           ((C30546 - C30545 + C30548 - C30547) * C29260 +
            (C30764 - C30763 + C30766 - C30765) * C29158 +
            (C14929 * C4010 - C14933 * C4006 + C44312 * C4012 -
             C14935 * C4007) *
                C29261 +
            (C14929 * C4273 - C14933 * C4270 + C44312 * C4274 -
             C14935 * C4271) *
                C44323) *
               C44245 * C44319) *
              C44195 * C44315)) /
        (p * q * std::sqrt(p + q));
    d2eezy[60] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C44245 * C152 - C151 * C93) * C29260 +
             (C44245 * C491 - C151 * C443) * C29158 +
             (C10968 - C10969) * C29261 + (C11430 - C11431) * C44323) *
                C14929 +
            ((C163 - C164) * C29260 + (C497 - C498) * C29158 + C10972 * C29261 +
             C11432 * C44323) *
                C44312) *
               C3112 +
           (((C10969 - C10968) * C29260 + (C11431 - C11430) * C29158 +
             (C14483 - C14484) * C29261 + (C14826 - C14827) * C44323) *
                C14929 +
            (C10974 * C29260 + C11433 * C29158 + (C10976 - C10977) * C29261 +
             (C11434 - C11435) * C44323) *
                C44312) *
               C44319) *
              C44195 * C1768 +
          ((((C164 - C163) * C29260 + (C498 - C497) * C29158 + C10974 * C29261 +
             C11433 * C44323) *
                C14929 +
            ((C168 - C167) * C29260 + (C501 - C500) * C29158 +
             (C1277 - C1278) * C29261 + (C1645 - C1646) * C44323) *
                C44312) *
               C3112 +
           ((C10972 * C29260 + C11432 * C29158 + (C10977 - C10976) * C29261 +
             (C11435 - C11434) * C44323) *
                C14929 +
            ((C1278 - C1277) * C29260 + (C1646 - C1645) * C29158 +
             (C44245 * C4057 - C151 * C4007) * C29261 +
             (C44245 * C4315 - C151 * C4271) * C44323) *
                C44312) *
               C44319) *
              C44195 * C44315)) /
        (p * q * std::sqrt(p + q));
    d2eezz[60] += (2 * std::pow(Pi, 2.5) *
                   ((((C29260 * C215 - C29586 * C93 - C29260 * C443 +
                       C29158 * C545 + C29261 * C1330 - C29587 * C1200 -
                       C29261 * C1580 + C44323 * C1698) *
                          C44245 * C14929 +
                      (C29613 + C29614) * C44245 * C44312) *
                         C3112 -
                     ((C30911 + C30912) * C44245 * C44312 +
                      (C29261 * C4099 - C29587 * C4005 - C29261 * C4269 +
                       C44323 * C4354 + C29260 * C1330 - C29586 * C1200 -
                       C29260 * C1580 + C29158 * C1698) *
                          C44245 * C14929) *
                         C44319) *
                        C44195 * C1768 +
                    (((C30912 + C30911) * C44245 * C14929 +
                      (C29260 * C1332 - C29586 * C1198 - C29260 * C1582 +
                       C29158 * C1696 + C29261 * C4101 - C29587 * C4007 -
                       C29261 * C4271 + C44323 * C4356) *
                          C44245 * C44312) *
                         C44319 -
                     ((C29615 + C29616) * C44245 * C44312 +
                      (C29614 + C29613) * C44245 * C14929) *
                         C3112) *
                        C44195 * C44315)) /
                  (p * q * std::sqrt(p + q));
    d2eexx[61] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C14933 * C98 - C14934 * C93 - C14933 * C99 + C14929 * C108 +
             C14935 * C100 - C14936 * C94 - C14935 * C101 + C44312 * C109) *
                C29158 +
            (C30327 + C30328) * C44323) *
               C44245 * C3112 -
           ((C14935 * C4010 - C14936 * C4006 - C14935 * C4011 + C44312 * C4015 +
             C14933 * C4008 - C14934 * C4005 - C14933 * C4009 +
             C14929 * C4014) *
                C44323 +
            (C30328 + C30327) * C29158) *
               C44245 * C44319) *
              C624 +
          (((C17843 + C17842) * C29158 +
            (C14933 * C9236 - C14934 * C9234 - C14933 * C9237 + C14929 * C9240 +
             C14935 * C9238 - C14936 * C9235 - C14935 * C9239 +
             C44312 * C9241) *
                C44323) *
               C44245 * C44319 -
           ((C17842 + C17843) * C44323 + (C15489 + C15488) * C29158) * C44245 *
               C3112) *
              C44317) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eexy[61] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C44245 * C152 - C151 * C93) * C14933 +
             (C44245 * C157 - C151 * C99) * C14929 + (C163 - C164) * C14935 +
             (C165 - C166) * C44312) *
                C29158 +
            ((C10968 - C10969) * C14933 + (C10970 - C10971) * C14929 +
             C10972 * C14935 + C10973 * C44312) *
                C44323) *
               C3112 +
           (((C10969 - C10968) * C14933 + (C10971 - C10970) * C14929 +
             C10974 * C14935 + C10975 * C44312) *
                C29158 +
            ((C14483 - C14484) * C14933 + (C14485 - C14486) * C14929 +
             (C10976 - C10977) * C14935 + (C10978 - C10979) * C44312) *
                C44323) *
               C44319) *
              C624 +
          ((((C151 * C630 - C44245 * C694) * C14933 +
             (C151 * C637 - C44245 * C698) * C14929 + (C703 - C704) * C14935 +
             (C705 - C706) * C44312) *
                C29158 +
            ((C12692 - C12693) * C14933 + (C12694 - C12695) * C14929 +
             (C10307 - C10308) * C14935 + (C10309 - C10310) * C44312) *
                C44323) *
               C3112 +
           (((C12693 - C12692) * C14933 + (C12695 - C12694) * C14929 +
             (C10308 - C10307) * C14935 + (C10310 - C10309) * C44312) *
                C29158 +
            ((C44245 * C9292 - C151 * C9234) * C14933 +
             (C44245 * C9294 - C151 * C9237) * C14929 +
             (C44245 * C9293 - C151 * C9235) * C14935 +
             (C44245 * C9295 - C151 * C9239) * C44312) *
                C44323) *
               C44319) *
              C44317) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eexz[61] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C29158 * C215 - C29260 * C93 + C44323 * C1330 - C29261 * C1200) *
                C14933 +
            (C29158 * C220 - C29260 * C99 + C44323 * C1334 - C29261 * C1207) *
                C14929 +
            (C29263 - C29264 + C29265 - C29266) * C14935 +
            (C29267 - C29268 + C29269 - C29270) * C44312) *
               C44245 * C3112 +
           ((C29260 * C1200 - C29158 * C1330 + C29261 * C4005 -
             C44323 * C4099) *
                C14933 +
            (C29260 * C1207 - C29158 * C1334 + C29261 * C4009 -
             C44323 * C4102) *
                C14929 +
            (C30463 - C30464 + C30465 - C30466) * C14935 +
            (C30467 - C30468 + C30469 - C30470) * C44312) *
               C44245 * C44319) *
              C624 +
          (((C29260 * C630 - C29158 * C760 + C29261 * C2614 - C44323 * C2732) *
                C14933 +
            (C29260 * C637 - C29158 * C764 + C29261 * C2618 - C44323 * C2735) *
                C14929 +
            (C29815 - C29816 + C29817 - C29818) * C14935 +
            (C29819 - C29820 + C29821 - C29822) * C44312) *
               C44245 * C3112 +
           ((C29158 * C2732 - C29260 * C2614 + C44323 * C9346 -
             C29261 * C9234) *
                C14933 +
            (C29158 * C2735 - C29260 * C2618 + C44323 * C9348 -
             C29261 * C9237) *
                C14929 +
            (C29158 * C2733 - C29260 * C2615 + C44323 * C9347 -
             C29261 * C9235) *
                C14935 +
            (C29158 * C2736 - C29260 * C2620 + C44323 * C9349 -
             C29261 * C9239) *
                C44312) *
               C44245 * C44319) *
              C44317) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eeyx[61] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C14929 * C98 - C14933 * C93 + C44312 * C100 - C14935 * C94) *
                 C151 +
             (C14929 * C282 - C14933 * C277 + C44312 * C283 - C14935 * C278) *
                 C44245) *
                C29158 +
            ((C30537 - C30538 + C30539 - C30540) * C151 +
             (C30541 - C30542 + C30543 - C30544) * C44245) *
                C44323) *
               C3112 +
           (((C30538 - C30537 + C30540 - C30539) * C151 +
             (C30542 - C30541 + C30544 - C30543) * C44245) *
                C29158 +
            ((C14933 * C4005 - C14929 * C4008 + C14935 * C4006 -
              C44312 * C4010) *
                 C151 +
             (C14933 * C4143 - C14929 * C4146 + C14935 * C4144 -
              C44312 * C4147) *
                 C44245) *
                C44323) *
               C44319) *
              C624 +
          ((((C15699 - C15698 + C15701 - C15700) * C151 +
             (C15703 - C15702 + C15705 - C15704) * C44245) *
                C29158 +
            ((C18042 - C18043 + C18044 - C18045) * C151 +
             (C18046 - C18047 + C18048 - C18049) * C44245) *
                C44323) *
               C3112 +
           (((C18043 - C18042 + C18045 - C18044) * C151 +
             (C18047 - C18046 + C18049 - C18048) * C44245) *
                C29158 +
            ((C14929 * C9236 - C14933 * C9234 + C44312 * C9238 -
              C14935 * C9235) *
                 C151 +
             (C14929 * C9402 - C14933 * C9400 + C44312 * C9403 -
              C14935 * C9401) *
                 C44245) *
                C44323) *
               C44319) *
              C44317) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eeyy[61] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C151 * C152 - C325 * C93 - C151 * C277 + C44245 * C326) * C14929 +
             C350 * C44312) *
                C29158 +
            (C30619 + C30620) * C44323) *
               C3112 -
           ((C11218 * C44312 + C14662 * C14929) * C44323 +
            (C30620 + C30619) * C29158) *
               C44319) *
              C624 +
          (((C32287 + C32288) * C29158 +
            ((C151 * C9292 - C325 * C9234 - C151 * C9400 + C44245 * C9454) *
                 C14929 +
             (C151 * C9293 - C325 * C9235 - C151 * C9401 + C44245 * C9455) *
                 C44312) *
                C44323) *
               C44319 -
           ((C32288 + C32287) * C44323 +
            (C902 * C44312 +
             (C151 * C694 - C325 * C630 - C151 * C826 + C44245 * C886) *
                 C14929) *
                C29158) *
               C3112) *
              C44317) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eeyz[61] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C29158 * C215 - C29260 * C93 + C44323 * C1330 - C29261 * C1200) *
                 C151 +
             (C29158 * C390 - C29260 * C277 + C44323 * C1522 - C29261 * C1396) *
                 C44245) *
                C14929 +
            ((C29263 - C29264 + C29265 - C29266) * C151 +
             (C29429 - C29430 + C29431 - C29432) * C44245) *
                C44312) *
               C3112 +
           (((C29260 * C1200 - C29158 * C1330 + C29261 * C4005 -
              C44323 * C4099) *
                 C151 +
             (C29260 * C1396 - C29158 * C1522 + C29261 * C4143 -
              C44323 * C4228) *
                 C44245) *
                C14929 +
            ((C30463 - C30464 + C30465 - C30466) * C151 +
             (C30689 - C30690 + C30691 - C30692) * C44245) *
                C44312) *
               C44319) *
              C624 +
          ((((C29260 * C630 - C29158 * C760 + C29261 * C2614 - C44323 * C2732) *
                 C151 +
             (C29260 * C826 - C29158 * C952 + C29261 * C2788 - C44323 * C2897) *
                 C44245) *
                C14929 +
            ((C29815 - C29816 + C29817 - C29818) * C151 +
             (C30021 - C30022 + C30023 - C30024) * C44245) *
                C44312) *
               C3112 +
           (((C29158 * C2732 - C29260 * C2614 + C44323 * C9346 -
              C29261 * C9234) *
                 C151 +
             (C29158 * C2897 - C29260 * C2788 + C44323 * C9506 -
              C29261 * C9400) *
                 C44245) *
                C14929 +
            ((C29158 * C2733 - C29260 * C2615 + C44323 * C9347 -
              C29261 * C9235) *
                 C151 +
             (C29158 * C2898 - C29260 * C2789 + C44323 * C9507 -
              C29261 * C9401) *
                 C44245) *
                C44312) *
               C44319) *
              C44317) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eezx[61] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C14929 * C98 - C14933 * C93 + C44312 * C100 - C14935 * C94) *
                C29260 +
            (C14929 * C448 - C14933 * C443 + C44312 * C449 - C14935 * C444) *
                C29158 +
            (C30537 - C30538 + C30539 - C30540) * C29261 +
            (C30759 - C30760 + C30761 - C30762) * C44323) *
               C44245 * C3112 +
           ((C30538 - C30537 + C30540 - C30539) * C29260 +
            (C30760 - C30759 + C30762 - C30761) * C29158 +
            (C14933 * C4005 - C14929 * C4008 + C14935 * C4006 -
             C44312 * C4010) *
                C29261 +
            (C14933 * C4269 - C14929 * C4272 + C14935 * C4270 -
             C44312 * C4273) *
                C44323) *
               C44245 * C44319) *
              C624 +
          (((C15699 - C15698 + C15701 - C15700) * C29260 +
            (C15927 - C15926 + C15929 - C15928) * C29158 +
            (C18042 - C18043 + C18044 - C18045) * C29261 +
            (C18248 - C18249 + C18250 - C18251) * C44323) *
               C44245 * C3112 +
           ((C18043 - C18042 + C18045 - C18044) * C29260 +
            (C18249 - C18248 + C18251 - C18250) * C29158 +
            (C14929 * C9236 - C14933 * C9234 + C44312 * C9238 -
             C14935 * C9235) *
                C29261 +
            (C14929 * C9560 - C14933 * C9558 + C44312 * C9561 -
             C14935 * C9559) *
                C44323) *
               C44245 * C44319) *
              C44317) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eezy[61] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C44245 * C152 - C151 * C93) * C29260 +
             (C44245 * C491 - C151 * C443) * C29158 +
             (C10968 - C10969) * C29261 + (C11430 - C11431) * C44323) *
                C14929 +
            ((C163 - C164) * C29260 + (C497 - C498) * C29158 + C10972 * C29261 +
             C11432 * C44323) *
                C44312) *
               C3112 +
           (((C10969 - C10968) * C29260 + (C11431 - C11430) * C29158 +
             (C14483 - C14484) * C29261 + (C14826 - C14827) * C44323) *
                C14929 +
            (C10974 * C29260 + C11433 * C29158 + (C10976 - C10977) * C29261 +
             (C11434 - C11435) * C44323) *
                C44312) *
               C44319) *
              C624 +
          ((((C151 * C630 - C44245 * C694) * C29260 +
             (C151 * C1010 - C44245 * C1068) * C29158 +
             (C12692 - C12693) * C29261 + (C13101 - C13102) * C44323) *
                C14929 +
            ((C703 - C704) * C29260 + (C1073 - C1074) * C29158 +
             (C10307 - C10308) * C29261 + (C10726 - C10727) * C44323) *
                C44312) *
               C3112 +
           (((C12693 - C12692) * C29260 + (C13102 - C13101) * C29158 +
             (C44245 * C9292 - C151 * C9234) * C29261 +
             (C44245 * C9612 - C151 * C9558) * C44323) *
                C14929 +
            ((C10308 - C10307) * C29260 + (C10727 - C10726) * C29158 +
             (C44245 * C9293 - C151 * C9235) * C29261 +
             (C44245 * C9613 - C151 * C9559) * C44323) *
                C44312) *
               C44319) *
              C44317) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eezz[61] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C29260 * C215 - C29586 * C93 - C29260 * C443 + C29158 * C545 +
             C29261 * C1330 - C29587 * C1200 - C29261 * C1580 +
             C44323 * C1698) *
                C44245 * C14929 +
            (C29613 + C29614) * C44245 * C44312) *
               C3112 -
           ((C30911 + C30912) * C44245 * C44312 +
            (C29261 * C4099 - C29587 * C4005 - C29261 * C4269 + C44323 * C4354 +
             C29260 * C1330 - C29586 * C1200 - C29260 * C1580 +
             C29158 * C1698) *
                C44245 * C14929) *
               C44319) *
              C624 +
          (((C29260 * C2732 - C29586 * C2614 - C29260 * C2950 + C29158 * C3059 +
             C29261 * C9346 - C29587 * C9234 - C29261 * C9558 +
             C44323 * C9664) *
                C44245 * C14929 +
            (C29260 * C2733 - C29586 * C2615 - C29260 * C2951 + C29158 * C3060 +
             C29261 * C9347 - C29587 * C9235 - C29261 * C9559 +
             C44323 * C9665) *
                C44245 * C44312) *
               C44319 -
           ((C30235 + C30236) * C44245 * C44312 +
            (C29261 * C2732 - C29587 * C2614 - C29261 * C2950 + C44323 * C3059 +
             C29260 * C760 - C29586 * C630 - C29260 * C1010 + C29158 * C1128) *
                C44245 * C14929) *
               C3112) *
              C44317) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eexx[62] +=
        (2 * std::pow(Pi, 2.5) *
         (((C14933 * C98 - C14934 * C93 - C14933 * C99 + C14929 * C108 +
            C14935 * C100 - C14936 * C94 - C14935 * C101 + C44312 * C109) *
               C29158 +
           (C30327 + C30328) * C44323) *
              C44245 * C4002 -
          ((C33803 + C33804) * C44323 + (C30328 + C30327) * C29158) * C44245 *
              C4003 +
          ((C33804 + C33803) * C29158 +
           (C14933 * C14408 - C14934 * C14406 - C14933 * C14409 +
            C14929 * C14412 + C14935 * C14410 - C14936 * C14407 -
            C14935 * C14411 + C44312 * C14413) *
               C44323) *
              C44245 * C4004) *
         C44195 * C44161) /
        (p * q * std::sqrt(p + q));
    d2eexy[62] += (2 * std::pow(Pi, 2.5) *
                   ((((C44245 * C152 - C151 * C93) * C14933 +
                      (C44245 * C157 - C151 * C99) * C14929 +
                      (C163 - C164) * C14935 + (C165 - C166) * C44312) *
                         C29158 +
                     ((C10968 - C10969) * C14933 + (C10970 - C10971) * C14929 +
                      C10972 * C14935 + C10973 * C44312) *
                         C44323) *
                        C4002 +
                    (((C10969 - C10968) * C14933 + (C10971 - C10970) * C14929 +
                      C10974 * C14935 + C10975 * C44312) *
                         C29158 +
                     ((C14483 - C14484) * C14933 + (C14485 - C14486) * C14929 +
                      (C10976 - C10977) * C14935 + (C10978 - C10979) * C44312) *
                         C44323) *
                        C4003 +
                    (((C14484 - C14483) * C14933 + (C14486 - C14485) * C14929 +
                      (C10977 - C10976) * C14935 + (C10979 - C10978) * C44312) *
                         C29158 +
                     ((C44245 * C14478 - C151 * C14406) * C14933 +
                      (C44245 * C14480 - C151 * C14409) * C14929 +
                      (C44245 * C14479 - C151 * C14407) * C14935 +
                      (C44245 * C14481 - C151 * C14411) * C44312) *
                         C44323) *
                        C4004) *
                   C44195 * C44161) /
                  (p * q * std::sqrt(p + q));
    d2eexz[62] +=
        (2 * std::pow(Pi, 2.5) *
         (((C29158 * C215 - C29260 * C93 + C44323 * C1330 - C29261 * C1200) *
               C14933 +
           (C29158 * C220 - C29260 * C99 + C44323 * C1334 - C29261 * C1207) *
               C14929 +
           (C29263 - C29264 + C29265 - C29266) * C14935 +
           (C29267 - C29268 + C29269 - C29270) * C44312) *
              C44245 * C4002 +
          ((C29260 * C1200 - C29158 * C1330 + C29261 * C4005 - C44323 * C4099) *
               C14933 +
           (C29260 * C1207 - C29158 * C1334 + C29261 * C4009 - C44323 * C4102) *
               C14929 +
           (C30463 - C30464 + C30465 - C30466) * C14935 +
           (C30467 - C30468 + C30469 - C30470) * C44312) *
              C44245 * C4003 +
          ((C29158 * C4099 - C29260 * C4005 + C44323 * C14536 -
            C29261 * C14406) *
               C14933 +
           (C29158 * C4102 - C29260 * C4009 + C44323 * C14538 -
            C29261 * C14409) *
               C14929 +
           (C29158 * C4100 - C29260 * C4006 + C44323 * C14537 -
            C29261 * C14407) *
               C14935 +
           (C29158 * C4103 - C29260 * C4011 + C44323 * C14539 -
            C29261 * C14411) *
               C44312) *
              C44245 * C4004) *
         C44195 * C44161) /
        (p * q * std::sqrt(p + q));
    d2eeyx[62] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C14929 * C98 - C14933 * C93 + C44312 * C100 - C14935 * C94) *
                C151 +
            (C14929 * C282 - C14933 * C277 + C44312 * C283 - C14935 * C278) *
                C44245) *
               C29158 +
           ((C30537 - C30538 + C30539 - C30540) * C151 +
            (C30541 - C30542 + C30543 - C30544) * C44245) *
               C44323) *
              C4002 +
          (((C30538 - C30537 + C30540 - C30539) * C151 +
            (C30542 - C30541 + C30544 - C30543) * C44245) *
               C29158 +
           ((C33955 - C33956 + C33957 - C33958) * C151 +
            (C33959 - C33960 + C33961 - C33962) * C44245) *
               C44323) *
              C4003 +
          (((C33956 - C33955 + C33958 - C33957) * C151 +
            (C33960 - C33959 + C33962 - C33961) * C44245) *
               C29158 +
           ((C14929 * C14408 - C14933 * C14406 + C44312 * C14410 -
             C14935 * C14407) *
                C151 +
            (C14929 * C14592 - C14933 * C14590 + C44312 * C14593 -
             C14935 * C14591) *
                C44245) *
               C44323) *
              C4004) *
         C44195 * C44161) /
        (p * q * std::sqrt(p + q));
    d2eeyy[62] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C151 * C152 - C325 * C93 - C151 * C277 + C44245 * C326) * C14929 +
            C350 * C44312) *
               C29158 +
           (C30619 + C30620) * C44323) *
              C4002 -
          ((C34013 + C34014) * C44323 + (C30620 + C30619) * C29158) * C4003 +
          ((C34014 + C34013) * C29158 +
           ((C151 * C14478 - C325 * C14406 - C151 * C14590 + C44245 * C14652) *
                C14929 +
            (C151 * C14479 - C325 * C14407 - C151 * C14591 + C44245 * C14653) *
                C44312) *
               C44323) *
              C4004) *
         C44195 * C44161) /
        (p * q * std::sqrt(p + q));
    d2eeyz[62] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C29158 * C215 - C29260 * C93 + C44323 * C1330 - C29261 * C1200) *
                C151 +
            (C29158 * C390 - C29260 * C277 + C44323 * C1522 - C29261 * C1396) *
                C44245) *
               C14929 +
           ((C29263 - C29264 + C29265 - C29266) * C151 +
            (C29429 - C29430 + C29431 - C29432) * C44245) *
               C44312) *
              C4002 +
          (((C29260 * C1200 - C29158 * C1330 + C29261 * C4005 -
             C44323 * C4099) *
                C151 +
            (C29260 * C1396 - C29158 * C1522 + C29261 * C4143 -
             C44323 * C4228) *
                C44245) *
               C14929 +
           ((C30463 - C30464 + C30465 - C30466) * C151 +
            (C30689 - C30690 + C30691 - C30692) * C44245) *
               C44312) *
              C4003 +
          (((C29158 * C4099 - C29260 * C4005 + C44323 * C14536 -
             C29261 * C14406) *
                C151 +
            (C29158 * C4228 - C29260 * C4143 + C44323 * C14713 -
             C29261 * C14590) *
                C44245) *
               C14929 +
           ((C29158 * C4100 - C29260 * C4006 + C44323 * C14537 -
             C29261 * C14407) *
                C151 +
            (C29158 * C4229 - C29260 * C4144 + C44323 * C14714 -
             C29261 * C14591) *
                C44245) *
               C44312) *
              C4004) *
         C44195 * C44161) /
        (p * q * std::sqrt(p + q));
    d2eezx[62] +=
        (2 * std::pow(Pi, 2.5) *
         (((C14929 * C98 - C14933 * C93 + C44312 * C100 - C14935 * C94) *
               C29260 +
           (C14929 * C448 - C14933 * C443 + C44312 * C449 - C14935 * C444) *
               C29158 +
           (C30537 - C30538 + C30539 - C30540) * C29261 +
           (C30759 - C30760 + C30761 - C30762) * C44323) *
              C44245 * C4002 +
          ((C30538 - C30537 + C30540 - C30539) * C29260 +
           (C30760 - C30759 + C30762 - C30761) * C29158 +
           (C33955 - C33956 + C33957 - C33958) * C29261 +
           (C34115 - C34116 + C34117 - C34118) * C44323) *
              C44245 * C4003 +
          ((C33956 - C33955 + C33958 - C33957) * C29260 +
           (C34116 - C34115 + C34118 - C34117) * C29158 +
           (C14929 * C14408 - C14933 * C14406 + C44312 * C14410 -
            C14935 * C14407) *
               C29261 +
           (C14929 * C14767 - C14933 * C14765 + C44312 * C14768 -
            C14935 * C14766) *
               C44323) *
              C44245 * C4004) *
         C44195 * C44161) /
        (p * q * std::sqrt(p + q));
    d2eezy[62] += (2 * std::pow(Pi, 2.5) *
                   ((((C44245 * C152 - C151 * C93) * C29260 +
                      (C44245 * C491 - C151 * C443) * C29158 +
                      (C10968 - C10969) * C29261 + (C11430 - C11431) * C44323) *
                         C14929 +
                     ((C163 - C164) * C29260 + (C497 - C498) * C29158 +
                      C10972 * C29261 + C11432 * C44323) *
                         C44312) *
                        C4002 +
                    (((C10969 - C10968) * C29260 + (C11431 - C11430) * C29158 +
                      (C14483 - C14484) * C29261 + (C14826 - C14827) * C44323) *
                         C14929 +
                     (C10974 * C29260 + C11433 * C29158 +
                      (C10976 - C10977) * C29261 + (C11434 - C11435) * C44323) *
                         C44312) *
                        C4003 +
                    (((C14484 - C14483) * C29260 + (C14827 - C14826) * C29158 +
                      (C44245 * C14478 - C151 * C14406) * C29261 +
                      (C44245 * C14823 - C151 * C14765) * C44323) *
                         C14929 +
                     ((C10977 - C10976) * C29260 + (C11435 - C11434) * C29158 +
                      (C44245 * C14479 - C151 * C14407) * C29261 +
                      (C44245 * C14824 - C151 * C14766) * C44323) *
                         C44312) *
                        C4004) *
                   C44195 * C44161) /
                  (p * q * std::sqrt(p + q));
    d2eezz[62] +=
        (2 * std::pow(Pi, 2.5) *
         (((C29260 * C215 - C29586 * C93 - C29260 * C443 + C29158 * C545 +
            C29261 * C1330 - C29587 * C1200 - C29261 * C1580 + C44323 * C1698) *
               C44245 * C14929 +
           (C29613 + C29614) * C44245 * C44312) *
              C4002 -
          ((C30911 + C30912) * C44245 * C44312 +
           (C29261 * C4099 - C29587 * C4005 - C29261 * C4269 + C44323 * C4354 +
            C29260 * C1330 - C29586 * C1200 - C29260 * C1580 + C29158 * C1698) *
               C44245 * C14929) *
              C4003 +
          ((C29260 * C4099 - C29586 * C4005 - C29260 * C4269 + C29158 * C4354 +
            C29261 * C14536 - C29587 * C14406 - C29261 * C14765 +
            C44323 * C14877) *
               C44245 * C14929 +
           (C29260 * C4100 - C29586 * C4006 - C29260 * C4270 + C29158 * C4355 +
            C29261 * C14537 - C29587 * C14407 - C29261 * C14766 +
            C44323 * C14878) *
               C44245 * C44312) *
              C4004) *
         C44195 * C44161) /
        (p * q * std::sqrt(p + q));
    d2eexx[63] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C20063 * C98 - C20064 * C93 - C20063 * C99 + C44138 * C108) *
                C29158 +
            C25109 * C44323) *
               C4409 +
           (C20450 * C29158 + C22246 * C44323) * C44321) *
              C44212 * C44195 * C84 -
          ((C24469 * C44323 + C20452 * C29158) * C44321 +
           (C25110 * C44323 +
            (C20063 * C100 - C20064 * C94 - C20063 * C101 + C44138 * C109) *
                C29158) *
               C4409) *
              C44212 * C44195 * C85 +
          (((C20063 * C102 - C20064 * C95 - C20063 * C103 + C44138 * C110) *
                C29158 +
            (C20063 * C1202 - C20064 * C1198 - C20063 * C1203 +
             C44138 * C1210) *
                C44323) *
               C4409 +
           ((C20063 * C632 - C20064 * C628 - C20063 * C633 + C44138 * C640) *
                C29158 +
            (C20063 * C2621 - C20064 * C2616 - C20063 * C2622 +
             C44138 * C2625) *
                C44323) *
               C44321) *
              C44212 * C44195 * C86)) /
        (p * q * std::sqrt(p + q));
    d2eexy[63] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4409 * C152 - C4465 * C93 + C44321 * C694 - C4466 * C630) *
                C20063 +
            (C4409 * C157 - C4465 * C99 + C44321 * C698 - C4466 * C637) *
                C44138) *
               C29158 +
           ((C4409 * C1264 - C4465 * C1200 + C44321 * C2676 - C4466 * C2614) *
                C20063 +
            (C4409 * C1268 - C4465 * C1207 + C44321 * C2679 - C4466 * C2618) *
                C44138) *
               C44323) *
              C44212 * C44195 * C84 +
          (((C4469 - C4468 + C4471 - C4470) * C20063 +
            (C4473 - C4472 + C4475 - C4474) * C44138) *
               C29158 +
           ((C5714 - C5715 + C5716 - C5717) * C20063 +
            (C5718 - C5719 + C5720 - C5721) * C44138) *
               C44323) *
              C44212 * C44195 * C85 +
          (((C4477 - C4476 + C4479 - C4478) * C20063 +
            (C4481 - C4480 + C4483 - C4482) * C44138) *
               C29158 +
           ((C4409 * C1266 - C4465 * C1198 + C44321 * C2678 - C4466 * C2616) *
                C20063 +
            (C4409 * C1270 - C4465 * C1203 + C44321 * C2681 - C4466 * C2622) *
                C44138) *
               C44323) *
              C44212 * C44195 * C86)) /
        (p * q * std::sqrt(p + q));
    d2eexz[63] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C29158 * C215 - C29260 * C93 + C44323 * C1330 - C29261 * C1200) *
                C20063 +
            (C29158 * C220 - C29260 * C99 + C44323 * C1334 - C29261 * C1207) *
                C44138) *
               C4409 +
           ((C29158 * C760 - C29260 * C630 + C44323 * C2732 - C29261 * C2614) *
                C20063 +
            (C29158 * C764 - C29260 * C637 + C44323 * C2735 - C29261 * C2618) *
                C44138) *
               C44321) *
              C44212 * C44195 * C84 +
          (((C29264 - C29263 + C29266 - C29265) * C20063 +
            (C29268 - C29267 + C29270 - C29269) * C44138) *
               C4409 +
           ((C29815 - C29816 + C29817 - C29818) * C20063 +
            (C29819 - C29820 + C29821 - C29822) * C44138) *
               C44321) *
              C44212 * C44195 * C85 +
          (((C29272 - C29271 + C29274 - C29273) * C20063 +
            (C29276 - C29275 + C29278 - C29277) * C44138) *
               C4409 +
           ((C29158 * C762 - C29260 * C628 + C44323 * C2734 - C29261 * C2616) *
                C20063 +
            (C29158 * C766 - C29260 * C633 + C44323 * C2737 - C29261 * C2622) *
                C44138) *
               C44321) *
              C44212 * C44195 * C86)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[63] += (2 * std::pow(Pi, 2.5) *
                   ((((C44138 * C98 - C20063 * C93) * C4465 +
                      (C44138 * C282 - C20063 * C277) * C4409 +
                      (C20608 - C20609) * C4466 + (C20610 - C20611) * C44321) *
                         C29158 +
                     ((C25317 - C25318) * C4465 + (C25319 - C25320) * C4409 +
                      C27038 * C4466 + C27039 * C44321) *
                         C44323) *
                        C44212 * C44195 * C84 +
                    (((C20063 * C94 - C44138 * C100) * C4465 +
                      (C20063 * C278 - C44138 * C283) * C4409 +
                      (C20616 - C20617) * C4466 + (C20618 - C20619) * C44321) *
                         C29158 +
                     ((C25321 - C25322) * C4465 + (C25323 - C25324) * C4409 +
                      (C24677 - C24678) * C4466 + (C24679 - C24680) * C44321) *
                         C44323) *
                        C44212 * C44195 * C85 +
                    (((C44138 * C102 - C20063 * C95) * C4465 +
                      (C44138 * C284 - C20063 * C279) * C4409 +
                      (C44138 * C632 - C20063 * C628) * C4466 +
                      (C44138 * C832 - C20063 * C828) * C44321) *
                         C29158 +
                     ((C44138 * C1202 - C20063 * C1198) * C4465 +
                      (C44138 * C1402 - C20063 * C1398) * C4409 +
                      (C44138 * C2621 - C20063 * C2616) * C4466 +
                      (C44138 * C2793 - C20063 * C2790) * C44321) *
                         C44323) *
                        C44212 * C44195 * C86)) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[63] +=
        (2 * std::pow(Pi, 2.5) *
         (((C4465 * C152 - C4633 * C93 - C4465 * C277 + C4409 * C326 +
            C4466 * C694 - C4634 * C630 - C4466 * C826 + C44321 * C886) *
               C44138 * C29158 +
           (C4465 * C1264 - C4633 * C1200 - C4465 * C1396 + C4409 * C1456 +
            C4466 * C2676 - C4634 * C2614 - C4466 * C2788 + C44321 * C2844) *
               C44138 * C44323) *
              C44212 * C44195 * C84 -
          ((C5936 + C5937) * C44138 * C44323 +
           (C4661 + C4660) * C44138 * C29158) *
              C44212 * C44195 * C85 +
          ((C4663 + C4662) * C44138 * C29158 +
           (C4465 * C1266 - C4633 * C1198 - C4465 * C1398 + C4409 * C1454 +
            C4466 * C2678 - C4634 * C2616 - C4466 * C2790 + C44321 * C2846) *
               C44138 * C44323) *
              C44212 * C44195 * C86)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[63] +=
        (2 * std::pow(Pi, 2.5) *
         (((C29158 * C215 - C29260 * C93 + C44323 * C1330 - C29261 * C1200) *
               C4465 +
           (C29158 * C390 - C29260 * C277 + C44323 * C1522 - C29261 * C1396) *
               C4409 +
           (C29158 * C760 - C29260 * C630 + C44323 * C2732 - C29261 * C2614) *
               C4466 +
           (C29158 * C952 - C29260 * C826 + C44323 * C2897 - C29261 * C2788) *
               C44321) *
              C44138 * C44212 * C44195 * C84 +
          ((C29264 - C29263 + C29266 - C29265) * C4465 +
           (C29430 - C29429 + C29432 - C29431) * C4409 +
           (C29815 - C29816 + C29817 - C29818) * C4466 +
           (C30021 - C30022 + C30023 - C30024) * C44321) *
              C44138 * C44212 * C44195 * C85 +
          ((C29272 - C29271 + C29274 - C29273) * C4465 +
           (C29434 - C29433 + C29436 - C29435) * C4409 +
           (C29158 * C762 - C29260 * C628 + C44323 * C2734 - C29261 * C2616) *
               C4466 +
           (C29158 * C954 - C29260 * C828 + C44323 * C2899 - C29261 * C2790) *
               C44321) *
              C44138 * C44212 * C44195 * C86)) /
        (p * q * std::sqrt(p + q));
    d2eezx[63] += (2 * std::pow(Pi, 2.5) *
                   ((((C44138 * C98 - C20063 * C93) * C29260 +
                      (C44138 * C448 - C20063 * C443) * C29158 +
                      (C25317 - C25318) * C29261 + (C25537 - C25538) * C44323) *
                         C4409 +
                     ((C20608 - C20609) * C29260 + (C20774 - C20775) * C29158 +
                      C27038 * C29261 + C27262 * C44323) *
                         C44321) *
                        C44212 * C44195 * C84 +
                    (((C20063 * C94 - C44138 * C100) * C29260 +
                      (C20063 * C444 - C44138 * C449) * C29158 +
                      (C25321 - C25322) * C29261 + (C25539 - C25540) * C44323) *
                         C4409 +
                     ((C20616 - C20617) * C29260 + (C20778 - C20779) * C29158 +
                      (C24677 - C24678) * C29261 + (C24883 - C24884) * C44323) *
                         C44321) *
                        C44212 * C44195 * C85 +
                    (((C44138 * C102 - C20063 * C95) * C29260 +
                      (C44138 * C450 - C20063 * C445) * C29158 +
                      (C44138 * C1202 - C20063 * C1198) * C29261 +
                      (C44138 * C1586 - C20063 * C1582) * C44323) *
                         C4409 +
                     ((C44138 * C632 - C20063 * C628) * C29260 +
                      (C44138 * C1016 - C20063 * C1012) * C29158 +
                      (C44138 * C2621 - C20063 * C2616) * C29261 +
                      (C44138 * C2955 - C20063 * C2952) * C44323) *
                         C44321) *
                        C44212 * C44195 * C86)) /
                  (p * q * std::sqrt(p + q));
    d2eezy[63] +=
        (2 * std::pow(Pi, 2.5) *
         (((C4409 * C152 - C4465 * C93 + C44321 * C694 - C4466 * C630) *
               C29260 +
           (C4409 * C491 - C4465 * C443 + C44321 * C1068 - C4466 * C1010) *
               C29158 +
           (C4409 * C1264 - C4465 * C1200 + C44321 * C2676 - C4466 * C2614) *
               C29261 +
           (C4409 * C1638 - C4465 * C1580 + C44321 * C3006 - C4466 * C2950) *
               C44323) *
              C44138 * C44212 * C44195 * C84 +
          ((C4469 - C4468 + C4471 - C4470) * C29260 +
           (C4815 - C4814 + C4817 - C4816) * C29158 +
           (C5714 - C5715 + C5716 - C5717) * C29261 +
           (C6138 - C6139 + C6140 - C6141) * C44323) *
              C44138 * C44212 * C44195 * C85 +
          ((C4477 - C4476 + C4479 - C4478) * C29260 +
           (C4819 - C4818 + C4821 - C4820) * C29158 +
           (C4409 * C1266 - C4465 * C1198 + C44321 * C2678 - C4466 * C2616) *
               C29261 +
           (C4409 * C1640 - C4465 * C1582 + C44321 * C3008 - C4466 * C2952) *
               C44323) *
              C44138 * C44212 * C44195 * C86)) /
        (p * q * std::sqrt(p + q));
    d2eezz[63] +=
        (2 * std::pow(Pi, 2.5) *
         (((C29260 * C215 - C29586 * C93 - C29260 * C443 + C29158 * C545 +
            C29261 * C1330 - C29587 * C1200 - C29261 * C1580 + C44323 * C1698) *
               C4409 +
           (C29260 * C760 - C29586 * C630 - C29260 * C1010 + C29158 * C1128 +
            C29261 * C2732 - C29587 * C2614 - C29261 * C2950 + C44323 * C3059) *
               C44321) *
              C44138 * C44212 * C44195 * C84 -
          ((C30235 + C30236) * C44321 + (C29614 + C29613) * C4409) * C44138 *
              C44212 * C44195 * C85 +
          ((C29616 + C29615) * C4409 +
           (C29260 * C762 - C29586 * C628 - C29260 * C1012 + C29158 * C1126 +
            C29261 * C2734 - C29587 * C2616 - C29261 * C2952 + C44323 * C3061) *
               C44321) *
              C44138 * C44212 * C44195 * C86)) /
        (p * q * std::sqrt(p + q));
    d2eexx[64] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C20063 * C98 - C20064 * C93 - C20063 * C99 + C44138 * C108) *
                 C29158 +
             C25109 * C44323) *
                C4409 +
            (C34735 + C34736) * C44321) *
               C44212 * C624 -
           ((C22245 * C44323 + C20451 * C29158) * C44321 +
            (C34736 + C34735) * C4409) *
               C44212 * C44317) *
              C626 +
          (((C34737 + C34738) * C4409 +
            (C20453 * C29158 + (C20063 * C7401 - C20064 * C7398 -
                                C20063 * C7402 + C44138 * C7404) *
                                   C44323) *
                C44321) *
               C44212 * C44317 -
           ((C34738 + C34737) * C44321 +
            (C25110 * C44323 +
             (C20063 * C100 - C20064 * C94 - C20063 * C101 + C44138 * C109) *
                 C29158) *
                C4409) *
               C44212 * C624) *
              C44315)) /
        (p * q * std::sqrt(p + q));
    d2eexy[64] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C4409 * C152 - C4465 * C93 + C44321 * C694 - C4466 * C630) *
                 C20063 +
             (C4409 * C157 - C4465 * C99 + C44321 * C698 - C4466 * C637) *
                 C44138) *
                C29158 +
            ((C4409 * C1264 - C4465 * C1200 + C44321 * C2676 - C4466 * C2614) *
                 C20063 +
             (C4409 * C1268 - C4465 * C1207 + C44321 * C2679 - C4466 * C2618) *
                 C44138) *
                C44323) *
               C44212 * C624 +
           (((C4465 * C630 - C4409 * C694 + C4466 * C2212 - C44321 * C2262) *
                 C20063 +
             (C4465 * C637 - C4409 * C698 + C4466 * C2216 - C44321 * C2265) *
                 C44138) *
                C29158 +
            ((C4465 * C2614 - C4409 * C2676 + C4466 * C7397 - C44321 * C7485) *
                 C20063 +
             (C4465 * C2618 - C4409 * C2679 + C4466 * C7400 - C44321 * C7487) *
                 C44138) *
                C44323) *
               C44212 * C44317) *
              C626 +
          ((((C4469 - C4468 + C4471 - C4470) * C20063 +
             (C4473 - C4472 + C4475 - C4474) * C44138) *
                C29158 +
            ((C5714 - C5715 + C5716 - C5717) * C20063 +
             (C5718 - C5719 + C5720 - C5721) * C44138) *
                C44323) *
               C44212 * C624 +
           (((C5037 - C5036 + C5039 - C5038) * C20063 +
             (C5041 - C5040 + C5043 - C5042) * C44138) *
                C29158 +
            ((C4409 * C2677 - C4465 * C2615 + C44321 * C7486 - C4466 * C7398) *
                 C20063 +
             (C4409 * C2680 - C4465 * C2620 + C44321 * C7488 - C4466 * C7402) *
                 C44138) *
                C44323) *
               C44212 * C44317) *
              C44315)) /
        (p * q * std::sqrt(p + q));
    d2eexz[64] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C29158 * C215 - C29260 * C93 + C44323 * C1330 - C29261 * C1200) *
                 C20063 +
             (C29158 * C220 - C29260 * C99 + C44323 * C1334 - C29261 * C1207) *
                 C44138) *
                C4409 +
            ((C34871 - C34872 + C34873 - C34874) * C20063 +
             (C34875 - C34876 + C34877 - C34878) * C44138) *
                C44321) *
               C44212 * C624 +
           (((C34872 - C34871 + C34874 - C34873) * C20063 +
             (C34876 - C34875 + C34878 - C34877) * C44138) *
                C4409 +
            ((C29260 * C2212 - C29158 * C2306 + C29261 * C7397 -
              C44323 * C7555) *
                 C20063 +
             (C29260 * C2216 - C29158 * C2309 + C29261 * C7400 -
              C44323 * C7557) *
                 C44138) *
                C44321) *
               C44212 * C44317) *
              C626 +
          ((((C29264 - C29263 + C29266 - C29265) * C20063 +
             (C29268 - C29267 + C29270 - C29269) * C44138) *
                C4409 +
            ((C29815 - C29816 + C29817 - C29818) * C20063 +
             (C29819 - C29820 + C29821 - C29822) * C44138) *
                C44321) *
               C44212 * C624 +
           (((C29816 - C29815 + C29818 - C29817) * C20063 +
             (C29820 - C29819 + C29822 - C29821) * C44138) *
                C4409 +
            ((C29158 * C2307 - C29260 * C2213 + C44323 * C7556 -
              C29261 * C7398) *
                 C20063 +
             (C29158 * C2310 - C29260 * C2218 + C44323 * C7558 -
              C29261 * C7402) *
                 C44138) *
                C44321) *
               C44212 * C44317) *
              C44315)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[64] += (2 * std::pow(Pi, 2.5) *
                   (((((C44138 * C98 - C20063 * C93) * C4465 +
                       (C44138 * C282 - C20063 * C277) * C4409 +
                       (C20608 - C20609) * C4466 + (C20610 - C20611) * C44321) *
                          C29158 +
                      ((C25317 - C25318) * C4465 + (C25319 - C25320) * C4409 +
                       C27038 * C4466 + C27039 * C44321) *
                          C44323) *
                         C44212 * C624 +
                     (((C20609 - C20608) * C4465 + (C20611 - C20610) * C4409 +
                       (C20613 - C20612) * C4466 + (C20615 - C20614) * C44321) *
                          C29158 +
                      (C27040 * C4465 + C27041 * C4409 +
                       (C22413 - C22414) * C4466 + (C22415 - C22416) * C44321) *
                          C44323) *
                         C44212 * C44317) *
                        C626 +
                    ((((C20063 * C94 - C44138 * C100) * C4465 +
                       (C20063 * C278 - C44138 * C283) * C4409 +
                       (C20616 - C20617) * C4466 + (C20618 - C20619) * C44321) *
                          C29158 +
                      ((C25321 - C25322) * C4465 + (C25323 - C25324) * C4409 +
                       (C24677 - C24678) * C4466 + (C24679 - C24680) * C44321) *
                          C44323) *
                         C44212 * C624 +
                     (((C20617 - C20616) * C4465 + (C20619 - C20618) * C4409 +
                       (C20621 - C20620) * C4466 + (C20623 - C20622) * C44321) *
                          C29158 +
                      ((C24678 - C24677) * C4465 + (C24680 - C24679) * C4409 +
                       (C44138 * C7401 - C20063 * C7398) * C4466 +
                       (C44138 * C7632 - C20063 * C7630) * C44321) *
                          C44323) *
                         C44212 * C44317) *
                        C44315)) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[64] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4465 * C152 - C4633 * C93 - C4465 * C277 + C4409 * C326 +
             C4466 * C694 - C4634 * C630 - C4466 * C826 + C44321 * C886) *
                C44138 * C29158 +
            (C4465 * C1264 - C4633 * C1200 - C4465 * C1396 + C4409 * C1456 +
             C4466 * C2676 - C4634 * C2614 - C4466 * C2788 + C44321 * C2844) *
                C44138 * C44323) *
               C44212 * C624 -
           ((C4466 * C7485 - C4634 * C7397 - C4466 * C7629 + C44321 * C7707 +
             C4465 * C2676 - C4633 * C2614 - C4465 * C2788 + C4409 * C2844) *
                C44138 * C44323 +
            (C4466 * C2262 - C4634 * C2212 - C4466 * C2350 + C44321 * C2394 +
             C4465 * C694 - C4633 * C630 - C4465 * C826 + C4409 * C886) *
                C44138 * C29158) *
               C44212 * C44317) *
              C626 +
          (((C5283 + C5282) * C44138 * C29158 +
            (C4465 * C2677 - C4633 * C2615 - C4465 * C2789 + C4409 * C2845 +
             C4466 * C7486 - C4634 * C7398 - C4466 * C7630 + C44321 * C7708) *
                C44138 * C44323) *
               C44212 * C44317 -
           ((C5936 + C5937) * C44138 * C44323 +
            (C4661 + C4660) * C44138 * C29158) *
               C44212 * C624) *
              C44315)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[64] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C29158 * C215 - C29260 * C93 + C44323 * C1330 - C29261 * C1200) *
                C4465 +
            (C29158 * C390 - C29260 * C277 + C44323 * C1522 - C29261 * C1396) *
                C4409 +
            (C34871 - C34872 + C34873 - C34874) * C4466 +
            (C35077 - C35078 + C35079 - C35080) * C44321) *
               C44138 * C44212 * C624 +
           ((C34872 - C34871 + C34874 - C34873) * C4465 +
            (C35078 - C35077 + C35080 - C35079) * C4409 +
            (C29260 * C2212 - C29158 * C2306 + C29261 * C7397 -
             C44323 * C7555) *
                C4466 +
            (C29260 * C2350 - C29158 * C2435 + C29261 * C7629 -
             C44323 * C7775) *
                C44321) *
               C44138 * C44212 * C44317) *
              C626 +
          (((C29264 - C29263 + C29266 - C29265) * C4465 +
            (C29430 - C29429 + C29432 - C29431) * C4409 +
            (C29815 - C29816 + C29817 - C29818) * C4466 +
            (C30021 - C30022 + C30023 - C30024) * C44321) *
               C44138 * C44212 * C624 +
           ((C29816 - C29815 + C29818 - C29817) * C4465 +
            (C30022 - C30021 + C30024 - C30023) * C4409 +
            (C29158 * C2307 - C29260 * C2213 + C44323 * C7556 -
             C29261 * C7398) *
                C4466 +
            (C29158 * C2436 - C29260 * C2351 + C44323 * C7776 -
             C29261 * C7630) *
                C44321) *
               C44138 * C44212 * C44317) *
              C44315)) /
        (p * q * std::sqrt(p + q));
    d2eezx[64] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C44138 * C98 - C20063 * C93) * C29260 +
             (C44138 * C448 - C20063 * C443) * C29158 +
             (C25317 - C25318) * C29261 + (C25537 - C25538) * C44323) *
                C4409 +
            ((C20608 - C20609) * C29260 + (C20774 - C20775) * C29158 +
             C27038 * C29261 + C27262 * C44323) *
                C44321) *
               C44212 * C624 +
           (((C20609 - C20608) * C29260 + (C20775 - C20774) * C29158 +
             C27040 * C29261 + C27263 * C44323) *
                C4409 +
            ((C20613 - C20612) * C29260 + (C20777 - C20776) * C29158 +
             (C22413 - C22414) * C29261 + (C22575 - C22576) * C44323) *
                C44321) *
               C44212 * C44317) *
              C626 +
          ((((C20063 * C94 - C44138 * C100) * C29260 +
             (C20063 * C444 - C44138 * C449) * C29158 +
             (C25321 - C25322) * C29261 + (C25539 - C25540) * C44323) *
                C4409 +
            ((C20616 - C20617) * C29260 + (C20778 - C20779) * C29158 +
             (C24677 - C24678) * C29261 + (C24883 - C24884) * C44323) *
                C44321) *
               C44212 * C624 +
           (((C20617 - C20616) * C29260 + (C20779 - C20778) * C29158 +
             (C24678 - C24677) * C29261 + (C24884 - C24883) * C44323) *
                C4409 +
            ((C20621 - C20620) * C29260 + (C20781 - C20780) * C29158 +
             (C44138 * C7401 - C20063 * C7398) * C29261 +
             (C44138 * C7848 - C20063 * C7846) * C44323) *
                C44321) *
               C44212 * C44317) *
              C44315)) /
        (p * q * std::sqrt(p + q));
    d2eezy[64] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4409 * C152 - C4465 * C93 + C44321 * C694 - C4466 * C630) *
                C29260 +
            (C4409 * C491 - C4465 * C443 + C44321 * C1068 - C4466 * C1010) *
                C29158 +
            (C4409 * C1264 - C4465 * C1200 + C44321 * C2676 - C4466 * C2614) *
                C29261 +
            (C4409 * C1638 - C4465 * C1580 + C44321 * C3006 - C4466 * C2950) *
                C44323) *
               C44138 * C44212 * C624 +
           ((C4465 * C630 - C4409 * C694 + C4466 * C2212 - C44321 * C2262) *
                C29260 +
            (C4465 * C1010 - C4409 * C1068 + C4466 * C2476 - C44321 * C2520) *
                C29158 +
            (C4465 * C2614 - C4409 * C2676 + C4466 * C7397 - C44321 * C7485) *
                C29261 +
            (C4465 * C2950 - C4409 * C3006 + C4466 * C7845 - C44321 * C7919) *
                C44323) *
               C44138 * C44212 * C44317) *
              C626 +
          (((C4469 - C4468 + C4471 - C4470) * C29260 +
            (C4815 - C4814 + C4817 - C4816) * C29158 +
            (C5714 - C5715 + C5716 - C5717) * C29261 +
            (C6138 - C6139 + C6140 - C6141) * C44323) *
               C44138 * C44212 * C624 +
           ((C5037 - C5036 + C5039 - C5038) * C29260 +
            (C5497 - C5496 + C5499 - C5498) * C29158 +
            (C4409 * C2677 - C4465 * C2615 + C44321 * C7486 - C4466 * C7398) *
                C29261 +
            (C4409 * C3007 - C4465 * C2951 + C44321 * C7920 - C4466 * C7846) *
                C44323) *
               C44138 * C44212 * C44317) *
              C44315)) /
        (p * q * std::sqrt(p + q));
    d2eezz[64] += (2 * std::pow(Pi, 2.5) *
                   ((((C29260 * C215 - C29586 * C93 - C29260 * C443 +
                       C29158 * C545 + C29261 * C1330 - C29587 * C1200 -
                       C29261 * C1580 + C44323 * C1698) *
                          C4409 +
                      (C35291 + C35292) * C44321) *
                         C44138 * C44212 * C624 -
                     ((C29261 * C7555 - C29587 * C7397 - C29261 * C7845 +
                       C44323 * C7987 + C29260 * C2306 - C29586 * C2212 -
                       C29260 * C2476 + C29158 * C2561) *
                          C44321 +
                      (C35292 + C35291) * C4409) *
                         C44138 * C44212 * C44317) *
                        C626 +
                    (((C30236 + C30235) * C4409 +
                      (C29260 * C2307 - C29586 * C2213 - C29260 * C2477 +
                       C29158 * C2562 + C29261 * C7556 - C29587 * C7398 -
                       C29261 * C7846 + C44323 * C7988) *
                          C44321) *
                         C44138 * C44212 * C44317 -
                     ((C30235 + C30236) * C44321 + (C29614 + C29613) * C4409) *
                         C44138 * C44212 * C624) *
                        C44315)) /
                  (p * q * std::sqrt(p + q));
    d2eexx[65] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C20063 * C98 - C20064 * C93 - C20063 * C99 + C44138 * C108) *
                 C29158 +
             C25109 * C44323) *
                C4409 +
            (C34735 + C34736) * C44321) *
               C1196 -
           ((C26822 * C44323 + C22246 * C29158) * C44321 +
            (C28664 * C44323 + C25109 * C29158) * C4409) *
               C44319) *
              C44195 * C626 +
          (((C25110 * C29158 + (C20063 * C4010 - C20064 * C4006 -
                                C20063 * C4011 + C44138 * C4015) *
                                   C44323) *
                C4409 +
            (C24469 * C29158 + (C20063 * C9238 - C20064 * C9235 -
                                C20063 * C9239 + C44138 * C9241) *
                                   C44323) *
                C44321) *
               C44319 -
           ((C34738 + C34737) * C44321 +
            (C25110 * C44323 +
             (C20063 * C100 - C20064 * C94 - C20063 * C101 + C44138 * C109) *
                 C29158) *
                C4409) *
               C1196) *
              C44195 * C44315)) /
        (p * q * std::sqrt(p + q));
    d2eexy[65] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C4409 * C152 - C4465 * C93 + C44321 * C694 - C4466 * C630) *
                 C20063 +
             (C4409 * C157 - C4465 * C99 + C44321 * C698 - C4466 * C637) *
                 C44138) *
                C29158 +
            ((C35425 - C35426 + C35427 - C35428) * C20063 +
             (C35429 - C35430 + C35431 - C35432) * C44138) *
                C44323) *
               C1196 +
           (((C35426 - C35425 + C35428 - C35427) * C20063 +
             (C35430 - C35429 + C35432 - C35431) * C44138) *
                C29158 +
            ((C4465 * C4005 - C4409 * C4055 + C4466 * C9234 - C44321 * C9292) *
                 C20063 +
             (C4465 * C4009 - C4409 * C4058 + C4466 * C9237 - C44321 * C9294) *
                 C44138) *
                C44323) *
               C44319) *
              C44195 * C626 +
          ((((C4469 - C4468 + C4471 - C4470) * C20063 +
             (C4473 - C4472 + C4475 - C4474) * C44138) *
                C29158 +
            ((C5714 - C5715 + C5716 - C5717) * C20063 +
             (C5718 - C5719 + C5720 - C5721) * C44138) *
                C44323) *
               C1196 +
           (((C5715 - C5714 + C5717 - C5716) * C20063 +
             (C5719 - C5718 + C5721 - C5720) * C44138) *
                C29158 +
            ((C4409 * C4056 - C4465 * C4006 + C44321 * C9293 - C4466 * C9235) *
                 C20063 +
             (C4409 * C4059 - C4465 * C4011 + C44321 * C9295 - C4466 * C9239) *
                 C44138) *
                C44323) *
               C44319) *
              C44195 * C44315)) /
        (p * q * std::sqrt(p + q));
    d2eexz[65] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C29158 * C215 - C29260 * C93 + C44323 * C1330 - C29261 * C1200) *
                 C20063 +
             (C29158 * C220 - C29260 * C99 + C44323 * C1334 - C29261 * C1207) *
                 C44138) *
                C4409 +
            ((C34871 - C34872 + C34873 - C34874) * C20063 +
             (C34875 - C34876 + C34877 - C34878) * C44138) *
                C44321) *
               C1196 +
           (((C29260 * C1200 - C29158 * C1330 + C29261 * C4005 -
              C44323 * C4099) *
                 C20063 +
             (C29260 * C1207 - C29158 * C1334 + C29261 * C4009 -
              C44323 * C4102) *
                 C44138) *
                C4409 +
            ((C29260 * C2614 - C29158 * C2732 + C29261 * C9234 -
              C44323 * C9346) *
                 C20063 +
             (C29260 * C2618 - C29158 * C2735 + C29261 * C9237 -
              C44323 * C9348) *
                 C44138) *
                C44321) *
               C44319) *
              C44195 * C626 +
          ((((C29264 - C29263 + C29266 - C29265) * C20063 +
             (C29268 - C29267 + C29270 - C29269) * C44138) *
                C4409 +
            ((C29815 - C29816 + C29817 - C29818) * C20063 +
             (C29819 - C29820 + C29821 - C29822) * C44138) *
                C44321) *
               C1196 +
           (((C30464 - C30463 + C30466 - C30465) * C20063 +
             (C30468 - C30467 + C30470 - C30469) * C44138) *
                C4409 +
            ((C29158 * C2733 - C29260 * C2615 + C44323 * C9347 -
              C29261 * C9235) *
                 C20063 +
             (C29158 * C2736 - C29260 * C2620 + C44323 * C9349 -
              C29261 * C9239) *
                 C44138) *
                C44321) *
               C44319) *
              C44195 * C44315)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[65] += (2 * std::pow(Pi, 2.5) *
                   (((((C44138 * C98 - C20063 * C93) * C4465 +
                       (C44138 * C282 - C20063 * C277) * C4409 +
                       (C20608 - C20609) * C4466 + (C20610 - C20611) * C44321) *
                          C29158 +
                      ((C25317 - C25318) * C4465 + (C25319 - C25320) * C4409 +
                       C27038 * C4466 + C27039 * C44321) *
                          C44323) *
                         C1196 +
                     (((C25318 - C25317) * C4465 + (C25320 - C25319) * C4409 +
                       C27040 * C4466 + C27041 * C44321) *
                          C29158 +
                      ((C28829 - C28830) * C4465 + (C28831 - C28832) * C4409 +
                       (C27042 - C27043) * C4466 + (C27044 - C27045) * C44321) *
                          C44323) *
                         C44319) *
                        C44195 * C626 +
                    ((((C20063 * C94 - C44138 * C100) * C4465 +
                       (C20063 * C278 - C44138 * C283) * C4409 +
                       (C20616 - C20617) * C4466 + (C20618 - C20619) * C44321) *
                          C29158 +
                      ((C25321 - C25322) * C4465 + (C25323 - C25324) * C4409 +
                       (C24677 - C24678) * C4466 + (C24679 - C24680) * C44321) *
                          C44323) *
                         C1196 +
                     (((C25322 - C25321) * C4465 + (C25324 - C25323) * C4409 +
                       (C24678 - C24677) * C4466 + (C24680 - C24679) * C44321) *
                          C29158 +
                      ((C44138 * C4010 - C20063 * C4006) * C4465 +
                       (C44138 * C4147 - C20063 * C4144) * C4409 +
                       (C44138 * C9238 - C20063 * C9235) * C4466 +
                       (C44138 * C9403 - C20063 * C9401) * C44321) *
                          C44323) *
                         C44319) *
                        C44195 * C44315)) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[65] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4465 * C152 - C4633 * C93 - C4465 * C277 + C4409 * C326 +
             C4466 * C694 - C4634 * C630 - C4466 * C826 + C44321 * C886) *
                C44138 * C29158 +
            (C35643 + C35644) * C44138 * C44323) *
               C1196 -
           ((C4466 * C9292 - C4634 * C9234 - C4466 * C9400 + C44321 * C9454 +
             C4465 * C4055 - C4633 * C4005 - C4465 * C4143 + C4409 * C4187) *
                C44138 * C44323 +
            (C35644 + C35643) * C44138 * C29158) *
               C44319) *
              C44195 * C626 +
          (((C5937 + C5936) * C44138 * C29158 +
            (C4465 * C4056 - C4633 * C4006 - C4465 * C4144 + C4409 * C4188 +
             C4466 * C9293 - C4634 * C9235 - C4466 * C9401 + C44321 * C9455) *
                C44138 * C44323) *
               C44319 -
           ((C5936 + C5937) * C44138 * C44323 +
            (C4661 + C4660) * C44138 * C29158) *
               C1196) *
              C44195 * C44315)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[65] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C29158 * C215 - C29260 * C93 + C44323 * C1330 - C29261 * C1200) *
                C4465 +
            (C29158 * C390 - C29260 * C277 + C44323 * C1522 - C29261 * C1396) *
                C4409 +
            (C34871 - C34872 + C34873 - C34874) * C4466 +
            (C35077 - C35078 + C35079 - C35080) * C44321) *
               C44138 * C1196 +
           ((C29260 * C1200 - C29158 * C1330 + C29261 * C4005 -
             C44323 * C4099) *
                C4465 +
            (C29260 * C1396 - C29158 * C1522 + C29261 * C4143 -
             C44323 * C4228) *
                C4409 +
            (C29260 * C2614 - C29158 * C2732 + C29261 * C9234 -
             C44323 * C9346) *
                C4466 +
            (C29260 * C2788 - C29158 * C2897 + C29261 * C9400 -
             C44323 * C9506) *
                C44321) *
               C44138 * C44319) *
              C44195 * C626 +
          (((C29264 - C29263 + C29266 - C29265) * C4465 +
            (C29430 - C29429 + C29432 - C29431) * C4409 +
            (C29815 - C29816 + C29817 - C29818) * C4466 +
            (C30021 - C30022 + C30023 - C30024) * C44321) *
               C44138 * C1196 +
           ((C30464 - C30463 + C30466 - C30465) * C4465 +
            (C30690 - C30689 + C30692 - C30691) * C4409 +
            (C29158 * C2733 - C29260 * C2615 + C44323 * C9347 -
             C29261 * C9235) *
                C4466 +
            (C29158 * C2898 - C29260 * C2789 + C44323 * C9507 -
             C29261 * C9401) *
                C44321) *
               C44138 * C44319) *
              C44195 * C44315)) /
        (p * q * std::sqrt(p + q));
    d2eezx[65] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C44138 * C98 - C20063 * C93) * C29260 +
             (C44138 * C448 - C20063 * C443) * C29158 +
             (C25317 - C25318) * C29261 + (C25537 - C25538) * C44323) *
                C4409 +
            ((C20608 - C20609) * C29260 + (C20774 - C20775) * C29158 +
             C27038 * C29261 + C27262 * C44323) *
                C44321) *
               C1196 +
           (((C25318 - C25317) * C29260 + (C25538 - C25537) * C29158 +
             (C28829 - C28830) * C29261 + (C29001 - C29002) * C44323) *
                C4409 +
            (C27040 * C29260 + C27263 * C29158 + (C27042 - C27043) * C29261 +
             (C27264 - C27265) * C44323) *
                C44321) *
               C44319) *
              C44195 * C626 +
          ((((C20063 * C94 - C44138 * C100) * C29260 +
             (C20063 * C444 - C44138 * C449) * C29158 +
             (C25321 - C25322) * C29261 + (C25539 - C25540) * C44323) *
                C4409 +
            ((C20616 - C20617) * C29260 + (C20778 - C20779) * C29158 +
             (C24677 - C24678) * C29261 + (C24883 - C24884) * C44323) *
                C44321) *
               C1196 +
           (((C25322 - C25321) * C29260 + (C25540 - C25539) * C29158 +
             (C44138 * C4010 - C20063 * C4006) * C29261 +
             (C44138 * C4273 - C20063 * C4270) * C44323) *
                C4409 +
            ((C24678 - C24677) * C29260 + (C24884 - C24883) * C29158 +
             (C44138 * C9238 - C20063 * C9235) * C29261 +
             (C44138 * C9561 - C20063 * C9559) * C44323) *
                C44321) *
               C44319) *
              C44195 * C44315)) /
        (p * q * std::sqrt(p + q));
    d2eezy[65] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4409 * C152 - C4465 * C93 + C44321 * C694 - C4466 * C630) *
                C29260 +
            (C4409 * C491 - C4465 * C443 + C44321 * C1068 - C4466 * C1010) *
                C29158 +
            (C35425 - C35426 + C35427 - C35428) * C29261 +
            (C35843 - C35844 + C35845 - C35846) * C44323) *
               C44138 * C1196 +
           ((C35426 - C35425 + C35428 - C35427) * C29260 +
            (C35844 - C35843 + C35846 - C35845) * C29158 +
            (C4465 * C4005 - C4409 * C4055 + C4466 * C9234 - C44321 * C9292) *
                C29261 +
            (C4465 * C4269 - C4409 * C4313 + C4466 * C9558 - C44321 * C9612) *
                C44323) *
               C44138 * C44319) *
              C44195 * C626 +
          (((C4469 - C4468 + C4471 - C4470) * C29260 +
            (C4815 - C4814 + C4817 - C4816) * C29158 +
            (C5714 - C5715 + C5716 - C5717) * C29261 +
            (C6138 - C6139 + C6140 - C6141) * C44323) *
               C44138 * C1196 +
           ((C5715 - C5714 + C5717 - C5716) * C29260 +
            (C6139 - C6138 + C6141 - C6140) * C29158 +
            (C4409 * C4056 - C4465 * C4006 + C44321 * C9293 - C4466 * C9235) *
                C29261 +
            (C4409 * C4314 - C4465 * C4270 + C44321 * C9613 - C4466 * C9559) *
                C44323) *
               C44138 * C44319) *
              C44195 * C44315)) /
        (p * q * std::sqrt(p + q));
    d2eezz[65] += (2 * std::pow(Pi, 2.5) *
                   ((((C29260 * C215 - C29586 * C93 - C29260 * C443 +
                       C29158 * C545 + C29261 * C1330 - C29587 * C1200 -
                       C29261 * C1580 + C44323 * C1698) *
                          C4409 +
                      (C35291 + C35292) * C44321) *
                         C44138 * C1196 -
                     ((C29261 * C9346 - C29587 * C9234 - C29261 * C9558 +
                       C44323 * C9664 + C29260 * C2732 - C29586 * C2614 -
                       C29260 * C2950 + C29158 * C3059) *
                          C44321 +
                      (C29261 * C4099 - C29587 * C4005 - C29261 * C4269 +
                       C44323 * C4354 + C29260 * C1330 - C29586 * C1200 -
                       C29260 * C1580 + C29158 * C1698) *
                          C4409) *
                         C44138 * C44319) *
                        C44195 * C626 +
                    (((C30912 + C30911) * C4409 +
                      (C29260 * C2733 - C29586 * C2615 - C29260 * C2951 +
                       C29158 * C3060 + C29261 * C9347 - C29587 * C9235 -
                       C29261 * C9559 + C44323 * C9665) *
                          C44321) *
                         C44138 * C44319 -
                     ((C30235 + C30236) * C44321 + (C29614 + C29613) * C4409) *
                         C44138 * C1196) *
                        C44195 * C44315)) /
                  (p * q * std::sqrt(p + q));
    d2eexx[66] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C20063 * C98 - C20064 * C93 - C20063 * C99 + C44138 * C108) *
                 C29158 +
             C25109 * C44323) *
                C4409 +
            (C34735 + C34736) * C44321) *
               C44212 * C1766 -
           ((C22245 * C44323 + C20451 * C29158) * C44321 +
            (C34736 + C34735) * C4409) *
               C44212 * C44317) *
              C1768 +
          (((C34737 + C34738) * C4409 +
            (C20453 * C29158 + (C20063 * C7401 - C20064 * C7398 -
                                C20063 * C7402 + C44138 * C7404) *
                                   C44323) *
                C44321) *
               C44212 * C44317 -
           ((C34738 + C34737) * C44321 +
            (C25110 * C44323 +
             (C20063 * C100 - C20064 * C94 - C20063 * C101 + C44138 * C109) *
                 C29158) *
                C4409) *
               C44212 * C1766) *
              C44315)) /
        (p * q * std::sqrt(p + q));
    d2eexy[66] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C4409 * C152 - C4465 * C93 + C44321 * C694 - C4466 * C630) *
                 C20063 +
             (C4409 * C157 - C4465 * C99 + C44321 * C698 - C4466 * C637) *
                 C44138) *
                C29158 +
            ((C35425 - C35426 + C35427 - C35428) * C20063 +
             (C35429 - C35430 + C35431 - C35432) * C44138) *
                C44323) *
               C44212 * C1766 +
           (((C4465 * C630 - C4409 * C694 + C4466 * C2212 - C44321 * C2262) *
                 C20063 +
             (C4465 * C637 - C4409 * C698 + C4466 * C2216 - C44321 * C2265) *
                 C44138) *
                C29158 +
            ((C4465 * C2614 - C4409 * C2676 + C4466 * C7397 - C44321 * C7485) *
                 C20063 +
             (C4465 * C2618 - C4409 * C2679 + C4466 * C7400 - C44321 * C7487) *
                 C44138) *
                C44323) *
               C44212 * C44317) *
              C1768 +
          ((((C4469 - C4468 + C4471 - C4470) * C20063 +
             (C4473 - C4472 + C4475 - C4474) * C44138) *
                C29158 +
            ((C5714 - C5715 + C5716 - C5717) * C20063 +
             (C5718 - C5719 + C5720 - C5721) * C44138) *
                C44323) *
               C44212 * C1766 +
           (((C5037 - C5036 + C5039 - C5038) * C20063 +
             (C5041 - C5040 + C5043 - C5042) * C44138) *
                C29158 +
            ((C4409 * C2677 - C4465 * C2615 + C44321 * C7486 - C4466 * C7398) *
                 C20063 +
             (C4409 * C2680 - C4465 * C2620 + C44321 * C7488 - C4466 * C7402) *
                 C44138) *
                C44323) *
               C44212 * C44317) *
              C44315)) /
        (p * q * std::sqrt(p + q));
    d2eexz[66] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C29158 * C215 - C29260 * C93 + C44323 * C1330 - C29261 * C1200) *
                 C20063 +
             (C29158 * C220 - C29260 * C99 + C44323 * C1334 - C29261 * C1207) *
                 C44138) *
                C4409 +
            ((C34871 - C34872 + C34873 - C34874) * C20063 +
             (C34875 - C34876 + C34877 - C34878) * C44138) *
                C44321) *
               C44212 * C1766 +
           (((C34872 - C34871 + C34874 - C34873) * C20063 +
             (C34876 - C34875 + C34878 - C34877) * C44138) *
                C4409 +
            ((C29260 * C2212 - C29158 * C2306 + C29261 * C7397 -
              C44323 * C7555) *
                 C20063 +
             (C29260 * C2216 - C29158 * C2309 + C29261 * C7400 -
              C44323 * C7557) *
                 C44138) *
                C44321) *
               C44212 * C44317) *
              C1768 +
          ((((C29264 - C29263 + C29266 - C29265) * C20063 +
             (C29268 - C29267 + C29270 - C29269) * C44138) *
                C4409 +
            ((C29815 - C29816 + C29817 - C29818) * C20063 +
             (C29819 - C29820 + C29821 - C29822) * C44138) *
                C44321) *
               C44212 * C1766 +
           (((C29816 - C29815 + C29818 - C29817) * C20063 +
             (C29820 - C29819 + C29822 - C29821) * C44138) *
                C4409 +
            ((C29158 * C2307 - C29260 * C2213 + C44323 * C7556 -
              C29261 * C7398) *
                 C20063 +
             (C29158 * C2310 - C29260 * C2218 + C44323 * C7558 -
              C29261 * C7402) *
                 C44138) *
                C44321) *
               C44212 * C44317) *
              C44315)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[66] += (2 * std::pow(Pi, 2.5) *
                   (((((C44138 * C98 - C20063 * C93) * C4465 +
                       (C44138 * C282 - C20063 * C277) * C4409 +
                       (C20608 - C20609) * C4466 + (C20610 - C20611) * C44321) *
                          C29158 +
                      ((C25317 - C25318) * C4465 + (C25319 - C25320) * C4409 +
                       C27038 * C4466 + C27039 * C44321) *
                          C44323) *
                         C44212 * C1766 +
                     (((C20609 - C20608) * C4465 + (C20611 - C20610) * C4409 +
                       (C20613 - C20612) * C4466 + (C20615 - C20614) * C44321) *
                          C29158 +
                      (C27040 * C4465 + C27041 * C4409 +
                       (C22413 - C22414) * C4466 + (C22415 - C22416) * C44321) *
                          C44323) *
                         C44212 * C44317) *
                        C1768 +
                    ((((C20063 * C94 - C44138 * C100) * C4465 +
                       (C20063 * C278 - C44138 * C283) * C4409 +
                       (C20616 - C20617) * C4466 + (C20618 - C20619) * C44321) *
                          C29158 +
                      ((C25321 - C25322) * C4465 + (C25323 - C25324) * C4409 +
                       (C24677 - C24678) * C4466 + (C24679 - C24680) * C44321) *
                          C44323) *
                         C44212 * C1766 +
                     (((C20617 - C20616) * C4465 + (C20619 - C20618) * C4409 +
                       (C20621 - C20620) * C4466 + (C20623 - C20622) * C44321) *
                          C29158 +
                      ((C24678 - C24677) * C4465 + (C24680 - C24679) * C4409 +
                       (C44138 * C7401 - C20063 * C7398) * C4466 +
                       (C44138 * C7632 - C20063 * C7630) * C44321) *
                          C44323) *
                         C44212 * C44317) *
                        C44315)) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[66] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4465 * C152 - C4633 * C93 - C4465 * C277 + C4409 * C326 +
             C4466 * C694 - C4634 * C630 - C4466 * C826 + C44321 * C886) *
                C44138 * C29158 +
            (C35643 + C35644) * C44138 * C44323) *
               C44212 * C1766 -
           ((C4466 * C7485 - C4634 * C7397 - C4466 * C7629 + C44321 * C7707 +
             C4465 * C2676 - C4633 * C2614 - C4465 * C2788 + C4409 * C2844) *
                C44138 * C44323 +
            (C4466 * C2262 - C4634 * C2212 - C4466 * C2350 + C44321 * C2394 +
             C4465 * C694 - C4633 * C630 - C4465 * C826 + C4409 * C886) *
                C44138 * C29158) *
               C44212 * C44317) *
              C1768 +
          (((C5283 + C5282) * C44138 * C29158 +
            (C4465 * C2677 - C4633 * C2615 - C4465 * C2789 + C4409 * C2845 +
             C4466 * C7486 - C4634 * C7398 - C4466 * C7630 + C44321 * C7708) *
                C44138 * C44323) *
               C44212 * C44317 -
           ((C5936 + C5937) * C44138 * C44323 +
            (C4661 + C4660) * C44138 * C29158) *
               C44212 * C1766) *
              C44315)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[66] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C29158 * C215 - C29260 * C93 + C44323 * C1330 - C29261 * C1200) *
                C4465 +
            (C29158 * C390 - C29260 * C277 + C44323 * C1522 - C29261 * C1396) *
                C4409 +
            (C34871 - C34872 + C34873 - C34874) * C4466 +
            (C35077 - C35078 + C35079 - C35080) * C44321) *
               C44138 * C44212 * C1766 +
           ((C34872 - C34871 + C34874 - C34873) * C4465 +
            (C35078 - C35077 + C35080 - C35079) * C4409 +
            (C29260 * C2212 - C29158 * C2306 + C29261 * C7397 -
             C44323 * C7555) *
                C4466 +
            (C29260 * C2350 - C29158 * C2435 + C29261 * C7629 -
             C44323 * C7775) *
                C44321) *
               C44138 * C44212 * C44317) *
              C1768 +
          (((C29264 - C29263 + C29266 - C29265) * C4465 +
            (C29430 - C29429 + C29432 - C29431) * C4409 +
            (C29815 - C29816 + C29817 - C29818) * C4466 +
            (C30021 - C30022 + C30023 - C30024) * C44321) *
               C44138 * C44212 * C1766 +
           ((C29816 - C29815 + C29818 - C29817) * C4465 +
            (C30022 - C30021 + C30024 - C30023) * C4409 +
            (C29158 * C2307 - C29260 * C2213 + C44323 * C7556 -
             C29261 * C7398) *
                C4466 +
            (C29158 * C2436 - C29260 * C2351 + C44323 * C7776 -
             C29261 * C7630) *
                C44321) *
               C44138 * C44212 * C44317) *
              C44315)) /
        (p * q * std::sqrt(p + q));
    d2eezx[66] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C44138 * C98 - C20063 * C93) * C29260 +
             (C44138 * C448 - C20063 * C443) * C29158 +
             (C25317 - C25318) * C29261 + (C25537 - C25538) * C44323) *
                C4409 +
            ((C20608 - C20609) * C29260 + (C20774 - C20775) * C29158 +
             C27038 * C29261 + C27262 * C44323) *
                C44321) *
               C44212 * C1766 +
           (((C20609 - C20608) * C29260 + (C20775 - C20774) * C29158 +
             C27040 * C29261 + C27263 * C44323) *
                C4409 +
            ((C20613 - C20612) * C29260 + (C20777 - C20776) * C29158 +
             (C22413 - C22414) * C29261 + (C22575 - C22576) * C44323) *
                C44321) *
               C44212 * C44317) *
              C1768 +
          ((((C20063 * C94 - C44138 * C100) * C29260 +
             (C20063 * C444 - C44138 * C449) * C29158 +
             (C25321 - C25322) * C29261 + (C25539 - C25540) * C44323) *
                C4409 +
            ((C20616 - C20617) * C29260 + (C20778 - C20779) * C29158 +
             (C24677 - C24678) * C29261 + (C24883 - C24884) * C44323) *
                C44321) *
               C44212 * C1766 +
           (((C20617 - C20616) * C29260 + (C20779 - C20778) * C29158 +
             (C24678 - C24677) * C29261 + (C24884 - C24883) * C44323) *
                C4409 +
            ((C20621 - C20620) * C29260 + (C20781 - C20780) * C29158 +
             (C44138 * C7401 - C20063 * C7398) * C29261 +
             (C44138 * C7848 - C20063 * C7846) * C44323) *
                C44321) *
               C44212 * C44317) *
              C44315)) /
        (p * q * std::sqrt(p + q));
    d2eezy[66] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4409 * C152 - C4465 * C93 + C44321 * C694 - C4466 * C630) *
                C29260 +
            (C4409 * C491 - C4465 * C443 + C44321 * C1068 - C4466 * C1010) *
                C29158 +
            (C35425 - C35426 + C35427 - C35428) * C29261 +
            (C35843 - C35844 + C35845 - C35846) * C44323) *
               C44138 * C44212 * C1766 +
           ((C4465 * C630 - C4409 * C694 + C4466 * C2212 - C44321 * C2262) *
                C29260 +
            (C4465 * C1010 - C4409 * C1068 + C4466 * C2476 - C44321 * C2520) *
                C29158 +
            (C4465 * C2614 - C4409 * C2676 + C4466 * C7397 - C44321 * C7485) *
                C29261 +
            (C4465 * C2950 - C4409 * C3006 + C4466 * C7845 - C44321 * C7919) *
                C44323) *
               C44138 * C44212 * C44317) *
              C1768 +
          (((C4469 - C4468 + C4471 - C4470) * C29260 +
            (C4815 - C4814 + C4817 - C4816) * C29158 +
            (C5714 - C5715 + C5716 - C5717) * C29261 +
            (C6138 - C6139 + C6140 - C6141) * C44323) *
               C44138 * C44212 * C1766 +
           ((C5037 - C5036 + C5039 - C5038) * C29260 +
            (C5497 - C5496 + C5499 - C5498) * C29158 +
            (C4409 * C2677 - C4465 * C2615 + C44321 * C7486 - C4466 * C7398) *
                C29261 +
            (C4409 * C3007 - C4465 * C2951 + C44321 * C7920 - C4466 * C7846) *
                C44323) *
               C44138 * C44212 * C44317) *
              C44315)) /
        (p * q * std::sqrt(p + q));
    d2eezz[66] += (2 * std::pow(Pi, 2.5) *
                   ((((C29260 * C215 - C29586 * C93 - C29260 * C443 +
                       C29158 * C545 + C29261 * C1330 - C29587 * C1200 -
                       C29261 * C1580 + C44323 * C1698) *
                          C4409 +
                      (C35291 + C35292) * C44321) *
                         C44138 * C44212 * C1766 -
                     ((C29261 * C7555 - C29587 * C7397 - C29261 * C7845 +
                       C44323 * C7987 + C29260 * C2306 - C29586 * C2212 -
                       C29260 * C2476 + C29158 * C2561) *
                          C44321 +
                      (C35292 + C35291) * C4409) *
                         C44138 * C44212 * C44317) *
                        C1768 +
                    (((C30236 + C30235) * C4409 +
                      (C29260 * C2307 - C29586 * C2213 - C29260 * C2477 +
                       C29158 * C2562 + C29261 * C7556 - C29587 * C7398 -
                       C29261 * C7846 + C44323 * C7988) *
                          C44321) *
                         C44138 * C44212 * C44317 -
                     ((C30235 + C30236) * C44321 + (C29614 + C29613) * C4409) *
                         C44138 * C44212 * C1766) *
                        C44315)) /
                  (p * q * std::sqrt(p + q));
    d2eexx[67] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C20063 * C98 - C20064 * C93 - C20063 * C99 + C44138 * C108) *
                C29158 +
            C25109 * C44323) *
               C4409 +
           (C34735 + C34736) * C44321) *
              C44212 * C2208 -
          ((C36557 + C36558) * C44321 + (C34736 + C34735) * C4409) * C44212 *
              C2209 +
          ((C36558 + C36557) * C4409 +
           (C21830 * C29158 + (C20063 * C22229 - C20064 * C22228 -
                               C20063 * C22230 + C44138 * C22231) *
                                  C44323) *
               C44321) *
              C44212 * C2210) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eexy[67] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4409 * C152 - C4465 * C93 + C44321 * C694 - C4466 * C630) *
                C20063 +
            (C4409 * C157 - C4465 * C99 + C44321 * C698 - C4466 * C637) *
                C44138) *
               C29158 +
           ((C35425 - C35426 + C35427 - C35428) * C20063 +
            (C35429 - C35430 + C35431 - C35432) * C44138) *
               C44323) *
              C44212 * C2208 +
          (((C4465 * C630 - C4409 * C694 + C4466 * C2212 - C44321 * C2262) *
                C20063 +
            (C4465 * C637 - C4409 * C698 + C4466 * C2216 - C44321 * C2265) *
                C44138) *
               C29158 +
           ((C4465 * C2614 - C4409 * C2676 + C4466 * C7397 - C44321 * C7485) *
                C20063 +
            (C4465 * C2618 - C4409 * C2679 + C4466 * C7400 - C44321 * C7487) *
                C44138) *
               C44323) *
              C44212 * C2209 +
          (((C4409 * C2262 - C4465 * C2212 + C44321 * C6932 - C4466 * C6860) *
                C20063 +
            (C4409 * C2265 - C4465 * C2216 + C44321 * C6934 - C4466 * C6863) *
                C44138) *
               C29158 +
           ((C4409 * C7485 - C4465 * C7397 + C44321 * C22298 - C4466 * C22228) *
                C20063 +
            (C4409 * C7487 - C4465 * C7400 + C44321 * C22299 - C4466 * C22230) *
                C44138) *
               C44323) *
              C44212 * C2210) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eexz[67] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C29158 * C215 - C29260 * C93 + C44323 * C1330 - C29261 * C1200) *
                C20063 +
            (C29158 * C220 - C29260 * C99 + C44323 * C1334 - C29261 * C1207) *
                C44138) *
               C4409 +
           ((C34871 - C34872 + C34873 - C34874) * C20063 +
            (C34875 - C34876 + C34877 - C34878) * C44138) *
               C44321) *
              C44212 * C2208 +
          (((C34872 - C34871 + C34874 - C34873) * C20063 +
            (C34876 - C34875 + C34878 - C34877) * C44138) *
               C4409 +
           ((C36659 - C36660 + C36661 - C36662) * C20063 +
            (C36663 - C36664 + C36665 - C36666) * C44138) *
               C44321) *
              C44212 * C2209 +
          (((C36660 - C36659 + C36662 - C36661) * C20063 +
            (C36664 - C36663 + C36666 - C36665) * C44138) *
               C4409 +
           ((C29158 * C6986 - C29260 * C6860 + C44323 * C22350 -
             C29261 * C22228) *
                C20063 +
            (C29158 * C6988 - C29260 * C6863 + C44323 * C22351 -
             C29261 * C22230) *
                C44138) *
               C44321) *
              C44212 * C2210) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eeyx[67] += (2 * std::pow(Pi, 2.5) *
                   ((((C44138 * C98 - C20063 * C93) * C4465 +
                      (C44138 * C282 - C20063 * C277) * C4409 +
                      (C20608 - C20609) * C4466 + (C20610 - C20611) * C44321) *
                         C29158 +
                     ((C25317 - C25318) * C4465 + (C25319 - C25320) * C4409 +
                      C27038 * C4466 + C27039 * C44321) *
                         C44323) *
                        C44212 * C2208 +
                    (((C20609 - C20608) * C4465 + (C20611 - C20610) * C4409 +
                      (C20613 - C20612) * C4466 + (C20615 - C20614) * C44321) *
                         C29158 +
                     (C27040 * C4465 + C27041 * C4409 +
                      (C22413 - C22414) * C4466 + (C22415 - C22416) * C44321) *
                         C44323) *
                        C44212 * C2209 +
                    ((C21961 * C4465 + C21962 * C4409 +
                      (C21964 - C21963) * C4466 + (C21966 - C21965) * C44321) *
                         C29158 +
                     ((C22414 - C22413) * C4465 + (C22416 - C22415) * C4409 +
                      (C44138 * C22229 - C20063 * C22228) * C4466 +
                      (C44138 * C22407 - C20063 * C22406) * C44321) *
                         C44323) *
                        C44212 * C2210) *
                   C44161) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[67] +=
        (2 * std::pow(Pi, 2.5) *
         (((C4465 * C152 - C4633 * C93 - C4465 * C277 + C4409 * C326 +
            C4466 * C694 - C4634 * C630 - C4466 * C826 + C44321 * C886) *
               C44138 * C29158 +
           (C35643 + C35644) * C44138 * C44323) *
              C44212 * C2208 -
          ((C4466 * C7485 - C4634 * C7397 - C4466 * C7629 + C44321 * C7707 +
            C4465 * C2676 - C4633 * C2614 - C4465 * C2788 + C4409 * C2844) *
               C44138 * C44323 +
           (C4466 * C2262 - C4634 * C2212 - C4466 * C2350 + C44321 * C2394 +
            C4465 * C694 - C4633 * C630 - C4465 * C826 + C4409 * C886) *
               C44138 * C29158) *
              C44212 * C2209 +
          ((C4465 * C2262 - C4633 * C2212 - C4465 * C2350 + C4409 * C2394 +
            C4466 * C6932 - C4634 * C6860 - C4466 * C7044 + C44321 * C7106) *
               C44138 * C29158 +
           (C4465 * C7485 - C4633 * C7397 - C4465 * C7629 + C4409 * C7707 +
            C4466 * C22298 - C4634 * C22228 - C4466 * C22406 +
            C44321 * C22466) *
               C44138 * C44323) *
              C44212 * C2210) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eeyz[67] +=
        (2 * std::pow(Pi, 2.5) *
         (((C29158 * C215 - C29260 * C93 + C44323 * C1330 - C29261 * C1200) *
               C4465 +
           (C29158 * C390 - C29260 * C277 + C44323 * C1522 - C29261 * C1396) *
               C4409 +
           (C34871 - C34872 + C34873 - C34874) * C4466 +
           (C35077 - C35078 + C35079 - C35080) * C44321) *
              C44138 * C44212 * C2208 +
          ((C34872 - C34871 + C34874 - C34873) * C4465 +
           (C35078 - C35077 + C35080 - C35079) * C4409 +
           (C36659 - C36660 + C36661 - C36662) * C4466 +
           (C36817 - C36818 + C36819 - C36820) * C44321) *
              C44138 * C44212 * C2209 +
          ((C36660 - C36659 + C36662 - C36661) * C4465 +
           (C36818 - C36817 + C36820 - C36819) * C4409 +
           (C29158 * C6986 - C29260 * C6860 + C44323 * C22350 -
            C29261 * C22228) *
               C4466 +
           (C29158 * C7158 - C29260 * C7044 + C44323 * C22517 -
            C29261 * C22406) *
               C44321) *
              C44138 * C44212 * C2210) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eezx[67] += (2 * std::pow(Pi, 2.5) *
                   ((((C44138 * C98 - C20063 * C93) * C29260 +
                      (C44138 * C448 - C20063 * C443) * C29158 +
                      (C25317 - C25318) * C29261 + (C25537 - C25538) * C44323) *
                         C4409 +
                     ((C20608 - C20609) * C29260 + (C20774 - C20775) * C29158 +
                      C27038 * C29261 + C27262 * C44323) *
                         C44321) *
                        C44212 * C2208 +
                    (((C20609 - C20608) * C29260 + (C20775 - C20774) * C29158 +
                      C27040 * C29261 + C27263 * C44323) *
                         C4409 +
                     ((C20613 - C20612) * C29260 + (C20777 - C20776) * C29158 +
                      (C22413 - C22414) * C29261 + (C22575 - C22576) * C44323) *
                         C44321) *
                        C44212 * C2209 +
                    ((C21961 * C29260 + C22089 * C29158 +
                      (C22414 - C22413) * C29261 + (C22576 - C22575) * C44323) *
                         C4409 +
                     ((C21964 - C21963) * C29260 + (C22091 - C22090) * C29158 +
                      (C44138 * C22229 - C20063 * C22228) * C29261 +
                      (C44138 * C22571 - C20063 * C22570) * C44323) *
                         C44321) *
                        C44212 * C2210) *
                   C44161) /
                  (p * q * std::sqrt(p + q));
    d2eezy[67] +=
        (2 * std::pow(Pi, 2.5) *
         (((C4409 * C152 - C4465 * C93 + C44321 * C694 - C4466 * C630) *
               C29260 +
           (C4409 * C491 - C4465 * C443 + C44321 * C1068 - C4466 * C1010) *
               C29158 +
           (C35425 - C35426 + C35427 - C35428) * C29261 +
           (C35843 - C35844 + C35845 - C35846) * C44323) *
              C44138 * C44212 * C2208 +
          ((C4465 * C630 - C4409 * C694 + C4466 * C2212 - C44321 * C2262) *
               C29260 +
           (C4465 * C1010 - C4409 * C1068 + C4466 * C2476 - C44321 * C2520) *
               C29158 +
           (C4465 * C2614 - C4409 * C2676 + C4466 * C7397 - C44321 * C7485) *
               C29261 +
           (C4465 * C2950 - C4409 * C3006 + C4466 * C7845 - C44321 * C7919) *
               C44323) *
              C44138 * C44212 * C2209 +
          ((C4409 * C2262 - C4465 * C2212 + C44321 * C6932 - C4466 * C6860) *
               C29260 +
           (C4409 * C2520 - C4465 * C2476 + C44321 * C7270 - C4466 * C7212) *
               C29158 +
           (C4409 * C7485 - C4465 * C7397 + C44321 * C22298 - C4466 * C22228) *
               C29261 +
           (C4409 * C7919 - C4465 * C7845 + C44321 * C22626 - C4466 * C22570) *
               C44323) *
              C44138 * C44212 * C2210) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eezz[67] +=
        (2 * std::pow(Pi, 2.5) *
         (((C29260 * C215 - C29586 * C93 - C29260 * C443 + C29158 * C545 +
            C29261 * C1330 - C29587 * C1200 - C29261 * C1580 + C44323 * C1698) *
               C4409 +
           (C35291 + C35292) * C44321) *
              C44138 * C44212 * C2208 -
          ((C36983 + C36984) * C44321 + (C35292 + C35291) * C4409) * C44138 *
              C44212 * C2209 +
          ((C36984 + C36983) * C4409 +
           (C29260 * C6986 - C29586 * C6860 - C29260 * C7212 + C29158 * C7322 +
            C29261 * C22350 - C29587 * C22228 - C29261 * C22570 +
            C44323 * C22677) *
               C44321) *
              C44138 * C44212 * C2210) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eexx[68] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C20063 * C98 - C20064 * C93 - C20063 * C99 + C44138 * C108) *
                 C29158 +
             C25109 * C44323) *
                C4409 +
            (C34735 + C34736) * C44321) *
               C1196 -
           ((C37051 + C37052) * C44321 +
            (C28664 * C44323 + C25109 * C29158) * C4409) *
               C44319) *
              C1766 +
          (((C37052 + C37051) * C4409 +
            (C22245 * C29158 + (C20063 * C23624 - C20064 * C23623 -
                                C20063 * C23625 + C44138 * C23626) *
                                   C44323) *
                C44321) *
               C44319 -
           ((C36557 + C36558) * C44321 + (C34736 + C34735) * C4409) * C1196) *
              C44317) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eexy[68] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C4409 * C152 - C4465 * C93 + C44321 * C694 - C4466 * C630) *
                 C20063 +
             (C4409 * C157 - C4465 * C99 + C44321 * C698 - C4466 * C637) *
                 C44138) *
                C29158 +
            ((C35425 - C35426 + C35427 - C35428) * C20063 +
             (C35429 - C35430 + C35431 - C35432) * C44138) *
                C44323) *
               C1196 +
           (((C35426 - C35425 + C35428 - C35427) * C20063 +
             (C35430 - C35429 + C35432 - C35431) * C44138) *
                C29158 +
            ((C4465 * C4005 - C4409 * C4055 + C4466 * C9234 - C44321 * C9292) *
                 C20063 +
             (C4465 * C4009 - C4409 * C4058 + C4466 * C9237 - C44321 * C9294) *
                 C44138) *
                C44323) *
               C44319) *
              C1766 +
          ((((C4465 * C630 - C4409 * C694 + C4466 * C2212 - C44321 * C2262) *
                 C20063 +
             (C4465 * C637 - C4409 * C698 + C4466 * C2216 - C44321 * C2265) *
                 C44138) *
                C29158 +
            ((C37119 - C37120 + C37121 - C37122) * C20063 +
             (C37123 - C37124 + C37125 - C37126) * C44138) *
                C44323) *
               C1196 +
           (((C37120 - C37119 + C37122 - C37121) * C20063 +
             (C37124 - C37123 + C37126 - C37125) * C44138) *
                C29158 +
            ((C4409 * C9292 - C4465 * C9234 + C44321 * C23665 -
              C4466 * C23623) *
                 C20063 +
             (C4409 * C9294 - C4465 * C9237 + C44321 * C23666 -
              C4466 * C23625) *
                 C44138) *
                C44323) *
               C44319) *
              C44317) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eexz[68] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C29158 * C215 - C29260 * C93 + C44323 * C1330 - C29261 * C1200) *
                 C20063 +
             (C29158 * C220 - C29260 * C99 + C44323 * C1334 - C29261 * C1207) *
                 C44138) *
                C4409 +
            ((C34871 - C34872 + C34873 - C34874) * C20063 +
             (C34875 - C34876 + C34877 - C34878) * C44138) *
                C44321) *
               C1196 +
           (((C29260 * C1200 - C29158 * C1330 + C29261 * C4005 -
              C44323 * C4099) *
                 C20063 +
             (C29260 * C1207 - C29158 * C1334 + C29261 * C4009 -
              C44323 * C4102) *
                 C44138) *
                C4409 +
            ((C37193 - C37194 + C37195 - C37196) * C20063 +
             (C37197 - C37198 + C37199 - C37200) * C44138) *
                C44321) *
               C44319) *
              C1766 +
          ((((C34872 - C34871 + C34874 - C34873) * C20063 +
             (C34876 - C34875 + C34878 - C34877) * C44138) *
                C4409 +
            ((C36659 - C36660 + C36661 - C36662) * C20063 +
             (C36663 - C36664 + C36665 - C36666) * C44138) *
                C44321) *
               C1196 +
           (((C37194 - C37193 + C37196 - C37195) * C20063 +
             (C37198 - C37197 + C37200 - C37199) * C44138) *
                C4409 +
            ((C29158 * C7555 - C29260 * C7397 + C44323 * C23705 -
              C29261 * C23623) *
                 C20063 +
             (C29158 * C7557 - C29260 * C7400 + C44323 * C23706 -
              C29261 * C23625) *
                 C44138) *
                C44321) *
               C44319) *
              C44317) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eeyx[68] += (2 * std::pow(Pi, 2.5) *
                   (((((C44138 * C98 - C20063 * C93) * C4465 +
                       (C44138 * C282 - C20063 * C277) * C4409 +
                       (C20608 - C20609) * C4466 + (C20610 - C20611) * C44321) *
                          C29158 +
                      ((C25317 - C25318) * C4465 + (C25319 - C25320) * C4409 +
                       C27038 * C4466 + C27039 * C44321) *
                          C44323) *
                         C1196 +
                     (((C25318 - C25317) * C4465 + (C25320 - C25319) * C4409 +
                       C27040 * C4466 + C27041 * C44321) *
                          C29158 +
                      ((C28829 - C28830) * C4465 + (C28831 - C28832) * C4409 +
                       (C27042 - C27043) * C4466 + (C27044 - C27045) * C44321) *
                          C44323) *
                         C44319) *
                        C1766 +
                    ((((C20609 - C20608) * C4465 + (C20611 - C20610) * C4409 +
                       (C20613 - C20612) * C4466 + (C20615 - C20614) * C44321) *
                          C29158 +
                      (C27040 * C4465 + C27041 * C4409 +
                       (C22413 - C22414) * C4466 + (C22415 - C22416) * C44321) *
                          C44323) *
                         C1196 +
                     ((C27038 * C4465 + C27039 * C4409 +
                       (C22414 - C22413) * C4466 + (C22416 - C22415) * C44321) *
                          C29158 +
                      ((C27043 - C27042) * C4465 + (C27045 - C27044) * C4409 +
                       (C44138 * C23624 - C20063 * C23623) * C4466 +
                       (C44138 * C23746 - C20063 * C23745) * C44321) *
                          C44323) *
                         C44319) *
                        C44317) *
                   C44161) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[68] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4465 * C152 - C4633 * C93 - C4465 * C277 + C4409 * C326 +
             C4466 * C694 - C4634 * C630 - C4466 * C826 + C44321 * C886) *
                C44138 * C29158 +
            (C35643 + C35644) * C44138 * C44323) *
               C1196 -
           ((C4466 * C9292 - C4634 * C9234 - C4466 * C9400 + C44321 * C9454 +
             C4465 * C4055 - C4633 * C4005 - C4465 * C4143 + C4409 * C4187) *
                C44138 * C44323 +
            (C35644 + C35643) * C44138 * C29158) *
               C44319) *
              C1766 +
          (((C37345 + C37346) * C44138 * C29158 +
            (C4465 * C9292 - C4633 * C9234 - C4465 * C9400 + C4409 * C9454 +
             C4466 * C23665 - C4634 * C23623 - C4466 * C23745 +
             C44321 * C23785) *
                C44138 * C44323) *
               C44319 -
           ((C37346 + C37345) * C44138 * C44323 +
            (C4466 * C2262 - C4634 * C2212 - C4466 * C2350 + C44321 * C2394 +
             C4465 * C694 - C4633 * C630 - C4465 * C826 + C4409 * C886) *
                C44138 * C29158) *
               C1196) *
              C44317) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eeyz[68] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C29158 * C215 - C29260 * C93 + C44323 * C1330 - C29261 * C1200) *
                C4465 +
            (C29158 * C390 - C29260 * C277 + C44323 * C1522 - C29261 * C1396) *
                C4409 +
            (C34871 - C34872 + C34873 - C34874) * C4466 +
            (C35077 - C35078 + C35079 - C35080) * C44321) *
               C44138 * C1196 +
           ((C29260 * C1200 - C29158 * C1330 + C29261 * C4005 -
             C44323 * C4099) *
                C4465 +
            (C29260 * C1396 - C29158 * C1522 + C29261 * C4143 -
             C44323 * C4228) *
                C4409 +
            (C37193 - C37194 + C37195 - C37196) * C4466 +
            (C37413 - C37414 + C37415 - C37416) * C44321) *
               C44138 * C44319) *
              C1766 +
          (((C34872 - C34871 + C34874 - C34873) * C4465 +
            (C35078 - C35077 + C35080 - C35079) * C4409 +
            (C36659 - C36660 + C36661 - C36662) * C4466 +
            (C36817 - C36818 + C36819 - C36820) * C44321) *
               C44138 * C1196 +
           ((C37194 - C37193 + C37196 - C37195) * C4465 +
            (C37414 - C37413 + C37416 - C37415) * C4409 +
            (C29158 * C7555 - C29260 * C7397 + C44323 * C23705 -
             C29261 * C23623) *
                C4466 +
            (C29158 * C7775 - C29260 * C7629 + C44323 * C23824 -
             C29261 * C23745) *
                C44321) *
               C44138 * C44319) *
              C44317) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eezx[68] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C44138 * C98 - C20063 * C93) * C29260 +
             (C44138 * C448 - C20063 * C443) * C29158 +
             (C25317 - C25318) * C29261 + (C25537 - C25538) * C44323) *
                C4409 +
            ((C20608 - C20609) * C29260 + (C20774 - C20775) * C29158 +
             C27038 * C29261 + C27262 * C44323) *
                C44321) *
               C1196 +
           (((C25318 - C25317) * C29260 + (C25538 - C25537) * C29158 +
             (C28829 - C28830) * C29261 + (C29001 - C29002) * C44323) *
                C4409 +
            (C27040 * C29260 + C27263 * C29158 + (C27042 - C27043) * C29261 +
             (C27264 - C27265) * C44323) *
                C44321) *
               C44319) *
              C1766 +
          ((((C20609 - C20608) * C29260 + (C20775 - C20774) * C29158 +
             C27040 * C29261 + C27263 * C44323) *
                C4409 +
            ((C20613 - C20612) * C29260 + (C20777 - C20776) * C29158 +
             (C22413 - C22414) * C29261 + (C22575 - C22576) * C44323) *
                C44321) *
               C1196 +
           ((C27038 * C29260 + C27262 * C29158 + (C27043 - C27042) * C29261 +
             (C27265 - C27264) * C44323) *
                C4409 +
            ((C22414 - C22413) * C29260 + (C22576 - C22575) * C29158 +
             (C44138 * C23624 - C20063 * C23623) * C29261 +
             (C44138 * C23864 - C20063 * C23863) * C44323) *
                C44321) *
               C44319) *
              C44317) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eezy[68] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4409 * C152 - C4465 * C93 + C44321 * C694 - C4466 * C630) *
                C29260 +
            (C4409 * C491 - C4465 * C443 + C44321 * C1068 - C4466 * C1010) *
                C29158 +
            (C35425 - C35426 + C35427 - C35428) * C29261 +
            (C35843 - C35844 + C35845 - C35846) * C44323) *
               C44138 * C1196 +
           ((C35426 - C35425 + C35428 - C35427) * C29260 +
            (C35844 - C35843 + C35846 - C35845) * C29158 +
            (C4465 * C4005 - C4409 * C4055 + C4466 * C9234 - C44321 * C9292) *
                C29261 +
            (C4465 * C4269 - C4409 * C4313 + C4466 * C9558 - C44321 * C9612) *
                C44323) *
               C44138 * C44319) *
              C1766 +
          (((C4465 * C630 - C4409 * C694 + C4466 * C2212 - C44321 * C2262) *
                C29260 +
            (C4465 * C1010 - C4409 * C1068 + C4466 * C2476 - C44321 * C2520) *
                C29158 +
            (C37119 - C37120 + C37121 - C37122) * C29261 +
            (C37549 - C37550 + C37551 - C37552) * C44323) *
               C44138 * C1196 +
           ((C37120 - C37119 + C37122 - C37121) * C29260 +
            (C37550 - C37549 + C37552 - C37551) * C29158 +
            (C4409 * C9292 - C4465 * C9234 + C44321 * C23665 - C4466 * C23623) *
                C29261 +
            (C4409 * C9612 - C4465 * C9558 + C44321 * C23903 - C4466 * C23863) *
                C44323) *
               C44138 * C44319) *
              C44317) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eezz[68] += (2 * std::pow(Pi, 2.5) *
                   ((((C29260 * C215 - C29586 * C93 - C29260 * C443 +
                       C29158 * C545 + C29261 * C1330 - C29587 * C1200 -
                       C29261 * C1580 + C44323 * C1698) *
                          C4409 +
                      (C35291 + C35292) * C44321) *
                         C44138 * C1196 -
                     ((C37631 + C37632) * C44321 +
                      (C29261 * C4099 - C29587 * C4005 - C29261 * C4269 +
                       C44323 * C4354 + C29260 * C1330 - C29586 * C1200 -
                       C29260 * C1580 + C29158 * C1698) *
                          C4409) *
                         C44138 * C44319) *
                        C1766 +
                    (((C37632 + C37631) * C4409 +
                      (C29260 * C7555 - C29586 * C7397 - C29260 * C7845 +
                       C29158 * C7987 + C29261 * C23705 - C29587 * C23623 -
                       C29261 * C23863 + C44323 * C23942) *
                          C44321) *
                         C44138 * C44319 -
                     ((C36983 + C36984) * C44321 + (C35292 + C35291) * C4409) *
                         C44138 * C1196) *
                        C44317) *
                   C44161) /
                  (p * q * std::sqrt(p + q));
    d2eexx[69] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C20063 * C98 - C20064 * C93 - C20063 * C99 + C44138 * C108) *
                 C29158 +
             C25109 * C44323) *
                C4409 +
            (C34735 + C34736) * C44321) *
               C3112 -
           ((C37051 + C37052) * C44321 +
            (C28664 * C44323 + C25109 * C29158) * C4409) *
               C44319) *
              C44195 * C1768 +
          (((C25110 * C29158 + (C20063 * C4010 - C20064 * C4006 -
                                C20063 * C4011 + C44138 * C4015) *
                                   C44323) *
                C4409 +
            (C24469 * C29158 + (C20063 * C9238 - C20064 * C9235 -
                                C20063 * C9239 + C44138 * C9241) *
                                   C44323) *
                C44321) *
               C44319 -
           ((C34738 + C34737) * C44321 +
            (C25110 * C44323 +
             (C20063 * C100 - C20064 * C94 - C20063 * C101 + C44138 * C109) *
                 C29158) *
                C4409) *
               C3112) *
              C44195 * C44315)) /
        (p * q * std::sqrt(p + q));
    d2eexy[69] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C4409 * C152 - C4465 * C93 + C44321 * C694 - C4466 * C630) *
                 C20063 +
             (C4409 * C157 - C4465 * C99 + C44321 * C698 - C4466 * C637) *
                 C44138) *
                C29158 +
            ((C35425 - C35426 + C35427 - C35428) * C20063 +
             (C35429 - C35430 + C35431 - C35432) * C44138) *
                C44323) *
               C3112 +
           (((C35426 - C35425 + C35428 - C35427) * C20063 +
             (C35430 - C35429 + C35432 - C35431) * C44138) *
                C29158 +
            ((C4465 * C4005 - C4409 * C4055 + C4466 * C9234 - C44321 * C9292) *
                 C20063 +
             (C4465 * C4009 - C4409 * C4058 + C4466 * C9237 - C44321 * C9294) *
                 C44138) *
                C44323) *
               C44319) *
              C44195 * C1768 +
          ((((C4469 - C4468 + C4471 - C4470) * C20063 +
             (C4473 - C4472 + C4475 - C4474) * C44138) *
                C29158 +
            ((C5714 - C5715 + C5716 - C5717) * C20063 +
             (C5718 - C5719 + C5720 - C5721) * C44138) *
                C44323) *
               C3112 +
           (((C5715 - C5714 + C5717 - C5716) * C20063 +
             (C5719 - C5718 + C5721 - C5720) * C44138) *
                C29158 +
            ((C4409 * C4056 - C4465 * C4006 + C44321 * C9293 - C4466 * C9235) *
                 C20063 +
             (C4409 * C4059 - C4465 * C4011 + C44321 * C9295 - C4466 * C9239) *
                 C44138) *
                C44323) *
               C44319) *
              C44195 * C44315)) /
        (p * q * std::sqrt(p + q));
    d2eexz[69] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C29158 * C215 - C29260 * C93 + C44323 * C1330 - C29261 * C1200) *
                 C20063 +
             (C29158 * C220 - C29260 * C99 + C44323 * C1334 - C29261 * C1207) *
                 C44138) *
                C4409 +
            ((C34871 - C34872 + C34873 - C34874) * C20063 +
             (C34875 - C34876 + C34877 - C34878) * C44138) *
                C44321) *
               C3112 +
           (((C29260 * C1200 - C29158 * C1330 + C29261 * C4005 -
              C44323 * C4099) *
                 C20063 +
             (C29260 * C1207 - C29158 * C1334 + C29261 * C4009 -
              C44323 * C4102) *
                 C44138) *
                C4409 +
            ((C37193 - C37194 + C37195 - C37196) * C20063 +
             (C37197 - C37198 + C37199 - C37200) * C44138) *
                C44321) *
               C44319) *
              C44195 * C1768 +
          ((((C29264 - C29263 + C29266 - C29265) * C20063 +
             (C29268 - C29267 + C29270 - C29269) * C44138) *
                C4409 +
            ((C29815 - C29816 + C29817 - C29818) * C20063 +
             (C29819 - C29820 + C29821 - C29822) * C44138) *
                C44321) *
               C3112 +
           (((C30464 - C30463 + C30466 - C30465) * C20063 +
             (C30468 - C30467 + C30470 - C30469) * C44138) *
                C4409 +
            ((C29158 * C2733 - C29260 * C2615 + C44323 * C9347 -
              C29261 * C9235) *
                 C20063 +
             (C29158 * C2736 - C29260 * C2620 + C44323 * C9349 -
              C29261 * C9239) *
                 C44138) *
                C44321) *
               C44319) *
              C44195 * C44315)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[69] += (2 * std::pow(Pi, 2.5) *
                   (((((C44138 * C98 - C20063 * C93) * C4465 +
                       (C44138 * C282 - C20063 * C277) * C4409 +
                       (C20608 - C20609) * C4466 + (C20610 - C20611) * C44321) *
                          C29158 +
                      ((C25317 - C25318) * C4465 + (C25319 - C25320) * C4409 +
                       C27038 * C4466 + C27039 * C44321) *
                          C44323) *
                         C3112 +
                     (((C25318 - C25317) * C4465 + (C25320 - C25319) * C4409 +
                       C27040 * C4466 + C27041 * C44321) *
                          C29158 +
                      ((C28829 - C28830) * C4465 + (C28831 - C28832) * C4409 +
                       (C27042 - C27043) * C4466 + (C27044 - C27045) * C44321) *
                          C44323) *
                         C44319) *
                        C44195 * C1768 +
                    ((((C20063 * C94 - C44138 * C100) * C4465 +
                       (C20063 * C278 - C44138 * C283) * C4409 +
                       (C20616 - C20617) * C4466 + (C20618 - C20619) * C44321) *
                          C29158 +
                      ((C25321 - C25322) * C4465 + (C25323 - C25324) * C4409 +
                       (C24677 - C24678) * C4466 + (C24679 - C24680) * C44321) *
                          C44323) *
                         C3112 +
                     (((C25322 - C25321) * C4465 + (C25324 - C25323) * C4409 +
                       (C24678 - C24677) * C4466 + (C24680 - C24679) * C44321) *
                          C29158 +
                      ((C44138 * C4010 - C20063 * C4006) * C4465 +
                       (C44138 * C4147 - C20063 * C4144) * C4409 +
                       (C44138 * C9238 - C20063 * C9235) * C4466 +
                       (C44138 * C9403 - C20063 * C9401) * C44321) *
                          C44323) *
                         C44319) *
                        C44195 * C44315)) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[69] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4465 * C152 - C4633 * C93 - C4465 * C277 + C4409 * C326 +
             C4466 * C694 - C4634 * C630 - C4466 * C826 + C44321 * C886) *
                C44138 * C29158 +
            (C35643 + C35644) * C44138 * C44323) *
               C3112 -
           ((C4466 * C9292 - C4634 * C9234 - C4466 * C9400 + C44321 * C9454 +
             C4465 * C4055 - C4633 * C4005 - C4465 * C4143 + C4409 * C4187) *
                C44138 * C44323 +
            (C35644 + C35643) * C44138 * C29158) *
               C44319) *
              C44195 * C1768 +
          (((C5937 + C5936) * C44138 * C29158 +
            (C4465 * C4056 - C4633 * C4006 - C4465 * C4144 + C4409 * C4188 +
             C4466 * C9293 - C4634 * C9235 - C4466 * C9401 + C44321 * C9455) *
                C44138 * C44323) *
               C44319 -
           ((C5936 + C5937) * C44138 * C44323 +
            (C4661 + C4660) * C44138 * C29158) *
               C3112) *
              C44195 * C44315)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[69] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C29158 * C215 - C29260 * C93 + C44323 * C1330 - C29261 * C1200) *
                C4465 +
            (C29158 * C390 - C29260 * C277 + C44323 * C1522 - C29261 * C1396) *
                C4409 +
            (C34871 - C34872 + C34873 - C34874) * C4466 +
            (C35077 - C35078 + C35079 - C35080) * C44321) *
               C44138 * C3112 +
           ((C29260 * C1200 - C29158 * C1330 + C29261 * C4005 -
             C44323 * C4099) *
                C4465 +
            (C29260 * C1396 - C29158 * C1522 + C29261 * C4143 -
             C44323 * C4228) *
                C4409 +
            (C37193 - C37194 + C37195 - C37196) * C4466 +
            (C37413 - C37414 + C37415 - C37416) * C44321) *
               C44138 * C44319) *
              C44195 * C1768 +
          (((C29264 - C29263 + C29266 - C29265) * C4465 +
            (C29430 - C29429 + C29432 - C29431) * C4409 +
            (C29815 - C29816 + C29817 - C29818) * C4466 +
            (C30021 - C30022 + C30023 - C30024) * C44321) *
               C44138 * C3112 +
           ((C30464 - C30463 + C30466 - C30465) * C4465 +
            (C30690 - C30689 + C30692 - C30691) * C4409 +
            (C29158 * C2733 - C29260 * C2615 + C44323 * C9347 -
             C29261 * C9235) *
                C4466 +
            (C29158 * C2898 - C29260 * C2789 + C44323 * C9507 -
             C29261 * C9401) *
                C44321) *
               C44138 * C44319) *
              C44195 * C44315)) /
        (p * q * std::sqrt(p + q));
    d2eezx[69] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C44138 * C98 - C20063 * C93) * C29260 +
             (C44138 * C448 - C20063 * C443) * C29158 +
             (C25317 - C25318) * C29261 + (C25537 - C25538) * C44323) *
                C4409 +
            ((C20608 - C20609) * C29260 + (C20774 - C20775) * C29158 +
             C27038 * C29261 + C27262 * C44323) *
                C44321) *
               C3112 +
           (((C25318 - C25317) * C29260 + (C25538 - C25537) * C29158 +
             (C28829 - C28830) * C29261 + (C29001 - C29002) * C44323) *
                C4409 +
            (C27040 * C29260 + C27263 * C29158 + (C27042 - C27043) * C29261 +
             (C27264 - C27265) * C44323) *
                C44321) *
               C44319) *
              C44195 * C1768 +
          ((((C20063 * C94 - C44138 * C100) * C29260 +
             (C20063 * C444 - C44138 * C449) * C29158 +
             (C25321 - C25322) * C29261 + (C25539 - C25540) * C44323) *
                C4409 +
            ((C20616 - C20617) * C29260 + (C20778 - C20779) * C29158 +
             (C24677 - C24678) * C29261 + (C24883 - C24884) * C44323) *
                C44321) *
               C3112 +
           (((C25322 - C25321) * C29260 + (C25540 - C25539) * C29158 +
             (C44138 * C4010 - C20063 * C4006) * C29261 +
             (C44138 * C4273 - C20063 * C4270) * C44323) *
                C4409 +
            ((C24678 - C24677) * C29260 + (C24884 - C24883) * C29158 +
             (C44138 * C9238 - C20063 * C9235) * C29261 +
             (C44138 * C9561 - C20063 * C9559) * C44323) *
                C44321) *
               C44319) *
              C44195 * C44315)) /
        (p * q * std::sqrt(p + q));
    d2eezy[69] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4409 * C152 - C4465 * C93 + C44321 * C694 - C4466 * C630) *
                C29260 +
            (C4409 * C491 - C4465 * C443 + C44321 * C1068 - C4466 * C1010) *
                C29158 +
            (C35425 - C35426 + C35427 - C35428) * C29261 +
            (C35843 - C35844 + C35845 - C35846) * C44323) *
               C44138 * C3112 +
           ((C35426 - C35425 + C35428 - C35427) * C29260 +
            (C35844 - C35843 + C35846 - C35845) * C29158 +
            (C4465 * C4005 - C4409 * C4055 + C4466 * C9234 - C44321 * C9292) *
                C29261 +
            (C4465 * C4269 - C4409 * C4313 + C4466 * C9558 - C44321 * C9612) *
                C44323) *
               C44138 * C44319) *
              C44195 * C1768 +
          (((C4469 - C4468 + C4471 - C4470) * C29260 +
            (C4815 - C4814 + C4817 - C4816) * C29158 +
            (C5714 - C5715 + C5716 - C5717) * C29261 +
            (C6138 - C6139 + C6140 - C6141) * C44323) *
               C44138 * C3112 +
           ((C5715 - C5714 + C5717 - C5716) * C29260 +
            (C6139 - C6138 + C6141 - C6140) * C29158 +
            (C4409 * C4056 - C4465 * C4006 + C44321 * C9293 - C4466 * C9235) *
                C29261 +
            (C4409 * C4314 - C4465 * C4270 + C44321 * C9613 - C4466 * C9559) *
                C44323) *
               C44138 * C44319) *
              C44195 * C44315)) /
        (p * q * std::sqrt(p + q));
    d2eezz[69] += (2 * std::pow(Pi, 2.5) *
                   ((((C29260 * C215 - C29586 * C93 - C29260 * C443 +
                       C29158 * C545 + C29261 * C1330 - C29587 * C1200 -
                       C29261 * C1580 + C44323 * C1698) *
                          C4409 +
                      (C35291 + C35292) * C44321) *
                         C44138 * C3112 -
                     ((C37631 + C37632) * C44321 +
                      (C29261 * C4099 - C29587 * C4005 - C29261 * C4269 +
                       C44323 * C4354 + C29260 * C1330 - C29586 * C1200 -
                       C29260 * C1580 + C29158 * C1698) *
                          C4409) *
                         C44138 * C44319) *
                        C44195 * C1768 +
                    (((C30912 + C30911) * C4409 +
                      (C29260 * C2733 - C29586 * C2615 - C29260 * C2951 +
                       C29158 * C3060 + C29261 * C9347 - C29587 * C9235 -
                       C29261 * C9559 + C44323 * C9665) *
                          C44321) *
                         C44138 * C44319 -
                     ((C30235 + C30236) * C44321 + (C29614 + C29613) * C4409) *
                         C44138 * C3112) *
                        C44195 * C44315)) /
                  (p * q * std::sqrt(p + q));
    d2eexx[70] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C20063 * C98 - C20064 * C93 - C20063 * C99 + C44138 * C108) *
                 C29158 +
             C25109 * C44323) *
                C4409 +
            (C34735 + C34736) * C44321) *
               C3112 -
           ((C37051 + C37052) * C44321 +
            (C28664 * C44323 + C25109 * C29158) * C4409) *
               C44319) *
              C624 +
          (((C37052 + C37051) * C4409 +
            (C22245 * C29158 + (C20063 * C23624 - C20064 * C23623 -
                                C20063 * C23625 + C44138 * C23626) *
                                   C44323) *
                C44321) *
               C44319 -
           ((C36557 + C36558) * C44321 + (C34736 + C34735) * C4409) * C3112) *
              C44317) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eexy[70] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C4409 * C152 - C4465 * C93 + C44321 * C694 - C4466 * C630) *
                 C20063 +
             (C4409 * C157 - C4465 * C99 + C44321 * C698 - C4466 * C637) *
                 C44138) *
                C29158 +
            ((C35425 - C35426 + C35427 - C35428) * C20063 +
             (C35429 - C35430 + C35431 - C35432) * C44138) *
                C44323) *
               C3112 +
           (((C35426 - C35425 + C35428 - C35427) * C20063 +
             (C35430 - C35429 + C35432 - C35431) * C44138) *
                C29158 +
            ((C4465 * C4005 - C4409 * C4055 + C4466 * C9234 - C44321 * C9292) *
                 C20063 +
             (C4465 * C4009 - C4409 * C4058 + C4466 * C9237 - C44321 * C9294) *
                 C44138) *
                C44323) *
               C44319) *
              C624 +
          ((((C4465 * C630 - C4409 * C694 + C4466 * C2212 - C44321 * C2262) *
                 C20063 +
             (C4465 * C637 - C4409 * C698 + C4466 * C2216 - C44321 * C2265) *
                 C44138) *
                C29158 +
            ((C37119 - C37120 + C37121 - C37122) * C20063 +
             (C37123 - C37124 + C37125 - C37126) * C44138) *
                C44323) *
               C3112 +
           (((C37120 - C37119 + C37122 - C37121) * C20063 +
             (C37124 - C37123 + C37126 - C37125) * C44138) *
                C29158 +
            ((C4409 * C9292 - C4465 * C9234 + C44321 * C23665 -
              C4466 * C23623) *
                 C20063 +
             (C4409 * C9294 - C4465 * C9237 + C44321 * C23666 -
              C4466 * C23625) *
                 C44138) *
                C44323) *
               C44319) *
              C44317) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eexz[70] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C29158 * C215 - C29260 * C93 + C44323 * C1330 - C29261 * C1200) *
                 C20063 +
             (C29158 * C220 - C29260 * C99 + C44323 * C1334 - C29261 * C1207) *
                 C44138) *
                C4409 +
            ((C34871 - C34872 + C34873 - C34874) * C20063 +
             (C34875 - C34876 + C34877 - C34878) * C44138) *
                C44321) *
               C3112 +
           (((C29260 * C1200 - C29158 * C1330 + C29261 * C4005 -
              C44323 * C4099) *
                 C20063 +
             (C29260 * C1207 - C29158 * C1334 + C29261 * C4009 -
              C44323 * C4102) *
                 C44138) *
                C4409 +
            ((C37193 - C37194 + C37195 - C37196) * C20063 +
             (C37197 - C37198 + C37199 - C37200) * C44138) *
                C44321) *
               C44319) *
              C624 +
          ((((C34872 - C34871 + C34874 - C34873) * C20063 +
             (C34876 - C34875 + C34878 - C34877) * C44138) *
                C4409 +
            ((C36659 - C36660 + C36661 - C36662) * C20063 +
             (C36663 - C36664 + C36665 - C36666) * C44138) *
                C44321) *
               C3112 +
           (((C37194 - C37193 + C37196 - C37195) * C20063 +
             (C37198 - C37197 + C37200 - C37199) * C44138) *
                C4409 +
            ((C29158 * C7555 - C29260 * C7397 + C44323 * C23705 -
              C29261 * C23623) *
                 C20063 +
             (C29158 * C7557 - C29260 * C7400 + C44323 * C23706 -
              C29261 * C23625) *
                 C44138) *
                C44321) *
               C44319) *
              C44317) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eeyx[70] += (2 * std::pow(Pi, 2.5) *
                   (((((C44138 * C98 - C20063 * C93) * C4465 +
                       (C44138 * C282 - C20063 * C277) * C4409 +
                       (C20608 - C20609) * C4466 + (C20610 - C20611) * C44321) *
                          C29158 +
                      ((C25317 - C25318) * C4465 + (C25319 - C25320) * C4409 +
                       C27038 * C4466 + C27039 * C44321) *
                          C44323) *
                         C3112 +
                     (((C25318 - C25317) * C4465 + (C25320 - C25319) * C4409 +
                       C27040 * C4466 + C27041 * C44321) *
                          C29158 +
                      ((C28829 - C28830) * C4465 + (C28831 - C28832) * C4409 +
                       (C27042 - C27043) * C4466 + (C27044 - C27045) * C44321) *
                          C44323) *
                         C44319) *
                        C624 +
                    ((((C20609 - C20608) * C4465 + (C20611 - C20610) * C4409 +
                       (C20613 - C20612) * C4466 + (C20615 - C20614) * C44321) *
                          C29158 +
                      (C27040 * C4465 + C27041 * C4409 +
                       (C22413 - C22414) * C4466 + (C22415 - C22416) * C44321) *
                          C44323) *
                         C3112 +
                     ((C27038 * C4465 + C27039 * C4409 +
                       (C22414 - C22413) * C4466 + (C22416 - C22415) * C44321) *
                          C29158 +
                      ((C27043 - C27042) * C4465 + (C27045 - C27044) * C4409 +
                       (C44138 * C23624 - C20063 * C23623) * C4466 +
                       (C44138 * C23746 - C20063 * C23745) * C44321) *
                          C44323) *
                         C44319) *
                        C44317) *
                   C44161) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[70] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4465 * C152 - C4633 * C93 - C4465 * C277 + C4409 * C326 +
             C4466 * C694 - C4634 * C630 - C4466 * C826 + C44321 * C886) *
                C44138 * C29158 +
            (C35643 + C35644) * C44138 * C44323) *
               C3112 -
           ((C4466 * C9292 - C4634 * C9234 - C4466 * C9400 + C44321 * C9454 +
             C4465 * C4055 - C4633 * C4005 - C4465 * C4143 + C4409 * C4187) *
                C44138 * C44323 +
            (C35644 + C35643) * C44138 * C29158) *
               C44319) *
              C624 +
          (((C37345 + C37346) * C44138 * C29158 +
            (C4465 * C9292 - C4633 * C9234 - C4465 * C9400 + C4409 * C9454 +
             C4466 * C23665 - C4634 * C23623 - C4466 * C23745 +
             C44321 * C23785) *
                C44138 * C44323) *
               C44319 -
           ((C37346 + C37345) * C44138 * C44323 +
            (C4466 * C2262 - C4634 * C2212 - C4466 * C2350 + C44321 * C2394 +
             C4465 * C694 - C4633 * C630 - C4465 * C826 + C4409 * C886) *
                C44138 * C29158) *
               C3112) *
              C44317) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eeyz[70] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C29158 * C215 - C29260 * C93 + C44323 * C1330 - C29261 * C1200) *
                C4465 +
            (C29158 * C390 - C29260 * C277 + C44323 * C1522 - C29261 * C1396) *
                C4409 +
            (C34871 - C34872 + C34873 - C34874) * C4466 +
            (C35077 - C35078 + C35079 - C35080) * C44321) *
               C44138 * C3112 +
           ((C29260 * C1200 - C29158 * C1330 + C29261 * C4005 -
             C44323 * C4099) *
                C4465 +
            (C29260 * C1396 - C29158 * C1522 + C29261 * C4143 -
             C44323 * C4228) *
                C4409 +
            (C37193 - C37194 + C37195 - C37196) * C4466 +
            (C37413 - C37414 + C37415 - C37416) * C44321) *
               C44138 * C44319) *
              C624 +
          (((C34872 - C34871 + C34874 - C34873) * C4465 +
            (C35078 - C35077 + C35080 - C35079) * C4409 +
            (C36659 - C36660 + C36661 - C36662) * C4466 +
            (C36817 - C36818 + C36819 - C36820) * C44321) *
               C44138 * C3112 +
           ((C37194 - C37193 + C37196 - C37195) * C4465 +
            (C37414 - C37413 + C37416 - C37415) * C4409 +
            (C29158 * C7555 - C29260 * C7397 + C44323 * C23705 -
             C29261 * C23623) *
                C4466 +
            (C29158 * C7775 - C29260 * C7629 + C44323 * C23824 -
             C29261 * C23745) *
                C44321) *
               C44138 * C44319) *
              C44317) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eezx[70] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C44138 * C98 - C20063 * C93) * C29260 +
             (C44138 * C448 - C20063 * C443) * C29158 +
             (C25317 - C25318) * C29261 + (C25537 - C25538) * C44323) *
                C4409 +
            ((C20608 - C20609) * C29260 + (C20774 - C20775) * C29158 +
             C27038 * C29261 + C27262 * C44323) *
                C44321) *
               C3112 +
           (((C25318 - C25317) * C29260 + (C25538 - C25537) * C29158 +
             (C28829 - C28830) * C29261 + (C29001 - C29002) * C44323) *
                C4409 +
            (C27040 * C29260 + C27263 * C29158 + (C27042 - C27043) * C29261 +
             (C27264 - C27265) * C44323) *
                C44321) *
               C44319) *
              C624 +
          ((((C20609 - C20608) * C29260 + (C20775 - C20774) * C29158 +
             C27040 * C29261 + C27263 * C44323) *
                C4409 +
            ((C20613 - C20612) * C29260 + (C20777 - C20776) * C29158 +
             (C22413 - C22414) * C29261 + (C22575 - C22576) * C44323) *
                C44321) *
               C3112 +
           ((C27038 * C29260 + C27262 * C29158 + (C27043 - C27042) * C29261 +
             (C27265 - C27264) * C44323) *
                C4409 +
            ((C22414 - C22413) * C29260 + (C22576 - C22575) * C29158 +
             (C44138 * C23624 - C20063 * C23623) * C29261 +
             (C44138 * C23864 - C20063 * C23863) * C44323) *
                C44321) *
               C44319) *
              C44317) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eezy[70] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4409 * C152 - C4465 * C93 + C44321 * C694 - C4466 * C630) *
                C29260 +
            (C4409 * C491 - C4465 * C443 + C44321 * C1068 - C4466 * C1010) *
                C29158 +
            (C35425 - C35426 + C35427 - C35428) * C29261 +
            (C35843 - C35844 + C35845 - C35846) * C44323) *
               C44138 * C3112 +
           ((C35426 - C35425 + C35428 - C35427) * C29260 +
            (C35844 - C35843 + C35846 - C35845) * C29158 +
            (C4465 * C4005 - C4409 * C4055 + C4466 * C9234 - C44321 * C9292) *
                C29261 +
            (C4465 * C4269 - C4409 * C4313 + C4466 * C9558 - C44321 * C9612) *
                C44323) *
               C44138 * C44319) *
              C624 +
          (((C4465 * C630 - C4409 * C694 + C4466 * C2212 - C44321 * C2262) *
                C29260 +
            (C4465 * C1010 - C4409 * C1068 + C4466 * C2476 - C44321 * C2520) *
                C29158 +
            (C37119 - C37120 + C37121 - C37122) * C29261 +
            (C37549 - C37550 + C37551 - C37552) * C44323) *
               C44138 * C3112 +
           ((C37120 - C37119 + C37122 - C37121) * C29260 +
            (C37550 - C37549 + C37552 - C37551) * C29158 +
            (C4409 * C9292 - C4465 * C9234 + C44321 * C23665 - C4466 * C23623) *
                C29261 +
            (C4409 * C9612 - C4465 * C9558 + C44321 * C23903 - C4466 * C23863) *
                C44323) *
               C44138 * C44319) *
              C44317) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eezz[70] += (2 * std::pow(Pi, 2.5) *
                   ((((C29260 * C215 - C29586 * C93 - C29260 * C443 +
                       C29158 * C545 + C29261 * C1330 - C29587 * C1200 -
                       C29261 * C1580 + C44323 * C1698) *
                          C4409 +
                      (C35291 + C35292) * C44321) *
                         C44138 * C3112 -
                     ((C37631 + C37632) * C44321 +
                      (C29261 * C4099 - C29587 * C4005 - C29261 * C4269 +
                       C44323 * C4354 + C29260 * C1330 - C29586 * C1200 -
                       C29260 * C1580 + C29158 * C1698) *
                          C4409) *
                         C44138 * C44319) *
                        C624 +
                    (((C37632 + C37631) * C4409 +
                      (C29260 * C7555 - C29586 * C7397 - C29260 * C7845 +
                       C29158 * C7987 + C29261 * C23705 - C29587 * C23623 -
                       C29261 * C23863 + C44323 * C23942) *
                          C44321) *
                         C44138 * C44319 -
                     ((C36983 + C36984) * C44321 + (C35292 + C35291) * C4409) *
                         C44138 * C3112) *
                        C44317) *
                   C44161) /
                  (p * q * std::sqrt(p + q));
    d2eexx[71] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C20063 * C98 - C20064 * C93 - C20063 * C99 + C44138 * C108) *
                C29158 +
            C25109 * C44323) *
               C4409 +
           (C34735 + C34736) * C44321) *
              C4002 -
          ((C37051 + C37052) * C44321 +
           (C28664 * C44323 + C25109 * C29158) * C4409) *
              C4003 +
          ((C28664 * C29158 + (C20063 * C14408 - C20064 * C14406 -
                               C20063 * C14409 + C44138 * C14412) *
                                  C44323) *
               C4409 +
           (C26822 * C29158 + (C20063 * C28654 - C20064 * C28653 -
                               C20063 * C28655 + C44138 * C28656) *
                                  C44323) *
               C44321) *
              C4004) *
         C44195 * C44161) /
        (p * q * std::sqrt(p + q));
    d2eexy[71] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4409 * C152 - C4465 * C93 + C44321 * C694 - C4466 * C630) *
                C20063 +
            (C4409 * C157 - C4465 * C99 + C44321 * C698 - C4466 * C637) *
                C44138) *
               C29158 +
           ((C35425 - C35426 + C35427 - C35428) * C20063 +
            (C35429 - C35430 + C35431 - C35432) * C44138) *
               C44323) *
              C4002 +
          (((C35426 - C35425 + C35428 - C35427) * C20063 +
            (C35430 - C35429 + C35432 - C35431) * C44138) *
               C29158 +
           ((C38921 - C38922 + C38923 - C38924) * C20063 +
            (C38925 - C38926 + C38927 - C38928) * C44138) *
               C44323) *
              C4003 +
          (((C38922 - C38921 + C38924 - C38923) * C20063 +
            (C38926 - C38925 + C38928 - C38927) * C44138) *
               C29158 +
           ((C4409 * C14478 - C4465 * C14406 + C44321 * C28714 -
             C4466 * C28653) *
                C20063 +
            (C4409 * C14480 - C4465 * C14409 + C44321 * C28715 -
             C4466 * C28655) *
                C44138) *
               C44323) *
              C4004) *
         C44195 * C44161) /
        (p * q * std::sqrt(p + q));
    d2eexz[71] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C29158 * C215 - C29260 * C93 + C44323 * C1330 - C29261 * C1200) *
                C20063 +
            (C29158 * C220 - C29260 * C99 + C44323 * C1334 - C29261 * C1207) *
                C44138) *
               C4409 +
           ((C34871 - C34872 + C34873 - C34874) * C20063 +
            (C34875 - C34876 + C34877 - C34878) * C44138) *
               C44321) *
              C4002 +
          (((C29260 * C1200 - C29158 * C1330 + C29261 * C4005 -
             C44323 * C4099) *
                C20063 +
            (C29260 * C1207 - C29158 * C1334 + C29261 * C4009 -
             C44323 * C4102) *
                C44138) *
               C4409 +
           ((C37193 - C37194 + C37195 - C37196) * C20063 +
            (C37197 - C37198 + C37199 - C37200) * C44138) *
               C44321) *
              C4003 +
          (((C29158 * C4099 - C29260 * C4005 + C44323 * C14536 -
             C29261 * C14406) *
                C20063 +
            (C29158 * C4102 - C29260 * C4009 + C44323 * C14538 -
             C29261 * C14409) *
                C44138) *
               C4409 +
           ((C29158 * C9346 - C29260 * C9234 + C44323 * C28774 -
             C29261 * C28653) *
                C20063 +
            (C29158 * C9348 - C29260 * C9237 + C44323 * C28775 -
             C29261 * C28655) *
                C44138) *
               C44321) *
              C4004) *
         C44195 * C44161) /
        (p * q * std::sqrt(p + q));
    d2eeyx[71] += (2 * std::pow(Pi, 2.5) *
                   ((((C44138 * C98 - C20063 * C93) * C4465 +
                      (C44138 * C282 - C20063 * C277) * C4409 +
                      (C20608 - C20609) * C4466 + (C20610 - C20611) * C44321) *
                         C29158 +
                     ((C25317 - C25318) * C4465 + (C25319 - C25320) * C4409 +
                      C27038 * C4466 + C27039 * C44321) *
                         C44323) *
                        C4002 +
                    (((C25318 - C25317) * C4465 + (C25320 - C25319) * C4409 +
                      C27040 * C4466 + C27041 * C44321) *
                         C29158 +
                     ((C28829 - C28830) * C4465 + (C28831 - C28832) * C4409 +
                      (C27042 - C27043) * C4466 + (C27044 - C27045) * C44321) *
                         C44323) *
                        C4003 +
                    (((C28830 - C28829) * C4465 + (C28832 - C28831) * C4409 +
                      (C27043 - C27042) * C4466 + (C27045 - C27044) * C44321) *
                         C29158 +
                     ((C44138 * C14408 - C20063 * C14406) * C4465 +
                      (C44138 * C14592 - C20063 * C14590) * C4409 +
                      (C44138 * C28654 - C20063 * C28653) * C4466 +
                      (C44138 * C28827 - C20063 * C28826) * C44321) *
                         C44323) *
                        C4004) *
                   C44195 * C44161) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[71] +=
        (2 * std::pow(Pi, 2.5) *
         (((C4465 * C152 - C4633 * C93 - C4465 * C277 + C4409 * C326 +
            C4466 * C694 - C4634 * C630 - C4466 * C826 + C44321 * C886) *
               C44138 * C29158 +
           (C35643 + C35644) * C44138 * C44323) *
              C4002 -
          ((C39091 + C39092) * C44138 * C44323 +
           (C35644 + C35643) * C44138 * C29158) *
              C4003 +
          ((C39092 + C39091) * C44138 * C29158 +
           (C4465 * C14478 - C4633 * C14406 - C4465 * C14590 + C4409 * C14652 +
            C4466 * C28714 - C4634 * C28653 - C4466 * C28826 +
            C44321 * C28882) *
               C44138 * C44323) *
              C4004) *
         C44195 * C44161) /
        (p * q * std::sqrt(p + q));
    d2eeyz[71] +=
        (2 * std::pow(Pi, 2.5) *
         (((C29158 * C215 - C29260 * C93 + C44323 * C1330 - C29261 * C1200) *
               C4465 +
           (C29158 * C390 - C29260 * C277 + C44323 * C1522 - C29261 * C1396) *
               C4409 +
           (C34871 - C34872 + C34873 - C34874) * C4466 +
           (C35077 - C35078 + C35079 - C35080) * C44321) *
              C44138 * C4002 +
          ((C29260 * C1200 - C29158 * C1330 + C29261 * C4005 - C44323 * C4099) *
               C4465 +
           (C29260 * C1396 - C29158 * C1522 + C29261 * C4143 - C44323 * C4228) *
               C4409 +
           (C37193 - C37194 + C37195 - C37196) * C4466 +
           (C37413 - C37414 + C37415 - C37416) * C44321) *
              C44138 * C4003 +
          ((C29158 * C4099 - C29260 * C4005 + C44323 * C14536 -
            C29261 * C14406) *
               C4465 +
           (C29158 * C4228 - C29260 * C4143 + C44323 * C14713 -
            C29261 * C14590) *
               C4409 +
           (C29158 * C9346 - C29260 * C9234 + C44323 * C28774 -
            C29261 * C28653) *
               C4466 +
           (C29158 * C9506 - C29260 * C9400 + C44323 * C28947 -
            C29261 * C28826) *
               C44321) *
              C44138 * C4004) *
         C44195 * C44161) /
        (p * q * std::sqrt(p + q));
    d2eezx[71] += (2 * std::pow(Pi, 2.5) *
                   ((((C44138 * C98 - C20063 * C93) * C29260 +
                      (C44138 * C448 - C20063 * C443) * C29158 +
                      (C25317 - C25318) * C29261 + (C25537 - C25538) * C44323) *
                         C4409 +
                     ((C20608 - C20609) * C29260 + (C20774 - C20775) * C29158 +
                      C27038 * C29261 + C27262 * C44323) *
                         C44321) *
                        C4002 +
                    (((C25318 - C25317) * C29260 + (C25538 - C25537) * C29158 +
                      (C28829 - C28830) * C29261 + (C29001 - C29002) * C44323) *
                         C4409 +
                     (C27040 * C29260 + C27263 * C29158 +
                      (C27042 - C27043) * C29261 + (C27264 - C27265) * C44323) *
                         C44321) *
                        C4003 +
                    (((C28830 - C28829) * C29260 + (C29002 - C29001) * C29158 +
                      (C44138 * C14408 - C20063 * C14406) * C29261 +
                      (C44138 * C14767 - C20063 * C14765) * C44323) *
                         C4409 +
                     ((C27043 - C27042) * C29260 + (C27265 - C27264) * C29158 +
                      (C44138 * C28654 - C20063 * C28653) * C29261 +
                      (C44138 * C28999 - C20063 * C28998) * C44323) *
                         C44321) *
                        C4004) *
                   C44195 * C44161) /
                  (p * q * std::sqrt(p + q));
    d2eezy[71] +=
        (2 * std::pow(Pi, 2.5) *
         (((C4409 * C152 - C4465 * C93 + C44321 * C694 - C4466 * C630) *
               C29260 +
           (C4409 * C491 - C4465 * C443 + C44321 * C1068 - C4466 * C1010) *
               C29158 +
           (C35425 - C35426 + C35427 - C35428) * C29261 +
           (C35843 - C35844 + C35845 - C35846) * C44323) *
              C44138 * C4002 +
          ((C35426 - C35425 + C35428 - C35427) * C29260 +
           (C35844 - C35843 + C35846 - C35845) * C29158 +
           (C38921 - C38922 + C38923 - C38924) * C29261 +
           (C39243 - C39244 + C39245 - C39246) * C44323) *
              C44138 * C4003 +
          ((C38922 - C38921 + C38924 - C38923) * C29260 +
           (C39244 - C39243 + C39246 - C39245) * C29158 +
           (C4409 * C14478 - C4465 * C14406 + C44321 * C28714 -
            C4466 * C28653) *
               C29261 +
           (C4409 * C14823 - C4465 * C14765 + C44321 * C29052 -
            C4466 * C28998) *
               C44323) *
              C44138 * C4004) *
         C44195 * C44161) /
        (p * q * std::sqrt(p + q));
    d2eezz[71] +=
        (2 * std::pow(Pi, 2.5) *
         (((C29260 * C215 - C29586 * C93 - C29260 * C443 + C29158 * C545 +
            C29261 * C1330 - C29587 * C1200 - C29261 * C1580 + C44323 * C1698) *
               C4409 +
           (C35291 + C35292) * C44321) *
              C44138 * C4002 -
          ((C37631 + C37632) * C44321 +
           (C29261 * C4099 - C29587 * C4005 - C29261 * C4269 + C44323 * C4354 +
            C29260 * C1330 - C29586 * C1200 - C29260 * C1580 + C29158 * C1698) *
               C4409) *
              C44138 * C4003 +
          ((C29260 * C4099 - C29586 * C4005 - C29260 * C4269 + C29158 * C4354 +
            C29261 * C14536 - C29587 * C14406 - C29261 * C14765 +
            C44323 * C14877) *
               C4409 +
           (C29260 * C9346 - C29586 * C9234 - C29260 * C9558 + C29158 * C9664 +
            C29261 * C28774 - C29587 * C28653 - C29261 * C28998 +
            C44323 * C29107) *
               C44321) *
              C44138 * C4004) *
         C44195 * C44161) /
        (p * q * std::sqrt(p + q));
    d2eexx[72] +=
        (2 * std::pow(Pi, 2.5) *
         (((C20063 * C98 - C20064 * C93 - C20063 * C99 + C44138 * C108) *
               C39334 +
           C25109 * C39335 + C28664 * C39336) *
              C44245 * C44212 * C44195 * C84 -
          ((C20063 * C4010 - C20064 * C4006 - C20063 * C4011 + C44138 * C4015) *
               C39336 +
           C25110 * C39335 +
           (C20063 * C100 - C20064 * C94 - C20063 * C101 + C44138 * C109) *
               C39334) *
              C44245 * C44212 * C44195 * C85 +
          ((C20063 * C102 - C20064 * C95 - C20063 * C103 + C44138 * C110) *
               C39334 +
           (C20063 * C1202 - C20064 * C1198 - C20063 * C1203 + C44138 * C1210) *
               C39335 +
           (C20063 * C4012 - C20064 * C4007 - C20063 * C4013 + C44138 * C4016) *
               C39336) *
              C44245 * C44212 * C44195 * C86)) /
        (p * q * std::sqrt(p + q));
    d2eexy[72] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C44245 * C152 - C151 * C93) * C20063 +
            (C44245 * C157 - C151 * C99) * C44138) *
               C39334 +
           ((C10968 - C10969) * C20063 + (C10970 - C10971) * C44138) * C39335 +
           ((C14484 - C14483) * C20063 + (C14486 - C14485) * C44138) * C39336) *
              C44212 * C44195 * C84 +
          (((C164 - C163) * C20063 + (C166 - C165) * C44138) * C39334 +
           (C10974 * C20063 + C10975 * C44138) * C39335 +
           ((C10976 - C10977) * C20063 + (C10978 - C10979) * C44138) * C39336) *
              C44212 * C44195 * C85 +
          ((C175 * C20063 + C176 * C44138) * C39334 +
           ((C1278 - C1277) * C20063 + (C1280 - C1279) * C44138) * C39335 +
           ((C44245 * C4057 - C151 * C4007) * C20063 +
            (C44245 * C4060 - C151 * C4013) * C44138) *
               C39336) *
              C44212 * C44195 * C86)) /
        (p * q * std::sqrt(p + q));
    d2eexz[72] += (2 * std::pow(Pi, 2.5) *
                   (((C39334 * C215 - C39413 * C93 + C39335 * C1330 -
                      C39414 * C1200 + C39336 * C4099 - C39415 * C4005) *
                         C20063 +
                     (C39334 * C220 - C39413 * C99 + C39335 * C1334 -
                      C39414 * C1207 + C39336 * C4102 - C39415 * C4009) *
                         C44138) *
                        C44245 * C44212 * C44195 * C84 +
                    ((C39413 * C94 - C39334 * C216 + C39414 * C1199 -
                      C39335 * C1331 + C39415 * C4006 - C39336 * C4100) *
                         C20063 +
                     (C39413 * C101 - C39334 * C221 + C39414 * C1205 -
                      C39335 * C1335 + C39415 * C4011 - C39336 * C4103) *
                         C44138) *
                        C44245 * C44212 * C44195 * C85 +
                    ((C39334 * C217 - C39413 * C95 + C39335 * C1332 -
                      C39414 * C1198 + C39336 * C4101 - C39415 * C4007) *
                         C20063 +
                     (C39334 * C222 - C39413 * C103 + C39335 * C1336 -
                      C39414 * C1203 + C39336 * C4104 - C39415 * C4013) *
                         C44138) *
                        C44245 * C44212 * C44195 * C86)) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[72] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C44138 * C98 - C20063 * C93) * C151 +
            (C44138 * C282 - C20063 * C277) * C44245) *
               C39334 +
           ((C25317 - C25318) * C151 + (C25319 - C25320) * C44245) * C39335 +
           ((C28830 - C28829) * C151 + (C28832 - C28831) * C44245) * C39336) *
              C44212 * C44195 * C84 +
          (((C20063 * C94 - C44138 * C100) * C151 +
            (C20063 * C278 - C44138 * C283) * C44245) *
               C39334 +
           ((C25321 - C25322) * C151 + (C25323 - C25324) * C44245) * C39335 +
           ((C20063 * C4006 - C44138 * C4010) * C151 +
            (C20063 * C4144 - C44138 * C4147) * C44245) *
               C39336) *
              C44212 * C44195 * C85 +
          (((C44138 * C102 - C20063 * C95) * C151 +
            (C44138 * C284 - C20063 * C279) * C44245) *
               C39334 +
           ((C44138 * C1202 - C20063 * C1198) * C151 +
            (C44138 * C1402 - C20063 * C1398) * C44245) *
               C39335 +
           ((C44138 * C4012 - C20063 * C4007) * C151 +
            (C44138 * C4148 - C20063 * C4145) * C44245) *
               C39336) *
              C44212 * C44195 * C86)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[72] +=
        (2 * std::pow(Pi, 2.5) *
         (((C151 * C152 - C325 * C93 - C151 * C277 + C44245 * C326) * C44138 *
               C39334 +
           C11217 * C44138 * C39335 + C14662 * C44138 * C39336) *
              C44212 * C44195 * C84 -
          (C11218 * C44138 * C39336 + C1472 * C44138 * C39335 +
           C350 * C44138 * C39334) *
              C44212 * C44195 * C85 +
          (C351 * C44138 * C39334 + C1471 * C44138 * C39335 +
           (C151 * C4057 - C325 * C4007 - C151 * C4145 + C44245 * C4189) *
               C44138 * C39336) *
              C44212 * C44195 * C86)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[72] += (2 * std::pow(Pi, 2.5) *
                   (((C39334 * C215 - C39413 * C93 + C39335 * C1330 -
                      C39414 * C1200 + C39336 * C4099 - C39415 * C4005) *
                         C151 +
                     (C39334 * C390 - C39413 * C277 + C39335 * C1522 -
                      C39414 * C1396 + C39336 * C4228 - C39415 * C4143) *
                         C44245) *
                        C44138 * C44212 * C44195 * C84 +
                    ((C39413 * C94 - C39334 * C216 + C39414 * C1199 -
                      C39335 * C1331 + C39415 * C4006 - C39336 * C4100) *
                         C151 +
                     (C39413 * C278 - C39334 * C391 + C39414 * C1397 -
                      C39335 * C1523 + C39415 * C4144 - C39336 * C4229) *
                         C44245) *
                        C44138 * C44212 * C44195 * C85 +
                    ((C39334 * C217 - C39413 * C95 + C39335 * C1332 -
                      C39414 * C1198 + C39336 * C4101 - C39415 * C4007) *
                         C151 +
                     (C39334 * C392 - C39413 * C279 + C39335 * C1524 -
                      C39414 * C1398 + C39336 * C4230 - C39415 * C4145) *
                         C44245) *
                        C44138 * C44212 * C44195 * C86)) /
                  (p * q * std::sqrt(p + q));
    d2eezx[72] += (2 * std::pow(Pi, 2.5) *
                   (((C44138 * C98 - C20063 * C93) * C39413 +
                     (C44138 * C448 - C20063 * C443) * C39334 +
                     (C25317 - C25318) * C39414 + (C25537 - C25538) * C39335 +
                     (C28830 - C28829) * C39415 + (C29002 - C29001) * C39336) *
                        C44245 * C44212 * C44195 * C84 +
                    ((C20063 * C94 - C44138 * C100) * C39413 +
                     (C20063 * C444 - C44138 * C449) * C39334 +
                     (C25321 - C25322) * C39414 + (C25539 - C25540) * C39335 +
                     (C20063 * C4006 - C44138 * C4010) * C39415 +
                     (C20063 * C4270 - C44138 * C4273) * C39336) *
                        C44245 * C44212 * C44195 * C85 +
                    ((C44138 * C102 - C20063 * C95) * C39413 +
                     (C44138 * C450 - C20063 * C445) * C39334 +
                     (C44138 * C1202 - C20063 * C1198) * C39414 +
                     (C44138 * C1586 - C20063 * C1582) * C39335 +
                     (C44138 * C4012 - C20063 * C4007) * C39415 +
                     (C44138 * C4274 - C20063 * C4271) * C39336) *
                        C44245 * C44212 * C44195 * C86)) /
                  (p * q * std::sqrt(p + q));
    d2eezy[72] +=
        (2 * std::pow(Pi, 2.5) *
         (((C44245 * C152 - C151 * C93) * C39413 +
           (C44245 * C491 - C151 * C443) * C39334 + (C10968 - C10969) * C39414 +
           (C11430 - C11431) * C39335 + (C14484 - C14483) * C39415 +
           (C14827 - C14826) * C39336) *
              C44138 * C44212 * C44195 * C84 +
          ((C164 - C163) * C39413 + (C498 - C497) * C39334 + C10974 * C39414 +
           C11433 * C39335 + (C10976 - C10977) * C39415 +
           (C11434 - C11435) * C39336) *
              C44138 * C44212 * C44195 * C85 +
          (C175 * C39413 + C504 * C39334 + (C1278 - C1277) * C39414 +
           (C1646 - C1645) * C39335 + (C44245 * C4057 - C151 * C4007) * C39415 +
           (C44245 * C4315 - C151 * C4271) * C39336) *
              C44138 * C44212 * C44195 * C86)) /
        (p * q * std::sqrt(p + q));
    d2eezz[72] +=
        (2 * std::pow(Pi, 2.5) *
         ((C39413 * C215 - C39644 * C93 - C39413 * C443 + C39334 * C545 +
           C39414 * C1330 - C39645 * C1200 - C39414 * C1580 + C39335 * C1698 +
           C39415 * C4099 - C39646 * C4005 - C39415 * C4269 + C39336 * C4354) *
              C44245 * C44138 * C44212 * C44195 * C84 -
          (C39415 * C4100 - C39646 * C4006 - C39415 * C4270 + C39336 * C4355 +
           C39414 * C1331 - C39645 * C1199 - C39414 * C1581 + C39335 * C1697 +
           C39413 * C216 - C39644 * C94 - C39413 * C444 + C39334 * C546) *
              C44245 * C44138 * C44212 * C44195 * C85 +
          (C39413 * C217 - C39644 * C95 - C39413 * C445 + C39334 * C547 +
           C39414 * C1332 - C39645 * C1198 - C39414 * C1582 + C39335 * C1696 +
           C39415 * C4101 - C39646 * C4007 - C39415 * C4271 + C39336 * C4356) *
              C44245 * C44138 * C44212 * C44195 * C86)) /
        (p * q * std::sqrt(p + q));
    d2eexx[73] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C20063 * C98 - C20064 * C93 - C20063 * C99 + C44138 * C108) *
                C39334 +
            C25109 * C39335 + C28664 * C39336) *
               C44245 * C44212 * C624 -
           (C26822 * C39336 + C22246 * C39335 + C20450 * C39334) * C44245 *
               C44212 * C44317) *
              C626 +
          ((C20452 * C39334 + C24469 * C39335 +
            (C20063 * C9238 - C20064 * C9235 - C20063 * C9239 +
             C44138 * C9241) *
                C39336) *
               C44245 * C44212 * C44317 -
           ((C20063 * C4010 - C20064 * C4006 - C20063 * C4011 +
             C44138 * C4015) *
                C39336 +
            C25110 * C39335 +
            (C20063 * C100 - C20064 * C94 - C20063 * C101 + C44138 * C109) *
                C39334) *
               C44245 * C44212 * C624) *
              C44315)) /
        (p * q * std::sqrt(p + q));
    d2eexy[73] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C44245 * C152 - C151 * C93) * C20063 +
             (C44245 * C157 - C151 * C99) * C44138) *
                C39334 +
            ((C10968 - C10969) * C20063 + (C10970 - C10971) * C44138) * C39335 +
            ((C14484 - C14483) * C20063 + (C14486 - C14485) * C44138) *
                C39336) *
               C44212 * C624 +
           (((C151 * C630 - C44245 * C694) * C20063 +
             (C151 * C637 - C44245 * C698) * C44138) *
                C39334 +
            ((C12692 - C12693) * C20063 + (C12694 - C12695) * C44138) * C39335 +
            ((C151 * C9234 - C44245 * C9292) * C20063 +
             (C151 * C9237 - C44245 * C9294) * C44138) *
                C39336) *
               C44212 * C44317) *
              C626 +
          ((((C164 - C163) * C20063 + (C166 - C165) * C44138) * C39334 +
            (C10974 * C20063 + C10975 * C44138) * C39335 +
            ((C10976 - C10977) * C20063 + (C10978 - C10979) * C44138) *
                C39336) *
               C44212 * C624 +
           (((C704 - C703) * C20063 + (C706 - C705) * C44138) * C39334 +
            ((C10308 - C10307) * C20063 + (C10310 - C10309) * C44138) * C39335 +
            ((C44245 * C9293 - C151 * C9235) * C20063 +
             (C44245 * C9295 - C151 * C9239) * C44138) *
                C39336) *
               C44212 * C44317) *
              C44315)) /
        (p * q * std::sqrt(p + q));
    d2eexz[73] += (2 * std::pow(Pi, 2.5) *
                   ((((C39334 * C215 - C39413 * C93 + C39335 * C1330 -
                       C39414 * C1200 + C39336 * C4099 - C39415 * C4005) *
                          C20063 +
                      (C39334 * C220 - C39413 * C99 + C39335 * C1334 -
                       C39414 * C1207 + C39336 * C4102 - C39415 * C4009) *
                          C44138) *
                         C44245 * C44212 * C624 +
                     ((C39413 * C630 - C39334 * C760 + C39414 * C2614 -
                       C39335 * C2732 + C39415 * C9234 - C39336 * C9346) *
                          C20063 +
                      (C39413 * C637 - C39334 * C764 + C39414 * C2618 -
                       C39335 * C2735 + C39415 * C9237 - C39336 * C9348) *
                          C44138) *
                         C44245 * C44212 * C44317) *
                        C626 +
                    (((C39413 * C94 - C39334 * C216 + C39414 * C1199 -
                       C39335 * C1331 + C39415 * C4006 - C39336 * C4100) *
                          C20063 +
                      (C39413 * C101 - C39334 * C221 + C39414 * C1205 -
                       C39335 * C1335 + C39415 * C4011 - C39336 * C4103) *
                          C44138) *
                         C44245 * C44212 * C624 +
                     ((C39334 * C761 - C39413 * C629 + C39335 * C2733 -
                       C39414 * C2615 + C39336 * C9347 - C39415 * C9235) *
                          C20063 +
                      (C39334 * C765 - C39413 * C635 + C39335 * C2736 -
                       C39414 * C2620 + C39336 * C9349 - C39415 * C9239) *
                          C44138) *
                         C44245 * C44212 * C44317) *
                        C44315)) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[73] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C44138 * C98 - C20063 * C93) * C151 +
             (C44138 * C282 - C20063 * C277) * C44245) *
                C39334 +
            ((C25317 - C25318) * C151 + (C25319 - C25320) * C44245) * C39335 +
            ((C28830 - C28829) * C151 + (C28832 - C28831) * C44245) * C39336) *
               C44212 * C624 +
           (((C20609 - C20608) * C151 + (C20611 - C20610) * C44245) * C39334 +
            (C27040 * C151 + C27041 * C44245) * C39335 +
            ((C27042 - C27043) * C151 + (C27044 - C27045) * C44245) * C39336) *
               C44212 * C44317) *
              C626 +
          ((((C20063 * C94 - C44138 * C100) * C151 +
             (C20063 * C278 - C44138 * C283) * C44245) *
                C39334 +
            ((C25321 - C25322) * C151 + (C25323 - C25324) * C44245) * C39335 +
            ((C20063 * C4006 - C44138 * C4010) * C151 +
             (C20063 * C4144 - C44138 * C4147) * C44245) *
                C39336) *
               C44212 * C624 +
           (((C20617 - C20616) * C151 + (C20619 - C20618) * C44245) * C39334 +
            ((C24678 - C24677) * C151 + (C24680 - C24679) * C44245) * C39335 +
            ((C44138 * C9238 - C20063 * C9235) * C151 +
             (C44138 * C9403 - C20063 * C9401) * C44245) *
                C39336) *
               C44212 * C44317) *
              C44315)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[73] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C151 * C152 - C325 * C93 - C151 * C277 + C44245 * C326) * C44138 *
                C39334 +
            C11217 * C44138 * C39335 + C14662 * C44138 * C39336) *
               C44212 * C624 -
           ((C151 * C9292 - C325 * C9234 - C151 * C9400 + C44245 * C9454) *
                C44138 * C39336 +
            C12901 * C44138 * C39335 +
            (C151 * C694 - C325 * C630 - C151 * C826 + C44245 * C886) * C44138 *
                C39334) *
               C44212 * C44317) *
              C626 +
          ((C902 * C44138 * C39334 + C10523 * C44138 * C39335 +
            (C151 * C9293 - C325 * C9235 - C151 * C9401 + C44245 * C9455) *
                C44138 * C39336) *
               C44212 * C44317 -
           (C11218 * C44138 * C39336 + C1472 * C44138 * C39335 +
            C350 * C44138 * C39334) *
               C44212 * C624) *
              C44315)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[73] += (2 * std::pow(Pi, 2.5) *
                   ((((C39334 * C215 - C39413 * C93 + C39335 * C1330 -
                       C39414 * C1200 + C39336 * C4099 - C39415 * C4005) *
                          C151 +
                      (C39334 * C390 - C39413 * C277 + C39335 * C1522 -
                       C39414 * C1396 + C39336 * C4228 - C39415 * C4143) *
                          C44245) *
                         C44138 * C44212 * C624 +
                     ((C39413 * C630 - C39334 * C760 + C39414 * C2614 -
                       C39335 * C2732 + C39415 * C9234 - C39336 * C9346) *
                          C151 +
                      (C39413 * C826 - C39334 * C952 + C39414 * C2788 -
                       C39335 * C2897 + C39415 * C9400 - C39336 * C9506) *
                          C44245) *
                         C44138 * C44212 * C44317) *
                        C626 +
                    (((C39413 * C94 - C39334 * C216 + C39414 * C1199 -
                       C39335 * C1331 + C39415 * C4006 - C39336 * C4100) *
                          C151 +
                      (C39413 * C278 - C39334 * C391 + C39414 * C1397 -
                       C39335 * C1523 + C39415 * C4144 - C39336 * C4229) *
                          C44245) *
                         C44138 * C44212 * C624 +
                     ((C39334 * C761 - C39413 * C629 + C39335 * C2733 -
                       C39414 * C2615 + C39336 * C9347 - C39415 * C9235) *
                          C151 +
                      (C39334 * C953 - C39413 * C827 + C39335 * C2898 -
                       C39414 * C2789 + C39336 * C9507 - C39415 * C9401) *
                          C44245) *
                         C44138 * C44212 * C44317) *
                        C44315)) /
                  (p * q * std::sqrt(p + q));
    d2eezx[73] += (2 * std::pow(Pi, 2.5) *
                   ((((C44138 * C98 - C20063 * C93) * C39413 +
                      (C44138 * C448 - C20063 * C443) * C39334 +
                      (C25317 - C25318) * C39414 + (C25537 - C25538) * C39335 +
                      (C28830 - C28829) * C39415 + (C29002 - C29001) * C39336) *
                         C44245 * C44212 * C624 +
                     ((C20609 - C20608) * C39413 + (C20775 - C20774) * C39334 +
                      C27040 * C39414 + C27263 * C39335 +
                      (C27042 - C27043) * C39415 + (C27264 - C27265) * C39336) *
                         C44245 * C44212 * C44317) *
                        C626 +
                    (((C20063 * C94 - C44138 * C100) * C39413 +
                      (C20063 * C444 - C44138 * C449) * C39334 +
                      (C25321 - C25322) * C39414 + (C25539 - C25540) * C39335 +
                      (C20063 * C4006 - C44138 * C4010) * C39415 +
                      (C20063 * C4270 - C44138 * C4273) * C39336) *
                         C44245 * C44212 * C624 +
                     ((C20617 - C20616) * C39413 + (C20779 - C20778) * C39334 +
                      (C24678 - C24677) * C39414 + (C24884 - C24883) * C39335 +
                      (C44138 * C9238 - C20063 * C9235) * C39415 +
                      (C44138 * C9561 - C20063 * C9559) * C39336) *
                         C44245 * C44212 * C44317) *
                        C44315)) /
                  (p * q * std::sqrt(p + q));
    d2eezy[73] += (2 * std::pow(Pi, 2.5) *
                   ((((C44245 * C152 - C151 * C93) * C39413 +
                      (C44245 * C491 - C151 * C443) * C39334 +
                      (C10968 - C10969) * C39414 + (C11430 - C11431) * C39335 +
                      (C14484 - C14483) * C39415 + (C14827 - C14826) * C39336) *
                         C44138 * C44212 * C624 +
                     ((C151 * C630 - C44245 * C694) * C39413 +
                      (C151 * C1010 - C44245 * C1068) * C39334 +
                      (C12692 - C12693) * C39414 + (C13101 - C13102) * C39335 +
                      (C151 * C9234 - C44245 * C9292) * C39415 +
                      (C151 * C9558 - C44245 * C9612) * C39336) *
                         C44138 * C44212 * C44317) *
                        C626 +
                    (((C164 - C163) * C39413 + (C498 - C497) * C39334 +
                      C10974 * C39414 + C11433 * C39335 +
                      (C10976 - C10977) * C39415 + (C11434 - C11435) * C39336) *
                         C44138 * C44212 * C624 +
                     ((C704 - C703) * C39413 + (C1074 - C1073) * C39334 +
                      (C10308 - C10307) * C39414 + (C10727 - C10726) * C39335 +
                      (C44245 * C9293 - C151 * C9235) * C39415 +
                      (C44245 * C9613 - C151 * C9559) * C39336) *
                         C44138 * C44212 * C44317) *
                        C44315)) /
                  (p * q * std::sqrt(p + q));
    d2eezz[73] +=
        (2 * std::pow(Pi, 2.5) *
         (((C39413 * C215 - C39644 * C93 - C39413 * C443 + C39334 * C545 +
            C39414 * C1330 - C39645 * C1200 - C39414 * C1580 + C39335 * C1698 +
            C39415 * C4099 - C39646 * C4005 - C39415 * C4269 + C39336 * C4354) *
               C44245 * C44138 * C44212 * C624 -
           (C39415 * C9346 - C39646 * C9234 - C39415 * C9558 + C39336 * C9664 +
            C39414 * C2732 - C39645 * C2614 - C39414 * C2950 + C39335 * C3059 +
            C39413 * C760 - C39644 * C630 - C39413 * C1010 + C39334 * C1128) *
               C44245 * C44138 * C44212 * C44317) *
              C626 +
          ((C39413 * C761 - C39644 * C629 - C39413 * C1011 + C39334 * C1127 +
            C39414 * C2733 - C39645 * C2615 - C39414 * C2951 + C39335 * C3060 +
            C39415 * C9347 - C39646 * C9235 - C39415 * C9559 + C39336 * C9665) *
               C44245 * C44138 * C44212 * C44317 -
           (C39415 * C4100 - C39646 * C4006 - C39415 * C4270 + C39336 * C4355 +
            C39414 * C1331 - C39645 * C1199 - C39414 * C1581 + C39335 * C1697 +
            C39413 * C216 - C39644 * C94 - C39413 * C444 + C39334 * C546) *
               C44245 * C44138 * C44212 * C624) *
              C44315)) /
        (p * q * std::sqrt(p + q));
    d2eexx[74] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C20063 * C98 - C20064 * C93 - C20063 * C99 + C44138 * C108) *
                C39334 +
            C25109 * C39335 + C28664 * C39336) *
               C44245 * C1196 -
           ((C20063 * C14408 - C20064 * C14406 - C20063 * C14409 +
             C44138 * C14412) *
                C39336 +
            C28664 * C39335 + C25109 * C39334) *
               C44245 * C44319) *
              C44195 * C626 +
          ((C25110 * C39334 + C40154 * C39335 +
            (C20063 * C14410 - C20064 * C14407 - C20063 * C14411 +
             C44138 * C14413) *
                C39336) *
               C44245 * C44319 -
           (C40154 * C39336 + C25110 * C39335 +
            (C20063 * C100 - C20064 * C94 - C20063 * C101 + C44138 * C109) *
                C39334) *
               C44245 * C1196) *
              C44195 * C44315)) /
        (p * q * std::sqrt(p + q));
    d2eexy[74] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C44245 * C152 - C151 * C93) * C20063 +
             (C44245 * C157 - C151 * C99) * C44138) *
                C39334 +
            ((C10968 - C10969) * C20063 + (C10970 - C10971) * C44138) * C39335 +
            ((C14484 - C14483) * C20063 + (C14486 - C14485) * C44138) *
                C39336) *
               C1196 +
           (((C10969 - C10968) * C20063 + (C10971 - C10970) * C44138) * C39334 +
            ((C14483 - C14484) * C20063 + (C14485 - C14486) * C44138) * C39335 +
            ((C151 * C14406 - C44245 * C14478) * C20063 +
             (C151 * C14409 - C44245 * C14480) * C44138) *
                C39336) *
               C44319) *
              C44195 * C626 +
          ((((C164 - C163) * C20063 + (C166 - C165) * C44138) * C39334 +
            (C10974 * C20063 + C10975 * C44138) * C39335 +
            ((C10976 - C10977) * C20063 + (C10978 - C10979) * C44138) *
                C39336) *
               C1196 +
           ((C10972 * C20063 + C10973 * C44138) * C39334 +
            ((C10977 - C10976) * C20063 + (C10979 - C10978) * C44138) * C39335 +
            ((C44245 * C14479 - C151 * C14407) * C20063 +
             (C44245 * C14481 - C151 * C14411) * C44138) *
                C39336) *
               C44319) *
              C44195 * C44315)) /
        (p * q * std::sqrt(p + q));
    d2eexz[74] += (2 * std::pow(Pi, 2.5) *
                   ((((C39334 * C215 - C39413 * C93 + C39335 * C1330 -
                       C39414 * C1200 + C39336 * C4099 - C39415 * C4005) *
                          C20063 +
                      (C39334 * C220 - C39413 * C99 + C39335 * C1334 -
                       C39414 * C1207 + C39336 * C4102 - C39415 * C4009) *
                          C44138) *
                         C44245 * C1196 +
                     ((C39413 * C1200 - C39334 * C1330 + C39414 * C4005 -
                       C39335 * C4099 + C39415 * C14406 - C39336 * C14536) *
                          C20063 +
                      (C39413 * C1207 - C39334 * C1334 + C39414 * C4009 -
                       C39335 * C4102 + C39415 * C14409 - C39336 * C14538) *
                          C44138) *
                         C44245 * C44319) *
                        C44195 * C626 +
                    (((C39413 * C94 - C39334 * C216 + C39414 * C1199 -
                       C39335 * C1331 + C39415 * C4006 - C39336 * C4100) *
                          C20063 +
                      (C39413 * C101 - C39334 * C221 + C39414 * C1205 -
                       C39335 * C1335 + C39415 * C4011 - C39336 * C4103) *
                          C44138) *
                         C44245 * C1196 +
                     ((C39334 * C1331 - C39413 * C1199 + C39335 * C4100 -
                       C39414 * C4006 + C39336 * C14537 - C39415 * C14407) *
                          C20063 +
                      (C39334 * C1335 - C39413 * C1205 + C39335 * C4103 -
                       C39414 * C4011 + C39336 * C14539 - C39415 * C14411) *
                          C44138) *
                         C44245 * C44319) *
                        C44195 * C44315)) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[74] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C44138 * C98 - C20063 * C93) * C151 +
             (C44138 * C282 - C20063 * C277) * C44245) *
                C39334 +
            ((C25317 - C25318) * C151 + (C25319 - C25320) * C44245) * C39335 +
            ((C28830 - C28829) * C151 + (C28832 - C28831) * C44245) * C39336) *
               C1196 +
           (((C25318 - C25317) * C151 + (C25320 - C25319) * C44245) * C39334 +
            ((C28829 - C28830) * C151 + (C28831 - C28832) * C44245) * C39335 +
            ((C20063 * C14406 - C44138 * C14408) * C151 +
             (C20063 * C14590 - C44138 * C14592) * C44245) *
                C39336) *
               C44319) *
              C44195 * C626 +
          ((((C20063 * C94 - C44138 * C100) * C151 +
             (C20063 * C278 - C44138 * C283) * C44245) *
                C39334 +
            ((C25321 - C25322) * C151 + (C25323 - C25324) * C44245) * C39335 +
            ((C40305 - C40306) * C151 + (C40307 - C40308) * C44245) * C39336) *
               C1196 +
           (((C25322 - C25321) * C151 + (C25324 - C25323) * C44245) * C39334 +
            ((C40306 - C40305) * C151 + (C40308 - C40307) * C44245) * C39335 +
            ((C44138 * C14410 - C20063 * C14407) * C151 +
             (C44138 * C14593 - C20063 * C14591) * C44245) *
                C39336) *
               C44319) *
              C44195 * C44315)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[74] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C151 * C152 - C325 * C93 - C151 * C277 + C44245 * C326) * C44138 *
                C39334 +
            C40359 * C39335 + C40360 * C39336) *
               C1196 -
           ((C151 * C14478 - C325 * C14406 - C151 * C14590 + C44245 * C14652) *
                C44138 * C39336 +
            C40360 * C39335 + C40359 * C39334) *
               C44319) *
              C44195 * C626 +
          ((C40361 * C39334 + C40362 * C39335 +
            (C151 * C14479 - C325 * C14407 - C151 * C14591 + C44245 * C14653) *
                C44138 * C39336) *
               C44319 -
           (C40362 * C39336 + C40361 * C39335 + C350 * C44138 * C39334) *
               C1196) *
              C44195 * C44315)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[74] += (2 * std::pow(Pi, 2.5) *
                   ((((C39334 * C215 - C39413 * C93 + C39335 * C1330 -
                       C39414 * C1200 + C39336 * C4099 - C39415 * C4005) *
                          C151 +
                      (C39334 * C390 - C39413 * C277 + C39335 * C1522 -
                       C39414 * C1396 + C39336 * C4228 - C39415 * C4143) *
                          C44245) *
                         C44138 * C1196 +
                     ((C39413 * C1200 - C39334 * C1330 + C39414 * C4005 -
                       C39335 * C4099 + C39415 * C14406 - C39336 * C14536) *
                          C151 +
                      (C39413 * C1396 - C39334 * C1522 + C39414 * C4143 -
                       C39335 * C4228 + C39415 * C14590 - C39336 * C14713) *
                          C44245) *
                         C44138 * C44319) *
                        C44195 * C626 +
                    (((C39413 * C94 - C39334 * C216 + C39414 * C1199 -
                       C39335 * C1331 + C39415 * C4006 - C39336 * C4100) *
                          C151 +
                      (C39413 * C278 - C39334 * C391 + C39414 * C1397 -
                       C39335 * C1523 + C39415 * C4144 - C39336 * C4229) *
                          C44245) *
                         C44138 * C1196 +
                     ((C39334 * C1331 - C39413 * C1199 + C39335 * C4100 -
                       C39414 * C4006 + C39336 * C14537 - C39415 * C14407) *
                          C151 +
                      (C39334 * C1523 - C39413 * C1397 + C39335 * C4229 -
                       C39414 * C4144 + C39336 * C14714 - C39415 * C14591) *
                          C44245) *
                         C44138 * C44319) *
                        C44195 * C44315)) /
                  (p * q * std::sqrt(p + q));
    d2eezx[74] += (2 * std::pow(Pi, 2.5) *
                   ((((C44138 * C98 - C20063 * C93) * C39413 +
                      (C44138 * C448 - C20063 * C443) * C39334 +
                      (C25317 - C25318) * C39414 + (C25537 - C25538) * C39335 +
                      (C28830 - C28829) * C39415 + (C29002 - C29001) * C39336) *
                         C44245 * C1196 +
                     ((C25318 - C25317) * C39413 + (C25538 - C25537) * C39334 +
                      (C28829 - C28830) * C39414 + (C29001 - C29002) * C39335 +
                      (C20063 * C14406 - C44138 * C14408) * C39415 +
                      (C20063 * C14765 - C44138 * C14767) * C39336) *
                         C44245 * C44319) *
                        C44195 * C626 +
                    (((C20063 * C94 - C44138 * C100) * C39413 +
                      (C20063 * C444 - C44138 * C449) * C39334 +
                      (C25321 - C25322) * C39414 + (C25539 - C25540) * C39335 +
                      (C40305 - C40306) * C39415 + (C40463 - C40464) * C39336) *
                         C44245 * C1196 +
                     ((C25322 - C25321) * C39413 + (C25540 - C25539) * C39334 +
                      (C40306 - C40305) * C39414 + (C40464 - C40463) * C39335 +
                      (C44138 * C14410 - C20063 * C14407) * C39415 +
                      (C44138 * C14768 - C20063 * C14766) * C39336) *
                         C44245 * C44319) *
                        C44195 * C44315)) /
                  (p * q * std::sqrt(p + q));
    d2eezy[74] += (2 * std::pow(Pi, 2.5) *
                   ((((C44245 * C152 - C151 * C93) * C39413 +
                      (C44245 * C491 - C151 * C443) * C39334 +
                      (C10968 - C10969) * C39414 + (C11430 - C11431) * C39335 +
                      (C14484 - C14483) * C39415 + (C14827 - C14826) * C39336) *
                         C44138 * C1196 +
                     ((C10969 - C10968) * C39413 + (C11431 - C11430) * C39334 +
                      (C14483 - C14484) * C39414 + (C14826 - C14827) * C39335 +
                      (C151 * C14406 - C44245 * C14478) * C39415 +
                      (C151 * C14765 - C44245 * C14823) * C39336) *
                         C44138 * C44319) *
                        C44195 * C626 +
                    (((C164 - C163) * C39413 + (C498 - C497) * C39334 +
                      C10974 * C39414 + C11433 * C39335 +
                      (C10976 - C10977) * C39415 + (C11434 - C11435) * C39336) *
                         C44138 * C1196 +
                     (C10972 * C39413 + C11432 * C39334 +
                      (C10977 - C10976) * C39414 + (C11435 - C11434) * C39335 +
                      (C44245 * C14479 - C151 * C14407) * C39415 +
                      (C44245 * C14824 - C151 * C14766) * C39336) *
                         C44138 * C44319) *
                        C44195 * C44315)) /
                  (p * q * std::sqrt(p + q));
    d2eezz[74] +=
        (2 * std::pow(Pi, 2.5) *
         (((C39413 * C215 - C39644 * C93 - C39413 * C443 + C39334 * C545 +
            C39414 * C1330 - C39645 * C1200 - C39414 * C1580 + C39335 * C1698 +
            C39415 * C4099 - C39646 * C4005 - C39415 * C4269 + C39336 * C4354) *
               C44245 * C44138 * C1196 -
           (C39415 * C14536 - C39646 * C14406 - C39415 * C14765 +
            C39336 * C14877 + C39414 * C4099 - C39645 * C4005 - C39414 * C4269 +
            C39335 * C4354 + C39413 * C1330 - C39644 * C1200 - C39413 * C1580 +
            C39334 * C1698) *
               C44245 * C44138 * C44319) *
              C44195 * C626 +
          ((C39413 * C1331 - C39644 * C1199 - C39413 * C1581 + C39334 * C1697 +
            C39414 * C4100 - C39645 * C4006 - C39414 * C4270 + C39335 * C4355 +
            C39415 * C14537 - C39646 * C14407 - C39415 * C14766 +
            C39336 * C14878) *
               C44245 * C44138 * C44319 -
           (C39415 * C4100 - C39646 * C4006 - C39415 * C4270 + C39336 * C4355 +
            C39414 * C1331 - C39645 * C1199 - C39414 * C1581 + C39335 * C1697 +
            C39413 * C216 - C39644 * C94 - C39413 * C444 + C39334 * C546) *
               C44245 * C44138 * C1196) *
              C44195 * C44315)) /
        (p * q * std::sqrt(p + q));
    d2eexx[75] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C20063 * C98 - C20064 * C93 - C20063 * C99 + C44138 * C108) *
                C39334 +
            C25109 * C39335 + C28664 * C39336) *
               C44245 * C44212 * C1766 -
           (C26822 * C39336 + C22246 * C39335 + C20450 * C39334) * C44245 *
               C44212 * C44317) *
              C1768 +
          ((C20452 * C39334 + C24469 * C39335 +
            (C20063 * C9238 - C20064 * C9235 - C20063 * C9239 +
             C44138 * C9241) *
                C39336) *
               C44245 * C44212 * C44317 -
           (C40154 * C39336 + C25110 * C39335 +
            (C20063 * C100 - C20064 * C94 - C20063 * C101 + C44138 * C109) *
                C39334) *
               C44245 * C44212 * C1766) *
              C44315)) /
        (p * q * std::sqrt(p + q));
    d2eexy[75] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C44245 * C152 - C151 * C93) * C20063 +
             (C44245 * C157 - C151 * C99) * C44138) *
                C39334 +
            ((C10968 - C10969) * C20063 + (C10970 - C10971) * C44138) * C39335 +
            ((C14484 - C14483) * C20063 + (C14486 - C14485) * C44138) *
                C39336) *
               C44212 * C1766 +
           (((C151 * C630 - C44245 * C694) * C20063 +
             (C151 * C637 - C44245 * C698) * C44138) *
                C39334 +
            ((C12692 - C12693) * C20063 + (C12694 - C12695) * C44138) * C39335 +
            ((C151 * C9234 - C44245 * C9292) * C20063 +
             (C151 * C9237 - C44245 * C9294) * C44138) *
                C39336) *
               C44212 * C44317) *
              C1768 +
          ((((C164 - C163) * C20063 + (C166 - C165) * C44138) * C39334 +
            (C10974 * C20063 + C10975 * C44138) * C39335 +
            ((C10976 - C10977) * C20063 + (C10978 - C10979) * C44138) *
                C39336) *
               C44212 * C1766 +
           (((C704 - C703) * C20063 + (C706 - C705) * C44138) * C39334 +
            ((C10308 - C10307) * C20063 + (C10310 - C10309) * C44138) * C39335 +
            ((C44245 * C9293 - C151 * C9235) * C20063 +
             (C44245 * C9295 - C151 * C9239) * C44138) *
                C39336) *
               C44212 * C44317) *
              C44315)) /
        (p * q * std::sqrt(p + q));
    d2eexz[75] += (2 * std::pow(Pi, 2.5) *
                   ((((C39334 * C215 - C39413 * C93 + C39335 * C1330 -
                       C39414 * C1200 + C39336 * C4099 - C39415 * C4005) *
                          C20063 +
                      (C39334 * C220 - C39413 * C99 + C39335 * C1334 -
                       C39414 * C1207 + C39336 * C4102 - C39415 * C4009) *
                          C44138) *
                         C44245 * C44212 * C1766 +
                     ((C39413 * C630 - C39334 * C760 + C39414 * C2614 -
                       C39335 * C2732 + C39415 * C9234 - C39336 * C9346) *
                          C20063 +
                      (C39413 * C637 - C39334 * C764 + C39414 * C2618 -
                       C39335 * C2735 + C39415 * C9237 - C39336 * C9348) *
                          C44138) *
                         C44245 * C44212 * C44317) *
                        C1768 +
                    (((C39413 * C94 - C39334 * C216 + C39414 * C1199 -
                       C39335 * C1331 + C39415 * C4006 - C39336 * C4100) *
                          C20063 +
                      (C39413 * C101 - C39334 * C221 + C39414 * C1205 -
                       C39335 * C1335 + C39415 * C4011 - C39336 * C4103) *
                          C44138) *
                         C44245 * C44212 * C1766 +
                     ((C39334 * C761 - C39413 * C629 + C39335 * C2733 -
                       C39414 * C2615 + C39336 * C9347 - C39415 * C9235) *
                          C20063 +
                      (C39334 * C765 - C39413 * C635 + C39335 * C2736 -
                       C39414 * C2620 + C39336 * C9349 - C39415 * C9239) *
                          C44138) *
                         C44245 * C44212 * C44317) *
                        C44315)) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[75] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C44138 * C98 - C20063 * C93) * C151 +
             (C44138 * C282 - C20063 * C277) * C44245) *
                C39334 +
            ((C25317 - C25318) * C151 + (C25319 - C25320) * C44245) * C39335 +
            ((C28830 - C28829) * C151 + (C28832 - C28831) * C44245) * C39336) *
               C44212 * C1766 +
           (((C20609 - C20608) * C151 + (C20611 - C20610) * C44245) * C39334 +
            (C27040 * C151 + C27041 * C44245) * C39335 +
            ((C27042 - C27043) * C151 + (C27044 - C27045) * C44245) * C39336) *
               C44212 * C44317) *
              C1768 +
          ((((C20063 * C94 - C44138 * C100) * C151 +
             (C20063 * C278 - C44138 * C283) * C44245) *
                C39334 +
            ((C25321 - C25322) * C151 + (C25323 - C25324) * C44245) * C39335 +
            ((C40305 - C40306) * C151 + (C40307 - C40308) * C44245) * C39336) *
               C44212 * C1766 +
           (((C20617 - C20616) * C151 + (C20619 - C20618) * C44245) * C39334 +
            ((C24678 - C24677) * C151 + (C24680 - C24679) * C44245) * C39335 +
            ((C44138 * C9238 - C20063 * C9235) * C151 +
             (C44138 * C9403 - C20063 * C9401) * C44245) *
                C39336) *
               C44212 * C44317) *
              C44315)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[75] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C151 * C152 - C325 * C93 - C151 * C277 + C44245 * C326) * C44138 *
                C39334 +
            C40359 * C39335 + C40360 * C39336) *
               C44212 * C1766 -
           ((C151 * C9292 - C325 * C9234 - C151 * C9400 + C44245 * C9454) *
                C44138 * C39336 +
            C12901 * C44138 * C39335 +
            (C151 * C694 - C325 * C630 - C151 * C826 + C44245 * C886) * C44138 *
                C39334) *
               C44212 * C44317) *
              C1768 +
          ((C902 * C44138 * C39334 + C10523 * C44138 * C39335 +
            (C151 * C9293 - C325 * C9235 - C151 * C9401 + C44245 * C9455) *
                C44138 * C39336) *
               C44212 * C44317 -
           (C40362 * C39336 + C40361 * C39335 + C350 * C44138 * C39334) *
               C44212 * C1766) *
              C44315)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[75] += (2 * std::pow(Pi, 2.5) *
                   ((((C39334 * C215 - C39413 * C93 + C39335 * C1330 -
                       C39414 * C1200 + C39336 * C4099 - C39415 * C4005) *
                          C151 +
                      (C39334 * C390 - C39413 * C277 + C39335 * C1522 -
                       C39414 * C1396 + C39336 * C4228 - C39415 * C4143) *
                          C44245) *
                         C44138 * C44212 * C1766 +
                     ((C39413 * C630 - C39334 * C760 + C39414 * C2614 -
                       C39335 * C2732 + C39415 * C9234 - C39336 * C9346) *
                          C151 +
                      (C39413 * C826 - C39334 * C952 + C39414 * C2788 -
                       C39335 * C2897 + C39415 * C9400 - C39336 * C9506) *
                          C44245) *
                         C44138 * C44212 * C44317) *
                        C1768 +
                    (((C39413 * C94 - C39334 * C216 + C39414 * C1199 -
                       C39335 * C1331 + C39415 * C4006 - C39336 * C4100) *
                          C151 +
                      (C39413 * C278 - C39334 * C391 + C39414 * C1397 -
                       C39335 * C1523 + C39415 * C4144 - C39336 * C4229) *
                          C44245) *
                         C44138 * C44212 * C1766 +
                     ((C39334 * C761 - C39413 * C629 + C39335 * C2733 -
                       C39414 * C2615 + C39336 * C9347 - C39415 * C9235) *
                          C151 +
                      (C39334 * C953 - C39413 * C827 + C39335 * C2898 -
                       C39414 * C2789 + C39336 * C9507 - C39415 * C9401) *
                          C44245) *
                         C44138 * C44212 * C44317) *
                        C44315)) /
                  (p * q * std::sqrt(p + q));
    d2eezx[75] += (2 * std::pow(Pi, 2.5) *
                   ((((C44138 * C98 - C20063 * C93) * C39413 +
                      (C44138 * C448 - C20063 * C443) * C39334 +
                      (C25317 - C25318) * C39414 + (C25537 - C25538) * C39335 +
                      (C28830 - C28829) * C39415 + (C29002 - C29001) * C39336) *
                         C44245 * C44212 * C1766 +
                     ((C20609 - C20608) * C39413 + (C20775 - C20774) * C39334 +
                      C27040 * C39414 + C27263 * C39335 +
                      (C27042 - C27043) * C39415 + (C27264 - C27265) * C39336) *
                         C44245 * C44212 * C44317) *
                        C1768 +
                    (((C20063 * C94 - C44138 * C100) * C39413 +
                      (C20063 * C444 - C44138 * C449) * C39334 +
                      (C25321 - C25322) * C39414 + (C25539 - C25540) * C39335 +
                      (C40305 - C40306) * C39415 + (C40463 - C40464) * C39336) *
                         C44245 * C44212 * C1766 +
                     ((C20617 - C20616) * C39413 + (C20779 - C20778) * C39334 +
                      (C24678 - C24677) * C39414 + (C24884 - C24883) * C39335 +
                      (C44138 * C9238 - C20063 * C9235) * C39415 +
                      (C44138 * C9561 - C20063 * C9559) * C39336) *
                         C44245 * C44212 * C44317) *
                        C44315)) /
                  (p * q * std::sqrt(p + q));
    d2eezy[75] += (2 * std::pow(Pi, 2.5) *
                   ((((C44245 * C152 - C151 * C93) * C39413 +
                      (C44245 * C491 - C151 * C443) * C39334 +
                      (C10968 - C10969) * C39414 + (C11430 - C11431) * C39335 +
                      (C14484 - C14483) * C39415 + (C14827 - C14826) * C39336) *
                         C44138 * C44212 * C1766 +
                     ((C151 * C630 - C44245 * C694) * C39413 +
                      (C151 * C1010 - C44245 * C1068) * C39334 +
                      (C12692 - C12693) * C39414 + (C13101 - C13102) * C39335 +
                      (C151 * C9234 - C44245 * C9292) * C39415 +
                      (C151 * C9558 - C44245 * C9612) * C39336) *
                         C44138 * C44212 * C44317) *
                        C1768 +
                    (((C164 - C163) * C39413 + (C498 - C497) * C39334 +
                      C10974 * C39414 + C11433 * C39335 +
                      (C10976 - C10977) * C39415 + (C11434 - C11435) * C39336) *
                         C44138 * C44212 * C1766 +
                     ((C704 - C703) * C39413 + (C1074 - C1073) * C39334 +
                      (C10308 - C10307) * C39414 + (C10727 - C10726) * C39335 +
                      (C44245 * C9293 - C151 * C9235) * C39415 +
                      (C44245 * C9613 - C151 * C9559) * C39336) *
                         C44138 * C44212 * C44317) *
                        C44315)) /
                  (p * q * std::sqrt(p + q));
    d2eezz[75] +=
        (2 * std::pow(Pi, 2.5) *
         (((C39413 * C215 - C39644 * C93 - C39413 * C443 + C39334 * C545 +
            C39414 * C1330 - C39645 * C1200 - C39414 * C1580 + C39335 * C1698 +
            C39415 * C4099 - C39646 * C4005 - C39415 * C4269 + C39336 * C4354) *
               C44245 * C44138 * C44212 * C1766 -
           (C39415 * C9346 - C39646 * C9234 - C39415 * C9558 + C39336 * C9664 +
            C39414 * C2732 - C39645 * C2614 - C39414 * C2950 + C39335 * C3059 +
            C39413 * C760 - C39644 * C630 - C39413 * C1010 + C39334 * C1128) *
               C44245 * C44138 * C44212 * C44317) *
              C1768 +
          ((C39413 * C761 - C39644 * C629 - C39413 * C1011 + C39334 * C1127 +
            C39414 * C2733 - C39645 * C2615 - C39414 * C2951 + C39335 * C3060 +
            C39415 * C9347 - C39646 * C9235 - C39415 * C9559 + C39336 * C9665) *
               C44245 * C44138 * C44212 * C44317 -
           (C39415 * C4100 - C39646 * C4006 - C39415 * C4270 + C39336 * C4355 +
            C39414 * C1331 - C39645 * C1199 - C39414 * C1581 + C39335 * C1697 +
            C39413 * C216 - C39644 * C94 - C39413 * C444 + C39334 * C546) *
               C44245 * C44138 * C44212 * C1766) *
              C44315)) /
        (p * q * std::sqrt(p + q));
    d2eexx[76] +=
        (2 * std::pow(Pi, 2.5) *
         (((C20063 * C98 - C20064 * C93 - C20063 * C99 + C44138 * C108) *
               C39334 +
           C25109 * C39335 + C28664 * C39336) *
              C44245 * C44212 * C2208 -
          (C26822 * C39336 + C22246 * C39335 + C20450 * C39334) * C44245 *
              C44212 * C2209 +
          (C20451 * C39334 + C22245 * C39335 +
           (C20063 * C23624 - C20064 * C23623 - C20063 * C23625 +
            C44138 * C23626) *
               C39336) *
              C44245 * C44212 * C2210) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eexy[76] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C44245 * C152 - C151 * C93) * C20063 +
            (C44245 * C157 - C151 * C99) * C44138) *
               C39334 +
           ((C10968 - C10969) * C20063 + (C10970 - C10971) * C44138) * C39335 +
           ((C14484 - C14483) * C20063 + (C14486 - C14485) * C44138) * C39336) *
              C44212 * C2208 +
          (((C151 * C630 - C44245 * C694) * C20063 +
            (C151 * C637 - C44245 * C698) * C44138) *
               C39334 +
           ((C12692 - C12693) * C20063 + (C12694 - C12695) * C44138) * C39335 +
           ((C151 * C9234 - C44245 * C9292) * C20063 +
            (C151 * C9237 - C44245 * C9294) * C44138) *
               C39336) *
              C44212 * C2209 +
          (((C44245 * C2262 - C151 * C2212) * C20063 +
            (C44245 * C2265 - C151 * C2216) * C44138) *
               C39334 +
           ((C44245 * C7485 - C151 * C7397) * C20063 +
            (C44245 * C7487 - C151 * C7400) * C44138) *
               C39335 +
           ((C44245 * C23665 - C151 * C23623) * C20063 +
            (C44245 * C23666 - C151 * C23625) * C44138) *
               C39336) *
              C44212 * C2210) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eexz[76] += (2 * std::pow(Pi, 2.5) *
                   (((C39334 * C215 - C39413 * C93 + C39335 * C1330 -
                      C39414 * C1200 + C39336 * C4099 - C39415 * C4005) *
                         C20063 +
                     (C39334 * C220 - C39413 * C99 + C39335 * C1334 -
                      C39414 * C1207 + C39336 * C4102 - C39415 * C4009) *
                         C44138) *
                        C44245 * C44212 * C2208 +
                    ((C39413 * C630 - C39334 * C760 + C39414 * C2614 -
                      C39335 * C2732 + C39415 * C9234 - C39336 * C9346) *
                         C20063 +
                     (C39413 * C637 - C39334 * C764 + C39414 * C2618 -
                      C39335 * C2735 + C39415 * C9237 - C39336 * C9348) *
                         C44138) *
                        C44245 * C44212 * C2209 +
                    ((C39334 * C2306 - C39413 * C2212 + C39335 * C7555 -
                      C39414 * C7397 + C39336 * C23705 - C39415 * C23623) *
                         C20063 +
                     (C39334 * C2309 - C39413 * C2216 + C39335 * C7557 -
                      C39414 * C7400 + C39336 * C23706 - C39415 * C23625) *
                         C44138) *
                        C44245 * C44212 * C2210) *
                   C44161) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[76] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C44138 * C98 - C20063 * C93) * C151 +
            (C44138 * C282 - C20063 * C277) * C44245) *
               C39334 +
           ((C25317 - C25318) * C151 + (C25319 - C25320) * C44245) * C39335 +
           ((C28830 - C28829) * C151 + (C28832 - C28831) * C44245) * C39336) *
              C44212 * C2208 +
          (((C20609 - C20608) * C151 + (C20611 - C20610) * C44245) * C39334 +
           (C27040 * C151 + C27041 * C44245) * C39335 +
           ((C27042 - C27043) * C151 + (C27044 - C27045) * C44245) * C39336) *
              C44212 * C2209 +
          ((C21961 * C151 + C21962 * C44245) * C39334 +
           ((C22414 - C22413) * C151 + (C22416 - C22415) * C44245) * C39335 +
           ((C44138 * C23624 - C20063 * C23623) * C151 +
            (C44138 * C23746 - C20063 * C23745) * C44245) *
               C39336) *
              C44212 * C2210) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eeyy[76] +=
        (2 * std::pow(Pi, 2.5) *
         (((C151 * C152 - C325 * C93 - C151 * C277 + C44245 * C326) * C44138 *
               C39334 +
           C40359 * C39335 + C40360 * C39336) *
              C44212 * C2208 -
          ((C151 * C9292 - C325 * C9234 - C151 * C9400 + C44245 * C9454) *
               C44138 * C39336 +
           C12901 * C44138 * C39335 +
           (C151 * C694 - C325 * C630 - C151 * C826 + C44245 * C886) * C44138 *
               C39334) *
              C44212 * C2209 +
          ((C151 * C2262 - C325 * C2212 - C151 * C2350 + C44245 * C2394) *
               C44138 * C39334 +
           (C151 * C7485 - C325 * C7397 - C151 * C7629 + C44245 * C7707) *
               C44138 * C39335 +
           (C151 * C23665 - C325 * C23623 - C151 * C23745 + C44245 * C23785) *
               C44138 * C39336) *
              C44212 * C2210) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eeyz[76] += (2 * std::pow(Pi, 2.5) *
                   (((C39334 * C215 - C39413 * C93 + C39335 * C1330 -
                      C39414 * C1200 + C39336 * C4099 - C39415 * C4005) *
                         C151 +
                     (C39334 * C390 - C39413 * C277 + C39335 * C1522 -
                      C39414 * C1396 + C39336 * C4228 - C39415 * C4143) *
                         C44245) *
                        C44138 * C44212 * C2208 +
                    ((C39413 * C630 - C39334 * C760 + C39414 * C2614 -
                      C39335 * C2732 + C39415 * C9234 - C39336 * C9346) *
                         C151 +
                     (C39413 * C826 - C39334 * C952 + C39414 * C2788 -
                      C39335 * C2897 + C39415 * C9400 - C39336 * C9506) *
                         C44245) *
                        C44138 * C44212 * C2209 +
                    ((C39334 * C2306 - C39413 * C2212 + C39335 * C7555 -
                      C39414 * C7397 + C39336 * C23705 - C39415 * C23623) *
                         C151 +
                     (C39334 * C2435 - C39413 * C2350 + C39335 * C7775 -
                      C39414 * C7629 + C39336 * C23824 - C39415 * C23745) *
                         C44245) *
                        C44138 * C44212 * C2210) *
                   C44161) /
                  (p * q * std::sqrt(p + q));
    d2eezx[76] += (2 * std::pow(Pi, 2.5) *
                   (((C44138 * C98 - C20063 * C93) * C39413 +
                     (C44138 * C448 - C20063 * C443) * C39334 +
                     (C25317 - C25318) * C39414 + (C25537 - C25538) * C39335 +
                     (C28830 - C28829) * C39415 + (C29002 - C29001) * C39336) *
                        C44245 * C44212 * C2208 +
                    ((C20609 - C20608) * C39413 + (C20775 - C20774) * C39334 +
                     C27040 * C39414 + C27263 * C39335 +
                     (C27042 - C27043) * C39415 + (C27264 - C27265) * C39336) *
                        C44245 * C44212 * C2209 +
                    (C21961 * C39413 + C22089 * C39334 +
                     (C22414 - C22413) * C39414 + (C22576 - C22575) * C39335 +
                     (C44138 * C23624 - C20063 * C23623) * C39415 +
                     (C44138 * C23864 - C20063 * C23863) * C39336) *
                        C44245 * C44212 * C2210) *
                   C44161) /
                  (p * q * std::sqrt(p + q));
    d2eezy[76] += (2 * std::pow(Pi, 2.5) *
                   (((C44245 * C152 - C151 * C93) * C39413 +
                     (C44245 * C491 - C151 * C443) * C39334 +
                     (C10968 - C10969) * C39414 + (C11430 - C11431) * C39335 +
                     (C14484 - C14483) * C39415 + (C14827 - C14826) * C39336) *
                        C44138 * C44212 * C2208 +
                    ((C151 * C630 - C44245 * C694) * C39413 +
                     (C151 * C1010 - C44245 * C1068) * C39334 +
                     (C12692 - C12693) * C39414 + (C13101 - C13102) * C39335 +
                     (C151 * C9234 - C44245 * C9292) * C39415 +
                     (C151 * C9558 - C44245 * C9612) * C39336) *
                        C44138 * C44212 * C2209 +
                    ((C44245 * C2262 - C151 * C2212) * C39413 +
                     (C44245 * C2520 - C151 * C2476) * C39334 +
                     (C44245 * C7485 - C151 * C7397) * C39414 +
                     (C44245 * C7919 - C151 * C7845) * C39335 +
                     (C44245 * C23665 - C151 * C23623) * C39415 +
                     (C44245 * C23903 - C151 * C23863) * C39336) *
                        C44138 * C44212 * C2210) *
                   C44161) /
                  (p * q * std::sqrt(p + q));
    d2eezz[76] +=
        (2 * std::pow(Pi, 2.5) *
         ((C39413 * C215 - C39644 * C93 - C39413 * C443 + C39334 * C545 +
           C39414 * C1330 - C39645 * C1200 - C39414 * C1580 + C39335 * C1698 +
           C39415 * C4099 - C39646 * C4005 - C39415 * C4269 + C39336 * C4354) *
              C44245 * C44138 * C44212 * C2208 -
          (C39415 * C9346 - C39646 * C9234 - C39415 * C9558 + C39336 * C9664 +
           C39414 * C2732 - C39645 * C2614 - C39414 * C2950 + C39335 * C3059 +
           C39413 * C760 - C39644 * C630 - C39413 * C1010 + C39334 * C1128) *
              C44245 * C44138 * C44212 * C2209 +
          (C39413 * C2306 - C39644 * C2212 - C39413 * C2476 + C39334 * C2561 +
           C39414 * C7555 - C39645 * C7397 - C39414 * C7845 + C39335 * C7987 +
           C39415 * C23705 - C39646 * C23623 - C39415 * C23863 +
           C39336 * C23942) *
              C44245 * C44138 * C44212 * C2210) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eexx[77] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C20063 * C98 - C20064 * C93 - C20063 * C99 + C44138 * C108) *
                C39334 +
            C25109 * C39335 + C28664 * C39336) *
               C44245 * C1196 -
           ((C20063 * C14408 - C20064 * C14406 - C20063 * C14409 +
             C44138 * C14412) *
                C39336 +
            C28664 * C39335 + C25109 * C39334) *
               C44245 * C44319) *
              C1766 +
          ((C22246 * C39334 + C26822 * C39335 +
            (C20063 * C28654 - C20064 * C28653 - C20063 * C28655 +
             C44138 * C28656) *
                C39336) *
               C44245 * C44319 -
           (C26822 * C39336 + C22246 * C39335 + C20450 * C39334) * C44245 *
               C1196) *
              C44317) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eexy[77] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C44245 * C152 - C151 * C93) * C20063 +
             (C44245 * C157 - C151 * C99) * C44138) *
                C39334 +
            ((C10968 - C10969) * C20063 + (C10970 - C10971) * C44138) * C39335 +
            ((C14484 - C14483) * C20063 + (C14486 - C14485) * C44138) *
                C39336) *
               C1196 +
           (((C10969 - C10968) * C20063 + (C10971 - C10970) * C44138) * C39334 +
            ((C14483 - C14484) * C20063 + (C14485 - C14486) * C44138) * C39335 +
            ((C151 * C14406 - C44245 * C14478) * C20063 +
             (C151 * C14409 - C44245 * C14480) * C44138) *
                C39336) *
               C44319) *
              C1766 +
          ((((C151 * C630 - C44245 * C694) * C20063 +
             (C151 * C637 - C44245 * C698) * C44138) *
                C39334 +
            ((C12692 - C12693) * C20063 + (C12694 - C12695) * C44138) * C39335 +
            ((C41457 - C41458) * C20063 + (C41459 - C41460) * C44138) *
                C39336) *
               C1196 +
           (((C12693 - C12692) * C20063 + (C12695 - C12694) * C44138) * C39334 +
            ((C41458 - C41457) * C20063 + (C41460 - C41459) * C44138) * C39335 +
            ((C44245 * C28714 - C151 * C28653) * C20063 +
             (C44245 * C28715 - C151 * C28655) * C44138) *
                C39336) *
               C44319) *
              C44317) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eexz[77] += (2 * std::pow(Pi, 2.5) *
                   ((((C39334 * C215 - C39413 * C93 + C39335 * C1330 -
                       C39414 * C1200 + C39336 * C4099 - C39415 * C4005) *
                          C20063 +
                      (C39334 * C220 - C39413 * C99 + C39335 * C1334 -
                       C39414 * C1207 + C39336 * C4102 - C39415 * C4009) *
                          C44138) *
                         C44245 * C1196 +
                     ((C39413 * C1200 - C39334 * C1330 + C39414 * C4005 -
                       C39335 * C4099 + C39415 * C14406 - C39336 * C14536) *
                          C20063 +
                      (C39413 * C1207 - C39334 * C1334 + C39414 * C4009 -
                       C39335 * C4102 + C39415 * C14409 - C39336 * C14538) *
                          C44138) *
                         C44245 * C44319) *
                        C1766 +
                    (((C39413 * C630 - C39334 * C760 + C39414 * C2614 -
                       C39335 * C2732 + C39415 * C9234 - C39336 * C9346) *
                          C20063 +
                      (C39413 * C637 - C39334 * C764 + C39414 * C2618 -
                       C39335 * C2735 + C39415 * C9237 - C39336 * C9348) *
                          C44138) *
                         C44245 * C1196 +
                     ((C39334 * C2732 - C39413 * C2614 + C39335 * C9346 -
                       C39414 * C9234 + C39336 * C28774 - C39415 * C28653) *
                          C20063 +
                      (C39334 * C2735 - C39413 * C2618 + C39335 * C9348 -
                       C39414 * C9237 + C39336 * C28775 - C39415 * C28655) *
                          C44138) *
                         C44245 * C44319) *
                        C44317) *
                   C44161) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[77] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C44138 * C98 - C20063 * C93) * C151 +
             (C44138 * C282 - C20063 * C277) * C44245) *
                C39334 +
            ((C25317 - C25318) * C151 + (C25319 - C25320) * C44245) * C39335 +
            ((C28830 - C28829) * C151 + (C28832 - C28831) * C44245) * C39336) *
               C1196 +
           (((C25318 - C25317) * C151 + (C25320 - C25319) * C44245) * C39334 +
            ((C28829 - C28830) * C151 + (C28831 - C28832) * C44245) * C39335 +
            ((C20063 * C14406 - C44138 * C14408) * C151 +
             (C20063 * C14590 - C44138 * C14592) * C44245) *
                C39336) *
               C44319) *
              C1766 +
          ((((C20609 - C20608) * C151 + (C20611 - C20610) * C44245) * C39334 +
            (C27040 * C151 + C27041 * C44245) * C39335 +
            ((C27042 - C27043) * C151 + (C27044 - C27045) * C44245) * C39336) *
               C1196 +
           ((C27038 * C151 + C27039 * C44245) * C39334 +
            ((C27043 - C27042) * C151 + (C27045 - C27044) * C44245) * C39335 +
            ((C44138 * C28654 - C20063 * C28653) * C151 +
             (C44138 * C28827 - C20063 * C28826) * C44245) *
                C39336) *
               C44319) *
              C44317) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eeyy[77] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C151 * C152 - C325 * C93 - C151 * C277 + C44245 * C326) * C44138 *
                C39334 +
            C40359 * C39335 + C40360 * C39336) *
               C1196 -
           ((C151 * C14478 - C325 * C14406 - C151 * C14590 + C44245 * C14652) *
                C44138 * C39336 +
            C40360 * C39335 + C40359 * C39334) *
               C44319) *
              C1766 +
          ((C41611 * C39334 + C41619 * C39335 +
            (C151 * C28714 - C325 * C28653 - C151 * C28826 + C44245 * C28882) *
                C44138 * C39336) *
               C44319 -
           (C41619 * C39336 + C41611 * C39335 +
            (C151 * C694 - C325 * C630 - C151 * C826 + C44245 * C886) * C44138 *
                C39334) *
               C1196) *
              C44317) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eeyz[77] += (2 * std::pow(Pi, 2.5) *
                   ((((C39334 * C215 - C39413 * C93 + C39335 * C1330 -
                       C39414 * C1200 + C39336 * C4099 - C39415 * C4005) *
                          C151 +
                      (C39334 * C390 - C39413 * C277 + C39335 * C1522 -
                       C39414 * C1396 + C39336 * C4228 - C39415 * C4143) *
                          C44245) *
                         C44138 * C1196 +
                     ((C39413 * C1200 - C39334 * C1330 + C39414 * C4005 -
                       C39335 * C4099 + C39415 * C14406 - C39336 * C14536) *
                          C151 +
                      (C39413 * C1396 - C39334 * C1522 + C39414 * C4143 -
                       C39335 * C4228 + C39415 * C14590 - C39336 * C14713) *
                          C44245) *
                         C44138 * C44319) *
                        C1766 +
                    (((C39413 * C630 - C39334 * C760 + C39414 * C2614 -
                       C39335 * C2732 + C39415 * C9234 - C39336 * C9346) *
                          C151 +
                      (C39413 * C826 - C39334 * C952 + C39414 * C2788 -
                       C39335 * C2897 + C39415 * C9400 - C39336 * C9506) *
                          C44245) *
                         C44138 * C1196 +
                     ((C39334 * C2732 - C39413 * C2614 + C39335 * C9346 -
                       C39414 * C9234 + C39336 * C28774 - C39415 * C28653) *
                          C151 +
                      (C39334 * C2897 - C39413 * C2788 + C39335 * C9506 -
                       C39414 * C9400 + C39336 * C28947 - C39415 * C28826) *
                          C44245) *
                         C44138 * C44319) *
                        C44317) *
                   C44161) /
                  (p * q * std::sqrt(p + q));
    d2eezx[77] += (2 * std::pow(Pi, 2.5) *
                   ((((C44138 * C98 - C20063 * C93) * C39413 +
                      (C44138 * C448 - C20063 * C443) * C39334 +
                      (C25317 - C25318) * C39414 + (C25537 - C25538) * C39335 +
                      (C28830 - C28829) * C39415 + (C29002 - C29001) * C39336) *
                         C44245 * C1196 +
                     ((C25318 - C25317) * C39413 + (C25538 - C25537) * C39334 +
                      (C28829 - C28830) * C39414 + (C29001 - C29002) * C39335 +
                      (C20063 * C14406 - C44138 * C14408) * C39415 +
                      (C20063 * C14765 - C44138 * C14767) * C39336) *
                         C44245 * C44319) *
                        C1766 +
                    (((C20609 - C20608) * C39413 + (C20775 - C20774) * C39334 +
                      C27040 * C39414 + C27263 * C39335 +
                      (C27042 - C27043) * C39415 + (C27264 - C27265) * C39336) *
                         C44245 * C1196 +
                     (C27038 * C39413 + C27262 * C39334 +
                      (C27043 - C27042) * C39414 + (C27265 - C27264) * C39335 +
                      (C44138 * C28654 - C20063 * C28653) * C39415 +
                      (C44138 * C28999 - C20063 * C28998) * C39336) *
                         C44245 * C44319) *
                        C44317) *
                   C44161) /
                  (p * q * std::sqrt(p + q));
    d2eezy[77] += (2 * std::pow(Pi, 2.5) *
                   ((((C44245 * C152 - C151 * C93) * C39413 +
                      (C44245 * C491 - C151 * C443) * C39334 +
                      (C10968 - C10969) * C39414 + (C11430 - C11431) * C39335 +
                      (C14484 - C14483) * C39415 + (C14827 - C14826) * C39336) *
                         C44138 * C1196 +
                     ((C10969 - C10968) * C39413 + (C11431 - C11430) * C39334 +
                      (C14483 - C14484) * C39414 + (C14826 - C14827) * C39335 +
                      (C151 * C14406 - C44245 * C14478) * C39415 +
                      (C151 * C14765 - C44245 * C14823) * C39336) *
                         C44138 * C44319) *
                        C1766 +
                    (((C151 * C630 - C44245 * C694) * C39413 +
                      (C151 * C1010 - C44245 * C1068) * C39334 +
                      (C12692 - C12693) * C39414 + (C13101 - C13102) * C39335 +
                      (C41457 - C41458) * C39415 + (C41770 - C41771) * C39336) *
                         C44138 * C1196 +
                     ((C12693 - C12692) * C39413 + (C13102 - C13101) * C39334 +
                      (C41458 - C41457) * C39414 + (C41771 - C41770) * C39335 +
                      (C44245 * C28714 - C151 * C28653) * C39415 +
                      (C44245 * C29052 - C151 * C28998) * C39336) *
                         C44138 * C44319) *
                        C44317) *
                   C44161) /
                  (p * q * std::sqrt(p + q));
    d2eezz[77] +=
        (2 * std::pow(Pi, 2.5) *
         (((C39413 * C215 - C39644 * C93 - C39413 * C443 + C39334 * C545 +
            C39414 * C1330 - C39645 * C1200 - C39414 * C1580 + C39335 * C1698 +
            C39415 * C4099 - C39646 * C4005 - C39415 * C4269 + C39336 * C4354) *
               C44245 * C44138 * C1196 -
           (C39415 * C14536 - C39646 * C14406 - C39415 * C14765 +
            C39336 * C14877 + C39414 * C4099 - C39645 * C4005 - C39414 * C4269 +
            C39335 * C4354 + C39413 * C1330 - C39644 * C1200 - C39413 * C1580 +
            C39334 * C1698) *
               C44245 * C44138 * C44319) *
              C1766 +
          ((C39413 * C2732 - C39644 * C2614 - C39413 * C2950 + C39334 * C3059 +
            C39414 * C9346 - C39645 * C9234 - C39414 * C9558 + C39335 * C9664 +
            C39415 * C28774 - C39646 * C28653 - C39415 * C28998 +
            C39336 * C29107) *
               C44245 * C44138 * C44319 -
           (C39415 * C9346 - C39646 * C9234 - C39415 * C9558 + C39336 * C9664 +
            C39414 * C2732 - C39645 * C2614 - C39414 * C2950 + C39335 * C3059 +
            C39413 * C760 - C39644 * C630 - C39413 * C1010 + C39334 * C1128) *
               C44245 * C44138 * C1196) *
              C44317) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eexx[78] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C20063 * C98 - C20064 * C93 - C20063 * C99 + C44138 * C108) *
                C39334 +
            C25109 * C39335 + C28664 * C39336) *
               C44245 * C3112 -
           ((C20063 * C14408 - C20064 * C14406 - C20063 * C14409 +
             C44138 * C14412) *
                C39336 +
            C28664 * C39335 + C25109 * C39334) *
               C44245 * C44319) *
              C44195 * C1768 +
          ((C25110 * C39334 + C40154 * C39335 +
            (C20063 * C14410 - C20064 * C14407 - C20063 * C14411 +
             C44138 * C14413) *
                C39336) *
               C44245 * C44319 -
           (C40154 * C39336 + C25110 * C39335 +
            (C20063 * C100 - C20064 * C94 - C20063 * C101 + C44138 * C109) *
                C39334) *
               C44245 * C3112) *
              C44195 * C44315)) /
        (p * q * std::sqrt(p + q));
    d2eexy[78] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C44245 * C152 - C151 * C93) * C20063 +
             (C44245 * C157 - C151 * C99) * C44138) *
                C39334 +
            ((C10968 - C10969) * C20063 + (C10970 - C10971) * C44138) * C39335 +
            ((C14484 - C14483) * C20063 + (C14486 - C14485) * C44138) *
                C39336) *
               C3112 +
           (((C10969 - C10968) * C20063 + (C10971 - C10970) * C44138) * C39334 +
            ((C14483 - C14484) * C20063 + (C14485 - C14486) * C44138) * C39335 +
            ((C151 * C14406 - C44245 * C14478) * C20063 +
             (C151 * C14409 - C44245 * C14480) * C44138) *
                C39336) *
               C44319) *
              C44195 * C1768 +
          ((((C164 - C163) * C20063 + (C166 - C165) * C44138) * C39334 +
            (C10974 * C20063 + C10975 * C44138) * C39335 +
            ((C10976 - C10977) * C20063 + (C10978 - C10979) * C44138) *
                C39336) *
               C3112 +
           ((C10972 * C20063 + C10973 * C44138) * C39334 +
            ((C10977 - C10976) * C20063 + (C10979 - C10978) * C44138) * C39335 +
            ((C44245 * C14479 - C151 * C14407) * C20063 +
             (C44245 * C14481 - C151 * C14411) * C44138) *
                C39336) *
               C44319) *
              C44195 * C44315)) /
        (p * q * std::sqrt(p + q));
    d2eexz[78] += (2 * std::pow(Pi, 2.5) *
                   ((((C39334 * C215 - C39413 * C93 + C39335 * C1330 -
                       C39414 * C1200 + C39336 * C4099 - C39415 * C4005) *
                          C20063 +
                      (C39334 * C220 - C39413 * C99 + C39335 * C1334 -
                       C39414 * C1207 + C39336 * C4102 - C39415 * C4009) *
                          C44138) *
                         C44245 * C3112 +
                     ((C39413 * C1200 - C39334 * C1330 + C39414 * C4005 -
                       C39335 * C4099 + C39415 * C14406 - C39336 * C14536) *
                          C20063 +
                      (C39413 * C1207 - C39334 * C1334 + C39414 * C4009 -
                       C39335 * C4102 + C39415 * C14409 - C39336 * C14538) *
                          C44138) *
                         C44245 * C44319) *
                        C44195 * C1768 +
                    (((C39413 * C94 - C39334 * C216 + C39414 * C1199 -
                       C39335 * C1331 + C39415 * C4006 - C39336 * C4100) *
                          C20063 +
                      (C39413 * C101 - C39334 * C221 + C39414 * C1205 -
                       C39335 * C1335 + C39415 * C4011 - C39336 * C4103) *
                          C44138) *
                         C44245 * C3112 +
                     ((C39334 * C1331 - C39413 * C1199 + C39335 * C4100 -
                       C39414 * C4006 + C39336 * C14537 - C39415 * C14407) *
                          C20063 +
                      (C39334 * C1335 - C39413 * C1205 + C39335 * C4103 -
                       C39414 * C4011 + C39336 * C14539 - C39415 * C14411) *
                          C44138) *
                         C44245 * C44319) *
                        C44195 * C44315)) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[78] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C44138 * C98 - C20063 * C93) * C151 +
             (C44138 * C282 - C20063 * C277) * C44245) *
                C39334 +
            ((C25317 - C25318) * C151 + (C25319 - C25320) * C44245) * C39335 +
            ((C28830 - C28829) * C151 + (C28832 - C28831) * C44245) * C39336) *
               C3112 +
           (((C25318 - C25317) * C151 + (C25320 - C25319) * C44245) * C39334 +
            ((C28829 - C28830) * C151 + (C28831 - C28832) * C44245) * C39335 +
            ((C20063 * C14406 - C44138 * C14408) * C151 +
             (C20063 * C14590 - C44138 * C14592) * C44245) *
                C39336) *
               C44319) *
              C44195 * C1768 +
          ((((C20063 * C94 - C44138 * C100) * C151 +
             (C20063 * C278 - C44138 * C283) * C44245) *
                C39334 +
            ((C25321 - C25322) * C151 + (C25323 - C25324) * C44245) * C39335 +
            ((C40305 - C40306) * C151 + (C40307 - C40308) * C44245) * C39336) *
               C3112 +
           (((C25322 - C25321) * C151 + (C25324 - C25323) * C44245) * C39334 +
            ((C40306 - C40305) * C151 + (C40308 - C40307) * C44245) * C39335 +
            ((C44138 * C14410 - C20063 * C14407) * C151 +
             (C44138 * C14593 - C20063 * C14591) * C44245) *
                C39336) *
               C44319) *
              C44195 * C44315)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[78] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C151 * C152 - C325 * C93 - C151 * C277 + C44245 * C326) * C44138 *
                C39334 +
            C40359 * C39335 + C40360 * C39336) *
               C3112 -
           ((C151 * C14478 - C325 * C14406 - C151 * C14590 + C44245 * C14652) *
                C44138 * C39336 +
            C40360 * C39335 + C40359 * C39334) *
               C44319) *
              C44195 * C1768 +
          ((C40361 * C39334 + C40362 * C39335 +
            (C151 * C14479 - C325 * C14407 - C151 * C14591 + C44245 * C14653) *
                C44138 * C39336) *
               C44319 -
           (C40362 * C39336 + C40361 * C39335 + C350 * C44138 * C39334) *
               C3112) *
              C44195 * C44315)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[78] += (2 * std::pow(Pi, 2.5) *
                   ((((C39334 * C215 - C39413 * C93 + C39335 * C1330 -
                       C39414 * C1200 + C39336 * C4099 - C39415 * C4005) *
                          C151 +
                      (C39334 * C390 - C39413 * C277 + C39335 * C1522 -
                       C39414 * C1396 + C39336 * C4228 - C39415 * C4143) *
                          C44245) *
                         C44138 * C3112 +
                     ((C39413 * C1200 - C39334 * C1330 + C39414 * C4005 -
                       C39335 * C4099 + C39415 * C14406 - C39336 * C14536) *
                          C151 +
                      (C39413 * C1396 - C39334 * C1522 + C39414 * C4143 -
                       C39335 * C4228 + C39415 * C14590 - C39336 * C14713) *
                          C44245) *
                         C44138 * C44319) *
                        C44195 * C1768 +
                    (((C39413 * C94 - C39334 * C216 + C39414 * C1199 -
                       C39335 * C1331 + C39415 * C4006 - C39336 * C4100) *
                          C151 +
                      (C39413 * C278 - C39334 * C391 + C39414 * C1397 -
                       C39335 * C1523 + C39415 * C4144 - C39336 * C4229) *
                          C44245) *
                         C44138 * C3112 +
                     ((C39334 * C1331 - C39413 * C1199 + C39335 * C4100 -
                       C39414 * C4006 + C39336 * C14537 - C39415 * C14407) *
                          C151 +
                      (C39334 * C1523 - C39413 * C1397 + C39335 * C4229 -
                       C39414 * C4144 + C39336 * C14714 - C39415 * C14591) *
                          C44245) *
                         C44138 * C44319) *
                        C44195 * C44315)) /
                  (p * q * std::sqrt(p + q));
    d2eezx[78] += (2 * std::pow(Pi, 2.5) *
                   ((((C44138 * C98 - C20063 * C93) * C39413 +
                      (C44138 * C448 - C20063 * C443) * C39334 +
                      (C25317 - C25318) * C39414 + (C25537 - C25538) * C39335 +
                      (C28830 - C28829) * C39415 + (C29002 - C29001) * C39336) *
                         C44245 * C3112 +
                     ((C25318 - C25317) * C39413 + (C25538 - C25537) * C39334 +
                      (C28829 - C28830) * C39414 + (C29001 - C29002) * C39335 +
                      (C20063 * C14406 - C44138 * C14408) * C39415 +
                      (C20063 * C14765 - C44138 * C14767) * C39336) *
                         C44245 * C44319) *
                        C44195 * C1768 +
                    (((C20063 * C94 - C44138 * C100) * C39413 +
                      (C20063 * C444 - C44138 * C449) * C39334 +
                      (C25321 - C25322) * C39414 + (C25539 - C25540) * C39335 +
                      (C40305 - C40306) * C39415 + (C40463 - C40464) * C39336) *
                         C44245 * C3112 +
                     ((C25322 - C25321) * C39413 + (C25540 - C25539) * C39334 +
                      (C40306 - C40305) * C39414 + (C40464 - C40463) * C39335 +
                      (C44138 * C14410 - C20063 * C14407) * C39415 +
                      (C44138 * C14768 - C20063 * C14766) * C39336) *
                         C44245 * C44319) *
                        C44195 * C44315)) /
                  (p * q * std::sqrt(p + q));
    d2eezy[78] += (2 * std::pow(Pi, 2.5) *
                   ((((C44245 * C152 - C151 * C93) * C39413 +
                      (C44245 * C491 - C151 * C443) * C39334 +
                      (C10968 - C10969) * C39414 + (C11430 - C11431) * C39335 +
                      (C14484 - C14483) * C39415 + (C14827 - C14826) * C39336) *
                         C44138 * C3112 +
                     ((C10969 - C10968) * C39413 + (C11431 - C11430) * C39334 +
                      (C14483 - C14484) * C39414 + (C14826 - C14827) * C39335 +
                      (C151 * C14406 - C44245 * C14478) * C39415 +
                      (C151 * C14765 - C44245 * C14823) * C39336) *
                         C44138 * C44319) *
                        C44195 * C1768 +
                    (((C164 - C163) * C39413 + (C498 - C497) * C39334 +
                      C10974 * C39414 + C11433 * C39335 +
                      (C10976 - C10977) * C39415 + (C11434 - C11435) * C39336) *
                         C44138 * C3112 +
                     (C10972 * C39413 + C11432 * C39334 +
                      (C10977 - C10976) * C39414 + (C11435 - C11434) * C39335 +
                      (C44245 * C14479 - C151 * C14407) * C39415 +
                      (C44245 * C14824 - C151 * C14766) * C39336) *
                         C44138 * C44319) *
                        C44195 * C44315)) /
                  (p * q * std::sqrt(p + q));
    d2eezz[78] +=
        (2 * std::pow(Pi, 2.5) *
         (((C39413 * C215 - C39644 * C93 - C39413 * C443 + C39334 * C545 +
            C39414 * C1330 - C39645 * C1200 - C39414 * C1580 + C39335 * C1698 +
            C39415 * C4099 - C39646 * C4005 - C39415 * C4269 + C39336 * C4354) *
               C44245 * C44138 * C3112 -
           (C39415 * C14536 - C39646 * C14406 - C39415 * C14765 +
            C39336 * C14877 + C39414 * C4099 - C39645 * C4005 - C39414 * C4269 +
            C39335 * C4354 + C39413 * C1330 - C39644 * C1200 - C39413 * C1580 +
            C39334 * C1698) *
               C44245 * C44138 * C44319) *
              C44195 * C1768 +
          ((C39413 * C1331 - C39644 * C1199 - C39413 * C1581 + C39334 * C1697 +
            C39414 * C4100 - C39645 * C4006 - C39414 * C4270 + C39335 * C4355 +
            C39415 * C14537 - C39646 * C14407 - C39415 * C14766 +
            C39336 * C14878) *
               C44245 * C44138 * C44319 -
           (C39415 * C4100 - C39646 * C4006 - C39415 * C4270 + C39336 * C4355 +
            C39414 * C1331 - C39645 * C1199 - C39414 * C1581 + C39335 * C1697 +
            C39413 * C216 - C39644 * C94 - C39413 * C444 + C39334 * C546) *
               C44245 * C44138 * C3112) *
              C44195 * C44315)) /
        (p * q * std::sqrt(p + q));
    d2eexx[79] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C20063 * C98 - C20064 * C93 - C20063 * C99 + C44138 * C108) *
                C39334 +
            C25109 * C39335 + C28664 * C39336) *
               C44245 * C3112 -
           ((C20063 * C14408 - C20064 * C14406 - C20063 * C14409 +
             C44138 * C14412) *
                C39336 +
            C28664 * C39335 + C25109 * C39334) *
               C44245 * C44319) *
              C624 +
          ((C22246 * C39334 + C26822 * C39335 +
            (C20063 * C28654 - C20064 * C28653 - C20063 * C28655 +
             C44138 * C28656) *
                C39336) *
               C44245 * C44319 -
           (C26822 * C39336 + C22246 * C39335 + C20450 * C39334) * C44245 *
               C3112) *
              C44317) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eexy[79] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C44245 * C152 - C151 * C93) * C20063 +
             (C44245 * C157 - C151 * C99) * C44138) *
                C39334 +
            ((C10968 - C10969) * C20063 + (C10970 - C10971) * C44138) * C39335 +
            ((C14484 - C14483) * C20063 + (C14486 - C14485) * C44138) *
                C39336) *
               C3112 +
           (((C10969 - C10968) * C20063 + (C10971 - C10970) * C44138) * C39334 +
            ((C14483 - C14484) * C20063 + (C14485 - C14486) * C44138) * C39335 +
            ((C151 * C14406 - C44245 * C14478) * C20063 +
             (C151 * C14409 - C44245 * C14480) * C44138) *
                C39336) *
               C44319) *
              C624 +
          ((((C151 * C630 - C44245 * C694) * C20063 +
             (C151 * C637 - C44245 * C698) * C44138) *
                C39334 +
            ((C12692 - C12693) * C20063 + (C12694 - C12695) * C44138) * C39335 +
            ((C41457 - C41458) * C20063 + (C41459 - C41460) * C44138) *
                C39336) *
               C3112 +
           (((C12693 - C12692) * C20063 + (C12695 - C12694) * C44138) * C39334 +
            ((C41458 - C41457) * C20063 + (C41460 - C41459) * C44138) * C39335 +
            ((C44245 * C28714 - C151 * C28653) * C20063 +
             (C44245 * C28715 - C151 * C28655) * C44138) *
                C39336) *
               C44319) *
              C44317) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eexz[79] += (2 * std::pow(Pi, 2.5) *
                   ((((C39334 * C215 - C39413 * C93 + C39335 * C1330 -
                       C39414 * C1200 + C39336 * C4099 - C39415 * C4005) *
                          C20063 +
                      (C39334 * C220 - C39413 * C99 + C39335 * C1334 -
                       C39414 * C1207 + C39336 * C4102 - C39415 * C4009) *
                          C44138) *
                         C44245 * C3112 +
                     ((C39413 * C1200 - C39334 * C1330 + C39414 * C4005 -
                       C39335 * C4099 + C39415 * C14406 - C39336 * C14536) *
                          C20063 +
                      (C39413 * C1207 - C39334 * C1334 + C39414 * C4009 -
                       C39335 * C4102 + C39415 * C14409 - C39336 * C14538) *
                          C44138) *
                         C44245 * C44319) *
                        C624 +
                    (((C39413 * C630 - C39334 * C760 + C39414 * C2614 -
                       C39335 * C2732 + C39415 * C9234 - C39336 * C9346) *
                          C20063 +
                      (C39413 * C637 - C39334 * C764 + C39414 * C2618 -
                       C39335 * C2735 + C39415 * C9237 - C39336 * C9348) *
                          C44138) *
                         C44245 * C3112 +
                     ((C39334 * C2732 - C39413 * C2614 + C39335 * C9346 -
                       C39414 * C9234 + C39336 * C28774 - C39415 * C28653) *
                          C20063 +
                      (C39334 * C2735 - C39413 * C2618 + C39335 * C9348 -
                       C39414 * C9237 + C39336 * C28775 - C39415 * C28655) *
                          C44138) *
                         C44245 * C44319) *
                        C44317) *
                   C44161) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[79] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C44138 * C98 - C20063 * C93) * C151 +
             (C44138 * C282 - C20063 * C277) * C44245) *
                C39334 +
            ((C25317 - C25318) * C151 + (C25319 - C25320) * C44245) * C39335 +
            ((C28830 - C28829) * C151 + (C28832 - C28831) * C44245) * C39336) *
               C3112 +
           (((C25318 - C25317) * C151 + (C25320 - C25319) * C44245) * C39334 +
            ((C28829 - C28830) * C151 + (C28831 - C28832) * C44245) * C39335 +
            ((C20063 * C14406 - C44138 * C14408) * C151 +
             (C20063 * C14590 - C44138 * C14592) * C44245) *
                C39336) *
               C44319) *
              C624 +
          ((((C20609 - C20608) * C151 + (C20611 - C20610) * C44245) * C39334 +
            (C27040 * C151 + C27041 * C44245) * C39335 +
            ((C27042 - C27043) * C151 + (C27044 - C27045) * C44245) * C39336) *
               C3112 +
           ((C27038 * C151 + C27039 * C44245) * C39334 +
            ((C27043 - C27042) * C151 + (C27045 - C27044) * C44245) * C39335 +
            ((C44138 * C28654 - C20063 * C28653) * C151 +
             (C44138 * C28827 - C20063 * C28826) * C44245) *
                C39336) *
               C44319) *
              C44317) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eeyy[79] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C151 * C152 - C325 * C93 - C151 * C277 + C44245 * C326) * C44138 *
                C39334 +
            C40359 * C39335 + C40360 * C39336) *
               C3112 -
           ((C151 * C14478 - C325 * C14406 - C151 * C14590 + C44245 * C14652) *
                C44138 * C39336 +
            C40360 * C39335 + C40359 * C39334) *
               C44319) *
              C624 +
          ((C41611 * C39334 + C41619 * C39335 +
            (C151 * C28714 - C325 * C28653 - C151 * C28826 + C44245 * C28882) *
                C44138 * C39336) *
               C44319 -
           (C41619 * C39336 + C41611 * C39335 +
            (C151 * C694 - C325 * C630 - C151 * C826 + C44245 * C886) * C44138 *
                C39334) *
               C3112) *
              C44317) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eeyz[79] += (2 * std::pow(Pi, 2.5) *
                   ((((C39334 * C215 - C39413 * C93 + C39335 * C1330 -
                       C39414 * C1200 + C39336 * C4099 - C39415 * C4005) *
                          C151 +
                      (C39334 * C390 - C39413 * C277 + C39335 * C1522 -
                       C39414 * C1396 + C39336 * C4228 - C39415 * C4143) *
                          C44245) *
                         C44138 * C3112 +
                     ((C39413 * C1200 - C39334 * C1330 + C39414 * C4005 -
                       C39335 * C4099 + C39415 * C14406 - C39336 * C14536) *
                          C151 +
                      (C39413 * C1396 - C39334 * C1522 + C39414 * C4143 -
                       C39335 * C4228 + C39415 * C14590 - C39336 * C14713) *
                          C44245) *
                         C44138 * C44319) *
                        C624 +
                    (((C39413 * C630 - C39334 * C760 + C39414 * C2614 -
                       C39335 * C2732 + C39415 * C9234 - C39336 * C9346) *
                          C151 +
                      (C39413 * C826 - C39334 * C952 + C39414 * C2788 -
                       C39335 * C2897 + C39415 * C9400 - C39336 * C9506) *
                          C44245) *
                         C44138 * C3112 +
                     ((C39334 * C2732 - C39413 * C2614 + C39335 * C9346 -
                       C39414 * C9234 + C39336 * C28774 - C39415 * C28653) *
                          C151 +
                      (C39334 * C2897 - C39413 * C2788 + C39335 * C9506 -
                       C39414 * C9400 + C39336 * C28947 - C39415 * C28826) *
                          C44245) *
                         C44138 * C44319) *
                        C44317) *
                   C44161) /
                  (p * q * std::sqrt(p + q));
    d2eezx[79] += (2 * std::pow(Pi, 2.5) *
                   ((((C44138 * C98 - C20063 * C93) * C39413 +
                      (C44138 * C448 - C20063 * C443) * C39334 +
                      (C25317 - C25318) * C39414 + (C25537 - C25538) * C39335 +
                      (C28830 - C28829) * C39415 + (C29002 - C29001) * C39336) *
                         C44245 * C3112 +
                     ((C25318 - C25317) * C39413 + (C25538 - C25537) * C39334 +
                      (C28829 - C28830) * C39414 + (C29001 - C29002) * C39335 +
                      (C20063 * C14406 - C44138 * C14408) * C39415 +
                      (C20063 * C14765 - C44138 * C14767) * C39336) *
                         C44245 * C44319) *
                        C624 +
                    (((C20609 - C20608) * C39413 + (C20775 - C20774) * C39334 +
                      C27040 * C39414 + C27263 * C39335 +
                      (C27042 - C27043) * C39415 + (C27264 - C27265) * C39336) *
                         C44245 * C3112 +
                     (C27038 * C39413 + C27262 * C39334 +
                      (C27043 - C27042) * C39414 + (C27265 - C27264) * C39335 +
                      (C44138 * C28654 - C20063 * C28653) * C39415 +
                      (C44138 * C28999 - C20063 * C28998) * C39336) *
                         C44245 * C44319) *
                        C44317) *
                   C44161) /
                  (p * q * std::sqrt(p + q));
    d2eezy[79] += (2 * std::pow(Pi, 2.5) *
                   ((((C44245 * C152 - C151 * C93) * C39413 +
                      (C44245 * C491 - C151 * C443) * C39334 +
                      (C10968 - C10969) * C39414 + (C11430 - C11431) * C39335 +
                      (C14484 - C14483) * C39415 + (C14827 - C14826) * C39336) *
                         C44138 * C3112 +
                     ((C10969 - C10968) * C39413 + (C11431 - C11430) * C39334 +
                      (C14483 - C14484) * C39414 + (C14826 - C14827) * C39335 +
                      (C151 * C14406 - C44245 * C14478) * C39415 +
                      (C151 * C14765 - C44245 * C14823) * C39336) *
                         C44138 * C44319) *
                        C624 +
                    (((C151 * C630 - C44245 * C694) * C39413 +
                      (C151 * C1010 - C44245 * C1068) * C39334 +
                      (C12692 - C12693) * C39414 + (C13101 - C13102) * C39335 +
                      (C41457 - C41458) * C39415 + (C41770 - C41771) * C39336) *
                         C44138 * C3112 +
                     ((C12693 - C12692) * C39413 + (C13102 - C13101) * C39334 +
                      (C41458 - C41457) * C39414 + (C41771 - C41770) * C39335 +
                      (C44245 * C28714 - C151 * C28653) * C39415 +
                      (C44245 * C29052 - C151 * C28998) * C39336) *
                         C44138 * C44319) *
                        C44317) *
                   C44161) /
                  (p * q * std::sqrt(p + q));
    d2eezz[79] +=
        (2 * std::pow(Pi, 2.5) *
         (((C39413 * C215 - C39644 * C93 - C39413 * C443 + C39334 * C545 +
            C39414 * C1330 - C39645 * C1200 - C39414 * C1580 + C39335 * C1698 +
            C39415 * C4099 - C39646 * C4005 - C39415 * C4269 + C39336 * C4354) *
               C44245 * C44138 * C3112 -
           (C39415 * C14536 - C39646 * C14406 - C39415 * C14765 +
            C39336 * C14877 + C39414 * C4099 - C39645 * C4005 - C39414 * C4269 +
            C39335 * C4354 + C39413 * C1330 - C39644 * C1200 - C39413 * C1580 +
            C39334 * C1698) *
               C44245 * C44138 * C44319) *
              C624 +
          ((C39413 * C2732 - C39644 * C2614 - C39413 * C2950 + C39334 * C3059 +
            C39414 * C9346 - C39645 * C9234 - C39414 * C9558 + C39335 * C9664 +
            C39415 * C28774 - C39646 * C28653 - C39415 * C28998 +
            C39336 * C29107) *
               C44245 * C44138 * C44319 -
           (C39415 * C9346 - C39646 * C9234 - C39415 * C9558 + C39336 * C9664 +
            C39414 * C2732 - C39645 * C2614 - C39414 * C2950 + C39335 * C3059 +
            C39413 * C760 - C39644 * C630 - C39413 * C1010 + C39334 * C1128) *
               C44245 * C44138 * C3112) *
              C44317) *
         C44161) /
        (p * q * std::sqrt(p + q));
    d2eexx[80] +=
        (2 * std::pow(Pi, 2.5) *
         (((C20063 * C98 - C20064 * C93 - C20063 * C99 + C44138 * C108) *
               C39334 +
           C25109 * C39335 + C28664 * C39336) *
              C44245 * C4002 -
          (C42770 * C39336 + C28664 * C39335 + C25109 * C39334) * C44245 *
              C4003 +
          (C28664 * C39334 + C42770 * C39335 +
           (C20063 * C42760 - C20064 * C42759 - C20063 * C42761 +
            C44138 * C42762) *
               C39336) *
              C44245 * C4004) *
         C44195 * C44161) /
        (p * q * std::sqrt(p + q));
    d2eexy[80] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C44245 * C152 - C151 * C93) * C20063 +
            (C44245 * C157 - C151 * C99) * C44138) *
               C39334 +
           ((C10968 - C10969) * C20063 + (C10970 - C10971) * C44138) * C39335 +
           C42819 * C39336) *
              C4002 +
          (((C10969 - C10968) * C20063 + (C10971 - C10970) * C44138) * C39334 +
           ((C14483 - C14484) * C20063 + (C14485 - C14486) * C44138) * C39335 +
           ((C42813 - C42814) * C20063 + (C42815 - C42816) * C44138) * C39336) *
              C4003 +
          (C42819 * C39334 +
           ((C42814 - C42813) * C20063 + (C42816 - C42815) * C44138) * C39335 +
           ((C44245 * C42808 - C151 * C42759) * C20063 +
            (C44245 * C42809 - C151 * C42761) * C44138) *
               C39336) *
              C4004) *
         C44195 * C44161) /
        (p * q * std::sqrt(p + q));
    d2eexz[80] += (2 * std::pow(Pi, 2.5) *
                   (((C39334 * C215 - C39413 * C93 + C39335 * C1330 -
                      C39414 * C1200 + C39336 * C4099 - C39415 * C4005) *
                         C20063 +
                     (C39334 * C220 - C39413 * C99 + C39335 * C1334 -
                      C39414 * C1207 + C39336 * C4102 - C39415 * C4009) *
                         C44138) *
                        C44245 * C4002 +
                    ((C39413 * C1200 - C39334 * C1330 + C39414 * C4005 -
                      C39335 * C4099 + C39415 * C14406 - C39336 * C14536) *
                         C20063 +
                     (C39413 * C1207 - C39334 * C1334 + C39414 * C4009 -
                      C39335 * C4102 + C39415 * C14409 - C39336 * C14538) *
                         C44138) *
                        C44245 * C4003 +
                    ((C39334 * C4099 - C39413 * C4005 + C39335 * C14536 -
                      C39414 * C14406 + C39336 * C42857 - C39415 * C42759) *
                         C20063 +
                     (C39334 * C4102 - C39413 * C4009 + C39335 * C14538 -
                      C39414 * C14409 + C39336 * C42858 - C39415 * C42761) *
                         C44138) *
                        C44245 * C4004) *
                   C44195 * C44161) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[80] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C44138 * C98 - C20063 * C93) * C151 +
            (C44138 * C282 - C20063 * C277) * C44245) *
               C39334 +
           ((C25317 - C25318) * C151 + (C25319 - C25320) * C44245) * C39335 +
           C42908 * C39336) *
              C4002 +
          (((C25318 - C25317) * C151 + (C25320 - C25319) * C44245) * C39334 +
           ((C28829 - C28830) * C151 + (C28831 - C28832) * C44245) * C39335 +
           ((C42902 - C42903) * C151 + (C42904 - C42905) * C44245) * C39336) *
              C4003 +
          (C42908 * C39334 +
           ((C42903 - C42902) * C151 + (C42905 - C42904) * C44245) * C39335 +
           ((C44138 * C42760 - C20063 * C42759) * C151 +
            (C44138 * C42898 - C20063 * C42897) * C44245) *
               C39336) *
              C4004) *
         C44195 * C44161) /
        (p * q * std::sqrt(p + q));
    d2eeyy[80] +=
        (2 * std::pow(Pi, 2.5) *
         (((C151 * C152 - C325 * C93 - C151 * C277 + C44245 * C326) * C44138 *
               C39334 +
           C40359 * C39335 + C40360 * C39336) *
              C4002 -
          (C42955 * C39336 + C40360 * C39335 + C40359 * C39334) * C4003 +
          (C40360 * C39334 + C42955 * C39335 +
           (C151 * C42808 - C325 * C42759 - C151 * C42897 + C44245 * C42946) *
               C44138 * C39336) *
              C4004) *
         C44195 * C44161) /
        (p * q * std::sqrt(p + q));
    d2eeyz[80] += (2 * std::pow(Pi, 2.5) *
                   (((C39334 * C215 - C39413 * C93 + C39335 * C1330 -
                      C39414 * C1200 + C39336 * C4099 - C39415 * C4005) *
                         C151 +
                     (C39334 * C390 - C39413 * C277 + C39335 * C1522 -
                      C39414 * C1396 + C39336 * C4228 - C39415 * C4143) *
                         C44245) *
                        C44138 * C4002 +
                    ((C39413 * C1200 - C39334 * C1330 + C39414 * C4005 -
                      C39335 * C4099 + C39415 * C14406 - C39336 * C14536) *
                         C151 +
                     (C39413 * C1396 - C39334 * C1522 + C39414 * C4143 -
                      C39335 * C4228 + C39415 * C14590 - C39336 * C14713) *
                         C44245) *
                        C44138 * C4003 +
                    ((C39334 * C4099 - C39413 * C4005 + C39335 * C14536 -
                      C39414 * C14406 + C39336 * C42857 - C39415 * C42759) *
                         C151 +
                     (C39334 * C4228 - C39413 * C4143 + C39335 * C14713 -
                      C39414 * C14590 + C39336 * C42993 - C39415 * C42897) *
                         C44245) *
                        C44138 * C4004) *
                   C44195 * C44161) /
                  (p * q * std::sqrt(p + q));
    d2eezx[80] += (2 * std::pow(Pi, 2.5) *
                   (((C44138 * C98 - C20063 * C93) * C39413 +
                     (C44138 * C448 - C20063 * C443) * C39334 +
                     (C25317 - C25318) * C39414 + (C25537 - C25538) * C39335 +
                     C42900 * C39415 + C43035 * C39336) *
                        C44245 * C4002 +
                    ((C25318 - C25317) * C39413 + (C25538 - C25537) * C39334 +
                     (C28829 - C28830) * C39414 + (C29001 - C29002) * C39335 +
                     (C42902 - C42903) * C39415 + (C43036 - C43037) * C39336) *
                        C44245 * C4003 +
                    (C42900 * C39413 + C43035 * C39334 +
                     (C42903 - C42902) * C39414 + (C43037 - C43036) * C39335 +
                     (C44138 * C42760 - C20063 * C42759) * C39415 +
                     (C44138 * C43033 - C20063 * C43032) * C39336) *
                        C44245 * C4004) *
                   C44195 * C44161) /
                  (p * q * std::sqrt(p + q));
    d2eezy[80] +=
        (2 * std::pow(Pi, 2.5) *
         (((C44245 * C152 - C151 * C93) * C39413 +
           (C44245 * C491 - C151 * C443) * C39334 + (C10968 - C10969) * C39414 +
           (C11430 - C11431) * C39335 + C42811 * C39415 + C43077 * C39336) *
              C44138 * C4002 +
          ((C10969 - C10968) * C39413 + (C11431 - C11430) * C39334 +
           (C14483 - C14484) * C39414 + (C14826 - C14827) * C39335 +
           (C42813 - C42814) * C39415 + (C43078 - C43079) * C39336) *
              C44138 * C4003 +
          (C42811 * C39413 + C43077 * C39334 + (C42814 - C42813) * C39414 +
           (C43079 - C43078) * C39335 +
           (C44245 * C42808 - C151 * C42759) * C39415 +
           (C44245 * C43075 - C151 * C43032) * C39336) *
              C44138 * C4004) *
         C44195 * C44161) /
        (p * q * std::sqrt(p + q));
    d2eezz[80] +=
        (2 * std::pow(Pi, 2.5) *
         ((C39413 * C215 - C39644 * C93 - C39413 * C443 + C39334 * C545 +
           C39414 * C1330 - C39645 * C1200 - C39414 * C1580 + C39335 * C1698 +
           C39415 * C4099 - C39646 * C4005 - C39415 * C4269 + C39336 * C4354) *
              C44245 * C44138 * C4002 -
          (C39415 * C14536 - C39646 * C14406 - C39415 * C14765 +
           C39336 * C14877 + C39414 * C4099 - C39645 * C4005 - C39414 * C4269 +
           C39335 * C4354 + C39413 * C1330 - C39644 * C1200 - C39413 * C1580 +
           C39334 * C1698) *
              C44245 * C44138 * C4003 +
          (C39413 * C4099 - C39644 * C4005 - C39413 * C4269 + C39334 * C4354 +
           C39414 * C14536 - C39645 * C14406 - C39414 * C14765 +
           C39335 * C14877 + C39415 * C42857 - C39646 * C42759 -
           C39415 * C43032 + C39336 * C43117) *
              C44245 * C44138 * C4004) *
         C44195 * C44161) /
        (p * q * std::sqrt(p + q));
    
}
