/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "gto_d2_kit/d2_ee_pppp_AC.hpp"
#include <cmath>
/*

*/
#pragma GCC optimize("O0")
namespace {
    const double Pi = M_PI;
}
//
void second_derivative_ee_1111_13(const double ae,
                                  const double xA,
                                  const double yA,
                                  const double zA,
                                  const double be,
                                  const double xB,
                                  const double yB,
                                  const double zB,
                                  const double ce,
                                  const double xC,
                                  const double yC,
                                  const double zC,
                                  const double de,
                                  const double xD,
                                  const double yD,
                                  const double zD,
                                  const double* const bs,
                                  double* const d2eexx,
                                  double* const d2eexy,
                                  double* const d2eexz,
                                  double* const d2eeyx,
                                  double* const d2eeyy,
                                  double* const d2eeyz,
                                  double* const d2eezx,
                                  double* const d2eezy,
                                  double* const d2eezz)
{
    const double p = ae + be;
    const double q = ce + de;
    const double xP = (ae * xA + be * xB) / p;
    const double yP = (ae * yA + be * yB) / p;
    const double zP = (ae * zA + be * zB) / p;
    const double xQ = (ce * xC + de * xD) / q;
    const double yQ = (ce * yC + de * yD) / q;
    const double zQ = (ce * zC + de * zD) / q;
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    const double C43317 = ae * be;
    const double C43316 = ae + be;
    const double C43315 = 0 * be;
    const double C43314 = xA - xB;
    const double C43336 = ce * de;
    const double C43335 = ce + de;
    const double C43334 = 0 * de;
    const double C43333 = xC - xD;
    const double C43361 = yC - yD;
    const double C43368 = zC - zD;
    const double C43386 = 0 * de;
    const double C43402 = 0 * de;
    const double C43417 = yA - yB;
    const double C43424 = zA - zB;
    const double C43442 = 0 * be;
    const double C43458 = 0 * be;
    const double C43468 = p + q;
    const double C43467 = p * q;
    const double C43473 = xP - xQ;
    const double C43472 = bs[2];
    const double C43482 = ae * ce;
    const double C43478 = bs[3];
    const double C43491 = bs[4];
    const double C43512 = bs[5];
    const double C43549 = yP - yQ;
    const double C43579 = zP - zQ;
    const double C93 = bs[0];
    const double C43318 = std::pow(C43316, 2);
    const double C44400 = 2 * C43316;
    const double C43319 = C43317 * C43314;
    const double C44391 = std::pow(C43314, 2);
    const double C44579 = C43314 * be;
    const double C44578 = C43314 * ae;
    const double C43337 = std::pow(C43335, 2);
    const double C43474 = C43335 * C43316;
    const double C44412 = 2 * C43335;
    const double C43338 = C43336 * C43333;
    const double C44403 = std::pow(C43333, 2);
    const double C44582 = C43333 * de;
    const double C44581 = C43333 * ce;
    const double C43387 = C43336 * C43361;
    const double C44445 = std::pow(C43361, 2);
    const double C44586 = C43361 * de;
    const double C44584 = C43361 * ce;
    const double C43403 = C43336 * C43368;
    const double C44460 = std::pow(C43368, 2);
    const double C44587 = C43368 * de;
    const double C44585 = C43368 * ce;
    const double C43443 = C43317 * C43417;
    const double C44493 = std::pow(C43417, 2);
    const double C44590 = C43417 * be;
    const double C44588 = C43417 * ae;
    const double C43459 = C43317 * C43424;
    const double C44508 = std::pow(C43424, 2);
    const double C44591 = C43424 * be;
    const double C44589 = C43424 * ae;
    const double C43469 = 2 * C43467;
    const double C43483 = C43473 * ae;
    const double C43481 = std::pow(C43473, 2);
    const double C43479 = C43473 * ce;
    const double C43552 = C43473 * C43549;
    const double C43551 = C43549 * ce;
    const double C43611 = C43549 * C43473;
    const double C43610 = C43549 * ae;
    const double C43639 = std::pow(C43549, 2);
    const double C43582 = C43473 * C43579;
    const double C43581 = C43579 * ce;
    const double C43653 = C43549 * C43579;
    const double C43666 = C43579 * C43473;
    const double C43665 = C43579 * ae;
    const double C43694 = C43579 * C43549;
    const double C43706 = std::pow(C43579, 2);
    const double C43320 = 2 * C43318;
    const double C44580 = std::pow(C44400, -1);
    const double C44392 = C44391 * C43317;
    const double C43339 = 2 * C43337;
    const double C44583 = std::pow(C44412, -1);
    const double C44404 = C44403 * C43336;
    const double C44446 = C44445 * C43336;
    const double C44461 = C44460 * C43336;
    const double C44494 = C44493 * C43317;
    const double C44509 = C44508 * C43317;
    const double C43471 = C43469 / C43468;
    const double C108 =
        (-((std::pow(xP - xQ, 2) * bs[2] * std::pow(C43469 / C43468, 2) -
            (bs[1] * C43469) / C43468) *
           ae * ce) /
         C43335) /
        C43316;
    const double C94 = -(C43473 * bs[1] * C43469) / C43468;
    const double C642 = -(C43549 * bs[1] * C43469) / C43468;
    const double C1232 = -(C43579 * bs[1] * C43469) / C43468;
    const double C43486 = C43478 * C43483;
    const double C43497 = C43491 * C43483;
    const double C43521 = C43512 * C43483;
    const double C98 = (-(bs[1] * C43483 * C43469) / C43468) / C43316;
    const double C43493 = C43481 * C43491;
    const double C43516 = C43481 * C43512;
    const double C43485 = C43478 * C43479;
    const double C43494 = C43491 * C43479;
    const double C43517 = C43512 * C43479;
    const double C101 = (bs[1] * C43479 * C43469) / (C43468 * C43335);
    const double C43554 = C43552 * ae;
    const double C43553 = C43478 * C43551;
    const double C43559 = C43491 * C43551;
    const double C43566 = C43512 * C43551;
    const double C152 = (bs[1] * C43551 * C43469) / (C43468 * C43335);
    const double C43613 = C43611 * ae;
    const double C43612 = C43478 * C43610;
    const double C43618 = C43491 * C43610;
    const double C43625 = C43512 * C43610;
    const double C250 = (-(bs[1] * C43610 * C43469) / C43468) / C43316;
    const double C43641 = C43639 * C43491;
    const double C43646 = C43639 * C43512;
    const double C43584 = C43582 * ae;
    const double C43583 = C43478 * C43581;
    const double C43589 = C43491 * C43581;
    const double C43596 = C43512 * C43581;
    const double C201 = (bs[1] * C43581 * C43469) / (C43468 * C43335);
    const double C43654 = C43653 * ae;
    const double C43668 = C43666 * ae;
    const double C43667 = C43478 * C43665;
    const double C43673 = C43491 * C43665;
    const double C43680 = C43512 * C43665;
    const double C437 = (-(bs[1] * C43665 * C43469) / C43468) / C43316;
    const double C43695 = C43694 * ae;
    const double C43708 = C43706 * C43491;
    const double C43713 = C43706 * C43512;
    const double C44393 = C44392 / C43316;
    const double C44405 = C44404 / C43335;
    const double C44447 = C44446 / C43335;
    const double C44462 = C44461 / C43335;
    const double C44495 = C44494 / C43316;
    const double C44510 = C44509 / C43316;
    const double C43475 = std::pow(C43471, 2);
    const double C43477 = -C43471;
    const double C43492 = std::pow(C43471, 4);
    const double C43556 = C43554 * ce;
    const double C43615 = C43613 * ce;
    const double C43586 = C43584 * ce;
    const double C43655 = C43654 * ce;
    const double C43670 = C43668 * ce;
    const double C43696 = C43695 * ce;
    const double C44394 = -C44393;
    const double C44406 = -C44405;
    const double C44448 = -C44447;
    const double C44463 = -C44462;
    const double C44496 = -C44495;
    const double C44511 = -C44510;
    const double C43480 = C43472 * C43475;
    const double C109 =
        (-(C43475 * C43472 * C43473 * ae * ce) / C43335) / C43316 -
        (ae * C43475 * C43472 * C43473 * ce) / C43474 -
        (C43473 *
         (C43472 * C43475 +
          std::pow(C43473, 2) * bs[3] * std::pow(-C43471, 3)) *
         ae * ce) /
            C43474;
    const double C157 =
        (-(C43475 * C43472 * C43473 * (yP - yQ) * ae * ce) / C43335) / C43316;
    const double C206 =
        (-(C43475 * C43472 * C43473 * (zP - zQ) * ae * ce) / C43335) / C43316;
    const double C255 =
        (-(C43475 * C43472 * C43549 * C43473 * ae * ce) / C43335) / C43316;
    const double C316 =
        (-((std::pow(C43549, 2) * C43472 * C43475 - (bs[1] * C43469) / C43468) *
           C43482) /
         C43335) /
        C43316;
    const double C376 =
        (-(C43475 * C43472 * C43549 * C43579 * ae * ce) / C43335) / C43316;
    const double C442 =
        (-(C43475 * C43472 * C43579 * C43473 * ae * ce) / C43335) / C43316;
    const double C503 =
        (-(C43475 * C43472 * C43579 * C43549 * ae * ce) / C43335) / C43316;
    const double C562 =
        (-((std::pow(C43579, 2) * C43472 * C43475 - (bs[1] * C43469) / C43468) *
           C43482) /
         C43335) /
        C43316;
    const double C99 = (C43473 * C43475 * C43472 * C43483) / C43316 -
                       (ae * bs[1] * C43469) / (C43468 * C43316);
    const double C102 = (ce * bs[1] * C43469) / (C43468 * C43335) -
                        (C43473 * C43475 * C43472 * C43479) / C43335;
    const double C153 = -(C43473 * C43475 * C43472 * C43551) / C43335;
    const double C202 = -(C43473 * C43475 * C43472 * C43581) / C43335;
    const double C251 = (C43473 * C43475 * C43472 * C43610) / C43316;
    const double C438 = (C43473 * C43475 * C43472 * C43665) / C43316;
    const double C648 = -(C43549 * C43475 * C43472 * C43479) / C43335;
    const double C649 = (C43549 * C43475 * C43472 * C43483) / C43316;
    const double C709 = (ce * bs[1] * C43469) / (C43468 * C43335) -
                        (C43549 * C43475 * C43472 * C43551) / C43335;
    const double C767 = -(C43549 * C43475 * C43472 * C43581) / C43335;
    const double C824 = (C43549 * C43475 * C43472 * C43610) / C43316 -
                        (ae * bs[1] * C43469) / (C43468 * C43316);
    const double C1026 = (C43549 * C43475 * C43472 * C43665) / C43316;
    const double C1238 = -(C43579 * C43475 * C43472 * C43479) / C43335;
    const double C1239 = (C43579 * C43475 * C43472 * C43483) / C43316;
    const double C1298 = -(C43579 * C43475 * C43472 * C43551) / C43335;
    const double C1357 = (ce * bs[1] * C43469) / (C43468 * C43335) -
                         (C43579 * C43475 * C43472 * C43581) / C43335;
    const double C1414 = (C43579 * C43475 * C43472 * C43610) / C43316;
    const double C1616 = (C43579 * C43475 * C43472 * C43665) / C43316 -
                         (ae * bs[1] * C43469) / (C43468 * C43316);
    const double C43484 = std::pow(C43477, 3);
    const double C43513 = std::pow(C43477, 5);
    const double C43501 = C43492 * C43497;
    const double C43500 = C43492 * C43494;
    const double C43499 = C43493 * C43492;
    const double C43511 = C43491 * C43492;
    const double C43561 = C43492 * C43559;
    const double C43591 = C43492 * C43589;
    const double C43620 = C43492 * C43618;
    const double C43642 = C43641 * C43492;
    const double C43675 = C43492 * C43673;
    const double C43709 = C43708 * C43492;
    const double C43558 = C43491 * C43556;
    const double C43564 = C43512 * C43556;
    const double C43617 = C43491 * C43615;
    const double C43623 = C43512 * C43615;
    const double C43588 = C43491 * C43586;
    const double C43594 = C43512 * C43586;
    const double C43657 = C43491 * C43655;
    const double C43660 = C43512 * C43655;
    const double C43672 = C43491 * C43670;
    const double C43678 = C43512 * C43670;
    const double C43698 = C43491 * C43696;
    const double C43701 = C43512 * C43696;
    const double C44395 = std::exp(C44394);
    const double C44407 = std::exp(C44406);
    const double C44449 = std::exp(C44448);
    const double C44464 = std::exp(C44463);
    const double C44497 = std::exp(C44496);
    const double C44512 = std::exp(C44511);
    const double C95 = C43480 * C43481 - (bs[1] * C43469) / C43468;
    const double C639 = C43549 * C43473 * C43480;
    const double C1229 = C43579 * C43473 * C43480;
    const double C2284 = C43480 * C43639 - (bs[1] * C43469) / C43468;
    const double C2689 = C43579 * C43549 * C43480;
    const double C4098 = C43480 * C43706 - (bs[1] * C43469) / C43468;
    const double C43488 = C43484 * C43486;
    const double C43487 = C43484 * C43485;
    const double C43490 = C43478 * C43484;
    const double C43555 = C43484 * C43553;
    const double C43585 = C43484 * C43583;
    const double C43614 = C43484 * C43612;
    const double C43669 = C43484 * C43667;
    const double C158 =
        (-(C43473 * C43484 * C43478 * C43473 * C43549 * ae * ce) / C43335) /
            C43316 -
        (ae * C43475 * C43472 * C43549 * ce) / C43474;
    const double C207 =
        (-(C43473 * C43484 * C43478 * C43473 * C43579 * ae * ce) / C43335) /
            C43316 -
        (ae * C43475 * C43472 * C43579 * ce) / C43474;
    const double C256 =
        (-(C43473 * C43484 * C43478 * C43549 * C43473 * ae * ce) / C43335) /
            C43316 -
        (C43475 * C43472 * C43549 * ae * ce) / C43474;
    const double C317 =
        (-(C43473 * (C43480 + std::pow(C43549, 2) * C43478 * C43484) * C43482) /
         C43335) /
        C43316;
    const double C377 =
        (-(C43473 * C43484 * C43478 * C43549 * C43579 * ae * ce) / C43335) /
        C43316;
    const double C378 =
        (-(C43492 * C43491 * C43655 * C43481) / C43335) / C43316 -
        (C43484 * C43478 * C43655) / C43474;
    const double C443 =
        (-(C43473 * C43484 * C43478 * C43579 * C43473 * ae * ce) / C43335) /
            C43316 -
        (C43475 * C43472 * C43579 * ae * ce) / C43474;
    const double C504 =
        (-(C43473 * C43484 * C43478 * C43579 * C43549 * ae * ce) / C43335) /
        C43316;
    const double C505 =
        (-(C43492 * C43491 * C43696 * C43481) / C43335) / C43316 -
        (C43484 * C43478 * C43696) / C43474;
    const double C563 =
        (-(C43473 * (C43480 + std::pow(C43579, 2) * C43478 * C43484) * C43482) /
         C43335) /
        C43316;
    const double C653 =
        (-(C43549 * (C43480 + C43481 * C43478 * C43484) * C43482) / C43335) /
        C43316;
    const double C713 =
        (-(C43549 * C43484 * C43478 * C43556) / C43335) / C43316 -
        (C43475 * C43472 * C43483 * ce) / C43474;
    const double C771 =
        (-(C43549 * C43484 * C43478 * C43586) / C43335) / C43316;
    const double C827 =
        (-(C43549 * C43484 * C43478 * C43615) / C43335) / C43316 -
        (ae * C43475 * C43472 * C43479) / C43474;
    const double C893 =
        (-(C43475 * C43472 * C43610 * ce) / C43335) / C43316 -
        (ae * C43475 * C43472 * C43551) / C43474 -
        (C43549 * (C43480 + C43639 * C43478 * C43484) * C43482) / C43474;
    const double C963 =
        (-(C43549 * C43484 * C43478 * C43655) / C43335) / C43316 -
        (ae * C43475 * C43472 * C43581) / C43474;
    const double C1029 =
        (-(C43549 * C43484 * C43478 * C43670) / C43335) / C43316;
    const double C1095 =
        (-(C43549 * C43484 * C43478 * C43696) / C43335) / C43316 -
        (C43475 * C43472 * C43665 * ce) / C43474;
    const double C1165 =
        (-(C43549 * (C43480 + C43706 * C43478 * C43484) * C43482) / C43335) /
        C43316;
    const double C1243 =
        (-(C43579 * (C43480 + C43481 * C43478 * C43484) * C43482) / C43335) /
        C43316;
    const double C1302 =
        (-(C43579 * C43484 * C43478 * C43556) / C43335) / C43316;
    const double C1361 =
        (-(C43579 * C43484 * C43478 * C43586) / C43335) / C43316 -
        (C43475 * C43472 * C43483 * ce) / C43474;
    const double C1417 =
        (-(C43579 * C43484 * C43478 * C43615) / C43335) / C43316;
    const double C1486 =
        (-(C43579 * (C43480 + C43639 * C43478 * C43484) * C43482) / C43335) /
        C43316;
    const double C1547 =
        (-(C43579 * C43484 * C43478 * C43655) / C43335) / C43316 -
        (C43475 * C43472 * C43610 * ce) / C43474;
    const double C1619 =
        (-(C43579 * C43484 * C43478 * C43670) / C43335) / C43316 -
        (ae * C43475 * C43472 * C43479) / C43474;
    const double C1688 =
        (-(C43579 * C43484 * C43478 * C43696) / C43335) / C43316 -
        (ae * C43475 * C43472 * C43551) / C43474;
    const double C1749 =
        (-(C43475 * C43472 * C43665 * ce) / C43335) / C43316 -
        (ae * C43475 * C43472 * C43581) / C43474 -
        (C43579 * (C43480 + C43706 * C43478 * C43484) * C43482) / C43474;
    const double C43528 = C43513 * C43521;
    const double C43525 = C43513 * C43517;
    const double C43524 = C43516 * C43513;
    const double C43569 = C43513 * C43566;
    const double C43599 = C43513 * C43596;
    const double C43628 = C43513 * C43625;
    const double C43647 = C43646 * C43513;
    const double C43683 = C43513 * C43680;
    const double C43714 = C43713 * C43513;
    const double C43504 = C43473 * C43501;
    const double C43509 = C43501 * ce;
    const double C43931 = C43549 * C43501;
    const double C44089 = C43579 * C43501;
    const double C43503 = C43473 * C43500;
    const double C43510 = ae * C43500;
    const double C43941 = C43549 * C43500;
    const double C44104 = C43579 * C43500;
    const double C43522 = C43511 * ae;
    const double C43520 = C43511 * C43481;
    const double C43519 = C43473 * C43511;
    const double C43518 = C43511 * ce;
    const double C44004 = C43511 * C43639;
    const double C44003 = C43549 * C43511;
    const double C44126 = C43511 * C43706;
    const double C44125 = C43579 * C43511;
    const double C43565 = ae * C43561;
    const double C43563 = C43473 * C43561;
    const double C43881 = C43549 * C43561;
    const double C44113 = C43579 * C43561;
    const double C43595 = ae * C43591;
    const double C43593 = C43473 * C43591;
    const double C43947 = C43549 * C43591;
    const double C43969 = C43579 * C43591;
    const double C43624 = C43620 * ce;
    const double C43622 = C43473 * C43620;
    const double C43883 = C43549 * C43620;
    const double C44100 = C43579 * C43620;
    const double C43679 = C43675 * ce;
    const double C43677 = C43473 * C43675;
    const double C43948 = C43549 * C43675;
    const double C43971 = C43579 * C43675;
    const double C43560 = C43492 * C43558;
    const double C43567 = C43513 * C43564;
    const double C43619 = C43492 * C43617;
    const double C43626 = C43513 * C43623;
    const double C43590 = C43492 * C43588;
    const double C43597 = C43513 * C43594;
    const double C43658 = C43492 * C43657;
    const double C43661 = C43513 * C43660;
    const double C43674 = C43492 * C43672;
    const double C43681 = C43513 * C43678;
    const double C43699 = C43492 * C43698;
    const double C43702 = C43513 * C43701;
    const double C20549 = C44395 * C649;
    const double C25273 = C44395 * C1239;
    const double C43321 = C43319 * C44395;
    const double C44593 = C44580 * C44395;
    const double C44592 = C44395 * C44578;
    const double C4503 = -(C44395 * C44579) / C43316;
    const double C43340 = C43338 * C44407;
    const double C44595 = C44583 * C44407;
    const double C44594 = C44407 * C44581;
    const double C633 = -(C44407 * C44582) / C43335;
    const double C43388 = C43387 * C44449;
    const double C151 = -(2 * C43336 * (yC - yD) * C44449) / C43335;
    const double C705 =
        ((C44449 - (C43361 * 2 * C43336 * C43361 * C44449) / C43335) * ce) /
            C43335 -
        (0 * de) / C43339;
    const double C706 = (0 * ce) / C43335 - (C43336 * C43361 * C44449) / C43337;
    const double C1873 =
        (-(0 * de) / C43335) / (2 * C43335) -
        ((C44449 - (C43361 * 2 * C43336 * C43361 * C44449) / C43335) * de) /
            C43335;
    const double C1874 =
        (-(2 * C43336 * C43361 * C44449) / C43335) / (2 * C43335) -
        (0 * de) / C43335;
    const double C44597 = C44583 * C44449;
    const double C44596 = C44449 * C44584;
    const double C1819 = -(C44449 * C44586) / C43335;
    const double C43404 = C43403 * C44464;
    const double C200 = -(2 * C43336 * (zC - zD) * C44464) / C43335;
    const double C1353 =
        ((C44464 - (C43368 * 2 * C43336 * C43368 * C44464) / C43335) * ce) /
            C43335 -
        (0 * de) / C43339;
    const double C1354 =
        (0 * ce) / C43335 - (C43336 * C43368 * C44464) / C43337;
    const double C3289 =
        (-(0 * de) / C43335) / (2 * C43335) -
        ((C44464 - (C43368 * 2 * C43336 * C43368 * C44464) / C43335) * de) /
            C43335;
    const double C3290 =
        (-(2 * C43336 * C43368 * C44464) / C43335) / (2 * C43335) -
        (0 * de) / C43335;
    const double C44599 = C44583 * C44464;
    const double C44598 = C44464 * C44585;
    const double C3187 = -(C44464 * C44587) / C43335;
    const double C262 = C44497 * C251;
    const double C11245 = C44497 * C1414;
    const double C43444 = C43443 * C44497;
    const double C249 = -(2 * C43317 * (yA - yB) * C44497) / C43316;
    const double C4659 =
        ((C44497 - (C43417 * 2 * C43317 * C43417 * C44497) / C43316) * ae) /
            C43316 -
        (0 * be) / C43320;
    const double C4660 =
        (0 * ae) / C43316 - (C43317 * C43417 * C44497) / C43318;
    const double C15239 =
        (-(0 * be) / C43316) / (2 * C43316) -
        ((C44497 - (C43417 * 2 * C43317 * C43417 * C44497) / C43316) * be) /
            C43316;
    const double C15240 =
        (-(2 * C43317 * C43417 * C44497) / C43316) / (2 * C43316) -
        (0 * be) / C43316;
    const double C44601 = C44580 * C44497;
    const double C44600 = C44497 * C44588;
    const double C15085 = -(C44497 * C44590) / C43316;
    const double C449 = C44512 * C438;
    const double C5499 = C44512 * C1026;
    const double C43460 = C43459 * C44512;
    const double C436 = -(2 * C43317 * (zA - zB) * C44512) / C43316;
    const double C10145 =
        ((C44512 - (C43424 * 2 * C43317 * C43424 * C44512) / C43316) * ae) /
            C43316 -
        (0 * be) / C43320;
    const double C10146 =
        (0 * ae) / C43316 - (C43317 * C43424 * C44512) / C43318;
    const double C29669 =
        (-(0 * be) / C43316) / (2 * C43316) -
        ((C44512 - (C43424 * 2 * C43317 * C43424 * C44512) / C43316) * be) /
            C43316;
    const double C29670 =
        (-(2 * C43317 * C43424 * C44512) / C43316) / (2 * C43316) -
        (0 * be) / C43316;
    const double C44603 = C44580 * C44512;
    const double C44602 = C44512 * C44589;
    const double C29367 = -(C44512 * C44591) / C43316;
    const double C100 =
        (C43475 * C43472 * C43483 + C43473 * (C43473 * C43488 + C43480 * ae) +
         C43473 * C43480 * ae) /
        C43316;
    const double C643 = (C43549 * (C43473 * C43488 + C43480 * ae)) / C43316;
    const double C1233 = (C43579 * (C43473 * C43488 + C43480 * ae)) / C43316;
    const double C2287 = (C43475 * C43472 * C43483 + C43488 * C43639) / C43316;
    const double C2692 = (C43579 * C43549 * C43488) / C43316;
    const double C4101 = (C43475 * C43472 * C43483 + C43488 * C43706) / C43316;
    const double C6965 =
        (2 * C43549 * C43488 + C43549 * (C43488 + C43501 * C43639)) / C43316;
    const double C7509 = (C43579 * (C43488 + C43501 * C43639)) / C43316;
    const double C14561 =
        (2 * C43579 * C43488 + C43579 * (C43488 + C43501 * C43706)) / C43316;
    const double C110 =
        (-(ae * (C43473 * C43487 + C43480 * ce)) / C43335) / C43316 -
        ((C43480 + C43481 * C43478 * C43484) * C43482) / C43474 -
        ((C43473 * C43488 + C43480 * ae) * ce) / C43474 +
        C43473 * ((-(C43488 * ce) / C43335) / C43316 - (ae * C43487) / C43474 -
                  (C43473 *
                   (C43478 * C43484 + C43481 * bs[4] * std::pow(C43471, 4)) *
                   C43482) /
                      C43474);
    const double C103 = -(C43473 * (C43473 * C43487 + C43480 * ce) +
                          C43475 * C43472 * C43479 + C43473 * C43480 * ce) /
                        C43335;
    const double C647 = -(C43549 * (C43473 * C43487 + C43480 * ce)) / C43335;
    const double C1237 = -(C43579 * (C43473 * C43487 + C43480 * ce)) / C43335;
    const double C2290 = -(C43487 * C43639 + C43475 * C43472 * C43479) / C43335;
    const double C2695 = -(C43579 * C43549 * C43487) / C43335;
    const double C4104 = -(C43487 * C43706 + C43475 * C43472 * C43479) / C43335;
    const double C6967 = (-2 * C43549 * C43487) / C43335 -
                         (C43549 * (C43500 * C43639 + C43487)) / C43335;
    const double C7511 = -(C43579 * (C43500 * C43639 + C43487)) / C43335;
    const double C14563 = (-2 * C43579 * C43487) / C43335 -
                          (C43579 * (C43500 * C43706 + C43487)) / C43335;
    const double C43498 = C43490 * ae;
    const double C43496 = C43473 * C43490;
    const double C43495 = C43490 * ce;
    const double C43502 = C43490 + C43499;
    const double C43643 = C43490 + C43642;
    const double C43710 = C43490 + C43709;
    const double C43882 = C43549 * C43490;
    const double C43970 = C43579 * C43490;
    const double C318 =
        (-((C43490 + C43639 * C43491 * C43492) * C43482 * C43481) / C43335) /
            C43316 -
        ((C43480 + C43639 * C43478 * C43484) * C43482) / C43474;
    const double C564 =
        (-((C43490 + C43706 * C43491 * C43492) * C43482 * C43481) / C43335) /
            C43316 -
        ((C43480 + C43706 * C43478 * C43484) * C43482) / C43474;
    const double C96 =
        2 * C43473 * C43480 + C43473 * (C43480 + C43490 * C43481);
    const double C640 = C43549 * (C43480 + C43490 * C43481);
    const double C1230 = C43579 * (C43480 + C43490 * C43481);
    const double C6963 =
        2 * C43549 * C43480 + C43549 * (C43480 + C43490 * C43639);
    const double C7507 = C43579 * (C43480 + C43490 * C43639);
    const double C14559 =
        2 * C43579 * C43480 + C43579 * (C43480 + C43490 * C43706);
    const double C159 =
        (-(ae * C43473 * C43555) / C43335) / C43316 -
        (C43484 * C43478 * C43556) / C43474 +
        C43473 * ((-(C43473 * C43492 * C43491 * C43556) / C43335) / C43316 -
                  (ae * C43555) / C43474);
    const double C154 = -(C43555 * C43481 + C43475 * C43472 * C43551) / C43335;
    const double C155 = (-2 * C43473 * C43555) / C43335 -
                        (C43473 * (C43561 * C43481 + C43555)) / C43335;
    const double C707 = -(C43549 * (C43561 * C43481 + C43555) +
                          (C43480 + C43490 * C43481) * ce) /
                        C43335;
    const double C708 =
        -(C43549 * C43473 * C43555 + C43473 * C43480 * ce) / C43335;
    const double C1295 = -(C43579 * C43473 * C43555) / C43335;
    const double C1296 = -(C43579 * (C43561 * C43481 + C43555)) / C43335;
    const double C2337 = -(C43549 * (C43549 * C43555 + C43480 * ce) +
                           C43475 * C43472 * C43551 + C43549 * C43480 * ce) /
                         C43335;
    const double C2751 = -(C43579 * (C43549 * C43555 + C43480 * ce)) / C43335;
    const double C4148 = -(C43555 * C43706 + C43475 * C43472 * C43551) / C43335;
    const double C14629 = (-2 * C43579 * C43555) / C43335 -
                          (C43579 * (C43561 * C43706 + C43555)) / C43335;
    const double C208 =
        (-(ae * C43473 * C43585) / C43335) / C43316 -
        (C43484 * C43478 * C43586) / C43474 +
        C43473 * ((-(C43473 * C43492 * C43491 * C43586) / C43335) / C43316 -
                  (ae * C43585) / C43474);
    const double C203 = -(C43585 * C43481 + C43475 * C43472 * C43581) / C43335;
    const double C204 = (-2 * C43473 * C43585) / C43335 -
                        (C43473 * (C43591 * C43481 + C43585)) / C43335;
    const double C765 = -(C43549 * (C43591 * C43481 + C43585)) / C43335;
    const double C766 = -(C43549 * C43473 * C43585) / C43335;
    const double C1355 = -(C43579 * (C43591 * C43481 + C43585) +
                           (C43480 + C43490 * C43481) * ce) /
                         C43335;
    const double C1356 =
        -(C43579 * C43473 * C43585 + C43473 * C43480 * ce) / C43335;
    const double C2381 = -(C43585 * C43639 + C43475 * C43472 * C43581) / C43335;
    const double C2807 =
        -(C43579 * C43549 * C43585 + C43549 * C43480 * ce) / C43335;
    const double C4195 = -(C43579 * (C43579 * C43585 + C43480 * ce) +
                           C43475 * C43472 * C43581 + C43579 * C43480 * ce) /
                         C43335;
    const double C7093 = (-2 * C43549 * C43585) / C43335 -
                         (C43549 * (C43591 * C43639 + C43585)) / C43335;
    const double C7669 = -(C43579 * (C43591 * C43639 + C43585) +
                           (C43480 + C43490 * C43639) * ce) /
                         C43335;
    const double C257 =
        (-(C43473 * C43614 * ce) / C43335) / C43316 -
        (C43484 * C43478 * C43615) / C43474 +
        C43473 * ((-(C43473 * C43492 * C43491 * C43615) / C43335) / C43316 -
                  (C43614 * ce) / C43474);
    const double C252 = (C43475 * C43472 * C43610 + C43614 * C43481) / C43316;
    const double C253 =
        (2 * C43473 * C43614 + C43473 * (C43614 + C43620 * C43481)) / C43316;
    const double C823 =
        (C43549 * C43473 * C43614 + C43473 * C43480 * ae) / C43316;
    const double C825 = (C43549 * (C43614 + C43620 * C43481) +
                         (C43480 + C43490 * C43481) * ae) /
                        C43316;
    const double C1413 = (C43579 * C43473 * C43614) / C43316;
    const double C1415 = (C43579 * (C43614 + C43620 * C43481)) / C43316;
    const double C2425 =
        (C43475 * C43472 * C43610 + C43549 * (C43549 * C43614 + C43480 * ae) +
         C43549 * C43480 * ae) /
        C43316;
    const double C2863 = (C43579 * (C43549 * C43614 + C43480 * ae)) / C43316;
    const double C4239 = (C43475 * C43472 * C43610 + C43614 * C43706) / C43316;
    const double C14749 =
        (2 * C43579 * C43614 + C43579 * (C43614 + C43620 * C43706)) / C43316;
    const double C444 =
        (-(C43473 * C43669 * ce) / C43335) / C43316 -
        (C43484 * C43478 * C43670) / C43474 +
        C43473 * ((-(C43473 * C43492 * C43491 * C43670) / C43335) / C43316 -
                  (C43669 * ce) / C43474);
    const double C439 = (C43475 * C43472 * C43665 + C43669 * C43481) / C43316;
    const double C440 =
        (2 * C43473 * C43669 + C43473 * (C43669 + C43675 * C43481)) / C43316;
    const double C1025 = (C43549 * C43473 * C43669) / C43316;
    const double C1027 = (C43549 * (C43669 + C43675 * C43481)) / C43316;
    const double C1615 =
        (C43579 * C43473 * C43669 + C43473 * C43480 * ae) / C43316;
    const double C1617 = (C43579 * (C43669 + C43675 * C43481) +
                          (C43480 + C43490 * C43481) * ae) /
                         C43316;
    const double C2551 = (C43475 * C43472 * C43665 + C43669 * C43639) / C43316;
    const double C3025 =
        (C43579 * C43549 * C43669 + C43549 * C43480 * ae) / C43316;
    const double C4365 =
        (C43475 * C43472 * C43665 + C43579 * (C43579 * C43669 + C43480 * ae) +
         C43579 * C43480 * ae) /
        C43316;
    const double C7311 =
        (2 * C43549 * C43669 + C43549 * (C43669 + C43675 * C43639)) / C43316;
    const double C7951 = (C43579 * (C43669 + C43675 * C43639) +
                          (C43480 + C43490 * C43639) * ae) /
                         C43316;
    const double C264 = C44497 * C256;
    const double C324 = C44497 * C317;
    const double C384 = C44497 * C377;
    const double C387 = C44497 * C378;
    const double C451 = C44512 * C443;
    const double C511 = C44512 * C504;
    const double C514 = C44512 * C505;
    const double C570 = C44512 * C563;
    const double C20551 = C44395 * C653;
    const double C20631 = C44395 * C713;
    const double C20694 = C44395 * C771;
    const double C5501 = C44512 * C1029;
    const double C5585 = C44512 * C1095;
    const double C5662 = C44512 * C1165;
    const double C25275 = C44395 * C1243;
    const double C25356 = C44395 * C1302;
    const double C25435 = C44395 * C1361;
    const double C11247 = C44497 * C1417;
    const double C11332 = C44497 * C1486;
    const double C11409 = C44497 * C1547;
    const double C43533 = C43473 * C43528;
    const double C43984 = C43528 * C43639;
    const double C44069 = C43549 * C43528;
    const double C44091 = C43528 * C43706;
    const double C43532 = C43473 * C43525;
    const double C43993 = C43525 * C43639;
    const double C44075 = C43549 * C43525;
    const double C44106 = C43525 * C43706;
    const double C43531 = C43511 + C43524;
    const double C43571 = C43569 * C43481;
    const double C43888 = C43473 * C43569;
    const double C44002 = C43549 * C43569;
    const double C44115 = C43569 * C43706;
    const double C43601 = C43599 * C43481;
    const double C43898 = C43473 * C43599;
    const double C44024 = C43599 * C43639;
    const double C44079 = C43549 * C43599;
    const double C44124 = C43579 * C43599;
    const double C43630 = C43628 * C43481;
    const double C43890 = C43473 * C43628;
    const double C44005 = C43549 * C43628;
    const double C44101 = C43628 * C43706;
    const double C43648 = C43511 + C43647;
    const double C43685 = C43683 * C43481;
    const double C43904 = C43473 * C43683;
    const double C44033 = C43683 * C43639;
    const double C44081 = C43549 * C43683;
    const double C44127 = C43579 * C43683;
    const double C43715 = C43511 + C43714;
    const double C43514 = C43509 / C43335;
    const double C43983 = C43509 / C43474;
    const double C9359 = (C43549 * C43488 + C43931 * C43706) / C43316;
    const double C43515 = C43510 / C43474;
    const double C9361 = -(C43941 * C43706 + C43549 * C43487) / C43335;
    const double C43527 = C43490 + C43520;
    const double C43529 = C43519 * ae;
    const double C43526 = C43519 * ce;
    const double C43889 = C43549 * C43519;
    const double C43976 = C43579 * C43519;
    const double C44010 = C43490 + C44004;
    const double C44012 = C44003 * ae;
    const double C44009 = C44003 * ce;
    const double C44080 = C43579 * C44003;
    const double C44132 = C43490 + C44126;
    const double C44134 = C44125 * ae;
    const double C44131 = C44125 * ce;
    const double C43568 = C43565 / C43474;
    const double C4149 = -(C43563 * C43706 + C43473 * C43555) / C43335;
    const double C43598 = C43595 / C43474;
    const double C2382 = -(C43593 * C43639 + C43473 * C43585) / C43335;
    const double C43627 = C43624 / C43474;
    const double C44000 = C43624 / C43335;
    const double C4240 = (C43473 * C43614 + C43622 * C43706) / C43316;
    const double C43682 = C43679 / C43474;
    const double C44122 = C43679 / C43335;
    const double C2552 = (C43473 * C43669 + C43677 * C43639) / C43316;
    const double C160 =
        2 * ((-(C43473 * C43560) / C43335) / C43316 - (ae * C43555) / C43474) -
        (ae * (C43561 * C43481 + C43555)) / C43474 +
        C43473 *
            ((-(ae * C43473 * C43561) / C43335) / C43316 - C43560 / C43474 +
             C43473 *
                 ((-(C43473 * C43513 * C43512 * C43556) / C43335) / C43316 -
                  (ae * C43561) / C43474));
    const double C712 = C43549 * ((-(C43473 * C43560) / C43335) / C43316 -
                                  (ae * C43555) / C43474) -
                        ((C43473 * C43488 + C43480 * ae) * ce) / C43474;
    const double C1299 = C43579 * ((-(C43473 * C43560) / C43335) / C43316 -
                                   (ae * C43555) / C43474);
    const double C2340 = (-(C43549 * C43488 * ce) / C43335) / C43316 -
                         (C43484 * C43478 * C43556) / C43474 +
                         C43549 * ((-(C43549 * C43560) / C43335) / C43316 -
                                   (C43488 * ce) / C43474);
    const double C2754 = C43579 * ((-(C43549 * C43560) / C43335) / C43316 -
                                   (C43488 * ce) / C43474);
    const double C4151 = (-(C43560 * C43706) / C43335) / C43316 -
                         (C43484 * C43478 * C43556) / C43474;
    const double C43570 = C43473 * C43567;
    const double C43982 = C43549 * C43567;
    const double C7035 =
        2 * ((-(C43549 * C43560) / C43335) / C43316 - (C43488 * ce) / C43474) -
        ((C43488 + C43501 * C43639) * ce) / C43474 +
        C43549 *
            ((-(C43549 * C43501 * ce) / C43335) / C43316 - C43560 / C43474 +
             C43549 *
                 ((-(C43549 * C43567) / C43335) / C43316 - C43509 / C43474));
    const double C7595 =
        C43579 *
        ((-(C43549 * C43501 * ce) / C43335) / C43316 - C43560 / C43474 +
         C43549 * ((-(C43549 * C43567) / C43335) / C43316 - C43509 / C43474));
    const double C9417 =
        (-(C43549 * C43560) / C43335) / C43316 - (C43488 * ce) / C43474 +
        ((-(C43549 * C43567) / C43335) / C43316 - C43509 / C43474) * C43706;
    const double C14631 =
        (-2 * C43579 * C43560) / C43474 +
        C43579 * ((-(C43567 * C43706) / C43335) / C43316 - C43560 / C43474);
    const double C43002 =
        3 * ((-(C43567 * C43706) / C43335) / C43316 - C43560 / C43474) +
        C43579 * ((-2 * C43579 * C43567) / C43474 +
                  C43579 * ((-(std::pow(C43471, 6) * bs[6] * C43556 * C43706) /
                             C43335) /
                                C43316 -
                            C43567 / C43474));
    const double C258 =
        2 * ((-(C43473 * C43619) / C43335) / C43316 - (C43614 * ce) / C43474) -
        ((C43614 + C43620 * C43481) * ce) / C43474 +
        C43473 *
            ((-(C43473 * C43620 * ce) / C43335) / C43316 - C43619 / C43474 +
             C43473 *
                 ((-(C43473 * C43513 * C43512 * C43615) / C43335) / C43316 -
                  (C43620 * ce) / C43474));
    const double C828 = C43549 * ((-(C43473 * C43619) / C43335) / C43316 -
                                  (C43614 * ce) / C43474) -
                        (ae * (C43473 * C43487 + C43480 * ce)) / C43474;
    const double C1418 = C43579 * ((-(C43473 * C43619) / C43335) / C43316 -
                                   (C43614 * ce) / C43474);
    const double C2428 = (-(ae * C43549 * C43487) / C43335) / C43316 -
                         (C43484 * C43478 * C43615) / C43474 +
                         C43549 * ((-(C43549 * C43619) / C43335) / C43316 -
                                   (ae * C43487) / C43474);
    const double C2866 = (-(C43549 * C43579 * C43619) / C43335) / C43316 -
                         (ae * C43579 * C43487) / C43474;
    const double C4242 = (-(C43619 * C43706) / C43335) / C43316 -
                         (C43484 * C43478 * C43615) / C43474;
    const double C43629 = C43473 * C43626;
    const double C43992 = C43549 * C43626;
    const double C44044 = C43579 * C43626;
    const double C7747 =
        (-(ae * C43579 * C43549 * C43500) / C43335) / C43316 -
        (C43579 * C43619) / C43474 +
        C43549 * ((-(C43549 * C43579 * C43626) / C43335) / C43316 -
                  (ae * C43579 * C43500) / C43474);
    const double C9525 =
        C43549 * ((-(C43626 * C43706) / C43335) / C43316 - C43619 / C43474) -
        (ae * (C43500 * C43706 + C43487)) / C43474;
    const double C14751 =
        (-2 * C43579 * C43619) / C43474 +
        C43579 * ((-(C43626 * C43706) / C43335) / C43316 - C43619 / C43474);
    const double C23920 =
        (-(C43626 * C43706) / C43335) / C43316 - C43619 / C43474 -
        (ae * (C43549 * C43525 * C43706 + C43941)) / C43474 +
        C43549 * (C43549 * ((-(std::pow(C43471, 6) * bs[6] * C43615 * C43706) /
                             C43335) /
                                C43316 -
                            C43626 / C43474) -
                  (ae * (C43525 * C43706 + C43500)) / C43474);
    const double C209 =
        2 * ((-(C43473 * C43590) / C43335) / C43316 - (ae * C43585) / C43474) -
        (ae * (C43591 * C43481 + C43585)) / C43474 +
        C43473 *
            ((-(ae * C43473 * C43591) / C43335) / C43316 - C43590 / C43474 +
             C43473 *
                 ((-(C43473 * C43513 * C43512 * C43586) / C43335) / C43316 -
                  (ae * C43591) / C43474));
    const double C770 = C43549 * ((-(C43473 * C43590) / C43335) / C43316 -
                                  (ae * C43585) / C43474);
    const double C1360 = C43579 * ((-(C43473 * C43590) / C43335) / C43316 -
                                   (ae * C43585) / C43474) -
                         ((C43473 * C43488 + C43480 * ae) * ce) / C43474;
    const double C2384 = (-(C43590 * C43639) / C43335) / C43316 -
                         (C43484 * C43478 * C43586) / C43474;
    const double C2810 = (-(C43579 * C43549 * C43590) / C43335) / C43316 -
                         (C43549 * C43488 * ce) / C43474;
    const double C4198 = (-(C43579 * C43488 * ce) / C43335) / C43316 -
                         (C43484 * C43478 * C43586) / C43474 +
                         C43579 * ((-(C43579 * C43590) / C43335) / C43316 -
                                   (C43488 * ce) / C43474);
    const double C43600 = C43473 * C43597;
    const double C44068 = C43549 * C43597;
    const double C44090 = C43579 * C43597;
    const double C7095 =
        (-2 * C43549 * C43590) / C43474 +
        C43549 * ((-(C43597 * C43639) / C43335) / C43316 - C43590 / C43474);
    const double C7671 =
        C43579 * ((-(C43597 * C43639) / C43335) / C43316 - C43590 / C43474) -
        ((C43488 + C43501 * C43639) * ce) / C43474;
    const double C9471 =
        (-(C43579 * C43931 * ce) / C43335) / C43316 -
        (C43549 * C43590) / C43474 +
        C43579 * ((-(C43579 * C43549 * C43597) / C43335) / C43316 -
                  (C43931 * ce) / C43474);
    const double C14691 =
        2 * ((-(C43579 * C43590) / C43335) / C43316 - (C43488 * ce) / C43474) -
        ((C43488 + C43501 * C43706) * ce) / C43474 +
        C43579 *
            ((-(C43579 * C43501 * ce) / C43335) / C43316 - C43590 / C43474 +
             C43579 *
                 ((-(C43579 * C43597) / C43335) / C43316 - C43509 / C43474));
    const double C22064 =
        3 * ((-(C43597 * C43639) / C43335) / C43316 - C43590 / C43474) +
        C43549 * ((-2 * C43549 * C43597) / C43474 +
                  C43549 * ((-(std::pow(C43471, 6) * bs[6] * C43586 * C43639) /
                             C43335) /
                                C43316 -
                            C43597 / C43474));
    const double C379 =
        (-2 * C43473 * C43658) / C43474 +
        C43473 * ((-(C43513 * C43512 * C43655 * C43481) / C43335) / C43316 -
                  C43658 / C43474);
    const double C962 = (-(C43549 * C43473 * C43658) / C43335) / C43316 -
                        (ae * C43473 * C43585) / C43474;
    const double C1548 = (-(C43579 * C43473 * C43658) / C43335) / C43316 -
                         (C43473 * C43614 * ce) / C43474;
    const double C2510 = (-(ae * C43549 * C43585) / C43335) / C43316 -
                         (C43484 * C43478 * C43655) / C43474 +
                         C43549 * ((-(C43549 * C43658) / C43335) / C43316 -
                                   (ae * C43585) / C43474);
    const double C2972 = C43549 * ((-(C43579 * C43658) / C43335) / C43316 -
                                   (C43614 * ce) / C43474) -
                         (ae * (C43579 * C43585 + C43480 * ce)) / C43474;
    const double C4324 = (-(C43579 * C43614 * ce) / C43335) / C43316 -
                         (C43484 * C43478 * C43655) / C43474 +
                         C43579 * ((-(C43579 * C43658) / C43335) / C43316 -
                                   (C43614 * ce) / C43474);
    const double C43897 = C43473 * C43661;
    const double C44023 = C43549 * C43661;
    const double C44048 = C43579 * C43661;
    const double C380 =
        3 * ((-(C43661 * C43481) / C43335) / C43316 - C43658 / C43474) +
        C43473 * ((-2 * C43473 * C43661) / C43474 +
                  C43473 * ((-(std::pow(C43471, 6) * bs[6] * C43655 * C43481) /
                             C43335) /
                                C43316 -
                            C43661 / C43474));
    const double C961 =
        C43549 * ((-(C43661 * C43481) / C43335) / C43316 - C43658 / C43474) -
        (ae * (C43591 * C43481 + C43585)) / C43474;
    const double C1549 =
        C43579 * ((-(C43661 * C43481) / C43335) / C43316 - C43658 / C43474) -
        ((C43614 + C43620 * C43481) * ce) / C43474;
    const double C2511 =
        (-(ae * C43549 * C43593) / C43335) / C43316 -
        (C43473 * C43658) / C43474 +
        C43549 * ((-(C43549 * C43473 * C43661) / C43335) / C43316 -
                  (ae * C43593) / C43474);
    const double C4325 =
        (-(C43579 * C43622 * ce) / C43335) / C43316 -
        (C43473 * C43658) / C43474 +
        C43579 * ((-(C43579 * C43473 * C43661) / C43335) / C43316 -
                  (C43622 * ce) / C43474);
    const double C445 =
        2 * ((-(C43473 * C43674) / C43335) / C43316 - (C43669 * ce) / C43474) -
        ((C43669 + C43675 * C43481) * ce) / C43474 +
        C43473 *
            ((-(C43473 * C43675 * ce) / C43335) / C43316 - C43674 / C43474 +
             C43473 *
                 ((-(C43473 * C43513 * C43512 * C43670) / C43335) / C43316 -
                  (C43675 * ce) / C43474));
    const double C1030 = C43549 * ((-(C43473 * C43674) / C43335) / C43316 -
                                   (C43669 * ce) / C43474);
    const double C1620 = C43579 * ((-(C43473 * C43674) / C43335) / C43316 -
                                   (C43669 * ce) / C43474) -
                         (ae * (C43473 * C43487 + C43480 * ce)) / C43474;
    const double C2554 = (-(C43674 * C43639) / C43335) / C43316 -
                         (C43484 * C43478 * C43670) / C43474;
    const double C3028 = (-(C43579 * C43549 * C43674) / C43335) / C43316 -
                         (ae * C43549 * C43487) / C43474;
    const double C4368 = (-(ae * C43579 * C43487) / C43335) / C43316 -
                         (C43484 * C43478 * C43670) / C43474 +
                         C43579 * ((-(C43579 * C43674) / C43335) / C43316 -
                                   (ae * C43487) / C43474);
    const double C43684 = C43473 * C43681;
    const double C44074 = C43549 * C43681;
    const double C44105 = C43579 * C43681;
    const double C7313 =
        (-2 * C43549 * C43674) / C43474 +
        C43549 * ((-(C43681 * C43639) / C43335) / C43316 - C43674 / C43474);
    const double C7953 =
        C43579 * ((-(C43681 * C43639) / C43335) / C43316 - C43674 / C43474) -
        (ae * (C43500 * C43639 + C43487)) / C43474;
    const double C9683 =
        (-(ae * C43579 * C43941) / C43335) / C43316 -
        (C43549 * C43674) / C43474 +
        C43579 * ((-(C43579 * C43549 * C43681) / C43335) / C43316 -
                  (ae * C43941) / C43474);
    const double C22228 =
        3 * ((-(C43681 * C43639) / C43335) / C43316 - C43674 / C43474) +
        C43549 * ((-2 * C43549 * C43681) / C43474 +
                  C43549 * ((-(std::pow(C43471, 6) * bs[6] * C43670 * C43639) /
                             C43335) /
                                C43316 -
                            C43681 / C43474));
    const double C506 =
        (-2 * C43473 * C43699) / C43474 +
        C43473 * ((-(C43513 * C43512 * C43696 * C43481) / C43335) / C43316 -
                  C43699 / C43474);
    const double C1096 = (-(C43549 * C43473 * C43699) / C43335) / C43316 -
                         (C43473 * C43669 * ce) / C43474;
    const double C1685 = (-(C43579 * C43473 * C43699) / C43335) / C43316 -
                         (ae * C43473 * C43555) / C43474;
    const double C2595 = (-(C43549 * C43669 * ce) / C43335) / C43316 -
                         (C43484 * C43478 * C43696) / C43474 +
                         C43549 * ((-(C43549 * C43699) / C43335) / C43316 -
                                   (C43669 * ce) / C43474);
    const double C3081 = C43579 * ((-(C43549 * C43699) / C43335) / C43316 -
                                   (C43669 * ce) / C43474) -
                         (ae * (C43549 * C43555 + C43480 * ce)) / C43474;
    const double C4409 = (-(ae * C43579 * C43555) / C43335) / C43316 -
                         (C43484 * C43478 * C43696) / C43474 +
                         C43579 * ((-(C43579 * C43699) / C43335) / C43316 -
                                   (ae * C43555) / C43474);
    const double C43903 = C43473 * C43702;
    const double C44032 = C43549 * C43702;
    const double C44114 = C43579 * C43702;
    const double C507 =
        3 * ((-(C43702 * C43481) / C43335) / C43316 - C43699 / C43474) +
        C43473 * ((-2 * C43473 * C43702) / C43474 +
                  C43473 * ((-(std::pow(C43471, 6) * bs[6] * C43696 * C43481) /
                             C43335) /
                                C43316 -
                            C43702 / C43474));
    const double C1097 =
        C43549 * ((-(C43702 * C43481) / C43335) / C43316 - C43699 / C43474) -
        ((C43669 + C43675 * C43481) * ce) / C43474;
    const double C1686 =
        C43579 * ((-(C43702 * C43481) / C43335) / C43316 - C43699 / C43474) -
        (ae * (C43561 * C43481 + C43555)) / C43474;
    const double C2596 =
        (-(C43549 * C43677 * ce) / C43335) / C43316 -
        (C43473 * C43699) / C43474 +
        C43549 * ((-(C43549 * C43473 * C43702) / C43335) / C43316 -
                  (C43677 * ce) / C43474);
    const double C4410 =
        (-(ae * C43579 * C43563) / C43335) / C43316 -
        (C43473 * C43699) / C43474 +
        C43579 * ((-(C43579 * C43473 * C43702) / C43335) / C43316 -
                  (ae * C43563) / C43474);
    const double C89 = ((0 * ae) / C43316 - C43321 / C43318) / (2 * C43316) -
                       (0 * be) / C43316;
    const double C4507 =
        (-C43315 / C43316) / (2 * C43316) -
        ((C44395 - (C43314 * 2 * C43321) / C43316) * be) / C43316;
    const double C4508 =
        (-(2 * C43321) / C43316) / (2 * C43316) - (0 * be) / C43316;
    const double C15087 =
        ((C44395 - (C43314 * 2 * C43321) / C43316) * ae) / C43316 -
        C43315 / C43320;
    const double C15088 = (0 * ae) / C43316 - C43321 / C43318;
    const double C20189 = -(2 * C43321) / C43316;
    const double C88 =
        (((C44395 - (C43314 * 2 * C43321) / C43316) * ae) / C43316 -
         C43315 / C43320) /
            (2 * C43316) -
        ((C43314 * ((0 * ae) / C43316 - C43321 / C43318) + C44593) * be) /
            C43316;
    const double C79 = C44593 / C44400;
    const double C77 = C44395 / C44400 - (C44592 * C44579) / C43318;
    const double C78 = C44592 / C43320 - (C44593 * C44579) / C43316;
    const double C15083 = C44592 / C43316;
    const double C5035 = C4503 * C653;
    const double C5031 = C4503 * C649;
    const double C5123 = C4503 * C713;
    const double C5199 = C4503 * C771;
    const double C11003 = C4503 * C1243;
    const double C10999 = C4503 * C1239;
    const double C11089 = C4503 * C1302;
    const double C11169 = C4503 * C1361;
    const double C92 = ((0 * ce) / C43335 - C43340 / C43337) / (2 * C43335) -
                       (0 * de) / C43335;
    const double C637 =
        (-C43334 / C43335) / (2 * C43335) -
        ((C44407 - (C43333 * 2 * C43340) / C43335) * de) / C43335;
    const double C638 =
        (-(2 * C43340) / C43335) / (2 * C43335) - (0 * de) / C43335;
    const double C1821 =
        ((C44407 - (C43333 * 2 * C43340) / C43335) * ce) / C43335 -
        C43334 / C43339;
    const double C1822 = (0 * ce) / C43335 - C43340 / C43337;
    const double C2283 = -(2 * C43340) / C43335;
    const double C91 =
        (((C44407 - (C43333 * 2 * C43340) / C43335) * ce) / C43335 -
         C43334 / C43339) /
            (2 * C43335) -
        ((C43333 * ((0 * ce) / C43335 - C43340 / C43337) + C44595) * de) /
            C43335;
    const double C82 = C44595 / C44412;
    const double C80 = C44407 / C44412 - (C44594 * C44582) / C43337;
    const double C81 = C44594 / C43339 - (C44595 * C44582) / C43335;
    const double C1817 = C44594 / C43335;
    const double C2336 = ((0 * ce) / C43335 - C43388 / C43337) / (2 * C43335) -
                         (0 * de) / C43335;
    const double C2335 =
        (((C44449 - (C43361 * 2 * C43388) / C43335) * ce) / C43335 -
         C43386 / C43339) /
            (2 * C43335) -
        ((C43361 * ((0 * ce) / C43335 - C43388 / C43337) + C44597) * de) /
            C43335;
    const double C2282 = C44597 / C44412;
    const double C635 = C44596 / C43335;
    const double C2280 = C44449 / C44412 - (C44596 * C44586) / C43337;
    const double C2281 = C44596 / C43339 - (C44597 * C44586) / C43335;
    const double C4194 = ((0 * ce) / C43335 - C43404 / C43337) / (2 * C43335) -
                         (0 * de) / C43335;
    const double C4193 =
        (((C44464 - (C43368 * 2 * C43404) / C43335) * ce) / C43335 -
         C43402 / C43339) /
            (2 * C43335) -
        ((C43368 * ((0 * ce) / C43335 - C43404 / C43337) + C44599) * de) /
            C43335;
    const double C4097 = C44599 / C44412;
    const double C1227 = C44598 / C43335;
    const double C4095 = C44464 / C44412 - (C44598 * C44587) / C43337;
    const double C4096 = C44598 / C43339 - (C44599 * C44587) / C43335;
    const double C20306 = ((0 * ae) / C43316 - C43444 / C43318) / (2 * C43316) -
                          (0 * be) / C43316;
    const double C265 = C249 * C95;
    const double C263 = C249 * C102;
    const double C261 = C249 * C94;
    const double C323 = C249 * C153;
    const double C383 = C249 * C202;
    const double C832 = C249 * C639;
    const double C1422 = C249 * C1229;
    const double C11246 = C249 * C1238;
    const double C11244 = C249 * C1232;
    const double C11331 = C249 * C1298;
    const double C11408 = C249 * C1357;
    const double C12956 = C249 * C2689;
    const double C14758 = C249 * C4098;
    const double C4670 = C4659 * C95;
    const double C4668 = C4659 * C102;
    const double C4664 = C4659 * C94;
    const double C4736 = C4659 * C153;
    const double C4798 = C4659 * C202;
    const double C5276 = C4659 * C639;
    const double C5936 = C4659 * C1229;
    const double C35740 = C4659 * C1238;
    const double C35736 = C4659 * C1232;
    const double C35814 = C4659 * C1298;
    const double C35888 = C4659 * C1357;
    const double C37422 = C4659 * C2689;
    const double C39194 = C4659 * C4098;
    const double C4662 = C4660 * C639;
    const double C35738 = C4660 * C2689;
    const double C15250 = C15239 * C95;
    const double C15248 = C15239 * C102;
    const double C15244 = C15239 * C94;
    const double C15316 = C15239 * C153;
    const double C15378 = C15239 * C202;
    const double C15852 = C15239 * C639;
    const double C16470 = C15239 * C1229;
    const double C25510 = C15239 * C1238;
    const double C25506 = C15239 * C1232;
    const double C25584 = C15239 * C1298;
    const double C25658 = C15239 * C1357;
    const double C27228 = C15239 * C2689;
    const double C29044 = C15239 * C4098;
    const double C15242 = C15240 * C639;
    const double C25508 = C15240 * C2689;
    const double C20305 =
        (((C44497 - (C43417 * 2 * C43444) / C43316) * ae) / C43316 -
         C43442 / C43320) /
            (2 * C43316) -
        ((C43417 * ((0 * ae) / C43316 - C43444 / C43318) + C44601) * be) /
            C43316;
    const double C20188 = C44601 / C44400;
    const double C4505 = C44600 / C43316;
    const double C20186 = C44497 / C44400 - (C44600 * C44590) / C43318;
    const double C20187 = C44600 / C43320 - (C44601 * C44590) / C43316;
    const double C15249 = C15085 * C256;
    const double C15245 = C15085 * C251;
    const double C15317 = C15085 * C317;
    const double C15385 = C15085 * C378;
    const double C15379 = C15085 * C377;
    const double C25511 = C15085 * C1417;
    const double C25507 = C15085 * C1414;
    const double C25585 = C15085 * C1486;
    const double C25659 = C15085 * C1547;
    const double C39732 = ((0 * ae) / C43316 - C43460 / C43318) / (2 * C43316) -
                          (0 * be) / C43316;
    const double C452 = C436 * C95;
    const double C450 = C436 * C102;
    const double C448 = C436 * C94;
    const double C510 = C436 * C153;
    const double C569 = C436 * C202;
    const double C1034 = C436 * C639;
    const double C1624 = C436 * C1229;
    const double C5500 = C436 * C648;
    const double C5498 = C436 * C642;
    const double C5584 = C436 * C709;
    const double C5661 = C436 * C767;
    const double C7324 = C436 * C2284;
    const double C7960 = C436 * C2689;
    const double C10156 = C10145 * C95;
    const double C10154 = C10145 * C102;
    const double C10150 = C10145 * C94;
    const double C10222 = C10145 * C153;
    const double C10284 = C10145 * C202;
    const double C10776 = C10145 * C639;
    const double C11484 = C10145 * C1229;
    const double C25054 = C10145 * C648;
    const double C25050 = C10145 * C642;
    const double C25130 = C10145 * C709;
    const double C25200 = C10145 * C767;
    const double C26816 = C10145 * C2284;
    const double C27456 = C10145 * C2689;
    const double C10148 = C10146 * C1229;
    const double C25052 = C10146 * C2689;
    const double C29680 = C29669 * C95;
    const double C29678 = C29669 * C102;
    const double C29674 = C29669 * C94;
    const double C29746 = C29669 * C153;
    const double C29808 = C29669 * C202;
    const double C30282 = C29669 * C639;
    const double C30948 = C29669 * C1229;
    const double C35320 = C29669 * C648;
    const double C35316 = C29669 * C642;
    const double C35396 = C29669 * C709;
    const double C35466 = C29669 * C767;
    const double C37040 = C29669 * C2284;
    const double C37650 = C29669 * C2689;
    const double C29672 = C29670 * C1229;
    const double C35318 = C29670 * C2689;
    const double C39731 =
        (((C44512 - (C43424 * 2 * C43460) / C43316) * ae) / C43316 -
         C43458 / C43320) /
            (2 * C43316) -
        ((C43424 * ((0 * ae) / C43316 - C43460 / C43318) + C44603) * be) /
            C43316;
    const double C39501 = C44603 / C44400;
    const double C9839 = C44602 / C43316;
    const double C39499 = C44512 / C44400 - (C44602 * C44591) / C43318;
    const double C39500 = C44602 / C43320 - (C44603 * C44591) / C43316;
    const double C29679 = C29367 * C443;
    const double C29675 = C29367 * C438;
    const double C29753 = C29367 * C505;
    const double C29747 = C29367 * C504;
    const double C29809 = C29367 * C563;
    const double C35321 = C29367 * C1029;
    const double C35317 = C29367 * C1026;
    const double C35397 = C29367 * C1095;
    const double C35467 = C29367 * C1165;
    const double C5041 = C4503 * C643;
    const double C5033 = C44593 * C643;
    const double C15609 = C44593 * C643;
    const double C20553 = C44395 * C643;
    const double C11009 = C4503 * C1233;
    const double C11001 = C44593 * C1233;
    const double C25277 = C44395 * C1233;
    const double C30507 = C44593 * C1233;
    const double C6979 = C4503 * C2287;
    const double C20557 = C44395 * C2287;
    const double C7523 = C4503 * C2692;
    const double C22389 = C44395 * C2692;
    const double C14575 = C4503 * C4101;
    const double C28867 = C44395 * C4101;
    const double C21977 = C44395 * C6965;
    const double C22385 = C44395 * C7509;
    const double C42958 = C44395 * C14561;
    const double C267 = C249 * C103;
    const double C454 = C436 * C103;
    const double C4674 = C4659 * C103;
    const double C10160 = C10145 * C103;
    const double C15254 = C15239 * C103;
    const double C29684 = C29669 * C103;
    const double C834 = C249 * C647;
    const double C1036 = C436 * C647;
    const double C4666 = C4660 * C647;
    const double C5280 = C4659 * C647;
    const double C10780 = C10145 * C647;
    const double C15246 = C15240 * C647;
    const double C15856 = C15239 * C647;
    const double C30286 = C29669 * C647;
    const double C1424 = C249 * C1237;
    const double C1626 = C436 * C1237;
    const double C5940 = C4659 * C1237;
    const double C10152 = C10146 * C1237;
    const double C11488 = C10145 * C1237;
    const double C16474 = C15239 * C1237;
    const double C29676 = C29670 * C1237;
    const double C30952 = C29669 * C1237;
    const double C7322 = C436 * C2290;
    const double C26812 = C10145 * C2290;
    const double C37036 = C29669 * C2290;
    const double C7958 = C436 * C2695;
    const double C12958 = C249 * C2695;
    const double C25056 = C10146 * C2695;
    const double C25512 = C15240 * C2695;
    const double C27232 = C15239 * C2695;
    const double C27452 = C10145 * C2695;
    const double C35322 = C29670 * C2695;
    const double C35742 = C4660 * C2695;
    const double C37426 = C4659 * C2695;
    const double C37646 = C29669 * C2695;
    const double C14756 = C249 * C4104;
    const double C29040 = C15239 * C4104;
    const double C39190 = C4659 * C4104;
    const double C22231 = C436 * C6967;
    const double C22728 = C436 * C7511;
    const double C26810 = C10146 * C7511;
    const double C27234 = C15240 * C7511;
    const double C37034 = C29670 * C7511;
    const double C37428 = C4660 * C7511;
    const double C43095 = C249 * C14563;
    const double C43507 = C43504 + C43498;
    const double C43885 = C43883 + C43498;
    const double C43973 = C43971 + C43498;
    const double C2973 =
        C43549 * ((-(C43579 * C43473 * C43661) / C43335) / C43316 -
                  (C43622 * ce) / C43474) -
        (ae * (C43579 * C43593 + C43496 * ce)) / C43474;
    const double C3082 =
        C43579 * ((-(C43549 * C43473 * C43702) / C43335) / C43316 -
                  (C43677 * ce) / C43474) -
        (ae * (C43549 * C43563 + C43496 * ce)) / C43474;
    const double C2338 = -(C43549 * (C43549 * C43563 + C43496 * ce) +
                           C43473 * C43555 + C43549 * C43496 * ce) /
                         C43335;
    const double C2426 =
        (C43473 * C43614 + C43549 * (C43549 * C43622 + C43496 * ae) +
         C43549 * C43496 * ae) /
        C43316;
    const double C2752 = -(C43579 * (C43549 * C43563 + C43496 * ce)) / C43335;
    const double C2808 =
        -(C43579 * C43549 * C43593 + C43549 * C43496 * ce) / C43335;
    const double C2864 = (C43579 * (C43549 * C43622 + C43496 * ae)) / C43316;
    const double C3026 =
        (C43579 * C43549 * C43677 + C43549 * C43496 * ae) / C43316;
    const double C4196 = -(C43579 * (C43579 * C43593 + C43496 * ce) +
                           C43473 * C43585 + C43579 * C43496 * ce) /
                         C43335;
    const double C4366 =
        (C43473 * C43669 + C43579 * (C43579 * C43677 + C43496 * ae) +
         C43579 * C43496 * ae) /
        C43316;
    const double C2285 = C43473 * C43480 + C43496 * C43639;
    const double C2690 = C43579 * C43549 * C43496;
    const double C4099 = C43473 * C43480 + C43496 * C43706;
    const double C6964 =
        2 * C43549 * C43496 + C43549 * (C43496 + C43519 * C43639);
    const double C7508 = C43579 * (C43496 + C43519 * C43639);
    const double C14560 =
        2 * C43579 * C43496 + C43579 * (C43496 + C43519 * C43706);
    const double C43506 = C43503 + C43495;
    const double C43884 = C43881 + C43495;
    const double C43972 = C43969 + C43495;
    const double C43505 = C43502 * C43482;
    const double C43644 = C43643 * C43482;
    const double C43711 = C43710 * C43482;
    const double C9469 = -(C43579 * (C43579 * C43947 + C43882 * ce) +
                           C43549 * C43585 + C43579 * C43882 * ce) /
                         C43335;
    const double C9681 =
        (C43549 * C43669 + C43579 * (C43579 * C43948 + C43882 * ae) +
         C43579 * C43882 * ae) /
        C43316;
    const double C9357 = C43549 * C43480 + C43882 * C43706;
    const double C28859 =
        2 * C43579 * C43882 + C43579 * (C43882 + C44003 * C43706);
    const double C327 = C44497 * C318;
    const double C15323 = C15085 * C318;
    const double C573 = C44512 * C564;
    const double C29815 = C29367 * C564;
    const double C269 = C249 * C96;
    const double C456 = C436 * C96;
    const double C836 = C249 * C640;
    const double C1038 = C436 * C640;
    const double C4672 = C4660 * C640;
    const double C15252 = C15240 * C640;
    const double C1426 = C249 * C1230;
    const double C1628 = C436 * C1230;
    const double C10158 = C10146 * C1230;
    const double C29682 = C29670 * C1230;
    const double C22233 = C436 * C6963;
    const double C22730 = C436 * C7507;
    const double C26814 = C10146 * C7507;
    const double C27230 = C15240 * C7507;
    const double C37038 = C29670 * C7507;
    const double C37424 = C4660 * C7507;
    const double C43097 = C249 * C14559;
    const double C326 = C249 * C154;
    const double C513 = C436 * C154;
    const double C4742 = C4659 * C154;
    const double C10228 = C10145 * C154;
    const double C15322 = C15239 * C154;
    const double C29752 = C29669 * C154;
    const double C328 = C249 * C155;
    const double C515 = C436 * C155;
    const double C906 = C249 * C707;
    const double C1108 = C436 * C707;
    const double C4740 = C4660 * C707;
    const double C15320 = C15240 * C707;
    const double C901 = C249 * C708;
    const double C1103 = C436 * C708;
    const double C4738 = C4660 * C708;
    const double C5356 = C4659 * C708;
    const double C10856 = C10145 * C708;
    const double C15318 = C15240 * C708;
    const double C15932 = C15239 * C708;
    const double C30362 = C29669 * C708;
    const double C1489 = C249 * C1295;
    const double C1691 = C436 * C1295;
    const double C6014 = C4659 * C1295;
    const double C10224 = C10146 * C1295;
    const double C11562 = C10145 * C1295;
    const double C16548 = C15239 * C1295;
    const double C29748 = C29670 * C1295;
    const double C31026 = C29669 * C1295;
    const double C1492 = C249 * C1296;
    const double C1694 = C436 * C1296;
    const double C10226 = C10146 * C1296;
    const double C29750 = C29670 * C1296;
    const double C7382 = C436 * C2337;
    const double C26872 = C10145 * C2337;
    const double C37096 = C29669 * C2337;
    const double C8034 = C436 * C2751;
    const double C13035 = C249 * C2751;
    const double C25128 = C10146 * C2751;
    const double C25586 = C15240 * C2751;
    const double C27308 = C15239 * C2751;
    const double C27528 = C10145 * C2751;
    const double C35394 = C29670 * C2751;
    const double C35816 = C4660 * C2751;
    const double C37502 = C4659 * C2751;
    const double C37722 = C29669 * C2751;
    const double C14816 = C249 * C4148;
    const double C29103 = C15239 * C4148;
    const double C39252 = C4659 * C4148;
    const double C43143 = C249 * C14629;
    const double C386 = C249 * C203;
    const double C572 = C436 * C203;
    const double C4804 = C4659 * C203;
    const double C10290 = C10145 * C203;
    const double C15384 = C15239 * C203;
    const double C29814 = C29669 * C203;
    const double C388 = C249 * C204;
    const double C574 = C436 * C204;
    const double C966 = C249 * C765;
    const double C1168 = C436 * C765;
    const double C4802 = C4660 * C765;
    const double C15382 = C15240 * C765;
    const double C969 = C249 * C766;
    const double C1171 = C436 * C766;
    const double C4800 = C4660 * C766;
    const double C5428 = C4659 * C766;
    const double C10928 = C10145 * C766;
    const double C15380 = C15240 * C766;
    const double C16004 = C15239 * C766;
    const double C30434 = C29669 * C766;
    const double C1560 = C249 * C1355;
    const double C1762 = C436 * C1355;
    const double C10288 = C10146 * C1355;
    const double C29812 = C29670 * C1355;
    const double C1555 = C249 * C1356;
    const double C1757 = C436 * C1356;
    const double C6088 = C4659 * C1356;
    const double C10286 = C10146 * C1356;
    const double C11636 = C10145 * C1356;
    const double C16622 = C15239 * C1356;
    const double C29810 = C29670 * C1356;
    const double C31100 = C29669 * C1356;
    const double C7437 = C436 * C2381;
    const double C26930 = C10145 * C2381;
    const double C37154 = C29669 * C2381;
    const double C8108 = C436 * C2807;
    const double C13105 = C249 * C2807;
    const double C25202 = C10146 * C2807;
    const double C25656 = C15240 * C2807;
    const double C27378 = C15239 * C2807;
    const double C27602 = C10145 * C2807;
    const double C35468 = C29670 * C2807;
    const double C35886 = C4660 * C2807;
    const double C37572 = C4659 * C2807;
    const double C37796 = C29669 * C2807;
    const double C14873 = C249 * C4195;
    const double C29158 = C15239 * C4195;
    const double C39306 = C4659 * C4195;
    const double C22322 = C436 * C7093;
    const double C22844 = C436 * C7669;
    const double C26928 = C10146 * C7669;
    const double C27380 = C15240 * C7669;
    const double C37152 = C29670 * C7669;
    const double C37574 = C4660 * C7669;
    const double C268 = C44497 * C257;
    const double C15255 = C15085 * C257;
    const double C266 = C44497 * C252;
    const double C15251 = C15085 * C252;
    const double C270 = C44497 * C253;
    const double C833 = C44497 * C823;
    const double C4663 = C44601 * C823;
    const double C15243 = C44601 * C823;
    const double C15853 = C15085 * C823;
    const double C837 = C44497 * C825;
    const double C4673 = C44601 * C825;
    const double C15253 = C44601 * C825;
    const double C1423 = C44497 * C1413;
    const double C16471 = C15085 * C1413;
    const double C1427 = C44497 * C1415;
    const double C12957 = C44497 * C2863;
    const double C25509 = C44601 * C2863;
    const double C27229 = C15085 * C2863;
    const double C35739 = C44601 * C2863;
    const double C14759 = C44497 * C4239;
    const double C29045 = C15085 * C4239;
    const double C43098 = C44497 * C14749;
    const double C455 = C44512 * C444;
    const double C29685 = C29367 * C444;
    const double C453 = C44512 * C439;
    const double C29681 = C29367 * C439;
    const double C457 = C44512 * C440;
    const double C1035 = C44512 * C1025;
    const double C30283 = C29367 * C1025;
    const double C1039 = C44512 * C1027;
    const double C1625 = C44512 * C1615;
    const double C10149 = C44603 * C1615;
    const double C29673 = C44603 * C1615;
    const double C30949 = C29367 * C1615;
    const double C1629 = C44512 * C1617;
    const double C10159 = C44603 * C1617;
    const double C29683 = C44603 * C1617;
    const double C7325 = C44512 * C2551;
    const double C37041 = C29367 * C2551;
    const double C7961 = C44512 * C3025;
    const double C25053 = C44603 * C3025;
    const double C35319 = C44603 * C3025;
    const double C37651 = C29367 * C3025;
    const double C22234 = C44512 * C7311;
    const double C22731 = C44512 * C7951;
    const double C26815 = C44603 * C7951;
    const double C37039 = C44603 * C7951;
    const double C43537 = C43533 + C43522;
    const double C43986 = C43501 + C43984;
    const double C28860 =
        (2 * C43579 * C43931 + C43579 * (C43931 + C44069 * C43706)) / C43316;
    const double C44093 = C43501 + C44091;
    const double C43536 = C43532 + C43518;
    const double C43995 = C43993 + C43500;
    const double C28861 = (-2 * C43579 * C43941) / C43335 -
                          (C43579 * (C44075 * C43706 + C43941)) / C43335;
    const double C44108 = C44106 + C43500;
    const double C43535 = C43531 * C43482;
    const double C43573 = C43571 + C43561;
    const double C43891 = C43549 * C43888;
    const double C14630 = (-2 * C43579 * C43563) / C43335 -
                          (C43579 * (C43888 * C43706 + C43563)) / C43335;
    const double C44008 = C44002 + C43518;
    const double C44117 = C44115 + C43561;
    const double C43603 = C43601 + C43591;
    const double C43950 = C43549 * C43898;
    const double C43975 = C43579 * C43898;
    const double C7094 = (-2 * C43549 * C43593) / C43335 -
                         (C43549 * (C43898 * C43639 + C43593)) / C43335;
    const double C7670 = -(C43579 * (C43898 * C43639 + C43593) +
                           (C43496 + C43519 * C43639) * ce) /
                         C43335;
    const double C44026 = C44024 + C43591;
    const double C44082 = C43579 * C44079;
    const double C44130 = C44124 + C43518;
    const double C43632 = C43620 + C43630;
    const double C43892 = C43549 * C43890;
    const double C14750 =
        (2 * C43579 * C43622 + C43579 * (C43622 + C43890 * C43706)) / C43316;
    const double C44011 = C44005 + C43522;
    const double C44102 = C43620 + C44101;
    const double C43649 = C43648 * C43482;
    const double C43687 = C43675 + C43685;
    const double C43951 = C43549 * C43904;
    const double C43977 = C43579 * C43904;
    const double C7312 =
        (2 * C43549 * C43677 + C43549 * (C43677 + C43904 * C43639)) / C43316;
    const double C7952 = (C43579 * (C43677 + C43904 * C43639) +
                          (C43496 + C43519 * C43639) * ae) /
                         C43316;
    const double C44035 = C43675 + C44033;
    const double C44083 = C43579 * C44081;
    const double C44133 = C44127 + C43522;
    const double C43716 = C43715 * C43482;
    const double C43523 = -C43514;
    const double C27006 = C44395 * C9359;
    const double C7155 =
        2 * ((-(C43549 * C43619) / C43335) / C43316 - (ae * C43487) / C43474) -
        (ae * (C43500 * C43639 + C43487)) / C43474 +
        C43549 *
            ((-(ae * C43549 * C43500) / C43335) / C43316 - C43619 / C43474 +
             C43549 * ((-(C43549 * C43626) / C43335) / C43316 - C43515));
    const double C14927 =
        2 * ((-(C43579 * C43674) / C43335) / C43316 - (ae * C43487) / C43474) -
        (ae * (C43500 * C43706 + C43487)) / C43474 +
        C43579 *
            ((-(ae * C43579 * C43500) / C43335) / C43316 - C43674 / C43474 +
             C43579 * ((-(C43579 * C43681) / C43335) / C43316 - C43515));
    const double C27450 = C10146 * C9361;
    const double C29038 = C15240 * C9361;
    const double C37644 = C29670 * C9361;
    const double C39188 = C4660 * C9361;
    const double C41730 = C249 * C9361;
    const double C97 = 3 * (C43480 + C43490 * C43481) +
                       C43473 * (2 * C43496 + C43473 * C43527);
    const double C641 = C43549 * (2 * C43496 + C43473 * C43527);
    const double C1231 = C43579 * (2 * C43496 + C43473 * C43527);
    const double C2286 = C43480 + C43490 * C43481 + C43527 * C43639;
    const double C2691 = C43579 * C43549 * C43527;
    const double C4100 = C43480 + C43490 * C43481 + C43527 * C43706;
    const double C9358 = C43549 * C43496 + C43889 * C43706;
    const double C21965 = 3 * (C43480 + C43490 * C43639) +
                          C43549 * (2 * C43882 + C43549 * C44010);
    const double C22377 = C43579 * (2 * C43882 + C43549 * C44010);
    const double C23797 = C43480 + C43490 * C43639 + C44010 * C43706;
    const double C42949 = 3 * (C43480 + C43490 * C43706) +
                          C43579 * (2 * C43970 + C43579 * C44132);
    const double C14979 =
        2 * ((-(C43579 * C43699) / C43335) / C43316 - (ae * C43555) / C43474) -
        (ae * (C43561 * C43706 + C43555)) / C43474 +
        C43579 *
            ((-(ae * C43579 * C43561) / C43335) / C43316 - C43699 / C43474 +
             C43579 * ((-(C43579 * C43702) / C43335) / C43316 - C43568));
    const double C11336 = C249 * C4149;
    const double C11564 = C10146 * C4149;
    const double C31028 = C29670 * C4149;
    const double C7259 =
        2 * ((-(C43549 * C43658) / C43335) / C43316 - (ae * C43585) / C43474) -
        (ae * (C43591 * C43639 + C43585)) / C43474 +
        C43549 *
            ((-(ae * C43549 * C43591) / C43335) / C43316 - C43658 / C43474 +
             C43549 * ((-(C43549 * C43661) / C43335) / C43316 - C43598));
    const double C5426 = C4660 * C2382;
    const double C5664 = C436 * C2382;
    const double C16002 = C15240 * C2382;
    const double C7883 =
        (-(C43579 * C43658) / C43335) / C43316 - (C43614 * ce) / C43474 -
        (ae * (C43579 * C43549 * C43591 + C43882 * ce)) / C43474 +
        C43549 * (C43549 * ((-(C43579 * C43661) / C43335) / C43316 - C43627) -
                  (ae * (C43579 * C43591 + C43495)) / C43474);
    const double C9629 =
        C43549 *
            ((-(C43579 * C43620 * ce) / C43335) / C43316 - C43658 / C43474 +
             C43579 * ((-(C43579 * C43661) / C43335) / C43316 - C43627)) -
        (ae * (C43579 * (C43579 * C43591 + C43495) + C43585 +
               C43579 * C43490 * ce)) /
            C43474;
    const double C14870 =
        2 * ((-(C43579 * C43658) / C43335) / C43316 - (C43614 * ce) / C43474) -
        ((C43614 + C43620 * C43706) * ce) / C43474 +
        C43579 *
            ((-(C43579 * C43620 * ce) / C43335) / C43316 - C43658 / C43474 +
             C43579 * ((-(C43579 * C43661) / C43335) / C43316 - C43627));
    const double C44006 = -C44000;
    const double C11255 = C44497 * C4240;
    const double C7379 =
        2 * ((-(C43549 * C43699) / C43335) / C43316 - (C43669 * ce) / C43474) -
        ((C43669 + C43675 * C43639) * ce) / C43474 +
        C43549 *
            ((-(C43549 * C43675 * ce) / C43335) / C43316 - C43699 / C43474 +
             C43549 * ((-(C43549 * C43702) / C43335) / C43316 - C43682));
    const double C44128 = -C44122;
    const double C5509 = C44512 * C2552;
    const double C5125 = C4503 * C712;
    const double C5121 = C44593 * C712;
    const double C15697 = C44593 * C712;
    const double C20635 = C44395 * C712;
    const double C11095 = C4503 * C1299;
    const double C11091 = C44593 * C1299;
    const double C25362 = C44395 * C1299;
    const double C30597 = C44593 * C1299;
    const double C7039 = C4503 * C2340;
    const double C20633 = C44395 * C2340;
    const double C7599 = C4503 * C2754;
    const double C22451 = C44395 * C2754;
    const double C14637 = C4503 * C4151;
    const double C28927 = C44395 * C4151;
    const double C43572 = C43570 / C43335;
    const double C43985 = C43982 / C43335;
    const double C22024 = C44395 * C7035;
    const double C22453 = C44395 * C7595;
    const double C27087 = C44395 * C9417;
    const double C43006 = C44395 * C14631;
    const double C272 = C44497 * C258;
    const double C835 = C44497 * C828;
    const double C4667 = C44601 * C828;
    const double C15247 = C44601 * C828;
    const double C15857 = C15085 * C828;
    const double C1425 = C44497 * C1418;
    const double C16475 = C15085 * C1418;
    const double C12959 = C44497 * C2866;
    const double C25513 = C44601 * C2866;
    const double C27233 = C15085 * C2866;
    const double C35743 = C44601 * C2866;
    const double C14757 = C44497 * C4242;
    const double C29041 = C15085 * C4242;
    const double C43631 = C43629 / C43335;
    const double C43994 = C43992 / C43335;
    const double C29036 =
        (((-2 * C43579 * C43500) / C43335 -
          (C43579 * (C43525 * C43706 + C43500)) / C43335) *
         ae) /
            C43316 +
        C43549 * ((-2 * C44044) / C43474 +
                  C43579 * ((-(std::pow(C43471, 6) * bs[6] * C43615 * C43706) /
                             C43335) /
                                C43316 -
                            C43626 / C43474));
    const double C43092 =
        3 * ((-(C43626 * C43706) / C43335) / C43316 - C43619 / C43474) +
        C43579 * ((-2 * C44044) / C43474 +
                  C43579 * ((-(std::pow(C43471, 6) * bs[6] * C43615 * C43706) /
                             C43335) /
                                C43316 -
                            C43626 / C43474));
    const double C27235 = C44601 * C7747;
    const double C37429 = C44601 * C7747;
    const double C29039 = C44601 * C9525;
    const double C39189 = C44601 * C9525;
    const double C41731 = C44497 * C9525;
    const double C43096 = C44497 * C14751;
    const double C5203 = C4503 * C770;
    const double C5201 = C44593 * C770;
    const double C15777 = C44593 * C770;
    const double C20700 = C44395 * C770;
    const double C11171 = C4503 * C1360;
    const double C11167 = C44593 * C1360;
    const double C25437 = C44395 * C1360;
    const double C30673 = C44593 * C1360;
    const double C7101 = C4503 * C2384;
    const double C20697 = C44395 * C2384;
    const double C7677 = C4503 * C2810;
    const double C22512 = C44395 * C2810;
    const double C14695 = C4503 * C4198;
    const double C28984 = C44395 * C4198;
    const double C43602 = C43600 / C43335;
    const double C28981 =
        2 * ((-(C43579 * C44068) / C43335) / C43316 - (C43931 * ce) / C43474) -
        ((C43931 + C44069 * C43706) * ce) / C43474 +
        C43579 *
            ((-(C43579 * C44069 * ce) / C43335) / C43316 - C44068 / C43474 +
             C43579 *
                 ((-(C43579 * C43549 * std::pow(C43471, 6) * bs[6] * C43586) /
                   C43335) /
                      C43316 -
                  (C44069 * ce) / C43474));
    const double C44092 = C44090 / C43335;
    const double C22068 = C44395 * C7095;
    const double C22517 = C44395 * C7671;
    const double C27159 = C44395 * C9471;
    const double C43052 = C44395 * C14691;
    const double C389 = C44497 * C379;
    const double C970 = C44497 * C962;
    const double C4801 = C44601 * C962;
    const double C15381 = C44601 * C962;
    const double C16005 = C15085 * C962;
    const double C1556 = C44497 * C1548;
    const double C16623 = C15085 * C1548;
    const double C13106 = C44497 * C2972;
    const double C25657 = C44601 * C2972;
    const double C27379 = C15085 * C2972;
    const double C35887 = C44601 * C2972;
    const double C14874 = C44497 * C4324;
    const double C29159 = C15085 * C4324;
    const double C7260 =
        2 * ((-(C43549 * C43897) / C43335) / C43316 - (ae * C43593) / C43474) -
        (ae * (C43898 * C43639 + C43593)) / C43474 +
        C43549 *
            ((-(ae * C43549 * C43898) / C43335) / C43316 - C43897 / C43474 +
             C43549 *
                 ((-(C43549 * C43473 * std::pow(C43471, 6) * bs[6] * C43655) /
                   C43335) /
                      C43316 -
                  (ae * C43898) / C43474));
    const double C7884 =
        (-(C43579 * C43897) / C43335) / C43316 - (C43622 * ce) / C43474 -
        (ae * (C43579 * C43549 * C43898 + C43889 * ce)) / C43474 +
        C43549 *
            (C43549 *
                 ((-(C43579 * C43473 * std::pow(C43471, 6) * bs[6] * C43655) /
                   C43335) /
                      C43316 -
                  (C43890 * ce) / C43474) -
             (ae * (C43579 * C43898 + C43526)) / C43474);
    const double C9630 =
        C43549 *
            ((-(C43579 * C43890 * ce) / C43335) / C43316 - C43897 / C43474 +
             C43579 *
                 ((-(C43579 * C43473 * std::pow(C43471, 6) * bs[6] * C43655) /
                   C43335) /
                      C43316 -
                  (C43890 * ce) / C43474)) -
        (ae * (C43579 * (C43579 * C43898 + C43526) + C43593 +
               C43579 * C43519 * ce)) /
            C43474;
    const double C14871 =
        2 * ((-(C43579 * C43897) / C43335) / C43316 - (C43622 * ce) / C43474) -
        ((C43622 + C43890 * C43706) * ce) / C43474 +
        C43579 *
            ((-(C43579 * C43890 * ce) / C43335) / C43316 - C43897 / C43474 +
             C43579 *
                 ((-(C43579 * C43473 * std::pow(C43471, 6) * bs[6] * C43655) /
                   C43335) /
                      C43316 -
                  (C43890 * ce) / C43474));
    const double C44025 = C44023 / C43335;
    const double C44049 = C44048 / C43335;
    const double C967 = C44497 * C961;
    const double C4803 = C44601 * C961;
    const double C15383 = C44601 * C961;
    const double C1561 = C44497 * C1549;
    const double C5427 = C44601 * C2511;
    const double C16003 = C44601 * C2511;
    const double C11414 = C44497 * C4325;
    const double C459 = C44512 * C445;
    const double C1037 = C44512 * C1030;
    const double C30287 = C29367 * C1030;
    const double C1627 = C44512 * C1620;
    const double C10153 = C44603 * C1620;
    const double C29677 = C44603 * C1620;
    const double C30953 = C29367 * C1620;
    const double C7323 = C44512 * C2554;
    const double C37037 = C29367 * C2554;
    const double C7959 = C44512 * C3028;
    const double C25057 = C44603 * C3028;
    const double C35323 = C44603 * C3028;
    const double C37647 = C29367 * C3028;
    const double C43686 = C43684 / C43335;
    const double C29214 =
        2 * ((-(C43579 * C44074) / C43335) / C43316 - (ae * C43941) / C43474) -
        (ae * (C44075 * C43706 + C43941)) / C43474 +
        C43579 *
            ((-(ae * C43579 * C44075) / C43335) / C43316 - C44074 / C43474 +
             C43579 *
                 ((-(C43579 * C43549 * std::pow(C43471, 6) * bs[6] * C43670) /
                   C43335) /
                      C43316 -
                  (ae * C44075) / C43474));
    const double C44107 = C44105 / C43335;
    const double C22232 = C44512 * C7313;
    const double C22729 = C44512 * C7953;
    const double C26811 = C44603 * C7953;
    const double C37035 = C44603 * C7953;
    const double C27451 = C44603 * C9683;
    const double C37645 = C44603 * C9683;
    const double C516 = C44512 * C506;
    const double C1104 = C44512 * C1096;
    const double C30363 = C29367 * C1096;
    const double C1692 = C44512 * C1685;
    const double C10225 = C44603 * C1685;
    const double C29749 = C44603 * C1685;
    const double C31027 = C29367 * C1685;
    const double C7383 = C44512 * C2595;
    const double C37097 = C29367 * C2595;
    const double C8035 = C44512 * C3081;
    const double C25129 = C44603 * C3081;
    const double C35395 = C44603 * C3081;
    const double C37723 = C29367 * C3081;
    const double C7380 =
        2 * ((-(C43549 * C43903) / C43335) / C43316 - (C43677 * ce) / C43474) -
        ((C43677 + C43904 * C43639) * ce) / C43474 +
        C43549 *
            ((-(C43549 * C43904 * ce) / C43335) / C43316 - C43903 / C43474 +
             C43549 *
                 ((-(C43549 * C43473 * std::pow(C43471, 6) * bs[6] * C43696) /
                   C43335) /
                      C43316 -
                  (C43904 * ce) / C43474));
    const double C14980 =
        2 * ((-(C43579 * C43903) / C43335) / C43316 - (ae * C43563) / C43474) -
        (ae * (C43888 * C43706 + C43563)) / C43474 +
        C43579 *
            ((-(ae * C43579 * C43888) / C43335) / C43316 - C43903 / C43474 +
             C43579 *
                 ((-(C43579 * C43473 * std::pow(C43471, 6) * bs[6] * C43696) /
                   C43335) /
                      C43316 -
                  (ae * C43888) / C43474));
    const double C44034 = C44032 / C43335;
    const double C44116 = C44114 / C43335;
    const double C1109 = C44512 * C1097;
    const double C1695 = C44512 * C1686;
    const double C10227 = C44603 * C1686;
    const double C29751 = C44603 * C1686;
    const double C5590 = C44512 * C2596;
    const double C11565 = C44603 * C4410;
    const double C31029 = C44603 * C4410;
    const double C5044 = C4507 * C647;
    const double C5040 = C4507 * C639;
    const double C5034 = C4507 * C648;
    const double C5030 = C4507 * C642;
    const double C5124 = C4507 * C708;
    const double C5122 = C4507 * C709;
    const double C5202 = C4507 * C766;
    const double C5198 = C4507 * C767;
    const double C6978 = C4507 * C2284;
    const double C6974 = C4507 * C2290;
    const double C7038 = C4507 * C2337;
    const double C7100 = C4507 * C2381;
    const double C7522 = C4507 * C2689;
    const double C7518 = C4507 * C2695;
    const double C7598 = C4507 * C2751;
    const double C7676 = C4507 * C2807;
    const double C11012 = C4507 * C1237;
    const double C11008 = C4507 * C1229;
    const double C11002 = C4507 * C1238;
    const double C10998 = C4507 * C1232;
    const double C11094 = C4507 * C1295;
    const double C11088 = C4507 * C1298;
    const double C11170 = C4507 * C1356;
    const double C11168 = C4507 * C1357;
    const double C14574 = C4507 * C4098;
    const double C14570 = C4507 * C4104;
    const double C14636 = C4507 * C4148;
    const double C14694 = C4507 * C4195;
    const double C5038 = C4508 * C640;
    const double C5036 = C4508 * C647;
    const double C5032 = C4508 * C639;
    const double C5126 = C4508 * C707;
    const double C5120 = C4508 * C708;
    const double C5204 = C4508 * C765;
    const double C5200 = C4508 * C766;
    const double C7098 = C4508 * C2382;
    const double C11006 = C4508 * C1230;
    const double C11004 = C4508 * C1237;
    const double C11000 = C4508 * C1229;
    const double C11092 = C4508 * C1296;
    const double C11090 = C4508 * C1295;
    const double C11172 = C4508 * C1355;
    const double C11166 = C4508 * C1356;
    const double C14634 = C4508 * C4149;
    const double C15620 = C15087 * C647;
    const double C15616 = C15087 * C639;
    const double C15610 = C15087 * C648;
    const double C15606 = C15087 * C642;
    const double C15700 = C15087 * C708;
    const double C15698 = C15087 * C709;
    const double C15778 = C15087 * C766;
    const double C15774 = C15087 * C767;
    const double C17474 = C15087 * C2284;
    const double C17470 = C15087 * C2290;
    const double C17530 = C15087 * C2337;
    const double C17588 = C15087 * C2381;
    const double C17964 = C15087 * C2689;
    const double C17960 = C15087 * C2695;
    const double C18036 = C15087 * C2751;
    const double C18110 = C15087 * C2807;
    const double C30518 = C15087 * C1237;
    const double C30514 = C15087 * C1229;
    const double C30508 = C15087 * C1238;
    const double C30504 = C15087 * C1232;
    const double C30600 = C15087 * C1295;
    const double C30594 = C15087 * C1298;
    const double C30676 = C15087 * C1356;
    const double C30674 = C15087 * C1357;
    const double C33986 = C15087 * C4098;
    const double C33982 = C15087 * C4104;
    const double C34044 = C15087 * C4148;
    const double C34098 = C15087 * C4195;
    const double C15614 = C15088 * C640;
    const double C15612 = C15088 * C647;
    const double C15608 = C15088 * C639;
    const double C15702 = C15088 * C707;
    const double C15696 = C15088 * C708;
    const double C15780 = C15088 * C765;
    const double C15776 = C15088 * C766;
    const double C17586 = C15088 * C2382;
    const double C30512 = C15088 * C1230;
    const double C30510 = C15088 * C1237;
    const double C30506 = C15088 * C1229;
    const double C30598 = C15088 * C1296;
    const double C30596 = C15088 * C1295;
    const double C30678 = C15088 * C1355;
    const double C30672 = C15088 * C1356;
    const double C34042 = C15088 * C4149;
    const double C20558 = C20189 * C2290;
    const double C20556 = C20189 * C2284;
    const double C20554 = C20189 * C647;
    const double C20552 = C20189 * C639;
    const double C20550 = C20189 * C648;
    const double C20548 = C20189 * C642;
    const double C20634 = C20189 * C708;
    const double C20632 = C20189 * C2337;
    const double C20630 = C20189 * C709;
    const double C20702 = C20189 * C2382;
    const double C20699 = C20189 * C766;
    const double C20696 = C20189 * C2381;
    const double C20693 = C20189 * C767;
    const double C21976 = C20189 * C6963;
    const double C21974 = C20189 * C6967;
    const double C22067 = C20189 * C7093;
    const double C22388 = C20189 * C2689;
    const double C22386 = C20189 * C2695;
    const double C22384 = C20189 * C7507;
    const double C22382 = C20189 * C7511;
    const double C22450 = C20189 * C2751;
    const double C22516 = C20189 * C7669;
    const double C22511 = C20189 * C2807;
    const double C25278 = C20189 * C1237;
    const double C25276 = C20189 * C1229;
    const double C25274 = C20189 * C1238;
    const double C25272 = C20189 * C1232;
    const double C25361 = C20189 * C1295;
    const double C25355 = C20189 * C1298;
    const double C25436 = C20189 * C1356;
    const double C25434 = C20189 * C1357;
    const double C27003 = C20189 * C9361;
    const double C28866 = C20189 * C4098;
    const double C28864 = C20189 * C4104;
    const double C28926 = C20189 * C4148;
    const double C28983 = C20189 * C4195;
    const double C40370 = C20189 * C4149;
    const double C42957 = C20189 * C14559;
    const double C42955 = C20189 * C14563;
    const double C43005 = C20189 * C14629;
    const double C15617 = C15083 * C643;
    const double C15611 = C15083 * C653;
    const double C15607 = C15083 * C649;
    const double C15701 = C15083 * C712;
    const double C15699 = C15083 * C713;
    const double C15779 = C15083 * C770;
    const double C15775 = C15083 * C771;
    const double C17475 = C15083 * C2287;
    const double C17531 = C15083 * C2340;
    const double C17589 = C15083 * C2384;
    const double C17965 = C15083 * C2692;
    const double C18037 = C15083 * C2754;
    const double C18111 = C15083 * C2810;
    const double C30515 = C15083 * C1233;
    const double C30509 = C15083 * C1243;
    const double C30505 = C15083 * C1239;
    const double C30601 = C15083 * C1299;
    const double C30595 = C15083 * C1302;
    const double C30677 = C15083 * C1360;
    const double C30675 = C15083 * C1361;
    const double C33987 = C15083 * C4101;
    const double C34045 = C15083 * C4151;
    const double C34099 = C15083 * C4198;
    const double C87 =
        (((0 - (C43314 * C43315) / C43316) * ae) / C43316 - (0 * be) / C43320) /
            (2 * C43316) -
        ((C43314 * (((C44395 - (C43314 * 2 * C43321) / C43316) * ae) / C43316 -
                    C43315 / C43320) +
          C15083) *
         be) /
            C43316 +
        (0 * ae) / C43316 - C43321 / C43318;
    const double C90 =
        (((0 - (C43333 * C43334) / C43335) * ce) / C43335 - (0 * de) / C43339) /
            (2 * C43335) -
        ((C43333 * (((C44407 - (C43333 * 2 * C43340) / C43335) * ce) / C43335 -
                    C43334 / C43339) +
          C1817) *
         de) /
            C43335 +
        (0 * ce) / C43335 - C43340 / C43337;
    const double C2334 =
        (((0 - (C43361 * C43386) / C43335) * ce) / C43335 - (0 * de) / C43339) /
            (2 * C43335) -
        ((C43361 * (((C44449 - (C43361 * 2 * C43388) / C43335) * ce) / C43335 -
                    C43386 / C43339) +
          C635) *
         de) /
            C43335 +
        (0 * ce) / C43335 - C43388 / C43337;
    const double C4192 =
        (((0 - (C43368 * C43402) / C43335) * ce) / C43335 - (0 * de) / C43339) /
            (2 * C43335) -
        ((C43368 * (((C44464 - (C43368 * 2 * C43404) / C43335) * ce) / C43335 -
                    C43402 / C43339) +
          C1227) *
         de) /
            C43335 +
        (0 * ce) / C43335 - C43404 / C43337;
    const double C274 = C263 + C264;
    const double C273 = C261 + C262;
    const double C331 = C323 + C324;
    const double C391 = C383 + C384;
    const double C11259 = C11246 + C11247;
    const double C11258 = C11244 + C11245;
    const double C11338 = C11331 + C11332;
    const double C11415 = C11408 + C11409;
    const double C4675 = C4505 * C257;
    const double C4671 = C4505 * C252;
    const double C4669 = C4505 * C256;
    const double C4665 = C4505 * C251;
    const double C4743 = C4505 * C318;
    const double C4737 = C4505 * C317;
    const double C4805 = C4505 * C378;
    const double C4799 = C4505 * C377;
    const double C5281 = C4505 * C828;
    const double C5277 = C4505 * C823;
    const double C5429 = C4505 * C962;
    const double C5941 = C4505 * C1418;
    const double C5937 = C4505 * C1413;
    const double C6089 = C4505 * C1548;
    const double C35741 = C4505 * C1417;
    const double C35737 = C4505 * C1414;
    const double C35815 = C4505 * C1486;
    const double C35889 = C4505 * C1547;
    const double C37427 = C4505 * C2866;
    const double C37423 = C4505 * C2863;
    const double C37573 = C4505 * C2972;
    const double C39195 = C4505 * C4239;
    const double C39191 = C4505 * C4242;
    const double C39307 = C4505 * C4324;
    const double C20304 =
        (((0 - (C43417 * C43442) / C43316) * ae) / C43316 - (0 * be) / C43320) /
            (2 * C43316) -
        ((C43417 * (((C44497 - (C43417 * 2 * C43444) / C43316) * ae) / C43316 -
                    C43442 / C43320) +
          C4505) *
         be) /
            C43316 +
        (0 * ae) / C43316 - C43444 / C43318;
    const double C15261 = C15248 + C15249;
    const double C15259 = C15244 + C15245;
    const double C15324 = C15316 + C15317;
    const double C15386 = C15378 + C15379;
    const double C25516 = C25510 + C25511;
    const double C25514 = C25506 + C25507;
    const double C25588 = C25584 + C25585;
    const double C25661 = C25658 + C25659;
    const double C461 = C450 + C451;
    const double C460 = C448 + C449;
    const double C518 = C510 + C511;
    const double C577 = C569 + C570;
    const double C5513 = C5500 + C5501;
    const double C5512 = C5498 + C5499;
    const double C5591 = C5584 + C5585;
    const double C5668 = C5661 + C5662;
    const double C10161 = C9839 * C444;
    const double C10157 = C9839 * C439;
    const double C10155 = C9839 * C443;
    const double C10151 = C9839 * C438;
    const double C10229 = C9839 * C505;
    const double C10223 = C9839 * C504;
    const double C10291 = C9839 * C564;
    const double C10285 = C9839 * C563;
    const double C10781 = C9839 * C1030;
    const double C10777 = C9839 * C1025;
    const double C10857 = C9839 * C1096;
    const double C11489 = C9839 * C1620;
    const double C11485 = C9839 * C1615;
    const double C11563 = C9839 * C1685;
    const double C25055 = C9839 * C1029;
    const double C25051 = C9839 * C1026;
    const double C25131 = C9839 * C1095;
    const double C25201 = C9839 * C1165;
    const double C26817 = C9839 * C2551;
    const double C26813 = C9839 * C2554;
    const double C26873 = C9839 * C2595;
    const double C27457 = C9839 * C3025;
    const double C27453 = C9839 * C3028;
    const double C27529 = C9839 * C3081;
    const double C39730 =
        (((0 - (C43424 * C43458) / C43316) * ae) / C43316 - (0 * be) / C43320) /
            (2 * C43316) -
        ((C43424 * (((C44512 - (C43424 * 2 * C43460) / C43316) * ae) / C43316 -
                    C43458 / C43320) +
          C9839) *
         be) /
            C43316 +
        (0 * ae) / C43316 - C43460 / C43318;
    const double C29691 = C29678 + C29679;
    const double C29689 = C29674 + C29675;
    const double C29754 = C29746 + C29747;
    const double C29816 = C29808 + C29809;
    const double C35326 = C35320 + C35321;
    const double C35324 = C35316 + C35317;
    const double C35399 = C35396 + C35397;
    const double C35470 = C35466 + C35467;
    const double C104 = (2 * (C43473 * C43488 + C43480 * ae) +
                         C43473 * (C43488 + C43473 * C43507 + C43496 * ae) +
                         (C43480 + C43490 * C43481) * ae) /
                        C43316;
    const double C644 =
        (C43549 * (C43488 + C43473 * C43507 + C43496 * ae)) / C43316;
    const double C1234 =
        (C43579 * (C43488 + C43473 * C43507 + C43496 * ae)) / C43316;
    const double C2288 =
        (C43473 * C43488 + C43480 * ae + C43507 * C43639) / C43316;
    const double C2693 = (C43579 * C43549 * C43507) / C43316;
    const double C4102 =
        (C43473 * C43488 + C43480 * ae + C43507 * C43706) / C43316;
    const double C7153 = (2 * (C43549 * C43614 + C43480 * ae) +
                          C43549 * (C43614 + C43549 * C43885 + C43882 * ae) +
                          (C43480 + C43490 * C43639) * ae) /
                         C43316;
    const double C7745 =
        (C43579 * (C43614 + C43549 * C43885 + C43882 * ae)) / C43316;
    const double C9523 =
        (C43549 * C43614 + C43480 * ae + C43885 * C43706) / C43316;
    const double C14925 = (2 * (C43579 * C43669 + C43480 * ae) +
                           C43579 * (C43669 + C43579 * C43973 + C43970 * ae) +
                           (C43480 + C43490 * C43706) * ae) /
                          C43316;
    const double C6087 = C44601 * C2973;
    const double C10706 = C44497 * C2973;
    const double C16621 = C44601 * C2973;
    const double C6232 = C44512 * C3082;
    const double C10855 = C44603 * C3082;
    const double C30361 = C44603 * C3082;
    const double C5354 = C4660 * C2338;
    const double C5589 = C436 * C2338;
    const double C7040 = C4508 * C2338;
    const double C15930 = C15240 * C2338;
    const double C17532 = C15088 * C2338;
    const double C20636 = C20189 * C2338;
    const double C5279 = C44601 * C2426;
    const double C15855 = C44601 * C2426;
    const double C6016 = C4660 * C2752;
    const double C6231 = C436 * C2752;
    const double C7600 = C4508 * C2752;
    const double C10635 = C249 * C2752;
    const double C10854 = C10146 * C2752;
    const double C16550 = C15240 * C2752;
    const double C18038 = C15088 * C2752;
    const double C24710 = C20189 * C2752;
    const double C30360 = C29670 * C2752;
    const double C6086 = C4660 * C2808;
    const double C6304 = C436 * C2808;
    const double C7674 = C4508 * C2808;
    const double C10705 = C249 * C2808;
    const double C10926 = C10146 * C2808;
    const double C16620 = C15240 * C2808;
    const double C18108 = C15088 * C2808;
    const double C24782 = C20189 * C2808;
    const double C30432 = C29670 * C2808;
    const double C5939 = C44601 * C2864;
    const double C10561 = C44497 * C2864;
    const double C16473 = C44601 * C2864;
    const double C6159 = C44512 * C3026;
    const double C10779 = C44603 * C3026;
    const double C30285 = C44603 * C3026;
    const double C11413 = C249 * C4196;
    const double C11634 = C10146 * C4196;
    const double C14696 = C4508 * C4196;
    const double C31098 = C29670 * C4196;
    const double C34100 = C15088 * C4196;
    const double C40425 = C20189 * C4196;
    const double C11487 = C44603 * C4366;
    const double C30951 = C44603 * C4366;
    const double C5278 = C4660 * C2285;
    const double C5508 = C436 * C2285;
    const double C6976 = C4508 * C2285;
    const double C15854 = C15240 * C2285;
    const double C17472 = C15088 * C2285;
    const double C20560 = C20189 * C2285;
    const double C5938 = C4660 * C2690;
    const double C6158 = C436 * C2690;
    const double C7520 = C4508 * C2690;
    const double C10560 = C249 * C2690;
    const double C10778 = C10146 * C2690;
    const double C16472 = C15240 * C2690;
    const double C17962 = C15088 * C2690;
    const double C24636 = C20189 * C2690;
    const double C30284 = C29670 * C2690;
    const double C11254 = C249 * C4099;
    const double C11486 = C10146 * C4099;
    const double C14572 = C4508 * C4099;
    const double C30950 = C29670 * C4099;
    const double C33984 = C15088 * C4099;
    const double C40312 = C20189 * C4099;
    const double C105 =
        (-2 * (C43473 * C43487 + C43480 * ce)) / C43335 -
        (C43473 * (C43473 * C43506 + C43487 + C43496 * ce)) / C43335 -
        ((C43480 + C43490 * C43481) * ce) / C43335;
    const double C646 =
        -(C43549 * (C43473 * C43506 + C43487 + C43496 * ce)) / C43335;
    const double C1236 =
        -(C43579 * (C43473 * C43506 + C43487 + C43496 * ce)) / C43335;
    const double C2291 =
        -(C43506 * C43639 + C43473 * C43487 + C43480 * ce) / C43335;
    const double C2696 = -(C43579 * C43549 * C43506) / C43335;
    const double C4105 =
        -(C43506 * C43706 + C43473 * C43487 + C43480 * ce) / C43335;
    const double C8031 =
        C43579 *
            ((-(C43549 * C43675 * ce) / C43335) / C43316 - C43699 / C43474 +
             C43549 * ((-(C43549 * C43702) / C43335) / C43316 - C43682)) -
        (ae * (C43549 * C43884 + C43555 + C43882 * ce)) / C43474;
    const double C9735 =
        (-(C43549 * C43699) / C43335) / C43316 - (C43669 * ce) / C43474 -
        (ae * C43579 * C43884) / C43474 +
        C43579 * (C43579 * ((-(C43549 * C43702) / C43335) / C43316 - C43682) -
                  (ae * C43884) / C43474);
    const double C7033 =
        (-2 * (C43549 * C43555 + C43480 * ce)) / C43335 -
        (C43549 * (C43549 * C43884 + C43555 + C43882 * ce)) / C43335 -
        ((C43480 + C43490 * C43639) * ce) / C43335;
    const double C7593 =
        -(C43579 * (C43549 * C43884 + C43555 + C43882 * ce)) / C43335;
    const double C9415 =
        -(C43884 * C43706 + C43549 * C43555 + C43480 * ce) / C43335;
    const double C14689 =
        (-2 * (C43579 * C43585 + C43480 * ce)) / C43335 -
        (C43579 * (C43579 * C43972 + C43585 + C43970 * ce)) / C43335 -
        ((C43480 + C43490 * C43706) * ce) / C43335;
    const double C111 =
        2 * ((-(C43488 * ce) / C43335) / C43316 - (ae * C43487) / C43474 -
             (C43473 * C43505) / C43474) -
        (ae * (C43473 * C43506 + C43487 + C43496 * ce)) / C43474 -
        ((C43488 + C43473 * C43507 + C43496 * ae) * ce) / C43474 +
        C43473 *
            ((-(ae * C43506) / C43335) / C43316 - C43505 / C43474 -
             (C43507 * ce) / C43474 +
             C43473 *
                 ((-(C43501 * ce) / C43335) / C43316 - (ae * C43500) / C43474 -
                  (C43473 *
                   (C43491 * C43492 + C43481 * bs[5] * std::pow(C43477, 5)) *
                   C43482) /
                      C43474));
    const double C652 = (-(C43549 * C43488 * ce) / C43335) / C43316 -
                        (ae * C43549 * C43487) / C43474 -
                        (C43473 * C43549 * C43505) / C43474;
    const double C1242 = (-(C43579 * C43488 * ce) / C43335) / C43316 -
                         (ae * C43579 * C43487) / C43474 -
                         (C43473 * C43579 * C43505) / C43474;
    const double C2293 =
        (-(C43505 * C43639) / C43335) / C43316 -
        ((C43480 + C43481 * C43478 * C43484) * C43482) / C43474;
    const double C2698 = (-(C43579 * C43549 * C43505) / C43335) / C43316;
    const double C4107 =
        (-(C43505 * C43706) / C43335) / C43316 -
        ((C43480 + C43481 * C43478 * C43484) * C43482) / C43474;
    const double C319 =
        (-2 * C43473 * C43644) / C43474 +
        C43473 * ((-((C43511 + C43639 * C43512 * C43513) * C43482 * C43481) /
                   C43335) /
                      C43316 -
                  C43644 / C43474);
    const double C894 = (-(C43473 * C43614 * ce) / C43335) / C43316 -
                        (ae * C43473 * C43555) / C43474 -
                        (C43549 * C43473 * C43644) / C43474;
    const double C1483 = (-(C43579 * C43473 * C43644) / C43335) / C43316;
    const double C2469 =
        (-(ae * (C43549 * C43555 + C43480 * ce)) / C43335) / C43316 -
        ((C43480 + C43639 * C43478 * C43484) * C43482) / C43474 -
        ((C43549 * C43614 + C43480 * ae) * ce) / C43474 +
        C43549 * ((-(C43614 * ce) / C43335) / C43316 - (ae * C43555) / C43474 -
                  (C43549 * C43644) / C43474);
    const double C2919 = (-(C43579 * C43614 * ce) / C43335) / C43316 -
                         (ae * C43579 * C43555) / C43474 -
                         (C43549 * C43579 * C43644) / C43474;
    const double C4283 =
        (-(C43644 * C43706) / C43335) / C43316 -
        ((C43480 + C43639 * C43478 * C43484) * C43482) / C43474;
    const double C565 =
        (-2 * C43473 * C43711) / C43474 +
        C43473 * ((-((C43511 + C43706 * C43512 * C43513) * C43482 * C43481) /
                   C43335) /
                      C43316 -
                  C43711 / C43474);
    const double C1164 = (-(C43549 * C43473 * C43711) / C43335) / C43316;
    const double C1750 = (-(C43473 * C43669 * ce) / C43335) / C43316 -
                         (ae * C43473 * C43585) / C43474 -
                         (C43579 * C43473 * C43711) / C43474;
    const double C2636 =
        (-(C43711 * C43639) / C43335) / C43316 -
        ((C43480 + C43706 * C43478 * C43484) * C43482) / C43474;
    const double C3134 = (-(C43549 * C43669 * ce) / C43335) / C43316 -
                         (ae * C43549 * C43585) / C43474 -
                         (C43579 * C43549 * C43711) / C43474;
    const double C4450 =
        (-(ae * (C43579 * C43585 + C43480 * ce)) / C43335) / C43316 -
        ((C43480 + C43706 * C43478 * C43484) * C43482) / C43474 -
        ((C43579 * C43669 + C43480 * ae) * ce) / C43474 +
        C43579 * ((-(C43669 * ce) / C43335) / C43316 - (ae * C43585) / C43474 -
                  (C43579 * C43711) / C43474);
    const double C27158 = C20189 * C9469;
    const double C27600 = C10146 * C9469;
    const double C29160 = C15240 * C9469;
    const double C37794 = C29670 * C9469;
    const double C39308 = C4660 * C9469;
    const double C41843 = C249 * C9469;
    const double C27455 = C44603 * C9681;
    const double C37649 = C44603 * C9681;
    const double C27005 = C20189 * C9357;
    const double C27454 = C10146 * C9357;
    const double C29042 = C15240 * C9357;
    const double C37648 = C29670 * C9357;
    const double C39192 = C4660 * C9357;
    const double C41728 = C249 * C9357;
    const double C332 = C326 + C327;
    const double C519 = C513 + C514;
    const double C15327 = C15322 + C15323;
    const double C29757 = C29752 + C29753;
    const double C392 = C386 + C387;
    const double C578 = C572 + C573;
    const double C15389 = C15384 + C15385;
    const double C29819 = C29814 + C29815;
    const double C276 = C267 + C268;
    const double C15264 = C15254 + C15255;
    const double C275 = C265 + C266;
    const double C15262 = C15250 + C15251;
    const double C277 = C269 + C270;
    const double C840 = C832 + C833;
    const double C4678 = C4662 + C4663;
    const double C15258 = C15242 + C15243;
    const double C15860 = C15852 + C15853;
    const double C842 = C836 + C837;
    const double C4683 = C4672 + C4673;
    const double C15263 = C15252 + C15253;
    const double C1430 = C1422 + C1423;
    const double C16478 = C16470 + C16471;
    const double C1432 = C1426 + C1427;
    const double C12962 = C12956 + C12957;
    const double C25515 = C25508 + C25509;
    const double C27236 = C27228 + C27229;
    const double C35745 = C35738 + C35739;
    const double C14761 = C14758 + C14759;
    const double C29049 = C29044 + C29045;
    const double C43100 = C43097 + C43098;
    const double C463 = C454 + C455;
    const double C29694 = C29684 + C29685;
    const double C462 = C452 + C453;
    const double C29692 = C29680 + C29681;
    const double C464 = C456 + C457;
    const double C1042 = C1034 + C1035;
    const double C30290 = C30282 + C30283;
    const double C1044 = C1038 + C1039;
    const double C1632 = C1624 + C1625;
    const double C10164 = C10148 + C10149;
    const double C29688 = C29672 + C29673;
    const double C30956 = C30948 + C30949;
    const double C1634 = C1628 + C1629;
    const double C10169 = C10158 + C10159;
    const double C29693 = C29682 + C29683;
    const double C7327 = C7324 + C7325;
    const double C37045 = C37040 + C37041;
    const double C7963 = C7960 + C7961;
    const double C25059 = C25052 + C25053;
    const double C35325 = C35318 + C35319;
    const double C37655 = C37650 + C37651;
    const double C22237 = C22233 + C22234;
    const double C22733 = C22730 + C22731;
    const double C26820 = C26814 + C26815;
    const double C37044 = C37038 + C37039;
    const double C43540 = C43473 * C43537;
    const double C43933 = C43549 * C43537;
    const double C6966 =
        (2 * C43549 * C43507 + C43549 * (C43507 + C43537 * C43639)) / C43316;
    const double C7510 = (C43579 * (C43507 + C43537 * C43639)) / C43316;
    const double C14562 =
        (2 * C43579 * C43507 + C43579 * (C43507 + C43537 * C43706)) / C43316;
    const double C22506 =
        C43579 * ((-2 * C43549 * C43597) / C43474 +
                  C43549 * ((-(std::pow(C43471, 6) * bs[6] * C43586 * C43639) /
                             C43335) /
                                C43316 -
                            C43597 / C43474)) -
        ((2 * C43931 + C43549 * C43986) * ce) / C43474;
    const double C23880 =
        (-(C43597 * C43639) / C43335) / C43316 - C43590 / C43474 -
        (C43579 * C43986 * ce) / C43474 +
        C43579 * (C43579 * ((-(std::pow(C43471, 6) * bs[6] * C43586 * C43639) /
                             C43335) /
                                C43316 -
                            C43597 / C43474) -
                  (C43986 * ce) / C43474);
    const double C21966 = (3 * (C43488 + C43501 * C43639) +
                           C43549 * (2 * C43931 + C43549 * C43986)) /
                          C43316;
    const double C22378 = (C43579 * (2 * C43931 + C43549 * C43986)) / C43316;
    const double C23798 = (C43488 + C43501 * C43639 + C43986 * C43706) / C43316;
    const double C42950 = (3 * (C43488 + C43501 * C43706) +
                           C43579 * (2 * C44089 + C43579 * C44093)) /
                          C43316;
    const double C43539 = C43473 * C43536;
    const double C43943 = C43549 * C43536;
    const double C6968 = (-2 * C43549 * C43506) / C43335 -
                         (C43549 * (C43536 * C43639 + C43506)) / C43335;
    const double C7512 = -(C43579 * (C43536 * C43639 + C43506)) / C43335;
    const double C14564 = (-2 * C43579 * C43506) / C43335 -
                          (C43579 * (C43536 * C43706 + C43506)) / C43335;
    const double C22572 =
        2 * ((-(C43549 * C44044) / C43335) / C43316 -
             (ae * C43579 * C43500) / C43474) -
        (ae * C43579 * C43995) / C43474 +
        C43549 *
            ((-(ae * C43579 * C43549 * C43525) / C43335) / C43316 -
             C44044 / C43474 +
             C43549 *
                 ((-(C43549 * C43579 * std::pow(C43471, 6) * bs[6] * C43615) /
                   C43335) /
                      C43316 -
                  (ae * C43579 * C43525) / C43474));
    const double C22726 =
        (((-2 * C43941) / C43335 - (C43549 * C43995) / C43335) * ae) / C43316 +
        C43579 * ((-2 * C43549 * C43681) / C43474 +
                  C43549 * ((-(std::pow(C43471, 6) * bs[6] * C43670 * C43639) /
                             C43335) /
                                C43316 -
                            C43681 / C43474));
    const double C24038 =
        (-(C43681 * C43639) / C43335) / C43316 - C43674 / C43474 -
        (ae * C43579 * C43995) / C43474 +
        C43579 * (C43579 * ((-(std::pow(C43471, 6) * bs[6] * C43670 * C43639) /
                             C43335) /
                                C43316 -
                            C43681 / C43474) -
                  (ae * C43995) / C43474);
    const double C21967 =
        (-3 * (C43500 * C43639 + C43487)) / C43335 +
        C43549 * ((-2 * C43941) / C43335 - (C43549 * C43995) / C43335);
    const double C22379 =
        C43579 * ((-2 * C43941) / C43335 - (C43549 * C43995) / C43335);
    const double C23799 =
        -(C43995 * C43706 + C43500 * C43639 + C43487) / C43335;
    const double C42951 =
        (-3 * (C43500 * C43706 + C43487)) / C43335 +
        C43579 * ((-2 * C44104) / C43335 - (C43579 * C44108) / C43335);
    const double C43538 = C43473 * C43535;
    const double C43721 = C43549 * C43535;
    const double C43758 = C43579 * C43535;
    const double C651 = (-(ae * C43549 * C43506) / C43335) / C43316 -
                        (C43549 * C43505) / C43474 -
                        (C43549 * C43507 * ce) / C43474 +
                        C43473 * ((-(C43549 * C43501 * ce) / C43335) / C43316 -
                                  (ae * C43549 * C43500) / C43474 -
                                  (C43473 * C43549 * C43535) / C43474);
    const double C1241 = (-(ae * C43579 * C43506) / C43335) / C43316 -
                         (C43579 * C43505) / C43474 -
                         (C43579 * C43507 * ce) / C43474 +
                         C43473 * ((-(C43579 * C43501 * ce) / C43335) / C43316 -
                                   (ae * C43579 * C43500) / C43474 -
                                   (C43473 * C43579 * C43535) / C43474);
    const double C2294 =
        (-((C43488 + C43501 * C43639) * ce) / C43335) / C43316 -
        (ae * (C43500 * C43639 + C43487)) / C43474 +
        C43473 * ((-(C43535 * C43639) / C43335) / C43316 - C43505 / C43474);
    const double C2295 =
        (-(C43535 * C43639) / C43335) / C43316 - C43505 / C43474 -
        (ae * (C43536 * C43639 + C43506)) / C43474 -
        ((C43507 + C43537 * C43639) * ce) / C43474 +
        C43473 *
            ((-((C43501 + C43528 * C43639) * ce) / C43335) / C43316 -
             (ae * (C43525 * C43639 + C43500)) / C43474 +
             C43473 *
                 ((-((C43512 * C43513 + C43481 * bs[6] * std::pow(C43471, 6)) *
                     C43482 * C43639) /
                   C43335) /
                      C43316 -
                  C43535 / C43474));
    const double C4108 =
        (-((C43488 + C43501 * C43706) * ce) / C43335) / C43316 -
        (ae * (C43500 * C43706 + C43487)) / C43474 +
        C43473 * ((-(C43535 * C43706) / C43335) / C43316 - C43505 / C43474);
    const double C4109 =
        (-(C43535 * C43706) / C43335) / C43316 - C43505 / C43474 -
        (ae * (C43536 * C43706 + C43506)) / C43474 -
        ((C43507 + C43537 * C43706) * ce) / C43474 +
        C43473 *
            ((-((C43501 + C43528 * C43706) * ce) / C43335) / C43316 -
             (ae * (C43525 * C43706 + C43500)) / C43474 +
             C43473 *
                 ((-((C43512 * C43513 + C43481 * bs[6] * std::pow(C43471, 6)) *
                     C43482 * C43706) /
                   C43335) /
                      C43316 -
                  C43535 / C43474));
    const double C6969 =
        (-2 * C43549 * C43505) / C43474 +
        C43549 * ((-(C43535 * C43639) / C43335) / C43316 - C43505 / C43474);
    const double C7513 =
        C43579 * ((-(C43535 * C43639) / C43335) / C43316 - C43505 / C43474);
    const double C7514 =
        (-(C43579 * (C43501 + C43528 * C43639) * ce) / C43335) / C43316 -
        (ae * C43579 * (C43525 * C43639 + C43500)) / C43474 +
        C43473 * C43579 *
            ((-((C43512 * C43513 + C43481 * bs[6] * std::pow(C43471, 6)) *
                C43482 * C43639) /
              C43335) /
                 C43316 -
             C43535 / C43474);
    const double C14565 =
        (-2 * C43579 * C43505) / C43474 +
        C43579 * ((-(C43535 * C43706) / C43335) / C43316 - C43505 / C43474);
    const double C23800 =
        (-(C43535 * C43639) / C43335) / C43316 - C43505 / C43474 +
        ((-((C43512 * C43513 + C43481 * bs[6] * std::pow(C43471, 6)) * C43482 *
            C43639) /
          C43335) /
             C43316 -
         C43535 / C43474) *
            C43706;
    const double C1687 =
        (((-2 * C43563) / C43335 - (C43473 * C43573) / C43335) * ae) / C43316 +
        C43579 * ((-2 * C43473 * C43702) / C43474 +
                  C43473 * ((-(std::pow(C43471, 6) * bs[6] * C43696 * C43481) /
                             C43335) /
                                C43316 -
                            C43702 / C43474));
    const double C4411 =
        (-(C43702 * C43481) / C43335) / C43316 - C43699 / C43474 -
        (ae * C43579 * C43573) / C43474 +
        C43579 * (C43579 * ((-(std::pow(C43471, 6) * bs[6] * C43696 * C43481) /
                             C43335) /
                                C43316 -
                            C43702 / C43474) -
                  (ae * C43573) / C43474);
    const double C156 =
        (-3 * (C43561 * C43481 + C43555)) / C43335 +
        C43473 * ((-2 * C43563) / C43335 - (C43473 * C43573) / C43335);
    const double C710 =
        C43549 * ((-2 * C43563) / C43335 - (C43473 * C43573) / C43335) -
        ((2 * C43496 + C43473 * C43527) * ce) / C43335;
    const double C1297 =
        C43579 * ((-2 * C43563) / C43335 - (C43473 * C43573) / C43335);
    const double C2339 = -(C43549 * (C43549 * C43573 + C43527 * ce) +
                           C43561 * C43481 + C43555 + C43549 * C43527 * ce) /
                         C43335;
    const double C2753 = -(C43579 * (C43549 * C43573 + C43527 * ce)) / C43335;
    const double C4150 = -(C43573 * C43706 + C43561 * C43481 + C43555) / C43335;
    const double C43893 = C43891 + C43526;
    const double C44014 = C43549 * C44008;
    const double C28921 = (-2 * C43579 * C43884) / C43335 -
                          (C43579 * (C44008 * C43706 + C43884)) / C43335;
    const double C43001 =
        (-3 * (C43561 * C43706 + C43555)) / C43335 +
        C43579 * ((-2 * C44113) / C43335 - (C43579 * C44117) / C43335);
    const double C964 =
        (((-2 * C43593) / C43335 - (C43473 * C43603) / C43335) * ae) / C43316 +
        C43549 * ((-2 * C43473 * C43661) / C43474 +
                  C43473 * ((-(std::pow(C43471, 6) * bs[6] * C43655 * C43481) /
                             C43335) /
                                C43316 -
                            C43661 / C43474));
    const double C2512 =
        (-(C43661 * C43481) / C43335) / C43316 - C43658 / C43474 -
        (ae * C43549 * C43603) / C43474 +
        C43549 * (C43549 * ((-(std::pow(C43471, 6) * bs[6] * C43655 * C43481) /
                             C43335) /
                                C43316 -
                            C43661 / C43474) -
                  (ae * C43603) / C43474);
    const double C205 =
        (-3 * (C43591 * C43481 + C43585)) / C43335 +
        C43473 * ((-2 * C43593) / C43335 - (C43473 * C43603) / C43335);
    const double C768 =
        C43549 * ((-2 * C43593) / C43335 - (C43473 * C43603) / C43335);
    const double C1358 =
        C43579 * ((-2 * C43593) / C43335 - (C43473 * C43603) / C43335) -
        ((2 * C43496 + C43473 * C43527) * ce) / C43335;
    const double C2383 = -(C43603 * C43639 + C43591 * C43481 + C43585) / C43335;
    const double C2809 =
        -(C43579 * C43549 * C43603 + C43549 * C43527 * ce) / C43335;
    const double C4197 = -(C43579 * (C43579 * C43603 + C43527 * ce) +
                           C43591 * C43481 + C43585 + C43579 * C43527 * ce) /
                         C43335;
    const double C9470 = -(C43579 * (C43579 * C43950 + C43889 * ce) +
                           C43549 * C43593 + C43579 * C43889 * ce) /
                         C43335;
    const double C43978 = C43975 + C43526;
    const double C22063 =
        (-3 * (C43591 * C43639 + C43585)) / C43335 +
        C43549 * ((-2 * C43947) / C43335 - (C43549 * C44026) / C43335);
    const double C22505 =
        C43579 * ((-2 * C43947) / C43335 - (C43549 * C44026) / C43335) -
        ((2 * C43882 + C43549 * C44010) * ce) / C43335;
    const double C23879 = -(C43579 * (C43579 * C44026 + C44010 * ce) +
                            C43591 * C43639 + C43585 + C43579 * C44010 * ce) /
                          C43335;
    const double C44084 = C44082 + C44009;
    const double C44136 = C43579 * C44130;
    const double C1550 =
        C43579 * ((-2 * C43473 * C43661) / C43474 +
                  C43473 * ((-(std::pow(C43471, 6) * bs[6] * C43655 * C43481) /
                             C43335) /
                                C43316 -
                            C43661 / C43474)) -
        ((2 * C43622 + C43473 * C43632) * ce) / C43474;
    const double C2974 =
        C43549 * (C43579 * ((-(std::pow(C43471, 6) * bs[6] * C43655 * C43481) /
                             C43335) /
                                C43316 -
                            C43661 / C43474) -
                  (C43632 * ce) / C43474) -
        (ae * (C43579 * C43603 + C43527 * ce)) / C43474;
    const double C4326 =
        (-(C43661 * C43481) / C43335) / C43316 - C43658 / C43474 -
        (C43579 * C43632 * ce) / C43474 +
        C43579 * (C43579 * ((-(std::pow(C43471, 6) * bs[6] * C43655 * C43481) /
                             C43335) /
                                C43316 -
                            C43661 / C43474) -
                  (C43632 * ce) / C43474);
    const double C254 = (3 * (C43614 + C43620 * C43481) +
                         C43473 * (2 * C43622 + C43473 * C43632)) /
                        C43316;
    const double C826 = (C43549 * (2 * C43622 + C43473 * C43632) +
                         (2 * C43496 + C43473 * C43527) * ae) /
                        C43316;
    const double C1416 = (C43579 * (2 * C43622 + C43473 * C43632)) / C43316;
    const double C2427 =
        (C43614 + C43620 * C43481 + C43549 * (C43549 * C43632 + C43527 * ae) +
         C43549 * C43527 * ae) /
        C43316;
    const double C2865 = (C43579 * (C43549 * C43632 + C43527 * ae)) / C43316;
    const double C4241 = (C43614 + C43620 * C43481 + C43632 * C43706) / C43316;
    const double C43894 = C43892 + C43529;
    const double C44015 = C43549 * C44011;
    const double C29035 =
        (2 * C43579 * C43885 + C43579 * (C43885 + C44011 * C43706)) / C43316;
    const double C43091 = (3 * (C43614 + C43620 * C43706) +
                           C43579 * (2 * C44100 + C43579 * C44102)) /
                          C43316;
    const double C43887 = C43473 * C43649;
    const double C44001 = C43549 * C43649;
    const double C44046 = C43579 * C43649;
    const double C320 =
        3 * ((-(C43649 * C43481) / C43335) / C43316 - C43644 / C43474) +
        C43473 *
            ((-2 * C43473 * C43649) / C43474 +
             C43473 *
                 ((-((C43512 * C43513 + C43639 * bs[6] * std::pow(C43471, 6)) *
                     C43482 * C43481) /
                   C43335) /
                      C43316 -
                  C43649 / C43474));
    const double C895 =
        (-((C43614 + C43620 * C43481) * ce) / C43335) / C43316 -
        (ae * (C43561 * C43481 + C43555)) / C43474 +
        C43549 * ((-(C43649 * C43481) / C43335) / C43316 - C43644 / C43474);
    const double C896 =
        (((-2 * C43563) / C43335 - (C43473 * C43573) / C43335) * ae) / C43316 -
        ((2 * C43622 + C43473 * C43632) * ce) / C43474 +
        C43549 *
            ((-2 * C43473 * C43649) / C43474 +
             C43473 *
                 ((-((C43512 * C43513 + C43639 * bs[6] * std::pow(C43471, 6)) *
                     C43482 * C43481) /
                   C43335) /
                      C43316 -
                  C43649 / C43474));
    const double C1484 =
        C43579 * ((-(C43649 * C43481) / C43335) / C43316 - C43644 / C43474);
    const double C1485 =
        C43579 *
        ((-2 * C43473 * C43649) / C43474 +
         C43473 * ((-((C43512 * C43513 + C43639 * bs[6] * std::pow(C43471, 6)) *
                      C43482 * C43481) /
                    C43335) /
                       C43316 -
                   C43649 / C43474));
    const double C2470 =
        (-(ae * (C43549 * C43563 + C43496 * ce)) / C43335) / C43316 -
        (C43473 * C43644) / C43474 -
        ((C43549 * C43622 + C43496 * ae) * ce) / C43474 +
        C43549 * ((-(C43622 * ce) / C43335) / C43316 - (ae * C43563) / C43474 -
                  (C43549 * C43473 * C43649) / C43474);
    const double C2471 =
        (-(C43649 * C43481) / C43335) / C43316 - C43644 / C43474 -
        (ae * (C43549 * C43573 + C43527 * ce)) / C43474 -
        ((C43549 * C43632 + C43527 * ae) * ce) / C43474 +
        C43549 *
            ((-(C43632 * ce) / C43335) / C43316 - (ae * C43573) / C43474 +
             C43549 *
                 ((-((C43512 * C43513 + C43639 * bs[6] * std::pow(C43471, 6)) *
                     C43482 * C43481) /
                   C43335) /
                      C43316 -
                  C43649 / C43474));
    const double C2920 = (-(C43579 * C43622 * ce) / C43335) / C43316 -
                         (ae * C43579 * C43563) / C43474 -
                         (C43549 * C43579 * C43473 * C43649) / C43474;
    const double C2921 =
        (-(C43579 * C43632 * ce) / C43335) / C43316 -
        (ae * C43579 * C43573) / C43474 +
        C43549 * C43579 *
            ((-((C43512 * C43513 + C43639 * bs[6] * std::pow(C43471, 6)) *
                C43482 * C43481) /
              C43335) /
                 C43316 -
             C43649 / C43474);
    const double C4284 = (-(C43473 * C43649 * C43706) / C43335) / C43316 -
                         (C43473 * C43644) / C43474;
    const double C4285 =
        (-(C43649 * C43481) / C43335) / C43316 - C43644 / C43474 +
        ((-((C43512 * C43513 + C43639 * bs[6] * std::pow(C43471, 6)) * C43482 *
            C43481) /
          C43335) /
             C43316 -
         C43649 / C43474) *
            C43706;
    const double C7207 =
        2 * ((-(C43614 * ce) / C43335) / C43316 - (ae * C43555) / C43474 -
             (C43549 * C43644) / C43474) -
        (ae * (C43549 * C43884 + C43555 + C43882 * ce)) / C43474 -
        ((C43614 + C43549 * C43885 + C43882 * ae) * ce) / C43474 +
        C43549 * ((-(ae * C43884) / C43335) / C43316 - C43644 / C43474 -
                  (C43885 * ce) / C43474 +
                  C43549 * ((-C43624 / C43335) / C43316 - C43568 -
                            (C43549 * C43649) / C43474));
    const double C7815 = (-(ae * C43579 * C43884) / C43335) / C43316 -
                         (C43579 * C43644) / C43474 -
                         (C43579 * C43885 * ce) / C43474 +
                         C43549 * ((-(C43579 * C43620 * ce) / C43335) / C43316 -
                                   (ae * C43579 * C43561) / C43474 -
                                   (C43549 * C43579 * C43649) / C43474);
    const double C9577 =
        (-((C43614 + C43620 * C43706) * ce) / C43335) / C43316 -
        (ae * (C43561 * C43706 + C43555)) / C43474 +
        C43549 * ((-(C43649 * C43706) / C43335) / C43316 - C43644 / C43474);
    const double C14813 =
        (-2 * C43579 * C43644) / C43474 +
        C43579 * ((-(C43649 * C43706) / C43335) / C43316 - C43644 / C43474);
    const double C23959 =
        (-(C43649 * C43706) / C43335) / C43316 - C43644 / C43474 -
        (ae * (C44008 * C43706 + C43884)) / C43474 -
        ((C43885 + C44011 * C43706) * ce) / C43474 +
        C43549 *
            ((-((C43620 + C43628 * C43706) * ce) / C43335) / C43316 -
             (ae * (C43569 * C43706 + C43561)) / C43474 +
             C43549 *
                 ((-((C43512 * C43513 + C43639 * bs[6] * std::pow(C43471, 6)) *
                     C43482 * C43706) /
                   C43335) /
                      C43316 -
                  C43649 / C43474));
    const double C1098 =
        C43549 * ((-2 * C43473 * C43702) / C43474 +
                  C43473 * ((-(std::pow(C43471, 6) * bs[6] * C43696 * C43481) /
                             C43335) /
                                C43316 -
                            C43702 / C43474)) -
        ((2 * C43677 + C43473 * C43687) * ce) / C43474;
    const double C2597 =
        (-(C43702 * C43481) / C43335) / C43316 - C43699 / C43474 -
        (C43549 * C43687 * ce) / C43474 +
        C43549 * (C43549 * ((-(std::pow(C43471, 6) * bs[6] * C43696 * C43481) /
                             C43335) /
                                C43316 -
                            C43702 / C43474) -
                  (C43687 * ce) / C43474);
    const double C3083 =
        C43579 * (C43549 * ((-(std::pow(C43471, 6) * bs[6] * C43696 * C43481) /
                             C43335) /
                                C43316 -
                            C43702 / C43474) -
                  (C43687 * ce) / C43474) -
        (ae * (C43549 * C43573 + C43527 * ce)) / C43474;
    const double C441 = (3 * (C43669 + C43675 * C43481) +
                         C43473 * (2 * C43677 + C43473 * C43687)) /
                        C43316;
    const double C1028 = (C43549 * (2 * C43677 + C43473 * C43687)) / C43316;
    const double C1618 = (C43579 * (2 * C43677 + C43473 * C43687) +
                          (2 * C43496 + C43473 * C43527) * ae) /
                         C43316;
    const double C2553 = (C43669 + C43675 * C43481 + C43687 * C43639) / C43316;
    const double C3027 =
        (C43579 * C43549 * C43687 + C43549 * C43527 * ae) / C43316;
    const double C4367 =
        (C43669 + C43675 * C43481 + C43579 * (C43579 * C43687 + C43527 * ae) +
         C43579 * C43527 * ae) /
        C43316;
    const double C9682 =
        (C43549 * C43677 + C43579 * (C43579 * C43951 + C43889 * ae) +
         C43579 * C43889 * ae) /
        C43316;
    const double C43979 = C43977 + C43529;
    const double C22227 = (3 * (C43669 + C43675 * C43639) +
                           C43549 * (2 * C43948 + C43549 * C44035)) /
                          C43316;
    const double C22725 = (C43579 * (2 * C43948 + C43549 * C44035) +
                           (2 * C43882 + C43549 * C44010) * ae) /
                          C43316;
    const double C24037 =
        (C43669 + C43675 * C43639 + C43579 * (C43579 * C44035 + C44010 * ae) +
         C43579 * C44010 * ae) /
        C43316;
    const double C44085 = C44083 + C44012;
    const double C44137 = C43579 * C44133;
    const double C43907 = C43473 * C43716;
    const double C44078 = C43549 * C43716;
    const double C44123 = C43579 * C43716;
    const double C566 =
        3 * ((-(C43716 * C43481) / C43335) / C43316 - C43711 / C43474) +
        C43473 *
            ((-2 * C43473 * C43716) / C43474 +
             C43473 *
                 ((-((C43512 * C43513 + C43706 * bs[6] * std::pow(C43471, 6)) *
                     C43482 * C43481) /
                   C43335) /
                      C43316 -
                  C43716 / C43474));
    const double C1163 =
        C43549 * ((-(C43716 * C43481) / C43335) / C43316 - C43711 / C43474);
    const double C1166 =
        C43549 *
        ((-2 * C43473 * C43716) / C43474 +
         C43473 * ((-((C43512 * C43513 + C43706 * bs[6] * std::pow(C43471, 6)) *
                      C43482 * C43481) /
                    C43335) /
                       C43316 -
                   C43716 / C43474));
    const double C1751 =
        (-((C43669 + C43675 * C43481) * ce) / C43335) / C43316 -
        (ae * (C43591 * C43481 + C43585)) / C43474 +
        C43579 * ((-(C43716 * C43481) / C43335) / C43316 - C43711 / C43474);
    const double C1752 =
        (((-2 * C43593) / C43335 - (C43473 * C43603) / C43335) * ae) / C43316 -
        ((2 * C43677 + C43473 * C43687) * ce) / C43474 +
        C43579 *
            ((-2 * C43473 * C43716) / C43474 +
             C43473 *
                 ((-((C43512 * C43513 + C43706 * bs[6] * std::pow(C43471, 6)) *
                     C43482 * C43481) /
                   C43335) /
                      C43316 -
                  C43716 / C43474));
    const double C2637 = (-(C43473 * C43716 * C43639) / C43335) / C43316 -
                         (C43473 * C43711) / C43474;
    const double C2638 =
        (-(C43716 * C43481) / C43335) / C43316 - C43711 / C43474 +
        ((-((C43512 * C43513 + C43706 * bs[6] * std::pow(C43471, 6)) * C43482 *
            C43481) /
          C43335) /
             C43316 -
         C43716 / C43474) *
            C43639;
    const double C3135 = (-(C43549 * C43677 * ce) / C43335) / C43316 -
                         (ae * C43549 * C43593) / C43474 -
                         (C43579 * C43549 * C43473 * C43716) / C43474;
    const double C3136 =
        (-(C43549 * C43687 * ce) / C43335) / C43316 -
        (ae * C43549 * C43603) / C43474 +
        C43579 * C43549 *
            ((-((C43512 * C43513 + C43706 * bs[6] * std::pow(C43471, 6)) *
                C43482 * C43481) /
              C43335) /
                 C43316 -
             C43716 / C43474);
    const double C4451 =
        (-(ae * (C43579 * C43593 + C43496 * ce)) / C43335) / C43316 -
        (C43473 * C43711) / C43474 -
        ((C43579 * C43677 + C43496 * ae) * ce) / C43474 +
        C43579 * ((-(C43677 * ce) / C43335) / C43316 - (ae * C43593) / C43474 -
                  (C43579 * C43473 * C43716) / C43474);
    const double C4452 =
        (-(C43716 * C43481) / C43335) / C43316 - C43711 / C43474 -
        (ae * (C43579 * C43603 + C43527 * ce)) / C43474 -
        ((C43579 * C43687 + C43527 * ae) * ce) / C43474 +
        C43579 *
            ((-(C43687 * ce) / C43335) / C43316 - (ae * C43603) / C43474 +
             C43579 *
                 ((-((C43512 * C43513 + C43706 * bs[6] * std::pow(C43471, 6)) *
                     C43482 * C43481) /
                   C43335) /
                      C43316 -
                  C43716 / C43474));
    const double C7434 =
        (-2 * C43549 * C43711) / C43474 +
        C43549 * ((-(C43716 * C43639) / C43335) / C43316 - C43711 / C43474);
    const double C8102 =
        (-((C43669 + C43675 * C43639) * ce) / C43335) / C43316 -
        (ae * (C43591 * C43639 + C43585)) / C43474 +
        C43579 * ((-(C43716 * C43639) / C43335) / C43316 - C43711 / C43474);
    const double C9787 =
        (-(ae * (C43579 * C43947 + C43882 * ce)) / C43335) / C43316 -
        (C43549 * C43711) / C43474 -
        ((C43579 * C43948 + C43882 * ae) * ce) / C43474 +
        C43579 * ((-(C43948 * ce) / C43335) / C43316 - (ae * C43947) / C43474 -
                  (C43579 * C43549 * C43716) / C43474);
    const double C15031 =
        2 * ((-(C43669 * ce) / C43335) / C43316 - (ae * C43585) / C43474 -
             (C43579 * C43711) / C43474) -
        (ae * (C43579 * C43972 + C43585 + C43970 * ce)) / C43474 -
        ((C43669 + C43579 * C43973 + C43970 * ae) * ce) / C43474 +
        C43579 * ((-(ae * C43972) / C43335) / C43316 - C43711 / C43474 -
                  (C43973 * ce) / C43474 +
                  C43579 * ((-C43679 / C43335) / C43316 - C43598 -
                            (C43579 * C43716) / C43474));
    const double C22319 =
        3 * ((-(C43716 * C43639) / C43335) / C43316 - C43711 / C43474) +
        C43549 *
            ((-2 * C43549 * C43716) / C43474 +
             C43549 *
                 ((-((C43512 * C43513 + C43706 * bs[6] * std::pow(C43471, 6)) *
                     C43482 * C43639) /
                   C43335) /
                      C43316 -
                  C43716 / C43474));
    const double C22839 =
        (((-2 * C43947) / C43335 - (C43549 * C44026) / C43335) * ae) / C43316 -
        ((2 * C43948 + C43549 * C44035) * ce) / C43474 +
        C43579 *
            ((-2 * C43549 * C43716) / C43474 +
             C43549 *
                 ((-((C43512 * C43513 + C43706 * bs[6] * std::pow(C43471, 6)) *
                     C43482 * C43639) /
                   C43335) /
                      C43316 -
                  C43716 / C43474));
    const double C24116 =
        (-(C43716 * C43639) / C43335) / C43316 - C43711 / C43474 -
        (ae * (C43579 * C44026 + C44010 * ce)) / C43474 -
        ((C43579 * C44035 + C44010 * ae) * ce) / C43474 +
        C43579 *
            ((-(C44035 * ce) / C43335) / C43316 - (ae * C44026) / C43474 +
             C43579 *
                 ((-((C43512 * C43513 + C43706 * bs[6] * std::pow(C43471, 6)) *
                     C43482 * C43639) /
                   C43335) /
                      C43316 -
                  C43716 / C43474));
    const double C43530 = C43523 / C43316;
    const double C27381 = C44601 * C7883;
    const double C37575 = C44601 * C7883;
    const double C29161 = C44601 * C9629;
    const double C39309 = C44601 * C9629;
    const double C41844 = C44497 * C9629;
    const double C43188 = C44497 * C14870;
    const double C44013 = C44006 / C43316;
    const double C22280 = C44512 * C7379;
    const double C44135 = C44128 / C43316;
    const double C43574 = -C43572;
    const double C43987 = -C43985;
    const double C841 = C834 + C835;
    const double C4680 = C4666 + C4667;
    const double C15260 = C15246 + C15247;
    const double C15862 = C15856 + C15857;
    const double C1431 = C1424 + C1425;
    const double C16480 = C16474 + C16475;
    const double C12963 = C12958 + C12959;
    const double C25517 = C25512 + C25513;
    const double C27238 = C27232 + C27233;
    const double C35747 = C35742 + C35743;
    const double C14760 = C14756 + C14757;
    const double C29047 = C29040 + C29041;
    const double C43633 = -C43631;
    const double C43996 = -C43994;
    const double C27239 = C27234 + C27235;
    const double C37433 = C37428 + C37429;
    const double C29046 = C29038 + C29039;
    const double C39196 = C39188 + C39189;
    const double C41733 = C41730 + C41731;
    const double C43099 = C43095 + C43096;
    const double C43604 = -C43602;
    const double C44094 = -C44092;
    const double C393 = C388 + C389;
    const double C973 = C969 + C970;
    const double C4807 = C4800 + C4801;
    const double C15387 = C15380 + C15381;
    const double C16007 = C16004 + C16005;
    const double C1562 = C1555 + C1556;
    const double C16625 = C16622 + C16623;
    const double C13107 = C13105 + C13106;
    const double C25660 = C25656 + C25657;
    const double C27382 = C27378 + C27379;
    const double C35890 = C35886 + C35887;
    const double C14875 = C14873 + C14874;
    const double C29162 = C29158 + C29159;
    const double C44027 = -C44025;
    const double C44050 = -C44049;
    const double C972 = C966 + C967;
    const double C4808 = C4802 + C4803;
    const double C15388 = C15382 + C15383;
    const double C1563 = C1560 + C1561;
    const double C5430 = C5426 + C5427;
    const double C16006 = C16002 + C16003;
    const double C1043 = C1036 + C1037;
    const double C30292 = C30286 + C30287;
    const double C1633 = C1626 + C1627;
    const double C10166 = C10152 + C10153;
    const double C29690 = C29676 + C29677;
    const double C30958 = C30952 + C30953;
    const double C7326 = C7322 + C7323;
    const double C37043 = C37036 + C37037;
    const double C7962 = C7958 + C7959;
    const double C25061 = C25056 + C25057;
    const double C35327 = C35322 + C35323;
    const double C37653 = C37646 + C37647;
    const double C43688 = -C43686;
    const double C44109 = -C44107;
    const double C22236 = C22231 + C22232;
    const double C22732 = C22728 + C22729;
    const double C26818 = C26810 + C26811;
    const double C37042 = C37034 + C37035;
    const double C27458 = C27450 + C27451;
    const double C37652 = C37644 + C37645;
    const double C520 = C515 + C516;
    const double C1110 = C1103 + C1104;
    const double C30365 = C30362 + C30363;
    const double C1696 = C1691 + C1692;
    const double C10231 = C10224 + C10225;
    const double C29755 = C29748 + C29749;
    const double C31030 = C31026 + C31027;
    const double C7384 = C7382 + C7383;
    const double C37100 = C37096 + C37097;
    const double C8036 = C8034 + C8035;
    const double C25132 = C25128 + C25129;
    const double C35398 = C35394 + C35395;
    const double C37726 = C37722 + C37723;
    const double C44036 = -C44034;
    const double C44118 = -C44116;
    const double C1111 = C1108 + C1109;
    const double C1697 = C1694 + C1695;
    const double C10232 = C10226 + C10227;
    const double C29756 = C29750 + C29751;
    const double C11567 = C11564 + C11565;
    const double C31031 = C31028 + C31029;
    const double C5051 = C5040 + C5041;
    const double C5048 = C5034 + C5035;
    const double C5046 = C5030 + C5031;
    const double C5130 = C5124 + C5125;
    const double C5129 = C5122 + C5123;
    const double C5208 = C5202 + C5203;
    const double C5206 = C5198 + C5199;
    const double C6983 = C6978 + C6979;
    const double C7042 = C7038 + C7039;
    const double C7103 = C7100 + C7101;
    const double C7527 = C7522 + C7523;
    const double C7602 = C7598 + C7599;
    const double C7679 = C7676 + C7677;
    const double C11019 = C11008 + C11009;
    const double C11016 = C11002 + C11003;
    const double C11014 = C10998 + C10999;
    const double C11099 = C11094 + C11095;
    const double C11096 = C11088 + C11089;
    const double C11176 = C11170 + C11171;
    const double C11175 = C11168 + C11169;
    const double C14579 = C14574 + C14575;
    const double C14639 = C14636 + C14637;
    const double C14698 = C14694 + C14695;
    const double C5047 = C5032 + C5033;
    const double C5128 = C5120 + C5121;
    const double C5207 = C5200 + C5201;
    const double C11015 = C11000 + C11001;
    const double C11097 = C11090 + C11091;
    const double C11174 = C11166 + C11167;
    const double C15623 = C15608 + C15609;
    const double C15704 = C15696 + C15697;
    const double C15783 = C15776 + C15777;
    const double C30521 = C30506 + C30507;
    const double C30603 = C30596 + C30597;
    const double C30680 = C30672 + C30673;
    const double C20568 = C20556 + C20557;
    const double C20566 = C20552 + C20553;
    const double C20565 = C20550 + C20551;
    const double C20564 = C20548 + C20549;
    const double C20640 = C20634 + C20635;
    const double C20639 = C20632 + C20633;
    const double C20638 = C20630 + C20631;
    const double C20706 = C20699 + C20700;
    const double C20705 = C20696 + C20697;
    const double C20704 = C20693 + C20694;
    const double C21980 = C21976 + C21977;
    const double C22070 = C22067 + C22068;
    const double C22393 = C22388 + C22389;
    const double C22391 = C22384 + C22385;
    const double C22454 = C22450 + C22451;
    const double C22519 = C22516 + C22517;
    const double C22518 = C22511 + C22512;
    const double C25282 = C25276 + C25277;
    const double C25281 = C25274 + C25275;
    const double C25280 = C25272 + C25273;
    const double C25365 = C25361 + C25362;
    const double C25364 = C25355 + C25356;
    const double C25439 = C25436 + C25437;
    const double C25438 = C25434 + C25435;
    const double C28869 = C28866 + C28867;
    const double C28929 = C28926 + C28927;
    const double C28985 = C28983 + C28984;
    const double C42961 = C42957 + C42958;
    const double C43009 = C43005 + C43006;
    const double C15627 = C15616 + C15617;
    const double C15624 = C15610 + C15611;
    const double C15622 = C15606 + C15607;
    const double C15706 = C15700 + C15701;
    const double C15705 = C15698 + C15699;
    const double C15784 = C15778 + C15779;
    const double C15782 = C15774 + C15775;
    const double C17479 = C17474 + C17475;
    const double C17534 = C17530 + C17531;
    const double C17591 = C17588 + C17589;
    const double C17969 = C17964 + C17965;
    const double C18040 = C18036 + C18037;
    const double C18113 = C18110 + C18111;
    const double C30525 = C30514 + C30515;
    const double C30522 = C30508 + C30509;
    const double C30520 = C30504 + C30505;
    const double C30605 = C30600 + C30601;
    const double C30602 = C30594 + C30595;
    const double C30682 = C30676 + C30677;
    const double C30681 = C30674 + C30675;
    const double C33991 = C33986 + C33987;
    const double C34047 = C34044 + C34045;
    const double C34102 = C34098 + C34099;
    const double C322 = C273 * C151;
    const double C382 = C273 * C200;
    const double C898 = C273 * C705;
    const double C1552 = C273 * C1353;
    const double C2026 = C273 * C1873;
    const double C3442 = C273 * C3289;
    const double C334 = C331 * C44449;
    const double C899 = C331 * C635;
    const double C2027 = C331 * C1819;
    const double C394 = C391 * C44464;
    const double C1553 = C391 * C1227;
    const double C3443 = C391 * C3187;
    const double C11263 = C11259 * C633;
    const double C12953 = C11259 * C44407;
    const double C13571 = C11259 * C1817;
    const double C11262 = C11258 * C637;
    const double C11330 = C11258 * C151;
    const double C12952 = C11258 * C2283;
    const double C13032 = C11258 * C1873;
    const double C13570 = C11258 * C1821;
    const double C14242 = C11258 * C705;
    const double C11340 = C11338 * C44449;
    const double C13033 = C11338 * C1819;
    const double C14243 = C11338 * C635;
    const double C4684 = C4674 + C4675;
    const double C4682 = C4670 + C4671;
    const double C4681 = C4668 + C4669;
    const double C4679 = C4664 + C4665;
    const double C4747 = C4742 + C4743;
    const double C4744 = C4736 + C4737;
    const double C4809 = C4804 + C4805;
    const double C4806 = C4798 + C4799;
    const double C5286 = C5280 + C5281;
    const double C5284 = C5276 + C5277;
    const double C5431 = C5428 + C5429;
    const double C5946 = C5940 + C5941;
    const double C5944 = C5936 + C5937;
    const double C6091 = C6088 + C6089;
    const double C35746 = C35740 + C35741;
    const double C35744 = C35736 + C35737;
    const double C35818 = C35814 + C35815;
    const double C35891 = C35888 + C35889;
    const double C37432 = C37426 + C37427;
    const double C37430 = C37422 + C37423;
    const double C37576 = C37572 + C37573;
    const double C39199 = C39194 + C39195;
    const double C39197 = C39190 + C39191;
    const double C39310 = C39306 + C39307;
    const double C509 = C460 * C151;
    const double C568 = C460 * C200;
    const double C1100 = C460 * C705;
    const double C1754 = C460 * C1353;
    const double C2184 = C460 * C1873;
    const double C3600 = C460 * C3289;
    const double C521 = C518 * C44449;
    const double C1101 = C518 * C635;
    const double C2185 = C518 * C1819;
    const double C580 = C577 * C44464;
    const double C1755 = C577 * C1227;
    const double C3601 = C577 * C3187;
    const double C5517 = C5513 * C633;
    const double C6771 = C5513 * C1817;
    const double C7317 = C5513 * C44407;
    const double C5516 = C5512 * C637;
    const double C5660 = C5512 * C200;
    const double C6770 = C5512 * C1821;
    const double C7316 = C5512 * C2283;
    const double C8105 = C5512 * C1353;
    const double C9304 = C5512 * C3289;
    const double C5670 = C5668 * C44464;
    const double C8106 = C5668 * C1227;
    const double C9305 = C5668 * C3187;
    const double C10170 = C10160 + C10161;
    const double C10168 = C10156 + C10157;
    const double C10167 = C10154 + C10155;
    const double C10165 = C10150 + C10151;
    const double C10233 = C10228 + C10229;
    const double C10230 = C10222 + C10223;
    const double C10295 = C10290 + C10291;
    const double C10292 = C10284 + C10285;
    const double C10786 = C10780 + C10781;
    const double C10784 = C10776 + C10777;
    const double C10859 = C10856 + C10857;
    const double C11494 = C11488 + C11489;
    const double C11492 = C11484 + C11485;
    const double C11566 = C11562 + C11563;
    const double C25060 = C25054 + C25055;
    const double C25058 = C25050 + C25051;
    const double C25133 = C25130 + C25131;
    const double C25204 = C25200 + C25201;
    const double C26821 = C26816 + C26817;
    const double C26819 = C26812 + C26813;
    const double C26876 = C26872 + C26873;
    const double C27461 = C27456 + C27457;
    const double C27459 = C27452 + C27453;
    const double C27532 = C27528 + C27529;
    const double C5039 = C44593 * C644;
    const double C15615 = C44593 * C644;
    const double C11007 = C44593 * C1234;
    const double C30513 = C44593 * C1234;
    const double C6977 = C44593 * C2288;
    const double C17473 = C44593 * C2288;
    const double C20561 = C44395 * C2288;
    const double C7521 = C44593 * C2693;
    const double C17963 = C44593 * C2693;
    const double C24637 = C44395 * C2693;
    const double C14573 = C44593 * C4102;
    const double C33985 = C44593 * C4102;
    const double C40313 = C44395 * C4102;
    const double C27231 = C44601 * C7745;
    const double C37425 = C44601 * C7745;
    const double C29043 = C44601 * C9523;
    const double C39193 = C44601 * C9523;
    const double C41729 = C44497 * C9523;
    const double C5592 = C5589 + C5590;
    const double C6233 = C6231 + C6232;
    const double C10858 = C10854 + C10855;
    const double C30364 = C30360 + C30361;
    const double C6090 = C6086 + C6087;
    const double C10708 = C10705 + C10706;
    const double C16624 = C16620 + C16621;
    const double C11416 = C11413 + C11414;
    const double C5285 = C5278 + C5279;
    const double C5514 = C5508 + C5509;
    const double C15861 = C15854 + C15855;
    const double C5945 = C5938 + C5939;
    const double C6162 = C6158 + C6159;
    const double C10564 = C10560 + C10561;
    const double C10785 = C10778 + C10779;
    const double C16479 = C16472 + C16473;
    const double C30291 = C30284 + C30285;
    const double C11260 = C11254 + C11255;
    const double C11493 = C11486 + C11487;
    const double C30957 = C30950 + C30951;
    const double C271 = C249 * C105;
    const double C458 = C436 * C105;
    const double C838 = C249 * C646;
    const double C1040 = C436 * C646;
    const double C4676 = C4660 * C646;
    const double C5042 = C4508 * C646;
    const double C15256 = C15240 * C646;
    const double C15618 = C15088 * C646;
    const double C1428 = C249 * C1236;
    const double C1630 = C436 * C1236;
    const double C10162 = C10146 * C1236;
    const double C11010 = C4508 * C1236;
    const double C29686 = C29670 * C1236;
    const double C30516 = C15088 * C1236;
    const double C5282 = C4660 * C2291;
    const double C5510 = C436 * C2291;
    const double C6972 = C4508 * C2291;
    const double C15858 = C15240 * C2291;
    const double C17468 = C15088 * C2291;
    const double C20562 = C20189 * C2291;
    const double C5942 = C4660 * C2696;
    const double C6160 = C436 * C2696;
    const double C7516 = C4508 * C2696;
    const double C10562 = C249 * C2696;
    const double C10782 = C10146 * C2696;
    const double C16476 = C15240 * C2696;
    const double C17958 = C15088 * C2696;
    const double C24638 = C20189 * C2696;
    const double C30288 = C29670 * C2696;
    const double C11256 = C249 * C4105;
    const double C11490 = C10146 * C4105;
    const double C14568 = C4508 * C4105;
    const double C30954 = C29670 * C4105;
    const double C33980 = C15088 * C4105;
    const double C40314 = C20189 * C4105;
    const double C22788 = C44512 * C8031;
    const double C26875 = C44603 * C8031;
    const double C37099 = C44603 * C8031;
    const double C27531 = C44603 * C9735;
    const double C37725 = C44603 * C9735;
    const double C22023 = C20189 * C7033;
    const double C22279 = C436 * C7033;
    const double C22452 = C20189 * C7593;
    const double C22787 = C436 * C7593;
    const double C26874 = C10146 * C7593;
    const double C27306 = C15240 * C7593;
    const double C37098 = C29670 * C7593;
    const double C37500 = C4660 * C7593;
    const double C27086 = C20189 * C9415;
    const double C27530 = C10146 * C9415;
    const double C29101 = C15240 * C9415;
    const double C37724 = C29670 * C9415;
    const double C39250 = C4660 * C9415;
    const double C41789 = C249 * C9415;
    const double C43051 = C20189 * C14689;
    const double C43187 = C249 * C14689;
    const double C5045 = C4503 * C652;
    const double C5037 = C44593 * C652;
    const double C15621 = C15083 * C652;
    const double C15613 = C44593 * C652;
    const double C20555 = C44395 * C652;
    const double C11013 = C4503 * C1242;
    const double C11005 = C44593 * C1242;
    const double C25279 = C44395 * C1242;
    const double C30519 = C15083 * C1242;
    const double C30511 = C44593 * C1242;
    const double C6975 = C4503 * C2293;
    const double C17471 = C15083 * C2293;
    const double C20559 = C44395 * C2293;
    const double C7519 = C4503 * C2698;
    const double C17961 = C15083 * C2698;
    const double C22387 = C44395 * C2698;
    const double C14571 = C4503 * C4107;
    const double C28865 = C44395 * C4107;
    const double C33983 = C15083 * C4107;
    const double C329 = C44497 * C319;
    const double C902 = C44497 * C894;
    const double C4739 = C44601 * C894;
    const double C5357 = C4505 * C894;
    const double C15319 = C44601 * C894;
    const double C15933 = C15085 * C894;
    const double C1490 = C44497 * C1483;
    const double C6015 = C4505 * C1483;
    const double C16549 = C15085 * C1483;
    const double C13036 = C44497 * C2919;
    const double C25587 = C44601 * C2919;
    const double C27309 = C15085 * C2919;
    const double C35817 = C44601 * C2919;
    const double C37503 = C4505 * C2919;
    const double C14817 = C44497 * C4283;
    const double C29104 = C15085 * C4283;
    const double C39253 = C4505 * C4283;
    const double C575 = C44512 * C565;
    const double C1172 = C44512 * C1164;
    const double C10929 = C9839 * C1164;
    const double C30435 = C29367 * C1164;
    const double C1758 = C44512 * C1750;
    const double C10287 = C44603 * C1750;
    const double C11637 = C9839 * C1750;
    const double C29811 = C44603 * C1750;
    const double C31101 = C29367 * C1750;
    const double C7438 = C44512 * C2636;
    const double C26931 = C9839 * C2636;
    const double C37155 = C29367 * C2636;
    const double C8109 = C44512 * C3134;
    const double C25203 = C44603 * C3134;
    const double C27603 = C9839 * C3134;
    const double C35469 = C44603 * C3134;
    const double C37797 = C29367 * C3134;
    const double C27160 = C27158 + C27159;
    const double C27009 = C27005 + C27006;
    const double C27460 = C27454 + C27455;
    const double C37654 = C37648 + C37649;
    const double C335 = C332 * C44449;
    const double C904 = C332 * C635;
    const double C2031 = C332 * C1819;
    const double C522 = C519 * C44449;
    const double C1106 = C519 * C635;
    const double C2189 = C519 * C1819;
    const double C395 = C392 * C44464;
    const double C1558 = C392 * C1227;
    const double C3447 = C392 * C3187;
    const double C581 = C578 * C44464;
    const double C1760 = C578 * C1227;
    const double C3605 = C578 * C3187;
    const double C325 = C275 * C151;
    const double C385 = C275 * C200;
    const double C903 = C275 * C705;
    const double C1557 = C275 * C1353;
    const double C2030 = C275 * C1873;
    const double C3446 = C275 * C3289;
    const double C330 = C277 * C151;
    const double C390 = C277 * C200;
    const double C900 = C840 * C706;
    const double C971 = C840 * C200;
    const double C2028 = C840 * C1874;
    const double C905 = C842 * C706;
    const double C968 = C842 * C200;
    const double C2032 = C842 * C1874;
    const double C1488 = C1430 * C151;
    const double C1554 = C1430 * C1354;
    const double C3444 = C1430 * C3290;
    const double C10092 = C1430 * C200;
    const double C10632 = C1430 * C705;
    const double C11250 = C1430 * C637;
    const double C11248 = C1430 * C638;
    const double C11410 = C1430 * C1353;
    const double C11970 = C1430 * C1873;
    const double C12954 = C1430 * C2283;
    const double C13574 = C1430 * C1821;
    const double C13572 = C1430 * C1822;
    const double C13710 = C1430 * C3289;
    const double C1491 = C1432 * C151;
    const double C1559 = C1432 * C1354;
    const double C3448 = C1432 * C3290;
    const double C10095 = C1432 * C200;
    const double C11252 = C1432 * C638;
    const double C13576 = C1432 * C1822;
    const double C12964 = C12962 * C2283;
    const double C13034 = C12962 * C1874;
    const double C14244 = C12962 * C706;
    const double C14763 = C14761 * C2283;
    const double C14818 = C14761 * C151;
    const double C40478 = C14761 * C637;
    const double C41786 = C14761 * C1873;
    const double C42200 = C14761 * C1821;
    const double C42708 = C14761 * C705;
    const double C43102 = C43100 * C2283;
    const double C43145 = C43100 * C151;
    const double C512 = C462 * C151;
    const double C571 = C462 * C200;
    const double C1105 = C462 * C705;
    const double C1759 = C462 * C1353;
    const double C2188 = C462 * C1873;
    const double C3604 = C462 * C3289;
    const double C517 = C464 * C151;
    const double C576 = C464 * C200;
    const double C1102 = C1042 * C706;
    const double C1173 = C1042 * C200;
    const double C2186 = C1042 * C1874;
    const double C4910 = C1042 * C151;
    const double C5504 = C1042 * C637;
    const double C5502 = C1042 * C638;
    const double C5586 = C1042 * C705;
    const double C6301 = C1042 * C1353;
    const double C6774 = C1042 * C1821;
    const double C6772 = C1042 * C1822;
    const double C6844 = C1042 * C1873;
    const double C7318 = C1042 * C2283;
    const double C8706 = C1042 * C3289;
    const double C1107 = C1044 * C706;
    const double C1170 = C1044 * C200;
    const double C2190 = C1044 * C1874;
    const double C4913 = C1044 * C151;
    const double C5506 = C1044 * C638;
    const double C6776 = C1044 * C1822;
    const double C1690 = C1632 * C151;
    const double C1756 = C1632 * C1354;
    const double C3602 = C1632 * C3290;
    const double C1693 = C1634 * C151;
    const double C1761 = C1634 * C1354;
    const double C3606 = C1634 * C3290;
    const double C7329 = C7327 * C2283;
    const double C7439 = C7327 * C200;
    const double C20912 = C7327 * C637;
    const double C21824 = C7327 * C1821;
    const double C22841 = C7327 * C1353;
    const double C23756 = C7327 * C3289;
    const double C7965 = C7963 * C2283;
    const double C8107 = C7963 * C1354;
    const double C9306 = C7963 * C3290;
    const double C22239 = C22237 * C2283;
    const double C22324 = C22237 * C200;
    const double C22735 = C22733 * C2283;
    const double C22843 = C22733 * C1354;
    const double C23758 = C22733 * C3290;
    const double C43543 = C43501 + C43540;
    const double C9360 = (C43549 * C43507 + C43933 * C43706) / C43316;
    const double C43542 = C43539 + C43500;
    const double C9362 = -(C43943 * C43706 + C43549 * C43506) / C43335;
    const double C43541 = C43538 / C43474;
    const double C2699 = (-(C43579 * C43549 * C43501 * ce) / C43335) / C43316 -
                         (ae * C43579 * C43549 * C43500) / C43474 -
                         (C43473 * C43579 * C43721) / C43474;
    const double C2700 =
        (-(ae * C43579 * C43549 * C43536) / C43335) / C43316 -
        (C43579 * C43721) / C43474 - (C43579 * C43549 * C43537 * ce) / C43474 +
        C43473 * ((-(C43579 * C43549 * C43528 * ce) / C43335) / C43316 -
                  (ae * C43579 * C43549 * C43525) / C43474 -
                  (C43473 * C43579 * C43549 *
                   (C43512 * C43513 + C43481 * bs[6] * std::pow(C43471, 6)) *
                   C43482) /
                      C43474);
    const double C6970 =
        (((-2 * C43549 * C43500) / C43335 -
          (C43549 * (C43525 * C43639 + C43500)) / C43335) *
         ae) /
            C43316 -
        ((2 * C43549 * C43501 + C43549 * (C43501 + C43528 * C43639)) * ce) /
            C43474 +
        C43473 *
            ((-2 * C43721) / C43474 +
             C43549 *
                 ((-((C43512 * C43513 + C43481 * bs[6] * std::pow(C43471, 6)) *
                     C43482 * C43639) /
                   C43335) /
                      C43316 -
                  C43535 / C43474));
    const double C9363 =
        (-(C43721 * C43706) / C43335) / C43316 - (C43549 * C43505) / C43474;
    const double C9364 =
        (-((C43549 * C43501 + C43549 * C43528 * C43706) * ce) / C43335) /
            C43316 -
        (ae * (C43549 * C43525 * C43706 + C43549 * C43500)) / C43474 +
        C43473 * ((-(C43549 *
                     (C43512 * C43513 + C43481 * bs[6] * std::pow(C43471, 6)) *
                     C43482 * C43706) /
                   C43335) /
                      C43316 -
                  C43721 / C43474);
    const double C21968 =
        3 * ((-(C43535 * C43639) / C43335) / C43316 - C43505 / C43474) +
        C43549 *
            ((-2 * C43721) / C43474 +
             C43549 *
                 ((-((C43512 * C43513 + C43481 * bs[6] * std::pow(C43471, 6)) *
                     C43482 * C43639) /
                   C43335) /
                      C43316 -
                  C43535 / C43474));
    const double C22380 =
        C43579 *
        ((-2 * C43721) / C43474 +
         C43549 * ((-((C43512 * C43513 + C43481 * bs[6] * std::pow(C43471, 6)) *
                      C43482 * C43639) /
                    C43335) /
                       C43316 -
                   C43535 / C43474));
    const double C28862 =
        (-2 * C43579 * C43721) / C43474 +
        C43579 * ((-(C43549 *
                     (C43512 * C43513 + C43481 * bs[6] * std::pow(C43471, 6)) *
                     C43482 * C43706) /
                   C43335) /
                      C43316 -
                  C43721 / C43474);
    const double C14566 =
        (((-2 * C43579 * C43500) / C43335 -
          (C43579 * (C43525 * C43706 + C43500)) / C43335) *
         ae) /
            C43316 -
        ((2 * C43579 * C43501 + C43579 * (C43501 + C43528 * C43706)) * ce) /
            C43474 +
        C43473 *
            ((-2 * C43758) / C43474 +
             C43579 *
                 ((-((C43512 * C43513 + C43481 * bs[6] * std::pow(C43471, 6)) *
                     C43482 * C43706) /
                   C43335) /
                      C43316 -
                  C43535 / C43474));
    const double C42952 =
        3 * ((-(C43535 * C43706) / C43335) / C43316 - C43505 / C43474) +
        C43579 *
            ((-2 * C43758) / C43474 +
             C43579 *
                 ((-((C43512 * C43513 + C43481 * bs[6] * std::pow(C43471, 6)) *
                     C43482 * C43706) /
                   C43335) /
                      C43316 -
                  C43535 / C43474));
    const double C5043 = C44593 * C651;
    const double C15619 = C44593 * C651;
    const double C11011 = C44593 * C1241;
    const double C30517 = C44593 * C1241;
    const double C6973 = C44593 * C2294;
    const double C17469 = C44593 * C2294;
    const double C20563 = C44395 * C2294;
    const double C14569 = C44593 * C4108;
    const double C33981 = C44593 * C4108;
    const double C40315 = C44395 * C4108;
    const double C21975 = C44395 * C6969;
    const double C22383 = C44395 * C7513;
    const double C42956 = C44395 * C14565;
    const double C8032 =
        C43579 *
            ((-(C43549 * C43904 * ce) / C43335) / C43316 - C43903 / C43474 +
             C43549 *
                 ((-(C43549 * C43473 * std::pow(C43471, 6) * bs[6] * C43696) /
                   C43335) /
                      C43316 -
                  (C43904 * ce) / C43474)) -
        (ae * (C43549 * C43893 + C43563 + C43889 * ce)) / C43474;
    const double C9736 =
        (-(C43549 * C43903) / C43335) / C43316 - (C43677 * ce) / C43474 -
        (ae * C43579 * C43893) / C43474 +
        C43579 *
            (C43579 *
                 ((-(C43549 * C43473 * std::pow(C43471, 6) * bs[6] * C43696) /
                   C43335) /
                      C43316 -
                  (C43904 * ce) / C43474) -
             (ae * C43893) / C43474);
    const double C7034 =
        (-2 * (C43549 * C43563 + C43496 * ce)) / C43335 -
        (C43549 * (C43549 * C43893 + C43563 + C43889 * ce)) / C43335 -
        ((C43496 + C43519 * C43639) * ce) / C43335;
    const double C7594 =
        -(C43579 * (C43549 * C43893 + C43563 + C43889 * ce)) / C43335;
    const double C9416 =
        -(C43893 * C43706 + C43549 * C43563 + C43496 * ce) / C43335;
    const double C44017 = C44014 + C43561;
    const double C14690 =
        (-2 * (C43579 * C43593 + C43496 * ce)) / C43335 -
        (C43579 * (C43579 * C43978 + C43593 + C43976 * ce)) / C43335 -
        ((C43496 + C43519 * C43706) * ce) / C43335;
    const double C28980 =
        (-2 * (C43579 * C43947 + C43882 * ce)) / C43335 -
        (C43579 * (C43579 * C44084 + C43947 + C44080 * ce)) / C43335 -
        ((C43882 + C44003 * C43706) * ce) / C43335;
    const double C44139 = C44136 + C43591;
    const double C7154 = (2 * (C43549 * C43622 + C43496 * ae) +
                          C43549 * (C43622 + C43549 * C43894 + C43889 * ae) +
                          (C43496 + C43519 * C43639) * ae) /
                         C43316;
    const double C7746 =
        (C43579 * (C43622 + C43549 * C43894 + C43889 * ae)) / C43316;
    const double C9524 =
        (C43549 * C43622 + C43496 * ae + C43894 * C43706) / C43316;
    const double C44018 = C43620 + C44015;
    const double C7208 =
        2 * ((-(C43622 * ce) / C43335) / C43316 - (ae * C43563) / C43474 -
             (C43549 * C43887) / C43474) -
        (ae * (C43549 * C43893 + C43563 + C43889 * ce)) / C43474 -
        ((C43622 + C43549 * C43894 + C43889 * ae) * ce) / C43474 +
        C43549 *
            ((-(ae * C43893) / C43335) / C43316 - C43887 / C43474 -
             (C43894 * ce) / C43474 +
             C43549 *
                 ((-(C43890 * ce) / C43335) / C43316 - (ae * C43888) / C43474 -
                  (C43549 * C43473 *
                   (C43512 * C43513 + C43639 * bs[6] * std::pow(C43471, 6)) *
                   C43482) /
                      C43474));
    const double C7816 =
        (-(ae * C43579 * C43893) / C43335) / C43316 -
        (C43579 * C43887) / C43474 - (C43579 * C43894 * ce) / C43474 +
        C43549 * ((-(C43579 * C43890 * ce) / C43335) / C43316 -
                  (ae * C43579 * C43888) / C43474 -
                  (C43549 * C43579 * C43473 *
                   (C43512 * C43513 + C43639 * bs[6] * std::pow(C43471, 6)) *
                   C43482) /
                      C43474);
    const double C9578 =
        (-((C43622 + C43890 * C43706) * ce) / C43335) / C43316 -
        (ae * (C43888 * C43706 + C43563)) / C43474 +
        C43549 * ((-(C43473 *
                     (C43512 * C43513 + C43639 * bs[6] * std::pow(C43471, 6)) *
                     C43482 * C43706) /
                   C43335) /
                      C43316 -
                  C43887 / C43474);
    const double C14814 =
        (-2 * C43579 * C43887) / C43474 +
        C43579 * ((-(C43473 *
                     (C43512 * C43513 + C43639 * bs[6] * std::pow(C43471, 6)) *
                     C43482 * C43706) /
                   C43335) /
                      C43316 -
                  C43887 / C43474);
    const double C44007 = C44001 / C43474;
    const double C29099 =
        (((-2 * C43579 * C43561) / C43335 -
          (C43579 * (C43569 * C43706 + C43561)) / C43335) *
         ae) /
            C43316 -
        ((2 * C43579 * C43620 + C43579 * (C43620 + C43628 * C43706)) * ce) /
            C43474 +
        C43549 *
            ((-2 * C44046) / C43474 +
             C43579 *
                 ((-((C43512 * C43513 + C43639 * bs[6] * std::pow(C43471, 6)) *
                     C43482 * C43706) /
                   C43335) /
                      C43316 -
                  C43649 / C43474));
    const double C43140 =
        3 * ((-(C43649 * C43706) / C43335) / C43316 - C43644 / C43474) +
        C43579 *
            ((-2 * C44046) / C43474 +
             C43579 *
                 ((-((C43512 * C43513 + C43639 * bs[6] * std::pow(C43471, 6)) *
                     C43482 * C43706) /
                   C43335) /
                      C43316 -
                  C43649 / C43474));
    const double C907 = C44497 * C895;
    const double C4741 = C44601 * C895;
    const double C15321 = C44601 * C895;
    const double C1493 = C44497 * C1484;
    const double C5355 = C44601 * C2470;
    const double C15931 = C44601 * C2470;
    const double C6017 = C44601 * C2920;
    const double C10636 = C44497 * C2920;
    const double C16551 = C44601 * C2920;
    const double C11337 = C44497 * C4284;
    const double C27307 = C44601 * C7815;
    const double C37501 = C44601 * C7815;
    const double C29102 = C44601 * C9577;
    const double C39251 = C44601 * C9577;
    const double C41790 = C44497 * C9577;
    const double C43144 = C44497 * C14813;
    const double C14926 = (2 * (C43579 * C43677 + C43496 * ae) +
                           C43579 * (C43677 + C43579 * C43979 + C43976 * ae) +
                           (C43496 + C43519 * C43706) * ae) /
                          C43316;
    const double C29213 = (2 * (C43579 * C43948 + C43882 * ae) +
                           C43579 * (C43948 + C43579 * C44085 + C44080 * ae) +
                           (C43882 + C44003 * C43706) * ae) /
                          C43316;
    const double C44140 = C43675 + C44137;
    const double C7435 =
        (-2 * C43549 * C43907) / C43474 +
        C43549 * ((-(C43473 *
                     (C43512 * C43513 + C43706 * bs[6] * std::pow(C43471, 6)) *
                     C43482 * C43639) /
                   C43335) /
                      C43316 -
                  C43907 / C43474);
    const double C8103 =
        (-((C43677 + C43904 * C43639) * ce) / C43335) / C43316 -
        (ae * (C43898 * C43639 + C43593)) / C43474 +
        C43579 * ((-(C43473 *
                     (C43512 * C43513 + C43706 * bs[6] * std::pow(C43471, 6)) *
                     C43482 * C43639) /
                   C43335) /
                      C43316 -
                  C43907 / C43474);
    const double C9788 =
        (-(ae * (C43579 * C43950 + C43889 * ce)) / C43335) / C43316 -
        (C43549 * C43907) / C43474 -
        ((C43579 * C43951 + C43889 * ae) * ce) / C43474 +
        C43579 * ((-(C43951 * ce) / C43335) / C43316 - (ae * C43950) / C43474 -
                  (C43579 * C43549 * C43473 *
                   (C43512 * C43513 + C43706 * bs[6] * std::pow(C43471, 6)) *
                   C43482) /
                      C43474);
    const double C15032 =
        2 * ((-(C43677 * ce) / C43335) / C43316 - (ae * C43593) / C43474 -
             (C43579 * C43907) / C43474) -
        (ae * (C43579 * C43978 + C43593 + C43976 * ce)) / C43474 -
        ((C43677 + C43579 * C43979 + C43976 * ae) * ce) / C43474 +
        C43579 *
            ((-(ae * C43978) / C43335) / C43316 - C43907 / C43474 -
             (C43979 * ce) / C43474 +
             C43579 *
                 ((-(C43904 * ce) / C43335) / C43316 - (ae * C43898) / C43474 -
                  (C43579 * C43473 *
                   (C43512 * C43513 + C43706 * bs[6] * std::pow(C43471, 6)) *
                   C43482) /
                      C43474));
    const double C29316 =
        2 * ((-(C43948 * ce) / C43335) / C43316 - (ae * C43947) / C43474 -
             (C43579 * C44078) / C43474) -
        (ae * (C43579 * C44084 + C43947 + C44080 * ce)) / C43474 -
        ((C43948 + C43579 * C44085 + C44080 * ae) * ce) / C43474 +
        C43579 *
            ((-(ae * C44084) / C43335) / C43316 - C44078 / C43474 -
             (C44085 * ce) / C43474 +
             C43579 *
                 ((-(C44081 * ce) / C43335) / C43316 - (ae * C44079) / C43474 -
                  (C43579 * C43549 *
                   (C43512 * C43513 + C43706 * bs[6] * std::pow(C43471, 6)) *
                   C43482) /
                      C43474));
    const double C44129 = C44123 / C43474;
    const double C1169 = C44512 * C1163;
    const double C1763 = C44512 * C1751;
    const double C10289 = C44603 * C1751;
    const double C29813 = C44603 * C1751;
    const double C5665 = C44512 * C2637;
    const double C6305 = C44512 * C3135;
    const double C10927 = C44603 * C3135;
    const double C30433 = C44603 * C3135;
    const double C11635 = C44603 * C4451;
    const double C31099 = C44603 * C4451;
    const double C22323 = C44512 * C7434;
    const double C22845 = C44512 * C8102;
    const double C26929 = C44603 * C8102;
    const double C37153 = C44603 * C8102;
    const double C27601 = C44603 * C9787;
    const double C37795 = C44603 * C9787;
    const double C43534 = C43530 - C43515;
    const double C27383 = C27380 + C27381;
    const double C37577 = C37574 + C37575;
    const double C29163 = C29160 + C29161;
    const double C39311 = C39308 + C39309;
    const double C41845 = C41843 + C41844;
    const double C44016 = C44013 - C43568;
    const double C44138 = C44135 - C43598;
    const double C43575 = C43574 / C43316;
    const double C43988 = C43987 / C43316;
    const double C11251 = C1431 * C633;
    const double C11249 = C1431 * C44595;
    const double C12955 = C1431 * C44407;
    const double C13575 = C1431 * C1817;
    const double C13573 = C1431 * C44595;
    const double C12965 = C12963 * C44407;
    const double C14762 = C14760 * C44407;
    const double C40479 = C14760 * C633;
    const double C42201 = C14760 * C1817;
    const double C43634 = C43633 / C43316;
    const double C43997 = C43996 / C43316;
    const double C41735 = C41733 * C44407;
    const double C43101 = C43099 * C44407;
    const double C43605 = C43604 / C43316;
    const double C44095 = C44094 / C43316;
    const double C396 = C393 * C44464;
    const double C975 = C973 * C44464;
    const double C1564 = C1562 * C44599;
    const double C3445 = C1562 * C44599;
    const double C10093 = C1562 * C44464;
    const double C11411 = C1562 * C1227;
    const double C13711 = C1562 * C3187;
    const double C44028 = C44027 / C43316;
    const double C44051 = C44050 / C43316;
    const double C974 = C972 * C44464;
    const double C1565 = C1563 * C44599;
    const double C3449 = C1563 * C44599;
    const double C10094 = C1563 * C44464;
    const double C5505 = C1043 * C633;
    const double C5503 = C1043 * C44595;
    const double C6775 = C1043 * C1817;
    const double C6773 = C1043 * C44595;
    const double C7319 = C1043 * C44407;
    const double C7328 = C7326 * C44407;
    const double C20913 = C7326 * C633;
    const double C21825 = C7326 * C1817;
    const double C7964 = C7962 * C44407;
    const double C43689 = C43688 / C43316;
    const double C44110 = C44109 / C43316;
    const double C22238 = C22236 * C44407;
    const double C22734 = C22732 * C44407;
    const double C523 = C520 * C44449;
    const double C1112 = C1110 * C44597;
    const double C2187 = C1110 * C44597;
    const double C4911 = C1110 * C44449;
    const double C5587 = C1110 * C635;
    const double C6845 = C1110 * C1819;
    const double C1698 = C1696 * C44449;
    const double C44037 = C44036 / C43316;
    const double C44119 = C44118 / C43316;
    const double C1113 = C1111 * C44597;
    const double C2191 = C1111 * C44597;
    const double C4912 = C1111 * C44449;
    const double C1699 = C1697 * C44449;
    const double C20576 = C20568 * C637;
    const double C20695 = C20568 * C200;
    const double C21520 = C20568 * C1821;
    const double C21972 = C20568 * C2283;
    const double C22513 = C20568 * C1353;
    const double C23452 = C20568 * C3289;
    const double C20574 = C20566 * C638;
    const double C20698 = C20566 * C200;
    const double C21518 = C20566 * C1822;
    const double C20573 = C20565 * C633;
    const double C21517 = C20565 * C1817;
    const double C21971 = C20565 * C44407;
    const double C20572 = C20564 * C637;
    const double C20692 = C20564 * C200;
    const double C21516 = C20564 * C1821;
    const double C21970 = C20564 * C2283;
    const double C22508 = C20564 * C1353;
    const double C23448 = C20564 * C3289;
    const double C20710 = C20706 * C44464;
    const double C20709 = C20705 * C44464;
    const double C22514 = C20705 * C1227;
    const double C23453 = C20705 * C3187;
    const double C20708 = C20704 * C44464;
    const double C22509 = C20704 * C1227;
    const double C23449 = C20704 * C3187;
    const double C21982 = C21980 * C2283;
    const double C22069 = C21980 * C200;
    const double C22071 = C22070 * C44464;
    const double C22397 = C22393 * C2283;
    const double C22510 = C22393 * C1354;
    const double C23450 = C22393 * C3290;
    const double C24634 = C22393 * C637;
    const double C24779 = C22393 * C200;
    const double C25357 = C22393 * C151;
    const double C25926 = C22393 * C1821;
    const double C27082 = C22393 * C1873;
    const double C27080 = C22393 * C1874;
    const double C27155 = C22393 * C1353;
    const double C28340 = C22393 * C705;
    const double C28338 = C22393 * C706;
    const double C28410 = C22393 * C3289;
    const double C22395 = C22391 * C2283;
    const double C22515 = C22391 * C1354;
    const double C23454 = C22391 * C3290;
    const double C26609 = C22391 * C200;
    const double C27084 = C22391 * C1874;
    const double C28342 = C22391 * C706;
    const double C25358 = C22454 * C44449;
    const double C27083 = C22454 * C1819;
    const double C27081 = C22454 * C44597;
    const double C28341 = C22454 * C635;
    const double C28339 = C22454 * C44597;
    const double C22521 = C22519 * C44599;
    const double C23455 = C22519 * C44599;
    const double C26608 = C22519 * C44464;
    const double C22520 = C22518 * C44599;
    const double C23451 = C22518 * C44599;
    const double C24780 = C22518 * C44464;
    const double C27156 = C22518 * C1227;
    const double C28411 = C22518 * C3187;
    const double C25286 = C25282 * C638;
    const double C25363 = C25282 * C151;
    const double C27674 = C25282 * C1822;
    const double C25285 = C25281 * C633;
    const double C27001 = C25281 * C44407;
    const double C27673 = C25281 * C1817;
    const double C25284 = C25280 * C637;
    const double C25354 = C25280 * C151;
    const double C27000 = C25280 * C2283;
    const double C27078 = C25280 * C1873;
    const double C27672 = C25280 * C1821;
    const double C28336 = C25280 * C705;
    const double C25367 = C25365 * C44449;
    const double C25366 = C25364 * C44449;
    const double C27079 = C25364 * C1819;
    const double C28337 = C25364 * C635;
    const double C28871 = C28869 * C2283;
    const double C28928 = C28869 * C151;
    const double C40310 = C28869 * C637;
    const double C41624 = C28869 * C1873;
    const double C42046 = C28869 * C1821;
    const double C42554 = C28869 * C705;
    const double C28930 = C28929 * C44449;
    const double C41625 = C28929 * C1819;
    const double C42555 = C28929 * C635;
    const double C42963 = C42961 * C2283;
    const double C43007 = C42961 * C151;
    const double C43010 = C43009 * C44449;
    const double C5050 = C5038 + C5039;
    const double C15626 = C15614 + C15615;
    const double C11018 = C11006 + C11007;
    const double C30524 = C30512 + C30513;
    const double C6982 = C6976 + C6977;
    const double C17478 = C17472 + C17473;
    const double C20570 = C20560 + C20561;
    const double C7526 = C7520 + C7521;
    const double C17968 = C17962 + C17963;
    const double C24640 = C24636 + C24637;
    const double C14578 = C14572 + C14573;
    const double C33990 = C33984 + C33985;
    const double C40316 = C40312 + C40313;
    const double C27237 = C27230 + C27231;
    const double C37431 = C37424 + C37425;
    const double C29048 = C29042 + C29043;
    const double C39198 = C39192 + C39193;
    const double C41732 = C41728 + C41729;
    const double C5593 = C5592 * C44597;
    const double C6847 = C5592 * C44597;
    const double C6234 = C6233 * C44449;
    const double C10709 = C10708 * C44464;
    const double C11417 = C11416 * C44599;
    const double C13713 = C11416 * C44599;
    const double C5588 = C5514 * C706;
    const double C5666 = C5514 * C200;
    const double C6846 = C5514 * C1874;
    const double C7321 = C5514 * C2283;
    const double C20914 = C5514 * C638;
    const double C21826 = C5514 * C1822;
    const double C6230 = C6162 * C151;
    const double C6303 = C6162 * C1354;
    const double C7957 = C6162 * C2283;
    const double C8708 = C6162 * C3290;
    const double C10634 = C10564 * C706;
    const double C10707 = C10564 * C200;
    const double C11972 = C10564 * C1874;
    const double C12960 = C10564 * C2283;
    const double C11335 = C11260 * C151;
    const double C11412 = C11260 * C1354;
    const double C13712 = C11260 * C3290;
    const double C14755 = C11260 * C2283;
    const double C40480 = C11260 * C638;
    const double C42202 = C11260 * C1822;
    const double C278 = C271 + C272;
    const double C465 = C458 + C459;
    const double C22025 = C22023 + C22024;
    const double C22281 = C22279 + C22280;
    const double C22455 = C22452 + C22453;
    const double C22789 = C22787 + C22788;
    const double C26877 = C26874 + C26875;
    const double C37101 = C37098 + C37099;
    const double C27088 = C27086 + C27087;
    const double C27533 = C27530 + C27531;
    const double C37727 = C37724 + C37725;
    const double C43053 = C43051 + C43052;
    const double C43189 = C43187 + C43188;
    const double C5053 = C5044 + C5045;
    const double C5049 = C5036 + C5037;
    const double C15629 = C15620 + C15621;
    const double C15625 = C15612 + C15613;
    const double C20567 = C20554 + C20555;
    const double C11021 = C11012 + C11013;
    const double C11017 = C11004 + C11005;
    const double C25283 = C25278 + C25279;
    const double C30527 = C30518 + C30519;
    const double C30523 = C30510 + C30511;
    const double C6981 = C6974 + C6975;
    const double C17477 = C17470 + C17471;
    const double C20569 = C20558 + C20559;
    const double C7525 = C7518 + C7519;
    const double C17967 = C17960 + C17961;
    const double C22392 = C22386 + C22387;
    const double C14577 = C14570 + C14571;
    const double C28868 = C28864 + C28865;
    const double C33989 = C33982 + C33983;
    const double C333 = C328 + C329;
    const double C908 = C901 + C902;
    const double C4745 = C4738 + C4739;
    const double C5359 = C5356 + C5357;
    const double C15325 = C15318 + C15319;
    const double C15935 = C15932 + C15933;
    const double C1494 = C1489 + C1490;
    const double C6018 = C6014 + C6015;
    const double C16552 = C16548 + C16549;
    const double C13037 = C13035 + C13036;
    const double C25589 = C25586 + C25587;
    const double C27311 = C27308 + C27309;
    const double C35819 = C35816 + C35817;
    const double C37505 = C37502 + C37503;
    const double C14819 = C14816 + C14817;
    const double C29106 = C29103 + C29104;
    const double C39255 = C39252 + C39253;
    const double C579 = C574 + C575;
    const double C1175 = C1171 + C1172;
    const double C10931 = C10928 + C10929;
    const double C30437 = C30434 + C30435;
    const double C1764 = C1757 + C1758;
    const double C10293 = C10286 + C10287;
    const double C11639 = C11636 + C11637;
    const double C29817 = C29810 + C29811;
    const double C31103 = C31100 + C31101;
    const double C7440 = C7437 + C7438;
    const double C26933 = C26930 + C26931;
    const double C37157 = C37154 + C37155;
    const double C8110 = C8108 + C8109;
    const double C25205 = C25202 + C25203;
    const double C27605 = C27602 + C27603;
    const double C35471 = C35468 + C35469;
    const double C37799 = C37796 + C37797;
    const double C27161 = C27160 * C44599;
    const double C28413 = C27160 * C44599;
    const double C27011 = C27009 * C2283;
    const double C27157 = C27009 * C1354;
    const double C28412 = C27009 * C3290;
    const double C28925 = C27009 * C151;
    const double C41626 = C27009 * C1874;
    const double C42556 = C27009 * C706;
    const double C337 = C325 + C335;
    const double C397 = C385 + C395;
    const double C524 = C512 + C522;
    const double C583 = C571 + C581;
    const double C43546 = C43543 + C43529;
    const double C43545 = C43542 + C43526;
    const double C7517 = C44593 * C2699;
    const double C17959 = C44593 * C2699;
    const double C24639 = C44395 * C2699;
    const double C27004 = C44395 * C9363;
    const double C5052 = C5042 + C5043;
    const double C15628 = C15618 + C15619;
    const double C11020 = C11010 + C11011;
    const double C30526 = C30516 + C30517;
    const double C6980 = C6972 + C6973;
    const double C17476 = C17468 + C17469;
    const double C20571 = C20562 + C20563;
    const double C14576 = C14568 + C14569;
    const double C33988 = C33980 + C33981;
    const double C40317 = C40314 + C40315;
    const double C21979 = C21974 + C21975;
    const double C22390 = C22382 + C22383;
    const double C42960 = C42955 + C42956;
    const double C44020 = C44017 + C44009;
    const double C44142 = C44139 + C44131;
    const double C44021 = C44018 + C44012;
    const double C909 = C906 + C907;
    const double C4746 = C4740 + C4741;
    const double C15326 = C15320 + C15321;
    const double C1495 = C1492 + C1493;
    const double C5358 = C5354 + C5355;
    const double C15934 = C15930 + C15931;
    const double C6019 = C6016 + C6017;
    const double C10637 = C10635 + C10636;
    const double C16553 = C16550 + C16551;
    const double C11339 = C11336 + C11337;
    const double C27310 = C27306 + C27307;
    const double C37504 = C37500 + C37501;
    const double C29105 = C29101 + C29102;
    const double C39254 = C39250 + C39251;
    const double C41791 = C41789 + C41790;
    const double C43146 = C43143 + C43144;
    const double C44143 = C44140 + C44134;
    const double C1174 = C1168 + C1169;
    const double C1765 = C1762 + C1763;
    const double C10294 = C10288 + C10289;
    const double C29818 = C29812 + C29813;
    const double C5669 = C5664 + C5665;
    const double C6306 = C6304 + C6305;
    const double C10930 = C10926 + C10927;
    const double C30436 = C30432 + C30433;
    const double C11638 = C11634 + C11635;
    const double C31102 = C31098 + C31099;
    const double C22326 = C22322 + C22323;
    const double C22846 = C22844 + C22845;
    const double C26932 = C26928 + C26929;
    const double C37156 = C37152 + C37153;
    const double C27604 = C27600 + C27601;
    const double C37798 = C37794 + C37795;
    const double C43544 = C43534 - C43541;
    const double C44019 = C44016 - C44007;
    const double C44141 = C44138 - C44129;
    const double C43576 = C43575 - C43568;
    const double C43989 = C43988 - C43983;
    const double C43094 = C14763 + C14762;
    const double C43635 = C43634 - C43627;
    const double C43998 = C43997 - C43515;
    const double C43606 = C43605 - C43598;
    const double C44096 = C44095 - C43983;
    const double C44029 = C44028 - C43598;
    const double C44052 = C44051 - C43627;
    const double C22230 = C7329 + C7328;
    const double C43690 = C43689 - C43682;
    const double C44111 = C44110 - C43515;
    const double C44038 = C44037 - C43682;
    const double C44120 = C44119 - C43568;
    const double C22066 = C20695 + C20709;
    const double C43004 = C28928 + C28930;
    const double C20578 = C20570 * C638;
    const double C20701 = C20570 * C200;
    const double C21522 = C20570 * C1822;
    const double C24642 = C24640 * C638;
    const double C24781 = C24640 * C200;
    const double C25360 = C24640 * C151;
    const double C25928 = C24640 * C1822;
    const double C40318 = C40316 * C638;
    const double C40372 = C40316 * C151;
    const double C42048 = C40316 * C1822;
    const double C41734 = C41732 * C2283;
    const double C41788 = C41732 * C1874;
    const double C42710 = C41732 * C706;
    const double C27085 = C22455 * C44597;
    const double C28343 = C22455 * C44597;
    const double C28924 = C27088 * C44449;
    const double C41627 = C27088 * C44597;
    const double C42557 = C27088 * C44597;
    const double C20575 = C20567 * C44595;
    const double C21519 = C20567 * C44595;
    const double C25287 = C25283 * C44595;
    const double C27675 = C25283 * C44595;
    const double C20577 = C20569 * C633;
    const double C21521 = C20569 * C1817;
    const double C21973 = C20569 * C44407;
    const double C22396 = C22392 * C44407;
    const double C24635 = C22392 * C633;
    const double C25927 = C22392 * C1817;
    const double C28870 = C28868 * C44407;
    const double C40311 = C28868 * C633;
    const double C42047 = C28868 * C1817;
    const double C336 = C333 * C44449;
    const double C910 = C908 * C44597;
    const double C2029 = C908 * C44597;
    const double C1496 = C1494 * C44449;
    const double C10633 = C1494 * C635;
    const double C11971 = C1494 * C1819;
    const double C13038 = C13037 * C44597;
    const double C14245 = C13037 * C44597;
    const double C14820 = C14819 * C44449;
    const double C41787 = C14819 * C1819;
    const double C42709 = C14819 * C635;
    const double C582 = C579 * C44464;
    const double C1177 = C1175 * C44464;
    const double C6302 = C1175 * C1227;
    const double C8707 = C1175 * C3187;
    const double C1766 = C1764 * C44599;
    const double C3603 = C1764 * C44599;
    const double C7441 = C7440 * C44464;
    const double C22842 = C7440 * C1227;
    const double C23757 = C7440 * C3187;
    const double C8111 = C8110 * C44599;
    const double C9307 = C8110 * C44599;
    const double C338 = C337 * C44512;
    const double C398 = C397 * C44512;
    const double C2756 =
        C43579 *
        (C43549 *
             ((-(ae * C43473 * C43569) / C43335) / C43316 - C43567 / C43474 +
              C43473 *
                  ((-(C43473 * std::pow(C43471, 6) * bs[6] * C43556) / C43335) /
                       C43316 -
                   (ae * C43569) / C43474)) -
         (C43546 * ce) / C43474);
    const double C2812 =
        C43579 * C43549 *
            ((-(ae * C43473 * C43599) / C43335) / C43316 - C43597 / C43474 +
             C43473 *
                 ((-(C43473 * std::pow(C43471, 6) * bs[6] * C43586) / C43335) /
                      C43316 -
                  (ae * C43599) / C43474)) -
        (C43549 * C43546 * ce) / C43474;
    const double C106 = (3 * (C43488 + C43473 * C43507 + C43496 * ae) +
                         C43473 * (2 * C43507 + C43473 * C43546 + C43527 * ae) +
                         (2 * C43496 + C43473 * C43527) * ae) /
                        C43316;
    const double C645 =
        (C43549 * (2 * C43507 + C43473 * C43546 + C43527 * ae)) / C43316;
    const double C1235 =
        (C43579 * (2 * C43507 + C43473 * C43546 + C43527 * ae)) / C43316;
    const double C2289 =
        (C43488 + C43473 * C43507 + C43496 * ae + C43546 * C43639) / C43316;
    const double C2694 = (C43579 * C43549 * C43546) / C43316;
    const double C4103 =
        (C43488 + C43473 * C43507 + C43496 * ae + C43546 * C43706) / C43316;
    const double C654 =
        2 * ((-(C43549 * C43501 * ce) / C43335) / C43316 -
             (ae * C43549 * C43500) / C43474 - (C43473 * C43721) / C43474) -
        (ae * C43549 * C43545) / C43474 - (C43549 * C43546 * ce) / C43474 +
        C43473 *
            ((-(ae * C43549 * C43536) / C43335) / C43316 - C43721 / C43474 -
             (C43549 * C43537 * ce) / C43474 +
             C43473 *
                 ((-(C43549 * C43528 * ce) / C43335) / C43316 -
                  (ae * C43549 * C43525) / C43474 -
                  (C43473 * C43549 *
                   (C43512 * C43513 + C43481 * bs[6] * std::pow(C43471, 6)) *
                   C43482) /
                      C43474));
    const double C1244 =
        2 * ((-(C43579 * C43501 * ce) / C43335) / C43316 -
             (ae * C43579 * C43500) / C43474 - (C43473 * C43758) / C43474) -
        (ae * C43579 * C43545) / C43474 - (C43579 * C43546 * ce) / C43474 +
        C43473 *
            ((-(ae * C43579 * C43536) / C43335) / C43316 - C43758 / C43474 -
             (C43579 * C43537 * ce) / C43474 +
             C43473 *
                 ((-(C43579 * C43528 * ce) / C43335) / C43316 -
                  (ae * C43579 * C43525) / C43474 -
                  (C43473 * C43579 *
                   (C43512 * C43513 + C43481 * bs[6] * std::pow(C43471, 6)) *
                   C43482) /
                      C43474));
    const double C2868 =
        C43549 * C43579 *
            ((-(C43473 * C43628 * ce) / C43335) / C43316 - C43626 / C43474 +
             C43473 *
                 ((-(C43473 * std::pow(C43471, 6) * bs[6] * C43615) / C43335) /
                      C43316 -
                  (C43628 * ce) / C43474)) -
        (ae * C43579 * C43545) / C43474;
    const double C3030 =
        C43579 * C43549 *
            ((-(C43473 * C43683 * ce) / C43335) / C43316 - C43681 / C43474 +
             C43473 *
                 ((-(C43473 * std::pow(C43471, 6) * bs[6] * C43670) / C43335) /
                      C43316 -
                  (C43683 * ce) / C43474)) -
        (ae * C43549 * C43545) / C43474;
    const double C107 =
        (-3 * (C43473 * C43506 + C43487 + C43496 * ce)) / C43335 +
        C43473 * ((-2 * C43506) / C43335 - (C43473 * C43545) / C43335 -
                  (C43527 * ce) / C43335) -
        ((2 * C43496 + C43473 * C43527) * ce) / C43335;
    const double C650 =
        C43549 * ((-2 * C43506) / C43335 - (C43473 * C43545) / C43335 -
                  (C43527 * ce) / C43335);
    const double C1240 =
        C43579 * ((-2 * C43506) / C43335 - (C43473 * C43545) / C43335 -
                  (C43527 * ce) / C43335);
    const double C2292 =
        -(C43545 * C43639 + C43473 * C43506 + C43487 + C43496 * ce) / C43335;
    const double C2697 = -(C43579 * C43549 * C43545) / C43335;
    const double C4106 =
        -(C43545 * C43706 + C43473 * C43506 + C43487 + C43496 * ce) / C43335;
    const double C7524 = C7516 + C7517;
    const double C17966 = C17958 + C17959;
    const double C24641 = C24638 + C24639;
    const double C27008 = C27003 + C27004;
    const double C20579 = C20571 * C44595;
    const double C21523 = C20571 * C44595;
    const double C40319 = C40317 * C44595;
    const double C42049 = C40317 * C44595;
    const double C21981 = C21979 * C44407;
    const double C22394 = C22390 * C44407;
    const double C42962 = C42960 * C44407;
    const double C22020 =
        (-3 * (C43549 * C43884 + C43555 + C43882 * ce)) / C43335 +
        C43549 * ((-2 * C43884) / C43335 - (C43549 * C44020) / C43335 -
                  (C44010 * ce) / C43335) -
        ((2 * C43882 + C43549 * C44010) * ce) / C43335;
    const double C22447 =
        C43579 * ((-2 * C43884) / C43335 - (C43549 * C44020) / C43335 -
                  (C44010 * ce) / C43335);
    const double C23839 =
        -(C44020 * C43706 + C43549 * C43884 + C43555 + C43882 * ce) / C43335;
    const double C43048 =
        (-3 * (C43579 * C43972 + C43585 + C43970 * ce)) / C43335 +
        C43579 * ((-2 * C43972) / C43335 - (C43579 * C44142) / C43335 -
                  (C44132 * ce) / C43335) -
        ((2 * C43970 + C43579 * C44132) * ce) / C43335;
    const double C22623 =
        2 * ((-(C43579 * C43620 * ce) / C43335) / C43316 -
             (ae * C43579 * C43561) / C43474 - (C43549 * C44046) / C43474) -
        (ae * C43579 * C44020) / C43474 - (C43579 * C44021 * ce) / C43474 +
        C43549 *
            ((-(ae * C43579 * C44008) / C43335) / C43316 - C44046 / C43474 -
             (C43579 * C44011 * ce) / C43474 +
             C43549 *
                 ((-(C43579 * C43628 * ce) / C43335) / C43316 -
                  (ae * C43579 * C43569) / C43474 -
                  (C43549 * C43579 *
                   (C43512 * C43513 + C43639 * bs[6] * std::pow(C43471, 6)) *
                   C43482) /
                      C43474));
    const double C22109 =
        (3 * (C43614 + C43549 * C43885 + C43882 * ae) +
         C43549 * (2 * C43885 + C43549 * C44021 + C44010 * ae) +
         (2 * C43882 + C43549 * C44010) * ae) /
        C43316;
    const double C22571 =
        (C43579 * (2 * C43885 + C43549 * C44021 + C44010 * ae)) / C43316;
    const double C23919 =
        (C43614 + C43549 * C43885 + C43882 * ae + C44021 * C43706) / C43316;
    const double C911 = C909 * C44597;
    const double C2033 = C909 * C44597;
    const double C1497 = C1495 * C44449;
    const double C10638 = C10637 * C44597;
    const double C11973 = C10637 * C44597;
    const double C11341 = C11339 * C44449;
    const double C41792 = C41791 * C44597;
    const double C42711 = C41791 * C44597;
    const double C43147 = C43146 * C44449;
    const double C43227 =
        (3 * (C43669 + C43579 * C43973 + C43970 * ae) +
         C43579 * (2 * C43973 + C43579 * C44143 + C44132 * ae) +
         (2 * C43970 + C43579 * C44132) * ae) /
        C43316;
    const double C1176 = C1174 * C44464;
    const double C1767 = C1765 * C44599;
    const double C3607 = C1765 * C44599;
    const double C5671 = C5669 * C44464;
    const double C6307 = C6306 * C44599;
    const double C8709 = C6306 * C44599;
    const double C22327 = C22326 * C44464;
    const double C22847 = C22846 * C44599;
    const double C23759 = C22846 * C44599;
    const double C112 =
        3 * ((-(ae * C43506) / C43335) / C43316 - C43505 / C43474 -
             (C43507 * ce) / C43474 + C43473 * C43544) +
        (((-2 * C43506) / C43335 - (C43473 * C43545) / C43335 -
          (C43527 * ce) / C43335) *
         ae) /
            C43316 -
        ((2 * C43507 + C43473 * C43546 + C43527 * ae) * ce) / C43474 +
        C43473 * (2 * C43544 - (ae * C43545) / C43474 - (C43546 * ce) / C43474 +
                  C43473 * ((-(ae * C43536) / C43335) / C43316 -
                            C43535 / C43474 - (C43537 * ce) / C43474 +
                            C43473 * ((-(C43528 * ce) / C43335) / C43316 -
                                      (ae * C43525) / C43474 -
                                      (C43473 *
                                       (C43512 * C43513 +
                                        C43481 * bs[6] * std::pow(C43471, 6)) *
                                       C43482) /
                                          C43474)));
    const double C22149 =
        3 * ((-(ae * C43884) / C43335) / C43316 - C43644 / C43474 -
             (C43885 * ce) / C43474 + C43549 * C44019) +
        (((-2 * C43884) / C43335 - (C43549 * C44020) / C43335 -
          (C44010 * ce) / C43335) *
         ae) /
            C43316 -
        ((2 * C43885 + C43549 * C44021 + C44010 * ae) * ce) / C43474 +
        C43549 * (2 * C44019 - (ae * C44020) / C43474 - (C44021 * ce) / C43474 +
                  C43549 * ((-(ae * C44008) / C43335) / C43316 -
                            C43649 / C43474 - (C44011 * ce) / C43474 +
                            C43549 * ((-(C43628 * ce) / C43335) / C43316 -
                                      (ae * C43569) / C43474 -
                                      (C43549 *
                                       (C43512 * C43513 +
                                        C43639 * bs[6] * std::pow(C43471, 6)) *
                                       C43482) /
                                          C43474)));
    const double C43306 =
        3 * ((-(ae * C43972) / C43335) / C43316 - C43711 / C43474 -
             (C43973 * ce) / C43474 + C43579 * C44141) +
        (((-2 * C43972) / C43335 - (C43579 * C44142) / C43335 -
          (C44132 * ce) / C43335) *
         ae) /
            C43316 -
        ((2 * C43973 + C43579 * C44143 + C44132 * ae) * ce) / C43474 +
        C43579 * (2 * C44141 - (ae * C44142) / C43474 - (C44143 * ce) / C43474 +
                  C43579 * ((-(ae * C44130) / C43335) / C43316 -
                            C43716 / C43474 - (C44133 * ce) / C43474 +
                            C43579 * ((-(C43683 * ce) / C43335) / C43316 -
                                      (ae * C43599) / C43474 -
                                      (C43579 *
                                       (C43512 * C43513 +
                                        C43706 * bs[6] * std::pow(C43471, 6)) *
                                       C43482) /
                                          C43474)));
    const double C161 =
        3 * ((-(ae * C43563) / C43335) / C43316 - C43560 / C43474 +
             C43473 * C43576) +
        (((-2 * C43563) / C43335 - (C43473 * C43573) / C43335) * ae) / C43316 +
        C43473 *
            (2 * C43576 - (ae * C43573) / C43474 +
             C43473 *
                 ((-(ae * C43473 * C43569) / C43335) / C43316 -
                  C43567 / C43474 +
                  C43473 * ((-(C43473 * std::pow(C43471, 6) * bs[6] * C43556) /
                             C43335) /
                                C43316 -
                            (ae * C43569) / C43474)));
    const double C711 =
        C43549 * ((-(ae * C43563) / C43335) / C43316 - C43560 / C43474 +
                  C43473 * C43576) -
        ((C43488 + C43473 * C43507 + C43496 * ae) * ce) / C43474;
    const double C714 =
        C43549 *
            (2 * C43576 - (ae * C43573) / C43474 +
             C43473 *
                 ((-(ae * C43473 * C43569) / C43335) / C43316 -
                  C43567 / C43474 +
                  C43473 * ((-(C43473 * std::pow(C43471, 6) * bs[6] * C43556) /
                             C43335) /
                                C43316 -
                            (ae * C43569) / C43474))) -
        ((2 * C43507 + C43473 * C43546 + C43527 * ae) * ce) / C43474;
    const double C1300 = C43579 * ((-(ae * C43563) / C43335) / C43316 -
                                   C43560 / C43474 + C43473 * C43576);
    const double C1301 =
        C43579 *
        (2 * C43576 - (ae * C43573) / C43474 +
         C43473 *
             ((-(ae * C43473 * C43569) / C43335) / C43316 - C43567 / C43474 +
              C43473 *
                  ((-(C43473 * std::pow(C43471, 6) * bs[6] * C43556) / C43335) /
                       C43316 -
                   (ae * C43569) / C43474)));
    const double C2341 = (-(C43473 * C43560) / C43335) / C43316 -
                         (ae * C43555) / C43474 -
                         (C43549 * C43507 * ce) / C43474 +
                         C43549 * (C43549 * C43576 - (C43507 * ce) / C43474);
    const double C2342 =
        (-(ae * C43563) / C43335) / C43316 - C43560 / C43474 + C43473 * C43576 -
        (C43549 * C43546 * ce) / C43474 +
        C43549 *
            (C43549 *
                 ((-(ae * C43473 * C43569) / C43335) / C43316 -
                  C43567 / C43474 +
                  C43473 * ((-(C43473 * std::pow(C43471, 6) * bs[6] * C43556) /
                             C43335) /
                                C43316 -
                            (ae * C43569) / C43474)) -
             (C43546 * ce) / C43474);
    const double C2755 = C43579 * (C43549 * C43576 - (C43507 * ce) / C43474);
    const double C4152 = (-(C43473 * C43560) / C43335) / C43316 -
                         (ae * C43555) / C43474 + C43576 * C43706;
    const double C4153 =
        (-(ae * C43563) / C43335) / C43316 - C43560 / C43474 + C43473 * C43576 +
        ((-(ae * C43473 * C43569) / C43335) / C43316 - C43567 / C43474 +
         C43473 * ((-(C43473 * std::pow(C43471, 6) * bs[6] * C43556) / C43335) /
                       C43316 -
                   (ae * C43569) / C43474)) *
            C43706;
    const double C7036 =
        2 * (C43549 * C43576 - (C43507 * ce) / C43474) -
        ((C43507 + C43537 * C43639) * ce) / C43474 +
        C43549 *
            (C43576 - (C43549 * C43537 * ce) / C43474 +
             C43549 *
                 (C43549 * ((-(C43473 * std::pow(C43471, 6) * bs[6] * C43556) /
                             C43335) /
                                C43316 -
                            (ae * C43569) / C43474) -
                  (C43537 * ce) / C43474));
    const double C7596 =
        C43579 *
        (C43576 - (C43549 * C43537 * ce) / C43474 +
         C43549 * (C43549 * ((-(C43473 * std::pow(C43471, 6) * bs[6] * C43556) /
                              C43335) /
                                 C43316 -
                             (ae * C43569) / C43474) -
                   (C43537 * ce) / C43474));
    const double C9418 =
        C43549 * C43576 - (C43507 * ce) / C43474 +
        (C43549 * ((-(C43473 * std::pow(C43471, 6) * bs[6] * C43556) / C43335) /
                       C43316 -
                   (ae * C43569) / C43474) -
         (C43537 * ce) / C43474) *
            C43706;
    const double C14632 =
        2 * C43579 * C43576 +
        C43579 * (C43576 +
                  ((-(C43473 * std::pow(C43471, 6) * bs[6] * C43556) / C43335) /
                       C43316 -
                   (ae * C43569) / C43474) *
                      C43706);
    const double C22021 =
        3 * ((-(C43931 * ce) / C43335) / C43316 - C43560 / C43474 +
             C43549 * C43989) -
        ((2 * C43931 + C43549 * C43986) * ce) / C43474 +
        C43549 *
            (2 * C43989 - (C43986 * ce) / C43474 +
             C43549 *
                 ((-(C43549 * C43528 * ce) / C43335) / C43316 -
                  C43567 / C43474 +
                  C43549 * ((-(C43549 * std::pow(C43471, 6) * bs[6] * C43556) /
                             C43335) /
                                C43316 -
                            (C43528 * ce) / C43474)));
    const double C22448 =
        C43579 *
        (2 * C43989 - (C43986 * ce) / C43474 +
         C43549 *
             ((-(C43549 * C43528 * ce) / C43335) / C43316 - C43567 / C43474 +
              C43549 *
                  ((-(C43549 * std::pow(C43471, 6) * bs[6] * C43556) / C43335) /
                       C43316 -
                   (C43528 * ce) / C43474)));
    const double C23840 =
        (-(C43931 * ce) / C43335) / C43316 - C43560 / C43474 + C43549 * C43989 +
        ((-(C43549 * C43528 * ce) / C43335) / C43316 - C43567 / C43474 +
         C43549 * ((-(C43549 * std::pow(C43471, 6) * bs[6] * C43556) / C43335) /
                       C43316 -
                   (C43528 * ce) / C43474)) *
            C43706;
    const double C28922 =
        2 * C43579 * C43989 +
        C43579 * (C43989 +
                  ((-(C43549 * std::pow(C43471, 6) * bs[6] * C43556) / C43335) /
                       C43316 -
                   (C43528 * ce) / C43474) *
                      C43706);
    const double C259 =
        3 * ((-(C43622 * ce) / C43335) / C43316 - C43619 / C43474 +
             C43473 * C43635) -
        ((2 * C43622 + C43473 * C43632) * ce) / C43474 +
        C43473 *
            (2 * C43635 - (C43632 * ce) / C43474 +
             C43473 *
                 ((-(C43473 * C43628 * ce) / C43335) / C43316 -
                  C43626 / C43474 +
                  C43473 * ((-(C43473 * std::pow(C43471, 6) * bs[6] * C43615) /
                             C43335) /
                                C43316 -
                            (C43628 * ce) / C43474)));
    const double C829 =
        C43549 * ((-(C43622 * ce) / C43335) / C43316 - C43619 / C43474 +
                  C43473 * C43635) -
        (ae * (C43473 * C43506 + C43487 + C43496 * ce)) / C43474;
    const double C830 =
        (((-2 * C43506) / C43335 - (C43473 * C43545) / C43335 -
          (C43527 * ce) / C43335) *
         ae) /
            C43316 +
        C43549 *
            (2 * C43635 - (C43632 * ce) / C43474 +
             C43473 *
                 ((-(C43473 * C43628 * ce) / C43335) / C43316 -
                  C43626 / C43474 +
                  C43473 * ((-(C43473 * std::pow(C43471, 6) * bs[6] * C43615) /
                             C43335) /
                                C43316 -
                            (C43628 * ce) / C43474)));
    const double C1419 = C43579 * ((-(C43622 * ce) / C43335) / C43316 -
                                   C43619 / C43474 + C43473 * C43635);
    const double C1420 =
        C43579 *
        (2 * C43635 - (C43632 * ce) / C43474 +
         C43473 *
             ((-(C43473 * C43628 * ce) / C43335) / C43316 - C43626 / C43474 +
              C43473 *
                  ((-(C43473 * std::pow(C43471, 6) * bs[6] * C43615) / C43335) /
                       C43316 -
                   (C43628 * ce) / C43474)));
    const double C2429 = (-(C43473 * C43619) / C43335) / C43316 -
                         (C43614 * ce) / C43474 -
                         (ae * C43549 * C43506) / C43474 +
                         C43549 * (C43549 * C43635 - (ae * C43506) / C43474);
    const double C2430 =
        (-(C43622 * ce) / C43335) / C43316 - C43619 / C43474 + C43473 * C43635 -
        (ae * C43549 * C43545) / C43474 +
        C43549 *
            (C43549 *
                 ((-(C43473 * C43628 * ce) / C43335) / C43316 -
                  C43626 / C43474 +
                  C43473 * ((-(C43473 * std::pow(C43471, 6) * bs[6] * C43615) /
                             C43335) /
                                C43316 -
                            (C43628 * ce) / C43474)) -
             (ae * C43545) / C43474);
    const double C2867 =
        C43549 * C43579 * C43635 - (ae * C43579 * C43506) / C43474;
    const double C4243 = (-(C43473 * C43619) / C43335) / C43316 -
                         (C43614 * ce) / C43474 + C43635 * C43706;
    const double C4244 =
        (-(C43622 * ce) / C43335) / C43316 - C43619 / C43474 + C43473 * C43635 +
        ((-(C43473 * C43628 * ce) / C43335) / C43316 - C43626 / C43474 +
         C43473 * ((-(C43473 * std::pow(C43471, 6) * bs[6] * C43615) / C43335) /
                       C43316 -
                   (C43628 * ce) / C43474)) *
            C43706;
    const double C7156 =
        2 * (C43549 * C43635 - (ae * C43506) / C43474) -
        (ae * (C43536 * C43639 + C43506)) / C43474 +
        C43549 *
            (C43635 - (ae * C43549 * C43536) / C43474 +
             C43549 *
                 (C43549 * ((-(C43473 * std::pow(C43471, 6) * bs[6] * C43615) /
                             C43335) /
                                C43316 -
                            (C43628 * ce) / C43474) -
                  (ae * C43536) / C43474));
    const double C7748 =
        C43579 * C43635 - (ae * C43579 * C43549 * C43536) / C43474 +
        C43549 *
            (C43549 * C43579 *
                 ((-(C43473 * std::pow(C43471, 6) * bs[6] * C43615) / C43335) /
                      C43316 -
                  (C43628 * ce) / C43474) -
             (ae * C43579 * C43536) / C43474);
    const double C9526 =
        C43549 * (C43635 +
                  ((-(C43473 * std::pow(C43471, 6) * bs[6] * C43615) / C43335) /
                       C43316 -
                   (C43628 * ce) / C43474) *
                      C43706) -
        (ae * (C43536 * C43706 + C43506)) / C43474;
    const double C14752 =
        2 * C43579 * C43635 +
        C43579 * (C43635 +
                  ((-(C43473 * std::pow(C43471, 6) * bs[6] * C43615) / C43335) /
                       C43316 -
                   (C43628 * ce) / C43474) *
                      C43706);
    const double C22110 =
        3 * ((-(ae * C43941) / C43335) / C43316 - C43619 / C43474 +
             C43549 * C43998) +
        (((-2 * C43941) / C43335 - (C43549 * C43995) / C43335) * ae) / C43316 +
        C43549 *
            (2 * C43998 - (ae * C43995) / C43474 +
             C43549 *
                 ((-(ae * C43549 * C43525) / C43335) / C43316 -
                  C43626 / C43474 +
                  C43549 * ((-(C43549 * std::pow(C43471, 6) * bs[6] * C43615) /
                             C43335) /
                                C43316 -
                            (ae * C43525) / C43474)));
    const double C210 =
        3 * ((-(ae * C43593) / C43335) / C43316 - C43590 / C43474 +
             C43473 * C43606) +
        (((-2 * C43593) / C43335 - (C43473 * C43603) / C43335) * ae) / C43316 +
        C43473 *
            (2 * C43606 - (ae * C43603) / C43474 +
             C43473 *
                 ((-(ae * C43473 * C43599) / C43335) / C43316 -
                  C43597 / C43474 +
                  C43473 * ((-(C43473 * std::pow(C43471, 6) * bs[6] * C43586) /
                             C43335) /
                                C43316 -
                            (ae * C43599) / C43474)));
    const double C769 = C43549 * ((-(ae * C43593) / C43335) / C43316 -
                                  C43590 / C43474 + C43473 * C43606);
    const double C772 =
        C43549 *
        (2 * C43606 - (ae * C43603) / C43474 +
         C43473 *
             ((-(ae * C43473 * C43599) / C43335) / C43316 - C43597 / C43474 +
              C43473 *
                  ((-(C43473 * std::pow(C43471, 6) * bs[6] * C43586) / C43335) /
                       C43316 -
                   (ae * C43599) / C43474)));
    const double C1359 =
        C43579 * ((-(ae * C43593) / C43335) / C43316 - C43590 / C43474 +
                  C43473 * C43606) -
        ((C43488 + C43473 * C43507 + C43496 * ae) * ce) / C43474;
    const double C1362 =
        C43579 *
            (2 * C43606 - (ae * C43603) / C43474 +
             C43473 *
                 ((-(ae * C43473 * C43599) / C43335) / C43316 -
                  C43597 / C43474 +
                  C43473 * ((-(C43473 * std::pow(C43471, 6) * bs[6] * C43586) /
                             C43335) /
                                C43316 -
                            (ae * C43599) / C43474))) -
        ((2 * C43507 + C43473 * C43546 + C43527 * ae) * ce) / C43474;
    const double C2385 = (-(C43473 * C43590) / C43335) / C43316 -
                         (ae * C43585) / C43474 + C43606 * C43639;
    const double C2386 =
        (-(ae * C43593) / C43335) / C43316 - C43590 / C43474 + C43473 * C43606 +
        ((-(ae * C43473 * C43599) / C43335) / C43316 - C43597 / C43474 +
         C43473 * ((-(C43473 * std::pow(C43471, 6) * bs[6] * C43586) / C43335) /
                       C43316 -
                   (ae * C43599) / C43474)) *
            C43639;
    const double C2811 =
        C43579 * C43549 * C43606 - (C43549 * C43507 * ce) / C43474;
    const double C4199 = (-(C43473 * C43590) / C43335) / C43316 -
                         (ae * C43585) / C43474 -
                         (C43579 * C43507 * ce) / C43474 +
                         C43579 * (C43579 * C43606 - (C43507 * ce) / C43474);
    const double C4200 =
        (-(ae * C43593) / C43335) / C43316 - C43590 / C43474 + C43473 * C43606 -
        (C43579 * C43546 * ce) / C43474 +
        C43579 *
            (C43579 *
                 ((-(ae * C43473 * C43599) / C43335) / C43316 -
                  C43597 / C43474 +
                  C43473 * ((-(C43473 * std::pow(C43471, 6) * bs[6] * C43586) /
                             C43335) /
                                C43316 -
                            (ae * C43599) / C43474)) -
             (C43546 * ce) / C43474);
    const double C7096 =
        2 * C43549 * C43606 +
        C43549 * (C43606 +
                  ((-(C43473 * std::pow(C43471, 6) * bs[6] * C43586) / C43335) /
                       C43316 -
                   (ae * C43599) / C43474) *
                      C43639);
    const double C7672 =
        C43579 * (C43606 +
                  ((-(C43473 * std::pow(C43471, 6) * bs[6] * C43586) / C43335) /
                       C43316 -
                   (ae * C43599) / C43474) *
                      C43639) -
        ((C43507 + C43537 * C43639) * ce) / C43474;
    const double C9472 =
        C43549 * C43606 - (C43579 * C43933 * ce) / C43474 +
        C43579 *
            (C43579 * C43549 *
                 ((-(C43473 * std::pow(C43471, 6) * bs[6] * C43586) / C43335) /
                      C43316 -
                  (ae * C43599) / C43474) -
             (C43933 * ce) / C43474);
    const double C14692 =
        2 * (C43579 * C43606 - (C43507 * ce) / C43474) -
        ((C43507 + C43537 * C43706) * ce) / C43474 +
        C43579 *
            (C43606 - (C43579 * C43537 * ce) / C43474 +
             C43579 *
                 (C43579 * ((-(C43473 * std::pow(C43471, 6) * bs[6] * C43586) /
                             C43335) /
                                C43316 -
                            (ae * C43599) / C43474) -
                  (C43537 * ce) / C43474));
    const double C43049 =
        3 * ((-(C44089 * ce) / C43335) / C43316 - C43590 / C43474 +
             C43579 * C44096) -
        ((2 * C44089 + C43579 * C44093) * ce) / C43474 +
        C43579 *
            (2 * C44096 - (C44093 * ce) / C43474 +
             C43579 *
                 ((-(C43579 * C43528 * ce) / C43335) / C43316 -
                  C43597 / C43474 +
                  C43579 * ((-(C43579 * std::pow(C43471, 6) * bs[6] * C43586) /
                             C43335) /
                                C43316 -
                            (C43528 * ce) / C43474)));
    const double C22188 =
        3 * ((-(ae * C43947) / C43335) / C43316 - C43658 / C43474 +
             C43549 * C44029) +
        (((-2 * C43947) / C43335 - (C43549 * C44026) / C43335) * ae) / C43316 +
        C43549 *
            (2 * C44029 - (ae * C44026) / C43474 +
             C43549 *
                 ((-(ae * C43549 * C43599) / C43335) / C43316 -
                  C43661 / C43474 +
                  C43549 * ((-(C43549 * std::pow(C43471, 6) * bs[6] * C43655) /
                             C43335) /
                                C43316 -
                            (ae * C43599) / C43474)));
    const double C22674 =
        2 * (C43549 * C44052 - (ae * C43972) / C43474) -
        (ae * (C43579 * C44026 + C44010 * ce)) / C43474 +
        C43549 *
            (C44052 - (ae * (C43579 * C43549 * C43599 + C44009)) / C43474 +
             C43549 *
                 (C43549 * ((-(C43579 * std::pow(C43471, 6) * bs[6] * C43655) /
                             C43335) /
                                C43316 -
                            (C43628 * ce) / C43474) -
                  (ae * (C43579 * C43599 + C43518)) / C43474));
    const double C23998 =
        (-(C43579 * C43620 * ce) / C43335) / C43316 - C43658 / C43474 +
        C43579 * C44052 -
        (ae * (C43579 * (C43579 * C43549 * C43599 + C44009) + C43947 +
               C43579 * C44003 * ce)) /
            C43474 +
        C43549 *
            (C43549 *
                 ((-(C43579 * C43628 * ce) / C43335) / C43316 -
                  C43661 / C43474 +
                  C43579 * ((-(C43579 * std::pow(C43471, 6) * bs[6] * C43655) /
                             C43335) /
                                C43316 -
                            (C43628 * ce) / C43474)) -
             (ae * (C43579 * (C43579 * C43599 + C43518) + C43591 +
                    C43579 * C43511 * ce)) /
                 C43474);
    const double C29156 =
        (((-2 * C43972) / C43335 -
          (C43579 * (C43579 * (C43579 * C43599 + C43518) + C43591 +
                     C43579 * C43511 * ce)) /
              C43335 -
          ((C43490 + C43511 * C43706) * ce) / C43335) *
         ae) /
            C43316 +
        C43549 *
            (2 * C44052 - ((C43620 + C43628 * C43706) * ce) / C43474 +
             C43579 *
                 ((-(C43579 * C43628 * ce) / C43335) / C43316 -
                  C43661 / C43474 +
                  C43579 * ((-(C43579 * std::pow(C43471, 6) * bs[6] * C43655) /
                             C43335) /
                                C43316 -
                            (C43628 * ce) / C43474)));
    const double C43185 =
        3 * ((-(C44100 * ce) / C43335) / C43316 - C43658 / C43474 +
             C43579 * C44052) -
        ((2 * C44100 + C43579 * C44102) * ce) / C43474 +
        C43579 *
            (2 * C44052 - (C44102 * ce) / C43474 +
             C43579 *
                 ((-(C43579 * C43628 * ce) / C43335) / C43316 -
                  C43661 / C43474 +
                  C43579 * ((-(C43579 * std::pow(C43471, 6) * bs[6] * C43655) /
                             C43335) /
                                C43316 -
                            (C43628 * ce) / C43474)));
    const double C22235 = C22230 * C44395;
    const double C446 =
        3 * ((-(C43677 * ce) / C43335) / C43316 - C43674 / C43474 +
             C43473 * C43690) -
        ((2 * C43677 + C43473 * C43687) * ce) / C43474 +
        C43473 *
            (2 * C43690 - (C43687 * ce) / C43474 +
             C43473 *
                 ((-(C43473 * C43683 * ce) / C43335) / C43316 -
                  C43681 / C43474 +
                  C43473 * ((-(C43473 * std::pow(C43471, 6) * bs[6] * C43670) /
                             C43335) /
                                C43316 -
                            (C43683 * ce) / C43474)));
    const double C1031 = C43549 * ((-(C43677 * ce) / C43335) / C43316 -
                                   C43674 / C43474 + C43473 * C43690);
    const double C1032 =
        C43549 *
        (2 * C43690 - (C43687 * ce) / C43474 +
         C43473 *
             ((-(C43473 * C43683 * ce) / C43335) / C43316 - C43681 / C43474 +
              C43473 *
                  ((-(C43473 * std::pow(C43471, 6) * bs[6] * C43670) / C43335) /
                       C43316 -
                   (C43683 * ce) / C43474)));
    const double C1621 =
        C43579 * ((-(C43677 * ce) / C43335) / C43316 - C43674 / C43474 +
                  C43473 * C43690) -
        (ae * (C43473 * C43506 + C43487 + C43496 * ce)) / C43474;
    const double C1622 =
        (((-2 * C43506) / C43335 - (C43473 * C43545) / C43335 -
          (C43527 * ce) / C43335) *
         ae) /
            C43316 +
        C43579 *
            (2 * C43690 - (C43687 * ce) / C43474 +
             C43473 *
                 ((-(C43473 * C43683 * ce) / C43335) / C43316 -
                  C43681 / C43474 +
                  C43473 * ((-(C43473 * std::pow(C43471, 6) * bs[6] * C43670) /
                             C43335) /
                                C43316 -
                            (C43683 * ce) / C43474)));
    const double C2555 = (-(C43473 * C43674) / C43335) / C43316 -
                         (C43669 * ce) / C43474 + C43690 * C43639;
    const double C2556 =
        (-(C43677 * ce) / C43335) / C43316 - C43674 / C43474 + C43473 * C43690 +
        ((-(C43473 * C43683 * ce) / C43335) / C43316 - C43681 / C43474 +
         C43473 * ((-(C43473 * std::pow(C43471, 6) * bs[6] * C43670) / C43335) /
                       C43316 -
                   (C43683 * ce) / C43474)) *
            C43639;
    const double C3029 =
        C43579 * C43549 * C43690 - (ae * C43549 * C43506) / C43474;
    const double C4369 = (-(C43473 * C43674) / C43335) / C43316 -
                         (C43669 * ce) / C43474 -
                         (ae * C43579 * C43506) / C43474 +
                         C43579 * (C43579 * C43690 - (ae * C43506) / C43474);
    const double C4370 =
        (-(C43677 * ce) / C43335) / C43316 - C43674 / C43474 + C43473 * C43690 -
        (ae * C43579 * C43545) / C43474 +
        C43579 *
            (C43579 *
                 ((-(C43473 * C43683 * ce) / C43335) / C43316 -
                  C43681 / C43474 +
                  C43473 * ((-(C43473 * std::pow(C43471, 6) * bs[6] * C43670) /
                             C43335) /
                                C43316 -
                            (C43683 * ce) / C43474)) -
             (ae * C43545) / C43474);
    const double C7314 =
        2 * C43549 * C43690 +
        C43549 * (C43690 +
                  ((-(C43473 * std::pow(C43471, 6) * bs[6] * C43670) / C43335) /
                       C43316 -
                   (C43683 * ce) / C43474) *
                      C43639);
    const double C7954 =
        C43579 * (C43690 +
                  ((-(C43473 * std::pow(C43471, 6) * bs[6] * C43670) / C43335) /
                       C43316 -
                   (C43683 * ce) / C43474) *
                      C43639) -
        (ae * (C43536 * C43639 + C43506)) / C43474;
    const double C9684 =
        C43549 * C43690 - (ae * C43579 * C43943) / C43474 +
        C43579 *
            (C43579 * C43549 *
                 ((-(C43473 * std::pow(C43471, 6) * bs[6] * C43670) / C43335) /
                      C43316 -
                  (C43683 * ce) / C43474) -
             (ae * C43943) / C43474);
    const double C14928 =
        2 * (C43579 * C43690 - (ae * C43506) / C43474) -
        (ae * (C43536 * C43706 + C43506)) / C43474 +
        C43579 *
            (C43690 - (ae * C43579 * C43536) / C43474 +
             C43579 *
                 (C43579 * ((-(C43473 * std::pow(C43471, 6) * bs[6] * C43670) /
                             C43335) /
                                C43316 -
                            (C43683 * ce) / C43474) -
                  (ae * C43536) / C43474));
    const double C43228 =
        3 * ((-(ae * C44104) / C43335) / C43316 - C43674 / C43474 +
             C43579 * C44111) +
        (((-2 * C44104) / C43335 - (C43579 * C44108) / C43335) * ae) / C43316 +
        C43579 *
            (2 * C44111 - (ae * C44108) / C43474 +
             C43579 *
                 ((-(ae * C43579 * C43525) / C43335) / C43316 -
                  C43681 / C43474 +
                  C43579 * ((-(C43579 * std::pow(C43471, 6) * bs[6] * C43670) /
                             C43335) /
                                C43316 -
                            (ae * C43525) / C43474)));
    const double C22277 =
        3 * ((-(C43948 * ce) / C43335) / C43316 - C43699 / C43474 +
             C43549 * C44038) -
        ((2 * C43948 + C43549 * C44035) * ce) / C43474 +
        C43549 *
            (2 * C44038 - (C44035 * ce) / C43474 +
             C43549 *
                 ((-(C43549 * C43683 * ce) / C43335) / C43316 -
                  C43702 / C43474 +
                  C43549 * ((-(C43549 * std::pow(C43471, 6) * bs[6] * C43696) /
                             C43335) /
                                C43316 -
                            (C43683 * ce) / C43474)));
    const double C22785 =
        (((-2 * C43884) / C43335 - (C43549 * C44020) / C43335 -
          (C44010 * ce) / C43335) *
         ae) /
            C43316 +
        C43579 *
            (2 * C44038 - (C44035 * ce) / C43474 +
             C43549 *
                 ((-(C43549 * C43683 * ce) / C43335) / C43316 -
                  C43702 / C43474 +
                  C43549 * ((-(C43549 * std::pow(C43471, 6) * bs[6] * C43696) /
                             C43335) /
                                C43316 -
                            (C43683 * ce) / C43474)));
    const double C24077 =
        (-(C43948 * ce) / C43335) / C43316 - C43699 / C43474 + C43549 * C44038 -
        (ae * C43579 * C44020) / C43474 +
        C43579 *
            (C43579 *
                 ((-(C43549 * C43683 * ce) / C43335) / C43316 -
                  C43702 / C43474 +
                  C43549 * ((-(C43549 * std::pow(C43471, 6) * bs[6] * C43696) /
                             C43335) /
                                C43316 -
                            (C43683 * ce) / C43474)) -
             (ae * C44020) / C43474);
    const double C29265 =
        2 * (C43579 * C44038 - (ae * C43884) / C43474) -
        (ae * (C44008 * C43706 + C43884)) / C43474 +
        C43579 *
            (C44038 - (ae * C43579 * C44008) / C43474 +
             C43579 *
                 (C43579 * ((-(C43549 * std::pow(C43471, 6) * bs[6] * C43696) /
                             C43335) /
                                C43316 -
                            (C43683 * ce) / C43474) -
                  (ae * C44008) / C43474));
    const double C43267 =
        3 * ((-(ae * C44113) / C43335) / C43316 - C43699 / C43474 +
             C43579 * C44120) +
        (((-2 * C44113) / C43335 - (C43579 * C44117) / C43335) * ae) / C43316 +
        C43579 *
            (2 * C44120 - (ae * C44117) / C43474 +
             C43579 *
                 ((-(ae * C43579 * C43569) / C43335) / C43316 -
                  C43702 / C43474 +
                  C43579 * ((-(C43579 * std::pow(C43471, 6) * bs[6] * C43696) /
                             C43335) /
                                C43316 -
                            (ae * C43569) / C43474)));
    const double C43008 = C43004 * C44497;
    const double C21978 = C21972 + C21973;
    const double C27007 = C22396 + C22397;
    const double C27002 = C22397 + C22396;
    const double C42954 = C28871 + C28870;
    const double C11334 = C1496 + C1488;
    const double C11333 = C1488 + C1496;
    const double C43142 = C14818 + C14820;
    const double C5667 = C1177 + C1173;
    const double C5663 = C1173 + C1177;
    const double C22321 = C7439 + C7441;
    const double C24643 = C24641 * C44595;
    const double C25929 = C24641 * C44595;
    const double C27010 = C27008 * C44407;
    const double C5127 = C44593 * C711;
    const double C15703 = C44593 * C711;
    const double C11093 = C44593 * C1300;
    const double C30599 = C44593 * C1300;
    const double C7041 = C44593 * C2341;
    const double C17533 = C44593 * C2341;
    const double C20637 = C44395 * C2341;
    const double C7601 = C44593 * C2755;
    const double C18039 = C44593 * C2755;
    const double C24711 = C44395 * C2755;
    const double C14635 = C44593 * C4152;
    const double C34043 = C44593 * C4152;
    const double C40371 = C44395 * C4152;
    const double C839 = C44497 * C829;
    const double C4677 = C44601 * C829;
    const double C15257 = C44601 * C829;
    const double C1429 = C44497 * C1419;
    const double C5283 = C44601 * C2429;
    const double C15859 = C44601 * C2429;
    const double C5943 = C44601 * C2867;
    const double C10563 = C44497 * C2867;
    const double C16477 = C44601 * C2867;
    const double C11257 = C44497 * C4243;
    const double C5205 = C44593 * C769;
    const double C15781 = C44593 * C769;
    const double C11173 = C44593 * C1359;
    const double C30679 = C44593 * C1359;
    const double C7099 = C44593 * C2385;
    const double C17587 = C44593 * C2385;
    const double C20703 = C44395 * C2385;
    const double C7675 = C44593 * C2811;
    const double C18109 = C44593 * C2811;
    const double C24783 = C44395 * C2811;
    const double C14697 = C44593 * C4199;
    const double C34101 = C44593 * C4199;
    const double C40426 = C44395 * C4199;
    const double C1041 = C44512 * C1031;
    const double C1631 = C44512 * C1621;
    const double C10163 = C44603 * C1621;
    const double C29687 = C44603 * C1621;
    const double C5511 = C44512 * C2555;
    const double C6161 = C44512 * C3029;
    const double C10783 = C44603 * C3029;
    const double C30289 = C44603 * C3029;
    const double C11491 = C44603 * C4369;
    const double C30955 = C44603 * C4369;
    const double C42959 = C42954 * C44497;
    const double C22325 = C22321 * C44395;
    const double C5131 = C5126 + C5127;
    const double C15707 = C15702 + C15703;
    const double C11098 = C11092 + C11093;
    const double C30604 = C30598 + C30599;
    const double C7043 = C7040 + C7041;
    const double C17535 = C17532 + C17533;
    const double C20641 = C20636 + C20637;
    const double C7603 = C7600 + C7601;
    const double C18041 = C18038 + C18039;
    const double C24712 = C24710 + C24711;
    const double C14638 = C14634 + C14635;
    const double C34046 = C34042 + C34043;
    const double C40373 = C40370 + C40371;
    const double C843 = C838 + C839;
    const double C4685 = C4676 + C4677;
    const double C15265 = C15256 + C15257;
    const double C1433 = C1428 + C1429;
    const double C5287 = C5282 + C5283;
    const double C15863 = C15858 + C15859;
    const double C5947 = C5942 + C5943;
    const double C10565 = C10562 + C10563;
    const double C16481 = C16476 + C16477;
    const double C11261 = C11256 + C11257;
    const double C5209 = C5204 + C5205;
    const double C15785 = C15780 + C15781;
    const double C11177 = C11172 + C11173;
    const double C30683 = C30678 + C30679;
    const double C7102 = C7098 + C7099;
    const double C17590 = C17586 + C17587;
    const double C20707 = C20702 + C20703;
    const double C7678 = C7674 + C7675;
    const double C18112 = C18108 + C18109;
    const double C24784 = C24782 + C24783;
    const double C14699 = C14696 + C14697;
    const double C34103 = C34100 + C34101;
    const double C40427 = C40425 + C40426;
    const double C1045 = C1040 + C1041;
    const double C1635 = C1630 + C1631;
    const double C10171 = C10162 + C10163;
    const double C29695 = C29686 + C29687;
    const double C5515 = C5510 + C5511;
    const double C6163 = C6160 + C6161;
    const double C10787 = C10782 + C10783;
    const double C30293 = C30288 + C30289;
    const double C11495 = C11490 + C11491;
    const double C30959 = C30954 + C30955;
    const double C25359 = C24712 * C44449;
    const double C40374 = C40373 * C44449;
    const double C11253 = C1433 * C44595;
    const double C13577 = C1433 * C44595;
    const double C12961 = C10565 * C44407;
    const double C14754 = C11261 * C44407;
    const double C40481 = C11261 * C44595;
    const double C42203 = C11261 * C44595;
    const double C20711 = C20707 * C44464;
    const double C24785 = C24784 * C44464;
    const double C5507 = C1045 * C44595;
    const double C6777 = C1045 * C44595;
    const double C7320 = C5515 * C44407;
    const double C20915 = C5515 * C44595;
    const double C21827 = C5515 * C44595;
    const double C7956 = C6163 * C44407;
    
    d2eexx[0] += (2 * std::pow(Pi, 2.5) *
                  ((C87 * C93 + C77 * C98 + C88 * C94 + C78 * C99 + C89 * C95 +
                    C79 * C100) *
                       C90 +
                   (C87 * C101 + C77 * C108 + C88 * C102 + C78 * C109 +
                    C89 * C103 + C79 * C110) *
                       C80 -
                   (C89 * C96 + C79 * C104 + C88 * C95 + C78 * C100 +
                    C87 * C94 + C77 * C99) *
                       C91 -
                   (C89 * C105 + C79 * C111 + C88 * C103 + C78 * C110 +
                    C87 * C102 + C77 * C109) *
                       C81 +
                   (C87 * C95 + C77 * C100 + C88 * C96 + C78 * C104 +
                    C89 * C97 + C79 * C106) *
                       C92 +
                   (C87 * C103 + C77 * C110 + C88 * C105 + C78 * C111 +
                    C89 * C107 + C79 * C112) *
                       C82) *
                  C44497 * C44512 * C44464 * C44449) /
                 (p * q * std::sqrt(p + q));
    d2eexy[0] += (2 * std::pow(Pi, 2.5) *
                  (((C87 * C93 + C77 * C98 + C88 * C94 + C78 * C99 + C89 * C95 +
                     C79 * C100) *
                        C151 +
                    (C87 * C152 + C77 * C157 + C88 * C153 + C78 * C158 +
                     C89 * C154 + C79 * C159) *
                        C44449) *
                       C44497 * C44512 * C80 -
                   ((C89 * C155 + C79 * C160 + C88 * C154 + C78 * C159 +
                     C87 * C153 + C77 * C158) *
                        C44449 +
                    (C89 * C96 + C79 * C104 + C88 * C95 + C78 * C100 +
                     C87 * C94 + C77 * C99) *
                        C151) *
                       C44497 * C44512 * C81 +
                   ((C87 * C95 + C77 * C100 + C88 * C96 + C78 * C104 +
                     C89 * C97 + C79 * C106) *
                        C151 +
                    (C87 * C154 + C77 * C159 + C88 * C155 + C78 * C160 +
                     C89 * C156 + C79 * C161) *
                        C44449) *
                       C44497 * C44512 * C82) *
                  C44464) /
                 (p * q * std::sqrt(p + q));
    d2eexz[0] += (2 * std::pow(Pi, 2.5) *
                  (((C87 * C93 + C77 * C98 + C88 * C94 + C78 * C99 + C89 * C95 +
                     C79 * C100) *
                        C200 +
                    (C87 * C201 + C77 * C206 + C88 * C202 + C78 * C207 +
                     C89 * C203 + C79 * C208) *
                        C44464) *
                       C44497 * C44512 * C44449 * C80 -
                   ((C89 * C204 + C79 * C209 + C88 * C203 + C78 * C208 +
                     C87 * C202 + C77 * C207) *
                        C44464 +
                    (C89 * C96 + C79 * C104 + C88 * C95 + C78 * C100 +
                     C87 * C94 + C77 * C99) *
                        C200) *
                       C44497 * C44512 * C44449 * C81 +
                   ((C87 * C95 + C77 * C100 + C88 * C96 + C78 * C104 +
                     C89 * C97 + C79 * C106) *
                        C200 +
                    (C87 * C203 + C77 * C208 + C88 * C204 + C78 * C209 +
                     C89 * C205 + C79 * C210) *
                        C44464) *
                       C44497 * C44512 * C44449 * C82)) /
                 (p * q * std::sqrt(p + q));
    d2eeyx[0] += (2 * std::pow(Pi, 2.5) *
                  (((C249 * C93 + C44497 * C250) * C90 +
                    (C249 * C101 + C44497 * C255) * C80 - C273 * C91 -
                    C274 * C81 + C275 * C92 + C276 * C82) *
                       C44512 * C77 +
                   (C273 * C90 + C274 * C80 - C275 * C91 - C276 * C81 +
                    C277 * C92 + C278 * C82) *
                       C44512 * C78 +
                   (C275 * C90 + C276 * C80 - C277 * C91 - C278 * C81 +
                    (C249 * C97 + C44497 * C254) * C92 +
                    (C249 * C107 + C44497 * C259) * C82) *
                       C44512 * C79) *
                  C44464 * C44449) /
                 (p * q * std::sqrt(p + q));
    d2eeyy[0] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C249 * C93 + C44497 * C250) * C151 +
            (C249 * C152 + C44497 * C316) * C44449) *
               C44512 * C77 +
           (C322 + C334) * C44512 * C78 + C338 * C79) *
              C80 -
          ((C336 + C330) * C44512 * C79 + (C335 + C325) * C44512 * C78 +
           (C334 + C322) * C44512 * C77) *
              C81 +
          (C338 * C77 + (C330 + C336) * C44512 * C78 +
           ((C249 * C97 + C44497 * C254) * C151 +
            (C249 * C156 + C44497 * C320) * C44449) *
               C44512 * C79) *
              C82) *
         C44464) /
        (p * q * std::sqrt(p + q));
    d2eeyz[0] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C249 * C93 + C44497 * C250) * C200 +
            (C249 * C201 + C44497 * C376) * C44464) *
               C44512 * C77 +
           (C382 + C394) * C44512 * C78 + C398 * C79) *
              C44449 * C80 -
          ((C396 + C390) * C44512 * C79 + (C395 + C385) * C44512 * C78 +
           (C394 + C382) * C44512 * C77) *
              C44449 * C81 +
          (C398 * C77 + (C390 + C396) * C44512 * C78 +
           ((C249 * C97 + C44497 * C254) * C200 +
            (C249 * C205 + C44497 * C380) * C44464) *
               C44512 * C79) *
              C44449 * C82)) /
        (p * q * std::sqrt(p + q));
    d2eezx[0] += (2 * std::pow(Pi, 2.5) *
                  (((C436 * C93 + C44512 * C437) * C90 +
                    (C436 * C101 + C44512 * C442) * C80 - C460 * C91 -
                    C461 * C81 + C462 * C92 + C463 * C82) *
                       C77 +
                   (C460 * C90 + C461 * C80 - C462 * C91 - C463 * C81 +
                    C464 * C92 + C465 * C82) *
                       C78 +
                   (C462 * C90 + C463 * C80 - C464 * C91 - C465 * C81 +
                    (C436 * C97 + C44512 * C441) * C92 +
                    (C436 * C107 + C44512 * C446) * C82) *
                       C79) *
                  C44497 * C44464 * C44449) /
                 (p * q * std::sqrt(p + q));
    d2eezy[0] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C436 * C93 + C44512 * C437) * C151 +
            (C436 * C152 + C44512 * C503) * C44449) *
               C77 +
           (C509 + C521) * C78 + C524 * C79) *
              C44497 * C80 -
          ((C523 + C517) * C79 + (C522 + C512) * C78 + (C521 + C509) * C77) *
              C44497 * C81 +
          (C524 * C77 + (C517 + C523) * C78 +
           ((C436 * C97 + C44512 * C441) * C151 +
            (C436 * C156 + C44512 * C507) * C44449) *
               C79) *
              C44497 * C82) *
         C44464) /
        (p * q * std::sqrt(p + q));
    d2eezz[0] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C436 * C93 + C44512 * C437) * C200 +
            (C436 * C201 + C44512 * C562) * C44464) *
               C77 +
           (C568 + C580) * C78 + C583 * C79) *
              C44497 * C44449 * C80 -
          ((C582 + C576) * C79 + (C581 + C571) * C78 + (C580 + C568) * C77) *
              C44497 * C44449 * C81 +
          (C583 * C77 + (C576 + C582) * C78 +
           ((C436 * C97 + C44512 * C441) * C200 +
            (C436 * C205 + C44512 * C566) * C44464) *
               C79) *
              C44497 * C44449 * C82)) /
        (p * q * std::sqrt(p + q));
    d2eexx[1] += (2 * std::pow(Pi, 2.5) *
                  (((C87 * C93 + C77 * C98 + C88 * C94 + C78 * C99 + C89 * C95 +
                     C79 * C100) *
                        C637 +
                    (C87 * C101 + C77 * C108 + C88 * C102 + C78 * C109 +
                     C89 * C103 + C79 * C110) *
                        C633 -
                    (C89 * C96 + C79 * C104 + C88 * C95 + C78 * C100 +
                     C87 * C94 + C77 * C99) *
                        C638 -
                    (C89 * C105 + C79 * C111 + C88 * C103 + C78 * C110 +
                     C87 * C102 + C77 * C109) *
                        C44595) *
                       C44497 * C44512 * C44464 * C635 +
                   ((C87 * C639 + C77 * C643 + C88 * C640 + C78 * C644 +
                     C89 * C641 + C79 * C645) *
                        C638 -
                    ((C89 * C646 + C79 * C651 + C88 * C647 + C78 * C652 +
                      C87 * C648 + C77 * C653) *
                         C633 +
                     (C89 * C640 + C79 * C644 + C88 * C639 + C78 * C643 +
                      C87 * C642 + C77 * C649) *
                         C637) +
                    (C87 * C647 + C77 * C652 + C88 * C646 + C78 * C651 +
                     C89 * C650 + C79 * C654) *
                        C44595) *
                       C44497 * C44512 * C44464 * C44597)) /
                 (p * q * std::sqrt(p + q));
    d2eexy[1] += (2 * std::pow(Pi, 2.5) *
                  (((C87 * C93 + C77 * C98 + C88 * C94 + C78 * C99 + C89 * C95 +
                     C79 * C100) *
                        C705 +
                    (C87 * C152 + C77 * C157 + C88 * C153 + C78 * C158 +
                     C89 * C154 + C79 * C159) *
                        C635 -
                    (C89 * C640 + C79 * C644 + C88 * C639 + C78 * C643 +
                     C87 * C642 + C77 * C649) *
                        C706 -
                    (C89 * C707 + C79 * C711 + C88 * C708 + C78 * C712 +
                     C87 * C709 + C77 * C713) *
                        C44597) *
                       C44497 * C44512 * C633 +
                   ((C87 * C639 + C77 * C643 + C88 * C640 + C78 * C644 +
                     C89 * C641 + C79 * C645) *
                        C706 -
                    ((C89 * C155 + C79 * C160 + C88 * C154 + C78 * C159 +
                      C87 * C153 + C77 * C158) *
                         C635 +
                     (C89 * C96 + C79 * C104 + C88 * C95 + C78 * C100 +
                      C87 * C94 + C77 * C99) *
                         C705) +
                    (C87 * C708 + C77 * C712 + C88 * C707 + C78 * C711 +
                     C89 * C710 + C79 * C714) *
                        C44597) *
                       C44497 * C44512 * C44595) *
                  C44464) /
                 (p * q * std::sqrt(p + q));
    d2eexz[1] += (2 * std::pow(Pi, 2.5) *
                  ((((C87 * C93 + C77 * C98 + C88 * C94 + C78 * C99 +
                      C89 * C95 + C79 * C100) *
                         C200 +
                     (C87 * C201 + C77 * C206 + C88 * C202 + C78 * C207 +
                      C89 * C203 + C79 * C208) *
                         C44464) *
                        C44497 * C44512 * C635 -
                    ((C89 * C765 + C79 * C769 + C88 * C766 + C78 * C770 +
                      C87 * C767 + C77 * C771) *
                         C44464 +
                     (C89 * C640 + C79 * C644 + C88 * C639 + C78 * C643 +
                      C87 * C642 + C77 * C649) *
                         C200) *
                        C44497 * C44512 * C44597) *
                       C633 +
                   (((C87 * C639 + C77 * C643 + C88 * C640 + C78 * C644 +
                      C89 * C641 + C79 * C645) *
                         C200 +
                     (C87 * C766 + C77 * C770 + C88 * C765 + C78 * C769 +
                      C89 * C768 + C79 * C772) *
                         C44464) *
                        C44497 * C44512 * C44597 -
                    ((C89 * C204 + C79 * C209 + C88 * C203 + C78 * C208 +
                      C87 * C202 + C77 * C207) *
                         C44464 +
                     (C89 * C96 + C79 * C104 + C88 * C95 + C78 * C100 +
                      C87 * C94 + C77 * C99) *
                         C200) *
                        C44497 * C44512 * C635) *
                       C44595)) /
                 (p * q * std::sqrt(p + q));
    d2eeyx[1] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C249 * C93 + C44497 * C250) * C637 +
            (C249 * C101 + C44497 * C255) * C633 - C273 * C638 -
            C274 * C44595) *
               C44512 * C77 +
           (C273 * C637 + C274 * C633 - C275 * C638 - C276 * C44595) * C44512 *
               C78 +
           (C275 * C637 + C276 * C633 - C277 * C638 - C278 * C44595) * C44512 *
               C79) *
              C44464 * C635 +
          ((C840 * C638 -
            ((C249 * C648 + C44497 * C827) * C633 +
             (C249 * C642 + C44497 * C824) * C637) +
            C841 * C44595) *
               C44512 * C77 +
           (C842 * C638 - (C841 * C633 + C840 * C637) + C843 * C44595) *
               C44512 * C78 +
           ((C249 * C641 + C44497 * C826) * C638 - (C843 * C633 + C842 * C637) +
            (C249 * C650 + C44497 * C830) * C44595) *
               C44512 * C79) *
              C44464 * C44597)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[1] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C249 * C93 + C44497 * C250) * C705 +
            (C249 * C152 + C44497 * C316) * C635 -
            (C249 * C642 + C44497 * C824) * C706 -
            (C249 * C709 + C44497 * C893) * C44597) *
               C44512 * C77 +
           (C898 + C899 - C900 - C910) * C44512 * C78 +
           (C903 + C904 - C905 - C911) * C44512 * C79) *
              C633 +
          ((C900 - (C899 + C898) + C910) * C44512 * C77 +
           (C905 - (C904 + C903) + C911) * C44512 * C78 +
           ((C249 * C641 + C44497 * C826) * C706 - (C333 * C635 + C277 * C705) +
            (C249 * C710 + C44497 * C896) * C44597) *
               C44512 * C79) *
              C44595) *
         C44464) /
        (p * q * std::sqrt(p + q));
    d2eeyz[1] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C249 * C93 + C44497 * C250) * C200 +
             (C249 * C201 + C44497 * C376) * C44464) *
                C44512 * C77 +
            (C382 + C394) * C44512 * C78 + C398 * C79) *
               C635 -
           ((C974 + C968) * C44512 * C79 + (C975 + C971) * C44512 * C78 +
            ((C249 * C767 + C44497 * C963) * C44464 +
             (C249 * C642 + C44497 * C824) * C200) *
                C44512 * C77) *
               C44597) *
              C633 +
          (((C971 + C975) * C44512 * C77 + (C968 + C974) * C44512 * C78 +
            ((C249 * C641 + C44497 * C826) * C200 +
             (C249 * C768 + C44497 * C964) * C44464) *
                C44512 * C79) *
               C44597 -
           ((C396 + C390) * C44512 * C79 + (C395 + C385) * C44512 * C78 +
            (C394 + C382) * C44512 * C77) *
               C635) *
              C44595)) /
        (p * q * std::sqrt(p + q));
    d2eezx[1] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C436 * C93 + C44512 * C437) * C637 +
            (C436 * C101 + C44512 * C442) * C633 - C460 * C638 -
            C461 * C44595) *
               C77 +
           (C460 * C637 + C461 * C633 - C462 * C638 - C463 * C44595) * C78 +
           (C462 * C637 + C463 * C633 - C464 * C638 - C465 * C44595) * C79) *
              C44497 * C44464 * C635 +
          ((C1042 * C638 -
            ((C436 * C648 + C44512 * C1029) * C633 +
             (C436 * C642 + C44512 * C1026) * C637) +
            C1043 * C44595) *
               C77 +
           (C1044 * C638 - (C1043 * C633 + C1042 * C637) + C1045 * C44595) *
               C78 +
           ((C436 * C641 + C44512 * C1028) * C638 -
            (C1045 * C633 + C1044 * C637) +
            (C436 * C650 + C44512 * C1032) * C44595) *
               C79) *
              C44497 * C44464 * C44597)) /
        (p * q * std::sqrt(p + q));
    d2eezy[1] += (2 * std::pow(Pi, 2.5) *
                  ((((C436 * C93 + C44512 * C437) * C705 +
                     (C436 * C152 + C44512 * C503) * C635 -
                     (C436 * C642 + C44512 * C1026) * C706 -
                     (C436 * C709 + C44512 * C1095) * C44597) *
                        C77 +
                    (C1100 + C1101 - C1102 - C1112) * C78 +
                    (C1105 + C1106 - C1107 - C1113) * C79) *
                       C44497 * C633 +
                   ((C1102 - (C1101 + C1100) + C1112) * C77 +
                    (C1107 - (C1106 + C1105) + C1113) * C78 +
                    ((C436 * C641 + C44512 * C1028) * C706 -
                     (C520 * C635 + C464 * C705) +
                     (C436 * C710 + C44512 * C1098) * C44597) *
                        C79) *
                       C44497 * C44595) *
                  C44464) /
                 (p * q * std::sqrt(p + q));
    d2eezz[1] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C436 * C93 + C44512 * C437) * C200 +
             (C436 * C201 + C44512 * C562) * C44464) *
                C77 +
            (C568 + C580) * C78 + C583 * C79) *
               C44497 * C635 -
           ((C1176 + C1170) * C79 + (C1177 + C1173) * C78 +
            ((C436 * C767 + C44512 * C1165) * C44464 +
             (C436 * C642 + C44512 * C1026) * C200) *
                C77) *
               C44497 * C44597) *
              C633 +
          (((C1173 + C1177) * C77 + (C1170 + C1176) * C78 +
            ((C436 * C641 + C44512 * C1028) * C200 +
             (C436 * C768 + C44512 * C1166) * C44464) *
                C79) *
               C44497 * C44597 -
           ((C582 + C576) * C79 + (C581 + C571) * C78 + (C580 + C568) * C77) *
               C44497 * C635) *
              C44595)) /
        (p * q * std::sqrt(p + q));
    d2eexx[2] += (2 * std::pow(Pi, 2.5) *
                  (((C87 * C93 + C77 * C98 + C88 * C94 + C78 * C99 + C89 * C95 +
                     C79 * C100) *
                        C637 +
                    (C87 * C101 + C77 * C108 + C88 * C102 + C78 * C109 +
                     C89 * C103 + C79 * C110) *
                        C633 -
                    (C89 * C96 + C79 * C104 + C88 * C95 + C78 * C100 +
                     C87 * C94 + C77 * C99) *
                        C638 -
                    (C89 * C105 + C79 * C111 + C88 * C103 + C78 * C110 +
                     C87 * C102 + C77 * C109) *
                        C44595) *
                       C44497 * C44512 * C1227 +
                   ((C87 * C1229 + C77 * C1233 + C88 * C1230 + C78 * C1234 +
                     C89 * C1231 + C79 * C1235) *
                        C638 -
                    ((C89 * C1236 + C79 * C1241 + C88 * C1237 + C78 * C1242 +
                      C87 * C1238 + C77 * C1243) *
                         C633 +
                     (C89 * C1230 + C79 * C1234 + C88 * C1229 + C78 * C1233 +
                      C87 * C1232 + C77 * C1239) *
                         C637) +
                    (C87 * C1237 + C77 * C1242 + C88 * C1236 + C78 * C1241 +
                     C89 * C1240 + C79 * C1244) *
                        C44595) *
                       C44497 * C44512 * C44599) *
                  C44449) /
                 (p * q * std::sqrt(p + q));
    d2eexy[2] += (2 * std::pow(Pi, 2.5) *
                  ((((C87 * C93 + C77 * C98 + C88 * C94 + C78 * C99 +
                      C89 * C95 + C79 * C100) *
                         C151 +
                     (C87 * C152 + C77 * C157 + C88 * C153 + C78 * C158 +
                      C89 * C154 + C79 * C159) *
                         C44449) *
                        C44497 * C44512 * C633 -
                    ((C89 * C155 + C79 * C160 + C88 * C154 + C78 * C159 +
                      C87 * C153 + C77 * C158) *
                         C44449 +
                     (C89 * C96 + C79 * C104 + C88 * C95 + C78 * C100 +
                      C87 * C94 + C77 * C99) *
                         C151) *
                        C44497 * C44512 * C44595) *
                       C1227 +
                   (((C87 * C1229 + C77 * C1233 + C88 * C1230 + C78 * C1234 +
                      C89 * C1231 + C79 * C1235) *
                         C151 +
                     (C87 * C1295 + C77 * C1299 + C88 * C1296 + C78 * C1300 +
                      C89 * C1297 + C79 * C1301) *
                         C44449) *
                        C44497 * C44512 * C44595 -
                    ((C89 * C1296 + C79 * C1300 + C88 * C1295 + C78 * C1299 +
                      C87 * C1298 + C77 * C1302) *
                         C44449 +
                     (C89 * C1230 + C79 * C1234 + C88 * C1229 + C78 * C1233 +
                      C87 * C1232 + C77 * C1239) *
                         C151) *
                        C44497 * C44512 * C633) *
                       C44599)) /
                 (p * q * std::sqrt(p + q));
    d2eexz[2] += (2 * std::pow(Pi, 2.5) *
                  (((C87 * C93 + C77 * C98 + C88 * C94 + C78 * C99 + C89 * C95 +
                     C79 * C100) *
                        C1353 +
                    (C87 * C201 + C77 * C206 + C88 * C202 + C78 * C207 +
                     C89 * C203 + C79 * C208) *
                        C1227 -
                    (C89 * C1230 + C79 * C1234 + C88 * C1229 + C78 * C1233 +
                     C87 * C1232 + C77 * C1239) *
                        C1354 -
                    (C89 * C1355 + C79 * C1359 + C88 * C1356 + C78 * C1360 +
                     C87 * C1357 + C77 * C1361) *
                        C44599) *
                       C44497 * C44512 * C44449 * C633 +
                   ((C87 * C1229 + C77 * C1233 + C88 * C1230 + C78 * C1234 +
                     C89 * C1231 + C79 * C1235) *
                        C1354 -
                    ((C89 * C204 + C79 * C209 + C88 * C203 + C78 * C208 +
                      C87 * C202 + C77 * C207) *
                         C1227 +
                     (C89 * C96 + C79 * C104 + C88 * C95 + C78 * C100 +
                      C87 * C94 + C77 * C99) *
                         C1353) +
                    (C87 * C1356 + C77 * C1360 + C88 * C1355 + C78 * C1359 +
                     C89 * C1358 + C79 * C1362) *
                        C44599) *
                       C44497 * C44512 * C44449 * C44595)) /
                 (p * q * std::sqrt(p + q));
    d2eeyx[2] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C249 * C93 + C44497 * C250) * C637 +
            (C249 * C101 + C44497 * C255) * C633 - C273 * C638 -
            C274 * C44595) *
               C44512 * C77 +
           (C273 * C637 + C274 * C633 - C275 * C638 - C276 * C44595) * C44512 *
               C78 +
           (C275 * C637 + C276 * C633 - C277 * C638 - C278 * C44595) * C44512 *
               C79) *
              C1227 +
          ((C1430 * C638 -
            ((C249 * C1238 + C44497 * C1417) * C633 +
             (C249 * C1232 + C44497 * C1414) * C637) +
            C1431 * C44595) *
               C44512 * C77 +
           (C1432 * C638 - (C1431 * C633 + C1430 * C637) + C1433 * C44595) *
               C44512 * C78 +
           ((C249 * C1231 + C44497 * C1416) * C638 -
            (C1433 * C633 + C1432 * C637) +
            (C249 * C1240 + C44497 * C1420) * C44595) *
               C44512 * C79) *
              C44599) *
         C44449) /
        (p * q * std::sqrt(p + q));
    d2eeyy[2] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C249 * C93 + C44497 * C250) * C151 +
             (C249 * C152 + C44497 * C316) * C44449) *
                C44512 * C77 +
            (C322 + C334) * C44512 * C78 + C338 * C79) *
               C633 -
           ((C336 + C330) * C44512 * C79 + (C335 + C325) * C44512 * C78 +
            (C334 + C322) * C44512 * C77) *
               C44595) *
              C1227 +
          (((C1488 + C1496) * C44512 * C77 + (C1491 + C1497) * C44512 * C78 +
            ((C249 * C1231 + C44497 * C1416) * C151 +
             (C249 * C1297 + C44497 * C1485) * C44449) *
                C44512 * C79) *
               C44595 -
           ((C1497 + C1491) * C44512 * C79 + (C1496 + C1488) * C44512 * C78 +
            ((C249 * C1298 + C44497 * C1486) * C44449 +
             (C249 * C1232 + C44497 * C1414) * C151) *
                C44512 * C77) *
               C633) *
              C44599)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[2] += (2 * std::pow(Pi, 2.5) *
                  ((((C249 * C93 + C44497 * C250) * C1353 +
                     (C249 * C201 + C44497 * C376) * C1227 -
                     (C249 * C1232 + C44497 * C1414) * C1354 -
                     (C249 * C1357 + C44497 * C1547) * C44599) *
                        C44512 * C77 +
                    (C1552 + C1553 - C1554 - C1564) * C44512 * C78 +
                    (C1557 + C1558 - C1559 - C1565) * C44512 * C79) *
                       C44449 * C633 +
                   ((C1554 - (C1553 + C1552) + C1564) * C44512 * C77 +
                    (C1559 - (C1558 + C1557) + C1565) * C44512 * C78 +
                    ((C249 * C1231 + C44497 * C1416) * C1354 -
                     (C393 * C1227 + C277 * C1353) +
                     (C249 * C1358 + C44497 * C1550) * C44599) *
                        C44512 * C79) *
                       C44449 * C44595)) /
                 (p * q * std::sqrt(p + q));
    d2eezx[2] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C436 * C93 + C44512 * C437) * C637 +
            (C436 * C101 + C44512 * C442) * C633 - C460 * C638 -
            C461 * C44595) *
               C77 +
           (C460 * C637 + C461 * C633 - C462 * C638 - C463 * C44595) * C78 +
           (C462 * C637 + C463 * C633 - C464 * C638 - C465 * C44595) * C79) *
              C44497 * C1227 +
          ((C1632 * C638 -
            ((C436 * C1238 + C44512 * C1619) * C633 +
             (C436 * C1232 + C44512 * C1616) * C637) +
            C1633 * C44595) *
               C77 +
           (C1634 * C638 - (C1633 * C633 + C1632 * C637) + C1635 * C44595) *
               C78 +
           ((C436 * C1231 + C44512 * C1618) * C638 -
            (C1635 * C633 + C1634 * C637) +
            (C436 * C1240 + C44512 * C1622) * C44595) *
               C79) *
              C44497 * C44599) *
         C44449) /
        (p * q * std::sqrt(p + q));
    d2eezy[2] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C436 * C93 + C44512 * C437) * C151 +
             (C436 * C152 + C44512 * C503) * C44449) *
                C77 +
            (C509 + C521) * C78 + C524 * C79) *
               C44497 * C633 -
           ((C523 + C517) * C79 + (C522 + C512) * C78 + (C521 + C509) * C77) *
               C44497 * C44595) *
              C1227 +
          (((C1690 + C1698) * C77 + (C1693 + C1699) * C78 +
            ((C436 * C1231 + C44512 * C1618) * C151 +
             (C436 * C1297 + C44512 * C1687) * C44449) *
                C79) *
               C44497 * C44595 -
           ((C1699 + C1693) * C79 + (C1698 + C1690) * C78 +
            ((C436 * C1298 + C44512 * C1688) * C44449 +
             (C436 * C1232 + C44512 * C1616) * C151) *
                C77) *
               C44497 * C633) *
              C44599)) /
        (p * q * std::sqrt(p + q));
    d2eezz[2] += (2 * std::pow(Pi, 2.5) *
                  ((((C436 * C93 + C44512 * C437) * C1353 +
                     (C436 * C201 + C44512 * C562) * C1227 -
                     (C436 * C1232 + C44512 * C1616) * C1354 -
                     (C436 * C1357 + C44512 * C1749) * C44599) *
                        C77 +
                    (C1754 + C1755 - C1756 - C1766) * C78 +
                    (C1759 + C1760 - C1761 - C1767) * C79) *
                       C44497 * C44449 * C633 +
                   ((C1756 - (C1755 + C1754) + C1766) * C77 +
                    (C1761 - (C1760 + C1759) + C1767) * C78 +
                    ((C436 * C1231 + C44512 * C1618) * C1354 -
                     (C579 * C1227 + C464 * C1353) +
                     (C436 * C1358 + C44512 * C1752) * C44599) *
                        C79) *
                       C44497 * C44449 * C44595)) /
                 (p * q * std::sqrt(p + q));
    d2eexx[3] += (2 * std::pow(Pi, 2.5) *
                  (((C87 * C93 + C77 * C98 + C88 * C94 + C78 * C99 + C89 * C95 +
                     C79 * C100) *
                        C1821 +
                    (C87 * C101 + C77 * C108 + C88 * C102 + C78 * C109 +
                     C89 * C103 + C79 * C110) *
                        C1817 -
                    (C89 * C96 + C79 * C104 + C88 * C95 + C78 * C100 +
                     C87 * C94 + C77 * C99) *
                        C1822 -
                    (C89 * C105 + C79 * C111 + C88 * C103 + C78 * C110 +
                     C87 * C102 + C77 * C109) *
                        C44595) *
                       C44497 * C44512 * C44464 * C1819 +
                   ((C87 * C639 + C77 * C643 + C88 * C640 + C78 * C644 +
                     C89 * C641 + C79 * C645) *
                        C1822 -
                    ((C89 * C646 + C79 * C651 + C88 * C647 + C78 * C652 +
                      C87 * C648 + C77 * C653) *
                         C1817 +
                     (C89 * C640 + C79 * C644 + C88 * C639 + C78 * C643 +
                      C87 * C642 + C77 * C649) *
                         C1821) +
                    (C87 * C647 + C77 * C652 + C88 * C646 + C78 * C651 +
                     C89 * C650 + C79 * C654) *
                        C44595) *
                       C44497 * C44512 * C44464 * C44597)) /
                 (p * q * std::sqrt(p + q));
    d2eexy[3] += (2 * std::pow(Pi, 2.5) *
                  (((C87 * C93 + C77 * C98 + C88 * C94 + C78 * C99 + C89 * C95 +
                     C79 * C100) *
                        C1873 +
                    (C87 * C152 + C77 * C157 + C88 * C153 + C78 * C158 +
                     C89 * C154 + C79 * C159) *
                        C1819 -
                    (C89 * C640 + C79 * C644 + C88 * C639 + C78 * C643 +
                     C87 * C642 + C77 * C649) *
                        C1874 -
                    (C89 * C707 + C79 * C711 + C88 * C708 + C78 * C712 +
                     C87 * C709 + C77 * C713) *
                        C44597) *
                       C44497 * C44512 * C1817 +
                   ((C87 * C639 + C77 * C643 + C88 * C640 + C78 * C644 +
                     C89 * C641 + C79 * C645) *
                        C1874 -
                    ((C89 * C155 + C79 * C160 + C88 * C154 + C78 * C159 +
                      C87 * C153 + C77 * C158) *
                         C1819 +
                     (C89 * C96 + C79 * C104 + C88 * C95 + C78 * C100 +
                      C87 * C94 + C77 * C99) *
                         C1873) +
                    (C87 * C708 + C77 * C712 + C88 * C707 + C78 * C711 +
                     C89 * C710 + C79 * C714) *
                        C44597) *
                       C44497 * C44512 * C44595) *
                  C44464) /
                 (p * q * std::sqrt(p + q));
    d2eexz[3] += (2 * std::pow(Pi, 2.5) *
                  ((((C87 * C93 + C77 * C98 + C88 * C94 + C78 * C99 +
                      C89 * C95 + C79 * C100) *
                         C200 +
                     (C87 * C201 + C77 * C206 + C88 * C202 + C78 * C207 +
                      C89 * C203 + C79 * C208) *
                         C44464) *
                        C44497 * C44512 * C1819 -
                    ((C89 * C765 + C79 * C769 + C88 * C766 + C78 * C770 +
                      C87 * C767 + C77 * C771) *
                         C44464 +
                     (C89 * C640 + C79 * C644 + C88 * C639 + C78 * C643 +
                      C87 * C642 + C77 * C649) *
                         C200) *
                        C44497 * C44512 * C44597) *
                       C1817 +
                   (((C87 * C639 + C77 * C643 + C88 * C640 + C78 * C644 +
                      C89 * C641 + C79 * C645) *
                         C200 +
                     (C87 * C766 + C77 * C770 + C88 * C765 + C78 * C769 +
                      C89 * C768 + C79 * C772) *
                         C44464) *
                        C44497 * C44512 * C44597 -
                    ((C89 * C204 + C79 * C209 + C88 * C203 + C78 * C208 +
                      C87 * C202 + C77 * C207) *
                         C44464 +
                     (C89 * C96 + C79 * C104 + C88 * C95 + C78 * C100 +
                      C87 * C94 + C77 * C99) *
                         C200) *
                        C44497 * C44512 * C1819) *
                       C44595)) /
                 (p * q * std::sqrt(p + q));
    d2eeyx[3] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C249 * C93 + C44497 * C250) * C1821 +
            (C249 * C101 + C44497 * C255) * C1817 - C273 * C1822 -
            C274 * C44595) *
               C44512 * C77 +
           (C273 * C1821 + C274 * C1817 - C275 * C1822 - C276 * C44595) *
               C44512 * C78 +
           (C275 * C1821 + C276 * C1817 - C277 * C1822 - C278 * C44595) *
               C44512 * C79) *
              C44464 * C1819 +
          ((C840 * C1822 -
            ((C249 * C648 + C44497 * C827) * C1817 +
             (C249 * C642 + C44497 * C824) * C1821) +
            C841 * C44595) *
               C44512 * C77 +
           (C842 * C1822 - (C841 * C1817 + C840 * C1821) + C843 * C44595) *
               C44512 * C78 +
           ((C249 * C641 + C44497 * C826) * C1822 -
            (C843 * C1817 + C842 * C1821) +
            (C249 * C650 + C44497 * C830) * C44595) *
               C44512 * C79) *
              C44464 * C44597)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[3] += (2 * std::pow(Pi, 2.5) *
                  ((((C249 * C93 + C44497 * C250) * C1873 +
                     (C249 * C152 + C44497 * C316) * C1819 -
                     (C249 * C642 + C44497 * C824) * C1874 -
                     (C249 * C709 + C44497 * C893) * C44597) *
                        C44512 * C77 +
                    (C2026 + C2027 - C2028 - C2029) * C44512 * C78 +
                    (C2030 + C2031 - C2032 - C2033) * C44512 * C79) *
                       C1817 +
                   ((C2028 - (C2027 + C2026) + C2029) * C44512 * C77 +
                    (C2032 - (C2031 + C2030) + C2033) * C44512 * C78 +
                    ((C249 * C641 + C44497 * C826) * C1874 -
                     (C333 * C1819 + C277 * C1873) +
                     (C249 * C710 + C44497 * C896) * C44597) *
                        C44512 * C79) *
                       C44595) *
                  C44464) /
                 (p * q * std::sqrt(p + q));
    d2eeyz[3] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C249 * C93 + C44497 * C250) * C200 +
             (C249 * C201 + C44497 * C376) * C44464) *
                C44512 * C77 +
            (C382 + C394) * C44512 * C78 + C398 * C79) *
               C1819 -
           ((C974 + C968) * C44512 * C79 + (C975 + C971) * C44512 * C78 +
            ((C249 * C767 + C44497 * C963) * C44464 +
             (C249 * C642 + C44497 * C824) * C200) *
                C44512 * C77) *
               C44597) *
              C1817 +
          (((C971 + C975) * C44512 * C77 + (C968 + C974) * C44512 * C78 +
            ((C249 * C641 + C44497 * C826) * C200 +
             (C249 * C768 + C44497 * C964) * C44464) *
                C44512 * C79) *
               C44597 -
           ((C396 + C390) * C44512 * C79 + (C395 + C385) * C44512 * C78 +
            (C394 + C382) * C44512 * C77) *
               C1819) *
              C44595)) /
        (p * q * std::sqrt(p + q));
    d2eezx[3] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C436 * C93 + C44512 * C437) * C1821 +
            (C436 * C101 + C44512 * C442) * C1817 - C460 * C1822 -
            C461 * C44595) *
               C77 +
           (C460 * C1821 + C461 * C1817 - C462 * C1822 - C463 * C44595) * C78 +
           (C462 * C1821 + C463 * C1817 - C464 * C1822 - C465 * C44595) * C79) *
              C44497 * C44464 * C1819 +
          ((C1042 * C1822 -
            ((C436 * C648 + C44512 * C1029) * C1817 +
             (C436 * C642 + C44512 * C1026) * C1821) +
            C1043 * C44595) *
               C77 +
           (C1044 * C1822 - (C1043 * C1817 + C1042 * C1821) + C1045 * C44595) *
               C78 +
           ((C436 * C641 + C44512 * C1028) * C1822 -
            (C1045 * C1817 + C1044 * C1821) +
            (C436 * C650 + C44512 * C1032) * C44595) *
               C79) *
              C44497 * C44464 * C44597)) /
        (p * q * std::sqrt(p + q));
    d2eezy[3] += (2 * std::pow(Pi, 2.5) *
                  ((((C436 * C93 + C44512 * C437) * C1873 +
                     (C436 * C152 + C44512 * C503) * C1819 -
                     (C436 * C642 + C44512 * C1026) * C1874 -
                     (C436 * C709 + C44512 * C1095) * C44597) *
                        C77 +
                    (C2184 + C2185 - C2186 - C2187) * C78 +
                    (C2188 + C2189 - C2190 - C2191) * C79) *
                       C44497 * C1817 +
                   ((C2186 - (C2185 + C2184) + C2187) * C77 +
                    (C2190 - (C2189 + C2188) + C2191) * C78 +
                    ((C436 * C641 + C44512 * C1028) * C1874 -
                     (C520 * C1819 + C464 * C1873) +
                     (C436 * C710 + C44512 * C1098) * C44597) *
                        C79) *
                       C44497 * C44595) *
                  C44464) /
                 (p * q * std::sqrt(p + q));
    d2eezz[3] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C436 * C93 + C44512 * C437) * C200 +
             (C436 * C201 + C44512 * C562) * C44464) *
                C77 +
            (C568 + C580) * C78 + C583 * C79) *
               C44497 * C1819 -
           ((C1176 + C1170) * C79 + (C1177 + C1173) * C78 +
            ((C436 * C767 + C44512 * C1165) * C44464 +
             (C436 * C642 + C44512 * C1026) * C200) *
                C77) *
               C44497 * C44597) *
              C1817 +
          (((C1173 + C1177) * C77 + (C1170 + C1176) * C78 +
            ((C436 * C641 + C44512 * C1028) * C200 +
             (C436 * C768 + C44512 * C1166) * C44464) *
                C79) *
               C44497 * C44597 -
           ((C582 + C576) * C79 + (C581 + C571) * C78 + (C580 + C568) * C77) *
               C44497 * C1819) *
              C44595)) /
        (p * q * std::sqrt(p + q));
    d2eexx[4] += (2 * std::pow(Pi, 2.5) *
                  (((C87 * C93 + C77 * C98 + C88 * C94 + C78 * C99 + C89 * C95 +
                     C79 * C100) *
                        C2283 +
                    (C87 * C101 + C77 * C108 + C88 * C102 + C78 * C109 +
                     C89 * C103 + C79 * C110) *
                        C44407) *
                       C44497 * C44512 * C44464 * C2280 -
                   ((C89 * C646 + C79 * C651 + C88 * C647 + C78 * C652 +
                     C87 * C648 + C77 * C653) *
                        C44407 +
                    (C89 * C640 + C79 * C644 + C88 * C639 + C78 * C643 +
                     C87 * C642 + C77 * C649) *
                        C2283) *
                       C44497 * C44512 * C44464 * C2281 +
                   ((C87 * C2284 + C77 * C2287 + C88 * C2285 + C78 * C2288 +
                     C89 * C2286 + C79 * C2289) *
                        C2283 +
                    (C87 * C2290 + C77 * C2293 + C88 * C2291 + C78 * C2294 +
                     C89 * C2292 + C79 * C2295) *
                        C44407) *
                       C44497 * C44512 * C44464 * C2282)) /
                 (p * q * std::sqrt(p + q));
    d2eexy[4] += (2 * std::pow(Pi, 2.5) *
                  ((C87 * C93 + C77 * C98 + C88 * C94 + C78 * C99 + C89 * C95 +
                    C79 * C100) *
                       C2334 +
                   (C87 * C152 + C77 * C157 + C88 * C153 + C78 * C158 +
                    C89 * C154 + C79 * C159) *
                       C2280 -
                   (C89 * C640 + C79 * C644 + C88 * C639 + C78 * C643 +
                    C87 * C642 + C77 * C649) *
                       C2335 -
                   (C89 * C707 + C79 * C711 + C88 * C708 + C78 * C712 +
                    C87 * C709 + C77 * C713) *
                       C2281 +
                   (C87 * C2284 + C77 * C2287 + C88 * C2285 + C78 * C2288 +
                    C89 * C2286 + C79 * C2289) *
                       C2336 +
                   (C87 * C2337 + C77 * C2340 + C88 * C2338 + C78 * C2341 +
                    C89 * C2339 + C79 * C2342) *
                       C2282) *
                  C44497 * C44512 * C44407 * C44464) /
                 (p * q * std::sqrt(p + q));
    d2eexz[4] += (2 * std::pow(Pi, 2.5) *
                  (((C87 * C93 + C77 * C98 + C88 * C94 + C78 * C99 + C89 * C95 +
                     C79 * C100) *
                        C200 +
                    (C87 * C201 + C77 * C206 + C88 * C202 + C78 * C207 +
                     C89 * C203 + C79 * C208) *
                        C44464) *
                       C44497 * C44512 * C2280 -
                   ((C89 * C765 + C79 * C769 + C88 * C766 + C78 * C770 +
                     C87 * C767 + C77 * C771) *
                        C44464 +
                    (C89 * C640 + C79 * C644 + C88 * C639 + C78 * C643 +
                     C87 * C642 + C77 * C649) *
                        C200) *
                       C44497 * C44512 * C2281 +
                   ((C87 * C2284 + C77 * C2287 + C88 * C2285 + C78 * C2288 +
                     C89 * C2286 + C79 * C2289) *
                        C200 +
                    (C87 * C2381 + C77 * C2384 + C88 * C2382 + C78 * C2385 +
                     C89 * C2383 + C79 * C2386) *
                        C44464) *
                       C44497 * C44512 * C2282) *
                  C44407) /
                 (p * q * std::sqrt(p + q));
    d2eeyx[4] += (2 * std::pow(Pi, 2.5) *
                  ((((C249 * C93 + C44497 * C250) * C2283 +
                     (C249 * C101 + C44497 * C255) * C44407) *
                        C44512 * C77 +
                    (C273 * C2283 + C274 * C44407) * C44512 * C78 +
                    (C275 * C2283 + C276 * C44407) * C44512 * C79) *
                       C44464 * C2280 -
                   ((C843 * C44407 + C842 * C2283) * C44512 * C79 +
                    (C841 * C44407 + C840 * C2283) * C44512 * C78 +
                    ((C249 * C648 + C44497 * C827) * C44407 +
                     (C249 * C642 + C44497 * C824) * C2283) *
                        C44512 * C77) *
                       C44464 * C2281 +
                   (((C249 * C2284 + C44497 * C2425) * C2283 +
                     (C249 * C2290 + C44497 * C2428) * C44407) *
                        C44512 * C77 +
                    ((C249 * C2285 + C44497 * C2426) * C2283 +
                     (C249 * C2291 + C44497 * C2429) * C44407) *
                        C44512 * C78 +
                    ((C249 * C2286 + C44497 * C2427) * C2283 +
                     (C249 * C2292 + C44497 * C2430) * C44407) *
                        C44512 * C79) *
                       C44464 * C2282)) /
                 (p * q * std::sqrt(p + q));
    d2eeyy[4] += (2 * std::pow(Pi, 2.5) *
                  (((C249 * C93 + C44497 * C250) * C2334 +
                    (C249 * C152 + C44497 * C316) * C2280 -
                    (C249 * C642 + C44497 * C824) * C2335 -
                    (C249 * C709 + C44497 * C893) * C2281 +
                    (C249 * C2284 + C44497 * C2425) * C2336 +
                    (C249 * C2337 + C44497 * C2469) * C2282) *
                       C44512 * C77 +
                   (C273 * C2334 + C331 * C2280 - C840 * C2335 - C908 * C2281 +
                    (C249 * C2285 + C44497 * C2426) * C2336 +
                    (C249 * C2338 + C44497 * C2470) * C2282) *
                       C44512 * C78 +
                   (C275 * C2334 + C332 * C2280 - C842 * C2335 - C909 * C2281 +
                    (C249 * C2286 + C44497 * C2427) * C2336 +
                    (C249 * C2339 + C44497 * C2471) * C2282) *
                       C44512 * C79) *
                  C44407 * C44464) /
                 (p * q * std::sqrt(p + q));
    d2eeyz[4] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C249 * C93 + C44497 * C250) * C200 +
            (C249 * C201 + C44497 * C376) * C44464) *
               C44512 * C77 +
           (C382 + C394) * C44512 * C78 + C398 * C79) *
              C2280 -
          ((C974 + C968) * C44512 * C79 + (C975 + C971) * C44512 * C78 +
           ((C249 * C767 + C44497 * C963) * C44464 +
            (C249 * C642 + C44497 * C824) * C200) *
               C44512 * C77) *
              C2281 +
          (((C249 * C2284 + C44497 * C2425) * C200 +
            (C249 * C2381 + C44497 * C2510) * C44464) *
               C44512 * C77 +
           ((C249 * C2285 + C44497 * C2426) * C200 +
            (C249 * C2382 + C44497 * C2511) * C44464) *
               C44512 * C78 +
           ((C249 * C2286 + C44497 * C2427) * C200 +
            (C249 * C2383 + C44497 * C2512) * C44464) *
               C44512 * C79) *
              C2282) *
         C44407) /
        (p * q * std::sqrt(p + q));
    d2eezx[4] += (2 * std::pow(Pi, 2.5) *
                  ((((C436 * C93 + C44512 * C437) * C2283 +
                     (C436 * C101 + C44512 * C442) * C44407) *
                        C77 +
                    (C460 * C2283 + C461 * C44407) * C78 +
                    (C462 * C2283 + C463 * C44407) * C79) *
                       C44497 * C44464 * C2280 -
                   ((C1045 * C44407 + C1044 * C2283) * C79 +
                    (C1043 * C44407 + C1042 * C2283) * C78 +
                    ((C436 * C648 + C44512 * C1029) * C44407 +
                     (C436 * C642 + C44512 * C1026) * C2283) *
                        C77) *
                       C44497 * C44464 * C2281 +
                   (((C436 * C2284 + C44512 * C2551) * C2283 +
                     (C436 * C2290 + C44512 * C2554) * C44407) *
                        C77 +
                    ((C436 * C2285 + C44512 * C2552) * C2283 +
                     (C436 * C2291 + C44512 * C2555) * C44407) *
                        C78 +
                    ((C436 * C2286 + C44512 * C2553) * C2283 +
                     (C436 * C2292 + C44512 * C2556) * C44407) *
                        C79) *
                       C44497 * C44464 * C2282)) /
                 (p * q * std::sqrt(p + q));
    d2eezy[4] += (2 * std::pow(Pi, 2.5) *
                  (((C436 * C93 + C44512 * C437) * C2334 +
                    (C436 * C152 + C44512 * C503) * C2280 -
                    (C436 * C642 + C44512 * C1026) * C2335 -
                    (C436 * C709 + C44512 * C1095) * C2281 +
                    (C436 * C2284 + C44512 * C2551) * C2336 +
                    (C436 * C2337 + C44512 * C2595) * C2282) *
                       C77 +
                   (C460 * C2334 + C518 * C2280 - C1042 * C2335 -
                    C1110 * C2281 + (C436 * C2285 + C44512 * C2552) * C2336 +
                    (C436 * C2338 + C44512 * C2596) * C2282) *
                       C78 +
                   (C462 * C2334 + C519 * C2280 - C1044 * C2335 -
                    C1111 * C2281 + (C436 * C2286 + C44512 * C2553) * C2336 +
                    (C436 * C2339 + C44512 * C2597) * C2282) *
                       C79) *
                  C44497 * C44407 * C44464) /
                 (p * q * std::sqrt(p + q));
    d2eezz[4] += (2 * std::pow(Pi, 2.5) *
                  ((((C436 * C93 + C44512 * C437) * C200 +
                     (C436 * C201 + C44512 * C562) * C44464) *
                        C77 +
                    (C568 + C580) * C78 + C583 * C79) *
                       C44497 * C2280 -
                   ((C1176 + C1170) * C79 + (C1177 + C1173) * C78 +
                    ((C436 * C767 + C44512 * C1165) * C44464 +
                     (C436 * C642 + C44512 * C1026) * C200) *
                        C77) *
                       C44497 * C2281 +
                   (((C436 * C2284 + C44512 * C2551) * C200 +
                     (C436 * C2381 + C44512 * C2636) * C44464) *
                        C77 +
                    ((C436 * C2285 + C44512 * C2552) * C200 +
                     (C436 * C2382 + C44512 * C2637) * C44464) *
                        C78 +
                    ((C436 * C2286 + C44512 * C2553) * C200 +
                     (C436 * C2383 + C44512 * C2638) * C44464) *
                        C79) *
                       C44497 * C2282) *
                  C44407) /
                 (p * q * std::sqrt(p + q));
    d2eexx[5] += (2 * std::pow(Pi, 2.5) *
                  ((((C87 * C93 + C77 * C98 + C88 * C94 + C78 * C99 +
                      C89 * C95 + C79 * C100) *
                         C2283 +
                     (C87 * C101 + C77 * C108 + C88 * C102 + C78 * C109 +
                      C89 * C103 + C79 * C110) *
                         C44407) *
                        C44497 * C44512 * C1227 -
                    ((C89 * C1236 + C79 * C1241 + C88 * C1237 + C78 * C1242 +
                      C87 * C1238 + C77 * C1243) *
                         C44407 +
                     (C89 * C1230 + C79 * C1234 + C88 * C1229 + C78 * C1233 +
                      C87 * C1232 + C77 * C1239) *
                         C2283) *
                        C44497 * C44512 * C44599) *
                       C1819 +
                   (((C87 * C2689 + C77 * C2692 + C88 * C2690 + C78 * C2693 +
                      C89 * C2691 + C79 * C2694) *
                         C2283 +
                     (C87 * C2695 + C77 * C2698 + C88 * C2696 + C78 * C2699 +
                      C89 * C2697 + C79 * C2700) *
                         C44407) *
                        C44497 * C44512 * C44599 -
                    ((C89 * C646 + C79 * C651 + C88 * C647 + C78 * C652 +
                      C87 * C648 + C77 * C653) *
                         C44407 +
                     (C89 * C640 + C79 * C644 + C88 * C639 + C78 * C643 +
                      C87 * C642 + C77 * C649) *
                         C2283) *
                        C44497 * C44512 * C1227) *
                       C44597)) /
                 (p * q * std::sqrt(p + q));
    d2eexy[5] += (2 * std::pow(Pi, 2.5) *
                  (((C87 * C93 + C77 * C98 + C88 * C94 + C78 * C99 + C89 * C95 +
                     C79 * C100) *
                        C1873 +
                    (C87 * C152 + C77 * C157 + C88 * C153 + C78 * C158 +
                     C89 * C154 + C79 * C159) *
                        C1819 -
                    (C89 * C640 + C79 * C644 + C88 * C639 + C78 * C643 +
                     C87 * C642 + C77 * C649) *
                        C1874 -
                    (C89 * C707 + C79 * C711 + C88 * C708 + C78 * C712 +
                     C87 * C709 + C77 * C713) *
                        C44597) *
                       C44497 * C44512 * C44407 * C1227 +
                   ((C87 * C2689 + C77 * C2692 + C88 * C2690 + C78 * C2693 +
                     C89 * C2691 + C79 * C2694) *
                        C1874 -
                    ((C89 * C1296 + C79 * C1300 + C88 * C1295 + C78 * C1299 +
                      C87 * C1298 + C77 * C1302) *
                         C1819 +
                     (C89 * C1230 + C79 * C1234 + C88 * C1229 + C78 * C1233 +
                      C87 * C1232 + C77 * C1239) *
                         C1873) +
                    (C87 * C2751 + C77 * C2754 + C88 * C2752 + C78 * C2755 +
                     C89 * C2753 + C79 * C2756) *
                        C44597) *
                       C44497 * C44512 * C44407 * C44599)) /
                 (p * q * std::sqrt(p + q));
    d2eexz[5] += (2 * std::pow(Pi, 2.5) *
                  (((C87 * C93 + C77 * C98 + C88 * C94 + C78 * C99 + C89 * C95 +
                     C79 * C100) *
                        C1353 +
                    (C87 * C201 + C77 * C206 + C88 * C202 + C78 * C207 +
                     C89 * C203 + C79 * C208) *
                        C1227 -
                    (C89 * C1230 + C79 * C1234 + C88 * C1229 + C78 * C1233 +
                     C87 * C1232 + C77 * C1239) *
                        C1354 -
                    (C89 * C1355 + C79 * C1359 + C88 * C1356 + C78 * C1360 +
                     C87 * C1357 + C77 * C1361) *
                        C44599) *
                       C44497 * C44512 * C1819 +
                   ((C87 * C2689 + C77 * C2692 + C88 * C2690 + C78 * C2693 +
                     C89 * C2691 + C79 * C2694) *
                        C1354 -
                    ((C89 * C765 + C79 * C769 + C88 * C766 + C78 * C770 +
                      C87 * C767 + C77 * C771) *
                         C1227 +
                     (C89 * C640 + C79 * C644 + C88 * C639 + C78 * C643 +
                      C87 * C642 + C77 * C649) *
                         C1353) +
                    (C87 * C2807 + C77 * C2810 + C88 * C2808 + C78 * C2811 +
                     C89 * C2809 + C79 * C2812) *
                        C44599) *
                       C44497 * C44512 * C44597) *
                  C44407) /
                 (p * q * std::sqrt(p + q));
    d2eeyx[5] += (2 * std::pow(Pi, 2.5) *
                  (((((C249 * C93 + C44497 * C250) * C2283 +
                      (C249 * C101 + C44497 * C255) * C44407) *
                         C44512 * C77 +
                     (C273 * C2283 + C274 * C44407) * C44512 * C78 +
                     (C275 * C2283 + C276 * C44407) * C44512 * C79) *
                        C1227 -
                    ((C1433 * C44407 + C1432 * C2283) * C44512 * C79 +
                     (C1431 * C44407 + C1430 * C2283) * C44512 * C78 +
                     ((C249 * C1238 + C44497 * C1417) * C44407 +
                      (C249 * C1232 + C44497 * C1414) * C2283) *
                         C44512 * C77) *
                        C44599) *
                       C1819 +
                   ((((C249 * C2689 + C44497 * C2863) * C2283 +
                      (C249 * C2695 + C44497 * C2866) * C44407) *
                         C44512 * C77 +
                     ((C249 * C2690 + C44497 * C2864) * C2283 +
                      (C249 * C2696 + C44497 * C2867) * C44407) *
                         C44512 * C78 +
                     ((C249 * C2691 + C44497 * C2865) * C2283 +
                      (C249 * C2697 + C44497 * C2868) * C44407) *
                         C44512 * C79) *
                        C44599 -
                    ((C843 * C44407 + C842 * C2283) * C44512 * C79 +
                     (C841 * C44407 + C840 * C2283) * C44512 * C78 +
                     ((C249 * C648 + C44497 * C827) * C44407 +
                      (C249 * C642 + C44497 * C824) * C2283) *
                         C44512 * C77) *
                        C1227) *
                       C44597)) /
                 (p * q * std::sqrt(p + q));
    d2eeyy[5] += (2 * std::pow(Pi, 2.5) *
                  ((((C249 * C93 + C44497 * C250) * C1873 +
                     (C249 * C152 + C44497 * C316) * C1819 -
                     (C249 * C642 + C44497 * C824) * C1874 -
                     (C249 * C709 + C44497 * C893) * C44597) *
                        C44512 * C77 +
                    (C2026 + C2027 - C2028 - C2029) * C44512 * C78 +
                    (C2030 + C2031 - C2032 - C2033) * C44512 * C79) *
                       C44407 * C1227 +
                   (((C249 * C2689 + C44497 * C2863) * C1874 -
                     ((C249 * C1298 + C44497 * C1486) * C1819 +
                      (C249 * C1232 + C44497 * C1414) * C1873) +
                     (C249 * C2751 + C44497 * C2919) * C44597) *
                        C44512 * C77 +
                    ((C249 * C2690 + C44497 * C2864) * C1874 -
                     (C1494 * C1819 + C1430 * C1873) +
                     (C249 * C2752 + C44497 * C2920) * C44597) *
                        C44512 * C78 +
                    ((C249 * C2691 + C44497 * C2865) * C1874 -
                     (C1495 * C1819 + C1432 * C1873) +
                     (C249 * C2753 + C44497 * C2921) * C44597) *
                        C44512 * C79) *
                       C44407 * C44599)) /
                 (p * q * std::sqrt(p + q));
    d2eeyz[5] += (2 * std::pow(Pi, 2.5) *
                  ((((C249 * C93 + C44497 * C250) * C1353 +
                     (C249 * C201 + C44497 * C376) * C1227 -
                     (C249 * C1232 + C44497 * C1414) * C1354 -
                     (C249 * C1357 + C44497 * C1547) * C44599) *
                        C44512 * C77 +
                    (C1552 + C1553 - C1554 - C1564) * C44512 * C78 +
                    (C1557 + C1558 - C1559 - C1565) * C44512 * C79) *
                       C1819 +
                   (((C249 * C2689 + C44497 * C2863) * C1354 -
                     ((C249 * C767 + C44497 * C963) * C1227 +
                      (C249 * C642 + C44497 * C824) * C1353) +
                     (C249 * C2807 + C44497 * C2972) * C44599) *
                        C44512 * C77 +
                    ((C249 * C2690 + C44497 * C2864) * C1354 -
                     (C973 * C1227 + C840 * C1353) +
                     (C249 * C2808 + C44497 * C2973) * C44599) *
                        C44512 * C78 +
                    ((C249 * C2691 + C44497 * C2865) * C1354 -
                     (C972 * C1227 + C842 * C1353) +
                     (C249 * C2809 + C44497 * C2974) * C44599) *
                        C44512 * C79) *
                       C44597) *
                  C44407) /
                 (p * q * std::sqrt(p + q));
    d2eezx[5] += (2 * std::pow(Pi, 2.5) *
                  (((((C436 * C93 + C44512 * C437) * C2283 +
                      (C436 * C101 + C44512 * C442) * C44407) *
                         C77 +
                     (C460 * C2283 + C461 * C44407) * C78 +
                     (C462 * C2283 + C463 * C44407) * C79) *
                        C44497 * C1227 -
                    ((C1635 * C44407 + C1634 * C2283) * C79 +
                     (C1633 * C44407 + C1632 * C2283) * C78 +
                     ((C436 * C1238 + C44512 * C1619) * C44407 +
                      (C436 * C1232 + C44512 * C1616) * C2283) *
                         C77) *
                        C44497 * C44599) *
                       C1819 +
                   ((((C436 * C2689 + C44512 * C3025) * C2283 +
                      (C436 * C2695 + C44512 * C3028) * C44407) *
                         C77 +
                     ((C436 * C2690 + C44512 * C3026) * C2283 +
                      (C436 * C2696 + C44512 * C3029) * C44407) *
                         C78 +
                     ((C436 * C2691 + C44512 * C3027) * C2283 +
                      (C436 * C2697 + C44512 * C3030) * C44407) *
                         C79) *
                        C44497 * C44599 -
                    ((C1045 * C44407 + C1044 * C2283) * C79 +
                     (C1043 * C44407 + C1042 * C2283) * C78 +
                     ((C436 * C648 + C44512 * C1029) * C44407 +
                      (C436 * C642 + C44512 * C1026) * C2283) *
                         C77) *
                        C44497 * C1227) *
                       C44597)) /
                 (p * q * std::sqrt(p + q));
    d2eezy[5] += (2 * std::pow(Pi, 2.5) *
                  ((((C436 * C93 + C44512 * C437) * C1873 +
                     (C436 * C152 + C44512 * C503) * C1819 -
                     (C436 * C642 + C44512 * C1026) * C1874 -
                     (C436 * C709 + C44512 * C1095) * C44597) *
                        C77 +
                    (C2184 + C2185 - C2186 - C2187) * C78 +
                    (C2188 + C2189 - C2190 - C2191) * C79) *
                       C44497 * C44407 * C1227 +
                   (((C436 * C2689 + C44512 * C3025) * C1874 -
                     ((C436 * C1298 + C44512 * C1688) * C1819 +
                      (C436 * C1232 + C44512 * C1616) * C1873) +
                     (C436 * C2751 + C44512 * C3081) * C44597) *
                        C77 +
                    ((C436 * C2690 + C44512 * C3026) * C1874 -
                     (C1696 * C1819 + C1632 * C1873) +
                     (C436 * C2752 + C44512 * C3082) * C44597) *
                        C78 +
                    ((C436 * C2691 + C44512 * C3027) * C1874 -
                     (C1697 * C1819 + C1634 * C1873) +
                     (C436 * C2753 + C44512 * C3083) * C44597) *
                        C79) *
                       C44497 * C44407 * C44599)) /
                 (p * q * std::sqrt(p + q));
    d2eezz[5] += (2 * std::pow(Pi, 2.5) *
                  ((((C436 * C93 + C44512 * C437) * C1353 +
                     (C436 * C201 + C44512 * C562) * C1227 -
                     (C436 * C1232 + C44512 * C1616) * C1354 -
                     (C436 * C1357 + C44512 * C1749) * C44599) *
                        C77 +
                    (C1754 + C1755 - C1756 - C1766) * C78 +
                    (C1759 + C1760 - C1761 - C1767) * C79) *
                       C44497 * C1819 +
                   (((C436 * C2689 + C44512 * C3025) * C1354 -
                     ((C436 * C767 + C44512 * C1165) * C1227 +
                      (C436 * C642 + C44512 * C1026) * C1353) +
                     (C436 * C2807 + C44512 * C3134) * C44599) *
                        C77 +
                    ((C436 * C2690 + C44512 * C3026) * C1354 -
                     (C1175 * C1227 + C1042 * C1353) +
                     (C436 * C2808 + C44512 * C3135) * C44599) *
                        C78 +
                    ((C436 * C2691 + C44512 * C3027) * C1354 -
                     (C1174 * C1227 + C1044 * C1353) +
                     (C436 * C2809 + C44512 * C3136) * C44599) *
                        C79) *
                       C44497 * C44597) *
                  C44407) /
                 (p * q * std::sqrt(p + q));
    d2eexx[6] += (2 * std::pow(Pi, 2.5) *
                  (((C87 * C93 + C77 * C98 + C88 * C94 + C78 * C99 + C89 * C95 +
                     C79 * C100) *
                        C1821 +
                    (C87 * C101 + C77 * C108 + C88 * C102 + C78 * C109 +
                     C89 * C103 + C79 * C110) *
                        C1817 -
                    (C89 * C96 + C79 * C104 + C88 * C95 + C78 * C100 +
                     C87 * C94 + C77 * C99) *
                        C1822 -
                    (C89 * C105 + C79 * C111 + C88 * C103 + C78 * C110 +
                     C87 * C102 + C77 * C109) *
                        C44595) *
                       C44497 * C44512 * C3187 +
                   ((C87 * C1229 + C77 * C1233 + C88 * C1230 + C78 * C1234 +
                     C89 * C1231 + C79 * C1235) *
                        C1822 -
                    ((C89 * C1236 + C79 * C1241 + C88 * C1237 + C78 * C1242 +
                      C87 * C1238 + C77 * C1243) *
                         C1817 +
                     (C89 * C1230 + C79 * C1234 + C88 * C1229 + C78 * C1233 +
                      C87 * C1232 + C77 * C1239) *
                         C1821) +
                    (C87 * C1237 + C77 * C1242 + C88 * C1236 + C78 * C1241 +
                     C89 * C1240 + C79 * C1244) *
                        C44595) *
                       C44497 * C44512 * C44599) *
                  C44449) /
                 (p * q * std::sqrt(p + q));
    d2eexy[6] += (2 * std::pow(Pi, 2.5) *
                  ((((C87 * C93 + C77 * C98 + C88 * C94 + C78 * C99 +
                      C89 * C95 + C79 * C100) *
                         C151 +
                     (C87 * C152 + C77 * C157 + C88 * C153 + C78 * C158 +
                      C89 * C154 + C79 * C159) *
                         C44449) *
                        C44497 * C44512 * C1817 -
                    ((C89 * C155 + C79 * C160 + C88 * C154 + C78 * C159 +
                      C87 * C153 + C77 * C158) *
                         C44449 +
                     (C89 * C96 + C79 * C104 + C88 * C95 + C78 * C100 +
                      C87 * C94 + C77 * C99) *
                         C151) *
                        C44497 * C44512 * C44595) *
                       C3187 +
                   (((C87 * C1229 + C77 * C1233 + C88 * C1230 + C78 * C1234 +
                      C89 * C1231 + C79 * C1235) *
                         C151 +
                     (C87 * C1295 + C77 * C1299 + C88 * C1296 + C78 * C1300 +
                      C89 * C1297 + C79 * C1301) *
                         C44449) *
                        C44497 * C44512 * C44595 -
                    ((C89 * C1296 + C79 * C1300 + C88 * C1295 + C78 * C1299 +
                      C87 * C1298 + C77 * C1302) *
                         C44449 +
                     (C89 * C1230 + C79 * C1234 + C88 * C1229 + C78 * C1233 +
                      C87 * C1232 + C77 * C1239) *
                         C151) *
                        C44497 * C44512 * C1817) *
                       C44599)) /
                 (p * q * std::sqrt(p + q));
    d2eexz[6] += (2 * std::pow(Pi, 2.5) *
                  (((C87 * C93 + C77 * C98 + C88 * C94 + C78 * C99 + C89 * C95 +
                     C79 * C100) *
                        C3289 +
                    (C87 * C201 + C77 * C206 + C88 * C202 + C78 * C207 +
                     C89 * C203 + C79 * C208) *
                        C3187 -
                    (C89 * C1230 + C79 * C1234 + C88 * C1229 + C78 * C1233 +
                     C87 * C1232 + C77 * C1239) *
                        C3290 -
                    (C89 * C1355 + C79 * C1359 + C88 * C1356 + C78 * C1360 +
                     C87 * C1357 + C77 * C1361) *
                        C44599) *
                       C44497 * C44512 * C44449 * C1817 +
                   ((C87 * C1229 + C77 * C1233 + C88 * C1230 + C78 * C1234 +
                     C89 * C1231 + C79 * C1235) *
                        C3290 -
                    ((C89 * C204 + C79 * C209 + C88 * C203 + C78 * C208 +
                      C87 * C202 + C77 * C207) *
                         C3187 +
                     (C89 * C96 + C79 * C104 + C88 * C95 + C78 * C100 +
                      C87 * C94 + C77 * C99) *
                         C3289) +
                    (C87 * C1356 + C77 * C1360 + C88 * C1355 + C78 * C1359 +
                     C89 * C1358 + C79 * C1362) *
                        C44599) *
                       C44497 * C44512 * C44449 * C44595)) /
                 (p * q * std::sqrt(p + q));
    d2eeyx[6] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C249 * C93 + C44497 * C250) * C1821 +
            (C249 * C101 + C44497 * C255) * C1817 - C273 * C1822 -
            C274 * C44595) *
               C44512 * C77 +
           (C273 * C1821 + C274 * C1817 - C275 * C1822 - C276 * C44595) *
               C44512 * C78 +
           (C275 * C1821 + C276 * C1817 - C277 * C1822 - C278 * C44595) *
               C44512 * C79) *
              C3187 +
          ((C1430 * C1822 -
            ((C249 * C1238 + C44497 * C1417) * C1817 +
             (C249 * C1232 + C44497 * C1414) * C1821) +
            C1431 * C44595) *
               C44512 * C77 +
           (C1432 * C1822 - (C1431 * C1817 + C1430 * C1821) + C1433 * C44595) *
               C44512 * C78 +
           ((C249 * C1231 + C44497 * C1416) * C1822 -
            (C1433 * C1817 + C1432 * C1821) +
            (C249 * C1240 + C44497 * C1420) * C44595) *
               C44512 * C79) *
              C44599) *
         C44449) /
        (p * q * std::sqrt(p + q));
    d2eeyy[6] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C249 * C93 + C44497 * C250) * C151 +
             (C249 * C152 + C44497 * C316) * C44449) *
                C44512 * C77 +
            (C322 + C334) * C44512 * C78 + C338 * C79) *
               C1817 -
           ((C336 + C330) * C44512 * C79 + (C335 + C325) * C44512 * C78 +
            (C334 + C322) * C44512 * C77) *
               C44595) *
              C3187 +
          (((C1488 + C1496) * C44512 * C77 + (C1491 + C1497) * C44512 * C78 +
            ((C249 * C1231 + C44497 * C1416) * C151 +
             (C249 * C1297 + C44497 * C1485) * C44449) *
                C44512 * C79) *
               C44595 -
           ((C1497 + C1491) * C44512 * C79 + (C1496 + C1488) * C44512 * C78 +
            ((C249 * C1298 + C44497 * C1486) * C44449 +
             (C249 * C1232 + C44497 * C1414) * C151) *
                C44512 * C77) *
               C1817) *
              C44599)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[6] += (2 * std::pow(Pi, 2.5) *
                  ((((C249 * C93 + C44497 * C250) * C3289 +
                     (C249 * C201 + C44497 * C376) * C3187 -
                     (C249 * C1232 + C44497 * C1414) * C3290 -
                     (C249 * C1357 + C44497 * C1547) * C44599) *
                        C44512 * C77 +
                    (C3442 + C3443 - C3444 - C3445) * C44512 * C78 +
                    (C3446 + C3447 - C3448 - C3449) * C44512 * C79) *
                       C44449 * C1817 +
                   ((C3444 - (C3443 + C3442) + C3445) * C44512 * C77 +
                    (C3448 - (C3447 + C3446) + C3449) * C44512 * C78 +
                    ((C249 * C1231 + C44497 * C1416) * C3290 -
                     (C393 * C3187 + C277 * C3289) +
                     (C249 * C1358 + C44497 * C1550) * C44599) *
                        C44512 * C79) *
                       C44449 * C44595)) /
                 (p * q * std::sqrt(p + q));
    d2eezx[6] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C436 * C93 + C44512 * C437) * C1821 +
            (C436 * C101 + C44512 * C442) * C1817 - C460 * C1822 -
            C461 * C44595) *
               C77 +
           (C460 * C1821 + C461 * C1817 - C462 * C1822 - C463 * C44595) * C78 +
           (C462 * C1821 + C463 * C1817 - C464 * C1822 - C465 * C44595) * C79) *
              C44497 * C3187 +
          ((C1632 * C1822 -
            ((C436 * C1238 + C44512 * C1619) * C1817 +
             (C436 * C1232 + C44512 * C1616) * C1821) +
            C1633 * C44595) *
               C77 +
           (C1634 * C1822 - (C1633 * C1817 + C1632 * C1821) + C1635 * C44595) *
               C78 +
           ((C436 * C1231 + C44512 * C1618) * C1822 -
            (C1635 * C1817 + C1634 * C1821) +
            (C436 * C1240 + C44512 * C1622) * C44595) *
               C79) *
              C44497 * C44599) *
         C44449) /
        (p * q * std::sqrt(p + q));
    d2eezy[6] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C436 * C93 + C44512 * C437) * C151 +
             (C436 * C152 + C44512 * C503) * C44449) *
                C77 +
            (C509 + C521) * C78 + C524 * C79) *
               C44497 * C1817 -
           ((C523 + C517) * C79 + (C522 + C512) * C78 + (C521 + C509) * C77) *
               C44497 * C44595) *
              C3187 +
          (((C1690 + C1698) * C77 + (C1693 + C1699) * C78 +
            ((C436 * C1231 + C44512 * C1618) * C151 +
             (C436 * C1297 + C44512 * C1687) * C44449) *
                C79) *
               C44497 * C44595 -
           ((C1699 + C1693) * C79 + (C1698 + C1690) * C78 +
            ((C436 * C1298 + C44512 * C1688) * C44449 +
             (C436 * C1232 + C44512 * C1616) * C151) *
                C77) *
               C44497 * C1817) *
              C44599)) /
        (p * q * std::sqrt(p + q));
    d2eezz[6] += (2 * std::pow(Pi, 2.5) *
                  ((((C436 * C93 + C44512 * C437) * C3289 +
                     (C436 * C201 + C44512 * C562) * C3187 -
                     (C436 * C1232 + C44512 * C1616) * C3290 -
                     (C436 * C1357 + C44512 * C1749) * C44599) *
                        C77 +
                    (C3600 + C3601 - C3602 - C3603) * C78 +
                    (C3604 + C3605 - C3606 - C3607) * C79) *
                       C44497 * C44449 * C1817 +
                   ((C3602 - (C3601 + C3600) + C3603) * C77 +
                    (C3606 - (C3605 + C3604) + C3607) * C78 +
                    ((C436 * C1231 + C44512 * C1618) * C3290 -
                     (C579 * C3187 + C464 * C3289) +
                     (C436 * C1358 + C44512 * C1752) * C44599) *
                        C79) *
                       C44497 * C44449 * C44595)) /
                 (p * q * std::sqrt(p + q));
    d2eexx[7] += (2 * std::pow(Pi, 2.5) *
                  ((((C87 * C93 + C77 * C98 + C88 * C94 + C78 * C99 +
                      C89 * C95 + C79 * C100) *
                         C2283 +
                     (C87 * C101 + C77 * C108 + C88 * C102 + C78 * C109 +
                      C89 * C103 + C79 * C110) *
                         C44407) *
                        C44497 * C44512 * C3187 -
                    ((C89 * C1236 + C79 * C1241 + C88 * C1237 + C78 * C1242 +
                      C87 * C1238 + C77 * C1243) *
                         C44407 +
                     (C89 * C1230 + C79 * C1234 + C88 * C1229 + C78 * C1233 +
                      C87 * C1232 + C77 * C1239) *
                         C2283) *
                        C44497 * C44512 * C44599) *
                       C635 +
                   (((C87 * C2689 + C77 * C2692 + C88 * C2690 + C78 * C2693 +
                      C89 * C2691 + C79 * C2694) *
                         C2283 +
                     (C87 * C2695 + C77 * C2698 + C88 * C2696 + C78 * C2699 +
                      C89 * C2697 + C79 * C2700) *
                         C44407) *
                        C44497 * C44512 * C44599 -
                    ((C89 * C646 + C79 * C651 + C88 * C647 + C78 * C652 +
                      C87 * C648 + C77 * C653) *
                         C44407 +
                     (C89 * C640 + C79 * C644 + C88 * C639 + C78 * C643 +
                      C87 * C642 + C77 * C649) *
                         C2283) *
                        C44497 * C44512 * C3187) *
                       C44597)) /
                 (p * q * std::sqrt(p + q));
    d2eexy[7] += (2 * std::pow(Pi, 2.5) *
                  (((C87 * C93 + C77 * C98 + C88 * C94 + C78 * C99 + C89 * C95 +
                     C79 * C100) *
                        C705 +
                    (C87 * C152 + C77 * C157 + C88 * C153 + C78 * C158 +
                     C89 * C154 + C79 * C159) *
                        C635 -
                    (C89 * C640 + C79 * C644 + C88 * C639 + C78 * C643 +
                     C87 * C642 + C77 * C649) *
                        C706 -
                    (C89 * C707 + C79 * C711 + C88 * C708 + C78 * C712 +
                     C87 * C709 + C77 * C713) *
                        C44597) *
                       C44497 * C44512 * C44407 * C3187 +
                   ((C87 * C2689 + C77 * C2692 + C88 * C2690 + C78 * C2693 +
                     C89 * C2691 + C79 * C2694) *
                        C706 -
                    ((C89 * C1296 + C79 * C1300 + C88 * C1295 + C78 * C1299 +
                      C87 * C1298 + C77 * C1302) *
                         C635 +
                     (C89 * C1230 + C79 * C1234 + C88 * C1229 + C78 * C1233 +
                      C87 * C1232 + C77 * C1239) *
                         C705) +
                    (C87 * C2751 + C77 * C2754 + C88 * C2752 + C78 * C2755 +
                     C89 * C2753 + C79 * C2756) *
                        C44597) *
                       C44497 * C44512 * C44407 * C44599)) /
                 (p * q * std::sqrt(p + q));
    d2eexz[7] += (2 * std::pow(Pi, 2.5) *
                  (((C87 * C93 + C77 * C98 + C88 * C94 + C78 * C99 + C89 * C95 +
                     C79 * C100) *
                        C3289 +
                    (C87 * C201 + C77 * C206 + C88 * C202 + C78 * C207 +
                     C89 * C203 + C79 * C208) *
                        C3187 -
                    (C89 * C1230 + C79 * C1234 + C88 * C1229 + C78 * C1233 +
                     C87 * C1232 + C77 * C1239) *
                        C3290 -
                    (C89 * C1355 + C79 * C1359 + C88 * C1356 + C78 * C1360 +
                     C87 * C1357 + C77 * C1361) *
                        C44599) *
                       C44497 * C44512 * C635 +
                   ((C87 * C2689 + C77 * C2692 + C88 * C2690 + C78 * C2693 +
                     C89 * C2691 + C79 * C2694) *
                        C3290 -
                    ((C89 * C765 + C79 * C769 + C88 * C766 + C78 * C770 +
                      C87 * C767 + C77 * C771) *
                         C3187 +
                     (C89 * C640 + C79 * C644 + C88 * C639 + C78 * C643 +
                      C87 * C642 + C77 * C649) *
                         C3289) +
                    (C87 * C2807 + C77 * C2810 + C88 * C2808 + C78 * C2811 +
                     C89 * C2809 + C79 * C2812) *
                        C44599) *
                       C44497 * C44512 * C44597) *
                  C44407) /
                 (p * q * std::sqrt(p + q));
    d2eeyx[7] += (2 * std::pow(Pi, 2.5) *
                  (((((C249 * C93 + C44497 * C250) * C2283 +
                      (C249 * C101 + C44497 * C255) * C44407) *
                         C44512 * C77 +
                     (C273 * C2283 + C274 * C44407) * C44512 * C78 +
                     (C275 * C2283 + C276 * C44407) * C44512 * C79) *
                        C3187 -
                    ((C1433 * C44407 + C1432 * C2283) * C44512 * C79 +
                     (C1431 * C44407 + C1430 * C2283) * C44512 * C78 +
                     ((C249 * C1238 + C44497 * C1417) * C44407 +
                      (C249 * C1232 + C44497 * C1414) * C2283) *
                         C44512 * C77) *
                        C44599) *
                       C635 +
                   ((((C249 * C2689 + C44497 * C2863) * C2283 +
                      (C249 * C2695 + C44497 * C2866) * C44407) *
                         C44512 * C77 +
                     ((C249 * C2690 + C44497 * C2864) * C2283 +
                      (C249 * C2696 + C44497 * C2867) * C44407) *
                         C44512 * C78 +
                     ((C249 * C2691 + C44497 * C2865) * C2283 +
                      (C249 * C2697 + C44497 * C2868) * C44407) *
                         C44512 * C79) *
                        C44599 -
                    ((C843 * C44407 + C842 * C2283) * C44512 * C79 +
                     (C841 * C44407 + C840 * C2283) * C44512 * C78 +
                     ((C249 * C648 + C44497 * C827) * C44407 +
                      (C249 * C642 + C44497 * C824) * C2283) *
                         C44512 * C77) *
                        C3187) *
                       C44597)) /
                 (p * q * std::sqrt(p + q));
    d2eeyy[7] += (2 * std::pow(Pi, 2.5) *
                  ((((C249 * C93 + C44497 * C250) * C705 +
                     (C249 * C152 + C44497 * C316) * C635 -
                     (C249 * C642 + C44497 * C824) * C706 -
                     (C249 * C709 + C44497 * C893) * C44597) *
                        C44512 * C77 +
                    (C898 + C899 - C900 - C910) * C44512 * C78 +
                    (C903 + C904 - C905 - C911) * C44512 * C79) *
                       C44407 * C3187 +
                   (((C249 * C2689 + C44497 * C2863) * C706 -
                     ((C249 * C1298 + C44497 * C1486) * C635 +
                      (C249 * C1232 + C44497 * C1414) * C705) +
                     (C249 * C2751 + C44497 * C2919) * C44597) *
                        C44512 * C77 +
                    ((C249 * C2690 + C44497 * C2864) * C706 -
                     (C1494 * C635 + C1430 * C705) +
                     (C249 * C2752 + C44497 * C2920) * C44597) *
                        C44512 * C78 +
                    ((C249 * C2691 + C44497 * C2865) * C706 -
                     (C1495 * C635 + C1432 * C705) +
                     (C249 * C2753 + C44497 * C2921) * C44597) *
                        C44512 * C79) *
                       C44407 * C44599)) /
                 (p * q * std::sqrt(p + q));
    d2eeyz[7] += (2 * std::pow(Pi, 2.5) *
                  ((((C249 * C93 + C44497 * C250) * C3289 +
                     (C249 * C201 + C44497 * C376) * C3187 -
                     (C249 * C1232 + C44497 * C1414) * C3290 -
                     (C249 * C1357 + C44497 * C1547) * C44599) *
                        C44512 * C77 +
                    (C3442 + C3443 - C3444 - C3445) * C44512 * C78 +
                    (C3446 + C3447 - C3448 - C3449) * C44512 * C79) *
                       C635 +
                   (((C249 * C2689 + C44497 * C2863) * C3290 -
                     ((C249 * C767 + C44497 * C963) * C3187 +
                      (C249 * C642 + C44497 * C824) * C3289) +
                     (C249 * C2807 + C44497 * C2972) * C44599) *
                        C44512 * C77 +
                    ((C249 * C2690 + C44497 * C2864) * C3290 -
                     (C973 * C3187 + C840 * C3289) +
                     (C249 * C2808 + C44497 * C2973) * C44599) *
                        C44512 * C78 +
                    ((C249 * C2691 + C44497 * C2865) * C3290 -
                     (C972 * C3187 + C842 * C3289) +
                     (C249 * C2809 + C44497 * C2974) * C44599) *
                        C44512 * C79) *
                       C44597) *
                  C44407) /
                 (p * q * std::sqrt(p + q));
    d2eezx[7] += (2 * std::pow(Pi, 2.5) *
                  (((((C436 * C93 + C44512 * C437) * C2283 +
                      (C436 * C101 + C44512 * C442) * C44407) *
                         C77 +
                     (C460 * C2283 + C461 * C44407) * C78 +
                     (C462 * C2283 + C463 * C44407) * C79) *
                        C44497 * C3187 -
                    ((C1635 * C44407 + C1634 * C2283) * C79 +
                     (C1633 * C44407 + C1632 * C2283) * C78 +
                     ((C436 * C1238 + C44512 * C1619) * C44407 +
                      (C436 * C1232 + C44512 * C1616) * C2283) *
                         C77) *
                        C44497 * C44599) *
                       C635 +
                   ((((C436 * C2689 + C44512 * C3025) * C2283 +
                      (C436 * C2695 + C44512 * C3028) * C44407) *
                         C77 +
                     ((C436 * C2690 + C44512 * C3026) * C2283 +
                      (C436 * C2696 + C44512 * C3029) * C44407) *
                         C78 +
                     ((C436 * C2691 + C44512 * C3027) * C2283 +
                      (C436 * C2697 + C44512 * C3030) * C44407) *
                         C79) *
                        C44497 * C44599 -
                    ((C1045 * C44407 + C1044 * C2283) * C79 +
                     (C1043 * C44407 + C1042 * C2283) * C78 +
                     ((C436 * C648 + C44512 * C1029) * C44407 +
                      (C436 * C642 + C44512 * C1026) * C2283) *
                         C77) *
                        C44497 * C3187) *
                       C44597)) /
                 (p * q * std::sqrt(p + q));
    d2eezy[7] += (2 * std::pow(Pi, 2.5) *
                  ((((C436 * C93 + C44512 * C437) * C705 +
                     (C436 * C152 + C44512 * C503) * C635 -
                     (C436 * C642 + C44512 * C1026) * C706 -
                     (C436 * C709 + C44512 * C1095) * C44597) *
                        C77 +
                    (C1100 + C1101 - C1102 - C1112) * C78 +
                    (C1105 + C1106 - C1107 - C1113) * C79) *
                       C44497 * C44407 * C3187 +
                   (((C436 * C2689 + C44512 * C3025) * C706 -
                     ((C436 * C1298 + C44512 * C1688) * C635 +
                      (C436 * C1232 + C44512 * C1616) * C705) +
                     (C436 * C2751 + C44512 * C3081) * C44597) *
                        C77 +
                    ((C436 * C2690 + C44512 * C3026) * C706 -
                     (C1696 * C635 + C1632 * C705) +
                     (C436 * C2752 + C44512 * C3082) * C44597) *
                        C78 +
                    ((C436 * C2691 + C44512 * C3027) * C706 -
                     (C1697 * C635 + C1634 * C705) +
                     (C436 * C2753 + C44512 * C3083) * C44597) *
                        C79) *
                       C44497 * C44407 * C44599)) /
                 (p * q * std::sqrt(p + q));
    d2eezz[7] += (2 * std::pow(Pi, 2.5) *
                  ((((C436 * C93 + C44512 * C437) * C3289 +
                     (C436 * C201 + C44512 * C562) * C3187 -
                     (C436 * C1232 + C44512 * C1616) * C3290 -
                     (C436 * C1357 + C44512 * C1749) * C44599) *
                        C77 +
                    (C3600 + C3601 - C3602 - C3603) * C78 +
                    (C3604 + C3605 - C3606 - C3607) * C79) *
                       C44497 * C635 +
                   (((C436 * C2689 + C44512 * C3025) * C3290 -
                     ((C436 * C767 + C44512 * C1165) * C3187 +
                      (C436 * C642 + C44512 * C1026) * C3289) +
                     (C436 * C2807 + C44512 * C3134) * C44599) *
                        C77 +
                    ((C436 * C2690 + C44512 * C3026) * C3290 -
                     (C1175 * C3187 + C1042 * C3289) +
                     (C436 * C2808 + C44512 * C3135) * C44599) *
                        C78 +
                    ((C436 * C2691 + C44512 * C3027) * C3290 -
                     (C1174 * C3187 + C1044 * C3289) +
                     (C436 * C2809 + C44512 * C3136) * C44599) *
                        C79) *
                       C44497 * C44597) *
                  C44407) /
                 (p * q * std::sqrt(p + q));
    d2eexx[8] += (2 * std::pow(Pi, 2.5) *
                  (((C87 * C93 + C77 * C98 + C88 * C94 + C78 * C99 + C89 * C95 +
                     C79 * C100) *
                        C2283 +
                    (C87 * C101 + C77 * C108 + C88 * C102 + C78 * C109 +
                     C89 * C103 + C79 * C110) *
                        C44407) *
                       C44497 * C44512 * C4095 -
                   ((C89 * C1236 + C79 * C1241 + C88 * C1237 + C78 * C1242 +
                     C87 * C1238 + C77 * C1243) *
                        C44407 +
                    (C89 * C1230 + C79 * C1234 + C88 * C1229 + C78 * C1233 +
                     C87 * C1232 + C77 * C1239) *
                        C2283) *
                       C44497 * C44512 * C4096 +
                   ((C87 * C4098 + C77 * C4101 + C88 * C4099 + C78 * C4102 +
                     C89 * C4100 + C79 * C4103) *
                        C2283 +
                    (C87 * C4104 + C77 * C4107 + C88 * C4105 + C78 * C4108 +
                     C89 * C4106 + C79 * C4109) *
                        C44407) *
                       C44497 * C44512 * C4097) *
                  C44449) /
                 (p * q * std::sqrt(p + q));
    d2eexy[8] += (2 * std::pow(Pi, 2.5) *
                  (((C87 * C93 + C77 * C98 + C88 * C94 + C78 * C99 + C89 * C95 +
                     C79 * C100) *
                        C151 +
                    (C87 * C152 + C77 * C157 + C88 * C153 + C78 * C158 +
                     C89 * C154 + C79 * C159) *
                        C44449) *
                       C44497 * C44512 * C44407 * C4095 -
                   ((C89 * C1296 + C79 * C1300 + C88 * C1295 + C78 * C1299 +
                     C87 * C1298 + C77 * C1302) *
                        C44449 +
                    (C89 * C1230 + C79 * C1234 + C88 * C1229 + C78 * C1233 +
                     C87 * C1232 + C77 * C1239) *
                        C151) *
                       C44497 * C44512 * C44407 * C4096 +
                   ((C87 * C4098 + C77 * C4101 + C88 * C4099 + C78 * C4102 +
                     C89 * C4100 + C79 * C4103) *
                        C151 +
                    (C87 * C4148 + C77 * C4151 + C88 * C4149 + C78 * C4152 +
                     C89 * C4150 + C79 * C4153) *
                        C44449) *
                       C44497 * C44512 * C44407 * C4097)) /
                 (p * q * std::sqrt(p + q));
    d2eexz[8] += (2 * std::pow(Pi, 2.5) *
                  ((C87 * C93 + C77 * C98 + C88 * C94 + C78 * C99 + C89 * C95 +
                    C79 * C100) *
                       C4192 +
                   (C87 * C201 + C77 * C206 + C88 * C202 + C78 * C207 +
                    C89 * C203 + C79 * C208) *
                       C4095 -
                   (C89 * C1230 + C79 * C1234 + C88 * C1229 + C78 * C1233 +
                    C87 * C1232 + C77 * C1239) *
                       C4193 -
                   (C89 * C1355 + C79 * C1359 + C88 * C1356 + C78 * C1360 +
                    C87 * C1357 + C77 * C1361) *
                       C4096 +
                   (C87 * C4098 + C77 * C4101 + C88 * C4099 + C78 * C4102 +
                    C89 * C4100 + C79 * C4103) *
                       C4194 +
                   (C87 * C4195 + C77 * C4198 + C88 * C4196 + C78 * C4199 +
                    C89 * C4197 + C79 * C4200) *
                       C4097) *
                  C44497 * C44512 * C44449 * C44407) /
                 (p * q * std::sqrt(p + q));
    d2eeyx[8] += (2 * std::pow(Pi, 2.5) *
                  ((((C249 * C93 + C44497 * C250) * C2283 +
                     (C249 * C101 + C44497 * C255) * C44407) *
                        C44512 * C77 +
                    (C273 * C2283 + C274 * C44407) * C44512 * C78 +
                    (C275 * C2283 + C276 * C44407) * C44512 * C79) *
                       C4095 -
                   ((C1433 * C44407 + C1432 * C2283) * C44512 * C79 +
                    (C1431 * C44407 + C1430 * C2283) * C44512 * C78 +
                    ((C249 * C1238 + C44497 * C1417) * C44407 +
                     (C249 * C1232 + C44497 * C1414) * C2283) *
                        C44512 * C77) *
                       C4096 +
                   (((C249 * C4098 + C44497 * C4239) * C2283 +
                     (C249 * C4104 + C44497 * C4242) * C44407) *
                        C44512 * C77 +
                    ((C249 * C4099 + C44497 * C4240) * C2283 +
                     (C249 * C4105 + C44497 * C4243) * C44407) *
                        C44512 * C78 +
                    ((C249 * C4100 + C44497 * C4241) * C2283 +
                     (C249 * C4106 + C44497 * C4244) * C44407) *
                        C44512 * C79) *
                       C4097) *
                  C44449) /
                 (p * q * std::sqrt(p + q));
    d2eeyy[8] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C249 * C93 + C44497 * C250) * C151 +
            (C249 * C152 + C44497 * C316) * C44449) *
               C44512 * C77 +
           (C322 + C334) * C44512 * C78 + C338 * C79) *
              C44407 * C4095 -
          ((C1497 + C1491) * C44512 * C79 + (C1496 + C1488) * C44512 * C78 +
           ((C249 * C1298 + C44497 * C1486) * C44449 +
            (C249 * C1232 + C44497 * C1414) * C151) *
               C44512 * C77) *
              C44407 * C4096 +
          (((C249 * C4098 + C44497 * C4239) * C151 +
            (C249 * C4148 + C44497 * C4283) * C44449) *
               C44512 * C77 +
           ((C249 * C4099 + C44497 * C4240) * C151 +
            (C249 * C4149 + C44497 * C4284) * C44449) *
               C44512 * C78 +
           ((C249 * C4100 + C44497 * C4241) * C151 +
            (C249 * C4150 + C44497 * C4285) * C44449) *
               C44512 * C79) *
              C44407 * C4097)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[8] += (2 * std::pow(Pi, 2.5) *
                  (((C249 * C93 + C44497 * C250) * C4192 +
                    (C249 * C201 + C44497 * C376) * C4095 -
                    (C249 * C1232 + C44497 * C1414) * C4193 -
                    (C249 * C1357 + C44497 * C1547) * C4096 +
                    (C249 * C4098 + C44497 * C4239) * C4194 +
                    (C249 * C4195 + C44497 * C4324) * C4097) *
                       C44512 * C77 +
                   (C273 * C4192 + C391 * C4095 - C1430 * C4193 -
                    C1562 * C4096 + (C249 * C4099 + C44497 * C4240) * C4194 +
                    (C249 * C4196 + C44497 * C4325) * C4097) *
                       C44512 * C78 +
                   (C275 * C4192 + C392 * C4095 - C1432 * C4193 -
                    C1563 * C4096 + (C249 * C4100 + C44497 * C4241) * C4194 +
                    (C249 * C4197 + C44497 * C4326) * C4097) *
                       C44512 * C79) *
                  C44449 * C44407) /
                 (p * q * std::sqrt(p + q));
    d2eezx[8] += (2 * std::pow(Pi, 2.5) *
                  ((((C436 * C93 + C44512 * C437) * C2283 +
                     (C436 * C101 + C44512 * C442) * C44407) *
                        C77 +
                    (C460 * C2283 + C461 * C44407) * C78 +
                    (C462 * C2283 + C463 * C44407) * C79) *
                       C44497 * C4095 -
                   ((C1635 * C44407 + C1634 * C2283) * C79 +
                    (C1633 * C44407 + C1632 * C2283) * C78 +
                    ((C436 * C1238 + C44512 * C1619) * C44407 +
                     (C436 * C1232 + C44512 * C1616) * C2283) *
                        C77) *
                       C44497 * C4096 +
                   (((C436 * C4098 + C44512 * C4365) * C2283 +
                     (C436 * C4104 + C44512 * C4368) * C44407) *
                        C77 +
                    ((C436 * C4099 + C44512 * C4366) * C2283 +
                     (C436 * C4105 + C44512 * C4369) * C44407) *
                        C78 +
                    ((C436 * C4100 + C44512 * C4367) * C2283 +
                     (C436 * C4106 + C44512 * C4370) * C44407) *
                        C79) *
                       C44497 * C4097) *
                  C44449) /
                 (p * q * std::sqrt(p + q));
    d2eezy[8] += (2 * std::pow(Pi, 2.5) *
                  ((((C436 * C93 + C44512 * C437) * C151 +
                     (C436 * C152 + C44512 * C503) * C44449) *
                        C77 +
                    (C509 + C521) * C78 + C524 * C79) *
                       C44497 * C44407 * C4095 -
                   ((C1699 + C1693) * C79 + (C1698 + C1690) * C78 +
                    ((C436 * C1298 + C44512 * C1688) * C44449 +
                     (C436 * C1232 + C44512 * C1616) * C151) *
                        C77) *
                       C44497 * C44407 * C4096 +
                   (((C436 * C4098 + C44512 * C4365) * C151 +
                     (C436 * C4148 + C44512 * C4409) * C44449) *
                        C77 +
                    ((C436 * C4099 + C44512 * C4366) * C151 +
                     (C436 * C4149 + C44512 * C4410) * C44449) *
                        C78 +
                    ((C436 * C4100 + C44512 * C4367) * C151 +
                     (C436 * C4150 + C44512 * C4411) * C44449) *
                        C79) *
                       C44497 * C44407 * C4097)) /
                 (p * q * std::sqrt(p + q));
    d2eezz[8] += (2 * std::pow(Pi, 2.5) *
                  (((C436 * C93 + C44512 * C437) * C4192 +
                    (C436 * C201 + C44512 * C562) * C4095 -
                    (C436 * C1232 + C44512 * C1616) * C4193 -
                    (C436 * C1357 + C44512 * C1749) * C4096 +
                    (C436 * C4098 + C44512 * C4365) * C4194 +
                    (C436 * C4195 + C44512 * C4450) * C4097) *
                       C77 +
                   (C460 * C4192 + C577 * C4095 - C1632 * C4193 -
                    C1764 * C4096 + (C436 * C4099 + C44512 * C4366) * C4194 +
                    (C436 * C4196 + C44512 * C4451) * C4097) *
                       C78 +
                   (C462 * C4192 + C578 * C4095 - C1634 * C4193 -
                    C1765 * C4096 + (C436 * C4100 + C44512 * C4367) * C4194 +
                    (C436 * C4197 + C44512 * C4452) * C4097) *
                       C79) *
                  C44497 * C44449 * C44407) /
                 (p * q * std::sqrt(p + q));
    d2eexx[9] +=
        (2 * std::pow(Pi, 2.5) *
         (((C4507 * C93 + C4503 * C98 + C4508 * C94 + C44593 * C99) * C90 +
           (C4507 * C101 + C4503 * C108 + C4508 * C102 + C44593 * C109) * C80 -
           (C4508 * C95 + C44593 * C100 + C4507 * C94 + C4503 * C99) * C91 -
           (C4508 * C103 + C44593 * C110 + C4507 * C102 + C4503 * C109) * C81 +
           (C4507 * C95 + C4503 * C100 + C4508 * C96 + C44593 * C104) * C92 +
           (C4507 * C103 + C4503 * C110 + C4508 * C105 + C44593 * C111) * C82) *
              C4505 +
          ((C4507 * C642 + C4503 * C649 + C4508 * C639 + C44593 * C643) * C90 +
           (C4507 * C648 + C4503 * C653 + C4508 * C647 + C44593 * C652) * C80 -
           (C4508 * C640 + C44593 * C644 + C4507 * C639 + C4503 * C643) * C91 -
           (C4508 * C646 + C44593 * C651 + C4507 * C647 + C4503 * C652) * C81 +
           (C4507 * C640 + C4503 * C644 + C4508 * C641 + C44593 * C645) * C92 +
           (C4507 * C646 + C4503 * C651 + C4508 * C650 + C44593 * C654) * C82) *
              C44601) *
         C44512 * C44464 * C44449) /
        (p * q * std::sqrt(p + q));
    d2eexy[9] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4507 * C93 + C4503 * C98 + C4508 * C94 + C44593 * C99) * C151 +
            (C4507 * C152 + C4503 * C157 + C4508 * C153 + C44593 * C158) *
                C44449) *
               C4505 +
           ((C4507 * C642 + C4503 * C649 + C4508 * C639 + C44593 * C643) *
                C151 +
            (C4507 * C709 + C4503 * C713 + C4508 * C708 + C44593 * C712) *
                C44449) *
               C44601) *
              C44512 * C80 -
          (((C4508 * C707 + C44593 * C711 + C4507 * C708 + C4503 * C712) *
                C44449 +
            (C4508 * C640 + C44593 * C644 + C4507 * C639 + C4503 * C643) *
                C151) *
               C44601 +
           ((C4508 * C154 + C44593 * C159 + C4507 * C153 + C4503 * C158) *
                C44449 +
            (C4508 * C95 + C44593 * C100 + C4507 * C94 + C4503 * C99) * C151) *
               C4505) *
              C44512 * C81 +
          (((C4507 * C95 + C4503 * C100 + C4508 * C96 + C44593 * C104) * C151 +
            (C4507 * C154 + C4503 * C159 + C4508 * C155 + C44593 * C160) *
                C44449) *
               C4505 +
           ((C4507 * C640 + C4503 * C644 + C4508 * C641 + C44593 * C645) *
                C151 +
            (C4507 * C707 + C4503 * C711 + C4508 * C710 + C44593 * C714) *
                C44449) *
               C44601) *
              C44512 * C82) *
         C44464) /
        (p * q * std::sqrt(p + q));
    d2eexz[9] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4507 * C93 + C4503 * C98 + C4508 * C94 + C44593 * C99) * C200 +
            (C4507 * C201 + C4503 * C206 + C4508 * C202 + C44593 * C207) *
                C44464) *
               C4505 +
           ((C4507 * C642 + C4503 * C649 + C4508 * C639 + C44593 * C643) *
                C200 +
            (C4507 * C767 + C4503 * C771 + C4508 * C766 + C44593 * C770) *
                C44464) *
               C44601) *
              C44512 * C44449 * C80 -
          (((C4508 * C765 + C44593 * C769 + C4507 * C766 + C4503 * C770) *
                C44464 +
            (C4508 * C640 + C44593 * C644 + C4507 * C639 + C4503 * C643) *
                C200) *
               C44601 +
           ((C4508 * C203 + C44593 * C208 + C4507 * C202 + C4503 * C207) *
                C44464 +
            (C4508 * C95 + C44593 * C100 + C4507 * C94 + C4503 * C99) * C200) *
               C4505) *
              C44512 * C44449 * C81 +
          (((C4507 * C95 + C4503 * C100 + C4508 * C96 + C44593 * C104) * C200 +
            (C4507 * C203 + C4503 * C208 + C4508 * C204 + C44593 * C209) *
                C44464) *
               C4505 +
           ((C4507 * C640 + C4503 * C644 + C4508 * C641 + C44593 * C645) *
                C200 +
            (C4507 * C765 + C4503 * C769 + C4508 * C768 + C44593 * C772) *
                C44464) *
               C44601) *
              C44512 * C44449 * C82)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[9] +=
        (2 * std::pow(Pi, 2.5) *
         (((C4659 * C93 + C4505 * C250 + C4660 * C642 + C44601 * C824) * C90 +
           (C4659 * C101 + C4505 * C255 + C4660 * C648 + C44601 * C827) * C80 -
           (C4678 + C4679) * C91 - (C4680 + C4681) * C81 +
           (C4682 + C4683) * C92 + (C4684 + C4685) * C82) *
              C44512 * C4503 +
          ((C4679 + C4678) * C90 + (C4681 + C4680) * C80 -
           (C4683 + C4682) * C91 - (C4685 + C4684) * C81 +
           (C4659 * C96 + C4505 * C253 + C4660 * C641 + C44601 * C826) * C92 +
           (C4659 * C105 + C4505 * C258 + C4660 * C650 + C44601 * C830) * C82) *
              C44512 * C44593) *
         C44464 * C44449) /
        (p * q * std::sqrt(p + q));
    d2eeyy[9] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4659 * C93 + C4505 * C250 + C4660 * C642 + C44601 * C824) * C151 +
            (C4659 * C152 + C4505 * C316 + C4660 * C709 + C44601 * C893) *
                C44449) *
               C44512 * C4503 +
           ((C4679 + C4678) * C151 + (C4744 + C4745) * C44449) * C44512 *
               C44593) *
              C80 -
          (((C4746 + C4747) * C44449 + (C4683 + C4682) * C151) * C44512 *
               C44593 +
           ((C4745 + C4744) * C44449 + (C4678 + C4679) * C151) * C44512 *
               C4503) *
              C81 +
          (((C4682 + C4683) * C151 + (C4747 + C4746) * C44449) * C44512 *
               C4503 +
           ((C4659 * C96 + C4505 * C253 + C4660 * C641 + C44601 * C826) * C151 +
            (C4659 * C155 + C4505 * C319 + C4660 * C710 + C44601 * C896) *
                C44449) *
               C44512 * C44593) *
              C82) *
         C44464) /
        (p * q * std::sqrt(p + q));
    d2eeyz[9] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4659 * C93 + C4505 * C250 + C4660 * C642 + C44601 * C824) * C200 +
            (C4659 * C201 + C4505 * C376 + C4660 * C767 + C44601 * C963) *
                C44464) *
               C44512 * C4503 +
           ((C4679 + C4678) * C200 + (C4806 + C4807) * C44464) * C44512 *
               C44593) *
              C44449 * C80 -
          (((C4808 + C4809) * C44464 + (C4683 + C4682) * C200) * C44512 *
               C44593 +
           ((C4807 + C4806) * C44464 + (C4678 + C4679) * C200) * C44512 *
               C4503) *
              C44449 * C81 +
          (((C4682 + C4683) * C200 + (C4809 + C4808) * C44464) * C44512 *
               C4503 +
           ((C4659 * C96 + C4505 * C253 + C4660 * C641 + C44601 * C826) * C200 +
            (C4659 * C204 + C4505 * C379 + C4660 * C768 + C44601 * C964) *
                C44464) *
               C44512 * C44593) *
              C44449 * C82)) /
        (p * q * std::sqrt(p + q));
    d2eezx[9] += (2 * std::pow(Pi, 2.5) *
                  ((((C436 * C93 + C44512 * C437) * C90 +
                     (C436 * C101 + C44512 * C442) * C80 - C460 * C91 -
                     C461 * C81 + C462 * C92 + C463 * C82) *
                        C4503 +
                    (C460 * C90 + C461 * C80 - C462 * C91 - C463 * C81 +
                     C464 * C92 + C465 * C82) *
                        C44593) *
                       C4505 +
                   (((C436 * C642 + C44512 * C1026) * C90 +
                     (C436 * C648 + C44512 * C1029) * C80 - C1042 * C91 -
                     C1043 * C81 + C1044 * C92 + C1045 * C82) *
                        C4503 +
                    (C1042 * C90 + C1043 * C80 - C1044 * C91 - C1045 * C81 +
                     (C436 * C641 + C44512 * C1028) * C92 +
                     (C436 * C650 + C44512 * C1032) * C82) *
                        C44593) *
                       C44601) *
                  C44464 * C44449) /
                 (p * q * std::sqrt(p + q));
    d2eezy[9] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C436 * C93 + C44512 * C437) * C151 +
             (C436 * C152 + C44512 * C503) * C44449) *
                C4503 +
            (C509 + C521) * C44593) *
               C4505 +
           (((C436 * C642 + C44512 * C1026) * C151 +
             (C436 * C709 + C44512 * C1095) * C44449) *
                C4503 +
            (C4910 + C4911) * C44593) *
               C44601) *
              C80 -
          (((C4912 + C4913) * C44593 + (C4911 + C4910) * C4503) * C44601 +
           ((C522 + C512) * C44593 + (C521 + C509) * C4503) * C4505) *
              C81 +
          ((C524 * C4503 + (C517 + C523) * C44593) * C4505 +
           ((C4913 + C4912) * C4503 +
            ((C436 * C641 + C44512 * C1028) * C151 +
             (C436 * C710 + C44512 * C1098) * C44449) *
                C44593) *
               C44601) *
              C82) *
         C44464) /
        (p * q * std::sqrt(p + q));
    d2eezz[9] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C436 * C93 + C44512 * C437) * C200 +
             (C436 * C201 + C44512 * C562) * C44464) *
                C4503 +
            (C568 + C580) * C44593) *
               C4505 +
           (((C436 * C642 + C44512 * C1026) * C200 +
             (C436 * C767 + C44512 * C1165) * C44464) *
                C4503 +
            (C1173 + C1177) * C44593) *
               C44601) *
              C44449 * C80 -
          (((C1176 + C1170) * C44593 + (C1177 + C1173) * C4503) * C44601 +
           ((C581 + C571) * C44593 + (C580 + C568) * C4503) * C4505) *
              C44449 * C81 +
          ((C583 * C4503 + (C576 + C582) * C44593) * C4505 +
           ((C1170 + C1176) * C4503 +
            ((C436 * C641 + C44512 * C1028) * C200 +
             (C436 * C768 + C44512 * C1166) * C44464) *
                C44593) *
               C44601) *
              C44449 * C82)) /
        (p * q * std::sqrt(p + q));
    d2eexx[10] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4507 * C93 + C4503 * C98 + C4508 * C94 + C44593 * C99) * C637 +
            (C4507 * C101 + C4503 * C108 + C4508 * C102 + C44593 * C109) *
                C633 -
            (C4508 * C95 + C44593 * C100 + C4507 * C94 + C4503 * C99) * C638 -
            (C4508 * C103 + C44593 * C110 + C4507 * C102 + C4503 * C109) *
                C44595) *
               C4505 +
           ((C5046 + C5047) * C637 + (C5048 + C5049) * C633 -
            (C5050 + C5051) * C638 - (C5052 + C5053) * C44595) *
               C44601) *
              C44512 * C44464 * C635 +
          (((C5051 + C5050) * C638 -
            ((C5049 + C5048) * C633 + (C5047 + C5046) * C637) +
            (C5053 + C5052) * C44595) *
               C4505 +
           ((C4507 * C2285 + C4503 * C2288 + C4508 * C2286 + C44593 * C2289) *
                C638 -
            ((C4508 * C2291 + C44593 * C2294 + C4507 * C2290 + C4503 * C2293) *
                 C633 +
             (C4508 * C2285 + C44593 * C2288 + C4507 * C2284 + C4503 * C2287) *
                 C637) +
            (C4507 * C2291 + C4503 * C2294 + C4508 * C2292 + C44593 * C2295) *
                C44595) *
               C44601) *
              C44512 * C44464 * C44597)) /
        (p * q * std::sqrt(p + q));
    d2eexy[10] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4507 * C93 + C4503 * C98 + C4508 * C94 + C44593 * C99) * C705 +
            (C4507 * C152 + C4503 * C157 + C4508 * C153 + C44593 * C158) *
                C635 -
            (C5047 + C5046) * C706 - (C5128 + C5129) * C44597) *
               C4505 +
           ((C5046 + C5047) * C705 + (C5129 + C5128) * C635 -
            (C4508 * C2285 + C44593 * C2288 + C4507 * C2284 + C4503 * C2287) *
                C706 -
            (C4508 * C2338 + C44593 * C2341 + C4507 * C2337 + C4503 * C2340) *
                C44597) *
               C44601) *
              C44512 * C633 +
          (((C5051 + C5050) * C706 -
            ((C4508 * C154 + C44593 * C159 + C4507 * C153 + C4503 * C158) *
                 C635 +
             (C4508 * C95 + C44593 * C100 + C4507 * C94 + C4503 * C99) * C705) +
            (C5130 + C5131) * C44597) *
               C4505 +
           ((C4507 * C2285 + C4503 * C2288 + C4508 * C2286 + C44593 * C2289) *
                C706 -
            ((C5131 + C5130) * C635 + (C5050 + C5051) * C705) +
            (C4507 * C2338 + C4503 * C2341 + C4508 * C2339 + C44593 * C2342) *
                C44597) *
               C44601) *
              C44512 * C44595) *
         C44464) /
        (p * q * std::sqrt(p + q));
    d2eexz[10] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C4507 * C93 + C4503 * C98 + C4508 * C94 + C44593 * C99) * C200 +
             (C4507 * C201 + C4503 * C206 + C4508 * C202 + C44593 * C207) *
                 C44464) *
                C4505 +
            ((C5046 + C5047) * C200 + (C5206 + C5207) * C44464) * C44601) *
               C44512 * C635 -
           (((C4508 * C2382 + C44593 * C2385 + C4507 * C2381 + C4503 * C2384) *
                 C44464 +
             (C4508 * C2285 + C44593 * C2288 + C4507 * C2284 + C4503 * C2287) *
                 C200) *
                C44601 +
            ((C5207 + C5206) * C44464 + (C5047 + C5046) * C200) * C4505) *
               C44512 * C44597) *
              C633 +
          ((((C5051 + C5050) * C200 + (C5208 + C5209) * C44464) * C4505 +
            ((C4507 * C2285 + C4503 * C2288 + C4508 * C2286 + C44593 * C2289) *
                 C200 +
             (C4507 * C2382 + C4503 * C2385 + C4508 * C2383 + C44593 * C2386) *
                 C44464) *
                C44601) *
               C44512 * C44597 -
           (((C5209 + C5208) * C44464 + (C5050 + C5051) * C200) * C44601 +
            ((C4508 * C203 + C44593 * C208 + C4507 * C202 + C4503 * C207) *
                 C44464 +
             (C4508 * C95 + C44593 * C100 + C4507 * C94 + C4503 * C99) * C200) *
                C4505) *
               C44512 * C635) *
              C44595)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[10] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4659 * C93 + C4505 * C250 + C4660 * C642 + C44601 * C824) * C637 +
            (C4659 * C101 + C4505 * C255 + C4660 * C648 + C44601 * C827) *
                C633 -
            (C4678 + C4679) * C638 - (C4680 + C4681) * C44595) *
               C44512 * C4503 +
           ((C4679 + C4678) * C637 + (C4681 + C4680) * C633 -
            (C4683 + C4682) * C638 - (C4685 + C4684) * C44595) *
               C44512 * C44593) *
              C44464 * C635 +
          (((C5284 + C5285) * C638 -
            ((C4660 * C2290 + C44601 * C2428 + C4659 * C648 + C4505 * C827) *
                 C633 +
             (C4660 * C2284 + C44601 * C2425 + C4659 * C642 + C4505 * C824) *
                 C637) +
            (C5286 + C5287) * C44595) *
               C44512 * C4503 +
           ((C4659 * C640 + C4505 * C825 + C4660 * C2286 + C44601 * C2427) *
                C638 -
            ((C5287 + C5286) * C633 + (C5285 + C5284) * C637) +
            (C4659 * C646 + C4505 * C829 + C4660 * C2292 + C44601 * C2430) *
                C44595) *
               C44512 * C44593) *
              C44464 * C44597)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[10] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4659 * C93 + C4505 * C250 + C4660 * C642 + C44601 * C824) * C705 +
            (C4659 * C152 + C4505 * C316 + C4660 * C709 + C44601 * C893) *
                C635 -
            (C4660 * C2284 + C44601 * C2425 + C4659 * C642 + C4505 * C824) *
                C706 -
            (C4660 * C2337 + C44601 * C2469 + C4659 * C709 + C4505 * C893) *
                C44597) *
               C44512 * C4503 +
           ((C4679 + C4678) * C705 + (C4744 + C4745) * C635 -
            (C5285 + C5284) * C706 - (C5358 + C5359) * C44597) *
               C44512 * C44593) *
              C633 +
          (((C5284 + C5285) * C706 -
            ((C4745 + C4744) * C635 + (C4678 + C4679) * C705) +
            (C5359 + C5358) * C44597) *
               C44512 * C4503 +
           ((C4659 * C640 + C4505 * C825 + C4660 * C2286 + C44601 * C2427) *
                C706 -
            ((C4746 + C4747) * C635 + (C4683 + C4682) * C705) +
            (C4659 * C707 + C4505 * C895 + C4660 * C2339 + C44601 * C2471) *
                C44597) *
               C44512 * C44593) *
              C44595) *
         C44464) /
        (p * q * std::sqrt(p + q));
    d2eeyz[10] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C4659 * C93 + C4505 * C250 + C4660 * C642 + C44601 * C824) *
                 C200 +
             (C4659 * C201 + C4505 * C376 + C4660 * C767 + C44601 * C963) *
                 C44464) *
                C44512 * C4503 +
            ((C4679 + C4678) * C200 + (C4806 + C4807) * C44464) * C44512 *
                C44593) *
               C635 -
           (((C5430 + C5431) * C44464 + (C5285 + C5284) * C200) * C44512 *
                C44593 +
            ((C4660 * C2381 + C44601 * C2510 + C4659 * C767 + C4505 * C963) *
                 C44464 +
             (C4660 * C2284 + C44601 * C2425 + C4659 * C642 + C4505 * C824) *
                 C200) *
                C44512 * C4503) *
               C44597) *
              C633 +
          ((((C5284 + C5285) * C200 + (C5431 + C5430) * C44464) * C44512 *
                C4503 +
            ((C4659 * C640 + C4505 * C825 + C4660 * C2286 + C44601 * C2427) *
                 C200 +
             (C4659 * C765 + C4505 * C961 + C4660 * C2383 + C44601 * C2512) *
                 C44464) *
                C44512 * C44593) *
               C44597 -
           (((C4808 + C4809) * C44464 + (C4683 + C4682) * C200) * C44512 *
                C44593 +
            ((C4807 + C4806) * C44464 + (C4678 + C4679) * C200) * C44512 *
                C4503) *
               C635) *
              C44595)) /
        (p * q * std::sqrt(p + q));
    d2eezx[10] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C436 * C93 + C44512 * C437) * C637 +
             (C436 * C101 + C44512 * C442) * C633 - C460 * C638 -
             C461 * C44595) *
                C4503 +
            (C460 * C637 + C461 * C633 - C462 * C638 - C463 * C44595) *
                C44593) *
               C4505 +
           ((C5516 + C5517 - C5502 - C5503) * C4503 +
            (C5504 + C5505 - C5506 - C5507) * C44593) *
               C44601) *
              C44464 * C635 +
          (((C5502 - (C5517 + C5516) + C5503) * C4503 +
            (C5506 - (C5505 + C5504) + C5507) * C44593) *
               C4505 +
           ((C5514 * C638 -
             ((C436 * C2290 + C44512 * C2554) * C633 +
              (C436 * C2284 + C44512 * C2551) * C637) +
             C5515 * C44595) *
                C4503 +
            ((C436 * C2286 + C44512 * C2553) * C638 -
             (C5515 * C633 + C5514 * C637) +
             (C436 * C2292 + C44512 * C2556) * C44595) *
                C44593) *
               C44601) *
              C44464 * C44597)) /
        (p * q * std::sqrt(p + q));
    d2eezy[10] += (2 * std::pow(Pi, 2.5) *
                   (((((C436 * C93 + C44512 * C437) * C705 +
                       (C436 * C152 + C44512 * C503) * C635 - C5512 * C706 -
                       C5591 * C44597) *
                          C4503 +
                      (C1100 + C1101 - C1102 - C1112) * C44593) *
                         C4505 +
                     ((C5512 * C705 + C5591 * C635 -
                       (C436 * C2284 + C44512 * C2551) * C706 -
                       (C436 * C2337 + C44512 * C2595) * C44597) *
                          C4503 +
                      (C5586 + C5587 - C5588 - C5593) * C44593) *
                         C44601) *
                        C633 +
                    (((C1102 - (C1101 + C1100) + C1112) * C4503 +
                      (C1107 - (C1106 + C1105) + C1113) * C44593) *
                         C4505 +
                     ((C5588 - (C5587 + C5586) + C5593) * C4503 +
                      ((C436 * C2286 + C44512 * C2553) * C706 -
                       (C1111 * C635 + C1044 * C705) +
                       (C436 * C2339 + C44512 * C2597) * C44597) *
                          C44593) *
                         C44601) *
                        C44595) *
                   C44464) /
                  (p * q * std::sqrt(p + q));
    d2eezz[10] +=
        (2 * std::pow(Pi, 2.5) *
         ((((((C436 * C93 + C44512 * C437) * C200 +
              (C436 * C201 + C44512 * C562) * C44464) *
                 C4503 +
             (C568 + C580) * C44593) *
                C4505 +
            ((C5660 + C5670) * C4503 + C5663 * C44593) * C44601) *
               C635 -
           (((C5671 + C5666) * C44593 +
             ((C436 * C2381 + C44512 * C2636) * C44464 +
              (C436 * C2284 + C44512 * C2551) * C200) *
                 C4503) *
                C44601 +
            (C5667 * C44593 + (C5670 + C5660) * C4503) * C4505) *
               C44597) *
              C633 +
          (((C5663 * C4503 + (C1170 + C1176) * C44593) * C4505 +
            ((C5666 + C5671) * C4503 +
             ((C436 * C2286 + C44512 * C2553) * C200 +
              (C436 * C2383 + C44512 * C2638) * C44464) *
                 C44593) *
                C44601) *
               C44597 -
           (((C1176 + C1170) * C44593 + C5667 * C4503) * C44601 +
            ((C581 + C571) * C44593 + (C580 + C568) * C4503) * C4505) *
               C635) *
              C44595)) /
        (p * q * std::sqrt(p + q));
    d2eexx[11] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4507 * C93 + C4503 * C98 + C4508 * C94 + C44593 * C99) * C637 +
            (C4507 * C101 + C4503 * C108 + C4508 * C102 + C44593 * C109) *
                C633 -
            (C4508 * C95 + C44593 * C100 + C4507 * C94 + C4503 * C99) * C638 -
            (C4508 * C103 + C44593 * C110 + C4507 * C102 + C4503 * C109) *
                C44595) *
               C4505 +
           ((C5046 + C5047) * C637 + (C5048 + C5049) * C633 -
            (C5050 + C5051) * C638 - (C5052 + C5053) * C44595) *
               C44601) *
              C44512 * C1227 +
          (((C4507 * C1229 + C4503 * C1233 + C4508 * C1230 + C44593 * C1234) *
                C638 -
            ((C4508 * C1237 + C44593 * C1242 + C4507 * C1238 + C4503 * C1243) *
                 C633 +
             (C4508 * C1229 + C44593 * C1233 + C4507 * C1232 + C4503 * C1239) *
                 C637) +
            (C4507 * C1237 + C4503 * C1242 + C4508 * C1236 + C44593 * C1241) *
                C44595) *
               C4505 +
           ((C4507 * C2690 + C4503 * C2693 + C4508 * C2691 + C44593 * C2694) *
                C638 -
            ((C4508 * C2696 + C44593 * C2699 + C4507 * C2695 + C4503 * C2698) *
                 C633 +
             (C4508 * C2690 + C44593 * C2693 + C4507 * C2689 + C4503 * C2692) *
                 C637) +
            (C4507 * C2696 + C4503 * C2699 + C4508 * C2697 + C44593 * C2700) *
                C44595) *
               C44601) *
              C44512 * C44599) *
         C44449) /
        (p * q * std::sqrt(p + q));
    d2eexy[11] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C4507 * C93 + C4503 * C98 + C4508 * C94 + C44593 * C99) * C151 +
             (C4507 * C152 + C4503 * C157 + C4508 * C153 + C44593 * C158) *
                 C44449) *
                C4505 +
            ((C5046 + C5047) * C151 + (C5129 + C5128) * C44449) * C44601) *
               C44512 * C633 -
           (((C5131 + C5130) * C44449 + (C5050 + C5051) * C151) * C44601 +
            ((C4508 * C154 + C44593 * C159 + C4507 * C153 + C4503 * C158) *
                 C44449 +
             (C4508 * C95 + C44593 * C100 + C4507 * C94 + C4503 * C99) * C151) *
                C4505) *
               C44512 * C44595) *
              C1227 +
          ((((C4507 * C1229 + C4503 * C1233 + C4508 * C1230 + C44593 * C1234) *
                 C151 +
             (C4507 * C1295 + C4503 * C1299 + C4508 * C1296 + C44593 * C1300) *
                 C44449) *
                C4505 +
            ((C4507 * C2690 + C4503 * C2693 + C4508 * C2691 + C44593 * C2694) *
                 C151 +
             (C4507 * C2752 + C4503 * C2755 + C4508 * C2753 + C44593 * C2756) *
                 C44449) *
                C44601) *
               C44512 * C44595 -
           (((C4508 * C2752 + C44593 * C2755 + C4507 * C2751 + C4503 * C2754) *
                 C44449 +
             (C4508 * C2690 + C44593 * C2693 + C4507 * C2689 + C4503 * C2692) *
                 C151) *
                C44601 +
            ((C4508 * C1295 + C44593 * C1299 + C4507 * C1298 + C4503 * C1302) *
                 C44449 +
             (C4508 * C1229 + C44593 * C1233 + C4507 * C1232 + C4503 * C1239) *
                 C151) *
                C4505) *
               C44512 * C633) *
              C44599)) /
        (p * q * std::sqrt(p + q));
    d2eexz[11] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4507 * C93 + C4503 * C98 + C4508 * C94 + C44593 * C99) * C1353 +
            (C4507 * C201 + C4503 * C206 + C4508 * C202 + C44593 * C207) *
                C1227 -
            (C4508 * C1229 + C44593 * C1233 + C4507 * C1232 + C4503 * C1239) *
                C1354 -
            (C4508 * C1356 + C44593 * C1360 + C4507 * C1357 + C4503 * C1361) *
                C44599) *
               C4505 +
           ((C5046 + C5047) * C1353 + (C5206 + C5207) * C1227 -
            (C4508 * C2690 + C44593 * C2693 + C4507 * C2689 + C4503 * C2692) *
                C1354 -
            (C4508 * C2808 + C44593 * C2811 + C4507 * C2807 + C4503 * C2810) *
                C44599) *
               C44601) *
              C44512 * C44449 * C633 +
          (((C4507 * C1229 + C4503 * C1233 + C4508 * C1230 + C44593 * C1234) *
                C1354 -
            ((C4508 * C203 + C44593 * C208 + C4507 * C202 + C4503 * C207) *
                 C1227 +
             (C4508 * C95 + C44593 * C100 + C4507 * C94 + C4503 * C99) *
                 C1353) +
            (C4507 * C1356 + C4503 * C1360 + C4508 * C1355 + C44593 * C1359) *
                C44599) *
               C4505 +
           ((C4507 * C2690 + C4503 * C2693 + C4508 * C2691 + C44593 * C2694) *
                C1354 -
            ((C5209 + C5208) * C1227 + (C5050 + C5051) * C1353) +
            (C4507 * C2808 + C4503 * C2811 + C4508 * C2809 + C44593 * C2812) *
                C44599) *
               C44601) *
              C44512 * C44449 * C44595)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[11] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4659 * C93 + C4505 * C250 + C4660 * C642 + C44601 * C824) * C637 +
            (C4659 * C101 + C4505 * C255 + C4660 * C648 + C44601 * C827) *
                C633 -
            (C4678 + C4679) * C638 - (C4680 + C4681) * C44595) *
               C44512 * C4503 +
           ((C4679 + C4678) * C637 + (C4681 + C4680) * C633 -
            (C4683 + C4682) * C638 - (C4685 + C4684) * C44595) *
               C44512 * C44593) *
              C1227 +
          (((C5944 + C5945) * C638 -
            ((C4660 * C2695 + C44601 * C2866 + C4659 * C1238 + C4505 * C1417) *
                 C633 +
             (C4660 * C2689 + C44601 * C2863 + C4659 * C1232 + C4505 * C1414) *
                 C637) +
            (C5946 + C5947) * C44595) *
               C44512 * C4503 +
           ((C4659 * C1230 + C4505 * C1415 + C4660 * C2691 + C44601 * C2865) *
                C638 -
            ((C5947 + C5946) * C633 + (C5945 + C5944) * C637) +
            (C4659 * C1236 + C4505 * C1419 + C4660 * C2697 + C44601 * C2868) *
                C44595) *
               C44512 * C44593) *
              C44599) *
         C44449) /
        (p * q * std::sqrt(p + q));
    d2eeyy[11] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C4659 * C93 + C4505 * C250 + C4660 * C642 + C44601 * C824) *
                 C151 +
             (C4659 * C152 + C4505 * C316 + C4660 * C709 + C44601 * C893) *
                 C44449) *
                C44512 * C4503 +
            ((C4679 + C4678) * C151 + (C4744 + C4745) * C44449) * C44512 *
                C44593) *
               C633 -
           (((C4746 + C4747) * C44449 + (C4683 + C4682) * C151) * C44512 *
                C44593 +
            ((C4745 + C4744) * C44449 + (C4678 + C4679) * C151) * C44512 *
                C4503) *
               C44595) *
              C1227 +
          ((((C5944 + C5945) * C151 + (C6018 + C6019) * C44449) * C44512 *
                C4503 +
            ((C4659 * C1230 + C4505 * C1415 + C4660 * C2691 + C44601 * C2865) *
                 C151 +
             (C4659 * C1296 + C4505 * C1484 + C4660 * C2753 + C44601 * C2921) *
                 C44449) *
                C44512 * C44593) *
               C44595 -
           (((C6019 + C6018) * C44449 + (C5945 + C5944) * C151) * C44512 *
                C44593 +
            ((C4660 * C2751 + C44601 * C2919 + C4659 * C1298 + C4505 * C1486) *
                 C44449 +
             (C4660 * C2689 + C44601 * C2863 + C4659 * C1232 + C4505 * C1414) *
                 C151) *
                C44512 * C4503) *
               C633) *
              C44599)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[11] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4659 * C93 + C4505 * C250 + C4660 * C642 + C44601 * C824) *
                C1353 +
            (C4659 * C201 + C4505 * C376 + C4660 * C767 + C44601 * C963) *
                C1227 -
            (C4660 * C2689 + C44601 * C2863 + C4659 * C1232 + C4505 * C1414) *
                C1354 -
            (C4660 * C2807 + C44601 * C2972 + C4659 * C1357 + C4505 * C1547) *
                C44599) *
               C44512 * C4503 +
           ((C4679 + C4678) * C1353 + (C4806 + C4807) * C1227 -
            (C5945 + C5944) * C1354 - (C6090 + C6091) * C44599) *
               C44512 * C44593) *
              C44449 * C633 +
          (((C5944 + C5945) * C1354 -
            ((C4807 + C4806) * C1227 + (C4678 + C4679) * C1353) +
            (C6091 + C6090) * C44599) *
               C44512 * C4503 +
           ((C4659 * C1230 + C4505 * C1415 + C4660 * C2691 + C44601 * C2865) *
                C1354 -
            ((C4808 + C4809) * C1227 + (C4683 + C4682) * C1353) +
            (C4659 * C1355 + C4505 * C1549 + C4660 * C2809 + C44601 * C2974) *
                C44599) *
               C44512 * C44593) *
              C44449 * C44595)) /
        (p * q * std::sqrt(p + q));
    d2eezx[11] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C436 * C93 + C44512 * C437) * C637 +
             (C436 * C101 + C44512 * C442) * C633 - C460 * C638 -
             C461 * C44595) *
                C4503 +
            (C460 * C637 + C461 * C633 - C462 * C638 - C463 * C44595) *
                C44593) *
               C4505 +
           ((C5516 + C5517 - C5502 - C5503) * C4503 +
            (C5504 + C5505 - C5506 - C5507) * C44593) *
               C44601) *
              C1227 +
          (((C1632 * C638 -
             ((C436 * C1238 + C44512 * C1619) * C633 +
              (C436 * C1232 + C44512 * C1616) * C637) +
             C1633 * C44595) *
                C4503 +
            (C1634 * C638 - (C1633 * C633 + C1632 * C637) + C1635 * C44595) *
                C44593) *
               C4505 +
           ((C6162 * C638 -
             ((C436 * C2695 + C44512 * C3028) * C633 +
              (C436 * C2689 + C44512 * C3025) * C637) +
             C6163 * C44595) *
                C4503 +
            ((C436 * C2691 + C44512 * C3027) * C638 -
             (C6163 * C633 + C6162 * C637) +
             (C436 * C2697 + C44512 * C3030) * C44595) *
                C44593) *
               C44601) *
              C44599) *
         C44449) /
        (p * q * std::sqrt(p + q));
    d2eezy[11] +=
        (2 * std::pow(Pi, 2.5) *
         ((((((C436 * C93 + C44512 * C437) * C151 +
              (C436 * C152 + C44512 * C503) * C44449) *
                 C4503 +
             (C509 + C521) * C44593) *
                C4505 +
            ((C5512 * C151 + C5591 * C44449) * C4503 +
             (C4910 + C4911) * C44593) *
                C44601) *
               C633 -
           (((C4912 + C4913) * C44593 + (C4911 + C4910) * C4503) * C44601 +
            ((C522 + C512) * C44593 + (C521 + C509) * C4503) * C4505) *
               C44595) *
              C1227 +
          ((((C1690 + C1698) * C4503 + (C1693 + C1699) * C44593) * C4505 +
            ((C6230 + C6234) * C4503 +
             ((C436 * C2691 + C44512 * C3027) * C151 +
              (C436 * C2753 + C44512 * C3083) * C44449) *
                 C44593) *
                C44601) *
               C44595 -
           (((C6234 + C6230) * C44593 +
             ((C436 * C2751 + C44512 * C3081) * C44449 +
              (C436 * C2689 + C44512 * C3025) * C151) *
                 C4503) *
                C44601 +
            ((C1698 + C1690) * C44593 +
             ((C436 * C1298 + C44512 * C1688) * C44449 +
              (C436 * C1232 + C44512 * C1616) * C151) *
                 C4503) *
                C4505) *
               C633) *
              C44599)) /
        (p * q * std::sqrt(p + q));
    d2eezz[11] += (2 * std::pow(Pi, 2.5) *
                   (((((C436 * C93 + C44512 * C437) * C1353 +
                       (C436 * C201 + C44512 * C562) * C1227 -
                       (C436 * C1232 + C44512 * C1616) * C1354 -
                       (C436 * C1357 + C44512 * C1749) * C44599) *
                          C4503 +
                      (C1754 + C1755 - C1756 - C1766) * C44593) *
                         C4505 +
                     ((C5512 * C1353 + C5668 * C1227 -
                       (C436 * C2689 + C44512 * C3025) * C1354 -
                       (C436 * C2807 + C44512 * C3134) * C44599) *
                          C4503 +
                      (C6301 + C6302 - C6303 - C6307) * C44593) *
                         C44601) *
                        C44449 * C633 +
                    (((C1756 - (C1755 + C1754) + C1766) * C4503 +
                      (C1761 - (C1760 + C1759) + C1767) * C44593) *
                         C4505 +
                     ((C6303 - (C6302 + C6301) + C6307) * C4503 +
                      ((C436 * C2691 + C44512 * C3027) * C1354 -
                       (C1174 * C1227 + C1044 * C1353) +
                       (C436 * C2809 + C44512 * C3136) * C44599) *
                          C44593) *
                         C44601) *
                        C44449 * C44595)) /
                  (p * q * std::sqrt(p + q));
    d2eexx[12] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4507 * C93 + C4503 * C98 + C4508 * C94 + C44593 * C99) * C1821 +
            (C4507 * C101 + C4503 * C108 + C4508 * C102 + C44593 * C109) *
                C1817 -
            (C4508 * C95 + C44593 * C100 + C4507 * C94 + C4503 * C99) * C1822 -
            (C4508 * C103 + C44593 * C110 + C4507 * C102 + C4503 * C109) *
                C44595) *
               C4505 +
           ((C5046 + C5047) * C1821 + (C5048 + C5049) * C1817 -
            (C5050 + C5051) * C1822 - (C5052 + C5053) * C44595) *
               C44601) *
              C44512 * C44464 * C1819 +
          (((C5051 + C5050) * C1822 -
            ((C5049 + C5048) * C1817 + (C5047 + C5046) * C1821) +
            (C5053 + C5052) * C44595) *
               C4505 +
           ((C4507 * C2285 + C4503 * C2288 + C4508 * C2286 + C44593 * C2289) *
                C1822 -
            ((C4508 * C2291 + C44593 * C2294 + C4507 * C2290 + C4503 * C2293) *
                 C1817 +
             (C4508 * C2285 + C44593 * C2288 + C4507 * C2284 + C4503 * C2287) *
                 C1821) +
            (C4507 * C2291 + C4503 * C2294 + C4508 * C2292 + C44593 * C2295) *
                C44595) *
               C44601) *
              C44512 * C44464 * C44597)) /
        (p * q * std::sqrt(p + q));
    d2eexy[12] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4507 * C93 + C4503 * C98 + C4508 * C94 + C44593 * C99) * C1873 +
            (C4507 * C152 + C4503 * C157 + C4508 * C153 + C44593 * C158) *
                C1819 -
            (C5047 + C5046) * C1874 - (C5128 + C5129) * C44597) *
               C4505 +
           ((C5046 + C5047) * C1873 + (C5129 + C5128) * C1819 -
            (C4508 * C2285 + C44593 * C2288 + C4507 * C2284 + C4503 * C2287) *
                C1874 -
            (C4508 * C2338 + C44593 * C2341 + C4507 * C2337 + C4503 * C2340) *
                C44597) *
               C44601) *
              C44512 * C1817 +
          (((C5051 + C5050) * C1874 -
            ((C4508 * C154 + C44593 * C159 + C4507 * C153 + C4503 * C158) *
                 C1819 +
             (C4508 * C95 + C44593 * C100 + C4507 * C94 + C4503 * C99) *
                 C1873) +
            (C5130 + C5131) * C44597) *
               C4505 +
           ((C4507 * C2285 + C4503 * C2288 + C4508 * C2286 + C44593 * C2289) *
                C1874 -
            ((C5131 + C5130) * C1819 + (C5050 + C5051) * C1873) +
            (C4507 * C2338 + C4503 * C2341 + C4508 * C2339 + C44593 * C2342) *
                C44597) *
               C44601) *
              C44512 * C44595) *
         C44464) /
        (p * q * std::sqrt(p + q));
    d2eexz[12] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C4507 * C93 + C4503 * C98 + C4508 * C94 + C44593 * C99) * C200 +
             (C4507 * C201 + C4503 * C206 + C4508 * C202 + C44593 * C207) *
                 C44464) *
                C4505 +
            ((C5046 + C5047) * C200 + (C5206 + C5207) * C44464) * C44601) *
               C44512 * C1819 -
           (((C4508 * C2382 + C44593 * C2385 + C4507 * C2381 + C4503 * C2384) *
                 C44464 +
             (C4508 * C2285 + C44593 * C2288 + C4507 * C2284 + C4503 * C2287) *
                 C200) *
                C44601 +
            ((C5207 + C5206) * C44464 + (C5047 + C5046) * C200) * C4505) *
               C44512 * C44597) *
              C1817 +
          ((((C5051 + C5050) * C200 + (C5208 + C5209) * C44464) * C4505 +
            ((C4507 * C2285 + C4503 * C2288 + C4508 * C2286 + C44593 * C2289) *
                 C200 +
             (C4507 * C2382 + C4503 * C2385 + C4508 * C2383 + C44593 * C2386) *
                 C44464) *
                C44601) *
               C44512 * C44597 -
           (((C5209 + C5208) * C44464 + (C5050 + C5051) * C200) * C44601 +
            ((C4508 * C203 + C44593 * C208 + C4507 * C202 + C4503 * C207) *
                 C44464 +
             (C4508 * C95 + C44593 * C100 + C4507 * C94 + C4503 * C99) * C200) *
                C4505) *
               C44512 * C1819) *
              C44595)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[12] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4659 * C93 + C4505 * C250 + C4660 * C642 + C44601 * C824) *
                C1821 +
            (C4659 * C101 + C4505 * C255 + C4660 * C648 + C44601 * C827) *
                C1817 -
            (C4678 + C4679) * C1822 - (C4680 + C4681) * C44595) *
               C44512 * C4503 +
           ((C4679 + C4678) * C1821 + (C4681 + C4680) * C1817 -
            (C4683 + C4682) * C1822 - (C4685 + C4684) * C44595) *
               C44512 * C44593) *
              C44464 * C1819 +
          (((C5284 + C5285) * C1822 -
            ((C4660 * C2290 + C44601 * C2428 + C4659 * C648 + C4505 * C827) *
                 C1817 +
             (C4660 * C2284 + C44601 * C2425 + C4659 * C642 + C4505 * C824) *
                 C1821) +
            (C5286 + C5287) * C44595) *
               C44512 * C4503 +
           ((C4659 * C640 + C4505 * C825 + C4660 * C2286 + C44601 * C2427) *
                C1822 -
            ((C5287 + C5286) * C1817 + (C5285 + C5284) * C1821) +
            (C4659 * C646 + C4505 * C829 + C4660 * C2292 + C44601 * C2430) *
                C44595) *
               C44512 * C44593) *
              C44464 * C44597)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[12] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4659 * C93 + C4505 * C250 + C4660 * C642 + C44601 * C824) *
                C1873 +
            (C4659 * C152 + C4505 * C316 + C4660 * C709 + C44601 * C893) *
                C1819 -
            (C4660 * C2284 + C44601 * C2425 + C4659 * C642 + C4505 * C824) *
                C1874 -
            (C4660 * C2337 + C44601 * C2469 + C4659 * C709 + C4505 * C893) *
                C44597) *
               C44512 * C4503 +
           ((C4679 + C4678) * C1873 + (C4744 + C4745) * C1819 -
            (C5285 + C5284) * C1874 - (C5358 + C5359) * C44597) *
               C44512 * C44593) *
              C1817 +
          (((C5284 + C5285) * C1874 -
            ((C4745 + C4744) * C1819 + (C4678 + C4679) * C1873) +
            (C5359 + C5358) * C44597) *
               C44512 * C4503 +
           ((C4659 * C640 + C4505 * C825 + C4660 * C2286 + C44601 * C2427) *
                C1874 -
            ((C4746 + C4747) * C1819 + (C4683 + C4682) * C1873) +
            (C4659 * C707 + C4505 * C895 + C4660 * C2339 + C44601 * C2471) *
                C44597) *
               C44512 * C44593) *
              C44595) *
         C44464) /
        (p * q * std::sqrt(p + q));
    d2eeyz[12] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C4659 * C93 + C4505 * C250 + C4660 * C642 + C44601 * C824) *
                 C200 +
             (C4659 * C201 + C4505 * C376 + C4660 * C767 + C44601 * C963) *
                 C44464) *
                C44512 * C4503 +
            ((C4679 + C4678) * C200 + (C4806 + C4807) * C44464) * C44512 *
                C44593) *
               C1819 -
           (((C5430 + C5431) * C44464 + (C5285 + C5284) * C200) * C44512 *
                C44593 +
            ((C4660 * C2381 + C44601 * C2510 + C4659 * C767 + C4505 * C963) *
                 C44464 +
             (C4660 * C2284 + C44601 * C2425 + C4659 * C642 + C4505 * C824) *
                 C200) *
                C44512 * C4503) *
               C44597) *
              C1817 +
          ((((C5284 + C5285) * C200 + (C5431 + C5430) * C44464) * C44512 *
                C4503 +
            ((C4659 * C640 + C4505 * C825 + C4660 * C2286 + C44601 * C2427) *
                 C200 +
             (C4659 * C765 + C4505 * C961 + C4660 * C2383 + C44601 * C2512) *
                 C44464) *
                C44512 * C44593) *
               C44597 -
           (((C4808 + C4809) * C44464 + (C4683 + C4682) * C200) * C44512 *
                C44593 +
            ((C4807 + C4806) * C44464 + (C4678 + C4679) * C200) * C44512 *
                C4503) *
               C1819) *
              C44595)) /
        (p * q * std::sqrt(p + q));
    d2eezx[12] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C436 * C93 + C44512 * C437) * C1821 +
             (C436 * C101 + C44512 * C442) * C1817 - C460 * C1822 -
             C461 * C44595) *
                C4503 +
            (C460 * C1821 + C461 * C1817 - C462 * C1822 - C463 * C44595) *
                C44593) *
               C4505 +
           ((C6770 + C6771 - C6772 - C6773) * C4503 +
            (C6774 + C6775 - C6776 - C6777) * C44593) *
               C44601) *
              C44464 * C1819 +
          (((C6772 - (C6771 + C6770) + C6773) * C4503 +
            (C6776 - (C6775 + C6774) + C6777) * C44593) *
               C4505 +
           ((C5514 * C1822 -
             ((C436 * C2290 + C44512 * C2554) * C1817 +
              (C436 * C2284 + C44512 * C2551) * C1821) +
             C5515 * C44595) *
                C4503 +
            ((C436 * C2286 + C44512 * C2553) * C1822 -
             (C5515 * C1817 + C5514 * C1821) +
             (C436 * C2292 + C44512 * C2556) * C44595) *
                C44593) *
               C44601) *
              C44464 * C44597)) /
        (p * q * std::sqrt(p + q));
    d2eezy[12] += (2 * std::pow(Pi, 2.5) *
                   (((((C436 * C93 + C44512 * C437) * C1873 +
                       (C436 * C152 + C44512 * C503) * C1819 - C5512 * C1874 -
                       C5591 * C44597) *
                          C4503 +
                      (C2184 + C2185 - C2186 - C2187) * C44593) *
                         C4505 +
                     ((C5512 * C1873 + C5591 * C1819 -
                       (C436 * C2284 + C44512 * C2551) * C1874 -
                       (C436 * C2337 + C44512 * C2595) * C44597) *
                          C4503 +
                      (C6844 + C6845 - C6846 - C6847) * C44593) *
                         C44601) *
                        C1817 +
                    (((C2186 - (C2185 + C2184) + C2187) * C4503 +
                      (C2190 - (C2189 + C2188) + C2191) * C44593) *
                         C4505 +
                     ((C6846 - (C6845 + C6844) + C6847) * C4503 +
                      ((C436 * C2286 + C44512 * C2553) * C1874 -
                       (C1111 * C1819 + C1044 * C1873) +
                       (C436 * C2339 + C44512 * C2597) * C44597) *
                          C44593) *
                         C44601) *
                        C44595) *
                   C44464) /
                  (p * q * std::sqrt(p + q));
    d2eezz[12] +=
        (2 * std::pow(Pi, 2.5) *
         ((((((C436 * C93 + C44512 * C437) * C200 +
              (C436 * C201 + C44512 * C562) * C44464) *
                 C4503 +
             (C568 + C580) * C44593) *
                C4505 +
            ((C5660 + C5670) * C4503 + C5663 * C44593) * C44601) *
               C1819 -
           (((C5671 + C5666) * C44593 +
             ((C436 * C2381 + C44512 * C2636) * C44464 +
              (C436 * C2284 + C44512 * C2551) * C200) *
                 C4503) *
                C44601 +
            (C5667 * C44593 + (C5670 + C5660) * C4503) * C4505) *
               C44597) *
              C1817 +
          (((C5663 * C4503 + (C1170 + C1176) * C44593) * C4505 +
            ((C5666 + C5671) * C4503 +
             ((C436 * C2286 + C44512 * C2553) * C200 +
              (C436 * C2383 + C44512 * C2638) * C44464) *
                 C44593) *
                C44601) *
               C44597 -
           (((C1176 + C1170) * C44593 + C5667 * C4503) * C44601 +
            ((C581 + C571) * C44593 + (C580 + C568) * C4503) * C4505) *
               C1819) *
              C44595)) /
        (p * q * std::sqrt(p + q));
    d2eexx[13] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4507 * C93 + C4503 * C98 + C4508 * C94 + C44593 * C99) * C2283 +
            (C4507 * C101 + C4503 * C108 + C4508 * C102 + C44593 * C109) *
                C44407) *
               C4505 +
           ((C5046 + C5047) * C2283 + (C5048 + C5049) * C44407) * C44601) *
              C44512 * C44464 * C2280 -
          (((C6980 + C6981) * C44407 + (C6982 + C6983) * C2283) * C44601 +
           ((C5049 + C5048) * C44407 + (C5047 + C5046) * C2283) * C4505) *
              C44512 * C44464 * C2281 +
          (((C6983 + C6982) * C2283 + (C6981 + C6980) * C44407) * C4505 +
           ((C4507 * C6963 + C4503 * C6965 + C4508 * C6964 + C44593 * C6966) *
                C2283 +
            (C4507 * C6967 + C4503 * C6969 + C4508 * C6968 + C44593 * C6970) *
                C44407) *
               C44601) *
              C44512 * C44464 * C2282)) /
        (p * q * std::sqrt(p + q));
    d2eexy[13] +=
        (2 * std::pow(Pi, 2.5) *
         (((C4507 * C93 + C4503 * C98 + C4508 * C94 + C44593 * C99) * C2334 +
           (C4507 * C152 + C4503 * C157 + C4508 * C153 + C44593 * C158) *
               C2280 -
           (C5047 + C5046) * C2335 - (C5128 + C5129) * C2281 +
           (C6983 + C6982) * C2336 + (C7042 + C7043) * C2282) *
              C4505 +
          ((C5046 + C5047) * C2334 + (C5129 + C5128) * C2280 -
           (C6982 + C6983) * C2335 - (C7043 + C7042) * C2281 +
           (C4507 * C6963 + C4503 * C6965 + C4508 * C6964 + C44593 * C6966) *
               C2336 +
           (C4507 * C7033 + C4503 * C7035 + C4508 * C7034 + C44593 * C7036) *
               C2282) *
              C44601) *
         C44512 * C44407 * C44464) /
        (p * q * std::sqrt(p + q));
    d2eexz[13] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4507 * C93 + C4503 * C98 + C4508 * C94 + C44593 * C99) * C200 +
            (C4507 * C201 + C4503 * C206 + C4508 * C202 + C44593 * C207) *
                C44464) *
               C4505 +
           ((C5046 + C5047) * C200 + (C5206 + C5207) * C44464) * C44601) *
              C44512 * C2280 -
          (((C7102 + C7103) * C44464 + (C6982 + C6983) * C200) * C44601 +
           ((C5207 + C5206) * C44464 + (C5047 + C5046) * C200) * C4505) *
              C44512 * C2281 +
          (((C6983 + C6982) * C200 + (C7103 + C7102) * C44464) * C4505 +
           ((C4507 * C6963 + C4503 * C6965 + C4508 * C6964 + C44593 * C6966) *
                C200 +
            (C4507 * C7093 + C4503 * C7095 + C4508 * C7094 + C44593 * C7096) *
                C44464) *
               C44601) *
              C44512 * C2282) *
         C44407) /
        (p * q * std::sqrt(p + q));
    d2eeyx[13] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4659 * C93 + C4505 * C250 + C4660 * C642 + C44601 * C824) *
                C2283 +
            (C4659 * C101 + C4505 * C255 + C4660 * C648 + C44601 * C827) *
                C44407) *
               C44512 * C4503 +
           ((C4679 + C4678) * C2283 + (C4681 + C4680) * C44407) * C44512 *
               C44593) *
              C44464 * C2280 -
          (((C5287 + C5286) * C44407 + (C5285 + C5284) * C2283) * C44512 *
               C44593 +
           ((C4660 * C2290 + C44601 * C2428 + C4659 * C648 + C4505 * C827) *
                C44407 +
            (C4660 * C2284 + C44601 * C2425 + C4659 * C642 + C4505 * C824) *
                C2283) *
               C44512 * C4503) *
              C44464 * C2281 +
          (((C4659 * C2284 + C4505 * C2425 + C4660 * C6963 + C44601 * C7153) *
                C2283 +
            (C4659 * C2290 + C4505 * C2428 + C4660 * C6967 + C44601 * C7155) *
                C44407) *
               C44512 * C4503 +
           ((C4659 * C2285 + C4505 * C2426 + C4660 * C6964 + C44601 * C7154) *
                C2283 +
            (C4659 * C2291 + C4505 * C2429 + C4660 * C6968 + C44601 * C7156) *
                C44407) *
               C44512 * C44593) *
              C44464 * C2282)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[13] +=
        (2 * std::pow(Pi, 2.5) *
         (((C4659 * C93 + C4505 * C250 + C4660 * C642 + C44601 * C824) * C2334 +
           (C4659 * C152 + C4505 * C316 + C4660 * C709 + C44601 * C893) *
               C2280 -
           (C4660 * C2284 + C44601 * C2425 + C4659 * C642 + C4505 * C824) *
               C2335 -
           (C4660 * C2337 + C44601 * C2469 + C4659 * C709 + C4505 * C893) *
               C2281 +
           (C4659 * C2284 + C4505 * C2425 + C4660 * C6963 + C44601 * C7153) *
               C2336 +
           (C4659 * C2337 + C4505 * C2469 + C4660 * C7033 + C44601 * C7207) *
               C2282) *
              C44512 * C4503 +
          ((C4679 + C4678) * C2334 + (C4744 + C4745) * C2280 -
           (C5285 + C5284) * C2335 - (C5358 + C5359) * C2281 +
           (C4659 * C2285 + C4505 * C2426 + C4660 * C6964 + C44601 * C7154) *
               C2336 +
           (C4659 * C2338 + C4505 * C2470 + C4660 * C7034 + C44601 * C7208) *
               C2282) *
              C44512 * C44593) *
         C44407 * C44464) /
        (p * q * std::sqrt(p + q));
    d2eeyz[13] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4659 * C93 + C4505 * C250 + C4660 * C642 + C44601 * C824) * C200 +
            (C4659 * C201 + C4505 * C376 + C4660 * C767 + C44601 * C963) *
                C44464) *
               C44512 * C4503 +
           ((C4679 + C4678) * C200 + (C4806 + C4807) * C44464) * C44512 *
               C44593) *
              C2280 -
          (((C5430 + C5431) * C44464 + (C5285 + C5284) * C200) * C44512 *
               C44593 +
           ((C4660 * C2381 + C44601 * C2510 + C4659 * C767 + C4505 * C963) *
                C44464 +
            (C4660 * C2284 + C44601 * C2425 + C4659 * C642 + C4505 * C824) *
                C200) *
               C44512 * C4503) *
              C2281 +
          (((C4659 * C2284 + C4505 * C2425 + C4660 * C6963 + C44601 * C7153) *
                C200 +
            (C4659 * C2381 + C4505 * C2510 + C4660 * C7093 + C44601 * C7259) *
                C44464) *
               C44512 * C4503 +
           ((C4659 * C2285 + C4505 * C2426 + C4660 * C6964 + C44601 * C7154) *
                C200 +
            (C4659 * C2382 + C4505 * C2511 + C4660 * C7094 + C44601 * C7260) *
                C44464) *
               C44512 * C44593) *
              C2282) *
         C44407) /
        (p * q * std::sqrt(p + q));
    d2eezx[13] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C436 * C93 + C44512 * C437) * C2283 +
             (C436 * C101 + C44512 * C442) * C44407) *
                C4503 +
            (C460 * C2283 + C461 * C44407) * C44593) *
               C4505 +
           ((C7316 + C7317) * C4503 + (C7318 + C7319) * C44593) * C44601) *
              C44464 * C2280 -
          (((C7320 + C7321) * C44593 + (C7328 + C7329) * C4503) * C44601 +
           ((C7319 + C7318) * C44593 + (C7317 + C7316) * C4503) * C4505) *
              C44464 * C2281 +
          (((C7329 + C7328) * C4503 + (C7321 + C7320) * C44593) * C4505 +
           (((C436 * C6963 + C44512 * C7311) * C2283 +
             (C436 * C6967 + C44512 * C7313) * C44407) *
                C4503 +
            ((C436 * C6964 + C44512 * C7312) * C2283 +
             (C436 * C6968 + C44512 * C7314) * C44407) *
                C44593) *
               C44601) *
              C44464 * C2282)) /
        (p * q * std::sqrt(p + q));
    d2eezy[13] += (2 * std::pow(Pi, 2.5) *
                   ((((C436 * C93 + C44512 * C437) * C2334 +
                      (C436 * C152 + C44512 * C503) * C2280 - C5512 * C2335 -
                      C5591 * C2281 + C7327 * C2336 + C7384 * C2282) *
                         C4503 +
                     (C460 * C2334 + C518 * C2280 - C1042 * C2335 -
                      C1110 * C2281 + C5514 * C2336 + C5592 * C2282) *
                         C44593) *
                        C4505 +
                    ((C5512 * C2334 + C5591 * C2280 - C7327 * C2335 -
                      C7384 * C2281 + (C436 * C6963 + C44512 * C7311) * C2336 +
                      (C436 * C7033 + C44512 * C7379) * C2282) *
                         C4503 +
                     (C1042 * C2334 + C1110 * C2280 - C5514 * C2335 -
                      C5592 * C2281 + (C436 * C6964 + C44512 * C7312) * C2336 +
                      (C436 * C7034 + C44512 * C7380) * C2282) *
                         C44593) *
                        C44601) *
                   C44407 * C44464) /
                  (p * q * std::sqrt(p + q));
    d2eezz[13] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C436 * C93 + C44512 * C437) * C200 +
             (C436 * C201 + C44512 * C562) * C44464) *
                C4503 +
            (C568 + C580) * C44593) *
               C4505 +
           ((C5660 + C5670) * C4503 + C5663 * C44593) * C44601) *
              C2280 -
          (((C5671 + C5666) * C44593 + (C7441 + C7439) * C4503) * C44601 +
           (C5667 * C44593 + (C5670 + C5660) * C4503) * C4505) *
              C2281 +
          (((C7439 + C7441) * C4503 + (C5666 + C5671) * C44593) * C4505 +
           (((C436 * C6963 + C44512 * C7311) * C200 +
             (C436 * C7093 + C44512 * C7434) * C44464) *
                C4503 +
            ((C436 * C6964 + C44512 * C7312) * C200 +
             (C436 * C7094 + C44512 * C7435) * C44464) *
                C44593) *
               C44601) *
              C2282) *
         C44407) /
        (p * q * std::sqrt(p + q));
    d2eexx[14] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C4507 * C93 + C4503 * C98 + C4508 * C94 + C44593 * C99) * C2283 +
             (C4507 * C101 + C4503 * C108 + C4508 * C102 + C44593 * C109) *
                 C44407) *
                C4505 +
            ((C5046 + C5047) * C2283 + (C5048 + C5049) * C44407) * C44601) *
               C44512 * C1227 -
           (((C7524 + C7525) * C44407 + (C7526 + C7527) * C2283) * C44601 +
            ((C4508 * C1237 + C44593 * C1242 + C4507 * C1238 + C4503 * C1243) *
                 C44407 +
             (C4508 * C1229 + C44593 * C1233 + C4507 * C1232 + C4503 * C1239) *
                 C2283) *
                C4505) *
               C44512 * C44599) *
              C1819 +
          ((((C7527 + C7526) * C2283 + (C7525 + C7524) * C44407) * C4505 +
            ((C4507 * C7507 + C4503 * C7509 + C4508 * C7508 + C44593 * C7510) *
                 C2283 +
             (C4507 * C7511 + C4503 * C7513 + C4508 * C7512 + C44593 * C7514) *
                 C44407) *
                C44601) *
               C44512 * C44599 -
           (((C6980 + C6981) * C44407 + (C6982 + C6983) * C2283) * C44601 +
            ((C5049 + C5048) * C44407 + (C5047 + C5046) * C2283) * C4505) *
               C44512 * C1227) *
              C44597)) /
        (p * q * std::sqrt(p + q));
    d2eexy[14] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4507 * C93 + C4503 * C98 + C4508 * C94 + C44593 * C99) * C1873 +
            (C4507 * C152 + C4503 * C157 + C4508 * C153 + C44593 * C158) *
                C1819 -
            (C5047 + C5046) * C1874 - (C5128 + C5129) * C44597) *
               C4505 +
           ((C5046 + C5047) * C1873 + (C5129 + C5128) * C1819 -
            (C6982 + C6983) * C1874 - (C7043 + C7042) * C44597) *
               C44601) *
              C44512 * C44407 * C1227 +
          (((C7527 + C7526) * C1874 -
            ((C4508 * C1295 + C44593 * C1299 + C4507 * C1298 + C4503 * C1302) *
                 C1819 +
             (C4508 * C1229 + C44593 * C1233 + C4507 * C1232 + C4503 * C1239) *
                 C1873) +
            (C7602 + C7603) * C44597) *
               C4505 +
           ((C4507 * C7507 + C4503 * C7509 + C4508 * C7508 + C44593 * C7510) *
                C1874 -
            ((C7603 + C7602) * C1819 + (C7526 + C7527) * C1873) +
            (C4507 * C7593 + C4503 * C7595 + C4508 * C7594 + C44593 * C7596) *
                C44597) *
               C44601) *
              C44512 * C44407 * C44599)) /
        (p * q * std::sqrt(p + q));
    d2eexz[14] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4507 * C93 + C4503 * C98 + C4508 * C94 + C44593 * C99) * C1353 +
            (C4507 * C201 + C4503 * C206 + C4508 * C202 + C44593 * C207) *
                C1227 -
            (C4508 * C1229 + C44593 * C1233 + C4507 * C1232 + C4503 * C1239) *
                C1354 -
            (C4508 * C1356 + C44593 * C1360 + C4507 * C1357 + C4503 * C1361) *
                C44599) *
               C4505 +
           ((C5046 + C5047) * C1353 + (C5206 + C5207) * C1227 -
            (C7526 + C7527) * C1354 - (C7678 + C7679) * C44599) *
               C44601) *
              C44512 * C1819 +
          (((C7527 + C7526) * C1354 -
            ((C5207 + C5206) * C1227 + (C5047 + C5046) * C1353) +
            (C7679 + C7678) * C44599) *
               C4505 +
           ((C4507 * C7507 + C4503 * C7509 + C4508 * C7508 + C44593 * C7510) *
                C1354 -
            ((C7102 + C7103) * C1227 + (C6982 + C6983) * C1353) +
            (C4507 * C7669 + C4503 * C7671 + C4508 * C7670 + C44593 * C7672) *
                C44599) *
               C44601) *
              C44512 * C44597) *
         C44407) /
        (p * q * std::sqrt(p + q));
    d2eeyx[14] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C4659 * C93 + C4505 * C250 + C4660 * C642 + C44601 * C824) *
                 C2283 +
             (C4659 * C101 + C4505 * C255 + C4660 * C648 + C44601 * C827) *
                 C44407) *
                C44512 * C4503 +
            ((C4679 + C4678) * C2283 + (C4681 + C4680) * C44407) * C44512 *
                C44593) *
               C1227 -
           (((C5947 + C5946) * C44407 + (C5945 + C5944) * C2283) * C44512 *
                C44593 +
            ((C4660 * C2695 + C44601 * C2866 + C4659 * C1238 + C4505 * C1417) *
                 C44407 +
             (C4660 * C2689 + C44601 * C2863 + C4659 * C1232 + C4505 * C1414) *
                 C2283) *
                C44512 * C4503) *
               C44599) *
              C1819 +
          ((((C4659 * C2689 + C4505 * C2863 + C4660 * C7507 + C44601 * C7745) *
                 C2283 +
             (C4659 * C2695 + C4505 * C2866 + C4660 * C7511 + C44601 * C7747) *
                 C44407) *
                C44512 * C4503 +
            ((C4659 * C2690 + C4505 * C2864 + C4660 * C7508 + C44601 * C7746) *
                 C2283 +
             (C4659 * C2696 + C4505 * C2867 + C4660 * C7512 + C44601 * C7748) *
                 C44407) *
                C44512 * C44593) *
               C44599 -
           (((C5287 + C5286) * C44407 + (C5285 + C5284) * C2283) * C44512 *
                C44593 +
            ((C4660 * C2290 + C44601 * C2428 + C4659 * C648 + C4505 * C827) *
                 C44407 +
             (C4660 * C2284 + C44601 * C2425 + C4659 * C642 + C4505 * C824) *
                 C2283) *
                C44512 * C4503) *
               C1227) *
              C44597)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[14] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4659 * C93 + C4505 * C250 + C4660 * C642 + C44601 * C824) *
                C1873 +
            (C4659 * C152 + C4505 * C316 + C4660 * C709 + C44601 * C893) *
                C1819 -
            (C4660 * C2284 + C44601 * C2425 + C4659 * C642 + C4505 * C824) *
                C1874 -
            (C4660 * C2337 + C44601 * C2469 + C4659 * C709 + C4505 * C893) *
                C44597) *
               C44512 * C4503 +
           ((C4679 + C4678) * C1873 + (C4744 + C4745) * C1819 -
            (C5285 + C5284) * C1874 - (C5358 + C5359) * C44597) *
               C44512 * C44593) *
              C44407 * C1227 +
          (((C4659 * C2689 + C4505 * C2863 + C4660 * C7507 + C44601 * C7745) *
                C1874 -
            ((C4660 * C2751 + C44601 * C2919 + C4659 * C1298 + C4505 * C1486) *
                 C1819 +
             (C4660 * C2689 + C44601 * C2863 + C4659 * C1232 + C4505 * C1414) *
                 C1873) +
            (C4659 * C2751 + C4505 * C2919 + C4660 * C7593 + C44601 * C7815) *
                C44597) *
               C44512 * C4503 +
           ((C4659 * C2690 + C4505 * C2864 + C4660 * C7508 + C44601 * C7746) *
                C1874 -
            ((C6019 + C6018) * C1819 + (C5945 + C5944) * C1873) +
            (C4659 * C2752 + C4505 * C2920 + C4660 * C7594 + C44601 * C7816) *
                C44597) *
               C44512 * C44593) *
              C44407 * C44599)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[14] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4659 * C93 + C4505 * C250 + C4660 * C642 + C44601 * C824) *
                C1353 +
            (C4659 * C201 + C4505 * C376 + C4660 * C767 + C44601 * C963) *
                C1227 -
            (C4660 * C2689 + C44601 * C2863 + C4659 * C1232 + C4505 * C1414) *
                C1354 -
            (C4660 * C2807 + C44601 * C2972 + C4659 * C1357 + C4505 * C1547) *
                C44599) *
               C44512 * C4503 +
           ((C4679 + C4678) * C1353 + (C4806 + C4807) * C1227 -
            (C5945 + C5944) * C1354 - (C6090 + C6091) * C44599) *
               C44512 * C44593) *
              C1819 +
          (((C4659 * C2689 + C4505 * C2863 + C4660 * C7507 + C44601 * C7745) *
                C1354 -
            ((C4660 * C2381 + C44601 * C2510 + C4659 * C767 + C4505 * C963) *
                 C1227 +
             (C4660 * C2284 + C44601 * C2425 + C4659 * C642 + C4505 * C824) *
                 C1353) +
            (C4659 * C2807 + C4505 * C2972 + C4660 * C7669 + C44601 * C7883) *
                C44599) *
               C44512 * C4503 +
           ((C4659 * C2690 + C4505 * C2864 + C4660 * C7508 + C44601 * C7746) *
                C1354 -
            ((C5430 + C5431) * C1227 + (C5285 + C5284) * C1353) +
            (C4659 * C2808 + C4505 * C2973 + C4660 * C7670 + C44601 * C7884) *
                C44599) *
               C44512 * C44593) *
              C44597) *
         C44407) /
        (p * q * std::sqrt(p + q));
    d2eezx[14] +=
        (2 * std::pow(Pi, 2.5) *
         ((((((C436 * C93 + C44512 * C437) * C2283 +
              (C436 * C101 + C44512 * C442) * C44407) *
                 C4503 +
             (C460 * C2283 + C461 * C44407) * C44593) *
                C4505 +
            ((C7316 + C7317) * C4503 + (C7318 + C7319) * C44593) * C44601) *
               C1227 -
           (((C7956 + C7957) * C44593 + (C7964 + C7965) * C4503) * C44601 +
            ((C1633 * C44407 + C1632 * C2283) * C44593 +
             ((C436 * C1238 + C44512 * C1619) * C44407 +
              (C436 * C1232 + C44512 * C1616) * C2283) *
                 C4503) *
                C4505) *
               C44599) *
              C1819 +
          ((((C7965 + C7964) * C4503 + (C7957 + C7956) * C44593) * C4505 +
            (((C436 * C7507 + C44512 * C7951) * C2283 +
              (C436 * C7511 + C44512 * C7953) * C44407) *
                 C4503 +
             ((C436 * C7508 + C44512 * C7952) * C2283 +
              (C436 * C7512 + C44512 * C7954) * C44407) *
                 C44593) *
                C44601) *
               C44599 -
           (((C7320 + C7321) * C44593 + (C7328 + C7329) * C4503) * C44601 +
            ((C7319 + C7318) * C44593 + (C7317 + C7316) * C4503) * C4505) *
               C1227) *
              C44597)) /
        (p * q * std::sqrt(p + q));
    d2eezy[14] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C436 * C93 + C44512 * C437) * C1873 +
             (C436 * C152 + C44512 * C503) * C1819 - C5512 * C1874 -
             C5591 * C44597) *
                C4503 +
            (C2184 + C2185 - C2186 - C2187) * C44593) *
               C4505 +
           ((C5512 * C1873 + C5591 * C1819 - C7327 * C1874 - C7384 * C44597) *
                C4503 +
            (C6844 + C6845 - C6846 - C6847) * C44593) *
               C44601) *
              C44407 * C1227 +
          (((C7963 * C1874 -
             ((C436 * C1298 + C44512 * C1688) * C1819 +
              (C436 * C1232 + C44512 * C1616) * C1873) +
             C8036 * C44597) *
                C4503 +
            (C6162 * C1874 - (C1696 * C1819 + C1632 * C1873) + C6233 * C44597) *
                C44593) *
               C4505 +
           (((C436 * C7507 + C44512 * C7951) * C1874 -
             (C8036 * C1819 + C7963 * C1873) +
             (C436 * C7593 + C44512 * C8031) * C44597) *
                C4503 +
            ((C436 * C7508 + C44512 * C7952) * C1874 -
             (C6233 * C1819 + C6162 * C1873) +
             (C436 * C7594 + C44512 * C8032) * C44597) *
                C44593) *
               C44601) *
              C44407 * C44599)) /
        (p * q * std::sqrt(p + q));
    d2eezz[14] += (2 * std::pow(Pi, 2.5) *
                   (((((C436 * C93 + C44512 * C437) * C1353 +
                       (C436 * C201 + C44512 * C562) * C1227 -
                       (C436 * C1232 + C44512 * C1616) * C1354 -
                       (C436 * C1357 + C44512 * C1749) * C44599) *
                          C4503 +
                      (C1754 + C1755 - C1756 - C1766) * C44593) *
                         C4505 +
                     ((C8105 + C8106 - C8107 - C8111) * C4503 +
                      (C6301 + C6302 - C6303 - C6307) * C44593) *
                         C44601) *
                        C1819 +
                    (((C8107 - (C8106 + C8105) + C8111) * C4503 +
                      (C6303 - (C6302 + C6301) + C6307) * C44593) *
                         C4505 +
                     (((C436 * C7507 + C44512 * C7951) * C1354 -
                       (C7440 * C1227 + C7327 * C1353) +
                       (C436 * C7669 + C44512 * C8102) * C44599) *
                          C4503 +
                      ((C436 * C7508 + C44512 * C7952) * C1354 -
                       (C5669 * C1227 + C5514 * C1353) +
                       (C436 * C7670 + C44512 * C8103) * C44599) *
                          C44593) *
                         C44601) *
                        C44597) *
                   C44407) /
                  (p * q * std::sqrt(p + q));
    d2eexx[15] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4507 * C93 + C4503 * C98 + C4508 * C94 + C44593 * C99) * C1821 +
            (C4507 * C101 + C4503 * C108 + C4508 * C102 + C44593 * C109) *
                C1817 -
            (C4508 * C95 + C44593 * C100 + C4507 * C94 + C4503 * C99) * C1822 -
            (C4508 * C103 + C44593 * C110 + C4507 * C102 + C4503 * C109) *
                C44595) *
               C4505 +
           ((C5046 + C5047) * C1821 + (C5048 + C5049) * C1817 -
            (C5050 + C5051) * C1822 - (C5052 + C5053) * C44595) *
               C44601) *
              C44512 * C3187 +
          (((C4507 * C1229 + C4503 * C1233 + C4508 * C1230 + C44593 * C1234) *
                C1822 -
            ((C4508 * C1237 + C44593 * C1242 + C4507 * C1238 + C4503 * C1243) *
                 C1817 +
             (C4508 * C1229 + C44593 * C1233 + C4507 * C1232 + C4503 * C1239) *
                 C1821) +
            (C4507 * C1237 + C4503 * C1242 + C4508 * C1236 + C44593 * C1241) *
                C44595) *
               C4505 +
           ((C4507 * C2690 + C4503 * C2693 + C4508 * C2691 + C44593 * C2694) *
                C1822 -
            ((C7524 + C7525) * C1817 + (C7526 + C7527) * C1821) +
            (C4507 * C2696 + C4503 * C2699 + C4508 * C2697 + C44593 * C2700) *
                C44595) *
               C44601) *
              C44512 * C44599) *
         C44449) /
        (p * q * std::sqrt(p + q));
    d2eexy[15] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C4507 * C93 + C4503 * C98 + C4508 * C94 + C44593 * C99) * C151 +
             (C4507 * C152 + C4503 * C157 + C4508 * C153 + C44593 * C158) *
                 C44449) *
                C4505 +
            ((C5046 + C5047) * C151 + (C5129 + C5128) * C44449) * C44601) *
               C44512 * C1817 -
           (((C5131 + C5130) * C44449 + (C5050 + C5051) * C151) * C44601 +
            ((C4508 * C154 + C44593 * C159 + C4507 * C153 + C4503 * C158) *
                 C44449 +
             (C4508 * C95 + C44593 * C100 + C4507 * C94 + C4503 * C99) * C151) *
                C4505) *
               C44512 * C44595) *
              C3187 +
          ((((C4507 * C1229 + C4503 * C1233 + C4508 * C1230 + C44593 * C1234) *
                 C151 +
             (C4507 * C1295 + C4503 * C1299 + C4508 * C1296 + C44593 * C1300) *
                 C44449) *
                C4505 +
            ((C4507 * C2690 + C4503 * C2693 + C4508 * C2691 + C44593 * C2694) *
                 C151 +
             (C4507 * C2752 + C4503 * C2755 + C4508 * C2753 + C44593 * C2756) *
                 C44449) *
                C44601) *
               C44512 * C44595 -
           (((C7603 + C7602) * C44449 + (C7526 + C7527) * C151) * C44601 +
            ((C4508 * C1295 + C44593 * C1299 + C4507 * C1298 + C4503 * C1302) *
                 C44449 +
             (C4508 * C1229 + C44593 * C1233 + C4507 * C1232 + C4503 * C1239) *
                 C151) *
                C4505) *
               C44512 * C1817) *
              C44599)) /
        (p * q * std::sqrt(p + q));
    d2eexz[15] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4507 * C93 + C4503 * C98 + C4508 * C94 + C44593 * C99) * C3289 +
            (C4507 * C201 + C4503 * C206 + C4508 * C202 + C44593 * C207) *
                C3187 -
            (C4508 * C1229 + C44593 * C1233 + C4507 * C1232 + C4503 * C1239) *
                C3290 -
            (C4508 * C1356 + C44593 * C1360 + C4507 * C1357 + C4503 * C1361) *
                C44599) *
               C4505 +
           ((C5046 + C5047) * C3289 + (C5206 + C5207) * C3187 -
            (C7526 + C7527) * C3290 - (C7678 + C7679) * C44599) *
               C44601) *
              C44512 * C44449 * C1817 +
          (((C4507 * C1229 + C4503 * C1233 + C4508 * C1230 + C44593 * C1234) *
                C3290 -
            ((C4508 * C203 + C44593 * C208 + C4507 * C202 + C4503 * C207) *
                 C3187 +
             (C4508 * C95 + C44593 * C100 + C4507 * C94 + C4503 * C99) *
                 C3289) +
            (C4507 * C1356 + C4503 * C1360 + C4508 * C1355 + C44593 * C1359) *
                C44599) *
               C4505 +
           ((C4507 * C2690 + C4503 * C2693 + C4508 * C2691 + C44593 * C2694) *
                C3290 -
            ((C5209 + C5208) * C3187 + (C5050 + C5051) * C3289) +
            (C4507 * C2808 + C4503 * C2811 + C4508 * C2809 + C44593 * C2812) *
                C44599) *
               C44601) *
              C44512 * C44449 * C44595)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[15] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4659 * C93 + C4505 * C250 + C4660 * C642 + C44601 * C824) *
                C1821 +
            (C4659 * C101 + C4505 * C255 + C4660 * C648 + C44601 * C827) *
                C1817 -
            (C4678 + C4679) * C1822 - (C4680 + C4681) * C44595) *
               C44512 * C4503 +
           ((C4679 + C4678) * C1821 + (C4681 + C4680) * C1817 -
            (C4683 + C4682) * C1822 - (C4685 + C4684) * C44595) *
               C44512 * C44593) *
              C3187 +
          (((C5944 + C5945) * C1822 -
            ((C4660 * C2695 + C44601 * C2866 + C4659 * C1238 + C4505 * C1417) *
                 C1817 +
             (C4660 * C2689 + C44601 * C2863 + C4659 * C1232 + C4505 * C1414) *
                 C1821) +
            (C5946 + C5947) * C44595) *
               C44512 * C4503 +
           ((C4659 * C1230 + C4505 * C1415 + C4660 * C2691 + C44601 * C2865) *
                C1822 -
            ((C5947 + C5946) * C1817 + (C5945 + C5944) * C1821) +
            (C4659 * C1236 + C4505 * C1419 + C4660 * C2697 + C44601 * C2868) *
                C44595) *
               C44512 * C44593) *
              C44599) *
         C44449) /
        (p * q * std::sqrt(p + q));
    d2eeyy[15] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C4659 * C93 + C4505 * C250 + C4660 * C642 + C44601 * C824) *
                 C151 +
             (C4659 * C152 + C4505 * C316 + C4660 * C709 + C44601 * C893) *
                 C44449) *
                C44512 * C4503 +
            ((C4679 + C4678) * C151 + (C4744 + C4745) * C44449) * C44512 *
                C44593) *
               C1817 -
           (((C4746 + C4747) * C44449 + (C4683 + C4682) * C151) * C44512 *
                C44593 +
            ((C4745 + C4744) * C44449 + (C4678 + C4679) * C151) * C44512 *
                C4503) *
               C44595) *
              C3187 +
          ((((C5944 + C5945) * C151 + (C6018 + C6019) * C44449) * C44512 *
                C4503 +
            ((C4659 * C1230 + C4505 * C1415 + C4660 * C2691 + C44601 * C2865) *
                 C151 +
             (C4659 * C1296 + C4505 * C1484 + C4660 * C2753 + C44601 * C2921) *
                 C44449) *
                C44512 * C44593) *
               C44595 -
           (((C6019 + C6018) * C44449 + (C5945 + C5944) * C151) * C44512 *
                C44593 +
            ((C4660 * C2751 + C44601 * C2919 + C4659 * C1298 + C4505 * C1486) *
                 C44449 +
             (C4660 * C2689 + C44601 * C2863 + C4659 * C1232 + C4505 * C1414) *
                 C151) *
                C44512 * C4503) *
               C1817) *
              C44599)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[15] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4659 * C93 + C4505 * C250 + C4660 * C642 + C44601 * C824) *
                C3289 +
            (C4659 * C201 + C4505 * C376 + C4660 * C767 + C44601 * C963) *
                C3187 -
            (C4660 * C2689 + C44601 * C2863 + C4659 * C1232 + C4505 * C1414) *
                C3290 -
            (C4660 * C2807 + C44601 * C2972 + C4659 * C1357 + C4505 * C1547) *
                C44599) *
               C44512 * C4503 +
           ((C4679 + C4678) * C3289 + (C4806 + C4807) * C3187 -
            (C5945 + C5944) * C3290 - (C6090 + C6091) * C44599) *
               C44512 * C44593) *
              C44449 * C1817 +
          (((C5944 + C5945) * C3290 -
            ((C4807 + C4806) * C3187 + (C4678 + C4679) * C3289) +
            (C6091 + C6090) * C44599) *
               C44512 * C4503 +
           ((C4659 * C1230 + C4505 * C1415 + C4660 * C2691 + C44601 * C2865) *
                C3290 -
            ((C4808 + C4809) * C3187 + (C4683 + C4682) * C3289) +
            (C4659 * C1355 + C4505 * C1549 + C4660 * C2809 + C44601 * C2974) *
                C44599) *
               C44512 * C44593) *
              C44449 * C44595)) /
        (p * q * std::sqrt(p + q));
    d2eezx[15] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C436 * C93 + C44512 * C437) * C1821 +
             (C436 * C101 + C44512 * C442) * C1817 - C460 * C1822 -
             C461 * C44595) *
                C4503 +
            (C460 * C1821 + C461 * C1817 - C462 * C1822 - C463 * C44595) *
                C44593) *
               C4505 +
           ((C6770 + C6771 - C6772 - C6773) * C4503 +
            (C6774 + C6775 - C6776 - C6777) * C44593) *
               C44601) *
              C3187 +
          (((C1632 * C1822 -
             ((C436 * C1238 + C44512 * C1619) * C1817 +
              (C436 * C1232 + C44512 * C1616) * C1821) +
             C1633 * C44595) *
                C4503 +
            (C1634 * C1822 - (C1633 * C1817 + C1632 * C1821) + C1635 * C44595) *
                C44593) *
               C4505 +
           ((C6162 * C1822 - (C7962 * C1817 + C7963 * C1821) + C6163 * C44595) *
                C4503 +
            ((C436 * C2691 + C44512 * C3027) * C1822 -
             (C6163 * C1817 + C6162 * C1821) +
             (C436 * C2697 + C44512 * C3030) * C44595) *
                C44593) *
               C44601) *
              C44599) *
         C44449) /
        (p * q * std::sqrt(p + q));
    d2eezy[15] +=
        (2 * std::pow(Pi, 2.5) *
         ((((((C436 * C93 + C44512 * C437) * C151 +
              (C436 * C152 + C44512 * C503) * C44449) *
                 C4503 +
             (C509 + C521) * C44593) *
                C4505 +
            ((C5512 * C151 + C5591 * C44449) * C4503 +
             (C4910 + C4911) * C44593) *
                C44601) *
               C1817 -
           (((C4912 + C4913) * C44593 + (C4911 + C4910) * C4503) * C44601 +
            ((C522 + C512) * C44593 + (C521 + C509) * C4503) * C4505) *
               C44595) *
              C3187 +
          ((((C1690 + C1698) * C4503 + (C1693 + C1699) * C44593) * C4505 +
            ((C6230 + C6234) * C4503 +
             ((C436 * C2691 + C44512 * C3027) * C151 +
              (C436 * C2753 + C44512 * C3083) * C44449) *
                 C44593) *
                C44601) *
               C44595 -
           (((C6234 + C6230) * C44593 +
             (C8036 * C44449 + C7963 * C151) * C4503) *
                C44601 +
            ((C1698 + C1690) * C44593 +
             ((C436 * C1298 + C44512 * C1688) * C44449 +
              (C436 * C1232 + C44512 * C1616) * C151) *
                 C4503) *
                C4505) *
               C1817) *
              C44599)) /
        (p * q * std::sqrt(p + q));
    d2eezz[15] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C436 * C93 + C44512 * C437) * C3289 +
             (C436 * C201 + C44512 * C562) * C3187 -
             (C436 * C1232 + C44512 * C1616) * C3290 -
             (C436 * C1357 + C44512 * C1749) * C44599) *
                C4503 +
            (C3600 + C3601 - C3602 - C3603) * C44593) *
               C4505 +
           ((C5512 * C3289 + C5668 * C3187 - C7963 * C3290 - C8110 * C44599) *
                C4503 +
            (C8706 + C8707 - C8708 - C8709) * C44593) *
               C44601) *
              C44449 * C1817 +
          (((C3602 - (C3601 + C3600) + C3603) * C4503 +
            (C3606 - (C3605 + C3604) + C3607) * C44593) *
               C4505 +
           ((C8708 - (C8707 + C8706) + C8709) * C4503 +
            ((C436 * C2691 + C44512 * C3027) * C3290 -
             (C1174 * C3187 + C1044 * C3289) +
             (C436 * C2809 + C44512 * C3136) * C44599) *
                C44593) *
               C44601) *
              C44449 * C44595)) /
        (p * q * std::sqrt(p + q));
    d2eexx[16] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C4507 * C93 + C4503 * C98 + C4508 * C94 + C44593 * C99) * C2283 +
             (C4507 * C101 + C4503 * C108 + C4508 * C102 + C44593 * C109) *
                 C44407) *
                C4505 +
            ((C5046 + C5047) * C2283 + (C5048 + C5049) * C44407) * C44601) *
               C44512 * C3187 -
           (((C7524 + C7525) * C44407 + (C7526 + C7527) * C2283) * C44601 +
            ((C4508 * C1237 + C44593 * C1242 + C4507 * C1238 + C4503 * C1243) *
                 C44407 +
             (C4508 * C1229 + C44593 * C1233 + C4507 * C1232 + C4503 * C1239) *
                 C2283) *
                C4505) *
               C44512 * C44599) *
              C635 +
          ((((C7527 + C7526) * C2283 + (C7525 + C7524) * C44407) * C4505 +
            ((C4507 * C7507 + C4503 * C7509 + C4508 * C7508 + C44593 * C7510) *
                 C2283 +
             (C4507 * C7511 + C4503 * C7513 + C4508 * C7512 + C44593 * C7514) *
                 C44407) *
                C44601) *
               C44512 * C44599 -
           (((C6980 + C6981) * C44407 + (C6982 + C6983) * C2283) * C44601 +
            ((C5049 + C5048) * C44407 + (C5047 + C5046) * C2283) * C4505) *
               C44512 * C3187) *
              C44597)) /
        (p * q * std::sqrt(p + q));
    d2eexy[16] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4507 * C93 + C4503 * C98 + C4508 * C94 + C44593 * C99) * C705 +
            (C4507 * C152 + C4503 * C157 + C4508 * C153 + C44593 * C158) *
                C635 -
            (C5047 + C5046) * C706 - (C5128 + C5129) * C44597) *
               C4505 +
           ((C5046 + C5047) * C705 + (C5129 + C5128) * C635 -
            (C6982 + C6983) * C706 - (C7043 + C7042) * C44597) *
               C44601) *
              C44512 * C44407 * C3187 +
          (((C7527 + C7526) * C706 -
            ((C4508 * C1295 + C44593 * C1299 + C4507 * C1298 + C4503 * C1302) *
                 C635 +
             (C4508 * C1229 + C44593 * C1233 + C4507 * C1232 + C4503 * C1239) *
                 C705) +
            (C7602 + C7603) * C44597) *
               C4505 +
           ((C4507 * C7507 + C4503 * C7509 + C4508 * C7508 + C44593 * C7510) *
                C706 -
            ((C7603 + C7602) * C635 + (C7526 + C7527) * C705) +
            (C4507 * C7593 + C4503 * C7595 + C4508 * C7594 + C44593 * C7596) *
                C44597) *
               C44601) *
              C44512 * C44407 * C44599)) /
        (p * q * std::sqrt(p + q));
    d2eexz[16] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4507 * C93 + C4503 * C98 + C4508 * C94 + C44593 * C99) * C3289 +
            (C4507 * C201 + C4503 * C206 + C4508 * C202 + C44593 * C207) *
                C3187 -
            (C4508 * C1229 + C44593 * C1233 + C4507 * C1232 + C4503 * C1239) *
                C3290 -
            (C4508 * C1356 + C44593 * C1360 + C4507 * C1357 + C4503 * C1361) *
                C44599) *
               C4505 +
           ((C5046 + C5047) * C3289 + (C5206 + C5207) * C3187 -
            (C7526 + C7527) * C3290 - (C7678 + C7679) * C44599) *
               C44601) *
              C44512 * C635 +
          (((C7527 + C7526) * C3290 -
            ((C5207 + C5206) * C3187 + (C5047 + C5046) * C3289) +
            (C7679 + C7678) * C44599) *
               C4505 +
           ((C4507 * C7507 + C4503 * C7509 + C4508 * C7508 + C44593 * C7510) *
                C3290 -
            ((C7102 + C7103) * C3187 + (C6982 + C6983) * C3289) +
            (C4507 * C7669 + C4503 * C7671 + C4508 * C7670 + C44593 * C7672) *
                C44599) *
               C44601) *
              C44512 * C44597) *
         C44407) /
        (p * q * std::sqrt(p + q));
    d2eeyx[16] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C4659 * C93 + C4505 * C250 + C4660 * C642 + C44601 * C824) *
                 C2283 +
             (C4659 * C101 + C4505 * C255 + C4660 * C648 + C44601 * C827) *
                 C44407) *
                C44512 * C4503 +
            ((C4679 + C4678) * C2283 + (C4681 + C4680) * C44407) * C44512 *
                C44593) *
               C3187 -
           (((C5947 + C5946) * C44407 + (C5945 + C5944) * C2283) * C44512 *
                C44593 +
            ((C4660 * C2695 + C44601 * C2866 + C4659 * C1238 + C4505 * C1417) *
                 C44407 +
             (C4660 * C2689 + C44601 * C2863 + C4659 * C1232 + C4505 * C1414) *
                 C2283) *
                C44512 * C4503) *
               C44599) *
              C635 +
          ((((C4659 * C2689 + C4505 * C2863 + C4660 * C7507 + C44601 * C7745) *
                 C2283 +
             (C4659 * C2695 + C4505 * C2866 + C4660 * C7511 + C44601 * C7747) *
                 C44407) *
                C44512 * C4503 +
            ((C4659 * C2690 + C4505 * C2864 + C4660 * C7508 + C44601 * C7746) *
                 C2283 +
             (C4659 * C2696 + C4505 * C2867 + C4660 * C7512 + C44601 * C7748) *
                 C44407) *
                C44512 * C44593) *
               C44599 -
           (((C5287 + C5286) * C44407 + (C5285 + C5284) * C2283) * C44512 *
                C44593 +
            ((C4660 * C2290 + C44601 * C2428 + C4659 * C648 + C4505 * C827) *
                 C44407 +
             (C4660 * C2284 + C44601 * C2425 + C4659 * C642 + C4505 * C824) *
                 C2283) *
                C44512 * C4503) *
               C3187) *
              C44597)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[16] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4659 * C93 + C4505 * C250 + C4660 * C642 + C44601 * C824) * C705 +
            (C4659 * C152 + C4505 * C316 + C4660 * C709 + C44601 * C893) *
                C635 -
            (C4660 * C2284 + C44601 * C2425 + C4659 * C642 + C4505 * C824) *
                C706 -
            (C4660 * C2337 + C44601 * C2469 + C4659 * C709 + C4505 * C893) *
                C44597) *
               C44512 * C4503 +
           ((C4679 + C4678) * C705 + (C4744 + C4745) * C635 -
            (C5285 + C5284) * C706 - (C5358 + C5359) * C44597) *
               C44512 * C44593) *
              C44407 * C3187 +
          (((C4659 * C2689 + C4505 * C2863 + C4660 * C7507 + C44601 * C7745) *
                C706 -
            ((C4660 * C2751 + C44601 * C2919 + C4659 * C1298 + C4505 * C1486) *
                 C635 +
             (C4660 * C2689 + C44601 * C2863 + C4659 * C1232 + C4505 * C1414) *
                 C705) +
            (C4659 * C2751 + C4505 * C2919 + C4660 * C7593 + C44601 * C7815) *
                C44597) *
               C44512 * C4503 +
           ((C4659 * C2690 + C4505 * C2864 + C4660 * C7508 + C44601 * C7746) *
                C706 -
            ((C6019 + C6018) * C635 + (C5945 + C5944) * C705) +
            (C4659 * C2752 + C4505 * C2920 + C4660 * C7594 + C44601 * C7816) *
                C44597) *
               C44512 * C44593) *
              C44407 * C44599)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[16] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4659 * C93 + C4505 * C250 + C4660 * C642 + C44601 * C824) *
                C3289 +
            (C4659 * C201 + C4505 * C376 + C4660 * C767 + C44601 * C963) *
                C3187 -
            (C4660 * C2689 + C44601 * C2863 + C4659 * C1232 + C4505 * C1414) *
                C3290 -
            (C4660 * C2807 + C44601 * C2972 + C4659 * C1357 + C4505 * C1547) *
                C44599) *
               C44512 * C4503 +
           ((C4679 + C4678) * C3289 + (C4806 + C4807) * C3187 -
            (C5945 + C5944) * C3290 - (C6090 + C6091) * C44599) *
               C44512 * C44593) *
              C635 +
          (((C4659 * C2689 + C4505 * C2863 + C4660 * C7507 + C44601 * C7745) *
                C3290 -
            ((C4660 * C2381 + C44601 * C2510 + C4659 * C767 + C4505 * C963) *
                 C3187 +
             (C4660 * C2284 + C44601 * C2425 + C4659 * C642 + C4505 * C824) *
                 C3289) +
            (C4659 * C2807 + C4505 * C2972 + C4660 * C7669 + C44601 * C7883) *
                C44599) *
               C44512 * C4503 +
           ((C4659 * C2690 + C4505 * C2864 + C4660 * C7508 + C44601 * C7746) *
                C3290 -
            ((C5430 + C5431) * C3187 + (C5285 + C5284) * C3289) +
            (C4659 * C2808 + C4505 * C2973 + C4660 * C7670 + C44601 * C7884) *
                C44599) *
               C44512 * C44593) *
              C44597) *
         C44407) /
        (p * q * std::sqrt(p + q));
    d2eezx[16] +=
        (2 * std::pow(Pi, 2.5) *
         ((((((C436 * C93 + C44512 * C437) * C2283 +
              (C436 * C101 + C44512 * C442) * C44407) *
                 C4503 +
             (C460 * C2283 + C461 * C44407) * C44593) *
                C4505 +
            ((C7316 + C7317) * C4503 + (C7318 + C7319) * C44593) * C44601) *
               C3187 -
           (((C7956 + C7957) * C44593 + (C7964 + C7965) * C4503) * C44601 +
            ((C1633 * C44407 + C1632 * C2283) * C44593 +
             ((C436 * C1238 + C44512 * C1619) * C44407 +
              (C436 * C1232 + C44512 * C1616) * C2283) *
                 C4503) *
                C4505) *
               C44599) *
              C635 +
          ((((C7965 + C7964) * C4503 + (C7957 + C7956) * C44593) * C4505 +
            (((C436 * C7507 + C44512 * C7951) * C2283 +
              (C436 * C7511 + C44512 * C7953) * C44407) *
                 C4503 +
             ((C436 * C7508 + C44512 * C7952) * C2283 +
              (C436 * C7512 + C44512 * C7954) * C44407) *
                 C44593) *
                C44601) *
               C44599 -
           (((C7320 + C7321) * C44593 + (C7328 + C7329) * C4503) * C44601 +
            ((C7319 + C7318) * C44593 + (C7317 + C7316) * C4503) * C4505) *
               C3187) *
              C44597)) /
        (p * q * std::sqrt(p + q));
    d2eezy[16] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C436 * C93 + C44512 * C437) * C705 +
             (C436 * C152 + C44512 * C503) * C635 - C5512 * C706 -
             C5591 * C44597) *
                C4503 +
            (C1100 + C1101 - C1102 - C1112) * C44593) *
               C4505 +
           ((C5512 * C705 + C5591 * C635 - C7327 * C706 - C7384 * C44597) *
                C4503 +
            (C5586 + C5587 - C5588 - C5593) * C44593) *
               C44601) *
              C44407 * C3187 +
          (((C7963 * C706 -
             ((C436 * C1298 + C44512 * C1688) * C635 +
              (C436 * C1232 + C44512 * C1616) * C705) +
             C8036 * C44597) *
                C4503 +
            (C6162 * C706 - (C1696 * C635 + C1632 * C705) + C6233 * C44597) *
                C44593) *
               C4505 +
           (((C436 * C7507 + C44512 * C7951) * C706 -
             (C8036 * C635 + C7963 * C705) +
             (C436 * C7593 + C44512 * C8031) * C44597) *
                C4503 +
            ((C436 * C7508 + C44512 * C7952) * C706 -
             (C6233 * C635 + C6162 * C705) +
             (C436 * C7594 + C44512 * C8032) * C44597) *
                C44593) *
               C44601) *
              C44407 * C44599)) /
        (p * q * std::sqrt(p + q));
    d2eezz[16] += (2 * std::pow(Pi, 2.5) *
                   (((((C436 * C93 + C44512 * C437) * C3289 +
                       (C436 * C201 + C44512 * C562) * C3187 -
                       (C436 * C1232 + C44512 * C1616) * C3290 -
                       (C436 * C1357 + C44512 * C1749) * C44599) *
                          C4503 +
                      (C3600 + C3601 - C3602 - C3603) * C44593) *
                         C4505 +
                     ((C9304 + C9305 - C9306 - C9307) * C4503 +
                      (C8706 + C8707 - C8708 - C8709) * C44593) *
                         C44601) *
                        C635 +
                    (((C9306 - (C9305 + C9304) + C9307) * C4503 +
                      (C8708 - (C8707 + C8706) + C8709) * C44593) *
                         C4505 +
                     (((C436 * C7507 + C44512 * C7951) * C3290 -
                       (C7440 * C3187 + C7327 * C3289) +
                       (C436 * C7669 + C44512 * C8102) * C44599) *
                          C4503 +
                      ((C436 * C7508 + C44512 * C7952) * C3290 -
                       (C5669 * C3187 + C5514 * C3289) +
                       (C436 * C7670 + C44512 * C8103) * C44599) *
                          C44593) *
                         C44601) *
                        C44597) *
                   C44407) /
                  (p * q * std::sqrt(p + q));
    d2eexx[17] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4507 * C93 + C4503 * C98 + C4508 * C94 + C44593 * C99) * C2283 +
            (C4507 * C101 + C4503 * C108 + C4508 * C102 + C44593 * C109) *
                C44407) *
               C4505 +
           ((C5046 + C5047) * C2283 + (C5048 + C5049) * C44407) * C44601) *
              C44512 * C4095 -
          (((C7524 + C7525) * C44407 + (C7526 + C7527) * C2283) * C44601 +
           ((C4508 * C1237 + C44593 * C1242 + C4507 * C1238 + C4503 * C1243) *
                C44407 +
            (C4508 * C1229 + C44593 * C1233 + C4507 * C1232 + C4503 * C1239) *
                C2283) *
               C4505) *
              C44512 * C4096 +
          (((C4507 * C4098 + C4503 * C4101 + C4508 * C4099 + C44593 * C4102) *
                C2283 +
            (C4507 * C4104 + C4503 * C4107 + C4508 * C4105 + C44593 * C4108) *
                C44407) *
               C4505 +
           ((C4507 * C9357 + C4503 * C9359 + C4508 * C9358 + C44593 * C9360) *
                C2283 +
            (C4507 * C9361 + C4503 * C9363 + C4508 * C9362 + C44593 * C9364) *
                C44407) *
               C44601) *
              C44512 * C4097) *
         C44449) /
        (p * q * std::sqrt(p + q));
    d2eexy[17] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4507 * C93 + C4503 * C98 + C4508 * C94 + C44593 * C99) * C151 +
            (C4507 * C152 + C4503 * C157 + C4508 * C153 + C44593 * C158) *
                C44449) *
               C4505 +
           ((C5046 + C5047) * C151 + (C5129 + C5128) * C44449) * C44601) *
              C44512 * C44407 * C4095 -
          (((C7603 + C7602) * C44449 + (C7526 + C7527) * C151) * C44601 +
           ((C4508 * C1295 + C44593 * C1299 + C4507 * C1298 + C4503 * C1302) *
                C44449 +
            (C4508 * C1229 + C44593 * C1233 + C4507 * C1232 + C4503 * C1239) *
                C151) *
               C4505) *
              C44512 * C44407 * C4096 +
          (((C4507 * C4098 + C4503 * C4101 + C4508 * C4099 + C44593 * C4102) *
                C151 +
            (C4507 * C4148 + C4503 * C4151 + C4508 * C4149 + C44593 * C4152) *
                C44449) *
               C4505 +
           ((C4507 * C9357 + C4503 * C9359 + C4508 * C9358 + C44593 * C9360) *
                C151 +
            (C4507 * C9415 + C4503 * C9417 + C4508 * C9416 + C44593 * C9418) *
                C44449) *
               C44601) *
              C44512 * C44407 * C4097)) /
        (p * q * std::sqrt(p + q));
    d2eexz[17] +=
        (2 * std::pow(Pi, 2.5) *
         (((C4507 * C93 + C4503 * C98 + C4508 * C94 + C44593 * C99) * C4192 +
           (C4507 * C201 + C4503 * C206 + C4508 * C202 + C44593 * C207) *
               C4095 -
           (C4508 * C1229 + C44593 * C1233 + C4507 * C1232 + C4503 * C1239) *
               C4193 -
           (C4508 * C1356 + C44593 * C1360 + C4507 * C1357 + C4503 * C1361) *
               C4096 +
           (C4507 * C4098 + C4503 * C4101 + C4508 * C4099 + C44593 * C4102) *
               C4194 +
           (C4507 * C4195 + C4503 * C4198 + C4508 * C4196 + C44593 * C4199) *
               C4097) *
              C4505 +
          ((C5046 + C5047) * C4192 + (C5206 + C5207) * C4095 -
           (C7526 + C7527) * C4193 - (C7678 + C7679) * C4096 +
           (C4507 * C9357 + C4503 * C9359 + C4508 * C9358 + C44593 * C9360) *
               C4194 +
           (C4507 * C9469 + C4503 * C9471 + C4508 * C9470 + C44593 * C9472) *
               C4097) *
              C44601) *
         C44512 * C44449 * C44407) /
        (p * q * std::sqrt(p + q));
    d2eeyx[17] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4659 * C93 + C4505 * C250 + C4660 * C642 + C44601 * C824) *
                C2283 +
            (C4659 * C101 + C4505 * C255 + C4660 * C648 + C44601 * C827) *
                C44407) *
               C44512 * C4503 +
           ((C4679 + C4678) * C2283 + (C4681 + C4680) * C44407) * C44512 *
               C44593) *
              C4095 -
          (((C5947 + C5946) * C44407 + (C5945 + C5944) * C2283) * C44512 *
               C44593 +
           ((C4660 * C2695 + C44601 * C2866 + C4659 * C1238 + C4505 * C1417) *
                C44407 +
            (C4660 * C2689 + C44601 * C2863 + C4659 * C1232 + C4505 * C1414) *
                C2283) *
               C44512 * C4503) *
              C4096 +
          (((C4659 * C4098 + C4505 * C4239 + C4660 * C9357 + C44601 * C9523) *
                C2283 +
            (C4659 * C4104 + C4505 * C4242 + C4660 * C9361 + C44601 * C9525) *
                C44407) *
               C44512 * C4503 +
           ((C4659 * C4099 + C4505 * C4240 + C4660 * C9358 + C44601 * C9524) *
                C2283 +
            (C4659 * C4105 + C4505 * C4243 + C4660 * C9362 + C44601 * C9526) *
                C44407) *
               C44512 * C44593) *
              C4097) *
         C44449) /
        (p * q * std::sqrt(p + q));
    d2eeyy[17] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4659 * C93 + C4505 * C250 + C4660 * C642 + C44601 * C824) * C151 +
            (C4659 * C152 + C4505 * C316 + C4660 * C709 + C44601 * C893) *
                C44449) *
               C44512 * C4503 +
           ((C4679 + C4678) * C151 + (C4744 + C4745) * C44449) * C44512 *
               C44593) *
              C44407 * C4095 -
          (((C6019 + C6018) * C44449 + (C5945 + C5944) * C151) * C44512 *
               C44593 +
           ((C4660 * C2751 + C44601 * C2919 + C4659 * C1298 + C4505 * C1486) *
                C44449 +
            (C4660 * C2689 + C44601 * C2863 + C4659 * C1232 + C4505 * C1414) *
                C151) *
               C44512 * C4503) *
              C44407 * C4096 +
          (((C4659 * C4098 + C4505 * C4239 + C4660 * C9357 + C44601 * C9523) *
                C151 +
            (C4659 * C4148 + C4505 * C4283 + C4660 * C9415 + C44601 * C9577) *
                C44449) *
               C44512 * C4503 +
           ((C4659 * C4099 + C4505 * C4240 + C4660 * C9358 + C44601 * C9524) *
                C151 +
            (C4659 * C4149 + C4505 * C4284 + C4660 * C9416 + C44601 * C9578) *
                C44449) *
               C44512 * C44593) *
              C44407 * C4097)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[17] +=
        (2 * std::pow(Pi, 2.5) *
         (((C4659 * C93 + C4505 * C250 + C4660 * C642 + C44601 * C824) * C4192 +
           (C4659 * C201 + C4505 * C376 + C4660 * C767 + C44601 * C963) *
               C4095 -
           (C4660 * C2689 + C44601 * C2863 + C4659 * C1232 + C4505 * C1414) *
               C4193 -
           (C4660 * C2807 + C44601 * C2972 + C4659 * C1357 + C4505 * C1547) *
               C4096 +
           (C4659 * C4098 + C4505 * C4239 + C4660 * C9357 + C44601 * C9523) *
               C4194 +
           (C4659 * C4195 + C4505 * C4324 + C4660 * C9469 + C44601 * C9629) *
               C4097) *
              C44512 * C4503 +
          ((C4679 + C4678) * C4192 + (C4806 + C4807) * C4095 -
           (C5945 + C5944) * C4193 - (C6090 + C6091) * C4096 +
           (C4659 * C4099 + C4505 * C4240 + C4660 * C9358 + C44601 * C9524) *
               C4194 +
           (C4659 * C4196 + C4505 * C4325 + C4660 * C9470 + C44601 * C9630) *
               C4097) *
              C44512 * C44593) *
         C44449 * C44407) /
        (p * q * std::sqrt(p + q));
    d2eezx[17] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C436 * C93 + C44512 * C437) * C2283 +
             (C436 * C101 + C44512 * C442) * C44407) *
                C4503 +
            (C460 * C2283 + C461 * C44407) * C44593) *
               C4505 +
           ((C7316 + C7317) * C4503 + (C7318 + C7319) * C44593) * C44601) *
              C4095 -
          (((C7956 + C7957) * C44593 + (C7964 + C7965) * C4503) * C44601 +
           ((C1633 * C44407 + C1632 * C2283) * C44593 +
            ((C436 * C1238 + C44512 * C1619) * C44407 +
             (C436 * C1232 + C44512 * C1616) * C2283) *
                C4503) *
               C4505) *
              C4096 +
          ((((C436 * C4098 + C44512 * C4365) * C2283 +
             (C436 * C4104 + C44512 * C4368) * C44407) *
                C4503 +
            ((C436 * C4099 + C44512 * C4366) * C2283 +
             (C436 * C4105 + C44512 * C4369) * C44407) *
                C44593) *
               C4505 +
           (((C436 * C9357 + C44512 * C9681) * C2283 +
             (C436 * C9361 + C44512 * C9683) * C44407) *
                C4503 +
            ((C436 * C9358 + C44512 * C9682) * C2283 +
             (C436 * C9362 + C44512 * C9684) * C44407) *
                C44593) *
               C44601) *
              C4097) *
         C44449) /
        (p * q * std::sqrt(p + q));
    d2eezy[17] += (2 * std::pow(Pi, 2.5) *
                   (((((C436 * C93 + C44512 * C437) * C151 +
                       (C436 * C152 + C44512 * C503) * C44449) *
                          C4503 +
                      (C509 + C521) * C44593) *
                         C4505 +
                     ((C5512 * C151 + C5591 * C44449) * C4503 +
                      (C4910 + C4911) * C44593) *
                         C44601) *
                        C44407 * C4095 -
                    (((C6234 + C6230) * C44593 +
                      (C8036 * C44449 + C7963 * C151) * C4503) *
                         C44601 +
                     ((C1698 + C1690) * C44593 +
                      ((C436 * C1298 + C44512 * C1688) * C44449 +
                       (C436 * C1232 + C44512 * C1616) * C151) *
                          C4503) *
                         C4505) *
                        C44407 * C4096 +
                    ((((C436 * C4098 + C44512 * C4365) * C151 +
                       (C436 * C4148 + C44512 * C4409) * C44449) *
                          C4503 +
                      ((C436 * C4099 + C44512 * C4366) * C151 +
                       (C436 * C4149 + C44512 * C4410) * C44449) *
                          C44593) *
                         C4505 +
                     (((C436 * C9357 + C44512 * C9681) * C151 +
                       (C436 * C9415 + C44512 * C9735) * C44449) *
                          C4503 +
                      ((C436 * C9358 + C44512 * C9682) * C151 +
                       (C436 * C9416 + C44512 * C9736) * C44449) *
                          C44593) *
                         C44601) *
                        C44407 * C4097)) /
                  (p * q * std::sqrt(p + q));
    d2eezz[17] += (2 * std::pow(Pi, 2.5) *
                   ((((C436 * C93 + C44512 * C437) * C4192 +
                      (C436 * C201 + C44512 * C562) * C4095 -
                      (C436 * C1232 + C44512 * C1616) * C4193 -
                      (C436 * C1357 + C44512 * C1749) * C4096 +
                      (C436 * C4098 + C44512 * C4365) * C4194 +
                      (C436 * C4195 + C44512 * C4450) * C4097) *
                         C4503 +
                     (C460 * C4192 + C577 * C4095 - C1632 * C4193 -
                      C1764 * C4096 + (C436 * C4099 + C44512 * C4366) * C4194 +
                      (C436 * C4196 + C44512 * C4451) * C4097) *
                         C44593) *
                        C4505 +
                    ((C5512 * C4192 + C5668 * C4095 - C7963 * C4193 -
                      C8110 * C4096 + (C436 * C9357 + C44512 * C9681) * C4194 +
                      (C436 * C9469 + C44512 * C9787) * C4097) *
                         C4503 +
                     (C1042 * C4192 + C1175 * C4095 - C6162 * C4193 -
                      C6306 * C4096 + (C436 * C9358 + C44512 * C9682) * C4194 +
                      (C436 * C9470 + C44512 * C9788) * C4097) *
                         C44593) *
                        C44601) *
                   C44449 * C44407) /
                  (p * q * std::sqrt(p + q));
    d2eexx[18] +=
        (2 * std::pow(Pi, 2.5) *
         (((C4507 * C93 + C4503 * C98 + C4508 * C94 + C44593 * C99) * C90 +
           (C4507 * C101 + C4503 * C108 + C4508 * C102 + C44593 * C109) * C80 -
           (C4508 * C95 + C44593 * C100 + C4507 * C94 + C4503 * C99) * C91 -
           (C4508 * C103 + C44593 * C110 + C4507 * C102 + C4503 * C109) * C81 +
           (C4507 * C95 + C4503 * C100 + C4508 * C96 + C44593 * C104) * C92 +
           (C4507 * C103 + C4503 * C110 + C4508 * C105 + C44593 * C111) * C82) *
              C44497 * C9839 +
          ((C4507 * C1232 + C4503 * C1239 + C4508 * C1229 + C44593 * C1233) *
               C90 +
           (C4507 * C1238 + C4503 * C1243 + C4508 * C1237 + C44593 * C1242) *
               C80 -
           (C4508 * C1230 + C44593 * C1234 + C4507 * C1229 + C4503 * C1233) *
               C91 -
           (C4508 * C1236 + C44593 * C1241 + C4507 * C1237 + C4503 * C1242) *
               C81 +
           (C4507 * C1230 + C4503 * C1234 + C4508 * C1231 + C44593 * C1235) *
               C92 +
           (C4507 * C1236 + C4503 * C1241 + C4508 * C1240 + C44593 * C1244) *
               C82) *
              C44497 * C44603) *
         C44464 * C44449) /
        (p * q * std::sqrt(p + q));
    d2eexy[18] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4507 * C93 + C4503 * C98 + C4508 * C94 + C44593 * C99) * C151 +
            (C4507 * C152 + C4503 * C157 + C4508 * C153 + C44593 * C158) *
                C44449) *
               C44497 * C9839 +
           ((C4507 * C1232 + C4503 * C1239 + C4508 * C1229 + C44593 * C1233) *
                C151 +
            (C4507 * C1298 + C4503 * C1302 + C4508 * C1295 + C44593 * C1299) *
                C44449) *
               C44497 * C44603) *
              C80 -
          (((C4508 * C1296 + C44593 * C1300 + C4507 * C1295 + C4503 * C1299) *
                C44449 +
            (C4508 * C1230 + C44593 * C1234 + C4507 * C1229 + C4503 * C1233) *
                C151) *
               C44497 * C44603 +
           ((C4508 * C154 + C44593 * C159 + C4507 * C153 + C4503 * C158) *
                C44449 +
            (C4508 * C95 + C44593 * C100 + C4507 * C94 + C4503 * C99) * C151) *
               C44497 * C9839) *
              C81 +
          (((C4507 * C95 + C4503 * C100 + C4508 * C96 + C44593 * C104) * C151 +
            (C4507 * C154 + C4503 * C159 + C4508 * C155 + C44593 * C160) *
                C44449) *
               C44497 * C9839 +
           ((C4507 * C1230 + C4503 * C1234 + C4508 * C1231 + C44593 * C1235) *
                C151 +
            (C4507 * C1296 + C4503 * C1300 + C4508 * C1297 + C44593 * C1301) *
                C44449) *
               C44497 * C44603) *
              C82) *
         C44464) /
        (p * q * std::sqrt(p + q));
    d2eexz[18] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4507 * C93 + C4503 * C98 + C4508 * C94 + C44593 * C99) * C200 +
            (C4507 * C201 + C4503 * C206 + C4508 * C202 + C44593 * C207) *
                C44464) *
               C44497 * C9839 +
           ((C4507 * C1232 + C4503 * C1239 + C4508 * C1229 + C44593 * C1233) *
                C200 +
            (C4507 * C1357 + C4503 * C1361 + C4508 * C1356 + C44593 * C1360) *
                C44464) *
               C44497 * C44603) *
              C44449 * C80 -
          (((C4508 * C1355 + C44593 * C1359 + C4507 * C1356 + C4503 * C1360) *
                C44464 +
            (C4508 * C1230 + C44593 * C1234 + C4507 * C1229 + C4503 * C1233) *
                C200) *
               C44497 * C44603 +
           ((C4508 * C203 + C44593 * C208 + C4507 * C202 + C4503 * C207) *
                C44464 +
            (C4508 * C95 + C44593 * C100 + C4507 * C94 + C4503 * C99) * C200) *
               C44497 * C9839) *
              C44449 * C81 +
          (((C4507 * C95 + C4503 * C100 + C4508 * C96 + C44593 * C104) * C200 +
            (C4507 * C203 + C4503 * C208 + C4508 * C204 + C44593 * C209) *
                C44464) *
               C44497 * C9839 +
           ((C4507 * C1230 + C4503 * C1234 + C4508 * C1231 + C44593 * C1235) *
                C200 +
            (C4507 * C1355 + C4503 * C1359 + C4508 * C1358 + C44593 * C1362) *
                C44464) *
               C44497 * C44603) *
              C44449 * C82)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[18] += (2 * std::pow(Pi, 2.5) *
                   ((((C249 * C93 + C44497 * C250) * C90 +
                      (C249 * C101 + C44497 * C255) * C80 - C273 * C91 -
                      C274 * C81 + C275 * C92 + C276 * C82) *
                         C9839 +
                     ((C249 * C1232 + C44497 * C1414) * C90 +
                      (C249 * C1238 + C44497 * C1417) * C80 - C1430 * C91 -
                      C1431 * C81 + C1432 * C92 + C1433 * C82) *
                         C44603) *
                        C4503 +
                    ((C273 * C90 + C274 * C80 - C275 * C91 - C276 * C81 +
                      C277 * C92 + C278 * C82) *
                         C9839 +
                     (C1430 * C90 + C1431 * C80 - C1432 * C91 - C1433 * C81 +
                      (C249 * C1231 + C44497 * C1416) * C92 +
                      (C249 * C1240 + C44497 * C1420) * C82) *
                         C44603) *
                        C44593) *
                   C44464 * C44449) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[18] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C249 * C93 + C44497 * C250) * C151 +
             (C249 * C152 + C44497 * C316) * C44449) *
                C9839 +
            ((C249 * C1232 + C44497 * C1414) * C151 +
             (C249 * C1298 + C44497 * C1486) * C44449) *
                C44603) *
               C4503 +
           ((C322 + C334) * C9839 + (C1488 + C1496) * C44603) * C44593) *
              C80 -
          (((C1497 + C1491) * C44603 + (C335 + C325) * C9839) * C44593 +
           ((C1496 + C1488) * C44603 + (C334 + C322) * C9839) * C4503) *
              C81 +
          ((C337 * C9839 + (C1491 + C1497) * C44603) * C4503 +
           ((C330 + C336) * C9839 + ((C249 * C1231 + C44497 * C1416) * C151 +
                                     (C249 * C1297 + C44497 * C1485) * C44449) *
                                        C44603) *
               C44593) *
              C82) *
         C44464) /
        (p * q * std::sqrt(p + q));
    d2eeyz[18] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C249 * C93 + C44497 * C250) * C200 +
             (C249 * C201 + C44497 * C376) * C44464) *
                C9839 +
            ((C249 * C1232 + C44497 * C1414) * C200 +
             (C249 * C1357 + C44497 * C1547) * C44464) *
                C44603) *
               C4503 +
           ((C382 + C394) * C9839 + (C10092 + C10093) * C44603) * C44593) *
              C44449 * C80 -
          (((C10094 + C10095) * C44603 + (C395 + C385) * C9839) * C44593 +
           ((C10093 + C10092) * C44603 + (C394 + C382) * C9839) * C4503) *
              C44449 * C81 +
          ((C397 * C9839 + (C10095 + C10094) * C44603) * C4503 +
           ((C390 + C396) * C9839 + ((C249 * C1231 + C44497 * C1416) * C200 +
                                     (C249 * C1358 + C44497 * C1550) * C44464) *
                                        C44603) *
               C44593) *
              C44449 * C82)) /
        (p * q * std::sqrt(p + q));
    d2eezx[18] +=
        (2 * std::pow(Pi, 2.5) *
         (((C10145 * C93 + C9839 * C437 + C10146 * C1232 + C44603 * C1616) *
               C90 +
           (C10145 * C101 + C9839 * C442 + C10146 * C1238 + C44603 * C1619) *
               C80 -
           (C10164 + C10165) * C91 - (C10166 + C10167) * C81 +
           (C10168 + C10169) * C92 + (C10170 + C10171) * C82) *
              C4503 +
          ((C10165 + C10164) * C90 + (C10167 + C10166) * C80 -
           (C10169 + C10168) * C91 - (C10171 + C10170) * C81 +
           (C10145 * C96 + C9839 * C440 + C10146 * C1231 + C44603 * C1618) *
               C92 +
           (C10145 * C105 + C9839 * C445 + C10146 * C1240 + C44603 * C1622) *
               C82) *
              C44593) *
         C44497 * C44464 * C44449) /
        (p * q * std::sqrt(p + q));
    d2eezy[18] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C10145 * C93 + C9839 * C437 + C10146 * C1232 + C44603 * C1616) *
                C151 +
            (C10145 * C152 + C9839 * C503 + C10146 * C1298 + C44603 * C1688) *
                C44449) *
               C4503 +
           ((C10165 + C10164) * C151 + (C10230 + C10231) * C44449) * C44593) *
              C44497 * C80 -
          (((C10232 + C10233) * C44449 + (C10169 + C10168) * C151) * C44593 +
           ((C10231 + C10230) * C44449 + (C10164 + C10165) * C151) * C4503) *
              C44497 * C81 +
          (((C10168 + C10169) * C151 + (C10233 + C10232) * C44449) * C4503 +
           ((C10145 * C96 + C9839 * C440 + C10146 * C1231 + C44603 * C1618) *
                C151 +
            (C10145 * C155 + C9839 * C506 + C10146 * C1297 + C44603 * C1687) *
                C44449) *
               C44593) *
              C44497 * C82) *
         C44464) /
        (p * q * std::sqrt(p + q));
    d2eezz[18] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C10145 * C93 + C9839 * C437 + C10146 * C1232 + C44603 * C1616) *
                C200 +
            (C10145 * C201 + C9839 * C562 + C10146 * C1357 + C44603 * C1749) *
                C44464) *
               C4503 +
           ((C10165 + C10164) * C200 + (C10292 + C10293) * C44464) * C44593) *
              C44497 * C44449 * C80 -
          (((C10294 + C10295) * C44464 + (C10169 + C10168) * C200) * C44593 +
           ((C10293 + C10292) * C44464 + (C10164 + C10165) * C200) * C4503) *
              C44497 * C44449 * C81 +
          (((C10168 + C10169) * C200 + (C10295 + C10294) * C44464) * C4503 +
           ((C10145 * C96 + C9839 * C440 + C10146 * C1231 + C44603 * C1618) *
                C200 +
            (C10145 * C204 + C9839 * C565 + C10146 * C1358 + C44603 * C1752) *
                C44464) *
               C44593) *
              C44497 * C44449 * C82)) /
        (p * q * std::sqrt(p + q));
    d2eexx[19] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4507 * C93 + C4503 * C98 + C4508 * C94 + C44593 * C99) * C637 +
            (C4507 * C101 + C4503 * C108 + C4508 * C102 + C44593 * C109) *
                C633 -
            (C4508 * C95 + C44593 * C100 + C4507 * C94 + C4503 * C99) * C638 -
            (C4508 * C103 + C44593 * C110 + C4507 * C102 + C4503 * C109) *
                C44595) *
               C44497 * C9839 +
           ((C4507 * C1232 + C4503 * C1239 + C4508 * C1229 + C44593 * C1233) *
                C637 +
            (C4507 * C1238 + C4503 * C1243 + C4508 * C1237 + C44593 * C1242) *
                C633 -
            (C4508 * C1230 + C44593 * C1234 + C4507 * C1229 + C4503 * C1233) *
                C638 -
            (C4508 * C1236 + C44593 * C1241 + C4507 * C1237 + C4503 * C1242) *
                C44595) *
               C44497 * C44603) *
              C44464 * C635 +
          (((C5051 + C5050) * C638 -
            ((C5049 + C5048) * C633 + (C5047 + C5046) * C637) +
            (C5053 + C5052) * C44595) *
               C44497 * C9839 +
           ((C4507 * C2690 + C4503 * C2693 + C4508 * C2691 + C44593 * C2694) *
                C638 -
            ((C7524 + C7525) * C633 + (C7526 + C7527) * C637) +
            (C4507 * C2696 + C4503 * C2699 + C4508 * C2697 + C44593 * C2700) *
                C44595) *
               C44497 * C44603) *
              C44464 * C44597)) /
        (p * q * std::sqrt(p + q));
    d2eexy[19] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4507 * C93 + C4503 * C98 + C4508 * C94 + C44593 * C99) * C705 +
            (C4507 * C152 + C4503 * C157 + C4508 * C153 + C44593 * C158) *
                C635 -
            (C5047 + C5046) * C706 - (C5128 + C5129) * C44597) *
               C44497 * C9839 +
           ((C4507 * C1232 + C4503 * C1239 + C4508 * C1229 + C44593 * C1233) *
                C705 +
            (C4507 * C1298 + C4503 * C1302 + C4508 * C1295 + C44593 * C1299) *
                C635 -
            (C7526 + C7527) * C706 - (C7603 + C7602) * C44597) *
               C44497 * C44603) *
              C633 +
          (((C5051 + C5050) * C706 -
            ((C4508 * C154 + C44593 * C159 + C4507 * C153 + C4503 * C158) *
                 C635 +
             (C4508 * C95 + C44593 * C100 + C4507 * C94 + C4503 * C99) * C705) +
            (C5130 + C5131) * C44597) *
               C44497 * C9839 +
           ((C4507 * C2690 + C4503 * C2693 + C4508 * C2691 + C44593 * C2694) *
                C706 -
            ((C4508 * C1296 + C44593 * C1300 + C4507 * C1295 + C4503 * C1299) *
                 C635 +
             (C4508 * C1230 + C44593 * C1234 + C4507 * C1229 + C4503 * C1233) *
                 C705) +
            (C4507 * C2752 + C4503 * C2755 + C4508 * C2753 + C44593 * C2756) *
                C44597) *
               C44497 * C44603) *
              C44595) *
         C44464) /
        (p * q * std::sqrt(p + q));
    d2eexz[19] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C4507 * C93 + C4503 * C98 + C4508 * C94 + C44593 * C99) * C200 +
             (C4507 * C201 + C4503 * C206 + C4508 * C202 + C44593 * C207) *
                 C44464) *
                C44497 * C9839 +
            ((C4507 * C1232 + C4503 * C1239 + C4508 * C1229 + C44593 * C1233) *
                 C200 +
             (C4507 * C1357 + C4503 * C1361 + C4508 * C1356 + C44593 * C1360) *
                 C44464) *
                C44497 * C44603) *
               C635 -
           (((C7678 + C7679) * C44464 + (C7526 + C7527) * C200) * C44497 *
                C44603 +
            ((C5207 + C5206) * C44464 + (C5047 + C5046) * C200) * C44497 *
                C9839) *
               C44597) *
              C633 +
          ((((C5051 + C5050) * C200 + (C5208 + C5209) * C44464) * C44497 *
                C9839 +
            ((C4507 * C2690 + C4503 * C2693 + C4508 * C2691 + C44593 * C2694) *
                 C200 +
             (C4507 * C2808 + C4503 * C2811 + C4508 * C2809 + C44593 * C2812) *
                 C44464) *
                C44497 * C44603) *
               C44597 -
           (((C4508 * C1355 + C44593 * C1359 + C4507 * C1356 + C4503 * C1360) *
                 C44464 +
             (C4508 * C1230 + C44593 * C1234 + C4507 * C1229 + C4503 * C1233) *
                 C200) *
                C44497 * C44603 +
            ((C4508 * C203 + C44593 * C208 + C4507 * C202 + C4503 * C207) *
                 C44464 +
             (C4508 * C95 + C44593 * C100 + C4507 * C94 + C4503 * C99) * C200) *
                C44497 * C9839) *
               C635) *
              C44595)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[19] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C249 * C93 + C44497 * C250) * C637 +
             (C249 * C101 + C44497 * C255) * C633 - C273 * C638 -
             C274 * C44595) *
                C9839 +
            ((C249 * C1232 + C44497 * C1414) * C637 +
             (C249 * C1238 + C44497 * C1417) * C633 - C1430 * C638 -
             C1431 * C44595) *
                C44603) *
               C4503 +
           ((C273 * C637 + C274 * C633 - C275 * C638 - C276 * C44595) * C9839 +
            (C1430 * C637 + C1431 * C633 - C1432 * C638 - C1433 * C44595) *
                C44603) *
               C44593) *
              C44464 * C635 +
          (((C840 * C638 -
             ((C249 * C648 + C44497 * C827) * C633 +
              (C249 * C642 + C44497 * C824) * C637) +
             C841 * C44595) *
                C9839 +
            (C10564 * C638 -
             ((C249 * C2695 + C44497 * C2866) * C633 +
              (C249 * C2689 + C44497 * C2863) * C637) +
             C10565 * C44595) *
                C44603) *
               C4503 +
           ((C842 * C638 - (C841 * C633 + C840 * C637) + C843 * C44595) *
                C9839 +
            ((C249 * C2691 + C44497 * C2865) * C638 -
             (C10565 * C633 + C10564 * C637) +
             (C249 * C2697 + C44497 * C2868) * C44595) *
                C44603) *
               C44593) *
              C44464 * C44597)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[19] += (2 * std::pow(Pi, 2.5) *
                   (((((C249 * C93 + C44497 * C250) * C705 +
                       (C249 * C152 + C44497 * C316) * C635 -
                       (C249 * C642 + C44497 * C824) * C706 -
                       (C249 * C709 + C44497 * C893) * C44597) *
                          C9839 +
                      ((C249 * C1232 + C44497 * C1414) * C705 +
                       (C249 * C1298 + C44497 * C1486) * C635 -
                       (C249 * C2689 + C44497 * C2863) * C706 -
                       (C249 * C2751 + C44497 * C2919) * C44597) *
                          C44603) *
                         C4503 +
                     ((C898 + C899 - C900 - C910) * C9839 +
                      (C10632 + C10633 - C10634 - C10638) * C44603) *
                         C44593) *
                        C633 +
                    (((C900 - (C899 + C898) + C910) * C9839 +
                      (C10634 - (C10633 + C10632) + C10638) * C44603) *
                         C4503 +
                     ((C905 - (C904 + C903) + C911) * C9839 +
                      ((C249 * C2691 + C44497 * C2865) * C706 -
                       (C1495 * C635 + C1432 * C705) +
                       (C249 * C2753 + C44497 * C2921) * C44597) *
                          C44603) *
                         C44593) *
                        C44595) *
                   C44464) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[19] +=
        (2 * std::pow(Pi, 2.5) *
         ((((((C249 * C93 + C44497 * C250) * C200 +
              (C249 * C201 + C44497 * C376) * C44464) *
                 C9839 +
             ((C249 * C1232 + C44497 * C1414) * C200 +
              (C249 * C1357 + C44497 * C1547) * C44464) *
                 C44603) *
                C4503 +
            ((C382 + C394) * C9839 + (C10092 + C10093) * C44603) * C44593) *
               C635 -
           (((C10709 + C10707) * C44603 + (C975 + C971) * C9839) * C44593 +
            (((C249 * C2807 + C44497 * C2972) * C44464 +
              (C249 * C2689 + C44497 * C2863) * C200) *
                 C44603 +
             ((C249 * C767 + C44497 * C963) * C44464 +
              (C249 * C642 + C44497 * C824) * C200) *
                 C9839) *
                C4503) *
               C44597) *
              C633 +
          ((((C971 + C975) * C9839 + (C10707 + C10709) * C44603) * C4503 +
            ((C968 + C974) * C9839 +
             ((C249 * C2691 + C44497 * C2865) * C200 +
              (C249 * C2809 + C44497 * C2974) * C44464) *
                 C44603) *
                C44593) *
               C44597 -
           (((C10094 + C10095) * C44603 + (C395 + C385) * C9839) * C44593 +
            ((C10093 + C10092) * C44603 + (C394 + C382) * C9839) * C4503) *
               C635) *
              C44595)) /
        (p * q * std::sqrt(p + q));
    d2eezx[19] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C10145 * C93 + C9839 * C437 + C10146 * C1232 + C44603 * C1616) *
                C637 +
            (C10145 * C101 + C9839 * C442 + C10146 * C1238 + C44603 * C1619) *
                C633 -
            (C10164 + C10165) * C638 - (C10166 + C10167) * C44595) *
               C4503 +
           ((C10165 + C10164) * C637 + (C10167 + C10166) * C633 -
            (C10169 + C10168) * C638 - (C10171 + C10170) * C44595) *
               C44593) *
              C44497 * C44464 * C635 +
          (((C10784 + C10785) * C638 -
            ((C10146 * C2695 + C44603 * C3028 + C10145 * C648 + C9839 * C1029) *
                 C633 +
             (C10146 * C2689 + C44603 * C3025 + C10145 * C642 + C9839 * C1026) *
                 C637) +
            (C10786 + C10787) * C44595) *
               C4503 +
           ((C10145 * C640 + C9839 * C1027 + C10146 * C2691 + C44603 * C3027) *
                C638 -
            ((C10787 + C10786) * C633 + (C10785 + C10784) * C637) +
            (C10145 * C646 + C9839 * C1031 + C10146 * C2697 + C44603 * C3030) *
                C44595) *
               C44593) *
              C44497 * C44464 * C44597)) /
        (p * q * std::sqrt(p + q));
    d2eezy[19] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C10145 * C93 + C9839 * C437 + C10146 * C1232 + C44603 * C1616) *
                C705 +
            (C10145 * C152 + C9839 * C503 + C10146 * C1298 + C44603 * C1688) *
                C635 -
            (C10146 * C2689 + C44603 * C3025 + C10145 * C642 + C9839 * C1026) *
                C706 -
            (C10146 * C2751 + C44603 * C3081 + C10145 * C709 + C9839 * C1095) *
                C44597) *
               C4503 +
           ((C10165 + C10164) * C705 + (C10230 + C10231) * C635 -
            (C10785 + C10784) * C706 - (C10858 + C10859) * C44597) *
               C44593) *
              C44497 * C633 +
          (((C10784 + C10785) * C706 -
            ((C10231 + C10230) * C635 + (C10164 + C10165) * C705) +
            (C10859 + C10858) * C44597) *
               C4503 +
           ((C10145 * C640 + C9839 * C1027 + C10146 * C2691 + C44603 * C3027) *
                C706 -
            ((C10232 + C10233) * C635 + (C10169 + C10168) * C705) +
            (C10145 * C707 + C9839 * C1097 + C10146 * C2753 + C44603 * C3083) *
                C44597) *
               C44593) *
              C44497 * C44595) *
         C44464) /
        (p * q * std::sqrt(p + q));
    d2eezz[19] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C10145 * C93 + C9839 * C437 + C10146 * C1232 + C44603 * C1616) *
                 C200 +
             (C10145 * C201 + C9839 * C562 + C10146 * C1357 + C44603 * C1749) *
                 C44464) *
                C4503 +
            ((C10165 + C10164) * C200 + (C10292 + C10293) * C44464) * C44593) *
               C44497 * C635 -
           (((C10930 + C10931) * C44464 + (C10785 + C10784) * C200) * C44593 +
            ((C10146 * C2807 + C44603 * C3134 + C10145 * C767 + C9839 * C1165) *
                 C44464 +
             (C10146 * C2689 + C44603 * C3025 + C10145 * C642 + C9839 * C1026) *
                 C200) *
                C4503) *
               C44497 * C44597) *
              C633 +
          ((((C10784 + C10785) * C200 + (C10931 + C10930) * C44464) * C4503 +
            ((C10145 * C640 + C9839 * C1027 + C10146 * C2691 + C44603 * C3027) *
                 C200 +
             (C10145 * C765 + C9839 * C1163 + C10146 * C2809 + C44603 * C3136) *
                 C44464) *
                C44593) *
               C44497 * C44597 -
           (((C10294 + C10295) * C44464 + (C10169 + C10168) * C200) * C44593 +
            ((C10293 + C10292) * C44464 + (C10164 + C10165) * C200) * C4503) *
               C44497 * C635) *
              C44595)) /
        (p * q * std::sqrt(p + q));
    d2eexx[20] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4507 * C93 + C4503 * C98 + C4508 * C94 + C44593 * C99) * C637 +
            (C4507 * C101 + C4503 * C108 + C4508 * C102 + C44593 * C109) *
                C633 -
            (C4508 * C95 + C44593 * C100 + C4507 * C94 + C4503 * C99) * C638 -
            (C4508 * C103 + C44593 * C110 + C4507 * C102 + C4503 * C109) *
                C44595) *
               C44497 * C9839 +
           ((C11014 + C11015) * C637 + (C11016 + C11017) * C633 -
            (C11018 + C11019) * C638 - (C11020 + C11021) * C44595) *
               C44497 * C44603) *
              C1227 +
          (((C11019 + C11018) * C638 -
            ((C11017 + C11016) * C633 + (C11015 + C11014) * C637) +
            (C11021 + C11020) * C44595) *
               C44497 * C9839 +
           ((C4507 * C4099 + C4503 * C4102 + C4508 * C4100 + C44593 * C4103) *
                C638 -
            ((C4508 * C4105 + C44593 * C4108 + C4507 * C4104 + C4503 * C4107) *
                 C633 +
             (C4508 * C4099 + C44593 * C4102 + C4507 * C4098 + C4503 * C4101) *
                 C637) +
            (C4507 * C4105 + C4503 * C4108 + C4508 * C4106 + C44593 * C4109) *
                C44595) *
               C44497 * C44603) *
              C44599) *
         C44449) /
        (p * q * std::sqrt(p + q));
    d2eexy[20] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C4507 * C93 + C4503 * C98 + C4508 * C94 + C44593 * C99) * C151 +
             (C4507 * C152 + C4503 * C157 + C4508 * C153 + C44593 * C158) *
                 C44449) *
                C44497 * C9839 +
            ((C11014 + C11015) * C151 + (C11096 + C11097) * C44449) * C44497 *
                C44603) *
               C633 -
           (((C11098 + C11099) * C44449 + (C11018 + C11019) * C151) * C44497 *
                C44603 +
            ((C4508 * C154 + C44593 * C159 + C4507 * C153 + C4503 * C158) *
                 C44449 +
             (C4508 * C95 + C44593 * C100 + C4507 * C94 + C4503 * C99) * C151) *
                C44497 * C9839) *
               C44595) *
              C1227 +
          ((((C11019 + C11018) * C151 + (C11099 + C11098) * C44449) * C44497 *
                C9839 +
            ((C4507 * C4099 + C4503 * C4102 + C4508 * C4100 + C44593 * C4103) *
                 C151 +
             (C4507 * C4149 + C4503 * C4152 + C4508 * C4150 + C44593 * C4153) *
                 C44449) *
                C44497 * C44603) *
               C44595 -
           (((C4508 * C4149 + C44593 * C4152 + C4507 * C4148 + C4503 * C4151) *
                 C44449 +
             (C4508 * C4099 + C44593 * C4102 + C4507 * C4098 + C4503 * C4101) *
                 C151) *
                C44497 * C44603 +
            ((C11097 + C11096) * C44449 + (C11015 + C11014) * C151) * C44497 *
                C9839) *
               C633) *
              C44599)) /
        (p * q * std::sqrt(p + q));
    d2eexz[20] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4507 * C93 + C4503 * C98 + C4508 * C94 + C44593 * C99) * C1353 +
            (C4507 * C201 + C4503 * C206 + C4508 * C202 + C44593 * C207) *
                C1227 -
            (C11015 + C11014) * C1354 - (C11174 + C11175) * C44599) *
               C44497 * C9839 +
           ((C11014 + C11015) * C1353 + (C11175 + C11174) * C1227 -
            (C4508 * C4099 + C44593 * C4102 + C4507 * C4098 + C4503 * C4101) *
                C1354 -
            (C4508 * C4196 + C44593 * C4199 + C4507 * C4195 + C4503 * C4198) *
                C44599) *
               C44497 * C44603) *
              C44449 * C633 +
          (((C11019 + C11018) * C1354 -
            ((C4508 * C203 + C44593 * C208 + C4507 * C202 + C4503 * C207) *
                 C1227 +
             (C4508 * C95 + C44593 * C100 + C4507 * C94 + C4503 * C99) *
                 C1353) +
            (C11176 + C11177) * C44599) *
               C44497 * C9839 +
           ((C4507 * C4099 + C4503 * C4102 + C4508 * C4100 + C44593 * C4103) *
                C1354 -
            ((C11177 + C11176) * C1227 + (C11018 + C11019) * C1353) +
            (C4507 * C4196 + C4503 * C4199 + C4508 * C4197 + C44593 * C4200) *
                C44599) *
               C44497 * C44603) *
              C44449 * C44595)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[20] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C249 * C93 + C44497 * C250) * C637 +
             (C249 * C101 + C44497 * C255) * C633 - C273 * C638 -
             C274 * C44595) *
                C9839 +
            (C11262 + C11263 - C11248 - C11249) * C44603) *
               C4503 +
           ((C273 * C637 + C274 * C633 - C275 * C638 - C276 * C44595) * C9839 +
            (C11250 + C11251 - C11252 - C11253) * C44603) *
               C44593) *
              C1227 +
          (((C11248 - (C11263 + C11262) + C11249) * C9839 +
            (C11260 * C638 -
             ((C249 * C4104 + C44497 * C4242) * C633 +
              (C249 * C4098 + C44497 * C4239) * C637) +
             C11261 * C44595) *
                C44603) *
               C4503 +
           ((C11252 - (C11251 + C11250) + C11253) * C9839 +
            ((C249 * C4100 + C44497 * C4241) * C638 -
             (C11261 * C633 + C11260 * C637) +
             (C249 * C4106 + C44497 * C4244) * C44595) *
                C44603) *
               C44593) *
              C44599) *
         C44449) /
        (p * q * std::sqrt(p + q));
    d2eeyy[20] +=
        (2 * std::pow(Pi, 2.5) *
         ((((((C249 * C93 + C44497 * C250) * C151 +
              (C249 * C152 + C44497 * C316) * C44449) *
                 C9839 +
             (C11330 + C11340) * C44603) *
                C4503 +
            ((C322 + C334) * C9839 + C11333 * C44603) * C44593) *
               C633 -
           (((C1497 + C1491) * C44603 + (C335 + C325) * C9839) * C44593 +
            (C11334 * C44603 + (C334 + C322) * C9839) * C4503) *
               C44595) *
              C1227 +
          (((C11333 * C9839 + (C11335 + C11341) * C44603) * C4503 +
            ((C1491 + C1497) * C9839 +
             ((C249 * C4100 + C44497 * C4241) * C151 +
              (C249 * C4150 + C44497 * C4285) * C44449) *
                 C44603) *
                C44593) *
               C44595 -
           (((C11341 + C11335) * C44603 + C11334 * C9839) * C44593 +
            (((C249 * C4148 + C44497 * C4283) * C44449 +
              (C249 * C4098 + C44497 * C4239) * C151) *
                 C44603 +
             (C11340 + C11330) * C9839) *
                C4503) *
               C633) *
              C44599)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[20] += (2 * std::pow(Pi, 2.5) *
                   (((((C249 * C93 + C44497 * C250) * C1353 +
                       (C249 * C201 + C44497 * C376) * C1227 - C11258 * C1354 -
                       C11415 * C44599) *
                          C9839 +
                      (C11258 * C1353 + C11415 * C1227 -
                       (C249 * C4098 + C44497 * C4239) * C1354 -
                       (C249 * C4195 + C44497 * C4324) * C44599) *
                          C44603) *
                         C4503 +
                     ((C1552 + C1553 - C1554 - C1564) * C9839 +
                      (C11410 + C11411 - C11412 - C11417) * C44603) *
                         C44593) *
                        C44449 * C633 +
                    (((C1554 - (C1553 + C1552) + C1564) * C9839 +
                      (C11412 - (C11411 + C11410) + C11417) * C44603) *
                         C4503 +
                     ((C1559 - (C1558 + C1557) + C1565) * C9839 +
                      ((C249 * C4100 + C44497 * C4241) * C1354 -
                       (C1563 * C1227 + C1432 * C1353) +
                       (C249 * C4197 + C44497 * C4326) * C44599) *
                          C44603) *
                         C44593) *
                        C44449 * C44595)) /
                  (p * q * std::sqrt(p + q));
    d2eezx[20] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C10145 * C93 + C9839 * C437 + C10146 * C1232 + C44603 * C1616) *
                C637 +
            (C10145 * C101 + C9839 * C442 + C10146 * C1238 + C44603 * C1619) *
                C633 -
            (C10164 + C10165) * C638 - (C10166 + C10167) * C44595) *
               C4503 +
           ((C10165 + C10164) * C637 + (C10167 + C10166) * C633 -
            (C10169 + C10168) * C638 - (C10171 + C10170) * C44595) *
               C44593) *
              C44497 * C1227 +
          (((C11492 + C11493) * C638 -
            ((C10146 * C4104 + C44603 * C4368 + C10145 * C1238 +
              C9839 * C1619) *
                 C633 +
             (C10146 * C4098 + C44603 * C4365 + C10145 * C1232 +
              C9839 * C1616) *
                 C637) +
            (C11494 + C11495) * C44595) *
               C4503 +
           ((C10145 * C1230 + C9839 * C1617 + C10146 * C4100 + C44603 * C4367) *
                C638 -
            ((C11495 + C11494) * C633 + (C11493 + C11492) * C637) +
            (C10145 * C1236 + C9839 * C1621 + C10146 * C4106 + C44603 * C4370) *
                C44595) *
               C44593) *
              C44497 * C44599) *
         C44449) /
        (p * q * std::sqrt(p + q));
    d2eezy[20] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C10145 * C93 + C9839 * C437 + C10146 * C1232 + C44603 * C1616) *
                 C151 +
             (C10145 * C152 + C9839 * C503 + C10146 * C1298 + C44603 * C1688) *
                 C44449) *
                C4503 +
            ((C10165 + C10164) * C151 + (C10230 + C10231) * C44449) * C44593) *
               C44497 * C633 -
           (((C10232 + C10233) * C44449 + (C10169 + C10168) * C151) * C44593 +
            ((C10231 + C10230) * C44449 + (C10164 + C10165) * C151) * C4503) *
               C44497 * C44595) *
              C1227 +
          ((((C11492 + C11493) * C151 + (C11566 + C11567) * C44449) * C4503 +
            ((C10145 * C1230 + C9839 * C1617 + C10146 * C4100 +
              C44603 * C4367) *
                 C151 +
             (C10145 * C1296 + C9839 * C1686 + C10146 * C4150 +
              C44603 * C4411) *
                 C44449) *
                C44593) *
               C44497 * C44595 -
           (((C11567 + C11566) * C44449 + (C11493 + C11492) * C151) * C44593 +
            ((C10146 * C4148 + C44603 * C4409 + C10145 * C1298 +
              C9839 * C1688) *
                 C44449 +
             (C10146 * C4098 + C44603 * C4365 + C10145 * C1232 +
              C9839 * C1616) *
                 C151) *
                C4503) *
               C44497 * C633) *
              C44599)) /
        (p * q * std::sqrt(p + q));
    d2eezz[20] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C10145 * C93 + C9839 * C437 + C10146 * C1232 + C44603 * C1616) *
                C1353 +
            (C10145 * C201 + C9839 * C562 + C10146 * C1357 + C44603 * C1749) *
                C1227 -
            (C10146 * C4098 + C44603 * C4365 + C10145 * C1232 + C9839 * C1616) *
                C1354 -
            (C10146 * C4195 + C44603 * C4450 + C10145 * C1357 + C9839 * C1749) *
                C44599) *
               C4503 +
           ((C10165 + C10164) * C1353 + (C10292 + C10293) * C1227 -
            (C11493 + C11492) * C1354 - (C11638 + C11639) * C44599) *
               C44593) *
              C44497 * C44449 * C633 +
          (((C11492 + C11493) * C1354 -
            ((C10293 + C10292) * C1227 + (C10164 + C10165) * C1353) +
            (C11639 + C11638) * C44599) *
               C4503 +
           ((C10145 * C1230 + C9839 * C1617 + C10146 * C4100 + C44603 * C4367) *
                C1354 -
            ((C10294 + C10295) * C1227 + (C10169 + C10168) * C1353) +
            (C10145 * C1355 + C9839 * C1751 + C10146 * C4197 + C44603 * C4452) *
                C44599) *
               C44593) *
              C44497 * C44449 * C44595)) /
        (p * q * std::sqrt(p + q));
    d2eexx[21] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4507 * C93 + C4503 * C98 + C4508 * C94 + C44593 * C99) * C1821 +
            (C4507 * C101 + C4503 * C108 + C4508 * C102 + C44593 * C109) *
                C1817 -
            (C4508 * C95 + C44593 * C100 + C4507 * C94 + C4503 * C99) * C1822 -
            (C4508 * C103 + C44593 * C110 + C4507 * C102 + C4503 * C109) *
                C44595) *
               C44497 * C9839 +
           ((C11014 + C11015) * C1821 + (C11016 + C11017) * C1817 -
            (C11018 + C11019) * C1822 - (C11020 + C11021) * C44595) *
               C44497 * C44603) *
              C44464 * C1819 +
          (((C5051 + C5050) * C1822 -
            ((C5049 + C5048) * C1817 + (C5047 + C5046) * C1821) +
            (C5053 + C5052) * C44595) *
               C44497 * C9839 +
           ((C4507 * C2690 + C4503 * C2693 + C4508 * C2691 + C44593 * C2694) *
                C1822 -
            ((C7524 + C7525) * C1817 + (C7526 + C7527) * C1821) +
            (C4507 * C2696 + C4503 * C2699 + C4508 * C2697 + C44593 * C2700) *
                C44595) *
               C44497 * C44603) *
              C44464 * C44597)) /
        (p * q * std::sqrt(p + q));
    d2eexy[21] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4507 * C93 + C4503 * C98 + C4508 * C94 + C44593 * C99) * C1873 +
            (C4507 * C152 + C4503 * C157 + C4508 * C153 + C44593 * C158) *
                C1819 -
            (C5047 + C5046) * C1874 - (C5128 + C5129) * C44597) *
               C44497 * C9839 +
           ((C11014 + C11015) * C1873 + (C11096 + C11097) * C1819 -
            (C7526 + C7527) * C1874 - (C7603 + C7602) * C44597) *
               C44497 * C44603) *
              C1817 +
          (((C5051 + C5050) * C1874 -
            ((C4508 * C154 + C44593 * C159 + C4507 * C153 + C4503 * C158) *
                 C1819 +
             (C4508 * C95 + C44593 * C100 + C4507 * C94 + C4503 * C99) *
                 C1873) +
            (C5130 + C5131) * C44597) *
               C44497 * C9839 +
           ((C4507 * C2690 + C4503 * C2693 + C4508 * C2691 + C44593 * C2694) *
                C1874 -
            ((C11098 + C11099) * C1819 + (C11018 + C11019) * C1873) +
            (C4507 * C2752 + C4503 * C2755 + C4508 * C2753 + C44593 * C2756) *
                C44597) *
               C44497 * C44603) *
              C44595) *
         C44464) /
        (p * q * std::sqrt(p + q));
    d2eexz[21] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C4507 * C93 + C4503 * C98 + C4508 * C94 + C44593 * C99) * C200 +
             (C4507 * C201 + C4503 * C206 + C4508 * C202 + C44593 * C207) *
                 C44464) *
                C44497 * C9839 +
            ((C11014 + C11015) * C200 + (C11175 + C11174) * C44464) * C44497 *
                C44603) *
               C1819 -
           (((C7678 + C7679) * C44464 + (C7526 + C7527) * C200) * C44497 *
                C44603 +
            ((C5207 + C5206) * C44464 + (C5047 + C5046) * C200) * C44497 *
                C9839) *
               C44597) *
              C1817 +
          ((((C5051 + C5050) * C200 + (C5208 + C5209) * C44464) * C44497 *
                C9839 +
            ((C4507 * C2690 + C4503 * C2693 + C4508 * C2691 + C44593 * C2694) *
                 C200 +
             (C4507 * C2808 + C4503 * C2811 + C4508 * C2809 + C44593 * C2812) *
                 C44464) *
                C44497 * C44603) *
               C44597 -
           (((C11177 + C11176) * C44464 + (C11018 + C11019) * C200) * C44497 *
                C44603 +
            ((C4508 * C203 + C44593 * C208 + C4507 * C202 + C4503 * C207) *
                 C44464 +
             (C4508 * C95 + C44593 * C100 + C4507 * C94 + C4503 * C99) * C200) *
                C44497 * C9839) *
               C1819) *
              C44595)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[21] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C249 * C93 + C44497 * C250) * C1821 +
             (C249 * C101 + C44497 * C255) * C1817 - C273 * C1822 -
             C274 * C44595) *
                C9839 +
            (C11258 * C1821 + C11259 * C1817 - C1430 * C1822 - C1431 * C44595) *
                C44603) *
               C4503 +
           ((C273 * C1821 + C274 * C1817 - C275 * C1822 - C276 * C44595) *
                C9839 +
            (C1430 * C1821 + C1431 * C1817 - C1432 * C1822 - C1433 * C44595) *
                C44603) *
               C44593) *
              C44464 * C1819 +
          (((C840 * C1822 -
             ((C249 * C648 + C44497 * C827) * C1817 +
              (C249 * C642 + C44497 * C824) * C1821) +
             C841 * C44595) *
                C9839 +
            (C10564 * C1822 -
             ((C249 * C2695 + C44497 * C2866) * C1817 +
              (C249 * C2689 + C44497 * C2863) * C1821) +
             C10565 * C44595) *
                C44603) *
               C4503 +
           ((C842 * C1822 - (C841 * C1817 + C840 * C1821) + C843 * C44595) *
                C9839 +
            ((C249 * C2691 + C44497 * C2865) * C1822 -
             (C10565 * C1817 + C10564 * C1821) +
             (C249 * C2697 + C44497 * C2868) * C44595) *
                C44603) *
               C44593) *
              C44464 * C44597)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[21] += (2 * std::pow(Pi, 2.5) *
                   (((((C249 * C93 + C44497 * C250) * C1873 +
                       (C249 * C152 + C44497 * C316) * C1819 -
                       (C249 * C642 + C44497 * C824) * C1874 -
                       (C249 * C709 + C44497 * C893) * C44597) *
                          C9839 +
                      (C11258 * C1873 + C11338 * C1819 -
                       (C249 * C2689 + C44497 * C2863) * C1874 -
                       (C249 * C2751 + C44497 * C2919) * C44597) *
                          C44603) *
                         C4503 +
                     ((C2026 + C2027 - C2028 - C2029) * C9839 +
                      (C11970 + C11971 - C11972 - C11973) * C44603) *
                         C44593) *
                        C1817 +
                    (((C2028 - (C2027 + C2026) + C2029) * C9839 +
                      (C11972 - (C11971 + C11970) + C11973) * C44603) *
                         C4503 +
                     ((C2032 - (C2031 + C2030) + C2033) * C9839 +
                      ((C249 * C2691 + C44497 * C2865) * C1874 -
                       (C1495 * C1819 + C1432 * C1873) +
                       (C249 * C2753 + C44497 * C2921) * C44597) *
                          C44603) *
                         C44593) *
                        C44595) *
                   C44464) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[21] +=
        (2 * std::pow(Pi, 2.5) *
         ((((((C249 * C93 + C44497 * C250) * C200 +
              (C249 * C201 + C44497 * C376) * C44464) *
                 C9839 +
             (C11258 * C200 + C11415 * C44464) * C44603) *
                C4503 +
            ((C382 + C394) * C9839 + (C10092 + C10093) * C44603) * C44593) *
               C1819 -
           (((C10709 + C10707) * C44603 + (C975 + C971) * C9839) * C44593 +
            (((C249 * C2807 + C44497 * C2972) * C44464 +
              (C249 * C2689 + C44497 * C2863) * C200) *
                 C44603 +
             ((C249 * C767 + C44497 * C963) * C44464 +
              (C249 * C642 + C44497 * C824) * C200) *
                 C9839) *
                C4503) *
               C44597) *
              C1817 +
          ((((C971 + C975) * C9839 + (C10707 + C10709) * C44603) * C4503 +
            ((C968 + C974) * C9839 +
             ((C249 * C2691 + C44497 * C2865) * C200 +
              (C249 * C2809 + C44497 * C2974) * C44464) *
                 C44603) *
                C44593) *
               C44597 -
           (((C10094 + C10095) * C44603 + (C395 + C385) * C9839) * C44593 +
            ((C10093 + C10092) * C44603 + (C394 + C382) * C9839) * C4503) *
               C1819) *
              C44595)) /
        (p * q * std::sqrt(p + q));
    d2eezx[21] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C10145 * C93 + C9839 * C437 + C10146 * C1232 + C44603 * C1616) *
                C1821 +
            (C10145 * C101 + C9839 * C442 + C10146 * C1238 + C44603 * C1619) *
                C1817 -
            (C10164 + C10165) * C1822 - (C10166 + C10167) * C44595) *
               C4503 +
           ((C10165 + C10164) * C1821 + (C10167 + C10166) * C1817 -
            (C10169 + C10168) * C1822 - (C10171 + C10170) * C44595) *
               C44593) *
              C44497 * C44464 * C1819 +
          (((C10784 + C10785) * C1822 -
            ((C10146 * C2695 + C44603 * C3028 + C10145 * C648 + C9839 * C1029) *
                 C1817 +
             (C10146 * C2689 + C44603 * C3025 + C10145 * C642 + C9839 * C1026) *
                 C1821) +
            (C10786 + C10787) * C44595) *
               C4503 +
           ((C10145 * C640 + C9839 * C1027 + C10146 * C2691 + C44603 * C3027) *
                C1822 -
            ((C10787 + C10786) * C1817 + (C10785 + C10784) * C1821) +
            (C10145 * C646 + C9839 * C1031 + C10146 * C2697 + C44603 * C3030) *
                C44595) *
               C44593) *
              C44497 * C44464 * C44597)) /
        (p * q * std::sqrt(p + q));
    d2eezy[21] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C10145 * C93 + C9839 * C437 + C10146 * C1232 + C44603 * C1616) *
                C1873 +
            (C10145 * C152 + C9839 * C503 + C10146 * C1298 + C44603 * C1688) *
                C1819 -
            (C10146 * C2689 + C44603 * C3025 + C10145 * C642 + C9839 * C1026) *
                C1874 -
            (C10146 * C2751 + C44603 * C3081 + C10145 * C709 + C9839 * C1095) *
                C44597) *
               C4503 +
           ((C10165 + C10164) * C1873 + (C10230 + C10231) * C1819 -
            (C10785 + C10784) * C1874 - (C10858 + C10859) * C44597) *
               C44593) *
              C44497 * C1817 +
          (((C10784 + C10785) * C1874 -
            ((C10231 + C10230) * C1819 + (C10164 + C10165) * C1873) +
            (C10859 + C10858) * C44597) *
               C4503 +
           ((C10145 * C640 + C9839 * C1027 + C10146 * C2691 + C44603 * C3027) *
                C1874 -
            ((C10232 + C10233) * C1819 + (C10169 + C10168) * C1873) +
            (C10145 * C707 + C9839 * C1097 + C10146 * C2753 + C44603 * C3083) *
                C44597) *
               C44593) *
              C44497 * C44595) *
         C44464) /
        (p * q * std::sqrt(p + q));
    d2eezz[21] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C10145 * C93 + C9839 * C437 + C10146 * C1232 + C44603 * C1616) *
                 C200 +
             (C10145 * C201 + C9839 * C562 + C10146 * C1357 + C44603 * C1749) *
                 C44464) *
                C4503 +
            ((C10165 + C10164) * C200 + (C10292 + C10293) * C44464) * C44593) *
               C44497 * C1819 -
           (((C10930 + C10931) * C44464 + (C10785 + C10784) * C200) * C44593 +
            ((C10146 * C2807 + C44603 * C3134 + C10145 * C767 + C9839 * C1165) *
                 C44464 +
             (C10146 * C2689 + C44603 * C3025 + C10145 * C642 + C9839 * C1026) *
                 C200) *
                C4503) *
               C44497 * C44597) *
              C1817 +
          ((((C10784 + C10785) * C200 + (C10931 + C10930) * C44464) * C4503 +
            ((C10145 * C640 + C9839 * C1027 + C10146 * C2691 + C44603 * C3027) *
                 C200 +
             (C10145 * C765 + C9839 * C1163 + C10146 * C2809 + C44603 * C3136) *
                 C44464) *
                C44593) *
               C44497 * C44597 -
           (((C10294 + C10295) * C44464 + (C10169 + C10168) * C200) * C44593 +
            ((C10293 + C10292) * C44464 + (C10164 + C10165) * C200) * C4503) *
               C44497 * C1819) *
              C44595)) /
        (p * q * std::sqrt(p + q));
    d2eexx[22] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4507 * C93 + C4503 * C98 + C4508 * C94 + C44593 * C99) * C2283 +
            (C4507 * C101 + C4503 * C108 + C4508 * C102 + C44593 * C109) *
                C44407) *
               C44497 * C9839 +
           ((C11014 + C11015) * C2283 + (C11016 + C11017) * C44407) * C44497 *
               C44603) *
              C44464 * C2280 -
          (((C7524 + C7525) * C44407 + (C7526 + C7527) * C2283) * C44497 *
               C44603 +
           ((C5049 + C5048) * C44407 + (C5047 + C5046) * C2283) * C44497 *
               C9839) *
              C44464 * C2281 +
          (((C6983 + C6982) * C2283 + (C6981 + C6980) * C44407) * C44497 *
               C9839 +
           ((C4507 * C7507 + C4503 * C7509 + C4508 * C7508 + C44593 * C7510) *
                C2283 +
            (C4507 * C7511 + C4503 * C7513 + C4508 * C7512 + C44593 * C7514) *
                C44407) *
               C44497 * C44603) *
              C44464 * C2282)) /
        (p * q * std::sqrt(p + q));
    d2eexy[22] +=
        (2 * std::pow(Pi, 2.5) *
         (((C4507 * C93 + C4503 * C98 + C4508 * C94 + C44593 * C99) * C2334 +
           (C4507 * C152 + C4503 * C157 + C4508 * C153 + C44593 * C158) *
               C2280 -
           (C5047 + C5046) * C2335 - (C5128 + C5129) * C2281 +
           (C6983 + C6982) * C2336 + (C7042 + C7043) * C2282) *
              C44497 * C9839 +
          ((C11014 + C11015) * C2334 + (C11096 + C11097) * C2280 -
           (C7526 + C7527) * C2335 - (C7603 + C7602) * C2281 +
           (C4507 * C7507 + C4503 * C7509 + C4508 * C7508 + C44593 * C7510) *
               C2336 +
           (C4507 * C7593 + C4503 * C7595 + C4508 * C7594 + C44593 * C7596) *
               C2282) *
              C44497 * C44603) *
         C44407 * C44464) /
        (p * q * std::sqrt(p + q));
    d2eexz[22] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4507 * C93 + C4503 * C98 + C4508 * C94 + C44593 * C99) * C200 +
            (C4507 * C201 + C4503 * C206 + C4508 * C202 + C44593 * C207) *
                C44464) *
               C44497 * C9839 +
           ((C11014 + C11015) * C200 + (C11175 + C11174) * C44464) * C44497 *
               C44603) *
              C2280 -
          (((C7678 + C7679) * C44464 + (C7526 + C7527) * C200) * C44497 *
               C44603 +
           ((C5207 + C5206) * C44464 + (C5047 + C5046) * C200) * C44497 *
               C9839) *
              C2281 +
          (((C6983 + C6982) * C200 + (C7103 + C7102) * C44464) * C44497 *
               C9839 +
           ((C4507 * C7507 + C4503 * C7509 + C4508 * C7508 + C44593 * C7510) *
                C200 +
            (C4507 * C7669 + C4503 * C7671 + C4508 * C7670 + C44593 * C7672) *
                C44464) *
               C44497 * C44603) *
              C2282) *
         C44407) /
        (p * q * std::sqrt(p + q));
    d2eeyx[22] += (2 * std::pow(Pi, 2.5) *
                   (((((C249 * C93 + C44497 * C250) * C2283 +
                       (C249 * C101 + C44497 * C255) * C44407) *
                          C9839 +
                      (C11258 * C2283 + C11259 * C44407) * C44603) *
                         C4503 +
                     ((C273 * C2283 + C274 * C44407) * C9839 +
                      (C1430 * C2283 + C1431 * C44407) * C44603) *
                         C44593) *
                        C44464 * C2280 -
                    (((C10565 * C44407 + C10564 * C2283) * C44603 +
                      (C841 * C44407 + C840 * C2283) * C9839) *
                         C44593 +
                     (((C249 * C2695 + C44497 * C2866) * C44407 +
                       (C249 * C2689 + C44497 * C2863) * C2283) *
                          C44603 +
                      ((C249 * C648 + C44497 * C827) * C44407 +
                       (C249 * C642 + C44497 * C824) * C2283) *
                          C9839) *
                         C4503) *
                        C44464 * C2281 +
                    ((((C249 * C2284 + C44497 * C2425) * C2283 +
                       (C249 * C2290 + C44497 * C2428) * C44407) *
                          C9839 +
                      ((C249 * C7507 + C44497 * C7745) * C2283 +
                       (C249 * C7511 + C44497 * C7747) * C44407) *
                          C44603) *
                         C4503 +
                     (((C249 * C2285 + C44497 * C2426) * C2283 +
                       (C249 * C2291 + C44497 * C2429) * C44407) *
                          C9839 +
                      ((C249 * C7508 + C44497 * C7746) * C2283 +
                       (C249 * C7512 + C44497 * C7748) * C44407) *
                          C44603) *
                         C44593) *
                        C44464 * C2282)) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[22] += (2 * std::pow(Pi, 2.5) *
                   ((((C249 * C93 + C44497 * C250) * C2334 +
                      (C249 * C152 + C44497 * C316) * C2280 -
                      (C249 * C642 + C44497 * C824) * C2335 -
                      (C249 * C709 + C44497 * C893) * C2281 +
                      (C249 * C2284 + C44497 * C2425) * C2336 +
                      (C249 * C2337 + C44497 * C2469) * C2282) *
                         C9839 +
                     (C11258 * C2334 + C11338 * C2280 -
                      (C249 * C2689 + C44497 * C2863) * C2335 -
                      (C249 * C2751 + C44497 * C2919) * C2281 +
                      (C249 * C7507 + C44497 * C7745) * C2336 +
                      (C249 * C7593 + C44497 * C7815) * C2282) *
                         C44603) *
                        C4503 +
                    ((C273 * C2334 + C331 * C2280 - C840 * C2335 -
                      C908 * C2281 + (C249 * C2285 + C44497 * C2426) * C2336 +
                      (C249 * C2338 + C44497 * C2470) * C2282) *
                         C9839 +
                     (C1430 * C2334 + C1494 * C2280 - C10564 * C2335 -
                      C10637 * C2281 + (C249 * C7508 + C44497 * C7746) * C2336 +
                      (C249 * C7594 + C44497 * C7816) * C2282) *
                         C44603) *
                        C44593) *
                   C44407 * C44464) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[22] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C249 * C93 + C44497 * C250) * C200 +
             (C249 * C201 + C44497 * C376) * C44464) *
                C9839 +
            (C11258 * C200 + C11415 * C44464) * C44603) *
               C4503 +
           ((C382 + C394) * C9839 + (C10092 + C10093) * C44603) * C44593) *
              C2280 -
          (((C10709 + C10707) * C44603 + (C975 + C971) * C9839) * C44593 +
           (((C249 * C2807 + C44497 * C2972) * C44464 +
             (C249 * C2689 + C44497 * C2863) * C200) *
                C44603 +
            ((C249 * C767 + C44497 * C963) * C44464 +
             (C249 * C642 + C44497 * C824) * C200) *
                C9839) *
               C4503) *
              C2281 +
          ((((C249 * C2284 + C44497 * C2425) * C200 +
             (C249 * C2381 + C44497 * C2510) * C44464) *
                C9839 +
            ((C249 * C7507 + C44497 * C7745) * C200 +
             (C249 * C7669 + C44497 * C7883) * C44464) *
                C44603) *
               C4503 +
           (((C249 * C2285 + C44497 * C2426) * C200 +
             (C249 * C2382 + C44497 * C2511) * C44464) *
                C9839 +
            ((C249 * C7508 + C44497 * C7746) * C200 +
             (C249 * C7670 + C44497 * C7884) * C44464) *
                C44603) *
               C44593) *
              C2282) *
         C44407) /
        (p * q * std::sqrt(p + q));
    d2eezx[22] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C10145 * C93 + C9839 * C437 + C10146 * C1232 + C44603 * C1616) *
                C2283 +
            (C10145 * C101 + C9839 * C442 + C10146 * C1238 + C44603 * C1619) *
                C44407) *
               C4503 +
           ((C10165 + C10164) * C2283 + (C10167 + C10166) * C44407) * C44593) *
              C44497 * C44464 * C2280 -
          (((C10787 + C10786) * C44407 + (C10785 + C10784) * C2283) * C44593 +
           ((C10146 * C2695 + C44603 * C3028 + C10145 * C648 + C9839 * C1029) *
                C44407 +
            (C10146 * C2689 + C44603 * C3025 + C10145 * C642 + C9839 * C1026) *
                C2283) *
               C4503) *
              C44497 * C44464 * C2281 +
          (((C10145 * C2284 + C9839 * C2551 + C10146 * C7507 + C44603 * C7951) *
                C2283 +
            (C10145 * C2290 + C9839 * C2554 + C10146 * C7511 + C44603 * C7953) *
                C44407) *
               C4503 +
           ((C10145 * C2285 + C9839 * C2552 + C10146 * C7508 + C44603 * C7952) *
                C2283 +
            (C10145 * C2291 + C9839 * C2555 + C10146 * C7512 + C44603 * C7954) *
                C44407) *
               C44593) *
              C44497 * C44464 * C2282)) /
        (p * q * std::sqrt(p + q));
    d2eezy[22] +=
        (2 * std::pow(Pi, 2.5) *
         (((C10145 * C93 + C9839 * C437 + C10146 * C1232 + C44603 * C1616) *
               C2334 +
           (C10145 * C152 + C9839 * C503 + C10146 * C1298 + C44603 * C1688) *
               C2280 -
           (C10146 * C2689 + C44603 * C3025 + C10145 * C642 + C9839 * C1026) *
               C2335 -
           (C10146 * C2751 + C44603 * C3081 + C10145 * C709 + C9839 * C1095) *
               C2281 +
           (C10145 * C2284 + C9839 * C2551 + C10146 * C7507 + C44603 * C7951) *
               C2336 +
           (C10145 * C2337 + C9839 * C2595 + C10146 * C7593 + C44603 * C8031) *
               C2282) *
              C4503 +
          ((C10165 + C10164) * C2334 + (C10230 + C10231) * C2280 -
           (C10785 + C10784) * C2335 - (C10858 + C10859) * C2281 +
           (C10145 * C2285 + C9839 * C2552 + C10146 * C7508 + C44603 * C7952) *
               C2336 +
           (C10145 * C2338 + C9839 * C2596 + C10146 * C7594 + C44603 * C8032) *
               C2282) *
              C44593) *
         C44497 * C44407 * C44464) /
        (p * q * std::sqrt(p + q));
    d2eezz[22] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C10145 * C93 + C9839 * C437 + C10146 * C1232 + C44603 * C1616) *
                C200 +
            (C10145 * C201 + C9839 * C562 + C10146 * C1357 + C44603 * C1749) *
                C44464) *
               C4503 +
           ((C10165 + C10164) * C200 + (C10292 + C10293) * C44464) * C44593) *
              C44497 * C2280 -
          (((C10930 + C10931) * C44464 + (C10785 + C10784) * C200) * C44593 +
           ((C10146 * C2807 + C44603 * C3134 + C10145 * C767 + C9839 * C1165) *
                C44464 +
            (C10146 * C2689 + C44603 * C3025 + C10145 * C642 + C9839 * C1026) *
                C200) *
               C4503) *
              C44497 * C2281 +
          (((C10145 * C2284 + C9839 * C2551 + C10146 * C7507 + C44603 * C7951) *
                C200 +
            (C10145 * C2381 + C9839 * C2636 + C10146 * C7669 + C44603 * C8102) *
                C44464) *
               C4503 +
           ((C10145 * C2285 + C9839 * C2552 + C10146 * C7508 + C44603 * C7952) *
                C200 +
            (C10145 * C2382 + C9839 * C2637 + C10146 * C7670 + C44603 * C8103) *
                C44464) *
               C44593) *
              C44497 * C2282) *
         C44407) /
        (p * q * std::sqrt(p + q));
    d2eexx[23] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C4507 * C93 + C4503 * C98 + C4508 * C94 + C44593 * C99) * C2283 +
             (C4507 * C101 + C4503 * C108 + C4508 * C102 + C44593 * C109) *
                 C44407) *
                C44497 * C9839 +
            ((C11014 + C11015) * C2283 + (C11016 + C11017) * C44407) * C44497 *
                C44603) *
               C1227 -
           (((C4508 * C4105 + C44593 * C4108 + C4507 * C4104 + C4503 * C4107) *
                 C44407 +
             (C4508 * C4099 + C44593 * C4102 + C4507 * C4098 + C4503 * C4101) *
                 C2283) *
                C44497 * C44603 +
            ((C11017 + C11016) * C44407 + (C11015 + C11014) * C2283) * C44497 *
                C9839) *
               C44599) *
              C1819 +
          ((((C7527 + C7526) * C2283 + (C7525 + C7524) * C44407) * C44497 *
                C9839 +
            ((C4507 * C9357 + C4503 * C9359 + C4508 * C9358 + C44593 * C9360) *
                 C2283 +
             (C4507 * C9361 + C4503 * C9363 + C4508 * C9362 + C44593 * C9364) *
                 C44407) *
                C44497 * C44603) *
               C44599 -
           (((C7524 + C7525) * C44407 + (C7526 + C7527) * C2283) * C44497 *
                C44603 +
            ((C5049 + C5048) * C44407 + (C5047 + C5046) * C2283) * C44497 *
                C9839) *
               C1227) *
              C44597)) /
        (p * q * std::sqrt(p + q));
    d2eexy[23] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4507 * C93 + C4503 * C98 + C4508 * C94 + C44593 * C99) * C1873 +
            (C4507 * C152 + C4503 * C157 + C4508 * C153 + C44593 * C158) *
                C1819 -
            (C5047 + C5046) * C1874 - (C5128 + C5129) * C44597) *
               C44497 * C9839 +
           ((C11014 + C11015) * C1873 + (C11096 + C11097) * C1819 -
            (C7526 + C7527) * C1874 - (C7603 + C7602) * C44597) *
               C44497 * C44603) *
              C44407 * C1227 +
          (((C7527 + C7526) * C1874 -
            ((C11097 + C11096) * C1819 + (C11015 + C11014) * C1873) +
            (C7602 + C7603) * C44597) *
               C44497 * C9839 +
           ((C4507 * C9357 + C4503 * C9359 + C4508 * C9358 + C44593 * C9360) *
                C1874 -
            ((C4508 * C4149 + C44593 * C4152 + C4507 * C4148 + C4503 * C4151) *
                 C1819 +
             (C4508 * C4099 + C44593 * C4102 + C4507 * C4098 + C4503 * C4101) *
                 C1873) +
            (C4507 * C9415 + C4503 * C9417 + C4508 * C9416 + C44593 * C9418) *
                C44597) *
               C44497 * C44603) *
              C44407 * C44599)) /
        (p * q * std::sqrt(p + q));
    d2eexz[23] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4507 * C93 + C4503 * C98 + C4508 * C94 + C44593 * C99) * C1353 +
            (C4507 * C201 + C4503 * C206 + C4508 * C202 + C44593 * C207) *
                C1227 -
            (C11015 + C11014) * C1354 - (C11174 + C11175) * C44599) *
               C44497 * C9839 +
           ((C11014 + C11015) * C1353 + (C11175 + C11174) * C1227 -
            (C4508 * C4099 + C44593 * C4102 + C4507 * C4098 + C4503 * C4101) *
                C1354 -
            (C4508 * C4196 + C44593 * C4199 + C4507 * C4195 + C4503 * C4198) *
                C44599) *
               C44497 * C44603) *
              C1819 +
          (((C7527 + C7526) * C1354 -
            ((C5207 + C5206) * C1227 + (C5047 + C5046) * C1353) +
            (C7679 + C7678) * C44599) *
               C44497 * C9839 +
           ((C4507 * C9357 + C4503 * C9359 + C4508 * C9358 + C44593 * C9360) *
                C1354 -
            ((C7678 + C7679) * C1227 + (C7526 + C7527) * C1353) +
            (C4507 * C9469 + C4503 * C9471 + C4508 * C9470 + C44593 * C9472) *
                C44599) *
               C44497 * C44603) *
              C44597) *
         C44407) /
        (p * q * std::sqrt(p + q));
    d2eeyx[23] += (2 * std::pow(Pi, 2.5) *
                   ((((((C249 * C93 + C44497 * C250) * C2283 +
                        (C249 * C101 + C44497 * C255) * C44407) *
                           C9839 +
                       (C12952 + C12953) * C44603) *
                          C4503 +
                      ((C273 * C2283 + C274 * C44407) * C9839 +
                       (C12954 + C12955) * C44603) *
                          C44593) *
                         C1227 -
                     (((C11261 * C44407 + C11260 * C2283) * C44603 +
                       (C12955 + C12954) * C9839) *
                          C44593 +
                      (((C249 * C4104 + C44497 * C4242) * C44407 +
                        (C249 * C4098 + C44497 * C4239) * C2283) *
                           C44603 +
                       (C12953 + C12952) * C9839) *
                          C4503) *
                         C44599) *
                        C1819 +
                    ((((C12964 + C12965) * C9839 +
                       ((C249 * C9357 + C44497 * C9523) * C2283 +
                        (C249 * C9361 + C44497 * C9525) * C44407) *
                           C44603) *
                          C4503 +
                      ((C12960 + C12961) * C9839 +
                       ((C249 * C9358 + C44497 * C9524) * C2283 +
                        (C249 * C9362 + C44497 * C9526) * C44407) *
                           C44603) *
                          C44593) *
                         C44599 -
                     (((C12961 + C12960) * C44603 +
                       (C841 * C44407 + C840 * C2283) * C9839) *
                          C44593 +
                      ((C12965 + C12964) * C44603 +
                       ((C249 * C648 + C44497 * C827) * C44407 +
                        (C249 * C642 + C44497 * C824) * C2283) *
                           C9839) *
                          C4503) *
                         C1227) *
                        C44597)) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[23] += (2 * std::pow(Pi, 2.5) *
                   (((((C249 * C93 + C44497 * C250) * C1873 +
                       (C249 * C152 + C44497 * C316) * C1819 -
                       (C249 * C642 + C44497 * C824) * C1874 -
                       (C249 * C709 + C44497 * C893) * C44597) *
                          C9839 +
                      (C13032 + C13033 - C13034 - C13038) * C44603) *
                         C4503 +
                     ((C2026 + C2027 - C2028 - C2029) * C9839 +
                      (C11970 + C11971 - C11972 - C11973) * C44603) *
                         C44593) *
                        C44407 * C1227 +
                    (((C13034 - (C13033 + C13032) + C13038) * C9839 +
                      ((C249 * C9357 + C44497 * C9523) * C1874 -
                       ((C249 * C4148 + C44497 * C4283) * C1819 +
                        (C249 * C4098 + C44497 * C4239) * C1873) +
                       (C249 * C9415 + C44497 * C9577) * C44597) *
                          C44603) *
                         C4503 +
                     ((C11972 - (C11971 + C11970) + C11973) * C9839 +
                      ((C249 * C9358 + C44497 * C9524) * C1874 -
                       (C11339 * C1819 + C11260 * C1873) +
                       (C249 * C9416 + C44497 * C9578) * C44597) *
                          C44603) *
                         C44593) *
                        C44407 * C44599)) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[23] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C249 * C93 + C44497 * C250) * C1353 +
             (C249 * C201 + C44497 * C376) * C1227 - C11258 * C1354 -
             C11415 * C44599) *
                C9839 +
            (C11258 * C1353 + C11415 * C1227 -
             (C249 * C4098 + C44497 * C4239) * C1354 -
             (C249 * C4195 + C44497 * C4324) * C44599) *
                C44603) *
               C4503 +
           ((C1552 + C1553 - C1554 - C1564) * C9839 +
            (C11410 + C11411 - C11412 - C11417) * C44603) *
               C44593) *
              C1819 +
          (((C12962 * C1354 -
             ((C249 * C767 + C44497 * C963) * C1227 +
              (C249 * C642 + C44497 * C824) * C1353) +
             C13107 * C44599) *
                C9839 +
            ((C249 * C9357 + C44497 * C9523) * C1354 -
             (C13107 * C1227 + C12962 * C1353) +
             (C249 * C9469 + C44497 * C9629) * C44599) *
                C44603) *
               C4503 +
           ((C10564 * C1354 - (C973 * C1227 + C840 * C1353) + C10708 * C44599) *
                C9839 +
            ((C249 * C9358 + C44497 * C9524) * C1354 -
             (C10708 * C1227 + C10564 * C1353) +
             (C249 * C9470 + C44497 * C9630) * C44599) *
                C44603) *
               C44593) *
              C44597) *
         C44407) /
        (p * q * std::sqrt(p + q));
    d2eezx[23] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C10145 * C93 + C9839 * C437 + C10146 * C1232 + C44603 * C1616) *
                 C2283 +
             (C10145 * C101 + C9839 * C442 + C10146 * C1238 + C44603 * C1619) *
                 C44407) *
                C4503 +
            ((C10165 + C10164) * C2283 + (C10167 + C10166) * C44407) * C44593) *
               C44497 * C1227 -
           (((C11495 + C11494) * C44407 + (C11493 + C11492) * C2283) * C44593 +
            ((C10146 * C4104 + C44603 * C4368 + C10145 * C1238 +
              C9839 * C1619) *
                 C44407 +
             (C10146 * C4098 + C44603 * C4365 + C10145 * C1232 +
              C9839 * C1616) *
                 C2283) *
                C4503) *
               C44497 * C44599) *
              C1819 +
          ((((C10145 * C2689 + C9839 * C3025 + C10146 * C9357 +
              C44603 * C9681) *
                 C2283 +
             (C10145 * C2695 + C9839 * C3028 + C10146 * C9361 +
              C44603 * C9683) *
                 C44407) *
                C4503 +
            ((C10145 * C2690 + C9839 * C3026 + C10146 * C9358 +
              C44603 * C9682) *
                 C2283 +
             (C10145 * C2696 + C9839 * C3029 + C10146 * C9362 +
              C44603 * C9684) *
                 C44407) *
                C44593) *
               C44497 * C44599 -
           (((C10787 + C10786) * C44407 + (C10785 + C10784) * C2283) * C44593 +
            ((C10146 * C2695 + C44603 * C3028 + C10145 * C648 + C9839 * C1029) *
                 C44407 +
             (C10146 * C2689 + C44603 * C3025 + C10145 * C642 + C9839 * C1026) *
                 C2283) *
                C4503) *
               C44497 * C1227) *
              C44597)) /
        (p * q * std::sqrt(p + q));
    d2eezy[23] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C10145 * C93 + C9839 * C437 + C10146 * C1232 + C44603 * C1616) *
                C1873 +
            (C10145 * C152 + C9839 * C503 + C10146 * C1298 + C44603 * C1688) *
                C1819 -
            (C10146 * C2689 + C44603 * C3025 + C10145 * C642 + C9839 * C1026) *
                C1874 -
            (C10146 * C2751 + C44603 * C3081 + C10145 * C709 + C9839 * C1095) *
                C44597) *
               C4503 +
           ((C10165 + C10164) * C1873 + (C10230 + C10231) * C1819 -
            (C10785 + C10784) * C1874 - (C10858 + C10859) * C44597) *
               C44593) *
              C44497 * C44407 * C1227 +
          (((C10145 * C2689 + C9839 * C3025 + C10146 * C9357 + C44603 * C9681) *
                C1874 -
            ((C10146 * C4148 + C44603 * C4409 + C10145 * C1298 +
              C9839 * C1688) *
                 C1819 +
             (C10146 * C4098 + C44603 * C4365 + C10145 * C1232 +
              C9839 * C1616) *
                 C1873) +
            (C10145 * C2751 + C9839 * C3081 + C10146 * C9415 + C44603 * C9735) *
                C44597) *
               C4503 +
           ((C10145 * C2690 + C9839 * C3026 + C10146 * C9358 + C44603 * C9682) *
                C1874 -
            ((C11567 + C11566) * C1819 + (C11493 + C11492) * C1873) +
            (C10145 * C2752 + C9839 * C3082 + C10146 * C9416 + C44603 * C9736) *
                C44597) *
               C44593) *
              C44497 * C44407 * C44599)) /
        (p * q * std::sqrt(p + q));
    d2eezz[23] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C10145 * C93 + C9839 * C437 + C10146 * C1232 + C44603 * C1616) *
                C1353 +
            (C10145 * C201 + C9839 * C562 + C10146 * C1357 + C44603 * C1749) *
                C1227 -
            (C10146 * C4098 + C44603 * C4365 + C10145 * C1232 + C9839 * C1616) *
                C1354 -
            (C10146 * C4195 + C44603 * C4450 + C10145 * C1357 + C9839 * C1749) *
                C44599) *
               C4503 +
           ((C10165 + C10164) * C1353 + (C10292 + C10293) * C1227 -
            (C11493 + C11492) * C1354 - (C11638 + C11639) * C44599) *
               C44593) *
              C44497 * C1819 +
          (((C10145 * C2689 + C9839 * C3025 + C10146 * C9357 + C44603 * C9681) *
                C1354 -
            ((C10146 * C2807 + C44603 * C3134 + C10145 * C767 + C9839 * C1165) *
                 C1227 +
             (C10146 * C2689 + C44603 * C3025 + C10145 * C642 + C9839 * C1026) *
                 C1353) +
            (C10145 * C2807 + C9839 * C3134 + C10146 * C9469 + C44603 * C9787) *
                C44599) *
               C4503 +
           ((C10145 * C2690 + C9839 * C3026 + C10146 * C9358 + C44603 * C9682) *
                C1354 -
            ((C10930 + C10931) * C1227 + (C10785 + C10784) * C1353) +
            (C10145 * C2808 + C9839 * C3135 + C10146 * C9470 + C44603 * C9788) *
                C44599) *
               C44593) *
              C44497 * C44597) *
         C44407) /
        (p * q * std::sqrt(p + q));
    d2eexx[24] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4507 * C93 + C4503 * C98 + C4508 * C94 + C44593 * C99) * C1821 +
            (C4507 * C101 + C4503 * C108 + C4508 * C102 + C44593 * C109) *
                C1817 -
            (C4508 * C95 + C44593 * C100 + C4507 * C94 + C4503 * C99) * C1822 -
            (C4508 * C103 + C44593 * C110 + C4507 * C102 + C4503 * C109) *
                C44595) *
               C44497 * C9839 +
           ((C11014 + C11015) * C1821 + (C11016 + C11017) * C1817 -
            (C11018 + C11019) * C1822 - (C11020 + C11021) * C44595) *
               C44497 * C44603) *
              C3187 +
          (((C11019 + C11018) * C1822 -
            ((C11017 + C11016) * C1817 + (C11015 + C11014) * C1821) +
            (C11021 + C11020) * C44595) *
               C44497 * C9839 +
           ((C4507 * C4099 + C4503 * C4102 + C4508 * C4100 + C44593 * C4103) *
                C1822 -
            ((C4508 * C4105 + C44593 * C4108 + C4507 * C4104 + C4503 * C4107) *
                 C1817 +
             (C4508 * C4099 + C44593 * C4102 + C4507 * C4098 + C4503 * C4101) *
                 C1821) +
            (C4507 * C4105 + C4503 * C4108 + C4508 * C4106 + C44593 * C4109) *
                C44595) *
               C44497 * C44603) *
              C44599) *
         C44449) /
        (p * q * std::sqrt(p + q));
    d2eexy[24] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C4507 * C93 + C4503 * C98 + C4508 * C94 + C44593 * C99) * C151 +
             (C4507 * C152 + C4503 * C157 + C4508 * C153 + C44593 * C158) *
                 C44449) *
                C44497 * C9839 +
            ((C11014 + C11015) * C151 + (C11096 + C11097) * C44449) * C44497 *
                C44603) *
               C1817 -
           (((C11098 + C11099) * C44449 + (C11018 + C11019) * C151) * C44497 *
                C44603 +
            ((C4508 * C154 + C44593 * C159 + C4507 * C153 + C4503 * C158) *
                 C44449 +
             (C4508 * C95 + C44593 * C100 + C4507 * C94 + C4503 * C99) * C151) *
                C44497 * C9839) *
               C44595) *
              C3187 +
          ((((C11019 + C11018) * C151 + (C11099 + C11098) * C44449) * C44497 *
                C9839 +
            ((C4507 * C4099 + C4503 * C4102 + C4508 * C4100 + C44593 * C4103) *
                 C151 +
             (C4507 * C4149 + C4503 * C4152 + C4508 * C4150 + C44593 * C4153) *
                 C44449) *
                C44497 * C44603) *
               C44595 -
           (((C4508 * C4149 + C44593 * C4152 + C4507 * C4148 + C4503 * C4151) *
                 C44449 +
             (C4508 * C4099 + C44593 * C4102 + C4507 * C4098 + C4503 * C4101) *
                 C151) *
                C44497 * C44603 +
            ((C11097 + C11096) * C44449 + (C11015 + C11014) * C151) * C44497 *
                C9839) *
               C1817) *
              C44599)) /
        (p * q * std::sqrt(p + q));
    d2eexz[24] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4507 * C93 + C4503 * C98 + C4508 * C94 + C44593 * C99) * C3289 +
            (C4507 * C201 + C4503 * C206 + C4508 * C202 + C44593 * C207) *
                C3187 -
            (C11015 + C11014) * C3290 - (C11174 + C11175) * C44599) *
               C44497 * C9839 +
           ((C11014 + C11015) * C3289 + (C11175 + C11174) * C3187 -
            (C4508 * C4099 + C44593 * C4102 + C4507 * C4098 + C4503 * C4101) *
                C3290 -
            (C4508 * C4196 + C44593 * C4199 + C4507 * C4195 + C4503 * C4198) *
                C44599) *
               C44497 * C44603) *
              C44449 * C1817 +
          (((C11019 + C11018) * C3290 -
            ((C4508 * C203 + C44593 * C208 + C4507 * C202 + C4503 * C207) *
                 C3187 +
             (C4508 * C95 + C44593 * C100 + C4507 * C94 + C4503 * C99) *
                 C3289) +
            (C11176 + C11177) * C44599) *
               C44497 * C9839 +
           ((C4507 * C4099 + C4503 * C4102 + C4508 * C4100 + C44593 * C4103) *
                C3290 -
            ((C11177 + C11176) * C3187 + (C11018 + C11019) * C3289) +
            (C4507 * C4196 + C4503 * C4199 + C4508 * C4197 + C44593 * C4200) *
                C44599) *
               C44497 * C44603) *
              C44449 * C44595)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[24] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C249 * C93 + C44497 * C250) * C1821 +
             (C249 * C101 + C44497 * C255) * C1817 - C273 * C1822 -
             C274 * C44595) *
                C9839 +
            (C13570 + C13571 - C13572 - C13573) * C44603) *
               C4503 +
           ((C273 * C1821 + C274 * C1817 - C275 * C1822 - C276 * C44595) *
                C9839 +
            (C13574 + C13575 - C13576 - C13577) * C44603) *
               C44593) *
              C3187 +
          (((C13572 - (C13571 + C13570) + C13573) * C9839 +
            (C11260 * C1822 -
             ((C249 * C4104 + C44497 * C4242) * C1817 +
              (C249 * C4098 + C44497 * C4239) * C1821) +
             C11261 * C44595) *
                C44603) *
               C4503 +
           ((C13576 - (C13575 + C13574) + C13577) * C9839 +
            ((C249 * C4100 + C44497 * C4241) * C1822 -
             (C11261 * C1817 + C11260 * C1821) +
             (C249 * C4106 + C44497 * C4244) * C44595) *
                C44603) *
               C44593) *
              C44599) *
         C44449) /
        (p * q * std::sqrt(p + q));
    d2eeyy[24] +=
        (2 * std::pow(Pi, 2.5) *
         ((((((C249 * C93 + C44497 * C250) * C151 +
              (C249 * C152 + C44497 * C316) * C44449) *
                 C9839 +
             (C11330 + C11340) * C44603) *
                C4503 +
            ((C322 + C334) * C9839 + C11333 * C44603) * C44593) *
               C1817 -
           (((C1497 + C1491) * C44603 + (C335 + C325) * C9839) * C44593 +
            (C11334 * C44603 + (C334 + C322) * C9839) * C4503) *
               C44595) *
              C3187 +
          (((C11333 * C9839 + (C11335 + C11341) * C44603) * C4503 +
            ((C1491 + C1497) * C9839 +
             ((C249 * C4100 + C44497 * C4241) * C151 +
              (C249 * C4150 + C44497 * C4285) * C44449) *
                 C44603) *
                C44593) *
               C44595 -
           (((C11341 + C11335) * C44603 + C11334 * C9839) * C44593 +
            (((C249 * C4148 + C44497 * C4283) * C44449 +
              (C249 * C4098 + C44497 * C4239) * C151) *
                 C44603 +
             (C11340 + C11330) * C9839) *
                C4503) *
               C1817) *
              C44599)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[24] += (2 * std::pow(Pi, 2.5) *
                   (((((C249 * C93 + C44497 * C250) * C3289 +
                       (C249 * C201 + C44497 * C376) * C3187 - C11258 * C3290 -
                       C11415 * C44599) *
                          C9839 +
                      (C11258 * C3289 + C11415 * C3187 -
                       (C249 * C4098 + C44497 * C4239) * C3290 -
                       (C249 * C4195 + C44497 * C4324) * C44599) *
                          C44603) *
                         C4503 +
                     ((C3442 + C3443 - C3444 - C3445) * C9839 +
                      (C13710 + C13711 - C13712 - C13713) * C44603) *
                         C44593) *
                        C44449 * C1817 +
                    (((C3444 - (C3443 + C3442) + C3445) * C9839 +
                      (C13712 - (C13711 + C13710) + C13713) * C44603) *
                         C4503 +
                     ((C3448 - (C3447 + C3446) + C3449) * C9839 +
                      ((C249 * C4100 + C44497 * C4241) * C3290 -
                       (C1563 * C3187 + C1432 * C3289) +
                       (C249 * C4197 + C44497 * C4326) * C44599) *
                          C44603) *
                         C44593) *
                        C44449 * C44595)) /
                  (p * q * std::sqrt(p + q));
    d2eezx[24] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C10145 * C93 + C9839 * C437 + C10146 * C1232 + C44603 * C1616) *
                C1821 +
            (C10145 * C101 + C9839 * C442 + C10146 * C1238 + C44603 * C1619) *
                C1817 -
            (C10164 + C10165) * C1822 - (C10166 + C10167) * C44595) *
               C4503 +
           ((C10165 + C10164) * C1821 + (C10167 + C10166) * C1817 -
            (C10169 + C10168) * C1822 - (C10171 + C10170) * C44595) *
               C44593) *
              C44497 * C3187 +
          (((C11492 + C11493) * C1822 -
            ((C10146 * C4104 + C44603 * C4368 + C10145 * C1238 +
              C9839 * C1619) *
                 C1817 +
             (C10146 * C4098 + C44603 * C4365 + C10145 * C1232 +
              C9839 * C1616) *
                 C1821) +
            (C11494 + C11495) * C44595) *
               C4503 +
           ((C10145 * C1230 + C9839 * C1617 + C10146 * C4100 + C44603 * C4367) *
                C1822 -
            ((C11495 + C11494) * C1817 + (C11493 + C11492) * C1821) +
            (C10145 * C1236 + C9839 * C1621 + C10146 * C4106 + C44603 * C4370) *
                C44595) *
               C44593) *
              C44497 * C44599) *
         C44449) /
        (p * q * std::sqrt(p + q));
    d2eezy[24] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C10145 * C93 + C9839 * C437 + C10146 * C1232 + C44603 * C1616) *
                 C151 +
             (C10145 * C152 + C9839 * C503 + C10146 * C1298 + C44603 * C1688) *
                 C44449) *
                C4503 +
            ((C10165 + C10164) * C151 + (C10230 + C10231) * C44449) * C44593) *
               C44497 * C1817 -
           (((C10232 + C10233) * C44449 + (C10169 + C10168) * C151) * C44593 +
            ((C10231 + C10230) * C44449 + (C10164 + C10165) * C151) * C4503) *
               C44497 * C44595) *
              C3187 +
          ((((C11492 + C11493) * C151 + (C11566 + C11567) * C44449) * C4503 +
            ((C10145 * C1230 + C9839 * C1617 + C10146 * C4100 +
              C44603 * C4367) *
                 C151 +
             (C10145 * C1296 + C9839 * C1686 + C10146 * C4150 +
              C44603 * C4411) *
                 C44449) *
                C44593) *
               C44497 * C44595 -
           (((C11567 + C11566) * C44449 + (C11493 + C11492) * C151) * C44593 +
            ((C10146 * C4148 + C44603 * C4409 + C10145 * C1298 +
              C9839 * C1688) *
                 C44449 +
             (C10146 * C4098 + C44603 * C4365 + C10145 * C1232 +
              C9839 * C1616) *
                 C151) *
                C4503) *
               C44497 * C1817) *
              C44599)) /
        (p * q * std::sqrt(p + q));
    d2eezz[24] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C10145 * C93 + C9839 * C437 + C10146 * C1232 + C44603 * C1616) *
                C3289 +
            (C10145 * C201 + C9839 * C562 + C10146 * C1357 + C44603 * C1749) *
                C3187 -
            (C10146 * C4098 + C44603 * C4365 + C10145 * C1232 + C9839 * C1616) *
                C3290 -
            (C10146 * C4195 + C44603 * C4450 + C10145 * C1357 + C9839 * C1749) *
                C44599) *
               C4503 +
           ((C10165 + C10164) * C3289 + (C10292 + C10293) * C3187 -
            (C11493 + C11492) * C3290 - (C11638 + C11639) * C44599) *
               C44593) *
              C44497 * C44449 * C1817 +
          (((C11492 + C11493) * C3290 -
            ((C10293 + C10292) * C3187 + (C10164 + C10165) * C3289) +
            (C11639 + C11638) * C44599) *
               C4503 +
           ((C10145 * C1230 + C9839 * C1617 + C10146 * C4100 + C44603 * C4367) *
                C3290 -
            ((C10294 + C10295) * C3187 + (C10169 + C10168) * C3289) +
            (C10145 * C1355 + C9839 * C1751 + C10146 * C4197 + C44603 * C4452) *
                C44599) *
               C44593) *
              C44497 * C44449 * C44595)) /
        (p * q * std::sqrt(p + q));
    d2eexx[25] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C4507 * C93 + C4503 * C98 + C4508 * C94 + C44593 * C99) * C2283 +
             (C4507 * C101 + C4503 * C108 + C4508 * C102 + C44593 * C109) *
                 C44407) *
                C44497 * C9839 +
            ((C11014 + C11015) * C2283 + (C11016 + C11017) * C44407) * C44497 *
                C44603) *
               C3187 -
           (((C4508 * C4105 + C44593 * C4108 + C4507 * C4104 + C4503 * C4107) *
                 C44407 +
             (C4508 * C4099 + C44593 * C4102 + C4507 * C4098 + C4503 * C4101) *
                 C2283) *
                C44497 * C44603 +
            ((C11017 + C11016) * C44407 + (C11015 + C11014) * C2283) * C44497 *
                C9839) *
               C44599) *
              C635 +
          ((((C7527 + C7526) * C2283 + (C7525 + C7524) * C44407) * C44497 *
                C9839 +
            ((C4507 * C9357 + C4503 * C9359 + C4508 * C9358 + C44593 * C9360) *
                 C2283 +
             (C4507 * C9361 + C4503 * C9363 + C4508 * C9362 + C44593 * C9364) *
                 C44407) *
                C44497 * C44603) *
               C44599 -
           (((C7524 + C7525) * C44407 + (C7526 + C7527) * C2283) * C44497 *
                C44603 +
            ((C5049 + C5048) * C44407 + (C5047 + C5046) * C2283) * C44497 *
                C9839) *
               C3187) *
              C44597)) /
        (p * q * std::sqrt(p + q));
    d2eexy[25] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4507 * C93 + C4503 * C98 + C4508 * C94 + C44593 * C99) * C705 +
            (C4507 * C152 + C4503 * C157 + C4508 * C153 + C44593 * C158) *
                C635 -
            (C5047 + C5046) * C706 - (C5128 + C5129) * C44597) *
               C44497 * C9839 +
           ((C11014 + C11015) * C705 + (C11096 + C11097) * C635 -
            (C7526 + C7527) * C706 - (C7603 + C7602) * C44597) *
               C44497 * C44603) *
              C44407 * C3187 +
          (((C7527 + C7526) * C706 -
            ((C11097 + C11096) * C635 + (C11015 + C11014) * C705) +
            (C7602 + C7603) * C44597) *
               C44497 * C9839 +
           ((C4507 * C9357 + C4503 * C9359 + C4508 * C9358 + C44593 * C9360) *
                C706 -
            ((C4508 * C4149 + C44593 * C4152 + C4507 * C4148 + C4503 * C4151) *
                 C635 +
             (C4508 * C4099 + C44593 * C4102 + C4507 * C4098 + C4503 * C4101) *
                 C705) +
            (C4507 * C9415 + C4503 * C9417 + C4508 * C9416 + C44593 * C9418) *
                C44597) *
               C44497 * C44603) *
              C44407 * C44599)) /
        (p * q * std::sqrt(p + q));
    d2eexz[25] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4507 * C93 + C4503 * C98 + C4508 * C94 + C44593 * C99) * C3289 +
            (C4507 * C201 + C4503 * C206 + C4508 * C202 + C44593 * C207) *
                C3187 -
            (C11015 + C11014) * C3290 - (C11174 + C11175) * C44599) *
               C44497 * C9839 +
           ((C11014 + C11015) * C3289 + (C11175 + C11174) * C3187 -
            (C4508 * C4099 + C44593 * C4102 + C4507 * C4098 + C4503 * C4101) *
                C3290 -
            (C4508 * C4196 + C44593 * C4199 + C4507 * C4195 + C4503 * C4198) *
                C44599) *
               C44497 * C44603) *
              C635 +
          (((C7527 + C7526) * C3290 -
            ((C5207 + C5206) * C3187 + (C5047 + C5046) * C3289) +
            (C7679 + C7678) * C44599) *
               C44497 * C9839 +
           ((C4507 * C9357 + C4503 * C9359 + C4508 * C9358 + C44593 * C9360) *
                C3290 -
            ((C7678 + C7679) * C3187 + (C7526 + C7527) * C3289) +
            (C4507 * C9469 + C4503 * C9471 + C4508 * C9470 + C44593 * C9472) *
                C44599) *
               C44497 * C44603) *
              C44597) *
         C44407) /
        (p * q * std::sqrt(p + q));
    d2eeyx[25] += (2 * std::pow(Pi, 2.5) *
                   ((((((C249 * C93 + C44497 * C250) * C2283 +
                        (C249 * C101 + C44497 * C255) * C44407) *
                           C9839 +
                       (C12952 + C12953) * C44603) *
                          C4503 +
                      ((C273 * C2283 + C274 * C44407) * C9839 +
                       (C12954 + C12955) * C44603) *
                          C44593) *
                         C3187 -
                     (((C11261 * C44407 + C11260 * C2283) * C44603 +
                       (C12955 + C12954) * C9839) *
                          C44593 +
                      (((C249 * C4104 + C44497 * C4242) * C44407 +
                        (C249 * C4098 + C44497 * C4239) * C2283) *
                           C44603 +
                       (C12953 + C12952) * C9839) *
                          C4503) *
                         C44599) *
                        C635 +
                    ((((C12964 + C12965) * C9839 +
                       ((C249 * C9357 + C44497 * C9523) * C2283 +
                        (C249 * C9361 + C44497 * C9525) * C44407) *
                           C44603) *
                          C4503 +
                      ((C12960 + C12961) * C9839 +
                       ((C249 * C9358 + C44497 * C9524) * C2283 +
                        (C249 * C9362 + C44497 * C9526) * C44407) *
                           C44603) *
                          C44593) *
                         C44599 -
                     (((C12961 + C12960) * C44603 +
                       (C841 * C44407 + C840 * C2283) * C9839) *
                          C44593 +
                      ((C12965 + C12964) * C44603 +
                       ((C249 * C648 + C44497 * C827) * C44407 +
                        (C249 * C642 + C44497 * C824) * C2283) *
                           C9839) *
                          C4503) *
                         C3187) *
                        C44597)) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[25] += (2 * std::pow(Pi, 2.5) *
                   (((((C249 * C93 + C44497 * C250) * C705 +
                       (C249 * C152 + C44497 * C316) * C635 -
                       (C249 * C642 + C44497 * C824) * C706 -
                       (C249 * C709 + C44497 * C893) * C44597) *
                          C9839 +
                      (C14242 + C14243 - C14244 - C14245) * C44603) *
                         C4503 +
                     ((C898 + C899 - C900 - C910) * C9839 +
                      (C10632 + C10633 - C10634 - C10638) * C44603) *
                         C44593) *
                        C44407 * C3187 +
                    (((C14244 - (C14243 + C14242) + C14245) * C9839 +
                      ((C249 * C9357 + C44497 * C9523) * C706 -
                       ((C249 * C4148 + C44497 * C4283) * C635 +
                        (C249 * C4098 + C44497 * C4239) * C705) +
                       (C249 * C9415 + C44497 * C9577) * C44597) *
                          C44603) *
                         C4503 +
                     ((C10634 - (C10633 + C10632) + C10638) * C9839 +
                      ((C249 * C9358 + C44497 * C9524) * C706 -
                       (C11339 * C635 + C11260 * C705) +
                       (C249 * C9416 + C44497 * C9578) * C44597) *
                          C44603) *
                         C44593) *
                        C44407 * C44599)) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[25] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C249 * C93 + C44497 * C250) * C3289 +
             (C249 * C201 + C44497 * C376) * C3187 - C11258 * C3290 -
             C11415 * C44599) *
                C9839 +
            (C11258 * C3289 + C11415 * C3187 -
             (C249 * C4098 + C44497 * C4239) * C3290 -
             (C249 * C4195 + C44497 * C4324) * C44599) *
                C44603) *
               C4503 +
           ((C3442 + C3443 - C3444 - C3445) * C9839 +
            (C13710 + C13711 - C13712 - C13713) * C44603) *
               C44593) *
              C635 +
          (((C12962 * C3290 -
             ((C249 * C767 + C44497 * C963) * C3187 +
              (C249 * C642 + C44497 * C824) * C3289) +
             C13107 * C44599) *
                C9839 +
            ((C249 * C9357 + C44497 * C9523) * C3290 -
             (C13107 * C3187 + C12962 * C3289) +
             (C249 * C9469 + C44497 * C9629) * C44599) *
                C44603) *
               C4503 +
           ((C10564 * C3290 - (C973 * C3187 + C840 * C3289) + C10708 * C44599) *
                C9839 +
            ((C249 * C9358 + C44497 * C9524) * C3290 -
             (C10708 * C3187 + C10564 * C3289) +
             (C249 * C9470 + C44497 * C9630) * C44599) *
                C44603) *
               C44593) *
              C44597) *
         C44407) /
        (p * q * std::sqrt(p + q));
    d2eezx[25] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C10145 * C93 + C9839 * C437 + C10146 * C1232 + C44603 * C1616) *
                 C2283 +
             (C10145 * C101 + C9839 * C442 + C10146 * C1238 + C44603 * C1619) *
                 C44407) *
                C4503 +
            ((C10165 + C10164) * C2283 + (C10167 + C10166) * C44407) * C44593) *
               C44497 * C3187 -
           (((C11495 + C11494) * C44407 + (C11493 + C11492) * C2283) * C44593 +
            ((C10146 * C4104 + C44603 * C4368 + C10145 * C1238 +
              C9839 * C1619) *
                 C44407 +
             (C10146 * C4098 + C44603 * C4365 + C10145 * C1232 +
              C9839 * C1616) *
                 C2283) *
                C4503) *
               C44497 * C44599) *
              C635 +
          ((((C10145 * C2689 + C9839 * C3025 + C10146 * C9357 +
              C44603 * C9681) *
                 C2283 +
             (C10145 * C2695 + C9839 * C3028 + C10146 * C9361 +
              C44603 * C9683) *
                 C44407) *
                C4503 +
            ((C10145 * C2690 + C9839 * C3026 + C10146 * C9358 +
              C44603 * C9682) *
                 C2283 +
             (C10145 * C2696 + C9839 * C3029 + C10146 * C9362 +
              C44603 * C9684) *
                 C44407) *
                C44593) *
               C44497 * C44599 -
           (((C10787 + C10786) * C44407 + (C10785 + C10784) * C2283) * C44593 +
            ((C10146 * C2695 + C44603 * C3028 + C10145 * C648 + C9839 * C1029) *
                 C44407 +
             (C10146 * C2689 + C44603 * C3025 + C10145 * C642 + C9839 * C1026) *
                 C2283) *
                C4503) *
               C44497 * C3187) *
              C44597)) /
        (p * q * std::sqrt(p + q));
    d2eezy[25] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C10145 * C93 + C9839 * C437 + C10146 * C1232 + C44603 * C1616) *
                C705 +
            (C10145 * C152 + C9839 * C503 + C10146 * C1298 + C44603 * C1688) *
                C635 -
            (C10146 * C2689 + C44603 * C3025 + C10145 * C642 + C9839 * C1026) *
                C706 -
            (C10146 * C2751 + C44603 * C3081 + C10145 * C709 + C9839 * C1095) *
                C44597) *
               C4503 +
           ((C10165 + C10164) * C705 + (C10230 + C10231) * C635 -
            (C10785 + C10784) * C706 - (C10858 + C10859) * C44597) *
               C44593) *
              C44497 * C44407 * C3187 +
          (((C10145 * C2689 + C9839 * C3025 + C10146 * C9357 + C44603 * C9681) *
                C706 -
            ((C10146 * C4148 + C44603 * C4409 + C10145 * C1298 +
              C9839 * C1688) *
                 C635 +
             (C10146 * C4098 + C44603 * C4365 + C10145 * C1232 +
              C9839 * C1616) *
                 C705) +
            (C10145 * C2751 + C9839 * C3081 + C10146 * C9415 + C44603 * C9735) *
                C44597) *
               C4503 +
           ((C10145 * C2690 + C9839 * C3026 + C10146 * C9358 + C44603 * C9682) *
                C706 -
            ((C11567 + C11566) * C635 + (C11493 + C11492) * C705) +
            (C10145 * C2752 + C9839 * C3082 + C10146 * C9416 + C44603 * C9736) *
                C44597) *
               C44593) *
              C44497 * C44407 * C44599)) /
        (p * q * std::sqrt(p + q));
    d2eezz[25] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C10145 * C93 + C9839 * C437 + C10146 * C1232 + C44603 * C1616) *
                C3289 +
            (C10145 * C201 + C9839 * C562 + C10146 * C1357 + C44603 * C1749) *
                C3187 -
            (C10146 * C4098 + C44603 * C4365 + C10145 * C1232 + C9839 * C1616) *
                C3290 -
            (C10146 * C4195 + C44603 * C4450 + C10145 * C1357 + C9839 * C1749) *
                C44599) *
               C4503 +
           ((C10165 + C10164) * C3289 + (C10292 + C10293) * C3187 -
            (C11493 + C11492) * C3290 - (C11638 + C11639) * C44599) *
               C44593) *
              C44497 * C635 +
          (((C10145 * C2689 + C9839 * C3025 + C10146 * C9357 + C44603 * C9681) *
                C3290 -
            ((C10146 * C2807 + C44603 * C3134 + C10145 * C767 + C9839 * C1165) *
                 C3187 +
             (C10146 * C2689 + C44603 * C3025 + C10145 * C642 + C9839 * C1026) *
                 C3289) +
            (C10145 * C2807 + C9839 * C3134 + C10146 * C9469 + C44603 * C9787) *
                C44599) *
               C4503 +
           ((C10145 * C2690 + C9839 * C3026 + C10146 * C9358 + C44603 * C9682) *
                C3290 -
            ((C10930 + C10931) * C3187 + (C10785 + C10784) * C3289) +
            (C10145 * C2808 + C9839 * C3135 + C10146 * C9470 + C44603 * C9788) *
                C44599) *
               C44593) *
              C44497 * C44597) *
         C44407) /
        (p * q * std::sqrt(p + q));
    d2eexx[26] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4507 * C93 + C4503 * C98 + C4508 * C94 + C44593 * C99) * C2283 +
            (C4507 * C101 + C4503 * C108 + C4508 * C102 + C44593 * C109) *
                C44407) *
               C44497 * C9839 +
           ((C11014 + C11015) * C2283 + (C11016 + C11017) * C44407) * C44497 *
               C44603) *
              C4095 -
          (((C14576 + C14577) * C44407 + (C14578 + C14579) * C2283) * C44497 *
               C44603 +
           ((C11017 + C11016) * C44407 + (C11015 + C11014) * C2283) * C44497 *
               C9839) *
              C4096 +
          (((C14579 + C14578) * C2283 + (C14577 + C14576) * C44407) * C44497 *
               C9839 +
           ((C4507 * C14559 + C4503 * C14561 + C4508 * C14560 +
             C44593 * C14562) *
                C2283 +
            (C4507 * C14563 + C4503 * C14565 + C4508 * C14564 +
             C44593 * C14566) *
                C44407) *
               C44497 * C44603) *
              C4097) *
         C44449) /
        (p * q * std::sqrt(p + q));
    d2eexy[26] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4507 * C93 + C4503 * C98 + C4508 * C94 + C44593 * C99) * C151 +
            (C4507 * C152 + C4503 * C157 + C4508 * C153 + C44593 * C158) *
                C44449) *
               C44497 * C9839 +
           ((C11014 + C11015) * C151 + (C11096 + C11097) * C44449) * C44497 *
               C44603) *
              C44407 * C4095 -
          (((C14638 + C14639) * C44449 + (C14578 + C14579) * C151) * C44497 *
               C44603 +
           ((C11097 + C11096) * C44449 + (C11015 + C11014) * C151) * C44497 *
               C9839) *
              C44407 * C4096 +
          (((C14579 + C14578) * C151 + (C14639 + C14638) * C44449) * C44497 *
               C9839 +
           ((C4507 * C14559 + C4503 * C14561 + C4508 * C14560 +
             C44593 * C14562) *
                C151 +
            (C4507 * C14629 + C4503 * C14631 + C4508 * C14630 +
             C44593 * C14632) *
                C44449) *
               C44497 * C44603) *
              C44407 * C4097)) /
        (p * q * std::sqrt(p + q));
    d2eexz[26] +=
        (2 * std::pow(Pi, 2.5) *
         (((C4507 * C93 + C4503 * C98 + C4508 * C94 + C44593 * C99) * C4192 +
           (C4507 * C201 + C4503 * C206 + C4508 * C202 + C44593 * C207) *
               C4095 -
           (C11015 + C11014) * C4193 - (C11174 + C11175) * C4096 +
           (C14579 + C14578) * C4194 + (C14698 + C14699) * C4097) *
              C44497 * C9839 +
          ((C11014 + C11015) * C4192 + (C11175 + C11174) * C4095 -
           (C14578 + C14579) * C4193 - (C14699 + C14698) * C4096 +
           (C4507 * C14559 + C4503 * C14561 + C4508 * C14560 +
            C44593 * C14562) *
               C4194 +
           (C4507 * C14689 + C4503 * C14691 + C4508 * C14690 +
            C44593 * C14692) *
               C4097) *
              C44497 * C44603) *
         C44449 * C44407) /
        (p * q * std::sqrt(p + q));
    d2eeyx[26] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C249 * C93 + C44497 * C250) * C2283 +
             (C249 * C101 + C44497 * C255) * C44407) *
                C9839 +
            (C12952 + C12953) * C44603) *
               C4503 +
           ((C273 * C2283 + C274 * C44407) * C9839 +
            (C12954 + C12955) * C44603) *
               C44593) *
              C4095 -
          (((C14754 + C14755) * C44603 + (C12955 + C12954) * C9839) * C44593 +
           ((C14762 + C14763) * C44603 + (C12953 + C12952) * C9839) * C4503) *
              C4096 +
          (((C14763 + C14762) * C9839 +
            ((C249 * C14559 + C44497 * C14749) * C2283 +
             (C249 * C14563 + C44497 * C14751) * C44407) *
                C44603) *
               C4503 +
           ((C14755 + C14754) * C9839 +
            ((C249 * C14560 + C44497 * C14750) * C2283 +
             (C249 * C14564 + C44497 * C14752) * C44407) *
                C44603) *
               C44593) *
              C4097) *
         C44449) /
        (p * q * std::sqrt(p + q));
    d2eeyy[26] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C249 * C93 + C44497 * C250) * C151 +
             (C249 * C152 + C44497 * C316) * C44449) *
                C9839 +
            (C11330 + C11340) * C44603) *
               C4503 +
           ((C322 + C334) * C9839 + C11333 * C44603) * C44593) *
              C44407 * C4095 -
          (((C11341 + C11335) * C44603 + C11334 * C9839) * C44593 +
           ((C14820 + C14818) * C44603 + (C11340 + C11330) * C9839) * C4503) *
              C44407 * C4096 +
          (((C14818 + C14820) * C9839 +
            ((C249 * C14559 + C44497 * C14749) * C151 +
             (C249 * C14629 + C44497 * C14813) * C44449) *
                C44603) *
               C4503 +
           ((C11335 + C11341) * C9839 +
            ((C249 * C14560 + C44497 * C14750) * C151 +
             (C249 * C14630 + C44497 * C14814) * C44449) *
                C44603) *
               C44593) *
              C44407 * C4097)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[26] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C249 * C93 + C44497 * C250) * C4192 +
            (C249 * C201 + C44497 * C376) * C4095 - C11258 * C4193 -
            C11415 * C4096 + C14761 * C4194 + C14875 * C4097) *
               C9839 +
           (C11258 * C4192 + C11415 * C4095 - C14761 * C4193 - C14875 * C4096 +
            (C249 * C14559 + C44497 * C14749) * C4194 +
            (C249 * C14689 + C44497 * C14870) * C4097) *
               C44603) *
              C4503 +
          ((C273 * C4192 + C391 * C4095 - C1430 * C4193 - C1562 * C4096 +
            C11260 * C4194 + C11416 * C4097) *
               C9839 +
           (C1430 * C4192 + C1562 * C4095 - C11260 * C4193 - C11416 * C4096 +
            (C249 * C14560 + C44497 * C14750) * C4194 +
            (C249 * C14690 + C44497 * C14871) * C4097) *
               C44603) *
              C44593) *
         C44449 * C44407) /
        (p * q * std::sqrt(p + q));
    d2eezx[26] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C10145 * C93 + C9839 * C437 + C10146 * C1232 + C44603 * C1616) *
                C2283 +
            (C10145 * C101 + C9839 * C442 + C10146 * C1238 + C44603 * C1619) *
                C44407) *
               C4503 +
           ((C10165 + C10164) * C2283 + (C10167 + C10166) * C44407) * C44593) *
              C44497 * C4095 -
          (((C11495 + C11494) * C44407 + (C11493 + C11492) * C2283) * C44593 +
           ((C10146 * C4104 + C44603 * C4368 + C10145 * C1238 + C9839 * C1619) *
                C44407 +
            (C10146 * C4098 + C44603 * C4365 + C10145 * C1232 + C9839 * C1616) *
                C2283) *
               C4503) *
              C44497 * C4096 +
          (((C10145 * C4098 + C9839 * C4365 + C10146 * C14559 +
             C44603 * C14925) *
                C2283 +
            (C10145 * C4104 + C9839 * C4368 + C10146 * C14563 +
             C44603 * C14927) *
                C44407) *
               C4503 +
           ((C10145 * C4099 + C9839 * C4366 + C10146 * C14560 +
             C44603 * C14926) *
                C2283 +
            (C10145 * C4105 + C9839 * C4369 + C10146 * C14564 +
             C44603 * C14928) *
                C44407) *
               C44593) *
              C44497 * C4097) *
         C44449) /
        (p * q * std::sqrt(p + q));
    d2eezy[26] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C10145 * C93 + C9839 * C437 + C10146 * C1232 + C44603 * C1616) *
                C151 +
            (C10145 * C152 + C9839 * C503 + C10146 * C1298 + C44603 * C1688) *
                C44449) *
               C4503 +
           ((C10165 + C10164) * C151 + (C10230 + C10231) * C44449) * C44593) *
              C44497 * C44407 * C4095 -
          (((C11567 + C11566) * C44449 + (C11493 + C11492) * C151) * C44593 +
           ((C10146 * C4148 + C44603 * C4409 + C10145 * C1298 + C9839 * C1688) *
                C44449 +
            (C10146 * C4098 + C44603 * C4365 + C10145 * C1232 + C9839 * C1616) *
                C151) *
               C4503) *
              C44497 * C44407 * C4096 +
          (((C10145 * C4098 + C9839 * C4365 + C10146 * C14559 +
             C44603 * C14925) *
                C151 +
            (C10145 * C4148 + C9839 * C4409 + C10146 * C14629 +
             C44603 * C14979) *
                C44449) *
               C4503 +
           ((C10145 * C4099 + C9839 * C4366 + C10146 * C14560 +
             C44603 * C14926) *
                C151 +
            (C10145 * C4149 + C9839 * C4410 + C10146 * C14630 +
             C44603 * C14980) *
                C44449) *
               C44593) *
              C44497 * C44407 * C4097)) /
        (p * q * std::sqrt(p + q));
    d2eezz[26] +=
        (2 * std::pow(Pi, 2.5) *
         (((C10145 * C93 + C9839 * C437 + C10146 * C1232 + C44603 * C1616) *
               C4192 +
           (C10145 * C201 + C9839 * C562 + C10146 * C1357 + C44603 * C1749) *
               C4095 -
           (C10146 * C4098 + C44603 * C4365 + C10145 * C1232 + C9839 * C1616) *
               C4193 -
           (C10146 * C4195 + C44603 * C4450 + C10145 * C1357 + C9839 * C1749) *
               C4096 +
           (C10145 * C4098 + C9839 * C4365 + C10146 * C14559 +
            C44603 * C14925) *
               C4194 +
           (C10145 * C4195 + C9839 * C4450 + C10146 * C14689 +
            C44603 * C15031) *
               C4097) *
              C4503 +
          ((C10165 + C10164) * C4192 + (C10292 + C10293) * C4095 -
           (C11493 + C11492) * C4193 - (C11638 + C11639) * C4096 +
           (C10145 * C4099 + C9839 * C4366 + C10146 * C14560 +
            C44603 * C14926) *
               C4194 +
           (C10145 * C4196 + C9839 * C4451 + C10146 * C14690 +
            C44603 * C15032) *
               C4097) *
              C44593) *
         C44497 * C44449 * C44407) /
        (p * q * std::sqrt(p + q));
    d2eexx[27] +=
        (2 * std::pow(Pi, 2.5) *
         (((C15087 * C93 + C15083 * C98 + C15088 * C94 + C44593 * C99) * C90 +
           (C15087 * C101 + C15083 * C108 + C15088 * C102 + C44593 * C109) *
               C80 -
           (C15088 * C95 + C44593 * C100 + C15087 * C94 + C15083 * C99) * C91 -
           (C15088 * C103 + C44593 * C110 + C15087 * C102 + C15083 * C109) *
               C81 +
           (C15087 * C95 + C15083 * C100 + C15088 * C96 + C44593 * C104) * C92 +
           (C15087 * C103 + C15083 * C110 + C15088 * C105 + C44593 * C111) *
               C82) *
              C15085 +
          ((C15087 * C642 + C15083 * C649 + C15088 * C639 + C44593 * C643) *
               C90 +
           (C15087 * C648 + C15083 * C653 + C15088 * C647 + C44593 * C652) *
               C80 -
           (C15088 * C640 + C44593 * C644 + C15087 * C639 + C15083 * C643) *
               C91 -
           (C15088 * C646 + C44593 * C651 + C15087 * C647 + C15083 * C652) *
               C81 +
           (C15087 * C640 + C15083 * C644 + C15088 * C641 + C44593 * C645) *
               C92 +
           (C15087 * C646 + C15083 * C651 + C15088 * C650 + C44593 * C654) *
               C82) *
              C44601) *
         C44512 * C44464 * C44449) /
        (p * q * std::sqrt(p + q));
    d2eexy[27] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C15087 * C93 + C15083 * C98 + C15088 * C94 + C44593 * C99) * C151 +
            (C15087 * C152 + C15083 * C157 + C15088 * C153 + C44593 * C158) *
                C44449) *
               C15085 +
           ((C15087 * C642 + C15083 * C649 + C15088 * C639 + C44593 * C643) *
                C151 +
            (C15087 * C709 + C15083 * C713 + C15088 * C708 + C44593 * C712) *
                C44449) *
               C44601) *
              C44512 * C80 -
          (((C15088 * C707 + C44593 * C711 + C15087 * C708 + C15083 * C712) *
                C44449 +
            (C15088 * C640 + C44593 * C644 + C15087 * C639 + C15083 * C643) *
                C151) *
               C44601 +
           ((C15088 * C154 + C44593 * C159 + C15087 * C153 + C15083 * C158) *
                C44449 +
            (C15088 * C95 + C44593 * C100 + C15087 * C94 + C15083 * C99) *
                C151) *
               C15085) *
              C44512 * C81 +
          (((C15087 * C95 + C15083 * C100 + C15088 * C96 + C44593 * C104) *
                C151 +
            (C15087 * C154 + C15083 * C159 + C15088 * C155 + C44593 * C160) *
                C44449) *
               C15085 +
           ((C15087 * C640 + C15083 * C644 + C15088 * C641 + C44593 * C645) *
                C151 +
            (C15087 * C707 + C15083 * C711 + C15088 * C710 + C44593 * C714) *
                C44449) *
               C44601) *
              C44512 * C82) *
         C44464) /
        (p * q * std::sqrt(p + q));
    d2eexz[27] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C15087 * C93 + C15083 * C98 + C15088 * C94 + C44593 * C99) * C200 +
            (C15087 * C201 + C15083 * C206 + C15088 * C202 + C44593 * C207) *
                C44464) *
               C15085 +
           ((C15087 * C642 + C15083 * C649 + C15088 * C639 + C44593 * C643) *
                C200 +
            (C15087 * C767 + C15083 * C771 + C15088 * C766 + C44593 * C770) *
                C44464) *
               C44601) *
              C44512 * C44449 * C80 -
          (((C15088 * C765 + C44593 * C769 + C15087 * C766 + C15083 * C770) *
                C44464 +
            (C15088 * C640 + C44593 * C644 + C15087 * C639 + C15083 * C643) *
                C200) *
               C44601 +
           ((C15088 * C203 + C44593 * C208 + C15087 * C202 + C15083 * C207) *
                C44464 +
            (C15088 * C95 + C44593 * C100 + C15087 * C94 + C15083 * C99) *
                C200) *
               C15085) *
              C44512 * C44449 * C81 +
          (((C15087 * C95 + C15083 * C100 + C15088 * C96 + C44593 * C104) *
                C200 +
            (C15087 * C203 + C15083 * C208 + C15088 * C204 + C44593 * C209) *
                C44464) *
               C15085 +
           ((C15087 * C640 + C15083 * C644 + C15088 * C641 + C44593 * C645) *
                C200 +
            (C15087 * C765 + C15083 * C769 + C15088 * C768 + C44593 * C772) *
                C44464) *
               C44601) *
              C44512 * C44449 * C82)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[27] +=
        (2 * std::pow(Pi, 2.5) *
         (((C15239 * C93 + C15085 * C250 + C15240 * C642 + C44601 * C824) *
               C90 +
           (C15239 * C101 + C15085 * C255 + C15240 * C648 + C44601 * C827) *
               C80 -
           (C15258 + C15259) * C91 - (C15260 + C15261) * C81 +
           (C15262 + C15263) * C92 + (C15264 + C15265) * C82) *
              C44512 * C15083 +
          ((C15259 + C15258) * C90 + (C15261 + C15260) * C80 -
           (C15263 + C15262) * C91 - (C15265 + C15264) * C81 +
           (C15239 * C96 + C15085 * C253 + C15240 * C641 + C44601 * C826) *
               C92 +
           (C15239 * C105 + C15085 * C258 + C15240 * C650 + C44601 * C830) *
               C82) *
              C44512 * C44593) *
         C44464 * C44449) /
        (p * q * std::sqrt(p + q));
    d2eeyy[27] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C15239 * C93 + C15085 * C250 + C15240 * C642 + C44601 * C824) *
                C151 +
            (C15239 * C152 + C15085 * C316 + C15240 * C709 + C44601 * C893) *
                C44449) *
               C44512 * C15083 +
           ((C15259 + C15258) * C151 + (C15324 + C15325) * C44449) * C44512 *
               C44593) *
              C80 -
          (((C15326 + C15327) * C44449 + (C15263 + C15262) * C151) * C44512 *
               C44593 +
           ((C15325 + C15324) * C44449 + (C15258 + C15259) * C151) * C44512 *
               C15083) *
              C81 +
          (((C15262 + C15263) * C151 + (C15327 + C15326) * C44449) * C44512 *
               C15083 +
           ((C15239 * C96 + C15085 * C253 + C15240 * C641 + C44601 * C826) *
                C151 +
            (C15239 * C155 + C15085 * C319 + C15240 * C710 + C44601 * C896) *
                C44449) *
               C44512 * C44593) *
              C82) *
         C44464) /
        (p * q * std::sqrt(p + q));
    d2eeyz[27] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C15239 * C93 + C15085 * C250 + C15240 * C642 + C44601 * C824) *
                C200 +
            (C15239 * C201 + C15085 * C376 + C15240 * C767 + C44601 * C963) *
                C44464) *
               C44512 * C15083 +
           ((C15259 + C15258) * C200 + (C15386 + C15387) * C44464) * C44512 *
               C44593) *
              C44449 * C80 -
          (((C15388 + C15389) * C44464 + (C15263 + C15262) * C200) * C44512 *
               C44593 +
           ((C15387 + C15386) * C44464 + (C15258 + C15259) * C200) * C44512 *
               C15083) *
              C44449 * C81 +
          (((C15262 + C15263) * C200 + (C15389 + C15388) * C44464) * C44512 *
               C15083 +
           ((C15239 * C96 + C15085 * C253 + C15240 * C641 + C44601 * C826) *
                C200 +
            (C15239 * C204 + C15085 * C379 + C15240 * C768 + C44601 * C964) *
                C44464) *
               C44512 * C44593) *
              C44449 * C82)) /
        (p * q * std::sqrt(p + q));
    d2eezx[27] += (2 * std::pow(Pi, 2.5) *
                   ((((C436 * C93 + C44512 * C437) * C90 +
                      (C436 * C101 + C44512 * C442) * C80 - C460 * C91 -
                      C461 * C81 + C462 * C92 + C463 * C82) *
                         C15083 +
                     (C460 * C90 + C461 * C80 - C462 * C91 - C463 * C81 +
                      C464 * C92 + C465 * C82) *
                         C44593) *
                        C15085 +
                    ((C5512 * C90 + C5513 * C80 - C1042 * C91 - C1043 * C81 +
                      C1044 * C92 + C1045 * C82) *
                         C15083 +
                     (C1042 * C90 + C1043 * C80 - C1044 * C91 - C1045 * C81 +
                      (C436 * C641 + C44512 * C1028) * C92 +
                      (C436 * C650 + C44512 * C1032) * C82) *
                         C44593) *
                        C44601) *
                   C44464 * C44449) /
                  (p * q * std::sqrt(p + q));
    d2eezy[27] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C436 * C93 + C44512 * C437) * C151 +
             (C436 * C152 + C44512 * C503) * C44449) *
                C15083 +
            (C509 + C521) * C44593) *
               C15085 +
           ((C5512 * C151 + C5591 * C44449) * C15083 +
            (C4910 + C4911) * C44593) *
               C44601) *
              C80 -
          (((C4912 + C4913) * C44593 + (C4911 + C4910) * C15083) * C44601 +
           ((C522 + C512) * C44593 + (C521 + C509) * C15083) * C15085) *
              C81 +
          ((C524 * C15083 + (C517 + C523) * C44593) * C15085 +
           ((C4913 + C4912) * C15083 +
            ((C436 * C641 + C44512 * C1028) * C151 +
             (C436 * C710 + C44512 * C1098) * C44449) *
                C44593) *
               C44601) *
              C82) *
         C44464) /
        (p * q * std::sqrt(p + q));
    d2eezz[27] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C436 * C93 + C44512 * C437) * C200 +
             (C436 * C201 + C44512 * C562) * C44464) *
                C15083 +
            (C568 + C580) * C44593) *
               C15085 +
           ((C5660 + C5670) * C15083 + C5663 * C44593) * C44601) *
              C44449 * C80 -
          (((C1176 + C1170) * C44593 + C5667 * C15083) * C44601 +
           ((C581 + C571) * C44593 + (C580 + C568) * C15083) * C15085) *
              C44449 * C81 +
          ((C583 * C15083 + (C576 + C582) * C44593) * C15085 +
           ((C1170 + C1176) * C15083 +
            ((C436 * C641 + C44512 * C1028) * C200 +
             (C436 * C768 + C44512 * C1166) * C44464) *
                C44593) *
               C44601) *
              C44449 * C82)) /
        (p * q * std::sqrt(p + q));
    d2eexx[28] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C15087 * C93 + C15083 * C98 + C15088 * C94 + C44593 * C99) * C637 +
            (C15087 * C101 + C15083 * C108 + C15088 * C102 + C44593 * C109) *
                C633 -
            (C15088 * C95 + C44593 * C100 + C15087 * C94 + C15083 * C99) *
                C638 -
            (C15088 * C103 + C44593 * C110 + C15087 * C102 + C15083 * C109) *
                C44595) *
               C15085 +
           ((C15622 + C15623) * C637 + (C15624 + C15625) * C633 -
            (C15626 + C15627) * C638 - (C15628 + C15629) * C44595) *
               C44601) *
              C44512 * C44464 * C635 +
          (((C15627 + C15626) * C638 -
            ((C15625 + C15624) * C633 + (C15623 + C15622) * C637) +
            (C15629 + C15628) * C44595) *
               C15085 +
           ((C15087 * C2285 + C15083 * C2288 + C15088 * C2286 +
             C44593 * C2289) *
                C638 -
            ((C15088 * C2291 + C44593 * C2294 + C15087 * C2290 +
              C15083 * C2293) *
                 C633 +
             (C15088 * C2285 + C44593 * C2288 + C15087 * C2284 +
              C15083 * C2287) *
                 C637) +
            (C15087 * C2291 + C15083 * C2294 + C15088 * C2292 +
             C44593 * C2295) *
                C44595) *
               C44601) *
              C44512 * C44464 * C44597)) /
        (p * q * std::sqrt(p + q));
    d2eexy[28] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C15087 * C93 + C15083 * C98 + C15088 * C94 + C44593 * C99) * C705 +
            (C15087 * C152 + C15083 * C157 + C15088 * C153 + C44593 * C158) *
                C635 -
            (C15623 + C15622) * C706 - (C15704 + C15705) * C44597) *
               C15085 +
           ((C15622 + C15623) * C705 + (C15705 + C15704) * C635 -
            (C15088 * C2285 + C44593 * C2288 + C15087 * C2284 +
             C15083 * C2287) *
                C706 -
            (C15088 * C2338 + C44593 * C2341 + C15087 * C2337 +
             C15083 * C2340) *
                C44597) *
               C44601) *
              C44512 * C633 +
          (((C15627 + C15626) * C706 -
            ((C15088 * C154 + C44593 * C159 + C15087 * C153 + C15083 * C158) *
                 C635 +
             (C15088 * C95 + C44593 * C100 + C15087 * C94 + C15083 * C99) *
                 C705) +
            (C15706 + C15707) * C44597) *
               C15085 +
           ((C15087 * C2285 + C15083 * C2288 + C15088 * C2286 +
             C44593 * C2289) *
                C706 -
            ((C15707 + C15706) * C635 + (C15626 + C15627) * C705) +
            (C15087 * C2338 + C15083 * C2341 + C15088 * C2339 +
             C44593 * C2342) *
                C44597) *
               C44601) *
              C44512 * C44595) *
         C44464) /
        (p * q * std::sqrt(p + q));
    d2eexz[28] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C15087 * C93 + C15083 * C98 + C15088 * C94 + C44593 * C99) *
                 C200 +
             (C15087 * C201 + C15083 * C206 + C15088 * C202 + C44593 * C207) *
                 C44464) *
                C15085 +
            ((C15622 + C15623) * C200 + (C15782 + C15783) * C44464) * C44601) *
               C44512 * C635 -
           (((C15088 * C2382 + C44593 * C2385 + C15087 * C2381 +
              C15083 * C2384) *
                 C44464 +
             (C15088 * C2285 + C44593 * C2288 + C15087 * C2284 +
              C15083 * C2287) *
                 C200) *
                C44601 +
            ((C15783 + C15782) * C44464 + (C15623 + C15622) * C200) * C15085) *
               C44512 * C44597) *
              C633 +
          ((((C15627 + C15626) * C200 + (C15784 + C15785) * C44464) * C15085 +
            ((C15087 * C2285 + C15083 * C2288 + C15088 * C2286 +
              C44593 * C2289) *
                 C200 +
             (C15087 * C2382 + C15083 * C2385 + C15088 * C2383 +
              C44593 * C2386) *
                 C44464) *
                C44601) *
               C44512 * C44597 -
           (((C15785 + C15784) * C44464 + (C15626 + C15627) * C200) * C44601 +
            ((C15088 * C203 + C44593 * C208 + C15087 * C202 + C15083 * C207) *
                 C44464 +
             (C15088 * C95 + C44593 * C100 + C15087 * C94 + C15083 * C99) *
                 C200) *
                C15085) *
               C44512 * C635) *
              C44595)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[28] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C15239 * C93 + C15085 * C250 + C15240 * C642 + C44601 * C824) *
                C637 +
            (C15239 * C101 + C15085 * C255 + C15240 * C648 + C44601 * C827) *
                C633 -
            (C15258 + C15259) * C638 - (C15260 + C15261) * C44595) *
               C44512 * C15083 +
           ((C15259 + C15258) * C637 + (C15261 + C15260) * C633 -
            (C15263 + C15262) * C638 - (C15265 + C15264) * C44595) *
               C44512 * C44593) *
              C44464 * C635 +
          (((C15860 + C15861) * C638 -
            ((C15240 * C2290 + C44601 * C2428 + C15239 * C648 + C15085 * C827) *
                 C633 +
             (C15240 * C2284 + C44601 * C2425 + C15239 * C642 + C15085 * C824) *
                 C637) +
            (C15862 + C15863) * C44595) *
               C44512 * C15083 +
           ((C15239 * C640 + C15085 * C825 + C15240 * C2286 + C44601 * C2427) *
                C638 -
            ((C15863 + C15862) * C633 + (C15861 + C15860) * C637) +
            (C15239 * C646 + C15085 * C829 + C15240 * C2292 + C44601 * C2430) *
                C44595) *
               C44512 * C44593) *
              C44464 * C44597)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[28] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C15239 * C93 + C15085 * C250 + C15240 * C642 + C44601 * C824) *
                C705 +
            (C15239 * C152 + C15085 * C316 + C15240 * C709 + C44601 * C893) *
                C635 -
            (C15240 * C2284 + C44601 * C2425 + C15239 * C642 + C15085 * C824) *
                C706 -
            (C15240 * C2337 + C44601 * C2469 + C15239 * C709 + C15085 * C893) *
                C44597) *
               C44512 * C15083 +
           ((C15259 + C15258) * C705 + (C15324 + C15325) * C635 -
            (C15861 + C15860) * C706 - (C15934 + C15935) * C44597) *
               C44512 * C44593) *
              C633 +
          (((C15860 + C15861) * C706 -
            ((C15325 + C15324) * C635 + (C15258 + C15259) * C705) +
            (C15935 + C15934) * C44597) *
               C44512 * C15083 +
           ((C15239 * C640 + C15085 * C825 + C15240 * C2286 + C44601 * C2427) *
                C706 -
            ((C15326 + C15327) * C635 + (C15263 + C15262) * C705) +
            (C15239 * C707 + C15085 * C895 + C15240 * C2339 + C44601 * C2471) *
                C44597) *
               C44512 * C44593) *
              C44595) *
         C44464) /
        (p * q * std::sqrt(p + q));
    d2eeyz[28] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C15239 * C93 + C15085 * C250 + C15240 * C642 + C44601 * C824) *
                 C200 +
             (C15239 * C201 + C15085 * C376 + C15240 * C767 + C44601 * C963) *
                 C44464) *
                C44512 * C15083 +
            ((C15259 + C15258) * C200 + (C15386 + C15387) * C44464) * C44512 *
                C44593) *
               C635 -
           (((C16006 + C16007) * C44464 + (C15861 + C15860) * C200) * C44512 *
                C44593 +
            ((C15240 * C2381 + C44601 * C2510 + C15239 * C767 + C15085 * C963) *
                 C44464 +
             (C15240 * C2284 + C44601 * C2425 + C15239 * C642 + C15085 * C824) *
                 C200) *
                C44512 * C15083) *
               C44597) *
              C633 +
          ((((C15860 + C15861) * C200 + (C16007 + C16006) * C44464) * C44512 *
                C15083 +
            ((C15239 * C640 + C15085 * C825 + C15240 * C2286 + C44601 * C2427) *
                 C200 +
             (C15239 * C765 + C15085 * C961 + C15240 * C2383 + C44601 * C2512) *
                 C44464) *
                C44512 * C44593) *
               C44597 -
           (((C15388 + C15389) * C44464 + (C15263 + C15262) * C200) * C44512 *
                C44593 +
            ((C15387 + C15386) * C44464 + (C15258 + C15259) * C200) * C44512 *
                C15083) *
               C635) *
              C44595)) /
        (p * q * std::sqrt(p + q));
    d2eezx[28] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C436 * C93 + C44512 * C437) * C637 +
             (C436 * C101 + C44512 * C442) * C633 - C460 * C638 -
             C461 * C44595) *
                C15083 +
            (C460 * C637 + C461 * C633 - C462 * C638 - C463 * C44595) *
                C44593) *
               C15085 +
           ((C5516 + C5517 - C5502 - C5503) * C15083 +
            (C5504 + C5505 - C5506 - C5507) * C44593) *
               C44601) *
              C44464 * C635 +
          (((C5502 - (C5517 + C5516) + C5503) * C15083 +
            (C5506 - (C5505 + C5504) + C5507) * C44593) *
               C15085 +
           ((C5514 * C638 - (C7326 * C633 + C7327 * C637) + C5515 * C44595) *
                C15083 +
            ((C436 * C2286 + C44512 * C2553) * C638 -
             (C5515 * C633 + C5514 * C637) +
             (C436 * C2292 + C44512 * C2556) * C44595) *
                C44593) *
               C44601) *
              C44464 * C44597)) /
        (p * q * std::sqrt(p + q));
    d2eezy[28] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C436 * C93 + C44512 * C437) * C705 +
             (C436 * C152 + C44512 * C503) * C635 - C5512 * C706 -
             C5591 * C44597) *
                C15083 +
            (C1100 + C1101 - C1102 - C1112) * C44593) *
               C15085 +
           ((C5512 * C705 + C5591 * C635 - C7327 * C706 - C7384 * C44597) *
                C15083 +
            (C5586 + C5587 - C5588 - C5593) * C44593) *
               C44601) *
              C633 +
          (((C1102 - (C1101 + C1100) + C1112) * C15083 +
            (C1107 - (C1106 + C1105) + C1113) * C44593) *
               C15085 +
           ((C5588 - (C5587 + C5586) + C5593) * C15083 +
            ((C436 * C2286 + C44512 * C2553) * C706 -
             (C1111 * C635 + C1044 * C705) +
             (C436 * C2339 + C44512 * C2597) * C44597) *
                C44593) *
               C44601) *
              C44595) *
         C44464) /
        (p * q * std::sqrt(p + q));
    d2eezz[28] +=
        (2 * std::pow(Pi, 2.5) *
         ((((((C436 * C93 + C44512 * C437) * C200 +
              (C436 * C201 + C44512 * C562) * C44464) *
                 C15083 +
             (C568 + C580) * C44593) *
                C15085 +
            ((C5660 + C5670) * C15083 + C5663 * C44593) * C44601) *
               C635 -
           (((C5671 + C5666) * C44593 + (C7441 + C7439) * C15083) * C44601 +
            (C5667 * C44593 + (C5670 + C5660) * C15083) * C15085) *
               C44597) *
              C633 +
          (((C5663 * C15083 + (C1170 + C1176) * C44593) * C15085 +
            ((C5666 + C5671) * C15083 +
             ((C436 * C2286 + C44512 * C2553) * C200 +
              (C436 * C2383 + C44512 * C2638) * C44464) *
                 C44593) *
                C44601) *
               C44597 -
           (((C1176 + C1170) * C44593 + C5667 * C15083) * C44601 +
            ((C581 + C571) * C44593 + (C580 + C568) * C15083) * C15085) *
               C635) *
              C44595)) /
        (p * q * std::sqrt(p + q));
    d2eexx[29] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C15087 * C93 + C15083 * C98 + C15088 * C94 + C44593 * C99) * C637 +
            (C15087 * C101 + C15083 * C108 + C15088 * C102 + C44593 * C109) *
                C633 -
            (C15088 * C95 + C44593 * C100 + C15087 * C94 + C15083 * C99) *
                C638 -
            (C15088 * C103 + C44593 * C110 + C15087 * C102 + C15083 * C109) *
                C44595) *
               C15085 +
           ((C15622 + C15623) * C637 + (C15624 + C15625) * C633 -
            (C15626 + C15627) * C638 - (C15628 + C15629) * C44595) *
               C44601) *
              C44512 * C1227 +
          (((C15087 * C1229 + C15083 * C1233 + C15088 * C1230 +
             C44593 * C1234) *
                C638 -
            ((C15088 * C1237 + C44593 * C1242 + C15087 * C1238 +
              C15083 * C1243) *
                 C633 +
             (C15088 * C1229 + C44593 * C1233 + C15087 * C1232 +
              C15083 * C1239) *
                 C637) +
            (C15087 * C1237 + C15083 * C1242 + C15088 * C1236 +
             C44593 * C1241) *
                C44595) *
               C15085 +
           ((C15087 * C2690 + C15083 * C2693 + C15088 * C2691 +
             C44593 * C2694) *
                C638 -
            ((C15088 * C2696 + C44593 * C2699 + C15087 * C2695 +
              C15083 * C2698) *
                 C633 +
             (C15088 * C2690 + C44593 * C2693 + C15087 * C2689 +
              C15083 * C2692) *
                 C637) +
            (C15087 * C2696 + C15083 * C2699 + C15088 * C2697 +
             C44593 * C2700) *
                C44595) *
               C44601) *
              C44512 * C44599) *
         C44449) /
        (p * q * std::sqrt(p + q));
    d2eexy[29] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C15087 * C93 + C15083 * C98 + C15088 * C94 + C44593 * C99) *
                 C151 +
             (C15087 * C152 + C15083 * C157 + C15088 * C153 + C44593 * C158) *
                 C44449) *
                C15085 +
            ((C15622 + C15623) * C151 + (C15705 + C15704) * C44449) * C44601) *
               C44512 * C633 -
           (((C15707 + C15706) * C44449 + (C15626 + C15627) * C151) * C44601 +
            ((C15088 * C154 + C44593 * C159 + C15087 * C153 + C15083 * C158) *
                 C44449 +
             (C15088 * C95 + C44593 * C100 + C15087 * C94 + C15083 * C99) *
                 C151) *
                C15085) *
               C44512 * C44595) *
              C1227 +
          ((((C15087 * C1229 + C15083 * C1233 + C15088 * C1230 +
              C44593 * C1234) *
                 C151 +
             (C15087 * C1295 + C15083 * C1299 + C15088 * C1296 +
              C44593 * C1300) *
                 C44449) *
                C15085 +
            ((C15087 * C2690 + C15083 * C2693 + C15088 * C2691 +
              C44593 * C2694) *
                 C151 +
             (C15087 * C2752 + C15083 * C2755 + C15088 * C2753 +
              C44593 * C2756) *
                 C44449) *
                C44601) *
               C44512 * C44595 -
           (((C15088 * C2752 + C44593 * C2755 + C15087 * C2751 +
              C15083 * C2754) *
                 C44449 +
             (C15088 * C2690 + C44593 * C2693 + C15087 * C2689 +
              C15083 * C2692) *
                 C151) *
                C44601 +
            ((C15088 * C1295 + C44593 * C1299 + C15087 * C1298 +
              C15083 * C1302) *
                 C44449 +
             (C15088 * C1229 + C44593 * C1233 + C15087 * C1232 +
              C15083 * C1239) *
                 C151) *
                C15085) *
               C44512 * C633) *
              C44599)) /
        (p * q * std::sqrt(p + q));
    d2eexz[29] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C15087 * C93 + C15083 * C98 + C15088 * C94 + C44593 * C99) *
                C1353 +
            (C15087 * C201 + C15083 * C206 + C15088 * C202 + C44593 * C207) *
                C1227 -
            (C15088 * C1229 + C44593 * C1233 + C15087 * C1232 +
             C15083 * C1239) *
                C1354 -
            (C15088 * C1356 + C44593 * C1360 + C15087 * C1357 +
             C15083 * C1361) *
                C44599) *
               C15085 +
           ((C15622 + C15623) * C1353 + (C15782 + C15783) * C1227 -
            (C15088 * C2690 + C44593 * C2693 + C15087 * C2689 +
             C15083 * C2692) *
                C1354 -
            (C15088 * C2808 + C44593 * C2811 + C15087 * C2807 +
             C15083 * C2810) *
                C44599) *
               C44601) *
              C44512 * C44449 * C633 +
          (((C15087 * C1229 + C15083 * C1233 + C15088 * C1230 +
             C44593 * C1234) *
                C1354 -
            ((C15088 * C203 + C44593 * C208 + C15087 * C202 + C15083 * C207) *
                 C1227 +
             (C15088 * C95 + C44593 * C100 + C15087 * C94 + C15083 * C99) *
                 C1353) +
            (C15087 * C1356 + C15083 * C1360 + C15088 * C1355 +
             C44593 * C1359) *
                C44599) *
               C15085 +
           ((C15087 * C2690 + C15083 * C2693 + C15088 * C2691 +
             C44593 * C2694) *
                C1354 -
            ((C15785 + C15784) * C1227 + (C15626 + C15627) * C1353) +
            (C15087 * C2808 + C15083 * C2811 + C15088 * C2809 +
             C44593 * C2812) *
                C44599) *
               C44601) *
              C44512 * C44449 * C44595)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[29] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C15239 * C93 + C15085 * C250 + C15240 * C642 + C44601 * C824) *
                C637 +
            (C15239 * C101 + C15085 * C255 + C15240 * C648 + C44601 * C827) *
                C633 -
            (C15258 + C15259) * C638 - (C15260 + C15261) * C44595) *
               C44512 * C15083 +
           ((C15259 + C15258) * C637 + (C15261 + C15260) * C633 -
            (C15263 + C15262) * C638 - (C15265 + C15264) * C44595) *
               C44512 * C44593) *
              C1227 +
          (((C16478 + C16479) * C638 -
            ((C15240 * C2695 + C44601 * C2866 + C15239 * C1238 +
              C15085 * C1417) *
                 C633 +
             (C15240 * C2689 + C44601 * C2863 + C15239 * C1232 +
              C15085 * C1414) *
                 C637) +
            (C16480 + C16481) * C44595) *
               C44512 * C15083 +
           ((C15239 * C1230 + C15085 * C1415 + C15240 * C2691 +
             C44601 * C2865) *
                C638 -
            ((C16481 + C16480) * C633 + (C16479 + C16478) * C637) +
            (C15239 * C1236 + C15085 * C1419 + C15240 * C2697 +
             C44601 * C2868) *
                C44595) *
               C44512 * C44593) *
              C44599) *
         C44449) /
        (p * q * std::sqrt(p + q));
    d2eeyy[29] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C15239 * C93 + C15085 * C250 + C15240 * C642 + C44601 * C824) *
                 C151 +
             (C15239 * C152 + C15085 * C316 + C15240 * C709 + C44601 * C893) *
                 C44449) *
                C44512 * C15083 +
            ((C15259 + C15258) * C151 + (C15324 + C15325) * C44449) * C44512 *
                C44593) *
               C633 -
           (((C15326 + C15327) * C44449 + (C15263 + C15262) * C151) * C44512 *
                C44593 +
            ((C15325 + C15324) * C44449 + (C15258 + C15259) * C151) * C44512 *
                C15083) *
               C44595) *
              C1227 +
          ((((C16478 + C16479) * C151 + (C16552 + C16553) * C44449) * C44512 *
                C15083 +
            ((C15239 * C1230 + C15085 * C1415 + C15240 * C2691 +
              C44601 * C2865) *
                 C151 +
             (C15239 * C1296 + C15085 * C1484 + C15240 * C2753 +
              C44601 * C2921) *
                 C44449) *
                C44512 * C44593) *
               C44595 -
           (((C16553 + C16552) * C44449 + (C16479 + C16478) * C151) * C44512 *
                C44593 +
            ((C15240 * C2751 + C44601 * C2919 + C15239 * C1298 +
              C15085 * C1486) *
                 C44449 +
             (C15240 * C2689 + C44601 * C2863 + C15239 * C1232 +
              C15085 * C1414) *
                 C151) *
                C44512 * C15083) *
               C633) *
              C44599)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[29] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C15239 * C93 + C15085 * C250 + C15240 * C642 + C44601 * C824) *
                C1353 +
            (C15239 * C201 + C15085 * C376 + C15240 * C767 + C44601 * C963) *
                C1227 -
            (C15240 * C2689 + C44601 * C2863 + C15239 * C1232 +
             C15085 * C1414) *
                C1354 -
            (C15240 * C2807 + C44601 * C2972 + C15239 * C1357 +
             C15085 * C1547) *
                C44599) *
               C44512 * C15083 +
           ((C15259 + C15258) * C1353 + (C15386 + C15387) * C1227 -
            (C16479 + C16478) * C1354 - (C16624 + C16625) * C44599) *
               C44512 * C44593) *
              C44449 * C633 +
          (((C16478 + C16479) * C1354 -
            ((C15387 + C15386) * C1227 + (C15258 + C15259) * C1353) +
            (C16625 + C16624) * C44599) *
               C44512 * C15083 +
           ((C15239 * C1230 + C15085 * C1415 + C15240 * C2691 +
             C44601 * C2865) *
                C1354 -
            ((C15388 + C15389) * C1227 + (C15263 + C15262) * C1353) +
            (C15239 * C1355 + C15085 * C1549 + C15240 * C2809 +
             C44601 * C2974) *
                C44599) *
               C44512 * C44593) *
              C44449 * C44595)) /
        (p * q * std::sqrt(p + q));
    d2eezx[29] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C436 * C93 + C44512 * C437) * C637 +
             (C436 * C101 + C44512 * C442) * C633 - C460 * C638 -
             C461 * C44595) *
                C15083 +
            (C460 * C637 + C461 * C633 - C462 * C638 - C463 * C44595) *
                C44593) *
               C15085 +
           ((C5516 + C5517 - C5502 - C5503) * C15083 +
            (C5504 + C5505 - C5506 - C5507) * C44593) *
               C44601) *
              C1227 +
          (((C1632 * C638 -
             ((C436 * C1238 + C44512 * C1619) * C633 +
              (C436 * C1232 + C44512 * C1616) * C637) +
             C1633 * C44595) *
                C15083 +
            (C1634 * C638 - (C1633 * C633 + C1632 * C637) + C1635 * C44595) *
                C44593) *
               C15085 +
           ((C6162 * C638 - (C7962 * C633 + C7963 * C637) + C6163 * C44595) *
                C15083 +
            ((C436 * C2691 + C44512 * C3027) * C638 -
             (C6163 * C633 + C6162 * C637) +
             (C436 * C2697 + C44512 * C3030) * C44595) *
                C44593) *
               C44601) *
              C44599) *
         C44449) /
        (p * q * std::sqrt(p + q));
    d2eezy[29] +=
        (2 * std::pow(Pi, 2.5) *
         ((((((C436 * C93 + C44512 * C437) * C151 +
              (C436 * C152 + C44512 * C503) * C44449) *
                 C15083 +
             (C509 + C521) * C44593) *
                C15085 +
            ((C5512 * C151 + C5591 * C44449) * C15083 +
             (C4910 + C4911) * C44593) *
                C44601) *
               C633 -
           (((C4912 + C4913) * C44593 + (C4911 + C4910) * C15083) * C44601 +
            ((C522 + C512) * C44593 + (C521 + C509) * C15083) * C15085) *
               C44595) *
              C1227 +
          ((((C1690 + C1698) * C15083 + (C1693 + C1699) * C44593) * C15085 +
            ((C6230 + C6234) * C15083 +
             ((C436 * C2691 + C44512 * C3027) * C151 +
              (C436 * C2753 + C44512 * C3083) * C44449) *
                 C44593) *
                C44601) *
               C44595 -
           (((C6234 + C6230) * C44593 +
             (C8036 * C44449 + C7963 * C151) * C15083) *
                C44601 +
            ((C1698 + C1690) * C44593 +
             ((C436 * C1298 + C44512 * C1688) * C44449 +
              (C436 * C1232 + C44512 * C1616) * C151) *
                 C15083) *
                C15085) *
               C633) *
              C44599)) /
        (p * q * std::sqrt(p + q));
    d2eezz[29] += (2 * std::pow(Pi, 2.5) *
                   (((((C436 * C93 + C44512 * C437) * C1353 +
                       (C436 * C201 + C44512 * C562) * C1227 -
                       (C436 * C1232 + C44512 * C1616) * C1354 -
                       (C436 * C1357 + C44512 * C1749) * C44599) *
                          C15083 +
                      (C1754 + C1755 - C1756 - C1766) * C44593) *
                         C15085 +
                     ((C8105 + C8106 - C8107 - C8111) * C15083 +
                      (C6301 + C6302 - C6303 - C6307) * C44593) *
                         C44601) *
                        C44449 * C633 +
                    (((C1756 - (C1755 + C1754) + C1766) * C15083 +
                      (C1761 - (C1760 + C1759) + C1767) * C44593) *
                         C15085 +
                     ((C6303 - (C6302 + C6301) + C6307) * C15083 +
                      ((C436 * C2691 + C44512 * C3027) * C1354 -
                       (C1174 * C1227 + C1044 * C1353) +
                       (C436 * C2809 + C44512 * C3136) * C44599) *
                          C44593) *
                         C44601) *
                        C44449 * C44595)) /
                  (p * q * std::sqrt(p + q));
    d2eexx[30] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C15087 * C93 + C15083 * C98 + C15088 * C94 + C44593 * C99) *
                C1821 +
            (C15087 * C101 + C15083 * C108 + C15088 * C102 + C44593 * C109) *
                C1817 -
            (C15088 * C95 + C44593 * C100 + C15087 * C94 + C15083 * C99) *
                C1822 -
            (C15088 * C103 + C44593 * C110 + C15087 * C102 + C15083 * C109) *
                C44595) *
               C15085 +
           ((C15622 + C15623) * C1821 + (C15624 + C15625) * C1817 -
            (C15626 + C15627) * C1822 - (C15628 + C15629) * C44595) *
               C44601) *
              C44512 * C44464 * C1819 +
          (((C15627 + C15626) * C1822 -
            ((C15625 + C15624) * C1817 + (C15623 + C15622) * C1821) +
            (C15629 + C15628) * C44595) *
               C15085 +
           ((C15087 * C2285 + C15083 * C2288 + C15088 * C2286 +
             C44593 * C2289) *
                C1822 -
            ((C15088 * C2291 + C44593 * C2294 + C15087 * C2290 +
              C15083 * C2293) *
                 C1817 +
             (C15088 * C2285 + C44593 * C2288 + C15087 * C2284 +
              C15083 * C2287) *
                 C1821) +
            (C15087 * C2291 + C15083 * C2294 + C15088 * C2292 +
             C44593 * C2295) *
                C44595) *
               C44601) *
              C44512 * C44464 * C44597)) /
        (p * q * std::sqrt(p + q));
    d2eexy[30] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C15087 * C93 + C15083 * C98 + C15088 * C94 + C44593 * C99) *
                C1873 +
            (C15087 * C152 + C15083 * C157 + C15088 * C153 + C44593 * C158) *
                C1819 -
            (C15623 + C15622) * C1874 - (C15704 + C15705) * C44597) *
               C15085 +
           ((C15622 + C15623) * C1873 + (C15705 + C15704) * C1819 -
            (C15088 * C2285 + C44593 * C2288 + C15087 * C2284 +
             C15083 * C2287) *
                C1874 -
            (C15088 * C2338 + C44593 * C2341 + C15087 * C2337 +
             C15083 * C2340) *
                C44597) *
               C44601) *
              C44512 * C1817 +
          (((C15627 + C15626) * C1874 -
            ((C15088 * C154 + C44593 * C159 + C15087 * C153 + C15083 * C158) *
                 C1819 +
             (C15088 * C95 + C44593 * C100 + C15087 * C94 + C15083 * C99) *
                 C1873) +
            (C15706 + C15707) * C44597) *
               C15085 +
           ((C15087 * C2285 + C15083 * C2288 + C15088 * C2286 +
             C44593 * C2289) *
                C1874 -
            ((C15707 + C15706) * C1819 + (C15626 + C15627) * C1873) +
            (C15087 * C2338 + C15083 * C2341 + C15088 * C2339 +
             C44593 * C2342) *
                C44597) *
               C44601) *
              C44512 * C44595) *
         C44464) /
        (p * q * std::sqrt(p + q));
    d2eexz[30] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C15087 * C93 + C15083 * C98 + C15088 * C94 + C44593 * C99) *
                 C200 +
             (C15087 * C201 + C15083 * C206 + C15088 * C202 + C44593 * C207) *
                 C44464) *
                C15085 +
            ((C15622 + C15623) * C200 + (C15782 + C15783) * C44464) * C44601) *
               C44512 * C1819 -
           (((C15088 * C2382 + C44593 * C2385 + C15087 * C2381 +
              C15083 * C2384) *
                 C44464 +
             (C15088 * C2285 + C44593 * C2288 + C15087 * C2284 +
              C15083 * C2287) *
                 C200) *
                C44601 +
            ((C15783 + C15782) * C44464 + (C15623 + C15622) * C200) * C15085) *
               C44512 * C44597) *
              C1817 +
          ((((C15627 + C15626) * C200 + (C15784 + C15785) * C44464) * C15085 +
            ((C15087 * C2285 + C15083 * C2288 + C15088 * C2286 +
              C44593 * C2289) *
                 C200 +
             (C15087 * C2382 + C15083 * C2385 + C15088 * C2383 +
              C44593 * C2386) *
                 C44464) *
                C44601) *
               C44512 * C44597 -
           (((C15785 + C15784) * C44464 + (C15626 + C15627) * C200) * C44601 +
            ((C15088 * C203 + C44593 * C208 + C15087 * C202 + C15083 * C207) *
                 C44464 +
             (C15088 * C95 + C44593 * C100 + C15087 * C94 + C15083 * C99) *
                 C200) *
                C15085) *
               C44512 * C1819) *
              C44595)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[30] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C15239 * C93 + C15085 * C250 + C15240 * C642 + C44601 * C824) *
                C1821 +
            (C15239 * C101 + C15085 * C255 + C15240 * C648 + C44601 * C827) *
                C1817 -
            (C15258 + C15259) * C1822 - (C15260 + C15261) * C44595) *
               C44512 * C15083 +
           ((C15259 + C15258) * C1821 + (C15261 + C15260) * C1817 -
            (C15263 + C15262) * C1822 - (C15265 + C15264) * C44595) *
               C44512 * C44593) *
              C44464 * C1819 +
          (((C15860 + C15861) * C1822 -
            ((C15240 * C2290 + C44601 * C2428 + C15239 * C648 + C15085 * C827) *
                 C1817 +
             (C15240 * C2284 + C44601 * C2425 + C15239 * C642 + C15085 * C824) *
                 C1821) +
            (C15862 + C15863) * C44595) *
               C44512 * C15083 +
           ((C15239 * C640 + C15085 * C825 + C15240 * C2286 + C44601 * C2427) *
                C1822 -
            ((C15863 + C15862) * C1817 + (C15861 + C15860) * C1821) +
            (C15239 * C646 + C15085 * C829 + C15240 * C2292 + C44601 * C2430) *
                C44595) *
               C44512 * C44593) *
              C44464 * C44597)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[30] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C15239 * C93 + C15085 * C250 + C15240 * C642 + C44601 * C824) *
                C1873 +
            (C15239 * C152 + C15085 * C316 + C15240 * C709 + C44601 * C893) *
                C1819 -
            (C15240 * C2284 + C44601 * C2425 + C15239 * C642 + C15085 * C824) *
                C1874 -
            (C15240 * C2337 + C44601 * C2469 + C15239 * C709 + C15085 * C893) *
                C44597) *
               C44512 * C15083 +
           ((C15259 + C15258) * C1873 + (C15324 + C15325) * C1819 -
            (C15861 + C15860) * C1874 - (C15934 + C15935) * C44597) *
               C44512 * C44593) *
              C1817 +
          (((C15860 + C15861) * C1874 -
            ((C15325 + C15324) * C1819 + (C15258 + C15259) * C1873) +
            (C15935 + C15934) * C44597) *
               C44512 * C15083 +
           ((C15239 * C640 + C15085 * C825 + C15240 * C2286 + C44601 * C2427) *
                C1874 -
            ((C15326 + C15327) * C1819 + (C15263 + C15262) * C1873) +
            (C15239 * C707 + C15085 * C895 + C15240 * C2339 + C44601 * C2471) *
                C44597) *
               C44512 * C44593) *
              C44595) *
         C44464) /
        (p * q * std::sqrt(p + q));
    d2eeyz[30] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C15239 * C93 + C15085 * C250 + C15240 * C642 + C44601 * C824) *
                 C200 +
             (C15239 * C201 + C15085 * C376 + C15240 * C767 + C44601 * C963) *
                 C44464) *
                C44512 * C15083 +
            ((C15259 + C15258) * C200 + (C15386 + C15387) * C44464) * C44512 *
                C44593) *
               C1819 -
           (((C16006 + C16007) * C44464 + (C15861 + C15860) * C200) * C44512 *
                C44593 +
            ((C15240 * C2381 + C44601 * C2510 + C15239 * C767 + C15085 * C963) *
                 C44464 +
             (C15240 * C2284 + C44601 * C2425 + C15239 * C642 + C15085 * C824) *
                 C200) *
                C44512 * C15083) *
               C44597) *
              C1817 +
          ((((C15860 + C15861) * C200 + (C16007 + C16006) * C44464) * C44512 *
                C15083 +
            ((C15239 * C640 + C15085 * C825 + C15240 * C2286 + C44601 * C2427) *
                 C200 +
             (C15239 * C765 + C15085 * C961 + C15240 * C2383 + C44601 * C2512) *
                 C44464) *
                C44512 * C44593) *
               C44597 -
           (((C15388 + C15389) * C44464 + (C15263 + C15262) * C200) * C44512 *
                C44593 +
            ((C15387 + C15386) * C44464 + (C15258 + C15259) * C200) * C44512 *
                C15083) *
               C1819) *
              C44595)) /
        (p * q * std::sqrt(p + q));
    d2eezx[30] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C436 * C93 + C44512 * C437) * C1821 +
             (C436 * C101 + C44512 * C442) * C1817 - C460 * C1822 -
             C461 * C44595) *
                C15083 +
            (C460 * C1821 + C461 * C1817 - C462 * C1822 - C463 * C44595) *
                C44593) *
               C15085 +
           ((C6770 + C6771 - C6772 - C6773) * C15083 +
            (C6774 + C6775 - C6776 - C6777) * C44593) *
               C44601) *
              C44464 * C1819 +
          (((C6772 - (C6771 + C6770) + C6773) * C15083 +
            (C6776 - (C6775 + C6774) + C6777) * C44593) *
               C15085 +
           ((C5514 * C1822 - (C7326 * C1817 + C7327 * C1821) + C5515 * C44595) *
                C15083 +
            ((C436 * C2286 + C44512 * C2553) * C1822 -
             (C5515 * C1817 + C5514 * C1821) +
             (C436 * C2292 + C44512 * C2556) * C44595) *
                C44593) *
               C44601) *
              C44464 * C44597)) /
        (p * q * std::sqrt(p + q));
    d2eezy[30] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C436 * C93 + C44512 * C437) * C1873 +
             (C436 * C152 + C44512 * C503) * C1819 - C5512 * C1874 -
             C5591 * C44597) *
                C15083 +
            (C2184 + C2185 - C2186 - C2187) * C44593) *
               C15085 +
           ((C5512 * C1873 + C5591 * C1819 - C7327 * C1874 - C7384 * C44597) *
                C15083 +
            (C6844 + C6845 - C6846 - C6847) * C44593) *
               C44601) *
              C1817 +
          (((C2186 - (C2185 + C2184) + C2187) * C15083 +
            (C2190 - (C2189 + C2188) + C2191) * C44593) *
               C15085 +
           ((C6846 - (C6845 + C6844) + C6847) * C15083 +
            ((C436 * C2286 + C44512 * C2553) * C1874 -
             (C1111 * C1819 + C1044 * C1873) +
             (C436 * C2339 + C44512 * C2597) * C44597) *
                C44593) *
               C44601) *
              C44595) *
         C44464) /
        (p * q * std::sqrt(p + q));
    d2eezz[30] +=
        (2 * std::pow(Pi, 2.5) *
         ((((((C436 * C93 + C44512 * C437) * C200 +
              (C436 * C201 + C44512 * C562) * C44464) *
                 C15083 +
             (C568 + C580) * C44593) *
                C15085 +
            ((C5660 + C5670) * C15083 + C5663 * C44593) * C44601) *
               C1819 -
           (((C5671 + C5666) * C44593 + (C7441 + C7439) * C15083) * C44601 +
            (C5667 * C44593 + (C5670 + C5660) * C15083) * C15085) *
               C44597) *
              C1817 +
          (((C5663 * C15083 + (C1170 + C1176) * C44593) * C15085 +
            ((C5666 + C5671) * C15083 +
             ((C436 * C2286 + C44512 * C2553) * C200 +
              (C436 * C2383 + C44512 * C2638) * C44464) *
                 C44593) *
                C44601) *
               C44597 -
           (((C1176 + C1170) * C44593 + C5667 * C15083) * C44601 +
            ((C581 + C571) * C44593 + (C580 + C568) * C15083) * C15085) *
               C1819) *
              C44595)) /
        (p * q * std::sqrt(p + q));
    d2eexx[31] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C15087 * C93 + C15083 * C98 + C15088 * C94 + C44593 * C99) *
                C2283 +
            (C15087 * C101 + C15083 * C108 + C15088 * C102 + C44593 * C109) *
                C44407) *
               C15085 +
           ((C15622 + C15623) * C2283 + (C15624 + C15625) * C44407) * C44601) *
              C44512 * C44464 * C2280 -
          (((C17476 + C17477) * C44407 + (C17478 + C17479) * C2283) * C44601 +
           ((C15625 + C15624) * C44407 + (C15623 + C15622) * C2283) * C15085) *
              C44512 * C44464 * C2281 +
          (((C17479 + C17478) * C2283 + (C17477 + C17476) * C44407) * C15085 +
           ((C15087 * C6963 + C15083 * C6965 + C15088 * C6964 +
             C44593 * C6966) *
                C2283 +
            (C15087 * C6967 + C15083 * C6969 + C15088 * C6968 +
             C44593 * C6970) *
                C44407) *
               C44601) *
              C44512 * C44464 * C2282)) /
        (p * q * std::sqrt(p + q));
    d2eexy[31] +=
        (2 * std::pow(Pi, 2.5) *
         (((C15087 * C93 + C15083 * C98 + C15088 * C94 + C44593 * C99) * C2334 +
           (C15087 * C152 + C15083 * C157 + C15088 * C153 + C44593 * C158) *
               C2280 -
           (C15623 + C15622) * C2335 - (C15704 + C15705) * C2281 +
           (C17479 + C17478) * C2336 + (C17534 + C17535) * C2282) *
              C15085 +
          ((C15622 + C15623) * C2334 + (C15705 + C15704) * C2280 -
           (C17478 + C17479) * C2335 - (C17535 + C17534) * C2281 +
           (C15087 * C6963 + C15083 * C6965 + C15088 * C6964 + C44593 * C6966) *
               C2336 +
           (C15087 * C7033 + C15083 * C7035 + C15088 * C7034 + C44593 * C7036) *
               C2282) *
              C44601) *
         C44512 * C44407 * C44464) /
        (p * q * std::sqrt(p + q));
    d2eexz[31] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C15087 * C93 + C15083 * C98 + C15088 * C94 + C44593 * C99) * C200 +
            (C15087 * C201 + C15083 * C206 + C15088 * C202 + C44593 * C207) *
                C44464) *
               C15085 +
           ((C15622 + C15623) * C200 + (C15782 + C15783) * C44464) * C44601) *
              C44512 * C2280 -
          (((C17590 + C17591) * C44464 + (C17478 + C17479) * C200) * C44601 +
           ((C15783 + C15782) * C44464 + (C15623 + C15622) * C200) * C15085) *
              C44512 * C2281 +
          (((C17479 + C17478) * C200 + (C17591 + C17590) * C44464) * C15085 +
           ((C15087 * C6963 + C15083 * C6965 + C15088 * C6964 +
             C44593 * C6966) *
                C200 +
            (C15087 * C7093 + C15083 * C7095 + C15088 * C7094 +
             C44593 * C7096) *
                C44464) *
               C44601) *
              C44512 * C2282) *
         C44407) /
        (p * q * std::sqrt(p + q));
    d2eeyx[31] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C15239 * C93 + C15085 * C250 + C15240 * C642 + C44601 * C824) *
                C2283 +
            (C15239 * C101 + C15085 * C255 + C15240 * C648 + C44601 * C827) *
                C44407) *
               C44512 * C15083 +
           ((C15259 + C15258) * C2283 + (C15261 + C15260) * C44407) * C44512 *
               C44593) *
              C44464 * C2280 -
          (((C15863 + C15862) * C44407 + (C15861 + C15860) * C2283) * C44512 *
               C44593 +
           ((C15240 * C2290 + C44601 * C2428 + C15239 * C648 + C15085 * C827) *
                C44407 +
            (C15240 * C2284 + C44601 * C2425 + C15239 * C642 + C15085 * C824) *
                C2283) *
               C44512 * C15083) *
              C44464 * C2281 +
          (((C15239 * C2284 + C15085 * C2425 + C15240 * C6963 +
             C44601 * C7153) *
                C2283 +
            (C15239 * C2290 + C15085 * C2428 + C15240 * C6967 +
             C44601 * C7155) *
                C44407) *
               C44512 * C15083 +
           ((C15239 * C2285 + C15085 * C2426 + C15240 * C6964 +
             C44601 * C7154) *
                C2283 +
            (C15239 * C2291 + C15085 * C2429 + C15240 * C6968 +
             C44601 * C7156) *
                C44407) *
               C44512 * C44593) *
              C44464 * C2282)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[31] +=
        (2 * std::pow(Pi, 2.5) *
         (((C15239 * C93 + C15085 * C250 + C15240 * C642 + C44601 * C824) *
               C2334 +
           (C15239 * C152 + C15085 * C316 + C15240 * C709 + C44601 * C893) *
               C2280 -
           (C15240 * C2284 + C44601 * C2425 + C15239 * C642 + C15085 * C824) *
               C2335 -
           (C15240 * C2337 + C44601 * C2469 + C15239 * C709 + C15085 * C893) *
               C2281 +
           (C15239 * C2284 + C15085 * C2425 + C15240 * C6963 + C44601 * C7153) *
               C2336 +
           (C15239 * C2337 + C15085 * C2469 + C15240 * C7033 + C44601 * C7207) *
               C2282) *
              C44512 * C15083 +
          ((C15259 + C15258) * C2334 + (C15324 + C15325) * C2280 -
           (C15861 + C15860) * C2335 - (C15934 + C15935) * C2281 +
           (C15239 * C2285 + C15085 * C2426 + C15240 * C6964 + C44601 * C7154) *
               C2336 +
           (C15239 * C2338 + C15085 * C2470 + C15240 * C7034 + C44601 * C7208) *
               C2282) *
              C44512 * C44593) *
         C44407 * C44464) /
        (p * q * std::sqrt(p + q));
    d2eeyz[31] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C15239 * C93 + C15085 * C250 + C15240 * C642 + C44601 * C824) *
                C200 +
            (C15239 * C201 + C15085 * C376 + C15240 * C767 + C44601 * C963) *
                C44464) *
               C44512 * C15083 +
           ((C15259 + C15258) * C200 + (C15386 + C15387) * C44464) * C44512 *
               C44593) *
              C2280 -
          (((C16006 + C16007) * C44464 + (C15861 + C15860) * C200) * C44512 *
               C44593 +
           ((C15240 * C2381 + C44601 * C2510 + C15239 * C767 + C15085 * C963) *
                C44464 +
            (C15240 * C2284 + C44601 * C2425 + C15239 * C642 + C15085 * C824) *
                C200) *
               C44512 * C15083) *
              C2281 +
          (((C15239 * C2284 + C15085 * C2425 + C15240 * C6963 +
             C44601 * C7153) *
                C200 +
            (C15239 * C2381 + C15085 * C2510 + C15240 * C7093 +
             C44601 * C7259) *
                C44464) *
               C44512 * C15083 +
           ((C15239 * C2285 + C15085 * C2426 + C15240 * C6964 +
             C44601 * C7154) *
                C200 +
            (C15239 * C2382 + C15085 * C2511 + C15240 * C7094 +
             C44601 * C7260) *
                C44464) *
               C44512 * C44593) *
              C2282) *
         C44407) /
        (p * q * std::sqrt(p + q));
    d2eezx[31] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C436 * C93 + C44512 * C437) * C2283 +
             (C436 * C101 + C44512 * C442) * C44407) *
                C15083 +
            (C460 * C2283 + C461 * C44407) * C44593) *
               C15085 +
           ((C7316 + C7317) * C15083 + (C7318 + C7319) * C44593) * C44601) *
              C44464 * C2280 -
          (((C7320 + C7321) * C44593 + (C7328 + C7329) * C15083) * C44601 +
           ((C7319 + C7318) * C44593 + (C7317 + C7316) * C15083) * C15085) *
              C44464 * C2281 +
          (((C7329 + C7328) * C15083 + (C7321 + C7320) * C44593) * C15085 +
           (((C436 * C6963 + C44512 * C7311) * C2283 +
             (C436 * C6967 + C44512 * C7313) * C44407) *
                C15083 +
            ((C436 * C6964 + C44512 * C7312) * C2283 +
             (C436 * C6968 + C44512 * C7314) * C44407) *
                C44593) *
               C44601) *
              C44464 * C2282)) /
        (p * q * std::sqrt(p + q));
    d2eezy[31] += (2 * std::pow(Pi, 2.5) *
                   ((((C436 * C93 + C44512 * C437) * C2334 +
                      (C436 * C152 + C44512 * C503) * C2280 - C5512 * C2335 -
                      C5591 * C2281 + C7327 * C2336 + C7384 * C2282) *
                         C15083 +
                     (C460 * C2334 + C518 * C2280 - C1042 * C2335 -
                      C1110 * C2281 + C5514 * C2336 + C5592 * C2282) *
                         C44593) *
                        C15085 +
                    ((C5512 * C2334 + C5591 * C2280 - C7327 * C2335 -
                      C7384 * C2281 + (C436 * C6963 + C44512 * C7311) * C2336 +
                      (C436 * C7033 + C44512 * C7379) * C2282) *
                         C15083 +
                     (C1042 * C2334 + C1110 * C2280 - C5514 * C2335 -
                      C5592 * C2281 + (C436 * C6964 + C44512 * C7312) * C2336 +
                      (C436 * C7034 + C44512 * C7380) * C2282) *
                         C44593) *
                        C44601) *
                   C44407 * C44464) /
                  (p * q * std::sqrt(p + q));
    d2eezz[31] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C436 * C93 + C44512 * C437) * C200 +
             (C436 * C201 + C44512 * C562) * C44464) *
                C15083 +
            (C568 + C580) * C44593) *
               C15085 +
           ((C5660 + C5670) * C15083 + C5663 * C44593) * C44601) *
              C2280 -
          (((C5671 + C5666) * C44593 + (C7441 + C7439) * C15083) * C44601 +
           (C5667 * C44593 + (C5670 + C5660) * C15083) * C15085) *
              C2281 +
          (((C7439 + C7441) * C15083 + (C5666 + C5671) * C44593) * C15085 +
           (((C436 * C6963 + C44512 * C7311) * C200 +
             (C436 * C7093 + C44512 * C7434) * C44464) *
                C15083 +
            ((C436 * C6964 + C44512 * C7312) * C200 +
             (C436 * C7094 + C44512 * C7435) * C44464) *
                C44593) *
               C44601) *
              C2282) *
         C44407) /
        (p * q * std::sqrt(p + q));
    d2eexx[32] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C15087 * C93 + C15083 * C98 + C15088 * C94 + C44593 * C99) *
                 C2283 +
             (C15087 * C101 + C15083 * C108 + C15088 * C102 + C44593 * C109) *
                 C44407) *
                C15085 +
            ((C15622 + C15623) * C2283 + (C15624 + C15625) * C44407) * C44601) *
               C44512 * C1227 -
           (((C17966 + C17967) * C44407 + (C17968 + C17969) * C2283) * C44601 +
            ((C15088 * C1237 + C44593 * C1242 + C15087 * C1238 +
              C15083 * C1243) *
                 C44407 +
             (C15088 * C1229 + C44593 * C1233 + C15087 * C1232 +
              C15083 * C1239) *
                 C2283) *
                C15085) *
               C44512 * C44599) *
              C1819 +
          ((((C17969 + C17968) * C2283 + (C17967 + C17966) * C44407) * C15085 +
            ((C15087 * C7507 + C15083 * C7509 + C15088 * C7508 +
              C44593 * C7510) *
                 C2283 +
             (C15087 * C7511 + C15083 * C7513 + C15088 * C7512 +
              C44593 * C7514) *
                 C44407) *
                C44601) *
               C44512 * C44599 -
           (((C17476 + C17477) * C44407 + (C17478 + C17479) * C2283) * C44601 +
            ((C15625 + C15624) * C44407 + (C15623 + C15622) * C2283) * C15085) *
               C44512 * C1227) *
              C44597)) /
        (p * q * std::sqrt(p + q));
    d2eexy[32] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C15087 * C93 + C15083 * C98 + C15088 * C94 + C44593 * C99) *
                C1873 +
            (C15087 * C152 + C15083 * C157 + C15088 * C153 + C44593 * C158) *
                C1819 -
            (C15623 + C15622) * C1874 - (C15704 + C15705) * C44597) *
               C15085 +
           ((C15622 + C15623) * C1873 + (C15705 + C15704) * C1819 -
            (C17478 + C17479) * C1874 - (C17535 + C17534) * C44597) *
               C44601) *
              C44512 * C44407 * C1227 +
          (((C17969 + C17968) * C1874 -
            ((C15088 * C1295 + C44593 * C1299 + C15087 * C1298 +
              C15083 * C1302) *
                 C1819 +
             (C15088 * C1229 + C44593 * C1233 + C15087 * C1232 +
              C15083 * C1239) *
                 C1873) +
            (C18040 + C18041) * C44597) *
               C15085 +
           ((C15087 * C7507 + C15083 * C7509 + C15088 * C7508 +
             C44593 * C7510) *
                C1874 -
            ((C18041 + C18040) * C1819 + (C17968 + C17969) * C1873) +
            (C15087 * C7593 + C15083 * C7595 + C15088 * C7594 +
             C44593 * C7596) *
                C44597) *
               C44601) *
              C44512 * C44407 * C44599)) /
        (p * q * std::sqrt(p + q));
    d2eexz[32] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C15087 * C93 + C15083 * C98 + C15088 * C94 + C44593 * C99) *
                C1353 +
            (C15087 * C201 + C15083 * C206 + C15088 * C202 + C44593 * C207) *
                C1227 -
            (C15088 * C1229 + C44593 * C1233 + C15087 * C1232 +
             C15083 * C1239) *
                C1354 -
            (C15088 * C1356 + C44593 * C1360 + C15087 * C1357 +
             C15083 * C1361) *
                C44599) *
               C15085 +
           ((C15622 + C15623) * C1353 + (C15782 + C15783) * C1227 -
            (C17968 + C17969) * C1354 - (C18112 + C18113) * C44599) *
               C44601) *
              C44512 * C1819 +
          (((C17969 + C17968) * C1354 -
            ((C15783 + C15782) * C1227 + (C15623 + C15622) * C1353) +
            (C18113 + C18112) * C44599) *
               C15085 +
           ((C15087 * C7507 + C15083 * C7509 + C15088 * C7508 +
             C44593 * C7510) *
                C1354 -
            ((C17590 + C17591) * C1227 + (C17478 + C17479) * C1353) +
            (C15087 * C7669 + C15083 * C7671 + C15088 * C7670 +
             C44593 * C7672) *
                C44599) *
               C44601) *
              C44512 * C44597) *
         C44407) /
        (p * q * std::sqrt(p + q));
    d2eeyx[32] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C15239 * C93 + C15085 * C250 + C15240 * C642 + C44601 * C824) *
                 C2283 +
             (C15239 * C101 + C15085 * C255 + C15240 * C648 + C44601 * C827) *
                 C44407) *
                C44512 * C15083 +
            ((C15259 + C15258) * C2283 + (C15261 + C15260) * C44407) * C44512 *
                C44593) *
               C1227 -
           (((C16481 + C16480) * C44407 + (C16479 + C16478) * C2283) * C44512 *
                C44593 +
            ((C15240 * C2695 + C44601 * C2866 + C15239 * C1238 +
              C15085 * C1417) *
                 C44407 +
             (C15240 * C2689 + C44601 * C2863 + C15239 * C1232 +
              C15085 * C1414) *
                 C2283) *
                C44512 * C15083) *
               C44599) *
              C1819 +
          ((((C15239 * C2689 + C15085 * C2863 + C15240 * C7507 +
              C44601 * C7745) *
                 C2283 +
             (C15239 * C2695 + C15085 * C2866 + C15240 * C7511 +
              C44601 * C7747) *
                 C44407) *
                C44512 * C15083 +
            ((C15239 * C2690 + C15085 * C2864 + C15240 * C7508 +
              C44601 * C7746) *
                 C2283 +
             (C15239 * C2696 + C15085 * C2867 + C15240 * C7512 +
              C44601 * C7748) *
                 C44407) *
                C44512 * C44593) *
               C44599 -
           (((C15863 + C15862) * C44407 + (C15861 + C15860) * C2283) * C44512 *
                C44593 +
            ((C15240 * C2290 + C44601 * C2428 + C15239 * C648 + C15085 * C827) *
                 C44407 +
             (C15240 * C2284 + C44601 * C2425 + C15239 * C642 + C15085 * C824) *
                 C2283) *
                C44512 * C15083) *
               C1227) *
              C44597)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[32] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C15239 * C93 + C15085 * C250 + C15240 * C642 + C44601 * C824) *
                C1873 +
            (C15239 * C152 + C15085 * C316 + C15240 * C709 + C44601 * C893) *
                C1819 -
            (C15240 * C2284 + C44601 * C2425 + C15239 * C642 + C15085 * C824) *
                C1874 -
            (C15240 * C2337 + C44601 * C2469 + C15239 * C709 + C15085 * C893) *
                C44597) *
               C44512 * C15083 +
           ((C15259 + C15258) * C1873 + (C15324 + C15325) * C1819 -
            (C15861 + C15860) * C1874 - (C15934 + C15935) * C44597) *
               C44512 * C44593) *
              C44407 * C1227 +
          (((C15239 * C2689 + C15085 * C2863 + C15240 * C7507 +
             C44601 * C7745) *
                C1874 -
            ((C15240 * C2751 + C44601 * C2919 + C15239 * C1298 +
              C15085 * C1486) *
                 C1819 +
             (C15240 * C2689 + C44601 * C2863 + C15239 * C1232 +
              C15085 * C1414) *
                 C1873) +
            (C15239 * C2751 + C15085 * C2919 + C15240 * C7593 +
             C44601 * C7815) *
                C44597) *
               C44512 * C15083 +
           ((C15239 * C2690 + C15085 * C2864 + C15240 * C7508 +
             C44601 * C7746) *
                C1874 -
            ((C16553 + C16552) * C1819 + (C16479 + C16478) * C1873) +
            (C15239 * C2752 + C15085 * C2920 + C15240 * C7594 +
             C44601 * C7816) *
                C44597) *
               C44512 * C44593) *
              C44407 * C44599)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[32] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C15239 * C93 + C15085 * C250 + C15240 * C642 + C44601 * C824) *
                C1353 +
            (C15239 * C201 + C15085 * C376 + C15240 * C767 + C44601 * C963) *
                C1227 -
            (C15240 * C2689 + C44601 * C2863 + C15239 * C1232 +
             C15085 * C1414) *
                C1354 -
            (C15240 * C2807 + C44601 * C2972 + C15239 * C1357 +
             C15085 * C1547) *
                C44599) *
               C44512 * C15083 +
           ((C15259 + C15258) * C1353 + (C15386 + C15387) * C1227 -
            (C16479 + C16478) * C1354 - (C16624 + C16625) * C44599) *
               C44512 * C44593) *
              C1819 +
          (((C15239 * C2689 + C15085 * C2863 + C15240 * C7507 +
             C44601 * C7745) *
                C1354 -
            ((C15240 * C2381 + C44601 * C2510 + C15239 * C767 + C15085 * C963) *
                 C1227 +
             (C15240 * C2284 + C44601 * C2425 + C15239 * C642 + C15085 * C824) *
                 C1353) +
            (C15239 * C2807 + C15085 * C2972 + C15240 * C7669 +
             C44601 * C7883) *
                C44599) *
               C44512 * C15083 +
           ((C15239 * C2690 + C15085 * C2864 + C15240 * C7508 +
             C44601 * C7746) *
                C1354 -
            ((C16006 + C16007) * C1227 + (C15861 + C15860) * C1353) +
            (C15239 * C2808 + C15085 * C2973 + C15240 * C7670 +
             C44601 * C7884) *
                C44599) *
               C44512 * C44593) *
              C44597) *
         C44407) /
        (p * q * std::sqrt(p + q));
    d2eezx[32] +=
        (2 * std::pow(Pi, 2.5) *
         ((((((C436 * C93 + C44512 * C437) * C2283 +
              (C436 * C101 + C44512 * C442) * C44407) *
                 C15083 +
             (C460 * C2283 + C461 * C44407) * C44593) *
                C15085 +
            ((C7316 + C7317) * C15083 + (C7318 + C7319) * C44593) * C44601) *
               C1227 -
           (((C7956 + C7957) * C44593 + (C7964 + C7965) * C15083) * C44601 +
            ((C1633 * C44407 + C1632 * C2283) * C44593 +
             ((C436 * C1238 + C44512 * C1619) * C44407 +
              (C436 * C1232 + C44512 * C1616) * C2283) *
                 C15083) *
                C15085) *
               C44599) *
              C1819 +
          ((((C7965 + C7964) * C15083 + (C7957 + C7956) * C44593) * C15085 +
            (((C436 * C7507 + C44512 * C7951) * C2283 +
              (C436 * C7511 + C44512 * C7953) * C44407) *
                 C15083 +
             ((C436 * C7508 + C44512 * C7952) * C2283 +
              (C436 * C7512 + C44512 * C7954) * C44407) *
                 C44593) *
                C44601) *
               C44599 -
           (((C7320 + C7321) * C44593 + (C7328 + C7329) * C15083) * C44601 +
            ((C7319 + C7318) * C44593 + (C7317 + C7316) * C15083) * C15085) *
               C1227) *
              C44597)) /
        (p * q * std::sqrt(p + q));
    d2eezy[32] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C436 * C93 + C44512 * C437) * C1873 +
             (C436 * C152 + C44512 * C503) * C1819 - C5512 * C1874 -
             C5591 * C44597) *
                C15083 +
            (C2184 + C2185 - C2186 - C2187) * C44593) *
               C15085 +
           ((C5512 * C1873 + C5591 * C1819 - C7327 * C1874 - C7384 * C44597) *
                C15083 +
            (C6844 + C6845 - C6846 - C6847) * C44593) *
               C44601) *
              C44407 * C1227 +
          (((C7963 * C1874 -
             ((C436 * C1298 + C44512 * C1688) * C1819 +
              (C436 * C1232 + C44512 * C1616) * C1873) +
             C8036 * C44597) *
                C15083 +
            (C6162 * C1874 - (C1696 * C1819 + C1632 * C1873) + C6233 * C44597) *
                C44593) *
               C15085 +
           (((C436 * C7507 + C44512 * C7951) * C1874 -
             (C8036 * C1819 + C7963 * C1873) +
             (C436 * C7593 + C44512 * C8031) * C44597) *
                C15083 +
            ((C436 * C7508 + C44512 * C7952) * C1874 -
             (C6233 * C1819 + C6162 * C1873) +
             (C436 * C7594 + C44512 * C8032) * C44597) *
                C44593) *
               C44601) *
              C44407 * C44599)) /
        (p * q * std::sqrt(p + q));
    d2eezz[32] += (2 * std::pow(Pi, 2.5) *
                   (((((C436 * C93 + C44512 * C437) * C1353 +
                       (C436 * C201 + C44512 * C562) * C1227 -
                       (C436 * C1232 + C44512 * C1616) * C1354 -
                       (C436 * C1357 + C44512 * C1749) * C44599) *
                          C15083 +
                      (C1754 + C1755 - C1756 - C1766) * C44593) *
                         C15085 +
                     ((C8105 + C8106 - C8107 - C8111) * C15083 +
                      (C6301 + C6302 - C6303 - C6307) * C44593) *
                         C44601) *
                        C1819 +
                    (((C8107 - (C8106 + C8105) + C8111) * C15083 +
                      (C6303 - (C6302 + C6301) + C6307) * C44593) *
                         C15085 +
                     (((C436 * C7507 + C44512 * C7951) * C1354 -
                       (C7440 * C1227 + C7327 * C1353) +
                       (C436 * C7669 + C44512 * C8102) * C44599) *
                          C15083 +
                      ((C436 * C7508 + C44512 * C7952) * C1354 -
                       (C5669 * C1227 + C5514 * C1353) +
                       (C436 * C7670 + C44512 * C8103) * C44599) *
                          C44593) *
                         C44601) *
                        C44597) *
                   C44407) /
                  (p * q * std::sqrt(p + q));
    d2eexx[33] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C15087 * C93 + C15083 * C98 + C15088 * C94 + C44593 * C99) *
                C1821 +
            (C15087 * C101 + C15083 * C108 + C15088 * C102 + C44593 * C109) *
                C1817 -
            (C15088 * C95 + C44593 * C100 + C15087 * C94 + C15083 * C99) *
                C1822 -
            (C15088 * C103 + C44593 * C110 + C15087 * C102 + C15083 * C109) *
                C44595) *
               C15085 +
           ((C15622 + C15623) * C1821 + (C15624 + C15625) * C1817 -
            (C15626 + C15627) * C1822 - (C15628 + C15629) * C44595) *
               C44601) *
              C44512 * C3187 +
          (((C15087 * C1229 + C15083 * C1233 + C15088 * C1230 +
             C44593 * C1234) *
                C1822 -
            ((C15088 * C1237 + C44593 * C1242 + C15087 * C1238 +
              C15083 * C1243) *
                 C1817 +
             (C15088 * C1229 + C44593 * C1233 + C15087 * C1232 +
              C15083 * C1239) *
                 C1821) +
            (C15087 * C1237 + C15083 * C1242 + C15088 * C1236 +
             C44593 * C1241) *
                C44595) *
               C15085 +
           ((C15087 * C2690 + C15083 * C2693 + C15088 * C2691 +
             C44593 * C2694) *
                C1822 -
            ((C17966 + C17967) * C1817 + (C17968 + C17969) * C1821) +
            (C15087 * C2696 + C15083 * C2699 + C15088 * C2697 +
             C44593 * C2700) *
                C44595) *
               C44601) *
              C44512 * C44599) *
         C44449) /
        (p * q * std::sqrt(p + q));
    d2eexy[33] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C15087 * C93 + C15083 * C98 + C15088 * C94 + C44593 * C99) *
                 C151 +
             (C15087 * C152 + C15083 * C157 + C15088 * C153 + C44593 * C158) *
                 C44449) *
                C15085 +
            ((C15622 + C15623) * C151 + (C15705 + C15704) * C44449) * C44601) *
               C44512 * C1817 -
           (((C15707 + C15706) * C44449 + (C15626 + C15627) * C151) * C44601 +
            ((C15088 * C154 + C44593 * C159 + C15087 * C153 + C15083 * C158) *
                 C44449 +
             (C15088 * C95 + C44593 * C100 + C15087 * C94 + C15083 * C99) *
                 C151) *
                C15085) *
               C44512 * C44595) *
              C3187 +
          ((((C15087 * C1229 + C15083 * C1233 + C15088 * C1230 +
              C44593 * C1234) *
                 C151 +
             (C15087 * C1295 + C15083 * C1299 + C15088 * C1296 +
              C44593 * C1300) *
                 C44449) *
                C15085 +
            ((C15087 * C2690 + C15083 * C2693 + C15088 * C2691 +
              C44593 * C2694) *
                 C151 +
             (C15087 * C2752 + C15083 * C2755 + C15088 * C2753 +
              C44593 * C2756) *
                 C44449) *
                C44601) *
               C44512 * C44595 -
           (((C18041 + C18040) * C44449 + (C17968 + C17969) * C151) * C44601 +
            ((C15088 * C1295 + C44593 * C1299 + C15087 * C1298 +
              C15083 * C1302) *
                 C44449 +
             (C15088 * C1229 + C44593 * C1233 + C15087 * C1232 +
              C15083 * C1239) *
                 C151) *
                C15085) *
               C44512 * C1817) *
              C44599)) /
        (p * q * std::sqrt(p + q));
    d2eexz[33] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C15087 * C93 + C15083 * C98 + C15088 * C94 + C44593 * C99) *
                C3289 +
            (C15087 * C201 + C15083 * C206 + C15088 * C202 + C44593 * C207) *
                C3187 -
            (C15088 * C1229 + C44593 * C1233 + C15087 * C1232 +
             C15083 * C1239) *
                C3290 -
            (C15088 * C1356 + C44593 * C1360 + C15087 * C1357 +
             C15083 * C1361) *
                C44599) *
               C15085 +
           ((C15622 + C15623) * C3289 + (C15782 + C15783) * C3187 -
            (C17968 + C17969) * C3290 - (C18112 + C18113) * C44599) *
               C44601) *
              C44512 * C44449 * C1817 +
          (((C15087 * C1229 + C15083 * C1233 + C15088 * C1230 +
             C44593 * C1234) *
                C3290 -
            ((C15088 * C203 + C44593 * C208 + C15087 * C202 + C15083 * C207) *
                 C3187 +
             (C15088 * C95 + C44593 * C100 + C15087 * C94 + C15083 * C99) *
                 C3289) +
            (C15087 * C1356 + C15083 * C1360 + C15088 * C1355 +
             C44593 * C1359) *
                C44599) *
               C15085 +
           ((C15087 * C2690 + C15083 * C2693 + C15088 * C2691 +
             C44593 * C2694) *
                C3290 -
            ((C15785 + C15784) * C3187 + (C15626 + C15627) * C3289) +
            (C15087 * C2808 + C15083 * C2811 + C15088 * C2809 +
             C44593 * C2812) *
                C44599) *
               C44601) *
              C44512 * C44449 * C44595)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[33] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C15239 * C93 + C15085 * C250 + C15240 * C642 + C44601 * C824) *
                C1821 +
            (C15239 * C101 + C15085 * C255 + C15240 * C648 + C44601 * C827) *
                C1817 -
            (C15258 + C15259) * C1822 - (C15260 + C15261) * C44595) *
               C44512 * C15083 +
           ((C15259 + C15258) * C1821 + (C15261 + C15260) * C1817 -
            (C15263 + C15262) * C1822 - (C15265 + C15264) * C44595) *
               C44512 * C44593) *
              C3187 +
          (((C16478 + C16479) * C1822 -
            ((C15240 * C2695 + C44601 * C2866 + C15239 * C1238 +
              C15085 * C1417) *
                 C1817 +
             (C15240 * C2689 + C44601 * C2863 + C15239 * C1232 +
              C15085 * C1414) *
                 C1821) +
            (C16480 + C16481) * C44595) *
               C44512 * C15083 +
           ((C15239 * C1230 + C15085 * C1415 + C15240 * C2691 +
             C44601 * C2865) *
                C1822 -
            ((C16481 + C16480) * C1817 + (C16479 + C16478) * C1821) +
            (C15239 * C1236 + C15085 * C1419 + C15240 * C2697 +
             C44601 * C2868) *
                C44595) *
               C44512 * C44593) *
              C44599) *
         C44449) /
        (p * q * std::sqrt(p + q));
    d2eeyy[33] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C15239 * C93 + C15085 * C250 + C15240 * C642 + C44601 * C824) *
                 C151 +
             (C15239 * C152 + C15085 * C316 + C15240 * C709 + C44601 * C893) *
                 C44449) *
                C44512 * C15083 +
            ((C15259 + C15258) * C151 + (C15324 + C15325) * C44449) * C44512 *
                C44593) *
               C1817 -
           (((C15326 + C15327) * C44449 + (C15263 + C15262) * C151) * C44512 *
                C44593 +
            ((C15325 + C15324) * C44449 + (C15258 + C15259) * C151) * C44512 *
                C15083) *
               C44595) *
              C3187 +
          ((((C16478 + C16479) * C151 + (C16552 + C16553) * C44449) * C44512 *
                C15083 +
            ((C15239 * C1230 + C15085 * C1415 + C15240 * C2691 +
              C44601 * C2865) *
                 C151 +
             (C15239 * C1296 + C15085 * C1484 + C15240 * C2753 +
              C44601 * C2921) *
                 C44449) *
                C44512 * C44593) *
               C44595 -
           (((C16553 + C16552) * C44449 + (C16479 + C16478) * C151) * C44512 *
                C44593 +
            ((C15240 * C2751 + C44601 * C2919 + C15239 * C1298 +
              C15085 * C1486) *
                 C44449 +
             (C15240 * C2689 + C44601 * C2863 + C15239 * C1232 +
              C15085 * C1414) *
                 C151) *
                C44512 * C15083) *
               C1817) *
              C44599)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[33] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C15239 * C93 + C15085 * C250 + C15240 * C642 + C44601 * C824) *
                C3289 +
            (C15239 * C201 + C15085 * C376 + C15240 * C767 + C44601 * C963) *
                C3187 -
            (C15240 * C2689 + C44601 * C2863 + C15239 * C1232 +
             C15085 * C1414) *
                C3290 -
            (C15240 * C2807 + C44601 * C2972 + C15239 * C1357 +
             C15085 * C1547) *
                C44599) *
               C44512 * C15083 +
           ((C15259 + C15258) * C3289 + (C15386 + C15387) * C3187 -
            (C16479 + C16478) * C3290 - (C16624 + C16625) * C44599) *
               C44512 * C44593) *
              C44449 * C1817 +
          (((C16478 + C16479) * C3290 -
            ((C15387 + C15386) * C3187 + (C15258 + C15259) * C3289) +
            (C16625 + C16624) * C44599) *
               C44512 * C15083 +
           ((C15239 * C1230 + C15085 * C1415 + C15240 * C2691 +
             C44601 * C2865) *
                C3290 -
            ((C15388 + C15389) * C3187 + (C15263 + C15262) * C3289) +
            (C15239 * C1355 + C15085 * C1549 + C15240 * C2809 +
             C44601 * C2974) *
                C44599) *
               C44512 * C44593) *
              C44449 * C44595)) /
        (p * q * std::sqrt(p + q));
    d2eezx[33] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C436 * C93 + C44512 * C437) * C1821 +
             (C436 * C101 + C44512 * C442) * C1817 - C460 * C1822 -
             C461 * C44595) *
                C15083 +
            (C460 * C1821 + C461 * C1817 - C462 * C1822 - C463 * C44595) *
                C44593) *
               C15085 +
           ((C6770 + C6771 - C6772 - C6773) * C15083 +
            (C6774 + C6775 - C6776 - C6777) * C44593) *
               C44601) *
              C3187 +
          (((C1632 * C1822 -
             ((C436 * C1238 + C44512 * C1619) * C1817 +
              (C436 * C1232 + C44512 * C1616) * C1821) +
             C1633 * C44595) *
                C15083 +
            (C1634 * C1822 - (C1633 * C1817 + C1632 * C1821) + C1635 * C44595) *
                C44593) *
               C15085 +
           ((C6162 * C1822 - (C7962 * C1817 + C7963 * C1821) + C6163 * C44595) *
                C15083 +
            ((C436 * C2691 + C44512 * C3027) * C1822 -
             (C6163 * C1817 + C6162 * C1821) +
             (C436 * C2697 + C44512 * C3030) * C44595) *
                C44593) *
               C44601) *
              C44599) *
         C44449) /
        (p * q * std::sqrt(p + q));
    d2eezy[33] +=
        (2 * std::pow(Pi, 2.5) *
         ((((((C436 * C93 + C44512 * C437) * C151 +
              (C436 * C152 + C44512 * C503) * C44449) *
                 C15083 +
             (C509 + C521) * C44593) *
                C15085 +
            ((C5512 * C151 + C5591 * C44449) * C15083 +
             (C4910 + C4911) * C44593) *
                C44601) *
               C1817 -
           (((C4912 + C4913) * C44593 + (C4911 + C4910) * C15083) * C44601 +
            ((C522 + C512) * C44593 + (C521 + C509) * C15083) * C15085) *
               C44595) *
              C3187 +
          ((((C1690 + C1698) * C15083 + (C1693 + C1699) * C44593) * C15085 +
            ((C6230 + C6234) * C15083 +
             ((C436 * C2691 + C44512 * C3027) * C151 +
              (C436 * C2753 + C44512 * C3083) * C44449) *
                 C44593) *
                C44601) *
               C44595 -
           (((C6234 + C6230) * C44593 +
             (C8036 * C44449 + C7963 * C151) * C15083) *
                C44601 +
            ((C1698 + C1690) * C44593 +
             ((C436 * C1298 + C44512 * C1688) * C44449 +
              (C436 * C1232 + C44512 * C1616) * C151) *
                 C15083) *
                C15085) *
               C1817) *
              C44599)) /
        (p * q * std::sqrt(p + q));
    d2eezz[33] += (2 * std::pow(Pi, 2.5) *
                   (((((C436 * C93 + C44512 * C437) * C3289 +
                       (C436 * C201 + C44512 * C562) * C3187 -
                       (C436 * C1232 + C44512 * C1616) * C3290 -
                       (C436 * C1357 + C44512 * C1749) * C44599) *
                          C15083 +
                      (C3600 + C3601 - C3602 - C3603) * C44593) *
                         C15085 +
                     ((C9304 + C9305 - C9306 - C9307) * C15083 +
                      (C8706 + C8707 - C8708 - C8709) * C44593) *
                         C44601) *
                        C44449 * C1817 +
                    (((C3602 - (C3601 + C3600) + C3603) * C15083 +
                      (C3606 - (C3605 + C3604) + C3607) * C44593) *
                         C15085 +
                     ((C8708 - (C8707 + C8706) + C8709) * C15083 +
                      ((C436 * C2691 + C44512 * C3027) * C3290 -
                       (C1174 * C3187 + C1044 * C3289) +
                       (C436 * C2809 + C44512 * C3136) * C44599) *
                          C44593) *
                         C44601) *
                        C44449 * C44595)) /
                  (p * q * std::sqrt(p + q));
    d2eexx[34] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C15087 * C93 + C15083 * C98 + C15088 * C94 + C44593 * C99) *
                 C2283 +
             (C15087 * C101 + C15083 * C108 + C15088 * C102 + C44593 * C109) *
                 C44407) *
                C15085 +
            ((C15622 + C15623) * C2283 + (C15624 + C15625) * C44407) * C44601) *
               C44512 * C3187 -
           (((C17966 + C17967) * C44407 + (C17968 + C17969) * C2283) * C44601 +
            ((C15088 * C1237 + C44593 * C1242 + C15087 * C1238 +
              C15083 * C1243) *
                 C44407 +
             (C15088 * C1229 + C44593 * C1233 + C15087 * C1232 +
              C15083 * C1239) *
                 C2283) *
                C15085) *
               C44512 * C44599) *
              C635 +
          ((((C17969 + C17968) * C2283 + (C17967 + C17966) * C44407) * C15085 +
            ((C15087 * C7507 + C15083 * C7509 + C15088 * C7508 +
              C44593 * C7510) *
                 C2283 +
             (C15087 * C7511 + C15083 * C7513 + C15088 * C7512 +
              C44593 * C7514) *
                 C44407) *
                C44601) *
               C44512 * C44599 -
           (((C17476 + C17477) * C44407 + (C17478 + C17479) * C2283) * C44601 +
            ((C15625 + C15624) * C44407 + (C15623 + C15622) * C2283) * C15085) *
               C44512 * C3187) *
              C44597)) /
        (p * q * std::sqrt(p + q));
    d2eexy[34] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C15087 * C93 + C15083 * C98 + C15088 * C94 + C44593 * C99) * C705 +
            (C15087 * C152 + C15083 * C157 + C15088 * C153 + C44593 * C158) *
                C635 -
            (C15623 + C15622) * C706 - (C15704 + C15705) * C44597) *
               C15085 +
           ((C15622 + C15623) * C705 + (C15705 + C15704) * C635 -
            (C17478 + C17479) * C706 - (C17535 + C17534) * C44597) *
               C44601) *
              C44512 * C44407 * C3187 +
          (((C17969 + C17968) * C706 -
            ((C15088 * C1295 + C44593 * C1299 + C15087 * C1298 +
              C15083 * C1302) *
                 C635 +
             (C15088 * C1229 + C44593 * C1233 + C15087 * C1232 +
              C15083 * C1239) *
                 C705) +
            (C18040 + C18041) * C44597) *
               C15085 +
           ((C15087 * C7507 + C15083 * C7509 + C15088 * C7508 +
             C44593 * C7510) *
                C706 -
            ((C18041 + C18040) * C635 + (C17968 + C17969) * C705) +
            (C15087 * C7593 + C15083 * C7595 + C15088 * C7594 +
             C44593 * C7596) *
                C44597) *
               C44601) *
              C44512 * C44407 * C44599)) /
        (p * q * std::sqrt(p + q));
    d2eexz[34] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C15087 * C93 + C15083 * C98 + C15088 * C94 + C44593 * C99) *
                C3289 +
            (C15087 * C201 + C15083 * C206 + C15088 * C202 + C44593 * C207) *
                C3187 -
            (C15088 * C1229 + C44593 * C1233 + C15087 * C1232 +
             C15083 * C1239) *
                C3290 -
            (C15088 * C1356 + C44593 * C1360 + C15087 * C1357 +
             C15083 * C1361) *
                C44599) *
               C15085 +
           ((C15622 + C15623) * C3289 + (C15782 + C15783) * C3187 -
            (C17968 + C17969) * C3290 - (C18112 + C18113) * C44599) *
               C44601) *
              C44512 * C635 +
          (((C17969 + C17968) * C3290 -
            ((C15783 + C15782) * C3187 + (C15623 + C15622) * C3289) +
            (C18113 + C18112) * C44599) *
               C15085 +
           ((C15087 * C7507 + C15083 * C7509 + C15088 * C7508 +
             C44593 * C7510) *
                C3290 -
            ((C17590 + C17591) * C3187 + (C17478 + C17479) * C3289) +
            (C15087 * C7669 + C15083 * C7671 + C15088 * C7670 +
             C44593 * C7672) *
                C44599) *
               C44601) *
              C44512 * C44597) *
         C44407) /
        (p * q * std::sqrt(p + q));
    d2eeyx[34] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C15239 * C93 + C15085 * C250 + C15240 * C642 + C44601 * C824) *
                 C2283 +
             (C15239 * C101 + C15085 * C255 + C15240 * C648 + C44601 * C827) *
                 C44407) *
                C44512 * C15083 +
            ((C15259 + C15258) * C2283 + (C15261 + C15260) * C44407) * C44512 *
                C44593) *
               C3187 -
           (((C16481 + C16480) * C44407 + (C16479 + C16478) * C2283) * C44512 *
                C44593 +
            ((C15240 * C2695 + C44601 * C2866 + C15239 * C1238 +
              C15085 * C1417) *
                 C44407 +
             (C15240 * C2689 + C44601 * C2863 + C15239 * C1232 +
              C15085 * C1414) *
                 C2283) *
                C44512 * C15083) *
               C44599) *
              C635 +
          ((((C15239 * C2689 + C15085 * C2863 + C15240 * C7507 +
              C44601 * C7745) *
                 C2283 +
             (C15239 * C2695 + C15085 * C2866 + C15240 * C7511 +
              C44601 * C7747) *
                 C44407) *
                C44512 * C15083 +
            ((C15239 * C2690 + C15085 * C2864 + C15240 * C7508 +
              C44601 * C7746) *
                 C2283 +
             (C15239 * C2696 + C15085 * C2867 + C15240 * C7512 +
              C44601 * C7748) *
                 C44407) *
                C44512 * C44593) *
               C44599 -
           (((C15863 + C15862) * C44407 + (C15861 + C15860) * C2283) * C44512 *
                C44593 +
            ((C15240 * C2290 + C44601 * C2428 + C15239 * C648 + C15085 * C827) *
                 C44407 +
             (C15240 * C2284 + C44601 * C2425 + C15239 * C642 + C15085 * C824) *
                 C2283) *
                C44512 * C15083) *
               C3187) *
              C44597)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[34] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C15239 * C93 + C15085 * C250 + C15240 * C642 + C44601 * C824) *
                C705 +
            (C15239 * C152 + C15085 * C316 + C15240 * C709 + C44601 * C893) *
                C635 -
            (C15240 * C2284 + C44601 * C2425 + C15239 * C642 + C15085 * C824) *
                C706 -
            (C15240 * C2337 + C44601 * C2469 + C15239 * C709 + C15085 * C893) *
                C44597) *
               C44512 * C15083 +
           ((C15259 + C15258) * C705 + (C15324 + C15325) * C635 -
            (C15861 + C15860) * C706 - (C15934 + C15935) * C44597) *
               C44512 * C44593) *
              C44407 * C3187 +
          (((C15239 * C2689 + C15085 * C2863 + C15240 * C7507 +
             C44601 * C7745) *
                C706 -
            ((C15240 * C2751 + C44601 * C2919 + C15239 * C1298 +
              C15085 * C1486) *
                 C635 +
             (C15240 * C2689 + C44601 * C2863 + C15239 * C1232 +
              C15085 * C1414) *
                 C705) +
            (C15239 * C2751 + C15085 * C2919 + C15240 * C7593 +
             C44601 * C7815) *
                C44597) *
               C44512 * C15083 +
           ((C15239 * C2690 + C15085 * C2864 + C15240 * C7508 +
             C44601 * C7746) *
                C706 -
            ((C16553 + C16552) * C635 + (C16479 + C16478) * C705) +
            (C15239 * C2752 + C15085 * C2920 + C15240 * C7594 +
             C44601 * C7816) *
                C44597) *
               C44512 * C44593) *
              C44407 * C44599)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[34] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C15239 * C93 + C15085 * C250 + C15240 * C642 + C44601 * C824) *
                C3289 +
            (C15239 * C201 + C15085 * C376 + C15240 * C767 + C44601 * C963) *
                C3187 -
            (C15240 * C2689 + C44601 * C2863 + C15239 * C1232 +
             C15085 * C1414) *
                C3290 -
            (C15240 * C2807 + C44601 * C2972 + C15239 * C1357 +
             C15085 * C1547) *
                C44599) *
               C44512 * C15083 +
           ((C15259 + C15258) * C3289 + (C15386 + C15387) * C3187 -
            (C16479 + C16478) * C3290 - (C16624 + C16625) * C44599) *
               C44512 * C44593) *
              C635 +
          (((C15239 * C2689 + C15085 * C2863 + C15240 * C7507 +
             C44601 * C7745) *
                C3290 -
            ((C15240 * C2381 + C44601 * C2510 + C15239 * C767 + C15085 * C963) *
                 C3187 +
             (C15240 * C2284 + C44601 * C2425 + C15239 * C642 + C15085 * C824) *
                 C3289) +
            (C15239 * C2807 + C15085 * C2972 + C15240 * C7669 +
             C44601 * C7883) *
                C44599) *
               C44512 * C15083 +
           ((C15239 * C2690 + C15085 * C2864 + C15240 * C7508 +
             C44601 * C7746) *
                C3290 -
            ((C16006 + C16007) * C3187 + (C15861 + C15860) * C3289) +
            (C15239 * C2808 + C15085 * C2973 + C15240 * C7670 +
             C44601 * C7884) *
                C44599) *
               C44512 * C44593) *
              C44597) *
         C44407) /
        (p * q * std::sqrt(p + q));
    d2eezx[34] +=
        (2 * std::pow(Pi, 2.5) *
         ((((((C436 * C93 + C44512 * C437) * C2283 +
              (C436 * C101 + C44512 * C442) * C44407) *
                 C15083 +
             (C460 * C2283 + C461 * C44407) * C44593) *
                C15085 +
            ((C7316 + C7317) * C15083 + (C7318 + C7319) * C44593) * C44601) *
               C3187 -
           (((C7956 + C7957) * C44593 + (C7964 + C7965) * C15083) * C44601 +
            ((C1633 * C44407 + C1632 * C2283) * C44593 +
             ((C436 * C1238 + C44512 * C1619) * C44407 +
              (C436 * C1232 + C44512 * C1616) * C2283) *
                 C15083) *
                C15085) *
               C44599) *
              C635 +
          ((((C7965 + C7964) * C15083 + (C7957 + C7956) * C44593) * C15085 +
            (((C436 * C7507 + C44512 * C7951) * C2283 +
              (C436 * C7511 + C44512 * C7953) * C44407) *
                 C15083 +
             ((C436 * C7508 + C44512 * C7952) * C2283 +
              (C436 * C7512 + C44512 * C7954) * C44407) *
                 C44593) *
                C44601) *
               C44599 -
           (((C7320 + C7321) * C44593 + (C7328 + C7329) * C15083) * C44601 +
            ((C7319 + C7318) * C44593 + (C7317 + C7316) * C15083) * C15085) *
               C3187) *
              C44597)) /
        (p * q * std::sqrt(p + q));
    d2eezy[34] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C436 * C93 + C44512 * C437) * C705 +
             (C436 * C152 + C44512 * C503) * C635 - C5512 * C706 -
             C5591 * C44597) *
                C15083 +
            (C1100 + C1101 - C1102 - C1112) * C44593) *
               C15085 +
           ((C5512 * C705 + C5591 * C635 - C7327 * C706 - C7384 * C44597) *
                C15083 +
            (C5586 + C5587 - C5588 - C5593) * C44593) *
               C44601) *
              C44407 * C3187 +
          (((C7963 * C706 -
             ((C436 * C1298 + C44512 * C1688) * C635 +
              (C436 * C1232 + C44512 * C1616) * C705) +
             C8036 * C44597) *
                C15083 +
            (C6162 * C706 - (C1696 * C635 + C1632 * C705) + C6233 * C44597) *
                C44593) *
               C15085 +
           (((C436 * C7507 + C44512 * C7951) * C706 -
             (C8036 * C635 + C7963 * C705) +
             (C436 * C7593 + C44512 * C8031) * C44597) *
                C15083 +
            ((C436 * C7508 + C44512 * C7952) * C706 -
             (C6233 * C635 + C6162 * C705) +
             (C436 * C7594 + C44512 * C8032) * C44597) *
                C44593) *
               C44601) *
              C44407 * C44599)) /
        (p * q * std::sqrt(p + q));
    d2eezz[34] += (2 * std::pow(Pi, 2.5) *
                   (((((C436 * C93 + C44512 * C437) * C3289 +
                       (C436 * C201 + C44512 * C562) * C3187 -
                       (C436 * C1232 + C44512 * C1616) * C3290 -
                       (C436 * C1357 + C44512 * C1749) * C44599) *
                          C15083 +
                      (C3600 + C3601 - C3602 - C3603) * C44593) *
                         C15085 +
                     ((C9304 + C9305 - C9306 - C9307) * C15083 +
                      (C8706 + C8707 - C8708 - C8709) * C44593) *
                         C44601) *
                        C635 +
                    (((C9306 - (C9305 + C9304) + C9307) * C15083 +
                      (C8708 - (C8707 + C8706) + C8709) * C44593) *
                         C15085 +
                     (((C436 * C7507 + C44512 * C7951) * C3290 -
                       (C7440 * C3187 + C7327 * C3289) +
                       (C436 * C7669 + C44512 * C8102) * C44599) *
                          C15083 +
                      ((C436 * C7508 + C44512 * C7952) * C3290 -
                       (C5669 * C3187 + C5514 * C3289) +
                       (C436 * C7670 + C44512 * C8103) * C44599) *
                          C44593) *
                         C44601) *
                        C44597) *
                   C44407) /
                  (p * q * std::sqrt(p + q));
    d2eexx[35] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C15087 * C93 + C15083 * C98 + C15088 * C94 + C44593 * C99) *
                C2283 +
            (C15087 * C101 + C15083 * C108 + C15088 * C102 + C44593 * C109) *
                C44407) *
               C15085 +
           ((C15622 + C15623) * C2283 + (C15624 + C15625) * C44407) * C44601) *
              C44512 * C4095 -
          (((C17966 + C17967) * C44407 + (C17968 + C17969) * C2283) * C44601 +
           ((C15088 * C1237 + C44593 * C1242 + C15087 * C1238 +
             C15083 * C1243) *
                C44407 +
            (C15088 * C1229 + C44593 * C1233 + C15087 * C1232 +
             C15083 * C1239) *
                C2283) *
               C15085) *
              C44512 * C4096 +
          (((C15087 * C4098 + C15083 * C4101 + C15088 * C4099 +
             C44593 * C4102) *
                C2283 +
            (C15087 * C4104 + C15083 * C4107 + C15088 * C4105 +
             C44593 * C4108) *
                C44407) *
               C15085 +
           ((C15087 * C9357 + C15083 * C9359 + C15088 * C9358 +
             C44593 * C9360) *
                C2283 +
            (C15087 * C9361 + C15083 * C9363 + C15088 * C9362 +
             C44593 * C9364) *
                C44407) *
               C44601) *
              C44512 * C4097) *
         C44449) /
        (p * q * std::sqrt(p + q));
    d2eexy[35] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C15087 * C93 + C15083 * C98 + C15088 * C94 + C44593 * C99) * C151 +
            (C15087 * C152 + C15083 * C157 + C15088 * C153 + C44593 * C158) *
                C44449) *
               C15085 +
           ((C15622 + C15623) * C151 + (C15705 + C15704) * C44449) * C44601) *
              C44512 * C44407 * C4095 -
          (((C18041 + C18040) * C44449 + (C17968 + C17969) * C151) * C44601 +
           ((C15088 * C1295 + C44593 * C1299 + C15087 * C1298 +
             C15083 * C1302) *
                C44449 +
            (C15088 * C1229 + C44593 * C1233 + C15087 * C1232 +
             C15083 * C1239) *
                C151) *
               C15085) *
              C44512 * C44407 * C4096 +
          (((C15087 * C4098 + C15083 * C4101 + C15088 * C4099 +
             C44593 * C4102) *
                C151 +
            (C15087 * C4148 + C15083 * C4151 + C15088 * C4149 +
             C44593 * C4152) *
                C44449) *
               C15085 +
           ((C15087 * C9357 + C15083 * C9359 + C15088 * C9358 +
             C44593 * C9360) *
                C151 +
            (C15087 * C9415 + C15083 * C9417 + C15088 * C9416 +
             C44593 * C9418) *
                C44449) *
               C44601) *
              C44512 * C44407 * C4097)) /
        (p * q * std::sqrt(p + q));
    d2eexz[35] +=
        (2 * std::pow(Pi, 2.5) *
         (((C15087 * C93 + C15083 * C98 + C15088 * C94 + C44593 * C99) * C4192 +
           (C15087 * C201 + C15083 * C206 + C15088 * C202 + C44593 * C207) *
               C4095 -
           (C15088 * C1229 + C44593 * C1233 + C15087 * C1232 + C15083 * C1239) *
               C4193 -
           (C15088 * C1356 + C44593 * C1360 + C15087 * C1357 + C15083 * C1361) *
               C4096 +
           (C15087 * C4098 + C15083 * C4101 + C15088 * C4099 + C44593 * C4102) *
               C4194 +
           (C15087 * C4195 + C15083 * C4198 + C15088 * C4196 + C44593 * C4199) *
               C4097) *
              C15085 +
          ((C15622 + C15623) * C4192 + (C15782 + C15783) * C4095 -
           (C17968 + C17969) * C4193 - (C18112 + C18113) * C4096 +
           (C15087 * C9357 + C15083 * C9359 + C15088 * C9358 + C44593 * C9360) *
               C4194 +
           (C15087 * C9469 + C15083 * C9471 + C15088 * C9470 + C44593 * C9472) *
               C4097) *
              C44601) *
         C44512 * C44449 * C44407) /
        (p * q * std::sqrt(p + q));
    d2eeyx[35] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C15239 * C93 + C15085 * C250 + C15240 * C642 + C44601 * C824) *
                C2283 +
            (C15239 * C101 + C15085 * C255 + C15240 * C648 + C44601 * C827) *
                C44407) *
               C44512 * C15083 +
           ((C15259 + C15258) * C2283 + (C15261 + C15260) * C44407) * C44512 *
               C44593) *
              C4095 -
          (((C16481 + C16480) * C44407 + (C16479 + C16478) * C2283) * C44512 *
               C44593 +
           ((C15240 * C2695 + C44601 * C2866 + C15239 * C1238 +
             C15085 * C1417) *
                C44407 +
            (C15240 * C2689 + C44601 * C2863 + C15239 * C1232 +
             C15085 * C1414) *
                C2283) *
               C44512 * C15083) *
              C4096 +
          (((C15239 * C4098 + C15085 * C4239 + C15240 * C9357 +
             C44601 * C9523) *
                C2283 +
            (C15239 * C4104 + C15085 * C4242 + C15240 * C9361 +
             C44601 * C9525) *
                C44407) *
               C44512 * C15083 +
           ((C15239 * C4099 + C15085 * C4240 + C15240 * C9358 +
             C44601 * C9524) *
                C2283 +
            (C15239 * C4105 + C15085 * C4243 + C15240 * C9362 +
             C44601 * C9526) *
                C44407) *
               C44512 * C44593) *
              C4097) *
         C44449) /
        (p * q * std::sqrt(p + q));
    d2eeyy[35] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C15239 * C93 + C15085 * C250 + C15240 * C642 + C44601 * C824) *
                C151 +
            (C15239 * C152 + C15085 * C316 + C15240 * C709 + C44601 * C893) *
                C44449) *
               C44512 * C15083 +
           ((C15259 + C15258) * C151 + (C15324 + C15325) * C44449) * C44512 *
               C44593) *
              C44407 * C4095 -
          (((C16553 + C16552) * C44449 + (C16479 + C16478) * C151) * C44512 *
               C44593 +
           ((C15240 * C2751 + C44601 * C2919 + C15239 * C1298 +
             C15085 * C1486) *
                C44449 +
            (C15240 * C2689 + C44601 * C2863 + C15239 * C1232 +
             C15085 * C1414) *
                C151) *
               C44512 * C15083) *
              C44407 * C4096 +
          (((C15239 * C4098 + C15085 * C4239 + C15240 * C9357 +
             C44601 * C9523) *
                C151 +
            (C15239 * C4148 + C15085 * C4283 + C15240 * C9415 +
             C44601 * C9577) *
                C44449) *
               C44512 * C15083 +
           ((C15239 * C4099 + C15085 * C4240 + C15240 * C9358 +
             C44601 * C9524) *
                C151 +
            (C15239 * C4149 + C15085 * C4284 + C15240 * C9416 +
             C44601 * C9578) *
                C44449) *
               C44512 * C44593) *
              C44407 * C4097)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[35] +=
        (2 * std::pow(Pi, 2.5) *
         (((C15239 * C93 + C15085 * C250 + C15240 * C642 + C44601 * C824) *
               C4192 +
           (C15239 * C201 + C15085 * C376 + C15240 * C767 + C44601 * C963) *
               C4095 -
           (C15240 * C2689 + C44601 * C2863 + C15239 * C1232 + C15085 * C1414) *
               C4193 -
           (C15240 * C2807 + C44601 * C2972 + C15239 * C1357 + C15085 * C1547) *
               C4096 +
           (C15239 * C4098 + C15085 * C4239 + C15240 * C9357 + C44601 * C9523) *
               C4194 +
           (C15239 * C4195 + C15085 * C4324 + C15240 * C9469 + C44601 * C9629) *
               C4097) *
              C44512 * C15083 +
          ((C15259 + C15258) * C4192 + (C15386 + C15387) * C4095 -
           (C16479 + C16478) * C4193 - (C16624 + C16625) * C4096 +
           (C15239 * C4099 + C15085 * C4240 + C15240 * C9358 + C44601 * C9524) *
               C4194 +
           (C15239 * C4196 + C15085 * C4325 + C15240 * C9470 + C44601 * C9630) *
               C4097) *
              C44512 * C44593) *
         C44449 * C44407) /
        (p * q * std::sqrt(p + q));
    d2eezx[35] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C436 * C93 + C44512 * C437) * C2283 +
             (C436 * C101 + C44512 * C442) * C44407) *
                C15083 +
            (C460 * C2283 + C461 * C44407) * C44593) *
               C15085 +
           ((C7316 + C7317) * C15083 + (C7318 + C7319) * C44593) * C44601) *
              C4095 -
          (((C7956 + C7957) * C44593 + (C7964 + C7965) * C15083) * C44601 +
           ((C1633 * C44407 + C1632 * C2283) * C44593 +
            ((C436 * C1238 + C44512 * C1619) * C44407 +
             (C436 * C1232 + C44512 * C1616) * C2283) *
                C15083) *
               C15085) *
              C4096 +
          ((((C436 * C4098 + C44512 * C4365) * C2283 +
             (C436 * C4104 + C44512 * C4368) * C44407) *
                C15083 +
            ((C436 * C4099 + C44512 * C4366) * C2283 +
             (C436 * C4105 + C44512 * C4369) * C44407) *
                C44593) *
               C15085 +
           (((C436 * C9357 + C44512 * C9681) * C2283 +
             (C436 * C9361 + C44512 * C9683) * C44407) *
                C15083 +
            ((C436 * C9358 + C44512 * C9682) * C2283 +
             (C436 * C9362 + C44512 * C9684) * C44407) *
                C44593) *
               C44601) *
              C4097) *
         C44449) /
        (p * q * std::sqrt(p + q));
    d2eezy[35] += (2 * std::pow(Pi, 2.5) *
                   (((((C436 * C93 + C44512 * C437) * C151 +
                       (C436 * C152 + C44512 * C503) * C44449) *
                          C15083 +
                      (C509 + C521) * C44593) *
                         C15085 +
                     ((C5512 * C151 + C5591 * C44449) * C15083 +
                      (C4910 + C4911) * C44593) *
                         C44601) *
                        C44407 * C4095 -
                    (((C6234 + C6230) * C44593 +
                      (C8036 * C44449 + C7963 * C151) * C15083) *
                         C44601 +
                     ((C1698 + C1690) * C44593 +
                      ((C436 * C1298 + C44512 * C1688) * C44449 +
                       (C436 * C1232 + C44512 * C1616) * C151) *
                          C15083) *
                         C15085) *
                        C44407 * C4096 +
                    ((((C436 * C4098 + C44512 * C4365) * C151 +
                       (C436 * C4148 + C44512 * C4409) * C44449) *
                          C15083 +
                      ((C436 * C4099 + C44512 * C4366) * C151 +
                       (C436 * C4149 + C44512 * C4410) * C44449) *
                          C44593) *
                         C15085 +
                     (((C436 * C9357 + C44512 * C9681) * C151 +
                       (C436 * C9415 + C44512 * C9735) * C44449) *
                          C15083 +
                      ((C436 * C9358 + C44512 * C9682) * C151 +
                       (C436 * C9416 + C44512 * C9736) * C44449) *
                          C44593) *
                         C44601) *
                        C44407 * C4097)) /
                  (p * q * std::sqrt(p + q));
    d2eezz[35] += (2 * std::pow(Pi, 2.5) *
                   ((((C436 * C93 + C44512 * C437) * C4192 +
                      (C436 * C201 + C44512 * C562) * C4095 -
                      (C436 * C1232 + C44512 * C1616) * C4193 -
                      (C436 * C1357 + C44512 * C1749) * C4096 +
                      (C436 * C4098 + C44512 * C4365) * C4194 +
                      (C436 * C4195 + C44512 * C4450) * C4097) *
                         C15083 +
                     (C460 * C4192 + C577 * C4095 - C1632 * C4193 -
                      C1764 * C4096 + (C436 * C4099 + C44512 * C4366) * C4194 +
                      (C436 * C4196 + C44512 * C4451) * C4097) *
                         C44593) *
                        C15085 +
                    ((C5512 * C4192 + C5668 * C4095 - C7963 * C4193 -
                      C8110 * C4096 + (C436 * C9357 + C44512 * C9681) * C4194 +
                      (C436 * C9469 + C44512 * C9787) * C4097) *
                         C15083 +
                     (C1042 * C4192 + C1175 * C4095 - C6162 * C4193 -
                      C6306 * C4096 + (C436 * C9358 + C44512 * C9682) * C4194 +
                      (C436 * C9470 + C44512 * C9788) * C4097) *
                         C44593) *
                        C44601) *
                   C44449 * C44407) /
                  (p * q * std::sqrt(p + q));
    d2eexx[36] += (2 * std::pow(Pi, 2.5) *
                   (((C20189 * C93 + C44395 * C98) * C90 +
                     (C20189 * C101 + C44395 * C108) * C80 -
                     (C20189 * C94 + C44395 * C99) * C91 -
                     (C20189 * C102 + C44395 * C109) * C81 +
                     (C20189 * C95 + C44395 * C100) * C92 +
                     (C20189 * C103 + C44395 * C110) * C82) *
                        C20186 +
                    ((C20189 * C642 + C44395 * C649) * C90 +
                     (C20189 * C648 + C44395 * C653) * C80 -
                     (C20189 * C639 + C44395 * C643) * C91 -
                     (C20189 * C647 + C44395 * C652) * C81 +
                     (C20189 * C640 + C44395 * C644) * C92 +
                     (C20189 * C646 + C44395 * C651) * C82) *
                        C20187 +
                    ((C20189 * C2284 + C44395 * C2287) * C90 +
                     (C20189 * C2290 + C44395 * C2293) * C80 -
                     (C20189 * C2285 + C44395 * C2288) * C91 -
                     (C20189 * C2291 + C44395 * C2294) * C81 +
                     (C20189 * C2286 + C44395 * C2289) * C92 +
                     (C20189 * C2292 + C44395 * C2295) * C82) *
                        C20188) *
                   C44512 * C44464 * C44449) /
                  (p * q * std::sqrt(p + q));
    d2eexy[36] += (2 * std::pow(Pi, 2.5) *
                   ((((C20189 * C93 + C44395 * C98) * C151 +
                      (C20189 * C152 + C44395 * C157) * C44449) *
                         C20186 +
                     ((C20189 * C642 + C44395 * C649) * C151 +
                      (C20189 * C709 + C44395 * C713) * C44449) *
                         C20187 +
                     ((C20189 * C2284 + C44395 * C2287) * C151 +
                      (C20189 * C2337 + C44395 * C2340) * C44449) *
                         C20188) *
                        C44512 * C80 -
                    (((C20189 * C2338 + C44395 * C2341) * C44449 +
                      (C20189 * C2285 + C44395 * C2288) * C151) *
                         C20188 +
                     ((C20189 * C708 + C44395 * C712) * C44449 +
                      (C20189 * C639 + C44395 * C643) * C151) *
                         C20187 +
                     ((C20189 * C153 + C44395 * C158) * C44449 +
                      (C20189 * C94 + C44395 * C99) * C151) *
                         C20186) *
                        C44512 * C81 +
                    (((C20189 * C95 + C44395 * C100) * C151 +
                      (C20189 * C154 + C44395 * C159) * C44449) *
                         C20186 +
                     ((C20189 * C640 + C44395 * C644) * C151 +
                      (C20189 * C707 + C44395 * C711) * C44449) *
                         C20187 +
                     ((C20189 * C2286 + C44395 * C2289) * C151 +
                      (C20189 * C2339 + C44395 * C2342) * C44449) *
                         C20188) *
                        C44512 * C82) *
                   C44464) /
                  (p * q * std::sqrt(p + q));
    d2eexz[36] += (2 * std::pow(Pi, 2.5) *
                   ((((C20189 * C93 + C44395 * C98) * C200 +
                      (C20189 * C201 + C44395 * C206) * C44464) *
                         C20186 +
                     ((C20189 * C642 + C44395 * C649) * C200 +
                      (C20189 * C767 + C44395 * C771) * C44464) *
                         C20187 +
                     ((C20189 * C2284 + C44395 * C2287) * C200 +
                      (C20189 * C2381 + C44395 * C2384) * C44464) *
                         C20188) *
                        C44512 * C44449 * C80 -
                    (((C20189 * C2382 + C44395 * C2385) * C44464 +
                      (C20189 * C2285 + C44395 * C2288) * C200) *
                         C20188 +
                     ((C20189 * C766 + C44395 * C770) * C44464 +
                      (C20189 * C639 + C44395 * C643) * C200) *
                         C20187 +
                     ((C20189 * C202 + C44395 * C207) * C44464 +
                      (C20189 * C94 + C44395 * C99) * C200) *
                         C20186) *
                        C44512 * C44449 * C81 +
                    (((C20189 * C95 + C44395 * C100) * C200 +
                      (C20189 * C203 + C44395 * C208) * C44464) *
                         C20186 +
                     ((C20189 * C640 + C44395 * C644) * C200 +
                      (C20189 * C765 + C44395 * C769) * C44464) *
                         C20187 +
                     ((C20189 * C2286 + C44395 * C2289) * C200 +
                      (C20189 * C2383 + C44395 * C2386) * C44464) *
                         C20188) *
                        C44512 * C44449 * C82)) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[36] += (2 * std::pow(Pi, 2.5) *
                   ((C20304 * C93 + C20186 * C250 + C20305 * C642 +
                     C20187 * C824 + C20306 * C2284 + C20188 * C2425) *
                        C90 +
                    (C20304 * C101 + C20186 * C255 + C20305 * C648 +
                     C20187 * C827 + C20306 * C2290 + C20188 * C2428) *
                        C80 -
                    (C20306 * C2285 + C20188 * C2426 + C20305 * C639 +
                     C20187 * C823 + C20304 * C94 + C20186 * C251) *
                        C91 -
                    (C20306 * C2291 + C20188 * C2429 + C20305 * C647 +
                     C20187 * C828 + C20304 * C102 + C20186 * C256) *
                        C81 +
                    (C20304 * C95 + C20186 * C252 + C20305 * C640 +
                     C20187 * C825 + C20306 * C2286 + C20188 * C2427) *
                        C92 +
                    (C20304 * C103 + C20186 * C257 + C20305 * C646 +
                     C20187 * C829 + C20306 * C2292 + C20188 * C2430) *
                        C82) *
                   C44512 * C44395 * C44464 * C44449) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[36] += (2 * std::pow(Pi, 2.5) *
                   (((C20304 * C93 + C20186 * C250 + C20305 * C642 +
                      C20187 * C824 + C20306 * C2284 + C20188 * C2425) *
                         C151 +
                     (C20304 * C152 + C20186 * C316 + C20305 * C709 +
                      C20187 * C893 + C20306 * C2337 + C20188 * C2469) *
                         C44449) *
                        C44512 * C44395 * C80 -
                    ((C20306 * C2338 + C20188 * C2470 + C20305 * C708 +
                      C20187 * C894 + C20304 * C153 + C20186 * C317) *
                         C44449 +
                     (C20306 * C2285 + C20188 * C2426 + C20305 * C639 +
                      C20187 * C823 + C20304 * C94 + C20186 * C251) *
                         C151) *
                        C44512 * C44395 * C81 +
                    ((C20304 * C95 + C20186 * C252 + C20305 * C640 +
                      C20187 * C825 + C20306 * C2286 + C20188 * C2427) *
                         C151 +
                     (C20304 * C154 + C20186 * C318 + C20305 * C707 +
                      C20187 * C895 + C20306 * C2339 + C20188 * C2471) *
                         C44449) *
                        C44512 * C44395 * C82) *
                   C44464) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[36] += (2 * std::pow(Pi, 2.5) *
                   (((C20304 * C93 + C20186 * C250 + C20305 * C642 +
                      C20187 * C824 + C20306 * C2284 + C20188 * C2425) *
                         C200 +
                     (C20304 * C201 + C20186 * C376 + C20305 * C767 +
                      C20187 * C963 + C20306 * C2381 + C20188 * C2510) *
                         C44464) *
                        C44512 * C44395 * C44449 * C80 -
                    ((C20306 * C2382 + C20188 * C2511 + C20305 * C766 +
                      C20187 * C962 + C20304 * C202 + C20186 * C377) *
                         C44464 +
                     (C20306 * C2285 + C20188 * C2426 + C20305 * C639 +
                      C20187 * C823 + C20304 * C94 + C20186 * C251) *
                         C200) *
                        C44512 * C44395 * C44449 * C81 +
                    ((C20304 * C95 + C20186 * C252 + C20305 * C640 +
                      C20187 * C825 + C20306 * C2286 + C20188 * C2427) *
                         C200 +
                     (C20304 * C203 + C20186 * C378 + C20305 * C765 +
                      C20187 * C961 + C20306 * C2383 + C20188 * C2512) *
                         C44464) *
                        C44512 * C44395 * C44449 * C82)) /
                  (p * q * std::sqrt(p + q));
    d2eezx[36] += (2 * std::pow(Pi, 2.5) *
                   (((C436 * C93 + C44512 * C437) * C90 +
                     (C436 * C101 + C44512 * C442) * C80 - C460 * C91 -
                     C461 * C81 + C462 * C92 + C463 * C82) *
                        C44395 * C20186 +
                    (C5512 * C90 + C5513 * C80 - C1042 * C91 - C1043 * C81 +
                     C1044 * C92 + C1045 * C82) *
                        C44395 * C20187 +
                    (C7327 * C90 + C7326 * C80 - C5514 * C91 - C5515 * C81 +
                     (C436 * C2286 + C44512 * C2553) * C92 +
                     (C436 * C2292 + C44512 * C2556) * C82) *
                        C44395 * C20188) *
                   C44464 * C44449) /
                  (p * q * std::sqrt(p + q));
    d2eezy[36] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C436 * C93 + C44512 * C437) * C151 +
            (C436 * C152 + C44512 * C503) * C44449) *
               C44395 * C20186 +
           (C5512 * C151 + C5591 * C44449) * C44395 * C20187 +
           (C7327 * C151 + C7384 * C44449) * C44395 * C20188) *
              C80 -
          ((C5592 * C44449 + C5514 * C151) * C44395 * C20188 +
           (C4911 + C4910) * C44395 * C20187 +
           (C521 + C509) * C44395 * C20186) *
              C81 +
          (C524 * C44395 * C20186 + (C4913 + C4912) * C44395 * C20187 +
           ((C436 * C2286 + C44512 * C2553) * C151 +
            (C436 * C2339 + C44512 * C2597) * C44449) *
               C44395 * C20188) *
              C82) *
         C44464) /
        (p * q * std::sqrt(p + q));
    d2eezz[36] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C436 * C93 + C44512 * C437) * C200 +
            (C436 * C201 + C44512 * C562) * C44464) *
               C44395 * C20186 +
           (C5660 + C5670) * C44395 * C20187 +
           (C7439 + C7441) * C44395 * C20188) *
              C44449 * C80 -
          ((C5671 + C5666) * C44395 * C20188 + C5667 * C44395 * C20187 +
           (C580 + C568) * C44395 * C20186) *
              C44449 * C81 +
          (C583 * C44395 * C20186 + (C1170 + C1176) * C44395 * C20187 +
           ((C436 * C2286 + C44512 * C2553) * C200 +
            (C436 * C2383 + C44512 * C2638) * C44464) *
               C44395 * C20188) *
              C44449 * C82)) /
        (p * q * std::sqrt(p + q));
    d2eexx[37] += (2 * std::pow(Pi, 2.5) *
                   ((((C20189 * C93 + C44395 * C98) * C637 +
                      (C20189 * C101 + C44395 * C108) * C633 -
                      (C20189 * C94 + C44395 * C99) * C638 -
                      (C20189 * C102 + C44395 * C109) * C44595) *
                         C20186 +
                     (C20572 + C20573 - C20574 - C20575) * C20187 +
                     (C20576 + C20577 - C20578 - C20579) * C20188) *
                        C44512 * C44464 * C635 +
                    ((C20574 - (C20573 + C20572) + C20575) * C20186 +
                     (C20578 - (C20577 + C20576) + C20579) * C20187 +
                     ((C20189 * C6964 + C44395 * C6966) * C638 -
                      ((C20189 * C6967 + C44395 * C6969) * C633 +
                       (C20189 * C6963 + C44395 * C6965) * C637) +
                      (C20189 * C6968 + C44395 * C6970) * C44595) *
                         C20188) *
                        C44512 * C44464 * C44597)) /
                  (p * q * std::sqrt(p + q));
    d2eexy[37] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C20189 * C93 + C44395 * C98) * C705 +
            (C20189 * C152 + C44395 * C157) * C635 - C20564 * C706 -
            C20638 * C44597) *
               C20186 +
           (C20564 * C705 + C20638 * C635 - C20568 * C706 - C20639 * C44597) *
               C20187 +
           (C20568 * C705 + C20639 * C635 -
            (C20189 * C6963 + C44395 * C6965) * C706 -
            (C20189 * C7033 + C44395 * C7035) * C44597) *
               C20188) *
              C44512 * C633 +
          ((C20566 * C706 -
            ((C20189 * C153 + C44395 * C158) * C635 +
             (C20189 * C94 + C44395 * C99) * C705) +
            C20640 * C44597) *
               C20186 +
           (C20570 * C706 - (C20640 * C635 + C20566 * C705) + C20641 * C44597) *
               C20187 +
           ((C20189 * C6964 + C44395 * C6966) * C706 -
            (C20641 * C635 + C20570 * C705) +
            (C20189 * C7034 + C44395 * C7036) * C44597) *
               C20188) *
              C44512 * C44595) *
         C44464) /
        (p * q * std::sqrt(p + q));
    d2eexz[37] += (2 * std::pow(Pi, 2.5) *
                   (((((C20189 * C93 + C44395 * C98) * C200 +
                       (C20189 * C201 + C44395 * C206) * C44464) *
                          C20186 +
                      (C20692 + C20708) * C20187 + (C20695 + C20709) * C20188) *
                         C44512 * C635 -
                     (((C20189 * C7093 + C44395 * C7095) * C44464 +
                       (C20189 * C6963 + C44395 * C6965) * C200) *
                          C20188 +
                      (C20709 + C20695) * C20187 + (C20708 + C20692) * C20186) *
                         C44512 * C44597) *
                        C633 +
                    (((C20698 + C20710) * C20186 + (C20701 + C20711) * C20187 +
                      ((C20189 * C6964 + C44395 * C6966) * C200 +
                       (C20189 * C7094 + C44395 * C7096) * C44464) *
                          C20188) *
                         C44512 * C44597 -
                     ((C20711 + C20701) * C20188 + (C20710 + C20698) * C20187 +
                      ((C20189 * C202 + C44395 * C207) * C44464 +
                       (C20189 * C94 + C44395 * C99) * C200) *
                          C20186) *
                         C44512 * C635) *
                        C44595)) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[37] += (2 * std::pow(Pi, 2.5) *
                   (((C20304 * C93 + C20186 * C250 + C20305 * C642 +
                      C20187 * C824 + C20306 * C2284 + C20188 * C2425) *
                         C637 +
                     (C20304 * C101 + C20186 * C255 + C20305 * C648 +
                      C20187 * C827 + C20306 * C2290 + C20188 * C2428) *
                         C633 -
                     (C20306 * C2285 + C20188 * C2426 + C20305 * C639 +
                      C20187 * C823 + C20304 * C94 + C20186 * C251) *
                         C638 -
                     (C20306 * C2291 + C20188 * C2429 + C20305 * C647 +
                      C20187 * C828 + C20304 * C102 + C20186 * C256) *
                         C44595) *
                        C44512 * C44395 * C44464 * C635 +
                    ((C20304 * C639 + C20186 * C823 + C20305 * C2285 +
                      C20187 * C2426 + C20306 * C6964 + C20188 * C7154) *
                         C638 -
                     ((C20306 * C6967 + C20188 * C7155 + C20305 * C2290 +
                       C20187 * C2428 + C20304 * C648 + C20186 * C827) *
                          C633 +
                      (C20306 * C6963 + C20188 * C7153 + C20305 * C2284 +
                       C20187 * C2425 + C20304 * C642 + C20186 * C824) *
                          C637) +
                     (C20304 * C647 + C20186 * C828 + C20305 * C2291 +
                      C20187 * C2429 + C20306 * C6968 + C20188 * C7156) *
                         C44595) *
                        C44512 * C44395 * C44464 * C44597)) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[37] += (2 * std::pow(Pi, 2.5) *
                   (((C20304 * C93 + C20186 * C250 + C20305 * C642 +
                      C20187 * C824 + C20306 * C2284 + C20188 * C2425) *
                         C705 +
                     (C20304 * C152 + C20186 * C316 + C20305 * C709 +
                      C20187 * C893 + C20306 * C2337 + C20188 * C2469) *
                         C635 -
                     (C20306 * C6963 + C20188 * C7153 + C20305 * C2284 +
                      C20187 * C2425 + C20304 * C642 + C20186 * C824) *
                         C706 -
                     (C20306 * C7033 + C20188 * C7207 + C20305 * C2337 +
                      C20187 * C2469 + C20304 * C709 + C20186 * C893) *
                         C44597) *
                        C44512 * C44395 * C633 +
                    ((C20304 * C639 + C20186 * C823 + C20305 * C2285 +
                      C20187 * C2426 + C20306 * C6964 + C20188 * C7154) *
                         C706 -
                     ((C20306 * C2338 + C20188 * C2470 + C20305 * C708 +
                       C20187 * C894 + C20304 * C153 + C20186 * C317) *
                          C635 +
                      (C20306 * C2285 + C20188 * C2426 + C20305 * C639 +
                       C20187 * C823 + C20304 * C94 + C20186 * C251) *
                          C705) +
                     (C20304 * C708 + C20186 * C894 + C20305 * C2338 +
                      C20187 * C2470 + C20306 * C7034 + C20188 * C7208) *
                         C44597) *
                        C44512 * C44395 * C44595) *
                   C44464) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[37] += (2 * std::pow(Pi, 2.5) *
                   ((((C20304 * C93 + C20186 * C250 + C20305 * C642 +
                       C20187 * C824 + C20306 * C2284 + C20188 * C2425) *
                          C200 +
                      (C20304 * C201 + C20186 * C376 + C20305 * C767 +
                       C20187 * C963 + C20306 * C2381 + C20188 * C2510) *
                          C44464) *
                         C44512 * C44395 * C635 -
                     ((C20306 * C7093 + C20188 * C7259 + C20305 * C2381 +
                       C20187 * C2510 + C20304 * C767 + C20186 * C963) *
                          C44464 +
                      (C20306 * C6963 + C20188 * C7153 + C20305 * C2284 +
                       C20187 * C2425 + C20304 * C642 + C20186 * C824) *
                          C200) *
                         C44512 * C44395 * C44597) *
                        C633 +
                    (((C20304 * C639 + C20186 * C823 + C20305 * C2285 +
                       C20187 * C2426 + C20306 * C6964 + C20188 * C7154) *
                          C200 +
                      (C20304 * C766 + C20186 * C962 + C20305 * C2382 +
                       C20187 * C2511 + C20306 * C7094 + C20188 * C7260) *
                          C44464) *
                         C44512 * C44395 * C44597 -
                     ((C20306 * C2382 + C20188 * C2511 + C20305 * C766 +
                       C20187 * C962 + C20304 * C202 + C20186 * C377) *
                          C44464 +
                      (C20306 * C2285 + C20188 * C2426 + C20305 * C639 +
                       C20187 * C823 + C20304 * C94 + C20186 * C251) *
                          C200) *
                         C44512 * C44395 * C635) *
                        C44595)) /
                  (p * q * std::sqrt(p + q));
    d2eezx[37] += (2 * std::pow(Pi, 2.5) *
                   ((((C436 * C93 + C44512 * C437) * C637 +
                      (C436 * C101 + C44512 * C442) * C633 - C460 * C638 -
                      C461 * C44595) *
                         C44395 * C20186 +
                     (C5516 + C5517 - C5502 - C5503) * C44395 * C20187 +
                     (C20912 + C20913 - C20914 - C20915) * C44395 * C20188) *
                        C44464 * C635 +
                    ((C5502 - (C5517 + C5516) + C5503) * C44395 * C20186 +
                     (C20914 - (C20913 + C20912) + C20915) * C44395 * C20187 +
                     ((C436 * C6964 + C44512 * C7312) * C638 -
                      ((C436 * C6967 + C44512 * C7313) * C633 +
                       (C436 * C6963 + C44512 * C7311) * C637) +
                      (C436 * C6968 + C44512 * C7314) * C44595) *
                         C44395 * C20188) *
                        C44464 * C44597)) /
                  (p * q * std::sqrt(p + q));
    d2eezy[37] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C436 * C93 + C44512 * C437) * C705 +
            (C436 * C152 + C44512 * C503) * C635 - C5512 * C706 -
            C5591 * C44597) *
               C44395 * C20186 +
           (C5512 * C705 + C5591 * C635 - C7327 * C706 - C7384 * C44597) *
               C44395 * C20187 +
           (C7327 * C705 + C7384 * C635 -
            (C436 * C6963 + C44512 * C7311) * C706 -
            (C436 * C7033 + C44512 * C7379) * C44597) *
               C44395 * C20188) *
              C633 +
          ((C1102 - (C1101 + C1100) + C1112) * C44395 * C20186 +
           (C5588 - (C5587 + C5586) + C5593) * C44395 * C20187 +
           ((C436 * C6964 + C44512 * C7312) * C706 -
            (C5592 * C635 + C5514 * C705) +
            (C436 * C7034 + C44512 * C7380) * C44597) *
               C44395 * C20188) *
              C44595) *
         C44464) /
        (p * q * std::sqrt(p + q));
    d2eezz[37] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C436 * C93 + C44512 * C437) * C200 +
             (C436 * C201 + C44512 * C562) * C44464) *
                C44395 * C20186 +
            (C5660 + C5670) * C44395 * C20187 +
            (C7439 + C7441) * C44395 * C20188) *
               C635 -
           (((C436 * C7093 + C44512 * C7434) * C44464 +
             (C436 * C6963 + C44512 * C7311) * C200) *
                C44395 * C20188 +
            (C7441 + C7439) * C44395 * C20187 +
            (C5670 + C5660) * C44395 * C20186) *
               C44597) *
              C633 +
          ((C5663 * C44395 * C20186 + (C5666 + C5671) * C44395 * C20187 +
            ((C436 * C6964 + C44512 * C7312) * C200 +
             (C436 * C7094 + C44512 * C7435) * C44464) *
                C44395 * C20188) *
               C44597 -
           ((C5671 + C5666) * C44395 * C20188 + C5667 * C44395 * C20187 +
            (C580 + C568) * C44395 * C20186) *
               C635) *
              C44595)) /
        (p * q * std::sqrt(p + q));
    d2eexx[38] += (2 * std::pow(Pi, 2.5) *
                   ((((C20189 * C93 + C44395 * C98) * C637 +
                      (C20189 * C101 + C44395 * C108) * C633 -
                      (C20189 * C94 + C44395 * C99) * C638 -
                      (C20189 * C102 + C44395 * C109) * C44595) *
                         C20186 +
                     (C20572 + C20573 - C20574 - C20575) * C20187 +
                     (C20576 + C20577 - C20578 - C20579) * C20188) *
                        C44512 * C1227 +
                    (((C20189 * C1229 + C44395 * C1233) * C638 -
                      ((C20189 * C1238 + C44395 * C1243) * C633 +
                       (C20189 * C1232 + C44395 * C1239) * C637) +
                      (C20189 * C1237 + C44395 * C1242) * C44595) *
                         C20186 +
                     ((C20189 * C2690 + C44395 * C2693) * C638 -
                      ((C20189 * C2695 + C44395 * C2698) * C633 +
                       (C20189 * C2689 + C44395 * C2692) * C637) +
                      (C20189 * C2696 + C44395 * C2699) * C44595) *
                         C20187 +
                     ((C20189 * C7508 + C44395 * C7510) * C638 -
                      ((C20189 * C7511 + C44395 * C7513) * C633 +
                       (C20189 * C7507 + C44395 * C7509) * C637) +
                      (C20189 * C7512 + C44395 * C7514) * C44595) *
                         C20188) *
                        C44512 * C44599) *
                   C44449) /
                  (p * q * std::sqrt(p + q));
    d2eexy[38] += (2 * std::pow(Pi, 2.5) *
                   (((((C20189 * C93 + C44395 * C98) * C151 +
                       (C20189 * C152 + C44395 * C157) * C44449) *
                          C20186 +
                      (C20564 * C151 + C20638 * C44449) * C20187 +
                      (C20568 * C151 + C20639 * C44449) * C20188) *
                         C44512 * C633 -
                     ((C20641 * C44449 + C20570 * C151) * C20188 +
                      (C20640 * C44449 + C20566 * C151) * C20187 +
                      ((C20189 * C153 + C44395 * C158) * C44449 +
                       (C20189 * C94 + C44395 * C99) * C151) *
                          C20186) *
                         C44512 * C44595) *
                        C1227 +
                    ((((C20189 * C1229 + C44395 * C1233) * C151 +
                       (C20189 * C1295 + C44395 * C1299) * C44449) *
                          C20186 +
                      ((C20189 * C2690 + C44395 * C2693) * C151 +
                       (C20189 * C2752 + C44395 * C2755) * C44449) *
                          C20187 +
                      ((C20189 * C7508 + C44395 * C7510) * C151 +
                       (C20189 * C7594 + C44395 * C7596) * C44449) *
                          C20188) *
                         C44512 * C44595 -
                     (((C20189 * C7593 + C44395 * C7595) * C44449 +
                       (C20189 * C7507 + C44395 * C7509) * C151) *
                          C20188 +
                      ((C20189 * C2751 + C44395 * C2754) * C44449 +
                       (C20189 * C2689 + C44395 * C2692) * C151) *
                          C20187 +
                      ((C20189 * C1298 + C44395 * C1302) * C44449 +
                       (C20189 * C1232 + C44395 * C1239) * C151) *
                          C20186) *
                         C44512 * C633) *
                        C44599)) /
                  (p * q * std::sqrt(p + q));
    d2eexz[38] += (2 * std::pow(Pi, 2.5) *
                   ((((C20189 * C93 + C44395 * C98) * C1353 +
                      (C20189 * C201 + C44395 * C206) * C1227 -
                      (C20189 * C1232 + C44395 * C1239) * C1354 -
                      (C20189 * C1357 + C44395 * C1361) * C44599) *
                         C20186 +
                     (C20564 * C1353 + C20704 * C1227 -
                      (C20189 * C2689 + C44395 * C2692) * C1354 -
                      (C20189 * C2807 + C44395 * C2810) * C44599) *
                         C20187 +
                     (C20568 * C1353 + C20705 * C1227 -
                      (C20189 * C7507 + C44395 * C7509) * C1354 -
                      (C20189 * C7669 + C44395 * C7671) * C44599) *
                         C20188) *
                        C44512 * C44449 * C633 +
                    (((C20189 * C1229 + C44395 * C1233) * C1354 -
                      ((C20189 * C202 + C44395 * C207) * C1227 +
                       (C20189 * C94 + C44395 * C99) * C1353) +
                      (C20189 * C1356 + C44395 * C1360) * C44599) *
                         C20186 +
                     ((C20189 * C2690 + C44395 * C2693) * C1354 -
                      (C20706 * C1227 + C20566 * C1353) +
                      (C20189 * C2808 + C44395 * C2811) * C44599) *
                         C20187 +
                     ((C20189 * C7508 + C44395 * C7510) * C1354 -
                      (C20707 * C1227 + C20570 * C1353) +
                      (C20189 * C7670 + C44395 * C7672) * C44599) *
                         C20188) *
                        C44512 * C44449 * C44595)) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[38] += (2 * std::pow(Pi, 2.5) *
                   (((C20304 * C93 + C20186 * C250 + C20305 * C642 +
                      C20187 * C824 + C20306 * C2284 + C20188 * C2425) *
                         C637 +
                     (C20304 * C101 + C20186 * C255 + C20305 * C648 +
                      C20187 * C827 + C20306 * C2290 + C20188 * C2428) *
                         C633 -
                     (C20306 * C2285 + C20188 * C2426 + C20305 * C639 +
                      C20187 * C823 + C20304 * C94 + C20186 * C251) *
                         C638 -
                     (C20306 * C2291 + C20188 * C2429 + C20305 * C647 +
                      C20187 * C828 + C20304 * C102 + C20186 * C256) *
                         C44595) *
                        C44512 * C44395 * C1227 +
                    ((C20304 * C1229 + C20186 * C1413 + C20305 * C2690 +
                      C20187 * C2864 + C20306 * C7508 + C20188 * C7746) *
                         C638 -
                     ((C20306 * C7511 + C20188 * C7747 + C20305 * C2695 +
                       C20187 * C2866 + C20304 * C1238 + C20186 * C1417) *
                          C633 +
                      (C20306 * C7507 + C20188 * C7745 + C20305 * C2689 +
                       C20187 * C2863 + C20304 * C1232 + C20186 * C1414) *
                          C637) +
                     (C20304 * C1237 + C20186 * C1418 + C20305 * C2696 +
                      C20187 * C2867 + C20306 * C7512 + C20188 * C7748) *
                         C44595) *
                        C44512 * C44395 * C44599) *
                   C44449) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[38] += (2 * std::pow(Pi, 2.5) *
                   ((((C20304 * C93 + C20186 * C250 + C20305 * C642 +
                       C20187 * C824 + C20306 * C2284 + C20188 * C2425) *
                          C151 +
                      (C20304 * C152 + C20186 * C316 + C20305 * C709 +
                       C20187 * C893 + C20306 * C2337 + C20188 * C2469) *
                          C44449) *
                         C44512 * C44395 * C633 -
                     ((C20306 * C2338 + C20188 * C2470 + C20305 * C708 +
                       C20187 * C894 + C20304 * C153 + C20186 * C317) *
                          C44449 +
                      (C20306 * C2285 + C20188 * C2426 + C20305 * C639 +
                       C20187 * C823 + C20304 * C94 + C20186 * C251) *
                          C151) *
                         C44512 * C44395 * C44595) *
                        C1227 +
                    (((C20304 * C1229 + C20186 * C1413 + C20305 * C2690 +
                       C20187 * C2864 + C20306 * C7508 + C20188 * C7746) *
                          C151 +
                      (C20304 * C1295 + C20186 * C1483 + C20305 * C2752 +
                       C20187 * C2920 + C20306 * C7594 + C20188 * C7816) *
                          C44449) *
                         C44512 * C44395 * C44595 -
                     ((C20306 * C7593 + C20188 * C7815 + C20305 * C2751 +
                       C20187 * C2919 + C20304 * C1298 + C20186 * C1486) *
                          C44449 +
                      (C20306 * C7507 + C20188 * C7745 + C20305 * C2689 +
                       C20187 * C2863 + C20304 * C1232 + C20186 * C1414) *
                          C151) *
                         C44512 * C44395 * C633) *
                        C44599)) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[38] += (2 * std::pow(Pi, 2.5) *
                   (((C20304 * C93 + C20186 * C250 + C20305 * C642 +
                      C20187 * C824 + C20306 * C2284 + C20188 * C2425) *
                         C1353 +
                     (C20304 * C201 + C20186 * C376 + C20305 * C767 +
                      C20187 * C963 + C20306 * C2381 + C20188 * C2510) *
                         C1227 -
                     (C20306 * C7507 + C20188 * C7745 + C20305 * C2689 +
                      C20187 * C2863 + C20304 * C1232 + C20186 * C1414) *
                         C1354 -
                     (C20306 * C7669 + C20188 * C7883 + C20305 * C2807 +
                      C20187 * C2972 + C20304 * C1357 + C20186 * C1547) *
                         C44599) *
                        C44512 * C44395 * C44449 * C633 +
                    ((C20304 * C1229 + C20186 * C1413 + C20305 * C2690 +
                      C20187 * C2864 + C20306 * C7508 + C20188 * C7746) *
                         C1354 -
                     ((C20306 * C2382 + C20188 * C2511 + C20305 * C766 +
                       C20187 * C962 + C20304 * C202 + C20186 * C377) *
                          C1227 +
                      (C20306 * C2285 + C20188 * C2426 + C20305 * C639 +
                       C20187 * C823 + C20304 * C94 + C20186 * C251) *
                          C1353) +
                     (C20304 * C1356 + C20186 * C1548 + C20305 * C2808 +
                      C20187 * C2973 + C20306 * C7670 + C20188 * C7884) *
                         C44599) *
                        C44512 * C44395 * C44449 * C44595)) /
                  (p * q * std::sqrt(p + q));
    d2eezx[38] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C436 * C93 + C44512 * C437) * C637 +
            (C436 * C101 + C44512 * C442) * C633 - C460 * C638 -
            C461 * C44595) *
               C44395 * C20186 +
           (C5516 + C5517 - C5502 - C5503) * C44395 * C20187 +
           (C20912 + C20913 - C20914 - C20915) * C44395 * C20188) *
              C1227 +
          ((C1632 * C638 -
            ((C436 * C1238 + C44512 * C1619) * C633 +
             (C436 * C1232 + C44512 * C1616) * C637) +
            C1633 * C44595) *
               C44395 * C20186 +
           (C6162 * C638 - (C7962 * C633 + C7963 * C637) + C6163 * C44595) *
               C44395 * C20187 +
           ((C436 * C7508 + C44512 * C7952) * C638 -
            ((C436 * C7511 + C44512 * C7953) * C633 +
             (C436 * C7507 + C44512 * C7951) * C637) +
            (C436 * C7512 + C44512 * C7954) * C44595) *
               C44395 * C20188) *
              C44599) *
         C44449) /
        (p * q * std::sqrt(p + q));
    d2eezy[38] += (2 * std::pow(Pi, 2.5) *
                   (((((C436 * C93 + C44512 * C437) * C151 +
                       (C436 * C152 + C44512 * C503) * C44449) *
                          C44395 * C20186 +
                      (C5512 * C151 + C5591 * C44449) * C44395 * C20187 +
                      (C7327 * C151 + C7384 * C44449) * C44395 * C20188) *
                         C633 -
                     ((C5592 * C44449 + C5514 * C151) * C44395 * C20188 +
                      (C4911 + C4910) * C44395 * C20187 +
                      (C521 + C509) * C44395 * C20186) *
                         C44595) *
                        C1227 +
                    (((C1690 + C1698) * C44395 * C20186 +
                      (C6230 + C6234) * C44395 * C20187 +
                      ((C436 * C7508 + C44512 * C7952) * C151 +
                       (C436 * C7594 + C44512 * C8032) * C44449) *
                          C44395 * C20188) *
                         C44595 -
                     (((C436 * C7593 + C44512 * C8031) * C44449 +
                       (C436 * C7507 + C44512 * C7951) * C151) *
                          C44395 * C20188 +
                      (C8036 * C44449 + C7963 * C151) * C44395 * C20187 +
                      ((C436 * C1298 + C44512 * C1688) * C44449 +
                       (C436 * C1232 + C44512 * C1616) * C151) *
                          C44395 * C20186) *
                         C633) *
                        C44599)) /
                  (p * q * std::sqrt(p + q));
    d2eezz[38] += (2 * std::pow(Pi, 2.5) *
                   ((((C436 * C93 + C44512 * C437) * C1353 +
                      (C436 * C201 + C44512 * C562) * C1227 -
                      (C436 * C1232 + C44512 * C1616) * C1354 -
                      (C436 * C1357 + C44512 * C1749) * C44599) *
                         C44395 * C20186 +
                     (C8105 + C8106 - C8107 - C8111) * C44395 * C20187 +
                     (C7327 * C1353 + C7440 * C1227 -
                      (C436 * C7507 + C44512 * C7951) * C1354 -
                      (C436 * C7669 + C44512 * C8102) * C44599) *
                         C44395 * C20188) *
                        C44449 * C633 +
                    ((C1756 - (C1755 + C1754) + C1766) * C44395 * C20186 +
                     (C6303 - (C6302 + C6301) + C6307) * C44395 * C20187 +
                     ((C436 * C7508 + C44512 * C7952) * C1354 -
                      (C5669 * C1227 + C5514 * C1353) +
                      (C436 * C7670 + C44512 * C8103) * C44599) *
                         C44395 * C20188) *
                        C44449 * C44595)) /
                  (p * q * std::sqrt(p + q));
    d2eexx[39] += (2 * std::pow(Pi, 2.5) *
                   ((((C20189 * C93 + C44395 * C98) * C1821 +
                      (C20189 * C101 + C44395 * C108) * C1817 -
                      (C20189 * C94 + C44395 * C99) * C1822 -
                      (C20189 * C102 + C44395 * C109) * C44595) *
                         C20186 +
                     (C21516 + C21517 - C21518 - C21519) * C20187 +
                     (C21520 + C21521 - C21522 - C21523) * C20188) *
                        C44512 * C44464 * C1819 +
                    ((C21518 - (C21517 + C21516) + C21519) * C20186 +
                     (C21522 - (C21521 + C21520) + C21523) * C20187 +
                     ((C20189 * C6964 + C44395 * C6966) * C1822 -
                      ((C20189 * C6967 + C44395 * C6969) * C1817 +
                       (C20189 * C6963 + C44395 * C6965) * C1821) +
                      (C20189 * C6968 + C44395 * C6970) * C44595) *
                         C20188) *
                        C44512 * C44464 * C44597)) /
                  (p * q * std::sqrt(p + q));
    d2eexy[39] += (2 * std::pow(Pi, 2.5) *
                   ((((C20189 * C93 + C44395 * C98) * C1873 +
                      (C20189 * C152 + C44395 * C157) * C1819 - C20564 * C1874 -
                      C20638 * C44597) *
                         C20186 +
                     (C20564 * C1873 + C20638 * C1819 - C20568 * C1874 -
                      C20639 * C44597) *
                         C20187 +
                     (C20568 * C1873 + C20639 * C1819 -
                      (C20189 * C6963 + C44395 * C6965) * C1874 -
                      (C20189 * C7033 + C44395 * C7035) * C44597) *
                         C20188) *
                        C44512 * C1817 +
                    ((C20566 * C1874 -
                      ((C20189 * C153 + C44395 * C158) * C1819 +
                       (C20189 * C94 + C44395 * C99) * C1873) +
                      C20640 * C44597) *
                         C20186 +
                     (C20570 * C1874 - (C20640 * C1819 + C20566 * C1873) +
                      C20641 * C44597) *
                         C20187 +
                     ((C20189 * C6964 + C44395 * C6966) * C1874 -
                      (C20641 * C1819 + C20570 * C1873) +
                      (C20189 * C7034 + C44395 * C7036) * C44597) *
                         C20188) *
                        C44512 * C44595) *
                   C44464) /
                  (p * q * std::sqrt(p + q));
    d2eexz[39] += (2 * std::pow(Pi, 2.5) *
                   (((((C20189 * C93 + C44395 * C98) * C200 +
                       (C20189 * C201 + C44395 * C206) * C44464) *
                          C20186 +
                      (C20692 + C20708) * C20187 + (C20695 + C20709) * C20188) *
                         C44512 * C1819 -
                     (((C20189 * C7093 + C44395 * C7095) * C44464 +
                       (C20189 * C6963 + C44395 * C6965) * C200) *
                          C20188 +
                      (C20709 + C20695) * C20187 + (C20708 + C20692) * C20186) *
                         C44512 * C44597) *
                        C1817 +
                    (((C20698 + C20710) * C20186 + (C20701 + C20711) * C20187 +
                      ((C20189 * C6964 + C44395 * C6966) * C200 +
                       (C20189 * C7094 + C44395 * C7096) * C44464) *
                          C20188) *
                         C44512 * C44597 -
                     ((C20711 + C20701) * C20188 + (C20710 + C20698) * C20187 +
                      ((C20189 * C202 + C44395 * C207) * C44464 +
                       (C20189 * C94 + C44395 * C99) * C200) *
                          C20186) *
                         C44512 * C1819) *
                        C44595)) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[39] += (2 * std::pow(Pi, 2.5) *
                   (((C20304 * C93 + C20186 * C250 + C20305 * C642 +
                      C20187 * C824 + C20306 * C2284 + C20188 * C2425) *
                         C1821 +
                     (C20304 * C101 + C20186 * C255 + C20305 * C648 +
                      C20187 * C827 + C20306 * C2290 + C20188 * C2428) *
                         C1817 -
                     (C20306 * C2285 + C20188 * C2426 + C20305 * C639 +
                      C20187 * C823 + C20304 * C94 + C20186 * C251) *
                         C1822 -
                     (C20306 * C2291 + C20188 * C2429 + C20305 * C647 +
                      C20187 * C828 + C20304 * C102 + C20186 * C256) *
                         C44595) *
                        C44512 * C44395 * C44464 * C1819 +
                    ((C20304 * C639 + C20186 * C823 + C20305 * C2285 +
                      C20187 * C2426 + C20306 * C6964 + C20188 * C7154) *
                         C1822 -
                     ((C20306 * C6967 + C20188 * C7155 + C20305 * C2290 +
                       C20187 * C2428 + C20304 * C648 + C20186 * C827) *
                          C1817 +
                      (C20306 * C6963 + C20188 * C7153 + C20305 * C2284 +
                       C20187 * C2425 + C20304 * C642 + C20186 * C824) *
                          C1821) +
                     (C20304 * C647 + C20186 * C828 + C20305 * C2291 +
                      C20187 * C2429 + C20306 * C6968 + C20188 * C7156) *
                         C44595) *
                        C44512 * C44395 * C44464 * C44597)) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[39] += (2 * std::pow(Pi, 2.5) *
                   (((C20304 * C93 + C20186 * C250 + C20305 * C642 +
                      C20187 * C824 + C20306 * C2284 + C20188 * C2425) *
                         C1873 +
                     (C20304 * C152 + C20186 * C316 + C20305 * C709 +
                      C20187 * C893 + C20306 * C2337 + C20188 * C2469) *
                         C1819 -
                     (C20306 * C6963 + C20188 * C7153 + C20305 * C2284 +
                      C20187 * C2425 + C20304 * C642 + C20186 * C824) *
                         C1874 -
                     (C20306 * C7033 + C20188 * C7207 + C20305 * C2337 +
                      C20187 * C2469 + C20304 * C709 + C20186 * C893) *
                         C44597) *
                        C44512 * C44395 * C1817 +
                    ((C20304 * C639 + C20186 * C823 + C20305 * C2285 +
                      C20187 * C2426 + C20306 * C6964 + C20188 * C7154) *
                         C1874 -
                     ((C20306 * C2338 + C20188 * C2470 + C20305 * C708 +
                       C20187 * C894 + C20304 * C153 + C20186 * C317) *
                          C1819 +
                      (C20306 * C2285 + C20188 * C2426 + C20305 * C639 +
                       C20187 * C823 + C20304 * C94 + C20186 * C251) *
                          C1873) +
                     (C20304 * C708 + C20186 * C894 + C20305 * C2338 +
                      C20187 * C2470 + C20306 * C7034 + C20188 * C7208) *
                         C44597) *
                        C44512 * C44395 * C44595) *
                   C44464) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[39] += (2 * std::pow(Pi, 2.5) *
                   ((((C20304 * C93 + C20186 * C250 + C20305 * C642 +
                       C20187 * C824 + C20306 * C2284 + C20188 * C2425) *
                          C200 +
                      (C20304 * C201 + C20186 * C376 + C20305 * C767 +
                       C20187 * C963 + C20306 * C2381 + C20188 * C2510) *
                          C44464) *
                         C44512 * C44395 * C1819 -
                     ((C20306 * C7093 + C20188 * C7259 + C20305 * C2381 +
                       C20187 * C2510 + C20304 * C767 + C20186 * C963) *
                          C44464 +
                      (C20306 * C6963 + C20188 * C7153 + C20305 * C2284 +
                       C20187 * C2425 + C20304 * C642 + C20186 * C824) *
                          C200) *
                         C44512 * C44395 * C44597) *
                        C1817 +
                    (((C20304 * C639 + C20186 * C823 + C20305 * C2285 +
                       C20187 * C2426 + C20306 * C6964 + C20188 * C7154) *
                          C200 +
                      (C20304 * C766 + C20186 * C962 + C20305 * C2382 +
                       C20187 * C2511 + C20306 * C7094 + C20188 * C7260) *
                          C44464) *
                         C44512 * C44395 * C44597 -
                     ((C20306 * C2382 + C20188 * C2511 + C20305 * C766 +
                       C20187 * C962 + C20304 * C202 + C20186 * C377) *
                          C44464 +
                      (C20306 * C2285 + C20188 * C2426 + C20305 * C639 +
                       C20187 * C823 + C20304 * C94 + C20186 * C251) *
                          C200) *
                         C44512 * C44395 * C1819) *
                        C44595)) /
                  (p * q * std::sqrt(p + q));
    d2eezx[39] += (2 * std::pow(Pi, 2.5) *
                   ((((C436 * C93 + C44512 * C437) * C1821 +
                      (C436 * C101 + C44512 * C442) * C1817 - C460 * C1822 -
                      C461 * C44595) *
                         C44395 * C20186 +
                     (C6770 + C6771 - C6772 - C6773) * C44395 * C20187 +
                     (C21824 + C21825 - C21826 - C21827) * C44395 * C20188) *
                        C44464 * C1819 +
                    ((C6772 - (C6771 + C6770) + C6773) * C44395 * C20186 +
                     (C21826 - (C21825 + C21824) + C21827) * C44395 * C20187 +
                     ((C436 * C6964 + C44512 * C7312) * C1822 -
                      ((C436 * C6967 + C44512 * C7313) * C1817 +
                       (C436 * C6963 + C44512 * C7311) * C1821) +
                      (C436 * C6968 + C44512 * C7314) * C44595) *
                         C44395 * C20188) *
                        C44464 * C44597)) /
                  (p * q * std::sqrt(p + q));
    d2eezy[39] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C436 * C93 + C44512 * C437) * C1873 +
            (C436 * C152 + C44512 * C503) * C1819 - C5512 * C1874 -
            C5591 * C44597) *
               C44395 * C20186 +
           (C5512 * C1873 + C5591 * C1819 - C7327 * C1874 - C7384 * C44597) *
               C44395 * C20187 +
           (C7327 * C1873 + C7384 * C1819 -
            (C436 * C6963 + C44512 * C7311) * C1874 -
            (C436 * C7033 + C44512 * C7379) * C44597) *
               C44395 * C20188) *
              C1817 +
          ((C2186 - (C2185 + C2184) + C2187) * C44395 * C20186 +
           (C6846 - (C6845 + C6844) + C6847) * C44395 * C20187 +
           ((C436 * C6964 + C44512 * C7312) * C1874 -
            (C5592 * C1819 + C5514 * C1873) +
            (C436 * C7034 + C44512 * C7380) * C44597) *
               C44395 * C20188) *
              C44595) *
         C44464) /
        (p * q * std::sqrt(p + q));
    d2eezz[39] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C436 * C93 + C44512 * C437) * C200 +
             (C436 * C201 + C44512 * C562) * C44464) *
                C44395 * C20186 +
            (C5660 + C5670) * C44395 * C20187 +
            (C7439 + C7441) * C44395 * C20188) *
               C1819 -
           (((C436 * C7093 + C44512 * C7434) * C44464 +
             (C436 * C6963 + C44512 * C7311) * C200) *
                C44395 * C20188 +
            (C7441 + C7439) * C44395 * C20187 +
            (C5670 + C5660) * C44395 * C20186) *
               C44597) *
              C1817 +
          ((C5663 * C44395 * C20186 + (C5666 + C5671) * C44395 * C20187 +
            ((C436 * C6964 + C44512 * C7312) * C200 +
             (C436 * C7094 + C44512 * C7435) * C44464) *
                C44395 * C20188) *
               C44597 -
           ((C5671 + C5666) * C44395 * C20188 + C5667 * C44395 * C20187 +
            (C580 + C568) * C44395 * C20186) *
               C1819) *
              C44595)) /
        (p * q * std::sqrt(p + q));
    d2eexx[40] += (2 * std::pow(Pi, 2.5) *
                   ((((C20189 * C93 + C44395 * C98) * C2283 +
                      (C20189 * C101 + C44395 * C108) * C44407) *
                         C20186 +
                     (C21970 + C21971) * C20187 + C21978 * C20188) *
                        C44512 * C44464 * C2280 -
                    ((C21981 + C21982) * C20188 + (C21973 + C21972) * C20187 +
                     (C21971 + C21970) * C20186) *
                        C44512 * C44464 * C2281 +
                    (C21978 * C20186 + (C21982 + C21981) * C20187 +
                     ((C20189 * C21965 + C44395 * C21966) * C2283 +
                      (C20189 * C21967 + C44395 * C21968) * C44407) *
                         C20188) *
                        C44512 * C44464 * C2282)) /
                  (p * q * std::sqrt(p + q));
    d2eexy[40] +=
        (2 * std::pow(Pi, 2.5) *
         (((C20189 * C93 + C44395 * C98) * C2334 +
           (C20189 * C152 + C44395 * C157) * C2280 - C20564 * C2335 -
           C20638 * C2281 + C20568 * C2336 + C20639 * C2282) *
              C20186 +
          (C20564 * C2334 + C20638 * C2280 - C20568 * C2335 - C20639 * C2281 +
           C21980 * C2336 + C22025 * C2282) *
              C20187 +
          (C20568 * C2334 + C20639 * C2280 - C21980 * C2335 - C22025 * C2281 +
           (C20189 * C21965 + C44395 * C21966) * C2336 +
           (C20189 * C22020 + C44395 * C22021) * C2282) *
              C20188) *
         C44512 * C44407 * C44464) /
        (p * q * std::sqrt(p + q));
    d2eexz[40] += (2 * std::pow(Pi, 2.5) *
                   ((((C20189 * C93 + C44395 * C98) * C200 +
                      (C20189 * C201 + C44395 * C206) * C44464) *
                         C20186 +
                     (C20692 + C20708) * C20187 + C22066 * C20188) *
                        C44512 * C2280 -
                    ((C22071 + C22069) * C20188 + (C20709 + C20695) * C20187 +
                     (C20708 + C20692) * C20186) *
                        C44512 * C2281 +
                    (C22066 * C20186 + (C22069 + C22071) * C20187 +
                     ((C20189 * C21965 + C44395 * C21966) * C200 +
                      (C20189 * C22063 + C44395 * C22064) * C44464) *
                         C20188) *
                        C44512 * C2282) *
                   C44407) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[40] += (2 * std::pow(Pi, 2.5) *
                   (((C20304 * C93 + C20186 * C250 + C20305 * C642 +
                      C20187 * C824 + C20306 * C2284 + C20188 * C2425) *
                         C2283 +
                     (C20304 * C101 + C20186 * C255 + C20305 * C648 +
                      C20187 * C827 + C20306 * C2290 + C20188 * C2428) *
                         C44407) *
                        C44512 * C44395 * C44464 * C2280 -
                    ((C20306 * C6967 + C20188 * C7155 + C20305 * C2290 +
                      C20187 * C2428 + C20304 * C648 + C20186 * C827) *
                         C44407 +
                     (C20306 * C6963 + C20188 * C7153 + C20305 * C2284 +
                      C20187 * C2425 + C20304 * C642 + C20186 * C824) *
                         C2283) *
                        C44512 * C44395 * C44464 * C2281 +
                    ((C20304 * C2284 + C20186 * C2425 + C20305 * C6963 +
                      C20187 * C7153 + C20306 * C21965 + C20188 * C22109) *
                         C2283 +
                     (C20304 * C2290 + C20186 * C2428 + C20305 * C6967 +
                      C20187 * C7155 + C20306 * C21967 + C20188 * C22110) *
                         C44407) *
                        C44512 * C44395 * C44464 * C2282)) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[40] += (2 * std::pow(Pi, 2.5) *
                   ((C20304 * C93 + C20186 * C250 + C20305 * C642 +
                     C20187 * C824 + C20306 * C2284 + C20188 * C2425) *
                        C2334 +
                    (C20304 * C152 + C20186 * C316 + C20305 * C709 +
                     C20187 * C893 + C20306 * C2337 + C20188 * C2469) *
                        C2280 -
                    (C20306 * C6963 + C20188 * C7153 + C20305 * C2284 +
                     C20187 * C2425 + C20304 * C642 + C20186 * C824) *
                        C2335 -
                    (C20306 * C7033 + C20188 * C7207 + C20305 * C2337 +
                     C20187 * C2469 + C20304 * C709 + C20186 * C893) *
                        C2281 +
                    (C20304 * C2284 + C20186 * C2425 + C20305 * C6963 +
                     C20187 * C7153 + C20306 * C21965 + C20188 * C22109) *
                        C2336 +
                    (C20304 * C2337 + C20186 * C2469 + C20305 * C7033 +
                     C20187 * C7207 + C20306 * C22020 + C20188 * C22149) *
                        C2282) *
                   C44512 * C44395 * C44407 * C44464) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[40] += (2 * std::pow(Pi, 2.5) *
                   (((C20304 * C93 + C20186 * C250 + C20305 * C642 +
                      C20187 * C824 + C20306 * C2284 + C20188 * C2425) *
                         C200 +
                     (C20304 * C201 + C20186 * C376 + C20305 * C767 +
                      C20187 * C963 + C20306 * C2381 + C20188 * C2510) *
                         C44464) *
                        C44512 * C44395 * C2280 -
                    ((C20306 * C7093 + C20188 * C7259 + C20305 * C2381 +
                      C20187 * C2510 + C20304 * C767 + C20186 * C963) *
                         C44464 +
                     (C20306 * C6963 + C20188 * C7153 + C20305 * C2284 +
                      C20187 * C2425 + C20304 * C642 + C20186 * C824) *
                         C200) *
                        C44512 * C44395 * C2281 +
                    ((C20304 * C2284 + C20186 * C2425 + C20305 * C6963 +
                      C20187 * C7153 + C20306 * C21965 + C20188 * C22109) *
                         C200 +
                     (C20304 * C2381 + C20186 * C2510 + C20305 * C7093 +
                      C20187 * C7259 + C20306 * C22063 + C20188 * C22188) *
                         C44464) *
                        C44512 * C44395 * C2282) *
                   C44407) /
                  (p * q * std::sqrt(p + q));
    d2eezx[40] += (2 * std::pow(Pi, 2.5) *
                   ((((C436 * C93 + C44512 * C437) * C2283 +
                      (C436 * C101 + C44512 * C442) * C44407) *
                         C44395 * C20186 +
                     (C7316 + C7317) * C44395 * C20187 + C22235 * C20188) *
                        C44464 * C2280 -
                    ((C22238 + C22239) * C44395 * C20188 +
                     (C7328 + C7329) * C44395 * C20187 +
                     (C7317 + C7316) * C44395 * C20186) *
                        C44464 * C2281 +
                    (C22235 * C20186 + (C22239 + C22238) * C44395 * C20187 +
                     ((C436 * C21965 + C44512 * C22227) * C2283 +
                      (C436 * C21967 + C44512 * C22228) * C44407) *
                         C44395 * C20188) *
                        C44464 * C2282)) /
                  (p * q * std::sqrt(p + q));
    d2eezy[40] +=
        (2 * std::pow(Pi, 2.5) *
         (((C436 * C93 + C44512 * C437) * C2334 +
           (C436 * C152 + C44512 * C503) * C2280 - C5512 * C2335 -
           C5591 * C2281 + C7327 * C2336 + C7384 * C2282) *
              C44395 * C20186 +
          (C5512 * C2334 + C5591 * C2280 - C7327 * C2335 - C7384 * C2281 +
           C22237 * C2336 + C22281 * C2282) *
              C44395 * C20187 +
          (C7327 * C2334 + C7384 * C2280 - C22237 * C2335 - C22281 * C2281 +
           (C436 * C21965 + C44512 * C22227) * C2336 +
           (C436 * C22020 + C44512 * C22277) * C2282) *
              C44395 * C20188) *
         C44407 * C44464) /
        (p * q * std::sqrt(p + q));
    d2eezz[40] += (2 * std::pow(Pi, 2.5) *
                   ((((C436 * C93 + C44512 * C437) * C200 +
                      (C436 * C201 + C44512 * C562) * C44464) *
                         C44395 * C20186 +
                     (C5660 + C5670) * C44395 * C20187 + C22325 * C20188) *
                        C2280 -
                    ((C22327 + C22324) * C44395 * C20188 +
                     (C7441 + C7439) * C44395 * C20187 +
                     (C5670 + C5660) * C44395 * C20186) *
                        C2281 +
                    (C22325 * C20186 + (C22324 + C22327) * C44395 * C20187 +
                     ((C436 * C21965 + C44512 * C22227) * C200 +
                      (C436 * C22063 + C44512 * C22319) * C44464) *
                         C44395 * C20188) *
                        C2282) *
                   C44407) /
                  (p * q * std::sqrt(p + q));
    d2eexx[41] += (2 * std::pow(Pi, 2.5) *
                   (((((C20189 * C93 + C44395 * C98) * C2283 +
                       (C20189 * C101 + C44395 * C108) * C44407) *
                          C20186 +
                      (C21970 + C21971) * C20187 + C21978 * C20188) *
                         C44512 * C1227 -
                     ((C22394 + C22395) * C20188 + (C22396 + C22397) * C20187 +
                      ((C20189 * C1238 + C44395 * C1243) * C44407 +
                       (C20189 * C1232 + C44395 * C1239) * C2283) *
                          C20186) *
                         C44512 * C44599) *
                        C1819 +
                    (((C22397 + C22396) * C20186 + (C22395 + C22394) * C20187 +
                      ((C20189 * C22377 + C44395 * C22378) * C2283 +
                       (C20189 * C22379 + C44395 * C22380) * C44407) *
                          C20188) *
                         C44512 * C44599 -
                     ((C21981 + C21982) * C20188 + (C21973 + C21972) * C20187 +
                      (C21971 + C21970) * C20186) *
                         C44512 * C1227) *
                        C44597)) /
                  (p * q * std::sqrt(p + q));
    d2eexy[41] += (2 * std::pow(Pi, 2.5) *
                   ((((C20189 * C93 + C44395 * C98) * C1873 +
                      (C20189 * C152 + C44395 * C157) * C1819 - C20564 * C1874 -
                      C20638 * C44597) *
                         C20186 +
                     (C20564 * C1873 + C20638 * C1819 - C20568 * C1874 -
                      C20639 * C44597) *
                         C20187 +
                     (C20568 * C1873 + C20639 * C1819 - C21980 * C1874 -
                      C22025 * C44597) *
                         C20188) *
                        C44512 * C44407 * C1227 +
                    ((C22393 * C1874 -
                      ((C20189 * C1298 + C44395 * C1302) * C1819 +
                       (C20189 * C1232 + C44395 * C1239) * C1873) +
                      C22454 * C44597) *
                         C20186 +
                     (C22391 * C1874 - (C22454 * C1819 + C22393 * C1873) +
                      C22455 * C44597) *
                         C20187 +
                     ((C20189 * C22377 + C44395 * C22378) * C1874 -
                      (C22455 * C1819 + C22391 * C1873) +
                      (C20189 * C22447 + C44395 * C22448) * C44597) *
                         C20188) *
                        C44512 * C44407 * C44599)) /
                  (p * q * std::sqrt(p + q));
    d2eexz[41] += (2 * std::pow(Pi, 2.5) *
                   ((((C20189 * C93 + C44395 * C98) * C1353 +
                      (C20189 * C201 + C44395 * C206) * C1227 -
                      (C20189 * C1232 + C44395 * C1239) * C1354 -
                      (C20189 * C1357 + C44395 * C1361) * C44599) *
                         C20186 +
                     (C22508 + C22509 - C22510 - C22520) * C20187 +
                     (C22513 + C22514 - C22515 - C22521) * C20188) *
                        C44512 * C1819 +
                    ((C22510 - (C22509 + C22508) + C22520) * C20186 +
                     (C22515 - (C22514 + C22513) + C22521) * C20187 +
                     ((C20189 * C22377 + C44395 * C22378) * C1354 -
                      (C22070 * C1227 + C21980 * C1353) +
                      (C20189 * C22505 + C44395 * C22506) * C44599) *
                         C20188) *
                        C44512 * C44597) *
                   C44407) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[41] += (2 * std::pow(Pi, 2.5) *
                   ((((C20304 * C93 + C20186 * C250 + C20305 * C642 +
                       C20187 * C824 + C20306 * C2284 + C20188 * C2425) *
                          C2283 +
                      (C20304 * C101 + C20186 * C255 + C20305 * C648 +
                       C20187 * C827 + C20306 * C2290 + C20188 * C2428) *
                          C44407) *
                         C44512 * C44395 * C1227 -
                     ((C20306 * C7511 + C20188 * C7747 + C20305 * C2695 +
                       C20187 * C2866 + C20304 * C1238 + C20186 * C1417) *
                          C44407 +
                      (C20306 * C7507 + C20188 * C7745 + C20305 * C2689 +
                       C20187 * C2863 + C20304 * C1232 + C20186 * C1414) *
                          C2283) *
                         C44512 * C44395 * C44599) *
                        C1819 +
                    (((C20304 * C2689 + C20186 * C2863 + C20305 * C7507 +
                       C20187 * C7745 + C20306 * C22377 + C20188 * C22571) *
                          C2283 +
                      (C20304 * C2695 + C20186 * C2866 + C20305 * C7511 +
                       C20187 * C7747 + C20306 * C22379 + C20188 * C22572) *
                          C44407) *
                         C44512 * C44395 * C44599 -
                     ((C20306 * C6967 + C20188 * C7155 + C20305 * C2290 +
                       C20187 * C2428 + C20304 * C648 + C20186 * C827) *
                          C44407 +
                      (C20306 * C6963 + C20188 * C7153 + C20305 * C2284 +
                       C20187 * C2425 + C20304 * C642 + C20186 * C824) *
                          C2283) *
                         C44512 * C44395 * C1227) *
                        C44597)) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[41] += (2 * std::pow(Pi, 2.5) *
                   (((C20304 * C93 + C20186 * C250 + C20305 * C642 +
                      C20187 * C824 + C20306 * C2284 + C20188 * C2425) *
                         C1873 +
                     (C20304 * C152 + C20186 * C316 + C20305 * C709 +
                      C20187 * C893 + C20306 * C2337 + C20188 * C2469) *
                         C1819 -
                     (C20306 * C6963 + C20188 * C7153 + C20305 * C2284 +
                      C20187 * C2425 + C20304 * C642 + C20186 * C824) *
                         C1874 -
                     (C20306 * C7033 + C20188 * C7207 + C20305 * C2337 +
                      C20187 * C2469 + C20304 * C709 + C20186 * C893) *
                         C44597) *
                        C44512 * C44395 * C44407 * C1227 +
                    ((C20304 * C2689 + C20186 * C2863 + C20305 * C7507 +
                      C20187 * C7745 + C20306 * C22377 + C20188 * C22571) *
                         C1874 -
                     ((C20306 * C7593 + C20188 * C7815 + C20305 * C2751 +
                       C20187 * C2919 + C20304 * C1298 + C20186 * C1486) *
                          C1819 +
                      (C20306 * C7507 + C20188 * C7745 + C20305 * C2689 +
                       C20187 * C2863 + C20304 * C1232 + C20186 * C1414) *
                          C1873) +
                     (C20304 * C2751 + C20186 * C2919 + C20305 * C7593 +
                      C20187 * C7815 + C20306 * C22447 + C20188 * C22623) *
                         C44597) *
                        C44512 * C44395 * C44407 * C44599)) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[41] += (2 * std::pow(Pi, 2.5) *
                   (((C20304 * C93 + C20186 * C250 + C20305 * C642 +
                      C20187 * C824 + C20306 * C2284 + C20188 * C2425) *
                         C1353 +
                     (C20304 * C201 + C20186 * C376 + C20305 * C767 +
                      C20187 * C963 + C20306 * C2381 + C20188 * C2510) *
                         C1227 -
                     (C20306 * C7507 + C20188 * C7745 + C20305 * C2689 +
                      C20187 * C2863 + C20304 * C1232 + C20186 * C1414) *
                         C1354 -
                     (C20306 * C7669 + C20188 * C7883 + C20305 * C2807 +
                      C20187 * C2972 + C20304 * C1357 + C20186 * C1547) *
                         C44599) *
                        C44512 * C44395 * C1819 +
                    ((C20304 * C2689 + C20186 * C2863 + C20305 * C7507 +
                      C20187 * C7745 + C20306 * C22377 + C20188 * C22571) *
                         C1354 -
                     ((C20306 * C7093 + C20188 * C7259 + C20305 * C2381 +
                       C20187 * C2510 + C20304 * C767 + C20186 * C963) *
                          C1227 +
                      (C20306 * C6963 + C20188 * C7153 + C20305 * C2284 +
                       C20187 * C2425 + C20304 * C642 + C20186 * C824) *
                          C1353) +
                     (C20304 * C2807 + C20186 * C2972 + C20305 * C7669 +
                      C20187 * C7883 + C20306 * C22505 + C20188 * C22674) *
                         C44599) *
                        C44512 * C44395 * C44597) *
                   C44407) /
                  (p * q * std::sqrt(p + q));
    d2eezx[41] += (2 * std::pow(Pi, 2.5) *
                   (((((C436 * C93 + C44512 * C437) * C2283 +
                       (C436 * C101 + C44512 * C442) * C44407) *
                          C44395 * C20186 +
                      (C7316 + C7317) * C44395 * C20187 + C22235 * C20188) *
                         C1227 -
                     ((C22734 + C22735) * C44395 * C20188 +
                      (C7964 + C7965) * C44395 * C20187 +
                      ((C436 * C1238 + C44512 * C1619) * C44407 +
                       (C436 * C1232 + C44512 * C1616) * C2283) *
                          C44395 * C20186) *
                         C44599) *
                        C1819 +
                    (((C7965 + C7964) * C44395 * C20186 +
                      (C22735 + C22734) * C44395 * C20187 +
                      ((C436 * C22377 + C44512 * C22725) * C2283 +
                       (C436 * C22379 + C44512 * C22726) * C44407) *
                          C44395 * C20188) *
                         C44599 -
                     ((C22238 + C22239) * C44395 * C20188 +
                      (C7328 + C7329) * C44395 * C20187 +
                      (C7317 + C7316) * C44395 * C20186) *
                         C1227) *
                        C44597)) /
                  (p * q * std::sqrt(p + q));
    d2eezy[41] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C436 * C93 + C44512 * C437) * C1873 +
            (C436 * C152 + C44512 * C503) * C1819 - C5512 * C1874 -
            C5591 * C44597) *
               C44395 * C20186 +
           (C5512 * C1873 + C5591 * C1819 - C7327 * C1874 - C7384 * C44597) *
               C44395 * C20187 +
           (C7327 * C1873 + C7384 * C1819 - C22237 * C1874 - C22281 * C44597) *
               C44395 * C20188) *
              C44407 * C1227 +
          ((C7963 * C1874 -
            ((C436 * C1298 + C44512 * C1688) * C1819 +
             (C436 * C1232 + C44512 * C1616) * C1873) +
            C8036 * C44597) *
               C44395 * C20186 +
           (C22733 * C1874 - (C8036 * C1819 + C7963 * C1873) +
            C22789 * C44597) *
               C44395 * C20187 +
           ((C436 * C22377 + C44512 * C22725) * C1874 -
            (C22789 * C1819 + C22733 * C1873) +
            (C436 * C22447 + C44512 * C22785) * C44597) *
               C44395 * C20188) *
              C44407 * C44599)) /
        (p * q * std::sqrt(p + q));
    d2eezz[41] += (2 * std::pow(Pi, 2.5) *
                   ((((C436 * C93 + C44512 * C437) * C1353 +
                      (C436 * C201 + C44512 * C562) * C1227 -
                      (C436 * C1232 + C44512 * C1616) * C1354 -
                      (C436 * C1357 + C44512 * C1749) * C44599) *
                         C44395 * C20186 +
                     (C8105 + C8106 - C8107 - C8111) * C44395 * C20187 +
                     (C22841 + C22842 - C22843 - C22847) * C44395 * C20188) *
                        C1819 +
                    ((C8107 - (C8106 + C8105) + C8111) * C44395 * C20186 +
                     (C22843 - (C22842 + C22841) + C22847) * C44395 * C20187 +
                     ((C436 * C22377 + C44512 * C22725) * C1354 -
                      (C22326 * C1227 + C22237 * C1353) +
                      (C436 * C22505 + C44512 * C22839) * C44599) *
                         C44395 * C20188) *
                        C44597) *
                   C44407) /
                  (p * q * std::sqrt(p + q));
    d2eexx[42] += (2 * std::pow(Pi, 2.5) *
                   ((((C20189 * C93 + C44395 * C98) * C1821 +
                      (C20189 * C101 + C44395 * C108) * C1817 -
                      (C20189 * C94 + C44395 * C99) * C1822 -
                      (C20189 * C102 + C44395 * C109) * C44595) *
                         C20186 +
                     (C21516 + C21517 - C21518 - C21519) * C20187 +
                     (C21520 + C21521 - C21522 - C21523) * C20188) *
                        C44512 * C3187 +
                    (((C20189 * C1229 + C44395 * C1233) * C1822 -
                      ((C20189 * C1238 + C44395 * C1243) * C1817 +
                       (C20189 * C1232 + C44395 * C1239) * C1821) +
                      (C20189 * C1237 + C44395 * C1242) * C44595) *
                         C20186 +
                     ((C20189 * C2690 + C44395 * C2693) * C1822 -
                      (C22392 * C1817 + C22393 * C1821) +
                      (C20189 * C2696 + C44395 * C2699) * C44595) *
                         C20187 +
                     ((C20189 * C7508 + C44395 * C7510) * C1822 -
                      (C22390 * C1817 + C22391 * C1821) +
                      (C20189 * C7512 + C44395 * C7514) * C44595) *
                         C20188) *
                        C44512 * C44599) *
                   C44449) /
                  (p * q * std::sqrt(p + q));
    d2eexy[42] += (2 * std::pow(Pi, 2.5) *
                   (((((C20189 * C93 + C44395 * C98) * C151 +
                       (C20189 * C152 + C44395 * C157) * C44449) *
                          C20186 +
                      (C20564 * C151 + C20638 * C44449) * C20187 +
                      (C20568 * C151 + C20639 * C44449) * C20188) *
                         C44512 * C1817 -
                     ((C20641 * C44449 + C20570 * C151) * C20188 +
                      (C20640 * C44449 + C20566 * C151) * C20187 +
                      ((C20189 * C153 + C44395 * C158) * C44449 +
                       (C20189 * C94 + C44395 * C99) * C151) *
                          C20186) *
                         C44512 * C44595) *
                        C3187 +
                    ((((C20189 * C1229 + C44395 * C1233) * C151 +
                       (C20189 * C1295 + C44395 * C1299) * C44449) *
                          C20186 +
                      ((C20189 * C2690 + C44395 * C2693) * C151 +
                       (C20189 * C2752 + C44395 * C2755) * C44449) *
                          C20187 +
                      ((C20189 * C7508 + C44395 * C7510) * C151 +
                       (C20189 * C7594 + C44395 * C7596) * C44449) *
                          C20188) *
                         C44512 * C44595 -
                     ((C22455 * C44449 + C22391 * C151) * C20188 +
                      (C22454 * C44449 + C22393 * C151) * C20187 +
                      ((C20189 * C1298 + C44395 * C1302) * C44449 +
                       (C20189 * C1232 + C44395 * C1239) * C151) *
                          C20186) *
                         C44512 * C1817) *
                        C44599)) /
                  (p * q * std::sqrt(p + q));
    d2eexz[42] += (2 * std::pow(Pi, 2.5) *
                   ((((C20189 * C93 + C44395 * C98) * C3289 +
                      (C20189 * C201 + C44395 * C206) * C3187 -
                      (C20189 * C1232 + C44395 * C1239) * C3290 -
                      (C20189 * C1357 + C44395 * C1361) * C44599) *
                         C20186 +
                     (C20564 * C3289 + C20704 * C3187 - C22393 * C3290 -
                      C22518 * C44599) *
                         C20187 +
                     (C20568 * C3289 + C20705 * C3187 - C22391 * C3290 -
                      C22519 * C44599) *
                         C20188) *
                        C44512 * C44449 * C1817 +
                    (((C20189 * C1229 + C44395 * C1233) * C3290 -
                      ((C20189 * C202 + C44395 * C207) * C3187 +
                       (C20189 * C94 + C44395 * C99) * C3289) +
                      (C20189 * C1356 + C44395 * C1360) * C44599) *
                         C20186 +
                     ((C20189 * C2690 + C44395 * C2693) * C3290 -
                      (C20706 * C3187 + C20566 * C3289) +
                      (C20189 * C2808 + C44395 * C2811) * C44599) *
                         C20187 +
                     ((C20189 * C7508 + C44395 * C7510) * C3290 -
                      (C20707 * C3187 + C20570 * C3289) +
                      (C20189 * C7670 + C44395 * C7672) * C44599) *
                         C20188) *
                        C44512 * C44449 * C44595)) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[42] += (2 * std::pow(Pi, 2.5) *
                   (((C20304 * C93 + C20186 * C250 + C20305 * C642 +
                      C20187 * C824 + C20306 * C2284 + C20188 * C2425) *
                         C1821 +
                     (C20304 * C101 + C20186 * C255 + C20305 * C648 +
                      C20187 * C827 + C20306 * C2290 + C20188 * C2428) *
                         C1817 -
                     (C20306 * C2285 + C20188 * C2426 + C20305 * C639 +
                      C20187 * C823 + C20304 * C94 + C20186 * C251) *
                         C1822 -
                     (C20306 * C2291 + C20188 * C2429 + C20305 * C647 +
                      C20187 * C828 + C20304 * C102 + C20186 * C256) *
                         C44595) *
                        C44512 * C44395 * C3187 +
                    ((C20304 * C1229 + C20186 * C1413 + C20305 * C2690 +
                      C20187 * C2864 + C20306 * C7508 + C20188 * C7746) *
                         C1822 -
                     ((C20306 * C7511 + C20188 * C7747 + C20305 * C2695 +
                       C20187 * C2866 + C20304 * C1238 + C20186 * C1417) *
                          C1817 +
                      (C20306 * C7507 + C20188 * C7745 + C20305 * C2689 +
                       C20187 * C2863 + C20304 * C1232 + C20186 * C1414) *
                          C1821) +
                     (C20304 * C1237 + C20186 * C1418 + C20305 * C2696 +
                      C20187 * C2867 + C20306 * C7512 + C20188 * C7748) *
                         C44595) *
                        C44512 * C44395 * C44599) *
                   C44449) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[42] += (2 * std::pow(Pi, 2.5) *
                   ((((C20304 * C93 + C20186 * C250 + C20305 * C642 +
                       C20187 * C824 + C20306 * C2284 + C20188 * C2425) *
                          C151 +
                      (C20304 * C152 + C20186 * C316 + C20305 * C709 +
                       C20187 * C893 + C20306 * C2337 + C20188 * C2469) *
                          C44449) *
                         C44512 * C44395 * C1817 -
                     ((C20306 * C2338 + C20188 * C2470 + C20305 * C708 +
                       C20187 * C894 + C20304 * C153 + C20186 * C317) *
                          C44449 +
                      (C20306 * C2285 + C20188 * C2426 + C20305 * C639 +
                       C20187 * C823 + C20304 * C94 + C20186 * C251) *
                          C151) *
                         C44512 * C44395 * C44595) *
                        C3187 +
                    (((C20304 * C1229 + C20186 * C1413 + C20305 * C2690 +
                       C20187 * C2864 + C20306 * C7508 + C20188 * C7746) *
                          C151 +
                      (C20304 * C1295 + C20186 * C1483 + C20305 * C2752 +
                       C20187 * C2920 + C20306 * C7594 + C20188 * C7816) *
                          C44449) *
                         C44512 * C44395 * C44595 -
                     ((C20306 * C7593 + C20188 * C7815 + C20305 * C2751 +
                       C20187 * C2919 + C20304 * C1298 + C20186 * C1486) *
                          C44449 +
                      (C20306 * C7507 + C20188 * C7745 + C20305 * C2689 +
                       C20187 * C2863 + C20304 * C1232 + C20186 * C1414) *
                          C151) *
                         C44512 * C44395 * C1817) *
                        C44599)) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[42] += (2 * std::pow(Pi, 2.5) *
                   (((C20304 * C93 + C20186 * C250 + C20305 * C642 +
                      C20187 * C824 + C20306 * C2284 + C20188 * C2425) *
                         C3289 +
                     (C20304 * C201 + C20186 * C376 + C20305 * C767 +
                      C20187 * C963 + C20306 * C2381 + C20188 * C2510) *
                         C3187 -
                     (C20306 * C7507 + C20188 * C7745 + C20305 * C2689 +
                      C20187 * C2863 + C20304 * C1232 + C20186 * C1414) *
                         C3290 -
                     (C20306 * C7669 + C20188 * C7883 + C20305 * C2807 +
                      C20187 * C2972 + C20304 * C1357 + C20186 * C1547) *
                         C44599) *
                        C44512 * C44395 * C44449 * C1817 +
                    ((C20304 * C1229 + C20186 * C1413 + C20305 * C2690 +
                      C20187 * C2864 + C20306 * C7508 + C20188 * C7746) *
                         C3290 -
                     ((C20306 * C2382 + C20188 * C2511 + C20305 * C766 +
                       C20187 * C962 + C20304 * C202 + C20186 * C377) *
                          C3187 +
                      (C20306 * C2285 + C20188 * C2426 + C20305 * C639 +
                       C20187 * C823 + C20304 * C94 + C20186 * C251) *
                          C3289) +
                     (C20304 * C1356 + C20186 * C1548 + C20305 * C2808 +
                      C20187 * C2973 + C20306 * C7670 + C20188 * C7884) *
                         C44599) *
                        C44512 * C44395 * C44449 * C44595)) /
                  (p * q * std::sqrt(p + q));
    d2eezx[42] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C436 * C93 + C44512 * C437) * C1821 +
            (C436 * C101 + C44512 * C442) * C1817 - C460 * C1822 -
            C461 * C44595) *
               C44395 * C20186 +
           (C6770 + C6771 - C6772 - C6773) * C44395 * C20187 +
           (C21824 + C21825 - C21826 - C21827) * C44395 * C20188) *
              C3187 +
          ((C1632 * C1822 -
            ((C436 * C1238 + C44512 * C1619) * C1817 +
             (C436 * C1232 + C44512 * C1616) * C1821) +
            C1633 * C44595) *
               C44395 * C20186 +
           (C6162 * C1822 - (C7962 * C1817 + C7963 * C1821) + C6163 * C44595) *
               C44395 * C20187 +
           ((C436 * C7508 + C44512 * C7952) * C1822 -
            (C22732 * C1817 + C22733 * C1821) +
            (C436 * C7512 + C44512 * C7954) * C44595) *
               C44395 * C20188) *
              C44599) *
         C44449) /
        (p * q * std::sqrt(p + q));
    d2eezy[42] += (2 * std::pow(Pi, 2.5) *
                   (((((C436 * C93 + C44512 * C437) * C151 +
                       (C436 * C152 + C44512 * C503) * C44449) *
                          C44395 * C20186 +
                      (C5512 * C151 + C5591 * C44449) * C44395 * C20187 +
                      (C7327 * C151 + C7384 * C44449) * C44395 * C20188) *
                         C1817 -
                     ((C5592 * C44449 + C5514 * C151) * C44395 * C20188 +
                      (C4911 + C4910) * C44395 * C20187 +
                      (C521 + C509) * C44395 * C20186) *
                         C44595) *
                        C3187 +
                    (((C1690 + C1698) * C44395 * C20186 +
                      (C6230 + C6234) * C44395 * C20187 +
                      ((C436 * C7508 + C44512 * C7952) * C151 +
                       (C436 * C7594 + C44512 * C8032) * C44449) *
                          C44395 * C20188) *
                         C44595 -
                     ((C22789 * C44449 + C22733 * C151) * C44395 * C20188 +
                      (C8036 * C44449 + C7963 * C151) * C44395 * C20187 +
                      ((C436 * C1298 + C44512 * C1688) * C44449 +
                       (C436 * C1232 + C44512 * C1616) * C151) *
                          C44395 * C20186) *
                         C1817) *
                        C44599)) /
                  (p * q * std::sqrt(p + q));
    d2eezz[42] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C436 * C93 + C44512 * C437) * C3289 +
            (C436 * C201 + C44512 * C562) * C3187 -
            (C436 * C1232 + C44512 * C1616) * C3290 -
            (C436 * C1357 + C44512 * C1749) * C44599) *
               C44395 * C20186 +
           (C9304 + C9305 - C9306 - C9307) * C44395 * C20187 +
           (C7327 * C3289 + C7440 * C3187 - C22733 * C3290 - C22846 * C44599) *
               C44395 * C20188) *
              C44449 * C1817 +
          ((C3602 - (C3601 + C3600) + C3603) * C44395 * C20186 +
           (C8708 - (C8707 + C8706) + C8709) * C44395 * C20187 +
           ((C436 * C7508 + C44512 * C7952) * C3290 -
            (C5669 * C3187 + C5514 * C3289) +
            (C436 * C7670 + C44512 * C8103) * C44599) *
               C44395 * C20188) *
              C44449 * C44595)) /
        (p * q * std::sqrt(p + q));
    d2eexx[43] += (2 * std::pow(Pi, 2.5) *
                   (((((C20189 * C93 + C44395 * C98) * C2283 +
                       (C20189 * C101 + C44395 * C108) * C44407) *
                          C20186 +
                      (C21970 + C21971) * C20187 + C21978 * C20188) *
                         C44512 * C3187 -
                     ((C22394 + C22395) * C20188 + (C22396 + C22397) * C20187 +
                      ((C20189 * C1238 + C44395 * C1243) * C44407 +
                       (C20189 * C1232 + C44395 * C1239) * C2283) *
                          C20186) *
                         C44512 * C44599) *
                        C635 +
                    (((C22397 + C22396) * C20186 + (C22395 + C22394) * C20187 +
                      ((C20189 * C22377 + C44395 * C22378) * C2283 +
                       (C20189 * C22379 + C44395 * C22380) * C44407) *
                          C20188) *
                         C44512 * C44599 -
                     ((C21981 + C21982) * C20188 + (C21973 + C21972) * C20187 +
                      (C21971 + C21970) * C20186) *
                         C44512 * C3187) *
                        C44597)) /
                  (p * q * std::sqrt(p + q));
    d2eexy[43] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C20189 * C93 + C44395 * C98) * C705 +
            (C20189 * C152 + C44395 * C157) * C635 - C20564 * C706 -
            C20638 * C44597) *
               C20186 +
           (C20564 * C705 + C20638 * C635 - C20568 * C706 - C20639 * C44597) *
               C20187 +
           (C20568 * C705 + C20639 * C635 - C21980 * C706 - C22025 * C44597) *
               C20188) *
              C44512 * C44407 * C3187 +
          ((C22393 * C706 -
            ((C20189 * C1298 + C44395 * C1302) * C635 +
             (C20189 * C1232 + C44395 * C1239) * C705) +
            C22454 * C44597) *
               C20186 +
           (C22391 * C706 - (C22454 * C635 + C22393 * C705) + C22455 * C44597) *
               C20187 +
           ((C20189 * C22377 + C44395 * C22378) * C706 -
            (C22455 * C635 + C22391 * C705) +
            (C20189 * C22447 + C44395 * C22448) * C44597) *
               C20188) *
              C44512 * C44407 * C44599)) /
        (p * q * std::sqrt(p + q));
    d2eexz[43] += (2 * std::pow(Pi, 2.5) *
                   ((((C20189 * C93 + C44395 * C98) * C3289 +
                      (C20189 * C201 + C44395 * C206) * C3187 -
                      (C20189 * C1232 + C44395 * C1239) * C3290 -
                      (C20189 * C1357 + C44395 * C1361) * C44599) *
                         C20186 +
                     (C23448 + C23449 - C23450 - C23451) * C20187 +
                     (C23452 + C23453 - C23454 - C23455) * C20188) *
                        C44512 * C635 +
                    ((C23450 - (C23449 + C23448) + C23451) * C20186 +
                     (C23454 - (C23453 + C23452) + C23455) * C20187 +
                     ((C20189 * C22377 + C44395 * C22378) * C3290 -
                      (C22070 * C3187 + C21980 * C3289) +
                      (C20189 * C22505 + C44395 * C22506) * C44599) *
                         C20188) *
                        C44512 * C44597) *
                   C44407) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[43] += (2 * std::pow(Pi, 2.5) *
                   ((((C20304 * C93 + C20186 * C250 + C20305 * C642 +
                       C20187 * C824 + C20306 * C2284 + C20188 * C2425) *
                          C2283 +
                      (C20304 * C101 + C20186 * C255 + C20305 * C648 +
                       C20187 * C827 + C20306 * C2290 + C20188 * C2428) *
                          C44407) *
                         C44512 * C44395 * C3187 -
                     ((C20306 * C7511 + C20188 * C7747 + C20305 * C2695 +
                       C20187 * C2866 + C20304 * C1238 + C20186 * C1417) *
                          C44407 +
                      (C20306 * C7507 + C20188 * C7745 + C20305 * C2689 +
                       C20187 * C2863 + C20304 * C1232 + C20186 * C1414) *
                          C2283) *
                         C44512 * C44395 * C44599) *
                        C635 +
                    (((C20304 * C2689 + C20186 * C2863 + C20305 * C7507 +
                       C20187 * C7745 + C20306 * C22377 + C20188 * C22571) *
                          C2283 +
                      (C20304 * C2695 + C20186 * C2866 + C20305 * C7511 +
                       C20187 * C7747 + C20306 * C22379 + C20188 * C22572) *
                          C44407) *
                         C44512 * C44395 * C44599 -
                     ((C20306 * C6967 + C20188 * C7155 + C20305 * C2290 +
                       C20187 * C2428 + C20304 * C648 + C20186 * C827) *
                          C44407 +
                      (C20306 * C6963 + C20188 * C7153 + C20305 * C2284 +
                       C20187 * C2425 + C20304 * C642 + C20186 * C824) *
                          C2283) *
                         C44512 * C44395 * C3187) *
                        C44597)) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[43] += (2 * std::pow(Pi, 2.5) *
                   (((C20304 * C93 + C20186 * C250 + C20305 * C642 +
                      C20187 * C824 + C20306 * C2284 + C20188 * C2425) *
                         C705 +
                     (C20304 * C152 + C20186 * C316 + C20305 * C709 +
                      C20187 * C893 + C20306 * C2337 + C20188 * C2469) *
                         C635 -
                     (C20306 * C6963 + C20188 * C7153 + C20305 * C2284 +
                      C20187 * C2425 + C20304 * C642 + C20186 * C824) *
                         C706 -
                     (C20306 * C7033 + C20188 * C7207 + C20305 * C2337 +
                      C20187 * C2469 + C20304 * C709 + C20186 * C893) *
                         C44597) *
                        C44512 * C44395 * C44407 * C3187 +
                    ((C20304 * C2689 + C20186 * C2863 + C20305 * C7507 +
                      C20187 * C7745 + C20306 * C22377 + C20188 * C22571) *
                         C706 -
                     ((C20306 * C7593 + C20188 * C7815 + C20305 * C2751 +
                       C20187 * C2919 + C20304 * C1298 + C20186 * C1486) *
                          C635 +
                      (C20306 * C7507 + C20188 * C7745 + C20305 * C2689 +
                       C20187 * C2863 + C20304 * C1232 + C20186 * C1414) *
                          C705) +
                     (C20304 * C2751 + C20186 * C2919 + C20305 * C7593 +
                      C20187 * C7815 + C20306 * C22447 + C20188 * C22623) *
                         C44597) *
                        C44512 * C44395 * C44407 * C44599)) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[43] += (2 * std::pow(Pi, 2.5) *
                   (((C20304 * C93 + C20186 * C250 + C20305 * C642 +
                      C20187 * C824 + C20306 * C2284 + C20188 * C2425) *
                         C3289 +
                     (C20304 * C201 + C20186 * C376 + C20305 * C767 +
                      C20187 * C963 + C20306 * C2381 + C20188 * C2510) *
                         C3187 -
                     (C20306 * C7507 + C20188 * C7745 + C20305 * C2689 +
                      C20187 * C2863 + C20304 * C1232 + C20186 * C1414) *
                         C3290 -
                     (C20306 * C7669 + C20188 * C7883 + C20305 * C2807 +
                      C20187 * C2972 + C20304 * C1357 + C20186 * C1547) *
                         C44599) *
                        C44512 * C44395 * C635 +
                    ((C20304 * C2689 + C20186 * C2863 + C20305 * C7507 +
                      C20187 * C7745 + C20306 * C22377 + C20188 * C22571) *
                         C3290 -
                     ((C20306 * C7093 + C20188 * C7259 + C20305 * C2381 +
                       C20187 * C2510 + C20304 * C767 + C20186 * C963) *
                          C3187 +
                      (C20306 * C6963 + C20188 * C7153 + C20305 * C2284 +
                       C20187 * C2425 + C20304 * C642 + C20186 * C824) *
                          C3289) +
                     (C20304 * C2807 + C20186 * C2972 + C20305 * C7669 +
                      C20187 * C7883 + C20306 * C22505 + C20188 * C22674) *
                         C44599) *
                        C44512 * C44395 * C44597) *
                   C44407) /
                  (p * q * std::sqrt(p + q));
    d2eezx[43] += (2 * std::pow(Pi, 2.5) *
                   (((((C436 * C93 + C44512 * C437) * C2283 +
                       (C436 * C101 + C44512 * C442) * C44407) *
                          C44395 * C20186 +
                      (C7316 + C7317) * C44395 * C20187 + C22235 * C20188) *
                         C3187 -
                     ((C22734 + C22735) * C44395 * C20188 +
                      (C7964 + C7965) * C44395 * C20187 +
                      ((C436 * C1238 + C44512 * C1619) * C44407 +
                       (C436 * C1232 + C44512 * C1616) * C2283) *
                          C44395 * C20186) *
                         C44599) *
                        C635 +
                    (((C7965 + C7964) * C44395 * C20186 +
                      (C22735 + C22734) * C44395 * C20187 +
                      ((C436 * C22377 + C44512 * C22725) * C2283 +
                       (C436 * C22379 + C44512 * C22726) * C44407) *
                          C44395 * C20188) *
                         C44599 -
                     ((C22238 + C22239) * C44395 * C20188 +
                      (C7328 + C7329) * C44395 * C20187 +
                      (C7317 + C7316) * C44395 * C20186) *
                         C3187) *
                        C44597)) /
                  (p * q * std::sqrt(p + q));
    d2eezy[43] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C436 * C93 + C44512 * C437) * C705 +
            (C436 * C152 + C44512 * C503) * C635 - C5512 * C706 -
            C5591 * C44597) *
               C44395 * C20186 +
           (C5512 * C705 + C5591 * C635 - C7327 * C706 - C7384 * C44597) *
               C44395 * C20187 +
           (C7327 * C705 + C7384 * C635 - C22237 * C706 - C22281 * C44597) *
               C44395 * C20188) *
              C44407 * C3187 +
          ((C7963 * C706 -
            ((C436 * C1298 + C44512 * C1688) * C635 +
             (C436 * C1232 + C44512 * C1616) * C705) +
            C8036 * C44597) *
               C44395 * C20186 +
           (C22733 * C706 - (C8036 * C635 + C7963 * C705) + C22789 * C44597) *
               C44395 * C20187 +
           ((C436 * C22377 + C44512 * C22725) * C706 -
            (C22789 * C635 + C22733 * C705) +
            (C436 * C22447 + C44512 * C22785) * C44597) *
               C44395 * C20188) *
              C44407 * C44599)) /
        (p * q * std::sqrt(p + q));
    d2eezz[43] += (2 * std::pow(Pi, 2.5) *
                   ((((C436 * C93 + C44512 * C437) * C3289 +
                      (C436 * C201 + C44512 * C562) * C3187 -
                      (C436 * C1232 + C44512 * C1616) * C3290 -
                      (C436 * C1357 + C44512 * C1749) * C44599) *
                         C44395 * C20186 +
                     (C9304 + C9305 - C9306 - C9307) * C44395 * C20187 +
                     (C23756 + C23757 - C23758 - C23759) * C44395 * C20188) *
                        C635 +
                    ((C9306 - (C9305 + C9304) + C9307) * C44395 * C20186 +
                     (C23758 - (C23757 + C23756) + C23759) * C44395 * C20187 +
                     ((C436 * C22377 + C44512 * C22725) * C3290 -
                      (C22326 * C3187 + C22237 * C3289) +
                      (C436 * C22505 + C44512 * C22839) * C44599) *
                         C44395 * C20188) *
                        C44597) *
                   C44407) /
                  (p * q * std::sqrt(p + q));
    d2eexx[44] += (2 * std::pow(Pi, 2.5) *
                   ((((C20189 * C93 + C44395 * C98) * C2283 +
                      (C20189 * C101 + C44395 * C108) * C44407) *
                         C20186 +
                     (C21970 + C21971) * C20187 + C21978 * C20188) *
                        C44512 * C4095 -
                    ((C22394 + C22395) * C20188 + (C22396 + C22397) * C20187 +
                     ((C20189 * C1238 + C44395 * C1243) * C44407 +
                      (C20189 * C1232 + C44395 * C1239) * C2283) *
                         C20186) *
                        C44512 * C4096 +
                    (((C20189 * C4098 + C44395 * C4101) * C2283 +
                      (C20189 * C4104 + C44395 * C4107) * C44407) *
                         C20186 +
                     ((C20189 * C9357 + C44395 * C9359) * C2283 +
                      (C20189 * C9361 + C44395 * C9363) * C44407) *
                         C20187 +
                     ((C20189 * C23797 + C44395 * C23798) * C2283 +
                      (C20189 * C23799 + C44395 * C23800) * C44407) *
                         C20188) *
                        C44512 * C4097) *
                   C44449) /
                  (p * q * std::sqrt(p + q));
    d2eexy[44] += (2 * std::pow(Pi, 2.5) *
                   ((((C20189 * C93 + C44395 * C98) * C151 +
                      (C20189 * C152 + C44395 * C157) * C44449) *
                         C20186 +
                     (C20564 * C151 + C20638 * C44449) * C20187 +
                     (C20568 * C151 + C20639 * C44449) * C20188) *
                        C44512 * C44407 * C4095 -
                    ((C22455 * C44449 + C22391 * C151) * C20188 +
                     (C22454 * C44449 + C22393 * C151) * C20187 +
                     ((C20189 * C1298 + C44395 * C1302) * C44449 +
                      (C20189 * C1232 + C44395 * C1239) * C151) *
                         C20186) *
                        C44512 * C44407 * C4096 +
                    (((C20189 * C4098 + C44395 * C4101) * C151 +
                      (C20189 * C4148 + C44395 * C4151) * C44449) *
                         C20186 +
                     ((C20189 * C9357 + C44395 * C9359) * C151 +
                      (C20189 * C9415 + C44395 * C9417) * C44449) *
                         C20187 +
                     ((C20189 * C23797 + C44395 * C23798) * C151 +
                      (C20189 * C23839 + C44395 * C23840) * C44449) *
                         C20188) *
                        C44512 * C44407 * C4097)) /
                  (p * q * std::sqrt(p + q));
    d2eexz[44] +=
        (2 * std::pow(Pi, 2.5) *
         (((C20189 * C93 + C44395 * C98) * C4192 +
           (C20189 * C201 + C44395 * C206) * C4095 -
           (C20189 * C1232 + C44395 * C1239) * C4193 -
           (C20189 * C1357 + C44395 * C1361) * C4096 +
           (C20189 * C4098 + C44395 * C4101) * C4194 +
           (C20189 * C4195 + C44395 * C4198) * C4097) *
              C20186 +
          (C20564 * C4192 + C20704 * C4095 - C22393 * C4193 - C22518 * C4096 +
           (C20189 * C9357 + C44395 * C9359) * C4194 +
           (C20189 * C9469 + C44395 * C9471) * C4097) *
              C20187 +
          (C20568 * C4192 + C20705 * C4095 - C22391 * C4193 - C22519 * C4096 +
           (C20189 * C23797 + C44395 * C23798) * C4194 +
           (C20189 * C23879 + C44395 * C23880) * C4097) *
              C20188) *
         C44512 * C44449 * C44407) /
        (p * q * std::sqrt(p + q));
    d2eeyx[44] += (2 * std::pow(Pi, 2.5) *
                   (((C20304 * C93 + C20186 * C250 + C20305 * C642 +
                      C20187 * C824 + C20306 * C2284 + C20188 * C2425) *
                         C2283 +
                     (C20304 * C101 + C20186 * C255 + C20305 * C648 +
                      C20187 * C827 + C20306 * C2290 + C20188 * C2428) *
                         C44407) *
                        C44512 * C44395 * C4095 -
                    ((C20306 * C7511 + C20188 * C7747 + C20305 * C2695 +
                      C20187 * C2866 + C20304 * C1238 + C20186 * C1417) *
                         C44407 +
                     (C20306 * C7507 + C20188 * C7745 + C20305 * C2689 +
                      C20187 * C2863 + C20304 * C1232 + C20186 * C1414) *
                         C2283) *
                        C44512 * C44395 * C4096 +
                    ((C20304 * C4098 + C20186 * C4239 + C20305 * C9357 +
                      C20187 * C9523 + C20306 * C23797 + C20188 * C23919) *
                         C2283 +
                     (C20304 * C4104 + C20186 * C4242 + C20305 * C9361 +
                      C20187 * C9525 + C20306 * C23799 + C20188 * C23920) *
                         C44407) *
                        C44512 * C44395 * C4097) *
                   C44449) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[44] += (2 * std::pow(Pi, 2.5) *
                   (((C20304 * C93 + C20186 * C250 + C20305 * C642 +
                      C20187 * C824 + C20306 * C2284 + C20188 * C2425) *
                         C151 +
                     (C20304 * C152 + C20186 * C316 + C20305 * C709 +
                      C20187 * C893 + C20306 * C2337 + C20188 * C2469) *
                         C44449) *
                        C44512 * C44395 * C44407 * C4095 -
                    ((C20306 * C7593 + C20188 * C7815 + C20305 * C2751 +
                      C20187 * C2919 + C20304 * C1298 + C20186 * C1486) *
                         C44449 +
                     (C20306 * C7507 + C20188 * C7745 + C20305 * C2689 +
                      C20187 * C2863 + C20304 * C1232 + C20186 * C1414) *
                         C151) *
                        C44512 * C44395 * C44407 * C4096 +
                    ((C20304 * C4098 + C20186 * C4239 + C20305 * C9357 +
                      C20187 * C9523 + C20306 * C23797 + C20188 * C23919) *
                         C151 +
                     (C20304 * C4148 + C20186 * C4283 + C20305 * C9415 +
                      C20187 * C9577 + C20306 * C23839 + C20188 * C23959) *
                         C44449) *
                        C44512 * C44395 * C44407 * C4097)) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[44] += (2 * std::pow(Pi, 2.5) *
                   ((C20304 * C93 + C20186 * C250 + C20305 * C642 +
                     C20187 * C824 + C20306 * C2284 + C20188 * C2425) *
                        C4192 +
                    (C20304 * C201 + C20186 * C376 + C20305 * C767 +
                     C20187 * C963 + C20306 * C2381 + C20188 * C2510) *
                        C4095 -
                    (C20306 * C7507 + C20188 * C7745 + C20305 * C2689 +
                     C20187 * C2863 + C20304 * C1232 + C20186 * C1414) *
                        C4193 -
                    (C20306 * C7669 + C20188 * C7883 + C20305 * C2807 +
                     C20187 * C2972 + C20304 * C1357 + C20186 * C1547) *
                        C4096 +
                    (C20304 * C4098 + C20186 * C4239 + C20305 * C9357 +
                     C20187 * C9523 + C20306 * C23797 + C20188 * C23919) *
                        C4194 +
                    (C20304 * C4195 + C20186 * C4324 + C20305 * C9469 +
                     C20187 * C9629 + C20306 * C23879 + C20188 * C23998) *
                        C4097) *
                   C44512 * C44395 * C44449 * C44407) /
                  (p * q * std::sqrt(p + q));
    d2eezx[44] += (2 * std::pow(Pi, 2.5) *
                   ((((C436 * C93 + C44512 * C437) * C2283 +
                      (C436 * C101 + C44512 * C442) * C44407) *
                         C44395 * C20186 +
                     (C7316 + C7317) * C44395 * C20187 + C22235 * C20188) *
                        C4095 -
                    ((C22734 + C22735) * C44395 * C20188 +
                     (C7964 + C7965) * C44395 * C20187 +
                     ((C436 * C1238 + C44512 * C1619) * C44407 +
                      (C436 * C1232 + C44512 * C1616) * C2283) *
                         C44395 * C20186) *
                        C4096 +
                    (((C436 * C4098 + C44512 * C4365) * C2283 +
                      (C436 * C4104 + C44512 * C4368) * C44407) *
                         C44395 * C20186 +
                     ((C436 * C9357 + C44512 * C9681) * C2283 +
                      (C436 * C9361 + C44512 * C9683) * C44407) *
                         C44395 * C20187 +
                     ((C436 * C23797 + C44512 * C24037) * C2283 +
                      (C436 * C23799 + C44512 * C24038) * C44407) *
                         C44395 * C20188) *
                        C4097) *
                   C44449) /
                  (p * q * std::sqrt(p + q));
    d2eezy[44] += (2 * std::pow(Pi, 2.5) *
                   ((((C436 * C93 + C44512 * C437) * C151 +
                      (C436 * C152 + C44512 * C503) * C44449) *
                         C44395 * C20186 +
                     (C5512 * C151 + C5591 * C44449) * C44395 * C20187 +
                     (C7327 * C151 + C7384 * C44449) * C44395 * C20188) *
                        C44407 * C4095 -
                    ((C22789 * C44449 + C22733 * C151) * C44395 * C20188 +
                     (C8036 * C44449 + C7963 * C151) * C44395 * C20187 +
                     ((C436 * C1298 + C44512 * C1688) * C44449 +
                      (C436 * C1232 + C44512 * C1616) * C151) *
                         C44395 * C20186) *
                        C44407 * C4096 +
                    (((C436 * C4098 + C44512 * C4365) * C151 +
                      (C436 * C4148 + C44512 * C4409) * C44449) *
                         C44395 * C20186 +
                     ((C436 * C9357 + C44512 * C9681) * C151 +
                      (C436 * C9415 + C44512 * C9735) * C44449) *
                         C44395 * C20187 +
                     ((C436 * C23797 + C44512 * C24037) * C151 +
                      (C436 * C23839 + C44512 * C24077) * C44449) *
                         C44395 * C20188) *
                        C44407 * C4097)) /
                  (p * q * std::sqrt(p + q));
    d2eezz[44] +=
        (2 * std::pow(Pi, 2.5) *
         (((C436 * C93 + C44512 * C437) * C4192 +
           (C436 * C201 + C44512 * C562) * C4095 -
           (C436 * C1232 + C44512 * C1616) * C4193 -
           (C436 * C1357 + C44512 * C1749) * C4096 +
           (C436 * C4098 + C44512 * C4365) * C4194 +
           (C436 * C4195 + C44512 * C4450) * C4097) *
              C44395 * C20186 +
          (C5512 * C4192 + C5668 * C4095 - C7963 * C4193 - C8110 * C4096 +
           (C436 * C9357 + C44512 * C9681) * C4194 +
           (C436 * C9469 + C44512 * C9787) * C4097) *
              C44395 * C20187 +
          (C7327 * C4192 + C7440 * C4095 - C22733 * C4193 - C22846 * C4096 +
           (C436 * C23797 + C44512 * C24037) * C4194 +
           (C436 * C23879 + C44512 * C24116) * C4097) *
              C44395 * C20188) *
         C44449 * C44407) /
        (p * q * std::sqrt(p + q));
    d2eexx[45] += (2 * std::pow(Pi, 2.5) *
                   ((((C20189 * C93 + C44395 * C98) * C90 +
                      (C20189 * C101 + C44395 * C108) * C80 -
                      (C20189 * C94 + C44395 * C99) * C91 -
                      (C20189 * C102 + C44395 * C109) * C81 +
                      (C20189 * C95 + C44395 * C100) * C92 +
                      (C20189 * C103 + C44395 * C110) * C82) *
                         C15085 +
                     (C20564 * C90 + C20565 * C80 - C20566 * C91 -
                      C20567 * C81 + (C20189 * C640 + C44395 * C644) * C92 +
                      (C20189 * C646 + C44395 * C651) * C82) *
                         C44601) *
                        C9839 +
                    (((C20189 * C1232 + C44395 * C1239) * C90 +
                      (C20189 * C1238 + C44395 * C1243) * C80 -
                      (C20189 * C1229 + C44395 * C1233) * C91 -
                      (C20189 * C1237 + C44395 * C1242) * C81 +
                      (C20189 * C1230 + C44395 * C1234) * C92 +
                      (C20189 * C1236 + C44395 * C1241) * C82) *
                         C15085 +
                     (C22393 * C90 + C22392 * C80 -
                      (C20189 * C2690 + C44395 * C2693) * C91 -
                      (C20189 * C2696 + C44395 * C2699) * C81 +
                      (C20189 * C2691 + C44395 * C2694) * C92 +
                      (C20189 * C2697 + C44395 * C2700) * C82) *
                         C44601) *
                        C44603) *
                   C44464 * C44449) /
                  (p * q * std::sqrt(p + q));
    d2eexy[45] += (2 * std::pow(Pi, 2.5) *
                   (((((C20189 * C93 + C44395 * C98) * C151 +
                       (C20189 * C152 + C44395 * C157) * C44449) *
                          C15085 +
                      (C20564 * C151 + C20638 * C44449) * C44601) *
                         C9839 +
                     (((C20189 * C1232 + C44395 * C1239) * C151 +
                       (C20189 * C1298 + C44395 * C1302) * C44449) *
                          C15085 +
                      (C22393 * C151 + C22454 * C44449) * C44601) *
                         C44603) *
                        C80 -
                    ((((C20189 * C2752 + C44395 * C2755) * C44449 +
                       (C20189 * C2690 + C44395 * C2693) * C151) *
                          C44601 +
                      ((C20189 * C1295 + C44395 * C1299) * C44449 +
                       (C20189 * C1229 + C44395 * C1233) * C151) *
                          C15085) *
                         C44603 +
                     ((C20640 * C44449 + C20566 * C151) * C44601 +
                      ((C20189 * C153 + C44395 * C158) * C44449 +
                       (C20189 * C94 + C44395 * C99) * C151) *
                          C15085) *
                         C9839) *
                        C81 +
                    ((((C20189 * C95 + C44395 * C100) * C151 +
                       (C20189 * C154 + C44395 * C159) * C44449) *
                          C15085 +
                      ((C20189 * C640 + C44395 * C644) * C151 +
                       (C20189 * C707 + C44395 * C711) * C44449) *
                          C44601) *
                         C9839 +
                     (((C20189 * C1230 + C44395 * C1234) * C151 +
                       (C20189 * C1296 + C44395 * C1300) * C44449) *
                          C15085 +
                      ((C20189 * C2691 + C44395 * C2694) * C151 +
                       (C20189 * C2753 + C44395 * C2756) * C44449) *
                          C44601) *
                         C44603) *
                        C82) *
                   C44464) /
                  (p * q * std::sqrt(p + q));
    d2eexz[45] += (2 * std::pow(Pi, 2.5) *
                   (((((C20189 * C93 + C44395 * C98) * C200 +
                       (C20189 * C201 + C44395 * C206) * C44464) *
                          C15085 +
                      (C20692 + C20708) * C44601) *
                         C9839 +
                     (((C20189 * C1232 + C44395 * C1239) * C200 +
                       (C20189 * C1357 + C44395 * C1361) * C44464) *
                          C15085 +
                      (C22393 * C200 + C22518 * C44464) * C44601) *
                         C44603) *
                        C44449 * C80 -
                    ((((C20189 * C2808 + C44395 * C2811) * C44464 +
                       (C20189 * C2690 + C44395 * C2693) * C200) *
                          C44601 +
                      ((C20189 * C1356 + C44395 * C1360) * C44464 +
                       (C20189 * C1229 + C44395 * C1233) * C200) *
                          C15085) *
                         C44603 +
                     ((C20710 + C20698) * C44601 +
                      ((C20189 * C202 + C44395 * C207) * C44464 +
                       (C20189 * C94 + C44395 * C99) * C200) *
                          C15085) *
                         C9839) *
                        C44449 * C81 +
                    ((((C20189 * C95 + C44395 * C100) * C200 +
                       (C20189 * C203 + C44395 * C208) * C44464) *
                          C15085 +
                      ((C20189 * C640 + C44395 * C644) * C200 +
                       (C20189 * C765 + C44395 * C769) * C44464) *
                          C44601) *
                         C9839 +
                     (((C20189 * C1230 + C44395 * C1234) * C200 +
                       (C20189 * C1355 + C44395 * C1359) * C44464) *
                          C15085 +
                      ((C20189 * C2691 + C44395 * C2694) * C200 +
                       (C20189 * C2809 + C44395 * C2812) * C44464) *
                          C44601) *
                         C44603) *
                        C44449 * C82)) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[45] +=
        (2 * std::pow(Pi, 2.5) *
         (((C15239 * C93 + C15085 * C250 + C15240 * C642 + C44601 * C824) *
               C90 +
           (C15239 * C101 + C15085 * C255 + C15240 * C648 + C44601 * C827) *
               C80 -
           (C15258 + C15259) * C91 - (C15260 + C15261) * C81 +
           (C15262 + C15263) * C92 + (C15264 + C15265) * C82) *
              C9839 +
          ((C15239 * C1232 + C15085 * C1414 + C15240 * C2689 + C44601 * C2863) *
               C90 +
           (C15239 * C1238 + C15085 * C1417 + C15240 * C2695 + C44601 * C2866) *
               C80 -
           (C16479 + C16478) * C91 - (C16481 + C16480) * C81 +
           (C15239 * C1230 + C15085 * C1415 + C15240 * C2691 + C44601 * C2865) *
               C92 +
           (C15239 * C1236 + C15085 * C1419 + C15240 * C2697 + C44601 * C2868) *
               C82) *
              C44603) *
         C44395 * C44464 * C44449) /
        (p * q * std::sqrt(p + q));
    d2eeyy[45] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C15239 * C93 + C15085 * C250 + C15240 * C642 + C44601 * C824) *
                C151 +
            (C15239 * C152 + C15085 * C316 + C15240 * C709 + C44601 * C893) *
                C44449) *
               C9839 +
           ((C15239 * C1232 + C15085 * C1414 + C15240 * C2689 +
             C44601 * C2863) *
                C151 +
            (C15239 * C1298 + C15085 * C1486 + C15240 * C2751 +
             C44601 * C2919) *
                C44449) *
               C44603) *
              C44395 * C80 -
          (((C16553 + C16552) * C44449 + (C16479 + C16478) * C151) * C44603 +
           ((C15325 + C15324) * C44449 + (C15258 + C15259) * C151) * C9839) *
              C44395 * C81 +
          (((C15262 + C15263) * C151 + (C15327 + C15326) * C44449) * C9839 +
           ((C15239 * C1230 + C15085 * C1415 + C15240 * C2691 +
             C44601 * C2865) *
                C151 +
            (C15239 * C1296 + C15085 * C1484 + C15240 * C2753 +
             C44601 * C2921) *
                C44449) *
               C44603) *
              C44395 * C82) *
         C44464) /
        (p * q * std::sqrt(p + q));
    d2eeyz[45] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C15239 * C93 + C15085 * C250 + C15240 * C642 + C44601 * C824) *
                C200 +
            (C15239 * C201 + C15085 * C376 + C15240 * C767 + C44601 * C963) *
                C44464) *
               C9839 +
           ((C15239 * C1232 + C15085 * C1414 + C15240 * C2689 +
             C44601 * C2863) *
                C200 +
            (C15239 * C1357 + C15085 * C1547 + C15240 * C2807 +
             C44601 * C2972) *
                C44464) *
               C44603) *
              C44395 * C44449 * C80 -
          (((C16624 + C16625) * C44464 + (C16479 + C16478) * C200) * C44603 +
           ((C15387 + C15386) * C44464 + (C15258 + C15259) * C200) * C9839) *
              C44395 * C44449 * C81 +
          (((C15262 + C15263) * C200 + (C15389 + C15388) * C44464) * C9839 +
           ((C15239 * C1230 + C15085 * C1415 + C15240 * C2691 +
             C44601 * C2865) *
                C200 +
            (C15239 * C1355 + C15085 * C1549 + C15240 * C2809 +
             C44601 * C2974) *
                C44464) *
               C44603) *
              C44395 * C44449 * C82)) /
        (p * q * std::sqrt(p + q));
    d2eezx[45] +=
        (2 * std::pow(Pi, 2.5) *
         (((C10145 * C93 + C9839 * C437 + C10146 * C1232 + C44603 * C1616) *
               C90 +
           (C10145 * C101 + C9839 * C442 + C10146 * C1238 + C44603 * C1619) *
               C80 -
           (C10164 + C10165) * C91 - (C10166 + C10167) * C81 +
           (C10168 + C10169) * C92 + (C10170 + C10171) * C82) *
              C44395 * C15085 +
          ((C10145 * C642 + C9839 * C1026 + C10146 * C2689 + C44603 * C3025) *
               C90 +
           (C10145 * C648 + C9839 * C1029 + C10146 * C2695 + C44603 * C3028) *
               C80 -
           (C10785 + C10784) * C91 - (C10787 + C10786) * C81 +
           (C10145 * C640 + C9839 * C1027 + C10146 * C2691 + C44603 * C3027) *
               C92 +
           (C10145 * C646 + C9839 * C1031 + C10146 * C2697 + C44603 * C3030) *
               C82) *
              C44395 * C44601) *
         C44464 * C44449) /
        (p * q * std::sqrt(p + q));
    d2eezy[45] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C10145 * C93 + C9839 * C437 + C10146 * C1232 + C44603 * C1616) *
                C151 +
            (C10145 * C152 + C9839 * C503 + C10146 * C1298 + C44603 * C1688) *
                C44449) *
               C44395 * C15085 +
           ((C10145 * C642 + C9839 * C1026 + C10146 * C2689 + C44603 * C3025) *
                C151 +
            (C10145 * C709 + C9839 * C1095 + C10146 * C2751 + C44603 * C3081) *
                C44449) *
               C44395 * C44601) *
              C80 -
          (((C10858 + C10859) * C44449 + (C10785 + C10784) * C151) * C44395 *
               C44601 +
           ((C10231 + C10230) * C44449 + (C10164 + C10165) * C151) * C44395 *
               C15085) *
              C81 +
          (((C10168 + C10169) * C151 + (C10233 + C10232) * C44449) * C44395 *
               C15085 +
           ((C10145 * C640 + C9839 * C1027 + C10146 * C2691 + C44603 * C3027) *
                C151 +
            (C10145 * C707 + C9839 * C1097 + C10146 * C2753 + C44603 * C3083) *
                C44449) *
               C44395 * C44601) *
              C82) *
         C44464) /
        (p * q * std::sqrt(p + q));
    d2eezz[45] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C10145 * C93 + C9839 * C437 + C10146 * C1232 + C44603 * C1616) *
                C200 +
            (C10145 * C201 + C9839 * C562 + C10146 * C1357 + C44603 * C1749) *
                C44464) *
               C44395 * C15085 +
           ((C10145 * C642 + C9839 * C1026 + C10146 * C2689 + C44603 * C3025) *
                C200 +
            (C10145 * C767 + C9839 * C1165 + C10146 * C2807 + C44603 * C3134) *
                C44464) *
               C44395 * C44601) *
              C44449 * C80 -
          (((C10930 + C10931) * C44464 + (C10785 + C10784) * C200) * C44395 *
               C44601 +
           ((C10293 + C10292) * C44464 + (C10164 + C10165) * C200) * C44395 *
               C15085) *
              C44449 * C81 +
          (((C10168 + C10169) * C200 + (C10295 + C10294) * C44464) * C44395 *
               C15085 +
           ((C10145 * C640 + C9839 * C1027 + C10146 * C2691 + C44603 * C3027) *
                C200 +
            (C10145 * C765 + C9839 * C1163 + C10146 * C2809 + C44603 * C3136) *
                C44464) *
               C44395 * C44601) *
              C44449 * C82)) /
        (p * q * std::sqrt(p + q));
    d2eexx[46] += (2 * std::pow(Pi, 2.5) *
                   (((((C20189 * C93 + C44395 * C98) * C637 +
                       (C20189 * C101 + C44395 * C108) * C633 -
                       (C20189 * C94 + C44395 * C99) * C638 -
                       (C20189 * C102 + C44395 * C109) * C44595) *
                          C15085 +
                      (C20572 + C20573 - C20574 - C20575) * C44601) *
                         C9839 +
                     (((C20189 * C1232 + C44395 * C1239) * C637 +
                       (C20189 * C1238 + C44395 * C1243) * C633 -
                       (C20189 * C1229 + C44395 * C1233) * C638 -
                       (C20189 * C1237 + C44395 * C1242) * C44595) *
                          C15085 +
                      (C24634 + C24635 - C24642 - C24643) * C44601) *
                         C44603) *
                        C44464 * C635 +
                    (((C20574 - (C20573 + C20572) + C20575) * C15085 +
                      (C20578 - (C20577 + C20576) + C20579) * C44601) *
                         C9839 +
                     ((C24642 - (C24635 + C24634) + C24643) * C15085 +
                      ((C20189 * C7508 + C44395 * C7510) * C638 -
                       (C22390 * C633 + C22391 * C637) +
                       (C20189 * C7512 + C44395 * C7514) * C44595) *
                          C44601) *
                         C44603) *
                        C44464 * C44597)) /
                  (p * q * std::sqrt(p + q));
    d2eexy[46] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C20189 * C93 + C44395 * C98) * C705 +
             (C20189 * C152 + C44395 * C157) * C635 - C20564 * C706 -
             C20638 * C44597) *
                C15085 +
            (C20564 * C705 + C20638 * C635 - C20568 * C706 - C20639 * C44597) *
                C44601) *
               C9839 +
           (((C20189 * C1232 + C44395 * C1239) * C705 +
             (C20189 * C1298 + C44395 * C1302) * C635 - C22393 * C706 -
             C22454 * C44597) *
                C15085 +
            (C22393 * C705 + C22454 * C635 - C22391 * C706 - C22455 * C44597) *
                C44601) *
               C44603) *
              C633 +
          (((C20566 * C706 -
             ((C20189 * C153 + C44395 * C158) * C635 +
              (C20189 * C94 + C44395 * C99) * C705) +
             C20640 * C44597) *
                C15085 +
            (C20570 * C706 - (C20640 * C635 + C20566 * C705) +
             C20641 * C44597) *
                C44601) *
               C9839 +
           ((C24640 * C706 -
             ((C20189 * C1295 + C44395 * C1299) * C635 +
              (C20189 * C1229 + C44395 * C1233) * C705) +
             C24712 * C44597) *
                C15085 +
            ((C20189 * C7508 + C44395 * C7510) * C706 -
             (C24712 * C635 + C24640 * C705) +
             (C20189 * C7594 + C44395 * C7596) * C44597) *
                C44601) *
               C44603) *
              C44595) *
         C44464) /
        (p * q * std::sqrt(p + q));
    d2eexz[46] +=
        (2 * std::pow(Pi, 2.5) *
         ((((((C20189 * C93 + C44395 * C98) * C200 +
              (C20189 * C201 + C44395 * C206) * C44464) *
                 C15085 +
             (C20692 + C20708) * C44601) *
                C9839 +
            (((C20189 * C1232 + C44395 * C1239) * C200 +
              (C20189 * C1357 + C44395 * C1361) * C44464) *
                 C15085 +
             (C24779 + C24780) * C44601) *
                C44603) *
               C635 -
           (((C22519 * C44464 + C22391 * C200) * C44601 +
             (C24780 + C24779) * C15085) *
                C44603 +
            ((C20709 + C20695) * C44601 + (C20708 + C20692) * C15085) * C9839) *
               C44597) *
              C633 +
          ((((C20698 + C20710) * C15085 + (C20701 + C20711) * C44601) * C9839 +
            ((C24781 + C24785) * C15085 +
             ((C20189 * C7508 + C44395 * C7510) * C200 +
              (C20189 * C7670 + C44395 * C7672) * C44464) *
                 C44601) *
                C44603) *
               C44597 -
           (((C24785 + C24781) * C44601 +
             ((C20189 * C1356 + C44395 * C1360) * C44464 +
              (C20189 * C1229 + C44395 * C1233) * C200) *
                 C15085) *
                C44603 +
            ((C20710 + C20698) * C44601 +
             ((C20189 * C202 + C44395 * C207) * C44464 +
              (C20189 * C94 + C44395 * C99) * C200) *
                 C15085) *
                C9839) *
               C635) *
              C44595)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[46] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C15239 * C93 + C15085 * C250 + C15240 * C642 + C44601 * C824) *
                C637 +
            (C15239 * C101 + C15085 * C255 + C15240 * C648 + C44601 * C827) *
                C633 -
            (C15258 + C15259) * C638 - (C15260 + C15261) * C44595) *
               C9839 +
           ((C15239 * C1232 + C15085 * C1414 + C15240 * C2689 +
             C44601 * C2863) *
                C637 +
            (C15239 * C1238 + C15085 * C1417 + C15240 * C2695 +
             C44601 * C2866) *
                C633 -
            (C16479 + C16478) * C638 - (C16481 + C16480) * C44595) *
               C44603) *
              C44395 * C44464 * C635 +
          (((C15860 + C15861) * C638 -
            ((C15240 * C2290 + C44601 * C2428 + C15239 * C648 + C15085 * C827) *
                 C633 +
             (C15240 * C2284 + C44601 * C2425 + C15239 * C642 + C15085 * C824) *
                 C637) +
            (C15862 + C15863) * C44595) *
               C9839 +
           ((C15239 * C2690 + C15085 * C2864 + C15240 * C7508 +
             C44601 * C7746) *
                C638 -
            ((C15240 * C7511 + C44601 * C7747 + C15239 * C2695 +
              C15085 * C2866) *
                 C633 +
             (C15240 * C7507 + C44601 * C7745 + C15239 * C2689 +
              C15085 * C2863) *
                 C637) +
            (C15239 * C2696 + C15085 * C2867 + C15240 * C7512 +
             C44601 * C7748) *
                C44595) *
               C44603) *
              C44395 * C44464 * C44597)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[46] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C15239 * C93 + C15085 * C250 + C15240 * C642 + C44601 * C824) *
                C705 +
            (C15239 * C152 + C15085 * C316 + C15240 * C709 + C44601 * C893) *
                C635 -
            (C15240 * C2284 + C44601 * C2425 + C15239 * C642 + C15085 * C824) *
                C706 -
            (C15240 * C2337 + C44601 * C2469 + C15239 * C709 + C15085 * C893) *
                C44597) *
               C9839 +
           ((C15239 * C1232 + C15085 * C1414 + C15240 * C2689 +
             C44601 * C2863) *
                C705 +
            (C15239 * C1298 + C15085 * C1486 + C15240 * C2751 +
             C44601 * C2919) *
                C635 -
            (C15240 * C7507 + C44601 * C7745 + C15239 * C2689 +
             C15085 * C2863) *
                C706 -
            (C15240 * C7593 + C44601 * C7815 + C15239 * C2751 +
             C15085 * C2919) *
                C44597) *
               C44603) *
              C44395 * C633 +
          (((C15860 + C15861) * C706 -
            ((C15325 + C15324) * C635 + (C15258 + C15259) * C705) +
            (C15935 + C15934) * C44597) *
               C9839 +
           ((C15239 * C2690 + C15085 * C2864 + C15240 * C7508 +
             C44601 * C7746) *
                C706 -
            ((C16553 + C16552) * C635 + (C16479 + C16478) * C705) +
            (C15239 * C2752 + C15085 * C2920 + C15240 * C7594 +
             C44601 * C7816) *
                C44597) *
               C44603) *
              C44395 * C44595) *
         C44464) /
        (p * q * std::sqrt(p + q));
    d2eeyz[46] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C15239 * C93 + C15085 * C250 + C15240 * C642 + C44601 * C824) *
                 C200 +
             (C15239 * C201 + C15085 * C376 + C15240 * C767 + C44601 * C963) *
                 C44464) *
                C9839 +
            ((C15239 * C1232 + C15085 * C1414 + C15240 * C2689 +
              C44601 * C2863) *
                 C200 +
             (C15239 * C1357 + C15085 * C1547 + C15240 * C2807 +
              C44601 * C2972) *
                 C44464) *
                C44603) *
               C44395 * C635 -
           (((C15240 * C7669 + C44601 * C7883 + C15239 * C2807 +
              C15085 * C2972) *
                 C44464 +
             (C15240 * C7507 + C44601 * C7745 + C15239 * C2689 +
              C15085 * C2863) *
                 C200) *
                C44603 +
            ((C15240 * C2381 + C44601 * C2510 + C15239 * C767 + C15085 * C963) *
                 C44464 +
             (C15240 * C2284 + C44601 * C2425 + C15239 * C642 + C15085 * C824) *
                 C200) *
                C9839) *
               C44395 * C44597) *
              C633 +
          ((((C15860 + C15861) * C200 + (C16007 + C16006) * C44464) * C9839 +
            ((C15239 * C2690 + C15085 * C2864 + C15240 * C7508 +
              C44601 * C7746) *
                 C200 +
             (C15239 * C2808 + C15085 * C2973 + C15240 * C7670 +
              C44601 * C7884) *
                 C44464) *
                C44603) *
               C44395 * C44597 -
           (((C16624 + C16625) * C44464 + (C16479 + C16478) * C200) * C44603 +
            ((C15387 + C15386) * C44464 + (C15258 + C15259) * C200) * C9839) *
               C44395 * C635) *
              C44595)) /
        (p * q * std::sqrt(p + q));
    d2eezx[46] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C10145 * C93 + C9839 * C437 + C10146 * C1232 + C44603 * C1616) *
                C637 +
            (C10145 * C101 + C9839 * C442 + C10146 * C1238 + C44603 * C1619) *
                C633 -
            (C10164 + C10165) * C638 - (C10166 + C10167) * C44595) *
               C44395 * C15085 +
           ((C25058 + C25059) * C637 + (C25060 + C25061) * C633 -
            (C10785 + C10784) * C638 - (C10787 + C10786) * C44595) *
               C44395 * C44601) *
              C44464 * C635 +
          (((C10784 + C10785) * C638 -
            ((C25061 + C25060) * C633 + (C25059 + C25058) * C637) +
            (C10786 + C10787) * C44595) *
               C44395 * C15085 +
           ((C10145 * C2285 + C9839 * C2552 + C10146 * C7508 + C44603 * C7952) *
                C638 -
            ((C10146 * C7511 + C44603 * C7953 + C10145 * C2290 +
              C9839 * C2554) *
                 C633 +
             (C10146 * C7507 + C44603 * C7951 + C10145 * C2284 +
              C9839 * C2551) *
                 C637) +
            (C10145 * C2291 + C9839 * C2555 + C10146 * C7512 + C44603 * C7954) *
                C44595) *
               C44395 * C44601) *
              C44464 * C44597)) /
        (p * q * std::sqrt(p + q));
    d2eezy[46] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C10145 * C93 + C9839 * C437 + C10146 * C1232 + C44603 * C1616) *
                C705 +
            (C10145 * C152 + C9839 * C503 + C10146 * C1298 + C44603 * C1688) *
                C635 -
            (C25059 + C25058) * C706 - (C25132 + C25133) * C44597) *
               C44395 * C15085 +
           ((C25058 + C25059) * C705 + (C25133 + C25132) * C635 -
            (C10146 * C7507 + C44603 * C7951 + C10145 * C2284 + C9839 * C2551) *
                C706 -
            (C10146 * C7593 + C44603 * C8031 + C10145 * C2337 + C9839 * C2595) *
                C44597) *
               C44395 * C44601) *
              C633 +
          (((C10784 + C10785) * C706 -
            ((C10231 + C10230) * C635 + (C10164 + C10165) * C705) +
            (C10859 + C10858) * C44597) *
               C44395 * C15085 +
           ((C10145 * C2285 + C9839 * C2552 + C10146 * C7508 + C44603 * C7952) *
                C706 -
            ((C10858 + C10859) * C635 + (C10785 + C10784) * C705) +
            (C10145 * C2338 + C9839 * C2596 + C10146 * C7594 + C44603 * C8032) *
                C44597) *
               C44395 * C44601) *
              C44595) *
         C44464) /
        (p * q * std::sqrt(p + q));
    d2eezz[46] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C10145 * C93 + C9839 * C437 + C10146 * C1232 + C44603 * C1616) *
                 C200 +
             (C10145 * C201 + C9839 * C562 + C10146 * C1357 + C44603 * C1749) *
                 C44464) *
                C44395 * C15085 +
            ((C25058 + C25059) * C200 + (C25204 + C25205) * C44464) * C44395 *
                C44601) *
               C635 -
           (((C10146 * C7669 + C44603 * C8102 + C10145 * C2381 +
              C9839 * C2636) *
                 C44464 +
             (C10146 * C7507 + C44603 * C7951 + C10145 * C2284 +
              C9839 * C2551) *
                 C200) *
                C44395 * C44601 +
            ((C25205 + C25204) * C44464 + (C25059 + C25058) * C200) * C44395 *
                C15085) *
               C44597) *
              C633 +
          ((((C10784 + C10785) * C200 + (C10931 + C10930) * C44464) * C44395 *
                C15085 +
            ((C10145 * C2285 + C9839 * C2552 + C10146 * C7508 +
              C44603 * C7952) *
                 C200 +
             (C10145 * C2382 + C9839 * C2637 + C10146 * C7670 +
              C44603 * C8103) *
                 C44464) *
                C44395 * C44601) *
               C44597 -
           (((C10930 + C10931) * C44464 + (C10785 + C10784) * C200) * C44395 *
                C44601 +
            ((C10293 + C10292) * C44464 + (C10164 + C10165) * C200) * C44395 *
                C15085) *
               C635) *
              C44595)) /
        (p * q * std::sqrt(p + q));
    d2eexx[47] += (2 * std::pow(Pi, 2.5) *
                   (((((C20189 * C93 + C44395 * C98) * C637 +
                       (C20189 * C101 + C44395 * C108) * C633 -
                       (C20189 * C94 + C44395 * C99) * C638 -
                       (C20189 * C102 + C44395 * C109) * C44595) *
                          C15085 +
                      (C20572 + C20573 - C20574 - C20575) * C44601) *
                         C9839 +
                     ((C25284 + C25285 - C25286 - C25287) * C15085 +
                      (C24634 + C24635 - C24642 - C24643) * C44601) *
                         C44603) *
                        C1227 +
                    (((C25286 - (C25285 + C25284) + C25287) * C15085 +
                      (C24642 - (C24635 + C24634) + C24643) * C44601) *
                         C9839 +
                     (((C20189 * C4099 + C44395 * C4102) * C638 -
                       ((C20189 * C4104 + C44395 * C4107) * C633 +
                        (C20189 * C4098 + C44395 * C4101) * C637) +
                       (C20189 * C4105 + C44395 * C4108) * C44595) *
                          C15085 +
                      ((C20189 * C9358 + C44395 * C9360) * C638 -
                       ((C20189 * C9361 + C44395 * C9363) * C633 +
                        (C20189 * C9357 + C44395 * C9359) * C637) +
                       (C20189 * C9362 + C44395 * C9364) * C44595) *
                          C44601) *
                         C44603) *
                        C44599) *
                   C44449) /
                  (p * q * std::sqrt(p + q));
    d2eexy[47] +=
        (2 * std::pow(Pi, 2.5) *
         ((((((C20189 * C93 + C44395 * C98) * C151 +
              (C20189 * C152 + C44395 * C157) * C44449) *
                 C15085 +
             (C20564 * C151 + C20638 * C44449) * C44601) *
                C9839 +
            ((C25354 + C25366) * C15085 + (C25357 + C25358) * C44601) *
                C44603) *
               C633 -
           (((C25359 + C25360) * C44601 + (C25367 + C25363) * C15085) * C44603 +
            ((C20640 * C44449 + C20566 * C151) * C44601 +
             ((C20189 * C153 + C44395 * C158) * C44449 +
              (C20189 * C94 + C44395 * C99) * C151) *
                 C15085) *
                C9839) *
               C44595) *
              C1227 +
          ((((C25363 + C25367) * C15085 + (C25360 + C25359) * C44601) * C9839 +
            (((C20189 * C4099 + C44395 * C4102) * C151 +
              (C20189 * C4149 + C44395 * C4152) * C44449) *
                 C15085 +
             ((C20189 * C9358 + C44395 * C9360) * C151 +
              (C20189 * C9416 + C44395 * C9418) * C44449) *
                 C44601) *
                C44603) *
               C44595 -
           ((((C20189 * C9415 + C44395 * C9417) * C44449 +
              (C20189 * C9357 + C44395 * C9359) * C151) *
                 C44601 +
             ((C20189 * C4148 + C44395 * C4151) * C44449 +
              (C20189 * C4098 + C44395 * C4101) * C151) *
                 C15085) *
                C44603 +
            ((C25358 + C25357) * C44601 + (C25366 + C25354) * C15085) * C9839) *
               C633) *
              C44599)) /
        (p * q * std::sqrt(p + q));
    d2eexz[47] += (2 * std::pow(Pi, 2.5) *
                   (((((C20189 * C93 + C44395 * C98) * C1353 +
                       (C20189 * C201 + C44395 * C206) * C1227 -
                       C25280 * C1354 - C25438 * C44599) *
                          C15085 +
                      (C22508 + C22509 - C22510 - C22520) * C44601) *
                         C9839 +
                     ((C25280 * C1353 + C25438 * C1227 -
                       (C20189 * C4098 + C44395 * C4101) * C1354 -
                       (C20189 * C4195 + C44395 * C4198) * C44599) *
                          C15085 +
                      (C22393 * C1353 + C22518 * C1227 -
                       (C20189 * C9357 + C44395 * C9359) * C1354 -
                       (C20189 * C9469 + C44395 * C9471) * C44599) *
                          C44601) *
                         C44603) *
                        C44449 * C633 +
                    (((C25282 * C1354 -
                       ((C20189 * C202 + C44395 * C207) * C1227 +
                        (C20189 * C94 + C44395 * C99) * C1353) +
                       C25439 * C44599) *
                          C15085 +
                      (C24640 * C1354 - (C20706 * C1227 + C20566 * C1353) +
                       C24784 * C44599) *
                          C44601) *
                         C9839 +
                     (((C20189 * C4099 + C44395 * C4102) * C1354 -
                       (C25439 * C1227 + C25282 * C1353) +
                       (C20189 * C4196 + C44395 * C4199) * C44599) *
                          C15085 +
                      ((C20189 * C9358 + C44395 * C9360) * C1354 -
                       (C24784 * C1227 + C24640 * C1353) +
                       (C20189 * C9470 + C44395 * C9472) * C44599) *
                          C44601) *
                         C44603) *
                        C44449 * C44595)) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[47] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C15239 * C93 + C15085 * C250 + C15240 * C642 + C44601 * C824) *
                C637 +
            (C15239 * C101 + C15085 * C255 + C15240 * C648 + C44601 * C827) *
                C633 -
            (C15258 + C15259) * C638 - (C15260 + C15261) * C44595) *
               C9839 +
           ((C25514 + C25515) * C637 + (C25516 + C25517) * C633 -
            (C16479 + C16478) * C638 - (C16481 + C16480) * C44595) *
               C44603) *
              C44395 * C1227 +
          (((C16478 + C16479) * C638 -
            ((C25517 + C25516) * C633 + (C25515 + C25514) * C637) +
            (C16480 + C16481) * C44595) *
               C9839 +
           ((C15239 * C4099 + C15085 * C4240 + C15240 * C9358 +
             C44601 * C9524) *
                C638 -
            ((C15240 * C9361 + C44601 * C9525 + C15239 * C4104 +
              C15085 * C4242) *
                 C633 +
             (C15240 * C9357 + C44601 * C9523 + C15239 * C4098 +
              C15085 * C4239) *
                 C637) +
            (C15239 * C4105 + C15085 * C4243 + C15240 * C9362 +
             C44601 * C9526) *
                C44595) *
               C44603) *
              C44395 * C44599) *
         C44449) /
        (p * q * std::sqrt(p + q));
    d2eeyy[47] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C15239 * C93 + C15085 * C250 + C15240 * C642 + C44601 * C824) *
                 C151 +
             (C15239 * C152 + C15085 * C316 + C15240 * C709 + C44601 * C893) *
                 C44449) *
                C9839 +
            ((C25514 + C25515) * C151 + (C25588 + C25589) * C44449) * C44603) *
               C44395 * C633 -
           (((C16553 + C16552) * C44449 + (C16479 + C16478) * C151) * C44603 +
            ((C15325 + C15324) * C44449 + (C15258 + C15259) * C151) * C9839) *
               C44395 * C44595) *
              C1227 +
          ((((C16478 + C16479) * C151 + (C16552 + C16553) * C44449) * C9839 +
            ((C15239 * C4099 + C15085 * C4240 + C15240 * C9358 +
              C44601 * C9524) *
                 C151 +
             (C15239 * C4149 + C15085 * C4284 + C15240 * C9416 +
              C44601 * C9578) *
                 C44449) *
                C44603) *
               C44395 * C44595 -
           (((C15240 * C9415 + C44601 * C9577 + C15239 * C4148 +
              C15085 * C4283) *
                 C44449 +
             (C15240 * C9357 + C44601 * C9523 + C15239 * C4098 +
              C15085 * C4239) *
                 C151) *
                C44603 +
            ((C25589 + C25588) * C44449 + (C25515 + C25514) * C151) * C9839) *
               C44395 * C633) *
              C44599)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[47] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C15239 * C93 + C15085 * C250 + C15240 * C642 + C44601 * C824) *
                C1353 +
            (C15239 * C201 + C15085 * C376 + C15240 * C767 + C44601 * C963) *
                C1227 -
            (C25515 + C25514) * C1354 - (C25660 + C25661) * C44599) *
               C9839 +
           ((C25514 + C25515) * C1353 + (C25661 + C25660) * C1227 -
            (C15240 * C9357 + C44601 * C9523 + C15239 * C4098 +
             C15085 * C4239) *
                C1354 -
            (C15240 * C9469 + C44601 * C9629 + C15239 * C4195 +
             C15085 * C4324) *
                C44599) *
               C44603) *
              C44395 * C44449 * C633 +
          (((C16478 + C16479) * C1354 -
            ((C15387 + C15386) * C1227 + (C15258 + C15259) * C1353) +
            (C16625 + C16624) * C44599) *
               C9839 +
           ((C15239 * C4099 + C15085 * C4240 + C15240 * C9358 +
             C44601 * C9524) *
                C1354 -
            ((C16624 + C16625) * C1227 + (C16479 + C16478) * C1353) +
            (C15239 * C4196 + C15085 * C4325 + C15240 * C9470 +
             C44601 * C9630) *
                C44599) *
               C44603) *
              C44395 * C44449 * C44595)) /
        (p * q * std::sqrt(p + q));
    d2eezx[47] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C10145 * C93 + C9839 * C437 + C10146 * C1232 + C44603 * C1616) *
                C637 +
            (C10145 * C101 + C9839 * C442 + C10146 * C1238 + C44603 * C1619) *
                C633 -
            (C10164 + C10165) * C638 - (C10166 + C10167) * C44595) *
               C44395 * C15085 +
           ((C25058 + C25059) * C637 + (C25060 + C25061) * C633 -
            (C10785 + C10784) * C638 - (C10787 + C10786) * C44595) *
               C44395 * C44601) *
              C1227 +
          (((C11492 + C11493) * C638 -
            ((C10146 * C4104 + C44603 * C4368 + C10145 * C1238 +
              C9839 * C1619) *
                 C633 +
             (C10146 * C4098 + C44603 * C4365 + C10145 * C1232 +
              C9839 * C1616) *
                 C637) +
            (C11494 + C11495) * C44595) *
               C44395 * C15085 +
           ((C10145 * C2690 + C9839 * C3026 + C10146 * C9358 + C44603 * C9682) *
                C638 -
            ((C10146 * C9361 + C44603 * C9683 + C10145 * C2695 +
              C9839 * C3028) *
                 C633 +
             (C10146 * C9357 + C44603 * C9681 + C10145 * C2689 +
              C9839 * C3025) *
                 C637) +
            (C10145 * C2696 + C9839 * C3029 + C10146 * C9362 + C44603 * C9684) *
                C44595) *
               C44395 * C44601) *
              C44599) *
         C44449) /
        (p * q * std::sqrt(p + q));
    d2eezy[47] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C10145 * C93 + C9839 * C437 + C10146 * C1232 + C44603 * C1616) *
                 C151 +
             (C10145 * C152 + C9839 * C503 + C10146 * C1298 + C44603 * C1688) *
                 C44449) *
                C44395 * C15085 +
            ((C25058 + C25059) * C151 + (C25133 + C25132) * C44449) * C44395 *
                C44601) *
               C633 -
           (((C10858 + C10859) * C44449 + (C10785 + C10784) * C151) * C44395 *
                C44601 +
            ((C10231 + C10230) * C44449 + (C10164 + C10165) * C151) * C44395 *
                C15085) *
               C44595) *
              C1227 +
          ((((C11492 + C11493) * C151 + (C11566 + C11567) * C44449) * C44395 *
                C15085 +
            ((C10145 * C2690 + C9839 * C3026 + C10146 * C9358 +
              C44603 * C9682) *
                 C151 +
             (C10145 * C2752 + C9839 * C3082 + C10146 * C9416 +
              C44603 * C9736) *
                 C44449) *
                C44395 * C44601) *
               C44595 -
           (((C10146 * C9415 + C44603 * C9735 + C10145 * C2751 +
              C9839 * C3081) *
                 C44449 +
             (C10146 * C9357 + C44603 * C9681 + C10145 * C2689 +
              C9839 * C3025) *
                 C151) *
                C44395 * C44601 +
            ((C10146 * C4148 + C44603 * C4409 + C10145 * C1298 +
              C9839 * C1688) *
                 C44449 +
             (C10146 * C4098 + C44603 * C4365 + C10145 * C1232 +
              C9839 * C1616) *
                 C151) *
                C44395 * C15085) *
               C633) *
              C44599)) /
        (p * q * std::sqrt(p + q));
    d2eezz[47] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C10145 * C93 + C9839 * C437 + C10146 * C1232 + C44603 * C1616) *
                C1353 +
            (C10145 * C201 + C9839 * C562 + C10146 * C1357 + C44603 * C1749) *
                C1227 -
            (C10146 * C4098 + C44603 * C4365 + C10145 * C1232 + C9839 * C1616) *
                C1354 -
            (C10146 * C4195 + C44603 * C4450 + C10145 * C1357 + C9839 * C1749) *
                C44599) *
               C44395 * C15085 +
           ((C25058 + C25059) * C1353 + (C25204 + C25205) * C1227 -
            (C10146 * C9357 + C44603 * C9681 + C10145 * C2689 + C9839 * C3025) *
                C1354 -
            (C10146 * C9469 + C44603 * C9787 + C10145 * C2807 + C9839 * C3134) *
                C44599) *
               C44395 * C44601) *
              C44449 * C633 +
          (((C11492 + C11493) * C1354 -
            ((C10293 + C10292) * C1227 + (C10164 + C10165) * C1353) +
            (C11639 + C11638) * C44599) *
               C44395 * C15085 +
           ((C10145 * C2690 + C9839 * C3026 + C10146 * C9358 + C44603 * C9682) *
                C1354 -
            ((C10930 + C10931) * C1227 + (C10785 + C10784) * C1353) +
            (C10145 * C2808 + C9839 * C3135 + C10146 * C9470 + C44603 * C9788) *
                C44599) *
               C44395 * C44601) *
              C44449 * C44595)) /
        (p * q * std::sqrt(p + q));
    d2eexx[48] += (2 * std::pow(Pi, 2.5) *
                   (((((C20189 * C93 + C44395 * C98) * C1821 +
                       (C20189 * C101 + C44395 * C108) * C1817 -
                       (C20189 * C94 + C44395 * C99) * C1822 -
                       (C20189 * C102 + C44395 * C109) * C44595) *
                          C15085 +
                      (C21516 + C21517 - C21518 - C21519) * C44601) *
                         C9839 +
                     ((C25280 * C1821 + C25281 * C1817 - C25282 * C1822 -
                       C25283 * C44595) *
                          C15085 +
                      (C25926 + C25927 - C25928 - C25929) * C44601) *
                         C44603) *
                        C44464 * C1819 +
                    (((C21518 - (C21517 + C21516) + C21519) * C15085 +
                      (C21522 - (C21521 + C21520) + C21523) * C44601) *
                         C9839 +
                     ((C25928 - (C25927 + C25926) + C25929) * C15085 +
                      ((C20189 * C7508 + C44395 * C7510) * C1822 -
                       (C22390 * C1817 + C22391 * C1821) +
                       (C20189 * C7512 + C44395 * C7514) * C44595) *
                          C44601) *
                         C44603) *
                        C44464 * C44597)) /
                  (p * q * std::sqrt(p + q));
    d2eexy[48] += (2 * std::pow(Pi, 2.5) *
                   (((((C20189 * C93 + C44395 * C98) * C1873 +
                       (C20189 * C152 + C44395 * C157) * C1819 -
                       C20564 * C1874 - C20638 * C44597) *
                          C15085 +
                      (C20564 * C1873 + C20638 * C1819 - C20568 * C1874 -
                       C20639 * C44597) *
                          C44601) *
                         C9839 +
                     ((C25280 * C1873 + C25364 * C1819 - C22393 * C1874 -
                       C22454 * C44597) *
                          C15085 +
                      (C22393 * C1873 + C22454 * C1819 - C22391 * C1874 -
                       C22455 * C44597) *
                          C44601) *
                         C44603) *
                        C1817 +
                    (((C20566 * C1874 -
                       ((C20189 * C153 + C44395 * C158) * C1819 +
                        (C20189 * C94 + C44395 * C99) * C1873) +
                       C20640 * C44597) *
                          C15085 +
                      (C20570 * C1874 - (C20640 * C1819 + C20566 * C1873) +
                       C20641 * C44597) *
                          C44601) *
                         C9839 +
                     ((C24640 * C1874 - (C25365 * C1819 + C25282 * C1873) +
                       C24712 * C44597) *
                          C15085 +
                      ((C20189 * C7508 + C44395 * C7510) * C1874 -
                       (C24712 * C1819 + C24640 * C1873) +
                       (C20189 * C7594 + C44395 * C7596) * C44597) *
                          C44601) *
                         C44603) *
                        C44595) *
                   C44464) /
                  (p * q * std::sqrt(p + q));
    d2eexz[48] +=
        (2 * std::pow(Pi, 2.5) *
         ((((((C20189 * C93 + C44395 * C98) * C200 +
              (C20189 * C201 + C44395 * C206) * C44464) *
                 C15085 +
             (C20692 + C20708) * C44601) *
                C9839 +
            ((C25280 * C200 + C25438 * C44464) * C15085 +
             (C24779 + C24780) * C44601) *
                C44603) *
               C1819 -
           (((C22519 * C44464 + C22391 * C200) * C44601 +
             (C24780 + C24779) * C15085) *
                C44603 +
            ((C20709 + C20695) * C44601 + (C20708 + C20692) * C15085) * C9839) *
               C44597) *
              C1817 +
          ((((C20698 + C20710) * C15085 + (C20701 + C20711) * C44601) * C9839 +
            ((C24781 + C24785) * C15085 +
             ((C20189 * C7508 + C44395 * C7510) * C200 +
              (C20189 * C7670 + C44395 * C7672) * C44464) *
                 C44601) *
                C44603) *
               C44597 -
           (((C24785 + C24781) * C44601 +
             (C25439 * C44464 + C25282 * C200) * C15085) *
                C44603 +
            ((C20710 + C20698) * C44601 +
             ((C20189 * C202 + C44395 * C207) * C44464 +
              (C20189 * C94 + C44395 * C99) * C200) *
                 C15085) *
                C9839) *
               C1819) *
              C44595)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[48] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C15239 * C93 + C15085 * C250 + C15240 * C642 + C44601 * C824) *
                C1821 +
            (C15239 * C101 + C15085 * C255 + C15240 * C648 + C44601 * C827) *
                C1817 -
            (C15258 + C15259) * C1822 - (C15260 + C15261) * C44595) *
               C9839 +
           ((C25514 + C25515) * C1821 + (C25516 + C25517) * C1817 -
            (C16479 + C16478) * C1822 - (C16481 + C16480) * C44595) *
               C44603) *
              C44395 * C44464 * C1819 +
          (((C15860 + C15861) * C1822 -
            ((C15240 * C2290 + C44601 * C2428 + C15239 * C648 + C15085 * C827) *
                 C1817 +
             (C15240 * C2284 + C44601 * C2425 + C15239 * C642 + C15085 * C824) *
                 C1821) +
            (C15862 + C15863) * C44595) *
               C9839 +
           ((C15239 * C2690 + C15085 * C2864 + C15240 * C7508 +
             C44601 * C7746) *
                C1822 -
            ((C15240 * C7511 + C44601 * C7747 + C15239 * C2695 +
              C15085 * C2866) *
                 C1817 +
             (C15240 * C7507 + C44601 * C7745 + C15239 * C2689 +
              C15085 * C2863) *
                 C1821) +
            (C15239 * C2696 + C15085 * C2867 + C15240 * C7512 +
             C44601 * C7748) *
                C44595) *
               C44603) *
              C44395 * C44464 * C44597)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[48] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C15239 * C93 + C15085 * C250 + C15240 * C642 + C44601 * C824) *
                C1873 +
            (C15239 * C152 + C15085 * C316 + C15240 * C709 + C44601 * C893) *
                C1819 -
            (C15240 * C2284 + C44601 * C2425 + C15239 * C642 + C15085 * C824) *
                C1874 -
            (C15240 * C2337 + C44601 * C2469 + C15239 * C709 + C15085 * C893) *
                C44597) *
               C9839 +
           ((C25514 + C25515) * C1873 + (C25588 + C25589) * C1819 -
            (C15240 * C7507 + C44601 * C7745 + C15239 * C2689 +
             C15085 * C2863) *
                C1874 -
            (C15240 * C7593 + C44601 * C7815 + C15239 * C2751 +
             C15085 * C2919) *
                C44597) *
               C44603) *
              C44395 * C1817 +
          (((C15860 + C15861) * C1874 -
            ((C15325 + C15324) * C1819 + (C15258 + C15259) * C1873) +
            (C15935 + C15934) * C44597) *
               C9839 +
           ((C15239 * C2690 + C15085 * C2864 + C15240 * C7508 +
             C44601 * C7746) *
                C1874 -
            ((C16553 + C16552) * C1819 + (C16479 + C16478) * C1873) +
            (C15239 * C2752 + C15085 * C2920 + C15240 * C7594 +
             C44601 * C7816) *
                C44597) *
               C44603) *
              C44395 * C44595) *
         C44464) /
        (p * q * std::sqrt(p + q));
    d2eeyz[48] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C15239 * C93 + C15085 * C250 + C15240 * C642 + C44601 * C824) *
                 C200 +
             (C15239 * C201 + C15085 * C376 + C15240 * C767 + C44601 * C963) *
                 C44464) *
                C9839 +
            ((C25514 + C25515) * C200 + (C25661 + C25660) * C44464) * C44603) *
               C44395 * C1819 -
           (((C15240 * C7669 + C44601 * C7883 + C15239 * C2807 +
              C15085 * C2972) *
                 C44464 +
             (C15240 * C7507 + C44601 * C7745 + C15239 * C2689 +
              C15085 * C2863) *
                 C200) *
                C44603 +
            ((C15240 * C2381 + C44601 * C2510 + C15239 * C767 + C15085 * C963) *
                 C44464 +
             (C15240 * C2284 + C44601 * C2425 + C15239 * C642 + C15085 * C824) *
                 C200) *
                C9839) *
               C44395 * C44597) *
              C1817 +
          ((((C15860 + C15861) * C200 + (C16007 + C16006) * C44464) * C9839 +
            ((C15239 * C2690 + C15085 * C2864 + C15240 * C7508 +
              C44601 * C7746) *
                 C200 +
             (C15239 * C2808 + C15085 * C2973 + C15240 * C7670 +
              C44601 * C7884) *
                 C44464) *
                C44603) *
               C44395 * C44597 -
           (((C16624 + C16625) * C44464 + (C16479 + C16478) * C200) * C44603 +
            ((C15387 + C15386) * C44464 + (C15258 + C15259) * C200) * C9839) *
               C44395 * C1819) *
              C44595)) /
        (p * q * std::sqrt(p + q));
    d2eezx[48] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C10145 * C93 + C9839 * C437 + C10146 * C1232 + C44603 * C1616) *
                C1821 +
            (C10145 * C101 + C9839 * C442 + C10146 * C1238 + C44603 * C1619) *
                C1817 -
            (C10164 + C10165) * C1822 - (C10166 + C10167) * C44595) *
               C44395 * C15085 +
           ((C25058 + C25059) * C1821 + (C25060 + C25061) * C1817 -
            (C10785 + C10784) * C1822 - (C10787 + C10786) * C44595) *
               C44395 * C44601) *
              C44464 * C1819 +
          (((C10784 + C10785) * C1822 -
            ((C25061 + C25060) * C1817 + (C25059 + C25058) * C1821) +
            (C10786 + C10787) * C44595) *
               C44395 * C15085 +
           ((C10145 * C2285 + C9839 * C2552 + C10146 * C7508 + C44603 * C7952) *
                C1822 -
            ((C10146 * C7511 + C44603 * C7953 + C10145 * C2290 +
              C9839 * C2554) *
                 C1817 +
             (C10146 * C7507 + C44603 * C7951 + C10145 * C2284 +
              C9839 * C2551) *
                 C1821) +
            (C10145 * C2291 + C9839 * C2555 + C10146 * C7512 + C44603 * C7954) *
                C44595) *
               C44395 * C44601) *
              C44464 * C44597)) /
        (p * q * std::sqrt(p + q));
    d2eezy[48] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C10145 * C93 + C9839 * C437 + C10146 * C1232 + C44603 * C1616) *
                C1873 +
            (C10145 * C152 + C9839 * C503 + C10146 * C1298 + C44603 * C1688) *
                C1819 -
            (C25059 + C25058) * C1874 - (C25132 + C25133) * C44597) *
               C44395 * C15085 +
           ((C25058 + C25059) * C1873 + (C25133 + C25132) * C1819 -
            (C10146 * C7507 + C44603 * C7951 + C10145 * C2284 + C9839 * C2551) *
                C1874 -
            (C10146 * C7593 + C44603 * C8031 + C10145 * C2337 + C9839 * C2595) *
                C44597) *
               C44395 * C44601) *
              C1817 +
          (((C10784 + C10785) * C1874 -
            ((C10231 + C10230) * C1819 + (C10164 + C10165) * C1873) +
            (C10859 + C10858) * C44597) *
               C44395 * C15085 +
           ((C10145 * C2285 + C9839 * C2552 + C10146 * C7508 + C44603 * C7952) *
                C1874 -
            ((C10858 + C10859) * C1819 + (C10785 + C10784) * C1873) +
            (C10145 * C2338 + C9839 * C2596 + C10146 * C7594 + C44603 * C8032) *
                C44597) *
               C44395 * C44601) *
              C44595) *
         C44464) /
        (p * q * std::sqrt(p + q));
    d2eezz[48] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C10145 * C93 + C9839 * C437 + C10146 * C1232 + C44603 * C1616) *
                 C200 +
             (C10145 * C201 + C9839 * C562 + C10146 * C1357 + C44603 * C1749) *
                 C44464) *
                C44395 * C15085 +
            ((C25058 + C25059) * C200 + (C25204 + C25205) * C44464) * C44395 *
                C44601) *
               C1819 -
           (((C10146 * C7669 + C44603 * C8102 + C10145 * C2381 +
              C9839 * C2636) *
                 C44464 +
             (C10146 * C7507 + C44603 * C7951 + C10145 * C2284 +
              C9839 * C2551) *
                 C200) *
                C44395 * C44601 +
            ((C25205 + C25204) * C44464 + (C25059 + C25058) * C200) * C44395 *
                C15085) *
               C44597) *
              C1817 +
          ((((C10784 + C10785) * C200 + (C10931 + C10930) * C44464) * C44395 *
                C15085 +
            ((C10145 * C2285 + C9839 * C2552 + C10146 * C7508 +
              C44603 * C7952) *
                 C200 +
             (C10145 * C2382 + C9839 * C2637 + C10146 * C7670 +
              C44603 * C8103) *
                 C44464) *
                C44395 * C44601) *
               C44597 -
           (((C10930 + C10931) * C44464 + (C10785 + C10784) * C200) * C44395 *
                C44601 +
            ((C10293 + C10292) * C44464 + (C10164 + C10165) * C200) * C44395 *
                C15085) *
               C1819) *
              C44595)) /
        (p * q * std::sqrt(p + q));
    d2eexx[49] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C20189 * C93 + C44395 * C98) * C2283 +
             (C20189 * C101 + C44395 * C108) * C44407) *
                C15085 +
            (C21970 + C21971) * C44601) *
               C9839 +
           ((C25280 * C2283 + C25281 * C44407) * C15085 +
            (C22397 + C22396) * C44601) *
               C44603) *
              C44464 * C2280 -
          (((C22394 + C22395) * C44601 + (C22396 + C22397) * C15085) * C44603 +
           ((C21973 + C21972) * C44601 + (C21971 + C21970) * C15085) * C9839) *
              C44464 * C2281 +
          ((C21978 * C15085 + (C21982 + C21981) * C44601) * C9839 +
           ((C22395 + C22394) * C15085 +
            ((C20189 * C22377 + C44395 * C22378) * C2283 +
             (C20189 * C22379 + C44395 * C22380) * C44407) *
                C44601) *
               C44603) *
              C44464 * C2282)) /
        (p * q * std::sqrt(p + q));
    d2eexy[49] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C20189 * C93 + C44395 * C98) * C2334 +
            (C20189 * C152 + C44395 * C157) * C2280 - C20564 * C2335 -
            C20638 * C2281 + C20568 * C2336 + C20639 * C2282) *
               C15085 +
           (C20564 * C2334 + C20638 * C2280 - C20568 * C2335 - C20639 * C2281 +
            C21980 * C2336 + C22025 * C2282) *
               C44601) *
              C9839 +
          ((C25280 * C2334 + C25364 * C2280 - C22393 * C2335 - C22454 * C2281 +
            C22391 * C2336 + C22455 * C2282) *
               C15085 +
           (C22393 * C2334 + C22454 * C2280 - C22391 * C2335 - C22455 * C2281 +
            (C20189 * C22377 + C44395 * C22378) * C2336 +
            (C20189 * C22447 + C44395 * C22448) * C2282) *
               C44601) *
              C44603) *
         C44407 * C44464) /
        (p * q * std::sqrt(p + q));
    d2eexz[49] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C20189 * C93 + C44395 * C98) * C200 +
             (C20189 * C201 + C44395 * C206) * C44464) *
                C15085 +
            (C20692 + C20708) * C44601) *
               C9839 +
           ((C25280 * C200 + C25438 * C44464) * C15085 +
            (C24779 + C24780) * C44601) *
               C44603) *
              C2280 -
          (((C26608 + C26609) * C44601 + (C24780 + C24779) * C15085) * C44603 +
           ((C20709 + C20695) * C44601 + (C20708 + C20692) * C15085) * C9839) *
              C2281 +
          ((C22066 * C15085 + (C22069 + C22071) * C44601) * C9839 +
           ((C26609 + C26608) * C15085 +
            ((C20189 * C22377 + C44395 * C22378) * C200 +
             (C20189 * C22505 + C44395 * C22506) * C44464) *
                C44601) *
               C44603) *
              C2282) *
         C44407) /
        (p * q * std::sqrt(p + q));
    d2eeyx[49] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C15239 * C93 + C15085 * C250 + C15240 * C642 + C44601 * C824) *
                C2283 +
            (C15239 * C101 + C15085 * C255 + C15240 * C648 + C44601 * C827) *
                C44407) *
               C9839 +
           ((C25514 + C25515) * C2283 + (C25516 + C25517) * C44407) * C44603) *
              C44395 * C44464 * C2280 -
          (((C15240 * C7511 + C44601 * C7747 + C15239 * C2695 +
             C15085 * C2866) *
                C44407 +
            (C15240 * C7507 + C44601 * C7745 + C15239 * C2689 +
             C15085 * C2863) *
                C2283) *
               C44603 +
           ((C15240 * C2290 + C44601 * C2428 + C15239 * C648 + C15085 * C827) *
                C44407 +
            (C15240 * C2284 + C44601 * C2425 + C15239 * C642 + C15085 * C824) *
                C2283) *
               C9839) *
              C44395 * C44464 * C2281 +
          (((C15239 * C2284 + C15085 * C2425 + C15240 * C6963 +
             C44601 * C7153) *
                C2283 +
            (C15239 * C2290 + C15085 * C2428 + C15240 * C6967 +
             C44601 * C7155) *
                C44407) *
               C9839 +
           ((C15239 * C7507 + C15085 * C7745 + C15240 * C22377 +
             C44601 * C22571) *
                C2283 +
            (C15239 * C7511 + C15085 * C7747 + C15240 * C22379 +
             C44601 * C22572) *
                C44407) *
               C44603) *
              C44395 * C44464 * C2282)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[49] +=
        (2 * std::pow(Pi, 2.5) *
         (((C15239 * C93 + C15085 * C250 + C15240 * C642 + C44601 * C824) *
               C2334 +
           (C15239 * C152 + C15085 * C316 + C15240 * C709 + C44601 * C893) *
               C2280 -
           (C15240 * C2284 + C44601 * C2425 + C15239 * C642 + C15085 * C824) *
               C2335 -
           (C15240 * C2337 + C44601 * C2469 + C15239 * C709 + C15085 * C893) *
               C2281 +
           (C15239 * C2284 + C15085 * C2425 + C15240 * C6963 + C44601 * C7153) *
               C2336 +
           (C15239 * C2337 + C15085 * C2469 + C15240 * C7033 + C44601 * C7207) *
               C2282) *
              C9839 +
          ((C25514 + C25515) * C2334 + (C25588 + C25589) * C2280 -
           (C15240 * C7507 + C44601 * C7745 + C15239 * C2689 + C15085 * C2863) *
               C2335 -
           (C15240 * C7593 + C44601 * C7815 + C15239 * C2751 + C15085 * C2919) *
               C2281 +
           (C15239 * C7507 + C15085 * C7745 + C15240 * C22377 +
            C44601 * C22571) *
               C2336 +
           (C15239 * C7593 + C15085 * C7815 + C15240 * C22447 +
            C44601 * C22623) *
               C2282) *
              C44603) *
         C44395 * C44407 * C44464) /
        (p * q * std::sqrt(p + q));
    d2eeyz[49] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C15239 * C93 + C15085 * C250 + C15240 * C642 + C44601 * C824) *
                C200 +
            (C15239 * C201 + C15085 * C376 + C15240 * C767 + C44601 * C963) *
                C44464) *
               C9839 +
           ((C25514 + C25515) * C200 + (C25661 + C25660) * C44464) * C44603) *
              C44395 * C2280 -
          (((C15240 * C7669 + C44601 * C7883 + C15239 * C2807 +
             C15085 * C2972) *
                C44464 +
            (C15240 * C7507 + C44601 * C7745 + C15239 * C2689 +
             C15085 * C2863) *
                C200) *
               C44603 +
           ((C15240 * C2381 + C44601 * C2510 + C15239 * C767 + C15085 * C963) *
                C44464 +
            (C15240 * C2284 + C44601 * C2425 + C15239 * C642 + C15085 * C824) *
                C200) *
               C9839) *
              C44395 * C2281 +
          (((C15239 * C2284 + C15085 * C2425 + C15240 * C6963 +
             C44601 * C7153) *
                C200 +
            (C15239 * C2381 + C15085 * C2510 + C15240 * C7093 +
             C44601 * C7259) *
                C44464) *
               C9839 +
           ((C15239 * C7507 + C15085 * C7745 + C15240 * C22377 +
             C44601 * C22571) *
                C200 +
            (C15239 * C7669 + C15085 * C7883 + C15240 * C22505 +
             C44601 * C22674) *
                C44464) *
               C44603) *
              C44395 * C2282) *
         C44407) /
        (p * q * std::sqrt(p + q));
    d2eezx[49] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C10145 * C93 + C9839 * C437 + C10146 * C1232 + C44603 * C1616) *
                C2283 +
            (C10145 * C101 + C9839 * C442 + C10146 * C1238 + C44603 * C1619) *
                C44407) *
               C44395 * C15085 +
           ((C25058 + C25059) * C2283 + (C25060 + C25061) * C44407) * C44395 *
               C44601) *
              C44464 * C2280 -
          (((C26818 + C26819) * C44407 + (C26820 + C26821) * C2283) * C44395 *
               C44601 +
           ((C25061 + C25060) * C44407 + (C25059 + C25058) * C2283) * C44395 *
               C15085) *
              C44464 * C2281 +
          (((C26821 + C26820) * C2283 + (C26819 + C26818) * C44407) * C44395 *
               C15085 +
           ((C10145 * C6963 + C9839 * C7311 + C10146 * C22377 +
             C44603 * C22725) *
                C2283 +
            (C10145 * C6967 + C9839 * C7313 + C10146 * C22379 +
             C44603 * C22726) *
                C44407) *
               C44395 * C44601) *
              C44464 * C2282)) /
        (p * q * std::sqrt(p + q));
    d2eezy[49] +=
        (2 * std::pow(Pi, 2.5) *
         (((C10145 * C93 + C9839 * C437 + C10146 * C1232 + C44603 * C1616) *
               C2334 +
           (C10145 * C152 + C9839 * C503 + C10146 * C1298 + C44603 * C1688) *
               C2280 -
           (C25059 + C25058) * C2335 - (C25132 + C25133) * C2281 +
           (C26821 + C26820) * C2336 + (C26876 + C26877) * C2282) *
              C44395 * C15085 +
          ((C25058 + C25059) * C2334 + (C25133 + C25132) * C2280 -
           (C26820 + C26821) * C2335 - (C26877 + C26876) * C2281 +
           (C10145 * C6963 + C9839 * C7311 + C10146 * C22377 +
            C44603 * C22725) *
               C2336 +
           (C10145 * C7033 + C9839 * C7379 + C10146 * C22447 +
            C44603 * C22785) *
               C2282) *
              C44395 * C44601) *
         C44407 * C44464) /
        (p * q * std::sqrt(p + q));
    d2eezz[49] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C10145 * C93 + C9839 * C437 + C10146 * C1232 + C44603 * C1616) *
                C200 +
            (C10145 * C201 + C9839 * C562 + C10146 * C1357 + C44603 * C1749) *
                C44464) *
               C44395 * C15085 +
           ((C25058 + C25059) * C200 + (C25204 + C25205) * C44464) * C44395 *
               C44601) *
              C2280 -
          (((C26932 + C26933) * C44464 + (C26820 + C26821) * C200) * C44395 *
               C44601 +
           ((C25205 + C25204) * C44464 + (C25059 + C25058) * C200) * C44395 *
               C15085) *
              C2281 +
          (((C26821 + C26820) * C200 + (C26933 + C26932) * C44464) * C44395 *
               C15085 +
           ((C10145 * C6963 + C9839 * C7311 + C10146 * C22377 +
             C44603 * C22725) *
                C200 +
            (C10145 * C7093 + C9839 * C7434 + C10146 * C22505 +
             C44603 * C22839) *
                C44464) *
               C44395 * C44601) *
              C2282) *
         C44407) /
        (p * q * std::sqrt(p + q));
    d2eexx[50] +=
        (2 * std::pow(Pi, 2.5) *
         ((((((C20189 * C93 + C44395 * C98) * C2283 +
              (C20189 * C101 + C44395 * C108) * C44407) *
                 C15085 +
             (C21970 + C21971) * C44601) *
                C9839 +
            ((C27000 + C27001) * C15085 + C27002 * C44601) * C44603) *
               C1227 -
           (((C27010 + C27011) * C44601 +
             ((C20189 * C4104 + C44395 * C4107) * C44407 +
              (C20189 * C4098 + C44395 * C4101) * C2283) *
                 C15085) *
                C44603 +
            (C27007 * C44601 + (C27001 + C27000) * C15085) * C9839) *
               C44599) *
              C1819 +
          (((C27002 * C15085 + (C22395 + C22394) * C44601) * C9839 +
            ((C27011 + C27010) * C15085 +
             ((C20189 * C23797 + C44395 * C23798) * C2283 +
              (C20189 * C23799 + C44395 * C23800) * C44407) *
                 C44601) *
                C44603) *
               C44599 -
           (((C22394 + C22395) * C44601 + C27007 * C15085) * C44603 +
            ((C21973 + C21972) * C44601 + (C21971 + C21970) * C15085) * C9839) *
               C1227) *
              C44597)) /
        (p * q * std::sqrt(p + q));
    d2eexy[50] += (2 * std::pow(Pi, 2.5) *
                   (((((C20189 * C93 + C44395 * C98) * C1873 +
                       (C20189 * C152 + C44395 * C157) * C1819 -
                       C20564 * C1874 - C20638 * C44597) *
                          C15085 +
                      (C20564 * C1873 + C20638 * C1819 - C20568 * C1874 -
                       C20639 * C44597) *
                          C44601) *
                         C9839 +
                     ((C27078 + C27079 - C27080 - C27081) * C15085 +
                      (C27082 + C27083 - C27084 - C27085) * C44601) *
                         C44603) *
                        C44407 * C1227 +
                    (((C27080 - (C27079 + C27078) + C27081) * C15085 +
                      (C27084 - (C27083 + C27082) + C27085) * C44601) *
                         C9839 +
                     ((C27009 * C1874 -
                       ((C20189 * C4148 + C44395 * C4151) * C1819 +
                        (C20189 * C4098 + C44395 * C4101) * C1873) +
                       C27088 * C44597) *
                          C15085 +
                      ((C20189 * C23797 + C44395 * C23798) * C1874 -
                       (C27088 * C1819 + C27009 * C1873) +
                       (C20189 * C23839 + C44395 * C23840) * C44597) *
                          C44601) *
                         C44603) *
                        C44407 * C44599)) /
                  (p * q * std::sqrt(p + q));
    d2eexz[50] += (2 * std::pow(Pi, 2.5) *
                   (((((C20189 * C93 + C44395 * C98) * C1353 +
                       (C20189 * C201 + C44395 * C206) * C1227 -
                       C25280 * C1354 - C25438 * C44599) *
                          C15085 +
                      (C22508 + C22509 - C22510 - C22520) * C44601) *
                         C9839 +
                     ((C25280 * C1353 + C25438 * C1227 -
                       (C20189 * C4098 + C44395 * C4101) * C1354 -
                       (C20189 * C4195 + C44395 * C4198) * C44599) *
                          C15085 +
                      (C27155 + C27156 - C27157 - C27161) * C44601) *
                         C44603) *
                        C1819 +
                    (((C22510 - (C22509 + C22508) + C22520) * C15085 +
                      (C22515 - (C22514 + C22513) + C22521) * C44601) *
                         C9839 +
                     ((C27157 - (C27156 + C27155) + C27161) * C15085 +
                      ((C20189 * C23797 + C44395 * C23798) * C1354 -
                       (C22519 * C1227 + C22391 * C1353) +
                       (C20189 * C23879 + C44395 * C23880) * C44599) *
                          C44601) *
                         C44603) *
                        C44597) *
                   C44407) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[50] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C15239 * C93 + C15085 * C250 + C15240 * C642 + C44601 * C824) *
                 C2283 +
             (C15239 * C101 + C15085 * C255 + C15240 * C648 + C44601 * C827) *
                 C44407) *
                C9839 +
            ((C25514 + C25515) * C2283 + (C25516 + C25517) * C44407) * C44603) *
               C44395 * C1227 -
           (((C15240 * C9361 + C44601 * C9525 + C15239 * C4104 +
              C15085 * C4242) *
                 C44407 +
             (C15240 * C9357 + C44601 * C9523 + C15239 * C4098 +
              C15085 * C4239) *
                 C2283) *
                C44603 +
            ((C25517 + C25516) * C44407 + (C25515 + C25514) * C2283) * C9839) *
               C44395 * C44599) *
              C1819 +
          ((((C27236 + C27237) * C2283 + (C27238 + C27239) * C44407) * C9839 +
            ((C15239 * C9357 + C15085 * C9523 + C15240 * C23797 +
              C44601 * C23919) *
                 C2283 +
             (C15239 * C9361 + C15085 * C9525 + C15240 * C23799 +
              C44601 * C23920) *
                 C44407) *
                C44603) *
               C44395 * C44599 -
           (((C27239 + C27238) * C44407 + (C27237 + C27236) * C2283) * C44603 +
            ((C15240 * C2290 + C44601 * C2428 + C15239 * C648 + C15085 * C827) *
                 C44407 +
             (C15240 * C2284 + C44601 * C2425 + C15239 * C642 + C15085 * C824) *
                 C2283) *
                C9839) *
               C44395 * C1227) *
              C44597)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[50] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C15239 * C93 + C15085 * C250 + C15240 * C642 + C44601 * C824) *
                C1873 +
            (C15239 * C152 + C15085 * C316 + C15240 * C709 + C44601 * C893) *
                C1819 -
            (C15240 * C2284 + C44601 * C2425 + C15239 * C642 + C15085 * C824) *
                C1874 -
            (C15240 * C2337 + C44601 * C2469 + C15239 * C709 + C15085 * C893) *
                C44597) *
               C9839 +
           ((C25514 + C25515) * C1873 + (C25588 + C25589) * C1819 -
            (C27237 + C27236) * C1874 - (C27310 + C27311) * C44597) *
               C44603) *
              C44395 * C44407 * C1227 +
          (((C27236 + C27237) * C1874 -
            ((C25589 + C25588) * C1819 + (C25515 + C25514) * C1873) +
            (C27311 + C27310) * C44597) *
               C9839 +
           ((C15239 * C9357 + C15085 * C9523 + C15240 * C23797 +
             C44601 * C23919) *
                C1874 -
            ((C15240 * C9415 + C44601 * C9577 + C15239 * C4148 +
              C15085 * C4283) *
                 C1819 +
             (C15240 * C9357 + C44601 * C9523 + C15239 * C4098 +
              C15085 * C4239) *
                 C1873) +
            (C15239 * C9415 + C15085 * C9577 + C15240 * C23839 +
             C44601 * C23959) *
                C44597) *
               C44603) *
              C44395 * C44407 * C44599)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[50] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C15239 * C93 + C15085 * C250 + C15240 * C642 + C44601 * C824) *
                C1353 +
            (C15239 * C201 + C15085 * C376 + C15240 * C767 + C44601 * C963) *
                C1227 -
            (C25515 + C25514) * C1354 - (C25660 + C25661) * C44599) *
               C9839 +
           ((C25514 + C25515) * C1353 + (C25661 + C25660) * C1227 -
            (C15240 * C9357 + C44601 * C9523 + C15239 * C4098 +
             C15085 * C4239) *
                C1354 -
            (C15240 * C9469 + C44601 * C9629 + C15239 * C4195 +
             C15085 * C4324) *
                C44599) *
               C44603) *
              C44395 * C1819 +
          (((C27236 + C27237) * C1354 -
            ((C15240 * C2381 + C44601 * C2510 + C15239 * C767 + C15085 * C963) *
                 C1227 +
             (C15240 * C2284 + C44601 * C2425 + C15239 * C642 + C15085 * C824) *
                 C1353) +
            (C27382 + C27383) * C44599) *
               C9839 +
           ((C15239 * C9357 + C15085 * C9523 + C15240 * C23797 +
             C44601 * C23919) *
                C1354 -
            ((C27383 + C27382) * C1227 + (C27237 + C27236) * C1353) +
            (C15239 * C9469 + C15085 * C9629 + C15240 * C23879 +
             C44601 * C23998) *
                C44599) *
               C44603) *
              C44395 * C44597) *
         C44407) /
        (p * q * std::sqrt(p + q));
    d2eezx[50] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C10145 * C93 + C9839 * C437 + C10146 * C1232 + C44603 * C1616) *
                 C2283 +
             (C10145 * C101 + C9839 * C442 + C10146 * C1238 + C44603 * C1619) *
                 C44407) *
                C44395 * C15085 +
            ((C25058 + C25059) * C2283 + (C25060 + C25061) * C44407) * C44395 *
                C44601) *
               C1227 -
           (((C27458 + C27459) * C44407 + (C27460 + C27461) * C2283) * C44395 *
                C44601 +
            ((C10146 * C4104 + C44603 * C4368 + C10145 * C1238 +
              C9839 * C1619) *
                 C44407 +
             (C10146 * C4098 + C44603 * C4365 + C10145 * C1232 +
              C9839 * C1616) *
                 C2283) *
                C44395 * C15085) *
               C44599) *
              C1819 +
          ((((C27461 + C27460) * C2283 + (C27459 + C27458) * C44407) * C44395 *
                C15085 +
            ((C10145 * C7507 + C9839 * C7951 + C10146 * C23797 +
              C44603 * C24037) *
                 C2283 +
             (C10145 * C7511 + C9839 * C7953 + C10146 * C23799 +
              C44603 * C24038) *
                 C44407) *
                C44395 * C44601) *
               C44599 -
           (((C26818 + C26819) * C44407 + (C26820 + C26821) * C2283) * C44395 *
                C44601 +
            ((C25061 + C25060) * C44407 + (C25059 + C25058) * C2283) * C44395 *
                C15085) *
               C1227) *
              C44597)) /
        (p * q * std::sqrt(p + q));
    d2eezy[50] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C10145 * C93 + C9839 * C437 + C10146 * C1232 + C44603 * C1616) *
                C1873 +
            (C10145 * C152 + C9839 * C503 + C10146 * C1298 + C44603 * C1688) *
                C1819 -
            (C25059 + C25058) * C1874 - (C25132 + C25133) * C44597) *
               C44395 * C15085 +
           ((C25058 + C25059) * C1873 + (C25133 + C25132) * C1819 -
            (C26820 + C26821) * C1874 - (C26877 + C26876) * C44597) *
               C44395 * C44601) *
              C44407 * C1227 +
          (((C27461 + C27460) * C1874 -
            ((C10146 * C4148 + C44603 * C4409 + C10145 * C1298 +
              C9839 * C1688) *
                 C1819 +
             (C10146 * C4098 + C44603 * C4365 + C10145 * C1232 +
              C9839 * C1616) *
                 C1873) +
            (C27532 + C27533) * C44597) *
               C44395 * C15085 +
           ((C10145 * C7507 + C9839 * C7951 + C10146 * C23797 +
             C44603 * C24037) *
                C1874 -
            ((C27533 + C27532) * C1819 + (C27460 + C27461) * C1873) +
            (C10145 * C7593 + C9839 * C8031 + C10146 * C23839 +
             C44603 * C24077) *
                C44597) *
               C44395 * C44601) *
              C44407 * C44599)) /
        (p * q * std::sqrt(p + q));
    d2eezz[50] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C10145 * C93 + C9839 * C437 + C10146 * C1232 + C44603 * C1616) *
                C1353 +
            (C10145 * C201 + C9839 * C562 + C10146 * C1357 + C44603 * C1749) *
                C1227 -
            (C10146 * C4098 + C44603 * C4365 + C10145 * C1232 + C9839 * C1616) *
                C1354 -
            (C10146 * C4195 + C44603 * C4450 + C10145 * C1357 + C9839 * C1749) *
                C44599) *
               C44395 * C15085 +
           ((C25058 + C25059) * C1353 + (C25204 + C25205) * C1227 -
            (C27460 + C27461) * C1354 - (C27604 + C27605) * C44599) *
               C44395 * C44601) *
              C1819 +
          (((C27461 + C27460) * C1354 -
            ((C25205 + C25204) * C1227 + (C25059 + C25058) * C1353) +
            (C27605 + C27604) * C44599) *
               C44395 * C15085 +
           ((C10145 * C7507 + C9839 * C7951 + C10146 * C23797 +
             C44603 * C24037) *
                C1354 -
            ((C26932 + C26933) * C1227 + (C26820 + C26821) * C1353) +
            (C10145 * C7669 + C9839 * C8102 + C10146 * C23879 +
             C44603 * C24116) *
                C44599) *
               C44395 * C44601) *
              C44597) *
         C44407) /
        (p * q * std::sqrt(p + q));
    d2eexx[51] += (2 * std::pow(Pi, 2.5) *
                   (((((C20189 * C93 + C44395 * C98) * C1821 +
                       (C20189 * C101 + C44395 * C108) * C1817 -
                       (C20189 * C94 + C44395 * C99) * C1822 -
                       (C20189 * C102 + C44395 * C109) * C44595) *
                          C15085 +
                      (C21516 + C21517 - C21518 - C21519) * C44601) *
                         C9839 +
                     ((C27672 + C27673 - C27674 - C27675) * C15085 +
                      (C25926 + C25927 - C25928 - C25929) * C44601) *
                         C44603) *
                        C3187 +
                    (((C27674 - (C27673 + C27672) + C27675) * C15085 +
                      (C25928 - (C25927 + C25926) + C25929) * C44601) *
                         C9839 +
                     (((C20189 * C4099 + C44395 * C4102) * C1822 -
                       ((C20189 * C4104 + C44395 * C4107) * C1817 +
                        (C20189 * C4098 + C44395 * C4101) * C1821) +
                       (C20189 * C4105 + C44395 * C4108) * C44595) *
                          C15085 +
                      ((C20189 * C9358 + C44395 * C9360) * C1822 -
                       (C27008 * C1817 + C27009 * C1821) +
                       (C20189 * C9362 + C44395 * C9364) * C44595) *
                          C44601) *
                         C44603) *
                        C44599) *
                   C44449) /
                  (p * q * std::sqrt(p + q));
    d2eexy[51] +=
        (2 * std::pow(Pi, 2.5) *
         ((((((C20189 * C93 + C44395 * C98) * C151 +
              (C20189 * C152 + C44395 * C157) * C44449) *
                 C15085 +
             (C20564 * C151 + C20638 * C44449) * C44601) *
                C9839 +
            ((C25354 + C25366) * C15085 + (C25357 + C25358) * C44601) *
                C44603) *
               C1817 -
           (((C25359 + C25360) * C44601 + (C25367 + C25363) * C15085) * C44603 +
            ((C20640 * C44449 + C20566 * C151) * C44601 +
             ((C20189 * C153 + C44395 * C158) * C44449 +
              (C20189 * C94 + C44395 * C99) * C151) *
                 C15085) *
                C9839) *
               C44595) *
              C3187 +
          ((((C25363 + C25367) * C15085 + (C25360 + C25359) * C44601) * C9839 +
            (((C20189 * C4099 + C44395 * C4102) * C151 +
              (C20189 * C4149 + C44395 * C4152) * C44449) *
                 C15085 +
             ((C20189 * C9358 + C44395 * C9360) * C151 +
              (C20189 * C9416 + C44395 * C9418) * C44449) *
                 C44601) *
                C44603) *
               C44595 -
           (((C27088 * C44449 + C27009 * C151) * C44601 +
             ((C20189 * C4148 + C44395 * C4151) * C44449 +
              (C20189 * C4098 + C44395 * C4101) * C151) *
                 C15085) *
                C44603 +
            ((C25358 + C25357) * C44601 + (C25366 + C25354) * C15085) * C9839) *
               C1817) *
              C44599)) /
        (p * q * std::sqrt(p + q));
    d2eexz[51] += (2 * std::pow(Pi, 2.5) *
                   (((((C20189 * C93 + C44395 * C98) * C3289 +
                       (C20189 * C201 + C44395 * C206) * C3187 -
                       C25280 * C3290 - C25438 * C44599) *
                          C15085 +
                      (C23448 + C23449 - C23450 - C23451) * C44601) *
                         C9839 +
                     ((C25280 * C3289 + C25438 * C3187 -
                       (C20189 * C4098 + C44395 * C4101) * C3290 -
                       (C20189 * C4195 + C44395 * C4198) * C44599) *
                          C15085 +
                      (C22393 * C3289 + C22518 * C3187 - C27009 * C3290 -
                       C27160 * C44599) *
                          C44601) *
                         C44603) *
                        C44449 * C1817 +
                    (((C25282 * C3290 -
                       ((C20189 * C202 + C44395 * C207) * C3187 +
                        (C20189 * C94 + C44395 * C99) * C3289) +
                       C25439 * C44599) *
                          C15085 +
                      (C24640 * C3290 - (C20706 * C3187 + C20566 * C3289) +
                       C24784 * C44599) *
                          C44601) *
                         C9839 +
                     (((C20189 * C4099 + C44395 * C4102) * C3290 -
                       (C25439 * C3187 + C25282 * C3289) +
                       (C20189 * C4196 + C44395 * C4199) * C44599) *
                          C15085 +
                      ((C20189 * C9358 + C44395 * C9360) * C3290 -
                       (C24784 * C3187 + C24640 * C3289) +
                       (C20189 * C9470 + C44395 * C9472) * C44599) *
                          C44601) *
                         C44603) *
                        C44449 * C44595)) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[51] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C15239 * C93 + C15085 * C250 + C15240 * C642 + C44601 * C824) *
                C1821 +
            (C15239 * C101 + C15085 * C255 + C15240 * C648 + C44601 * C827) *
                C1817 -
            (C15258 + C15259) * C1822 - (C15260 + C15261) * C44595) *
               C9839 +
           ((C25514 + C25515) * C1821 + (C25516 + C25517) * C1817 -
            (C16479 + C16478) * C1822 - (C16481 + C16480) * C44595) *
               C44603) *
              C44395 * C3187 +
          (((C16478 + C16479) * C1822 -
            ((C25517 + C25516) * C1817 + (C25515 + C25514) * C1821) +
            (C16480 + C16481) * C44595) *
               C9839 +
           ((C15239 * C4099 + C15085 * C4240 + C15240 * C9358 +
             C44601 * C9524) *
                C1822 -
            ((C15240 * C9361 + C44601 * C9525 + C15239 * C4104 +
              C15085 * C4242) *
                 C1817 +
             (C15240 * C9357 + C44601 * C9523 + C15239 * C4098 +
              C15085 * C4239) *
                 C1821) +
            (C15239 * C4105 + C15085 * C4243 + C15240 * C9362 +
             C44601 * C9526) *
                C44595) *
               C44603) *
              C44395 * C44599) *
         C44449) /
        (p * q * std::sqrt(p + q));
    d2eeyy[51] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C15239 * C93 + C15085 * C250 + C15240 * C642 + C44601 * C824) *
                 C151 +
             (C15239 * C152 + C15085 * C316 + C15240 * C709 + C44601 * C893) *
                 C44449) *
                C9839 +
            ((C25514 + C25515) * C151 + (C25588 + C25589) * C44449) * C44603) *
               C44395 * C1817 -
           (((C16553 + C16552) * C44449 + (C16479 + C16478) * C151) * C44603 +
            ((C15325 + C15324) * C44449 + (C15258 + C15259) * C151) * C9839) *
               C44395 * C44595) *
              C3187 +
          ((((C16478 + C16479) * C151 + (C16552 + C16553) * C44449) * C9839 +
            ((C15239 * C4099 + C15085 * C4240 + C15240 * C9358 +
              C44601 * C9524) *
                 C151 +
             (C15239 * C4149 + C15085 * C4284 + C15240 * C9416 +
              C44601 * C9578) *
                 C44449) *
                C44603) *
               C44395 * C44595 -
           (((C15240 * C9415 + C44601 * C9577 + C15239 * C4148 +
              C15085 * C4283) *
                 C44449 +
             (C15240 * C9357 + C44601 * C9523 + C15239 * C4098 +
              C15085 * C4239) *
                 C151) *
                C44603 +
            ((C25589 + C25588) * C44449 + (C25515 + C25514) * C151) * C9839) *
               C44395 * C1817) *
              C44599)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[51] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C15239 * C93 + C15085 * C250 + C15240 * C642 + C44601 * C824) *
                C3289 +
            (C15239 * C201 + C15085 * C376 + C15240 * C767 + C44601 * C963) *
                C3187 -
            (C25515 + C25514) * C3290 - (C25660 + C25661) * C44599) *
               C9839 +
           ((C25514 + C25515) * C3289 + (C25661 + C25660) * C3187 -
            (C15240 * C9357 + C44601 * C9523 + C15239 * C4098 +
             C15085 * C4239) *
                C3290 -
            (C15240 * C9469 + C44601 * C9629 + C15239 * C4195 +
             C15085 * C4324) *
                C44599) *
               C44603) *
              C44395 * C44449 * C1817 +
          (((C16478 + C16479) * C3290 -
            ((C15387 + C15386) * C3187 + (C15258 + C15259) * C3289) +
            (C16625 + C16624) * C44599) *
               C9839 +
           ((C15239 * C4099 + C15085 * C4240 + C15240 * C9358 +
             C44601 * C9524) *
                C3290 -
            ((C16624 + C16625) * C3187 + (C16479 + C16478) * C3289) +
            (C15239 * C4196 + C15085 * C4325 + C15240 * C9470 +
             C44601 * C9630) *
                C44599) *
               C44603) *
              C44395 * C44449 * C44595)) /
        (p * q * std::sqrt(p + q));
    d2eezx[51] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C10145 * C93 + C9839 * C437 + C10146 * C1232 + C44603 * C1616) *
                C1821 +
            (C10145 * C101 + C9839 * C442 + C10146 * C1238 + C44603 * C1619) *
                C1817 -
            (C10164 + C10165) * C1822 - (C10166 + C10167) * C44595) *
               C44395 * C15085 +
           ((C25058 + C25059) * C1821 + (C25060 + C25061) * C1817 -
            (C10785 + C10784) * C1822 - (C10787 + C10786) * C44595) *
               C44395 * C44601) *
              C3187 +
          (((C11492 + C11493) * C1822 -
            ((C10146 * C4104 + C44603 * C4368 + C10145 * C1238 +
              C9839 * C1619) *
                 C1817 +
             (C10146 * C4098 + C44603 * C4365 + C10145 * C1232 +
              C9839 * C1616) *
                 C1821) +
            (C11494 + C11495) * C44595) *
               C44395 * C15085 +
           ((C10145 * C2690 + C9839 * C3026 + C10146 * C9358 + C44603 * C9682) *
                C1822 -
            ((C27458 + C27459) * C1817 + (C27460 + C27461) * C1821) +
            (C10145 * C2696 + C9839 * C3029 + C10146 * C9362 + C44603 * C9684) *
                C44595) *
               C44395 * C44601) *
              C44599) *
         C44449) /
        (p * q * std::sqrt(p + q));
    d2eezy[51] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C10145 * C93 + C9839 * C437 + C10146 * C1232 + C44603 * C1616) *
                 C151 +
             (C10145 * C152 + C9839 * C503 + C10146 * C1298 + C44603 * C1688) *
                 C44449) *
                C44395 * C15085 +
            ((C25058 + C25059) * C151 + (C25133 + C25132) * C44449) * C44395 *
                C44601) *
               C1817 -
           (((C10858 + C10859) * C44449 + (C10785 + C10784) * C151) * C44395 *
                C44601 +
            ((C10231 + C10230) * C44449 + (C10164 + C10165) * C151) * C44395 *
                C15085) *
               C44595) *
              C3187 +
          ((((C11492 + C11493) * C151 + (C11566 + C11567) * C44449) * C44395 *
                C15085 +
            ((C10145 * C2690 + C9839 * C3026 + C10146 * C9358 +
              C44603 * C9682) *
                 C151 +
             (C10145 * C2752 + C9839 * C3082 + C10146 * C9416 +
              C44603 * C9736) *
                 C44449) *
                C44395 * C44601) *
               C44595 -
           (((C27533 + C27532) * C44449 + (C27460 + C27461) * C151) * C44395 *
                C44601 +
            ((C10146 * C4148 + C44603 * C4409 + C10145 * C1298 +
              C9839 * C1688) *
                 C44449 +
             (C10146 * C4098 + C44603 * C4365 + C10145 * C1232 +
              C9839 * C1616) *
                 C151) *
                C44395 * C15085) *
               C1817) *
              C44599)) /
        (p * q * std::sqrt(p + q));
    d2eezz[51] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C10145 * C93 + C9839 * C437 + C10146 * C1232 + C44603 * C1616) *
                C3289 +
            (C10145 * C201 + C9839 * C562 + C10146 * C1357 + C44603 * C1749) *
                C3187 -
            (C10146 * C4098 + C44603 * C4365 + C10145 * C1232 + C9839 * C1616) *
                C3290 -
            (C10146 * C4195 + C44603 * C4450 + C10145 * C1357 + C9839 * C1749) *
                C44599) *
               C44395 * C15085 +
           ((C25058 + C25059) * C3289 + (C25204 + C25205) * C3187 -
            (C27460 + C27461) * C3290 - (C27604 + C27605) * C44599) *
               C44395 * C44601) *
              C44449 * C1817 +
          (((C11492 + C11493) * C3290 -
            ((C10293 + C10292) * C3187 + (C10164 + C10165) * C3289) +
            (C11639 + C11638) * C44599) *
               C44395 * C15085 +
           ((C10145 * C2690 + C9839 * C3026 + C10146 * C9358 + C44603 * C9682) *
                C3290 -
            ((C10930 + C10931) * C3187 + (C10785 + C10784) * C3289) +
            (C10145 * C2808 + C9839 * C3135 + C10146 * C9470 + C44603 * C9788) *
                C44599) *
               C44395 * C44601) *
              C44449 * C44595)) /
        (p * q * std::sqrt(p + q));
    d2eexx[52] +=
        (2 * std::pow(Pi, 2.5) *
         ((((((C20189 * C93 + C44395 * C98) * C2283 +
              (C20189 * C101 + C44395 * C108) * C44407) *
                 C15085 +
             (C21970 + C21971) * C44601) *
                C9839 +
            ((C27000 + C27001) * C15085 + C27002 * C44601) * C44603) *
               C3187 -
           (((C27010 + C27011) * C44601 +
             ((C20189 * C4104 + C44395 * C4107) * C44407 +
              (C20189 * C4098 + C44395 * C4101) * C2283) *
                 C15085) *
                C44603 +
            (C27007 * C44601 + (C27001 + C27000) * C15085) * C9839) *
               C44599) *
              C635 +
          (((C27002 * C15085 + (C22395 + C22394) * C44601) * C9839 +
            ((C27011 + C27010) * C15085 +
             ((C20189 * C23797 + C44395 * C23798) * C2283 +
              (C20189 * C23799 + C44395 * C23800) * C44407) *
                 C44601) *
                C44603) *
               C44599 -
           (((C22394 + C22395) * C44601 + C27007 * C15085) * C44603 +
            ((C21973 + C21972) * C44601 + (C21971 + C21970) * C15085) * C9839) *
               C3187) *
              C44597)) /
        (p * q * std::sqrt(p + q));
    d2eexy[52] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C20189 * C93 + C44395 * C98) * C705 +
             (C20189 * C152 + C44395 * C157) * C635 - C20564 * C706 -
             C20638 * C44597) *
                C15085 +
            (C20564 * C705 + C20638 * C635 - C20568 * C706 - C20639 * C44597) *
                C44601) *
               C9839 +
           ((C28336 + C28337 - C28338 - C28339) * C15085 +
            (C28340 + C28341 - C28342 - C28343) * C44601) *
               C44603) *
              C44407 * C3187 +
          (((C28338 - (C28337 + C28336) + C28339) * C15085 +
            (C28342 - (C28341 + C28340) + C28343) * C44601) *
               C9839 +
           ((C27009 * C706 -
             ((C20189 * C4148 + C44395 * C4151) * C635 +
              (C20189 * C4098 + C44395 * C4101) * C705) +
             C27088 * C44597) *
                C15085 +
            ((C20189 * C23797 + C44395 * C23798) * C706 -
             (C27088 * C635 + C27009 * C705) +
             (C20189 * C23839 + C44395 * C23840) * C44597) *
                C44601) *
               C44603) *
              C44407 * C44599)) /
        (p * q * std::sqrt(p + q));
    d2eexz[52] += (2 * std::pow(Pi, 2.5) *
                   (((((C20189 * C93 + C44395 * C98) * C3289 +
                       (C20189 * C201 + C44395 * C206) * C3187 -
                       C25280 * C3290 - C25438 * C44599) *
                          C15085 +
                      (C23448 + C23449 - C23450 - C23451) * C44601) *
                         C9839 +
                     ((C25280 * C3289 + C25438 * C3187 -
                       (C20189 * C4098 + C44395 * C4101) * C3290 -
                       (C20189 * C4195 + C44395 * C4198) * C44599) *
                          C15085 +
                      (C28410 + C28411 - C28412 - C28413) * C44601) *
                         C44603) *
                        C635 +
                    (((C23450 - (C23449 + C23448) + C23451) * C15085 +
                      (C23454 - (C23453 + C23452) + C23455) * C44601) *
                         C9839 +
                     ((C28412 - (C28411 + C28410) + C28413) * C15085 +
                      ((C20189 * C23797 + C44395 * C23798) * C3290 -
                       (C22519 * C3187 + C22391 * C3289) +
                       (C20189 * C23879 + C44395 * C23880) * C44599) *
                          C44601) *
                         C44603) *
                        C44597) *
                   C44407) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[52] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C15239 * C93 + C15085 * C250 + C15240 * C642 + C44601 * C824) *
                 C2283 +
             (C15239 * C101 + C15085 * C255 + C15240 * C648 + C44601 * C827) *
                 C44407) *
                C9839 +
            ((C25514 + C25515) * C2283 + (C25516 + C25517) * C44407) * C44603) *
               C44395 * C3187 -
           (((C15240 * C9361 + C44601 * C9525 + C15239 * C4104 +
              C15085 * C4242) *
                 C44407 +
             (C15240 * C9357 + C44601 * C9523 + C15239 * C4098 +
              C15085 * C4239) *
                 C2283) *
                C44603 +
            ((C25517 + C25516) * C44407 + (C25515 + C25514) * C2283) * C9839) *
               C44395 * C44599) *
              C635 +
          ((((C27236 + C27237) * C2283 + (C27238 + C27239) * C44407) * C9839 +
            ((C15239 * C9357 + C15085 * C9523 + C15240 * C23797 +
              C44601 * C23919) *
                 C2283 +
             (C15239 * C9361 + C15085 * C9525 + C15240 * C23799 +
              C44601 * C23920) *
                 C44407) *
                C44603) *
               C44395 * C44599 -
           (((C27239 + C27238) * C44407 + (C27237 + C27236) * C2283) * C44603 +
            ((C15240 * C2290 + C44601 * C2428 + C15239 * C648 + C15085 * C827) *
                 C44407 +
             (C15240 * C2284 + C44601 * C2425 + C15239 * C642 + C15085 * C824) *
                 C2283) *
                C9839) *
               C44395 * C3187) *
              C44597)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[52] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C15239 * C93 + C15085 * C250 + C15240 * C642 + C44601 * C824) *
                C705 +
            (C15239 * C152 + C15085 * C316 + C15240 * C709 + C44601 * C893) *
                C635 -
            (C15240 * C2284 + C44601 * C2425 + C15239 * C642 + C15085 * C824) *
                C706 -
            (C15240 * C2337 + C44601 * C2469 + C15239 * C709 + C15085 * C893) *
                C44597) *
               C9839 +
           ((C25514 + C25515) * C705 + (C25588 + C25589) * C635 -
            (C27237 + C27236) * C706 - (C27310 + C27311) * C44597) *
               C44603) *
              C44395 * C44407 * C3187 +
          (((C27236 + C27237) * C706 -
            ((C25589 + C25588) * C635 + (C25515 + C25514) * C705) +
            (C27311 + C27310) * C44597) *
               C9839 +
           ((C15239 * C9357 + C15085 * C9523 + C15240 * C23797 +
             C44601 * C23919) *
                C706 -
            ((C15240 * C9415 + C44601 * C9577 + C15239 * C4148 +
              C15085 * C4283) *
                 C635 +
             (C15240 * C9357 + C44601 * C9523 + C15239 * C4098 +
              C15085 * C4239) *
                 C705) +
            (C15239 * C9415 + C15085 * C9577 + C15240 * C23839 +
             C44601 * C23959) *
                C44597) *
               C44603) *
              C44395 * C44407 * C44599)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[52] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C15239 * C93 + C15085 * C250 + C15240 * C642 + C44601 * C824) *
                C3289 +
            (C15239 * C201 + C15085 * C376 + C15240 * C767 + C44601 * C963) *
                C3187 -
            (C25515 + C25514) * C3290 - (C25660 + C25661) * C44599) *
               C9839 +
           ((C25514 + C25515) * C3289 + (C25661 + C25660) * C3187 -
            (C15240 * C9357 + C44601 * C9523 + C15239 * C4098 +
             C15085 * C4239) *
                C3290 -
            (C15240 * C9469 + C44601 * C9629 + C15239 * C4195 +
             C15085 * C4324) *
                C44599) *
               C44603) *
              C44395 * C635 +
          (((C27236 + C27237) * C3290 -
            ((C15240 * C2381 + C44601 * C2510 + C15239 * C767 + C15085 * C963) *
                 C3187 +
             (C15240 * C2284 + C44601 * C2425 + C15239 * C642 + C15085 * C824) *
                 C3289) +
            (C27382 + C27383) * C44599) *
               C9839 +
           ((C15239 * C9357 + C15085 * C9523 + C15240 * C23797 +
             C44601 * C23919) *
                C3290 -
            ((C27383 + C27382) * C3187 + (C27237 + C27236) * C3289) +
            (C15239 * C9469 + C15085 * C9629 + C15240 * C23879 +
             C44601 * C23998) *
                C44599) *
               C44603) *
              C44395 * C44597) *
         C44407) /
        (p * q * std::sqrt(p + q));
    d2eezx[52] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C10145 * C93 + C9839 * C437 + C10146 * C1232 + C44603 * C1616) *
                 C2283 +
             (C10145 * C101 + C9839 * C442 + C10146 * C1238 + C44603 * C1619) *
                 C44407) *
                C44395 * C15085 +
            ((C25058 + C25059) * C2283 + (C25060 + C25061) * C44407) * C44395 *
                C44601) *
               C3187 -
           (((C27458 + C27459) * C44407 + (C27460 + C27461) * C2283) * C44395 *
                C44601 +
            ((C10146 * C4104 + C44603 * C4368 + C10145 * C1238 +
              C9839 * C1619) *
                 C44407 +
             (C10146 * C4098 + C44603 * C4365 + C10145 * C1232 +
              C9839 * C1616) *
                 C2283) *
                C44395 * C15085) *
               C44599) *
              C635 +
          ((((C27461 + C27460) * C2283 + (C27459 + C27458) * C44407) * C44395 *
                C15085 +
            ((C10145 * C7507 + C9839 * C7951 + C10146 * C23797 +
              C44603 * C24037) *
                 C2283 +
             (C10145 * C7511 + C9839 * C7953 + C10146 * C23799 +
              C44603 * C24038) *
                 C44407) *
                C44395 * C44601) *
               C44599 -
           (((C26818 + C26819) * C44407 + (C26820 + C26821) * C2283) * C44395 *
                C44601 +
            ((C25061 + C25060) * C44407 + (C25059 + C25058) * C2283) * C44395 *
                C15085) *
               C3187) *
              C44597)) /
        (p * q * std::sqrt(p + q));
    d2eezy[52] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C10145 * C93 + C9839 * C437 + C10146 * C1232 + C44603 * C1616) *
                C705 +
            (C10145 * C152 + C9839 * C503 + C10146 * C1298 + C44603 * C1688) *
                C635 -
            (C25059 + C25058) * C706 - (C25132 + C25133) * C44597) *
               C44395 * C15085 +
           ((C25058 + C25059) * C705 + (C25133 + C25132) * C635 -
            (C26820 + C26821) * C706 - (C26877 + C26876) * C44597) *
               C44395 * C44601) *
              C44407 * C3187 +
          (((C27461 + C27460) * C706 -
            ((C10146 * C4148 + C44603 * C4409 + C10145 * C1298 +
              C9839 * C1688) *
                 C635 +
             (C10146 * C4098 + C44603 * C4365 + C10145 * C1232 +
              C9839 * C1616) *
                 C705) +
            (C27532 + C27533) * C44597) *
               C44395 * C15085 +
           ((C10145 * C7507 + C9839 * C7951 + C10146 * C23797 +
             C44603 * C24037) *
                C706 -
            ((C27533 + C27532) * C635 + (C27460 + C27461) * C705) +
            (C10145 * C7593 + C9839 * C8031 + C10146 * C23839 +
             C44603 * C24077) *
                C44597) *
               C44395 * C44601) *
              C44407 * C44599)) /
        (p * q * std::sqrt(p + q));
    d2eezz[52] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C10145 * C93 + C9839 * C437 + C10146 * C1232 + C44603 * C1616) *
                C3289 +
            (C10145 * C201 + C9839 * C562 + C10146 * C1357 + C44603 * C1749) *
                C3187 -
            (C10146 * C4098 + C44603 * C4365 + C10145 * C1232 + C9839 * C1616) *
                C3290 -
            (C10146 * C4195 + C44603 * C4450 + C10145 * C1357 + C9839 * C1749) *
                C44599) *
               C44395 * C15085 +
           ((C25058 + C25059) * C3289 + (C25204 + C25205) * C3187 -
            (C27460 + C27461) * C3290 - (C27604 + C27605) * C44599) *
               C44395 * C44601) *
              C635 +
          (((C27461 + C27460) * C3290 -
            ((C25205 + C25204) * C3187 + (C25059 + C25058) * C3289) +
            (C27605 + C27604) * C44599) *
               C44395 * C15085 +
           ((C10145 * C7507 + C9839 * C7951 + C10146 * C23797 +
             C44603 * C24037) *
                C3290 -
            ((C26932 + C26933) * C3187 + (C26820 + C26821) * C3289) +
            (C10145 * C7669 + C9839 * C8102 + C10146 * C23879 +
             C44603 * C24116) *
                C44599) *
               C44395 * C44601) *
              C44597) *
         C44407) /
        (p * q * std::sqrt(p + q));
    d2eexx[53] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C20189 * C93 + C44395 * C98) * C2283 +
             (C20189 * C101 + C44395 * C108) * C44407) *
                C15085 +
            (C21970 + C21971) * C44601) *
               C9839 +
           ((C27000 + C27001) * C15085 + C27002 * C44601) * C44603) *
              C4095 -
          (((C27010 + C27011) * C44601 + (C28870 + C28871) * C15085) * C44603 +
           (C27007 * C44601 + (C27001 + C27000) * C15085) * C9839) *
              C4096 +
          (((C28871 + C28870) * C15085 + (C27011 + C27010) * C44601) * C9839 +
           (((C20189 * C14559 + C44395 * C14561) * C2283 +
             (C20189 * C14563 + C44395 * C14565) * C44407) *
                C15085 +
            ((C20189 * C28859 + C44395 * C28860) * C2283 +
             (C20189 * C28861 + C44395 * C28862) * C44407) *
                C44601) *
               C44603) *
              C4097) *
         C44449) /
        (p * q * std::sqrt(p + q));
    d2eexy[53] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C20189 * C93 + C44395 * C98) * C151 +
             (C20189 * C152 + C44395 * C157) * C44449) *
                C15085 +
            (C20564 * C151 + C20638 * C44449) * C44601) *
               C9839 +
           ((C25354 + C25366) * C15085 + (C25357 + C25358) * C44601) * C44603) *
              C44407 * C4095 -
          (((C28924 + C28925) * C44601 + (C28930 + C28928) * C15085) * C44603 +
           ((C25358 + C25357) * C44601 + (C25366 + C25354) * C15085) * C9839) *
              C44407 * C4096 +
          (((C28928 + C28930) * C15085 + (C28925 + C28924) * C44601) * C9839 +
           (((C20189 * C14559 + C44395 * C14561) * C151 +
             (C20189 * C14629 + C44395 * C14631) * C44449) *
                C15085 +
            ((C20189 * C28859 + C44395 * C28860) * C151 +
             (C20189 * C28921 + C44395 * C28922) * C44449) *
                C44601) *
               C44603) *
              C44407 * C4097)) /
        (p * q * std::sqrt(p + q));
    d2eexz[53] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C20189 * C93 + C44395 * C98) * C4192 +
            (C20189 * C201 + C44395 * C206) * C4095 - C25280 * C4193 -
            C25438 * C4096 + C28869 * C4194 + C28985 * C4097) *
               C15085 +
           (C20564 * C4192 + C20704 * C4095 - C22393 * C4193 - C22518 * C4096 +
            C27009 * C4194 + C27160 * C4097) *
               C44601) *
              C9839 +
          ((C25280 * C4192 + C25438 * C4095 - C28869 * C4193 - C28985 * C4096 +
            (C20189 * C14559 + C44395 * C14561) * C4194 +
            (C20189 * C14689 + C44395 * C14691) * C4097) *
               C15085 +
           (C22393 * C4192 + C22518 * C4095 - C27009 * C4193 - C27160 * C4096 +
            (C20189 * C28859 + C44395 * C28860) * C4194 +
            (C20189 * C28980 + C44395 * C28981) * C4097) *
               C44601) *
              C44603) *
         C44449 * C44407) /
        (p * q * std::sqrt(p + q));
    d2eeyx[53] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C15239 * C93 + C15085 * C250 + C15240 * C642 + C44601 * C824) *
                C2283 +
            (C15239 * C101 + C15085 * C255 + C15240 * C648 + C44601 * C827) *
                C44407) *
               C9839 +
           ((C25514 + C25515) * C2283 + (C25516 + C25517) * C44407) * C44603) *
              C44395 * C4095 -
          (((C29046 + C29047) * C44407 + (C29048 + C29049) * C2283) * C44603 +
           ((C25517 + C25516) * C44407 + (C25515 + C25514) * C2283) * C9839) *
              C44395 * C4096 +
          (((C29049 + C29048) * C2283 + (C29047 + C29046) * C44407) * C9839 +
           ((C15239 * C14559 + C15085 * C14749 + C15240 * C28859 +
             C44601 * C29035) *
                C2283 +
            (C15239 * C14563 + C15085 * C14751 + C15240 * C28861 +
             C44601 * C29036) *
                C44407) *
               C44603) *
              C44395 * C4097) *
         C44449) /
        (p * q * std::sqrt(p + q));
    d2eeyy[53] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C15239 * C93 + C15085 * C250 + C15240 * C642 + C44601 * C824) *
                C151 +
            (C15239 * C152 + C15085 * C316 + C15240 * C709 + C44601 * C893) *
                C44449) *
               C9839 +
           ((C25514 + C25515) * C151 + (C25588 + C25589) * C44449) * C44603) *
              C44395 * C44407 * C4095 -
          (((C29105 + C29106) * C44449 + (C29048 + C29049) * C151) * C44603 +
           ((C25589 + C25588) * C44449 + (C25515 + C25514) * C151) * C9839) *
              C44395 * C44407 * C4096 +
          (((C29049 + C29048) * C151 + (C29106 + C29105) * C44449) * C9839 +
           ((C15239 * C14559 + C15085 * C14749 + C15240 * C28859 +
             C44601 * C29035) *
                C151 +
            (C15239 * C14629 + C15085 * C14813 + C15240 * C28921 +
             C44601 * C29099) *
                C44449) *
               C44603) *
              C44395 * C44407 * C4097)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[53] +=
        (2 * std::pow(Pi, 2.5) *
         (((C15239 * C93 + C15085 * C250 + C15240 * C642 + C44601 * C824) *
               C4192 +
           (C15239 * C201 + C15085 * C376 + C15240 * C767 + C44601 * C963) *
               C4095 -
           (C25515 + C25514) * C4193 - (C25660 + C25661) * C4096 +
           (C29049 + C29048) * C4194 + (C29162 + C29163) * C4097) *
              C9839 +
          ((C25514 + C25515) * C4192 + (C25661 + C25660) * C4095 -
           (C29048 + C29049) * C4193 - (C29163 + C29162) * C4096 +
           (C15239 * C14559 + C15085 * C14749 + C15240 * C28859 +
            C44601 * C29035) *
               C4194 +
           (C15239 * C14689 + C15085 * C14870 + C15240 * C28980 +
            C44601 * C29156) *
               C4097) *
              C44603) *
         C44395 * C44449 * C44407) /
        (p * q * std::sqrt(p + q));
    d2eezx[53] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C10145 * C93 + C9839 * C437 + C10146 * C1232 + C44603 * C1616) *
                C2283 +
            (C10145 * C101 + C9839 * C442 + C10146 * C1238 + C44603 * C1619) *
                C44407) *
               C44395 * C15085 +
           ((C25058 + C25059) * C2283 + (C25060 + C25061) * C44407) * C44395 *
               C44601) *
              C4095 -
          (((C27458 + C27459) * C44407 + (C27460 + C27461) * C2283) * C44395 *
               C44601 +
           ((C10146 * C4104 + C44603 * C4368 + C10145 * C1238 + C9839 * C1619) *
                C44407 +
            (C10146 * C4098 + C44603 * C4365 + C10145 * C1232 + C9839 * C1616) *
                C2283) *
               C44395 * C15085) *
              C4096 +
          (((C10145 * C4098 + C9839 * C4365 + C10146 * C14559 +
             C44603 * C14925) *
                C2283 +
            (C10145 * C4104 + C9839 * C4368 + C10146 * C14563 +
             C44603 * C14927) *
                C44407) *
               C44395 * C15085 +
           ((C10145 * C9357 + C9839 * C9681 + C10146 * C28859 +
             C44603 * C29213) *
                C2283 +
            (C10145 * C9361 + C9839 * C9683 + C10146 * C28861 +
             C44603 * C29214) *
                C44407) *
               C44395 * C44601) *
              C4097) *
         C44449) /
        (p * q * std::sqrt(p + q));
    d2eezy[53] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C10145 * C93 + C9839 * C437 + C10146 * C1232 + C44603 * C1616) *
                C151 +
            (C10145 * C152 + C9839 * C503 + C10146 * C1298 + C44603 * C1688) *
                C44449) *
               C44395 * C15085 +
           ((C25058 + C25059) * C151 + (C25133 + C25132) * C44449) * C44395 *
               C44601) *
              C44407 * C4095 -
          (((C27533 + C27532) * C44449 + (C27460 + C27461) * C151) * C44395 *
               C44601 +
           ((C10146 * C4148 + C44603 * C4409 + C10145 * C1298 + C9839 * C1688) *
                C44449 +
            (C10146 * C4098 + C44603 * C4365 + C10145 * C1232 + C9839 * C1616) *
                C151) *
               C44395 * C15085) *
              C44407 * C4096 +
          (((C10145 * C4098 + C9839 * C4365 + C10146 * C14559 +
             C44603 * C14925) *
                C151 +
            (C10145 * C4148 + C9839 * C4409 + C10146 * C14629 +
             C44603 * C14979) *
                C44449) *
               C44395 * C15085 +
           ((C10145 * C9357 + C9839 * C9681 + C10146 * C28859 +
             C44603 * C29213) *
                C151 +
            (C10145 * C9415 + C9839 * C9735 + C10146 * C28921 +
             C44603 * C29265) *
                C44449) *
               C44395 * C44601) *
              C44407 * C4097)) /
        (p * q * std::sqrt(p + q));
    d2eezz[53] +=
        (2 * std::pow(Pi, 2.5) *
         (((C10145 * C93 + C9839 * C437 + C10146 * C1232 + C44603 * C1616) *
               C4192 +
           (C10145 * C201 + C9839 * C562 + C10146 * C1357 + C44603 * C1749) *
               C4095 -
           (C10146 * C4098 + C44603 * C4365 + C10145 * C1232 + C9839 * C1616) *
               C4193 -
           (C10146 * C4195 + C44603 * C4450 + C10145 * C1357 + C9839 * C1749) *
               C4096 +
           (C10145 * C4098 + C9839 * C4365 + C10146 * C14559 +
            C44603 * C14925) *
               C4194 +
           (C10145 * C4195 + C9839 * C4450 + C10146 * C14689 +
            C44603 * C15031) *
               C4097) *
              C44395 * C15085 +
          ((C25058 + C25059) * C4192 + (C25204 + C25205) * C4095 -
           (C27460 + C27461) * C4193 - (C27604 + C27605) * C4096 +
           (C10145 * C9357 + C9839 * C9681 + C10146 * C28859 +
            C44603 * C29213) *
               C4194 +
           (C10145 * C9469 + C9839 * C9787 + C10146 * C28980 +
            C44603 * C29316) *
               C4097) *
              C44395 * C44601) *
         C44449 * C44407) /
        (p * q * std::sqrt(p + q));
    d2eexx[54] +=
        (2 * std::pow(Pi, 2.5) *
         (((C15087 * C93 + C15083 * C98 + C15088 * C94 + C44593 * C99) * C90 +
           (C15087 * C101 + C15083 * C108 + C15088 * C102 + C44593 * C109) *
               C80 -
           (C15088 * C95 + C44593 * C100 + C15087 * C94 + C15083 * C99) * C91 -
           (C15088 * C103 + C44593 * C110 + C15087 * C102 + C15083 * C109) *
               C81 +
           (C15087 * C95 + C15083 * C100 + C15088 * C96 + C44593 * C104) * C92 +
           (C15087 * C103 + C15083 * C110 + C15088 * C105 + C44593 * C111) *
               C82) *
              C44497 * C29367 +
          ((C15087 * C1232 + C15083 * C1239 + C15088 * C1229 + C44593 * C1233) *
               C90 +
           (C15087 * C1238 + C15083 * C1243 + C15088 * C1237 + C44593 * C1242) *
               C80 -
           (C15088 * C1230 + C44593 * C1234 + C15087 * C1229 + C15083 * C1233) *
               C91 -
           (C15088 * C1236 + C44593 * C1241 + C15087 * C1237 + C15083 * C1242) *
               C81 +
           (C15087 * C1230 + C15083 * C1234 + C15088 * C1231 + C44593 * C1235) *
               C92 +
           (C15087 * C1236 + C15083 * C1241 + C15088 * C1240 + C44593 * C1244) *
               C82) *
              C44497 * C44603) *
         C44464 * C44449) /
        (p * q * std::sqrt(p + q));
    d2eexy[54] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C15087 * C93 + C15083 * C98 + C15088 * C94 + C44593 * C99) * C151 +
            (C15087 * C152 + C15083 * C157 + C15088 * C153 + C44593 * C158) *
                C44449) *
               C44497 * C29367 +
           ((C15087 * C1232 + C15083 * C1239 + C15088 * C1229 +
             C44593 * C1233) *
                C151 +
            (C15087 * C1298 + C15083 * C1302 + C15088 * C1295 +
             C44593 * C1299) *
                C44449) *
               C44497 * C44603) *
              C80 -
          (((C15088 * C1296 + C44593 * C1300 + C15087 * C1295 +
             C15083 * C1299) *
                C44449 +
            (C15088 * C1230 + C44593 * C1234 + C15087 * C1229 +
             C15083 * C1233) *
                C151) *
               C44497 * C44603 +
           ((C15088 * C154 + C44593 * C159 + C15087 * C153 + C15083 * C158) *
                C44449 +
            (C15088 * C95 + C44593 * C100 + C15087 * C94 + C15083 * C99) *
                C151) *
               C44497 * C29367) *
              C81 +
          (((C15087 * C95 + C15083 * C100 + C15088 * C96 + C44593 * C104) *
                C151 +
            (C15087 * C154 + C15083 * C159 + C15088 * C155 + C44593 * C160) *
                C44449) *
               C44497 * C29367 +
           ((C15087 * C1230 + C15083 * C1234 + C15088 * C1231 +
             C44593 * C1235) *
                C151 +
            (C15087 * C1296 + C15083 * C1300 + C15088 * C1297 +
             C44593 * C1301) *
                C44449) *
               C44497 * C44603) *
              C82) *
         C44464) /
        (p * q * std::sqrt(p + q));
    d2eexz[54] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C15087 * C93 + C15083 * C98 + C15088 * C94 + C44593 * C99) * C200 +
            (C15087 * C201 + C15083 * C206 + C15088 * C202 + C44593 * C207) *
                C44464) *
               C44497 * C29367 +
           ((C15087 * C1232 + C15083 * C1239 + C15088 * C1229 +
             C44593 * C1233) *
                C200 +
            (C15087 * C1357 + C15083 * C1361 + C15088 * C1356 +
             C44593 * C1360) *
                C44464) *
               C44497 * C44603) *
              C44449 * C80 -
          (((C15088 * C1355 + C44593 * C1359 + C15087 * C1356 +
             C15083 * C1360) *
                C44464 +
            (C15088 * C1230 + C44593 * C1234 + C15087 * C1229 +
             C15083 * C1233) *
                C200) *
               C44497 * C44603 +
           ((C15088 * C203 + C44593 * C208 + C15087 * C202 + C15083 * C207) *
                C44464 +
            (C15088 * C95 + C44593 * C100 + C15087 * C94 + C15083 * C99) *
                C200) *
               C44497 * C29367) *
              C44449 * C81 +
          (((C15087 * C95 + C15083 * C100 + C15088 * C96 + C44593 * C104) *
                C200 +
            (C15087 * C203 + C15083 * C208 + C15088 * C204 + C44593 * C209) *
                C44464) *
               C44497 * C29367 +
           ((C15087 * C1230 + C15083 * C1234 + C15088 * C1231 +
             C44593 * C1235) *
                C200 +
            (C15087 * C1355 + C15083 * C1359 + C15088 * C1358 +
             C44593 * C1362) *
                C44464) *
               C44497 * C44603) *
              C44449 * C82)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[54] += (2 * std::pow(Pi, 2.5) *
                   ((((C249 * C93 + C44497 * C250) * C90 +
                      (C249 * C101 + C44497 * C255) * C80 - C273 * C91 -
                      C274 * C81 + C275 * C92 + C276 * C82) *
                         C29367 +
                     (C11258 * C90 + C11259 * C80 - C1430 * C91 - C1431 * C81 +
                      C1432 * C92 + C1433 * C82) *
                         C44603) *
                        C15083 +
                    ((C273 * C90 + C274 * C80 - C275 * C91 - C276 * C81 +
                      C277 * C92 + C278 * C82) *
                         C29367 +
                     (C1430 * C90 + C1431 * C80 - C1432 * C91 - C1433 * C81 +
                      (C249 * C1231 + C44497 * C1416) * C92 +
                      (C249 * C1240 + C44497 * C1420) * C82) *
                         C44603) *
                        C44593) *
                   C44464 * C44449) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[54] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C249 * C93 + C44497 * C250) * C151 +
             (C249 * C152 + C44497 * C316) * C44449) *
                C29367 +
            (C11330 + C11340) * C44603) *
               C15083 +
           ((C322 + C334) * C29367 + C11333 * C44603) * C44593) *
              C80 -
          (((C1497 + C1491) * C44603 + (C335 + C325) * C29367) * C44593 +
           (C11334 * C44603 + (C334 + C322) * C29367) * C15083) *
              C81 +
          ((C337 * C29367 + (C1491 + C1497) * C44603) * C15083 +
           ((C330 + C336) * C29367 +
            ((C249 * C1231 + C44497 * C1416) * C151 +
             (C249 * C1297 + C44497 * C1485) * C44449) *
                C44603) *
               C44593) *
              C82) *
         C44464) /
        (p * q * std::sqrt(p + q));
    d2eeyz[54] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C249 * C93 + C44497 * C250) * C200 +
             (C249 * C201 + C44497 * C376) * C44464) *
                C29367 +
            (C11258 * C200 + C11415 * C44464) * C44603) *
               C15083 +
           ((C382 + C394) * C29367 + (C10092 + C10093) * C44603) * C44593) *
              C44449 * C80 -
          (((C10094 + C10095) * C44603 + (C395 + C385) * C29367) * C44593 +
           ((C10093 + C10092) * C44603 + (C394 + C382) * C29367) * C15083) *
              C44449 * C81 +
          ((C397 * C29367 + (C10095 + C10094) * C44603) * C15083 +
           ((C390 + C396) * C29367 +
            ((C249 * C1231 + C44497 * C1416) * C200 +
             (C249 * C1358 + C44497 * C1550) * C44464) *
                C44603) *
               C44593) *
              C44449 * C82)) /
        (p * q * std::sqrt(p + q));
    d2eezx[54] +=
        (2 * std::pow(Pi, 2.5) *
         (((C29669 * C93 + C29367 * C437 + C29670 * C1232 + C44603 * C1616) *
               C90 +
           (C29669 * C101 + C29367 * C442 + C29670 * C1238 + C44603 * C1619) *
               C80 -
           (C29688 + C29689) * C91 - (C29690 + C29691) * C81 +
           (C29692 + C29693) * C92 + (C29694 + C29695) * C82) *
              C15083 +
          ((C29689 + C29688) * C90 + (C29691 + C29690) * C80 -
           (C29693 + C29692) * C91 - (C29695 + C29694) * C81 +
           (C29669 * C96 + C29367 * C440 + C29670 * C1231 + C44603 * C1618) *
               C92 +
           (C29669 * C105 + C29367 * C445 + C29670 * C1240 + C44603 * C1622) *
               C82) *
              C44593) *
         C44497 * C44464 * C44449) /
        (p * q * std::sqrt(p + q));
    d2eezy[54] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C29669 * C93 + C29367 * C437 + C29670 * C1232 + C44603 * C1616) *
                C151 +
            (C29669 * C152 + C29367 * C503 + C29670 * C1298 + C44603 * C1688) *
                C44449) *
               C15083 +
           ((C29689 + C29688) * C151 + (C29754 + C29755) * C44449) * C44593) *
              C44497 * C80 -
          (((C29756 + C29757) * C44449 + (C29693 + C29692) * C151) * C44593 +
           ((C29755 + C29754) * C44449 + (C29688 + C29689) * C151) * C15083) *
              C44497 * C81 +
          (((C29692 + C29693) * C151 + (C29757 + C29756) * C44449) * C15083 +
           ((C29669 * C96 + C29367 * C440 + C29670 * C1231 + C44603 * C1618) *
                C151 +
            (C29669 * C155 + C29367 * C506 + C29670 * C1297 + C44603 * C1687) *
                C44449) *
               C44593) *
              C44497 * C82) *
         C44464) /
        (p * q * std::sqrt(p + q));
    d2eezz[54] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C29669 * C93 + C29367 * C437 + C29670 * C1232 + C44603 * C1616) *
                C200 +
            (C29669 * C201 + C29367 * C562 + C29670 * C1357 + C44603 * C1749) *
                C44464) *
               C15083 +
           ((C29689 + C29688) * C200 + (C29816 + C29817) * C44464) * C44593) *
              C44497 * C44449 * C80 -
          (((C29818 + C29819) * C44464 + (C29693 + C29692) * C200) * C44593 +
           ((C29817 + C29816) * C44464 + (C29688 + C29689) * C200) * C15083) *
              C44497 * C44449 * C81 +
          (((C29692 + C29693) * C200 + (C29819 + C29818) * C44464) * C15083 +
           ((C29669 * C96 + C29367 * C440 + C29670 * C1231 + C44603 * C1618) *
                C200 +
            (C29669 * C204 + C29367 * C565 + C29670 * C1358 + C44603 * C1752) *
                C44464) *
               C44593) *
              C44497 * C44449 * C82)) /
        (p * q * std::sqrt(p + q));
    d2eexx[55] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C15087 * C93 + C15083 * C98 + C15088 * C94 + C44593 * C99) * C637 +
            (C15087 * C101 + C15083 * C108 + C15088 * C102 + C44593 * C109) *
                C633 -
            (C15088 * C95 + C44593 * C100 + C15087 * C94 + C15083 * C99) *
                C638 -
            (C15088 * C103 + C44593 * C110 + C15087 * C102 + C15083 * C109) *
                C44595) *
               C44497 * C29367 +
           ((C15087 * C1232 + C15083 * C1239 + C15088 * C1229 +
             C44593 * C1233) *
                C637 +
            (C15087 * C1238 + C15083 * C1243 + C15088 * C1237 +
             C44593 * C1242) *
                C633 -
            (C15088 * C1230 + C44593 * C1234 + C15087 * C1229 +
             C15083 * C1233) *
                C638 -
            (C15088 * C1236 + C44593 * C1241 + C15087 * C1237 +
             C15083 * C1242) *
                C44595) *
               C44497 * C44603) *
              C44464 * C635 +
          (((C15627 + C15626) * C638 -
            ((C15625 + C15624) * C633 + (C15623 + C15622) * C637) +
            (C15629 + C15628) * C44595) *
               C44497 * C29367 +
           ((C15087 * C2690 + C15083 * C2693 + C15088 * C2691 +
             C44593 * C2694) *
                C638 -
            ((C17966 + C17967) * C633 + (C17968 + C17969) * C637) +
            (C15087 * C2696 + C15083 * C2699 + C15088 * C2697 +
             C44593 * C2700) *
                C44595) *
               C44497 * C44603) *
              C44464 * C44597)) /
        (p * q * std::sqrt(p + q));
    d2eexy[55] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C15087 * C93 + C15083 * C98 + C15088 * C94 + C44593 * C99) * C705 +
            (C15087 * C152 + C15083 * C157 + C15088 * C153 + C44593 * C158) *
                C635 -
            (C15623 + C15622) * C706 - (C15704 + C15705) * C44597) *
               C44497 * C29367 +
           ((C15087 * C1232 + C15083 * C1239 + C15088 * C1229 +
             C44593 * C1233) *
                C705 +
            (C15087 * C1298 + C15083 * C1302 + C15088 * C1295 +
             C44593 * C1299) *
                C635 -
            (C17968 + C17969) * C706 - (C18041 + C18040) * C44597) *
               C44497 * C44603) *
              C633 +
          (((C15627 + C15626) * C706 -
            ((C15088 * C154 + C44593 * C159 + C15087 * C153 + C15083 * C158) *
                 C635 +
             (C15088 * C95 + C44593 * C100 + C15087 * C94 + C15083 * C99) *
                 C705) +
            (C15706 + C15707) * C44597) *
               C44497 * C29367 +
           ((C15087 * C2690 + C15083 * C2693 + C15088 * C2691 +
             C44593 * C2694) *
                C706 -
            ((C15088 * C1296 + C44593 * C1300 + C15087 * C1295 +
              C15083 * C1299) *
                 C635 +
             (C15088 * C1230 + C44593 * C1234 + C15087 * C1229 +
              C15083 * C1233) *
                 C705) +
            (C15087 * C2752 + C15083 * C2755 + C15088 * C2753 +
             C44593 * C2756) *
                C44597) *
               C44497 * C44603) *
              C44595) *
         C44464) /
        (p * q * std::sqrt(p + q));
    d2eexz[55] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C15087 * C93 + C15083 * C98 + C15088 * C94 + C44593 * C99) *
                 C200 +
             (C15087 * C201 + C15083 * C206 + C15088 * C202 + C44593 * C207) *
                 C44464) *
                C44497 * C29367 +
            ((C15087 * C1232 + C15083 * C1239 + C15088 * C1229 +
              C44593 * C1233) *
                 C200 +
             (C15087 * C1357 + C15083 * C1361 + C15088 * C1356 +
              C44593 * C1360) *
                 C44464) *
                C44497 * C44603) *
               C635 -
           (((C18112 + C18113) * C44464 + (C17968 + C17969) * C200) * C44497 *
                C44603 +
            ((C15783 + C15782) * C44464 + (C15623 + C15622) * C200) * C44497 *
                C29367) *
               C44597) *
              C633 +
          ((((C15627 + C15626) * C200 + (C15784 + C15785) * C44464) * C44497 *
                C29367 +
            ((C15087 * C2690 + C15083 * C2693 + C15088 * C2691 +
              C44593 * C2694) *
                 C200 +
             (C15087 * C2808 + C15083 * C2811 + C15088 * C2809 +
              C44593 * C2812) *
                 C44464) *
                C44497 * C44603) *
               C44597 -
           (((C15088 * C1355 + C44593 * C1359 + C15087 * C1356 +
              C15083 * C1360) *
                 C44464 +
             (C15088 * C1230 + C44593 * C1234 + C15087 * C1229 +
              C15083 * C1233) *
                 C200) *
                C44497 * C44603 +
            ((C15088 * C203 + C44593 * C208 + C15087 * C202 + C15083 * C207) *
                 C44464 +
             (C15088 * C95 + C44593 * C100 + C15087 * C94 + C15083 * C99) *
                 C200) *
                C44497 * C29367) *
               C635) *
              C44595)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[55] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C249 * C93 + C44497 * C250) * C637 +
             (C249 * C101 + C44497 * C255) * C633 - C273 * C638 -
             C274 * C44595) *
                C29367 +
            (C11262 + C11263 - C11248 - C11249) * C44603) *
               C15083 +
           ((C273 * C637 + C274 * C633 - C275 * C638 - C276 * C44595) * C29367 +
            (C11250 + C11251 - C11252 - C11253) * C44603) *
               C44593) *
              C44464 * C635 +
          (((C840 * C638 -
             ((C249 * C648 + C44497 * C827) * C633 +
              (C249 * C642 + C44497 * C824) * C637) +
             C841 * C44595) *
                C29367 +
            (C10564 * C638 - (C12963 * C633 + C12962 * C637) +
             C10565 * C44595) *
                C44603) *
               C15083 +
           ((C842 * C638 - (C841 * C633 + C840 * C637) + C843 * C44595) *
                C29367 +
            ((C249 * C2691 + C44497 * C2865) * C638 -
             (C10565 * C633 + C10564 * C637) +
             (C249 * C2697 + C44497 * C2868) * C44595) *
                C44603) *
               C44593) *
              C44464 * C44597)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[55] += (2 * std::pow(Pi, 2.5) *
                   (((((C249 * C93 + C44497 * C250) * C705 +
                       (C249 * C152 + C44497 * C316) * C635 -
                       (C249 * C642 + C44497 * C824) * C706 -
                       (C249 * C709 + C44497 * C893) * C44597) *
                          C29367 +
                      (C14242 + C14243 - C14244 - C14245) * C44603) *
                         C15083 +
                     ((C898 + C899 - C900 - C910) * C29367 +
                      (C10632 + C10633 - C10634 - C10638) * C44603) *
                         C44593) *
                        C633 +
                    (((C900 - (C899 + C898) + C910) * C29367 +
                      (C10634 - (C10633 + C10632) + C10638) * C44603) *
                         C15083 +
                     ((C905 - (C904 + C903) + C911) * C29367 +
                      ((C249 * C2691 + C44497 * C2865) * C706 -
                       (C1495 * C635 + C1432 * C705) +
                       (C249 * C2753 + C44497 * C2921) * C44597) *
                          C44603) *
                         C44593) *
                        C44595) *
                   C44464) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[55] +=
        (2 * std::pow(Pi, 2.5) *
         ((((((C249 * C93 + C44497 * C250) * C200 +
              (C249 * C201 + C44497 * C376) * C44464) *
                 C29367 +
             (C11258 * C200 + C11415 * C44464) * C44603) *
                C15083 +
            ((C382 + C394) * C29367 + (C10092 + C10093) * C44603) * C44593) *
               C635 -
           (((C10709 + C10707) * C44603 + (C975 + C971) * C29367) * C44593 +
            ((C13107 * C44464 + C12962 * C200) * C44603 +
             ((C249 * C767 + C44497 * C963) * C44464 +
              (C249 * C642 + C44497 * C824) * C200) *
                 C29367) *
                C15083) *
               C44597) *
              C633 +
          ((((C971 + C975) * C29367 + (C10707 + C10709) * C44603) * C15083 +
            ((C968 + C974) * C29367 +
             ((C249 * C2691 + C44497 * C2865) * C200 +
              (C249 * C2809 + C44497 * C2974) * C44464) *
                 C44603) *
                C44593) *
               C44597 -
           (((C10094 + C10095) * C44603 + (C395 + C385) * C29367) * C44593 +
            ((C10093 + C10092) * C44603 + (C394 + C382) * C29367) * C15083) *
               C635) *
              C44595)) /
        (p * q * std::sqrt(p + q));
    d2eezx[55] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C29669 * C93 + C29367 * C437 + C29670 * C1232 + C44603 * C1616) *
                C637 +
            (C29669 * C101 + C29367 * C442 + C29670 * C1238 + C44603 * C1619) *
                C633 -
            (C29688 + C29689) * C638 - (C29690 + C29691) * C44595) *
               C15083 +
           ((C29689 + C29688) * C637 + (C29691 + C29690) * C633 -
            (C29693 + C29692) * C638 - (C29695 + C29694) * C44595) *
               C44593) *
              C44497 * C44464 * C635 +
          (((C30290 + C30291) * C638 -
            ((C29670 * C2695 + C44603 * C3028 + C29669 * C648 +
              C29367 * C1029) *
                 C633 +
             (C29670 * C2689 + C44603 * C3025 + C29669 * C642 +
              C29367 * C1026) *
                 C637) +
            (C30292 + C30293) * C44595) *
               C15083 +
           ((C29669 * C640 + C29367 * C1027 + C29670 * C2691 + C44603 * C3027) *
                C638 -
            ((C30293 + C30292) * C633 + (C30291 + C30290) * C637) +
            (C29669 * C646 + C29367 * C1031 + C29670 * C2697 + C44603 * C3030) *
                C44595) *
               C44593) *
              C44497 * C44464 * C44597)) /
        (p * q * std::sqrt(p + q));
    d2eezy[55] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C29669 * C93 + C29367 * C437 + C29670 * C1232 + C44603 * C1616) *
                C705 +
            (C29669 * C152 + C29367 * C503 + C29670 * C1298 + C44603 * C1688) *
                C635 -
            (C29670 * C2689 + C44603 * C3025 + C29669 * C642 + C29367 * C1026) *
                C706 -
            (C29670 * C2751 + C44603 * C3081 + C29669 * C709 + C29367 * C1095) *
                C44597) *
               C15083 +
           ((C29689 + C29688) * C705 + (C29754 + C29755) * C635 -
            (C30291 + C30290) * C706 - (C30364 + C30365) * C44597) *
               C44593) *
              C44497 * C633 +
          (((C30290 + C30291) * C706 -
            ((C29755 + C29754) * C635 + (C29688 + C29689) * C705) +
            (C30365 + C30364) * C44597) *
               C15083 +
           ((C29669 * C640 + C29367 * C1027 + C29670 * C2691 + C44603 * C3027) *
                C706 -
            ((C29756 + C29757) * C635 + (C29693 + C29692) * C705) +
            (C29669 * C707 + C29367 * C1097 + C29670 * C2753 + C44603 * C3083) *
                C44597) *
               C44593) *
              C44497 * C44595) *
         C44464) /
        (p * q * std::sqrt(p + q));
    d2eezz[55] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C29669 * C93 + C29367 * C437 + C29670 * C1232 + C44603 * C1616) *
                 C200 +
             (C29669 * C201 + C29367 * C562 + C29670 * C1357 + C44603 * C1749) *
                 C44464) *
                C15083 +
            ((C29689 + C29688) * C200 + (C29816 + C29817) * C44464) * C44593) *
               C44497 * C635 -
           (((C30436 + C30437) * C44464 + (C30291 + C30290) * C200) * C44593 +
            ((C29670 * C2807 + C44603 * C3134 + C29669 * C767 +
              C29367 * C1165) *
                 C44464 +
             (C29670 * C2689 + C44603 * C3025 + C29669 * C642 +
              C29367 * C1026) *
                 C200) *
                C15083) *
               C44497 * C44597) *
              C633 +
          ((((C30290 + C30291) * C200 + (C30437 + C30436) * C44464) * C15083 +
            ((C29669 * C640 + C29367 * C1027 + C29670 * C2691 +
              C44603 * C3027) *
                 C200 +
             (C29669 * C765 + C29367 * C1163 + C29670 * C2809 +
              C44603 * C3136) *
                 C44464) *
                C44593) *
               C44497 * C44597 -
           (((C29818 + C29819) * C44464 + (C29693 + C29692) * C200) * C44593 +
            ((C29817 + C29816) * C44464 + (C29688 + C29689) * C200) * C15083) *
               C44497 * C635) *
              C44595)) /
        (p * q * std::sqrt(p + q));
    d2eexx[56] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C15087 * C93 + C15083 * C98 + C15088 * C94 + C44593 * C99) * C637 +
            (C15087 * C101 + C15083 * C108 + C15088 * C102 + C44593 * C109) *
                C633 -
            (C15088 * C95 + C44593 * C100 + C15087 * C94 + C15083 * C99) *
                C638 -
            (C15088 * C103 + C44593 * C110 + C15087 * C102 + C15083 * C109) *
                C44595) *
               C44497 * C29367 +
           ((C30520 + C30521) * C637 + (C30522 + C30523) * C633 -
            (C30524 + C30525) * C638 - (C30526 + C30527) * C44595) *
               C44497 * C44603) *
              C1227 +
          (((C30525 + C30524) * C638 -
            ((C30523 + C30522) * C633 + (C30521 + C30520) * C637) +
            (C30527 + C30526) * C44595) *
               C44497 * C29367 +
           ((C15087 * C4099 + C15083 * C4102 + C15088 * C4100 +
             C44593 * C4103) *
                C638 -
            ((C15088 * C4105 + C44593 * C4108 + C15087 * C4104 +
              C15083 * C4107) *
                 C633 +
             (C15088 * C4099 + C44593 * C4102 + C15087 * C4098 +
              C15083 * C4101) *
                 C637) +
            (C15087 * C4105 + C15083 * C4108 + C15088 * C4106 +
             C44593 * C4109) *
                C44595) *
               C44497 * C44603) *
              C44599) *
         C44449) /
        (p * q * std::sqrt(p + q));
    d2eexy[56] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C15087 * C93 + C15083 * C98 + C15088 * C94 + C44593 * C99) *
                 C151 +
             (C15087 * C152 + C15083 * C157 + C15088 * C153 + C44593 * C158) *
                 C44449) *
                C44497 * C29367 +
            ((C30520 + C30521) * C151 + (C30602 + C30603) * C44449) * C44497 *
                C44603) *
               C633 -
           (((C30604 + C30605) * C44449 + (C30524 + C30525) * C151) * C44497 *
                C44603 +
            ((C15088 * C154 + C44593 * C159 + C15087 * C153 + C15083 * C158) *
                 C44449 +
             (C15088 * C95 + C44593 * C100 + C15087 * C94 + C15083 * C99) *
                 C151) *
                C44497 * C29367) *
               C44595) *
              C1227 +
          ((((C30525 + C30524) * C151 + (C30605 + C30604) * C44449) * C44497 *
                C29367 +
            ((C15087 * C4099 + C15083 * C4102 + C15088 * C4100 +
              C44593 * C4103) *
                 C151 +
             (C15087 * C4149 + C15083 * C4152 + C15088 * C4150 +
              C44593 * C4153) *
                 C44449) *
                C44497 * C44603) *
               C44595 -
           (((C15088 * C4149 + C44593 * C4152 + C15087 * C4148 +
              C15083 * C4151) *
                 C44449 +
             (C15088 * C4099 + C44593 * C4102 + C15087 * C4098 +
              C15083 * C4101) *
                 C151) *
                C44497 * C44603 +
            ((C30603 + C30602) * C44449 + (C30521 + C30520) * C151) * C44497 *
                C29367) *
               C633) *
              C44599)) /
        (p * q * std::sqrt(p + q));
    d2eexz[56] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C15087 * C93 + C15083 * C98 + C15088 * C94 + C44593 * C99) *
                C1353 +
            (C15087 * C201 + C15083 * C206 + C15088 * C202 + C44593 * C207) *
                C1227 -
            (C30521 + C30520) * C1354 - (C30680 + C30681) * C44599) *
               C44497 * C29367 +
           ((C30520 + C30521) * C1353 + (C30681 + C30680) * C1227 -
            (C15088 * C4099 + C44593 * C4102 + C15087 * C4098 +
             C15083 * C4101) *
                C1354 -
            (C15088 * C4196 + C44593 * C4199 + C15087 * C4195 +
             C15083 * C4198) *
                C44599) *
               C44497 * C44603) *
              C44449 * C633 +
          (((C30525 + C30524) * C1354 -
            ((C15088 * C203 + C44593 * C208 + C15087 * C202 + C15083 * C207) *
                 C1227 +
             (C15088 * C95 + C44593 * C100 + C15087 * C94 + C15083 * C99) *
                 C1353) +
            (C30682 + C30683) * C44599) *
               C44497 * C29367 +
           ((C15087 * C4099 + C15083 * C4102 + C15088 * C4100 +
             C44593 * C4103) *
                C1354 -
            ((C30683 + C30682) * C1227 + (C30524 + C30525) * C1353) +
            (C15087 * C4196 + C15083 * C4199 + C15088 * C4197 +
             C44593 * C4200) *
                C44599) *
               C44497 * C44603) *
              C44449 * C44595)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[56] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C249 * C93 + C44497 * C250) * C637 +
             (C249 * C101 + C44497 * C255) * C633 - C273 * C638 -
             C274 * C44595) *
                C29367 +
            (C11262 + C11263 - C11248 - C11249) * C44603) *
               C15083 +
           ((C273 * C637 + C274 * C633 - C275 * C638 - C276 * C44595) * C29367 +
            (C11250 + C11251 - C11252 - C11253) * C44603) *
               C44593) *
              C1227 +
          (((C11248 - (C11263 + C11262) + C11249) * C29367 +
            (C11260 * C638 - (C14760 * C633 + C14761 * C637) +
             C11261 * C44595) *
                C44603) *
               C15083 +
           ((C11252 - (C11251 + C11250) + C11253) * C29367 +
            ((C249 * C4100 + C44497 * C4241) * C638 -
             (C11261 * C633 + C11260 * C637) +
             (C249 * C4106 + C44497 * C4244) * C44595) *
                C44603) *
               C44593) *
              C44599) *
         C44449) /
        (p * q * std::sqrt(p + q));
    d2eeyy[56] +=
        (2 * std::pow(Pi, 2.5) *
         ((((((C249 * C93 + C44497 * C250) * C151 +
              (C249 * C152 + C44497 * C316) * C44449) *
                 C29367 +
             (C11330 + C11340) * C44603) *
                C15083 +
            ((C322 + C334) * C29367 + C11333 * C44603) * C44593) *
               C633 -
           (((C1497 + C1491) * C44603 + (C335 + C325) * C29367) * C44593 +
            (C11334 * C44603 + (C334 + C322) * C29367) * C15083) *
               C44595) *
              C1227 +
          (((C11333 * C29367 + (C11335 + C11341) * C44603) * C15083 +
            ((C1491 + C1497) * C29367 +
             ((C249 * C4100 + C44497 * C4241) * C151 +
              (C249 * C4150 + C44497 * C4285) * C44449) *
                 C44603) *
                C44593) *
               C44595 -
           (((C11341 + C11335) * C44603 + C11334 * C29367) * C44593 +
            ((C14820 + C14818) * C44603 + (C11340 + C11330) * C29367) *
                C15083) *
               C633) *
              C44599)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[56] += (2 * std::pow(Pi, 2.5) *
                   (((((C249 * C93 + C44497 * C250) * C1353 +
                       (C249 * C201 + C44497 * C376) * C1227 - C11258 * C1354 -
                       C11415 * C44599) *
                          C29367 +
                      (C11258 * C1353 + C11415 * C1227 - C14761 * C1354 -
                       C14875 * C44599) *
                          C44603) *
                         C15083 +
                     ((C1552 + C1553 - C1554 - C1564) * C29367 +
                      (C11410 + C11411 - C11412 - C11417) * C44603) *
                         C44593) *
                        C44449 * C633 +
                    (((C1554 - (C1553 + C1552) + C1564) * C29367 +
                      (C11412 - (C11411 + C11410) + C11417) * C44603) *
                         C15083 +
                     ((C1559 - (C1558 + C1557) + C1565) * C29367 +
                      ((C249 * C4100 + C44497 * C4241) * C1354 -
                       (C1563 * C1227 + C1432 * C1353) +
                       (C249 * C4197 + C44497 * C4326) * C44599) *
                          C44603) *
                         C44593) *
                        C44449 * C44595)) /
                  (p * q * std::sqrt(p + q));
    d2eezx[56] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C29669 * C93 + C29367 * C437 + C29670 * C1232 + C44603 * C1616) *
                C637 +
            (C29669 * C101 + C29367 * C442 + C29670 * C1238 + C44603 * C1619) *
                C633 -
            (C29688 + C29689) * C638 - (C29690 + C29691) * C44595) *
               C15083 +
           ((C29689 + C29688) * C637 + (C29691 + C29690) * C633 -
            (C29693 + C29692) * C638 - (C29695 + C29694) * C44595) *
               C44593) *
              C44497 * C1227 +
          (((C30956 + C30957) * C638 -
            ((C29670 * C4104 + C44603 * C4368 + C29669 * C1238 +
              C29367 * C1619) *
                 C633 +
             (C29670 * C4098 + C44603 * C4365 + C29669 * C1232 +
              C29367 * C1616) *
                 C637) +
            (C30958 + C30959) * C44595) *
               C15083 +
           ((C29669 * C1230 + C29367 * C1617 + C29670 * C4100 +
             C44603 * C4367) *
                C638 -
            ((C30959 + C30958) * C633 + (C30957 + C30956) * C637) +
            (C29669 * C1236 + C29367 * C1621 + C29670 * C4106 +
             C44603 * C4370) *
                C44595) *
               C44593) *
              C44497 * C44599) *
         C44449) /
        (p * q * std::sqrt(p + q));
    d2eezy[56] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C29669 * C93 + C29367 * C437 + C29670 * C1232 + C44603 * C1616) *
                 C151 +
             (C29669 * C152 + C29367 * C503 + C29670 * C1298 + C44603 * C1688) *
                 C44449) *
                C15083 +
            ((C29689 + C29688) * C151 + (C29754 + C29755) * C44449) * C44593) *
               C44497 * C633 -
           (((C29756 + C29757) * C44449 + (C29693 + C29692) * C151) * C44593 +
            ((C29755 + C29754) * C44449 + (C29688 + C29689) * C151) * C15083) *
               C44497 * C44595) *
              C1227 +
          ((((C30956 + C30957) * C151 + (C31030 + C31031) * C44449) * C15083 +
            ((C29669 * C1230 + C29367 * C1617 + C29670 * C4100 +
              C44603 * C4367) *
                 C151 +
             (C29669 * C1296 + C29367 * C1686 + C29670 * C4150 +
              C44603 * C4411) *
                 C44449) *
                C44593) *
               C44497 * C44595 -
           (((C31031 + C31030) * C44449 + (C30957 + C30956) * C151) * C44593 +
            ((C29670 * C4148 + C44603 * C4409 + C29669 * C1298 +
              C29367 * C1688) *
                 C44449 +
             (C29670 * C4098 + C44603 * C4365 + C29669 * C1232 +
              C29367 * C1616) *
                 C151) *
                C15083) *
               C44497 * C633) *
              C44599)) /
        (p * q * std::sqrt(p + q));
    d2eezz[56] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C29669 * C93 + C29367 * C437 + C29670 * C1232 + C44603 * C1616) *
                C1353 +
            (C29669 * C201 + C29367 * C562 + C29670 * C1357 + C44603 * C1749) *
                C1227 -
            (C29670 * C4098 + C44603 * C4365 + C29669 * C1232 +
             C29367 * C1616) *
                C1354 -
            (C29670 * C4195 + C44603 * C4450 + C29669 * C1357 +
             C29367 * C1749) *
                C44599) *
               C15083 +
           ((C29689 + C29688) * C1353 + (C29816 + C29817) * C1227 -
            (C30957 + C30956) * C1354 - (C31102 + C31103) * C44599) *
               C44593) *
              C44497 * C44449 * C633 +
          (((C30956 + C30957) * C1354 -
            ((C29817 + C29816) * C1227 + (C29688 + C29689) * C1353) +
            (C31103 + C31102) * C44599) *
               C15083 +
           ((C29669 * C1230 + C29367 * C1617 + C29670 * C4100 +
             C44603 * C4367) *
                C1354 -
            ((C29818 + C29819) * C1227 + (C29693 + C29692) * C1353) +
            (C29669 * C1355 + C29367 * C1751 + C29670 * C4197 +
             C44603 * C4452) *
                C44599) *
               C44593) *
              C44497 * C44449 * C44595)) /
        (p * q * std::sqrt(p + q));
    d2eexx[57] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C15087 * C93 + C15083 * C98 + C15088 * C94 + C44593 * C99) *
                C1821 +
            (C15087 * C101 + C15083 * C108 + C15088 * C102 + C44593 * C109) *
                C1817 -
            (C15088 * C95 + C44593 * C100 + C15087 * C94 + C15083 * C99) *
                C1822 -
            (C15088 * C103 + C44593 * C110 + C15087 * C102 + C15083 * C109) *
                C44595) *
               C44497 * C29367 +
           ((C30520 + C30521) * C1821 + (C30522 + C30523) * C1817 -
            (C30524 + C30525) * C1822 - (C30526 + C30527) * C44595) *
               C44497 * C44603) *
              C44464 * C1819 +
          (((C15627 + C15626) * C1822 -
            ((C15625 + C15624) * C1817 + (C15623 + C15622) * C1821) +
            (C15629 + C15628) * C44595) *
               C44497 * C29367 +
           ((C15087 * C2690 + C15083 * C2693 + C15088 * C2691 +
             C44593 * C2694) *
                C1822 -
            ((C17966 + C17967) * C1817 + (C17968 + C17969) * C1821) +
            (C15087 * C2696 + C15083 * C2699 + C15088 * C2697 +
             C44593 * C2700) *
                C44595) *
               C44497 * C44603) *
              C44464 * C44597)) /
        (p * q * std::sqrt(p + q));
    d2eexy[57] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C15087 * C93 + C15083 * C98 + C15088 * C94 + C44593 * C99) *
                C1873 +
            (C15087 * C152 + C15083 * C157 + C15088 * C153 + C44593 * C158) *
                C1819 -
            (C15623 + C15622) * C1874 - (C15704 + C15705) * C44597) *
               C44497 * C29367 +
           ((C30520 + C30521) * C1873 + (C30602 + C30603) * C1819 -
            (C17968 + C17969) * C1874 - (C18041 + C18040) * C44597) *
               C44497 * C44603) *
              C1817 +
          (((C15627 + C15626) * C1874 -
            ((C15088 * C154 + C44593 * C159 + C15087 * C153 + C15083 * C158) *
                 C1819 +
             (C15088 * C95 + C44593 * C100 + C15087 * C94 + C15083 * C99) *
                 C1873) +
            (C15706 + C15707) * C44597) *
               C44497 * C29367 +
           ((C15087 * C2690 + C15083 * C2693 + C15088 * C2691 +
             C44593 * C2694) *
                C1874 -
            ((C30604 + C30605) * C1819 + (C30524 + C30525) * C1873) +
            (C15087 * C2752 + C15083 * C2755 + C15088 * C2753 +
             C44593 * C2756) *
                C44597) *
               C44497 * C44603) *
              C44595) *
         C44464) /
        (p * q * std::sqrt(p + q));
    d2eexz[57] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C15087 * C93 + C15083 * C98 + C15088 * C94 + C44593 * C99) *
                 C200 +
             (C15087 * C201 + C15083 * C206 + C15088 * C202 + C44593 * C207) *
                 C44464) *
                C44497 * C29367 +
            ((C30520 + C30521) * C200 + (C30681 + C30680) * C44464) * C44497 *
                C44603) *
               C1819 -
           (((C18112 + C18113) * C44464 + (C17968 + C17969) * C200) * C44497 *
                C44603 +
            ((C15783 + C15782) * C44464 + (C15623 + C15622) * C200) * C44497 *
                C29367) *
               C44597) *
              C1817 +
          ((((C15627 + C15626) * C200 + (C15784 + C15785) * C44464) * C44497 *
                C29367 +
            ((C15087 * C2690 + C15083 * C2693 + C15088 * C2691 +
              C44593 * C2694) *
                 C200 +
             (C15087 * C2808 + C15083 * C2811 + C15088 * C2809 +
              C44593 * C2812) *
                 C44464) *
                C44497 * C44603) *
               C44597 -
           (((C30683 + C30682) * C44464 + (C30524 + C30525) * C200) * C44497 *
                C44603 +
            ((C15088 * C203 + C44593 * C208 + C15087 * C202 + C15083 * C207) *
                 C44464 +
             (C15088 * C95 + C44593 * C100 + C15087 * C94 + C15083 * C99) *
                 C200) *
                C44497 * C29367) *
               C1819) *
              C44595)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[57] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C249 * C93 + C44497 * C250) * C1821 +
             (C249 * C101 + C44497 * C255) * C1817 - C273 * C1822 -
             C274 * C44595) *
                C29367 +
            (C13570 + C13571 - C13572 - C13573) * C44603) *
               C15083 +
           ((C273 * C1821 + C274 * C1817 - C275 * C1822 - C276 * C44595) *
                C29367 +
            (C13574 + C13575 - C13576 - C13577) * C44603) *
               C44593) *
              C44464 * C1819 +
          (((C840 * C1822 -
             ((C249 * C648 + C44497 * C827) * C1817 +
              (C249 * C642 + C44497 * C824) * C1821) +
             C841 * C44595) *
                C29367 +
            (C10564 * C1822 - (C12963 * C1817 + C12962 * C1821) +
             C10565 * C44595) *
                C44603) *
               C15083 +
           ((C842 * C1822 - (C841 * C1817 + C840 * C1821) + C843 * C44595) *
                C29367 +
            ((C249 * C2691 + C44497 * C2865) * C1822 -
             (C10565 * C1817 + C10564 * C1821) +
             (C249 * C2697 + C44497 * C2868) * C44595) *
                C44603) *
               C44593) *
              C44464 * C44597)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[57] += (2 * std::pow(Pi, 2.5) *
                   (((((C249 * C93 + C44497 * C250) * C1873 +
                       (C249 * C152 + C44497 * C316) * C1819 -
                       (C249 * C642 + C44497 * C824) * C1874 -
                       (C249 * C709 + C44497 * C893) * C44597) *
                          C29367 +
                      (C13032 + C13033 - C13034 - C13038) * C44603) *
                         C15083 +
                     ((C2026 + C2027 - C2028 - C2029) * C29367 +
                      (C11970 + C11971 - C11972 - C11973) * C44603) *
                         C44593) *
                        C1817 +
                    (((C2028 - (C2027 + C2026) + C2029) * C29367 +
                      (C11972 - (C11971 + C11970) + C11973) * C44603) *
                         C15083 +
                     ((C2032 - (C2031 + C2030) + C2033) * C29367 +
                      ((C249 * C2691 + C44497 * C2865) * C1874 -
                       (C1495 * C1819 + C1432 * C1873) +
                       (C249 * C2753 + C44497 * C2921) * C44597) *
                          C44603) *
                         C44593) *
                        C44595) *
                   C44464) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[57] +=
        (2 * std::pow(Pi, 2.5) *
         ((((((C249 * C93 + C44497 * C250) * C200 +
              (C249 * C201 + C44497 * C376) * C44464) *
                 C29367 +
             (C11258 * C200 + C11415 * C44464) * C44603) *
                C15083 +
            ((C382 + C394) * C29367 + (C10092 + C10093) * C44603) * C44593) *
               C1819 -
           (((C10709 + C10707) * C44603 + (C975 + C971) * C29367) * C44593 +
            ((C13107 * C44464 + C12962 * C200) * C44603 +
             ((C249 * C767 + C44497 * C963) * C44464 +
              (C249 * C642 + C44497 * C824) * C200) *
                 C29367) *
                C15083) *
               C44597) *
              C1817 +
          ((((C971 + C975) * C29367 + (C10707 + C10709) * C44603) * C15083 +
            ((C968 + C974) * C29367 +
             ((C249 * C2691 + C44497 * C2865) * C200 +
              (C249 * C2809 + C44497 * C2974) * C44464) *
                 C44603) *
                C44593) *
               C44597 -
           (((C10094 + C10095) * C44603 + (C395 + C385) * C29367) * C44593 +
            ((C10093 + C10092) * C44603 + (C394 + C382) * C29367) * C15083) *
               C1819) *
              C44595)) /
        (p * q * std::sqrt(p + q));
    d2eezx[57] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C29669 * C93 + C29367 * C437 + C29670 * C1232 + C44603 * C1616) *
                C1821 +
            (C29669 * C101 + C29367 * C442 + C29670 * C1238 + C44603 * C1619) *
                C1817 -
            (C29688 + C29689) * C1822 - (C29690 + C29691) * C44595) *
               C15083 +
           ((C29689 + C29688) * C1821 + (C29691 + C29690) * C1817 -
            (C29693 + C29692) * C1822 - (C29695 + C29694) * C44595) *
               C44593) *
              C44497 * C44464 * C1819 +
          (((C30290 + C30291) * C1822 -
            ((C29670 * C2695 + C44603 * C3028 + C29669 * C648 +
              C29367 * C1029) *
                 C1817 +
             (C29670 * C2689 + C44603 * C3025 + C29669 * C642 +
              C29367 * C1026) *
                 C1821) +
            (C30292 + C30293) * C44595) *
               C15083 +
           ((C29669 * C640 + C29367 * C1027 + C29670 * C2691 + C44603 * C3027) *
                C1822 -
            ((C30293 + C30292) * C1817 + (C30291 + C30290) * C1821) +
            (C29669 * C646 + C29367 * C1031 + C29670 * C2697 + C44603 * C3030) *
                C44595) *
               C44593) *
              C44497 * C44464 * C44597)) /
        (p * q * std::sqrt(p + q));
    d2eezy[57] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C29669 * C93 + C29367 * C437 + C29670 * C1232 + C44603 * C1616) *
                C1873 +
            (C29669 * C152 + C29367 * C503 + C29670 * C1298 + C44603 * C1688) *
                C1819 -
            (C29670 * C2689 + C44603 * C3025 + C29669 * C642 + C29367 * C1026) *
                C1874 -
            (C29670 * C2751 + C44603 * C3081 + C29669 * C709 + C29367 * C1095) *
                C44597) *
               C15083 +
           ((C29689 + C29688) * C1873 + (C29754 + C29755) * C1819 -
            (C30291 + C30290) * C1874 - (C30364 + C30365) * C44597) *
               C44593) *
              C44497 * C1817 +
          (((C30290 + C30291) * C1874 -
            ((C29755 + C29754) * C1819 + (C29688 + C29689) * C1873) +
            (C30365 + C30364) * C44597) *
               C15083 +
           ((C29669 * C640 + C29367 * C1027 + C29670 * C2691 + C44603 * C3027) *
                C1874 -
            ((C29756 + C29757) * C1819 + (C29693 + C29692) * C1873) +
            (C29669 * C707 + C29367 * C1097 + C29670 * C2753 + C44603 * C3083) *
                C44597) *
               C44593) *
              C44497 * C44595) *
         C44464) /
        (p * q * std::sqrt(p + q));
    d2eezz[57] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C29669 * C93 + C29367 * C437 + C29670 * C1232 + C44603 * C1616) *
                 C200 +
             (C29669 * C201 + C29367 * C562 + C29670 * C1357 + C44603 * C1749) *
                 C44464) *
                C15083 +
            ((C29689 + C29688) * C200 + (C29816 + C29817) * C44464) * C44593) *
               C44497 * C1819 -
           (((C30436 + C30437) * C44464 + (C30291 + C30290) * C200) * C44593 +
            ((C29670 * C2807 + C44603 * C3134 + C29669 * C767 +
              C29367 * C1165) *
                 C44464 +
             (C29670 * C2689 + C44603 * C3025 + C29669 * C642 +
              C29367 * C1026) *
                 C200) *
                C15083) *
               C44497 * C44597) *
              C1817 +
          ((((C30290 + C30291) * C200 + (C30437 + C30436) * C44464) * C15083 +
            ((C29669 * C640 + C29367 * C1027 + C29670 * C2691 +
              C44603 * C3027) *
                 C200 +
             (C29669 * C765 + C29367 * C1163 + C29670 * C2809 +
              C44603 * C3136) *
                 C44464) *
                C44593) *
               C44497 * C44597 -
           (((C29818 + C29819) * C44464 + (C29693 + C29692) * C200) * C44593 +
            ((C29817 + C29816) * C44464 + (C29688 + C29689) * C200) * C15083) *
               C44497 * C1819) *
              C44595)) /
        (p * q * std::sqrt(p + q));
    d2eexx[58] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C15087 * C93 + C15083 * C98 + C15088 * C94 + C44593 * C99) *
                C2283 +
            (C15087 * C101 + C15083 * C108 + C15088 * C102 + C44593 * C109) *
                C44407) *
               C44497 * C29367 +
           ((C30520 + C30521) * C2283 + (C30522 + C30523) * C44407) * C44497 *
               C44603) *
              C44464 * C2280 -
          (((C17966 + C17967) * C44407 + (C17968 + C17969) * C2283) * C44497 *
               C44603 +
           ((C15625 + C15624) * C44407 + (C15623 + C15622) * C2283) * C44497 *
               C29367) *
              C44464 * C2281 +
          (((C17479 + C17478) * C2283 + (C17477 + C17476) * C44407) * C44497 *
               C29367 +
           ((C15087 * C7507 + C15083 * C7509 + C15088 * C7508 +
             C44593 * C7510) *
                C2283 +
            (C15087 * C7511 + C15083 * C7513 + C15088 * C7512 +
             C44593 * C7514) *
                C44407) *
               C44497 * C44603) *
              C44464 * C2282)) /
        (p * q * std::sqrt(p + q));
    d2eexy[58] +=
        (2 * std::pow(Pi, 2.5) *
         (((C15087 * C93 + C15083 * C98 + C15088 * C94 + C44593 * C99) * C2334 +
           (C15087 * C152 + C15083 * C157 + C15088 * C153 + C44593 * C158) *
               C2280 -
           (C15623 + C15622) * C2335 - (C15704 + C15705) * C2281 +
           (C17479 + C17478) * C2336 + (C17534 + C17535) * C2282) *
              C44497 * C29367 +
          ((C30520 + C30521) * C2334 + (C30602 + C30603) * C2280 -
           (C17968 + C17969) * C2335 - (C18041 + C18040) * C2281 +
           (C15087 * C7507 + C15083 * C7509 + C15088 * C7508 + C44593 * C7510) *
               C2336 +
           (C15087 * C7593 + C15083 * C7595 + C15088 * C7594 + C44593 * C7596) *
               C2282) *
              C44497 * C44603) *
         C44407 * C44464) /
        (p * q * std::sqrt(p + q));
    d2eexz[58] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C15087 * C93 + C15083 * C98 + C15088 * C94 + C44593 * C99) * C200 +
            (C15087 * C201 + C15083 * C206 + C15088 * C202 + C44593 * C207) *
                C44464) *
               C44497 * C29367 +
           ((C30520 + C30521) * C200 + (C30681 + C30680) * C44464) * C44497 *
               C44603) *
              C2280 -
          (((C18112 + C18113) * C44464 + (C17968 + C17969) * C200) * C44497 *
               C44603 +
           ((C15783 + C15782) * C44464 + (C15623 + C15622) * C200) * C44497 *
               C29367) *
              C2281 +
          (((C17479 + C17478) * C200 + (C17591 + C17590) * C44464) * C44497 *
               C29367 +
           ((C15087 * C7507 + C15083 * C7509 + C15088 * C7508 +
             C44593 * C7510) *
                C200 +
            (C15087 * C7669 + C15083 * C7671 + C15088 * C7670 +
             C44593 * C7672) *
                C44464) *
               C44497 * C44603) *
              C2282) *
         C44407) /
        (p * q * std::sqrt(p + q));
    d2eeyx[58] += (2 * std::pow(Pi, 2.5) *
                   (((((C249 * C93 + C44497 * C250) * C2283 +
                       (C249 * C101 + C44497 * C255) * C44407) *
                          C29367 +
                      (C12952 + C12953) * C44603) *
                         C15083 +
                     ((C273 * C2283 + C274 * C44407) * C29367 +
                      (C12954 + C12955) * C44603) *
                         C44593) *
                        C44464 * C2280 -
                    (((C12961 + C12960) * C44603 +
                      (C841 * C44407 + C840 * C2283) * C29367) *
                         C44593 +
                     ((C12965 + C12964) * C44603 +
                      ((C249 * C648 + C44497 * C827) * C44407 +
                       (C249 * C642 + C44497 * C824) * C2283) *
                          C29367) *
                         C15083) *
                        C44464 * C2281 +
                    ((((C249 * C2284 + C44497 * C2425) * C2283 +
                       (C249 * C2290 + C44497 * C2428) * C44407) *
                          C29367 +
                      ((C249 * C7507 + C44497 * C7745) * C2283 +
                       (C249 * C7511 + C44497 * C7747) * C44407) *
                          C44603) *
                         C15083 +
                     (((C249 * C2285 + C44497 * C2426) * C2283 +
                       (C249 * C2291 + C44497 * C2429) * C44407) *
                          C29367 +
                      ((C249 * C7508 + C44497 * C7746) * C2283 +
                       (C249 * C7512 + C44497 * C7748) * C44407) *
                          C44603) *
                         C44593) *
                        C44464 * C2282)) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[58] += (2 * std::pow(Pi, 2.5) *
                   ((((C249 * C93 + C44497 * C250) * C2334 +
                      (C249 * C152 + C44497 * C316) * C2280 -
                      (C249 * C642 + C44497 * C824) * C2335 -
                      (C249 * C709 + C44497 * C893) * C2281 +
                      (C249 * C2284 + C44497 * C2425) * C2336 +
                      (C249 * C2337 + C44497 * C2469) * C2282) *
                         C29367 +
                     (C11258 * C2334 + C11338 * C2280 - C12962 * C2335 -
                      C13037 * C2281 + (C249 * C7507 + C44497 * C7745) * C2336 +
                      (C249 * C7593 + C44497 * C7815) * C2282) *
                         C44603) *
                        C15083 +
                    ((C273 * C2334 + C331 * C2280 - C840 * C2335 -
                      C908 * C2281 + (C249 * C2285 + C44497 * C2426) * C2336 +
                      (C249 * C2338 + C44497 * C2470) * C2282) *
                         C29367 +
                     (C1430 * C2334 + C1494 * C2280 - C10564 * C2335 -
                      C10637 * C2281 + (C249 * C7508 + C44497 * C7746) * C2336 +
                      (C249 * C7594 + C44497 * C7816) * C2282) *
                         C44603) *
                        C44593) *
                   C44407 * C44464) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[58] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C249 * C93 + C44497 * C250) * C200 +
             (C249 * C201 + C44497 * C376) * C44464) *
                C29367 +
            (C11258 * C200 + C11415 * C44464) * C44603) *
               C15083 +
           ((C382 + C394) * C29367 + (C10092 + C10093) * C44603) * C44593) *
              C2280 -
          (((C10709 + C10707) * C44603 + (C975 + C971) * C29367) * C44593 +
           ((C13107 * C44464 + C12962 * C200) * C44603 +
            ((C249 * C767 + C44497 * C963) * C44464 +
             (C249 * C642 + C44497 * C824) * C200) *
                C29367) *
               C15083) *
              C2281 +
          ((((C249 * C2284 + C44497 * C2425) * C200 +
             (C249 * C2381 + C44497 * C2510) * C44464) *
                C29367 +
            ((C249 * C7507 + C44497 * C7745) * C200 +
             (C249 * C7669 + C44497 * C7883) * C44464) *
                C44603) *
               C15083 +
           (((C249 * C2285 + C44497 * C2426) * C200 +
             (C249 * C2382 + C44497 * C2511) * C44464) *
                C29367 +
            ((C249 * C7508 + C44497 * C7746) * C200 +
             (C249 * C7670 + C44497 * C7884) * C44464) *
                C44603) *
               C44593) *
              C2282) *
         C44407) /
        (p * q * std::sqrt(p + q));
    d2eezx[58] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C29669 * C93 + C29367 * C437 + C29670 * C1232 + C44603 * C1616) *
                C2283 +
            (C29669 * C101 + C29367 * C442 + C29670 * C1238 + C44603 * C1619) *
                C44407) *
               C15083 +
           ((C29689 + C29688) * C2283 + (C29691 + C29690) * C44407) * C44593) *
              C44497 * C44464 * C2280 -
          (((C30293 + C30292) * C44407 + (C30291 + C30290) * C2283) * C44593 +
           ((C29670 * C2695 + C44603 * C3028 + C29669 * C648 + C29367 * C1029) *
                C44407 +
            (C29670 * C2689 + C44603 * C3025 + C29669 * C642 + C29367 * C1026) *
                C2283) *
               C15083) *
              C44497 * C44464 * C2281 +
          (((C29669 * C2284 + C29367 * C2551 + C29670 * C7507 +
             C44603 * C7951) *
                C2283 +
            (C29669 * C2290 + C29367 * C2554 + C29670 * C7511 +
             C44603 * C7953) *
                C44407) *
               C15083 +
           ((C29669 * C2285 + C29367 * C2552 + C29670 * C7508 +
             C44603 * C7952) *
                C2283 +
            (C29669 * C2291 + C29367 * C2555 + C29670 * C7512 +
             C44603 * C7954) *
                C44407) *
               C44593) *
              C44497 * C44464 * C2282)) /
        (p * q * std::sqrt(p + q));
    d2eezy[58] +=
        (2 * std::pow(Pi, 2.5) *
         (((C29669 * C93 + C29367 * C437 + C29670 * C1232 + C44603 * C1616) *
               C2334 +
           (C29669 * C152 + C29367 * C503 + C29670 * C1298 + C44603 * C1688) *
               C2280 -
           (C29670 * C2689 + C44603 * C3025 + C29669 * C642 + C29367 * C1026) *
               C2335 -
           (C29670 * C2751 + C44603 * C3081 + C29669 * C709 + C29367 * C1095) *
               C2281 +
           (C29669 * C2284 + C29367 * C2551 + C29670 * C7507 + C44603 * C7951) *
               C2336 +
           (C29669 * C2337 + C29367 * C2595 + C29670 * C7593 + C44603 * C8031) *
               C2282) *
              C15083 +
          ((C29689 + C29688) * C2334 + (C29754 + C29755) * C2280 -
           (C30291 + C30290) * C2335 - (C30364 + C30365) * C2281 +
           (C29669 * C2285 + C29367 * C2552 + C29670 * C7508 + C44603 * C7952) *
               C2336 +
           (C29669 * C2338 + C29367 * C2596 + C29670 * C7594 + C44603 * C8032) *
               C2282) *
              C44593) *
         C44497 * C44407 * C44464) /
        (p * q * std::sqrt(p + q));
    d2eezz[58] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C29669 * C93 + C29367 * C437 + C29670 * C1232 + C44603 * C1616) *
                C200 +
            (C29669 * C201 + C29367 * C562 + C29670 * C1357 + C44603 * C1749) *
                C44464) *
               C15083 +
           ((C29689 + C29688) * C200 + (C29816 + C29817) * C44464) * C44593) *
              C44497 * C2280 -
          (((C30436 + C30437) * C44464 + (C30291 + C30290) * C200) * C44593 +
           ((C29670 * C2807 + C44603 * C3134 + C29669 * C767 + C29367 * C1165) *
                C44464 +
            (C29670 * C2689 + C44603 * C3025 + C29669 * C642 + C29367 * C1026) *
                C200) *
               C15083) *
              C44497 * C2281 +
          (((C29669 * C2284 + C29367 * C2551 + C29670 * C7507 +
             C44603 * C7951) *
                C200 +
            (C29669 * C2381 + C29367 * C2636 + C29670 * C7669 +
             C44603 * C8102) *
                C44464) *
               C15083 +
           ((C29669 * C2285 + C29367 * C2552 + C29670 * C7508 +
             C44603 * C7952) *
                C200 +
            (C29669 * C2382 + C29367 * C2637 + C29670 * C7670 +
             C44603 * C8103) *
                C44464) *
               C44593) *
              C44497 * C2282) *
         C44407) /
        (p * q * std::sqrt(p + q));
    d2eexx[59] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C15087 * C93 + C15083 * C98 + C15088 * C94 + C44593 * C99) *
                 C2283 +
             (C15087 * C101 + C15083 * C108 + C15088 * C102 + C44593 * C109) *
                 C44407) *
                C44497 * C29367 +
            ((C30520 + C30521) * C2283 + (C30522 + C30523) * C44407) * C44497 *
                C44603) *
               C1227 -
           (((C15088 * C4105 + C44593 * C4108 + C15087 * C4104 +
              C15083 * C4107) *
                 C44407 +
             (C15088 * C4099 + C44593 * C4102 + C15087 * C4098 +
              C15083 * C4101) *
                 C2283) *
                C44497 * C44603 +
            ((C30523 + C30522) * C44407 + (C30521 + C30520) * C2283) * C44497 *
                C29367) *
               C44599) *
              C1819 +
          ((((C17969 + C17968) * C2283 + (C17967 + C17966) * C44407) * C44497 *
                C29367 +
            ((C15087 * C9357 + C15083 * C9359 + C15088 * C9358 +
              C44593 * C9360) *
                 C2283 +
             (C15087 * C9361 + C15083 * C9363 + C15088 * C9362 +
              C44593 * C9364) *
                 C44407) *
                C44497 * C44603) *
               C44599 -
           (((C17966 + C17967) * C44407 + (C17968 + C17969) * C2283) * C44497 *
                C44603 +
            ((C15625 + C15624) * C44407 + (C15623 + C15622) * C2283) * C44497 *
                C29367) *
               C1227) *
              C44597)) /
        (p * q * std::sqrt(p + q));
    d2eexy[59] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C15087 * C93 + C15083 * C98 + C15088 * C94 + C44593 * C99) *
                C1873 +
            (C15087 * C152 + C15083 * C157 + C15088 * C153 + C44593 * C158) *
                C1819 -
            (C15623 + C15622) * C1874 - (C15704 + C15705) * C44597) *
               C44497 * C29367 +
           ((C30520 + C30521) * C1873 + (C30602 + C30603) * C1819 -
            (C17968 + C17969) * C1874 - (C18041 + C18040) * C44597) *
               C44497 * C44603) *
              C44407 * C1227 +
          (((C17969 + C17968) * C1874 -
            ((C30603 + C30602) * C1819 + (C30521 + C30520) * C1873) +
            (C18040 + C18041) * C44597) *
               C44497 * C29367 +
           ((C15087 * C9357 + C15083 * C9359 + C15088 * C9358 +
             C44593 * C9360) *
                C1874 -
            ((C15088 * C4149 + C44593 * C4152 + C15087 * C4148 +
              C15083 * C4151) *
                 C1819 +
             (C15088 * C4099 + C44593 * C4102 + C15087 * C4098 +
              C15083 * C4101) *
                 C1873) +
            (C15087 * C9415 + C15083 * C9417 + C15088 * C9416 +
             C44593 * C9418) *
                C44597) *
               C44497 * C44603) *
              C44407 * C44599)) /
        (p * q * std::sqrt(p + q));
    d2eexz[59] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C15087 * C93 + C15083 * C98 + C15088 * C94 + C44593 * C99) *
                C1353 +
            (C15087 * C201 + C15083 * C206 + C15088 * C202 + C44593 * C207) *
                C1227 -
            (C30521 + C30520) * C1354 - (C30680 + C30681) * C44599) *
               C44497 * C29367 +
           ((C30520 + C30521) * C1353 + (C30681 + C30680) * C1227 -
            (C15088 * C4099 + C44593 * C4102 + C15087 * C4098 +
             C15083 * C4101) *
                C1354 -
            (C15088 * C4196 + C44593 * C4199 + C15087 * C4195 +
             C15083 * C4198) *
                C44599) *
               C44497 * C44603) *
              C1819 +
          (((C17969 + C17968) * C1354 -
            ((C15783 + C15782) * C1227 + (C15623 + C15622) * C1353) +
            (C18113 + C18112) * C44599) *
               C44497 * C29367 +
           ((C15087 * C9357 + C15083 * C9359 + C15088 * C9358 +
             C44593 * C9360) *
                C1354 -
            ((C18112 + C18113) * C1227 + (C17968 + C17969) * C1353) +
            (C15087 * C9469 + C15083 * C9471 + C15088 * C9470 +
             C44593 * C9472) *
                C44599) *
               C44497 * C44603) *
              C44597) *
         C44407) /
        (p * q * std::sqrt(p + q));
    d2eeyx[59] +=
        (2 * std::pow(Pi, 2.5) *
         ((((((C249 * C93 + C44497 * C250) * C2283 +
              (C249 * C101 + C44497 * C255) * C44407) *
                 C29367 +
             (C12952 + C12953) * C44603) *
                C15083 +
            ((C273 * C2283 + C274 * C44407) * C29367 +
             (C12954 + C12955) * C44603) *
                C44593) *
               C1227 -
           (((C14754 + C14755) * C44603 + (C12955 + C12954) * C29367) * C44593 +
            ((C14762 + C14763) * C44603 + (C12953 + C12952) * C29367) *
                C15083) *
               C44599) *
              C1819 +
          ((((C12964 + C12965) * C29367 +
             ((C249 * C9357 + C44497 * C9523) * C2283 +
              (C249 * C9361 + C44497 * C9525) * C44407) *
                 C44603) *
                C15083 +
            ((C12960 + C12961) * C29367 +
             ((C249 * C9358 + C44497 * C9524) * C2283 +
              (C249 * C9362 + C44497 * C9526) * C44407) *
                 C44603) *
                C44593) *
               C44599 -
           (((C12961 + C12960) * C44603 +
             (C841 * C44407 + C840 * C2283) * C29367) *
                C44593 +
            ((C12965 + C12964) * C44603 +
             ((C249 * C648 + C44497 * C827) * C44407 +
              (C249 * C642 + C44497 * C824) * C2283) *
                 C29367) *
                C15083) *
               C1227) *
              C44597)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[59] += (2 * std::pow(Pi, 2.5) *
                   (((((C249 * C93 + C44497 * C250) * C1873 +
                       (C249 * C152 + C44497 * C316) * C1819 -
                       (C249 * C642 + C44497 * C824) * C1874 -
                       (C249 * C709 + C44497 * C893) * C44597) *
                          C29367 +
                      (C13032 + C13033 - C13034 - C13038) * C44603) *
                         C15083 +
                     ((C2026 + C2027 - C2028 - C2029) * C29367 +
                      (C11970 + C11971 - C11972 - C11973) * C44603) *
                         C44593) *
                        C44407 * C1227 +
                    (((C13034 - (C13033 + C13032) + C13038) * C29367 +
                      ((C249 * C9357 + C44497 * C9523) * C1874 -
                       (C14819 * C1819 + C14761 * C1873) +
                       (C249 * C9415 + C44497 * C9577) * C44597) *
                          C44603) *
                         C15083 +
                     ((C11972 - (C11971 + C11970) + C11973) * C29367 +
                      ((C249 * C9358 + C44497 * C9524) * C1874 -
                       (C11339 * C1819 + C11260 * C1873) +
                       (C249 * C9416 + C44497 * C9578) * C44597) *
                          C44603) *
                         C44593) *
                        C44407 * C44599)) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[59] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C249 * C93 + C44497 * C250) * C1353 +
             (C249 * C201 + C44497 * C376) * C1227 - C11258 * C1354 -
             C11415 * C44599) *
                C29367 +
            (C11258 * C1353 + C11415 * C1227 - C14761 * C1354 -
             C14875 * C44599) *
                C44603) *
               C15083 +
           ((C1552 + C1553 - C1554 - C1564) * C29367 +
            (C11410 + C11411 - C11412 - C11417) * C44603) *
               C44593) *
              C1819 +
          (((C12962 * C1354 -
             ((C249 * C767 + C44497 * C963) * C1227 +
              (C249 * C642 + C44497 * C824) * C1353) +
             C13107 * C44599) *
                C29367 +
            ((C249 * C9357 + C44497 * C9523) * C1354 -
             (C13107 * C1227 + C12962 * C1353) +
             (C249 * C9469 + C44497 * C9629) * C44599) *
                C44603) *
               C15083 +
           ((C10564 * C1354 - (C973 * C1227 + C840 * C1353) + C10708 * C44599) *
                C29367 +
            ((C249 * C9358 + C44497 * C9524) * C1354 -
             (C10708 * C1227 + C10564 * C1353) +
             (C249 * C9470 + C44497 * C9630) * C44599) *
                C44603) *
               C44593) *
              C44597) *
         C44407) /
        (p * q * std::sqrt(p + q));
    d2eezx[59] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C29669 * C93 + C29367 * C437 + C29670 * C1232 + C44603 * C1616) *
                 C2283 +
             (C29669 * C101 + C29367 * C442 + C29670 * C1238 + C44603 * C1619) *
                 C44407) *
                C15083 +
            ((C29689 + C29688) * C2283 + (C29691 + C29690) * C44407) * C44593) *
               C44497 * C1227 -
           (((C30959 + C30958) * C44407 + (C30957 + C30956) * C2283) * C44593 +
            ((C29670 * C4104 + C44603 * C4368 + C29669 * C1238 +
              C29367 * C1619) *
                 C44407 +
             (C29670 * C4098 + C44603 * C4365 + C29669 * C1232 +
              C29367 * C1616) *
                 C2283) *
                C15083) *
               C44497 * C44599) *
              C1819 +
          ((((C29669 * C2689 + C29367 * C3025 + C29670 * C9357 +
              C44603 * C9681) *
                 C2283 +
             (C29669 * C2695 + C29367 * C3028 + C29670 * C9361 +
              C44603 * C9683) *
                 C44407) *
                C15083 +
            ((C29669 * C2690 + C29367 * C3026 + C29670 * C9358 +
              C44603 * C9682) *
                 C2283 +
             (C29669 * C2696 + C29367 * C3029 + C29670 * C9362 +
              C44603 * C9684) *
                 C44407) *
                C44593) *
               C44497 * C44599 -
           (((C30293 + C30292) * C44407 + (C30291 + C30290) * C2283) * C44593 +
            ((C29670 * C2695 + C44603 * C3028 + C29669 * C648 +
              C29367 * C1029) *
                 C44407 +
             (C29670 * C2689 + C44603 * C3025 + C29669 * C642 +
              C29367 * C1026) *
                 C2283) *
                C15083) *
               C44497 * C1227) *
              C44597)) /
        (p * q * std::sqrt(p + q));
    d2eezy[59] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C29669 * C93 + C29367 * C437 + C29670 * C1232 + C44603 * C1616) *
                C1873 +
            (C29669 * C152 + C29367 * C503 + C29670 * C1298 + C44603 * C1688) *
                C1819 -
            (C29670 * C2689 + C44603 * C3025 + C29669 * C642 + C29367 * C1026) *
                C1874 -
            (C29670 * C2751 + C44603 * C3081 + C29669 * C709 + C29367 * C1095) *
                C44597) *
               C15083 +
           ((C29689 + C29688) * C1873 + (C29754 + C29755) * C1819 -
            (C30291 + C30290) * C1874 - (C30364 + C30365) * C44597) *
               C44593) *
              C44497 * C44407 * C1227 +
          (((C29669 * C2689 + C29367 * C3025 + C29670 * C9357 +
             C44603 * C9681) *
                C1874 -
            ((C29670 * C4148 + C44603 * C4409 + C29669 * C1298 +
              C29367 * C1688) *
                 C1819 +
             (C29670 * C4098 + C44603 * C4365 + C29669 * C1232 +
              C29367 * C1616) *
                 C1873) +
            (C29669 * C2751 + C29367 * C3081 + C29670 * C9415 +
             C44603 * C9735) *
                C44597) *
               C15083 +
           ((C29669 * C2690 + C29367 * C3026 + C29670 * C9358 +
             C44603 * C9682) *
                C1874 -
            ((C31031 + C31030) * C1819 + (C30957 + C30956) * C1873) +
            (C29669 * C2752 + C29367 * C3082 + C29670 * C9416 +
             C44603 * C9736) *
                C44597) *
               C44593) *
              C44497 * C44407 * C44599)) /
        (p * q * std::sqrt(p + q));
    d2eezz[59] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C29669 * C93 + C29367 * C437 + C29670 * C1232 + C44603 * C1616) *
                C1353 +
            (C29669 * C201 + C29367 * C562 + C29670 * C1357 + C44603 * C1749) *
                C1227 -
            (C29670 * C4098 + C44603 * C4365 + C29669 * C1232 +
             C29367 * C1616) *
                C1354 -
            (C29670 * C4195 + C44603 * C4450 + C29669 * C1357 +
             C29367 * C1749) *
                C44599) *
               C15083 +
           ((C29689 + C29688) * C1353 + (C29816 + C29817) * C1227 -
            (C30957 + C30956) * C1354 - (C31102 + C31103) * C44599) *
               C44593) *
              C44497 * C1819 +
          (((C29669 * C2689 + C29367 * C3025 + C29670 * C9357 +
             C44603 * C9681) *
                C1354 -
            ((C29670 * C2807 + C44603 * C3134 + C29669 * C767 +
              C29367 * C1165) *
                 C1227 +
             (C29670 * C2689 + C44603 * C3025 + C29669 * C642 +
              C29367 * C1026) *
                 C1353) +
            (C29669 * C2807 + C29367 * C3134 + C29670 * C9469 +
             C44603 * C9787) *
                C44599) *
               C15083 +
           ((C29669 * C2690 + C29367 * C3026 + C29670 * C9358 +
             C44603 * C9682) *
                C1354 -
            ((C30436 + C30437) * C1227 + (C30291 + C30290) * C1353) +
            (C29669 * C2808 + C29367 * C3135 + C29670 * C9470 +
             C44603 * C9788) *
                C44599) *
               C44593) *
              C44497 * C44597) *
         C44407) /
        (p * q * std::sqrt(p + q));
    d2eexx[60] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C15087 * C93 + C15083 * C98 + C15088 * C94 + C44593 * C99) *
                C1821 +
            (C15087 * C101 + C15083 * C108 + C15088 * C102 + C44593 * C109) *
                C1817 -
            (C15088 * C95 + C44593 * C100 + C15087 * C94 + C15083 * C99) *
                C1822 -
            (C15088 * C103 + C44593 * C110 + C15087 * C102 + C15083 * C109) *
                C44595) *
               C44497 * C29367 +
           ((C30520 + C30521) * C1821 + (C30522 + C30523) * C1817 -
            (C30524 + C30525) * C1822 - (C30526 + C30527) * C44595) *
               C44497 * C44603) *
              C3187 +
          (((C30525 + C30524) * C1822 -
            ((C30523 + C30522) * C1817 + (C30521 + C30520) * C1821) +
            (C30527 + C30526) * C44595) *
               C44497 * C29367 +
           ((C15087 * C4099 + C15083 * C4102 + C15088 * C4100 +
             C44593 * C4103) *
                C1822 -
            ((C15088 * C4105 + C44593 * C4108 + C15087 * C4104 +
              C15083 * C4107) *
                 C1817 +
             (C15088 * C4099 + C44593 * C4102 + C15087 * C4098 +
              C15083 * C4101) *
                 C1821) +
            (C15087 * C4105 + C15083 * C4108 + C15088 * C4106 +
             C44593 * C4109) *
                C44595) *
               C44497 * C44603) *
              C44599) *
         C44449) /
        (p * q * std::sqrt(p + q));
    d2eexy[60] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C15087 * C93 + C15083 * C98 + C15088 * C94 + C44593 * C99) *
                 C151 +
             (C15087 * C152 + C15083 * C157 + C15088 * C153 + C44593 * C158) *
                 C44449) *
                C44497 * C29367 +
            ((C30520 + C30521) * C151 + (C30602 + C30603) * C44449) * C44497 *
                C44603) *
               C1817 -
           (((C30604 + C30605) * C44449 + (C30524 + C30525) * C151) * C44497 *
                C44603 +
            ((C15088 * C154 + C44593 * C159 + C15087 * C153 + C15083 * C158) *
                 C44449 +
             (C15088 * C95 + C44593 * C100 + C15087 * C94 + C15083 * C99) *
                 C151) *
                C44497 * C29367) *
               C44595) *
              C3187 +
          ((((C30525 + C30524) * C151 + (C30605 + C30604) * C44449) * C44497 *
                C29367 +
            ((C15087 * C4099 + C15083 * C4102 + C15088 * C4100 +
              C44593 * C4103) *
                 C151 +
             (C15087 * C4149 + C15083 * C4152 + C15088 * C4150 +
              C44593 * C4153) *
                 C44449) *
                C44497 * C44603) *
               C44595 -
           (((C15088 * C4149 + C44593 * C4152 + C15087 * C4148 +
              C15083 * C4151) *
                 C44449 +
             (C15088 * C4099 + C44593 * C4102 + C15087 * C4098 +
              C15083 * C4101) *
                 C151) *
                C44497 * C44603 +
            ((C30603 + C30602) * C44449 + (C30521 + C30520) * C151) * C44497 *
                C29367) *
               C1817) *
              C44599)) /
        (p * q * std::sqrt(p + q));
    d2eexz[60] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C15087 * C93 + C15083 * C98 + C15088 * C94 + C44593 * C99) *
                C3289 +
            (C15087 * C201 + C15083 * C206 + C15088 * C202 + C44593 * C207) *
                C3187 -
            (C30521 + C30520) * C3290 - (C30680 + C30681) * C44599) *
               C44497 * C29367 +
           ((C30520 + C30521) * C3289 + (C30681 + C30680) * C3187 -
            (C15088 * C4099 + C44593 * C4102 + C15087 * C4098 +
             C15083 * C4101) *
                C3290 -
            (C15088 * C4196 + C44593 * C4199 + C15087 * C4195 +
             C15083 * C4198) *
                C44599) *
               C44497 * C44603) *
              C44449 * C1817 +
          (((C30525 + C30524) * C3290 -
            ((C15088 * C203 + C44593 * C208 + C15087 * C202 + C15083 * C207) *
                 C3187 +
             (C15088 * C95 + C44593 * C100 + C15087 * C94 + C15083 * C99) *
                 C3289) +
            (C30682 + C30683) * C44599) *
               C44497 * C29367 +
           ((C15087 * C4099 + C15083 * C4102 + C15088 * C4100 +
             C44593 * C4103) *
                C3290 -
            ((C30683 + C30682) * C3187 + (C30524 + C30525) * C3289) +
            (C15087 * C4196 + C15083 * C4199 + C15088 * C4197 +
             C44593 * C4200) *
                C44599) *
               C44497 * C44603) *
              C44449 * C44595)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[60] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C249 * C93 + C44497 * C250) * C1821 +
             (C249 * C101 + C44497 * C255) * C1817 - C273 * C1822 -
             C274 * C44595) *
                C29367 +
            (C13570 + C13571 - C13572 - C13573) * C44603) *
               C15083 +
           ((C273 * C1821 + C274 * C1817 - C275 * C1822 - C276 * C44595) *
                C29367 +
            (C13574 + C13575 - C13576 - C13577) * C44603) *
               C44593) *
              C3187 +
          (((C13572 - (C13571 + C13570) + C13573) * C29367 +
            (C11260 * C1822 - (C14760 * C1817 + C14761 * C1821) +
             C11261 * C44595) *
                C44603) *
               C15083 +
           ((C13576 - (C13575 + C13574) + C13577) * C29367 +
            ((C249 * C4100 + C44497 * C4241) * C1822 -
             (C11261 * C1817 + C11260 * C1821) +
             (C249 * C4106 + C44497 * C4244) * C44595) *
                C44603) *
               C44593) *
              C44599) *
         C44449) /
        (p * q * std::sqrt(p + q));
    d2eeyy[60] +=
        (2 * std::pow(Pi, 2.5) *
         ((((((C249 * C93 + C44497 * C250) * C151 +
              (C249 * C152 + C44497 * C316) * C44449) *
                 C29367 +
             (C11330 + C11340) * C44603) *
                C15083 +
            ((C322 + C334) * C29367 + C11333 * C44603) * C44593) *
               C1817 -
           (((C1497 + C1491) * C44603 + (C335 + C325) * C29367) * C44593 +
            (C11334 * C44603 + (C334 + C322) * C29367) * C15083) *
               C44595) *
              C3187 +
          (((C11333 * C29367 + (C11335 + C11341) * C44603) * C15083 +
            ((C1491 + C1497) * C29367 +
             ((C249 * C4100 + C44497 * C4241) * C151 +
              (C249 * C4150 + C44497 * C4285) * C44449) *
                 C44603) *
                C44593) *
               C44595 -
           (((C11341 + C11335) * C44603 + C11334 * C29367) * C44593 +
            ((C14820 + C14818) * C44603 + (C11340 + C11330) * C29367) *
                C15083) *
               C1817) *
              C44599)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[60] += (2 * std::pow(Pi, 2.5) *
                   (((((C249 * C93 + C44497 * C250) * C3289 +
                       (C249 * C201 + C44497 * C376) * C3187 - C11258 * C3290 -
                       C11415 * C44599) *
                          C29367 +
                      (C11258 * C3289 + C11415 * C3187 - C14761 * C3290 -
                       C14875 * C44599) *
                          C44603) *
                         C15083 +
                     ((C3442 + C3443 - C3444 - C3445) * C29367 +
                      (C13710 + C13711 - C13712 - C13713) * C44603) *
                         C44593) *
                        C44449 * C1817 +
                    (((C3444 - (C3443 + C3442) + C3445) * C29367 +
                      (C13712 - (C13711 + C13710) + C13713) * C44603) *
                         C15083 +
                     ((C3448 - (C3447 + C3446) + C3449) * C29367 +
                      ((C249 * C4100 + C44497 * C4241) * C3290 -
                       (C1563 * C3187 + C1432 * C3289) +
                       (C249 * C4197 + C44497 * C4326) * C44599) *
                          C44603) *
                         C44593) *
                        C44449 * C44595)) /
                  (p * q * std::sqrt(p + q));
    d2eezx[60] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C29669 * C93 + C29367 * C437 + C29670 * C1232 + C44603 * C1616) *
                C1821 +
            (C29669 * C101 + C29367 * C442 + C29670 * C1238 + C44603 * C1619) *
                C1817 -
            (C29688 + C29689) * C1822 - (C29690 + C29691) * C44595) *
               C15083 +
           ((C29689 + C29688) * C1821 + (C29691 + C29690) * C1817 -
            (C29693 + C29692) * C1822 - (C29695 + C29694) * C44595) *
               C44593) *
              C44497 * C3187 +
          (((C30956 + C30957) * C1822 -
            ((C29670 * C4104 + C44603 * C4368 + C29669 * C1238 +
              C29367 * C1619) *
                 C1817 +
             (C29670 * C4098 + C44603 * C4365 + C29669 * C1232 +
              C29367 * C1616) *
                 C1821) +
            (C30958 + C30959) * C44595) *
               C15083 +
           ((C29669 * C1230 + C29367 * C1617 + C29670 * C4100 +
             C44603 * C4367) *
                C1822 -
            ((C30959 + C30958) * C1817 + (C30957 + C30956) * C1821) +
            (C29669 * C1236 + C29367 * C1621 + C29670 * C4106 +
             C44603 * C4370) *
                C44595) *
               C44593) *
              C44497 * C44599) *
         C44449) /
        (p * q * std::sqrt(p + q));
    d2eezy[60] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C29669 * C93 + C29367 * C437 + C29670 * C1232 + C44603 * C1616) *
                 C151 +
             (C29669 * C152 + C29367 * C503 + C29670 * C1298 + C44603 * C1688) *
                 C44449) *
                C15083 +
            ((C29689 + C29688) * C151 + (C29754 + C29755) * C44449) * C44593) *
               C44497 * C1817 -
           (((C29756 + C29757) * C44449 + (C29693 + C29692) * C151) * C44593 +
            ((C29755 + C29754) * C44449 + (C29688 + C29689) * C151) * C15083) *
               C44497 * C44595) *
              C3187 +
          ((((C30956 + C30957) * C151 + (C31030 + C31031) * C44449) * C15083 +
            ((C29669 * C1230 + C29367 * C1617 + C29670 * C4100 +
              C44603 * C4367) *
                 C151 +
             (C29669 * C1296 + C29367 * C1686 + C29670 * C4150 +
              C44603 * C4411) *
                 C44449) *
                C44593) *
               C44497 * C44595 -
           (((C31031 + C31030) * C44449 + (C30957 + C30956) * C151) * C44593 +
            ((C29670 * C4148 + C44603 * C4409 + C29669 * C1298 +
              C29367 * C1688) *
                 C44449 +
             (C29670 * C4098 + C44603 * C4365 + C29669 * C1232 +
              C29367 * C1616) *
                 C151) *
                C15083) *
               C44497 * C1817) *
              C44599)) /
        (p * q * std::sqrt(p + q));
    d2eezz[60] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C29669 * C93 + C29367 * C437 + C29670 * C1232 + C44603 * C1616) *
                C3289 +
            (C29669 * C201 + C29367 * C562 + C29670 * C1357 + C44603 * C1749) *
                C3187 -
            (C29670 * C4098 + C44603 * C4365 + C29669 * C1232 +
             C29367 * C1616) *
                C3290 -
            (C29670 * C4195 + C44603 * C4450 + C29669 * C1357 +
             C29367 * C1749) *
                C44599) *
               C15083 +
           ((C29689 + C29688) * C3289 + (C29816 + C29817) * C3187 -
            (C30957 + C30956) * C3290 - (C31102 + C31103) * C44599) *
               C44593) *
              C44497 * C44449 * C1817 +
          (((C30956 + C30957) * C3290 -
            ((C29817 + C29816) * C3187 + (C29688 + C29689) * C3289) +
            (C31103 + C31102) * C44599) *
               C15083 +
           ((C29669 * C1230 + C29367 * C1617 + C29670 * C4100 +
             C44603 * C4367) *
                C3290 -
            ((C29818 + C29819) * C3187 + (C29693 + C29692) * C3289) +
            (C29669 * C1355 + C29367 * C1751 + C29670 * C4197 +
             C44603 * C4452) *
                C44599) *
               C44593) *
              C44497 * C44449 * C44595)) /
        (p * q * std::sqrt(p + q));
    d2eexx[61] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C15087 * C93 + C15083 * C98 + C15088 * C94 + C44593 * C99) *
                 C2283 +
             (C15087 * C101 + C15083 * C108 + C15088 * C102 + C44593 * C109) *
                 C44407) *
                C44497 * C29367 +
            ((C30520 + C30521) * C2283 + (C30522 + C30523) * C44407) * C44497 *
                C44603) *
               C3187 -
           (((C15088 * C4105 + C44593 * C4108 + C15087 * C4104 +
              C15083 * C4107) *
                 C44407 +
             (C15088 * C4099 + C44593 * C4102 + C15087 * C4098 +
              C15083 * C4101) *
                 C2283) *
                C44497 * C44603 +
            ((C30523 + C30522) * C44407 + (C30521 + C30520) * C2283) * C44497 *
                C29367) *
               C44599) *
              C635 +
          ((((C17969 + C17968) * C2283 + (C17967 + C17966) * C44407) * C44497 *
                C29367 +
            ((C15087 * C9357 + C15083 * C9359 + C15088 * C9358 +
              C44593 * C9360) *
                 C2283 +
             (C15087 * C9361 + C15083 * C9363 + C15088 * C9362 +
              C44593 * C9364) *
                 C44407) *
                C44497 * C44603) *
               C44599 -
           (((C17966 + C17967) * C44407 + (C17968 + C17969) * C2283) * C44497 *
                C44603 +
            ((C15625 + C15624) * C44407 + (C15623 + C15622) * C2283) * C44497 *
                C29367) *
               C3187) *
              C44597)) /
        (p * q * std::sqrt(p + q));
    d2eexy[61] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C15087 * C93 + C15083 * C98 + C15088 * C94 + C44593 * C99) * C705 +
            (C15087 * C152 + C15083 * C157 + C15088 * C153 + C44593 * C158) *
                C635 -
            (C15623 + C15622) * C706 - (C15704 + C15705) * C44597) *
               C44497 * C29367 +
           ((C30520 + C30521) * C705 + (C30602 + C30603) * C635 -
            (C17968 + C17969) * C706 - (C18041 + C18040) * C44597) *
               C44497 * C44603) *
              C44407 * C3187 +
          (((C17969 + C17968) * C706 -
            ((C30603 + C30602) * C635 + (C30521 + C30520) * C705) +
            (C18040 + C18041) * C44597) *
               C44497 * C29367 +
           ((C15087 * C9357 + C15083 * C9359 + C15088 * C9358 +
             C44593 * C9360) *
                C706 -
            ((C15088 * C4149 + C44593 * C4152 + C15087 * C4148 +
              C15083 * C4151) *
                 C635 +
             (C15088 * C4099 + C44593 * C4102 + C15087 * C4098 +
              C15083 * C4101) *
                 C705) +
            (C15087 * C9415 + C15083 * C9417 + C15088 * C9416 +
             C44593 * C9418) *
                C44597) *
               C44497 * C44603) *
              C44407 * C44599)) /
        (p * q * std::sqrt(p + q));
    d2eexz[61] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C15087 * C93 + C15083 * C98 + C15088 * C94 + C44593 * C99) *
                C3289 +
            (C15087 * C201 + C15083 * C206 + C15088 * C202 + C44593 * C207) *
                C3187 -
            (C30521 + C30520) * C3290 - (C30680 + C30681) * C44599) *
               C44497 * C29367 +
           ((C30520 + C30521) * C3289 + (C30681 + C30680) * C3187 -
            (C15088 * C4099 + C44593 * C4102 + C15087 * C4098 +
             C15083 * C4101) *
                C3290 -
            (C15088 * C4196 + C44593 * C4199 + C15087 * C4195 +
             C15083 * C4198) *
                C44599) *
               C44497 * C44603) *
              C635 +
          (((C17969 + C17968) * C3290 -
            ((C15783 + C15782) * C3187 + (C15623 + C15622) * C3289) +
            (C18113 + C18112) * C44599) *
               C44497 * C29367 +
           ((C15087 * C9357 + C15083 * C9359 + C15088 * C9358 +
             C44593 * C9360) *
                C3290 -
            ((C18112 + C18113) * C3187 + (C17968 + C17969) * C3289) +
            (C15087 * C9469 + C15083 * C9471 + C15088 * C9470 +
             C44593 * C9472) *
                C44599) *
               C44497 * C44603) *
              C44597) *
         C44407) /
        (p * q * std::sqrt(p + q));
    d2eeyx[61] +=
        (2 * std::pow(Pi, 2.5) *
         ((((((C249 * C93 + C44497 * C250) * C2283 +
              (C249 * C101 + C44497 * C255) * C44407) *
                 C29367 +
             (C12952 + C12953) * C44603) *
                C15083 +
            ((C273 * C2283 + C274 * C44407) * C29367 +
             (C12954 + C12955) * C44603) *
                C44593) *
               C3187 -
           (((C14754 + C14755) * C44603 + (C12955 + C12954) * C29367) * C44593 +
            ((C14762 + C14763) * C44603 + (C12953 + C12952) * C29367) *
                C15083) *
               C44599) *
              C635 +
          ((((C12964 + C12965) * C29367 +
             ((C249 * C9357 + C44497 * C9523) * C2283 +
              (C249 * C9361 + C44497 * C9525) * C44407) *
                 C44603) *
                C15083 +
            ((C12960 + C12961) * C29367 +
             ((C249 * C9358 + C44497 * C9524) * C2283 +
              (C249 * C9362 + C44497 * C9526) * C44407) *
                 C44603) *
                C44593) *
               C44599 -
           (((C12961 + C12960) * C44603 +
             (C841 * C44407 + C840 * C2283) * C29367) *
                C44593 +
            ((C12965 + C12964) * C44603 +
             ((C249 * C648 + C44497 * C827) * C44407 +
              (C249 * C642 + C44497 * C824) * C2283) *
                 C29367) *
                C15083) *
               C3187) *
              C44597)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[61] += (2 * std::pow(Pi, 2.5) *
                   (((((C249 * C93 + C44497 * C250) * C705 +
                       (C249 * C152 + C44497 * C316) * C635 -
                       (C249 * C642 + C44497 * C824) * C706 -
                       (C249 * C709 + C44497 * C893) * C44597) *
                          C29367 +
                      (C14242 + C14243 - C14244 - C14245) * C44603) *
                         C15083 +
                     ((C898 + C899 - C900 - C910) * C29367 +
                      (C10632 + C10633 - C10634 - C10638) * C44603) *
                         C44593) *
                        C44407 * C3187 +
                    (((C14244 - (C14243 + C14242) + C14245) * C29367 +
                      ((C249 * C9357 + C44497 * C9523) * C706 -
                       (C14819 * C635 + C14761 * C705) +
                       (C249 * C9415 + C44497 * C9577) * C44597) *
                          C44603) *
                         C15083 +
                     ((C10634 - (C10633 + C10632) + C10638) * C29367 +
                      ((C249 * C9358 + C44497 * C9524) * C706 -
                       (C11339 * C635 + C11260 * C705) +
                       (C249 * C9416 + C44497 * C9578) * C44597) *
                          C44603) *
                         C44593) *
                        C44407 * C44599)) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[61] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C249 * C93 + C44497 * C250) * C3289 +
             (C249 * C201 + C44497 * C376) * C3187 - C11258 * C3290 -
             C11415 * C44599) *
                C29367 +
            (C11258 * C3289 + C11415 * C3187 - C14761 * C3290 -
             C14875 * C44599) *
                C44603) *
               C15083 +
           ((C3442 + C3443 - C3444 - C3445) * C29367 +
            (C13710 + C13711 - C13712 - C13713) * C44603) *
               C44593) *
              C635 +
          (((C12962 * C3290 -
             ((C249 * C767 + C44497 * C963) * C3187 +
              (C249 * C642 + C44497 * C824) * C3289) +
             C13107 * C44599) *
                C29367 +
            ((C249 * C9357 + C44497 * C9523) * C3290 -
             (C13107 * C3187 + C12962 * C3289) +
             (C249 * C9469 + C44497 * C9629) * C44599) *
                C44603) *
               C15083 +
           ((C10564 * C3290 - (C973 * C3187 + C840 * C3289) + C10708 * C44599) *
                C29367 +
            ((C249 * C9358 + C44497 * C9524) * C3290 -
             (C10708 * C3187 + C10564 * C3289) +
             (C249 * C9470 + C44497 * C9630) * C44599) *
                C44603) *
               C44593) *
              C44597) *
         C44407) /
        (p * q * std::sqrt(p + q));
    d2eezx[61] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C29669 * C93 + C29367 * C437 + C29670 * C1232 + C44603 * C1616) *
                 C2283 +
             (C29669 * C101 + C29367 * C442 + C29670 * C1238 + C44603 * C1619) *
                 C44407) *
                C15083 +
            ((C29689 + C29688) * C2283 + (C29691 + C29690) * C44407) * C44593) *
               C44497 * C3187 -
           (((C30959 + C30958) * C44407 + (C30957 + C30956) * C2283) * C44593 +
            ((C29670 * C4104 + C44603 * C4368 + C29669 * C1238 +
              C29367 * C1619) *
                 C44407 +
             (C29670 * C4098 + C44603 * C4365 + C29669 * C1232 +
              C29367 * C1616) *
                 C2283) *
                C15083) *
               C44497 * C44599) *
              C635 +
          ((((C29669 * C2689 + C29367 * C3025 + C29670 * C9357 +
              C44603 * C9681) *
                 C2283 +
             (C29669 * C2695 + C29367 * C3028 + C29670 * C9361 +
              C44603 * C9683) *
                 C44407) *
                C15083 +
            ((C29669 * C2690 + C29367 * C3026 + C29670 * C9358 +
              C44603 * C9682) *
                 C2283 +
             (C29669 * C2696 + C29367 * C3029 + C29670 * C9362 +
              C44603 * C9684) *
                 C44407) *
                C44593) *
               C44497 * C44599 -
           (((C30293 + C30292) * C44407 + (C30291 + C30290) * C2283) * C44593 +
            ((C29670 * C2695 + C44603 * C3028 + C29669 * C648 +
              C29367 * C1029) *
                 C44407 +
             (C29670 * C2689 + C44603 * C3025 + C29669 * C642 +
              C29367 * C1026) *
                 C2283) *
                C15083) *
               C44497 * C3187) *
              C44597)) /
        (p * q * std::sqrt(p + q));
    d2eezy[61] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C29669 * C93 + C29367 * C437 + C29670 * C1232 + C44603 * C1616) *
                C705 +
            (C29669 * C152 + C29367 * C503 + C29670 * C1298 + C44603 * C1688) *
                C635 -
            (C29670 * C2689 + C44603 * C3025 + C29669 * C642 + C29367 * C1026) *
                C706 -
            (C29670 * C2751 + C44603 * C3081 + C29669 * C709 + C29367 * C1095) *
                C44597) *
               C15083 +
           ((C29689 + C29688) * C705 + (C29754 + C29755) * C635 -
            (C30291 + C30290) * C706 - (C30364 + C30365) * C44597) *
               C44593) *
              C44497 * C44407 * C3187 +
          (((C29669 * C2689 + C29367 * C3025 + C29670 * C9357 +
             C44603 * C9681) *
                C706 -
            ((C29670 * C4148 + C44603 * C4409 + C29669 * C1298 +
              C29367 * C1688) *
                 C635 +
             (C29670 * C4098 + C44603 * C4365 + C29669 * C1232 +
              C29367 * C1616) *
                 C705) +
            (C29669 * C2751 + C29367 * C3081 + C29670 * C9415 +
             C44603 * C9735) *
                C44597) *
               C15083 +
           ((C29669 * C2690 + C29367 * C3026 + C29670 * C9358 +
             C44603 * C9682) *
                C706 -
            ((C31031 + C31030) * C635 + (C30957 + C30956) * C705) +
            (C29669 * C2752 + C29367 * C3082 + C29670 * C9416 +
             C44603 * C9736) *
                C44597) *
               C44593) *
              C44497 * C44407 * C44599)) /
        (p * q * std::sqrt(p + q));
    d2eezz[61] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C29669 * C93 + C29367 * C437 + C29670 * C1232 + C44603 * C1616) *
                C3289 +
            (C29669 * C201 + C29367 * C562 + C29670 * C1357 + C44603 * C1749) *
                C3187 -
            (C29670 * C4098 + C44603 * C4365 + C29669 * C1232 +
             C29367 * C1616) *
                C3290 -
            (C29670 * C4195 + C44603 * C4450 + C29669 * C1357 +
             C29367 * C1749) *
                C44599) *
               C15083 +
           ((C29689 + C29688) * C3289 + (C29816 + C29817) * C3187 -
            (C30957 + C30956) * C3290 - (C31102 + C31103) * C44599) *
               C44593) *
              C44497 * C635 +
          (((C29669 * C2689 + C29367 * C3025 + C29670 * C9357 +
             C44603 * C9681) *
                C3290 -
            ((C29670 * C2807 + C44603 * C3134 + C29669 * C767 +
              C29367 * C1165) *
                 C3187 +
             (C29670 * C2689 + C44603 * C3025 + C29669 * C642 +
              C29367 * C1026) *
                 C3289) +
            (C29669 * C2807 + C29367 * C3134 + C29670 * C9469 +
             C44603 * C9787) *
                C44599) *
               C15083 +
           ((C29669 * C2690 + C29367 * C3026 + C29670 * C9358 +
             C44603 * C9682) *
                C3290 -
            ((C30436 + C30437) * C3187 + (C30291 + C30290) * C3289) +
            (C29669 * C2808 + C29367 * C3135 + C29670 * C9470 +
             C44603 * C9788) *
                C44599) *
               C44593) *
              C44497 * C44597) *
         C44407) /
        (p * q * std::sqrt(p + q));
    d2eexx[62] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C15087 * C93 + C15083 * C98 + C15088 * C94 + C44593 * C99) *
                C2283 +
            (C15087 * C101 + C15083 * C108 + C15088 * C102 + C44593 * C109) *
                C44407) *
               C44497 * C29367 +
           ((C30520 + C30521) * C2283 + (C30522 + C30523) * C44407) * C44497 *
               C44603) *
              C4095 -
          (((C33988 + C33989) * C44407 + (C33990 + C33991) * C2283) * C44497 *
               C44603 +
           ((C30523 + C30522) * C44407 + (C30521 + C30520) * C2283) * C44497 *
               C29367) *
              C4096 +
          (((C33991 + C33990) * C2283 + (C33989 + C33988) * C44407) * C44497 *
               C29367 +
           ((C15087 * C14559 + C15083 * C14561 + C15088 * C14560 +
             C44593 * C14562) *
                C2283 +
            (C15087 * C14563 + C15083 * C14565 + C15088 * C14564 +
             C44593 * C14566) *
                C44407) *
               C44497 * C44603) *
              C4097) *
         C44449) /
        (p * q * std::sqrt(p + q));
    d2eexy[62] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C15087 * C93 + C15083 * C98 + C15088 * C94 + C44593 * C99) * C151 +
            (C15087 * C152 + C15083 * C157 + C15088 * C153 + C44593 * C158) *
                C44449) *
               C44497 * C29367 +
           ((C30520 + C30521) * C151 + (C30602 + C30603) * C44449) * C44497 *
               C44603) *
              C44407 * C4095 -
          (((C34046 + C34047) * C44449 + (C33990 + C33991) * C151) * C44497 *
               C44603 +
           ((C30603 + C30602) * C44449 + (C30521 + C30520) * C151) * C44497 *
               C29367) *
              C44407 * C4096 +
          (((C33991 + C33990) * C151 + (C34047 + C34046) * C44449) * C44497 *
               C29367 +
           ((C15087 * C14559 + C15083 * C14561 + C15088 * C14560 +
             C44593 * C14562) *
                C151 +
            (C15087 * C14629 + C15083 * C14631 + C15088 * C14630 +
             C44593 * C14632) *
                C44449) *
               C44497 * C44603) *
              C44407 * C4097)) /
        (p * q * std::sqrt(p + q));
    d2eexz[62] +=
        (2 * std::pow(Pi, 2.5) *
         (((C15087 * C93 + C15083 * C98 + C15088 * C94 + C44593 * C99) * C4192 +
           (C15087 * C201 + C15083 * C206 + C15088 * C202 + C44593 * C207) *
               C4095 -
           (C30521 + C30520) * C4193 - (C30680 + C30681) * C4096 +
           (C33991 + C33990) * C4194 + (C34102 + C34103) * C4097) *
              C44497 * C29367 +
          ((C30520 + C30521) * C4192 + (C30681 + C30680) * C4095 -
           (C33990 + C33991) * C4193 - (C34103 + C34102) * C4096 +
           (C15087 * C14559 + C15083 * C14561 + C15088 * C14560 +
            C44593 * C14562) *
               C4194 +
           (C15087 * C14689 + C15083 * C14691 + C15088 * C14690 +
            C44593 * C14692) *
               C4097) *
              C44497 * C44603) *
         C44449 * C44407) /
        (p * q * std::sqrt(p + q));
    d2eeyx[62] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C249 * C93 + C44497 * C250) * C2283 +
             (C249 * C101 + C44497 * C255) * C44407) *
                C29367 +
            (C12952 + C12953) * C44603) *
               C15083 +
           ((C273 * C2283 + C274 * C44407) * C29367 +
            (C12954 + C12955) * C44603) *
               C44593) *
              C4095 -
          (((C14754 + C14755) * C44603 + (C12955 + C12954) * C29367) * C44593 +
           ((C14762 + C14763) * C44603 + (C12953 + C12952) * C29367) * C15083) *
              C4096 +
          (((C14763 + C14762) * C29367 +
            ((C249 * C14559 + C44497 * C14749) * C2283 +
             (C249 * C14563 + C44497 * C14751) * C44407) *
                C44603) *
               C15083 +
           ((C14755 + C14754) * C29367 +
            ((C249 * C14560 + C44497 * C14750) * C2283 +
             (C249 * C14564 + C44497 * C14752) * C44407) *
                C44603) *
               C44593) *
              C4097) *
         C44449) /
        (p * q * std::sqrt(p + q));
    d2eeyy[62] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C249 * C93 + C44497 * C250) * C151 +
             (C249 * C152 + C44497 * C316) * C44449) *
                C29367 +
            (C11330 + C11340) * C44603) *
               C15083 +
           ((C322 + C334) * C29367 + C11333 * C44603) * C44593) *
              C44407 * C4095 -
          (((C11341 + C11335) * C44603 + C11334 * C29367) * C44593 +
           ((C14820 + C14818) * C44603 + (C11340 + C11330) * C29367) * C15083) *
              C44407 * C4096 +
          (((C14818 + C14820) * C29367 +
            ((C249 * C14559 + C44497 * C14749) * C151 +
             (C249 * C14629 + C44497 * C14813) * C44449) *
                C44603) *
               C15083 +
           ((C11335 + C11341) * C29367 +
            ((C249 * C14560 + C44497 * C14750) * C151 +
             (C249 * C14630 + C44497 * C14814) * C44449) *
                C44603) *
               C44593) *
              C44407 * C4097)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[62] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C249 * C93 + C44497 * C250) * C4192 +
            (C249 * C201 + C44497 * C376) * C4095 - C11258 * C4193 -
            C11415 * C4096 + C14761 * C4194 + C14875 * C4097) *
               C29367 +
           (C11258 * C4192 + C11415 * C4095 - C14761 * C4193 - C14875 * C4096 +
            (C249 * C14559 + C44497 * C14749) * C4194 +
            (C249 * C14689 + C44497 * C14870) * C4097) *
               C44603) *
              C15083 +
          ((C273 * C4192 + C391 * C4095 - C1430 * C4193 - C1562 * C4096 +
            C11260 * C4194 + C11416 * C4097) *
               C29367 +
           (C1430 * C4192 + C1562 * C4095 - C11260 * C4193 - C11416 * C4096 +
            (C249 * C14560 + C44497 * C14750) * C4194 +
            (C249 * C14690 + C44497 * C14871) * C4097) *
               C44603) *
              C44593) *
         C44449 * C44407) /
        (p * q * std::sqrt(p + q));
    d2eezx[62] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C29669 * C93 + C29367 * C437 + C29670 * C1232 + C44603 * C1616) *
                C2283 +
            (C29669 * C101 + C29367 * C442 + C29670 * C1238 + C44603 * C1619) *
                C44407) *
               C15083 +
           ((C29689 + C29688) * C2283 + (C29691 + C29690) * C44407) * C44593) *
              C44497 * C4095 -
          (((C30959 + C30958) * C44407 + (C30957 + C30956) * C2283) * C44593 +
           ((C29670 * C4104 + C44603 * C4368 + C29669 * C1238 +
             C29367 * C1619) *
                C44407 +
            (C29670 * C4098 + C44603 * C4365 + C29669 * C1232 +
             C29367 * C1616) *
                C2283) *
               C15083) *
              C44497 * C4096 +
          (((C29669 * C4098 + C29367 * C4365 + C29670 * C14559 +
             C44603 * C14925) *
                C2283 +
            (C29669 * C4104 + C29367 * C4368 + C29670 * C14563 +
             C44603 * C14927) *
                C44407) *
               C15083 +
           ((C29669 * C4099 + C29367 * C4366 + C29670 * C14560 +
             C44603 * C14926) *
                C2283 +
            (C29669 * C4105 + C29367 * C4369 + C29670 * C14564 +
             C44603 * C14928) *
                C44407) *
               C44593) *
              C44497 * C4097) *
         C44449) /
        (p * q * std::sqrt(p + q));
    d2eezy[62] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C29669 * C93 + C29367 * C437 + C29670 * C1232 + C44603 * C1616) *
                C151 +
            (C29669 * C152 + C29367 * C503 + C29670 * C1298 + C44603 * C1688) *
                C44449) *
               C15083 +
           ((C29689 + C29688) * C151 + (C29754 + C29755) * C44449) * C44593) *
              C44497 * C44407 * C4095 -
          (((C31031 + C31030) * C44449 + (C30957 + C30956) * C151) * C44593 +
           ((C29670 * C4148 + C44603 * C4409 + C29669 * C1298 +
             C29367 * C1688) *
                C44449 +
            (C29670 * C4098 + C44603 * C4365 + C29669 * C1232 +
             C29367 * C1616) *
                C151) *
               C15083) *
              C44497 * C44407 * C4096 +
          (((C29669 * C4098 + C29367 * C4365 + C29670 * C14559 +
             C44603 * C14925) *
                C151 +
            (C29669 * C4148 + C29367 * C4409 + C29670 * C14629 +
             C44603 * C14979) *
                C44449) *
               C15083 +
           ((C29669 * C4099 + C29367 * C4366 + C29670 * C14560 +
             C44603 * C14926) *
                C151 +
            (C29669 * C4149 + C29367 * C4410 + C29670 * C14630 +
             C44603 * C14980) *
                C44449) *
               C44593) *
              C44497 * C44407 * C4097)) /
        (p * q * std::sqrt(p + q));
    d2eezz[62] +=
        (2 * std::pow(Pi, 2.5) *
         (((C29669 * C93 + C29367 * C437 + C29670 * C1232 + C44603 * C1616) *
               C4192 +
           (C29669 * C201 + C29367 * C562 + C29670 * C1357 + C44603 * C1749) *
               C4095 -
           (C29670 * C4098 + C44603 * C4365 + C29669 * C1232 + C29367 * C1616) *
               C4193 -
           (C29670 * C4195 + C44603 * C4450 + C29669 * C1357 + C29367 * C1749) *
               C4096 +
           (C29669 * C4098 + C29367 * C4365 + C29670 * C14559 +
            C44603 * C14925) *
               C4194 +
           (C29669 * C4195 + C29367 * C4450 + C29670 * C14689 +
            C44603 * C15031) *
               C4097) *
              C15083 +
          ((C29689 + C29688) * C4192 + (C29816 + C29817) * C4095 -
           (C30957 + C30956) * C4193 - (C31102 + C31103) * C4096 +
           (C29669 * C4099 + C29367 * C4366 + C29670 * C14560 +
            C44603 * C14926) *
               C4194 +
           (C29669 * C4196 + C29367 * C4451 + C29670 * C14690 +
            C44603 * C15032) *
               C4097) *
              C44593) *
         C44497 * C44449 * C44407) /
        (p * q * std::sqrt(p + q));
    d2eexx[63] += (2 * std::pow(Pi, 2.5) *
                   ((((C20189 * C93 + C44395 * C98) * C90 +
                      (C20189 * C101 + C44395 * C108) * C80 -
                      (C20189 * C94 + C44395 * C99) * C91 -
                      (C20189 * C102 + C44395 * C109) * C81 +
                      (C20189 * C95 + C44395 * C100) * C92 +
                      (C20189 * C103 + C44395 * C110) * C82) *
                         C4505 +
                     (C20564 * C90 + C20565 * C80 - C20566 * C91 -
                      C20567 * C81 + (C20189 * C640 + C44395 * C644) * C92 +
                      (C20189 * C646 + C44395 * C651) * C82) *
                         C44601) *
                        C29367 +
                    ((C25280 * C90 + C25281 * C80 - C25282 * C91 -
                      C25283 * C81 + (C20189 * C1230 + C44395 * C1234) * C92 +
                      (C20189 * C1236 + C44395 * C1241) * C82) *
                         C4505 +
                     (C22393 * C90 + C22392 * C80 - C24640 * C91 -
                      C24641 * C81 + (C20189 * C2691 + C44395 * C2694) * C92 +
                      (C20189 * C2697 + C44395 * C2700) * C82) *
                         C44601) *
                        C44603) *
                   C44464 * C44449) /
                  (p * q * std::sqrt(p + q));
    d2eexy[63] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C20189 * C93 + C44395 * C98) * C151 +
             (C20189 * C152 + C44395 * C157) * C44449) *
                C4505 +
            (C20564 * C151 + C20638 * C44449) * C44601) *
               C29367 +
           ((C25354 + C25366) * C4505 + (C25357 + C25358) * C44601) * C44603) *
              C80 -
          (((C25359 + C25360) * C44601 + (C25367 + C25363) * C4505) * C44603 +
           ((C20640 * C44449 + C20566 * C151) * C44601 +
            ((C20189 * C153 + C44395 * C158) * C44449 +
             (C20189 * C94 + C44395 * C99) * C151) *
                C4505) *
               C29367) *
              C81 +
          ((((C20189 * C95 + C44395 * C100) * C151 +
             (C20189 * C154 + C44395 * C159) * C44449) *
                C4505 +
            ((C20189 * C640 + C44395 * C644) * C151 +
             (C20189 * C707 + C44395 * C711) * C44449) *
                C44601) *
               C29367 +
           (((C20189 * C1230 + C44395 * C1234) * C151 +
             (C20189 * C1296 + C44395 * C1300) * C44449) *
                C4505 +
            ((C20189 * C2691 + C44395 * C2694) * C151 +
             (C20189 * C2753 + C44395 * C2756) * C44449) *
                C44601) *
               C44603) *
              C82) *
         C44464) /
        (p * q * std::sqrt(p + q));
    d2eexz[63] += (2 * std::pow(Pi, 2.5) *
                   (((((C20189 * C93 + C44395 * C98) * C200 +
                       (C20189 * C201 + C44395 * C206) * C44464) *
                          C4505 +
                      (C20692 + C20708) * C44601) *
                         C29367 +
                     ((C25280 * C200 + C25438 * C44464) * C4505 +
                      (C24779 + C24780) * C44601) *
                         C44603) *
                        C44449 * C80 -
                    (((C24785 + C24781) * C44601 +
                      (C25439 * C44464 + C25282 * C200) * C4505) *
                         C44603 +
                     ((C20710 + C20698) * C44601 +
                      ((C20189 * C202 + C44395 * C207) * C44464 +
                       (C20189 * C94 + C44395 * C99) * C200) *
                          C4505) *
                         C29367) *
                        C44449 * C81 +
                    ((((C20189 * C95 + C44395 * C100) * C200 +
                       (C20189 * C203 + C44395 * C208) * C44464) *
                          C4505 +
                      ((C20189 * C640 + C44395 * C644) * C200 +
                       (C20189 * C765 + C44395 * C769) * C44464) *
                          C44601) *
                         C29367 +
                     (((C20189 * C1230 + C44395 * C1234) * C200 +
                       (C20189 * C1355 + C44395 * C1359) * C44464) *
                          C4505 +
                      ((C20189 * C2691 + C44395 * C2694) * C200 +
                       (C20189 * C2809 + C44395 * C2812) * C44464) *
                          C44601) *
                         C44603) *
                        C44449 * C82)) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[63] +=
        (2 * std::pow(Pi, 2.5) *
         (((C4659 * C93 + C4505 * C250 + C4660 * C642 + C44601 * C824) * C90 +
           (C4659 * C101 + C4505 * C255 + C4660 * C648 + C44601 * C827) * C80 -
           (C4678 + C4679) * C91 - (C4680 + C4681) * C81 +
           (C4682 + C4683) * C92 + (C4684 + C4685) * C82) *
              C29367 +
          ((C4659 * C1232 + C4505 * C1414 + C4660 * C2689 + C44601 * C2863) *
               C90 +
           (C4659 * C1238 + C4505 * C1417 + C4660 * C2695 + C44601 * C2866) *
               C80 -
           (C5945 + C5944) * C91 - (C5947 + C5946) * C81 +
           (C4659 * C1230 + C4505 * C1415 + C4660 * C2691 + C44601 * C2865) *
               C92 +
           (C4659 * C1236 + C4505 * C1419 + C4660 * C2697 + C44601 * C2868) *
               C82) *
              C44603) *
         C44395 * C44464 * C44449) /
        (p * q * std::sqrt(p + q));
    d2eeyy[63] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4659 * C93 + C4505 * C250 + C4660 * C642 + C44601 * C824) * C151 +
            (C4659 * C152 + C4505 * C316 + C4660 * C709 + C44601 * C893) *
                C44449) *
               C29367 +
           ((C4659 * C1232 + C4505 * C1414 + C4660 * C2689 + C44601 * C2863) *
                C151 +
            (C4659 * C1298 + C4505 * C1486 + C4660 * C2751 + C44601 * C2919) *
                C44449) *
               C44603) *
              C44395 * C80 -
          (((C6019 + C6018) * C44449 + (C5945 + C5944) * C151) * C44603 +
           ((C4745 + C4744) * C44449 + (C4678 + C4679) * C151) * C29367) *
              C44395 * C81 +
          (((C4682 + C4683) * C151 + (C4747 + C4746) * C44449) * C29367 +
           ((C4659 * C1230 + C4505 * C1415 + C4660 * C2691 + C44601 * C2865) *
                C151 +
            (C4659 * C1296 + C4505 * C1484 + C4660 * C2753 + C44601 * C2921) *
                C44449) *
               C44603) *
              C44395 * C82) *
         C44464) /
        (p * q * std::sqrt(p + q));
    d2eeyz[63] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4659 * C93 + C4505 * C250 + C4660 * C642 + C44601 * C824) * C200 +
            (C4659 * C201 + C4505 * C376 + C4660 * C767 + C44601 * C963) *
                C44464) *
               C29367 +
           ((C4659 * C1232 + C4505 * C1414 + C4660 * C2689 + C44601 * C2863) *
                C200 +
            (C4659 * C1357 + C4505 * C1547 + C4660 * C2807 + C44601 * C2972) *
                C44464) *
               C44603) *
              C44395 * C44449 * C80 -
          (((C6090 + C6091) * C44464 + (C5945 + C5944) * C200) * C44603 +
           ((C4807 + C4806) * C44464 + (C4678 + C4679) * C200) * C29367) *
              C44395 * C44449 * C81 +
          (((C4682 + C4683) * C200 + (C4809 + C4808) * C44464) * C29367 +
           ((C4659 * C1230 + C4505 * C1415 + C4660 * C2691 + C44601 * C2865) *
                C200 +
            (C4659 * C1355 + C4505 * C1549 + C4660 * C2809 + C44601 * C2974) *
                C44464) *
               C44603) *
              C44395 * C44449 * C82)) /
        (p * q * std::sqrt(p + q));
    d2eezx[63] +=
        (2 * std::pow(Pi, 2.5) *
         (((C29669 * C93 + C29367 * C437 + C29670 * C1232 + C44603 * C1616) *
               C90 +
           (C29669 * C101 + C29367 * C442 + C29670 * C1238 + C44603 * C1619) *
               C80 -
           (C29688 + C29689) * C91 - (C29690 + C29691) * C81 +
           (C29692 + C29693) * C92 + (C29694 + C29695) * C82) *
              C44395 * C4505 +
          ((C29669 * C642 + C29367 * C1026 + C29670 * C2689 + C44603 * C3025) *
               C90 +
           (C29669 * C648 + C29367 * C1029 + C29670 * C2695 + C44603 * C3028) *
               C80 -
           (C30291 + C30290) * C91 - (C30293 + C30292) * C81 +
           (C29669 * C640 + C29367 * C1027 + C29670 * C2691 + C44603 * C3027) *
               C92 +
           (C29669 * C646 + C29367 * C1031 + C29670 * C2697 + C44603 * C3030) *
               C82) *
              C44395 * C44601) *
         C44464 * C44449) /
        (p * q * std::sqrt(p + q));
    d2eezy[63] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C29669 * C93 + C29367 * C437 + C29670 * C1232 + C44603 * C1616) *
                C151 +
            (C29669 * C152 + C29367 * C503 + C29670 * C1298 + C44603 * C1688) *
                C44449) *
               C44395 * C4505 +
           ((C29669 * C642 + C29367 * C1026 + C29670 * C2689 + C44603 * C3025) *
                C151 +
            (C29669 * C709 + C29367 * C1095 + C29670 * C2751 + C44603 * C3081) *
                C44449) *
               C44395 * C44601) *
              C80 -
          (((C30364 + C30365) * C44449 + (C30291 + C30290) * C151) * C44395 *
               C44601 +
           ((C29755 + C29754) * C44449 + (C29688 + C29689) * C151) * C44395 *
               C4505) *
              C81 +
          (((C29692 + C29693) * C151 + (C29757 + C29756) * C44449) * C44395 *
               C4505 +
           ((C29669 * C640 + C29367 * C1027 + C29670 * C2691 + C44603 * C3027) *
                C151 +
            (C29669 * C707 + C29367 * C1097 + C29670 * C2753 + C44603 * C3083) *
                C44449) *
               C44395 * C44601) *
              C82) *
         C44464) /
        (p * q * std::sqrt(p + q));
    d2eezz[63] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C29669 * C93 + C29367 * C437 + C29670 * C1232 + C44603 * C1616) *
                C200 +
            (C29669 * C201 + C29367 * C562 + C29670 * C1357 + C44603 * C1749) *
                C44464) *
               C44395 * C4505 +
           ((C29669 * C642 + C29367 * C1026 + C29670 * C2689 + C44603 * C3025) *
                C200 +
            (C29669 * C767 + C29367 * C1165 + C29670 * C2807 + C44603 * C3134) *
                C44464) *
               C44395 * C44601) *
              C44449 * C80 -
          (((C30436 + C30437) * C44464 + (C30291 + C30290) * C200) * C44395 *
               C44601 +
           ((C29817 + C29816) * C44464 + (C29688 + C29689) * C200) * C44395 *
               C4505) *
              C44449 * C81 +
          (((C29692 + C29693) * C200 + (C29819 + C29818) * C44464) * C44395 *
               C4505 +
           ((C29669 * C640 + C29367 * C1027 + C29670 * C2691 + C44603 * C3027) *
                C200 +
            (C29669 * C765 + C29367 * C1163 + C29670 * C2809 + C44603 * C3136) *
                C44464) *
               C44395 * C44601) *
              C44449 * C82)) /
        (p * q * std::sqrt(p + q));
    d2eexx[64] += (2 * std::pow(Pi, 2.5) *
                   (((((C20189 * C93 + C44395 * C98) * C637 +
                       (C20189 * C101 + C44395 * C108) * C633 -
                       (C20189 * C94 + C44395 * C99) * C638 -
                       (C20189 * C102 + C44395 * C109) * C44595) *
                          C4505 +
                      (C20572 + C20573 - C20574 - C20575) * C44601) *
                         C29367 +
                     ((C25284 + C25285 - C25286 - C25287) * C4505 +
                      (C24634 + C24635 - C24642 - C24643) * C44601) *
                         C44603) *
                        C44464 * C635 +
                    (((C20574 - (C20573 + C20572) + C20575) * C4505 +
                      (C20578 - (C20577 + C20576) + C20579) * C44601) *
                         C29367 +
                     ((C24642 - (C24635 + C24634) + C24643) * C4505 +
                      ((C20189 * C7508 + C44395 * C7510) * C638 -
                       (C22390 * C633 + C22391 * C637) +
                       (C20189 * C7512 + C44395 * C7514) * C44595) *
                          C44601) *
                         C44603) *
                        C44464 * C44597)) /
                  (p * q * std::sqrt(p + q));
    d2eexy[64] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C20189 * C93 + C44395 * C98) * C705 +
             (C20189 * C152 + C44395 * C157) * C635 - C20564 * C706 -
             C20638 * C44597) *
                C4505 +
            (C20564 * C705 + C20638 * C635 - C20568 * C706 - C20639 * C44597) *
                C44601) *
               C29367 +
           ((C28336 + C28337 - C28338 - C28339) * C4505 +
            (C28340 + C28341 - C28342 - C28343) * C44601) *
               C44603) *
              C633 +
          (((C20566 * C706 -
             ((C20189 * C153 + C44395 * C158) * C635 +
              (C20189 * C94 + C44395 * C99) * C705) +
             C20640 * C44597) *
                C4505 +
            (C20570 * C706 - (C20640 * C635 + C20566 * C705) +
             C20641 * C44597) *
                C44601) *
               C29367 +
           ((C24640 * C706 - (C25365 * C635 + C25282 * C705) +
             C24712 * C44597) *
                C4505 +
            ((C20189 * C7508 + C44395 * C7510) * C706 -
             (C24712 * C635 + C24640 * C705) +
             (C20189 * C7594 + C44395 * C7596) * C44597) *
                C44601) *
               C44603) *
              C44595) *
         C44464) /
        (p * q * std::sqrt(p + q));
    d2eexz[64] +=
        (2 * std::pow(Pi, 2.5) *
         ((((((C20189 * C93 + C44395 * C98) * C200 +
              (C20189 * C201 + C44395 * C206) * C44464) *
                 C4505 +
             (C20692 + C20708) * C44601) *
                C29367 +
            ((C25280 * C200 + C25438 * C44464) * C4505 +
             (C24779 + C24780) * C44601) *
                C44603) *
               C635 -
           (((C26608 + C26609) * C44601 + (C24780 + C24779) * C4505) * C44603 +
            ((C20709 + C20695) * C44601 + (C20708 + C20692) * C4505) * C29367) *
               C44597) *
              C633 +
          ((((C20698 + C20710) * C4505 + (C20701 + C20711) * C44601) * C29367 +
            ((C24781 + C24785) * C4505 +
             ((C20189 * C7508 + C44395 * C7510) * C200 +
              (C20189 * C7670 + C44395 * C7672) * C44464) *
                 C44601) *
                C44603) *
               C44597 -
           (((C24785 + C24781) * C44601 +
             (C25439 * C44464 + C25282 * C200) * C4505) *
                C44603 +
            ((C20710 + C20698) * C44601 +
             ((C20189 * C202 + C44395 * C207) * C44464 +
              (C20189 * C94 + C44395 * C99) * C200) *
                 C4505) *
                C29367) *
               C635) *
              C44595)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[64] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4659 * C93 + C4505 * C250 + C4660 * C642 + C44601 * C824) * C637 +
            (C4659 * C101 + C4505 * C255 + C4660 * C648 + C44601 * C827) *
                C633 -
            (C4678 + C4679) * C638 - (C4680 + C4681) * C44595) *
               C29367 +
           ((C4659 * C1232 + C4505 * C1414 + C4660 * C2689 + C44601 * C2863) *
                C637 +
            (C4659 * C1238 + C4505 * C1417 + C4660 * C2695 + C44601 * C2866) *
                C633 -
            (C5945 + C5944) * C638 - (C5947 + C5946) * C44595) *
               C44603) *
              C44395 * C44464 * C635 +
          (((C5284 + C5285) * C638 -
            ((C4660 * C2290 + C44601 * C2428 + C4659 * C648 + C4505 * C827) *
                 C633 +
             (C4660 * C2284 + C44601 * C2425 + C4659 * C642 + C4505 * C824) *
                 C637) +
            (C5286 + C5287) * C44595) *
               C29367 +
           ((C4659 * C2690 + C4505 * C2864 + C4660 * C7508 + C44601 * C7746) *
                C638 -
            ((C4660 * C7511 + C44601 * C7747 + C4659 * C2695 + C4505 * C2866) *
                 C633 +
             (C4660 * C7507 + C44601 * C7745 + C4659 * C2689 + C4505 * C2863) *
                 C637) +
            (C4659 * C2696 + C4505 * C2867 + C4660 * C7512 + C44601 * C7748) *
                C44595) *
               C44603) *
              C44395 * C44464 * C44597)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[64] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4659 * C93 + C4505 * C250 + C4660 * C642 + C44601 * C824) * C705 +
            (C4659 * C152 + C4505 * C316 + C4660 * C709 + C44601 * C893) *
                C635 -
            (C4660 * C2284 + C44601 * C2425 + C4659 * C642 + C4505 * C824) *
                C706 -
            (C4660 * C2337 + C44601 * C2469 + C4659 * C709 + C4505 * C893) *
                C44597) *
               C29367 +
           ((C4659 * C1232 + C4505 * C1414 + C4660 * C2689 + C44601 * C2863) *
                C705 +
            (C4659 * C1298 + C4505 * C1486 + C4660 * C2751 + C44601 * C2919) *
                C635 -
            (C4660 * C7507 + C44601 * C7745 + C4659 * C2689 + C4505 * C2863) *
                C706 -
            (C4660 * C7593 + C44601 * C7815 + C4659 * C2751 + C4505 * C2919) *
                C44597) *
               C44603) *
              C44395 * C633 +
          (((C5284 + C5285) * C706 -
            ((C4745 + C4744) * C635 + (C4678 + C4679) * C705) +
            (C5359 + C5358) * C44597) *
               C29367 +
           ((C4659 * C2690 + C4505 * C2864 + C4660 * C7508 + C44601 * C7746) *
                C706 -
            ((C6019 + C6018) * C635 + (C5945 + C5944) * C705) +
            (C4659 * C2752 + C4505 * C2920 + C4660 * C7594 + C44601 * C7816) *
                C44597) *
               C44603) *
              C44395 * C44595) *
         C44464) /
        (p * q * std::sqrt(p + q));
    d2eeyz[64] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C4659 * C93 + C4505 * C250 + C4660 * C642 + C44601 * C824) *
                 C200 +
             (C4659 * C201 + C4505 * C376 + C4660 * C767 + C44601 * C963) *
                 C44464) *
                C29367 +
            ((C4659 * C1232 + C4505 * C1414 + C4660 * C2689 + C44601 * C2863) *
                 C200 +
             (C4659 * C1357 + C4505 * C1547 + C4660 * C2807 + C44601 * C2972) *
                 C44464) *
                C44603) *
               C44395 * C635 -
           (((C4660 * C7669 + C44601 * C7883 + C4659 * C2807 + C4505 * C2972) *
                 C44464 +
             (C4660 * C7507 + C44601 * C7745 + C4659 * C2689 + C4505 * C2863) *
                 C200) *
                C44603 +
            ((C4660 * C2381 + C44601 * C2510 + C4659 * C767 + C4505 * C963) *
                 C44464 +
             (C4660 * C2284 + C44601 * C2425 + C4659 * C642 + C4505 * C824) *
                 C200) *
                C29367) *
               C44395 * C44597) *
              C633 +
          ((((C5284 + C5285) * C200 + (C5431 + C5430) * C44464) * C29367 +
            ((C4659 * C2690 + C4505 * C2864 + C4660 * C7508 + C44601 * C7746) *
                 C200 +
             (C4659 * C2808 + C4505 * C2973 + C4660 * C7670 + C44601 * C7884) *
                 C44464) *
                C44603) *
               C44395 * C44597 -
           (((C6090 + C6091) * C44464 + (C5945 + C5944) * C200) * C44603 +
            ((C4807 + C4806) * C44464 + (C4678 + C4679) * C200) * C29367) *
               C44395 * C635) *
              C44595)) /
        (p * q * std::sqrt(p + q));
    d2eezx[64] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C29669 * C93 + C29367 * C437 + C29670 * C1232 + C44603 * C1616) *
                C637 +
            (C29669 * C101 + C29367 * C442 + C29670 * C1238 + C44603 * C1619) *
                C633 -
            (C29688 + C29689) * C638 - (C29690 + C29691) * C44595) *
               C44395 * C4505 +
           ((C35324 + C35325) * C637 + (C35326 + C35327) * C633 -
            (C30291 + C30290) * C638 - (C30293 + C30292) * C44595) *
               C44395 * C44601) *
              C44464 * C635 +
          (((C30290 + C30291) * C638 -
            ((C35327 + C35326) * C633 + (C35325 + C35324) * C637) +
            (C30292 + C30293) * C44595) *
               C44395 * C4505 +
           ((C29669 * C2285 + C29367 * C2552 + C29670 * C7508 +
             C44603 * C7952) *
                C638 -
            ((C29670 * C7511 + C44603 * C7953 + C29669 * C2290 +
              C29367 * C2554) *
                 C633 +
             (C29670 * C7507 + C44603 * C7951 + C29669 * C2284 +
              C29367 * C2551) *
                 C637) +
            (C29669 * C2291 + C29367 * C2555 + C29670 * C7512 +
             C44603 * C7954) *
                C44595) *
               C44395 * C44601) *
              C44464 * C44597)) /
        (p * q * std::sqrt(p + q));
    d2eezy[64] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C29669 * C93 + C29367 * C437 + C29670 * C1232 + C44603 * C1616) *
                C705 +
            (C29669 * C152 + C29367 * C503 + C29670 * C1298 + C44603 * C1688) *
                C635 -
            (C35325 + C35324) * C706 - (C35398 + C35399) * C44597) *
               C44395 * C4505 +
           ((C35324 + C35325) * C705 + (C35399 + C35398) * C635 -
            (C29670 * C7507 + C44603 * C7951 + C29669 * C2284 +
             C29367 * C2551) *
                C706 -
            (C29670 * C7593 + C44603 * C8031 + C29669 * C2337 +
             C29367 * C2595) *
                C44597) *
               C44395 * C44601) *
              C633 +
          (((C30290 + C30291) * C706 -
            ((C29755 + C29754) * C635 + (C29688 + C29689) * C705) +
            (C30365 + C30364) * C44597) *
               C44395 * C4505 +
           ((C29669 * C2285 + C29367 * C2552 + C29670 * C7508 +
             C44603 * C7952) *
                C706 -
            ((C30364 + C30365) * C635 + (C30291 + C30290) * C705) +
            (C29669 * C2338 + C29367 * C2596 + C29670 * C7594 +
             C44603 * C8032) *
                C44597) *
               C44395 * C44601) *
              C44595) *
         C44464) /
        (p * q * std::sqrt(p + q));
    d2eezz[64] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C29669 * C93 + C29367 * C437 + C29670 * C1232 + C44603 * C1616) *
                 C200 +
             (C29669 * C201 + C29367 * C562 + C29670 * C1357 + C44603 * C1749) *
                 C44464) *
                C44395 * C4505 +
            ((C35324 + C35325) * C200 + (C35470 + C35471) * C44464) * C44395 *
                C44601) *
               C635 -
           (((C29670 * C7669 + C44603 * C8102 + C29669 * C2381 +
              C29367 * C2636) *
                 C44464 +
             (C29670 * C7507 + C44603 * C7951 + C29669 * C2284 +
              C29367 * C2551) *
                 C200) *
                C44395 * C44601 +
            ((C35471 + C35470) * C44464 + (C35325 + C35324) * C200) * C44395 *
                C4505) *
               C44597) *
              C633 +
          ((((C30290 + C30291) * C200 + (C30437 + C30436) * C44464) * C44395 *
                C4505 +
            ((C29669 * C2285 + C29367 * C2552 + C29670 * C7508 +
              C44603 * C7952) *
                 C200 +
             (C29669 * C2382 + C29367 * C2637 + C29670 * C7670 +
              C44603 * C8103) *
                 C44464) *
                C44395 * C44601) *
               C44597 -
           (((C30436 + C30437) * C44464 + (C30291 + C30290) * C200) * C44395 *
                C44601 +
            ((C29817 + C29816) * C44464 + (C29688 + C29689) * C200) * C44395 *
                C4505) *
               C635) *
              C44595)) /
        (p * q * std::sqrt(p + q));
    d2eexx[65] += (2 * std::pow(Pi, 2.5) *
                   (((((C20189 * C93 + C44395 * C98) * C637 +
                       (C20189 * C101 + C44395 * C108) * C633 -
                       (C20189 * C94 + C44395 * C99) * C638 -
                       (C20189 * C102 + C44395 * C109) * C44595) *
                          C4505 +
                      (C20572 + C20573 - C20574 - C20575) * C44601) *
                         C29367 +
                     ((C25284 + C25285 - C25286 - C25287) * C4505 +
                      (C24634 + C24635 - C24642 - C24643) * C44601) *
                         C44603) *
                        C1227 +
                    (((C25286 - (C25285 + C25284) + C25287) * C4505 +
                      (C24642 - (C24635 + C24634) + C24643) * C44601) *
                         C29367 +
                     (((C20189 * C4099 + C44395 * C4102) * C638 -
                       (C28868 * C633 + C28869 * C637) +
                       (C20189 * C4105 + C44395 * C4108) * C44595) *
                          C4505 +
                      ((C20189 * C9358 + C44395 * C9360) * C638 -
                       (C27008 * C633 + C27009 * C637) +
                       (C20189 * C9362 + C44395 * C9364) * C44595) *
                          C44601) *
                         C44603) *
                        C44599) *
                   C44449) /
                  (p * q * std::sqrt(p + q));
    d2eexy[65] +=
        (2 * std::pow(Pi, 2.5) *
         ((((((C20189 * C93 + C44395 * C98) * C151 +
              (C20189 * C152 + C44395 * C157) * C44449) *
                 C4505 +
             (C20564 * C151 + C20638 * C44449) * C44601) *
                C29367 +
            ((C25354 + C25366) * C4505 + (C25357 + C25358) * C44601) * C44603) *
               C633 -
           (((C25359 + C25360) * C44601 + (C25367 + C25363) * C4505) * C44603 +
            ((C20640 * C44449 + C20566 * C151) * C44601 +
             ((C20189 * C153 + C44395 * C158) * C44449 +
              (C20189 * C94 + C44395 * C99) * C151) *
                 C4505) *
                C29367) *
               C44595) *
              C1227 +
          ((((C25363 + C25367) * C4505 + (C25360 + C25359) * C44601) * C29367 +
            (((C20189 * C4099 + C44395 * C4102) * C151 +
              (C20189 * C4149 + C44395 * C4152) * C44449) *
                 C4505 +
             ((C20189 * C9358 + C44395 * C9360) * C151 +
              (C20189 * C9416 + C44395 * C9418) * C44449) *
                 C44601) *
                C44603) *
               C44595 -
           (((C28924 + C28925) * C44601 + (C28930 + C28928) * C4505) * C44603 +
            ((C25358 + C25357) * C44601 + (C25366 + C25354) * C4505) * C29367) *
               C633) *
              C44599)) /
        (p * q * std::sqrt(p + q));
    d2eexz[65] += (2 * std::pow(Pi, 2.5) *
                   (((((C20189 * C93 + C44395 * C98) * C1353 +
                       (C20189 * C201 + C44395 * C206) * C1227 -
                       C25280 * C1354 - C25438 * C44599) *
                          C4505 +
                      (C22508 + C22509 - C22510 - C22520) * C44601) *
                         C29367 +
                     ((C25280 * C1353 + C25438 * C1227 - C28869 * C1354 -
                       C28985 * C44599) *
                          C4505 +
                      (C27155 + C27156 - C27157 - C27161) * C44601) *
                         C44603) *
                        C44449 * C633 +
                    (((C25282 * C1354 -
                       ((C20189 * C202 + C44395 * C207) * C1227 +
                        (C20189 * C94 + C44395 * C99) * C1353) +
                       C25439 * C44599) *
                          C4505 +
                      (C24640 * C1354 - (C20706 * C1227 + C20566 * C1353) +
                       C24784 * C44599) *
                          C44601) *
                         C29367 +
                     (((C20189 * C4099 + C44395 * C4102) * C1354 -
                       (C25439 * C1227 + C25282 * C1353) +
                       (C20189 * C4196 + C44395 * C4199) * C44599) *
                          C4505 +
                      ((C20189 * C9358 + C44395 * C9360) * C1354 -
                       (C24784 * C1227 + C24640 * C1353) +
                       (C20189 * C9470 + C44395 * C9472) * C44599) *
                          C44601) *
                         C44603) *
                        C44449 * C44595)) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[65] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4659 * C93 + C4505 * C250 + C4660 * C642 + C44601 * C824) * C637 +
            (C4659 * C101 + C4505 * C255 + C4660 * C648 + C44601 * C827) *
                C633 -
            (C4678 + C4679) * C638 - (C4680 + C4681) * C44595) *
               C29367 +
           ((C35744 + C35745) * C637 + (C35746 + C35747) * C633 -
            (C5945 + C5944) * C638 - (C5947 + C5946) * C44595) *
               C44603) *
              C44395 * C1227 +
          (((C5944 + C5945) * C638 -
            ((C35747 + C35746) * C633 + (C35745 + C35744) * C637) +
            (C5946 + C5947) * C44595) *
               C29367 +
           ((C4659 * C4099 + C4505 * C4240 + C4660 * C9358 + C44601 * C9524) *
                C638 -
            ((C4660 * C9361 + C44601 * C9525 + C4659 * C4104 + C4505 * C4242) *
                 C633 +
             (C4660 * C9357 + C44601 * C9523 + C4659 * C4098 + C4505 * C4239) *
                 C637) +
            (C4659 * C4105 + C4505 * C4243 + C4660 * C9362 + C44601 * C9526) *
                C44595) *
               C44603) *
              C44395 * C44599) *
         C44449) /
        (p * q * std::sqrt(p + q));
    d2eeyy[65] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C4659 * C93 + C4505 * C250 + C4660 * C642 + C44601 * C824) *
                 C151 +
             (C4659 * C152 + C4505 * C316 + C4660 * C709 + C44601 * C893) *
                 C44449) *
                C29367 +
            ((C35744 + C35745) * C151 + (C35818 + C35819) * C44449) * C44603) *
               C44395 * C633 -
           (((C6019 + C6018) * C44449 + (C5945 + C5944) * C151) * C44603 +
            ((C4745 + C4744) * C44449 + (C4678 + C4679) * C151) * C29367) *
               C44395 * C44595) *
              C1227 +
          ((((C5944 + C5945) * C151 + (C6018 + C6019) * C44449) * C29367 +
            ((C4659 * C4099 + C4505 * C4240 + C4660 * C9358 + C44601 * C9524) *
                 C151 +
             (C4659 * C4149 + C4505 * C4284 + C4660 * C9416 + C44601 * C9578) *
                 C44449) *
                C44603) *
               C44395 * C44595 -
           (((C4660 * C9415 + C44601 * C9577 + C4659 * C4148 + C4505 * C4283) *
                 C44449 +
             (C4660 * C9357 + C44601 * C9523 + C4659 * C4098 + C4505 * C4239) *
                 C151) *
                C44603 +
            ((C35819 + C35818) * C44449 + (C35745 + C35744) * C151) * C29367) *
               C44395 * C633) *
              C44599)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[65] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4659 * C93 + C4505 * C250 + C4660 * C642 + C44601 * C824) *
                C1353 +
            (C4659 * C201 + C4505 * C376 + C4660 * C767 + C44601 * C963) *
                C1227 -
            (C35745 + C35744) * C1354 - (C35890 + C35891) * C44599) *
               C29367 +
           ((C35744 + C35745) * C1353 + (C35891 + C35890) * C1227 -
            (C4660 * C9357 + C44601 * C9523 + C4659 * C4098 + C4505 * C4239) *
                C1354 -
            (C4660 * C9469 + C44601 * C9629 + C4659 * C4195 + C4505 * C4324) *
                C44599) *
               C44603) *
              C44395 * C44449 * C633 +
          (((C5944 + C5945) * C1354 -
            ((C4807 + C4806) * C1227 + (C4678 + C4679) * C1353) +
            (C6091 + C6090) * C44599) *
               C29367 +
           ((C4659 * C4099 + C4505 * C4240 + C4660 * C9358 + C44601 * C9524) *
                C1354 -
            ((C6090 + C6091) * C1227 + (C5945 + C5944) * C1353) +
            (C4659 * C4196 + C4505 * C4325 + C4660 * C9470 + C44601 * C9630) *
                C44599) *
               C44603) *
              C44395 * C44449 * C44595)) /
        (p * q * std::sqrt(p + q));
    d2eezx[65] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C29669 * C93 + C29367 * C437 + C29670 * C1232 + C44603 * C1616) *
                C637 +
            (C29669 * C101 + C29367 * C442 + C29670 * C1238 + C44603 * C1619) *
                C633 -
            (C29688 + C29689) * C638 - (C29690 + C29691) * C44595) *
               C44395 * C4505 +
           ((C35324 + C35325) * C637 + (C35326 + C35327) * C633 -
            (C30291 + C30290) * C638 - (C30293 + C30292) * C44595) *
               C44395 * C44601) *
              C1227 +
          (((C30956 + C30957) * C638 -
            ((C29670 * C4104 + C44603 * C4368 + C29669 * C1238 +
              C29367 * C1619) *
                 C633 +
             (C29670 * C4098 + C44603 * C4365 + C29669 * C1232 +
              C29367 * C1616) *
                 C637) +
            (C30958 + C30959) * C44595) *
               C44395 * C4505 +
           ((C29669 * C2690 + C29367 * C3026 + C29670 * C9358 +
             C44603 * C9682) *
                C638 -
            ((C29670 * C9361 + C44603 * C9683 + C29669 * C2695 +
              C29367 * C3028) *
                 C633 +
             (C29670 * C9357 + C44603 * C9681 + C29669 * C2689 +
              C29367 * C3025) *
                 C637) +
            (C29669 * C2696 + C29367 * C3029 + C29670 * C9362 +
             C44603 * C9684) *
                C44595) *
               C44395 * C44601) *
              C44599) *
         C44449) /
        (p * q * std::sqrt(p + q));
    d2eezy[65] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C29669 * C93 + C29367 * C437 + C29670 * C1232 + C44603 * C1616) *
                 C151 +
             (C29669 * C152 + C29367 * C503 + C29670 * C1298 + C44603 * C1688) *
                 C44449) *
                C44395 * C4505 +
            ((C35324 + C35325) * C151 + (C35399 + C35398) * C44449) * C44395 *
                C44601) *
               C633 -
           (((C30364 + C30365) * C44449 + (C30291 + C30290) * C151) * C44395 *
                C44601 +
            ((C29755 + C29754) * C44449 + (C29688 + C29689) * C151) * C44395 *
                C4505) *
               C44595) *
              C1227 +
          ((((C30956 + C30957) * C151 + (C31030 + C31031) * C44449) * C44395 *
                C4505 +
            ((C29669 * C2690 + C29367 * C3026 + C29670 * C9358 +
              C44603 * C9682) *
                 C151 +
             (C29669 * C2752 + C29367 * C3082 + C29670 * C9416 +
              C44603 * C9736) *
                 C44449) *
                C44395 * C44601) *
               C44595 -
           (((C29670 * C9415 + C44603 * C9735 + C29669 * C2751 +
              C29367 * C3081) *
                 C44449 +
             (C29670 * C9357 + C44603 * C9681 + C29669 * C2689 +
              C29367 * C3025) *
                 C151) *
                C44395 * C44601 +
            ((C29670 * C4148 + C44603 * C4409 + C29669 * C1298 +
              C29367 * C1688) *
                 C44449 +
             (C29670 * C4098 + C44603 * C4365 + C29669 * C1232 +
              C29367 * C1616) *
                 C151) *
                C44395 * C4505) *
               C633) *
              C44599)) /
        (p * q * std::sqrt(p + q));
    d2eezz[65] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C29669 * C93 + C29367 * C437 + C29670 * C1232 + C44603 * C1616) *
                C1353 +
            (C29669 * C201 + C29367 * C562 + C29670 * C1357 + C44603 * C1749) *
                C1227 -
            (C29670 * C4098 + C44603 * C4365 + C29669 * C1232 +
             C29367 * C1616) *
                C1354 -
            (C29670 * C4195 + C44603 * C4450 + C29669 * C1357 +
             C29367 * C1749) *
                C44599) *
               C44395 * C4505 +
           ((C35324 + C35325) * C1353 + (C35470 + C35471) * C1227 -
            (C29670 * C9357 + C44603 * C9681 + C29669 * C2689 +
             C29367 * C3025) *
                C1354 -
            (C29670 * C9469 + C44603 * C9787 + C29669 * C2807 +
             C29367 * C3134) *
                C44599) *
               C44395 * C44601) *
              C44449 * C633 +
          (((C30956 + C30957) * C1354 -
            ((C29817 + C29816) * C1227 + (C29688 + C29689) * C1353) +
            (C31103 + C31102) * C44599) *
               C44395 * C4505 +
           ((C29669 * C2690 + C29367 * C3026 + C29670 * C9358 +
             C44603 * C9682) *
                C1354 -
            ((C30436 + C30437) * C1227 + (C30291 + C30290) * C1353) +
            (C29669 * C2808 + C29367 * C3135 + C29670 * C9470 +
             C44603 * C9788) *
                C44599) *
               C44395 * C44601) *
              C44449 * C44595)) /
        (p * q * std::sqrt(p + q));
    d2eexx[66] += (2 * std::pow(Pi, 2.5) *
                   (((((C20189 * C93 + C44395 * C98) * C1821 +
                       (C20189 * C101 + C44395 * C108) * C1817 -
                       (C20189 * C94 + C44395 * C99) * C1822 -
                       (C20189 * C102 + C44395 * C109) * C44595) *
                          C4505 +
                      (C21516 + C21517 - C21518 - C21519) * C44601) *
                         C29367 +
                     ((C27672 + C27673 - C27674 - C27675) * C4505 +
                      (C25926 + C25927 - C25928 - C25929) * C44601) *
                         C44603) *
                        C44464 * C1819 +
                    (((C21518 - (C21517 + C21516) + C21519) * C4505 +
                      (C21522 - (C21521 + C21520) + C21523) * C44601) *
                         C29367 +
                     ((C25928 - (C25927 + C25926) + C25929) * C4505 +
                      ((C20189 * C7508 + C44395 * C7510) * C1822 -
                       (C22390 * C1817 + C22391 * C1821) +
                       (C20189 * C7512 + C44395 * C7514) * C44595) *
                          C44601) *
                         C44603) *
                        C44464 * C44597)) /
                  (p * q * std::sqrt(p + q));
    d2eexy[66] += (2 * std::pow(Pi, 2.5) *
                   (((((C20189 * C93 + C44395 * C98) * C1873 +
                       (C20189 * C152 + C44395 * C157) * C1819 -
                       C20564 * C1874 - C20638 * C44597) *
                          C4505 +
                      (C20564 * C1873 + C20638 * C1819 - C20568 * C1874 -
                       C20639 * C44597) *
                          C44601) *
                         C29367 +
                     ((C27078 + C27079 - C27080 - C27081) * C4505 +
                      (C27082 + C27083 - C27084 - C27085) * C44601) *
                         C44603) *
                        C1817 +
                    (((C20566 * C1874 -
                       ((C20189 * C153 + C44395 * C158) * C1819 +
                        (C20189 * C94 + C44395 * C99) * C1873) +
                       C20640 * C44597) *
                          C4505 +
                      (C20570 * C1874 - (C20640 * C1819 + C20566 * C1873) +
                       C20641 * C44597) *
                          C44601) *
                         C29367 +
                     ((C24640 * C1874 - (C25365 * C1819 + C25282 * C1873) +
                       C24712 * C44597) *
                          C4505 +
                      ((C20189 * C7508 + C44395 * C7510) * C1874 -
                       (C24712 * C1819 + C24640 * C1873) +
                       (C20189 * C7594 + C44395 * C7596) * C44597) *
                          C44601) *
                         C44603) *
                        C44595) *
                   C44464) /
                  (p * q * std::sqrt(p + q));
    d2eexz[66] +=
        (2 * std::pow(Pi, 2.5) *
         ((((((C20189 * C93 + C44395 * C98) * C200 +
              (C20189 * C201 + C44395 * C206) * C44464) *
                 C4505 +
             (C20692 + C20708) * C44601) *
                C29367 +
            ((C25280 * C200 + C25438 * C44464) * C4505 +
             (C24779 + C24780) * C44601) *
                C44603) *
               C1819 -
           (((C26608 + C26609) * C44601 + (C24780 + C24779) * C4505) * C44603 +
            ((C20709 + C20695) * C44601 + (C20708 + C20692) * C4505) * C29367) *
               C44597) *
              C1817 +
          ((((C20698 + C20710) * C4505 + (C20701 + C20711) * C44601) * C29367 +
            ((C24781 + C24785) * C4505 +
             ((C20189 * C7508 + C44395 * C7510) * C200 +
              (C20189 * C7670 + C44395 * C7672) * C44464) *
                 C44601) *
                C44603) *
               C44597 -
           (((C24785 + C24781) * C44601 +
             (C25439 * C44464 + C25282 * C200) * C4505) *
                C44603 +
            ((C20710 + C20698) * C44601 +
             ((C20189 * C202 + C44395 * C207) * C44464 +
              (C20189 * C94 + C44395 * C99) * C200) *
                 C4505) *
                C29367) *
               C1819) *
              C44595)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[66] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4659 * C93 + C4505 * C250 + C4660 * C642 + C44601 * C824) *
                C1821 +
            (C4659 * C101 + C4505 * C255 + C4660 * C648 + C44601 * C827) *
                C1817 -
            (C4678 + C4679) * C1822 - (C4680 + C4681) * C44595) *
               C29367 +
           ((C35744 + C35745) * C1821 + (C35746 + C35747) * C1817 -
            (C5945 + C5944) * C1822 - (C5947 + C5946) * C44595) *
               C44603) *
              C44395 * C44464 * C1819 +
          (((C5284 + C5285) * C1822 -
            ((C4660 * C2290 + C44601 * C2428 + C4659 * C648 + C4505 * C827) *
                 C1817 +
             (C4660 * C2284 + C44601 * C2425 + C4659 * C642 + C4505 * C824) *
                 C1821) +
            (C5286 + C5287) * C44595) *
               C29367 +
           ((C4659 * C2690 + C4505 * C2864 + C4660 * C7508 + C44601 * C7746) *
                C1822 -
            ((C4660 * C7511 + C44601 * C7747 + C4659 * C2695 + C4505 * C2866) *
                 C1817 +
             (C4660 * C7507 + C44601 * C7745 + C4659 * C2689 + C4505 * C2863) *
                 C1821) +
            (C4659 * C2696 + C4505 * C2867 + C4660 * C7512 + C44601 * C7748) *
                C44595) *
               C44603) *
              C44395 * C44464 * C44597)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[66] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4659 * C93 + C4505 * C250 + C4660 * C642 + C44601 * C824) *
                C1873 +
            (C4659 * C152 + C4505 * C316 + C4660 * C709 + C44601 * C893) *
                C1819 -
            (C4660 * C2284 + C44601 * C2425 + C4659 * C642 + C4505 * C824) *
                C1874 -
            (C4660 * C2337 + C44601 * C2469 + C4659 * C709 + C4505 * C893) *
                C44597) *
               C29367 +
           ((C35744 + C35745) * C1873 + (C35818 + C35819) * C1819 -
            (C4660 * C7507 + C44601 * C7745 + C4659 * C2689 + C4505 * C2863) *
                C1874 -
            (C4660 * C7593 + C44601 * C7815 + C4659 * C2751 + C4505 * C2919) *
                C44597) *
               C44603) *
              C44395 * C1817 +
          (((C5284 + C5285) * C1874 -
            ((C4745 + C4744) * C1819 + (C4678 + C4679) * C1873) +
            (C5359 + C5358) * C44597) *
               C29367 +
           ((C4659 * C2690 + C4505 * C2864 + C4660 * C7508 + C44601 * C7746) *
                C1874 -
            ((C6019 + C6018) * C1819 + (C5945 + C5944) * C1873) +
            (C4659 * C2752 + C4505 * C2920 + C4660 * C7594 + C44601 * C7816) *
                C44597) *
               C44603) *
              C44395 * C44595) *
         C44464) /
        (p * q * std::sqrt(p + q));
    d2eeyz[66] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C4659 * C93 + C4505 * C250 + C4660 * C642 + C44601 * C824) *
                 C200 +
             (C4659 * C201 + C4505 * C376 + C4660 * C767 + C44601 * C963) *
                 C44464) *
                C29367 +
            ((C35744 + C35745) * C200 + (C35891 + C35890) * C44464) * C44603) *
               C44395 * C1819 -
           (((C4660 * C7669 + C44601 * C7883 + C4659 * C2807 + C4505 * C2972) *
                 C44464 +
             (C4660 * C7507 + C44601 * C7745 + C4659 * C2689 + C4505 * C2863) *
                 C200) *
                C44603 +
            ((C4660 * C2381 + C44601 * C2510 + C4659 * C767 + C4505 * C963) *
                 C44464 +
             (C4660 * C2284 + C44601 * C2425 + C4659 * C642 + C4505 * C824) *
                 C200) *
                C29367) *
               C44395 * C44597) *
              C1817 +
          ((((C5284 + C5285) * C200 + (C5431 + C5430) * C44464) * C29367 +
            ((C4659 * C2690 + C4505 * C2864 + C4660 * C7508 + C44601 * C7746) *
                 C200 +
             (C4659 * C2808 + C4505 * C2973 + C4660 * C7670 + C44601 * C7884) *
                 C44464) *
                C44603) *
               C44395 * C44597 -
           (((C6090 + C6091) * C44464 + (C5945 + C5944) * C200) * C44603 +
            ((C4807 + C4806) * C44464 + (C4678 + C4679) * C200) * C29367) *
               C44395 * C1819) *
              C44595)) /
        (p * q * std::sqrt(p + q));
    d2eezx[66] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C29669 * C93 + C29367 * C437 + C29670 * C1232 + C44603 * C1616) *
                C1821 +
            (C29669 * C101 + C29367 * C442 + C29670 * C1238 + C44603 * C1619) *
                C1817 -
            (C29688 + C29689) * C1822 - (C29690 + C29691) * C44595) *
               C44395 * C4505 +
           ((C35324 + C35325) * C1821 + (C35326 + C35327) * C1817 -
            (C30291 + C30290) * C1822 - (C30293 + C30292) * C44595) *
               C44395 * C44601) *
              C44464 * C1819 +
          (((C30290 + C30291) * C1822 -
            ((C35327 + C35326) * C1817 + (C35325 + C35324) * C1821) +
            (C30292 + C30293) * C44595) *
               C44395 * C4505 +
           ((C29669 * C2285 + C29367 * C2552 + C29670 * C7508 +
             C44603 * C7952) *
                C1822 -
            ((C29670 * C7511 + C44603 * C7953 + C29669 * C2290 +
              C29367 * C2554) *
                 C1817 +
             (C29670 * C7507 + C44603 * C7951 + C29669 * C2284 +
              C29367 * C2551) *
                 C1821) +
            (C29669 * C2291 + C29367 * C2555 + C29670 * C7512 +
             C44603 * C7954) *
                C44595) *
               C44395 * C44601) *
              C44464 * C44597)) /
        (p * q * std::sqrt(p + q));
    d2eezy[66] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C29669 * C93 + C29367 * C437 + C29670 * C1232 + C44603 * C1616) *
                C1873 +
            (C29669 * C152 + C29367 * C503 + C29670 * C1298 + C44603 * C1688) *
                C1819 -
            (C35325 + C35324) * C1874 - (C35398 + C35399) * C44597) *
               C44395 * C4505 +
           ((C35324 + C35325) * C1873 + (C35399 + C35398) * C1819 -
            (C29670 * C7507 + C44603 * C7951 + C29669 * C2284 +
             C29367 * C2551) *
                C1874 -
            (C29670 * C7593 + C44603 * C8031 + C29669 * C2337 +
             C29367 * C2595) *
                C44597) *
               C44395 * C44601) *
              C1817 +
          (((C30290 + C30291) * C1874 -
            ((C29755 + C29754) * C1819 + (C29688 + C29689) * C1873) +
            (C30365 + C30364) * C44597) *
               C44395 * C4505 +
           ((C29669 * C2285 + C29367 * C2552 + C29670 * C7508 +
             C44603 * C7952) *
                C1874 -
            ((C30364 + C30365) * C1819 + (C30291 + C30290) * C1873) +
            (C29669 * C2338 + C29367 * C2596 + C29670 * C7594 +
             C44603 * C8032) *
                C44597) *
               C44395 * C44601) *
              C44595) *
         C44464) /
        (p * q * std::sqrt(p + q));
    d2eezz[66] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C29669 * C93 + C29367 * C437 + C29670 * C1232 + C44603 * C1616) *
                 C200 +
             (C29669 * C201 + C29367 * C562 + C29670 * C1357 + C44603 * C1749) *
                 C44464) *
                C44395 * C4505 +
            ((C35324 + C35325) * C200 + (C35470 + C35471) * C44464) * C44395 *
                C44601) *
               C1819 -
           (((C29670 * C7669 + C44603 * C8102 + C29669 * C2381 +
              C29367 * C2636) *
                 C44464 +
             (C29670 * C7507 + C44603 * C7951 + C29669 * C2284 +
              C29367 * C2551) *
                 C200) *
                C44395 * C44601 +
            ((C35471 + C35470) * C44464 + (C35325 + C35324) * C200) * C44395 *
                C4505) *
               C44597) *
              C1817 +
          ((((C30290 + C30291) * C200 + (C30437 + C30436) * C44464) * C44395 *
                C4505 +
            ((C29669 * C2285 + C29367 * C2552 + C29670 * C7508 +
              C44603 * C7952) *
                 C200 +
             (C29669 * C2382 + C29367 * C2637 + C29670 * C7670 +
              C44603 * C8103) *
                 C44464) *
                C44395 * C44601) *
               C44597 -
           (((C30436 + C30437) * C44464 + (C30291 + C30290) * C200) * C44395 *
                C44601 +
            ((C29817 + C29816) * C44464 + (C29688 + C29689) * C200) * C44395 *
                C4505) *
               C1819) *
              C44595)) /
        (p * q * std::sqrt(p + q));
    d2eexx[67] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C20189 * C93 + C44395 * C98) * C2283 +
             (C20189 * C101 + C44395 * C108) * C44407) *
                C4505 +
            (C21970 + C21971) * C44601) *
               C29367 +
           ((C27000 + C27001) * C4505 + C27002 * C44601) * C44603) *
              C44464 * C2280 -
          (((C22394 + C22395) * C44601 + C27007 * C4505) * C44603 +
           ((C21973 + C21972) * C44601 + (C21971 + C21970) * C4505) * C29367) *
              C44464 * C2281 +
          ((C21978 * C4505 + (C21982 + C21981) * C44601) * C29367 +
           ((C22395 + C22394) * C4505 +
            ((C20189 * C22377 + C44395 * C22378) * C2283 +
             (C20189 * C22379 + C44395 * C22380) * C44407) *
                C44601) *
               C44603) *
              C44464 * C2282)) /
        (p * q * std::sqrt(p + q));
    d2eexy[67] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C20189 * C93 + C44395 * C98) * C2334 +
            (C20189 * C152 + C44395 * C157) * C2280 - C20564 * C2335 -
            C20638 * C2281 + C20568 * C2336 + C20639 * C2282) *
               C4505 +
           (C20564 * C2334 + C20638 * C2280 - C20568 * C2335 - C20639 * C2281 +
            C21980 * C2336 + C22025 * C2282) *
               C44601) *
              C29367 +
          ((C25280 * C2334 + C25364 * C2280 - C22393 * C2335 - C22454 * C2281 +
            C22391 * C2336 + C22455 * C2282) *
               C4505 +
           (C22393 * C2334 + C22454 * C2280 - C22391 * C2335 - C22455 * C2281 +
            (C20189 * C22377 + C44395 * C22378) * C2336 +
            (C20189 * C22447 + C44395 * C22448) * C2282) *
               C44601) *
              C44603) *
         C44407 * C44464) /
        (p * q * std::sqrt(p + q));
    d2eexz[67] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C20189 * C93 + C44395 * C98) * C200 +
             (C20189 * C201 + C44395 * C206) * C44464) *
                C4505 +
            (C20692 + C20708) * C44601) *
               C29367 +
           ((C25280 * C200 + C25438 * C44464) * C4505 +
            (C24779 + C24780) * C44601) *
               C44603) *
              C2280 -
          (((C26608 + C26609) * C44601 + (C24780 + C24779) * C4505) * C44603 +
           ((C20709 + C20695) * C44601 + (C20708 + C20692) * C4505) * C29367) *
              C2281 +
          ((C22066 * C4505 + (C22069 + C22071) * C44601) * C29367 +
           ((C26609 + C26608) * C4505 +
            ((C20189 * C22377 + C44395 * C22378) * C200 +
             (C20189 * C22505 + C44395 * C22506) * C44464) *
                C44601) *
               C44603) *
              C2282) *
         C44407) /
        (p * q * std::sqrt(p + q));
    d2eeyx[67] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4659 * C93 + C4505 * C250 + C4660 * C642 + C44601 * C824) *
                C2283 +
            (C4659 * C101 + C4505 * C255 + C4660 * C648 + C44601 * C827) *
                C44407) *
               C29367 +
           ((C35744 + C35745) * C2283 + (C35746 + C35747) * C44407) * C44603) *
              C44395 * C44464 * C2280 -
          (((C4660 * C7511 + C44601 * C7747 + C4659 * C2695 + C4505 * C2866) *
                C44407 +
            (C4660 * C7507 + C44601 * C7745 + C4659 * C2689 + C4505 * C2863) *
                C2283) *
               C44603 +
           ((C4660 * C2290 + C44601 * C2428 + C4659 * C648 + C4505 * C827) *
                C44407 +
            (C4660 * C2284 + C44601 * C2425 + C4659 * C642 + C4505 * C824) *
                C2283) *
               C29367) *
              C44395 * C44464 * C2281 +
          (((C4659 * C2284 + C4505 * C2425 + C4660 * C6963 + C44601 * C7153) *
                C2283 +
            (C4659 * C2290 + C4505 * C2428 + C4660 * C6967 + C44601 * C7155) *
                C44407) *
               C29367 +
           ((C4659 * C7507 + C4505 * C7745 + C4660 * C22377 + C44601 * C22571) *
                C2283 +
            (C4659 * C7511 + C4505 * C7747 + C4660 * C22379 + C44601 * C22572) *
                C44407) *
               C44603) *
              C44395 * C44464 * C2282)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[67] +=
        (2 * std::pow(Pi, 2.5) *
         (((C4659 * C93 + C4505 * C250 + C4660 * C642 + C44601 * C824) * C2334 +
           (C4659 * C152 + C4505 * C316 + C4660 * C709 + C44601 * C893) *
               C2280 -
           (C4660 * C2284 + C44601 * C2425 + C4659 * C642 + C4505 * C824) *
               C2335 -
           (C4660 * C2337 + C44601 * C2469 + C4659 * C709 + C4505 * C893) *
               C2281 +
           (C4659 * C2284 + C4505 * C2425 + C4660 * C6963 + C44601 * C7153) *
               C2336 +
           (C4659 * C2337 + C4505 * C2469 + C4660 * C7033 + C44601 * C7207) *
               C2282) *
              C29367 +
          ((C35744 + C35745) * C2334 + (C35818 + C35819) * C2280 -
           (C4660 * C7507 + C44601 * C7745 + C4659 * C2689 + C4505 * C2863) *
               C2335 -
           (C4660 * C7593 + C44601 * C7815 + C4659 * C2751 + C4505 * C2919) *
               C2281 +
           (C4659 * C7507 + C4505 * C7745 + C4660 * C22377 + C44601 * C22571) *
               C2336 +
           (C4659 * C7593 + C4505 * C7815 + C4660 * C22447 + C44601 * C22623) *
               C2282) *
              C44603) *
         C44395 * C44407 * C44464) /
        (p * q * std::sqrt(p + q));
    d2eeyz[67] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4659 * C93 + C4505 * C250 + C4660 * C642 + C44601 * C824) * C200 +
            (C4659 * C201 + C4505 * C376 + C4660 * C767 + C44601 * C963) *
                C44464) *
               C29367 +
           ((C35744 + C35745) * C200 + (C35891 + C35890) * C44464) * C44603) *
              C44395 * C2280 -
          (((C4660 * C7669 + C44601 * C7883 + C4659 * C2807 + C4505 * C2972) *
                C44464 +
            (C4660 * C7507 + C44601 * C7745 + C4659 * C2689 + C4505 * C2863) *
                C200) *
               C44603 +
           ((C4660 * C2381 + C44601 * C2510 + C4659 * C767 + C4505 * C963) *
                C44464 +
            (C4660 * C2284 + C44601 * C2425 + C4659 * C642 + C4505 * C824) *
                C200) *
               C29367) *
              C44395 * C2281 +
          (((C4659 * C2284 + C4505 * C2425 + C4660 * C6963 + C44601 * C7153) *
                C200 +
            (C4659 * C2381 + C4505 * C2510 + C4660 * C7093 + C44601 * C7259) *
                C44464) *
               C29367 +
           ((C4659 * C7507 + C4505 * C7745 + C4660 * C22377 + C44601 * C22571) *
                C200 +
            (C4659 * C7669 + C4505 * C7883 + C4660 * C22505 + C44601 * C22674) *
                C44464) *
               C44603) *
              C44395 * C2282) *
         C44407) /
        (p * q * std::sqrt(p + q));
    d2eezx[67] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C29669 * C93 + C29367 * C437 + C29670 * C1232 + C44603 * C1616) *
                C2283 +
            (C29669 * C101 + C29367 * C442 + C29670 * C1238 + C44603 * C1619) *
                C44407) *
               C44395 * C4505 +
           ((C35324 + C35325) * C2283 + (C35326 + C35327) * C44407) * C44395 *
               C44601) *
              C44464 * C2280 -
          (((C37042 + C37043) * C44407 + (C37044 + C37045) * C2283) * C44395 *
               C44601 +
           ((C35327 + C35326) * C44407 + (C35325 + C35324) * C2283) * C44395 *
               C4505) *
              C44464 * C2281 +
          (((C37045 + C37044) * C2283 + (C37043 + C37042) * C44407) * C44395 *
               C4505 +
           ((C29669 * C6963 + C29367 * C7311 + C29670 * C22377 +
             C44603 * C22725) *
                C2283 +
            (C29669 * C6967 + C29367 * C7313 + C29670 * C22379 +
             C44603 * C22726) *
                C44407) *
               C44395 * C44601) *
              C44464 * C2282)) /
        (p * q * std::sqrt(p + q));
    d2eezy[67] +=
        (2 * std::pow(Pi, 2.5) *
         (((C29669 * C93 + C29367 * C437 + C29670 * C1232 + C44603 * C1616) *
               C2334 +
           (C29669 * C152 + C29367 * C503 + C29670 * C1298 + C44603 * C1688) *
               C2280 -
           (C35325 + C35324) * C2335 - (C35398 + C35399) * C2281 +
           (C37045 + C37044) * C2336 + (C37100 + C37101) * C2282) *
              C44395 * C4505 +
          ((C35324 + C35325) * C2334 + (C35399 + C35398) * C2280 -
           (C37044 + C37045) * C2335 - (C37101 + C37100) * C2281 +
           (C29669 * C6963 + C29367 * C7311 + C29670 * C22377 +
            C44603 * C22725) *
               C2336 +
           (C29669 * C7033 + C29367 * C7379 + C29670 * C22447 +
            C44603 * C22785) *
               C2282) *
              C44395 * C44601) *
         C44407 * C44464) /
        (p * q * std::sqrt(p + q));
    d2eezz[67] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C29669 * C93 + C29367 * C437 + C29670 * C1232 + C44603 * C1616) *
                C200 +
            (C29669 * C201 + C29367 * C562 + C29670 * C1357 + C44603 * C1749) *
                C44464) *
               C44395 * C4505 +
           ((C35324 + C35325) * C200 + (C35470 + C35471) * C44464) * C44395 *
               C44601) *
              C2280 -
          (((C37156 + C37157) * C44464 + (C37044 + C37045) * C200) * C44395 *
               C44601 +
           ((C35471 + C35470) * C44464 + (C35325 + C35324) * C200) * C44395 *
               C4505) *
              C2281 +
          (((C37045 + C37044) * C200 + (C37157 + C37156) * C44464) * C44395 *
               C4505 +
           ((C29669 * C6963 + C29367 * C7311 + C29670 * C22377 +
             C44603 * C22725) *
                C200 +
            (C29669 * C7093 + C29367 * C7434 + C29670 * C22505 +
             C44603 * C22839) *
                C44464) *
               C44395 * C44601) *
              C2282) *
         C44407) /
        (p * q * std::sqrt(p + q));
    d2eexx[68] +=
        (2 * std::pow(Pi, 2.5) *
         ((((((C20189 * C93 + C44395 * C98) * C2283 +
              (C20189 * C101 + C44395 * C108) * C44407) *
                 C4505 +
             (C21970 + C21971) * C44601) *
                C29367 +
            ((C27000 + C27001) * C4505 + C27002 * C44601) * C44603) *
               C1227 -
           (((C27010 + C27011) * C44601 + (C28870 + C28871) * C4505) * C44603 +
            (C27007 * C44601 + (C27001 + C27000) * C4505) * C29367) *
               C44599) *
              C1819 +
          (((C27002 * C4505 + (C22395 + C22394) * C44601) * C29367 +
            ((C27011 + C27010) * C4505 +
             ((C20189 * C23797 + C44395 * C23798) * C2283 +
              (C20189 * C23799 + C44395 * C23800) * C44407) *
                 C44601) *
                C44603) *
               C44599 -
           (((C22394 + C22395) * C44601 + C27007 * C4505) * C44603 +
            ((C21973 + C21972) * C44601 + (C21971 + C21970) * C4505) * C29367) *
               C1227) *
              C44597)) /
        (p * q * std::sqrt(p + q));
    d2eexy[68] += (2 * std::pow(Pi, 2.5) *
                   (((((C20189 * C93 + C44395 * C98) * C1873 +
                       (C20189 * C152 + C44395 * C157) * C1819 -
                       C20564 * C1874 - C20638 * C44597) *
                          C4505 +
                      (C20564 * C1873 + C20638 * C1819 - C20568 * C1874 -
                       C20639 * C44597) *
                          C44601) *
                         C29367 +
                     ((C27078 + C27079 - C27080 - C27081) * C4505 +
                      (C27082 + C27083 - C27084 - C27085) * C44601) *
                         C44603) *
                        C44407 * C1227 +
                    (((C27080 - (C27079 + C27078) + C27081) * C4505 +
                      (C27084 - (C27083 + C27082) + C27085) * C44601) *
                         C29367 +
                     ((C27009 * C1874 - (C28929 * C1819 + C28869 * C1873) +
                       C27088 * C44597) *
                          C4505 +
                      ((C20189 * C23797 + C44395 * C23798) * C1874 -
                       (C27088 * C1819 + C27009 * C1873) +
                       (C20189 * C23839 + C44395 * C23840) * C44597) *
                          C44601) *
                         C44603) *
                        C44407 * C44599)) /
                  (p * q * std::sqrt(p + q));
    d2eexz[68] += (2 * std::pow(Pi, 2.5) *
                   (((((C20189 * C93 + C44395 * C98) * C1353 +
                       (C20189 * C201 + C44395 * C206) * C1227 -
                       C25280 * C1354 - C25438 * C44599) *
                          C4505 +
                      (C22508 + C22509 - C22510 - C22520) * C44601) *
                         C29367 +
                     ((C25280 * C1353 + C25438 * C1227 - C28869 * C1354 -
                       C28985 * C44599) *
                          C4505 +
                      (C27155 + C27156 - C27157 - C27161) * C44601) *
                         C44603) *
                        C1819 +
                    (((C22510 - (C22509 + C22508) + C22520) * C4505 +
                      (C22515 - (C22514 + C22513) + C22521) * C44601) *
                         C29367 +
                     ((C27157 - (C27156 + C27155) + C27161) * C4505 +
                      ((C20189 * C23797 + C44395 * C23798) * C1354 -
                       (C22519 * C1227 + C22391 * C1353) +
                       (C20189 * C23879 + C44395 * C23880) * C44599) *
                          C44601) *
                         C44603) *
                        C44597) *
                   C44407) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[68] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C4659 * C93 + C4505 * C250 + C4660 * C642 + C44601 * C824) *
                 C2283 +
             (C4659 * C101 + C4505 * C255 + C4660 * C648 + C44601 * C827) *
                 C44407) *
                C29367 +
            ((C35744 + C35745) * C2283 + (C35746 + C35747) * C44407) * C44603) *
               C44395 * C1227 -
           (((C4660 * C9361 + C44601 * C9525 + C4659 * C4104 + C4505 * C4242) *
                 C44407 +
             (C4660 * C9357 + C44601 * C9523 + C4659 * C4098 + C4505 * C4239) *
                 C2283) *
                C44603 +
            ((C35747 + C35746) * C44407 + (C35745 + C35744) * C2283) * C29367) *
               C44395 * C44599) *
              C1819 +
          ((((C37430 + C37431) * C2283 + (C37432 + C37433) * C44407) * C29367 +
            ((C4659 * C9357 + C4505 * C9523 + C4660 * C23797 +
              C44601 * C23919) *
                 C2283 +
             (C4659 * C9361 + C4505 * C9525 + C4660 * C23799 +
              C44601 * C23920) *
                 C44407) *
                C44603) *
               C44395 * C44599 -
           (((C37433 + C37432) * C44407 + (C37431 + C37430) * C2283) * C44603 +
            ((C4660 * C2290 + C44601 * C2428 + C4659 * C648 + C4505 * C827) *
                 C44407 +
             (C4660 * C2284 + C44601 * C2425 + C4659 * C642 + C4505 * C824) *
                 C2283) *
                C29367) *
               C44395 * C1227) *
              C44597)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[68] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4659 * C93 + C4505 * C250 + C4660 * C642 + C44601 * C824) *
                C1873 +
            (C4659 * C152 + C4505 * C316 + C4660 * C709 + C44601 * C893) *
                C1819 -
            (C4660 * C2284 + C44601 * C2425 + C4659 * C642 + C4505 * C824) *
                C1874 -
            (C4660 * C2337 + C44601 * C2469 + C4659 * C709 + C4505 * C893) *
                C44597) *
               C29367 +
           ((C35744 + C35745) * C1873 + (C35818 + C35819) * C1819 -
            (C37431 + C37430) * C1874 - (C37504 + C37505) * C44597) *
               C44603) *
              C44395 * C44407 * C1227 +
          (((C37430 + C37431) * C1874 -
            ((C35819 + C35818) * C1819 + (C35745 + C35744) * C1873) +
            (C37505 + C37504) * C44597) *
               C29367 +
           ((C4659 * C9357 + C4505 * C9523 + C4660 * C23797 + C44601 * C23919) *
                C1874 -
            ((C4660 * C9415 + C44601 * C9577 + C4659 * C4148 + C4505 * C4283) *
                 C1819 +
             (C4660 * C9357 + C44601 * C9523 + C4659 * C4098 + C4505 * C4239) *
                 C1873) +
            (C4659 * C9415 + C4505 * C9577 + C4660 * C23839 + C44601 * C23959) *
                C44597) *
               C44603) *
              C44395 * C44407 * C44599)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[68] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4659 * C93 + C4505 * C250 + C4660 * C642 + C44601 * C824) *
                C1353 +
            (C4659 * C201 + C4505 * C376 + C4660 * C767 + C44601 * C963) *
                C1227 -
            (C35745 + C35744) * C1354 - (C35890 + C35891) * C44599) *
               C29367 +
           ((C35744 + C35745) * C1353 + (C35891 + C35890) * C1227 -
            (C4660 * C9357 + C44601 * C9523 + C4659 * C4098 + C4505 * C4239) *
                C1354 -
            (C4660 * C9469 + C44601 * C9629 + C4659 * C4195 + C4505 * C4324) *
                C44599) *
               C44603) *
              C44395 * C1819 +
          (((C37430 + C37431) * C1354 -
            ((C4660 * C2381 + C44601 * C2510 + C4659 * C767 + C4505 * C963) *
                 C1227 +
             (C4660 * C2284 + C44601 * C2425 + C4659 * C642 + C4505 * C824) *
                 C1353) +
            (C37576 + C37577) * C44599) *
               C29367 +
           ((C4659 * C9357 + C4505 * C9523 + C4660 * C23797 + C44601 * C23919) *
                C1354 -
            ((C37577 + C37576) * C1227 + (C37431 + C37430) * C1353) +
            (C4659 * C9469 + C4505 * C9629 + C4660 * C23879 + C44601 * C23998) *
                C44599) *
               C44603) *
              C44395 * C44597) *
         C44407) /
        (p * q * std::sqrt(p + q));
    d2eezx[68] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C29669 * C93 + C29367 * C437 + C29670 * C1232 + C44603 * C1616) *
                 C2283 +
             (C29669 * C101 + C29367 * C442 + C29670 * C1238 + C44603 * C1619) *
                 C44407) *
                C44395 * C4505 +
            ((C35324 + C35325) * C2283 + (C35326 + C35327) * C44407) * C44395 *
                C44601) *
               C1227 -
           (((C37652 + C37653) * C44407 + (C37654 + C37655) * C2283) * C44395 *
                C44601 +
            ((C29670 * C4104 + C44603 * C4368 + C29669 * C1238 +
              C29367 * C1619) *
                 C44407 +
             (C29670 * C4098 + C44603 * C4365 + C29669 * C1232 +
              C29367 * C1616) *
                 C2283) *
                C44395 * C4505) *
               C44599) *
              C1819 +
          ((((C37655 + C37654) * C2283 + (C37653 + C37652) * C44407) * C44395 *
                C4505 +
            ((C29669 * C7507 + C29367 * C7951 + C29670 * C23797 +
              C44603 * C24037) *
                 C2283 +
             (C29669 * C7511 + C29367 * C7953 + C29670 * C23799 +
              C44603 * C24038) *
                 C44407) *
                C44395 * C44601) *
               C44599 -
           (((C37042 + C37043) * C44407 + (C37044 + C37045) * C2283) * C44395 *
                C44601 +
            ((C35327 + C35326) * C44407 + (C35325 + C35324) * C2283) * C44395 *
                C4505) *
               C1227) *
              C44597)) /
        (p * q * std::sqrt(p + q));
    d2eezy[68] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C29669 * C93 + C29367 * C437 + C29670 * C1232 + C44603 * C1616) *
                C1873 +
            (C29669 * C152 + C29367 * C503 + C29670 * C1298 + C44603 * C1688) *
                C1819 -
            (C35325 + C35324) * C1874 - (C35398 + C35399) * C44597) *
               C44395 * C4505 +
           ((C35324 + C35325) * C1873 + (C35399 + C35398) * C1819 -
            (C37044 + C37045) * C1874 - (C37101 + C37100) * C44597) *
               C44395 * C44601) *
              C44407 * C1227 +
          (((C37655 + C37654) * C1874 -
            ((C29670 * C4148 + C44603 * C4409 + C29669 * C1298 +
              C29367 * C1688) *
                 C1819 +
             (C29670 * C4098 + C44603 * C4365 + C29669 * C1232 +
              C29367 * C1616) *
                 C1873) +
            (C37726 + C37727) * C44597) *
               C44395 * C4505 +
           ((C29669 * C7507 + C29367 * C7951 + C29670 * C23797 +
             C44603 * C24037) *
                C1874 -
            ((C37727 + C37726) * C1819 + (C37654 + C37655) * C1873) +
            (C29669 * C7593 + C29367 * C8031 + C29670 * C23839 +
             C44603 * C24077) *
                C44597) *
               C44395 * C44601) *
              C44407 * C44599)) /
        (p * q * std::sqrt(p + q));
    d2eezz[68] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C29669 * C93 + C29367 * C437 + C29670 * C1232 + C44603 * C1616) *
                C1353 +
            (C29669 * C201 + C29367 * C562 + C29670 * C1357 + C44603 * C1749) *
                C1227 -
            (C29670 * C4098 + C44603 * C4365 + C29669 * C1232 +
             C29367 * C1616) *
                C1354 -
            (C29670 * C4195 + C44603 * C4450 + C29669 * C1357 +
             C29367 * C1749) *
                C44599) *
               C44395 * C4505 +
           ((C35324 + C35325) * C1353 + (C35470 + C35471) * C1227 -
            (C37654 + C37655) * C1354 - (C37798 + C37799) * C44599) *
               C44395 * C44601) *
              C1819 +
          (((C37655 + C37654) * C1354 -
            ((C35471 + C35470) * C1227 + (C35325 + C35324) * C1353) +
            (C37799 + C37798) * C44599) *
               C44395 * C4505 +
           ((C29669 * C7507 + C29367 * C7951 + C29670 * C23797 +
             C44603 * C24037) *
                C1354 -
            ((C37156 + C37157) * C1227 + (C37044 + C37045) * C1353) +
            (C29669 * C7669 + C29367 * C8102 + C29670 * C23879 +
             C44603 * C24116) *
                C44599) *
               C44395 * C44601) *
              C44597) *
         C44407) /
        (p * q * std::sqrt(p + q));
    d2eexx[69] += (2 * std::pow(Pi, 2.5) *
                   (((((C20189 * C93 + C44395 * C98) * C1821 +
                       (C20189 * C101 + C44395 * C108) * C1817 -
                       (C20189 * C94 + C44395 * C99) * C1822 -
                       (C20189 * C102 + C44395 * C109) * C44595) *
                          C4505 +
                      (C21516 + C21517 - C21518 - C21519) * C44601) *
                         C29367 +
                     ((C27672 + C27673 - C27674 - C27675) * C4505 +
                      (C25926 + C25927 - C25928 - C25929) * C44601) *
                         C44603) *
                        C3187 +
                    (((C27674 - (C27673 + C27672) + C27675) * C4505 +
                      (C25928 - (C25927 + C25926) + C25929) * C44601) *
                         C29367 +
                     (((C20189 * C4099 + C44395 * C4102) * C1822 -
                       (C28868 * C1817 + C28869 * C1821) +
                       (C20189 * C4105 + C44395 * C4108) * C44595) *
                          C4505 +
                      ((C20189 * C9358 + C44395 * C9360) * C1822 -
                       (C27008 * C1817 + C27009 * C1821) +
                       (C20189 * C9362 + C44395 * C9364) * C44595) *
                          C44601) *
                         C44603) *
                        C44599) *
                   C44449) /
                  (p * q * std::sqrt(p + q));
    d2eexy[69] +=
        (2 * std::pow(Pi, 2.5) *
         ((((((C20189 * C93 + C44395 * C98) * C151 +
              (C20189 * C152 + C44395 * C157) * C44449) *
                 C4505 +
             (C20564 * C151 + C20638 * C44449) * C44601) *
                C29367 +
            ((C25354 + C25366) * C4505 + (C25357 + C25358) * C44601) * C44603) *
               C1817 -
           (((C25359 + C25360) * C44601 + (C25367 + C25363) * C4505) * C44603 +
            ((C20640 * C44449 + C20566 * C151) * C44601 +
             ((C20189 * C153 + C44395 * C158) * C44449 +
              (C20189 * C94 + C44395 * C99) * C151) *
                 C4505) *
                C29367) *
               C44595) *
              C3187 +
          ((((C25363 + C25367) * C4505 + (C25360 + C25359) * C44601) * C29367 +
            (((C20189 * C4099 + C44395 * C4102) * C151 +
              (C20189 * C4149 + C44395 * C4152) * C44449) *
                 C4505 +
             ((C20189 * C9358 + C44395 * C9360) * C151 +
              (C20189 * C9416 + C44395 * C9418) * C44449) *
                 C44601) *
                C44603) *
               C44595 -
           (((C28924 + C28925) * C44601 + (C28930 + C28928) * C4505) * C44603 +
            ((C25358 + C25357) * C44601 + (C25366 + C25354) * C4505) * C29367) *
               C1817) *
              C44599)) /
        (p * q * std::sqrt(p + q));
    d2eexz[69] += (2 * std::pow(Pi, 2.5) *
                   (((((C20189 * C93 + C44395 * C98) * C3289 +
                       (C20189 * C201 + C44395 * C206) * C3187 -
                       C25280 * C3290 - C25438 * C44599) *
                          C4505 +
                      (C23448 + C23449 - C23450 - C23451) * C44601) *
                         C29367 +
                     ((C25280 * C3289 + C25438 * C3187 - C28869 * C3290 -
                       C28985 * C44599) *
                          C4505 +
                      (C28410 + C28411 - C28412 - C28413) * C44601) *
                         C44603) *
                        C44449 * C1817 +
                    (((C25282 * C3290 -
                       ((C20189 * C202 + C44395 * C207) * C3187 +
                        (C20189 * C94 + C44395 * C99) * C3289) +
                       C25439 * C44599) *
                          C4505 +
                      (C24640 * C3290 - (C20706 * C3187 + C20566 * C3289) +
                       C24784 * C44599) *
                          C44601) *
                         C29367 +
                     (((C20189 * C4099 + C44395 * C4102) * C3290 -
                       (C25439 * C3187 + C25282 * C3289) +
                       (C20189 * C4196 + C44395 * C4199) * C44599) *
                          C4505 +
                      ((C20189 * C9358 + C44395 * C9360) * C3290 -
                       (C24784 * C3187 + C24640 * C3289) +
                       (C20189 * C9470 + C44395 * C9472) * C44599) *
                          C44601) *
                         C44603) *
                        C44449 * C44595)) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[69] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4659 * C93 + C4505 * C250 + C4660 * C642 + C44601 * C824) *
                C1821 +
            (C4659 * C101 + C4505 * C255 + C4660 * C648 + C44601 * C827) *
                C1817 -
            (C4678 + C4679) * C1822 - (C4680 + C4681) * C44595) *
               C29367 +
           ((C35744 + C35745) * C1821 + (C35746 + C35747) * C1817 -
            (C5945 + C5944) * C1822 - (C5947 + C5946) * C44595) *
               C44603) *
              C44395 * C3187 +
          (((C5944 + C5945) * C1822 -
            ((C35747 + C35746) * C1817 + (C35745 + C35744) * C1821) +
            (C5946 + C5947) * C44595) *
               C29367 +
           ((C4659 * C4099 + C4505 * C4240 + C4660 * C9358 + C44601 * C9524) *
                C1822 -
            ((C4660 * C9361 + C44601 * C9525 + C4659 * C4104 + C4505 * C4242) *
                 C1817 +
             (C4660 * C9357 + C44601 * C9523 + C4659 * C4098 + C4505 * C4239) *
                 C1821) +
            (C4659 * C4105 + C4505 * C4243 + C4660 * C9362 + C44601 * C9526) *
                C44595) *
               C44603) *
              C44395 * C44599) *
         C44449) /
        (p * q * std::sqrt(p + q));
    d2eeyy[69] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C4659 * C93 + C4505 * C250 + C4660 * C642 + C44601 * C824) *
                 C151 +
             (C4659 * C152 + C4505 * C316 + C4660 * C709 + C44601 * C893) *
                 C44449) *
                C29367 +
            ((C35744 + C35745) * C151 + (C35818 + C35819) * C44449) * C44603) *
               C44395 * C1817 -
           (((C6019 + C6018) * C44449 + (C5945 + C5944) * C151) * C44603 +
            ((C4745 + C4744) * C44449 + (C4678 + C4679) * C151) * C29367) *
               C44395 * C44595) *
              C3187 +
          ((((C5944 + C5945) * C151 + (C6018 + C6019) * C44449) * C29367 +
            ((C4659 * C4099 + C4505 * C4240 + C4660 * C9358 + C44601 * C9524) *
                 C151 +
             (C4659 * C4149 + C4505 * C4284 + C4660 * C9416 + C44601 * C9578) *
                 C44449) *
                C44603) *
               C44395 * C44595 -
           (((C4660 * C9415 + C44601 * C9577 + C4659 * C4148 + C4505 * C4283) *
                 C44449 +
             (C4660 * C9357 + C44601 * C9523 + C4659 * C4098 + C4505 * C4239) *
                 C151) *
                C44603 +
            ((C35819 + C35818) * C44449 + (C35745 + C35744) * C151) * C29367) *
               C44395 * C1817) *
              C44599)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[69] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4659 * C93 + C4505 * C250 + C4660 * C642 + C44601 * C824) *
                C3289 +
            (C4659 * C201 + C4505 * C376 + C4660 * C767 + C44601 * C963) *
                C3187 -
            (C35745 + C35744) * C3290 - (C35890 + C35891) * C44599) *
               C29367 +
           ((C35744 + C35745) * C3289 + (C35891 + C35890) * C3187 -
            (C4660 * C9357 + C44601 * C9523 + C4659 * C4098 + C4505 * C4239) *
                C3290 -
            (C4660 * C9469 + C44601 * C9629 + C4659 * C4195 + C4505 * C4324) *
                C44599) *
               C44603) *
              C44395 * C44449 * C1817 +
          (((C5944 + C5945) * C3290 -
            ((C4807 + C4806) * C3187 + (C4678 + C4679) * C3289) +
            (C6091 + C6090) * C44599) *
               C29367 +
           ((C4659 * C4099 + C4505 * C4240 + C4660 * C9358 + C44601 * C9524) *
                C3290 -
            ((C6090 + C6091) * C3187 + (C5945 + C5944) * C3289) +
            (C4659 * C4196 + C4505 * C4325 + C4660 * C9470 + C44601 * C9630) *
                C44599) *
               C44603) *
              C44395 * C44449 * C44595)) /
        (p * q * std::sqrt(p + q));
    d2eezx[69] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C29669 * C93 + C29367 * C437 + C29670 * C1232 + C44603 * C1616) *
                C1821 +
            (C29669 * C101 + C29367 * C442 + C29670 * C1238 + C44603 * C1619) *
                C1817 -
            (C29688 + C29689) * C1822 - (C29690 + C29691) * C44595) *
               C44395 * C4505 +
           ((C35324 + C35325) * C1821 + (C35326 + C35327) * C1817 -
            (C30291 + C30290) * C1822 - (C30293 + C30292) * C44595) *
               C44395 * C44601) *
              C3187 +
          (((C30956 + C30957) * C1822 -
            ((C29670 * C4104 + C44603 * C4368 + C29669 * C1238 +
              C29367 * C1619) *
                 C1817 +
             (C29670 * C4098 + C44603 * C4365 + C29669 * C1232 +
              C29367 * C1616) *
                 C1821) +
            (C30958 + C30959) * C44595) *
               C44395 * C4505 +
           ((C29669 * C2690 + C29367 * C3026 + C29670 * C9358 +
             C44603 * C9682) *
                C1822 -
            ((C37652 + C37653) * C1817 + (C37654 + C37655) * C1821) +
            (C29669 * C2696 + C29367 * C3029 + C29670 * C9362 +
             C44603 * C9684) *
                C44595) *
               C44395 * C44601) *
              C44599) *
         C44449) /
        (p * q * std::sqrt(p + q));
    d2eezy[69] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C29669 * C93 + C29367 * C437 + C29670 * C1232 + C44603 * C1616) *
                 C151 +
             (C29669 * C152 + C29367 * C503 + C29670 * C1298 + C44603 * C1688) *
                 C44449) *
                C44395 * C4505 +
            ((C35324 + C35325) * C151 + (C35399 + C35398) * C44449) * C44395 *
                C44601) *
               C1817 -
           (((C30364 + C30365) * C44449 + (C30291 + C30290) * C151) * C44395 *
                C44601 +
            ((C29755 + C29754) * C44449 + (C29688 + C29689) * C151) * C44395 *
                C4505) *
               C44595) *
              C3187 +
          ((((C30956 + C30957) * C151 + (C31030 + C31031) * C44449) * C44395 *
                C4505 +
            ((C29669 * C2690 + C29367 * C3026 + C29670 * C9358 +
              C44603 * C9682) *
                 C151 +
             (C29669 * C2752 + C29367 * C3082 + C29670 * C9416 +
              C44603 * C9736) *
                 C44449) *
                C44395 * C44601) *
               C44595 -
           (((C37727 + C37726) * C44449 + (C37654 + C37655) * C151) * C44395 *
                C44601 +
            ((C29670 * C4148 + C44603 * C4409 + C29669 * C1298 +
              C29367 * C1688) *
                 C44449 +
             (C29670 * C4098 + C44603 * C4365 + C29669 * C1232 +
              C29367 * C1616) *
                 C151) *
                C44395 * C4505) *
               C1817) *
              C44599)) /
        (p * q * std::sqrt(p + q));
    d2eezz[69] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C29669 * C93 + C29367 * C437 + C29670 * C1232 + C44603 * C1616) *
                C3289 +
            (C29669 * C201 + C29367 * C562 + C29670 * C1357 + C44603 * C1749) *
                C3187 -
            (C29670 * C4098 + C44603 * C4365 + C29669 * C1232 +
             C29367 * C1616) *
                C3290 -
            (C29670 * C4195 + C44603 * C4450 + C29669 * C1357 +
             C29367 * C1749) *
                C44599) *
               C44395 * C4505 +
           ((C35324 + C35325) * C3289 + (C35470 + C35471) * C3187 -
            (C37654 + C37655) * C3290 - (C37798 + C37799) * C44599) *
               C44395 * C44601) *
              C44449 * C1817 +
          (((C30956 + C30957) * C3290 -
            ((C29817 + C29816) * C3187 + (C29688 + C29689) * C3289) +
            (C31103 + C31102) * C44599) *
               C44395 * C4505 +
           ((C29669 * C2690 + C29367 * C3026 + C29670 * C9358 +
             C44603 * C9682) *
                C3290 -
            ((C30436 + C30437) * C3187 + (C30291 + C30290) * C3289) +
            (C29669 * C2808 + C29367 * C3135 + C29670 * C9470 +
             C44603 * C9788) *
                C44599) *
               C44395 * C44601) *
              C44449 * C44595)) /
        (p * q * std::sqrt(p + q));
    d2eexx[70] +=
        (2 * std::pow(Pi, 2.5) *
         ((((((C20189 * C93 + C44395 * C98) * C2283 +
              (C20189 * C101 + C44395 * C108) * C44407) *
                 C4505 +
             (C21970 + C21971) * C44601) *
                C29367 +
            ((C27000 + C27001) * C4505 + C27002 * C44601) * C44603) *
               C3187 -
           (((C27010 + C27011) * C44601 + (C28870 + C28871) * C4505) * C44603 +
            (C27007 * C44601 + (C27001 + C27000) * C4505) * C29367) *
               C44599) *
              C635 +
          (((C27002 * C4505 + (C22395 + C22394) * C44601) * C29367 +
            ((C27011 + C27010) * C4505 +
             ((C20189 * C23797 + C44395 * C23798) * C2283 +
              (C20189 * C23799 + C44395 * C23800) * C44407) *
                 C44601) *
                C44603) *
               C44599 -
           (((C22394 + C22395) * C44601 + C27007 * C4505) * C44603 +
            ((C21973 + C21972) * C44601 + (C21971 + C21970) * C4505) * C29367) *
               C3187) *
              C44597)) /
        (p * q * std::sqrt(p + q));
    d2eexy[70] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C20189 * C93 + C44395 * C98) * C705 +
             (C20189 * C152 + C44395 * C157) * C635 - C20564 * C706 -
             C20638 * C44597) *
                C4505 +
            (C20564 * C705 + C20638 * C635 - C20568 * C706 - C20639 * C44597) *
                C44601) *
               C29367 +
           ((C28336 + C28337 - C28338 - C28339) * C4505 +
            (C28340 + C28341 - C28342 - C28343) * C44601) *
               C44603) *
              C44407 * C3187 +
          (((C28338 - (C28337 + C28336) + C28339) * C4505 +
            (C28342 - (C28341 + C28340) + C28343) * C44601) *
               C29367 +
           ((C27009 * C706 - (C28929 * C635 + C28869 * C705) +
             C27088 * C44597) *
                C4505 +
            ((C20189 * C23797 + C44395 * C23798) * C706 -
             (C27088 * C635 + C27009 * C705) +
             (C20189 * C23839 + C44395 * C23840) * C44597) *
                C44601) *
               C44603) *
              C44407 * C44599)) /
        (p * q * std::sqrt(p + q));
    d2eexz[70] += (2 * std::pow(Pi, 2.5) *
                   (((((C20189 * C93 + C44395 * C98) * C3289 +
                       (C20189 * C201 + C44395 * C206) * C3187 -
                       C25280 * C3290 - C25438 * C44599) *
                          C4505 +
                      (C23448 + C23449 - C23450 - C23451) * C44601) *
                         C29367 +
                     ((C25280 * C3289 + C25438 * C3187 - C28869 * C3290 -
                       C28985 * C44599) *
                          C4505 +
                      (C28410 + C28411 - C28412 - C28413) * C44601) *
                         C44603) *
                        C635 +
                    (((C23450 - (C23449 + C23448) + C23451) * C4505 +
                      (C23454 - (C23453 + C23452) + C23455) * C44601) *
                         C29367 +
                     ((C28412 - (C28411 + C28410) + C28413) * C4505 +
                      ((C20189 * C23797 + C44395 * C23798) * C3290 -
                       (C22519 * C3187 + C22391 * C3289) +
                       (C20189 * C23879 + C44395 * C23880) * C44599) *
                          C44601) *
                         C44603) *
                        C44597) *
                   C44407) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[70] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C4659 * C93 + C4505 * C250 + C4660 * C642 + C44601 * C824) *
                 C2283 +
             (C4659 * C101 + C4505 * C255 + C4660 * C648 + C44601 * C827) *
                 C44407) *
                C29367 +
            ((C35744 + C35745) * C2283 + (C35746 + C35747) * C44407) * C44603) *
               C44395 * C3187 -
           (((C4660 * C9361 + C44601 * C9525 + C4659 * C4104 + C4505 * C4242) *
                 C44407 +
             (C4660 * C9357 + C44601 * C9523 + C4659 * C4098 + C4505 * C4239) *
                 C2283) *
                C44603 +
            ((C35747 + C35746) * C44407 + (C35745 + C35744) * C2283) * C29367) *
               C44395 * C44599) *
              C635 +
          ((((C37430 + C37431) * C2283 + (C37432 + C37433) * C44407) * C29367 +
            ((C4659 * C9357 + C4505 * C9523 + C4660 * C23797 +
              C44601 * C23919) *
                 C2283 +
             (C4659 * C9361 + C4505 * C9525 + C4660 * C23799 +
              C44601 * C23920) *
                 C44407) *
                C44603) *
               C44395 * C44599 -
           (((C37433 + C37432) * C44407 + (C37431 + C37430) * C2283) * C44603 +
            ((C4660 * C2290 + C44601 * C2428 + C4659 * C648 + C4505 * C827) *
                 C44407 +
             (C4660 * C2284 + C44601 * C2425 + C4659 * C642 + C4505 * C824) *
                 C2283) *
                C29367) *
               C44395 * C3187) *
              C44597)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[70] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4659 * C93 + C4505 * C250 + C4660 * C642 + C44601 * C824) * C705 +
            (C4659 * C152 + C4505 * C316 + C4660 * C709 + C44601 * C893) *
                C635 -
            (C4660 * C2284 + C44601 * C2425 + C4659 * C642 + C4505 * C824) *
                C706 -
            (C4660 * C2337 + C44601 * C2469 + C4659 * C709 + C4505 * C893) *
                C44597) *
               C29367 +
           ((C35744 + C35745) * C705 + (C35818 + C35819) * C635 -
            (C37431 + C37430) * C706 - (C37504 + C37505) * C44597) *
               C44603) *
              C44395 * C44407 * C3187 +
          (((C37430 + C37431) * C706 -
            ((C35819 + C35818) * C635 + (C35745 + C35744) * C705) +
            (C37505 + C37504) * C44597) *
               C29367 +
           ((C4659 * C9357 + C4505 * C9523 + C4660 * C23797 + C44601 * C23919) *
                C706 -
            ((C4660 * C9415 + C44601 * C9577 + C4659 * C4148 + C4505 * C4283) *
                 C635 +
             (C4660 * C9357 + C44601 * C9523 + C4659 * C4098 + C4505 * C4239) *
                 C705) +
            (C4659 * C9415 + C4505 * C9577 + C4660 * C23839 + C44601 * C23959) *
                C44597) *
               C44603) *
              C44395 * C44407 * C44599)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[70] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4659 * C93 + C4505 * C250 + C4660 * C642 + C44601 * C824) *
                C3289 +
            (C4659 * C201 + C4505 * C376 + C4660 * C767 + C44601 * C963) *
                C3187 -
            (C35745 + C35744) * C3290 - (C35890 + C35891) * C44599) *
               C29367 +
           ((C35744 + C35745) * C3289 + (C35891 + C35890) * C3187 -
            (C4660 * C9357 + C44601 * C9523 + C4659 * C4098 + C4505 * C4239) *
                C3290 -
            (C4660 * C9469 + C44601 * C9629 + C4659 * C4195 + C4505 * C4324) *
                C44599) *
               C44603) *
              C44395 * C635 +
          (((C37430 + C37431) * C3290 -
            ((C4660 * C2381 + C44601 * C2510 + C4659 * C767 + C4505 * C963) *
                 C3187 +
             (C4660 * C2284 + C44601 * C2425 + C4659 * C642 + C4505 * C824) *
                 C3289) +
            (C37576 + C37577) * C44599) *
               C29367 +
           ((C4659 * C9357 + C4505 * C9523 + C4660 * C23797 + C44601 * C23919) *
                C3290 -
            ((C37577 + C37576) * C3187 + (C37431 + C37430) * C3289) +
            (C4659 * C9469 + C4505 * C9629 + C4660 * C23879 + C44601 * C23998) *
                C44599) *
               C44603) *
              C44395 * C44597) *
         C44407) /
        (p * q * std::sqrt(p + q));
    d2eezx[70] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C29669 * C93 + C29367 * C437 + C29670 * C1232 + C44603 * C1616) *
                 C2283 +
             (C29669 * C101 + C29367 * C442 + C29670 * C1238 + C44603 * C1619) *
                 C44407) *
                C44395 * C4505 +
            ((C35324 + C35325) * C2283 + (C35326 + C35327) * C44407) * C44395 *
                C44601) *
               C3187 -
           (((C37652 + C37653) * C44407 + (C37654 + C37655) * C2283) * C44395 *
                C44601 +
            ((C29670 * C4104 + C44603 * C4368 + C29669 * C1238 +
              C29367 * C1619) *
                 C44407 +
             (C29670 * C4098 + C44603 * C4365 + C29669 * C1232 +
              C29367 * C1616) *
                 C2283) *
                C44395 * C4505) *
               C44599) *
              C635 +
          ((((C37655 + C37654) * C2283 + (C37653 + C37652) * C44407) * C44395 *
                C4505 +
            ((C29669 * C7507 + C29367 * C7951 + C29670 * C23797 +
              C44603 * C24037) *
                 C2283 +
             (C29669 * C7511 + C29367 * C7953 + C29670 * C23799 +
              C44603 * C24038) *
                 C44407) *
                C44395 * C44601) *
               C44599 -
           (((C37042 + C37043) * C44407 + (C37044 + C37045) * C2283) * C44395 *
                C44601 +
            ((C35327 + C35326) * C44407 + (C35325 + C35324) * C2283) * C44395 *
                C4505) *
               C3187) *
              C44597)) /
        (p * q * std::sqrt(p + q));
    d2eezy[70] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C29669 * C93 + C29367 * C437 + C29670 * C1232 + C44603 * C1616) *
                C705 +
            (C29669 * C152 + C29367 * C503 + C29670 * C1298 + C44603 * C1688) *
                C635 -
            (C35325 + C35324) * C706 - (C35398 + C35399) * C44597) *
               C44395 * C4505 +
           ((C35324 + C35325) * C705 + (C35399 + C35398) * C635 -
            (C37044 + C37045) * C706 - (C37101 + C37100) * C44597) *
               C44395 * C44601) *
              C44407 * C3187 +
          (((C37655 + C37654) * C706 -
            ((C29670 * C4148 + C44603 * C4409 + C29669 * C1298 +
              C29367 * C1688) *
                 C635 +
             (C29670 * C4098 + C44603 * C4365 + C29669 * C1232 +
              C29367 * C1616) *
                 C705) +
            (C37726 + C37727) * C44597) *
               C44395 * C4505 +
           ((C29669 * C7507 + C29367 * C7951 + C29670 * C23797 +
             C44603 * C24037) *
                C706 -
            ((C37727 + C37726) * C635 + (C37654 + C37655) * C705) +
            (C29669 * C7593 + C29367 * C8031 + C29670 * C23839 +
             C44603 * C24077) *
                C44597) *
               C44395 * C44601) *
              C44407 * C44599)) /
        (p * q * std::sqrt(p + q));
    d2eezz[70] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C29669 * C93 + C29367 * C437 + C29670 * C1232 + C44603 * C1616) *
                C3289 +
            (C29669 * C201 + C29367 * C562 + C29670 * C1357 + C44603 * C1749) *
                C3187 -
            (C29670 * C4098 + C44603 * C4365 + C29669 * C1232 +
             C29367 * C1616) *
                C3290 -
            (C29670 * C4195 + C44603 * C4450 + C29669 * C1357 +
             C29367 * C1749) *
                C44599) *
               C44395 * C4505 +
           ((C35324 + C35325) * C3289 + (C35470 + C35471) * C3187 -
            (C37654 + C37655) * C3290 - (C37798 + C37799) * C44599) *
               C44395 * C44601) *
              C635 +
          (((C37655 + C37654) * C3290 -
            ((C35471 + C35470) * C3187 + (C35325 + C35324) * C3289) +
            (C37799 + C37798) * C44599) *
               C44395 * C4505 +
           ((C29669 * C7507 + C29367 * C7951 + C29670 * C23797 +
             C44603 * C24037) *
                C3290 -
            ((C37156 + C37157) * C3187 + (C37044 + C37045) * C3289) +
            (C29669 * C7669 + C29367 * C8102 + C29670 * C23879 +
             C44603 * C24116) *
                C44599) *
               C44395 * C44601) *
              C44597) *
         C44407) /
        (p * q * std::sqrt(p + q));
    d2eexx[71] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C20189 * C93 + C44395 * C98) * C2283 +
             (C20189 * C101 + C44395 * C108) * C44407) *
                C4505 +
            (C21970 + C21971) * C44601) *
               C29367 +
           ((C27000 + C27001) * C4505 + C27002 * C44601) * C44603) *
              C4095 -
          (((C27010 + C27011) * C44601 + (C28870 + C28871) * C4505) * C44603 +
           (C27007 * C44601 + (C27001 + C27000) * C4505) * C29367) *
              C4096 +
          (((C28871 + C28870) * C4505 + (C27011 + C27010) * C44601) * C29367 +
           (((C20189 * C14559 + C44395 * C14561) * C2283 +
             (C20189 * C14563 + C44395 * C14565) * C44407) *
                C4505 +
            ((C20189 * C28859 + C44395 * C28860) * C2283 +
             (C20189 * C28861 + C44395 * C28862) * C44407) *
                C44601) *
               C44603) *
              C4097) *
         C44449) /
        (p * q * std::sqrt(p + q));
    d2eexy[71] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C20189 * C93 + C44395 * C98) * C151 +
             (C20189 * C152 + C44395 * C157) * C44449) *
                C4505 +
            (C20564 * C151 + C20638 * C44449) * C44601) *
               C29367 +
           ((C25354 + C25366) * C4505 + (C25357 + C25358) * C44601) * C44603) *
              C44407 * C4095 -
          (((C28924 + C28925) * C44601 + (C28930 + C28928) * C4505) * C44603 +
           ((C25358 + C25357) * C44601 + (C25366 + C25354) * C4505) * C29367) *
              C44407 * C4096 +
          (((C28928 + C28930) * C4505 + (C28925 + C28924) * C44601) * C29367 +
           (((C20189 * C14559 + C44395 * C14561) * C151 +
             (C20189 * C14629 + C44395 * C14631) * C44449) *
                C4505 +
            ((C20189 * C28859 + C44395 * C28860) * C151 +
             (C20189 * C28921 + C44395 * C28922) * C44449) *
                C44601) *
               C44603) *
              C44407 * C4097)) /
        (p * q * std::sqrt(p + q));
    d2eexz[71] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C20189 * C93 + C44395 * C98) * C4192 +
            (C20189 * C201 + C44395 * C206) * C4095 - C25280 * C4193 -
            C25438 * C4096 + C28869 * C4194 + C28985 * C4097) *
               C4505 +
           (C20564 * C4192 + C20704 * C4095 - C22393 * C4193 - C22518 * C4096 +
            C27009 * C4194 + C27160 * C4097) *
               C44601) *
              C29367 +
          ((C25280 * C4192 + C25438 * C4095 - C28869 * C4193 - C28985 * C4096 +
            (C20189 * C14559 + C44395 * C14561) * C4194 +
            (C20189 * C14689 + C44395 * C14691) * C4097) *
               C4505 +
           (C22393 * C4192 + C22518 * C4095 - C27009 * C4193 - C27160 * C4096 +
            (C20189 * C28859 + C44395 * C28860) * C4194 +
            (C20189 * C28980 + C44395 * C28981) * C4097) *
               C44601) *
              C44603) *
         C44449 * C44407) /
        (p * q * std::sqrt(p + q));
    d2eeyx[71] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4659 * C93 + C4505 * C250 + C4660 * C642 + C44601 * C824) *
                C2283 +
            (C4659 * C101 + C4505 * C255 + C4660 * C648 + C44601 * C827) *
                C44407) *
               C29367 +
           ((C35744 + C35745) * C2283 + (C35746 + C35747) * C44407) * C44603) *
              C44395 * C4095 -
          (((C39196 + C39197) * C44407 + (C39198 + C39199) * C2283) * C44603 +
           ((C35747 + C35746) * C44407 + (C35745 + C35744) * C2283) * C29367) *
              C44395 * C4096 +
          (((C39199 + C39198) * C2283 + (C39197 + C39196) * C44407) * C29367 +
           ((C4659 * C14559 + C4505 * C14749 + C4660 * C28859 +
             C44601 * C29035) *
                C2283 +
            (C4659 * C14563 + C4505 * C14751 + C4660 * C28861 +
             C44601 * C29036) *
                C44407) *
               C44603) *
              C44395 * C4097) *
         C44449) /
        (p * q * std::sqrt(p + q));
    d2eeyy[71] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C4659 * C93 + C4505 * C250 + C4660 * C642 + C44601 * C824) * C151 +
            (C4659 * C152 + C4505 * C316 + C4660 * C709 + C44601 * C893) *
                C44449) *
               C29367 +
           ((C35744 + C35745) * C151 + (C35818 + C35819) * C44449) * C44603) *
              C44395 * C44407 * C4095 -
          (((C39254 + C39255) * C44449 + (C39198 + C39199) * C151) * C44603 +
           ((C35819 + C35818) * C44449 + (C35745 + C35744) * C151) * C29367) *
              C44395 * C44407 * C4096 +
          (((C39199 + C39198) * C151 + (C39255 + C39254) * C44449) * C29367 +
           ((C4659 * C14559 + C4505 * C14749 + C4660 * C28859 +
             C44601 * C29035) *
                C151 +
            (C4659 * C14629 + C4505 * C14813 + C4660 * C28921 +
             C44601 * C29099) *
                C44449) *
               C44603) *
              C44395 * C44407 * C4097)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[71] +=
        (2 * std::pow(Pi, 2.5) *
         (((C4659 * C93 + C4505 * C250 + C4660 * C642 + C44601 * C824) * C4192 +
           (C4659 * C201 + C4505 * C376 + C4660 * C767 + C44601 * C963) *
               C4095 -
           (C35745 + C35744) * C4193 - (C35890 + C35891) * C4096 +
           (C39199 + C39198) * C4194 + (C39310 + C39311) * C4097) *
              C29367 +
          ((C35744 + C35745) * C4192 + (C35891 + C35890) * C4095 -
           (C39198 + C39199) * C4193 - (C39311 + C39310) * C4096 +
           (C4659 * C14559 + C4505 * C14749 + C4660 * C28859 +
            C44601 * C29035) *
               C4194 +
           (C4659 * C14689 + C4505 * C14870 + C4660 * C28980 +
            C44601 * C29156) *
               C4097) *
              C44603) *
         C44395 * C44449 * C44407) /
        (p * q * std::sqrt(p + q));
    d2eezx[71] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C29669 * C93 + C29367 * C437 + C29670 * C1232 + C44603 * C1616) *
                C2283 +
            (C29669 * C101 + C29367 * C442 + C29670 * C1238 + C44603 * C1619) *
                C44407) *
               C44395 * C4505 +
           ((C35324 + C35325) * C2283 + (C35326 + C35327) * C44407) * C44395 *
               C44601) *
              C4095 -
          (((C37652 + C37653) * C44407 + (C37654 + C37655) * C2283) * C44395 *
               C44601 +
           ((C29670 * C4104 + C44603 * C4368 + C29669 * C1238 +
             C29367 * C1619) *
                C44407 +
            (C29670 * C4098 + C44603 * C4365 + C29669 * C1232 +
             C29367 * C1616) *
                C2283) *
               C44395 * C4505) *
              C4096 +
          (((C29669 * C4098 + C29367 * C4365 + C29670 * C14559 +
             C44603 * C14925) *
                C2283 +
            (C29669 * C4104 + C29367 * C4368 + C29670 * C14563 +
             C44603 * C14927) *
                C44407) *
               C44395 * C4505 +
           ((C29669 * C9357 + C29367 * C9681 + C29670 * C28859 +
             C44603 * C29213) *
                C2283 +
            (C29669 * C9361 + C29367 * C9683 + C29670 * C28861 +
             C44603 * C29214) *
                C44407) *
               C44395 * C44601) *
              C4097) *
         C44449) /
        (p * q * std::sqrt(p + q));
    d2eezy[71] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C29669 * C93 + C29367 * C437 + C29670 * C1232 + C44603 * C1616) *
                C151 +
            (C29669 * C152 + C29367 * C503 + C29670 * C1298 + C44603 * C1688) *
                C44449) *
               C44395 * C4505 +
           ((C35324 + C35325) * C151 + (C35399 + C35398) * C44449) * C44395 *
               C44601) *
              C44407 * C4095 -
          (((C37727 + C37726) * C44449 + (C37654 + C37655) * C151) * C44395 *
               C44601 +
           ((C29670 * C4148 + C44603 * C4409 + C29669 * C1298 +
             C29367 * C1688) *
                C44449 +
            (C29670 * C4098 + C44603 * C4365 + C29669 * C1232 +
             C29367 * C1616) *
                C151) *
               C44395 * C4505) *
              C44407 * C4096 +
          (((C29669 * C4098 + C29367 * C4365 + C29670 * C14559 +
             C44603 * C14925) *
                C151 +
            (C29669 * C4148 + C29367 * C4409 + C29670 * C14629 +
             C44603 * C14979) *
                C44449) *
               C44395 * C4505 +
           ((C29669 * C9357 + C29367 * C9681 + C29670 * C28859 +
             C44603 * C29213) *
                C151 +
            (C29669 * C9415 + C29367 * C9735 + C29670 * C28921 +
             C44603 * C29265) *
                C44449) *
               C44395 * C44601) *
              C44407 * C4097)) /
        (p * q * std::sqrt(p + q));
    d2eezz[71] +=
        (2 * std::pow(Pi, 2.5) *
         (((C29669 * C93 + C29367 * C437 + C29670 * C1232 + C44603 * C1616) *
               C4192 +
           (C29669 * C201 + C29367 * C562 + C29670 * C1357 + C44603 * C1749) *
               C4095 -
           (C29670 * C4098 + C44603 * C4365 + C29669 * C1232 + C29367 * C1616) *
               C4193 -
           (C29670 * C4195 + C44603 * C4450 + C29669 * C1357 + C29367 * C1749) *
               C4096 +
           (C29669 * C4098 + C29367 * C4365 + C29670 * C14559 +
            C44603 * C14925) *
               C4194 +
           (C29669 * C4195 + C29367 * C4450 + C29670 * C14689 +
            C44603 * C15031) *
               C4097) *
              C44395 * C4505 +
          ((C35324 + C35325) * C4192 + (C35470 + C35471) * C4095 -
           (C37654 + C37655) * C4193 - (C37798 + C37799) * C4096 +
           (C29669 * C9357 + C29367 * C9681 + C29670 * C28859 +
            C44603 * C29213) *
               C4194 +
           (C29669 * C9469 + C29367 * C9787 + C29670 * C28980 +
            C44603 * C29316) *
               C4097) *
              C44395 * C44601) *
         C44449 * C44407) /
        (p * q * std::sqrt(p + q));
    d2eexx[72] += (2 * std::pow(Pi, 2.5) *
                   (((C20189 * C93 + C44395 * C98) * C90 +
                     (C20189 * C101 + C44395 * C108) * C80 -
                     (C20189 * C94 + C44395 * C99) * C91 -
                     (C20189 * C102 + C44395 * C109) * C81 +
                     (C20189 * C95 + C44395 * C100) * C92 +
                     (C20189 * C103 + C44395 * C110) * C82) *
                        C44497 * C39499 +
                    (C25280 * C90 + C25281 * C80 - C25282 * C91 - C25283 * C81 +
                     (C20189 * C1230 + C44395 * C1234) * C92 +
                     (C20189 * C1236 + C44395 * C1241) * C82) *
                        C44497 * C39500 +
                    (C28869 * C90 + C28868 * C80 -
                     (C20189 * C4099 + C44395 * C4102) * C91 -
                     (C20189 * C4105 + C44395 * C4108) * C81 +
                     (C20189 * C4100 + C44395 * C4103) * C92 +
                     (C20189 * C4106 + C44395 * C4109) * C82) *
                        C44497 * C39501) *
                   C44464 * C44449) /
                  (p * q * std::sqrt(p + q));
    d2eexy[72] += (2 * std::pow(Pi, 2.5) *
                   ((((C20189 * C93 + C44395 * C98) * C151 +
                      (C20189 * C152 + C44395 * C157) * C44449) *
                         C44497 * C39499 +
                     (C25354 + C25366) * C44497 * C39500 +
                     (C28928 + C28930) * C44497 * C39501) *
                        C80 -
                    (((C20189 * C4149 + C44395 * C4152) * C44449 +
                      (C20189 * C4099 + C44395 * C4102) * C151) *
                         C44497 * C39501 +
                     (C25367 + C25363) * C44497 * C39500 +
                     ((C20189 * C153 + C44395 * C158) * C44449 +
                      (C20189 * C94 + C44395 * C99) * C151) *
                         C44497 * C39499) *
                        C81 +
                    (((C20189 * C95 + C44395 * C100) * C151 +
                      (C20189 * C154 + C44395 * C159) * C44449) *
                         C44497 * C39499 +
                     ((C20189 * C1230 + C44395 * C1234) * C151 +
                      (C20189 * C1296 + C44395 * C1300) * C44449) *
                         C44497 * C39500 +
                     ((C20189 * C4100 + C44395 * C4103) * C151 +
                      (C20189 * C4150 + C44395 * C4153) * C44449) *
                         C44497 * C39501) *
                        C82) *
                   C44464) /
                  (p * q * std::sqrt(p + q));
    d2eexz[72] += (2 * std::pow(Pi, 2.5) *
                   ((((C20189 * C93 + C44395 * C98) * C200 +
                      (C20189 * C201 + C44395 * C206) * C44464) *
                         C44497 * C39499 +
                     (C25280 * C200 + C25438 * C44464) * C44497 * C39500 +
                     (C28869 * C200 + C28985 * C44464) * C44497 * C39501) *
                        C44449 * C80 -
                    (((C20189 * C4196 + C44395 * C4199) * C44464 +
                      (C20189 * C4099 + C44395 * C4102) * C200) *
                         C44497 * C39501 +
                     (C25439 * C44464 + C25282 * C200) * C44497 * C39500 +
                     ((C20189 * C202 + C44395 * C207) * C44464 +
                      (C20189 * C94 + C44395 * C99) * C200) *
                         C44497 * C39499) *
                        C44449 * C81 +
                    (((C20189 * C95 + C44395 * C100) * C200 +
                      (C20189 * C203 + C44395 * C208) * C44464) *
                         C44497 * C39499 +
                     ((C20189 * C1230 + C44395 * C1234) * C200 +
                      (C20189 * C1355 + C44395 * C1359) * C44464) *
                         C44497 * C39500 +
                     ((C20189 * C4100 + C44395 * C4103) * C200 +
                      (C20189 * C4197 + C44395 * C4200) * C44464) *
                         C44497 * C39501) *
                        C44449 * C82)) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[72] += (2 * std::pow(Pi, 2.5) *
                   (((C249 * C93 + C44497 * C250) * C90 +
                     (C249 * C101 + C44497 * C255) * C80 - C273 * C91 -
                     C274 * C81 + C275 * C92 + C276 * C82) *
                        C39499 +
                    (C11258 * C90 + C11259 * C80 - C1430 * C91 - C1431 * C81 +
                     C1432 * C92 + C1433 * C82) *
                        C39500 +
                    (C14761 * C90 + C14760 * C80 - C11260 * C91 - C11261 * C81 +
                     (C249 * C4100 + C44497 * C4241) * C92 +
                     (C249 * C4106 + C44497 * C4244) * C82) *
                        C39501) *
                   C44395 * C44464 * C44449) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[72] += (2 * std::pow(Pi, 2.5) *
                   ((((C249 * C93 + C44497 * C250) * C151 +
                      (C249 * C152 + C44497 * C316) * C44449) *
                         C39499 +
                     (C11330 + C11340) * C39500 + (C14818 + C14820) * C39501) *
                        C44395 * C80 -
                    ((C11341 + C11335) * C39501 + C11334 * C39500 +
                     (C334 + C322) * C39499) *
                        C44395 * C81 +
                    (C337 * C39499 + (C1491 + C1497) * C39500 +
                     ((C249 * C4100 + C44497 * C4241) * C151 +
                      (C249 * C4150 + C44497 * C4285) * C44449) *
                         C39501) *
                        C44395 * C82) *
                   C44464) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[72] += (2 * std::pow(Pi, 2.5) *
                   ((((C249 * C93 + C44497 * C250) * C200 +
                      (C249 * C201 + C44497 * C376) * C44464) *
                         C39499 +
                     (C11258 * C200 + C11415 * C44464) * C39500 +
                     (C14761 * C200 + C14875 * C44464) * C39501) *
                        C44395 * C44449 * C80 -
                    ((C11416 * C44464 + C11260 * C200) * C39501 +
                     (C10093 + C10092) * C39500 + (C394 + C382) * C39499) *
                        C44395 * C44449 * C81 +
                    (C397 * C39499 + (C10095 + C10094) * C39500 +
                     ((C249 * C4100 + C44497 * C4241) * C200 +
                      (C249 * C4197 + C44497 * C4326) * C44464) *
                         C39501) *
                        C44395 * C44449 * C82)) /
                  (p * q * std::sqrt(p + q));
    d2eezx[72] += (2 * std::pow(Pi, 2.5) *
                   ((C39730 * C93 + C39499 * C437 + C39731 * C1232 +
                     C39500 * C1616 + C39732 * C4098 + C39501 * C4365) *
                        C90 +
                    (C39730 * C101 + C39499 * C442 + C39731 * C1238 +
                     C39500 * C1619 + C39732 * C4104 + C39501 * C4368) *
                        C80 -
                    (C39732 * C4099 + C39501 * C4366 + C39731 * C1229 +
                     C39500 * C1615 + C39730 * C94 + C39499 * C438) *
                        C91 -
                    (C39732 * C4105 + C39501 * C4369 + C39731 * C1237 +
                     C39500 * C1620 + C39730 * C102 + C39499 * C443) *
                        C81 +
                    (C39730 * C95 + C39499 * C439 + C39731 * C1230 +
                     C39500 * C1617 + C39732 * C4100 + C39501 * C4367) *
                        C92 +
                    (C39730 * C103 + C39499 * C444 + C39731 * C1236 +
                     C39500 * C1621 + C39732 * C4106 + C39501 * C4370) *
                        C82) *
                   C44395 * C44497 * C44464 * C44449) /
                  (p * q * std::sqrt(p + q));
    d2eezy[72] += (2 * std::pow(Pi, 2.5) *
                   (((C39730 * C93 + C39499 * C437 + C39731 * C1232 +
                      C39500 * C1616 + C39732 * C4098 + C39501 * C4365) *
                         C151 +
                     (C39730 * C152 + C39499 * C503 + C39731 * C1298 +
                      C39500 * C1688 + C39732 * C4148 + C39501 * C4409) *
                         C44449) *
                        C44395 * C44497 * C80 -
                    ((C39732 * C4149 + C39501 * C4410 + C39731 * C1295 +
                      C39500 * C1685 + C39730 * C153 + C39499 * C504) *
                         C44449 +
                     (C39732 * C4099 + C39501 * C4366 + C39731 * C1229 +
                      C39500 * C1615 + C39730 * C94 + C39499 * C438) *
                         C151) *
                        C44395 * C44497 * C81 +
                    ((C39730 * C95 + C39499 * C439 + C39731 * C1230 +
                      C39500 * C1617 + C39732 * C4100 + C39501 * C4367) *
                         C151 +
                     (C39730 * C154 + C39499 * C505 + C39731 * C1296 +
                      C39500 * C1686 + C39732 * C4150 + C39501 * C4411) *
                         C44449) *
                        C44395 * C44497 * C82) *
                   C44464) /
                  (p * q * std::sqrt(p + q));
    d2eezz[72] += (2 * std::pow(Pi, 2.5) *
                   (((C39730 * C93 + C39499 * C437 + C39731 * C1232 +
                      C39500 * C1616 + C39732 * C4098 + C39501 * C4365) *
                         C200 +
                     (C39730 * C201 + C39499 * C562 + C39731 * C1357 +
                      C39500 * C1749 + C39732 * C4195 + C39501 * C4450) *
                         C44464) *
                        C44395 * C44497 * C44449 * C80 -
                    ((C39732 * C4196 + C39501 * C4451 + C39731 * C1356 +
                      C39500 * C1750 + C39730 * C202 + C39499 * C563) *
                         C44464 +
                     (C39732 * C4099 + C39501 * C4366 + C39731 * C1229 +
                      C39500 * C1615 + C39730 * C94 + C39499 * C438) *
                         C200) *
                        C44395 * C44497 * C44449 * C81 +
                    ((C39730 * C95 + C39499 * C439 + C39731 * C1230 +
                      C39500 * C1617 + C39732 * C4100 + C39501 * C4367) *
                         C200 +
                     (C39730 * C203 + C39499 * C564 + C39731 * C1355 +
                      C39500 * C1751 + C39732 * C4197 + C39501 * C4452) *
                         C44464) *
                        C44395 * C44497 * C44449 * C82)) /
                  (p * q * std::sqrt(p + q));
    d2eexx[73] += (2 * std::pow(Pi, 2.5) *
                   ((((C20189 * C93 + C44395 * C98) * C637 +
                      (C20189 * C101 + C44395 * C108) * C633 -
                      (C20189 * C94 + C44395 * C99) * C638 -
                      (C20189 * C102 + C44395 * C109) * C44595) *
                         C44497 * C39499 +
                     (C25284 + C25285 - C25286 - C25287) * C44497 * C39500 +
                     (C28869 * C637 + C28868 * C633 -
                      (C20189 * C4099 + C44395 * C4102) * C638 -
                      (C20189 * C4105 + C44395 * C4108) * C44595) *
                         C44497 * C39501) *
                        C44464 * C635 +
                    ((C20574 - (C20573 + C20572) + C20575) * C44497 * C39499 +
                     (C24642 - (C24635 + C24634) + C24643) * C44497 * C39500 +
                     ((C20189 * C9358 + C44395 * C9360) * C638 -
                      (C27008 * C633 + C27009 * C637) +
                      (C20189 * C9362 + C44395 * C9364) * C44595) *
                         C44497 * C39501) *
                        C44464 * C44597)) /
                  (p * q * std::sqrt(p + q));
    d2eexy[73] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C20189 * C93 + C44395 * C98) * C705 +
            (C20189 * C152 + C44395 * C157) * C635 - C20564 * C706 -
            C20638 * C44597) *
               C44497 * C39499 +
           (C28336 + C28337 - C28338 - C28339) * C44497 * C39500 +
           (C28869 * C705 + C28929 * C635 - C27009 * C706 - C27088 * C44597) *
               C44497 * C39501) *
              C633 +
          ((C20566 * C706 -
            ((C20189 * C153 + C44395 * C158) * C635 +
             (C20189 * C94 + C44395 * C99) * C705) +
            C20640 * C44597) *
               C44497 * C39499 +
           (C24640 * C706 - (C25365 * C635 + C25282 * C705) + C24712 * C44597) *
               C44497 * C39500 +
           ((C20189 * C9358 + C44395 * C9360) * C706 -
            ((C20189 * C4149 + C44395 * C4152) * C635 +
             (C20189 * C4099 + C44395 * C4102) * C705) +
            (C20189 * C9416 + C44395 * C9418) * C44597) *
               C44497 * C39501) *
              C44595) *
         C44464) /
        (p * q * std::sqrt(p + q));
    d2eexz[73] += (2 * std::pow(Pi, 2.5) *
                   (((((C20189 * C93 + C44395 * C98) * C200 +
                       (C20189 * C201 + C44395 * C206) * C44464) *
                          C44497 * C39499 +
                      (C25280 * C200 + C25438 * C44464) * C44497 * C39500 +
                      (C28869 * C200 + C28985 * C44464) * C44497 * C39501) *
                         C635 -
                     ((C27160 * C44464 + C27009 * C200) * C44497 * C39501 +
                      (C24780 + C24779) * C44497 * C39500 +
                      (C20708 + C20692) * C44497 * C39499) *
                         C44597) *
                        C633 +
                    (((C20698 + C20710) * C44497 * C39499 +
                      (C24781 + C24785) * C44497 * C39500 +
                      ((C20189 * C9358 + C44395 * C9360) * C200 +
                       (C20189 * C9470 + C44395 * C9472) * C44464) *
                          C44497 * C39501) *
                         C44597 -
                     (((C20189 * C4196 + C44395 * C4199) * C44464 +
                       (C20189 * C4099 + C44395 * C4102) * C200) *
                          C44497 * C39501 +
                      (C25439 * C44464 + C25282 * C200) * C44497 * C39500 +
                      ((C20189 * C202 + C44395 * C207) * C44464 +
                       (C20189 * C94 + C44395 * C99) * C200) *
                          C44497 * C39499) *
                         C635) *
                        C44595)) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[73] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C249 * C93 + C44497 * C250) * C637 +
            (C249 * C101 + C44497 * C255) * C633 - C273 * C638 -
            C274 * C44595) *
               C39499 +
           (C11262 + C11263 - C11248 - C11249) * C39500 +
           (C14761 * C637 + C14760 * C633 - C11260 * C638 - C11261 * C44595) *
               C39501) *
              C44395 * C44464 * C635 +
          ((C840 * C638 -
            ((C249 * C648 + C44497 * C827) * C633 +
             (C249 * C642 + C44497 * C824) * C637) +
            C841 * C44595) *
               C39499 +
           (C10564 * C638 - (C12963 * C633 + C12962 * C637) + C10565 * C44595) *
               C39500 +
           ((C249 * C9358 + C44497 * C9524) * C638 -
            ((C249 * C9361 + C44497 * C9525) * C633 +
             (C249 * C9357 + C44497 * C9523) * C637) +
            (C249 * C9362 + C44497 * C9526) * C44595) *
               C39501) *
              C44395 * C44464 * C44597)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[73] += (2 * std::pow(Pi, 2.5) *
                   ((((C249 * C93 + C44497 * C250) * C705 +
                      (C249 * C152 + C44497 * C316) * C635 -
                      (C249 * C642 + C44497 * C824) * C706 -
                      (C249 * C709 + C44497 * C893) * C44597) *
                         C39499 +
                     (C14242 + C14243 - C14244 - C14245) * C39500 +
                     (C14761 * C705 + C14819 * C635 -
                      (C249 * C9357 + C44497 * C9523) * C706 -
                      (C249 * C9415 + C44497 * C9577) * C44597) *
                         C39501) *
                        C44395 * C633 +
                    ((C900 - (C899 + C898) + C910) * C39499 +
                     (C10634 - (C10633 + C10632) + C10638) * C39500 +
                     ((C249 * C9358 + C44497 * C9524) * C706 -
                      (C11339 * C635 + C11260 * C705) +
                      (C249 * C9416 + C44497 * C9578) * C44597) *
                         C39501) *
                        C44395 * C44595) *
                   C44464) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[73] += (2 * std::pow(Pi, 2.5) *
                   (((((C249 * C93 + C44497 * C250) * C200 +
                       (C249 * C201 + C44497 * C376) * C44464) *
                          C39499 +
                      (C11258 * C200 + C11415 * C44464) * C39500 +
                      (C14761 * C200 + C14875 * C44464) * C39501) *
                         C44395 * C635 -
                     (((C249 * C9469 + C44497 * C9629) * C44464 +
                       (C249 * C9357 + C44497 * C9523) * C200) *
                          C39501 +
                      (C13107 * C44464 + C12962 * C200) * C39500 +
                      ((C249 * C767 + C44497 * C963) * C44464 +
                       (C249 * C642 + C44497 * C824) * C200) *
                          C39499) *
                         C44395 * C44597) *
                        C633 +
                    (((C971 + C975) * C39499 + (C10707 + C10709) * C39500 +
                      ((C249 * C9358 + C44497 * C9524) * C200 +
                       (C249 * C9470 + C44497 * C9630) * C44464) *
                          C39501) *
                         C44395 * C44597 -
                     ((C11416 * C44464 + C11260 * C200) * C39501 +
                      (C10093 + C10092) * C39500 + (C394 + C382) * C39499) *
                         C44395 * C635) *
                        C44595)) /
                  (p * q * std::sqrt(p + q));
    d2eezx[73] += (2 * std::pow(Pi, 2.5) *
                   (((C39730 * C93 + C39499 * C437 + C39731 * C1232 +
                      C39500 * C1616 + C39732 * C4098 + C39501 * C4365) *
                         C637 +
                     (C39730 * C101 + C39499 * C442 + C39731 * C1238 +
                      C39500 * C1619 + C39732 * C4104 + C39501 * C4368) *
                         C633 -
                     (C39732 * C4099 + C39501 * C4366 + C39731 * C1229 +
                      C39500 * C1615 + C39730 * C94 + C39499 * C438) *
                         C638 -
                     (C39732 * C4105 + C39501 * C4369 + C39731 * C1237 +
                      C39500 * C1620 + C39730 * C102 + C39499 * C443) *
                         C44595) *
                        C44395 * C44497 * C44464 * C635 +
                    ((C39730 * C639 + C39499 * C1025 + C39731 * C2690 +
                      C39500 * C3026 + C39732 * C9358 + C39501 * C9682) *
                         C638 -
                     ((C39732 * C9361 + C39501 * C9683 + C39731 * C2695 +
                       C39500 * C3028 + C39730 * C648 + C39499 * C1029) *
                          C633 +
                      (C39732 * C9357 + C39501 * C9681 + C39731 * C2689 +
                       C39500 * C3025 + C39730 * C642 + C39499 * C1026) *
                          C637) +
                     (C39730 * C647 + C39499 * C1030 + C39731 * C2696 +
                      C39500 * C3029 + C39732 * C9362 + C39501 * C9684) *
                         C44595) *
                        C44395 * C44497 * C44464 * C44597)) /
                  (p * q * std::sqrt(p + q));
    d2eezy[73] += (2 * std::pow(Pi, 2.5) *
                   (((C39730 * C93 + C39499 * C437 + C39731 * C1232 +
                      C39500 * C1616 + C39732 * C4098 + C39501 * C4365) *
                         C705 +
                     (C39730 * C152 + C39499 * C503 + C39731 * C1298 +
                      C39500 * C1688 + C39732 * C4148 + C39501 * C4409) *
                         C635 -
                     (C39732 * C9357 + C39501 * C9681 + C39731 * C2689 +
                      C39500 * C3025 + C39730 * C642 + C39499 * C1026) *
                         C706 -
                     (C39732 * C9415 + C39501 * C9735 + C39731 * C2751 +
                      C39500 * C3081 + C39730 * C709 + C39499 * C1095) *
                         C44597) *
                        C44395 * C44497 * C633 +
                    ((C39730 * C639 + C39499 * C1025 + C39731 * C2690 +
                      C39500 * C3026 + C39732 * C9358 + C39501 * C9682) *
                         C706 -
                     ((C39732 * C4149 + C39501 * C4410 + C39731 * C1295 +
                       C39500 * C1685 + C39730 * C153 + C39499 * C504) *
                          C635 +
                      (C39732 * C4099 + C39501 * C4366 + C39731 * C1229 +
                       C39500 * C1615 + C39730 * C94 + C39499 * C438) *
                          C705) +
                     (C39730 * C708 + C39499 * C1096 + C39731 * C2752 +
                      C39500 * C3082 + C39732 * C9416 + C39501 * C9736) *
                         C44597) *
                        C44395 * C44497 * C44595) *
                   C44464) /
                  (p * q * std::sqrt(p + q));
    d2eezz[73] += (2 * std::pow(Pi, 2.5) *
                   ((((C39730 * C93 + C39499 * C437 + C39731 * C1232 +
                       C39500 * C1616 + C39732 * C4098 + C39501 * C4365) *
                          C200 +
                      (C39730 * C201 + C39499 * C562 + C39731 * C1357 +
                       C39500 * C1749 + C39732 * C4195 + C39501 * C4450) *
                          C44464) *
                         C44395 * C44497 * C635 -
                     ((C39732 * C9469 + C39501 * C9787 + C39731 * C2807 +
                       C39500 * C3134 + C39730 * C767 + C39499 * C1165) *
                          C44464 +
                      (C39732 * C9357 + C39501 * C9681 + C39731 * C2689 +
                       C39500 * C3025 + C39730 * C642 + C39499 * C1026) *
                          C200) *
                         C44395 * C44497 * C44597) *
                        C633 +
                    (((C39730 * C639 + C39499 * C1025 + C39731 * C2690 +
                       C39500 * C3026 + C39732 * C9358 + C39501 * C9682) *
                          C200 +
                      (C39730 * C766 + C39499 * C1164 + C39731 * C2808 +
                       C39500 * C3135 + C39732 * C9470 + C39501 * C9788) *
                          C44464) *
                         C44395 * C44497 * C44597 -
                     ((C39732 * C4196 + C39501 * C4451 + C39731 * C1356 +
                       C39500 * C1750 + C39730 * C202 + C39499 * C563) *
                          C44464 +
                      (C39732 * C4099 + C39501 * C4366 + C39731 * C1229 +
                       C39500 * C1615 + C39730 * C94 + C39499 * C438) *
                          C200) *
                         C44395 * C44497 * C635) *
                        C44595)) /
                  (p * q * std::sqrt(p + q));
    d2eexx[74] += (2 * std::pow(Pi, 2.5) *
                   ((((C20189 * C93 + C44395 * C98) * C637 +
                      (C20189 * C101 + C44395 * C108) * C633 -
                      (C20189 * C94 + C44395 * C99) * C638 -
                      (C20189 * C102 + C44395 * C109) * C44595) *
                         C44497 * C39499 +
                     (C25284 + C25285 - C25286 - C25287) * C44497 * C39500 +
                     (C40310 + C40311 - C40318 - C40319) * C44497 * C39501) *
                        C1227 +
                    ((C25286 - (C25285 + C25284) + C25287) * C44497 * C39499 +
                     (C40318 - (C40311 + C40310) + C40319) * C44497 * C39500 +
                     ((C20189 * C14560 + C44395 * C14562) * C638 -
                      ((C20189 * C14563 + C44395 * C14565) * C633 +
                       (C20189 * C14559 + C44395 * C14561) * C637) +
                      (C20189 * C14564 + C44395 * C14566) * C44595) *
                         C44497 * C39501) *
                        C44599) *
                   C44449) /
                  (p * q * std::sqrt(p + q));
    d2eexy[74] += (2 * std::pow(Pi, 2.5) *
                   (((((C20189 * C93 + C44395 * C98) * C151 +
                       (C20189 * C152 + C44395 * C157) * C44449) *
                          C44497 * C39499 +
                      (C25354 + C25366) * C44497 * C39500 +
                      (C28928 + C28930) * C44497 * C39501) *
                         C633 -
                     ((C40374 + C40372) * C44497 * C39501 +
                      (C25367 + C25363) * C44497 * C39500 +
                      ((C20189 * C153 + C44395 * C158) * C44449 +
                       (C20189 * C94 + C44395 * C99) * C151) *
                          C44497 * C39499) *
                         C44595) *
                        C1227 +
                    (((C25363 + C25367) * C44497 * C39499 +
                      (C40372 + C40374) * C44497 * C39500 +
                      ((C20189 * C14560 + C44395 * C14562) * C151 +
                       (C20189 * C14630 + C44395 * C14632) * C44449) *
                          C44497 * C39501) *
                         C44595 -
                     (((C20189 * C14629 + C44395 * C14631) * C44449 +
                       (C20189 * C14559 + C44395 * C14561) * C151) *
                          C44497 * C39501 +
                      (C28930 + C28928) * C44497 * C39500 +
                      (C25366 + C25354) * C44497 * C39499) *
                         C633) *
                        C44599)) /
                  (p * q * std::sqrt(p + q));
    d2eexz[74] += (2 * std::pow(Pi, 2.5) *
                   ((((C20189 * C93 + C44395 * C98) * C1353 +
                      (C20189 * C201 + C44395 * C206) * C1227 - C25280 * C1354 -
                      C25438 * C44599) *
                         C44497 * C39499 +
                     (C25280 * C1353 + C25438 * C1227 - C28869 * C1354 -
                      C28985 * C44599) *
                         C44497 * C39500 +
                     (C28869 * C1353 + C28985 * C1227 -
                      (C20189 * C14559 + C44395 * C14561) * C1354 -
                      (C20189 * C14689 + C44395 * C14691) * C44599) *
                         C44497 * C39501) *
                        C44449 * C633 +
                    ((C25282 * C1354 -
                      ((C20189 * C202 + C44395 * C207) * C1227 +
                       (C20189 * C94 + C44395 * C99) * C1353) +
                      C25439 * C44599) *
                         C44497 * C39499 +
                     (C40316 * C1354 - (C25439 * C1227 + C25282 * C1353) +
                      C40427 * C44599) *
                         C44497 * C39500 +
                     ((C20189 * C14560 + C44395 * C14562) * C1354 -
                      (C40427 * C1227 + C40316 * C1353) +
                      (C20189 * C14690 + C44395 * C14692) * C44599) *
                         C44497 * C39501) *
                        C44449 * C44595)) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[74] += (2 * std::pow(Pi, 2.5) *
                   ((((C249 * C93 + C44497 * C250) * C637 +
                      (C249 * C101 + C44497 * C255) * C633 - C273 * C638 -
                      C274 * C44595) *
                         C39499 +
                     (C11262 + C11263 - C11248 - C11249) * C39500 +
                     (C40478 + C40479 - C40480 - C40481) * C39501) *
                        C44395 * C1227 +
                    ((C11248 - (C11263 + C11262) + C11249) * C39499 +
                     (C40480 - (C40479 + C40478) + C40481) * C39500 +
                     ((C249 * C14560 + C44497 * C14750) * C638 -
                      ((C249 * C14563 + C44497 * C14751) * C633 +
                       (C249 * C14559 + C44497 * C14749) * C637) +
                      (C249 * C14564 + C44497 * C14752) * C44595) *
                         C39501) *
                        C44395 * C44599) *
                   C44449) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[74] += (2 * std::pow(Pi, 2.5) *
                   (((((C249 * C93 + C44497 * C250) * C151 +
                       (C249 * C152 + C44497 * C316) * C44449) *
                          C39499 +
                      (C11330 + C11340) * C39500 + (C14818 + C14820) * C39501) *
                         C44395 * C633 -
                     ((C11341 + C11335) * C39501 + C11334 * C39500 +
                      (C334 + C322) * C39499) *
                         C44395 * C44595) *
                        C1227 +
                    ((C11333 * C39499 + (C11335 + C11341) * C39500 +
                      ((C249 * C14560 + C44497 * C14750) * C151 +
                       (C249 * C14630 + C44497 * C14814) * C44449) *
                          C39501) *
                         C44395 * C44595 -
                     (((C249 * C14629 + C44497 * C14813) * C44449 +
                       (C249 * C14559 + C44497 * C14749) * C151) *
                          C39501 +
                      (C14820 + C14818) * C39500 + (C11340 + C11330) * C39499) *
                         C44395 * C633) *
                        C44599)) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[74] += (2 * std::pow(Pi, 2.5) *
                   ((((C249 * C93 + C44497 * C250) * C1353 +
                      (C249 * C201 + C44497 * C376) * C1227 - C11258 * C1354 -
                      C11415 * C44599) *
                         C39499 +
                     (C11258 * C1353 + C11415 * C1227 - C14761 * C1354 -
                      C14875 * C44599) *
                         C39500 +
                     (C14761 * C1353 + C14875 * C1227 -
                      (C249 * C14559 + C44497 * C14749) * C1354 -
                      (C249 * C14689 + C44497 * C14870) * C44599) *
                         C39501) *
                        C44395 * C44449 * C633 +
                    ((C1554 - (C1553 + C1552) + C1564) * C39499 +
                     (C11412 - (C11411 + C11410) + C11417) * C39500 +
                     ((C249 * C14560 + C44497 * C14750) * C1354 -
                      (C11416 * C1227 + C11260 * C1353) +
                      (C249 * C14690 + C44497 * C14871) * C44599) *
                         C39501) *
                        C44395 * C44449 * C44595)) /
                  (p * q * std::sqrt(p + q));
    d2eezx[74] += (2 * std::pow(Pi, 2.5) *
                   (((C39730 * C93 + C39499 * C437 + C39731 * C1232 +
                      C39500 * C1616 + C39732 * C4098 + C39501 * C4365) *
                         C637 +
                     (C39730 * C101 + C39499 * C442 + C39731 * C1238 +
                      C39500 * C1619 + C39732 * C4104 + C39501 * C4368) *
                         C633 -
                     (C39732 * C4099 + C39501 * C4366 + C39731 * C1229 +
                      C39500 * C1615 + C39730 * C94 + C39499 * C438) *
                         C638 -
                     (C39732 * C4105 + C39501 * C4369 + C39731 * C1237 +
                      C39500 * C1620 + C39730 * C102 + C39499 * C443) *
                         C44595) *
                        C44395 * C44497 * C1227 +
                    ((C39730 * C1229 + C39499 * C1615 + C39731 * C4099 +
                      C39500 * C4366 + C39732 * C14560 + C39501 * C14926) *
                         C638 -
                     ((C39732 * C14563 + C39501 * C14927 + C39731 * C4104 +
                       C39500 * C4368 + C39730 * C1238 + C39499 * C1619) *
                          C633 +
                      (C39732 * C14559 + C39501 * C14925 + C39731 * C4098 +
                       C39500 * C4365 + C39730 * C1232 + C39499 * C1616) *
                          C637) +
                     (C39730 * C1237 + C39499 * C1620 + C39731 * C4105 +
                      C39500 * C4369 + C39732 * C14564 + C39501 * C14928) *
                         C44595) *
                        C44395 * C44497 * C44599) *
                   C44449) /
                  (p * q * std::sqrt(p + q));
    d2eezy[74] += (2 * std::pow(Pi, 2.5) *
                   ((((C39730 * C93 + C39499 * C437 + C39731 * C1232 +
                       C39500 * C1616 + C39732 * C4098 + C39501 * C4365) *
                          C151 +
                      (C39730 * C152 + C39499 * C503 + C39731 * C1298 +
                       C39500 * C1688 + C39732 * C4148 + C39501 * C4409) *
                          C44449) *
                         C44395 * C44497 * C633 -
                     ((C39732 * C4149 + C39501 * C4410 + C39731 * C1295 +
                       C39500 * C1685 + C39730 * C153 + C39499 * C504) *
                          C44449 +
                      (C39732 * C4099 + C39501 * C4366 + C39731 * C1229 +
                       C39500 * C1615 + C39730 * C94 + C39499 * C438) *
                          C151) *
                         C44395 * C44497 * C44595) *
                        C1227 +
                    (((C39730 * C1229 + C39499 * C1615 + C39731 * C4099 +
                       C39500 * C4366 + C39732 * C14560 + C39501 * C14926) *
                          C151 +
                      (C39730 * C1295 + C39499 * C1685 + C39731 * C4149 +
                       C39500 * C4410 + C39732 * C14630 + C39501 * C14980) *
                          C44449) *
                         C44395 * C44497 * C44595 -
                     ((C39732 * C14629 + C39501 * C14979 + C39731 * C4148 +
                       C39500 * C4409 + C39730 * C1298 + C39499 * C1688) *
                          C44449 +
                      (C39732 * C14559 + C39501 * C14925 + C39731 * C4098 +
                       C39500 * C4365 + C39730 * C1232 + C39499 * C1616) *
                          C151) *
                         C44395 * C44497 * C633) *
                        C44599)) /
                  (p * q * std::sqrt(p + q));
    d2eezz[74] += (2 * std::pow(Pi, 2.5) *
                   (((C39730 * C93 + C39499 * C437 + C39731 * C1232 +
                      C39500 * C1616 + C39732 * C4098 + C39501 * C4365) *
                         C1353 +
                     (C39730 * C201 + C39499 * C562 + C39731 * C1357 +
                      C39500 * C1749 + C39732 * C4195 + C39501 * C4450) *
                         C1227 -
                     (C39732 * C14559 + C39501 * C14925 + C39731 * C4098 +
                      C39500 * C4365 + C39730 * C1232 + C39499 * C1616) *
                         C1354 -
                     (C39732 * C14689 + C39501 * C15031 + C39731 * C4195 +
                      C39500 * C4450 + C39730 * C1357 + C39499 * C1749) *
                         C44599) *
                        C44395 * C44497 * C44449 * C633 +
                    ((C39730 * C1229 + C39499 * C1615 + C39731 * C4099 +
                      C39500 * C4366 + C39732 * C14560 + C39501 * C14926) *
                         C1354 -
                     ((C39732 * C4196 + C39501 * C4451 + C39731 * C1356 +
                       C39500 * C1750 + C39730 * C202 + C39499 * C563) *
                          C1227 +
                      (C39732 * C4099 + C39501 * C4366 + C39731 * C1229 +
                       C39500 * C1615 + C39730 * C94 + C39499 * C438) *
                          C1353) +
                     (C39730 * C1356 + C39499 * C1750 + C39731 * C4196 +
                      C39500 * C4451 + C39732 * C14690 + C39501 * C15032) *
                         C44599) *
                        C44395 * C44497 * C44449 * C44595)) /
                  (p * q * std::sqrt(p + q));
    d2eexx[75] += (2 * std::pow(Pi, 2.5) *
                   ((((C20189 * C93 + C44395 * C98) * C1821 +
                      (C20189 * C101 + C44395 * C108) * C1817 -
                      (C20189 * C94 + C44395 * C99) * C1822 -
                      (C20189 * C102 + C44395 * C109) * C44595) *
                         C44497 * C39499 +
                     (C27672 + C27673 - C27674 - C27675) * C44497 * C39500 +
                     (C28869 * C1821 + C28868 * C1817 - C40316 * C1822 -
                      C40317 * C44595) *
                         C44497 * C39501) *
                        C44464 * C1819 +
                    ((C21518 - (C21517 + C21516) + C21519) * C44497 * C39499 +
                     (C25928 - (C25927 + C25926) + C25929) * C44497 * C39500 +
                     ((C20189 * C9358 + C44395 * C9360) * C1822 -
                      (C27008 * C1817 + C27009 * C1821) +
                      (C20189 * C9362 + C44395 * C9364) * C44595) *
                         C44497 * C39501) *
                        C44464 * C44597)) /
                  (p * q * std::sqrt(p + q));
    d2eexy[75] += (2 * std::pow(Pi, 2.5) *
                   ((((C20189 * C93 + C44395 * C98) * C1873 +
                      (C20189 * C152 + C44395 * C157) * C1819 - C20564 * C1874 -
                      C20638 * C44597) *
                         C44497 * C39499 +
                     (C27078 + C27079 - C27080 - C27081) * C44497 * C39500 +
                     (C28869 * C1873 + C28929 * C1819 - C27009 * C1874 -
                      C27088 * C44597) *
                         C44497 * C39501) *
                        C1817 +
                    ((C20566 * C1874 -
                      ((C20189 * C153 + C44395 * C158) * C1819 +
                       (C20189 * C94 + C44395 * C99) * C1873) +
                      C20640 * C44597) *
                         C44497 * C39499 +
                     (C24640 * C1874 - (C25365 * C1819 + C25282 * C1873) +
                      C24712 * C44597) *
                         C44497 * C39500 +
                     ((C20189 * C9358 + C44395 * C9360) * C1874 -
                      (C40373 * C1819 + C40316 * C1873) +
                      (C20189 * C9416 + C44395 * C9418) * C44597) *
                         C44497 * C39501) *
                        C44595) *
                   C44464) /
                  (p * q * std::sqrt(p + q));
    d2eexz[75] += (2 * std::pow(Pi, 2.5) *
                   (((((C20189 * C93 + C44395 * C98) * C200 +
                       (C20189 * C201 + C44395 * C206) * C44464) *
                          C44497 * C39499 +
                      (C25280 * C200 + C25438 * C44464) * C44497 * C39500 +
                      (C28869 * C200 + C28985 * C44464) * C44497 * C39501) *
                         C1819 -
                     ((C27160 * C44464 + C27009 * C200) * C44497 * C39501 +
                      (C24780 + C24779) * C44497 * C39500 +
                      (C20708 + C20692) * C44497 * C39499) *
                         C44597) *
                        C1817 +
                    (((C20698 + C20710) * C44497 * C39499 +
                      (C24781 + C24785) * C44497 * C39500 +
                      ((C20189 * C9358 + C44395 * C9360) * C200 +
                       (C20189 * C9470 + C44395 * C9472) * C44464) *
                          C44497 * C39501) *
                         C44597 -
                     ((C40427 * C44464 + C40316 * C200) * C44497 * C39501 +
                      (C25439 * C44464 + C25282 * C200) * C44497 * C39500 +
                      ((C20189 * C202 + C44395 * C207) * C44464 +
                       (C20189 * C94 + C44395 * C99) * C200) *
                          C44497 * C39499) *
                         C1819) *
                        C44595)) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[75] += (2 * std::pow(Pi, 2.5) *
                   ((((C249 * C93 + C44497 * C250) * C1821 +
                      (C249 * C101 + C44497 * C255) * C1817 - C273 * C1822 -
                      C274 * C44595) *
                         C39499 +
                     (C13570 + C13571 - C13572 - C13573) * C39500 +
                     (C14761 * C1821 + C14760 * C1817 - C11260 * C1822 -
                      C11261 * C44595) *
                         C39501) *
                        C44395 * C44464 * C1819 +
                    ((C840 * C1822 -
                      ((C249 * C648 + C44497 * C827) * C1817 +
                       (C249 * C642 + C44497 * C824) * C1821) +
                      C841 * C44595) *
                         C39499 +
                     (C10564 * C1822 - (C12963 * C1817 + C12962 * C1821) +
                      C10565 * C44595) *
                         C39500 +
                     ((C249 * C9358 + C44497 * C9524) * C1822 -
                      ((C249 * C9361 + C44497 * C9525) * C1817 +
                       (C249 * C9357 + C44497 * C9523) * C1821) +
                      (C249 * C9362 + C44497 * C9526) * C44595) *
                         C39501) *
                        C44395 * C44464 * C44597)) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[75] += (2 * std::pow(Pi, 2.5) *
                   ((((C249 * C93 + C44497 * C250) * C1873 +
                      (C249 * C152 + C44497 * C316) * C1819 -
                      (C249 * C642 + C44497 * C824) * C1874 -
                      (C249 * C709 + C44497 * C893) * C44597) *
                         C39499 +
                     (C13032 + C13033 - C13034 - C13038) * C39500 +
                     (C14761 * C1873 + C14819 * C1819 -
                      (C249 * C9357 + C44497 * C9523) * C1874 -
                      (C249 * C9415 + C44497 * C9577) * C44597) *
                         C39501) *
                        C44395 * C1817 +
                    ((C2028 - (C2027 + C2026) + C2029) * C39499 +
                     (C11972 - (C11971 + C11970) + C11973) * C39500 +
                     ((C249 * C9358 + C44497 * C9524) * C1874 -
                      (C11339 * C1819 + C11260 * C1873) +
                      (C249 * C9416 + C44497 * C9578) * C44597) *
                         C39501) *
                        C44395 * C44595) *
                   C44464) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[75] += (2 * std::pow(Pi, 2.5) *
                   (((((C249 * C93 + C44497 * C250) * C200 +
                       (C249 * C201 + C44497 * C376) * C44464) *
                          C39499 +
                      (C11258 * C200 + C11415 * C44464) * C39500 +
                      (C14761 * C200 + C14875 * C44464) * C39501) *
                         C44395 * C1819 -
                     (((C249 * C9469 + C44497 * C9629) * C44464 +
                       (C249 * C9357 + C44497 * C9523) * C200) *
                          C39501 +
                      (C13107 * C44464 + C12962 * C200) * C39500 +
                      ((C249 * C767 + C44497 * C963) * C44464 +
                       (C249 * C642 + C44497 * C824) * C200) *
                          C39499) *
                         C44395 * C44597) *
                        C1817 +
                    (((C971 + C975) * C39499 + (C10707 + C10709) * C39500 +
                      ((C249 * C9358 + C44497 * C9524) * C200 +
                       (C249 * C9470 + C44497 * C9630) * C44464) *
                          C39501) *
                         C44395 * C44597 -
                     ((C11416 * C44464 + C11260 * C200) * C39501 +
                      (C10093 + C10092) * C39500 + (C394 + C382) * C39499) *
                         C44395 * C1819) *
                        C44595)) /
                  (p * q * std::sqrt(p + q));
    d2eezx[75] += (2 * std::pow(Pi, 2.5) *
                   (((C39730 * C93 + C39499 * C437 + C39731 * C1232 +
                      C39500 * C1616 + C39732 * C4098 + C39501 * C4365) *
                         C1821 +
                     (C39730 * C101 + C39499 * C442 + C39731 * C1238 +
                      C39500 * C1619 + C39732 * C4104 + C39501 * C4368) *
                         C1817 -
                     (C39732 * C4099 + C39501 * C4366 + C39731 * C1229 +
                      C39500 * C1615 + C39730 * C94 + C39499 * C438) *
                         C1822 -
                     (C39732 * C4105 + C39501 * C4369 + C39731 * C1237 +
                      C39500 * C1620 + C39730 * C102 + C39499 * C443) *
                         C44595) *
                        C44395 * C44497 * C44464 * C1819 +
                    ((C39730 * C639 + C39499 * C1025 + C39731 * C2690 +
                      C39500 * C3026 + C39732 * C9358 + C39501 * C9682) *
                         C1822 -
                     ((C39732 * C9361 + C39501 * C9683 + C39731 * C2695 +
                       C39500 * C3028 + C39730 * C648 + C39499 * C1029) *
                          C1817 +
                      (C39732 * C9357 + C39501 * C9681 + C39731 * C2689 +
                       C39500 * C3025 + C39730 * C642 + C39499 * C1026) *
                          C1821) +
                     (C39730 * C647 + C39499 * C1030 + C39731 * C2696 +
                      C39500 * C3029 + C39732 * C9362 + C39501 * C9684) *
                         C44595) *
                        C44395 * C44497 * C44464 * C44597)) /
                  (p * q * std::sqrt(p + q));
    d2eezy[75] += (2 * std::pow(Pi, 2.5) *
                   (((C39730 * C93 + C39499 * C437 + C39731 * C1232 +
                      C39500 * C1616 + C39732 * C4098 + C39501 * C4365) *
                         C1873 +
                     (C39730 * C152 + C39499 * C503 + C39731 * C1298 +
                      C39500 * C1688 + C39732 * C4148 + C39501 * C4409) *
                         C1819 -
                     (C39732 * C9357 + C39501 * C9681 + C39731 * C2689 +
                      C39500 * C3025 + C39730 * C642 + C39499 * C1026) *
                         C1874 -
                     (C39732 * C9415 + C39501 * C9735 + C39731 * C2751 +
                      C39500 * C3081 + C39730 * C709 + C39499 * C1095) *
                         C44597) *
                        C44395 * C44497 * C1817 +
                    ((C39730 * C639 + C39499 * C1025 + C39731 * C2690 +
                      C39500 * C3026 + C39732 * C9358 + C39501 * C9682) *
                         C1874 -
                     ((C39732 * C4149 + C39501 * C4410 + C39731 * C1295 +
                       C39500 * C1685 + C39730 * C153 + C39499 * C504) *
                          C1819 +
                      (C39732 * C4099 + C39501 * C4366 + C39731 * C1229 +
                       C39500 * C1615 + C39730 * C94 + C39499 * C438) *
                          C1873) +
                     (C39730 * C708 + C39499 * C1096 + C39731 * C2752 +
                      C39500 * C3082 + C39732 * C9416 + C39501 * C9736) *
                         C44597) *
                        C44395 * C44497 * C44595) *
                   C44464) /
                  (p * q * std::sqrt(p + q));
    d2eezz[75] += (2 * std::pow(Pi, 2.5) *
                   ((((C39730 * C93 + C39499 * C437 + C39731 * C1232 +
                       C39500 * C1616 + C39732 * C4098 + C39501 * C4365) *
                          C200 +
                      (C39730 * C201 + C39499 * C562 + C39731 * C1357 +
                       C39500 * C1749 + C39732 * C4195 + C39501 * C4450) *
                          C44464) *
                         C44395 * C44497 * C1819 -
                     ((C39732 * C9469 + C39501 * C9787 + C39731 * C2807 +
                       C39500 * C3134 + C39730 * C767 + C39499 * C1165) *
                          C44464 +
                      (C39732 * C9357 + C39501 * C9681 + C39731 * C2689 +
                       C39500 * C3025 + C39730 * C642 + C39499 * C1026) *
                          C200) *
                         C44395 * C44497 * C44597) *
                        C1817 +
                    (((C39730 * C639 + C39499 * C1025 + C39731 * C2690 +
                       C39500 * C3026 + C39732 * C9358 + C39501 * C9682) *
                          C200 +
                      (C39730 * C766 + C39499 * C1164 + C39731 * C2808 +
                       C39500 * C3135 + C39732 * C9470 + C39501 * C9788) *
                          C44464) *
                         C44395 * C44497 * C44597 -
                     ((C39732 * C4196 + C39501 * C4451 + C39731 * C1356 +
                       C39500 * C1750 + C39730 * C202 + C39499 * C563) *
                          C44464 +
                      (C39732 * C4099 + C39501 * C4366 + C39731 * C1229 +
                       C39500 * C1615 + C39730 * C94 + C39499 * C438) *
                          C200) *
                         C44395 * C44497 * C1819) *
                        C44595)) /
                  (p * q * std::sqrt(p + q));
    d2eexx[76] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C20189 * C93 + C44395 * C98) * C2283 +
            (C20189 * C101 + C44395 * C108) * C44407) *
               C44497 * C39499 +
           (C27000 + C27001) * C44497 * C39500 +
           (C28871 + C28870) * C44497 * C39501) *
              C44464 * C2280 -
          ((C27010 + C27011) * C44497 * C39501 + C27007 * C44497 * C39500 +
           (C21971 + C21970) * C44497 * C39499) *
              C44464 * C2281 +
          (C21978 * C44497 * C39499 + (C22395 + C22394) * C44497 * C39500 +
           ((C20189 * C23797 + C44395 * C23798) * C2283 +
            (C20189 * C23799 + C44395 * C23800) * C44407) *
               C44497 * C39501) *
              C44464 * C2282)) /
        (p * q * std::sqrt(p + q));
    d2eexy[76] +=
        (2 * std::pow(Pi, 2.5) *
         (((C20189 * C93 + C44395 * C98) * C2334 +
           (C20189 * C152 + C44395 * C157) * C2280 - C20564 * C2335 -
           C20638 * C2281 + C20568 * C2336 + C20639 * C2282) *
              C44497 * C39499 +
          (C25280 * C2334 + C25364 * C2280 - C22393 * C2335 - C22454 * C2281 +
           C22391 * C2336 + C22455 * C2282) *
              C44497 * C39500 +
          (C28869 * C2334 + C28929 * C2280 - C27009 * C2335 - C27088 * C2281 +
           (C20189 * C23797 + C44395 * C23798) * C2336 +
           (C20189 * C23839 + C44395 * C23840) * C2282) *
              C44497 * C39501) *
         C44407 * C44464) /
        (p * q * std::sqrt(p + q));
    d2eexz[76] +=
        (2 * std::pow(Pi, 2.5) *
         ((((C20189 * C93 + C44395 * C98) * C200 +
            (C20189 * C201 + C44395 * C206) * C44464) *
               C44497 * C39499 +
           (C25280 * C200 + C25438 * C44464) * C44497 * C39500 +
           (C28869 * C200 + C28985 * C44464) * C44497 * C39501) *
              C2280 -
          ((C27160 * C44464 + C27009 * C200) * C44497 * C39501 +
           (C24780 + C24779) * C44497 * C39500 +
           (C20708 + C20692) * C44497 * C39499) *
              C2281 +
          (C22066 * C44497 * C39499 + (C26609 + C26608) * C44497 * C39500 +
           ((C20189 * C23797 + C44395 * C23798) * C200 +
            (C20189 * C23879 + C44395 * C23880) * C44464) *
               C44497 * C39501) *
              C2282) *
         C44407) /
        (p * q * std::sqrt(p + q));
    d2eeyx[76] += (2 * std::pow(Pi, 2.5) *
                   ((((C249 * C93 + C44497 * C250) * C2283 +
                      (C249 * C101 + C44497 * C255) * C44407) *
                         C39499 +
                     (C12952 + C12953) * C39500 + (C14763 + C14762) * C39501) *
                        C44395 * C44464 * C2280 -
                    (((C249 * C9361 + C44497 * C9525) * C44407 +
                      (C249 * C9357 + C44497 * C9523) * C2283) *
                         C39501 +
                     (C12965 + C12964) * C39500 +
                     ((C249 * C648 + C44497 * C827) * C44407 +
                      (C249 * C642 + C44497 * C824) * C2283) *
                         C39499) *
                        C44395 * C44464 * C2281 +
                    (((C249 * C2284 + C44497 * C2425) * C2283 +
                      (C249 * C2290 + C44497 * C2428) * C44407) *
                         C39499 +
                     ((C249 * C7507 + C44497 * C7745) * C2283 +
                      (C249 * C7511 + C44497 * C7747) * C44407) *
                         C39500 +
                     ((C249 * C23797 + C44497 * C23919) * C2283 +
                      (C249 * C23799 + C44497 * C23920) * C44407) *
                         C39501) *
                        C44395 * C44464 * C2282)) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[76] += (2 * std::pow(Pi, 2.5) *
                   (((C249 * C93 + C44497 * C250) * C2334 +
                     (C249 * C152 + C44497 * C316) * C2280 -
                     (C249 * C642 + C44497 * C824) * C2335 -
                     (C249 * C709 + C44497 * C893) * C2281 +
                     (C249 * C2284 + C44497 * C2425) * C2336 +
                     (C249 * C2337 + C44497 * C2469) * C2282) *
                        C39499 +
                    (C11258 * C2334 + C11338 * C2280 - C12962 * C2335 -
                     C13037 * C2281 + (C249 * C7507 + C44497 * C7745) * C2336 +
                     (C249 * C7593 + C44497 * C7815) * C2282) *
                        C39500 +
                    (C14761 * C2334 + C14819 * C2280 -
                     (C249 * C9357 + C44497 * C9523) * C2335 -
                     (C249 * C9415 + C44497 * C9577) * C2281 +
                     (C249 * C23797 + C44497 * C23919) * C2336 +
                     (C249 * C23839 + C44497 * C23959) * C2282) *
                        C39501) *
                   C44395 * C44407 * C44464) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[76] += (2 * std::pow(Pi, 2.5) *
                   ((((C249 * C93 + C44497 * C250) * C200 +
                      (C249 * C201 + C44497 * C376) * C44464) *
                         C39499 +
                     (C11258 * C200 + C11415 * C44464) * C39500 +
                     (C14761 * C200 + C14875 * C44464) * C39501) *
                        C44395 * C2280 -
                    (((C249 * C9469 + C44497 * C9629) * C44464 +
                      (C249 * C9357 + C44497 * C9523) * C200) *
                         C39501 +
                     (C13107 * C44464 + C12962 * C200) * C39500 +
                     ((C249 * C767 + C44497 * C963) * C44464 +
                      (C249 * C642 + C44497 * C824) * C200) *
                         C39499) *
                        C44395 * C2281 +
                    (((C249 * C2284 + C44497 * C2425) * C200 +
                      (C249 * C2381 + C44497 * C2510) * C44464) *
                         C39499 +
                     ((C249 * C7507 + C44497 * C7745) * C200 +
                      (C249 * C7669 + C44497 * C7883) * C44464) *
                         C39500 +
                     ((C249 * C23797 + C44497 * C23919) * C200 +
                      (C249 * C23879 + C44497 * C23998) * C44464) *
                         C39501) *
                        C44395 * C2282) *
                   C44407) /
                  (p * q * std::sqrt(p + q));
    d2eezx[76] += (2 * std::pow(Pi, 2.5) *
                   (((C39730 * C93 + C39499 * C437 + C39731 * C1232 +
                      C39500 * C1616 + C39732 * C4098 + C39501 * C4365) *
                         C2283 +
                     (C39730 * C101 + C39499 * C442 + C39731 * C1238 +
                      C39500 * C1619 + C39732 * C4104 + C39501 * C4368) *
                         C44407) *
                        C44395 * C44497 * C44464 * C2280 -
                    ((C39732 * C9361 + C39501 * C9683 + C39731 * C2695 +
                      C39500 * C3028 + C39730 * C648 + C39499 * C1029) *
                         C44407 +
                     (C39732 * C9357 + C39501 * C9681 + C39731 * C2689 +
                      C39500 * C3025 + C39730 * C642 + C39499 * C1026) *
                         C2283) *
                        C44395 * C44497 * C44464 * C2281 +
                    ((C39730 * C2284 + C39499 * C2551 + C39731 * C7507 +
                      C39500 * C7951 + C39732 * C23797 + C39501 * C24037) *
                         C2283 +
                     (C39730 * C2290 + C39499 * C2554 + C39731 * C7511 +
                      C39500 * C7953 + C39732 * C23799 + C39501 * C24038) *
                         C44407) *
                        C44395 * C44497 * C44464 * C2282)) /
                  (p * q * std::sqrt(p + q));
    d2eezy[76] += (2 * std::pow(Pi, 2.5) *
                   ((C39730 * C93 + C39499 * C437 + C39731 * C1232 +
                     C39500 * C1616 + C39732 * C4098 + C39501 * C4365) *
                        C2334 +
                    (C39730 * C152 + C39499 * C503 + C39731 * C1298 +
                     C39500 * C1688 + C39732 * C4148 + C39501 * C4409) *
                        C2280 -
                    (C39732 * C9357 + C39501 * C9681 + C39731 * C2689 +
                     C39500 * C3025 + C39730 * C642 + C39499 * C1026) *
                        C2335 -
                    (C39732 * C9415 + C39501 * C9735 + C39731 * C2751 +
                     C39500 * C3081 + C39730 * C709 + C39499 * C1095) *
                        C2281 +
                    (C39730 * C2284 + C39499 * C2551 + C39731 * C7507 +
                     C39500 * C7951 + C39732 * C23797 + C39501 * C24037) *
                        C2336 +
                    (C39730 * C2337 + C39499 * C2595 + C39731 * C7593 +
                     C39500 * C8031 + C39732 * C23839 + C39501 * C24077) *
                        C2282) *
                   C44395 * C44497 * C44407 * C44464) /
                  (p * q * std::sqrt(p + q));
    d2eezz[76] += (2 * std::pow(Pi, 2.5) *
                   (((C39730 * C93 + C39499 * C437 + C39731 * C1232 +
                      C39500 * C1616 + C39732 * C4098 + C39501 * C4365) *
                         C200 +
                     (C39730 * C201 + C39499 * C562 + C39731 * C1357 +
                      C39500 * C1749 + C39732 * C4195 + C39501 * C4450) *
                         C44464) *
                        C44395 * C44497 * C2280 -
                    ((C39732 * C9469 + C39501 * C9787 + C39731 * C2807 +
                      C39500 * C3134 + C39730 * C767 + C39499 * C1165) *
                         C44464 +
                     (C39732 * C9357 + C39501 * C9681 + C39731 * C2689 +
                      C39500 * C3025 + C39730 * C642 + C39499 * C1026) *
                         C200) *
                        C44395 * C44497 * C2281 +
                    ((C39730 * C2284 + C39499 * C2551 + C39731 * C7507 +
                      C39500 * C7951 + C39732 * C23797 + C39501 * C24037) *
                         C200 +
                     (C39730 * C2381 + C39499 * C2636 + C39731 * C7669 +
                      C39500 * C8102 + C39732 * C23879 + C39501 * C24116) *
                         C44464) *
                        C44395 * C44497 * C2282) *
                   C44407) /
                  (p * q * std::sqrt(p + q));
    d2eexx[77] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C20189 * C93 + C44395 * C98) * C2283 +
             (C20189 * C101 + C44395 * C108) * C44407) *
                C44497 * C39499 +
            (C27000 + C27001) * C44497 * C39500 +
            (C28871 + C28870) * C44497 * C39501) *
               C1227 -
           (((C20189 * C14563 + C44395 * C14565) * C44407 +
             (C20189 * C14559 + C44395 * C14561) * C2283) *
                C44497 * C39501 +
            (C28870 + C28871) * C44497 * C39500 +
            (C27001 + C27000) * C44497 * C39499) *
               C44599) *
              C1819 +
          ((C27002 * C44497 * C39499 + (C27011 + C27010) * C44497 * C39500 +
            ((C20189 * C28859 + C44395 * C28860) * C2283 +
             (C20189 * C28861 + C44395 * C28862) * C44407) *
                C44497 * C39501) *
               C44599 -
           ((C27010 + C27011) * C44497 * C39501 + C27007 * C44497 * C39500 +
            (C21971 + C21970) * C44497 * C39499) *
               C1227) *
              C44597)) /
        (p * q * std::sqrt(p + q));
    d2eexy[77] += (2 * std::pow(Pi, 2.5) *
                   ((((C20189 * C93 + C44395 * C98) * C1873 +
                      (C20189 * C152 + C44395 * C157) * C1819 - C20564 * C1874 -
                      C20638 * C44597) *
                         C44497 * C39499 +
                     (C27078 + C27079 - C27080 - C27081) * C44497 * C39500 +
                     (C41624 + C41625 - C41626 - C41627) * C44497 * C39501) *
                        C44407 * C1227 +
                    ((C27080 - (C27079 + C27078) + C27081) * C44497 * C39499 +
                     (C41626 - (C41625 + C41624) + C41627) * C44497 * C39500 +
                     ((C20189 * C28859 + C44395 * C28860) * C1874 -
                      ((C20189 * C14629 + C44395 * C14631) * C1819 +
                       (C20189 * C14559 + C44395 * C14561) * C1873) +
                      (C20189 * C28921 + C44395 * C28922) * C44597) *
                         C44497 * C39501) *
                        C44407 * C44599)) /
                  (p * q * std::sqrt(p + q));
    d2eexz[77] += (2 * std::pow(Pi, 2.5) *
                   ((((C20189 * C93 + C44395 * C98) * C1353 +
                      (C20189 * C201 + C44395 * C206) * C1227 - C25280 * C1354 -
                      C25438 * C44599) *
                         C44497 * C39499 +
                     (C25280 * C1353 + C25438 * C1227 - C28869 * C1354 -
                      C28985 * C44599) *
                         C44497 * C39500 +
                     (C28869 * C1353 + C28985 * C1227 -
                      (C20189 * C14559 + C44395 * C14561) * C1354 -
                      (C20189 * C14689 + C44395 * C14691) * C44599) *
                         C44497 * C39501) *
                        C1819 +
                    ((C22510 - (C22509 + C22508) + C22520) * C44497 * C39499 +
                     (C27157 - (C27156 + C27155) + C27161) * C44497 * C39500 +
                     ((C20189 * C28859 + C44395 * C28860) * C1354 -
                      (C27160 * C1227 + C27009 * C1353) +
                      (C20189 * C28980 + C44395 * C28981) * C44599) *
                         C44497 * C39501) *
                        C44597) *
                   C44407) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[77] += (2 * std::pow(Pi, 2.5) *
                   (((((C249 * C93 + C44497 * C250) * C2283 +
                       (C249 * C101 + C44497 * C255) * C44407) *
                          C39499 +
                      (C12952 + C12953) * C39500 + (C14763 + C14762) * C39501) *
                         C44395 * C1227 -
                     (((C249 * C14563 + C44497 * C14751) * C44407 +
                       (C249 * C14559 + C44497 * C14749) * C2283) *
                          C39501 +
                      (C14762 + C14763) * C39500 + (C12953 + C12952) * C39499) *
                         C44395 * C44599) *
                        C1819 +
                    (((C12964 + C12965) * C39499 + (C41734 + C41735) * C39500 +
                      ((C249 * C28859 + C44497 * C29035) * C2283 +
                       (C249 * C28861 + C44497 * C29036) * C44407) *
                          C39501) *
                         C44395 * C44599 -
                     ((C41735 + C41734) * C39501 + (C12965 + C12964) * C39500 +
                      ((C249 * C648 + C44497 * C827) * C44407 +
                       (C249 * C642 + C44497 * C824) * C2283) *
                          C39499) *
                         C44395 * C1227) *
                        C44597)) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[77] += (2 * std::pow(Pi, 2.5) *
                   ((((C249 * C93 + C44497 * C250) * C1873 +
                      (C249 * C152 + C44497 * C316) * C1819 -
                      (C249 * C642 + C44497 * C824) * C1874 -
                      (C249 * C709 + C44497 * C893) * C44597) *
                         C39499 +
                     (C13032 + C13033 - C13034 - C13038) * C39500 +
                     (C41786 + C41787 - C41788 - C41792) * C39501) *
                        C44395 * C44407 * C1227 +
                    ((C13034 - (C13033 + C13032) + C13038) * C39499 +
                     (C41788 - (C41787 + C41786) + C41792) * C39500 +
                     ((C249 * C28859 + C44497 * C29035) * C1874 -
                      ((C249 * C14629 + C44497 * C14813) * C1819 +
                       (C249 * C14559 + C44497 * C14749) * C1873) +
                      (C249 * C28921 + C44497 * C29099) * C44597) *
                         C39501) *
                        C44395 * C44407 * C44599)) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[77] += (2 * std::pow(Pi, 2.5) *
                   ((((C249 * C93 + C44497 * C250) * C1353 +
                      (C249 * C201 + C44497 * C376) * C1227 - C11258 * C1354 -
                      C11415 * C44599) *
                         C39499 +
                     (C11258 * C1353 + C11415 * C1227 - C14761 * C1354 -
                      C14875 * C44599) *
                         C39500 +
                     (C14761 * C1353 + C14875 * C1227 -
                      (C249 * C14559 + C44497 * C14749) * C1354 -
                      (C249 * C14689 + C44497 * C14870) * C44599) *
                         C39501) *
                        C44395 * C1819 +
                    ((C12962 * C1354 -
                      ((C249 * C767 + C44497 * C963) * C1227 +
                       (C249 * C642 + C44497 * C824) * C1353) +
                      C13107 * C44599) *
                         C39499 +
                     (C41732 * C1354 - (C13107 * C1227 + C12962 * C1353) +
                      C41845 * C44599) *
                         C39500 +
                     ((C249 * C28859 + C44497 * C29035) * C1354 -
                      (C41845 * C1227 + C41732 * C1353) +
                      (C249 * C28980 + C44497 * C29156) * C44599) *
                         C39501) *
                        C44395 * C44597) *
                   C44407) /
                  (p * q * std::sqrt(p + q));
    d2eezx[77] += (2 * std::pow(Pi, 2.5) *
                   ((((C39730 * C93 + C39499 * C437 + C39731 * C1232 +
                       C39500 * C1616 + C39732 * C4098 + C39501 * C4365) *
                          C2283 +
                      (C39730 * C101 + C39499 * C442 + C39731 * C1238 +
                       C39500 * C1619 + C39732 * C4104 + C39501 * C4368) *
                          C44407) *
                         C44395 * C44497 * C1227 -
                     ((C39732 * C14563 + C39501 * C14927 + C39731 * C4104 +
                       C39500 * C4368 + C39730 * C1238 + C39499 * C1619) *
                          C44407 +
                      (C39732 * C14559 + C39501 * C14925 + C39731 * C4098 +
                       C39500 * C4365 + C39730 * C1232 + C39499 * C1616) *
                          C2283) *
                         C44395 * C44497 * C44599) *
                        C1819 +
                    (((C39730 * C2689 + C39499 * C3025 + C39731 * C9357 +
                       C39500 * C9681 + C39732 * C28859 + C39501 * C29213) *
                          C2283 +
                      (C39730 * C2695 + C39499 * C3028 + C39731 * C9361 +
                       C39500 * C9683 + C39732 * C28861 + C39501 * C29214) *
                          C44407) *
                         C44395 * C44497 * C44599 -
                     ((C39732 * C9361 + C39501 * C9683 + C39731 * C2695 +
                       C39500 * C3028 + C39730 * C648 + C39499 * C1029) *
                          C44407 +
                      (C39732 * C9357 + C39501 * C9681 + C39731 * C2689 +
                       C39500 * C3025 + C39730 * C642 + C39499 * C1026) *
                          C2283) *
                         C44395 * C44497 * C1227) *
                        C44597)) /
                  (p * q * std::sqrt(p + q));
    d2eezy[77] += (2 * std::pow(Pi, 2.5) *
                   (((C39730 * C93 + C39499 * C437 + C39731 * C1232 +
                      C39500 * C1616 + C39732 * C4098 + C39501 * C4365) *
                         C1873 +
                     (C39730 * C152 + C39499 * C503 + C39731 * C1298 +
                      C39500 * C1688 + C39732 * C4148 + C39501 * C4409) *
                         C1819 -
                     (C39732 * C9357 + C39501 * C9681 + C39731 * C2689 +
                      C39500 * C3025 + C39730 * C642 + C39499 * C1026) *
                         C1874 -
                     (C39732 * C9415 + C39501 * C9735 + C39731 * C2751 +
                      C39500 * C3081 + C39730 * C709 + C39499 * C1095) *
                         C44597) *
                        C44395 * C44497 * C44407 * C1227 +
                    ((C39730 * C2689 + C39499 * C3025 + C39731 * C9357 +
                      C39500 * C9681 + C39732 * C28859 + C39501 * C29213) *
                         C1874 -
                     ((C39732 * C14629 + C39501 * C14979 + C39731 * C4148 +
                       C39500 * C4409 + C39730 * C1298 + C39499 * C1688) *
                          C1819 +
                      (C39732 * C14559 + C39501 * C14925 + C39731 * C4098 +
                       C39500 * C4365 + C39730 * C1232 + C39499 * C1616) *
                          C1873) +
                     (C39730 * C2751 + C39499 * C3081 + C39731 * C9415 +
                      C39500 * C9735 + C39732 * C28921 + C39501 * C29265) *
                         C44597) *
                        C44395 * C44497 * C44407 * C44599)) /
                  (p * q * std::sqrt(p + q));
    d2eezz[77] += (2 * std::pow(Pi, 2.5) *
                   (((C39730 * C93 + C39499 * C437 + C39731 * C1232 +
                      C39500 * C1616 + C39732 * C4098 + C39501 * C4365) *
                         C1353 +
                     (C39730 * C201 + C39499 * C562 + C39731 * C1357 +
                      C39500 * C1749 + C39732 * C4195 + C39501 * C4450) *
                         C1227 -
                     (C39732 * C14559 + C39501 * C14925 + C39731 * C4098 +
                      C39500 * C4365 + C39730 * C1232 + C39499 * C1616) *
                         C1354 -
                     (C39732 * C14689 + C39501 * C15031 + C39731 * C4195 +
                      C39500 * C4450 + C39730 * C1357 + C39499 * C1749) *
                         C44599) *
                        C44395 * C44497 * C1819 +
                    ((C39730 * C2689 + C39499 * C3025 + C39731 * C9357 +
                      C39500 * C9681 + C39732 * C28859 + C39501 * C29213) *
                         C1354 -
                     ((C39732 * C9469 + C39501 * C9787 + C39731 * C2807 +
                       C39500 * C3134 + C39730 * C767 + C39499 * C1165) *
                          C1227 +
                      (C39732 * C9357 + C39501 * C9681 + C39731 * C2689 +
                       C39500 * C3025 + C39730 * C642 + C39499 * C1026) *
                          C1353) +
                     (C39730 * C2807 + C39499 * C3134 + C39731 * C9469 +
                      C39500 * C9787 + C39732 * C28980 + C39501 * C29316) *
                         C44599) *
                        C44395 * C44497 * C44597) *
                   C44407) /
                  (p * q * std::sqrt(p + q));
    d2eexx[78] += (2 * std::pow(Pi, 2.5) *
                   ((((C20189 * C93 + C44395 * C98) * C1821 +
                      (C20189 * C101 + C44395 * C108) * C1817 -
                      (C20189 * C94 + C44395 * C99) * C1822 -
                      (C20189 * C102 + C44395 * C109) * C44595) *
                         C44497 * C39499 +
                     (C27672 + C27673 - C27674 - C27675) * C44497 * C39500 +
                     (C42046 + C42047 - C42048 - C42049) * C44497 * C39501) *
                        C3187 +
                    ((C27674 - (C27673 + C27672) + C27675) * C44497 * C39499 +
                     (C42048 - (C42047 + C42046) + C42049) * C44497 * C39500 +
                     ((C20189 * C14560 + C44395 * C14562) * C1822 -
                      ((C20189 * C14563 + C44395 * C14565) * C1817 +
                       (C20189 * C14559 + C44395 * C14561) * C1821) +
                      (C20189 * C14564 + C44395 * C14566) * C44595) *
                         C44497 * C39501) *
                        C44599) *
                   C44449) /
                  (p * q * std::sqrt(p + q));
    d2eexy[78] += (2 * std::pow(Pi, 2.5) *
                   (((((C20189 * C93 + C44395 * C98) * C151 +
                       (C20189 * C152 + C44395 * C157) * C44449) *
                          C44497 * C39499 +
                      (C25354 + C25366) * C44497 * C39500 +
                      (C28928 + C28930) * C44497 * C39501) *
                         C1817 -
                     ((C40374 + C40372) * C44497 * C39501 +
                      (C25367 + C25363) * C44497 * C39500 +
                      ((C20189 * C153 + C44395 * C158) * C44449 +
                       (C20189 * C94 + C44395 * C99) * C151) *
                          C44497 * C39499) *
                         C44595) *
                        C3187 +
                    (((C25363 + C25367) * C44497 * C39499 +
                      (C40372 + C40374) * C44497 * C39500 +
                      ((C20189 * C14560 + C44395 * C14562) * C151 +
                       (C20189 * C14630 + C44395 * C14632) * C44449) *
                          C44497 * C39501) *
                         C44595 -
                     (((C20189 * C14629 + C44395 * C14631) * C44449 +
                       (C20189 * C14559 + C44395 * C14561) * C151) *
                          C44497 * C39501 +
                      (C28930 + C28928) * C44497 * C39500 +
                      (C25366 + C25354) * C44497 * C39499) *
                         C1817) *
                        C44599)) /
                  (p * q * std::sqrt(p + q));
    d2eexz[78] += (2 * std::pow(Pi, 2.5) *
                   ((((C20189 * C93 + C44395 * C98) * C3289 +
                      (C20189 * C201 + C44395 * C206) * C3187 - C25280 * C3290 -
                      C25438 * C44599) *
                         C44497 * C39499 +
                     (C25280 * C3289 + C25438 * C3187 - C28869 * C3290 -
                      C28985 * C44599) *
                         C44497 * C39500 +
                     (C28869 * C3289 + C28985 * C3187 -
                      (C20189 * C14559 + C44395 * C14561) * C3290 -
                      (C20189 * C14689 + C44395 * C14691) * C44599) *
                         C44497 * C39501) *
                        C44449 * C1817 +
                    ((C25282 * C3290 -
                      ((C20189 * C202 + C44395 * C207) * C3187 +
                       (C20189 * C94 + C44395 * C99) * C3289) +
                      C25439 * C44599) *
                         C44497 * C39499 +
                     (C40316 * C3290 - (C25439 * C3187 + C25282 * C3289) +
                      C40427 * C44599) *
                         C44497 * C39500 +
                     ((C20189 * C14560 + C44395 * C14562) * C3290 -
                      (C40427 * C3187 + C40316 * C3289) +
                      (C20189 * C14690 + C44395 * C14692) * C44599) *
                         C44497 * C39501) *
                        C44449 * C44595)) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[78] += (2 * std::pow(Pi, 2.5) *
                   ((((C249 * C93 + C44497 * C250) * C1821 +
                      (C249 * C101 + C44497 * C255) * C1817 - C273 * C1822 -
                      C274 * C44595) *
                         C39499 +
                     (C13570 + C13571 - C13572 - C13573) * C39500 +
                     (C42200 + C42201 - C42202 - C42203) * C39501) *
                        C44395 * C3187 +
                    ((C13572 - (C13571 + C13570) + C13573) * C39499 +
                     (C42202 - (C42201 + C42200) + C42203) * C39500 +
                     ((C249 * C14560 + C44497 * C14750) * C1822 -
                      ((C249 * C14563 + C44497 * C14751) * C1817 +
                       (C249 * C14559 + C44497 * C14749) * C1821) +
                      (C249 * C14564 + C44497 * C14752) * C44595) *
                         C39501) *
                        C44395 * C44599) *
                   C44449) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[78] += (2 * std::pow(Pi, 2.5) *
                   (((((C249 * C93 + C44497 * C250) * C151 +
                       (C249 * C152 + C44497 * C316) * C44449) *
                          C39499 +
                      (C11330 + C11340) * C39500 + (C14818 + C14820) * C39501) *
                         C44395 * C1817 -
                     ((C11341 + C11335) * C39501 + C11334 * C39500 +
                      (C334 + C322) * C39499) *
                         C44395 * C44595) *
                        C3187 +
                    ((C11333 * C39499 + (C11335 + C11341) * C39500 +
                      ((C249 * C14560 + C44497 * C14750) * C151 +
                       (C249 * C14630 + C44497 * C14814) * C44449) *
                          C39501) *
                         C44395 * C44595 -
                     (((C249 * C14629 + C44497 * C14813) * C44449 +
                       (C249 * C14559 + C44497 * C14749) * C151) *
                          C39501 +
                      (C14820 + C14818) * C39500 + (C11340 + C11330) * C39499) *
                         C44395 * C1817) *
                        C44599)) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[78] += (2 * std::pow(Pi, 2.5) *
                   ((((C249 * C93 + C44497 * C250) * C3289 +
                      (C249 * C201 + C44497 * C376) * C3187 - C11258 * C3290 -
                      C11415 * C44599) *
                         C39499 +
                     (C11258 * C3289 + C11415 * C3187 - C14761 * C3290 -
                      C14875 * C44599) *
                         C39500 +
                     (C14761 * C3289 + C14875 * C3187 -
                      (C249 * C14559 + C44497 * C14749) * C3290 -
                      (C249 * C14689 + C44497 * C14870) * C44599) *
                         C39501) *
                        C44395 * C44449 * C1817 +
                    ((C3444 - (C3443 + C3442) + C3445) * C39499 +
                     (C13712 - (C13711 + C13710) + C13713) * C39500 +
                     ((C249 * C14560 + C44497 * C14750) * C3290 -
                      (C11416 * C3187 + C11260 * C3289) +
                      (C249 * C14690 + C44497 * C14871) * C44599) *
                         C39501) *
                        C44395 * C44449 * C44595)) /
                  (p * q * std::sqrt(p + q));
    d2eezx[78] += (2 * std::pow(Pi, 2.5) *
                   (((C39730 * C93 + C39499 * C437 + C39731 * C1232 +
                      C39500 * C1616 + C39732 * C4098 + C39501 * C4365) *
                         C1821 +
                     (C39730 * C101 + C39499 * C442 + C39731 * C1238 +
                      C39500 * C1619 + C39732 * C4104 + C39501 * C4368) *
                         C1817 -
                     (C39732 * C4099 + C39501 * C4366 + C39731 * C1229 +
                      C39500 * C1615 + C39730 * C94 + C39499 * C438) *
                         C1822 -
                     (C39732 * C4105 + C39501 * C4369 + C39731 * C1237 +
                      C39500 * C1620 + C39730 * C102 + C39499 * C443) *
                         C44595) *
                        C44395 * C44497 * C3187 +
                    ((C39730 * C1229 + C39499 * C1615 + C39731 * C4099 +
                      C39500 * C4366 + C39732 * C14560 + C39501 * C14926) *
                         C1822 -
                     ((C39732 * C14563 + C39501 * C14927 + C39731 * C4104 +
                       C39500 * C4368 + C39730 * C1238 + C39499 * C1619) *
                          C1817 +
                      (C39732 * C14559 + C39501 * C14925 + C39731 * C4098 +
                       C39500 * C4365 + C39730 * C1232 + C39499 * C1616) *
                          C1821) +
                     (C39730 * C1237 + C39499 * C1620 + C39731 * C4105 +
                      C39500 * C4369 + C39732 * C14564 + C39501 * C14928) *
                         C44595) *
                        C44395 * C44497 * C44599) *
                   C44449) /
                  (p * q * std::sqrt(p + q));
    d2eezy[78] += (2 * std::pow(Pi, 2.5) *
                   ((((C39730 * C93 + C39499 * C437 + C39731 * C1232 +
                       C39500 * C1616 + C39732 * C4098 + C39501 * C4365) *
                          C151 +
                      (C39730 * C152 + C39499 * C503 + C39731 * C1298 +
                       C39500 * C1688 + C39732 * C4148 + C39501 * C4409) *
                          C44449) *
                         C44395 * C44497 * C1817 -
                     ((C39732 * C4149 + C39501 * C4410 + C39731 * C1295 +
                       C39500 * C1685 + C39730 * C153 + C39499 * C504) *
                          C44449 +
                      (C39732 * C4099 + C39501 * C4366 + C39731 * C1229 +
                       C39500 * C1615 + C39730 * C94 + C39499 * C438) *
                          C151) *
                         C44395 * C44497 * C44595) *
                        C3187 +
                    (((C39730 * C1229 + C39499 * C1615 + C39731 * C4099 +
                       C39500 * C4366 + C39732 * C14560 + C39501 * C14926) *
                          C151 +
                      (C39730 * C1295 + C39499 * C1685 + C39731 * C4149 +
                       C39500 * C4410 + C39732 * C14630 + C39501 * C14980) *
                          C44449) *
                         C44395 * C44497 * C44595 -
                     ((C39732 * C14629 + C39501 * C14979 + C39731 * C4148 +
                       C39500 * C4409 + C39730 * C1298 + C39499 * C1688) *
                          C44449 +
                      (C39732 * C14559 + C39501 * C14925 + C39731 * C4098 +
                       C39500 * C4365 + C39730 * C1232 + C39499 * C1616) *
                          C151) *
                         C44395 * C44497 * C1817) *
                        C44599)) /
                  (p * q * std::sqrt(p + q));
    d2eezz[78] += (2 * std::pow(Pi, 2.5) *
                   (((C39730 * C93 + C39499 * C437 + C39731 * C1232 +
                      C39500 * C1616 + C39732 * C4098 + C39501 * C4365) *
                         C3289 +
                     (C39730 * C201 + C39499 * C562 + C39731 * C1357 +
                      C39500 * C1749 + C39732 * C4195 + C39501 * C4450) *
                         C3187 -
                     (C39732 * C14559 + C39501 * C14925 + C39731 * C4098 +
                      C39500 * C4365 + C39730 * C1232 + C39499 * C1616) *
                         C3290 -
                     (C39732 * C14689 + C39501 * C15031 + C39731 * C4195 +
                      C39500 * C4450 + C39730 * C1357 + C39499 * C1749) *
                         C44599) *
                        C44395 * C44497 * C44449 * C1817 +
                    ((C39730 * C1229 + C39499 * C1615 + C39731 * C4099 +
                      C39500 * C4366 + C39732 * C14560 + C39501 * C14926) *
                         C3290 -
                     ((C39732 * C4196 + C39501 * C4451 + C39731 * C1356 +
                       C39500 * C1750 + C39730 * C202 + C39499 * C563) *
                          C3187 +
                      (C39732 * C4099 + C39501 * C4366 + C39731 * C1229 +
                       C39500 * C1615 + C39730 * C94 + C39499 * C438) *
                          C3289) +
                     (C39730 * C1356 + C39499 * C1750 + C39731 * C4196 +
                      C39500 * C4451 + C39732 * C14690 + C39501 * C15032) *
                         C44599) *
                        C44395 * C44497 * C44449 * C44595)) /
                  (p * q * std::sqrt(p + q));
    d2eexx[79] +=
        (2 * std::pow(Pi, 2.5) *
         (((((C20189 * C93 + C44395 * C98) * C2283 +
             (C20189 * C101 + C44395 * C108) * C44407) *
                C44497 * C39499 +
            (C27000 + C27001) * C44497 * C39500 +
            (C28871 + C28870) * C44497 * C39501) *
               C3187 -
           (((C20189 * C14563 + C44395 * C14565) * C44407 +
             (C20189 * C14559 + C44395 * C14561) * C2283) *
                C44497 * C39501 +
            (C28870 + C28871) * C44497 * C39500 +
            (C27001 + C27000) * C44497 * C39499) *
               C44599) *
              C635 +
          ((C27002 * C44497 * C39499 + (C27011 + C27010) * C44497 * C39500 +
            ((C20189 * C28859 + C44395 * C28860) * C2283 +
             (C20189 * C28861 + C44395 * C28862) * C44407) *
                C44497 * C39501) *
               C44599 -
           ((C27010 + C27011) * C44497 * C39501 + C27007 * C44497 * C39500 +
            (C21971 + C21970) * C44497 * C39499) *
               C3187) *
              C44597)) /
        (p * q * std::sqrt(p + q));
    d2eexy[79] += (2 * std::pow(Pi, 2.5) *
                   ((((C20189 * C93 + C44395 * C98) * C705 +
                      (C20189 * C152 + C44395 * C157) * C635 - C20564 * C706 -
                      C20638 * C44597) *
                         C44497 * C39499 +
                     (C28336 + C28337 - C28338 - C28339) * C44497 * C39500 +
                     (C42554 + C42555 - C42556 - C42557) * C44497 * C39501) *
                        C44407 * C3187 +
                    ((C28338 - (C28337 + C28336) + C28339) * C44497 * C39499 +
                     (C42556 - (C42555 + C42554) + C42557) * C44497 * C39500 +
                     ((C20189 * C28859 + C44395 * C28860) * C706 -
                      ((C20189 * C14629 + C44395 * C14631) * C635 +
                       (C20189 * C14559 + C44395 * C14561) * C705) +
                      (C20189 * C28921 + C44395 * C28922) * C44597) *
                         C44497 * C39501) *
                        C44407 * C44599)) /
                  (p * q * std::sqrt(p + q));
    d2eexz[79] += (2 * std::pow(Pi, 2.5) *
                   ((((C20189 * C93 + C44395 * C98) * C3289 +
                      (C20189 * C201 + C44395 * C206) * C3187 - C25280 * C3290 -
                      C25438 * C44599) *
                         C44497 * C39499 +
                     (C25280 * C3289 + C25438 * C3187 - C28869 * C3290 -
                      C28985 * C44599) *
                         C44497 * C39500 +
                     (C28869 * C3289 + C28985 * C3187 -
                      (C20189 * C14559 + C44395 * C14561) * C3290 -
                      (C20189 * C14689 + C44395 * C14691) * C44599) *
                         C44497 * C39501) *
                        C635 +
                    ((C23450 - (C23449 + C23448) + C23451) * C44497 * C39499 +
                     (C28412 - (C28411 + C28410) + C28413) * C44497 * C39500 +
                     ((C20189 * C28859 + C44395 * C28860) * C3290 -
                      (C27160 * C3187 + C27009 * C3289) +
                      (C20189 * C28980 + C44395 * C28981) * C44599) *
                         C44497 * C39501) *
                        C44597) *
                   C44407) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[79] += (2 * std::pow(Pi, 2.5) *
                   (((((C249 * C93 + C44497 * C250) * C2283 +
                       (C249 * C101 + C44497 * C255) * C44407) *
                          C39499 +
                      (C12952 + C12953) * C39500 + (C14763 + C14762) * C39501) *
                         C44395 * C3187 -
                     (((C249 * C14563 + C44497 * C14751) * C44407 +
                       (C249 * C14559 + C44497 * C14749) * C2283) *
                          C39501 +
                      (C14762 + C14763) * C39500 + (C12953 + C12952) * C39499) *
                         C44395 * C44599) *
                        C635 +
                    (((C12964 + C12965) * C39499 + (C41734 + C41735) * C39500 +
                      ((C249 * C28859 + C44497 * C29035) * C2283 +
                       (C249 * C28861 + C44497 * C29036) * C44407) *
                          C39501) *
                         C44395 * C44599 -
                     ((C41735 + C41734) * C39501 + (C12965 + C12964) * C39500 +
                      ((C249 * C648 + C44497 * C827) * C44407 +
                       (C249 * C642 + C44497 * C824) * C2283) *
                          C39499) *
                         C44395 * C3187) *
                        C44597)) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[79] += (2 * std::pow(Pi, 2.5) *
                   ((((C249 * C93 + C44497 * C250) * C705 +
                      (C249 * C152 + C44497 * C316) * C635 -
                      (C249 * C642 + C44497 * C824) * C706 -
                      (C249 * C709 + C44497 * C893) * C44597) *
                         C39499 +
                     (C14242 + C14243 - C14244 - C14245) * C39500 +
                     (C42708 + C42709 - C42710 - C42711) * C39501) *
                        C44395 * C44407 * C3187 +
                    ((C14244 - (C14243 + C14242) + C14245) * C39499 +
                     (C42710 - (C42709 + C42708) + C42711) * C39500 +
                     ((C249 * C28859 + C44497 * C29035) * C706 -
                      ((C249 * C14629 + C44497 * C14813) * C635 +
                       (C249 * C14559 + C44497 * C14749) * C705) +
                      (C249 * C28921 + C44497 * C29099) * C44597) *
                         C39501) *
                        C44395 * C44407 * C44599)) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[79] += (2 * std::pow(Pi, 2.5) *
                   ((((C249 * C93 + C44497 * C250) * C3289 +
                      (C249 * C201 + C44497 * C376) * C3187 - C11258 * C3290 -
                      C11415 * C44599) *
                         C39499 +
                     (C11258 * C3289 + C11415 * C3187 - C14761 * C3290 -
                      C14875 * C44599) *
                         C39500 +
                     (C14761 * C3289 + C14875 * C3187 -
                      (C249 * C14559 + C44497 * C14749) * C3290 -
                      (C249 * C14689 + C44497 * C14870) * C44599) *
                         C39501) *
                        C44395 * C635 +
                    ((C12962 * C3290 -
                      ((C249 * C767 + C44497 * C963) * C3187 +
                       (C249 * C642 + C44497 * C824) * C3289) +
                      C13107 * C44599) *
                         C39499 +
                     (C41732 * C3290 - (C13107 * C3187 + C12962 * C3289) +
                      C41845 * C44599) *
                         C39500 +
                     ((C249 * C28859 + C44497 * C29035) * C3290 -
                      (C41845 * C3187 + C41732 * C3289) +
                      (C249 * C28980 + C44497 * C29156) * C44599) *
                         C39501) *
                        C44395 * C44597) *
                   C44407) /
                  (p * q * std::sqrt(p + q));
    d2eezx[79] += (2 * std::pow(Pi, 2.5) *
                   ((((C39730 * C93 + C39499 * C437 + C39731 * C1232 +
                       C39500 * C1616 + C39732 * C4098 + C39501 * C4365) *
                          C2283 +
                      (C39730 * C101 + C39499 * C442 + C39731 * C1238 +
                       C39500 * C1619 + C39732 * C4104 + C39501 * C4368) *
                          C44407) *
                         C44395 * C44497 * C3187 -
                     ((C39732 * C14563 + C39501 * C14927 + C39731 * C4104 +
                       C39500 * C4368 + C39730 * C1238 + C39499 * C1619) *
                          C44407 +
                      (C39732 * C14559 + C39501 * C14925 + C39731 * C4098 +
                       C39500 * C4365 + C39730 * C1232 + C39499 * C1616) *
                          C2283) *
                         C44395 * C44497 * C44599) *
                        C635 +
                    (((C39730 * C2689 + C39499 * C3025 + C39731 * C9357 +
                       C39500 * C9681 + C39732 * C28859 + C39501 * C29213) *
                          C2283 +
                      (C39730 * C2695 + C39499 * C3028 + C39731 * C9361 +
                       C39500 * C9683 + C39732 * C28861 + C39501 * C29214) *
                          C44407) *
                         C44395 * C44497 * C44599 -
                     ((C39732 * C9361 + C39501 * C9683 + C39731 * C2695 +
                       C39500 * C3028 + C39730 * C648 + C39499 * C1029) *
                          C44407 +
                      (C39732 * C9357 + C39501 * C9681 + C39731 * C2689 +
                       C39500 * C3025 + C39730 * C642 + C39499 * C1026) *
                          C2283) *
                         C44395 * C44497 * C3187) *
                        C44597)) /
                  (p * q * std::sqrt(p + q));
    d2eezy[79] += (2 * std::pow(Pi, 2.5) *
                   (((C39730 * C93 + C39499 * C437 + C39731 * C1232 +
                      C39500 * C1616 + C39732 * C4098 + C39501 * C4365) *
                         C705 +
                     (C39730 * C152 + C39499 * C503 + C39731 * C1298 +
                      C39500 * C1688 + C39732 * C4148 + C39501 * C4409) *
                         C635 -
                     (C39732 * C9357 + C39501 * C9681 + C39731 * C2689 +
                      C39500 * C3025 + C39730 * C642 + C39499 * C1026) *
                         C706 -
                     (C39732 * C9415 + C39501 * C9735 + C39731 * C2751 +
                      C39500 * C3081 + C39730 * C709 + C39499 * C1095) *
                         C44597) *
                        C44395 * C44497 * C44407 * C3187 +
                    ((C39730 * C2689 + C39499 * C3025 + C39731 * C9357 +
                      C39500 * C9681 + C39732 * C28859 + C39501 * C29213) *
                         C706 -
                     ((C39732 * C14629 + C39501 * C14979 + C39731 * C4148 +
                       C39500 * C4409 + C39730 * C1298 + C39499 * C1688) *
                          C635 +
                      (C39732 * C14559 + C39501 * C14925 + C39731 * C4098 +
                       C39500 * C4365 + C39730 * C1232 + C39499 * C1616) *
                          C705) +
                     (C39730 * C2751 + C39499 * C3081 + C39731 * C9415 +
                      C39500 * C9735 + C39732 * C28921 + C39501 * C29265) *
                         C44597) *
                        C44395 * C44497 * C44407 * C44599)) /
                  (p * q * std::sqrt(p + q));
    d2eezz[79] += (2 * std::pow(Pi, 2.5) *
                   (((C39730 * C93 + C39499 * C437 + C39731 * C1232 +
                      C39500 * C1616 + C39732 * C4098 + C39501 * C4365) *
                         C3289 +
                     (C39730 * C201 + C39499 * C562 + C39731 * C1357 +
                      C39500 * C1749 + C39732 * C4195 + C39501 * C4450) *
                         C3187 -
                     (C39732 * C14559 + C39501 * C14925 + C39731 * C4098 +
                      C39500 * C4365 + C39730 * C1232 + C39499 * C1616) *
                         C3290 -
                     (C39732 * C14689 + C39501 * C15031 + C39731 * C4195 +
                      C39500 * C4450 + C39730 * C1357 + C39499 * C1749) *
                         C44599) *
                        C44395 * C44497 * C635 +
                    ((C39730 * C2689 + C39499 * C3025 + C39731 * C9357 +
                      C39500 * C9681 + C39732 * C28859 + C39501 * C29213) *
                         C3290 -
                     ((C39732 * C9469 + C39501 * C9787 + C39731 * C2807 +
                       C39500 * C3134 + C39730 * C767 + C39499 * C1165) *
                          C3187 +
                      (C39732 * C9357 + C39501 * C9681 + C39731 * C2689 +
                       C39500 * C3025 + C39730 * C642 + C39499 * C1026) *
                          C3289) +
                     (C39730 * C2807 + C39499 * C3134 + C39731 * C9469 +
                      C39500 * C9787 + C39732 * C28980 + C39501 * C29316) *
                         C44599) *
                        C44395 * C44497 * C44597) *
                   C44407) /
                  (p * q * std::sqrt(p + q));
    d2eexx[80] += (2 * std::pow(Pi, 2.5) *
                   ((((C20189 * C93 + C44395 * C98) * C2283 +
                      (C20189 * C101 + C44395 * C108) * C44407) *
                         C44497 * C39499 +
                     (C27000 + C27001) * C44497 * C39500 + C42959 * C39501) *
                        C4095 -
                    ((C42962 + C42963) * C44497 * C39501 +
                     (C28870 + C28871) * C44497 * C39500 +
                     (C27001 + C27000) * C44497 * C39499) *
                        C4096 +
                    (C42959 * C39499 + (C42963 + C42962) * C44497 * C39500 +
                     ((C20189 * C42949 + C44395 * C42950) * C2283 +
                      (C20189 * C42951 + C44395 * C42952) * C44407) *
                         C44497 * C39501) *
                        C4097) *
                   C44449) /
                  (p * q * std::sqrt(p + q));
    d2eexy[80] += (2 * std::pow(Pi, 2.5) *
                   ((((C20189 * C93 + C44395 * C98) * C151 +
                      (C20189 * C152 + C44395 * C157) * C44449) *
                         C44497 * C39499 +
                     (C25354 + C25366) * C44497 * C39500 + C43008 * C39501) *
                        C44407 * C4095 -
                    ((C43010 + C43007) * C44497 * C39501 +
                     (C28930 + C28928) * C44497 * C39500 +
                     (C25366 + C25354) * C44497 * C39499) *
                        C44407 * C4096 +
                    (C43008 * C39499 + (C43007 + C43010) * C44497 * C39500 +
                     ((C20189 * C42949 + C44395 * C42950) * C151 +
                      (C20189 * C43001 + C44395 * C43002) * C44449) *
                         C44497 * C39501) *
                        C44407 * C4097)) /
                  (p * q * std::sqrt(p + q));
    d2eexz[80] +=
        (2 * std::pow(Pi, 2.5) *
         (((C20189 * C93 + C44395 * C98) * C4192 +
           (C20189 * C201 + C44395 * C206) * C4095 - C25280 * C4193 -
           C25438 * C4096 + C28869 * C4194 + C28985 * C4097) *
              C44497 * C39499 +
          (C25280 * C4192 + C25438 * C4095 - C28869 * C4193 - C28985 * C4096 +
           C42961 * C4194 + C43053 * C4097) *
              C44497 * C39500 +
          (C28869 * C4192 + C28985 * C4095 - C42961 * C4193 - C43053 * C4096 +
           (C20189 * C42949 + C44395 * C42950) * C4194 +
           (C20189 * C43048 + C44395 * C43049) * C4097) *
              C44497 * C39501) *
         C44449 * C44407) /
        (p * q * std::sqrt(p + q));
    d2eeyx[80] += (2 * std::pow(Pi, 2.5) *
                   ((((C249 * C93 + C44497 * C250) * C2283 +
                      (C249 * C101 + C44497 * C255) * C44407) *
                         C39499 +
                     (C12952 + C12953) * C39500 + C43094 * C39501) *
                        C44395 * C4095 -
                    ((C43101 + C43102) * C39501 + (C14762 + C14763) * C39500 +
                     (C12953 + C12952) * C39499) *
                        C44395 * C4096 +
                    (C43094 * C39499 + (C43102 + C43101) * C39500 +
                     ((C249 * C42949 + C44497 * C43091) * C2283 +
                      (C249 * C42951 + C44497 * C43092) * C44407) *
                         C39501) *
                        C44395 * C4097) *
                   C44449) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[80] += (2 * std::pow(Pi, 2.5) *
                   ((((C249 * C93 + C44497 * C250) * C151 +
                      (C249 * C152 + C44497 * C316) * C44449) *
                         C39499 +
                     (C11330 + C11340) * C39500 + C43142 * C39501) *
                        C44395 * C44407 * C4095 -
                    ((C43147 + C43145) * C39501 + (C14820 + C14818) * C39500 +
                     (C11340 + C11330) * C39499) *
                        C44395 * C44407 * C4096 +
                    (C43142 * C39499 + (C43145 + C43147) * C39500 +
                     ((C249 * C42949 + C44497 * C43091) * C151 +
                      (C249 * C43001 + C44497 * C43140) * C44449) *
                         C39501) *
                        C44395 * C44407 * C4097)) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[80] +=
        (2 * std::pow(Pi, 2.5) *
         (((C249 * C93 + C44497 * C250) * C4192 +
           (C249 * C201 + C44497 * C376) * C4095 - C11258 * C4193 -
           C11415 * C4096 + C14761 * C4194 + C14875 * C4097) *
              C39499 +
          (C11258 * C4192 + C11415 * C4095 - C14761 * C4193 - C14875 * C4096 +
           C43100 * C4194 + C43189 * C4097) *
              C39500 +
          (C14761 * C4192 + C14875 * C4095 - C43100 * C4193 - C43189 * C4096 +
           (C249 * C42949 + C44497 * C43091) * C4194 +
           (C249 * C43048 + C44497 * C43185) * C4097) *
              C39501) *
         C44395 * C44449 * C44407) /
        (p * q * std::sqrt(p + q));
    d2eezx[80] += (2 * std::pow(Pi, 2.5) *
                   (((C39730 * C93 + C39499 * C437 + C39731 * C1232 +
                      C39500 * C1616 + C39732 * C4098 + C39501 * C4365) *
                         C2283 +
                     (C39730 * C101 + C39499 * C442 + C39731 * C1238 +
                      C39500 * C1619 + C39732 * C4104 + C39501 * C4368) *
                         C44407) *
                        C44395 * C44497 * C4095 -
                    ((C39732 * C14563 + C39501 * C14927 + C39731 * C4104 +
                      C39500 * C4368 + C39730 * C1238 + C39499 * C1619) *
                         C44407 +
                     (C39732 * C14559 + C39501 * C14925 + C39731 * C4098 +
                      C39500 * C4365 + C39730 * C1232 + C39499 * C1616) *
                         C2283) *
                        C44395 * C44497 * C4096 +
                    ((C39730 * C4098 + C39499 * C4365 + C39731 * C14559 +
                      C39500 * C14925 + C39732 * C42949 + C39501 * C43227) *
                         C2283 +
                     (C39730 * C4104 + C39499 * C4368 + C39731 * C14563 +
                      C39500 * C14927 + C39732 * C42951 + C39501 * C43228) *
                         C44407) *
                        C44395 * C44497 * C4097) *
                   C44449) /
                  (p * q * std::sqrt(p + q));
    d2eezy[80] += (2 * std::pow(Pi, 2.5) *
                   (((C39730 * C93 + C39499 * C437 + C39731 * C1232 +
                      C39500 * C1616 + C39732 * C4098 + C39501 * C4365) *
                         C151 +
                     (C39730 * C152 + C39499 * C503 + C39731 * C1298 +
                      C39500 * C1688 + C39732 * C4148 + C39501 * C4409) *
                         C44449) *
                        C44395 * C44497 * C44407 * C4095 -
                    ((C39732 * C14629 + C39501 * C14979 + C39731 * C4148 +
                      C39500 * C4409 + C39730 * C1298 + C39499 * C1688) *
                         C44449 +
                     (C39732 * C14559 + C39501 * C14925 + C39731 * C4098 +
                      C39500 * C4365 + C39730 * C1232 + C39499 * C1616) *
                         C151) *
                        C44395 * C44497 * C44407 * C4096 +
                    ((C39730 * C4098 + C39499 * C4365 + C39731 * C14559 +
                      C39500 * C14925 + C39732 * C42949 + C39501 * C43227) *
                         C151 +
                     (C39730 * C4148 + C39499 * C4409 + C39731 * C14629 +
                      C39500 * C14979 + C39732 * C43001 + C39501 * C43267) *
                         C44449) *
                        C44395 * C44497 * C44407 * C4097)) /
                  (p * q * std::sqrt(p + q));
    d2eezz[80] += (2 * std::pow(Pi, 2.5) *
                   ((C39730 * C93 + C39499 * C437 + C39731 * C1232 +
                     C39500 * C1616 + C39732 * C4098 + C39501 * C4365) *
                        C4192 +
                    (C39730 * C201 + C39499 * C562 + C39731 * C1357 +
                     C39500 * C1749 + C39732 * C4195 + C39501 * C4450) *
                        C4095 -
                    (C39732 * C14559 + C39501 * C14925 + C39731 * C4098 +
                     C39500 * C4365 + C39730 * C1232 + C39499 * C1616) *
                        C4193 -
                    (C39732 * C14689 + C39501 * C15031 + C39731 * C4195 +
                     C39500 * C4450 + C39730 * C1357 + C39499 * C1749) *
                        C4096 +
                    (C39730 * C4098 + C39499 * C4365 + C39731 * C14559 +
                     C39500 * C14925 + C39732 * C42949 + C39501 * C43227) *
                        C4194 +
                    (C39730 * C4195 + C39499 * C4450 + C39731 * C14689 +
                     C39500 * C15031 + C39732 * C43048 + C39501 * C43306) *
                        C4097) *
                   C44395 * C44497 * C44449 * C44407) /
                  (p * q * std::sqrt(p + q));
    
}
